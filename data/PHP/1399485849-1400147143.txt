I wasn't, just hoping for one.
I used to agree with you. However, when I started using ORMs and code generation I began to recognize the value in having everything exactly the same. 
Thanks for responding. You're absolutely correct about the confusion surrounding MVC in web development. The myriad types of answers I'm receiving is not helping alleviate my confusions. So, just to clarify: 1.) Are you proposing I should have both a User model AND a UserCollection model, or just to do away with the User/singular version in any case where I will also need access to multiple User records? I also appreciate the mention of the DB schema naming. Quite a few responses have mentioned that my database table names should not be plural, but I agree, calling the table name User just seems goofy to me. That being said, if I were to rename my table User, it would make a lot more sense to me to have the User model be responsible for interacting with the whole table, whether it be creating a single row, fetching a single row, or fetching all the rows. I'm not sure why my brain is making that connection under those circumstances. 2.) Is that how I should be "looking" at my models? As a single class to control DB interaction for a single DB table? I realize I may also need models that have nothing to do with the DB, but by-and-large. Of course I can still access data from other tables via JOINS and what have you, but only if it fits into a method relating to records within that table. It would certainly simplify things, but it seems to be pushing the boundaries of the SRP to me, a bit. 
Continued here: https://github.com/pmjones/mvc-refinement
This is kind of the direction I am leaning towards, if I understand you correctly. So, if I need only one record, I would create my UserCollection object, and have it return an array with one database record in it, correct? And if I need multiple records, UserCollection can also return an array with multiple database records in it? And I will do-away with my User class entirely. I don't intend to use UserCollection as a factory, all of my database records are returned as arrays of the requested data.
Medium term you should change your script to process the CSV files in batches (100 rows per run for example) but you'll have to keep track of which rows were already processed, where to pick up etc. This would help you avoid running out of memory or hitting the execution limit in the future (when your CSV file becomes 9000 records or 38000 records) Long term, a better approach is to hand this task off to a separate worker script (something like beanstalkd or rabbitmq). 
I'm reading up on this, not sure that I can implement something similar, but I really like the idea.
if apache is telling you "internal server error" it likely is putting something in the logs about it. As jesse_dev mentioned it likely is just a timeout setting, but the logs can help confirm that so you are not just changing settings hoping it will work.
&gt; Postgres is many times faster when the DB is designed properly. Faster than what? Got some benchmarks? 
https://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md
This. The answer is complicated and depends on a lot of things.
my main issue is lost time honestly. im 55 minutes since vagrant up, and still not finished the composer update :/
This really isn't a tough one if you just think about it. A model typically represents one entity, in this case *one* user. Hence it should be singular, called `User`. A iterable list of `User` models should be called `Users`, or better yet, something like `UsersCollection`. And don't fall into the trap of naming your database tables singularly. A database table stores *multiple* entities. A row is singular, a table stores many rows and so it's plural.
But how are you getting your User objects into your UserCollection object to be returned? I'm assuming your UserCollection object is creating them inside it's methods? Or are you using the term "object" in a non-literal sense?
I'm not discussing this any further with someone who lacks the motivation to look up facts. It's obvious you don't know what you're talking about. http://en.wikipedia.org/wiki/Comparison_of_MySQL_database_engines
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Comparison of MySQL database engines**](https://en.wikipedia.org/wiki/Comparison%20of%20MySQL%20database%20engines): [](#sfw) --- &gt; &gt;This is a comparison between the available database engines for the [MySQL](https://en.wikipedia.org/wiki/MySQL) [database management system](https://en.wikipedia.org/wiki/Database_management_system) (DBMS). A __database engine__ (or "storage engine") is the underlying software component that a DBMS uses to [create, read, update and delete](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) (CRUD) [data](https://en.wikipedia.org/wiki/Data) from a [database](https://en.wikipedia.org/wiki/Database). &gt; --- ^Interesting: [^MySQL](https://en.wikipedia.org/wiki/MySQL) ^| [^InnoDB](https://en.wikipedia.org/wiki/InnoDB) ^| [^MyISAM](https://en.wikipedia.org/wiki/MyISAM) ^| [^Virtuoso ^Universal ^Server](https://en.wikipedia.org/wiki/Virtuoso_Universal_Server) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chc41eo) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chc41eo)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
You can enable error_reporting = E_ALL and display_errors = 1 in your php.ini, this will likely show you what's going on. As others have said, it's likely a timeout which can be adjusted as well in the php.ini.
The idea I'm having trouble grasping is this: *How are you getting the User objects inside of your UserCollection object to be returned?* Surely not through dependency injection? Is the UserCollection object acting as a factory too? So when you create a new UserCollection object, it will get all the records that need to be returned, create a new User model object for each found record, and then return an array of all User model objects (or store it as a property and make it available via another public method call)? 
I meant official distributions as in your website would say "here is an install procedure for X" in the same way it might say "here are packages for Debian". It sounds like you were doing that for Pagodabox in the past; how did you find that in terms of interest? 
Here's one public example: http://blog.page2rss.com/2007/01/postgresql-vs-mysql-performance.html I'll post more when I have time.
Thanks for the detailed reply. I was afraid of defining too many functions and future proofing, but your approach makes it easy for others to work with the classes once developed. I'll take this route, thanks again!
yeah, even if you could cover everything else, stuff like debug_zval_dump() and Reflection will be leaking the changes to the userland, so even if our release process rf(https://wiki.php.net/rfc/releaseprocess) would allow that we can break the source compatibility of every extension out there in a minor version, it would be still a no-go. And I'm fairly sure that there will be other changes as well, which makes sense doing together with the current refactoring, but have bigger impact on the userland.
aye, restarting networking did kick it in to life. But when it got to Symfony, it just kept saying downloading 100% three times, then failing. I re-ran it a few times (maybe 4 or 5) then just gave up for the night. So frustrating. Cheers for the tip though. Re: the digital ocean box, it's because it's only got 512mb of ram. They recommend 1gb, but 512 is doing the job for now, aside from two crashes on big commits (wordpress :/)
where did you heard that?
&gt; 2007 &gt; MySQL 5.0.24, innodb, no transactions. Now we have PostgreSQL 8.2.0. Server is PC-class Linux box: P4 2.8GHz, 1Gb memory, SATA disks Talk about ancient.
I know..and it's gotten a lot better since then
A couple of things here, you should be using mysqli_* functions now, not mysql_* - soon those ones won't work :) Next, you are doing a couple of things I don't agree with (but I'm no pro): - Why are you setting up a new blank $cars array[] if you're just setting it anyway? - Why are you configuring a $cars array[] at all if your goal is just to print the content? You could do one of two things here: $result = $mysqli-&gt;query($postQuery); while ($row = mysqli_fetch_array($result)) { print_r($row['posts']); } This will print your data out straight off the bat. $result = $mysqli-&gt;query($postQuery); $counter = 0; $cars = Array(); while ($row = mysqli_fetch_array($result)) { $cars[$counter] = $row['posts']; } print_r($cars); This will collate your data into an array and print the entire thing at once. EDIT: Updated to mysqli_
mysql vs mysqli vs PDO issues aside, on line 4, instead of $cars = , try $cars[] =
At our office we have to do this b/c we have an ancient deploy process that can only handle downloading an archive of our git repo, untarring, and copying. Here's our process: Add your .git directories to your gitignore so they don't get checked in as submodules: Add the following line to your `.gitignore`: vendor/.git Then, you can do composer updates at will. It works great. It's not pretty, as getting a fresh version of your vendor directory via composer install is always the best approach, but it will get you by.
because it's currently in the 5.7-dev branch. But this might as well be because that's the "latest" branch there is
You're not actually answering the question at all, just saying. I mean I had a burrito for lunch... but who really cares. 
You will need to re-organise your code to use mysqli_* instead of mysql_* before what I gave you will work, sorry to confuse you - it works slightly different than the old styles. I would strongly recommend you learn mysqli_* before going ahead with what you are doing, otherwise you'll be learning the old/wrong way of doing it anyway :) The php.net website has a lot of resources for the new functions. (and to answer your question, just change $mysqli-&gt;query() to mysql_query() and it should work)
You will need to read up on mysqli. First you would have to create the mysqli object instance before you can use the -&gt;query() method. Did you try replacing line 4 in your original code with $cars[] = $row['posts']; When pushing data into an array, you need empty brackets at the end of the variable.
But wait, how can I see information about a key that hasn't been published then? For instance, if I import the PGP key of a darknet drug dealer, a key that definitely hasn't been published on any keyservers, I can see the given name and email and comment.
The apache timeout is in httpd.conf Timeout = 300 Should be in /etc/apache2 on Debian type systems.
Are you getting a 500 error or a 504 error? As an aside, are you sure this task needs to go through a web server? Can't it run as a CLI job?
Nope, PGP public keys. For instance, here's a random drug dealer's PGP key and the result I got when I imported it. &gt;redacted@redacted:/redacted/redacted~ echo "-----BEGIN PGP PUBLIC KEY BLOCK----- &gt; &gt; Version: GnuPG v1.4.11 (GNU/Linux) &gt; &gt; mQENBFKgiD8BCADA+STPaVe8d+y+/yeAxBLVBhRfOFvFpOcMj4f7k0cBTzaFUiTC &gt; b9vzJUTyVRPadRKdiUWW8pMg2VeGlSIYkN/X32Ymy5luhpQLxJVLrhwOgLSslGU3 &gt; +tCVZ8CNBe5mcsxhKJAgXf+FiJYIzbPNWnyRDczSFD6K0AQvTfnBsdzUXHZTJbS9 &gt; uyE8vwDXslnzneJ7PnHt4RWorrYCyxkbI86FcSbTZAAjKsxQvX49xlXEuYQohV4Q &gt; NEO1mJMflnuAu494AG3aapf/gmEJ8pcKc2kl0HoCBqKjU7vuVeMDBpMYLyzFR7Xi &gt; 0X678AVwMY1T2ZhC9dP0iutEV9ah/2wBuGHrABEBAAG0JihUd28pIFN0cmFpbnog &gt; PDJTdHJhaW56QFNhZmUtbWFpbC5uZXQ+iQE5BBMBAgAjBQJSoIg/AhsDBwsJCAcD &gt; AgEGFQgCCQoLBBYCAwECHgECF4AACgkQPS7jDJ+rVnVgfwf+JjSC7CjwIU8URSZ8 &gt; auhe51zkr62j6cYJACdyQTO+hM1fDDLt9AA1bgB6cXwO2wp1rmhYyZgdx1e18pKC &gt; F5ZOR2glBQeIGiVHGupv6XWmsnhXSulc9Yye0zXrLALvD83ifrrzgilhxpsC+7qQ &gt; RfpLu08+HpALBj4optp4rXjpn/+s5TD4oDv4+cF0Rmw4Aka1p24nlWEkGqnbLZ3o &gt; CsHmvIVYECFN7v9xFU27GHYoLvdfIKPOWuIZFlG27svFnkLrFql+s9XjXvmYiS/I &gt; LsG2aIb8BK5VaxN5uZfryaUOEiBYL7HoPTGTxDaQVio9zWtzhvCUcRK4EcrFbBu2 &gt; iXaBw7kBDQRSoIg/AQgA11JTfe35hd0BnvLzCebjG5XkmYRX8TVmZayA1wiUba2R &gt; BPSMvcPb+u9WeMACT1y7Pc14ZL0ver74nrScGVW1/+HuggJ3Re7kVrc95oFNx/al &gt; KA7c9icdBUA8D8UB8BLTZ30V2YLxdrhQEEPdO9jsNgQBE1vEUAf+Qk4qSFlr3nL8 &gt; bntLZU+Y8iPtqTbq76iVhLKFIjnfX5YxnT2DrhzIM+Q+FUpVK6d3tAMBsUG0twDD &gt; L4gaK2SUd7A9pUmb3GAZG1vNDaQ8bw9Bh0mXMUEq6D6WGLyiEidIDsNcEgoY79nV &gt; 1QPE4sLK98vnO9eR0EL2+0rpgAwJ6d4B9+MqFs7B6wARAQABiQEfBBgBAgAJBQJS &gt; oIg/AhsMAAoJED0u4wyfq1Z12h8H/iWnknPyNigqP4+YXNYiM1bf0tYgq3M2389m &gt; t/7SX/XoEAXHtUsJWZDV8mw9BWuwvaOJjMEjmEL89qQ7R/qIcb3a6XpmWXeZrLSh &gt; XUTuq6jlXozJjCTY1qmpTVjc6yBQvM4ldUVeS2TRLzzleZNtPTLeL6o9lA2T6Jas &gt; 504vmoWAa1yliat5MrfqI0Nc5yWosTxqD2Jd/yQuhGjT0FUI6rQx6Oa87Nn0ara2 &gt; dmb42I6qpF0jiy3ohHwBmLW2JG0DwuizcDJPbCraGSHIcgCNkLsnr0vfYVPCvRkz &gt; 1uYB59XLmKU6JZ/2uTiVUDbRZUR041+uScVGx5twMIKK0GSDFoI= &gt; =SYaF &gt; -----END PGP PUBLIC KEY BLOCK-----" | gpg --import Output was &gt; gpg: key 9FAB5675: public key "(Two) Strainz &lt;2Strainz@Safe-mail.net&gt;" imported &gt; gpg: Total number processed: 1 &gt; gpg: imported: 1 (RSA: 1)
Gotcha. Did you see http://www.apache.org/dev/openpgp.html#find-key-id ?
If you want an example of this in action, look at the Varien_Object class in Magento.
Which is what? ORMs abstract table names away from you completely, so I'm not sure I follow.
Related http://www.lornajane.net/posts/2014/using-composer-without-gitignoring
there are no 5.7-dev branch. you are probably referring to master, as the php version number in the master branch is 5.7-dev. phpng isn't in master, but in a feature branch called phpng.
I know next to no PHP, so no. What alternative is there though that's near as good in functionality?
Ah, okay. I didn't realize that I could do that. Thank you!
Are you running the composer install within `vagrant ssh` or outside of it?
Models should be singular, they represent a single record of data, or related to a single database table. Tables should be plural, since they house multiple records. Controllers should be plural, since they represent multiple records.
ORMs will abstract away the DBMS implementation, but not the schema of the database itself. Quite the opposite, actually. Taking Doctrine as an example: You have a choice between convention and configuration. Doctrine's convention is to keep everything the same. If you've ever attempted to write code that knows what the plural/singular of every word is in every language, you'd know why :-) If you generate an entity class from a Customers table, it will create a class named Customers (which you don't want). If you use the default behavior to generate a table from an entity class named Customer, it will create a table named Customer. If you choose to shun the ORMs convention you would use docblock annotations or a metadata file (yml, xml) to configure the ORM with your schema. There's nothing wrong with that (I do it often for field names), but your db schema is definitely not abstracted away -- at least not until most of your entity code has been written or generated.
Some how file access seems to be very slow in a Virtual machine. Try using shared folders and run composer in the Host.
First, this is awesome! I was looking for an implementation of this the other week. However, I think one of your examples is wrong: $uri-&gt;expand('/search/{term:1}/{term}/{?q*,limit}', [ 'term' =&gt; 'john', 'q' =&gt; ['a', 'b'], 'limit' =&gt; 10, ]) &gt;&gt; '/search/j/john/?q=a,b&amp;limit=10' If you look at the Level 4 examples they show: {?list*} ?list=red&amp;list=green&amp;list=blue i.e., when you use the splat operator `*` it's supposed to repeat the key when used with the query-style expression. It's only supposed to use commas if you omit the splat. Although I think PHP actually prefers square-brackets, as in: ?list[]=red&amp;list[]=green&amp;list[]=blue Is there a syntax that would allow for that? 
It's not all the time that you would need a collection object. Normally you'd start out with just an array of objects and it will work just fine. However there are scenarios where the addition of a collection that is smarter than an array is called for. Let us say you have something like this: $users = $service-&gt;findAll(); if (count($users) == 10) { return new Response("Not enough users."); } foreach ($users as $user) { //Do stuff to $user... } Having findAll() return an array of ~100 user objects won't really hurt. But imagine if it grow beyond ~10,000? Consider the fact that you check the number of users in the system and respond differently depending on the results: do you really have to pull out complete objects just to check for that? No. Having 10,000 objects sitting in memory so that you can just count them is not efficient at all. A solution for this is to create smarter collections that can be treated and act like an array. This way when you call count() on it, you can just internally return the result of "SELECT COUNT(id) ..." or code it that it will only load the records ONLY when you you iterate through it. (You can even query for them chunk by chunk). All you have to do is implement \Countable and \Iterator and off you go. And the beautiful thing is that, you don't have to refactor existing consumers of your service's findAll() method (...at least most of the time)
The one the clients pay me the most.
I haven't seen this kind of hiring before. That's just awesome.
If a programmer can't Google the help docs and read the introduction he's going to have a bad time.
Are you sure whatever is in this: require('assets/dbConnect.php'); isn't overwriting this: $connection = new mysqli('localhost', "user", "pass", 'db'); When in doubt, add guerrilla debugging; before line 14: echo '&lt;pre&gt;$connection : ' . print_r($connection, true) . '&lt;/pre&gt;'; after line 14: echo '&lt;pre&gt;$result : ' . print_r($result, true) . '&lt;/pre&gt;'; 
--prefer-dist is your friend.
[RTFM](http://www.php.net/manual/en/) I really think this should be self explanatory.
So it appears there's an object, but there's an error. [connect_errno] =&gt; 2002 [connect_error] =&gt; No such file or directory Try commenting out the require line, and see if that changes anything?
You've got a fairly horrible approach here in a number of ways. First of all, you're using the extensions. PLEASE use PDO. It's not any harder to do, and it makes your code a whole lot nicer, more flexible, more maintainable and more secure. The immediate response of "I'm just learning for now" will be followed up by "Then learn right." Secondly $postQuery = 'SELECT posts FROM content ORDER BY date_entered DESC'; $titleQuery = 'SELECT postTitles FROM content ORDER BY date_entered DESC'; This is a concern to me. Though you have not used the second query I worry that you're actually going to do something with it. These queries do the same thing and should really be combined. You need to look into "separation of concerns". When you have queries mixed with html mixed with database connections you have a recipe for disaster. Help everyone (especially yourself) by packaging up different bits of functionality so they're together. For example, use a function to return the posts. I know that with such a simple page it's tempting to just lump it together like this, but that's what makes it such a nasty anti-pattern. TL;DR There's nothing about this that would stop it "working". The error you're getting is an unusual one. Normally you get something like "Authorisation denied" or "Database not found" but FILE not found is a specific issue. One I've seen before. This looks like you're using MacOS X, which has an issue with the location of its sockets file on the default setup of some types of DB. [This article](http://stackoverflow.com/questions/4219970/warning-mysql-connect-2002-no-such-file-or-directory-trying-to-connect-vi) covers it pretty well.
Is dbConnect actually in a folder called assets? If so is that the same folder the file you are calling it is in? If so get rid of the 'assets/' part off your require statement. The error is a file reference issue.
I put it all in the index file and now what you told me to put prints out: &lt;pre&gt;$connection : &lt;/pre&gt;&lt;pre&gt;$result : &lt;/pre&gt; 
Oh, I see; i was confused by your first post. So now it's not even making a connection; can you show me your whole code again? Also, you're doing the debugging for your benefit, not mine. Once debug shows something (or in this case, nothing!) think about what that means; try changing something and run again. Repeat till you close in on the problem. From the error, it seems like something is wrong with your database, though, and no amount of PHP debugging will fix that. Are you able to run mysql and get in to the database, and run the same queries?
yeah it would be nice if it was. First time im seeing that link so ill check it out.
&gt; First of all, you're using the extensions. PLEASE use PDO. It's not any harder to do, and it makes your code a whole lot nicer, more flexible, more maintainable and more secure. Can you explain what this means, or give an example? I'm an old PHP coder, and I'm not even familiar with PDO. One of the OP's problems is going to be that his old book doesn't cover PDO. Here's the PHP manual for PDO. http://www.php.net/manual/en/intro.pdo.php And here's an example: &lt;?php try { $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass); foreach($dbh-&gt;query('SELECT * from FOO') as $row) { print_r($row); } $dbh = null; } catch (PDOException $e) { print "Error!: " . $e-&gt;getMessage() . "&lt;br/&gt;"; die(); } ?&gt;
-$mysqli should be $connection -Move the debug for result BELOW the $result = call. -I assume your username and password and db name aren't user/pass/db, and you just changed those for us, right? &lt;?php $connection = new mysqli('localhost', 'user', 'pass', 'db'); echo '&lt;pre&gt;$connection : ' . print_r($connection, true) . '&lt;/pre&gt;'; $postQuery = 'SELECT posts FROM content ORDER BY date_entered DESC'; //this line isn't used yet //$titleQuery = 'SELECT postTitles FROM content ORDER BY date_entered DESC'; $result = $connection-&gt;query($postQuery); echo '&lt;pre&gt;$result : ' . print_r($result, true) . '&lt;/pre&gt;'; while ($row = mysqli_fetch_array($result)) { print_r($row['posts']); } ?&gt; 
I've built a few CRM's before and let me tell you it's not a small job. Of course it depends on your Spec and your Spec will change. Seeing as you want more than a standard CRM (-Customer relationship management -Accounts, payment gateways, billing and reconciliation -staff management, rostering and payroll -mobile app). A warning depending on how many developers you get and how good your project planning is. This could take a year or more to build from scratch. There are lot of CRM solutions out there and your not going to find one that has everything you need. Be very careful who you hire. A fast but non experienced developer can cost you more then a slow experienced developer. Start small!
You would hope that would happen on a default configuration. You are trying to write a log file to a public accessible directory. Ideally you don't want to allow this as it can allow exploits. What you should do is make a directory out of the web root that is writable by php/apache and put your log file there.
Im using network solutions and each database is given a unique server name... would that have to do with anything?
I don't think this is a major issue. The permissions can be adjust manually. PuPHPet gets you 95+% of the way of creating an entire server environment, and one can easily replicate over and over again to keep consistency amongst a team or between test and production environments. Also its much simpler then having to learn how to manually use vagrant, puppet and other tools that everyone on your team may not know. Also not 100% related but why write files into your webroot? That is asking for trouble.
Line 10 will now error out because of the rename from $mysqli -&gt; $connection.
No worries, though. I knew that much and changed it.
Sorry, fixed!
Oh sweet, I put in the server name instead of localhost and got a new error:access denied! So now let's figure this out...
Aha. 'localhost' should be the "unique server name", and 'db' should be the database name. (and user and pass should be your username and password). That smells like it could be causing this sort of error, maybe? //$connection = new mysqli('UNIQUE_SERVER_NAME', 'YOUR_USERNAME', 'YOUR_PASSWORD', 'YOUR_DB_NAME'); $connection = new mysqli('dbservname', 'fred', 'secret', 'mydata'); 
I'd rather not; I'd have to sftp to your server, and that's not a good thing. You're getting closer. Frustration is learning!
Remember, this is your DATABASE name, username, and password, which might be different from your login credentials?
You bet, good luck!
Check out Satis for an internal composer server. 
^ This is the best solution. I'm quite surprised it didn't come up earlier. composer install --prefer-dist composer update --prefer-dist If that still isn't good enough, why not just zip/tar the vendor dir instead? Then you can ssh/ftp/email it easily.
&gt; The permissions can be adjust manually. Yes, but isn't it weird that manually adjusting permissions is a necessary step in getting PuPHPet to work with two of the most popular frameworks out of the box? &gt; ...one can easily replicate over and over again... Not according to [the second issue I linked to](https://github.com/puphpet/puphpet/issues/713). &gt; ...its much simpler then having to learn how to manually use vagrant, puppet and other tools... Agreed. I think that's where most of the appeal comes from. &gt; ...why write files into your webroot? That is asking for trouble. Agreed. It was just for testing purposes.
Alternatively, maybe `{?list[]*}` would be a good syntax? Or `{?list[*]}`. This way you can be compliant *and* PHP-friendly (I wouldn't do it for the Node lib). The former might even work out of the box, but then you'd have to expand it with `['list[]'=&gt;['a','b']]` I imagine, which is a little awkward.
&gt; You are trying to write a log file to a public accessible directory. Indeed, I was trying to do that. Apparently I should have been more clear that I was doing that for testing purposes. I could have set up the .htaccess file to set the document root to something else and then have the writing take place one level up from the publicly accessible area and the problem would still exist. &gt; What you should do is make a directory out of the web root that is writable by php/apache and put your log file there. Yes, I could do that, but if I wanted to use CakePHP, I would have to do some customizations to it in order for this to work (unless I'm mistaken). It's set up like this: * app/tmp/cache &lt;-- Not publicly accessible * app/webroot/ &lt;-- Publicly accessible So you have the .htaccess file set up to point to app/webroot and you're good to go as far as security is concerned. But as soon as CakePHP tries to write to app/tmp/cache, problems happen.
&gt; Welcome to the world of good practices, where methods and classes are helping you and not designed to be aside while you do something "not lame". They offer no benefit in this case, except to add bloat to your class. That's what I mean by "lame". If your code has to do something special for particular states (as in your link), then yes, I agree, split them out. Otherwise, you're not adding any value. 
I have to adjust permissions every time I deploy a new project to a server, as I don't want to give the deploy script sudo to do it for me. This is not that much different. Vagrant is meant to be used as an emulation of the real server environment, not an app you can just drag and drop files into and make it work in the web browser. If you don't want/need an emulated server environment you may as well go back to using (X|W|M)AMP.
Wow, Daniel Kerr is really an ass.. 
Good post - on my "must read" list.
I know I am going to come across like a dick so let the down votes rain. Based on the questions and the comments it seems you are unfamiliar with webservers, php and their permissions. It's standard practice that you explicitly need to give the cache/logs directories permissions to be written to by your webserver user. It's even in every framework's manual to do and how to do this. An easy way of getting around this for development is by changing the webserver user to the vagrant user.
This. Though to me it sounds as if the OP is use to developing on Windows where the actual file permissions of the OS don't matter as much as those on Unix based systems.
Please elaborate. If I'm doing something that isn't good to do, saying "No" doesn't really help. People complain about the low quality of programmers these days (especially PHP developers) but then you get stuff like this that only perpetuates the problem. **EDIT:** Thanks for editing your comment to provide some more details. I am still interested in learning how setting up Apache to use app/webroot as the document root does not imply that the directories above app/webroot are now secure. Would you please explain that?
I actually usually use MAMP, though I have used WAMP in the past. With both, you can just clone/unzip CakePHP and it works
That explains a lot then. Since in this case and from what i recall (Haven't used WAMP/MAMP in a long time now) the reason they just work, is because the webserver and the files are all running/owned by the same user, the one you are currently logged into the machine as. This is not the case when it comes VMs created by PHPuppet nor typical server environments. Apache/PHP will nearly always be running as a different user compared to that which owns your files. So when it comes to writing to files you need to make sure that the permissions on Unix are set correctly to allow this. Either through the use of CHMOD or by setting the owner/group of the files to the same as apache (Not really the recommended approach imo). You are getting these errors because CakePHP is trying to write to a directory where it does not have the correct permission to do so. So you need to explicitly set your permissions. Thats the best i can really explain it simply in my current half asleep state
&gt; Would it be suitable to either add vagrant to the www-data group Someone should have just said yes to this. &gt; There is also this issue, which also looks like a major problem to me. It is a problem that PuPHPet is expected to magically manage unknowns. Betting that future changes won't break a configuration is a newbie error. You lock your deployment at specific versions and have to test whenever there is a change. This is basic project management. 
&gt;MyIsam doesn’t support foreign keys either, so all integrity and constraint checks are done with PHP in memory, **again approach I havent seen before in my career.** wat?? Well, he either has short career or is someone I would never hire. Otherwise, yeah, don't use it.
I (luckily) have almost zero experiences with CMSs. I try to avoid them at all cost. But if I ever had to use one, it would probably be bolt.cm
I spent a solid year of my life in OpenCart and it was a nightmare that didn't end till I left that job. And let me be clear, there (at least were) some huge security holes in OC. My personal favorite was the cart though, where if you input a number larger then `int max` you will stack overflow a server (which, for fun, you have to actually reboot the server to recover from). My code was littered with comments like this example: /* This is disabled because the number is not stored. It is recalculated during EACH page load. */ (from the category.php file) // Adding size checks so it doesn't add white space (from the image resizer) /* * Added code in to save cart on logout. */ // What the literal fuck is this? (found in the "encryption" functions) I submitted bugs and reported the first dozen or so issues. But I, like apparently many other developers, ran into Daniel Kerr, who didn't take my issues kindly. I pointed out, like this article does, that Open Cart is anything but OOP. After that point I gave up. After a year nearly nothing was left of the original Open Cart platform. Even the CSS had been completely gutted and redone by the designer. Caching went from storing serialized data on disc to actually using Memcache. Every query was re-written from the looks of my git logs, all of them were slimmed down to just the necessary data for any specific view. The voucher system was replaced by a complete credit system that included gift cards. The language system was totally removed. The performance hit from having to open that file that the article talks about for every view and partial view became huge as we scaled. Absolutely freaking nothing is cached on the database side. Query performance at scale is laughable at best. Oh, you want to show a user how much credit they have on every page? That'll be a new query. The system is (was?) littered with code like this crap from the User class: public function isLogged() { return $this-&gt;customer_id; } public function getId() { return $this-&gt;customer_id; } But guys, it's OOP because it uses a function for the getter! tl;rd: Do not ever use this. If you're on a large enough scale project do yourself a serious favor and roll your own system.
try $params["channels"] = array(); //start of your loop $params["channels"][] = "start"; $params["channels"][] = "finish"; //end of your loop print_r($params["channels"]); Might just do the trick, but have not tested this. EDIT: formatting.
We were looking at installing an open source cart system today for a new website. We stumbled onto OpenCart and after reading a few negative reviews here in /r/PHP, we decided against it. Mind if I ask what you've migrated to, if anything? I'm stuck in the old days of osCommerce and ZenCart, so I'm out of touch. I remember Magento came along, but it was too slow to even take seriously. Meanwhile I see a lot of positive reviews for it, provided the server is setup properly. Perhaps that's the way to go nowadays? Would love to know what you, and anyone else, think is the best open source cart on the market in 2014.
Pretty hard to help without actually seeing code, but sounds like a possible scope problem. Where are $params and $list both defined?
Phew. We're looking to use x-cart, I glanced at OpenCart, I'm glad we're not considering it
Welp, I'm in the middle of modifying OpenCart for deploying our first ecommerce and this articles scares me. 
Looks like almost not usable piece of code with issues on their github repo like 'your demo doesn't work'. And last commits were in september. Are you sure you want to use this? Also about php chats - look into websockets and ratchet (http://socketo.me)
Magento can be made fast. Just saying.
if you have 0 experience with Magento, *fast* is relative. You could easily spend days before understanding the basics
You could use Gravatar for a users image and FullContact have an API to look up email addresses. 
I certainly agree with that. 
Forgive me for veering off topic, I'm a front end dev who's just started properly dipping his toes into object orientated PHP What makes this snippet crap? Is it because it's returning a property that you could just access directly (e.g. $user-&gt;customer_id). &gt; public function getId() { &gt; return $this-&gt;customer_id; &gt; }
I was shocked, I hadn't used OpenCart but thought it was something to look into one day. Seeing the owner respond like that just put me off, he could write a book on how not to respond to customer complaints.
I concur. I'm working on a massive project using OC and well here's a big fuck you OC! Ended up rewriting more core code than actually writing the fucking template... Never again. My question now is, what is a goo open source ecommerce? Both free and paid. What are some of you guys opinions on X-Cart? Or what would be considered industry standard? 
inside - from the thread here, I'm guessing that's part of the issue. 
thanks - it seems hackish. I will probably not bother ultimately. And just sit and moan, alone, in the home office :/ 
Article and framework author seem llke they'd be good friends, hope they work it out.
I'm not sure about the PHP but I like Wrox ones [Beginning PHP 5.3 pdf](http://www.srnr.arizona.edu/projects/Beginning_PHP_5.3.pdf)
He's hilariously childish, and clearly doesn't know what he's doing and as a result resorts to insults. He talks about him being experience all the time, pahaha. Length of time doing something != being good at something If he's been writing bad code for however long he's been a developer for (which his attitude would lead me to believe at the very least) then he won't have improved. If he had an open mind, and was willing to learn, and listen to other people then he'd make good progress. Oh well :/
Forget the article, his shitty attitude is a much more convincing reason to never use OpenCart
I'm not the GP, but I'll take a stab. I don't think the issue is specifically that line of code, but that lines of code like that are used to demonstrate "hey, OC is OOP", when the actual parts of the code where 'real' OO design would provide real benefit are not taking advantage of an OO design at all. Large chunks of repeated code are the first giveaway that OO is not being used to any real advantage.
Right. However, given the other states of the framework, I'd have a hard time trusting that any solid validation was being done ('__construct' calls in the URL having to be caught by hand?) If it's harder to trust the code, at least knowing some safety mechanisms are on the db side might help some. Also, any other integration with another system may throw out the "it's OK if everything's done in PHP memory" defense. External order processing systems that also update the DB at the same time, for example, would create some consistency problems.
What makes this snipped crap? Hard to tell. If the property cusomer_id is public, there is no need for any getter. If it's not public, you might want to just call it `public function id()`, but that's just semantics. Also, if you're working on an `User` object, you might want to see if you can just get away with using `id` as the primary key, most of the time there is no need to call it `customer_id`, it makes things more logical.
&gt; You can install Apigility in seconds; execute the following command in your shell: &gt; &gt; $ curl -sS http://apigility.org/install | php Stahp!
Chaining should be avoided about 90% of the time. The only "real" time that you should ever chain is when you're building a DSL (Domain Specific Language). You can see this in action with PHPUnit's Mock builder: // Create a stub for the SomeClass class. $stub = $this-&gt;getMockBuilder('SomeClass') -&gt;disableOriginalConstructor() -&gt;getMock(); // Configure the stub. $stub-&gt;expects($this-&gt;any()) -&gt;method('doSomething') -&gt;will($this-&gt;returnValue('foo')); Now, notice, that none of these are really "getters" or "setters" or anything. They read in plain text. "The stub expects any number of times a method called 'doSomething' to be called, and it will return the value 'foo' when called". This is VERY different from normal setters / object usages. The prime reason is that with the DSL, you're not building objects, but describing the problem. But with "normal" code, you are indeed dispatching logic. And since it's not "telling a story" like a DSL does, what objects are being returned really become important (and not just an implementation detail). Consider this: $foo-&gt;addUser(new User)-&gt;makeAdmin(); What does that "makeAdmin" call do? Is it called on that user object? Is it called on foo? Who knows? You'd need to inspect the source of the "addUser" method to find out (which is **never** good). Instead: $foo-&gt;addUser(new User) $foo-&gt;makeAdmin(); vs $user = $foo-&gt;addUser(new User) $user-&gt;makeAdmin(); In both cases, it's 100% clear what's happening. It's slightly more code, but it's **significantly** more readable. Optimize for the reading case. **NEVER** optimize to make code faster to write. After all, you'll write it once, but read it over and over and over. 
Method chaining can be described with AOP technology too. It will be possible to extract "repeated return $this" lines from setters into one advice. Just declare: if method is setter (name starts with setXXX) and return value equals to null (void) then return $this as a result of setter call. More details are available in my blogpost about this pattern: http://go.aopphp.com/blog/2013/03/19/implementing-fluent-interface-pattern-in-php/ Live demo on GAE can be found on http://demo.aopphp.com/?showcase=fluent-interface
&gt; 1.) Are you proposing I should have both a User model AND a UserCollection model, or just to do away with the User/singular version in any case where I will also need access to multiple User records? You're using that term "model" in a way that I think is leading to your problem. If you have a class named "Model", I'll argue you're doing something wrong in the first place. What you want, is a domain object, which represents the concept. So in this case, you'd have individual User domain objects, and an aggregate UserCollection object, which contains other User objects. They should be nothing more than state. There should be no "real" logic on them. To persist them, you should be using a [Data Mapper](http://martinfowler.com/eaaCatalog/dataMapper.html) which handles the persistence. This should be a separate piece of logic which takes a User (or collection), and maps it back to the database (or multiple databases). &gt; That being said, if I were to rename my table User, it would make a lot more sense to me to have the User model be responsible for interacting with the whole table, whether it be creating a single row, fetching a single row, or fetching all the rows. I'm not sure why my brain is making that connection under those circumstances. You want a layer of indirection between your business code and your persistence code. The reason is simple. What happens if, after launch, you realize that your schema is sub-par. Your queries are performing slowly, and your DBA comes in and says "Well, you've got too much here, we need to split the User table into 2". If you don't have the layer of indirection between them, you're stuck. You have to either rewrite your business logic to account for the split, or you can't actually refactor the schema. If you used the Data Mapper pattern above, you could simply make the appropriate changes in the persistence layer, not having to touch your business logic. And that's a whole lot more likely to happen than the proverbial "what if you want to switch RDBMS systems?"... Which is why active-record and most ORMs are trying to solve the wrong problem. Don't worry about independency, worry about isolating schema from business logic. That's where you get your gain. &gt; 2.) Is that how I should be "looking" at my models? As a single class to control DB interaction for a single DB table? Again, I'd suggest not thinking about "models" as a class. Think of it as a layer which contains everything the application actually "does". Controllers handle user input. Views handle rendering back out. The "model" does literally everything else. For a FAR better description of all of this: check out [this StackOverflow Answer](http://stackoverflow.com/questions/5863870/how-should-a-model-be-structured-in-mvc/5864000#5864000) (not by me).
[You think *that's* bad?](http://www.reddit.com/r/programming/comments/226co7/opencart_developer_doesnt_believe_in_proper/) Edit: [Imgur gallery of the archived github comments.](http://imgur.com/a/GRIzy)
His responses are mind-numbing. Because it's popular and widely used he cannot fathom that the codebase is poor. Developers love it he says! No doubt non-pro developers do because procedural is simple and easy to understand for someone who isn't a professional. Hell, it probably works out great for him that it is poorly coded, because amateurs and people with low experience can develop with it. But the fact that *he* doesn't realise it's bad code makes him an amateaur himself. He's closed minded, he doesn't realise at all how valid those complaints are.
--prefer-dist is quite a lot faster for me on initial installs. Updates are about as fast. Unzipping a few archives is obviously going to be faster than cloning git repositories, esp for large projects. In our app's build process though, we zip up the vendor dir, as sometimes we install behind firewalls that would prevent us from accessing packages online. There's also satis.
Why is this cross-posted?
If anyone hasn't had a chance to read this yet: https://gist.github.com/uppfinnarn/9956023 Developer doesn't credit source of code, starts insulting people and acting like an 8 year old when people ask him to.
&gt; it doesn't seem to want to work. *"It doesn't work"* isn't a valid problem description. What about expanding what you expected to happen, what actually happened, and what you tried? Additionally, be aware of [The XY Problem](http://meta.stackexchange.com/a/66378)...
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Principle of least privilege**](https://en.wikipedia.org/wiki/Principle%20of%20least%20privilege): [](#sfw) --- &gt; &gt;In [information security](https://en.wikipedia.org/wiki/Information_security), [computer science](https://en.wikipedia.org/wiki/Computer_science), and other fields, the __principle of least privilege__ (also known as the __principle of minimal privilege__ or the __principle of least authority__) requires that in a particular [abstraction layer](https://en.wikipedia.org/wiki/Abstraction_layer) of a computing environment, every module (such as a [process](https://en.wikipedia.org/wiki/Process_(computing\)), a [user](https://en.wikipedia.org/wiki/User_(computing\)) or a [program](https://en.wikipedia.org/wiki/Computer_program) depending on the subject) must be able to access only the information and [resources](https://en.wikipedia.org/wiki/Resource_(computer_science\)) that are necessary for its legitimate purpose. &gt; --- ^Interesting: [^Capability-based ^security](https://en.wikipedia.org/wiki/Capability-based_security) ^| [^Computer ^security](https://en.wikipedia.org/wiki/Computer_security) ^| [^Privilege ^escalation](https://en.wikipedia.org/wiki/Privilege_escalation) ^| [^Information ^security](https://en.wikipedia.org/wiki/Information_security) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chcnh4q) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chcnh4q)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
If you really needed a reason to never use OpenCart, [this one](https://github.com/opencart/opencart/issues/1269) or [this one](https://github.com/opencart/opencart/pull/578) or [this one](https://github.com/opencart/opencart/issues/1279) or [this one](http://karmainsecurity.com/KIS-2014-08). Yeah... Who gives a crap about code repetition when there are known exploits against the code which the developer **refuses** to fix...
Yes, it came from osCommerce, and has not moved forward with a decade's worth of learning, so it we know it is going to be shit.
Thanks for the links. I must say though that I try to avoid logic written in comments :/
Neither make sense. A already has the user instance, so what does `makeAdmin` mean in that case, where you need to pass the user in? And B, why are you passing the user to getUser? $foo-&gt;getUser()-&gt;makeAdmin() Without real code, it's going to be difficult to go much deeper on it...
I think you will find he is also referring to the fact that the User class has two completely different methods and yet they both return the same exact thing. But then the fact that dev of OC stated using find and replace as a perfectly acceptable way to maintain his code im not really surprised.
fuck kerr. 
`User` in this case wouldn't store, for example, `$age`? To get the age it would have to do `$this-&gt;parameters-&gt;getAge()`?
Hi! I'm sorry you've had problems with my tool :( I've dedicated quite a large slice of my recent life to it and it really upsets me when something so basic should be working. So here's the thing: this isn't a PuPHPet issue - it's a Vagrant/Virtualbox issue. You can try adding `:mount_options =&gt; ["dmode=777","fmode=666"]` to the shared folder definition - some people report this works. Unfortunately, mitchellh (creator of Vagrant) has stated that this is not a proper solution. So I'm left trying to figure out the best way to fix this that will work across OSX, Windows and Linux without appearing too hacky. There's a few things that may help, however: * Move your cache folder *outside* of your shared folder. I'm sure CakePHP can be configured to accept a different cache folder location. Cache folders shouldn't be in webroot anyways, that's just silly. * Start with any empty shared folder, and clone your project from *within* the VM. I've noticed this usually makes those ganky permission issues go away, when the VM itself is the one creating these folders and files. As for issue #713 - well, what can I say? When I originally started this project I honestly thought maybe 10 people would use it. Turns out more than 10 people are now using it. I'm just one person. I just sold and bought a house and moved in. I just gave a conference talk at LonestarPHP 2014. I have a full-time job, and a busy contract schedule. I also have a wife and son and a ton of bills to pay. My time is limited, and for all the people saying how it would be nice to implement `$a` or `$b`, my issue:pr ratio is abysmally low. Again, sorry you've been having issues. I promise I am well aware of this particular problem and hopefully a proper solution is coming soon.
Yep. (better actually $user-&gt;getParameters()-&gt;getAge()). Of course you can store age in user, if you want. Just from experience, when you're storing users in tables via entities like in Doctrine, better separate list of parameters (if there are plenty of them) and store them in different entity (= table in database) I basically showed you beaty and power of fluent interface by making two objects interact.
This structure makes sense in an ORM, but what on everything else? class Switch { protected $on = false; public function setOn() { $this-&gt;on = true; } public function setOff() { $this-&gt;on = false; } } `Switch` would need a `SwitchParameters`.
Wow, just wow
&gt; you are cowards to critise me when you have not posted links to anything you have done! He is a total knob-end.
We use WooCommerce a lot. It is not ideal, and certainly does not scale without a lot of work and caching added, but it isn't too bad.
What? No, that was just a case. There is no need for switch parameters.
Our business runs on OC...I haven't had many issues with it but the attitude of the dev makes me want to run for the hills.
I'd expect that function to return either a boolean (i.e. if enabling was successful) or the user that was enabled. So that pretty much answers itself, doesn't it?
&gt; would not work as we don't know which user we're refering to. As I was trying to imply with my *without real code* line, how do you know? What if `$foo` is a User Aggregation object which makes a group, which is represented by another user object? So `setName` actually fires on the aggregate "virtual" user, rather than the contained users. Without *real* code, we can't know. And without real problems, we're spinning our wheels discussing it. &gt; As I have little doubt of what is happening ummm, in your first example, is `setName` being called on `User`? Or on `foo`? You can *guess*, but you can't know reliably. Which is a problem. In the second example, you know for a fact what object each method is dispatched against. Which is clarity. Clarity FTW. &gt; Another question though, no chaining apart from DSL? No instance returning on setters either? In general, no. As to why not returning `$this` on setters? Well, there are cases you may want to return the "set" value from a setter. So for clarity sake, I either choose to return nothing, or return the set value. 
Additionally, this blog post says my position pretty well: http://ocramius.github.io/blog/fluent-interfaces-are-evil/
Annotations are useful to define metadata. But if you don't like annotations, then you can define the same logic with DSL builder, closures and ... method chaining! :) but annotations will be in the next version of PHP and this is cool. However, I don't like method chaining everywhere. This technique is useful for DSL builders (doctrine) and configuration (symfony). So, it's kind of tool for specific use cases.
I pointed out a problem with your entire structure, and where you can improve how your code works. I pointed out where your practises can be improved. I told then told you what your core problem is, and provided a link to how to fix it. Your comments about how you're learning aren't relevant. That you only have an old book is not relevant. You have the internet. I provided you what you can look up, and knowledge is literally a google away. Yes, I said your code was horrible. It **is** horrible. The first PHP code I wrote was horrible too. Any offence you took is **your** problem and I make no apologies for it. If you can't take helpful criticism then you're frankly trying to make the wrong start in the wrong industry.
That first one is my favorite: danielkerr: i will re open this. it does not look hard to copy the code from phpass. .... danielkerr: i'm closing this as its a waste of time. 
I just assumed that as my post example included an `addUser()` function that aggregated users in an array, and I usually use `set` for unique options and `add` for collections. Regarding your position, you'd for example avoid code like [this one](https://github.com/aws/aws-sdk-php/blob/master/src/Aws/Common/Model/MultipartUpload/AbstractTransferState.php) in all cases? I'm going to read the post you linked below, maybe I come back fully convinced
Well, instead of "enable" let's make it send a callback to the first user. Would that change the answer?
I thought Sylius was still in Beta? 
My point is that if you haven't worked with non-transactional engines, or as you put it: &gt;approach I haven't seen before in my career. it implies that your career and exposure to other platforms is limited; and if you are relying only on database constraint that is almost equal as if you rely only on constrains in code. Reminds me of the story from dailywtf when a database guru would write procedure to convert string input from select box ("One", "Two" Three") to its respective integer values (instead of just, you know, changing it in the code) As your first commenter said &gt;First off, the database using MyISAM.. You should realize that OpenCart has been around for about 8+ years now. Back when it was first started, innodb was hardly even heard of. Everyone used myisam and still many do today. zencart, oscommerce, even Wordpress.. the very blog you are using uses MyISAM OpenCart is crap without doubt , but the choice of database engine is least of the issues this solution has. 
I think the code speaks for itself personally. If he had the right mindset he'd take that as a something to work on; to improve himself, but given the evidence of his personality that he's shown so far I doubt that's going to happen.
Yes but it is tested unlike OpenCart so if you want to use some component at least you know the functionality in it, even though limited is tested so it should be OK if it has the feature that you need. Truthfully OC's codebase is in a frozen alpha if that bothers you... 
1st point I talks specifically about the solution at hand so I speak about opencart which uses MySQL so I am not talking about legacy systems and nosql databases and such, but specifically about opencart, which is an ecommerce solution that uses a database engine that can support transactions but they opted out of them, that was my point about how I never seen the de facto use case for transactional rdbms to be disregarded so blatantly. 2nd, I get that its old, but changing all the schema to InnoDB and adding proper constraints took me about 3 days to do, if they didn't find that time in the last 8 years, idk...I guess im speachless again...In their case InnoDB doesn't break anything... His comment is also wrong, since Wordpress doesn't use MyISAM and I couldn't care less about the other 2 mentioned, it doesnt mean if your competitors release crap you should too... Also the OC supporters go in big length describing how well it scales, disregarding the simple fact that MyISAM locks the entire table when you write...hence 2 people cant order at the same time for example...it will block and wait. I disagree that its the least of the issues since, doing ecommerce without transactions is like operating on someone with non sterile equipment, something will go wrong without a doubt, but I do agree that there is so much more garbage in it that many other things will fail first before the DB engine...
&gt; "talk about flogging a dead house." Brilliant.
If you have any say in it, at all, do yourself / your company a huge favor and find a better, modern solution.
It was posted in the hope of expediting my education by generating more responses on SO, or here, than it would have otherwise received. :)
I'm guessing the app runs through one `index.php` file within the main web directory?
You have some good points, but your childish argument and namecalling with the developer in the comments kind of threw any sense of professionalism out of the water.
Preach the Word, my brother! I have been on the E_STRICT bandwagon since E_STRICT existed, way back at the start of [Solar](http://solarphp.com).
Then you clearly have not worked in a "big data" environment. Foreign keys introduce huge performance hits. New engines geared towards data analysis like TokuDB do not support foreign keys. Oh, and there's also the whole NoSQL family of DBs that do not support foreign keys.
I appreciate the comment. I also appreciate that you were tactful and informative rather than just saying "You don't know what you're doing" and leaving it at that. I am familiar with PHP, but I don't use it at work; only for side stuff. I am rarely the one to do the initial deployment of any websites that I work on, PHP or not. I think it's actually been years since I last did it. Even though I use Linux pretty regularly, I overlooked this basic fact and seeing the issue that I linked to (and also the "Altering Shared Folder Configuration" of [this article](http://www.sitepoint.com/build-virtual-machines-easily-puphpet-part-2/)) threw me off even further. Anyway, thanks again for clarifying for me.
Hard to argue profesionally with someone when his only response to your source backed comments is you are an idiot, you dont know anything and I know all...
Thank you. This was definitely helpful. I appreciate the tactful way that you explained things, too.
I realize that it's a bad idea to never upgrade your software like Apache, MySQL, and PHP and that you need to plan for this by writing tests and things like that. However, I think most software upgrades (not OS security updates; software updates like Apache) are performed *manually* on a schedule. Please correct me if I'm wrong. I would expect the development environment to be the same way. If a development team is using a particular set of software, I think it's reasonable that they should expect that set of software to stay at whatever versions they have until they alter their CM tool's configuration to upgrade it. Am I wrong?
Thank you for your time. After reading through this thread, I realize that I was mistaken about the permissions problem and that this is standard for Linux and is actually a good thing, not a problem. I think CakePHP's default folder layout is set up the way it is to keep the whole project contained. So even though the CakePHP project is located at /var/www/my_cake_project/, Apache should be set up to use /var/www/my_cake_project/app/webroot/ as the document root ([here's CakePHP's documentation on that](http://book.cakephp.org/2.0/en/installation.html#production)), so it should be fine to have the cache at /var/www/my_cake_project/app/tmp/cache/. I understand that you are a real person with a life and priorities and that you're not a lowly code monkey with all the time in the world. I appreciate your time and the fact that you shared this tool with the world. I haven't looked at the code at all, but I might look into a fix for the second issue I linked to.
Tossing in my 2 cents here... I've created some webshops with OpenCart the last year and boy what was that an struggle. The performance with more than 10.000 products is very, very bad. luckily there's a thousand [VQMOD] modules / extensions that fixes these problems. So i'm very happy that VQMod exist, because that helps making the product better ( after an dozen scripts ). And personaly I find it worth changing some core and doing some weird voodoo to make it work. Because the end product is just working fine / excellent. -Only problem? I'm afraid of bringing it up2date, because that means i have to do all the core rewrites again... 
the magento core code is also not the best. And some parts of it are horrible.
if you get a really good server it can be fast. But be careful if you have a lot of products(more than 100k) the mysql server can get slow.
its great for just blogging. Buts its horrible for developers or extending. the core is pretty bad.
Most likely. Run it outside of vagrant, seeing as how its a mounted folder anyways. I always run into issues running it inside the VM.
Method chaining is okay, but without an accompanying Null Object pattern, you're unable to recover gracefully from any errors in the chained methods. Adding error handling, of course, breaks the chaining. Whether or not this is important is dependent on the use case, and likelihood of error states in those methods, but still something to consider.
There is something about e-commerce and the people that run these projects. I suggested to the developer of osCommerce eight years ago that he really needs to separate the concerns if his product is going to grow and survive. But nope - templates are just an extra complication with no benefit/it is fine/we all like it like this/there is no problem/etc. Harald Ponce de Leon was not as rude as this OpenCart guy, but he had the same head-in-the-sand attitude that everything is rosy. It was not even a question about who was going to do the work, it was a simple blinkered, "we are not going in that direction" statement. In the end, you can hope for discussion and possible collaboration, but if they don't want to do it, then you fork-and-walk or jump to another ship. Eight years on, osCommerce is still going, but has not gone the tiniest step beyond the version 2.2 mess that it was back then, in the mid-2000s. It's a shame really, as the size of the user bases, and the head start these projects had over some more modern e-commerce projects, meant that they could have been amazing, refined shops by now.
The reason I said that it's a bad idea to never upgrade your software is for security reasons. For example, say that you were running Apache 2.4.0 and never upgraded it. You would be vulnerable to the security issues that were fixed in later versions (search [the changelog](http://www.apache.org/dist/httpd/CHANGES_2.4) for "security"). Same with [MySQL](http://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-24.html) and [PHP](http://www.php.net/ChangeLog-5.php#5.4.0). What I meant when I said "you need to plan for this by writing tests" is that your website should have tests for all of its core functionality so that you can upgrade your software, run the tests, and fix any tests that are broken. So what are your thoughts on [the second issue I linked to](https://github.com/puphpet/puphpet/issues/713)? Does it seem like a legitimate concern?
/r/php isn't a Q&amp;A site, and even if it were, this isn't a PHP-related question.
Ephemeral "security reasons" aren't a compelling argument for installing newer packages. Security is a group of concerns, not a metric. e.g. Why have a network interface at all!? Now what are your security concerns? Now remove the keyboard! If apache isn't available to the world (some machines are paired via VPC), I don't care about "security updates" to apache that don't provide concrete value. While that's uncommon, it's a useful way to look at software, in general. If you make a build against specific versions, version those packages as resources for a build number. If your build has "pull the latest" (for whatever reason), you will inevitably have build-breaking changes. Is that a concern? No. I know better than to do it from experience. I don't believe there is a study that I can cite to illustrate ways to manage the rather subtle sequence of events. I don't care what recommended practices some 3rd party suggests or insists. My experience leaves me with no doubts about how to manage sizable projects *shrug*
&gt; better actually $user-&gt;getParameters()-&gt;getAge() No, [it's probably not](http://en.wikipedia.org/wiki/Law_of_Demeter). You would probably want to create a small wrapper method in user that returns the age. class User { public function getAge() { return $this-&gt;parameters-&gt;getAge(); } // OR public function getParameter($paramName) { // you can probably guess what goes here. } } It this ages quite a bit better as the project grows, and doesn't expose and tie all client code of the `User` class to the parameters object. You can still use the parameters object, you just hide it better.
Off topic, why would you not use myisam in php5+ projects? Of course, it may not be good choice for any project that depends on transactions but what is wrong with this engine? 
I hope anyone who has looked at OpenCart in the past realized it was a bad solution before this blog. 
Anyone who does actual real-world eCommerce would expect the database to actually have foreign keys.
I'd like to point out that this is potentially very **dangerous**. Why? Because even though that section is "broken", the app as a whole is working. A good example of this is an application that is heavily based on math and computations. Imagine going in and finding an E_STRICT error in a formula, so you decide to fix it up. Great, you fixed the formula! But what you didn't realize was that you also broke the app - because like it or not, other parts relied on that broken formula. Now imagine if this app dealt with computations AND MONEY. Congratulations, you just caused a huge financial nightmare! So be careful. Going back and fixing warnings/errors is nice and all, but a lot of the times it's better to stick with the ol' "don't fix it if it ain't broke" strategy. 
In all honesty, I have absolutely nothing constructive to add to this discussion. I was in OpenCart hell once due to a bad project lead. Never again.
Method chaining should be applied to any method that does not return a value. There is literally no reason not to chain a class. I highly disagree with the other comments in this article.
It'd be interesting to see someone take fork of one of these projects and transform it into something modern. Out of curiosity then, do you know of any e-commerce / cart packages that abide by modern PHP standards? I actually work at a pretty large e-commerce company in the UK, and we made our own. We're using ZF2.
Search what? Coming from nothing I don't even know where to begin with php. Html and css is easy to search. php is a brick wall
&gt; *Now imagine if this app dealt with computations AND MONEY.* Congratulations, you fixed the app handling MONEY incorrectly, since it was using a broken algorithm.
Assuming (I realize this is a big assumption) you're using Apache, you could setup an additional directory in your config and use SetEnv to configure an error level variable, then in your scripts reference that variable to set your error reporting. That being said, generally this is a terrible idea (error reporting in production).
It depends. If the app always returned a negative when it should have returned a positive, the developer could have abs()'d the output. But he could have just as easily have multiplied it by -1, to get a positive value. Once the formula was fixed and it returned a positive value, abs()ing it won't harm anything, but =* -1 will.
Isn't this the point of writing tests? If you don't have tests around this then you're doing it wrong. And if you're working with `E_STRICT` errors, then you're equally doing it wrong.
Really and since when any PHP cart is considered big data and since when orders are saved in non ACID compliant storages? Just read my replies dont argue for the stake of arguing.
No, you got it on the head. That's precisely the problem. A privilege escalation vulnerability (giving a user admin rights) basically gives them the keys to the entire server. While you may trust *a* admin, it's still not good to give them all the keys to the kingdom...
Most people only really care about the highest level of education you have. If you are only just taking your GCSEs then yes, the results of them will be the highest level of your education and so used by most employers as a filter to avoid wasting time when looking to hire staff. Also, you really need to get your A-levels or some form of education beyond GSCEs. I'm not sure how many companies hire people with zero education beyond GCSE. 
Is there a tl;dr on the conclusion? Thread is pretty long (although it's immediately obvious how terrible these OpenCart developers are).
&gt; I woudnt want to work for you to begin with if given the state of todays dbs you use myisam and handle constraints in php Where do you mention ecommerce in that sentence? &gt; Why ecommerce is transaction based. Oh, here you mention ecommerce, but in terms of transactions, not foreign keys. There's a few engines that support transactions, but not foreign keys. Read your own replies before you argue.
The author uses the wrong form of "its" in an article on strict error checking. "No big deal, it still runs, right?"
http://www.reddit.com/r/PHP/search?q=beginner&amp;restrict_sr=on
&gt; (don't even suggest just to stick to States and constants all over the time) Why wouldn't you? If constants are available and you're not using them, I consider that an error. But no, I don't have any more points to add. If you disagree, then... well that's that. This is my preference.
this comment is full of *what the hell* The OP's post is all about creating and maintaining quality code. You seem to be advocating just the opposite. don't fix errors, E_STRICT, business logic, or otherwise. Because it "works" (doesn't fatal error bomb) and it's being used by stuff that seems to work. Any monkey can throw together code that returns a result. A more sophisticated simian will confirm it's actually doing what it's supposed to be doing. And won't be afraid of unit / regression testing. 
I really wish the mods would ban this kind of thing. I also wish I had more than one downvote for you. 
Disagreement without explanation is less than worthless.
You realize you're arguing with a blogspammer, right? The 1% of the time OP is not spamming links from techtalkshub, he's submitting this, which is his own blogspam from a year ago.
\^^ E_STRICT \^^
So? All the more reason to give him tips on how to make his content less annoying.
E_STRICT has saved my bacon so many times I can't even count. Why would anyone disable something that turns up all sorts of insidious bugs early in the development process?
Then that developer is at fault for not filing a bug report and using a known incorrect API.
Such as? From what I can tell the only MODERN solution is Sylius, and it's in pre-alpha still. It's kind of hard to convince the bossman to use a pre-alpha software, even if it has 1500 unit/behavior tests and OC has 0. Another problem is OC has a large community provided "plugin" base, which makes development faster And Magento isn't that great in my opinion. Way too complex.
Yes, good luck with that. Did you actually read all those comments? He never listens to anyone.
Thanks for pointing that out. Updated. Let me know if I missed any.
I realize there are no great alternatives out there right now, but OC seems to be the worst possible contender. I mean: * What if you found a major bug and report it? Daniel Kerr would close it with a "fuck you" (happened in the past). * What if you need to update your servers and the new PHP version isn't compatible with the archaic codebase? * With a codebase that is so outrageously amateurish, if (or when, really) a security hole is found (happened in the past) and someone exploits it and you end up losing thousands of dollars? I realize this might not be feasible in your situation, but if I were you, I'd first try Magento (even if it takes longer to get the hang of it) or try to convice the bossman for giving Sylius a shot. Best of luck! 
My post is more of a **WARNING**, which is why I used words like *potentially* and *be careful*. This is because in my experience, you're more likely to run into this kind of problem working on maintenance/old projects. It's nice that people here are saying things like, "yeah tests should handle this", but that doesn't always happen. Not everyone writes perfect code and tests. Some people work in environments with crappy developers and tight deadlines. And sometimes they have to take over a project with really crappy code. Again, this is all based on my personal experience. But if you're on this sub and/or are a good developer and/or working on awesome code bases, then yes my post probably doesn't apply to you. (Because you never would have had this problem in the first place)
Yes, yes, but now you're imagining an ideal world. Let me know when you find one of those ;)
Or you could just do things properly the first time...
[Head First PHP is really good.](http://www.amazon.com/Head-First-MySQL-Lynn-Beighley-ebook/dp/B00CB30Y2S/ref=sr_1_1?ie=UTF8&amp;qid=1399584168&amp;sr=8-1&amp;keywords=head+first+php) 
GCSEs are not a question of smarts, they're a question of turning up and doing the work. If you demonstrate you *can't* complete the most basic of formal education you're going to give off a bad impression, however if you have the experience and skills to demonstrate that you produce high quality work your education history won't matter. The problem with a poor education history is that it reduces the chance of someone taking a chance on you, not that it makes it impossible to be hired. Your work is what matters above all else. 
CRM is going to be running your business and if it fails so will your business. Rather than develop from scratch consider one of the big vendors like SAP or Oracle. Unless you want to hire a full time programmer for maintenance and pay enough to get some one with some serious software engineering skills to integrate outsourced programming work it is not a very good option. You end up with no way to tell if your getting a quality product. Software can look good on the outside and do what you asked but the problems creep up when you need to change the system. If it wasn't properly engineered this can cost you more money than just buying a custom system from a software vendor. I'm sure your town probably has one or two software shops that can tackle this for you if you don't want to go with a big vendor. Having your developer work with you and your business is invaluable. 
If you are a good developer when you look back at code you wrote more than 2 years ago you should be embarrassed.
Hence why the @ operator still exists.
Two *years*? That long? ;-)
If you already know how to program this book should be enough: http://amzn.com/184078282X If you do not know how to program you should check out this class: https://www.udacity.com/course/cs101 
Almost ever. Unfortunately it's the only way to be 100% sure you don't get a warning with some functions, for example fopen(). Even if you do a file_exists() check there is a slim chance that the file could be deleted externally before the fopen call is made (toctou - time of check time of use error). There are some such functions which return a value indicating an error as well as raising a warning or notice level error, so suppressing the error is the only way to handle the error case without side effects. There are very few valid use cases, but they do exist.
After gcse i knew i didn't want college so i took an apprenticeship. Now i make money doing what I love and am qualified 
Thanks for taking the time to write that, it was very informative. I've tried WooCommerce myself in the past, and it was good for setting something up super fast; but, I'm not keen on the idea of using WordPress for anything these days. It's become a bit of a jack of all trades, and a master of none. Cartalyst sounds very interesting. It sounds like they've done it very well if it's built as components and is framework agnostic. My current framework of choice is usually Symfony for person projects. I've been constructing my own... how to put it... watered down version of Symfony out of Symfony components (mainly just to play around, there is always Silex or Laravel for lighter alternatives I suppose!). I suppose what you say about the separation of inventory, purchasing and navigation is mostly down to pre-packaged solutions trying to be a full shop, but in doing so they lose that separation. It'd be nice to have separate, framework agnostic components for each of those tasks. Where I work now we've been developing an internal API for dealing with all the data and tying our internal and front-end systems to it respectively, so, caching is always an interesting one there as it is a necessity when adding the overhead of an API potentially with every request. We use Memcached and to add redundancy we store an expiry time along with the cached values and never expire them. If the expiry time brought back with the data is out of date a call to the database is made, and if the database is down for some reason we can just keep using the cached value.
I'm a self taught developer who has an English degree, which is obviously not a very relevant subject, but I would not have got my first development job without it. My employer wanted to know that I was the type of person who could learn at that level, regardless of the subject. I still had to demonstrate that I had the necessary development skills, but when you have no commercial experience your education is a good indicator of your work ethic and willingness and ability to learn. Once you have your foot in the door you can prove yourself and gain experience, which is more valuable than a qualification. Your GCSEs are not very important in and of themselves, but they are required to progress to higher education, and unless you have a very good portfolio of work I suspect many employers would be looking for at least A levels and more likely a degree, so getting your foot in the door might be difficult without them.
I've worked with xtCommerce (based on osCommerce) and Gambio (based on xtCommerce) 3 years ago. it was really "fun" (the dwarf fortress definition) to have to dig around the code. you could see by the codestyle and function names how far away from the osCommerce core you were. The deeper you dug, the more crappy code would appear
Try prestashop still not ideal but miles ahead of oc
Like everything else, you can't remove it without breaking backwards compatibility. However, you can in your own code define a custom error handle that ignores the @ operator. 
mother fuck-kerr
Totally. You should use @ very rarely, but there are situations where it makes more sense to use @ than it does to code a catch for every single possible error a function might throw.
Hey now, @ has it's uses. I agree it shouldn't be used frequently, but there are times when it makes sense and using it won't make your code buggier than otherwise. 
It makes certain things much more readable. The most common situation I run across with it is pre-filling an &lt;input&gt; with a value that may or may not exist. &lt;input value="&lt;?= @$firstName; ?&gt;"&gt;
Its the only way to supress mysql_connect errors... sure you can access the error state after and so on.. but it'll throw an un catchable error... iirc
If you have that attitude, you are either planning to leave soon, or don't realize you are creating more (likely very tedious) work for your future self.
&gt; It'd be interesting to see someone take fork of one of these projects and transform it into something modern. I must say that I don't know if anyone would ever want to fork a piece of ... this *expletive self-censored*. Much better to start with a clean table and do things properly from the beginning. Silly to think that if your software gets popular, it would mean that it is well written. Like... anyone remember the original DirectConnect from Neo-Modus? Sure, every early DC-hub ran on their software - until people actually created both servers and clients that actually were well made ;)
&gt;Anyone who **did** actual real-world eCommerce for long time would **not** expect the database to actually have foreign keys. FTFY Again, I am not saying that constrains or InnoDB is wrong approach, but that InnoDb is (relatively) new thing. Claiming that you never saw practice in your career implies that your career is very short and you haven't seen many real-word [sic] e-Commerce solutions, especially free ones. ZenCart and OpenCart being examples of these **real-word [and popular] eCommerce** solutions that doesn't use foreign keys edit: oscommerce as well, &gt;The v2.x codebase was not developed with that in mind - there have however been no reports of this causing a problem for anyone. &gt;Transactions are supported as a core feature in v3.0 (InnoDB) with a compatibility layer for MyISAM installations, in addition to also supporting PostgreSQL. This is in development though and is not recommended for production use until v3.1 is published. http://forums.oscommerce.com/topic/391554-oscommerce-doesnt-use-database-transactions/ 
Reading those comments all I can think is "Never argue with an idiot, they'll bring you down to their level and beat you with experience." (can't remember who said it first).
Sacrificing transactions isn't reason enough? No, seriously. I have, multiple times, encountered revenue-impacting data loss that could have been trivially prevented by working inside a transaction and issuing `ROLLBACK;` on error. Even if we don't have any concerns about consistency (and we probably do), transactions are a last-ditch defense against catastrophic errors introduced by changes made by five-years-from-now us. We should maybe take advantage of them. Also, MyISAM doesn't support foreign key constraints. This is *kind of* an important and useful feature in a relational database. Sure, we could enforce the same invariants in the application, and this is even a useful thing to do, but even if we trust that we'll never, ever make a mistake in the fifteen-year-plus life of our evolving application (and we will), eventually the business people are going to ask us to do some kind of clever reporting against this mountain of data we've slowly been accumulating, and without any foreign key constraints we'll have *no* idea which of the fifteen different `id` columns relate to which other ones. Schema are computer-enforced documentation, we should maybe take advantage of that, because God knows nobody ever had time to write *How This Giant Mess Works: The Book* (and even if there are draft chapters lying around, they've been outdated for three years). These are just off the top of my head, there are probably others. The bottom line is that MyISAM isn't a modern RDBMS engine, and there's no good reason to willingly inflict that kind of pain on ourselves.
Oh, now there's a good use I hadn't thought of. That's way cleaner than `&lt;?= (($firstName) ? $firstName : '') ?&gt;`.
InnoDB is new? It's been around since before PHP5.
AFAIK though, each @ statement is slowing down the interpreter as it has to turn errors off, and then turn them back on. I don't know how much it slows it down though.
@$firstName will only work in places where you want a blank default, of course. Many of us have little utility functions of various names, essentially default($firstName, 'Guest');. Most frameworks do too, but with less friendly names. 
Wouldn't you want to do this instead anyway? &lt;input value="&lt;?=@$firstName?&gt;" placeholder="Guest" /&gt; 
I noted that the original was only useful where you want nothing if the value doesn't exist. I specifically meant "almost anywhere other than an input". Obviously in an input, that isn't what you want - but what about the "Hello $firstName" part of your site? 
Not that many people are on Gravatar. I was hoping to get as much coverage as possible. FullContact wouldn't work for the volume of lookups I wanted to do (well it might work, I dont want to pay for this until this project is off the ground). Thanks for the input though.
TL;DR If you copy code from C++ and then port it to PHP, there is absolutely zero need to attach the original copy right, or even attribute the code to the original, because it's not the same line for line. Also, you're an idiot if you say anything else
Exactly what I was thinking. Has anyone put all this together, I really didnt want to be a trail blazer and write all this my self. (its a nice to have feature, but I have far more pressing things I could be doing).
TL;DR If you copy code from C++ and then port it to PHP, there is absolutely zero need to attach the original copy right, or even attribute the code to the original, because it's not the same line for line. Also, you're an idiot if you say anything else His words, not mine
I came up with this solution. I added a new modifier called array modifier `%` (which is not part of the spec). {?list%,keys%} -&gt; list[]=a&amp;keys[a]=1 Document for this is at the bottom of README page.
Migrating OC from ISAM to INNODB as I said is trivial and the fact that even after 8 or so years noone put the 2 days of work to do it says more than enough.
Any suggestions? The article mentioned Magento, maybe I should look into that.
Same settings?
I thought there were major improvements in PHP 5.4 and 5.5 that made use of the @ much faster. Rasmus made it sound like it was no longer an issue in a video presentation I saw.
As far as I know, the feasible alternatives are Magento and Sylius. There is also prestashop which is better than OC but it also has an ancient codebase.
Seems you were looking for a micro framework. If so do checkout https://github.com/auraphp/Aura.Web_Project . Also you can check http://slimframework.com/ For API's http://apigility.org/ and https://github.com/frapi ( not sure on the current status of this though )
Default settings.
I've used [epiphany](https://github.com/jmathai/epiphany) for a few projects, and I found it pretty intuitive. Specifically, check out it's routing.
+1 Slimframework
Awesome! I hadn't even considered associative arrays. I imagine it can do nested arrays too then?
Basically, most static analysis tools for php amount to nothing more than a visit from the code style police. Actual useful static analysis is so much more than this.
Great advice. From my perspective - if you were 16/18, then yes, I would be interested in your GCSEs. If you were 26/28, then no, I wouldn't give them much more than a passing glance. 
E_STRICT has been part of E_ALL since PHP 5.4.0, and if you're at all interested in catching bugs, your dev VM will be running error_reporting(E_ALL); at all times.
I'm a few years past GCSE's now, but I understand your situation completely. During my GCSE years I also was programming in my free time and learning about all the different parts which make up web development, and it's been invaluable. That said, it's important to prioritise correctly. In terms of value, many times I've been thankful I actually achieved well in my GCSE's. Seeing my friends having to do extra classes to achieve the grades they needed to progress in further education while I went home was enough for me! In the UK, you're really going to struggle to get a job at 16, hence why it's becoming mandatory to continue into higher education. Once you have a higher level of education, nobody really looks beneath that so if you don't do so great in your GCSE's, you can always do well in your A-levels/College course. But to do that, you usually need 5 GCSE's A*-C including Maths and English, so make that your minimum aim. If you've done at least some work during the past 2 years, passing the exams shouldn't be too difficult, I think a G classes as a pass. But everyone knows that they aren't really acknowledged unless you get C or higher, so I would make that your focus. I know it's different for everyone, but for me doing revision the day before really helped when it came to the exam the next day, especially for those things you learned in Year 10 for example. I truly believe with a little bit of effort you can get a C in most subjects. Obviously your enjoying PHP, so a good revision habit is to do a session, and then stop and have a break, for you this could be going back to working on the next Facebook! When you hit a bug, time for another revision session. Experiment and see what works for you. Lastly, try to stay optimistic, I know it's hard sometimes but it definitely makes a difference having the right mindset. After all, you can just resit some if you need to. If you need someone to talk to, feel free to send me a PM.
Can you please describe a situation where this could be useful? I checked the readme, but not sure I get it.
Well if you're using it for form input values I'm assuming you may be using it quite a few times in succession. 
Shouldn't you have created a VQMOD module of your changes in the first place? That is exactly what VQMOD is for... (Have used OpenCart, and won't use it again.)
Symfony and simple, wait what?
In MVC, controllers tell views what to display, but when you don't fully follow this model, or just wan't to hack for one template, you can use a deferred template that gets filled upon page rendering. Eg: change the title depending on the content displayed without over-loading the controller, add a CSS detail to a page (like set a background image to a div depending on user's profile, thus by just giving the view {user: $user}), add a JS if the user is admin, depending on the webpage browsed. The whole point of this versus "blocks" is that it is parsed as-is, you don't have to overwrite it, you just give it the variables it needs to fill itself (but I have no true example for this point) If there are any other reasons, I'd like to know, too :-)
You can actually see in some of their demo output they are working with 5.7 alpha as the version. But, it could be pushed back if things aren't done in time.
I accidentally clicked "suggest title" button while submitting a link ) Can I somehow change the name of the link after it's submitted?
cached opcodes suffer from the same issue. It's not the interpreter that is slow in this regard, it's the core engine.
No, I'm not extending `layout.html.twig` in `content.html.twig`, I'm including it by `{{ include('content.html.twig') }}`
I only read is superficially, but I don't see how that would be better than assetic. Can you elaborate? Thanks.
If you see me contribute to this project after reading the authors attitude you will know my guthub has been hacked..
I'd advise to build a website portfolio and put some of your code up on GitHub if they're not going to be able to go on your academic record.
Well in terms of components... App (Container) - Pimple http://pimple.sensiolabs.org/ Create an app (API) that extends pimple. During bootstrap, inject all of your dependencies and return it, then -&gt;run(). Request / Response Parsing (if needed) https://github.com/symfony/HttpFoundation During bootstrap, create the request object and inject it into your app. Middleware - For injecting things into the request / response chain, like validating API key headers http://stackphp.com/ You can incorporate this into your app layer to execute tasks before processing routes. Routing - Klein https://github.com/chriso/klein.php Everything else is easy after that.
I agree, Slim framework seems to be what you are looking for. There are some youtube videos that cover slim. If you don't like that try SILEX. If you are looking to build something bigger and have some framework knowledge Symfony and Laravel maybe what you are thinking about. 
Assetic is a tool for managing assets, and this extension is for tuning block rendering order. Thus they do not interact with each other and certainly can be used together.
D'oh. Of course. Thanks for clarifying.
I totally agree with this point. In fact, I would go further. I would say you should never ever make changes, updates or bug fixes to any code. Or you might break stuff that currently works. Seriously, though, this comment is horrifically stupid. This is *in some part* true, but what it means is not that you shouldn't use E_STRICT, but that you should have it on at all times from the beginning (in development). Jellysandwich's little brainfart there applies just as much to *any* refactoring or improvement that can be made to any code, and is just as unreasonable for them all. They should be advocating not breaking things, rather than not fixing them. You do that by good testing, by using E_STRICT from the beginning, and from proper management of bugs and requirements. TL;DR - Be careful of unintended consequences at all times when refactoring. Due to E_STRICT warnings no more or less than any other time. But if your code is so brittle that you can't fix trivial errors without risking chaos, please feel free to find a job that lets you work with your hands.
&gt; if no one notices, is it still wrong Yes.
I love Laravel, and I think it's great for building applications that are connected to by an API, but I think for just an API alone, a microframework (Slim or Silex I have no preference) is probably a better fit.
I've come across this -&gt; http://www.fullcontact.com/developer It's a paid for service (personally haven't used it) but may be what you're looking for.
+1 for dwarf fortress reference.
&gt; Can I somehow change the name of the link after it's submitted? No, but who cares except that guy. It looks like a useful extension, so nice work. Though I'd posit that if you find yourself using it often you probably need to restructure your views. Would you agree?
Well, I've made a lot of VQMod modules for the shops, but some core changes weren't possible / doable in VQMod. So that's why i changed the core... [ I had to change the way the cart works, so VQMod wasn't an real option there...]
Thanks. I don't expect any problems if you just replace `block` with `deferred` in your views. But yes, It will not work the other way around if you really use the power of deferred blocks )
Sorry, I should have been more clear. I didn't mean it would be hard to integrate, I meant that at first glance it seems using this too often is a code smell and a sign that your views are probably poorly structured. 
same thing applies to mysqli_connect... so...
Not a VIM user, but this is still very cool and major kudos for the efforts. I'm actually working on a code generator framework that contains a lot of functions to provide very similar functionality to your class:add command, this is the component that supports much of it. https://github.com/JennyRaider/ObjectBuilder I wound up learning (too late) about the PHP parser from /u/nikic and how it can be used for code generation. https://github.com/nikic/PHP-Parser/blob/master/doc/4_Code_generation.markdown I also went down the rabbit hole of learning about ASTs as a result, and now I'm unsatisfied with what I've done but it works, and is simple to consume. In the next iteration, we'll be implementing that parser behind the object builder interface and providing more functionality. Keep up the good work.
I'm pretty sure in his "copy the code from phpass" he also was going to outright ignore giving attribution to them for their work since it is "irrelevant in a 100k+ line code software package" as he stated in another thread about a license issue. Another reason to not use it.
I used to think this is so convenient until I started to apply design-by-contract heavily . Most of the time I don't even have setters in interfaces. Then I realized chaining methods tends to break encapsulation.
I think you're looking at this the wrong way really. The truth is you don't actually know what you will do for the rest of your life. You're 16 now, you have 50 years of working life ahead of you, that is a long time and you could have more than one career. Try to see this as a (free) opportunity to gain some qualifications. They won't be the highest qualification you will ever get, but the briliiant thing with qualifications is that once you have them, you will never have them taken away from you. It might be that you will never need any of them ever again, but you never know, and some random qualification that you never thought useful might turn out to be more useful than you thought. In a few years time you (or someone) will have to pay for all your training/teaching and exams. With some effort on your part, you can get some qualifications for free, and you will never have that opportunity again. What do you stand to lose?
I've setup a pair of Prestashop sites.. you will hate the backoffice, with passion
[You can use a .htaccess file in Apache.](http://us2.php.net/configuration.changes) Just add this line: php_value error_reporting 6143 Or for old PHP versions: php_value error_reporting 2047 Note that you can't use the constants (like E_ALL)
Hey! Cool to see you gave Jobber a shot. To stay on topic, Jobber is built on RoR. Looking at many of the other similar cloud software offerings my guess is most of them are RoR. I am not a developer at Jobber but from what I know, it would not be easy to build what we have in PHP. If you don't mind me asking, what crucial features were missing that were deal breakers? -Landen
Adding to this, I didn't do too well in my GCSE's as all I wanted to do was computers and web stuff which didn't exist in my school except for computing club (lol). As the education got progressively more niche up to University my grades have gotten better and better. Currently on track for a first in computer security :) But I do PHP, AWS, Angular and learning node now etc..
Web Developer here: This is a huge project. Hope you have 6 figures kicking around and can afford to wait the better part of a year or more. Also, RoR will be better for your purposes. 
The answer is "PHP developers." You can bet this wouldn't happen in a Ruby/Python/JavaScript subreddit if I suggested Sinatra/Flask/Express. (All of which I prefer to Silex, but they all do pretty much the same thing.) The number of people around here who claim do be developers but have no clue what they're doing astounds me. (e.g. that post where the MAMP user criticizing Vagrant/PuPHet clearly had no idea how a typical server stack is set up, or the importance of filesystem permissions.)
It's simple. It allows for lighter code and easier syntax, so as long as the classes and methods are encapsulated correctly. For the most part, methods should return a value, either a value from a getter, or a boolean representing a status (successful or failure). All the other methods (setters and adders make up a huge portion of this) should return the class instance for chaining. I see ircmaxwell's problem, but I'm not sure I agree with it -- I use this approach a few times. Especially with IDEs and auto-completion, etc, now a days. The way the example is structured is also a terrible example. Proper encapsulation would have `makeAdmin()` on the `User` object.
yeah, ?: is pretty much useless without @
Whys that?
Everything is a resource, so one way to do it would be to just modify the user's tasks: PATCH /api/v1/users/123/tasks {"id": 456} Whether to use `POST` or `PATCH` here is a semantic/philosophical blackhole that I don't advise meandering into. Just pick one and be consistent.
Thank you. Actually code generation is only a small part of Cliche's capabilities. For example, this is the command and the code it created.. php ..\Cliche\cliche.php class:add "Components\Services\NewUserService" --import="userservice" --import="dateservice" --import="Entities\User" --import="User" --extends="userservice" --implements="file" --implements="payment" --depends-on="subscription" --depends-on="event" See how you were able to give partial class names. Cliche will search the sources for the classes that matches with the partial names and provide you with matches for every option. You will be able to select the right one from the interactive menu. Also please check how the import statements are generated with out generating a conflict while importing Components\Services\Subscription\Entities\User and Components\Entities\User. Lastly, Cliche will be able to place the class file in the correct path as expected by the autoloader. &lt;?php namespace Components\Services; use Components\Interfaces\FileServiceInterface; use Components\Interfaces\PaymentGatewayInterface; use Components\Services\SubscriptionService; use Components\Services\EventService; use Components\Entities\File; use Components\Entities; use Components\Types\CreditCard; use Components\Services\UserService; use Components\Services\DateService; use Components\Services\Subscription\Entities\User; class NewUserService extends UserService implements FileServiceInterface, PaymentGatewayInterface { protected $subscriptionService; protected $eventService; public function __construct( SubscriptionService $subscriptionService, EventService $eventService ) { $this-&gt;subscriptionService = $subscriptionService; $this-&gt;eventService = $eventService; } public function remove(File $file) { } public function save($file_to_store) { } public function storeCardForUser(Entities\User $user,CreditCard $cc) { } public function debitFromCustomer(Entities\User $user,$amount) { } public function getCustomer(Entities\User $user) { } public function updateCardForUser(Entities\User $user,CreditCard $cc) { } public function updateCustomer($user) { } } The point is once you figure out the statements for everything, generating code is trivial, because it is only a class with some import statements. That is why I did not use Nikic's php parser. When you have to generate more complex/nested statements, then I think you can start consider using something like Nikics's parser. 
Actually MyISAM is not a great choice for a logger, as it only supports table locking. This means you can only ever write one log entry at a time. MyISAM is good for read heavy, non-transactional use cases. I'd argue for something like Wordpress it's pretty good. That said, I prefer to use InnoDB when possible due to the benefits of Foreign Keys (and the Galera Cluster). 
If you convert all errors into exceptions, you can wrap that in a `try/catch` block instead.
I wish scream was built in to PHP and could be configured at runtime. My employer prefers to use a shared hosting company running PHP 5.2 so debugging and basically doing anything takes me 5x longer than it should..
Correct. It really depends on context, and the example provided isn't really a good one. We could be assuming that `makeAdmin()` handles permissions -- for all we know, it could simple be a flag on the users table. But yes, not disagreeing with you. Chaining is a last resort type of return value, and should be vetted during implementation.
Agreed, I personally prefer that approach to using error suppression.
You're saying Tasks is many-to-many with Users? So first of all, it's legal for /tasks to have a resource that is a list of its users: `GET /task/{id}/users`. To add them, I'd post them (one at a time) to the appropriate instance of that same resource: `POST /task/{id}/users/{id}`. Beauty is, you can go the other direction to, if you want to see a particular user's tasks: `GET /user/{id}/tasks`.
Oneliner (not including `$input = ...`): `Auth::user()-&gt;update($input);`
Ha I wish you were willing to help those who dont know as much as you in this field. Cheers Asshole
Thank you 
Thanks, Im going to order tonight!
Thank you so much for this. I had a [similar situation](http://stackoverflow.com/questions/16626995/defer-execution-completion-in-twig) regarding asset management a while ago and although I got a pretty decent answer on StackOverflow (my solution was too crappy) your extension seems to be built with exactly this kind of scenario in mind.
http://www.reddit.com/r/PHP/comments/250mct/given_puphpets_major_problems_why_is_it_praised/
&gt; Your goal is to avoid changing the same thing in multiple places, and to insulate one part of your application from changes in another. I love how this is said. Going to save this to my company's wiki for our developers.
You're welcome. Yes, I had exactly the same use case as you :)
Not zf2 but zf1 to sf2. I did try zf2 for a while, but it never clicked. Couldn't be happier, sf components are very decoupled so if you need only the finder component and twig, you can. Thats why phpBB, drupal, laravel, ... are using those components now. Most of the non sf2 framework time I just take a couple of components and use those to get me started. A nice plus is I get job offers quite a lot, sf2 devs are in high demand it seems.
Would definitely check it out if it had documentation generated and easy to access.
I was in the same position. I was hesitant to make the switch originally, but, i couldnt be happier now.
You should be able to pick up a new framework in a couple of days if you're a proficient programmer: you certainly won't be a proficient user of a framework in a couple of days but you will be someone who can "resolve issues". If you can elaborate more on what they mean by being too slow perhaps people here can give more insight into whether or not you really are slow or if they expect too much. The position you were working in will have some bearing on the answer too, a junior develop fresh out of university will be subject to different expectations than a senior developer. I've never used CakePHP but skimming their [getting started guide](http://book.cakephp.org/2.0/en/getting-started.html) it looks run of the mill (albeit dated) and it seems easy to pick up if someone has an understanding of PHP MVC\*. Have you ever worked with a PHP framework before? The leap from pre-framework PHP to framework driven PHP is not negligible and would take a while to get comfortable with (comfortable enough to function as a professional), that could be your problem.
You should be using [PDO][pdo]. Its built in, supports multiple drivers (so you could potentially switch DB services later on), and is widely used. As far as "sanitization" goes, that's an old problem that shouldn't be a worry with modern SQL engines. Simply use [prepared statements][pdo-prepared-statements]. You should still validate your data, but you shouldn't be "escaping" it for query injections. Happy coding. :) [pdo]: http://php.net/pdo [pdo-prepared-statements]: http://php.net/manual/en/pdo.prepared-statements.php
Like running it through phpDocumentor?
You know, I've already given you the best advice I ever got. And the thing is I am willing to help even beyond that if you ask smart questions. But you basically came in here and said, "Hi, I'm too stupid to even find the fucking php home page. Will someone please teach me how to be a programmer?" And the answer is no, I won't teach you how to be a programmer. I learned with tools way less powerful than the ones you have at your disposal, so I find it pretty damn insulting and you pretty damn entitled to come here and "I'm too lazy to learn this myself, why won't someone help me?" Yeah, it's a brick wall, and if you want to learn, you'll do like everyone else here did and you'll bang your head against that wall until it falls over. So fuck you, you lazy, entitled cunt. 
I suppose I am a little old school in my thinking. The best answer sounds like I should write my own lightweight class based on PDO. I was just hoping someone else had already done that for me =p. I thought preparing statements was used mostly for when you had to repeat queries, though. I won't be doing much of that.
PATCH is an HTTP method introduced in [RFC 5789][rfc-5789] as an extension to HTTP/1.1 in 2010 and is therefore not supported by all valid HTTP/1.1 clients. So it shouldn't necessarily be relied on. Usually its a good idea to support "POST" too, as a fallback. Both GitHub and Google do this. Keep in mind, however, that the two imply different semantics, so the behavior should reflect that. Having said that, I've used PATCH in numerous RESTful services that I've created without issue. I just thought it was an important point to note. :) [rfc-5789]: http://tools.ietf.org/html/rfc5789
There is always [Aura.Sql](https://github.com/auraphp/Aura.Sql) as a PDO extension. You can see from the docs and code how lightweight it is. (I am the lead on the [Aura](http://auraphp.com) project.)
They both have different semantics, but like I alluded to, both can fit this particular scenario, depending on how you want to look at it. `PATCH` is used to: &gt; apply partial modifications to a resource. In this case, the resource is a collection of tasks for the user, and adding an existing task to the list can be viewed as a partial modification of that resource. `POST` also makes sense, as it's used to: &gt; request that the origin server accept the entity enclosed in the request as a new subordinate of the resource [...] So, the supplied task would be considered a new subordinate resource being applied to the task collection resource. I don't see much of a benefit to supporting both. If you want to cater to the lowest common denominator in order to eek out every little bit of compatibility, there's no shame in that - just use `POST`. If you don't care about supporting HTTP 1.1 clients that don't support `PATCH`, then you have your choice of the two. But using both doubles the amount of documentation, confusion, risk of future BC breaks, etc. - all for no real benefit, imo.
[Medoo](https://github.com/catfan/Medoo) seems to be a favorite. Light weight, very easy to work with.
Yeah, and some simple usage example.
Print out what is in the $_FILES['file'] array. It probably isn't detecting the type.
Pretty subjective, i'd say, but yes, either phpDoc or APIGen
That's basically PDO in a nutshell. There's a few things to note (exceptions aren't the default error reporting mechanism, you can make PDOStatement return you an object--or even better, a class--instead of an array, etc.), but basically it's: $db = new PDO($host, $user, $pass); $statement = $db-&gt;query("SELECT * FROM whatever;"); foreach($statement as $row) { doThing($row); } 
Going to piggyback on to what /u/wholemealbread said. It sounds like it might be a combination of it being too big and the incorrect mime type. Since the _FILES mime type is sent by the browser, [This page](http://www.php.net/manual/en/features.file-upload.post-method.php) even says that you shouldn't use it to determine mime types, because it isn't checked by PHP. You should look in to using something like [FileInfo](http://www.php.net/manual/en/book.fileinfo.php) for determining if it's an ogg file, but even then it isn't bulletproof. An easier method would be using something like [pathinfo](http://www.php.net/manual/en/function.pathinfo.php) and just checking to see if it's got the proper extension ... but that might not help with unsafe uploads. EDIT: I also forgot to mention that you should possibly remove the filesize condition on the if statement and put it as it's own. It may mean more code but it makes it easier to debug and you won't have confusing errors for an "Incorrect File Type" when the file is too big.
I like [Idiorm](https://github.com/j4mie/idiorm) as a PDO wrapper. It isn't perfect, but it looks like it does the things you're looking for.
Well this was a remote gig, so asking Google was a given (and I found Cake's docs to be ok, albeit difficult for 1.3 specific stuff). The staff always stated to ask questions, but as mine were usually workflow and application specific, only the CTO could answer, and that was a precious resource. Maybe I asked too many questions? MVC I knew, ORM I knew of but as my PHP experience was either with procedural or building custom frameworks, I'd like to think that was the reason it took longer then what you stated. At least that's my hypothesis. Figured that being stated during the interview process would have mattered but maybe not.
This looks really interesting. The Symfony ACL has always bothered me as being pointlessly complex. It looks like your package solves that. Will definitely be checking it out. Thanks!
A proficiency level wasn't mentioned, but from the pay scale I'd reckon at least intermediate was expected, which was fine as that's what I went in thinking. &gt;If you can elaborate more on what they mean by being too slow perhaps people here can give more insight into whether or not you really are slow or if they expect too much. I really wish I could on that, but it was like pulling teeth to get even that out of them. The feedback after I pressed was "too slow, didn't measure up to expectations", so that could be anything from "You suck" to "The guy we hired at the same time as you, his currency is a lot cheaper so we don't need you, but that's not a valid reason.". Now this... &gt;Have you ever worked with a PHP framework before? The answer is no, outside of one custom solution. It did use MVC, but as it was built right from the ground up instead of having random functionality stapled on as years went by, the code was incredibly clean. Maybe that's it? Got spoiled on that? That is the only thing that I have read that could explain why my estimate for gearing up was in the two/three month range that (I was told anyways) was the trial period.
Ya I did have quite a few questions, although I liked to think that once asked and explained, the same question wasn't brought up again, at least where framework actions were concerned. By the last week I was actually starting to get some of the framework components and most of the questions I had were more how the app was supposed to operate in section x, or why this feature that was already committed was broken on the dev branch?
You can use PDO like others have stated, but you would still have to build out a lot of functionality. I've written a DBAL/ORM layer that utilizes PDO, feel free to give it a try. The documentation is severely lacking, but the API is pretty straight forward. https://github.com/titon/db
Prepared statements have lots of benefits. Efficiency of repeated statements is just one of them. They are also highly secure (self-escaping and self securing) and have significant maintainability and readability enhancement. There is probably no need to write a class around PDO, it's entirely capable as it is, and it's likely that you'd add more clutter than necessary. If you really want to wrapper PDO you'd best use a pre-built ORM. Doctrine is well regarded, but has a challenging learning curve. An Active Record based ORM is more intuitive for most people. If I was looking for one (I'm not, I use Laravel for everything now) I'd be using [RedBean](http://redbeanphp.com/). Actually, scratch that, Redbean doesn't support composer anymore.
i'll try to generate some docs and add some more examples to the github readme. Thanks for the feedback
You're getting an error because you're not using `ogg` correctly. The correct mimetypes for OGG are as follows: &gt; AddType audio/ogg .oga &gt; AddType video/ogg .ogv &gt; AddType application/ogg .ogg This means that the script is looking for `file.oga` instead of `file.ogg`. If you absolutely __must__ use the `.ogg` file extension, change the mimetype to `application/ogg` instead of `audio/ogg`. This should solve your issue, otherwise you should do it correctly and add the mimetype. Using nginx as an example add the following to your nginx mimetype configuration file (`/etc/nginx/mime.types`): &gt; audio/ogg oga; &gt; audio/ogg ogg; &gt; video/ogg ogv;
Awesome, much appreciated!
MySQL is known for having bad default settings though. I could create RydanSQL and claim it is better than MySQL when all I'm doing is providing a different my.cf file.
haha i asked for a reference book. I didnt know asking for a book was being considered entitled. Lazy would be me hiring your ass to build it for me. I am trying to teach myself with no knowledge other than what I can find. My bad for thinking this community wasnt represented by a loser. Yours truely, The entitled cunt. Edit: This community isnt bad I think this asshole just needs to get a life
The reason I call you entitled is that you asked for a reference before even bothering to find the php homepage. That's laziness, and your attitude was one of expecting to be helped. "I hadn't been given that link yet." That's being entitled. My point is that you should at least try a little bit before you go and shit up web forums with stupid questions like this. I mean, asking for a php reference, really? Did you just forget how google works? Or did you never learn about the internet? Your question is offensive to people that bother with a 2 second web search before they ask for things that are readily available to anyone with either a 3 digit IQ or motivation slightly higher than that of your local snail. Seriously, if you can't even find the php reference manual before you give up and try to ask someone how to do it you don't need to be a computer programmer. You're not cut out for it. It's a difficult thing to do and if you're not capable of figuring things like where's the reference manual at then you're not capable of learning how to be a programmer. 
It takes almost no effort to put something together in PHP, putting something decent will take longer. Though I disagree with junkie's delivery, I agree that php.net/&lt;function_name&gt; is your best resource. Here's what happens when I'm stuck: search engine: php how to &lt;do thing I'm stuck at&gt; After reading a *few* approaches and finding things they have in common, if I had to resort to using a search engine I'll find at least one function I'm unfamiliar with. My next url is: php.net/&lt;function_I_dont_know&gt; And really digest the page. Take special attention of what inputs it takes -- especially if its mixed, whether it modifies the argument by reference or returns a value, and always look whether the behavior has been modified in PHP &gt; 5.0. A pattern that's easy and dangerous to fall into is copy/paste from blogs/StackOverflow. Blog content on PHP rarely ages gracefully, and almost never deals with inherent security issues (unless it's a post on security). Copy/paste from StackOverflow may work, but you learn nothing from it.
In another question you said you hadn't worked with another php framework apart from a custom one. This is probably your problem. I started a job recently with a custom framework which used a load of things I hadn't seen before, I was making fixes on my third day. I was implementing new features at the start of my second week. Fast forward 2 months, my second week feature wasn't written fantastically well but it was good enough and was refactored to the required standard in about 4 hours a month or so later. To your question. Codeigniter and laravel are pretty easy. I would expect someone completely new to be able to write the basic blog application probably on their first day using the documentation alone. Symfony and Zend are a bit more difficult to jump in to. I would say day 3 to complete a basic blog app. I haven't used cake in ages but if I remember correctly it was fairly easy so it would be more on the laravel time scale. The rule of thumb I have for new jobs is to get up to speed in the first 3-4 days. Supply your first code contribution in the first week. Be capable of running you own - probably supervised - project in week 2. Note, with my recent job. I probably did a 60 hour week on my first week. 40 hours at work and 20 at home reading up and tinkering with work specific stuff. Week 2 was similar in time at home invested with further learning. Given 3 weeks to get up to speed with cake along with evening study I would have thought someone would be approaching expert level.
Think of it from the being paid standpoint. They are paying you to make them money. Week 1 is always a write off. Week 2 they probably hope you are 30-50% as productive as other team members. Week 3 50-75% as productive. Come the end of week 4 they would be hoping for 100% productivity. How was you getting along in week 3?
Also a Laravel noob here, this is how I do it: $user = User::find($id); if(!$user) return Redirect::to('admin/user'); $user-&gt;name = Input::get('name'); $user-&gt;username = Input::get('username'); if(Input::get('new_pw') != '') $user-&gt;password = Hash::make(Input::get('new_pw')); $user-&gt;save(); return Redirect::to('admin/user')-&gt;with('message', 'User updated.'); Not sure if this is best practice, but it works well for me. Edit: this code is preceeded by validation of course. 
Nice! I don't have a mac so I'm a little envious right now. Looks like a slick app, and +1 for OSS.
Isn't vagrant for running linux VMs on other platforms? I mean couldn't you just run a linux machine directly with for example docker?
OS X is another platform. Docker allows you to share a lot of OS resources so you don't need a full VM. OS X is not Linux and so you can't use docker there. I mean, you can use Docker, and the official docs say as much but they are actually setting up a Linux VM to wrap Docker around and then building off that. Anyways, this is just a tool to manage your vagrant instances which are themselves Linux VMs — on OS X, because GUIs are fun too.
&gt; GUIs are fun too. Oh, yes GUIs. You tend to forget about them when you're on linux ;-) I honestly thought vagrant was specifically designed with windows in mind for running linux VMs, I was obviously wrong.
At work I use a Linux Vagrant box running on a Linux host :)
Fantastic work, and thank you for choosing to open source this project. I have probably over 100 instances I manage across all of my company's projects, not to mention my personal projects, testing stuff, etc... and I've been using Geektools to display a running list on my desktop of which instances were up, ports which were available, etc... this will be a great replacement for the myriad of bash scripts I have hacked together to help manage all these damn instances. Clean, simple and to the point interface just as described and I can't think of any feature that's missing. Again, well done, and thank you!
Thanks, we've been looking at trying to get something going to support more platforms, hopefully sometime in the kinda near future.
I'm glad you're finding it useful, we do too! There are a few more features we are planning on implementing soon, and of course we hope that other people will contribute to the project as well. If you ever have any feature requests or happen to run into any issues, please submit a [GitHub issue](https://github.com/lanayotech/vagrant-manager/issues)!
Absolutely right that GUIs are fun too, and in this case, not only fun but they can be really helpful. Once you reach a certain level of complexity with anything, trying to maintain that context in your mind, especially over time, becomes increasingly difficult. This manager provides a lot of succinct information at-a-glance so I don't have to try and remember what VMs I have running or hit the terminal to find out. The barrier to entry for recovering that context over a period of time becomes lower and lower as well. I really enjoy little tools and apps like this that are very focused on a specific task and do it really well. I think this is a great example of design/user interface that doesn't get in the way of the user and just does it's job of delivering important information. +1 Clean + simple UI
I'd like to add to any that another good reason to move the cache folder out of the Web root is that it significantly increases speed during performance because all those cache files won't be in a shared folder between the guest and host OS. 
First of all, you must provide a link for this game when it is finished because, mollusks. Just a warning, the link below is for a Java library and not PHP but the docs inside are very well written and helped me understand one possibility for building an application similar to this. I want to turn you on to one of my favorite tools these days that might shed some light on how you can manage some of the interactions between these objects. By no means do you have to implement anything overly complex as some of the examples on this site might indicate, but it should give you a general idea of how this particular architecture works. http://akka.io/ Akka is an event-driven tool-kit that lets you wire and define "Actors" that belong to a common system. These actors communicate to one another using messages, usually asynchronously, which gives you a very robust and expandable application based on composition; introducing new functionality is as simple as adding a new actor and because most of the message handling is very isolated and decoupled from everything else, refactoring is also much easier. For your game example, the Player, Tree, and Rock might be actors of the system. The Tree and Rock may have a reference to a MolluskSupervisor (basically what yo called a manager). The Rock actor understand the "Search" message, so when your Player sends that message to the Rock, it then sends a message to the MolluskSupervisor saying "GenerateMollusk". The MolluskSupervisor may send a message back to the Rock saying "FoundAMollusk" and now the Rock can check the Mollusk and report back to the Player. It really sounds like you're on the right track as far as implement this sort of architecture and it sounds like you've got an understanding of how an actor based system might work, and just need to fill in some of the gaps. I highly recommend you browse through some of the documentation on this page: http://doc.akka.io/docs/akka/2.3.2/java.html as it can be really informative on how this sort of system works. Try not to get too hung up on the language being Java (there's a Scala version as well) they did a very good job explaining the architecture in depth without depending on understanding the code. Another thing you may want to look into is a design pattern called CQRS (Command Query Responsibility Segregation) which is explained very well by Fowler here: http://martinfowler.com/bliki/CQRS.html While I think trying to implement CQRS for your browser game could be an example of over-engineering, I think you might be able to pick up some ideas on how to manage the commands and responses between your Player, Rock, Tree, Mollusk, etc... objects. Not only that, I hope it gives you some affirmation that you're chugging along in the right direction and you seem have most of the pieces figured out. Hopefully this is somewhat helpful, good luck on your game!
Thank you! This is very useful. I'll start reading through the Akka docs tonight. PHP is very new to me, though I've been wanting to make this game for years. When I tell people I'm making it in PHP they give me "Whyyyyy" looks (I almost switched to Python!) I want to take the time to learn how to use PHP "properly" for this instead of just slapping it together like I've been doing, hence the big refactoring. It will take a while and probably require a lot of revision based on what I read of the docs you sent and other useful advice, but will be worth it in the end. I'll be sure to post the link here whenever it's playable :) I have a very rough playable version in HTML5/JS form but it's not really relevant to the PHP subreddit. In the meantime, I am keeping a blog of my progress [here](http://liza.io/category/game-dev/) if you're bored one day and feel like reading about virtual mollusks... Thanks again!
Sorry to hear about being let go, I know it sucks to have to look for a new gig but I think the silver lining in this situation for you is the opportunity to really gauge what is going to be your focus for the next few years of your career. Unfortunately I feel like this situation is a text book example of why it is important to understand a number of common design patterns and methodologies. Many folks in the community will say that knowing patterns is pointless but I can tell you right now if you understand them, going from one application, framework, or library to the next becomes a trivial task and you end up complaining more about the format of the docs than the quality of them. Here's some patterns I highly recommend you become familiar with if you are not already. You'll find these in almost every application with more than one developer. Ref: [Pattern List on Wikipedia](http://en.wikipedia.org/wiki/Design_pattern_%28computer_science%29#Classification_and_list) [Fowler's Pattern Catalog](http://martinfowler.com/eaaCatalog/) [Pattern examples](http://www.oodesign.com/) Specific patterns: [Composite](http://en.wikipedia.org/wiki/Composite_pattern) [Factory Method](http://en.wikipedia.org/wiki/Factory_method_pattern) [Adapter](http://en.wikipedia.org/wiki/Adapter_pattern) [MVC](http://martinfowler.com/eaaCatalog/modelViewController.html) [Front Controller](http://martinfowler.com/eaaCatalog/frontController.html) [Page Controller](http://martinfowler.com/eaaCatalog/pageController.html) [Service Layer](http://martinfowler.com/eaaCatalog/serviceLayer.html) [Table Gateway](http://martinfowler.com/eaaCatalog/tableDataGateway.html) [Data Mapper](http://martinfowler.com/eaaCatalog/dataMapper.html) [Repository](http://martinfowler.com/eaaCatalog/repository.html) This is really just a short list of some of the more common patterns that I think exist in a majority of frameworks and applications. Become familiar with these and when you're working with a new framework, it won't be so much how the framework works, but what it has implemented and where. Good luck!
Question: Do you perform save() on every update method? or should it be called explicitly? 
After some work, I think I found a way to produce the desired outcome, there is a little bit more code involved, but thankfully not a lot. Let me know what you guys think. $date = 2014-04-01 00:00"; $increase = "+1 week"; $format = 'Y M W'; $bArray = array(); while (strtotime($date) &lt; strtotime($end)) { $bArray[] = date($format, strtotime($date)); $date = date('Y-m-d H:00', strtotime($increase, strtotime($date))); } 
They both have their merits depending on what you're testing. For core functions, TDD would probably be more suitable. BDD is good for testing your application from client's perspective rather than developer's. Also, I do highly recommend [Codeception](http://codeception.com) for BDD. It also comes with PHPunit, as well. So, with Codeception you can run both TDD-oriented and BDD-oriented tests with ease. 
Codeception is great - but can be a little buggy. I have two outstanding issues with it currently, one on the bug tracker, and one I *think* is related to fabpot/goutte v2, but haven't investigated further. Frustrating when the test environment throws you the odd red herring, but overall it's top class. Codeception is also great because you can run your unit, acceptance, and functional tests from one command. And you therefore only need to learn one library to meet three testing environments. Migrating from phpunit is easy as it's uses phpunit underneath. 
cheers, this is ultimately what I have done. The link method has been trimmed right down as a result, and the end result is nice and clean. Just a shame it requires more than one request to relate multiple entities, but I can live with that. thanks! 
I haven't implemented PATCH here as replacing the entire resource using a PUT is easily sufficient. PATCH does indeed seem to be a total can of worms. I'm using Symfony underneath and even using the form in patch mode just ended up with entities with all the exposed fields missing / empty (not null though). I've stuck it on my TODO list for v2 in this instance. Nice to have, but not essential currently. 
Correct!
Is there anything similar for Linux or Windows?
I suppose you could post a list like `[{id},{id}]` to `/tasks/{id}/users`. I'd expect a GET on that resource to respond with a list, so posting a list to it that sets the current list of user IDs seems kosher.
Ya I get the business standpoint, you always want employees to hit the ground running and know everything about the app and your tech stack from day one (used to own a dev business once upon a time). My own assessment was that I was around say ~50% productive. I was getting the framework (the relation between controller and view, crafting database calls with the ORM layer) decently, although I needed more exposure IMO. If it was jsut the framework itself, I'd evaluate myself at more ~60ish or so. The part that was tripping me up was the application design itself. Non sensical variable names, no documentation, the database schema sometimes you coudl guess what table you needed....and sometimes it was a "that's what I need?" type revelation. Debugging was an adventure as well, the application made a lot of ajax calls, which in the framework made error messages disappear into the ether....or would stop some parts of the application from working at all. Plus tests that took hours to run didn't help either. Honestly I'd say some of those componets were the boat anchor, I mean I felt there was progress, but it was like putting a large parachute to the back of a runner and then saying he's going too slow. Hopefully that made sense.
BDD has got a bit conflated with acceptance testing in the PHP community because of tools like Behat and Codeception. BDD is really just about thinking in terms of behavior when writing your tests. There's nothing about PHPUnit that prevents you from taking a BDD approach with it. Here's the original BDD article: http://dannorth.net/introducing-bdd/ and a discussion on StackExchange about BDD vs. TDD: http://programmers.stackexchange.com/questions/135218/what-is-the-difference-between-bdd-and-tdd
It may be sufficient now, but what happens when a task starts being tied to *hundreds* or even *thousands* of users? I don't know your application, so I can't say whether or not this is a legitimate concern for your use-case, but it's something to think about. Completely replacing an entire collection just to add an element to that collection is wasteful, at best. That's not to say you shouldn't support `PUT` on a collection resource, though. It's still a good idea. But it should be done *in addition to* one of `POST` or `PATCH`, and never as a replacement for them.
+1, I'd love a Windows version of this that sits down in the system tray
PHPSpec is awesome, but it may be too strongly opinionated and unforgiving to cover **an existing project**. You will need to refactor a lot ­— I promise. PHPUnit is more flexible and less idiomatic. BTW you can do both BDD style and traditional test with it. It's probably a more suitable solution for existing codebase if you are not going to rewrite almost everything. Anyway it may be not a good idea to cover an existing project with unit tests (if it's not a library). You probably need functional/acceptance tests like Behat
Came to comments to post just that.
TDD
True. But we can't deny the other stuff that they have on there.
Right now, for this app, it's fine, but I do see your point. I'll be honest, I haven't implemented PATCH more out of confusion as to the best way how, than to laziness. The easy way seems to be to have various params in the patchAction controller method, and if they are set, then replace. That would probably be easier / nicer in php5.6 with the ...$var syntax. However, [this](http://williamdurand.fr/2014/02/14/please-do-not-patch-like-an-idiot/) says that's a bad idea. So, again, I have looked round for a best practice solution to this - which was what led me down [the PATCH method on the Symfony form](https://github.com/symfony/symfony/pull/7849). But this is leaving me with entities with any exposed field being set to blank anyway, and besides, seems to go against the article from Will Durand. So then I went down the route of looking at [json patch](https://github.com/mikemccabe/json-patch-php) and honestly, it looked like more trouble than it was worth to me for the re-write of v1 of this current API. I will have to solve this problem eventually, as not all our apps use such a "simple" implementation as this. But - unless you can offer any help / tutorials / code samples (please do!) - I have had to draw a line under the back end of this and move onto the front end implementation for now. BTW - if we get thousands of users on this, I will be driving a Ferrari, so here's hoping :D 
yeah seems reasonable, I've stuck it on my todo list. 
Why do you even need that? Isn't that part of what IDE are for?
If you start committing your dependencies into your git repository, its size will grow and grow and grow… And it's irreversible. A simple `git clone` of your repo might (in a few months/years) download a 10 Gb repository because there's all the history of the dependencies too. Been there, done that, we had to start from scratch in a new repo. So **no-no!**
Try this: $file = new SplFileInfo('C:\Users\someone\Desktop\xampp\htdocs\rtest\derp\herp\text.txt'); echo $file-&gt;getPathname();
Thank you for the reply, but that seems to just return the path I provided without replacing the directory separators.
Maybe it's because of my examples, but this extension is not about asset management. As I said before, it provides a posibillity to postpone the rendering of blocks. It's up to you how to use it. For example, you can collect some data accross templates and output it in the base template or use it for debugging purposes, etc. Regarding assets concatenation, there is a "variables" feature in Assetic, that could help solve the case.
(This is a different approach, but works for AOP extension) If the project properly documented their functions for reflection, then you can use this script I wrote for the AOP project: https://github.com/AOP-PHP/AOP/blob/master/doc/php-declaration-generator.php It generates a stub file with all the signatures enumerated. Like: https://github.com/AOP-PHP/AOP/blob/master/doc/aop.php From that you can add docblocks and just use phpdocumentor and/or the stub file will be useful for code completion in an IDE.
Oh, I just like the interface for starting Vagrant VMs. Vagrant is more for managing development environments, typically, and you have to start/stop/etc your VMs via command line. Windows and Linux don't have fancy apps like this that I know of. :-P
This is really awesome! Wasn't aware of it's existence. Good choice on open sourcing it too.
Great! I needed an easy way to manage ACL, since I think the existing component is really complex. Thanks!
Thank you again for responding. Str_replace won't do, it also wanted to interpret [escape sequences](http://php.net/manual/en/regexp.reference.escape.php) in the path. So for example \rtest is being interpreted as a line break followed by test. \text.txt is beig interpreted as a tab followed by ext.txt. EDIT: Hey, you and /u/babylion were right, I was just being stupid and using double quotes to encase my string rather than single quotes. Thank you again for your responses!
I'll just leave [this](http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html) here. Articulates my feelings on test driven development nicely.
It looks like your design is driven by front-end, which is bad, with the stopRules(), stopFields() methods. This is not OOP, it's procedural code put in a class. The validation object should have a clear input and a clear output, don't try to add arbitrary control flows just for micro-optimizations sake. You're not doing yourself a favor by suppressing errors either https://github.com/G4MR/Validation/blob/master/Validation.php#L182 Don't slack out and handle it. Also, don't reinvent the wheel, I'm sure you'll find a very similar validation package on packagist.org which you can modify to your needs.
This works with __FILE__, but if for example [I provided what realpath would output on a Windows system](http://codepad.org/Mu1tSdKU), such as this "C:\Users\someone\Desktop\xampp\htdocs\rtest\derp\herp\text.txt", str_replace does not work. 
That or just the PHP docs. This feels for uglier and crowded.
you are doing something wrong. check this: http://sandbox.onlinephpfunctions.com/code/b3c58302380da623d88eab2af83e2487d1833e8c your code is working Edit a fork of your example: http://codepad.org/3AUI4ght
The implements line isnt right either, there should be a line after namespace too. Not sure if these are PSR, but space out the methods/properties. 4 Spaces is PSR. And put a new line in between methods
OMG, I feel so friggin dumb. It was double quotes that was causing the issue. In your codepad example, you provided the same path string encased in single quotes and it works, in mine, I have it encased in double quotes. I changed mine to single quotes and POOF, it worked. DERP! Thank you so much! 
&gt; The validation object should have a clear input and a clear output, don't try to add arbitrary control flows just for micro-optimizations sake. Can you give me an example of how you would do it? &gt; Also, don't reinvent the wheel, I'm sure you'll find a very similar validation package on packagist.org which you can modify to your needs. Yeah I've been there looking, nothing I like and I couldn't get illuminate/validation working. Eloquent worked fine though. Thanks for your feedback.
How do you even use that? Looks like a timewaster to me.
Nice idea, horribly presented. Sorry but its quicker and easier to just type into Google **Edit**: Ok, I'll try and be more constructive... - Why would you link to every array API, but the header 'Array Functions' doesn't link to corresponding 'Array Functions' index page on the PHP manual site? - All the mysqli functions are prefixed with mysqli::. Its not needed, since we already know they are mysqli methods - No mention of PDO at all. - All the long consts at the bottom just wordwrap and are close to unreadable. Really, who would find this useful? - Finally, my biggest gripe.. resizing the browser window results in all panels magically reshuffling position. A classic case of trying to be clever with HTML when it destroys any semblance of usability.
Really? Doesn't even have the function parameters. Might as well just go straight to php.net.
My problem with codeception is I didn't see a way to do --filter like Phpunit. I find that feature very helpful.
what IDE do you use, that you need something like this?
This is OOP. What makes you think it's not? It can definitely be improved, but it looks like any other validator classes.
You also seem to be imagining a world that doesn't exist.
I don't really use an IDE, never have. Lately I write everything in Flashdevelop just because it's convenient, before that I used vi (still do, a lot).
I'd probably structure a validation class like this: __construct(array $rules, array $messages = array()); //Setters and getters for $rules and $messages validate(array $input); //Returns false if the input fails validation assertValid(array $input); //Throws a validation exception containing failed messages and input define($rule, $callable) //Add custom validation rules The Validation Exception would be an interface with a default implementation, so you can implement it on your own relevant custom exceptions if need be
Vi pretty easily becomes a full on IDE. It can do just about anything most modern IDEs do via plugins.
Give this one a shot, pretty clean http://devdocs.io/ 
uh jesus. just go back to being miserable. I am litterally starting from nothing with php. I was able to learn html and css on my own I was just looking for some direction. 
thanks!
Or... code completion
I can't really give any advice on your particular implementation, but I can tell you that that article is completely wrong. The semantics of a `PATCH` instruction set are deliberately left out of the spec. The author is trying to make the assertion that partial-`PUT` style semantics aren't an "instruction set", but that's nonsense. `PATCH` is (can be) very simple. Here's a quick example: *Request* POST /users {"name": "John Doe", "age": 30} *Response* 201 Created Location: /users/123 {"id": 123} *Request* PATCH /users/123 {"age": 31} *Response* 204 No Content *Request* GET /users/123 *Response* 200 OK {"id": 123, "name": "John Doe", "age": 31} I don't personally see any benefit to using some obscure JSON diff/patch style instruction set semantics, but to each their own.
Thanks for the linkage, and I totally agree with your statement. As I've been debating moving to another language (friends of mine in the industry have been saying I should get out of doing PHP from both my experience and theres), I'd reckon this will help even more so.
Which you received. As I said, I've already given you the best advice a programmer can give or receive: RTFM. I gave you direction. You just didn't like it. 
Why isn't the conclusion, "*While a fun exercise, use the built in sort function. Building a sort function in interpreted PHP code will never be faster than the C varient that sort() employs*"?
Testing is such an interesting subject, and there's so many opinions and ideas, it's such a healthy community where philosophies and ideas are constantly being re-shaped and refined, even though many of the concepts have been around for decades. Behavioral testing can and should be done alongside unit testing. They test your application from two different perspectives. Being able to test certain aspects of your application depend not just on the technology you have available but some of the business aspects you have available as well. I find more often than not testing behavior is done from the perspective of the business. As stated throughout these comments, behavioral testing will show more of a return on an existing application without any testing where most of the work will be re-factoring by ensuring existing functionality does not change. "As some user, can I perform some action, and is the result what I wanted?" This is one of the reasons why in agile development you see work requests take the shape of user stories using the "As a ___, I want to ___, so I can ___." because that format defines a role, an action, and an outcome. You can break that down further using acceptance criteria to help define in more detail, given you are somewhere, when you do something, then something should occur. The "Given, When, Then" syntax of acceptance criteria should start looking familiar if you've spent some time reading about BDD (especially if you've encountered Gherkin syntax) and in fact it is where we setup the bridge between the requested behavior, and the tests we will run to determine if we've satisfied the requirements. Story: * As an editor, I want to add images to my articles, so that I can include photos of news events on the page. Acceptance Criteria: * Given I am logged in as an editor * And I am editing an article * When I click the image button on the text editor * Then it should pop-up a window asking me to select an image * And it should be showing my desktop * And I should be able to upload my image * And it should now display within the article Now you can use a tool that can map English language definitions like this to a context where you can setup some tests that will look for a button on the editor, that try to upload an image, and that check to see if the image is in the content of the article at that point. One of the biggest side affects you might see from this practice is that the people asking you to do work have to provide you with enough information for you to actually do the work. The onus of inventing the application isn't left on your shoulders via some request akin to "make me a Facebook". Instead you have simple to read, easy to understand, ubiquitous English language around the work that needs to be done. Maybe more importantly you also have an end-goal, something that can tell you "this work is done" and you don't endlessly keep refactoring or gold plating something that already works fine enough. Unit testing on the other hand tests your application from the other direction. When you've made the commitment of defining your API, part of that commitment means you won't change things like parameter order, naming, or return types. This isn't difficult to manage when your application is young, but as more cooks enter the kitchen and time goes on, all it takes is modifying that one method that's used everywhere for a bug that causes a rounding error because now your application is rounding up instead of down in some places. Unit testing also covers the logic and flow your application provides. If you have a complex method with a number of conditionals and switch statements, there could be a number of potential outcomes and side affects based on whatever is passed to the method. In order to verify that your API will adhere to its commitment to not change you'll often find that you may need many tests to cover a single method. The XUnit frameworks are fantastic at letting you know how much of your code has been covered and what logic might need to be tested to achieve 100% coverage. public function testThatOverdraftingAccountTriggersFine() { ... } public function testThatOverdraftProtectionUsesSavings() { ... } public function testThatEmaiAlertIsEmittedWhenOverdrafting() { ... } Another thing I really like about unit testing is that it helps keep scope creep under control. If you're following TDD then by the very nature of the process you're writing your tests as a TODO list of things that need to be implemented. Once you satisfy one test condition, you move on the next and there's a sort of comforting feeling knowing you're not going to have to sit down and invent some business process, instead, you can spend time developing or a solution to an already well defined process. Unit testing will usually show more of a return on new projects where the API and components need to be defined and do not exist. Unit testing provides accountability for your code and your application by guaranteeing that you deliver on the promise that your API won't change, and if it does, the rest of the application gets updated as well (very easy to find dependencies when you have good test coverage). Behavioral testing provides accountability to the feature request giving you a finite set of roles, actions, and outcomes to implement to satisfy the request. Use them both and you'll find your life as a developer can become much easier. 
Thank you! Code used: $filearray = file("log.txt"); $lastfifteenlines = array_slice($filearray,-100); $onlinestep = 0; while($onlinestep &lt; 51){ print $lastfifteenlines[$onlinestep]; $onlinestep = $onlinestep + 1; } I changed it to 50 lines, but the 51 can be changed to the amount of lines of the file to print plus 1.
[Just about everything you need, right on the PHP.net website.](http://www.php.net/manual/en/langref.php) No need to reinvent the wheel here.
I read Firefox's usage instead of apaches. The file is only 3 and a half MB's but I do not really need to send the entire thing to the client. The code fixes that.
Firefox crashed and Chrome lagged most likely by having to render over 52,000 lines (constantly getting bigger by around 14 lines a second) every 200 milliseconds along with making it go to the bottom of the page when it renders. 50 lines is much more manageable for browsers. I shudder to think about how IE would have handled it.
More complex algorithm for use on Windows or if you just want to avoid having to spawn an entire process. Adjust chunkSize based on your expected line length and number of lines. &lt;?php function tail($file, $lineCount, $eol=PHP_EOL) { $fp = fopen($file, 'r'); $chunkSize = 1024; $chunk = 1; $buffer = ''; for (;;) { fseek($fp, -$chunkSize * $chunk++, SEEK_END); $buffer = fread($fp, $chunkSize) . $buffer; if (substr_count($buffer, $eol) &gt; $lineCount) break; } return array_slice(array_filter(explode($eol, $buffer), function($f) { return $f != ''; }), -$lineCount); } var_dump(tail('myfile.txt', 10)); ?&gt; 
A cheat sheet with adsesnse on it...?
&gt; Sorry but its quicker and easier to just type into Google Have you guys ever tried this php.net/{a feature name} e.g. http://php.net/print or http://php.net/mysqli
This is not a cheat sheet. This is just an unreadable long list of function names and constants. Cheat sheets are meant to ease some of the things thar are hard to remember - like is the needle or haystack the first parameter, common regular expressions associated with the functions using them or similar. This is just horrible.
&gt; Seriously, if you really have that much experience, why not consider work from home? If (and it's a pretty big if I think) he really has that kind of skillset he can probably work from home and pick up contracts at a much higher hourly rate. You might still only make $30k/yr, but you'll only be working like three days a month. I took off from a position and did the contracting thing. I didn't make any more money than I did before, but I essentially had 36 weeks a year vacation.
&gt; Second, your test may be a tad unfair for people who don't know the function strrev exists. Still, not knowing that strings can be accessed like arrays is a problem. As long as you're not grading them on the quality of their answer, just using it to ensure they have the most basic of ability in the language, then it's not unfair at all. Do you know that loops exist? Can you write a loop? Good. If you're not worried about efficiency, then you can solve the problem in three lines. for ($i=0; $i&lt;strlen($str); $i++) if ($str[$i] != $str[strlen($str) - $i - 1]) return false; return true; If someone can sit down and not come up with *anything* and can't even begin to reason about the problem at all (showing they understand how to solve it, even if they're unfamiliar with PHP in particular) that's a huge red flag.
Nice attempt - to be honest the type ahead on the official PHP docs pages is pretty good these days - usually have been using that of late.
You're conflating BDD and acceptance testing. BDD vs TDD is a stylistic issue. You can take a BDD approach using PHPUnit, or you can (ab)use Behat and PHPSpec to do things that are clearly not BDD. BDD is more about workflow and mindset rather than tooling.
That's not what I'm talking about. This is just a load of links to the PHP manual. If you're looking for a particular function, it's faster to set up a shortcut in your browser so you can type a keyword + function name and it'll take you straight there. For myself, I've set it up in Chrome so I can type `pf &lt;function name&gt;` and I land straight on the PHP manual's function page. If it can't find it, the website automatically takes me to the search page.
I write my code on napkins in a coffee shop and then fax it to india where they convert it to FTP
Yes, yes we can
This one looks really nice
Hmmm, you could try out wardrobe, https://github.com/wardrobecms/wardrobe
Check the Symfony CMF: http://cmf.symfony.com http://symfony.com/doc/master/cmf/index.html
Yay, google
[PyroCMS](http://pyrocms.com) has implemented PSR-0, PSR-1 and PSR-2 in much of its [2.3/develop](https://github.com/pyrocms/pyrocms/tree/2.3/develop) codebase as it migrates from being tied to CodeIgniter, to being a general PHP application that happens to live inside a Laravel wrapper. I'll be switching the codebase over from PSR-0 to PSR-4 as soon as possible, as PyroCMS was the entire reason I personally wanted to get involved as Coordinator of PSR-4, and pushed so hard to make it a quality standard. 
Wasnt the OP asking for a blogging platform? Why are you guys recommending full blown cms or framework platforms?
A blogging platform is a CMS.
The two are not the same, you can use a CMS to blog (but it may be a bloated, heavy solution to *just* blog with a CMS if you were to go with most solutions) amongst other things, a blog on the other hand, does just that; blogging. Take http://ghost.io/ as an example. THAT is a piece of blogging software, not PHP though, but nonetheless brilliant. While blogging software can be seen as a CMS, a CMS can not be seen solely as blogging software.
Command-t, php in_array, strike return. Always a syntax example and link to php.net in any major search engine using a browser with 'omnibar' style functionality. Better yet, download the docs on a Mac, and just command-f it. 
Windows? That's quaint. 
&gt; While a fun exercise, use the built in sort function. Building a sort function in interpreted PHP code will never be faster than the C varient that sort() employs added. Thanks. 
I would learn from it as a beginner, what's wrong?
The way variables are substituted into the queries is completely insecure, as well as the fact it's using a deprecated MySQL library.
By definition, a blogging platform is a CMS. A CMS is not necessarily just a blogging platform, and no-one said it was.
That's the problem, beginners will learn this. Taking user input straight from $_POST, no validation, and putting straight into a query, with no prepared statments or escaping. Worst practice ever. And MySQL extension is depracated.
I think I recognise this site's layout from when I was learning. Around 8-10 years ago. It's not like they've just published this. The solution to old tutorials is to publish better versions.
Fair enough I suppose. At least it makes it clear to anyone else who wants to post suggestions ^^.
Layout, theme and everything else clearly indicate that this website has been online for years and so this tutorial is most likely 3+ years old. 
He asked for a square and people are telling him about rectangles. Wait a minute, a square is a rectangle... Does it make more sense now?
No matter how long it takes, three weeks is not enough time to adequately assess someone else's potential in the near or distant future, whether it's a framework, let alone a body of domain specific rules and definitions. You were shafted plain and simple. I'm guessing someone saw something in your approach that put up a red flag that to them indicated 'if he doesn't even know x yet, he'll never get y in a timeframe that I can live with/make money back in training him. This is not a fault. 
I realise it's not recently published. But as a "tutorial site" that clearly makes money from advertising, they should either keep their content up to date, or have attention drawn to their out of date and crappy content.
I really wouldn't think this should be a reason to switch languages. But, I'd be curious to hear your reasoning.
Sorry I may have miscommunicated. The switching to another language/tech stack preceded this whole thing (indeed it's been something that's been in the back of my head for a while now. Was more commenting that such knowledge would help a transition to a new language be easier then not having said skills.
Static is the new dynamic: https://sculpin.io/
I'd still be curious to hear the reasons :) You may have some questions answered here
But a square has additional features, you can also call it a rhombus. So all its sides are congurent. By this additional feature, its more appropriate to solve this problem with the additional feature, rhombus. By definition a rhombus also follows the PSR -standards, and its web scale. 
That doesn't make any sense. This page just tells you the name of the function, it doesn't even give its args. Why not jut set chrome to take you directly to the sprintf page on php.net?
Squares also have equal angles. Your rhombus that supports static content generated from markdown is definitely web scale, but it is also still a rectangle.
Definately. But maybe instead rewrite the rectangle with COBOL and fork the rectangle's third angle, and write a new transclusion service with angular, then port it to coffeescript and after that rewrite the whole thing with perl. After that the rectangle has been morphed to a rectum. Still following PSR though..
I'm not knowledgable enough to comment on the race conditions, but one thing I would do is rename your `Lock::locked()` method to `Lock::lock()`, which makes more sense semantically. You could then add a `Lock::isLocked()` method for determining if an ID is already locked in the underlying data store.
Hi thanks for taking a look. I didn't want to implement an isLocked method because it would only be accurate for the microsecond it's called, not necessarily when you call acquire() so it's easier just to call acquire and deal with the result. I agree the name locked is not ideal, but I think lock would be confusing also as lock and acquire mean pretty much the same thing. Needs more thought really.
Unfortunately I find it not too uncommon for reddiquette to be ignored in /r/PHP when you mention Drupal, I'm quite used to it. 
June 2007 https://web.archive.org/web/20070612082702/http://www.tutorialspoint.com/php/mysql_insert_php.htm Looks like it was simply set up for search engines to index and bring some traffic for ad impressions (from which today they have received quite a few of, thanks OP!).
Very nice and clean code. However, here are some suggestions to improve: - As you are providing a library, try to use "protected" instead of "private". E.g. maybe I would like to extend the redis adapter - but you wont give me access to the connection object? *sadpuppyface* - `Lock::acquire()` - the namespace "dlock" should be an option to set, I like my cache ordered :) . - Simpler Interface for Blocking/Timeout: instead of passing a boolean AND an int to do a blocking acquire, just pass a timeout (if timeout = 0, the while-loop will only run once anyway). -&gt; acquire($timeout = 0). - The timeout parameter is a bit dodgy. Depending on how fast your datastore returns an answer for the "acquireLock" call, it may run much longer than the provided timeout. You should compare the timeout with the "unixtime on first try". - redis driver: prevent deadlocks (see: http://redis.io/commands/setnx). So instead of `Redis::setnx($key, 1)` use `Redis::setnx($key, $unixtime + $ttl)` and do some cleanup with the help of the actual value of the key. Same goes _maybe_ with memcache. Thats all for now :)
I could try that. I am not really worried however because this is a an app that only has 1 computer connected to it at one time. The file is only 3.5mb. It crashes everything having to display 52,000 lines of text.
phpmyadmin is just a tool to **ease** database managment, i suggest that you first learn mysql you are not going to get far with this whining attitude, nobody owes you anything
You can use Navicat instead of phpMyAdmin.
A decent knowledge of PHP's core functions and language constructs. An understanding of security concerns (xss, sql injection). Basic HTML and CSS skills. An ability to research solutions and best practice. And most importantly a huge desire to learn new things. 
To be able to spell "whether" correctly
Maybe no PHP skills, but should have some experience with web development. In general, I expect someone to be able to mostly explain the basics of how an object oriented system works and how to avoid SQL injection attacks. Given a short snippet of code, can you figure out what it does?
Bugs.
The only thing I really like about this site is I can type in the search box
I think it's somewhat problematic that there are no dates showing on the site, except a copyright that's coded to display the current year. "Copyright © 2014 by tutorialspoint"
You need to increment your $i. Right now, it's stuck at 0. Put the line: &gt; $i++; at the end of your while loop, and you'll be fine.
A frield is building a blogging application ontop of silex, it's early days but it might be what you're looking for - [chula](https://github.com/stephcook22/chula/).
Thanks.
Tears
Sorry, I'm dutch. :)
I found what I needed: the WampServer icon in the system tray. From that I can run phpMyAdmin. I just didn't see anyplace that talked about or showed me that icon. I know enough SQL to be able to use the command-line tool. I just wanted a GUI tool to make it a bit easier. My thanks to those who took the time to answer.
Thanks for the encouragement. I know a fair bit of SQL, as I am a professional software developer. It just seems to me that the steps needed to start using these tools, especially Apache, are harder than they should be for Windows users.
**1. Resourcefulness** Even if you don't know something, I expect you to be able to find the answer and get it done. Even if that means asking other people on staff, or making a phone call to a vendor to speak with one of their engineers to get a quick answer. **2. "I can't do it" or "I don't know how" is unacceptable** This shows that you give up when you run into a problem, and cannot follow through. Now, if you say "I don't know how, could you help me?", that's a subtle but important difference. It means you haven't given up and you are asking a coworker. Now of course, if you do that TOO much (especially for easy-to-solve problems), then there's an issue. **3. Put effort in** Refactor your own code at least once. Come back to it a day or even a week later, but refactor it. Writing code is like writing prose - it's never as good as it can be the first time around: revise it. If you don't have the time in your schedule, don't be afraid to tell your tech lead or PM that you would like more time to refactor what you did. If they don't give it to you, then at least you tried. That said, I would rather have a junior dev committing cleaner code with a lower sprint velocity, than a junior dev committing a bunch of shitty stuff with a higher sprint velocity. **4. Ask for code reviews** If you don't get them, at least ask. It shows you care about getting better. **5. Communicate** Along the lines of the above, if you're struggling, communicate to get help. If you run into a spec or feature that seems like a huge jungle, bring it up with your tech lead to get his/her opinion BEFORE you start rambo coding. It might be a simple fix that your tech lead can point in the right direction to solve, or it could in fact be an out of scope request that your PM will need to resolve with the client. Never be afraid to communicate, ask for help, or ask for feedback. If your PM or tech lead shit on your for it, they're shitty, and that's a separate problem entirely. But, be careful not to use them as crutches. At the end of the day, the responsibility is still yours to solve the problem. Note that none of the above requires any exacting, specific knowledge or skill. Rather, it requires a foundation upon which skills (teamwork, communication, programming) can be built.
Thanks, great suggestions. I've implemented most of them. I'm a bit wary of making things protected because really I don't want anyone to rely on the implementation details of the class. I'll ponder it further. I think timeouts in the blocking lock are always going to be a bit dubious but they should be at least slightly more accurate now. That redis page is worrying, I should have read it more carefully. I guess I should switch to their new suggested method of locking using SET + lua.
This shouldn't be defined in PHP, as it is a front end thing. I made [this](http://codepen.io/anon/pen/joAty) example to show you what I mean. Also you should be using [PDO](http://www.php.net/manual/en/book.pdo.php), and moving business logic outside of the view logic. Check [this](http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html) out to find out why. 
Yeah I think what a lot of people didn't really get when the "new design" came out, was that it was the start of them being able to easily tweak and improve things as they go. People screamed "ITS NOT IMMEDIATELY PERFECT!" and had a little cry about it, but since then the team has been rolling out small and sensible updates, based on user feedback and their own ideas of what makes sense. That's how we want things to work. The folks involved with the redesign are all good people. Keep feedback constructive and things will get done. :)
There's no help for this--you simply need to cut your dataset size down as much as you can before passing it through PHP.
darn, yeah that's what I was afraid of.
You can use [set timeout](http://www.php.net/manual/en/function.set-time-limit.php) if you have to, though you'll probably find you can create a query to properly sort your dataset.
Such good points. Can't recommend using Virtualbox enough. There's plenty of guides out there on how to setup a lamp stack on Debian or Ubuntu. You can set up shared folders too, if that's something you need.
Although I won't mind CMS suggestions or frameworks, I am familiar with most of them so chances are I probably already know it. I posted my question because of the perceived lack of a blogging software that uses the PSR standard. And based on the answers so far, I think I am right. Just keep the suggestions coming guys. Some alternative solutions do look attractive to me, like using a static site generator.
Have you tweaked the indexes at all? Surely you aren't returning that many rows even with filters, right?
&gt; I need to select from that table rows which meet certain criteria that can only be assessed by passing row data through a php function. You didn't elaborate on what this "certain criteria" is that you think you need to do in PHP, but SQL is a *very* expressive language (not even counting vendor extensions), so I'd be pretty shocked if there was really no way to apply this criteria within your query itself. And, not to be an ass, but... &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC
&gt;This shouldn't be defined in PHP That depends on what browsers and browser modes you support. 
I'd be surprised if you couldn't write a User-Defined-Function in SQL to do this for you
If I might hazzard a guess (I personally upvoted this) it's because my GOD does drupal have a learning curve, especially if you want to develop for it
Whoa I just realized you can click on the function args to take you to that section of the documentation. That's awesome!
Agreed. Phil - do you have the URL at hand for submitting design change requests? One minor thing that bugs me - since there is a consistent position: fixed header internal page anchors are hidden underneath when navigated to. This can be solved with the anchor on a relative container vertically offset by the height of the header. Alternatively the fixed header could slide away upon the start of page scroll. 
The dark background is horrible :-(
Problem with a SQL function if implemented like for like it will still involve a full table scan. I have done work with this same formula in the past for distance calculations (rather cool formula too - takes into account the differences of distance closer to the north/south poles. Smart stuff. I would suggest you either pre-calculate data if possible into a secondary table - or (and probably easier) do a "dirty rectangle" distance check first just outside of your target range (which will be fast with correct indexing on lat/long coordinates) then do true calculations in PHP upon that subset. 
Make the comment, and they will come. Thems folk all read Reddit and I'll DM dragoonis just to be sure. 
I think the contrast between dark/white is still okay.
Hey, I'm glad you like the changes I've made. Putting the menu on the right fixed some bugs in browsers that don't support media queries; it also brings it into line with other supplementary content that was already on the right. By adding the deeper contrasts we can make certain things pop out such as the function declarations and the examples. This also opens up the possibility of improving the code snippet highlighting to have more freedom in color choices so hopefully we'll see that in the next few months. It will take some time to roll out these improvements on other php.net sites such as the wiki but eventually everything should be cohesive. Probably the last site to be converted will be bugs.php.net because it needs a lot of individual attention.
I think Ghost's admin panel is what makes it awesome. Currently, it doesn't do anything that absolutely requires a Javascript-backend, although I imagine Ghost Apps will work server-side.
May I suggest using a slightly different color for the sidebar and header/footer? I think it looks a bit weird, especially the («prev next») above the menu. IMO it would look better if it was a different color.
Clear ClearVar UnsetValue I agree. I can't tell you how many times I wanted to name a method "list"
I went with _unset() and added a remove() alias. UnsetValue was my next guess, but it would mean I would have to change set() to setValue() for consistency. Well at least it's one way to enrich my knowledge of synonyms =)))
Just translate it to Spanish.
I ran it through a different one that output: no puesto 
it seems that "no puesto" means that something is already not set, not the process of unsetting it
PHP is open source. Fix it yourself, or don't complain that no one else will.
Do you have to look at all 18m rows? check out the talking around a bounding box in this link: http://www.movable-type.co.uk/scripts/latlong-db.html 
You should consider using redis data structures. Make sure to manage your memory and use pdo cursor. 
I like it. Now if we can just purge every single user-submitted example and replace them all with real-world, down to earth, simple examples of how to use each one the way jQuery does, we'll be all set.
Uh, depending what *exactly* your requirements are PostGIS could probably do this for you. And it can create indexes on geospatial data so you won't require a full table scan of 18m+ rows... Unless is this some personal project, if you have 18 million geographic data points that you need to query against you should probably be looking at some sort of database that itself supports the geography stuff.
Not a fan of right menus. Every other site menu is on left, right feels so disconcerting.
Still shouldn't be PHP. Even if you have to support old browsers. tr { background-color: #f00; } tr.odd, tr:nth-child(odd) { background-color: #0f0; } Then in JS (assuming you probably have jQuery anyway): $("tr:odd").addClass('odd'); Unless you need to support the particular combination of "too old to support nth-child *and* has javascript disabled".
Once the API is pretty stable then it will move to a PHP extension. After some trial it could then be considered for inclusion in PHP core.
"living" URLs; site migrations; themes; dynamic features. A lot of reasons, actually. In the past, blogs were all static generated pages. But then the living URLs and ... well ... internet made the shift to dynamic pages: easier to maintain, and update should a person feel the need to do a site redesign. Now granted, JavaScript, HTML5, and browser advancements have allowed a lot of what use to be server-side-only onto the client side, but you still have other server-specific reasons.
On mobile, the function name at the top of the page is cut off by the language selection spinner. Replicated in [Firefox](http://imgur.com/jSo361h), [Chrome]( http://imgur.com/kkRg5dP) and the BaconReder [browser](http://imgur.com/L4O9Tqn) 
There are some many tutorials aimed at the newbie for PHP/MySql it isn't funny. Try something like Sitepoint. They normally have tutorials aimed at beginners.
Not that I can see. And the parser would not even allow me to define a function called "unset" within a class, which was very unexpected. EDIT: As I noted elsewhere, this comment on php.net provides a neat workaround for class methods http://us3.php.net/manual/en/reserved.keywords.php#93368
Yes, but for most languages that generally means that you can't use reserved keywords in a the global namespace. For other specific namespaces, or perhaps within a class, I would think that it should be possible to define a function called unset. But the five minutes I have taken to test this possibility it appears that you cannot create a function called unset either in a namespace or a class. Very unusual. Maybe I am missing something? EDIT: Ah, this comment on php.net provides some clarity (and a workaround): http://us3.php.net/manual/en/reserved.keywords.php#93368
I don't actually get it. Look at libs etc on github. Use orCondition or andCondition, use \Mongo\Document\BasicArray or something. And \Database\Query\QueryInterface (this is how many developers name them) It's natural for you to add some words for classes and methods created by you. Maybe you being not specific when it comes to classes and methods naming? I'm sure you can do better with specific names. And about unset: http://www.doctrine-project.org/api/common/2.3/class-Doctrine.Common.Collections.ArrayCollection.html
I just added nested array support today. 
Craft: http://buildwithcraft.com/
This function doesn't quite do what I want, so here's a 500 line version of the documented function with some trivial difference and 45 problems/bugs. Then, of course, there's 30 followup comments with a version that corrects for a problem or two in the 500 line monstrosity, which creates 2 more problems, and none of the corrections address all the problems.
http://www.plumislandmedia.net/mysql/haversine-mysql-nearest-loc/ Saw your edit, but I've used this with great success in case you don't get anywhere.
It's clean, but featureless. Last I checked, I don't think you could even add tags. Future-dating doesn't work, despite them saying it does. The preview-pane scrolling is fidgety and doesn't align well with what you're typing. No code highlighting.
Some of the comments left by users are good. Not many, but they're generally easy to filter through. That said, having a "reply" button with nested comments a la reddit would let us filter through all the "fixes" by just skipping over the entire block.
flash of unstyled content ! i'd rather do it server-side.
Okay, well first off, being let go because you are "too slow at resolving issues presented" is a cop-out from the people who hired you. They hired you and you didn't meet their expectations because they obviously didn't know what they were doing. They had unrealistic expectations of your performance, especially if you let them know you were learning the framework. Also cakePHP is kind of a POS. just because it was originally designed to be a RoR clone in php doesn't mean it is any good. CakePHP can't hold the jockstrap to Symphony Framework, and their documentation is pretty old, it's not even really that good. I've worked with it in the paste and the way it does things can be fairly convoluted. They realized that you were not 60-80% of what they wanted, and it was simple enough for them to let you go especially if they felt they had someone they could replace you with. The people who laid you off are dicks. Did anyone try to help you out during your stay at (X) company? Did any training occur?
The article's title is misleading. That's how we got plenty of book about PHP 6 being "unicode". Before saying it *will* be included in PHP 6, let's see if this refactoring really works out (and if the next version really is going to be called PHP "6")…
There was a RFC not so long ago to "fix" the parser in the sense that it would allow to use most reserved keywords as method or class names. Unfortunately it didn't pass. You could never define an `unset` function and call it without being ambiguous (are you calling the reserved keyword, or the function?). But in the case of a class, namespace or method, the parser can guess which one you want based on the context. It's the same as defining a `Foo` class and a `foo` function or namespace: no collision.
What about interfaces ?
Im not going to add extra words to method names just 'because'
The "Change language" text could simply be removed for the mobile UI. It's not like people don't know what a dropdown with a language name in it is for.
Facing a similar issue, cannot help with class and namespace names but you can use __call() to implement and() methods etc
Know how to ask questions properly to get desired answers specially from community forums like stackoverflow
What about using elastic search? Indexing will take a while but the transactional part afterwards will be much faster. You might want to do some reading before using it though. Anyway, my 2 cents...
&gt; PHP 6 is what PHP core developers are calling the next major release in the Wiki. No, the link you gave is an "idea" document by Pierre that he made while there was all the discussion about the next version's name. No agreement was found (as far as I remember) because some people want to use PHP 7 instead of 6. And yes the main work is done, but it has to be voted in through a RFC, a version has to be chosen, etc... So many things could happen, it's too premature to say it's going to be in the next version. Even major internal developers haven't even tested the branch yet (see the last emails).
I have a few suggestions. * Make sure the lat and long of the database points you have in the table are indexed. Find out how to create an index. Failing to do so will make any solution really slow. * I would forget about the havesine function just for now. I would see if you can find the first (x) or lets say top 100 results that are "closest" to your users point of interest. * I potentially would also convert the lat long values into MySql points. http://stackoverflow.com/questions/5756232/moving-lat-lon-text-columns-into-a-point-type-column That way you should be able to do use the point for the next part. * Finding stuff near points. http://vinsol.com/blog/2011/08/30/geoproximity-search-with-mysql/ * If this isnt fast enough. Then you need to do some up front optimisation. Eg classify the points so you can filter this 2M list down to a subset really quickly. EG. Think of the world as a flat map, then overlay the following grid, top left would be 11. bottom right would be the number of cells you want, my example has 5x5, but I probably would do 100x100 this way you 2 million rows would be reduced by a factor of 10,000. As filtering 2 million rows with a single column should be super duper fast. Then you only have to do point math on 2,000 rows since you have filtered by cell. (its possible mysql actually does an optimisation like this already, but I am just guessing). [11, 12, 13, 14, 15] [21, 22, 23, 24, 25] [31, 32, 33, 34, 35] [41, 42, 45, 46, 47] [51, 52, 53, 54, 55] So now when your user has a point, you can see which cell it falls in. And you can first filter all your results by this cell. Eg it could be cell 33, so your first filter your results to all rows that fall in cell 33 and then do nearest point. These are all of the top of my head and the answer would have to adjusted but it might give you some ideas of how to tackle this large dataset. 
Yes yes mr smartypants..
Graceful degradation and progressive enhancement. oddeven is one of those things you should do on the server, since it's totally unneeded to pass that burden to the client. However, the styling itself should be defined in a CSS stylesheet, because of separation of responsibilities. - HTML: Semantic Data. - CSS: Styling. - JS: Dynamics.
**The whole project is awesome.** Below are minor points. First I *really* don't like that: Hoa\Console\Cursor::move('← ← ← ↑ ↑'); How am I supposed to type those characters? Do I need to separate them with spaces? What happens if I type anything else? It's bad IMO, even worse that that (which is already very bad): Hoa\Console\Cursor::move() -&gt;←() -&gt;↑(); `moveLeft()` or `move()-&gt;left()` would be better! Also, I don't really like the static/global design. For example the one above, or this one: Hoa\Console\Window::setSize(40, 80); I get it, there is only one window and one cursor. But what if I want to mock the object for tests? I would move away from the static approach to one compatible with dependency injection and LSP. Just like any framework provides objects to manipulate global variables (e.g. `$_GET` or the session). Finally, why `Hoa\Console\Processus` and not `Hoa\Console\Process`? Is "processus" a word in english? *Edit*: Another remark regarding this: event('hoa://Event/Console/Window:resize') -&gt;attach(function ( Hoa\Core\Event\Bucket $bucket ) { // ... Is `event()` a global function? It would be better if namespaced, to avoid collision with other libraries. Also, the fact that it's a global function means you are registering event listeners in a global state. Once again, global is not really cool… --- I didn't say enough good things, so here it is: - mouse support: wow, awesome! - cursor movements and all: amazing - window interactions: interesting, I'm not sure when it would be useful but definitely interesting - autocompletion is just crazy awesome - I love the option parser that is not based on "global variables" That project looks awesome. What would be more awesome is a higher level API, much like Symfony's console component. Your lib is powerful but much lower level for most use cases. Maybe that could be a separate project: a Console app "framework" (or micro-framework), much like Symfony's console is?
to add to this... **Open-mindedness and Humility** Be open to suggestions and pointers from your seniors. There's nothing more irritating than a hard headed conceited dev with attitude problem who thinks he's the best of the best when in fact he's just a shitty as fuck noob who can't get the job done right because he won't listen. note: this was me 10 years ago
Could you please explain why you consider it an outdated point of view?
Instead of `←`, `↑` etc., you can use `left`, `up` etc. (please, see the documentation http://hoa-project.net/Literature/Hack/Console.html :-)). It does not make sense to create an instance of a `Window` object since there is only one window. Same for `Cursor`, you have only one cursor per “window”. Oh, you said “I get it”, I didn't see, so we are agree :-p ? For test, it will be difficult to mock but very easy to mole (a more flexible and advanced “mocking” paradigm). The `event` function is a global one but this is an alias to `Hoa\Core\Event::getEvent`, so everything is ok :-). Also, there is a contributor of Hoa (Julien Bianchi) that has created a bridge *and* a bundle for Symfony to introduce Hoa\Console into Symfony. We will promote both of them next weeks! Feel free to join us on #hoaproject (freenode) to discuss about it if you're interesting :-).
Your question was: &gt; How can I open PHPmyAdmin on WampServer. or: &gt; Where can I find PHPmyAdmin on Wampserver. Answer: &gt; http://localhost/phpmyadmin/ You won't find this in the PHPmyAdmin documentation because it is specific to WampServer. The WampServer website mentions the icon/menu under both Installing and Functionalities On the forum, there's a thread that is called: READ THIS BEFORE YOU ASK A QUESTION that visually shows what the icon looks like. OP, you dun goofed.
You'll have to read and pretty much memorize the PHP documentation. It's the only way to be sure. And even then you should look up every function in the documentation before you use it! Don't just guess! 
Cheers - really appreciate your help on this one. This is how my PATCH action was being implemented. The issue I was having was, say I had a User who would have Name, Email, and PhoneNumber attributes that were all filled in, then on submit of something like: PATCH /users/123 {"name": "John Doe"} Then I would end up with all attributes as being "". Weirdly though, this was still passing the Symfony form isValid() method. I dunno, clearly something wrong with my implementation. But the upshot is, I was caught in analysis paralysis by trying to make this *more right*. So thanks :) 
At the very least, delete all the negatively-voted comments. I've seen some at -60 points, why are they still there?!
That isn't really the issue. It looks like the thing is absolutely-positioned which makes it appear over the top of other things. A long function name would still be below the actual dropdown even if "Change language" was removed. Should just make it float:right and then stuff will wrap around it.
to add to this - junior devs must know some sort of JS as well. Jquery for example i think 
What's your database? Most decent relational dbs have geography based types specifically for these types of queries.
If you insist, define('LEFT', '←');
I saw a job ad this morning for an Entry Level PHP Developer, and here's some of the highlights: The PHP Developer will be required to write beautiful, complex PHP code to the highest of standards. Beneficial Skills: - Experience with Javascript Libraries (Modernizr/AngularJS/BackboneJS) - PHP MVC Frameworks (Symfony/ Zend/ Laravel) So if that's entry level, then lord knows what they expect from their senior guys. I sometimes think that the guy / girl / committee(!) doing the hiring just copy / pasting from other job ads, or worst, think of every single tech they personally touched in the last 3 years and put that on the advert. Show me an entry level (read: just left uni) developer who has a working experience of a current back-end framework, and a current front-end framework, oh, and who writes beautiful, complex code in both, and I will show you someone who doesn't need an entry level job. I don't care if you're junior / senior / rock star, I want to know you practice TDD, know why you should practice TDD, and aren't trying to be some code-picasso when the priority is delivering value to the business, not using some unreadable "beautiful" one-liner when three would have been more readable for the next guy. My other core expectation is: personal hygiene. 
Why are you doing this in jQuery? Why don't you just use the tr:odd pseudo-selector in CSS since every browser since IE7 supports CSS2?
This looks very promising, and doing a set of high level libraries to work with the console was always in my TODO list. I'll be checking this soon!
That's a neat workaround, but I think it should have a "sleep" before the switch for the best performance impact. In other words, is it really worth the extra processing just to use a reserved name?
I would put that as more of a bonus than a must - but I guess it really depends on the requirements for that particular role.
Well a class would have to implement an interface for it to be useful, and since class methods may not used reserved keywords then I suppose not.
If working in a studio environment nothing less than blood, sweat and tears...
It has nothing to do with using outdated browsers or JS turned off. It's about building a stable and expandable foundation using progressive enhancement. This is greatly preferable because you wouldn't be bound to a javascript implementation, and if that implementation were to fail, it wouldn't render the website unusable. &gt;Also the situation that a JS file might not load because of a shitty connection seems far fetched. It happens *all the time*. For instance, when I'm travelling on a train, websites would regularly break specifically because they depend on JavaScript, which hasn't been properly loaded, even despite that the website has no functionality which would actually require JS to function, had it been coded correctly. Additionally, even with a stable connection, scripts regularly break. Facebook is a prime example of this. You can be talking to a person using the live chat feature and the website would suddenly break without giving you any kind of indication that it's happened. Once you notice that you're not getting any responses and reload the page, you'll notice that none of the messages you've sent has actually arrived and the conversation has gone on without you. So yeah, if you're one of those developers who think that you don't need to make websites work without JavaScript just because no-one has JS disabled, you've severely missed the point. 
You mean like symfony/console ?
Be patient, It will come to the Symfony World faster than you expect ;)
The merging in is the hard part ;)
[Silly user, change is bad](https://wiki.php.net/rfc/keywords_as_identifiers).
But that is for every table and I don't want that. Thanks though.
This solution uses file which reads the entire file into memory. If your file is near or larger than your memory limit in php.ini, the script will fail.
 $ curl -s -D - http://goo.gl/WZpN0C -o /dev/null HTTP/1.1 301 Moved Permanently Content-Type: text/html; charset=UTF-8 Pragma: no-cache Expires: Mon, 01 Jan 1990 00:00:00 GMT Date: Mon, 12 May 2014 14:02:22 GMT Location: http://www.reddit.com/r/php X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block Server: GSE Cache-Control: no-cache, no-store, max-age=0, must-revalidate Age: 38 Alternate-Protocol: 80:quic Transfer-Encoding: chunked
PHP is only using 13mb of my ram when doing everything at intended capacity.
Never heard of Hoa before, but they've got a handful of interesting projects.
Yeah, that was my first thought. Box model is quite fucked in IE to begin with; so, I can understand why you would go out of your way to work around it. Still, there's got to be a better way than forcing Quirks Mode.
Awesome job Chris! This is your cousin Jonathan. I was waiting for something like this. 
More specific output: $ curl -s -w %{url_effective} -I -L http://goo.gl/WZpN0C -o /dev/null http://www.reddit.com/r/php edit: corrected
Careful arguing with him, he'll attempt and filibuster you into submission.
&gt; **EDIT: WTF am I getting downvoted for this?** Because your post is not constructive or interesting at all, it's just you complaining. Do you really think this is the kind of content that /r/php readers enjoy, someone mindlessly bitching? I know I don't.
Weird, I still get both headers output. Both on OS X and Debian. HTTP/1.1 301 Moved Permanently Content-Type: text/html; charset=UTF-8 Cache-Control: no-cache, no-store, max-age=0, must-revalidate Pragma: no-cache Expires: Fri, 01 Jan 1990 00:00:00 GMT Date: Mon, 12 May 2014 15:16:30 GMT Location: http://www.reddit.com/r/php X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block Server: GSE Alternate-Protocol: 80:quic Transfer-Encoding: chunked HTTP/1.1 200 OK Content-Type: text/html; charset=UTF-8 x-frame-options: SAMEORIGIN x-content-type-options: nosniff x-xss-protection: 1; mode=block Server: '; DROP TABLE servertypes; -- Date: Mon, 12 May 2014 15:16:30 GMT Connection: keep-alive Vary: accept-encoding http://www.reddit.com/r/php
My bad, I forgot to paste the `-o /dev/null`, try it with that.
Thanks for the advice, and sorry for the late reply. Would it matter if the further education is unrelated? For example if I had (hypothetically) A levels in... science, or music? Would that increase my chances?
Meh, I suppose I should've tried that since it was in *my* example.
This is the result of what i used to build some not-so-little Silex projects and wanted to share; A really simple project to get things going.
&gt; Probably the last site to be converted will be bugs.php.net because it needs a lot of individual attention. Would that be because of all the bugs? ^I'll ^be^here ^^all ^^week ^^^folks!
They're also using `addslashes()` to escape the input. If they're going to stick with the old MySQL extension, must as well using the correct escaping function of `mysql_real_escape_string()`
Please separate the public endpoint from the application core, right now you're exposing all of your configuration values if your web server is misconfigured. All a user has to do is visit example.com/data/config.json to get access to your database credentials, example.com/log/development.log to access your logs etc. .htaccess is **not** an acceptable security measure. Put index.php in a public folder, then use public as your document root, that is the only proper way to secure an applications "secret" files: make them impossible to access, web server dependant solutions are vulnerable, especially for open source, because people use all sorts of webservers (eg: nginx) that won't respect your webserver specific config.
&gt;This doesn't mean that there can't a javascript-less alternative to your website. The entire point of progressive enhancement is that *you don't need* to provide an alternative site replicating the functionality. You build the website to work with regular old HTTP requests, then you *enhance* it using JavaScript. Most websites do not need JavaScript for their business logic to function, so to construct an unnecessary dependency for these websites is completely senseless. What's more, having the website work without JavaScript is not just a benefit for people with JavaScript disabled, it's a benefit for everybody, including those with JavaScript enabled. If you perceive this as something which requires extra effort to accomplish, you're probably doing it the other way around. &gt;Also your argument about FB is bullshit. It's an example which demonstrates a very real issue. Site-breaking JavaScript is an issue that is prevalent across the web amongst those websites that haven't been built with progressive enhancements in mind. To draw an analogy, JavaScript-dependent websites are like lifts. Lifts are great while they work as they bring us to where we want to go, but once they break, we're stuck. We should be building escalators instead. To quote Mitch Hedberg: &gt;“An escalator can never break: it can only become stairs. You would never see an Escalator Temporarily Out Of Order sign, just Escalator Temporarily Stairs. Sorry for the convenience.”
From http://www.php.net/manual/en/language.basic-syntax.comments.php. "Comments in PHP can be used for several purposes, a very interesting one being that you can generate API documentation directly from them by using PHPDocumentor (http://www.phpdoc.org/). Therefore, one has to use a JavaDoc-like comment syntax (conforms to the DocBook DTD), example:" Therefore, it's to simplify documentation and keep you from having to re-write comments into documentation.
I don't know about wordpress, but `/**` is usually for docblocks, and `/*` is just a comment. http://en.wikipedia.org/wiki/PHPDoc
Then only do it for the ones you want. http://codepen.io/anon/pen/mdKeH 
Weird. That behavior sounds exactly like what I would expect from a `PUT` request with that entity body, since `PUT` does a wholesale replacement of the resource with whatever is in the request, and missing fields would simply be null (assuming the API didn't balk at it and send a 4xx error response instead).
Queues are great if you are going to scale your batch jobs across multiple servers. But then you will need to implement a broker to implement fetching jobs form the queue and handing it over to a PHP script for processing. It might be relevant for you, or might not. A quick easy hack that might work if you do not have too much load is: 1) Place your posts in a DB table. The table should have an id column. 2) Have a 1 cronjob that processes all the even entries, the other processes the odd.
It's a personal project. But thanks, I'll check out PostGIS as sounds interesting.
What would the overhead be? Users would be expecting the post to be posted at the minute they scheduled it to be, so if it doesn't delay the tasks more than 60 seconds it would be a good thing to learn and implement.
Awesome, thanks. Seems like a more consice and easy to follow example of what I found here, and was planning to use: http://www.arubin.org/files/geo_search.pdf
There shouldn't be much overhead per se, your cron would have to run once a minute and look for posts queued in that minute (or earlier) and post them. You'd want to have a queued/running/complete flag in case the process takes over a minute.
Your regex tests for "exact-date", while the URL contains "exact_date" (underscore vs hyphen). Also, `preg_match` doesn't return the matches, it only returns 1 if the pattern matches, and 0 if not ([see docs](http://php.net/preg_match)). That's why you used the third parameter, $result. If you fix the underscore, you will see that your regex actually works (kind of, as you're also getting the last slash character because you've specified such a broad pattern (the .* part). A slighly better regex is: preg_match("/\/exact_date~([0-9-]+)\/$/", $theurl, $result); 
First off, your url is "exact_date" and your regex is "exact-date" so the underscore vs hyphen is not going to match. The result of preg_match is a boolean saying if a match was found or not with the matches and captures in the result variable. If you're trying to extract the date, use the result variable instead of the filtered. Something like this gives you your desired logic, the if-conditional isn't required, but is there to illustrate the usage of the preg_match return value: if (preg_match("/exact_date~([^\/]+)/", $url, $result) { $filtered = $result[1]; }
I think you meant to write: `$mypath = "htdocs/";` instead, as "/htdocs/" means "the htdocs folder inside of the root directory".
[AnchorCMS](http://anchorcms.com) also looks interesting.
Awesome, between your help and victor's, i got it... THANK YOU!!!! :) &lt;?php $theurl = $_SERVER['REQUEST_URI']; if (preg_match("/exact_date~([^\/]+)/", $theurl, $result)) { $filtered = $result[1]; echo $filtered; }; ?&gt;
You can drop the ?&gt; by the way. Easiest way to avoid accidentally littering new lines at the end of files. 
Google actually has an example of this in their developer docs, scroll down the page for the complete Haversine formula and implementation: https://developers.google.com/maps/articles/phpsqlsearch_v3
Been helping run the San Diego PHP User group for a couple years and hands down Framework topics is always one of the topics that generates a lot of interest. PHPUnit and Testing in general are other hot topics for us. 
Why does symfony need a twig bridge?
IMHO, there are few interesting topics: - Apigility (https://www.apigility.org/) - Decoupled Packages (specially Aura - http://auraphp.com/) - PSR Standards - The fall of PEAR / PECL and rise of Composer 
So if I want to put a file in the "example" folder, I would use "htdocs/example/"?
Perfect!
I second the Decoupled Packages (Aura!) suggestion, if only from pure personal selfish interest. Fly me out there and I'll talk about that, or anything else you like. :-)
Yes.
Thanks! Between your code and mecromace's, I got it working perfectly. :)
This is how most PHP tutorial resources are, unfortunately.
Your password is showing. https://github.com/jotliet/barterlabs/blob/master/barterlabs/sftp-config.json
pm me and we can talk about it.
Better get that visible live FTP credential situation handled ASAP. Looks like you use the same password for everything as well. Might be time to change that!
Is that lib/Cake direction the whole of CakePHP?! You really ought to be using Composer.
Dude change your ftp login credentials ASAP
hate the changes. thank god for stylish, who the fuck puts menus on the right. the dark theme also sucks ass.
Wow, thanks for the heads up. I knew I'd probably screw up something. I think i took care of it
Your git history will show the password as well :-\ Assume everyone in the world knows this password and act accordingly, for your own security.
It's still available if you view the commit, you need to edit history. https://github.com/jotliet/barterlabs/blob/10d44e5285d019ca846eab8d9f54b15fec146b43/barterlabs/sftp-config.json
Well it's still in the git history... https://github.com/jotliet/barterlabs/blob/10d44e5285d019ca846eab8d9f54b15fec146b43/barterlabs/sftp-config.json
This is a DI container.
It's also in these files: https://github.com/jotliet/barterlabs/blob/10d44e5285d019ca846eab8d9f54b15fec146b43/barterlabs/app/Config/remote_database.php https://github.com/jotliet/barterlabs/blob/10d44e5285d019ca846eab8d9f54b15fec146b43/barterlabs/app/Config/local_database.php If I were you, I'd remove the repo from Github, and get to work changing that password everywhere it's used. Use something like [LastPass](http://lastpass.com) and generate unique passwords for each service whilst you're at it. Good luck!
This is the better solution.
Alright, I'm an idiot and I uploaded the repository with all the secure server passwords. So, I'm going to take it down, remove the passwords and re-up it in a bit. Thanks to everybody for looking out for me. That's what communities are for. I really appreciate it! lol.
Maybe the new heroku support? Behat?
I took a closer look and the problem actually seems to be the `overflow: hidden` on the heading. Without that, the heading wraps underneath the language selection block like it should do.
Every other PHP.net site puts it on the right. I brought it in line with all our other sites. 
It's mostly ranked by votes and vote percent. Something with 20 up-votes and no down-votes is better than something with 31 up-votes and 10 down-votes, for instance. The manual is not a collaboration tool; replies to other comments will eventually be deleted.
I'm not sure seeing bad comments is that useful. What's better is for people to know *why* it is bad, which isn't really possible with your system (no direct replies/threaded comments). Perhaps it would be better to replace bad comments with new ones saying "Don't do X because Y"?
No you didn't… Edit: [See?](http://i.imgur.com/C8R2b3u.png)
If you want to start simpler, and possibly reuse your php haversine, you could simply query a box first. Set upper and lower limits for latitude and longitude, get back all points that fit in that box, and then filter the resulting much smaller set with PHP. There are probably a number of similar ways you could segment your data prior to running through you PHP filter. Implementing haversine in SQL is indeed possible, and for smallish projects it's very practical. But depending on how pressingly you need to scale, you're loading a lot of work onto the less-easy-to-replicate MySQL server. I've always found it easier to create more web heads and offload the complexity into PHP and a robust caching system.
I tend to believe that the "what we're asking for" is a more of a "oh golly i hope we get this". I don't think they expect their applicants to have every skill but instead want someone who knows at least _what_ those technologies are, and has a solid idea of the language core.
Find out if your RDBMs can create indexes on arbitrary expressions (like the output of the formula you mentioned). That would make lookups pretty much istantaneous. Someone mentioned postgis: it runs on PostgreSQL, which in turn supports arbitrary indexes regardless of PostGIS being installed. Good luck
I specifically included tr:nth-child(ndd) to cover, y'know, 99% of browsers. Seriously, go back and read my (unedited) post - don't feel bad though, apparently everyone else skimmed over it too as soon as they saw JavaScript somewhere down the line. The JS was just "if you seriously still want 100% feature parity in IE fucking 6".
Glad you did this, now? Think about what could have happened if you launched to a more malicious user base =)
Yeah. This is definitely an "I can always rely on the kindness of strangers" moment. heh
done and done
I also wrote a little "how to" to get a local version of the software to run. I hope I included all the right steps 
Twig is a separate library. The bridge integrates Twig with Symfony2 and provides extra services that interact with parts of Symfony2, like the assets, or path functions. There's also a Doctrine, a Monolog, and a Swiftmailer bridge
No worries, I started on that one too. I'm currently checking MongoDB for handling location data/querying as well - worth a look if you ever get bored.
Do you have an online demo I can try, rather than having to install it?
Absolutely! www.barterlabs.com
&gt;Okay, let me address that point by retarded point: Aaaaaaand this is how far I'm going to read this, you rude fuck. 
I don't want to be that usual hater here, but seriously, the front end is really poorly designed. You had an decent idea, with proper designer and modern feel, and some amount of money for marketing you could pull this off. I wont be criticizing your code, or framework, we all have different preferences, but I don't think CakePHP is the modern and suitable way. Anyway, to the design, your green is too green, too neon-y. Footer should be on the bottom, the whole table layout? No. [this page](http://www.barterlabs.com/pages/whoweare) is a popup and an empty page. Under the hood, you have some whitespaces or whatever before initial html tag, javascript is mixed here and there, you have like 15 different files loaded in your head, but the site has practically no use for most of them. Fix this, if you are serious about it. 
This is all great advice. I'm admittedly a terrible designer. I just don't know what I'm doing when it comes to design. I was hoping by making the site open source, I could get the help of the community to fix all the terrible front-end problems. 
Didn't even know there was a PHP meet-up here, c'est la vie.
seems like interpolated strings with "abc {$variable} def" is breaking the formating...It is reading the braces in the string as a start of a new block...
Thx - i'm going to try it later today.
Yeah, it's odd. If the specified field was set and the rest were empty, then I could kinda get that. I have some tests written for PATCH anyway, so it's just a case of making them pass now. It's got to be something I'm doing, or not doing. 
same thing, for me everything should be black/white and as simple as possible. Not the most popular idea ever.
Can someone please answer this? The suspense is killing me!
100% agree. If my application works then who cares how it looks
http://spress.yosymfony.com/docs/front-matter/
Ah yeah, but you use it twice before explaining what it is.
Perfect, thanks.
This is the downside of versioning software. There are ways to get things like passwords off a repo but, by design, you have to go out of your way to make git forget things: http://www.davidverhasselt.com/2010/09/14/git-how-to-remove-your-password-from-a-repository/
I'm fairly new to static site generators, and I don't really use YAML (nor like it all that much). Thanks for updating the post, maybe it'll help someone else. :)
Yeah. But I'm merely a hobbiest 
A post with 1 up and 0 down doesn't get placed ahead of 100 up and 5 down. You are worrying unnecessarily. As for your other concerns: they are just a result of years of negligence. If people with the karma would just do the gardening they would all disappear.
Nice! A gist should be used for sharing the code, that way we can send small improvements 
&gt; It doesn't parse properly ancient constructs like IF: ELSE: ENDIF; / SWITCH ... ENDSWITCH; and so on. I see these constructs used frequently in PHP-based display templates. 
I think the advantage of REST is that the request itself (and the HTTP method) dictates the server action, and data is passed along if necessary. So GET /objectType?query=search POST /objectType?id=10&amp;property=new_value The GET request will return a JSON document and the POST will set objectType of id 10 with the property of new_value. The API should handle validation and throw HTTP status codes 404 (object type not found), 405 (method not supported) 401/403/500 etc. Along with JSON error data. Any website that handles HTTP requests can already handle REST requests, nothing but a web server is required.
I'm using magento mostly. It is very hard to learn, but once you grasp how it works you can do things pretty fast. It is the most complete ecommerce solution out there. I suggest to also keep an eye on [sylius](http://sylius.org/), ecommerce made on symfony. It is still in pre-alpha but have a lot potential.
Sylius ! Really good open source project with BDD
First part, I just give you my 2 seconds of googling for the REST vs RPC which really sums it all up: http://stackoverflow.com/questions/15056878/rest-vs-json-rpc **REST:** * depend on the message (-format) not on the api (HATEOAS) **RPC** * you are coupled to a service and depend on an api Now, Atomic operations are always tricky, what about following concept: `[GET] /myapi/manager/ : 'no transactions'` `[POST] /myapi/transactions/ : 'transaction with id #1 created and opened'` `[GET] /myapi/tasks/ : 'tasks registered {1: doFoo, 2: doBar, 3: doBaz}'` `[PUT] /myapi/transactions/1 [tasks: {1 , 3 } ] : 'transaction id #1 updated'` `[GET] /myapi/manager/ : 'transaction #1 open'` `[POST] /myapi/manager/ [transactionid: 1] : 'transaction id #1 commited'` `[POST] /myapi/manager/ [transactionid: 1] : 'error cannot recommit transaction'` `[GET] /myapi/manager/ : 'transaction #1 commited'` &gt; Since, by definition, a REST service does not maintain state What you seem to forget is that the `REQUEST` has no state, e.g. it does not depend on a `REQUEST` before the one you make right now. This specifically means no sessions etc. However, the application or service in the background can depend on previous made requests, as you can see on the both `[GET] /myapi/manager/` requests returning different results. There are multiple concepts out there how to solve the transactions problem within a RESTful service, another 1 minute of googling brought me at least 5 good approaches. 
Loving the `CHANGE YOUR PASSWORD PROPERLY` style you have going on the site, really cool. I can see theres been some password trouble, so I imagine someone in the thread is having fun with it. Either way, ima go look at the code on Github since the site has been, lets say, redesigned?
I don't like that Shopify is a hosted solution (limitations on 301 redirects/etc), and Magento seems really heavy for shared hosting.
Thanks, will check this out. What's BDD?
As a beginner, the "very hard to learn" part scares me, plus the fact that I'll be using shared hosting. I'll take a look at Sylius.
The advantage REST has over RPC is there isn't really an advantage. Just so you understand, many applications that proclaim to be "RESTful" aren't. To explain this a bit better, let's say you're using SOAP. With soap, you pass everything to a single point usually and the server interprets the information according to their WSDL. All REST is is an informal declaration of a similar mechanism that's based on a collection of verbs borrowed from the HTTP request methods. I say informal because there really isn't a standardized specification to go by for REST which has lead to some really interesting approaches all labeled as RESTful. You're probably accustomed to CRUD and understand that. REST can be described as a CRUD-like API. I'll explain some common unRESTful approaches I've seen that have been called RESTful later, but I'll start with what it really is using CRUD. * Create: HTTP Method POST; Creates a new entry at the target url * Read: HTTP Method GET; Retrieves a specified entry from the target url * Update: HTTP Method PUT; Updates a record at the target url * Delete: HTTP Method DELETE; Deletes the record at the target url It's pretty straight forward looking at that. If you have a target url `example.com/users` a GET would retrieve a list of all users, POST would create a new user, PUT updates a user, DELETE deletes a user. If you want more fine-grained use cases, `example.com/user/10`, GET shows user 10, POST doesn't make sense so either will do nothing or create a new user as if it were the previous example, PUT updates the information for user 10, and DELETE deletes user 10. That's it; that's REST. The most common unRESTful approach I've seen is only using GET/POST for everything and instead of using the HTTP methods, it's a url action structure. The above would translate to `example.com/users/create` or something. I specifically chose CRUD as the example here because many unRESTful applications use the CRUD verbs in the url in place of the REST verbs because the CRUD ones make more sense, update instead of put for instance. If you've noticed already, this isn't strictly limited to the client-side so business logic still resides on the server. The user interaction would be retrieving information and/or submitting a form to save which is common across all applications. You mentioned that REST doesn't maintain state, and neither does HTTP. If you're coming from C#, I can understand this misunderstanding of applying the lack of state to REST since .NET maintains a running application to hold onto states. Blame or praise php for this one because REST can just as easily be applied to a .NET application. The way php works is via a complete build up of the application, the execution of the application, then the subsequent break down and termination of the application. This prevents php from maintaining state inherently because every single request is a completely different php instance. This has significant value in memory management and possible runaway zombie processes, but can possibly slow down large applications that need time to build up. The way to approach a transactional application with php is to maintain state outside of php. The most common place would be in the session, but on larger applications I've found storing in a cache keyed to the session id to be more ideal. Since php needs to build up everything, it'll build up the session information too and that's how you maintain a transaction without having to actually commit the data. If you're rewriting all of the business logic to be client-side and you feel it's wrong, then it most likely is. Any business logic you put client-side is going to have to be replicated server-side anyway for security reasons since you can't trust any data from any client.
I really, really suggest you to use Elasticsearch for this sort of stuff. It really excels at this sort of stuff (look at: http://www.elasticsearch.org/blog/geo-location-and-search/) If you really need to only use MySQL and PHP, try it in pure SQL first. SELECT id, ( 3959 * acos( cos( radians(37) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * sin(radians(lat)) ) ) AS distance FROM markers HAVING distance &lt; 25 ORDER BY distance LIMIT 0 , 20; Copied from http://stackoverflow.com/questions/574691/mysql-great-circle-distance-haversine-formula
Here are some links for you to skim, hopefully they will have some information that I missed. http://en.wikipedia.org/wiki/Representational_state_transfer http://www.ibm.com/developerworks/webservices/library/ws-restful/ The first thing about REST is that it throws exceptions when it can't find something or when something goes wrong. These exceptions are in the form of [HTTP codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) that are well defined and easy to understand. Some codes allow for additional information so you can get the error from the server or the parent services (database and other connected servers). Because everyone has agreed on consistent HTTP error codes, it's no longer a question of "what is 'Error 1234XYZ-ABC'?". You'll see HTTP status code 404 and know that the user with ID 345 couldn't be found. This works well with AJAX systems because you typically get a method.success and method.error, or method.then(success, error).catch(error).finally(dosomething). If you get an error then the error function is called and you can analyze the status code to find out what happened. This way you're separating your "good code" from your "bad code". Another thing about REST is that the URLs are built in a way that every object exposed by the system gets its own URL. This is shown as "http://domain.com/user/345" for a user or "http://domain.com/shop/order/456/shipping" for shipping information on order 456 within the shop section of a website. This process is described in the second link above. To your question about duplicating business logic, the frontend code doesn't really duplicate business logic, it handles the flow of user input - showing the user the correct form when needed. Once the input is gathered then the combined data is sent to the server. In the case of a user creation, this could be a POST to "http://domain.com/user" where the payload is everything from the user input form. The front end doesn't need to know how the servers put that data in the database, the server will simply reply with the ID or the full payload of user data including the new ID. The server should always do validation because you can't always trust the frontend code, and you can't trust the data connection. Someone could inject bad data even though the frontend code did validation, but your backend code needs to be hardy enough to deal with it. On your second question about transactions, you could think of creating a user as a transactional process. You shouldn't POST to the server until you have the full set of information required to create a user. This includes the name, username, and password, including other information. If the password input is on a second screen then you wouldn't send the name and username to the server and send the password later, you would continue using Javascript to display the next screens until you have all of the required information, then you would post to the RESTful service. The API server talks to the database server and the database server can use transactions to create a user in several tables at once. If one of those tables fails then the entire transaction is backed out, the API server gets the error from the database, the API server throws an exception, and the Javascript's .error() function sees it, allowing the user to make a change on the forms. As far as planning from day 1, that's not entirely accurate. frameworks don't really care about how your services communicate. They can be built in a RESTful manner or not. You would just be adding more error logic to your frontend code if they weren't. Being RESTful just means that you are adhering to a standard approach that minimizes code and improves the understanding of the design.
Behavior Driven Development metodology of testing software
http://en.wikipedia.org/wiki/Behavior-driven_development
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Behavior-driven development**](https://en.wikipedia.org/wiki/Behavior-driven%20development): [](#sfw) --- &gt;In [software engineering](https://en.wikipedia.org/wiki/Software_engineering), __behavior-driven development__ (abbreviated __BDD__) is a [software development process](https://en.wikipedia.org/wiki/Software_development_process) based on [test-driven development (TDD)](https://en.wikipedia.org/wiki/Test-driven_development). Behavior-driven development combines the general techniques and principles of TDD with ideas from [domain-driven design](https://en.wikipedia.org/wiki/Domain-driven_design) and [object-oriented analysis and design](https://en.wikipedia.org/wiki/Object-oriented_analysis_and_design) to provide [software developers](https://en.wikipedia.org/wiki/Software_developers) and [business analysts](https://en.wikipedia.org/wiki/Business_analyst) with shared tools and a shared process to collaborate on software development, with the aim of delivering "software that matters". &gt; --- ^Interesting: [^Test-driven ^development](https://en.wikipedia.org/wiki/Test-driven_development) ^| [^List ^of ^unit ^testing ^frameworks](https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks) ^| [^Specification ^by ^example](https://en.wikipedia.org/wiki/Specification_by_example) ^| [^Feature-driven ^development](https://en.wikipedia.org/wiki/Feature-driven_development) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chgvq43) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chgvq43)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
REST is not your "GUI", so yes in that sense, you do need to rewrite your "application" in several places (e.g. the forms, error messages, request sending / response handling). If you break your application into two parts: **1. Application** - Views - Requests - Responses - Forms **2. Service (domain + infrastructure)** - Persistence - Business rules - Data Then REST really only deals with #2. Thus if #2 is really simple and #1 is more complex, and you don't need a lot of #1s (native phone app, TV app, website etc), then REST may seem a bit pointless, but it's not. Personally, I think a REST API is a natural extension of how you should architect an application *anyway*. Your views/requests/response handling should be interacting with your domain layer in a RESTful way in the first place. Whether that interaction is via a PHP context, or a web context, shouldn't matter all that much. Regarding atomic operations, the short answer is that REST is probably not a good solution for complex operations in financial software, but it depends on how high you abstract the operations and what those operations are. Say a bank wants to allow customers to transfer funds from one account to another, and wants them to be able to do this on their mobile app, and their website. Well, bundle all of that logic into your service layer with all necessary transactions, and then provide one single, simple REST endpoint that allows the user to perform that action. E.g. `[POST] /transfer?from=xxxxxx&amp;to=xxxxxx&amp;amount=xxxxx` This will create a new `Transfer` resource and then the service layer does whatever it needs to in order to make sure it either 100% succeeds, or 100% fails, and sends an appropriate response. If you find yourself in a situation where you are trying to string multiple queries/requests together via REST, it means your API is not designed properly. As you've said yourself, REST is stateless, so design your API in such a way that your service layer can be interacted with statelessly.
I know you are looking for a full suite but thought I bring your attention to something I have been working on. To keep your eye on. https://cartalyst.com/manual/cart http://demo.cartalyst.com/cart Essentially for the past year we have been working on series of composer packages that will all come together to provide a full ecommerce suite. We just released our cart package which is insanely awesome. (biased) we're not there yet but getting there. 
 &gt; Another thing about REST is that the URLs are built in a way that every object exposed by the system gets its own URL. This is shown as "http://domain.com/user/345[4] " for a user or "http://domain.com/shop/order/456/shipping[5] " for shipping information on order 456 within the shop section of a website. This process is described in the second link above. I can see this as a huge plus - your are letting the HTTP protocol dictate most of your routing and overhead. &gt; To your question about duplicating business logic, the frontend code doesn't really duplicate business logic, it handles the flow of user input - showing the user the correct form when needed. Once the input is gathered then the combined data is sent to the server. But what about a very complex application, where there is a great deal of interaction between entities? I would say in our case, only 50% of our "business logic" is validation of data. The other half, possibly more even, deals with the interactions between entities. Since REST services expose entities directly, this leaves the front-end with a lot of the grunt-work of creating and linking entities. &gt; The server should always do validation because you can't always trust the frontend code, and you can't trust the data connection. Someone could inject bad data even though the frontend code did validation. Oh, absolutely agree 100%. We have validation built into our back-end services, we just end up duplicating a lot of it for the sake of client-side validation as well. &gt; On your second question about transactions, you could think of creating a user as a transactional process. You shouldn't POST to the server until you have the full set of information required to create a user. This includes the name, username, and password, including other information. This is related to the last issue I brought up - I've found that in complex applications, where you are dealing with multiple entities and multi-page forms, if an error happens late in the process, we have to go back and manually clean up after ourselves. This is very error prone - for example, if the user disconnects, the client will no longer be able to delete entities. It seems the common solution is to use some kind of "transaction" resource, which you can GET/POST to, and have your application queue up actions.
Whatever you do, don't choose opencart! I'm making it my personal mission to spread the word as much as possible that the developer is an ass. -&gt; http://www.techchattr.com/never-use-opencart (I'm not the author of this article, but look at the comment sections in that page!) Also, when a project has its own http://opencartsucks.com/ domain, well, eh. I have experience with Magento - and it's a beast. If you're not familiar with Zend1, it's going to take a long while to add a stupid button. Since it's also based on Zend1, there's a shitload of Classes_Named_Like_This instead of Classes\Named\Like\This... but what I dread the most was the XML configs.. gah. Also, a lot of the frontend code is tied with javascript, and its not jQuery, it's Prototype.. inline scripts everywhere! :'(. Very easy to break. Upgrading is a hit or miss. Most of the time, it doesn't work OOTB. When people say Magento is heavy, they're not joking around. Even with 5.5 opcache, on my dev machine - it's slow. You need some serious horsepower and tuning skills to make it run smoothly. Bottom line: I'll never use it again. I'll just maintain that 1 store that I have. I heard good things about Prestashop, but never tried it. WooCommerce: I did a maintenance on an existing site using it, looked very nice, the customers seems to really love it, but I'm biased against wordpress. What I'm looking forward to: Sylius and Cartalyst (Not sure if they're doing an e-commerce platform, but their arsenal looks like they do). 
What's your current favorite shopping cart solution in 2014? What's your current favorite shopping cart solution? What's your current favorite shopping cart? What's your favorite shopping cart? I wonder if these would give different answers. 
Prestashop. Magento is overkill, Opencart blows, X-cart is expensive.
&gt; Personally, I think a REST API is a natural extension of how you should architect an application anyway. This is a good point, and this is naturally how our domain model is architectured (using CRUD with entities, e.g. User and Vendor). The problem is that yes, we can do entity level validation on the server-side; however, there's a lot of other logic involved besides validation. And since most of this involves interactions between entities, REST kind of forces this upon the client of the application. &gt; Regarding atomic operations, the short answer is that REST is probably not a good solution for complex operations in financial software OData itself supports "psuedo" transactions, however the only way you could really call OData RESTful is because it uses hyperlinks for entities and uses the HTTP methods (doesn't really follow it other than that). If you were writing a REST API from scratch with complex logic requirements, I definitely can see this. It makes the most sense to me to write a "RESTful" RPC protocol in this case, that way you are at least taking advantage of the features HTTP offers.
&gt; Being RESTful just means that you are adhering to a standard approach that minimizes code and improves the understanding of the design. I actually like this a lot. It hasn't really occured to me until now that you don't necessarily need to expose your entities directly in your API. You could provide an API which provides "simplified" versions of your entities, and let the server translate and validate those into the real underlying database objects. In OData-type protocols, (see [BreezeJS](http://breezejs.com) for more details), in your front-end, you are building and executing queries to find and modify on your domain model directly. With a complex domain model, this means that your are building really complex queries on the front-end. It also means, when updating entities, you are building really complex logic to make sure everything is in place (for example, when updating multiple related entities at once). It gets complicated quick. Even though you still have server-side validation, your client still needs to be aware of the quite complex relationships so it can wire up the data properly.
The real problem is lack of a good documentation. There are many tutorials out there but most are outdated. If your needs are simple there is also [prestashop](http://www.prestashop.com/).
Prestashop is indeed simple, but it is written very poorly. They also do things very "French". If you want to itemize taxes (like most sites in the USA) on the paypal module you have to hack the core module. Magento allows you to modify functionality without hacking the core. I realize that you are a Magento user so I am preaching to the choir, but OP hopefully will read this. edit: Modifying the core was required pre 1.5. Now modifying the module makes you place the overridden module in the theme directory which violates separation of concerns and prevents you from making seasonal themes without a ton of duplicated code.
Prestashop is awful if you have to change anything about it. Making simple modifications somehow requires hacking on the core.
Magento works fine on good shared hosting like Siteground. Avoid shared hosting by bluehost or godaddy (there are many more to avoid)
Wow. I deserved that. This is all a huge learning opportunity for me, and I truly appreciate your patience. I was positive that I had removed the password when I re-uploaded the repo. I'm going to take your advice now....
&gt; What's your favorite shopping cart? Well, I quite like the new plastic shopping carts at Target. They don't seem to get the wobbly wheels as much. The half size shopping carts at Albertson's are also quite nice. :P
This has been a common complaint. I think it'll be the first thing I change. Any suggestions on color? I'm terrible with design. 
Thanks for baring with me despite the obvious problems. I (clearly) need the help!
Prestashop lumps taxes into the pricing in a funky way. I needed to itemize the tax in the cart as well as on the final Paypal page. The only way to fix the Paypal module was to hack the module. There is no proper mechanism for overriding modules. You end up having to place them in the theme.
At least you're trying, man! Open sourcing projects is what helps you learn lessons and become a better developer. I've got a couple of projects I need to open source so I'll no doubt learn a few lessons myself.
The complexity you're describing for your models almost sounds like an architectural choice. I don't know your application so I'm going to ramble a bit to mentally walk through a couple approaches. When I was describing the business logic, I was meaning the business logic like you were and not just validation which was just the most straight forward example I had off the top of my head. If there's a lot of coupling going on with the front-end, it sounds an awful lot like a single-page application architecture. There are options to be had, but they all have their own set of drawbacks and there's no single correct solution. I've worked with server-side applications and client-side applications. If the application is supposed to be client-side, then it's usually a client-side application written in javascript. These applications would have all of the business logic in the client-side code like you're describing and using server-side logic almost exclusively for data validation. This approach feels wrong if you think it should always be server-side until you view the server-side application as just an API and the client-side as your actual application. I personally try to avoid this approach where possible so I can maintain the business logic server-side, but splitting it to an API and separate application makes it easier for me to digest when required. I've found many in the Node.js community actively blend it all together because they can; it's almost as if running javascript on the server has provided them with a hammer to solve everything together. I absolutely know the php community would've done the same years ago if they could have so it's not surprising to me. When I don't want to move the business logic to the client, I'll maintain a server-side application that outputs rendered html blocks that the client uses to inject where needed. Doing it this way tends to be a bit messy in places, but for a smaller team, it's easier to maintain since the business logic is still separated from the display logic. Even if the client-side code becomes the application and controls the business logic, the display logic still needs to be separated. This method sometimes gets difficult to maintain due to cross-contamination and a gradual blending of the separation of concerns in a similar way the Node.js community might blend aspects together. My generalized advice is to separate it into 3 broad areas: display, business, storage. It's always more complicated than that, but if you're able to separate those three concerns from each other, your application will be a lot more manageable in the long run. Older php applications blended the three together into a huge cluster whereas the general transition to MV* architectures try to separate the three on the server, but don't completely unify a client-side segment in javascript outside of echoing a js file. It doesn't matter which poison you pick, you'll eventually grow to not only hate that choice, but loathe it as well. If it feels wrong and doesn't pass your smell test, then it's very likely to be wrong; just try to find the solution you'll likely hate the least given what you currently know.
If you don't have to self-host then look at Shopify. There's a lot of good open source software out there, but it's getting ever harder to compete with those who are making a killing per month just doing that - so their investment is going to be orders of magnitude greater than open source, unfortunately. 
So your issue is due to a module, not really prestashop. The tax issue for cart/checkout can be accomplished with overrides in the /override/ directory. For the paypal part that is the Paypal modules issue of which there are several other issues with it. AFAIK Magento doesn't have module overrides either.
Except that isn't rest. it would be GET /object/10 to get an item, PUT /object/10 to update an item, and POST /object to create an item. Create = POST Read = GET Update = PUT Delete = DELETE
My issue is due to the way Prestashop overrides modules. In Magento, it is simple. You can modify any module you want to override. You simply create a mirror of it from the core or community folder to your "local" folder. With prestashop any override is tied to the theme ([docs link](http://doc.prestashop.com/display/PS15/Overriding+default+behaviors#Overridingdefaultbehaviors-Overridingamodule%27sbehavior)) This means that if you want to have seasonal themes you end up duplicating all of the code. With Magento, layout and theming and business logic are separate and this allows seasonal theming with a minimum of code duplication. It is much cleaner and follows programming best practices better. (separation of concerns) edit: Some developers put business logic into their templates, which Magento allows by using pure PHP for templating. This is one thing I dislike about Magento. 
Sorry for the delay. Was in Toronto doing the interview tour. The two main reasons where that I've kind of gotten tired of doing web app development. Been kicking around the idea of gettng into the mobile/desktop space for a while, so have been looking into languages that are in the HVM family (Java/Scala/Clojure) and/or Python since I have some connections with academia. The secondary reasons for it is that finding positions that would allow me to work remotely seem to be easier with those two stacks as opposed to PHP, especially in Canada which is very anti-remote I've found. And I guess the tertiary reason is they pay better, but that can change in a heartbeat.
Well that and they had someone that was working from a location that their dollar is 1/10th the value of mine. I'm sure that didn't help my cause at all. Either way, in hindsight the only loss is the money, and if thats' all you miss about a job, it wasn't one worth keeping anyways.
NO training, it was literally thrown into the code, and any questions usually resulted in "here's the code to fix it", with no real information as to what it was and why it was. I mainly learned how things worked through trail, error, and if I was fortunate, the CakePHP docs had a decent explanation.
Magento is like Wal*Mart. Woo-Commerce is like a gas station. That's not a slight against either, if you aren't doing thousands upon thousands of products, importing many product feeds, managing your advertising and tying it in with your inventory, Magento is probably over kill. Woo-Commerce is good for about ~1000-5000 products, before the interface becomes too cumbersome. 
The also flows the other way. It's possible for a junior to know something that the senior doesn't. I've run into instances where the "senior" person does this one, too.
&gt;rewriting our business logic from C# to Javascript What?
Excellent catch. Must have left it on when I re-uploaded the site this morning
That's *one* way to implement a HTTP REST API, it's not the *only* way. The point is the same though.
&gt; These applications would have all of the business logic in the client-side code like you're describing and using server-side logic almost exclusively for data validation. This approach feels wrong if you think it should always be server-side until you view the server-side application as just an API and the client-side as your actual application. I think that hits the nail on the head for the situation I'm talking about. For context, an example is say, with a Vendor entity. It has a couple of fields such as "Status" and "Type" that modify the way it links to and interacts with other objects. With an RPC style approach, the server would handle the creation and maintenance of this entity, the client would only need to pass in the required parameters. With a RESTful style approach, the client is in charge of handling this. &gt; I've found many in the Node.js community actively blend it all together because they can; it's almost as if running javascript on the server has provided them with a hammer to solve everything together. That's definitely the case in the C#/Silverlight world, and probably why I was having trouble applying it to PHP. The way people describe REST it feels like it's just slapping an API on top of Doctrine ORM. I think, overall, I'm starting to get way more of a grasp on the situation. It's simply more of a "you can't eat your cake and have it too" situation. If you want a single page app, you have to choose where to cut the line of abstraction, each choice has consequences. REST is meant to be simple, and as a result, leaves the consumer up to a lot of the implementation details. The reward is lower coupling, better abstraction, more intuitive API that doesn't necessarily describe the business logic. A more RPC like approach is hiding more implementation details from the consumer, but definitely couples the front end to the server more (you are more likely to need to modify server code to change a behavior on the front-end for example) and verbosely describes the business logic. [Here's the conceptual model of the situation I have now](http://i.imgur.com/WkZ9314.png). Would you say this is at all accurate?
If you look at something like Themeforest, you can get some pretty amazing looking themes for about $15 that you can use in your application. Basic HTML/CSS knowledge is needed to edit the files, but it'll look 100x better than what you have now. 
Great suggestion. That's how I'm going to spend the rest of the day. Thank you!!
This is actually more common than you think. People have accidentally uploaded their [Amazon EC2 credentials](http://readwrite.com/2014/04/15/amazon-web-services-hack-bitcoin-miners-github) on Github, and people take over their accounts, spin up hundreds of instances and run bitcoin miners. They are surprised at the end of the month when they are charged for hundreds of dollars of processing power!
No problem. Good luck! I've used themes in most of my applications. If you need any help/pointers, shoot me a PM!
Just goes to show things could always be worse. I owe the Reddit community a huge thank you for finding my error before any irreparable damage happened to the users of the site. So far, open sourcing the software is paying off! 
&gt; before any irreparable damage happened to the users of the site Just FYI... I did notice that your site had cPanel. If the passwords in your git repo matched the cPanel password, there is a good chance that someone could have logged on to phpMyAdmin and snagged a database backup. This would expose the users' passwords, salts, and email addresses. It may be a good idea to send an email to the users of your site and force them to change their passwords.
There were a number of database dumps in the repo, never mind cPanel. Don't know if they were live data, though. 
Either way, anyone whose email and password were in the database should be notified so they may take appropriate measures.
I'm definitely planning on avoiding Magento for those reasons. What's your best suggestion?
You're certainly right that there's a fair amount of flexibility, however your original post implied a few things about REST that aren't true: * POST has 'attribute setting' semantics (for some unknown definition of attribute). In reality, POST can basically mean whatever the hell you want it to mean. * REST means JSON. This is not true at all. XML is just as RESTful as JSON, as is CSV, or HTML, or some Lots of Irritating Superfluous Parenthesis DSL. HTTP is a plain text format. How, or if, you serialize it is not something that is relevant to REST.
&gt; It hasn't really occured to me until now that you don't necessarily need to expose your entities directly in your API. You could provide an API which provides "simplified" versions of your entities, and let the server translate and validate those into the real underlying database objects. Absolutely correct. Here's a neat package to check out that deals with some of that. https://github.com/thephpleague/fractal
Wow, that's a cool package. I've messed around with The League's OAuth2 server package, but not this one yet. Thanks! Looks like *exactly* what I just described above!
I have yet to find something simple-to-use (as vodka is) in addition to doing ANYTHING for navigation. It would be amazing if a basic navigation could be built from the source directory structure. Do you have any tips as far as that goes? Ways we could hack something together using vodka? Orrrr... perhaps direction on a PR? :)
I was blown away by how much of a twat Daniel Kerr is when I read that the first time. Unbelievable. Also, Magento rules. 
How about having the links to all the generated pages in the a template variable.Then using your template code, you can build the navigation section. Will that work?
I did a lot of magento developing for a company and still do. Its not worth it for you. I recommend to look in Sylius as well. Its one of the newer systems and seems lightweight.
Dear business folk, It's not a "solution." It's a DAMN PIECE OF SOFTWARE.
Magento 2.0 will be doing away with prototype in favor of jQuery. Although, there are many modules out there that will add jQuery to magento. Also, running HHVM with Magento does wonders for performance.
Yeah and that will be easier to you to put these on your code (merge to master).
I don't like any of them. Eventually decided to roll my own, which I'll open source when the project wraps up the first couple of milestones.
I had the pleasure on watching Paul Jones in PHP Conference 2012 (in Brazil) and man... he's the one. He brought us a lot of info about design patterns, Aura project and many other things. He was one of the best keynote speakers of all Conference.
My original is actually a custom made one as well, but it was when I first learned PHP. I recently wrote about 75% of another one (raw PHP, no framework), but I'm a bit hesitant to put it into production just because of my limited programming skills. That said, anything is better than my original really. How far along is yours?
I don't normally like the type of discourse that labels a person as intrinsically "bad". It doesn't leave enough room for people to change their minds and change their ways. But jeeeeeeeeez. Have you seen [Kerr's own words on the origins of OpenCart](http://www.opencartnews.com/interviews/an-interview-with-opencart-founder-daniel-kerr/)? &gt; Got sick of waiting for OsCommerce to release their next version. Those guys really dropped the ball. Instead of updating the system to use a proper OOP framework they just piled junk code on top of junk code. I mean, the dude blames other people's shitty code for his own success. It infuriates me that, in spite of this, he can be so stubborn in his refusal to see the flaws in his own work. Seems that it's been this way for a long time though. A 2011 article called [Why Not To Use OpenCart](http://www.websynn.com/2011/03/22/why-not-to-use-opencart-bad-reviews-of-opencart-team/) ended with the following recommendation addressed to Daniel. &gt; Don't be so defensive. There are many posts of you attacking the poster for giving their opinion. This really looks negatively upon you. &gt; Both you and your moderators act like the world owes you a favor. We were just fine without OpenCart and we'll be just fine without it. Don't give us a reason to all bail ship. The same site covered a [tempter tantrum that he had in the OpenCart support forums](http://www.websynn.com/2012/01/10/opencart-update-daniel-kerr-is-at-it-again/) later in 2012. Wow.
How comfortable are you putting into production a software that is in "pre alpha"? In 1 week or 6 months there will be breaking changes that will require lots of time to fix or update. Maybe the project is more stable than it lets on (using a pink banner with red text at the top of the homepage). But even the newest [blog entry](http://sylius.org/blog/components-bc-break-warning) is about backwards compatibility breakage, albeit with great detail, instructions and explanation. I love the prospect of a well-structured, customizable, open source php cart but is Sylius ready for deployment? For clients? For important stuff?
&gt;but what I dread the most was the XML configs for my personal use of ZF1, I use ini the file style of configs. easier to read IMHO. I can imagine it would not be too hard to change from XML to ini if you have it all structured in the bootstrap file. &gt;When people say Magento is heavy, they're not joking around. Even with 5.5 opcache, on my dev machine - it's slow. You need some serious horsepower and tuning skills to make it run smoothly. if you have xcache on make sure your xcache size is set higher than the default of 64M I usually make mine 256M. 4X the default. &gt;WooCommerce: I did a maintenance on an existing site using it, looked very nice, the customers seems to really love it, but I'm biased against wordpress. wordpress is not too bad, There is just a bunch of badly written plugins out there. the core stuff is pretty stable. plus if you want your site to run faster, add in a caching layer. 
Drupal Commerce is truly amazing. It's different to other solutions, in that you get the power of full content management framework at the same time. So much can be accomplished by interacting with the APIs (and that means writing some code, stop with the point and click building!). It can handle a lot of complicated requirements, and there are many modules out there to deliver functionality, if you cannot write them yourself (or the wheel need not be reinvented). I've worked with other 'carts' and they are just so inflexible, or just generate unwanted markup and/or impose restrictions/limitations or simply do not provide the scope of functionality required for a project. Sadly, I hear a lot of people complaining about Drupal and Drupal Commerce for all the wrong reasons. I would urge them to sit down, read, learn and interact with others about how to achieve things. It can be extremely flexible and extensible!
lol. I just hit the coffee shop, gonna take a look at some templates. See if something might work 
Suprised me no one uses a custom-made one... I have a plugin for wordpress I developed that really serves my needs, and with every new need from a new client, I make an update and improve it for all (or the ones who apply)... It takes its time, but in the long run, you end with a really custom-made script, that you know from A to Z... can't get any better than that...
I asked this about a month ago, here's the thread: http://www.reddit.com/r/PHP/comments/21flle/can_anyone_suggest_a_php_ecommerce_solution_that/ Sylius - looks great, though there is not a dedicated team to really support it (other than the community), plus it's more custom so your dev team may struggle if they're not be too familiar with OOPHP &amp; working with a framework like Symphony (what I think it's built on). Woocommerce - On wordpress, so lol, no. Opencart - developer appears to be a cunt CSCart/X cart - terrible Lemonstand V1 is amazing, though they're axing it soon because an invester wants them to move to a cloud-hosted "better" V2 version of their platform. Magento - looks very dated in the backend, everyone was moaning about it being slow, but we set it up on a $10 a month Digital Ocean droplet and seemed fine with basic caching (maybe even none). Prestashop - looks very good, 2 support teams miami/paris. Might not be as flexible as magento, though haven't had enough time to properly look into it.
Wow just read your article and the comments below it. I can't believe how these vulgar idiots spoke to you on there. I really can't stand the fact that people hold so much faith in themselves or their business/product. Time to get the latest copy of OpenCart and do some pentesting!
Umm. No. The question is; why are the methods in the "controllers" static? "It's a technique for autoloading functions" I don't even know how to begin to comprehend this statement, static methods have absolutely zero to do with autoloading... 
Really creative and innovative ones, that is! Being older, you're just getting better at hiding your bugs in more obscure places.
Is that a new framework? Best title ever. "Ruby may have Rails, we have Tears". Next in: Blood (HTML) and Sweat (CSS)
Metal (TM). Based on Four Wheels. (SCNR)
GET strings used to be limited in length, something like 256 characters, back in the before time, in the long long ago, and they probably still are, but it's so long that it's irrelevant. If you actually did hit that limit for some reason I'd say that's time to reevaluate your code, but you could also get around it by using POST instead. Is OP maybe asking how to peel x amount of variables off the top? GET is an associative array, so you probably wouldn't want to do that. If you did want to, you could iterate with keys() or something. Edit: array_keys(), that is.
You really need GitHub and Composer support. Without it it can't be widely used by PHP community Also I'd recommend to include a minmalistic yet beautiful default theme. So it can be used out of the box. Actually I judge static site generators by time I need to invest in customizing them. Vodka looks good, but it should be simple in installation and use as well 
I'm still not sure what you're on about. Are you possibly looking for [extract()](http://php.net/extract)?
Prestashop
I think this depends on what you mean by 'accept'. In what sort of context will you be using this? Just trying to get a better idea what you're aiming for.
Why would you be hesitant to put it into production? If you're worried about security, it might make sense to put your code up on github first. Other developers can then "audit" your code for security flaws. I'm relatively close to a alpha/beta ish release. Maybe by the end of Summer? It uses PSR, composer, a few open source libraries like Propel ORM, and Mustache, as well as a few components that I've authored and open sourced as separate projects.
&gt; You really need GitHub and Composer support. Without it it can't be widely used by PHP community. What is wrong with Bitbucket? And I didn't add it to packagist because it is not a library. I have provided a link to a phar file, but If you don't want to download phar's you can clone the mercurial repo and install the dependencies via composer. Having a default theme is nice. But I am not much of a graphic designer, so I am not sure I can come up with anything that can be called beautiful.But thank you for your suggestions.
I need to be able to write the passed GET data to a file, but without the script knowing in advance how many pieces of data there will be.
If you want it in text form or something similar, then perhaps [implode()](http://www.php.net/manual/en/function.implode.php) would do the job?: &lt;?php // Let's imagine that $_GET is this array: $array = array( 1, 2, 3, 'n' =&gt; 4 ); $imploded = implode(',', $array); echo $imploded; // '1,2,3,4' With this, it wouldn't need to know how many values there were to do so. I think that inevitably, if you want to do something more unique, or complex you'll end up having to use a loop. 
No. It's a _solution_. The problem is you're not able to sell your shit online--the __solution__ just happens to be software.
Can't wait to test it! Been in development for a while. The problem with adding jQuery to Magento, is that now you have Prototype AND jQuery. =\. I'll try magento with hhvm - can't believe I didn't thought of that. cheers
The question doesn't make sense. The class isn't the controller; the methods are the controllers. And they're not really methods. These controllers are free functions defined inside a class just so they can be automatically loaded when the router attempts to call them. It has everything to do with autoloading.
You had me at Mustache. I'd be interested to know when this is released.
That's an awesome function to know. I hadn't seen that one before. Similar to explode, but, designed for specifically formatted strings then?
I don't really care who's the guy behind OpenCart, if he's a douche or a dick! I have developed and deployed dozens of e-commerce websites with Opencart, and for what I needed, it works pretty well. For me, the code is more/less clean and organized, however I would save many lines of code by implementing certain things differently, like for example the Languages. But can't be to picky about that as compatibility with a variety of PHP versions doesn't leave door for much. The framework is pretty simple, easy to understand and to extend. You don't need to learn any specific framework in first place, and after 1 hours looking into it you can really understand how it works. It works well out of the box for most needs and any customization is very easy to implement, and there's a big repository of extensions. I've tried dozens of other shopping cart systems, and always came back to Opencart for small/medium size projects. For bigger and specific projects I rather develop something totally custom rather than use something like Magento. If there's no budget for that, than I don't consider it a big project and use Opencart anyway. I used Opencart in some "big" projects and it's working like a charm after spending just a few hours implementing APC in it to improve performance. I've used it as the base framework for some projects where in the end it is nothing like Opencart, and it's working fine. I have made modifications to it for my own use that I'm even thinking about to developing a fork of it. So, I guess that Opencart is probably just not that friendly for lazy developers that expect everything out of the box or solve any problem just by simply installing a module, or by getting a few lines of code from the community for their needs. But over all I find it good for any average developer and for any average project. 
eeh I dont know. I have trouble using stuff that's was not made for its intended use. My problem with wordpress are - difficulty to extend stuff. you gotta make it a plugin - how do you extend a plugin? if the plugin does't have "hooks", either fork it and lose updates. if you change the code manually in the plugin folder, might be gone when someone presses "update plugins". - all you need is 1 bad plugin to take your site down/hacked. The amount of bad plugin in the wordpress ecosystem is astounding. My paranoia is from seeing a subscribes to newsletter plugin vulnerable to SQL injection. Yeah.. I dunno, using a blog as an a ecommerce tickles me. I'd rather an ecommence to have a blog than the inverse. Maybe it's just me! 
Basically need something that is sustainable and low-maintenance, but without TOO much magic to the point code becomes hard-to-handle. Taking advantage of having to traverse the source recursively is obvious. Attaching main/sub nav to that traversal is the tricky part. We can't really say "folder names are main nav, secondary navs are pulled from front matter". However... SOME convention will be required to avoid over-configuration, which will not be maintainable.
With code solutions like this if(!empty($this-&gt;request-&gt;post)){ foreach($this-&gt;request-&gt;post as $k =&gt; $v){ if (!empty($this-&gt;request-&gt;post[$k])) { $this-&gt;data[$k] = $this-&gt;request-&gt;post[$k]; } } } you *really* shouldn't be casting stones about quality. It doesn't have enough functionality to replace the code you were criticizing (where does the data come from when it's not being posted?), it's poor on readability, and it leaves developers with no idea of what variables to expect. You basically traded verbose procedural code for opaque procedural code with the weak justification that it's better because it's fewer lines.
I think you should try Magento before suggesting stuff bro :) - It's written using ZF1, but magento isn't just a ZF1 plugin or whatever... it's like, a complete app. - You can't use INI instead of XML. There's not 1 config files. or 10. There's at least 400 XML files in the default install and I'm not exagerating. The templating systems uses XML. The layout uses XML. To override controller? XML. To change database config? XML. To add a new vendor? XML. &gt; if you have xcache on make sure your xcache size is set higher than the default of 64M I usually make mine 256M. 4X the default. Well, memcached + opcache &gt; xcache. Which is what I run in production. My point is that, if a default config of a default store is slow - there's some heavy gears in the background getting turned. &gt; wordpress is not too bad, There is just a bunch of badly written plugins out there. the core stuff is pretty stable. plus if you want your site to run faster, add in a caching layer. The speed wasn't the the issue, the badly written plugins are :-)
I ve seen http://getbootstrap.com/css/#grid. But I still don't get your requirement correctly. Do you want to add anchor tags to all the headings in a long page and generate nav links automatically? Can you please explain how exactly do you imagine it should work?
As I mentioned earlier, will building an array (nested possibly) from the permalinks of the pages and passing it as a template variable work? That way if you have a navigation section that will get populated automatically.
... what are you talking about? --- edit: Ohhhh you were talking about the article. Bro, I'm not the author. I agree with you on that critic, honestly.. but check the comments part :) It's where the gold is 
No. He's a douche because he's an e-commerce, security should be a priority. When someones opens an issue and he answers like a dick, I would be concerned. 
That honestly looks like some OpenCart code, tbh.
 foreach ($_GET as $key =&gt; $val) { // Do stuff with data here } Or, if you just want a number, use [count](http://us3.php.net/manual/en/function.count.php)
Every time I have used a pre-made solution I'm reminded of how much better it is to do it yourself... It's really not that hard, and you are guaranteed you can make it do exactly what you need without having to jump through hoops. I think the ready made solutions work fine if you need exactly what they deliver, however in cases where you know you're going to need to do more than just retheme it, I think you're usually better off just doing it from scratch. 
Woocommerce look at the hooks documentation for your custom shipping code
This is baller as fuck and should be part of the language. Have you considered trying to track this in via an extension or something?
This really is the best answer IF you're following PSRs and other modern principles. Past you looking out for future you and all. But yeah, completely agree: roll your own.
Eh... comparing a framework on one language to a framework on another language is a lot like comparing a key lime pie to a tuna noodle casserole. They both do the job, but under the surface things are vastly different. Pretty much anything you can say about the language will apply in turn to the framework.
This is the way I do it. Then you can also establish conditions within the foreach loop (against the $key variable) in case you need to accept additional $_GET variables that won't be processed.
Also good. Thanks!
I think that's kind of the problem/complaint though: two libraries to do what one library can do. I like seeing the progress magenta has made over the years, but I'm hoping they pick one JS library and commit. 
Seconded. Inherited another developer's woo commerce site work, and I found it pleasant to work with/debug/upgrade. 
I'm not sure what you're hoping to hear. PHP is just as capable as any other language for the web. I understand that performance is important but often it's not the language that's the real bottle neck. Really it's just a question of what you're comfortable with. If you've used a lot of python it would be a smaller learning curve to use a python framework. 
I'm so sorry. It's hard for me to get a lot of detail into these posts. I've created a gist at https://gist.github.com/mdwheele/ead718a90e7babb193bb . I'm not as familiar with Bitbucket, so if it'd be easier to handle communication about this on the repo in an issue there, let me know!
I've decided that it's probably easier to learn Java from scratch and use Broadleaf, after mucking about for years with one bullshit php ecommerce solution after another. We'll see how it turns out...
Take a read through the gist if you get a chance. It may have some more information about my specific use-case. https://gist.github.com/mdwheele/ead718a90e7babb193bb
How much would you pay for your ideal solution? 
Thank you for doing this :) It is really easy to add an issue or request a feature via [bitbucket repo](https://bitbucket.org/sras/vodka/issues). You don't even need an account, as I have not disabled anonymous users. &gt; but an important thing to consider is that if we're writing output from the rendered template AS we pass through the source directory, we technically don't have a way of knowing the full site structure yet. This is not a problem, as it build a collection of article objects before starting to render them. So we will have full info of all the articles before starting to render them. As for the rest, let me work on a solution. I shall let you know. if you can create a bitbucket account, then you can watch [this issue](https://bitbucket.org/sras/vodka/issue/1/autogenerate-site-navigation) that I have just created as an anonymous user. If you want to create another issue from your bitbucket account, please let me know. I will delete this one and update yours.
I'd be interested in chatting with you more about this. If you have time to skype let me know.
Discussion on this feature continues at https://bitbucket.org/sras/vodka/issue/1/autogenerate-site-navigation
I'm assuming you're looking for something like: &lt;input type="text" name="something[]" /&gt; &lt;input type="text" name="something[]" /&gt; &lt;input type="text" name="something[]" /&gt; .... which would result in $_GET['something'] being an array of values: array(3) { [0]=&gt; string(6) "value1" [1]=&gt; string(6) "value2" [2]=&gt; string(6) "value3" } 
&gt; Magento will take a day to load on typical shared hosting. Huh? Most shared hosting use installers like softaculous... meaning you can install Magento in seconds.
Yea, I can agree with that. Also, that's basically the best analogy I've seen on reddit. [Enjoy](http://i.imgur.com/6ZleJfu.jpg).
I haven't tried other solutions apart from Ubercart, but Drupal Commerce manual is really hard to understand at first. Also you are right. It's not possible to go far with click building. And I'm okay with that, I'm ready to code. But the deep understanding of Drupal API and Drupal Commerce API required for this makes it easier for me to start project that need functionality not provided by existing modules from scratch using Symfony. Also like everything with Drupal, it's not very fast with pure Drupal Commerce and once you add more modules, things become to get really slow.
Yeah, I think it's Wordpress' history as a blog platform which hampers it, and in a lot of ways there's a lot of legacy stuff that is a bit of a fudge-around to work with "blog-style" functions. But those sorts of plugin issues probably apply to any similarly extensible platform. You don't necessarily need to make plugins to extend functionality, you could just dump it all in your theme folder. Either way, it's not a massive hassle to code up a new plugin. Wordpress is probably one of the most capable CMS I've found, and it's particularly client-friendly, which is a big plus. Like anything of that size though, there's the whole security-with-obscurity problem. And it can be a hassle to maintain multiple wordpress sites/run updates/monitor code etc. And there are various glaring problems, yeah, but any system will have those (one of the guys at my work has a tendency to, whenever he discovers any issue with a system, declare "I HATE THIS NOW, I don't want to use it any more...") On a vaguely related note, during my explorations into "I want to stop using Wordpress for so many things", I did discover http://www.statamic.com which looks to be shaping up to be a very nice little CMS.
Statamic looks pretty cool. Thanks for that. Kinda sucks that there's no free version to try. 
Yeah, the personal version is only $29 though, and I appreciate that the team is genuinely trying to support development rather than risk it being an open source project that would only rely on "free time" (not a bad thing in itself, but if offering a project as a platform for a clients' site, an indication of support levels is useful) Definitely worth a shot though, it has a really fresh way of structuring things, and its simplicity is a breath of fresh air compared to Wordpress. (I also love the genuinely insane filler content that they provide with new installs.)
lol, someone gonna be mad about this but I just want to make things simpler with this 'facades'
Yeah just finished reading it. It looks good. I would have loved an admin-panel demo. Next freelance contract; I'm using that! 
I'd guess that sysadminning 14,000+ sites would give you a slightly biased view into everything that's horrible with the world of web though :) It provides a mix of everything. Like any tool, it can be abused. And if you set it up as a vanilla install, I'd almost be impressed if you could go more than 5 minutes without it falling over, swarming with script hacks. There are straightforward plugins that'll secure the most obvious hack avenues almost immediately though. (and there are high quality plugins available, if you dig through all the *godawful terrible ones*) I'd agree that its the sort of system that encourages cheapness and nastiness though. It doesn't *have to be cheap and nasty*, but usually is. For the right job, it can be the right tool, but I'm also finding that there are newer, cleaner options coming out these days that are much more streamlined. I've come to know all its quirks over the years, it offers up a lot of flexibility, but also a lot of avenues for being a pain in the ass.
In the days of $5 DigitalOcean VPS's there is absolutely no excuse to use shared hosting, ever.
You're my hero :)
Totally agree
I created a shop in Lemonstand v1 a few years ago... It does a good job, and the code has decent documentation. I am currently migrating the shop to v2.. The main downside (other than it clearly not being finished) is it is cloud-based and doesn't currently have a way to write modules for it. So I am SOL for a lot of "missing" features. Like navigation. Or a CMS. Very confusing why it is lacking some of these things. The upside is that the layout is good, it is written (I think) in Laravel and uses Twig for layouts, which is much nicer than whatever it was in v1. In theory it could make a very nice platform to develop on (if they allow custom modules). Not so keen on having to run it on their hosts though. Seems like they're opting out of a good niche market and trying to go head-to-head with Shopify? Not sure.
Yes it is :'(. Updating 2.x has always been a PITA because of that. They are finally doing 3.x with composer. 
&gt; Clients hate it. They typically feel overwhelmed with the interface and what's available, any decent CMS will allow the web-developer to limit the end-users ability to makes changes where they shouldn't be poking around at. Whaaa? Your clients are overwhelmed by WORDPRESS??? What kind of clients do you have? Monkeys? Wordpress was basically the only backend that most of our clients understood. Typo3? Horrible. Drupal? Way to complex. Wordpress: "you click here, you enter your title, you enter your text, you click there, that's it."
chr(ord('A') + 1) == 'B' 
I have an existing project (custom CMS in codeigniter) that will need to have a shopping cart. What would you recommend?
And still uses myisam by default.. Changing that to innodb brought a 10 second page load down to 3. Sellvana is looking promising. 
They have committed to jQuery in Magento 2.0. No prototype. Now, it might be another 2 years before we see it.
better one, even the url is shorter and easy to remember -&gt; php.net/cookies 
Yes, yes it does. You can override just about anything. Not saying it's easy or that there's other things that don't sick about it but yes, you can override core or 3rd party modules or templates or anything.
This isn't entirely true. Can run a nice full page cache like Lesti FPC and a decent host and have something that will be very decent.
Honestly, all of them suck. I have experience with Prestashop (1 year), Magento (6-8 months) and recently Sylius. **Prestashop** has a huge community who write modules. And all of them are utter, utter shit. Mind you, they do work, but they are written in a horrible, 2005era style of PHP where echoing HTML from the PHP class is OK. The core of Prestashop is similar. They use Smarty for templates but they construct a lot of the markup in PHP with concatenations and whatnot. If you want to override a class you can, but you have to write in a similar fashion. **Magento** is also far from ideal. It's complex, heavy and over architected with a rather lack luster documentation. BUT: IMO it's still the best current solution. If you can understand OOP you can get up to speed with Magento in a month. What really helps is that the code is rather well written. It's also really flexible, at one point I completely overrode the way products are handled without touching any core files. It also has support for heavy caching which makes it usable on shared hosts. I used it only on shared hosts and never had a problem with speed. **Sylius** is far, far away from being ready. I tried to use some of their components separately (because in theory you can) and they wouldn't build. They talk about BDD constantly, then push up code that doesn't work. I tried fixing it at some point but decided to write a simple shopping cart for my Symfony app instead. **TL;DR**: Prestashop is popular but the code is horrible, Magento is complex and klunky but worth learning and Sylius is not ready for anything. 
**EDIT:** Cartalyst [says](http://www.reddit.com/r/PHP/comments/25iwbn/sentry_3_demo_nearing_stable/chhzlpo) there will be a relatively straight-forward upgrade path from 2 to 3. Hooray :) ------------ **(No longer valid)** I guess Sentry 3 will be backwards incompatible with Sentry 2 and there won't be any way to upgrade it. Cartalyst used to close Sentry 1 bugs as wontfix, claiming it will work in Sentry 2. Joel Spolsky's famous [Things You Should Never Do](http://www.joelonsoftware.com/articles/fog0000000069.html) article explains, in great detail, why this *"we will rewrite it from scratch and it will be great!"* approach is horribly misguided: &gt; It's important to remember that when you start from scratch there is **absolutely no reason** to believe that you are going to do a better job than you did the first time. [...] You're just going to make most of the old mistakes again, and introduce some new problems that weren't in the original version. 
I thought he meant speed of the running site
Not that I know of but http://www.codecademy.com/ has a pretty decent PHP course.
Magento can do all of this. Yes it has it's shortcomings but it's still the best out there right now.
from my POV rest is all about performance for coding i would always prefer SOAP though its old an clunky, but its safe and stable and easy to use in php but still, the overhead from mostly all non-REST APIs is massive, for instance consider an affiliate website which gathers product data from thousands of merchants, we are talking about 100-200gb raw data, with daily deltas of up to 50gb, transmitting those via soap as single records vs being able to download them as a .gz file with a rest interface is an extreme example - but for me this is the main difference rest has much faster request times, much faster response time, and much less overhead, with soap apis its hard to get over 1000rqs/sec even for simpler requests, with rest the limit usually is the webserver and not the code. also REST (in my eyes) is no architecture. you can have any kind of architecture behind an REST api.
Yeah, this is mostly useless as it's a restatement of the manual page with a bit added. It doesn't even get into the path, domain, secure and httponly options which are some of the most important (well, besides the name and value of course). For example, if you were doing things more correctly, you'd do something like: setcookie('mycookie', $value, time()+3600, '/', '.mydomain.com', true, true); This would set the value, only allow access from the root path on anything in the "mydomain.com" domain space. Setting true on that secure value makes the cookie only accessible via a HTTPS connection. The last value, httponly, makes sure that any inline Javascript can't access the cookie information, helping to prevent cross-site scripting issues.
It's a big undertaking, for sure, but at least they are making the effort to put it on the roadmap. 
I tried Bolt maybe a year ago, easy install, cool features. But it wasn't ready for production, any idea on where it stands now?
&gt; difficulty to extend stuff. you gotta make it a plugin That is a big plus point! If you can keep your extensions well away from the core, and in a plugin, then it removes a tonne of upgrade pain further down the line.
I can get behind this. I've already disallowed its use in the open source department at work.
woahh, thanks a lot dude! :)
By our estimates there are currently about 2500 real, live sites on Bolt. I'd say it's pretty much ready for production. :-)
Not just wordpress templating though. All of the assumptions it makes about navigation, breadcrumbs, sidebars, URI structures, taxonomies etc. You do anything that violates Wordpress's assumptions and you're going to have a bad time. Lately I've been using Wordpress as nothing more than a place to *enter* content, and then I just build my own 100% separate MVC front-end because I'm sick of dealing with it. Once Taylor releases what looks like a premium CMS for Laravel, there will officially be zero need to go near a Wordpress site again.
Yeah, I really need to improve my comment style :p thanks a lot :)
[Indeed](http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl).
Gah, reading comprehension fail on my part.
A few comments about security: What is generatePersistenceCode() and generateActivationCode() used for? Hopefully not for anything security related. guessIpAddress() allows IP address spoofing. Also, Sentry seems to support weird hashing methods, ie. non-stretched hashing. Is there really a need for this?
With Magento, you can extend the core classes, and with some well placed XML magic, you can keep it during upgrades. But like I said in another post, upgrading Magento is always a pain in the arse, so it's unlikely that you can upgrade without hitch. Opencart uses its vqmod, which basically creates virtual files and use those files during loadtime. Super hackish, but it seems to work. Wordpress is plugins only. Modifying core = hope that it has hooks. My CMS or e-commerce of dream would be based on Symfony, Laravel. You'd be able to switch a core functionality by changing a line in the DI/IOC and use yours. That's what I meant by difficulty to extend stuff. 
Hey man, kudos for not getting too flustered and accepting the criticism like you should. Good luck.
I don't. I'm just trying to figure out what OP wants.
Actually the data is being generated by an AutoIT script, but this is another useful thing to know. Thanks!
I am not a PHP developer.
&gt;Inter-account throttling and improved DDoS protection. Does this mean that you've solved the [issues I raised with Sentry over a year ago](http://www.reddit.com/r/PHP/comments/1aitay/simple_powerful_and_easy_to_use_authorization_and/c8xvv61?context=2)? 
Ahh, Laravel. 'Tis a beautiful thing. Currently building a fairly complex project in it. Makes me happy. I think the only reason I stick with Wordpress is that I know it so well. Could probably say the same thing about PHP... (although it does seem to have matured recently, especially with things like Composer making life simpler)
Sorry, but DDOS and little flood are different things... It's enough a simple &lt;?= 'nothing'; ?&gt; to make a DDOS attack successful.
In addition: https://github.com/cartalyst/demo-sentry/commits/master?page=111 https://github.com/getsentry/sentry/commits/master?page=171 sorry, but what about the copyright?
&gt;"This is a basic demo showing some of the functionality of Sentry 3 on Laravel 4.1."
Just installed it, took exactly 5 minutes, super easy and looks slick too. I recognize the profiler bar on the bottom of the screen in the backend from Symfony2 :) Just a question, is it purely coincidence or is it by design that when I create a new "kitchensink" I get as google map place marker Den Haag NL - which is exactly where I am from but not where I am currently located :)
"No" what? Man, I don't care if the guy is a douche. Are we on a PHP development sub, or are we here to judge people? I agree that security should be a priority, but as a developer, when I find a security issue I track and fix it and publish the results, giving this way my contribution to open source free software projects. When you rely on free source code for your projects you gotta be ready to find some problems. And when you can't fix them yourself, you gotta be thankful for the work of the developers in first place, and than if they have a character that you don't like or fail to fix a problem, live with it or ditch it. They didn't sell you anything, and it was your choice to use their code. Now if you are just a lazy dick, a leecher, or a developer wanna be, go ahead and judge the guy for being a douche as that may solve your problem! For more than 15 years I actively contributed with **hundreds of thousands** of lines of code to Opensource projects, and it was exactly because of **attitude** of guys like you that **I stopped contributing**. 
phpStorm should be able to do that for you.
I believe PhpStorm and Netbeans can both do this. In my experience PhpStorm has generally fewer screw-ups but is also more expensive (not free).
Well, It is sad to see that a sub dedicated to coding gets comments dedicated to bash people rather than comment on their code. I guess that there may be other subs for lazy developers or wannabe coders who rely on others source code and rather bitch about them than learn to write and fix code by themselves. 
It's worth noting that [Magento's marketplace](http://www.magentocommerce.com/magento-connect/) has some highly-functional, well-developed add-ons. Multi-pack shipping is covered by several, single-page checkout, responsive templates on theme forest... Don't get me wrong: Magento *does* suck for many other reasons, but I guarantee every single thing you mentioned above can be solved with a few hundred bucks of add-ons. FWIW, I'm running a small-ish Magento site on WebFaction w/768MB of RAM, and it is fast as hell, with minimal/no caching. Nonetheless, it's extremely painful to work with, and I don't intend on ever doing another Magento site for as long as I live. There's better ways to make money.
&gt; I get as google map place marker Den Haag NL It's a small easter egg. Our company, Two Kings, is located in the Prins Hendrikstraat. :-)
There's a script on github that might help. It's focused on looking at a codeigniter project but could be updated https://github.com/murrion/codeigniter-list-unused-functions I already use phpstorm and I didn't know it could help find unused functions. I know it can highlight unused variable names within a single file but can it go further than that? If so, that would be great, I have a few projects I'd like to clean up too. 
I see, I hadn't interpreted it that way! 
You're misinformed. https://github.com/opencart/opencart/issues/1269#issuecomment-38146718 There's a lot of issues similar to this one when it comes to open source. Do some research about it, check hackernews or reddit. People have been asking for merge requests and been flatly denied because "it's stupid and useless". If you are the owner of a OSS project getting used by thousands of people, I don't care if you're not adding X features, or if you're a massive asshat. But if you act like a douche when someone brings up a security issue with a pull request, then yes, you deserve the shaming and the judging. -- edit added another one to save you from searching: http://blog.visionsource.org/2010/01/28/opencart-csrf-vulnerability/ This is one of the reasons why people are pointing fingers and laughing at PHP. 
&gt; When you rely on free source code for your projects you gotta be ready to find some problems. And when you can't fix them yourself, you gotta be thankful for the work of the developers in first place, and than if they have a character that you don't like or fail to fix a problem, live with it or ditch it. I pointed to you 2 issues that there pointed to him, with code. He denied it and called it stupid and waste of time. So I ditched it. The OP is asking favourite shopping cart. I made sure to relay my experiences. Yes, I think people should ditch it too. It's not appropriate attitude towards security. It should't be taken lightly. But hey, if you don't give a fuck about security, you're free to use it. I just feel bad for your clients. 
&gt;UPDATE : I have PHP Storm, but I can not find how to use it to find unused functions. Right click on a function -&gt; Find Usages If it finds nothing, nothing is using it. This assumes your PHPStorm project includes every line of code. Its possible there are things outside your project that depend on bits inside your project. This is just going to find unused functions, like you asked. Unused code blocks, will depend a lot on the application. I dont think there's any silver bullet there.
Holy crap... Don't ever, ever, ***ever*** do that!
Mind explaining why?
er, foreach isnt a PHP thing. Its in most, if not all programming languages
I think it can still be used, if its used with caution. I wouldn't use this command without the prefix... But, it can still be useful
This may also miss dynamic invocation like $func = "foo"; call_user_func($func);
The activation code is used to generate a code to email a user to verify their address is good. It is not required but available. 
On the documentation/about page, it says "If you need to build a site with ‘enterprise’ features, you’ll quickly find that there are better tools." What exactly does it mean by enterprise features? 
IMO, extract() should never be used on any of the superglobals. [register_globals](http://php.net/manual/en/security.registerglobals.php) have been removed for good reason. Reintroducing the functionality is playing with fire for fire's sake. It's only a matter of time before you burn your house down. 
The Sentry repository you linked to has nothing to do with this authentication platform. The proper repository is [cartalyst/sentry](https://github.com/cartalyst/sentry).
Sure. By using `parse_str` with `$_SERVER['QUERY_STRING']` you would be passing user supplied, *insecure* data to PHP. Let's assume our query string is "**first=value&amp;arr[]=foo+bar&amp;arr[]=baz**". Now, consider the following code: $str = $_SERVER['QUERY_STRING']; parse_str($str); echo $first; // value echo $arr[0]; // foo bar echo $arr[1]; // baz As you can see, this code allowed *any user* to introduce arbitrary variables to the current scope (which could even be the global scope!). For example, if you already had a variable named `$first`, this would overwrite it. This is obviously extremely dangerous and should never be used.
Well yes it's possible, but I was mainly referring to the tokenizer extension, which this library is using. http://www.php.net/manual/en/book.tokenizer.php
Yes, but this can still be used with caution. You failed to show the rest of that example from the docs: parse_str($str, $output); echo $output['first']; // value echo $output['arr'][0]; // foo bar echo $output['arr'][1]; // baz This can be used safely, the developer just needs to be aware of safe practices. 
"Migrating to V2"... I'm sorry. It does not use Laravel, just Eloquent. V1 had no template language, it was pure PHP with twig tacked on later. They are A) Targeting only big business and B) Have made a lot of promises in the past and failed to deliver and are now making some of the exact same promises again and have even less of a system. Further they have "features" like the pre-order button. Which while nice for software where you can sell an infinite amount, *any* store that deals with in-demand product for their customers can't even use it. Since it removes any kind way to stop sales from happening, you can end up selling a lot more than you will get in. This issue was brought up with them in V1 and they have apparently ignored it fully when building v2 (on top of coming up with an *insane* alternative to using the pre-order method which doesn't give the programmer what they want.)
Great news. Cant wait to try out the new front end editing
The develop branch is Sentry 3 code.
Fair enough. 
This depends on the case. *Generally* yes, you shouldn't rewrite everything, it is just grinding gears and wasting time. However, in some situations, that may be the only real way to move forward unless you have a team of people and can put in a lot more time and effort into refactoring the problem areas over time. As far as "upgrading" Sentry 2 or Sentry 3, you can but you will need to rework some of you code probably since methods are renamed and possibly removed among other things. It is a *major* version, so nothing to really complain about. Sentry 2 will still work just fine and you can continue to run it. Also if you find an issue, it is open source, you can send a PR in to fix it if it is important to you.
So, can you provide some articles showing what should be done with exceptions? Saying they shouldn't be used like that is great, but can you show the proper way to do it as well? I'm not seeing that from the c2 wiki entry.
If you're a hotshot that thinks that you can fix everything, that's a real problem. OSS is about helping each other. We're not talking features here - it's security. Did you implement bcrypt with their vqmod system? and csrf? You can't find all the holes. What happens if someone else found a big exploit, but Daniel denies it? That's such a bad philosophy. Anyways dude, if my arguments can't convince you from not using opencart, I don't think anything will. You'll probably be able to "fix" it yourself, lol.
Good. You shouldn't be using the mysql extension, it's deprecated. 
Did you successfully initiate the connection?
&gt; This can be used safely Indeed it can, but the GP's example showed the dangerous way.
Yes, the connection works fine, because I have multiple other things that connect to the db and they don't give an error.
He probably didn't select a database, that's all. Assuming the above snippet isn't all there is of his code, because then he's not even trying to initiate a connection. 
Well my next guess is that you have to fetch query results via mysql_fetch_assoc since you can't just access the result set and echo it.
&gt; It is a major version, so nothing to really complain about. Sure, it is a major version but Sentry 2 was released [only 8 months ago](https://github.com/cartalyst/sentry/releases/tag/v2.0.0) and now, I'm assuming they (you?) will start closing Sentry 2 bugs as wontfix as soon as 3.0 is tagged. I'd love to be proven wrong on this, so maybe /u/cartalyst can correct me. &gt; Also if you find an issue, it is open source, you can send a PR in to fix it if it is important to you. This *"It's open source so fix it yourself"* logic is mind boggling to me. So if it's an open source project I shouldn't open a bug report, I should just send a patch / pull request? How about PHP; should I learn Zend API so a bug in PHP gets fixed? Or Linux; should I learn Assembly/C if I want a kernel bug fixed? If your open source project completely breaks BC every few months and stops maintaining the previous version, it is borderline unusable as you just can't target a stable API that gets security &amp; bug fixes.
So this: &lt;?php $sql = mysql_fetch_assoc(mysql_query('SELECT SUM(*) FROM list')); echo $sql['votes']; ?&gt; I tried that and it didn't work either for some reason. 
Not that I necessarily have any suggestions, but when you say 'core PHP projects' do you mean 'projects that are focussed on the PHP core' (eg. certain C based extensions) or more 'major PHP-based projects out there in the community' (eg. Symfony)? Either way, it's awesome to know that you're at least considering this (full disclosure, I'm one of the organisers this year).
 &lt;?php $result = mysql_fetch_assoc(mysql_query('SELECT SUM(*) AS `count` FROM `list`')); echo $result['count']; ?&gt;
While I agree about using MySQLi or PDO, this is obviously a part of his snippet. If he's using MySQLi the principle prevails anyway.
That doesn't work. Please note that I need to add up the results in the column "votes". Which are currently: 1 2
In what way it doesn't work? What should be the expected result? 3?
1. Your SQL query doesn't have a column called votes. You need an "AS `votes`" in your query. 2. The code's an example. 
The [response](http://www.reddit.com/r/PHP/comments/25k2eq/mysql_result_doesnt_work/chhy9tx) OP posted to you made it pretty clear that he has no idea what he's doing. 
The expected result should be 3. When I do this fetch assoc it does give a result, but it only shows the first one: &lt;?php $result = mysql_fetch_assoc(mysql_query('SELECT * FROM list')); echo $result['votes']; ?&gt;
Well, you can't expect the maintainer(s) to maintain everything all the time forever. So it shouldn't be that mind boggling. If you were paying for it, as I am paying for the Cartalyst Arsenal, then with those packages I would expect some level of extended support time. However with free and open source stuff, sorry, I have no sympathy for users just the maintainers having to deal with people expecting so much out of their (most of the time) free time they donate to the projects they work on. Also I do not work for Cartalyst so I have no kind of say in any of their decisions. I also don't know what their plan on support for post 3.x going stable is.
Is the snippet all there is of your code? If so, it doesn't matter if "your other SQL queries work fine", they're not part of the same script. If one has a mysql_connect and the other one doesn't, then the one with mysql_connect will work, but the one without it won't. 
&gt; Well, you can't expect the maintainer(s) to maintain everything all the time forever. This is a straw man argument. No one expects anyone to maintain software forever and I didn't claim so. There is, however, a *reasonable expectation of viability* with every serious open source project (from low level stuff like the Linux kernel, to programming languages like Python - which still maintains the 2.x series, to high level software like PHP libraries). Cartalyst is, of course, free to do whatever they want with their project but claiming that breaking BC and rewriting everything every few months is "for the better" is a cop out. Why did it *need* a rewrite? Was breaking BC *necessary*? Why do you believe, after *two* rewrites, you got it right this time? These are all questions worthy of answers, don't you think? P.S: I realize throwing everything away and starting from scratch is *fun*, but that fun comes at the expense of every downstream consumer of your product.
 &lt;?php $result = mysql_fetch_assoc(mysql_query('SELECT SUM(`column_name`) AS `votes` FROM `list`')); echo $result['votes']; ?&gt;
I don't think we have thrown anything away. We have iterations of the same code base, features, and philosophies. * Sentry 1 - built for fuelphp, non framework agnostic, 3 years ago. * Sentry 2 - composer based, framework agnostic, 1.3 years ago. * Sentry 3 - composer based, framework agnostic, same features, better design patterns. current day. The upgrade from Sentry 2 to 3 is pretty straight forward. php artisan migrate cartalyst/sentry update a few exception and activation methods. We don't have Sentry 3 documentation yet so it's understood people are concerned. 
&gt; The upgrade from Sentry 2 to 3 is pretty straight forward. &gt; &gt; php artisan migrate cartalyst/sentry &gt; &gt; update a few exception and activation methods. We don't have Sentry 3 documentation yet so it's understood people are concerned. That is great to hear! Thank you for alleviating our concerns :) Also, &gt; Sentry 2 - composer based, framework agnostic, 2 years ago Correct me if I'm wrong, but Sentry 2 seems to have been released [8 months ago](https://github.com/cartalyst/sentry/releases/tag/v2.0.0), is it not?
Congratulation on your app release. Is there any reason or advantage to have [Html and PHP](https://github.com/bolt/bolt/blob/master/app/classes/lowlevelchecks.php) in a single file?
Thank you!!! The whole community of open sourcing software is the reason I put it out in the first place. Reddit has never been anything but a distilled source of truth for me. Sometimes it's hard to hear, but that's the stuff that I need to work on, which is why we open-source in the first place. Anyway, thank you 
You nailed it on the head, a better developer than me could probably figure out a better system. Here's hoping the open source community will embrace the idea, and give me feedback!!
Seems promising.
Who would you say Bolt is targeted at?
TOML is another config file specification :)
I may have a look, but I have to admit one thing: &gt; All of Bolt's configuration is stored in Yaml files. I'm not a fan on YAML... But, since I am looking for alternatives to WordPress, I might as well have a gander. It's purely for my personal site and depreciated "blog" I wrote like 3 posts 7 years ago. lol
The very nature of that file is to perform low level checks, below the framework level. That means no views for rendering or anything. I doubt there would be a better way of doing it.
I was going to reply with "we don't do that, do we?", but you've found the one place where we do. That file is an exception. If you attempt to use bolt on PHP &lt; 5.3, autoloading fails horribly, whilst displaying a confusing fatal error to the user. We got a lot of support questions about that.. The "low level checks" kick in _before_ the framework is initialized, so we can display user-friendly messages to the ~~noobs~~ less experienced users, detailing what's going wrong. Apart from that one single location, we try to seperate concerns as much as practically possible. 
ITT: PHPStorm. I'm sure PHPStorm is an excellent development tool (not being sarcastic: I hear a lot of great things about it), but let's not forget that breed of "clever programmer" out there who will put the name of a function, class or variable into another variable and then happily proceed to call that. Unless you can be sure your predecessor(s) did no such thing, there is unfortunately no way to prove that any given function is in fact unused, for the simple reason that the function names might have come from outside the application somehow, if they did. You'll have to either assume that they didn't, or somehow figure out how the code works to be able to guess more educatedly. I know I'm sounding cynical, but I'm afraid I believe your better bet is human common sense over automated code coverage tools. Maybe there's some other way of going about this. If there's over a million LOC in this codebase, there's bound to be repeating patterns. Try to find some that span whole files or even directories. Just start refactoring those out to try and trim the fat. There's got to be some way to trim the line count to reduce the sheer size of what you have to work with.
Get netbeans with the PHP package. Its free and easy to use, its also easy to extend it for use with other languages. I'm on a budget and its all I use, and love it. 
You could use [phpCallGraph](http://phpcallgraph.sourceforge.net/) to identify unused functions.
&gt; I'm not a fan on YAML... Understandable, but please give it a try. I've closely worked with a few "frontend devs" who didn't like the idea of yaml either. One of them told me recently "I really don't see myself configuring a site using clunky checkboxes ever again."
More choices =&gt; Everybody benefits. ;-) 
It is working now, thanks for the help.
actually interesting enough we dropped alpha 12-11-2012. We like to sit in alpha, beta, RC quite a long time before claiming stable.
&gt; Now I spend most of my day in it! Then pay for it.
I am interested. It would be great if I could get a grasp of PHP internals, so I could contribute.
I did. Read the whole comment before getting in you high horse.
Yeah, that's what I paid. Great value really. *expensive compared to notepad.
That's a big enough market :) Good luck! I shall check it out myself although I'm a Drupal developer by day.
Imho that's not an either/or choice: We use Drupal a lot at our company, as well. It's just a matter of picking the right tool for the job. :-)
It's not perfect but copying the function name right-clicking in the top level directory and selecting find in path is another way to look for a functions use. 
Find in path helps to be certain. You will spot those "clever programmers".
Don't trust the find usages especially in old code bases. I would recommend using the find in path feature and searching for the function name. You might turn up some false positives but it's the only way to catch most things. I wouldn't actually try to cut code out but rather refactor what you have. I think that you need to take some time to learn the codebase before you try culling things. I know you're probably itching to tear it apart but you'll probably just be giving yourself more headaches.
Find in path.
Oh cool. Well in that case... personally, I'd love to see a talk on writing RFCs, mainly because although it is focussed on PHP core, I imagine it's something that I could take to other projects too? Submitting to the PHP source code would be interesting for me, too. But again, I"m just speaking for myself!
You want to look into a code profiler. Zend debugger or xdebug profiling with an interpreter, or potentially a better tool with the same purpose will do this. Phpstorm will not really directly do what you're looking for. Not without a lot of manual labour anyway. Set up a profiler and run all the code through it, in the circumstance it is used in and you will be able to work out what is used, in which order and then determine what is not
&gt;I have PHP Storm, but I can not find how to use it to find unused functions. PHPstorm has a 'deep' inspection tool that will analyse the whole project and give a report for all of it which you run by doing: Code / Inspect code / Whole project All of the issues that it finds with the project are reported by type. Be prepared for there to be far more than you can deal with in one afternoon.
&gt; Whaaa? Your clients are overwhelmed by WORDPRESS??? What kind of clients do you have? Monkeys? Basically, yes. I'll expand as to why but you need to first understand the market we're in: I'd say our clientele is roughly 5% micro businesses (1 or 2 employees), 65% small-to-medium sized businesses (5 to 200) and 30% Government and Enterprise (200+). We're also priced fairly high and our selling point is we're a hosting provider, integrator and (proper) web-development firm, so we instantly turn off most clients just solely looking for hosting on the cheap and nothing else. For most of the micro businesses, we play no role so I don't know what they're doing there (they pick us for reputation). We just host their stuff and we're mostly done with them. For the small-to-medium crowd we almost always project manage their web-development. I'm talking anything from simple sites (&lt;$1000) that we freelance out to our trusted partners, to some of Australia's most trafficked e-commerce sites and national brands with national advertising campaigns to boot (so we need to be ready to sustain millions of hits per minute) and budgets in the ten's of millions. In this market, Wordpress is absolutely despised. A lot of the fast growing businesses do start off with Wordpress and is what they've come to us with and we have to throw it out and start again. Government on the other hand won't ever go near Wordpress even with a 100 foot pole. Trying to integrate Wordpress (truth be told, we've never actually tried - we'd basically have to rewrite the entire thing from scratch which would be pointless) into ERP, CRM and systems such as SAP (very widely used in Australia in big business), Microsoft Dynamics and the loads of warehousing software out there would be a nightmare. I'd probably guess across our bigger clients, they are each managing around 100,000 of stock in their on-line stores. This can't be done with Wordpress and the backend isn't designed for this. Most of the solutions we provide are "Set and forget", meaning ordering, stock and inventory isn't managed by the online CMS, but by their existing systems. A lot of smaller businesses are even moving towards these types of solutions as a lot of businesses are finding having to manage inventory between a site/online store and their retail solutions is impractical and it's quite price attractive these days to provide full integration for anywhere around $5-10k which smaller businesses jump at. Onto Wordpress's actual Content Management, yes, it's rare I that meet someone who likes it. There's no process/review control and one of the most common flows we implement within the CMS's we deploy is editorial control between multiple departments and even companies (Company ABC makes changes to Page XYZ, that is then reviewed by a third-party Copywriter, and any changes require approve from Company ABC management). I'll rephrase my critique. Wordpress is fine if one person is doing everything and has a budget of &lt;$100 (installing plugins, editing content, making changes, etc), but the second you have to introduce a second user, or 100's of users, Wordpress is out the window.
It was the answer to how do do this: &gt; $a = $_GET['a']; &gt; $b = $_GET['b']; &gt; ... &gt; $n = $_GET['n']; You haven't provided an alternative.
It's still there...
"web scale"? What kind of programmer buys a book to help you "web scale". That sounds like a good read for Gartner Magazine-reading managers.
"The main takeaways are to stop using Apache and to start using Postgres." So, replace my web server with a database server? That is sound advice. Thanks. lol
The fact that you hit the page and made them more ad revenue hints at why this page still exists. While I agree, I think you're wasting everyone's time more by even making this a reddit thread. =P You're also generating more ad revenue. I suspect the OP is actually the site owner. =-P
&gt; But Is It Web Scale? ~~The website doesn't appear to be, no.~~ As soon as I post it fixes itself...
Yeah, I just went about refactoring a class that was instantiating other classes inside of it by making a string by concatenating a few variables and the running new $class. So when I was trying to find usages of my class literally nothing turned up. Only reason we knew this class was used was because when I deleted it things broke. Oh, and we can't generate a code coverage report because there aren't any unit tests on that part of the codebase (it's one of the older parts that's never been refactored) 
I think its a great idea!
What is web scale anyway. Given that 99.999999% of the web probably would be lucky to get 1 human visitor a day.
It initially didn't load for me, either. Somehow, it redirected to http://blog/2014/05/14/episode-24-but-is-it-web-scale/ on the first load.
That's what most people forget. Even a successful local online shop with 1000 buyers a day don't need to be scale ready. And even that is rare. 
Also expensive compared to a bit of string. But I wouldn't want to programm with a bit of string.
Posted the following [here on /r/laravel](http://www.reddit.com/r/laravel/comments/25lqkw/october_cms_is_live_verdict/chiha1l) first. I've not yet had a chance to really dive in to the beta, but one thing that really struck me were the ideas of AJAX handlers (which as far as I can tell are really tasks being called via front end AJAX to PHP; and IMO _belong_ on the client side) and mashing a PHP section into a view. A PHP section. That gets converted into a class at runtime anyway. What in God's name...? I hope at worse that's just a simple, beginners way of accomplishing that. But I find it to be a glaring separation of concerns issue regardless. That said, I'm still game to give it a go and see what I think after a proper run through it.
Ok so you lot freaking out about the "is it web scale" reference clearly have not seen this: https://www.youtube.com/watch?v=b2F-DItXtZs We're kidding folks. Judging by the fact I am swaying all over the place and swearing like a pirate, this is clearly not an intensely serious episode, but we do cover some interesting points and that guy had to get TwitPic to work with a shitload of users, so lets stop complaining about those two words and maybe complain about something else.
I have yet to take a closer look, but at first glance there seems to be some serious Weird Shit™ going on in the themes: http://octobercms.com/docs/cms/themes#php-section All templates can have a bit of PHP code **_in_** the template. Mushed between the 'INI'-style extra config shizzle, and before the actual twig template tags. This bit of PHP seems to be parsed in memory using /u/nikic's [PHP-Parser](https://github.com/nikic/PHP-Parser) parser, and then executed. What the...? 
Yes. I'd be interested in PHP internals, and how to make changes and such to the language
As someone else said, the whole password in plaintext thing is poor. 
The install after the initial frustration is very nice and friendly. 
and what about [phpdcd - Dead Code Detector](http://github.com/sebastianbergmann/phpdcd)? it's a static code analyzer, so it might give false positives for methods that only called dynamically, but could be good tool to start with
I might be just being thick, but there doesn't seem to be any content types? If so, that is disappointing and a deal breaker for me. 
Whoever is posting the links does this _every single time_.