This is like a national Do Not Hire Registry
What does YAML do that JSON doesn't?
theres a lot of alternatives to jenkins, then again theres no reason not to use jenkins if you want or need flexibility and are not afraid to deal with the rather complicated configuration ... jenkins is good &amp; stable
Your application should be packaged as a 'library', which you can include with require in Composer. You can then make a scaffolded 'project' which people can run "create-project" in Composer. That way, they create a base project and can add their own entries into composer.json, but still always refer back to your application library. Unfortunately, this takes a little more architecting, because now all of your application code (in the library) must live in the /vendor library. If it is like this already, then great! You have no work to do :). The next step would be to make a simple scaffolding using your library. A very good example is Symfony. They have their framework, which includes all of the components and bridges [located here](https://github.com/symfony/symfony). If you look at the composer.json, you can see it includes all of the dependencies such as Doctrine and all of the Symfony components. This is not usually what you start a Symfony project with, however. You usually use [the Symfony Framework Standard Edition](https://github.com/symfony/symfony-standard). If you look at that composer.json, you will see that it includes the Symfony Framework library, but all of the component dependencies are abstracted away. Also, note that the type is 'project', not 'library'. In order to install Symfony Standard, you just run php composer.phar create-project symfony/framework-standard-edition /path/to/webroot/Symfony 2.4.* And it creates the project for you. After creating the project, the user is free to edit the composer.json file. I hope this helps!
You can do it simpler than you think... Look at the semantic configuration in symfony2 projects. You can use any markup language to define your config data (yml, json, ini etc.) and than define what to parse, what is required, and the types etc.
I have a hard time putting any faith into any document that recommends `filter_var` or `filter_input` for any kind of generic use. It's such a poorly designed API, and conflates filtering with encoding with escaping. There are much better ways... Not to mention that the document talks about "foreign input" as only coming from the user. This is the perfect way to second-order injections. Instead, you should treat everything that's not literally hard-coded in the source code as "foreign input". Even if it comes from your database. And this is why we say "Filter-in", "Escape-Out". Because that's the only way you don't have to trust your database. And you shouldn't trust your database.
Three things: First of all, if you start each line with four space it will be formatted as code. Secondly, you need to split up your stuff. The reason you're getting the extra quotes is that they're... well, in what you wrote, and what you wrote is kinda a clusterfuck. Echoing out such a long string with PHP all through it is horrible. Someone else suggested the heredocs syntax, but I'm not a fan. I don't see why you wouldn't do the following. &lt;div class="submissions"&gt; &lt;div class="quotr-logo"&gt;&lt;h2&gt;Quotr.&lt;/h2&gt;&lt;/div&gt; &lt;div class="top-submit"&gt;&lt;?php echo $_POST['actual-quote']?&gt;&lt;/div&gt; &lt;div class="poster"&gt;&lt;?php echo $_POST['poster']?&gt;&lt;/div&gt; &lt;/div&gt; It's about a million times more readable. Some of what you've done is just... kinda derp. &lt;/h2&gt;. '&lt;/div&gt;' "&lt;div class=\ "top-submit\"&gt;" The spaces, the . concatenation, the quoting... this is an absolute mess. Finally, you should **never** echo out $_POST or $_GET values directly to the browser. What happens if I enter my "actual quote" as `&lt;img src="http://badsite.com/pics/naked-midgets.jpg"&gt;`, or worse `&lt;script src="http://badsite.com/scripts/hackyhacky.js"&gt;`. Never trust user inputs.
I think for storing configuration data, both are fine. They are not as verbose as XML, but offer the additional features that INI lacks. JSON has the advantage of being javascript ready (**J**ava**S**cript **O**bject **N**otation), but for config data I don't see the advantage in it. I personally prefer YAML over JSON because I find it easier to read.
Hi I'm a tech recruiter and you just passed our Advanced PHP Test and I'd like to connect on Linkedin. Do you have a resume I can take a look at? Is there a number I can reach you at? We are hiring for a number of desirable positions in the midwest with companies you have never heard of.
Good article, not php. /?
Most of these are metasploit commits.
 $username = htmlentities(htmlspecialchars(strip_tags($_POST['username'))); Such filter. Much escape. So secure. Wow. But in all seriousness: [a blog I wrote on the subject](http://blog.ircmaxell.com/2011/03/what-is-security-web-application.html)
This is an excellent example of good coding practises. You have used nice short variable names so they don't waste a lot of space, which helps with readability. The use of nested "if" statements like this makes it clear what every step of the process is. I commend you for this work, and would be honoured to have you on my team.
Please don't do this just for typing sake! This is a sign that PHP really needs an improved type system users can opt into. Seeing you use the variadic notation just to get type checking is painful. 
I would like to make one point. The effect that he's talking about is not design damage due to testing. It's design damage due to using a flawed core design. Solid architectures make testing *easy* from the ground up. The fact that he talks about hexagonal architectures is because his base architecture is inherently flawed. Rather than blame his framework. Rather than blame his code. Rather than ask "why", he assumes that the problem is with testing. And sets his sights on proving to the world how horrible unit testing is. This article isn't even worth your time.
Using CircleCI here, a bit cheaper than TravisCI. Honestly don't go the Jenkins route. It's doable, but on the long run you'll spend too much time on this (maintaining it), it's not worth it. I have been maintaining a Jenkins CI server for a year now, and when I consider the time it took me, Travis or CircleCI would have been cheaper than my work-time (salary). Also, Travis or Circle is much prettier, nicer and simpler to use. Have also a look at CodeShip, it seems cheaper too.
Where is $group defined? I don't see it defined in the code you've posted. Your code looks ugly to me. It would be much improved by: * proper indentation * avoid use of short-hand (?:) if syntax when they span more than a single line - in my opinion this short-hand syntax should only be used in the simplest of cases as it quickly gets ugly
A user management system shouldn't be a tutorial, it should be a book. Your best best is to find something solid that's been peer reviewed (open source) and use that. Learning from a 20 minute tutorial is just asking for trouble. Some problems with the linked article from /u/DarKcS (at a 5 min glance): * seems to recommend limiting user passwords in length (why?) * "email code" is predictable * password is being hashed via SHA1 (that's an article by itself.) * dumping exception messages to the screen * [no password reset](http://www.troyhunt.com/2012/05/everything-you-ever-wanted-to-know.html) * no info on how to safely do ["remember me"](http://fishbowl.pastiche.org/2004/01/19/persistent_login_cookie_best_practice/) * doesn't address timing attacks, but the new [Secure Password Hashing API does](https://gist.github.com/nikic/3707231). There's also a pre-5.5 [password_compat library](https://github.com/ircmaxell/password_compat) Again, that was a quick review. A better [option is to use someone else's hard work on user auth](https://cartalyst.com/manual/sentry) or else do a lot of reading. Don't blindly follow a tutorial.
After seeing this, I feel so much better about myself as a php programmer.
This is... not good. 1. You have an SQL query next to a select dropdown. Your concerns desperately need to be separated. Seriously. This is really bad practise. 2. Sweet jesus that's the most unreadable use of a ternary I've ever seen. Never ever do that. There's a place for ternaries, but if they go over one line they make readability go bye bye. 3. `End_Of_HTML` Is... is this a constant? edit: Oh, no, it's heredocs. That's common.. I hate it, but others like it. 4. `if ($punchclock_select_groups == "yes") {` You need to look into booleans. If this is being stored in a DB, making a boolean inappropriate, it's best to be stored as a 0 or 1 tinyint. Using values like "yes" is asking for trouble. 5. Global functions should be avoided. OOP is powerful and useful. You should be using it. 6. how the hell are $select_options going in as option tags, rather than just values? Oh, right, wait, you're passing in the sql to the function doing the job? Why on earth wouldn't you have the sql in select_options? That makes no sense. 7. onchange is not a valid attribute and inline javascript is horrible and has no place in a modern app. Learn to do unobtrusive javascript using event watching. **tl;dr: You're getting the error Undefined variable: group because the variable $group is not defined.**
I know: PDO with prepared statements at least. I'm not a fan of ORM but some people like those and it usually helps writing simple request fast and safely.
Most people using GitHub aren't doing it to distribute their code, but to have a remote git repository. 
The media field is for images, the fact that it's an array makes me think they will one day support multiple images.
I am building such "starter" using slim framework and Sentry, but with ORM included (Eloquent) , It doesn't complete yet, but you may try it https://github.com/xsanisty/SlimStarter
True but it's still public! When i began i just tried around locally. GitHub was only way later... Or that's just me ;) 
I'm a shit PHP wrangler but even I cringe when I see this.
The problem with your approach is that your INI format is non-standard, which of course doesn't matter if you're in a completely isolated environment, but if not then you're asking for trouble. For example, the de facto standard comment character `;` throws an exception. Also, yours seems to lack environment variable support: $ini = parse_ini_string('program_files = ${programfiles}'); echo $ini['program_files']; &gt; C:\Program Files (x86) 
test.php?x=thisdoesntmatter&amp;qp=1thisdoesntmatter&amp;o=1 It'd return 1.
rm -rf /
+1 for public shaming
To be fair a lot of the results seem to be from 'test.php'
But you can ask them to learn xml or JSON or ini or YAML?
What. The. Fuck. Are. You. Doing.
I've used it a lot for the purposes you mentioned as well. Mostly with Phing build scripts... sometimes it's just easier than hacking up Phing modules. But yeah, I'd be pretty nervous to use it based on client input.
Man... that code is about as "object oriented" as a politician is honest... 
UGH!
[TIL](http://www.oxforddictionaries.com/definition/english/practise)
As long as its on a page that could some how make it to deployment then it is still a vulnerability. Just because its on a test file is not going to stop a malicious person from going to http://yourdeploydomain.com/test.php?exec=rm%20-rf.
I think you drastically misunderstood my post and the examples in it.
"No other ACL system that we know of allows this." - We've created a proprietary one ;) Our focus was mainly on generic generation strategies for the acl table and is meanwhile very complex. Nevertheless we've integrated the ability to transparently modify all queries except native ones. Therefore we've modified the persisters. The repo is public available at https://github.com/goalio/doctrine2 Maybe this is helpful for you. 
&gt; You could do a better job of quoted strings and maybe choose a different character to comment lines, but doesn't sound like your users will be escaping quotes or know what it means to escape a quote ... sure you can work it out from here ;) I only meant to illustrate that this isn't actually a problem, you can do it yourself and probably should ...
As long as you don't think that you'll remember everything without trying it, video tuts are great. There's instant feedback if there's a typo, so you're rarely left scratching your head with code that doesn't work because if the instructor makes a mistake he has to fix it immediately. I also used to find it annoying to look from book to PC to book as I read and tried things. I much prefer looking sideways as I watch a video or read a PDF on my screen, right next to the text editor.
I brought in jenkins to our shop and have used it for quite some time. The fact it is open, and plenty of plugins. Pair that with some deployment system(we use capistrano) and it makes things pretty easy. Any CI system will require some management, but I have yet to determine a better one for a multi language shop like we have.
http://imgur.com/NOECI0s
 &lt;?php function isAuthorized() { return isset($_SESSION['authorized']) &amp;&amp; $_SESSION['authorized'] === true; } function authorize() { $_SESSION['authorized'] = true; } function logout() { $_SESSION = array(); } function usernameTaken($username) { $query = query('SELECT * FROM accounts WHERE username = :username', ['username' =&gt; $username]); $result = $query-&gt;execute(); return count($result) &gt; 0; } function validCredentials($username, $password) { $hashedPassword = password_hash($password); $query = query('SELECT * FROM accounts WHERE username = :username AND hashed_password = :password', ['username' =&gt; $username, 'password' =&gt; $hashedPassword]); $result = $query-&gt;execute(); return count($result) &gt; 0; } function insertAccount($username, $password) { $hashedPassword = password_hash($password); $query = query('INSERT INTO accounts (username, hashed_password) VALUES (:username, :hashed_password)', ['username' =&gt; $username, 'hashed_password' =&gt; $hashedPassword]); $result = $query-&gt;execute(); return $result-&gt;rowsAffected &gt; 0; } function login($username, $password) { if (validCredentials($username, $password)) { authorize(); return true; } return false; } function register($username, $password) { if (usernameTaken($username)) { return [false, 'username taken']; } return insertAccount($username, $password); }
The CRAP index on that is too damn high.
Don't let a bad experience with some crazy check out / check in system dissuade you from trying Git. It really is quite simple to use, especially with a user interface like SmartGitHg. 
Unexpected *by the developer*, not by the end user. If *I* don't expect `strpos` to return `int(0)` or `false` depending on input, and I write `if( strpos( 'f00bar', 'foo') == 0 )` (and expect the if statement to go to else) I have written a bug, not the person who wrote `strpos`. As to "error, flaw, failure, or fault" it's only a flaw *subjectively* not objectively, and it's objectively not an error, failure or fault.
Is PDO the industry standard for accessing data in php?
If you run your own Gitlab server, then there is a very nicely integrated companion CI server. https://www.gitlab.com/gitlab-ci/ Been using it for a while now and it was very easy to set up and get going.
Hey thanks! That's interesting, however I'm not sure I understand what you've linked to, this is a fork of Doctrine's repository. Did you add your code inside Doctrine's code (in your fork)?
hahaha `such secure, much filter, so escape, wow! `
nothing wrong with having dependencies on external programs...you just have to be safe about it. wear a condom.
uhm.. dropping the `?&gt;` *is* good practice.
Exactly what I thought. I guess we both have a different understanding of input and output. I believed everything we did on controller layer was input (validation, escaping) and everything we did on view layer (such as echo output) was called output. However, you said this on the article: &gt; Out: I consider it to be anything that leaves the boundary of your application. It means data sent to your database and written to files. So we need to consider database queries as `output`, therefore we need to escape those values? Because they kind of go out of PHP's scope. Then we end up with the rule `Filter input and escape output.`, and by filter we mean common `validation`, and pretty much escape anything else. SQL queries, user provided content being echoed out etc. They're all called output. If that is the case, that makes sense, actually. I hope I didn't understood it wrong.
Assuming you're running Apache, you want to enable mod_rewrite and use rewrite rules. http://www.addedbytes.com/articles/for-beginners/url-rewriting-for-beginners/ If you use Nginx, you there is also tutorials on that. Just look up nginx URL rewriting.
&gt;We've found 99,976 code results That is a lot.... Now let us look at another one: https://github.com/search?q=exec%28%24_REQUEST&amp;type=Code&amp;ref=searchresults &gt;We've found 76,898 code results Why would anyone do this??? I mean come on....
People are going to kill me for using this as an example, but: class ChildClass extends ParentClass { private $childArg; public function __construct($childArg, ...$parentArgs) { parent::construct(...$parentArgs); $this-&gt;childArg = $childArg; } }
It does help, but I don't think this is really an option for me at this stage in development. Thanks though.
I've used it for scripts and in specific instances where PHP needed to launch a background process....but I'd personally never put a variable of any kind in there, let alone one provided via user input.
Needs more loops.
You must not do much client work. It doesn't matter if *I* as the developer intended something to work in a certain way, if it's confusing or generates unexpected behavior in the *clients eyes*, it's a bug that needs fixing, or I don't get paid. I see your point. It's clear when you take it to the ridiculous extreme as you did, but it doesn't sufficiently silence my point, so let's just call this a draw.
That's not a php issue but rather server configuration tweak. If you're running apache, put this in .htaccess file in DocumentRoot directory: RewriteEngine On RewriteRule ^tag/(\w+)$ tag_profile.php?id=$1 [L] This will translate a request www.website.com/tag/funny to www.website.com/tag_profile?id=funny I assumed that the value passed to tag_profile.php is called "id", change it as needed. Also, make sure the module mod_rewrite is loaded and AllowOverride directive for web root directory is set to "all".
Great point. I worry about influential people making statements such as the one DHH has made. It will be read so wrong by so many fans. "DHH says TDD is damaging *therefore I will no longer write tests*". Well no, as I understand it that isn't really what DHH is saying.. but that is what people will THINK he's saying. Perhaps it wont harm the ruby community too much, they already have testing thoroughly ingrained in their community - but it may work against a community such as ours where testing doesn't have quite the foothold and critical mass it needs to be sustained as not only best practice but commonplace practice.
http://i.imgur.com/rd3b0hg.gif
These people hate you, lol.
I suppose it could reveal things like the address of the db you tried connecting to or reveal some underlying structure - but if you are catching an exception you are at that point responsible for what is output to the user - log the exception and print a kind message...
If you have Puppet/bash scripts already and can manage them yourself, then you don't need to use Heroku. Heroku exists for people that don't want to manage the platform themselves. Hence platform as a service. If I don't want to worry about setting up HHVM/Nginx/Capistrano/Composer/etc. and just want to deploy and it works? I use Heroku. It is also very easy to integrate with their addons.
Yes. You *can* use the `mysqli` extension but PDO is the best way.
Postfix notation (e.g. `$o++`) returns the initial value, *then* increments/decrements it. * Line 13: `$o` should be either `2` or `'2'`. * Line 10: `$q` should be either `2` or `'2'`. * Line 9: `$p` should be neither `2` nor `'2'`. * Line 7: `$p` cannot be falsy. * Line 11: `$o . $p` should be `'2'` Lines 7 and 11 conflict, as only `$p = ''` can allow the other requirements to be satisfied. If we leave out line 7, `$o = $q = 2` V `$o = $q = '2'`, `$p = ''` will get us to `shell_exec()`, at which point `$o === 3`.
Can you deploy from a git repo straight away like with Rails? 
Yup. `git push heroku master`.
&gt; But tests is not supposed to drive architecture, brain is supposed to do that. Actually that goes against all of the tenants that we've learned over the years. Because you can think about something all you want, but until you actually write it, you can never know if it will work or not (if it's a good architecture or not). And since unit testing forces you to use the architecture when you write it, you get better tested and more evolved architecture from it. &gt; You can find many different ways on creating a flexible and complete test architecture. Actually, that's sort of the point. You can't. Unit tests are the only kind of test that actually provide positive feedback on designs and architecture (meaning they encourage cleaner, less buggy architectures). Because when tests fail, you know *why* they failed. With other types of tests (integration, system, etc, the types that DHH is pushing for), you don't know any of those things. Seriously, give [this video a watch](http://vimeo.com/80533536). He does a FAR better job at explaining it than I am...
Also, good old `extract($_GET)`. https://github.com/search?q=extract%28%24_GET%29&amp;type=Code&amp;ref=searchresults What could possible go wrong? &lt;?php extract($_GET); if (isset($p)) { require_once("$p.php"); } else { require_once("contenido.php"); } ?&gt;
The damage that has been done by destroying concept of MVC is still not fully accounted for. And now the same person has set his sights on killing TDD. In future you might be a bit more careful in choosing your role-models.
They are just kids
--no-preserve-root
Since I am lazy and, unlike DHH, actually able to use DRY, the same answer would apply: http://www.reddit.com/r/ruby/comments/24adq7/testinduced_design_damage_dhh/ch5irmv
I'm just going to reply to you since you're the top comment and others seem to be in the same vein. This seems like not the place to ask, I don't think people are getting and/or I'm not relating what I'm looking for... because I'm getting off track suggestions. But thank you all for your time and I apologize for wasting it. * Dropbox is a toy as far as querying changes based on date/time and/or subdirectory/file... you'd have to use a browser to traverse 1000 directories of my several gb htdocs - and in a web browser and you'd have no way to pull that out into data you can analyze like csv or whatever... unless dropbox has tools I don't know about. The tool I have now I can traverse a tree with an app or click on a file and generate a report on a date range, see all the files when it's done and export to csv. I wrote php scripts to parse that output into the info I need in the way I need it. * "Is it hard to commit" when changes are meaningful - I archive snapshots of the app I'm working on when I reach milestones. But what I want is a query-able log of my activity much more than an archival system... I already do that separately. Right click and compare is just a bonus. * Reverting - that gets into a long discussion of how I do things vs how you/others do things. I've been doing this since 1996 and my way works great *for me*... and honestly it works fine when I've been in corporate environments as long as there aren't several people working on the same files at the same time. 
No, that's what you want. What you need is Git. 
Couldn't you have used a PHP shell and dumped the files locally?
Couldn't agree more. If you're being paid then you should act like a professional. Use version control like a grown up. And if "I've been doing it this way since 1996" sounds like a legit argument to you, then you're in the wrong field. 
&gt; Seriously, give this video a watch If anyone clicked, got scared by the video length, and didn't watch: please, go back. Watch it. It's really great. 
2leet5u don't hate #yoco
We've been using Atlassian Bamboo (https://www.atlassian.com/software/bamboo) for about a year and we've been pretty happy with it. It's fairly easy to setup and runs across AWS which is nice as well. Looks like it's a bit out of your price range though.
No, and as a beginner PHP dev you'd be unlikely to as well (unless your client is desperate/cheap or, worst, both). There's a LOT more to running a production website that makes little difference to a developer. At work, our senior developer takes care of keeping the production sites up and running, but even he doesn't do it perfectly; we seem to lose a few (&lt; 10) records every time we do a major release. But that's not kosher in a production environment, and I've no idea how we get away with it. There's a mentality known as "devops" that emphasizes redundancy and for your backup plans to have backup plans, so that you never lose anything. There's a lot of other things like logs, nightly scripts, automated traffic reporting, etc. But as I mentioned, knowing most of this won't get you very far with PHP. 
And like everything from Atlassian, it's awesome.
After much reading about frameworks I think I'm going to step away from WordPress for my next application. I am connecting to a few different APIs to sync data and store a lot of user profile stuff in the db. I am hooking into HubSpot, salesforce, a project management system(maybe teamwork), phpbb, Google calendar, gotomeeting, box or some other file utility, as well as creating my own file versioning, and a vendor area(like a marketplace)... I have read some tutorials on user access so far. Now I have to look into db access as well as the templating, and also overall documents on the framework. Do you have a good place for me to start? This would be my first MVC type app... so yeah. Shot in the dark. Just looking for a place to start for some good resources. Most of my research has been done on mobile, but I'm ready to get the ball rolling so I know I have a lot more reading and doing.
Definitely Ghost, or Sculpin
Shameless plug: Been using [Bldr](http://bldr.io) for this too, so I dont need to install NPM/Node
The first and only one I checked was an install script that was designed to run on the command line. So perhaps not as bad as it first looks.
For the `validCredentials` use `password_verify($password, $hash)` . The hash created each time will be different. You should also use `password_needs_rehash` . https://github.com/ircmaxell/password_compat#usage Also see one by Jeremykendall https://github.com/jeremykendall/password-validator 
What, like with [Microsoft Azure](http://azure.microsoft.com/en-us/develop/php/)?
ತಟತ
Very nice and concise tutorial teaching not just OOPs PHP but also a bit about composer, bootstrap and MVC. 
Why on earth would a project modify the composer.json of your library? When you include your package in your project, it ends up in your vendor/ directory. You should (almost) NEVER touch files that live inside vendor/. Either your description of the problem is incorrect, or you're doing things wrong.
Yes you can allow access to types, i.e. a class name, and that will cascade to all the objects of that type. You can also allow access to an object that has sub-objects, like a category that contains articles. To give you an idea in a project we have the "superadmin" role which has access to all "Workspaces" (i.e. the class name). That gives him automatically access to all the workspaces, and all the projects each workspace contains, and all the categories and sub-categories each project contains (~ a 1000 per project) and all the forms and reports and data each category contains. Pretty hardcore, but it works perfectly and fast. &gt; I would rename the method "unGrant" to "deny". I really dislike unGrant, but deny would rather be the opposite of "allow" (which is another method in the class). The unGrant method is rather "remove the role", but it's not denying anything, it's just stripping you some credentials… I'm really looking for a better term.
That's the joke! ;) As if that's all that were needed to improve the code.
I'm just gonna leave this right here. http://12factor.net/
&gt; A language in which variable scope alone is a more of a problem than ALL of PHPs issues combined lol. Only thing wrong with JS and it's variables are implicit globals, which are very very easy to avoid.
&gt;Only thing wrong... You know that someone is completely gone in their head when they talk about something that is 20 years old yet claim that there is only ONE thing wrong with it. There are a ton of structural and design problems in JS just like any other language. If you can't see that, that is only a reflection of how "good" of a programmer you actually are! 
I really hope you are joking? Please? :)
Didn't they have this all along? You can run anything on Heroku that you have a buildpack for.
This is great, really exciting stuff and yet another deployment option for PHP apps to add to your bag. The HHVM support is just icing on the cake.
I was talking about variable scoping. Yeah JS itself has much more than one problem. Still it is much better than PHP.
Yeah, they've been able to run PHP properly on the Cedar stack for ages now if you used a third-party build pack, but they hired a guy recently to take the best of the popular PHP build packs and bring it onto the official platform. Now its officially supported and documented, etc.
&gt;I was talking about variable scoping U cant be serious right? :D Look at how the GC works. Sometimes, variables persist for no god damn reason and create collisions. That is just BAD design. &gt;it is much better than PHP. Not even close... PHP has one of the most retarded function naming conventions EVER. But there is no way in hell that JS comes even close to scratching the surface of PHP.
Part of me is wondering if all this code "just" to interact with Reddit and Twitter API's is a subtle troll. That being said, I'd probably do the same thing.
You could say, re-adds PHP support. Couple years back it actually had a PHP pack. Hell, I even used it as a PHP developer. Surprised to see it back though
&gt; variables persist for no god damn reason If you have your variables defined inside wrong function, then that is just your BAD design, not Brendan Eich's. Ability to use closures are one of the best traits of JS.
&gt;If you have your variables defined inside wrong function Holy shit. Thank you for reminding me that I need to define variables in the right scope. Holy crap, why didn't I think of that?! Ooh wait, maybe I did and the problem is actually in the implementation of the GC compared to any other sane language. I am not complaining about closures, I am complaining about the closure implementation that is in place. That is a big fucking difference. If your function is done executing with no references alive, then things should get garbage collected. But hey... Why would they right? I am sure it is my fault for defining the variable within the scope of the function. &gt;If you have your variables defined inside wrong function, then that is just your BAD design Dumb shit argument.. 
Why would you recommend Sublime? It costs 70$. I agree that it is a neat editor but it's not worth 70$.
It looks like you might be wading into territory where [Embedded Composer](https://github.com/dflydev/dflydev-embedded-composer) could be useful. My project [Sculpin](https://sculpin.io) currently uses this to allow its dependencies to be extended on a project-by-project basis. In my case, Sculpin is distributed as a PHAR so it was super important for me to find a solution to allow for the PHAR to be easily extensible. For all intents and purposes, it works exactly as you have hinted. You maintain two separate vendor directories. Composer needs to be aware of the core vendor directory (in my case I ship the bulk of vendor/ in the PHAR itself) and then maintain the *additions* in a different vendor directory (in my case, I named the additional vendor directory .sculpin instead of vendor). At least one other project that I am aware of is using Embedded Composer. I haven't looked at it in too much detail but the author of [bldr](http://bldr.io/) has been in touch with me about some things recently and only then did I discover that they were using Embedded Composer. It is not entirely straightforward. If you have questions, you can find me in #dflydev on Freenode or you can try to mention me in #composer. You can also take a look at the presentation I gave at Symfony Live 2013 Portland on the topic: [Symfony Live 2013 Portland: Embedded Composer Audio + Slides](http://srcmvn.com/blog/2013/07/09/embedded-composer-video/) You can also see just the slides here (along with the rest of my talks, many of which are Composer related): [Embedded Composer](https://beau.io/talks/2013/05/23/embedded-composer-sflive-portland-2013/).
To be clear, I'm not entirely certain that you can use Embedded Composer outright to solve your problem. It is possible, though. I'd need to know a lot more about your use case and what you are trying to accomplish. However, the core underlying ideas behind what you are suggesting are more or less implemented in Embedded Composer. At the very least, the Embedded Composer presentation should help you better understand what is going on behind the scenes and the source code for Embedded Composer should help you experiment with and build some Composer pieces to get you to your goal. 
That was exactly what I was thinking, and a lot of us came to this conclusion on the HN discussion related to this post: https://news.ycombinator.com/item?id=7666866 When he says that hexagonal architecture or the repository pattern is an example of flawed software design it should be clear to everyone that David is not someone we should take advice from when it comes to software design/architecture. Rails is a good framework for a particular use case, but his (and frankly a lot of people's in the Ruby community) insistence on using it for everything is frankly laughable. As soon as your project increases in complexity, all that opinionated crap becomes a burden, all that tight coupling with Active Record and the magic controllers becomes a huge pain. It's funny that despite all the shit everyone continues to say about PHP, frameworks like Symfony (or even Laravel) are much better designed. 
So, we debated on this a lot. I *love* phpStorm, but it's got a lot of features that can be scary when trying to learn the language. So our requirements were: 1. Not scary 2. Give syntax highlighting, some auto-complete maybe 3. Cross-platform 4. Free-ish We do explain this choice in the class, and offer alternatives, but for the length of the tutorial, we request they use the Sublime trial unless they're super comfortable with something else. This also means when helping 1:1, we don't need to spend any time figuring out their editor either :)
Please, for the love of god, put PHP security section in their. I'm getting sick of reviewing code that is more wide open that jesus's mum. 
Revoke?
We had a long rant (for want of a better word) on security, covering full FIEO (Filter Input, Escape Output). I would like to tighten up some of the output stuff to make sure we always escape though. You are welcome to contribute back yourself — don't just complain, help fix the problem. Especially when you obviously have the skillset! This is open source.
Oh really? I'm glad to see something like this in the making, I was going to do something very similar, just never seem to have the time. I'll add in my thoughts, and I fully agree with the FIEO although some people might not, you can never be sure what you're outputting to so escaping on output is a must. 
Perfect! Thank you! I'm changing the method name while keeping BC (keeping the old one until v2).
This is a great resource - it helped me clean up my database class a little bit. Keep up the great work
Set APC or memcache counter where key is IP address. If there is more than 10 new sessions in 1 minute from same IP adress, block it or force same session id.
Has anyone tried out PHPCI, it looks interesting. http://www.phptesting.org/ I've played with Jenkins before, the setup is very tedious and the interface is horrendous!. With Travis you can be up and running in a few minutes and it has a great UI.
This is news to me. When did the BBC start moving away from their heavily-invested Perl 5 website infrastructure to all this?
IMO it cannot be done by a software. 
Haven't tried it but this might help: http://www.resources.fortunedesign.co.uk/jspack/asp2php.html You could probably script it using Bash or Python if you really don't want to paste in 400+ pages. In the end you'll still have to do some fixes by hand. Copy the example [from here](http://www.w3schools.com/asp/showasp.asp?filename=demo_reqquery2). Check the "Look for &lt;% %&gt; delimiters" checkbox. Notice that most of the code is correct except for the if statement towards the bottom. This is the code that you would have to add count($_GET)&gt;0 or empty($_GET) or some other smarter method of checking the variable. Realistically, they should use a PHP framework and redevelop the site the right way.
You should accept the strings from the TCP socket and parse them. The format depends on the PBX and its configuration, but it typically includes the extension no, phone no, start date/time, end date/time, and call duration. Look up the SimpleSMDR PHP project that works with Mitel devices. It's quite old so you have to modify it to work with modern PHP and MySQL. There's a SimpleCDR project in the works on GitHub that is based on SimpleSMDR.
there are more vulnerable commands. The third result in the search result is a test environment for which the actual project at http://w3af.org/ looks very good. It can also detect more such vulnerability.
Is there a particular aspect you'd be interested in reading more in depth about?
Jesus don't do this. Any "converter" is going to produce shitty (most likely insecure) code. If its a marketing type website pick up a php cms like drupal or wordpress and copy the content of the pages in. If its an application then you're looking at ~6 months from start to finish to convert at best.
This is something I've been toying around with in some of my other projects. I've been asked to do a presentation on it in a local PHP user group. I'd like to get some feed back on the code. Does it seem useful?
Tell me about it, thats been the bane of our existence with this client. Hospitals are fast to collect money from you but impossible to get money from smh.
How was the experience?
I call myself self proclaimed LAMP guru and do not understand the architecture. Can you please explain the design?
Thanks Bradley, I'm doing some more research into it now
To me personally, terrible. http://ihaveabackup.net/2012/09/16/getting-a-php-app-running-on-heroku/
I like to use jQuery [flot](http://www.flotcharts.org/) for quick charts and graphs. 
You will most likely want to use something jQuery on the front-end to time the showing of the image and then hiding it. You could basically load the page knowing what image you need to show along with associated questions and have them in a hidden div while showing the image. Then, after a javascript timer, animate the hiding of the image and showing of the questions div (with the accompanying form, I imagine)
He mentioned that this is for www.bbc.co.uk/programmes. &gt; BBC /programmes aims to ensure that every programme the BBC broadcasts has a permanent, findable web presence.
http://www.freshbooks.com/blog/2013/12/19/when-to-fire-a-client/
I think the most powerfull tool currently is [D3.js](http://d3js.org/ ). I wrote my bachelor thesis on web based visualization of time-oriented data and found it superior to the other tools available.
this sounds like something javascript could solve. .show() a div and then .hide() it after a certain time after button press
Thank you for the link! Looks like i was able to code it in about 30 seconds with that info!
Ah, I see. Thanks for clarifying!
Wow, willing to work on spec... that's a ballsy move. OP, this is a rare thing, I'd take advantage of this.
[ZingChart](http://www.zingchart.com) Various ways to [use data](http://www.zingchart.com/docs/labs/), tons of chart types, and it's fully supported. 
Using jQuery: $(window).load(function(){ $("#quiz_image").delay(30000).hide(); });
How fast did you send your followup email?
5 days after the interview, I also included polished CV. I didn't send it to the actual interviewee, just to the initial HR department. I was interviewed by their engineer.
Rewrite it.
Do you have phone number or something? Btw I was like you for about half of a month ago. Some companies did not phone me, other companies did not receive answer from me, lol. Did they promise you they will give you an answer no matter what?
That might seem a little bit desperate, writing email and calling them But I also noticed one thing while I was there, they were in middle of some project, it seemed like they were over their heads. There was some cursing language, which I dont mind at all, I actually prefer using whatever language I like at a workplace i guess
If they are ignoring you, I'd suggest looking around a bit more. Doesn't hurt to have multiple options to choose from, if they ever get back to you.
&gt; [22:52] &lt;SinceNow&gt; i dont know what to do Apply somewhere else. What else can you possibly do? The ball is in their court.
Great article. Somewhat-related: are there any static analysis tools to help with improving testability, such as by pointing out anti-DI patterns or similar?
Just keep it classic ASP until you can replace it.
I looked again at the actual job posting, in small letters it states that supposed ending date is around 10/May
&gt; Because you can think about something all you want, but until you actually write it, you can never know if it will work or not (if it's a good architecture or not). And since unit testing forces you to use the architecture when you write it, you get better tested and more evolved architecture from it. Sure I don't write the good code from scratch. No one does. I try different ways and options before I feel that I succeeded. Once I feel the code looks clean, its complete and I'd rather not change the majority of it - I'm covering it with tests. I'm stabilizing the code. And I really don't care if those tests are unit or integration. There are pros and cons in both options. What I need to get the code tested. Does TDD helps me in any way? I have 5 years working with Rails, 1 year I'm working with EmberJS. And I know what DHH is saying about clean code. Code should be compact. The less code you write the easier it will be to maintain. TDD does not help to write code less, so it adds unnecessary complexity. So my first priority is a clean working code. Can we drive good architecutres without TDD? &gt; Actually, that's sort of the point. You can't. GitHub is built on Rails. They probably do not do unit testing. So you say that they failed to build a successful product with good architecture and design? Funny. I think you are too concentrated to the theoretical aspect. There are lots of great products with really good architecture that are really well tested with just a few unit tests in them. Just because there is no actual reason how you get your code tested.Test it. That's all. 
No arguing that this is a very impressive tool, but I think with a lot of extra features comes a lot of extra complexity as well. That said, some of those examples they showcase are amazing.
Be honest with, tell them this was your first interview and you would appreciate any feedback as to how you did and what you could improve on. Forget about the asking about an offer, just focus on the feedback. Won't be as pushy and will hopefully be more likely to lead to a response. They may not have completed all the interviews yet and could be waiting to see what comes next, I know when I usually hire i'll look to complete all of them before responding, unless someone directly contacts us asking for a update. If they don't get back to you, be glad as it wouldn't be the type of company you would want to work for anyway!
Have a look at http://php.net/mail for a bit of help. You can set the From address, as well as other arbitrary headers, in your code. Whether or not your current host will accept or pass through the headers that you create is a different story.
It is possible, but the data output by Terapeak requires some fiddling with to parse because of some oddities in the way they format things. It's certainly not that hard, but it's a little harder than it would seem at first glance (Source: I've done this)
ah. when someone writes something terrible and pretends it's good, i thought the joke was too add more bad things to the list and also pretend they're good. but your joke works when in response to leetneko. i'm just slow. my apologies. have a nice day sir!
preaching to the choir. 
Set the `Reply-To` and `From` headers: http://php.net/manual/en/function.mail.php#example-3469 Most sendmail agents and mail clients will respect these headers. However, some might strip out or ignore any headers that don't match the sender's address. There's no way to guarantee this functionality. You can also send email from your Gmail or any other address using [`PHPMailer`](https://github.com/PHPMailer/PHPMailer) http://stackoverflow.com/questions/16048347/send-email-using-gmail-smtp-server-through-php-mailer 
pestering them a little bit lets them know that you're interested and you really want the job.
Sure...and he did that with the follow up email. Admittedly (in my opinion), a phone call would probably have been better. But if they were *really* interested in him, more likely than not he would have heard back by now. A company isn't going to sit there and say to itself "Let's wait a couple weeks and see who calls back and really wants the job!" unless they're cheap (and hoping to capitalize on your desperation) or they're disorganized. Neither of which is overly appealing.
Not going to work.
It took me a while to to figure out what the point of this code base is, even with the Readme. The point isn't the code, it's the tests. More specifically, the coverage. A few things. First, don't chase 100% code coverage. It's impractical and unnecessary. Most people will tell you not to test getters/setters. They're right. Your RequestTest and ResponseTest classes are basically useless. An argument *could* be made for them; I wouldn't make that argument. Second, you shouldn't mock are PHP functions, for the most part. Most PHP functions just operate on data and should be allowed to run. The only PHP functions you might want to mock out are, as you're using in the case, functions that hit third parties and external resources (like the file system or, in the case of cURL, the network). However, I think you're going about this all wrong. The reason to mock out curl is to remove the dependency on the network. The way to do this is to encapsulate the curl calls into a class and/or function, then use a mock of *that* that will return an expected set of good (or bad) data. You'll have a hell of a lot less unnecessary code (all those FunctionRegistry::set calls), and you'll have added a layer of abstraction that just might come in handy later. Also, side note, you don't need to namespace PHP functions. Line 33 of FunctionRegistry: you have \array_key_exists. The \ is unnecessary.
yes..you're right.
&gt; but our programmer decided to leave There's probably a reason for this.
http://www.php.net/manual/en/pdostatement.rowcount.php However: &gt; If the last SQL statement executed by the associated PDOStatement was a SELECT statement, some databases may return the number of rows returned by that statement. However, this behaviour is not guaranteed for all databases and should not be relied on for portable applications.
I use rowCount to get the number of affected rows, but when it comes to SELECT's, there is no guarantee of cross database compatibility, so I don't use it.
If it's possible for you to email via SMTP, possibly though a library like PHPMailer, then that'd do the trick for you. :)
I've heard that calling them helps to get your application pushed ahead.
Thanks for including screenshots of the Git install. I never know which radio buttons to click. The official website's docs aren't any help, as usual. I guess the 3rd choice includes ssh? So that "vagrant ssh" works? I ended up installing cygwin to get "vagrant ssh" to work, but if I could have just clicked the 3rd radio button...
Ending date may 10th? you probably wont hear from them until may 17th or so. They dont decide whether or not you would be a good fit for their team when you interview. They decide who would be the *best* fit for their team after everybody has interviewed.
By the way, I have a blogpost about system function interception: http://go.aopphp.com/blog/2013/08/24/intercepting-execution-of-system-functions-in-php/ For aspect-oriented programming it's a typical task, you just need to define an advice that will be executed when some function is called and perform something like logging. With around advice it's also possible to bypass original function execution because you can return a custom result within your handler. Live demo of system function interception is also available at http://demo.aopphp.com/?showcase=function-interceptor (hosted on GAE with Go! AOP demo) And yes, there aren't evals() in my source code :)
There are a few things people will notice when going to PHP. * A large subset of the Core APIs are procedural and native types are not OO. Poorly designed APIs. The socket / stream API is utter trash with socket API not having been touched or fixed in years, just to serve up and example. * Weak Typing / Type Coercion (== vs ===), sickening * Popular software in PHP are written like shit (phpBB, WordPress, Joomla, Drupal) of course Joomla and Drupal have taken measures, with Joomla having great progress which I greatly appreciate * Version Hell, with a lot of shitty shared host on 5.2 or 5.3 * New Lambdas/Anonymous/Closures require explicit capture and its verbose * No module system, pathetic namespace hack, the "using" directive only works for classes, interfaces, and traits, but NOT functions :/ * Sickening "gets the job done" mentality in community * functions are not first class, unless you use closure-based version * awkward use of isset to check existence of key/value pairs, when array_key_exists also exists but incredibly slow. * verbose typenames used in parameters without any static guarantees, the language is nearly as verbose as Java without any of the static safety * No TCO, stack explosions
What databases are you using that don't support it? The warning is because PDO is an abstraction layer and it's up to the individual drivers to fully support it. To my knowledge, the MySQL, Postgres and SQLite drivers all do, and I would bet MSSQL does too.
I use a mix of MySQL, PostgreSQL, SQLite, ODBC and Oracle. Obviously each are selected based on the current project. The majority would support it, however I don't want to have to rewrite my code to support certain databases just because I took the easy way out and used rowCount, which the manual clearly states is incomplete in this regard.
. a lot of trolls that use every chance they can find to complain about the obvious stuff nobody gives a fuck about. 
I think that's a reasonable interview question. But just for the sake of it, you should come up with different levels of difficulty in your interview. Sometimes the interviewee just needs warm up time, others are just brain dead. How about some FizzBuzz and nth fibonacci calculator? Or how about count the vowels in a string? These should be so easy. 
Here's the thing: Even if they've completed an education in a field of study, it doesn't mean a thing if they're not passionate about it. People who are disinterested aren't going to retain anything useful from their education and certainly won't be useful as developers. If you want to find good people to hire, try finding people that has engaged in programming outside of their education and preferably even before their education in that field began. When I was in the university, I had many classmates which had never before even so much glanced at code. When they graduated, they were just as clueless as they were coming in. As for the question of whether your programming task was unreasonable, no, I don't think it was: function isPalindrome($string) { return $string == strrev($string); }
Check out chartjs.org. Dead simple to use and clean charts. Minimal dependcies too, if any. Another good one is NvD3. Based on D3.
Have some unit tests that assert it's correct and use the method. If you are afraid of every phantom possibility, you won't get anything done. If you have a case where it doesn't work, that would be an interesting problem wherein I would include a count()
Heres my problem... im an above average programmer and I make pretty good money. .. was the interview question OP asked really that relevant to the grand scheme??? Fuck. No.
I tried using Chart.js for a project of mine but found the feature list lacking. Luckily I found [this fork](https://github.com/FVANCOP/ChartNew.js) which adds these features to Chart.js (demos [here](http://www.favomo.be/graphjs/)): &gt;* Title * Subtitle * X Axis Label * Y Axis Label * Unit Label * Y Axis on the right and/or the left * Annotates (content can be configured through "templates") * canvas Border * Legend * Footnote * crossText (you can put a text over the graph at the place of your choice) * graphMin / graphMax
&gt;That said, your function wont work if the string contains spaces or punctuation, since those are both ignored when determining if something is a palindrome - you'd need to strip them first. Naturally. I merely assumed he were after palindromic words, not entire sentences. That said, the solution wouldn't be much harder: function isPalindrome($string) { $string = strtolower(preg_replace('/[^a-zA-Z0-9]/', '', $string)); // strip anything which isn't a letter or a number, then make the string lowercase return $string == strrev($string); } Happy?
If you mean how often is someone going to have to write a palindrome-related function, they you're right it isn't very relevant. But the interviewer was trying to get a better understanding of each applicant's ability to solve logical problems and how they react to such situations. If you have a programmer who can't think critically then he or she probably isn't too good at their job. 
I find that hard to believe. Pallindromes are simplest of programming problems that are given as an exercise in any programming course, even in schools. Even if they didn't know the language, they should have been able to reason about how to solve it. Next time if they aren't able to do something like this, ask them what programming course they had taken and ask them to do it in any programming language they know.
&gt; I interviewed some prospective junior developers yesterday. Both pretty much straight out of uni, with a few months' experience under their belts. This isn't junior-level. This is [entry-level](http://en.wikipedia.org/wiki/Entry_level_job). Juniors should be capable of working without direct supervision. They likely have 2 - 5 years of experience, and understand their domain fairly well. Yes - you expected too much *from these candidates* because they are not the ones you should be looking for if you truly need a junior-level developer.
i hope, you are joking again
There are good advices around here. To call and request feedback, or to call and say that you have more than 3 places that want you but you are interested in this particular place etc. My job is good. I judge by technologies that are used and by payment. Symfony2, Elastica search engine, backbone (and now me and other developer going for marionettejs - fantastic stuff), coding standards. My only sadness is that there is no strong using mysql, developers here does not even remember how to write create table etc. It's kinda bad because if I will not keep all knowledge about databases in my head I will not find better job with better payment in future (but that is questionable, btw. some python guy I know works for huge amount of money and all he knows about db daily use - is how to use couchdb in python)
Was this directed towards me? If so, could you explain?
Skip those two - keep looking.... And no, you didn't expect too much IMHO.
What a stupid answer, please don't answer again! I've got someone on Fiverr.com to do it for me now.. 
I completely disagree. In the real world, your manager will say "here is a problem, I want you to solve it". Given the problem is non-trivial, you will need problem solving skills to solve it. This problem is trivial, in that anyone who has passed their first programming course at university (or has been teaching themselves for a few months) should be able to easily solve it. By solve it I don't mean spit out the exact code, but give a rough description of the steps involved. If you can't solve a problem this simple, you need to go back to learn, practice and hone your skills until you can. I honestly don't know why I am writing this reply. By your dismissive tone I feel that I am just feeding the troll.
I think what OP was trying to learn by asking them how to solve a palindrome is not if they can remember a solution but if they can derive one. When reduced to its essence, programming is just problem solving. While its true that you can just google the answer for the palindrome problem, I am very sure that that trick does not work with every problem that you will encounter in your career. 
He's a troll, just ignore him.
God forbid you have to rewrite some code in the small event of changing the entire database :D
Gå och lägg dig.
Hérę ís áñòthêr pàlïñdrõmê: नवजीवन
Which is why it's a good question... The simplest answer which any developer should be able to get is Nicoon's first answer. But then you can ask them to solve harder scenarios to test their awareness of other concepts.
And yet the interviewees didn't even say they'd google it.
And something which will never be tested for in an interview. It's an interview question, the expectancy is not to produce real-world code, it's to test problem solving skills. I knew that someone would pop up and be all like "but that doesn't work in /this/ language hurdihurhur". It's not meant to. Different languages have their own sets of punctuation and the like, and you're not expected to know those in an interview. That'd be unreasonable.
what happens when your programmers have a problem that they can't solve on google? they need to use the exact same skills they would have needed to figure out the palindrome problem. If they can't do that without using google (once they know what palindrome is), they aren't worth anything
When you asked them to write code, did you make sure to let them know pseudo code was fine? Also how comfortable did you make them feel before presenting the test. Interviewing as junior developer is super intimidating since you're still in the mindset that "I'm not a real programming and this guy is so he'll see right through me". This is my personal experience and what I've gleaned from talking to other junior devs. 
I don't think it's too much, as long as you are flexible on the answer. I asked an even more basic question to entry level interviewees at my company. "How would you go about reversing a string?" If you answered one of the following I'd encourage them to keep expanding but they'd get points and it shows now they think. - I'd google it. - I'd use the built in function. What if you had to write your own? - Loop through the strings characters appending to a new string. - Loop through the strings characters appending to a string builder (this is .NET) What error handling would you do? - Check for a null string before starting. There's many ways t skin the cat and their approach would hint at their level of knowledge. 
Plus one the talk out loud thing. It's the best way to see their thought process as they go along. Just make sure that they are comfortable doing it otherwise you risk getting some false negatives. 
Yeah, you don't want staring blankly as a reaction to a problem, even just because it looks bad to clients: "Can you make the colours flash?" "[blank stare]". 
Just want to point out that reversing the string (strrev) is NOT the proper solution to this. A palindrome is not a perfect mirror of itself. http://en.wikipedia.org/wiki/Palindrome ie. "A man, a plan, a canal: Panama" is a palindrome and would fail using strrev. A slightly better way woujld be to strip out spaces and non-alphabetic characters and then do a comparison.
Indeed, and it was my hope that some bright spark would say "do I count punctuation?" or "is it case sensitive?". But no such luck. The sample that I showed to the second guy did strip out punctuation and spaces, and transformed the string to lowercase, but he didn't seem to be able to explain what those lines of code did. I even left in a "deliberate mistake" in that accented and non-English characters would be stripped by my function. If anyone challenges me on that they're definitely getting a second interview... Honestly even if someone did a straight strrev for comparison I would be happy at this point!
You're hired! Now go get me a coffee.
No specific help, but I remembered seeing this blog post a while back: http://zalas.eu/how-to-store-doctrine-entities-outside-of-a-symfony-bundle/
Sorry, already employed by a large global IT services company :)
**Edit**: I have adjusted the article to include a bit more balance as far as this is concerned. **Edit**: I have revised the Aura code somewhat. Please take another look. :) I probably don't express my intent clearly enough there. It's not that Laravel magically avoids the need to bootstrap the router. It's that the entry-point into defining routes (in laravel) is by use of the Route facade. The only expressed way of "doing" routing is the code I have there. It's not the job of Aura components to do framework stuff. Components should be decoupled. Unfortunately it seems the Aura team have chosen to not cater for a lower entry bar (or more succinct application code) by eschewing the use of any form of Facade. I will adjust the article to be more neutral in this section. Thank you for your feedback. :)
I repeatedly reiterated it's a junior role, we're not looking for someone who knows it all, I'm more interested in problem solving ability. I think next interview I ask the guy how he might go about doing it rather than asking him to show me. I don't want to scare anyone off with this test - it's definitely meant to be about problem solving not remembering function names and argument orders that you can google.
Tbh i do not know if the question is appropriate or not, but i suggest you start to debug your candidates : D if they struggle to solve the palindrome question. Ask them "how would you reverse a string", next "how would you transform a string into lower case", "how would you remove non alphanumeric values from a string" and so on and so on. Maybe at one point they will "get it" if not you can print out a big meme which says "what if i tell you, all you need is right there" and have a good time. If you "debug" them you get more information. And with this information you get you can answer your very own question better then everyone else! (- : i would be very interested in the results you get : D 
Regarding dependency injection. It does happen in the Laravel controllers. This is thanks to the IoC container. I question the quintessential value of dependency injection if none of the class dependencies are directly instantiable. Static classes **can** be good because they **can** be more succinct than using instantiated classes. That is the whole point of the article. It's not a comparison between Aura and Laravel. It's a comparison between code that uses static classes and code that doesn't. I could compare Kohana to CI and the point of the article would be the same.
I found a much better example of the framework-based Aura routing code (here: https://github.com/auraphp/Aura.Framework_Project/blob/master/config/Common.php) I have swapped it for the longer component-based code.
Thanks for the help. That post has cleared up a couple of questions, still not quite what I'm after but it's definately a step in the right direction. Thanks again
Did you miss the part where he/she explained what a palindrome was?
My comment about DI was about the "Aura" (or not-facade) snippet.
I've changed that snippet to being one straight out of the Aura Framework project. :)
Ohh not another pen and paper test. The first thing I respond to interviews like this it's "do you have a paper to opcode converter?". Give them a 2004 laptop with internet access and let them use at least the manual. It exists for a reason. Also I don't agree with the palindrome problem, it makes no sense to be given a smart problem for the shake of cleverness. Give them a real life problem and check for the best implementation. My favourite for a junior dev could be something like, query this database for this. And print them in a specific way. If they can do this, they will probably be able to produce something quite fast.
Yeah, calling a class method or calling an instance method are near as makes no difference. It's the near-use overhead of managing the instance that makes static classes slightly more succinct.
University doesn't turn out developers. AT BEST it turns out people who are *interested* in being developers. That's who I look for in an interview with a recent grad. And I don't call them "Junior", I call them "Entry Level". They have to be smart, they have to pass the "Can I sit next to this guy all day?" test, and they have to be willing to learn. Arrogance is a weed-out sign. Look, at the operational level, a college degree doesn't AT ALL prepare somebody for the reality of sitting at a desk delivering code for eight hours. That takes something that college doesn't train in the slightest. You have to be prepared for them to consume MASSIVE amounts of your time and energy, and not to be productive possibly for months. But some of my best guys came to me that way.
Yeah, the simple fact that they didn't even attempt it is a bit of a red flag but i'm the same as you, had to check google for a string reversal function. Otherwise I was thinking of str_split all the chars out of the string and then checking array reversals against each other but solving this on paper alone would be tricky for me. Of course, i'd have at least tried and failed and at the very least, written the pseudo for it.
I didn't get this, this is just a string reverse, it's not checking if this string is/has a palindrome ... 
Ericsson?
 ===
This is very basic, it might be a good idea to touch on SOLID principles (mainly the Single Responsibility Principle, and Liskov Substitution Principle) and how the concept of Dependency Injection helps to achieve those principles.
I just started a new job and they are using NuSphere. I hate it. It is Windows only. Crashes all the time. You can't run Xdebug at the same time, so I can't set that up without breaking the other developers workflow. :(
...is completely unnecessary here, yes. Please, stop the cargo cult-ing. 
The requirements were to test a string to see if it was a palindrome, not a mixed.
I'm sorry, but do you even know what you're saying? The supplied string is being compared to a reversed form of **itself**. You don't need ===, plain == is fine here. 
False dichotomy much? Code can only be WordPress or well structured (as it applies to the use of static classes). No. That you don't consider it an option doesn't matter much to me. I wanted discussion, and despite your objections, you have discussed. Thanks. :) If you decide you would prefer to use well-reasoned refutation instead of feelings, your considerations might matter more to me.
Yup, that's the *entire* reason we even install git for windows. :)
Heh, I hope this pans out well. 
First, don't use shared hosting ... like, ever ... Second, it doesn't work because eval is not a function and it is by eval that they are able to execute mallicious code. Third, I assume you have done all the sensible things such as protect yourself form injection and other common means of attack ... If you still find yourself vulnerable, then something is still wrong ... while you are finding out what that is ...if you are sensible and don't use a templating system (or any other code) that invokes eval, you may disable eval ... there are probably other ways of doing this ... but here you go ... https://github.com/krakjoe/uneval
haha, palindromes are so much easier than fizbuzz. And its not like fizbuzz is a very high bar. Fibbonacci I would say is a bit more difficult, you can go with the recursion approach, or you can do tail recursion (if you know about it and the language supports it), or a simple loop with counters, plus there are the first 2 numbers as special cases. I think anyone who cant answer this kind of stuff isn't really a programmer, just someone who wanted a degree in a field where its easy to get a good(relatively) job.
@jaitsu Thanks for the comment. I will include SOLID in my upcoming series of posts.
First of all, your JavaScript is throwing out errors. Check your console. That's probably why your $.ajax call is not firing. Furthermore, calling your [contact-process.php](http://celinedesigns.com/contact-process.php) file directly indicates that your config.php could not be included. Warning: include() [function.include]: Failed opening '/home/a3528260/config.php' for inclusion (include_path='.:/usr/lib/php:/usr/local/lib/php') in /home/a3528260/public_html/contact-process.php on line 9 To make your form work without javascript enabled, make sure to change &lt;form id="ajax-contact-form"&gt; to &lt;form id="ajax-contact-form" method="post" action="contact-process.php"&gt; This will submit the form data correctly even with javascript disabled. Make sure to validate the fields server-side using php as well and redirect the user back to contact.html if contact-process.php is not called via $.ajax.
seriously? are people that dependent on a computer for everything? you should absolutely be able to say what the function does without a computer. "strip out non alphabetical characters, convert to lowercase, and then check to see if the string equals the reverse of itself". No computer required. You could then talk about problems with non-English characters. I just don't get it, programmers should be able to design stuff like this, on a whiteboard, in a room with no computers, and with other programmers. You don't actually have to code anything, just talk about how the function should work.
Overhead of managing the instance? You store a single variable, on one class. That's overhead?
I concede; managing a single variable isn't much overhead. But take a look at an example of dependency injection overhead... class AdminController { protected $auth; protected $request; protected $response; public function __construct(Auth $auth, Request $request, Response $response) { $this-&gt;auth = $auth; $this-&gt;request = $request; $this-&gt;response = $response; } public function indexAction() { return $response-&gt;view("admin/index"); } protected function getCurrentUser() { return $this-&gt;auth-&gt;getCurrentUser(); } } class UserAdminController extends AdminController { protected $repository; public function __construct(Auth $auth, Request $request, Response $response, Repository $repository) { parent::__construct($auth, $request, $response); $this-&gt;repository = $repository; } public function saveAction() { $this-&gt;repository-&gt;insert([ "username" =&gt; $this-&gt;request-&gt;get("username"), "added_by" =&gt; $this-&gt;getCurrentUser()-&gt;id ]); return $this-&gt;response-&gt;redirect("dashboard"); } } Now, let's compare this to the same thing with static classes: class AdminController { public function indexAction() { return Response::view("admin/index"); } protected function getCurrentUser() { return Auth::getCurrentUser(); } } class UserAdminController extends AdminController { public function saveAction() { Repository::insert([ "username" =&gt; Request::get("username"), "added_by" =&gt; $this-&gt;getCurrentUser()-&gt;id ]); return Response::redirect("dashboard"); } } That's overhead... 
&gt; even worse in most PHP MVC frameworks service location is at the center of the code architecture. Every time I see something akin to $service-&gt;getService( 'ServiceName' ), I only see something designed by someone who wants to watch the world burn. 
Not really sure how that's relevant. I have no real feelings against the facades, but I see them as nothing more than syntactic sugar. 
/u/followchrisp, man, you're great, but Laravel's so-called facades do not follow the facade pattern you quote: "“A facade is an object that provides a simplified interface to a larger body of code”." Laravel's misnamed facades are better described as proxies, specifically static proxies to service locator instances. The continued misuse of the term really is a problem. "They look like static classes but they’re really just intermediary classes to more traditional class structures." -- They *are in fact* statics. They look like statics because they *are* statics. Aura has not chosen to avoid the facade pattern, properly understood. We have certainly chosen to avoid statics, including the misnamed Laravel facade implementation of static proxies. Finally, regarding "Laravel daring to use the name Facade for anything GoF have not personally approved" -- Taylor screwed up, pure and simple. He is now stubbornly committed to his screwup, and all these justifications for the improper use of the term facade to describe a proxy are post-hoc justifications of that screwup. **EDIT:** "But young developers are presented with Aura (the framework) and Laravel. Which do you think will be easier for them." On this point I agree with what I think you are implying; to wit, that Laravel appeals to younger, less-experienced developers. It's probably fair to say that Aura appeals to more experienced, mature folks. There are fewer of those in the world.
That's a good reason. There are already instances of that kind of thing in Laravel (like DB::connection("foo")-&gt;...) though, so I don't think it's an insurmountable problem even with the use of static classes. They are global in the sense that they are available everywhere. But then that's the point of them. whatever approach you use needs to work with your codebase, but that doesn't make it an all-or-nothing kind of thing...
It's very good, but it's also not free, which limits its adoption (and popularity) somewhat.
I don't know how, but I got a developer job without interviewing. From what I've heard this is standard; it probably shouldn't be. I never went to school, I never studied any of it, I sort of stumbled into it. The company was converting about 200 old flash games to HTML5, and my only qualifications were A) I was willing to work 40 hours for $12,000 a year and B) I built the first game in the series. I've since gotten a pay raise, but I still work for the same company and in the same way. I work from home in total isolation. My only co-worker is MDN. To be honest, I'm scared shitless to loose the job because I don't know what "qualified" means. I know javascript well enough to write a webapp and enough PHP and MYSQL to "make it work" server side, but I really have no what I'm doing. I can't imagine anyone else does though. Even if you graduated top of your class and blah blah blah, javascript has only been popular for ~10 years, PHP as well (95, yes I know, but only standard since the early 00's) I did just solve both your palindrome and anon515's Fibonacci problem in about 2 minutes each (ok probably 4...), but I'd be lying if I said I could to it on paper. Maybe I've grown too accustomed to constantly verifying my steps with echos and logs. With the fear of being exposed as a exec($_GET on the internet, here's my solution (fib problem) AND the process I took to get it. (javascript, vim) Firstly, some ugly HTML &lt;html&gt; &lt;head&gt; &lt;script src='functions.js'&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type='text' id='fibNumber'&gt;&lt;/input&gt; &lt;input type='submit' value='checkit' onclick='calc();'&gt;&lt;/input&gt; &lt;/body&gt; &lt;/html&gt; No problems with that. Then the js. function calc() { var ittNumber = document.getElementById("fibNumber").innerHTML; var fibArr = []; for (var i=0;i&lt;ittNumber;i++) { fibArr.push(i); } } First problem corrected was innerHTML to value. I forgot about inputs. Then I mucked about with trying to push the first value in the loop as 0 if there is no first value. I got frustrated with it and instead decided to assign the first value to the fibArr manually. function calc() { var ittNumber = document.getElementById("fibNumber").value; var fibArr = [1]; for (var i=0;i&lt;ittNumber;i++) { fibArr.push(fibArr[i]+fibArr[i-1]; } } And realized that I should set the first two values instead, with the first being a 0. I also changed the i=0 i&lt;last to i=1 i&lt;=last function calc() { var ittNumber = document.getElementById("fibNumber").value; var fibArr = [0,1]; for (var i=1;i&lt;=ittNumber;i++) { fibArr.push(fibArr[i]+fibArr[i-1]); } console.log(fibArr); } With the fibArr coming in correctly, I did the simple task of adding up the values in the array. var curFib; for (fibNum in fibArr) { curFib += fibArr[fibNum]; } So, it took a few minutes, and I made at least 10 actual mistakes not counting misspellings and syntax. I got nervous just doing it from home though, so I would probably be much worse with the added stress of judgmental eyes. Every time I go to a board like this I always feel like the dumbest person here. I guess the true idiots either don't post or go to r/gifs instead. Shit, I'm sure the first response to this will be someone's 2 line 10,000% better solution, but whatever. My question is, would this be acceptable? If you asked me to do this problem and I blundered my way to this solution, would you tell me to hit the road?
"So technically it might be better to call them something else" They're not technically facades, but for the sake of calling them something I have opted to stick to the same name Laravel uses for them. I am not arguing, for a second, that they conform. They just happen to be the closest to the idea the post is about. :) "Aura has not chosen to avoid the facade pattern" Poor choice of wording on my part. What I mean is that Aura doesn't implement static interfaces for the purpose of simplifying and/or imposing policy. Once again - nothing I said is intended to promote Laravel at the expense of Aura. The examples of routing are just different approaches. Could have given examples of other frameworks without affecting the meaning of the post...
Actually coding something is rarely the point of these tests. They just want to see you think through it. If you sit down at a computer for 15 minutes and then exclaim "its done!", you've probably failed the test. I've been given actual programming tests before and they involved something like "make me a system by which I can store and retrieve phone numbers". That was on a computer, on my time. In an interview, they want to see you reason though it. The problem is trivial and not really that important to the results.
I linked to the wrong thing. What I meant to point out is: "I probably don't express my intent clearly enough there. It's not that Laravel magically avoids the need to bootstrap the router. It's that the entry-point into defining routes (in laravel) is by use of the Route facade. The only expressed way of "doing" routing is the code I have there. It's not the job of Aura components to do framework stuff. Components should be decoupled. Unfortunately it seems the Aura team have chosen to not cater for a lower entry bar (or more succinct application code) by eschewing the use of any form of Facade."
Have you tried using vagrant for development? Then it would be just your VM so you could do whatever you want with it.
"nothing I said is intended to promote Laravel at the expense of Aura" -- dude, I totally get that, and I understand your intended good-will here. :-) "So technically it might be better to call them something else" -- it would be best to call them what they are; that is, proxies. They *are in fact* something else. Using the word "technically" is a hedge; we are supposed to be technical folks. ;-)
"On this point I agree with what I think you are implying; to wit, that Laravel appeals to younger, less-experienced developers." Sort of. [One of the things] I think sets less-experienced developers apart from more experienced folks is their ability to figure out what stuff is doing with less help. Static methods mean less code around the points they are used, which means less noise, which means more help to see what's going on. So, from that point of view, I do think it appeals to younger guys. Heck, the shortcuts in Laravel make for cleaner code IMHO. There are obviously trade-offs with using them as opposed to fully-dependency-injected, instance dependencies. That's what this post explores. It's not an argument against anything. It's exploration of a topic everyone writes off (sometimes just because everyone else writes it off). If anything, I want it to help make developers more sure about why they do the things they do. :)
"we are supposed to be technical folks" feels like we should have been friends sooner. :)
Very nice resource, I'm following the tutorial and learning a lot, however I'm having trouble with the Pretty URLs section. I'm using a pretty much default vagrant machine made with puphpet, and in the 5th step when I remove the config and autoload part because it should be enough being in the index, it doesn't work. When I access it via index.php/add it works but if I go url.dev/add directly, apparently apache loads add.php directly instead of through index.php so it doesn't autoload the classes. I think it's something to do with apache and mod_negotiation and you use the php server I think so you dont have this problem. I've been trying different .htaccess setups but I was never good at those so I'm lost. Can anyone point me in the right direction please? Thanks again for this very nice guide. edit: i've been learning git too so you can check the code too :o https://github.com/josepgv/sugestron
[**@alyssamazzina**](https://twitter.com/alyssamazzina): &gt;[2014-04-30 17:40:21 UTC](https://twitter.com/alyssamazzina/status/461560701471834112) &gt;Most of the fights I have with my husband start with him telling me he already saw that on Reddit. [**@taylorotwell**](https://twitter.com/taylorotwell): &gt;[2014-04-30 17:40:53 UTC](https://twitter.com/taylorotwell/status/461560837615136768) &gt;[@alyssamazzina](https://twitter.com/alyssamazzina) haha… two people who use reddit have nothing to talk about pretty much ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/24gefn%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
:)
Very cool. I added the evals at the end to avoid all the boiler plate coding. but I do like your approach. 
If anyone is interested I put the FunctionRegistry class into its own [repository](https://github.com/chadicus/test-helpers) EDIT: spelling
&gt; That's overhead... The overhead you see is not due to instances, but to the controllers "doing too much" and breaking LSP. Also, you saved 4 lines. At the expense of clarity. At the expense of a API that doesn't lie to you. At the expense of ease of mocking. At the expense of consistency. After all, the first version tells you what it needs to work. Also, this is how I'd write it: class AdminController { public function indexAction(Request $request, Response $response) { return $response-&gt;view("admin/index"); } } class UserAdminController { protected $auth; protected $repository; public function __construct(Auth $auth, Repository $repository) { $this-&gt;repository = $repository; $this-&gt;auth = $auth; } public function saveAction(Request $request, Response $response) { $this-&gt;repository-&gt;insert([ "username" =&gt; $request-&gt;get("username"), "added_by" =&gt; $this-&gt;auth-&gt;getCurrentUser()-&gt;id ]); return $response-&gt;redirect("dashboard"); } } Which to me, is far clearer and cleaner than even your static version. Why? 1. Inheritance trees are respected. In your version, `UserAdminController` has a method `indexAction()`. Which is identical to `AdminController`'s `indexAction()`. Because it's the same method. Which means you have 2 routes, 2 controllers which render the same view and information. Which is either duplication at best, or breaking LSP at worst. 2. `AdminController` has no need for `$auth`, so why does it have it? It's not using it (except in a protected method it never actually calls). 3. `Request` and `Response` are not stateful properties of a controller, they are part of the request (duh). So why are they bound to the lifetime of the request/response? They should be parameters to the route (action). 4. The API tells the truth. When I look at the public API of `AdminController`, I know it doesn't need anything else to do its job. It just uses request and response. Easy peasy. And when I look at `UserAdminController`, it tells me it also needs auth information, and a repository instance. It's telling me "hey, this is saving data, and dealing with the current user's information". Right from the constructor's API. I know what it's doing without looking at the code. Such a novel concept!!! But if I look at yours, it all looks magical. I have no idea what resources `AdminController` or `UserAdminController` use. I have no idea what it may be doing. I need to physically look at every single line of both classes to determine the extent of its responsibilities. Which is a bad place to be. So no, the overhead passing instances may be a few lines of code. But the overhead with statics is cognitive. I'll leave you with a pretty famous quote: &gt; Programs should be written for people to read, and only incidentally for machines to execute. Optimize for reading and comprehension, not writing.
&gt; Crashes all the time. Funny. I've been using it for years and it only crashed twice. Yesterday. After updating to the 13 version. Grabbed the newest build and no crashes so far. &gt; You can't run Xdebug at the same time Hadn't had any problems with running xdebug, maybe we're having a different workflow. Don't judge the IDE having used it only a few days.
Gotcha!
Still a good / relevant article though. While most of /r/php already know these things, not everyone here is aware of them, as evidenced by the recent surge in posts asking for help building or figuring out the simplest of problems.
I don't agree that statics are harder to read than instance properties, or injected method dependencies. $this-&gt;request-&gt;get() is much the same as Request::get() in terms of reading. Much easier to write though. &gt; "Which is either duplication at best, or breaking LSP at worst." It's neither. LSP: "Derived classes must be substitutable for their base classes." You can use UserController in place of AdminController without anything breaking. Perhaps you meant SRP? MVC's not a great basis for the pursuit of SRP, but I'd happy entertain another discussion for that. &gt; "AdminController has no need for $auth" s/Admin/Base/ Perhaps if my example had included 25 controllers, many of whom needed the getCurrentUser() method, then it would have been better. Perhaps those should extent another "base" class. Perhaps. &gt; "Request and Response are not stateful properties of a controller" This reason falls apart when the example has nothing to do with MVC. &gt; "The API tells the truth." Can't remember the last time I went to the constructor to see the dependencies. That is a good reason for dependency injection. But it's not the only reason, and the point isn't really to debase the concept of dependency injection so much as it is to explore the feasibility of statics. I honestly don't think there's anything incomprehensible about the statics example I have there. If you have small classes (sub 30 lines?) then what's the harm in reading the whole class if you are in doubt about the dependencies? What's the harm in documenting the dependencies? I'm not really invested in the idea that all software should immediately be re-written to only use statics. I just don't believe that the whole concept should be thrown out because it's not considered "best practise" and therefore nobody has bothered to find elegant ways of using it. "If anything, I want it to help make developers more sure about why they do the things they do."
&gt; I don't agree that statics are harder to read than instance properties, or injected method dependencies. $this-&gt;request-&gt;get() is much the same as Request::get() in terms of reading. Much easier to write though. When you're reading the individual line of code, you're right. There's not much difference. But when you're looking at the caller: $userController = new UserController($auth, $repository); $userController-&gt;saveAction($request, $response); It's perfectly clear what's happening. The names tell you what's happening, and the variables tell you how it's happening. "Oh, the controller uses that repository instance, let me look there" without even having top open the class definition. Contrast that to: $userController = new UserAdminController(); $userController-&gt;saveAction(); What does `saveAction()` do? Well, you can assume by the name that it saves something. Great! But to know anything else, you need to lookup the class definition. And that's because the API is lieing to you. It's telling you "I don't need anything to do my job". But then when you call it, it goes behind your back to get those things. &gt; This reason falls apart when the example has nothing to do with MVC. Actually, no it doesn't. It realizes that there's a contextual difference between instance dependencies (things the entire object should be stateful about) and method dependnecies. In that case, the controller acts *upon* state, so the state is the method parameter. If it instead you make the entire object stateful, you're opening another can of worms. &gt; Can't remember the last time I went to the constructor to see the dependencies. I can't remember the last time I had to go beyond the documented public API to figure out how to use something that used DI properly. &gt; If you have small classes (sub 30 lines?) then what's the harm in reading the whole class if you are in doubt about the dependencies? The harm is that it's never one small class. It may be 5. Or 10. Or 1000. Using explicit dependencies scales. It scales very high, and very wide. Using statics doesn't. I know, because I'm speaking from personal experience. I used to use statics. I had a 250k+ loc application that was hooked together using nothing but static calls. And it was a house of cards. Changes in one area had far and wide concequences, because nobody really knew the dependency graph. We ultimately refactored to using DI, and while there was still issues, we no longer had the cascading bugs, where one part of the app affected another unknown part. Because we knew, instantly at the time of writing, what parts were going to be affected. &gt; I just don't believe that the whole concept should be thrown out because it's not considered "best practise" and therefore nobody has bothered to find elegant ways of using it. It's not thrown out because it's not considered "best practice". It's thrown out because it's spooky-action-at-a-distance. It's global state and coupling. It's magic. It's hidden dependencies. All of which **will** cause you problems.
"It's not thrown out because it's not considered "best practice". It's thrown out because it's spooky-action-at-a-distance. It's global state and coupling. It's magic. It's hidden dependencies. All of which will cause you problems." I wonder how many developers will become aware of these things as a result of the discussion we've just had. I agree with like 99% of what you're saying. My guess is that the other 1% is stubbornness. Regardless - the intention was to generate discussion, and I thank you for your valuable insights into the matter. :)
&gt; Regardless - the intention was to generate discussion, and I thank you for your valuable insights into the matter. :) Definitely! It never got to ad-hominems. it was just a polite technical discussion. Both sides were slightly over-represented for the point of the discussion, but I think good was achieved. :-D So thanks!!!
https://medium.com/laravel-4/bc06daef0802#3154 ;)
&gt; Every time I go to a board like this I always feel like the dumbest person here. I guess the true idiots either don't post or go to r/gifs instead. Are you familiar with [imposter syndrome](http://en.wikipedia.org/wiki/Imposter_syndrome)? &gt; constantly verifying my steps with echos and logs. This is fine. I would even say good. &gt; If you asked me to do this problem and I blundered my way to this solution, would you tell me to hit the road? You solved the problem, and far more importantly you *tried* to solve the problem. In the face of competition you might not be the best candidate, but if somebody were to can you immediately after this they're either looking for something very specific that isn't you (which they legitimately could be) or their priorities are shot. FWIW, I wasn't tested either, nor do I personally know of anyone that has been (though I've known several that *should* have been...). If you're interested in trying other things but don't know where or how to start, maybe take a look at /r/dailyprogrammer. Now... for (fibNum in fibArr) For arrays, this is not exactly idiomatic. It works because array elements are also considered object properties, but 1) it doesn't distinguish between actual properties and plain elements (in this case, numbers), and 2) it's quite a bit slower than a naive loop. To see #1, try adding something like `fibArr.propTest = 'ohai';` before the loop. A more correct solution would be for (var i = 0; i &lt; fibArr.length; ++i) { curFib += fibArr[i]; } Note that `++i` and `i++` in this case will behave the same, but the former is more semantically accurate. I prefer it, but few people do. An even cleaner but slightly slower solution would be fibArr.forEach(function(item) { curFib += item; }; If you only have to worry about IE9+ compatibility, the cleanest solution is var curFib = fibArr.reduce(function(accu, item) { return accu + item; }, 0);
/r/gifs ***** [^report ^a ^**problem**](http://reddit.com/r/LinkFixerBotSnr) ^| [^delete ^comment](http://www.reddit.com/message/compose?to=LinkFixerBotSnr&amp;subject=Comment%20Deletion%20%28Parent%20Commenter%20Only%29&amp;message=%2Bdelete+ch6whbp) ^| [^source ^code](http://github.com/WinneonSword/LFB) ^| [^contact ^developer](http://reddit.com/user/WinneonSword)
&gt; My favourite for a junior dev could be something like, query this database for this. And print them in a specific way. If they can do this, they will probably be able to produce something quite fast. You can try this afterwards. FizzBuzz isn't to find competent programmers, it's to weed out the no-grammers. The point is that if you can't even do that, you certainly can't query a database. I would consider the palindrome problem of comparable difficulty and with greater opportunity for subsequent expansion.
Cool, I understand your point. My point was also a little bit deeper, in that I don't see the static bit as completely relevant. In Laravel, the facade is the documented entry point to defining routes, but is just syntactic sugar for $app['router']-&gt;any("/", "HomeController@index"), which (in the routes.php file) works the same.
Gotcha! It is just syntactic sugar. 
I removed add.php and I don't get a require error via url.dev/add but I do get it via index.php/add I have also tried disabling mod_negotiation and it behaves the same way. Should I still move on? I feel it's important to get this to work properly edit: i decided to switch to PHP's built-in server to finish the lesson
I would suggest reading this article: http://blog.codinghorror.com/why-cant-programmers-program/ as it's directly related to your question. Second, your test may be a tad unfair for people who don't know the function strrev exists. Still, not knowing that strings can be accessed like arrays is a problem. I would recommend the FizzBuzz problem, or something similar that doesn't necessarily involve knowing certain functions.
and that's why it ~~should have been~~ will now be called NuSphere DBG.
Aha!
If you're going to be pedantic about it, at least be correct. Strings need to be compared with [`strcmp`](http://us3.php.net/strcmp). Any other method is erroneous.
I didn't ever imagine I'd be on Rasmus' side. Or... "Rasmurf" as he is evidently known, here. 
It's one of the only native PHP IDEs (others including Komodo and visual studio with plugins), of which there is a huge speed difference from the Java-based ones like PHPStorm. It scans projects in a fraction of the time, it pops up intellisense without any lag/delay and there is never any input lag in typing. Though the feature set is laughable compared to PHPStorm.
Whoops! lol. Well I like Rasmurf better anyway.
Not too much more complex: function isPalindrome($value) { $value = strtolower(preg_replace("/[^A-Za-z]/", "", $value)); $length = strlen($value); for ($i = 0; $i &lt; $length; $i++) { if ($value[$i] !== $value[--$length]) return false; } return true; }
I read that prior to setting the initial interview up. Very interesting but ultimately all these blogs make the same point - these tests are useless for programmers with experience but at entry level they are useful. I think I'm going to go with FizzBuzz initially at the next interview. And prompt with "ok so how about just a loop that prints the numbers 1 through 100?" and if they're still struggling at that point we are in trouble.
Hmm. I wonder if I could configure PHPStorm to 'execute php script passing the highlighted text as a variable and replace selected text with the results' - use php to edit my php. 
Reading impostor syndrome was a confidence boost, thanks for that. I've always had a hard time gauging ability. The only other programmers I see are the experts, or at least those confident enough to record a tutorial, update a blog or create something of value on github. The internet seems to only show you the absolute best of the world, software and not, so the success scale is already tilted. This said though, everyone was an idiot once. It sometimes makes me sick thinking about how long I went without really knowing what 'this' was. Also, thanks for the tips. I know this is a php post, I guess everyone here would knows the front end too.
Well, your first step should be to smack whoever thought it would be a good idea. You could do something with `array_walk` or `array_walk_recursive`: https://eval.in/145050 **EDIT** I may have misunderstood and skimmed over the part about renaming keys. Your problem sucks and there's not really an easy way to fix it. Honestly, I would avoid trying to "rename the keys" in the serialized arrays. Find some other way to accomplish whatever your end goal is.
Sure it does, try it. isPalindrome("Odd length htgnel ddo") === true
What, I've been using nusphere for ages, you pay for a yearly license, not an individual version license, any version they release during the year that you payed for, you get.
Doesn't PHPStorm also have a yearly license? Still a better choice though...
I somehow fixated on the negative case to the point of forgetting about the positive case. How silly of me.
Regardless of who holds what rights, NuSphere's complaint isn't even related to copyright; product names are under trademark law. It's an obvious sign that someone decided to play lawyer well outside their competency.
That's "Papa Rasmurf" to you.
Well, its more of a "serialized blobs in the code base make the code base harder to manipulate from a high level" The particular case I was running into was we were standardizing our usage of the word 'email'. We had used 'E-mail' and 'e-mail' about 350 times in the code/comments/strings/as keys etc. Fortunately there was only one instance of a serialized blob that I had to change the string length on. But still, it just left a bad taste in my mouth to have serialized blobs in the code *at all*. So... how to fix them quickly. (heck how to even find them is painful enough)
yeah, they're kind of a pain to work with. They have their purpose but your circumstance is definitely not it.
I'd recommend laracasts.com. It's a paid service, but there are plenty of free videos to try before you buy. It is geared towards the Laravel framework, but it covers lots of things useful to general PHP programing.
The only place i've heard of such a tool is in [Joel Spolsky's blog](http://www.joelonsoftware.com/articles/FogBugzIII.html) when talking about [Thistle/Wasabi](http://blog.fogcreek.com/the-origin-of-wasabi/). Unfortunately it's propriatary and from what I recall only converts a subset of ASP to PHP with some ugly ifdef style syntax for handling the stuff not in this subset. Unfortunately i'm going to echo the sentiment of the other posters and suggest that hiring an ASP developer or performing a manual migration is the only way to get out of this hole
Entry level devs should absolutely be able to answer you question, at least *in pseudo code*. How is it possible to get a uni degree and not learn basic algorithmic thought processes? "OK, so we need a string which can be the same forward and backward ignoring all the spaces, punctuation and character case - how do we achieve that."
I got a job as a web developer at a great company last month after having no prior programming education. I spend about 6 years of my life working towards becoming a 3D computer artists only to spend all my free time programming. Once I left University I decided I had to change career direction and spent about 9 months doing a few projects that demonstrated my capability. I then went and got a job. Trying to get a job as a programmer as someone who does it for fun is a lot better than someone who's going to get a job as a programmer because it's what they did in school and don't have the power to change direction. I *love* my job, going to work is *fantastic* and I spend every evening waiting for the next day to come. I guess those with an education aren't guaranteed to be good, and those without an education aren't guaranteed to be bad.
That's what NuSphere does for PhpED too.
We do instructor-lead training at http://phparch.com.
Too bad you're getting downvoted . . . have an upvote!
Don't talk shit, they CC'd Rasmus for his input, that it wasn't favourable is entirely their fault: - They don't have a product named "phpdbg", they have a product named "dbg". - They never asked for permission to utilize the PHP name, probably *because they actually aren't*. - The intellectual property rights of the PHP group are just as important as those of nusphere. We didn't do anything wrong, we chose a name that does not conflict with any other products because our product name is "phpdbg", we contacted group@ and requested permission to use the name, which turned out ultimately pointless because it was requested by Zend chaps that we RFC for inclusion (which obviously means you can bare the name PHP in the product). They contacted us months ago and I gave them the same response, with the same observations, they chose to include Rasmus in the conversation and quite rightly and hopefully finally got told to fuck off. Let's just remember one thing, nusphere are a sizeable company, with easy access to a legal department and lawyers (though I doubt they were acting here), my few friends and I do not have a legal department or lawyers, we don't actually much care what the name of the product is because we don't need to sell anything, but we still managed to do what we were supposed to do ... The only people not doing what they are supposed to be doing is nusphere ... not the authors of phpdbg, and certainly not Rasmus.
You could sign up for Nettuts Premium for a month and just download all of the videos that you think would be relevant to your learning, and then cancel the sub. Keep in mind that some of the videos are pretty dated (though the more general concepts still apply). Once you're done learning the basics, you should move on to a framework. I'd second the recommendation for laracasts for that step.
some games had different variations of the konami code. In TMNT 2 for NES, for example, I had to do the B A part was twice.
Okay I've done that and am getting this error message: Warning: include() [function.include]: Failed opening '/home/a3528260config.php' for inclusion (include_path='.:/usr/lib/php:/usr/local/lib/php') in /home/a3528260/public_html/contact-process.php on line 9 Please enter a valid e-mail address. Please enter your message. It should have at least 15 characters. It seems to have a problem getting the config.php - could you check I'm referencing the files right in my code? They're all in the same root folder. include dirname(dirname(__FILE__)).'config.php'; ini_set("error_reporting", E_ALL); $post = (!empty($_POST)) ? true : false; if($post) { include 'functions.php'; $name = stripslashes($_POST['name']); $email = trim($_POST['email']); $subject = stripslashes($_POST['subject']); $message = stripslashes($_POST['message']); 
This seems to be a common misconception among php newcomers: PHP plays nicely with html, not everything needs to be echoed or printed. Try this: &lt;?php if (!isset($_SESSION["authenticatedUserEmail"])) : ?&gt; &lt;p&gt;You must be logged in to register onto the Weekly Social. Please &lt;a href='login.php'&gt;&lt;b&gt;Login&lt;/b&gt;&lt;/a&gt; or &lt;a href='create_account.php'&gt;&lt;b&gt;Create an Account&lt;/b&gt;&lt;/a&gt; before doing this.&lt;/br&gt; &lt;/br&gt; &lt;?php else: ?&gt; &lt;p&gt;Please enter the following details, if they have changed, so we can add this to the Weekly Social database:&lt;/p&gt;"; &lt;form action='weeklysocial_reg.php' method="POST"&gt; &lt;p&gt;First Name: &lt;input type="text" name="first_name" value="&lt;?=$row['first_name'];?&gt;"&gt;&lt;/p&gt; &lt;p&gt;Last Name: &lt;input type="text" name="last_name" value= "&lt;?=$row['last_name']?&gt;"&gt;&lt;/p&gt; &lt;p&gt;Email: &lt;input type="text" name="email" value="&lt;?=$row['email']?&gt;"&gt;&lt;/p&gt; &lt;input type='submit' name='submit'&gt;&lt;/form&gt;&lt;/br&gt;&lt;/br&gt; &lt;?php endif; ?&gt; 
I would suggest reading about [n-tier architecture](http://blog.ircmaxell.com/2012/08/n-tier-architecture-introduction.html).
Thank you @ircmaxell. I am sorry if I did not make the question clear. I am asking about a single application with multiple interfaces, where each interface has been given a separate database (to make it simpler to manage it), but each interface needs to access each other's models. It is the same codebase. I am thinking of simply hard-coding the database name into the model (well, not really hard-code, because the base model is dynamically generated).
&gt; Laravel appeals to younger, less-experienced developers. It's probably fair to say that Aura appeals to more experienced, mature folks. This is an example of why so many people have a problem with your attitude. This kind of condescending drivel. I'm an experienced developer. I'm also "older" I suppose. Laravel appeals to me more because it is simply more productive to work with. Yes there are elements of the framework which are specifically put in place to shallow out the learning curve - but this is actually a good thing, even for experienced developers. It means you can get on with the business of shipping working software faster. Once you are comfortable with the framework, you can refactor your way out of "easy mode", either partially or in full, with a minimum of effort or fuss and write code that is "as advanced" as anything you could build in Symfony or Aura. So no, it isn't that it appeals specifically to a younger, less-experienced crowd. It is that it is broadly appealing to developers of all levels. Because after all, the most precious thing we have is our time.
Move the code outside of the public html folder. Wordpress supports this, by default it looks one level above your index file or you can define any path. Most of these exploits rely on direct access to the files, and having injected code, putting something like `defined("IN_APP") or die();` will not help since the injected script is now at the top. Ideally index.php is just `require /path/to/stuff.php` but idk if you can move that much with wordpress. This makes me wonder if there's a way to have either PHP or Apache check a file's hash before allowing it to be run. I suppose PHP with `auto_prepend_file` set up to include something non-public could do the trick, so even a tainted index.php file would not be run.
i was merely stating my oppinion, and this is not based on whether or not they use PHP its about someone using "dbg" when there is already a product of the same name doing basicly the same thing for the same community - this is already where i think this is a pissing contest, and the fair thing would be to let the one who used it first continue using it. and i want to point out again: this is subjective, and i am not talking about right or wrong especially not in a legal sense.
But then will it still be in the same loop? I need it to only display when a user is logged into the website. (I would check it now, but I'm not on a machine with the code atm)
It's getting well-panned, now.
&gt;But then will it still be in the same loop? Cant really tell you without seeing the rest of the code. I'm assuming there's more, since $row is not defined anywhere. If you need any help, just reply here, I'll try to have a look at it.
Depending on how many candidates they have to go through, 5 days might not be long enough for them to come to a decision. Initial conversations usually are very prompt - it costs them nothing but a bit of their time to talk to you about a role. Actually deciding to employ someone is something they are likely to be far more careful about. Whilst typically it is good manners to inform unsuccessful applicants that they have been unsuccessful I don't think there are any rules actually requiring them to do so (at least certainly not where I'm from). I'd get more irons in the fire. Interview at other places. 
Their current version is one of the best php IDEs made. Make fun if you like, but it's a quality IDE. Most importantly it is an actual IDE not just an editor.
Exactly and their IDE is awesome.
Why would you have multiple databases? If I understood it correctly, the link /r/ircmaxell posted had one of the examples I was thinking of that would probably be a better fit. [This](http://1.bp.blogspot.com/-qmSXPaZ3kuY/UBc0dbj4FkI/AAAAAAAABDs/oXnEwLnFRfw/s320/4_tier.png) is what I imagine would probably suit your needs.
Fizzbuzz(and similar problems like your palindrome checking) are not intended to judge the programming skill of an applicant. They are intended to judge if the person has ANY programming ability. These aren't tricky problems requiring an expert programmer, they are trivial problems that even a novice programmer should be able to solve in short order. When you dumb it down to help people get through solving such trivial problems, you're missing the whole point which is to sort out the programmers(of any skill level) from those merely claiming to be. All that said, expecting them to do it with a pencil and paper might also be missing the point a bit. When was the last time you wrote code on paper? Asking them to write it on a computer and then watching how they go about it would I think be far more informative than testing their memory having them do it on paper.
It seems to me like you are trying to find any easy all encompassing find and replace...? If so I'd suggest taking a small amount of time to build a script you can run against the codebase and also against the database in order to scan all the blobs and replace them. Since you said you hate this, personally I'd take my time to write a script that would fix what I did not like and turn it into something more managable.
Just because you're accessing and exposing the data in different ways, that doesn't mean they belong in different databases. If for whatever reason you want to use a different DB for each part of your application, the way you store your DB credentials so that different parts of your application can access it has absolutely no bearing on how you design your database / application. The most naive implementation would rely on a set of hardcoded DB credentials for every part of your application, so as long as you don't do that, you can swap in username / password / DB name as needed wherever you connect. Google around for DB credentials best practices if you want some advice on how to handle it - there's no one way to do it.
We have moved several of our JpGraph and GraPHPite graphs to using d3.js; however, we do have one or two graphs that we really need to keep as images (they take a long, long time to generate). This means that JavaScript isn't really a good tool. So while I appreciate all the JavaScript solutions... moving from PHP to JavaScript is not always possible. Anyone know of an updated PHP graphing library?
[Test Driven Development by Example](http://www.amazon.com/gp/aw/d/0321146530?pc_redir=1398713318&amp;robot_redir=1) from Kent Beck
Awesome. I had not heard of this. Thanks!
It's java but the syntax is basically the same and it helps to understand the reasoning behind why TDD works.
I think you'd want to strip the white space before you reverse and compare ;)
I wouldn't even consider someone who needs the word "palindrome" explained to them
As a somewhat noobie myself, looking at the question it seems like he's asking if the php if statement will still work. From the looks of it I'd say yes, I've been working on something similar to this for another project and mine works fine. PHP 5 integrates very nicely! Also, /u/f0ckthesystem, &lt;?=$row[];?&gt; is similar to using &lt;?php print $row[]; ?&gt; That threw me for a loop for a while when I first saw it. (Get it? That was punny!... I'll see myself out...)
I'm fairly sure this was on the test for the 101 class, I kinda wonder what their qualifications were. 
It really isn't a bad IDE in the grand scheme. I prefer phpstorm, but i can understand why some people like phped.
If you mean by "preaching to the choir" that links like this shouldn't be shared because everyone knows it already, I'd contend that 90% of the stuff shared on /r/php shouldn't be.
Yes, Rasmus' response is whitty and has nice logic... But it doesn't actually seem fair or proper.
I like that you used code samples and make the article fun, but the content is a bit misleading. Focus on providing factual and supported information when explaining concepts. &gt; What is dependency injection? It is a simple design pattern to create most decoupled software. It makes your code testable, modular and maintainable. Dependency injection is the actual passing of a component to another component so it is not hidden or obscured. You can't say it's used to create the most decoupled software and you can't say it's the reason your code is testable. There's plenty of code that is testable that doesn't use dependency injection, but what it does allow for is better unit testing since all the dependencies can be easily tested. &gt; When to use Dependency Injection? ... Dependency Injection is most preferable in long term projects. It attracts the best developers to follow your code. DI is most preferable when components have dependencies. The length of a project should not necessarily determine when you use design patterns. Overall, I'm glad you're writing articles to promote design patterns, but try to be as accurate as possible ;-)
Clean coders videos (all of it): http://cleancoders.com/category/fundamentals#videos Destroy all software sceencasts: https://www.destroyallsoftware.com/screencasts/catalog Practical PHP testing patterns section from this list: http://www.giorgiosironi.com/2014/04/the-full-list-of-my-articles-on-dzone.html
I just took a look at Aura because he said it appeals to more experienced developers (which I would consider myself), but it looks way too enterprisey to me. I really don't want to go through that many layers to get something on the screen.
I like The Middle Ground. When picking up a new library or framework I don't want to jump through hoops and instantiate a dozen buried classes just to accomplish what I'm doing. Give me the helper methods, give me statics, just let me get on with my development. If we're concerned about performance, or enterpriseyness, put the helpers in a different namespace or folder, and let me gradually sub them out for "real" objects that expose the advanced functionality when needed. After all, the static helpers are just proxies for the real thing, which I should be able to access directly if I want. When it comes time to test though, it's nice to know I'm not SoL. So hide the complexities, but give me some testing options for when I'm ready. The [Carbon](https://github.com/briannesbitt/Carbon) class sort of does this. You can use it however you like, but then override the "now" time for your tests. You don't have to construct it passing in `time()` every time you want to use it just for that 1% case where you need it to be something else.
It sounds like you may want to over complicate things, are you thinking of perhaps spreading the databases across different servers? Also, are you using an existing PHP framework because if the framework does not support this then that is probably going to be your biggest hurdle to overcome. Nonetheless, what you could perhaps do is to break your interfaces up into sub-domains. For example: www.yourgame.com api.yourgame.com admin.yourgame.com Then you have a config file with your database connection settings per domain name name, e.g. game.config.php, api.config.php and admin.config.php. You can then use $_SERVER['SERVER_NAME'] to determine the subdomain and load the appropriate configuration file. By doing this instead of having one large configuration file for all the different interfaces you can keep your configs simple and lean. The next thing you can do is to have a class that supplies you with access to the correct database interface (A PDO connection or PDO connection wrapper). Lets call it DBProvider, the DBProvider object have a list of all the available databases (thanks to your configuration files) and each of their settings. When your model requires access to a database, it could first ask the provider for the correct db, for example, to get hold of the api database: $api_db = DBProvider-&gt;getConnection('api'); What the DBProvider then do is to check if there is already a connection made to the api database, if not it will instantiate a new PDO connection and return that, otherwise it will simply return the existing PDO connection. This way you will be caching connections for other models that may also require the same connection and you can even use two or more database connections within the same model if required. Please let me know if my explanation doesn't make sense, I had to type this in a hurry so I can explain it better later if needed. 
This isn't TDD, but it's very relevant. I found Taylor otwells book "Laravel from apprentice to artisan" very good (specifically the last 5 chapters that go over each letter of SOLID) 
Cannot recommend Uncle Bob's Clean Code vids enough. He has an interesting / quirky presentation style that I really enjoyed, and the information he gives you will change the way you not only work, but how you think about any given task. 10/10, would Bob again. 
Looking at the WSDL it looks like the input expected is just a single string called Data: &lt;s:element name="Submit"&gt; &lt;s:complexType&gt; &lt;s:sequence&gt; &lt;s:element minOccurs="0" maxOccurs="1" name="Data" type="s:string"/&gt; &lt;/s:sequence&gt; &lt;/s:complexType&gt; &lt;/s:element&gt; So one of the following should work: class Input { public $Data; } $input = new Input(); $input-&gt;Data = "Some input data"; $client-&gt;Submit($input); or $client-&gt;Submit(array("Data"=&gt;"Some input data")); 
Apologies! I was too hasty in skimming through the linked StackOverflow post. Having looked more closely I can't see anything obviously wrong with your code, and i'm no SOAP expert, sorry!
[This one-hour presentation](http://vimeo.com/68375232) has to be the single best, self-contained explanation of automated testing I've seen, but it isn't a how-to. IMO, automated tests serve only two purposes: 1) to make you exercise your API, so that you achieve a good design, and 2) to guard against regressions, so that you can more safely change your code. "[TDD](http://en.wikipedia.org/wiki/Test-driven_development)" is one way to make sure you do this, but religious adherence to the red-green-refactor cycle tends to get in the way of the real goals of automated testing. I personally tend to explore a solution for a while until I feel confident in committing to it, at which point I will build up a test suite and henceforth proceed in a more [T|B]DD-like manner.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Test-driven development**](https://en.wikipedia.org/wiki/Test-driven%20development): [](#sfw) --- &gt;__Test-driven development__ (__TDD__) is a [software development process](https://en.wikipedia.org/wiki/Software_development_process) that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated [test case](https://en.wikipedia.org/wiki/Test_case) that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally [refactors](https://en.wikipedia.org/wiki/Code_refactoring) the new code to acceptable standards. [Kent Beck](https://en.wikipedia.org/wiki/Kent_Beck), who is credited with having developed or 'rediscovered' the technique, stated in 2003 that TDD encourages simple designs and inspires confidence. &gt;==== &gt;[**Image**](https://i.imgur.com/dBXCkGi.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Coding_Shots_Annual_Plan_high_res-5.jpg) --- ^Interesting: [^Acceptance ^test-driven ^development](https://en.wikipedia.org/wiki/Acceptance_test-driven_development) ^| [^Test-Driven ^Development ^by ^Example](https://en.wikipedia.org/wiki/Test-Driven_Development_by_Example) ^| [^Continuous ^test-driven ^development](https://en.wikipedia.org/wiki/Continuous_test-driven_development) ^| [^Mock ^object](https://en.wikipedia.org/wiki/Mock_object) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch7n97z) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch7n97z)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
The first step is to stop using SOAP. The second step is to stop using XML. This will make you a happier person.
Cool, I'll just let all my 3rd party providers know that /u/nikic said they should stop using SOAP and provide different way for integration. I'm sure they'll update their systems straight away.
Maybe this person doesn't have a choice? :P
In the stackoverflow post there's a link to an API spec which I couldn't view on my phone, I guess it's probably from there.
The WSDL should have contained this information imo, but I couldn't find it there. It maybe that the info is located somewhere else, as you say. 
When are you executing the query? Between each one? Because you are overwriting the $query var.
Yeah I agree, it's really going against the whole point of WSDL if they're documenting the data structures elsewhere and just passing them through as strings!
SOAP is just XML with a fancy header at the beginning and a footer at the end to close it. But going back to viewing it - you can print out your XML using the htmlentities function. So if you build the XML into a variable called $xml, you could print it to the browser using: die(print(htmlentities($xml)));
You can debug your requests by enabling trace option on SoapClient: $client = new SoapClient($wsdl, ['trace' =&gt; 1]); And calling: $client-&gt;__getLastRequestHeaders(); $client-&gt;__getLastRequest(); These helped me a lot when working with Soap XML API
Unfortunately it isn't really SOAP unless it's poorly-implemented SOAP.
There are good uses for XML! Of course this isn't one of them...
Just posted a quick response to your SO question recommending http://www.soapui.org/. It's one of the best tools I've seen to consuming SOAP APIs. Have not tried their just released version 5.0 but 4.0 was great! It should help you see what you're sending and what's being returned quickly to help debug your issue.
So much this. SOAP is like sun burn, you can avoid it for a long time, but eventually you get it again. And it sucks. It sucks every time. And its painful. And later your skin peels. Yuk.
This doesn't really sound right. I've only split databases for applications that have a reason. One app I have the application and all application logic in one database and them the other is for data warehousing. So a rdbms and a data warehouse, two different uses.
There's lots of choices, but whilst it's certainly not my favourite to develop on I think I'd have to suggest Drupal for this situation. It's solid, well tested on lots of big sites, good i18n and loads of modules / add-ons. It's also well supported in terms of community and you can easily get freelancers if you need some extra help.
[you're not wrong](http://www.d-oh.gr/wp-content/uploads/2013/03/28273479.jpg)
Take a look at ExpressionEngine and the available plugins for it. http://ellislab.com http://devot-ee.com You can build pretty much anything and make it look like anything. A week may be kinda short timing though...
S3 is meant for this. You'll save money this way. Plus you can easily hook it into the CDN cloudfront. Drawbacks might be around setting http headers in the future if you ever need to modify them
I agree with Felc213 - S3 will be great for hosting static content. S3 should also provide faster delivery to your end users and should allow for easier backup options. Have you thought about hosting those videos on a Pro Vimeo account? Not sure what your service looks like but that might help relieve some of the stress on your server.
[SilverStripe](http://silverstripe.org)
Which porn site do you run?
&gt; I agree with Felc213 - S3 will be great for hosting static content. S3 should also provide faster delivery to your end users and should allow for easier backup options. &gt; &gt; &gt; &gt; Have you thought about hosting those videos on a Pro Vimeo account? Not sure what your service looks like but that might help relieve some of the stress on your server. No, I dont need to get into vimeo or some third-party, though it might look awesome, but since s3 / cloudfront might solve it all, why complicate stuff
god PHP is changing so much that i barely recognize the syntax anymore. drop the $variable dollar signs and I won't recognize it at all.
Its natural evolution. Its a beautiful thing. All in all, the hello world is still: &lt;?php echo 'hello world';
Have you considered looking at CloudFlare? it works as a CDN in front of your site and they have a free tier that would let you check it out and see if it significantly reduces your bandwidth consumption. On my (nowhere near as large as your) sites it is running about 45% reduction in bandwidth overall. Plus it gives you some defense against malicious users/bots and DDOS attacks. They are not too hard to set up, I believe it is mostly just a DNS configuration change to get it running.
~~Why the added ** ? In what use case did ^ fail that ** solves?~~ I take that back. Guess ^ didn't do what I thought it did. Wow. I thought PHP had a exponent operator all this time. Shows how often I actually use exponents...
Go through [PHP's Superglobals](http://www.php.net/manual/en/language.variables.superglobals.php) documentation, it will provide a better understanding of what's defined and how to use them. The official documentation is an amazing place, you just need to know what you're looking for.
Yeah. My bad. I don't use bitwise much, either. Had I would have needed one or the other in recent events, I would have realized PHP don't have a built in operator for exponents.
We use c5 a lot. All the packages we custom built we use zend_db. Pretty simple to integrate. In the more recent versions their caching system has improved quite a lot.
[Craft](http://buildwithcraft.com/) Not free, but hits on all of your requirements. Very friendly for both content admins and developers. It's built on top of Yii.
Yea, that's why it was strange of you to make that comment. :P
As you are not writing about user logins for visitors, forum, calendars etc. I suggest that you take a look at http://textpattern.com/ - I like it a lot, the plugins are the weak spot but it is rather easy to write plugins yourself for what you need. I like the XML-style nesting of all kind of code that gives you absolute control over the layout. It should be no problem to copypaste old HTML / XML code quick and then refactor it.
We used to set an explicit expires time on our images. This worked fine until we reached that point, at which point Cloudfront re-requested those images all the time, and browsers also didn't keep them cached. This is a problem many people have had. The solution is to iterate through all your images and rewrite the expires headers (using max-age!). Most people use boto, but after spending months trying to deal with bugs and inconsistent behavior, we ended up writing a little thing in node that works and was a lot faster: https://github.com/iFixit/head-blaster . No good docs on it yet, sorry. S3 is a storage service. Cloudfront is a CDN. That means that Cloudfront can cache content from other sources (we have a few origins that point to our servers), and it also has edge locations around the world. You can serve things directly out of S3, but it's not going to be as fast.
XML and SOAP. Now there's a blast from the past.
Well that just shoots that idea down.. :( Hmm, check out DreamObjects, its a S3 compatible storage solution, looks like their storage costs are a touch better than Amazon.. Fewer data center locations though, so probably a lower SLA percentage when you come down to it.
You could just use a $5 or $10/month Digital Ocean instance running nginx with Cloudflare in front of it for CDN + DNS, optionally put the static files on Amazon S3 on a subdomain and keep them behind Cloudflare too, but to do that you need your S3 bucket to be named the same as the subdomain, i.e. name your bucket static.yoursite.com. S3 is a much more scaleable long-term solution. Either way, make sure you are setting your headers and caching settings appropriately to reduce unnecessary downloads from your origin server. Whatever you do, make sure you have backups :D
I upvoted but I can see why the downvotes are there. Phptherightway is more of an encyclopedia/reference. It's NOT going to teach someone how to write well architected code, which is what OP is looking for. The stuff phptherightway talks about how to build a solid foundation, but not the house that sits on top of it. So while you're correct in pointing OP there to get started, you're missing context to help orient him.
Congrats :-) well done. 
Man, that really is too bad.
Since so much of the data structures are located outside the WSDL/Xsd I don't think this is am option for OP
I would also recommend Drupal for something like this. But that learning curve compared to a 1 week deadline is going to be difficult.
This is neat and will not be a problem. Use pull CDN where the CDN requests content it does not have and then caches it. 
You are going to have a difficult time deploying any of these systems without prior knowledge. Drupal sounds like what you want, but the learning curve may get you...
First of all I love S3 and use it extensively for many things on a fairly large scale. I'm not sure how much you're paying for hosting, but 800-900gb of usage (assuming out, not in - upload is free to S3) will be around $105.00/mo as as much as $225.00/mo or more if you opt to use CloudFront. As I said, I'm not sure what your budget is or what you're paying now, but while storage is actually pretty cheap with S3, bandwidth can be a bit shocking to some people. If that's fine with you it's an excellent solution. We actually use it for creating editing videos in the "cloud" and it's been very effective. I'll also take this opportunity to remind you that if you are going to use EC2 instances for your services make sure you design them to be scalable and destructable without interruption in services. EC2 is NOT meant to be a single, one-off web host. It's meant to be an instance that works with the features of AWS so that they can auto-scale/heal/repair based on the state of your application. Running a single EC2 instance is effectively setting yourself up for disaster. Though it's not common for them to disappear it's also not unheard of.
Perch is a good choice. It's one of the few CMS systems where you start with a template, and then slot in the CMS versus the other way around. It lets you get up and running really quickly - especially if OP already has an implemented design. 
Actually hello world is just hello world
haha, yea, sort of.... 1. That would be completely true if you only considered PHP to be running in a web context, but PHP's a general purpose language (nowadays anyway) 2. While that [would TECHNICALLY work in the command line][work-command-line] too, as the parser would just think of as text (I actually just found that out when writing this response, kinda weird), there are a few caveats: - it [can't be run with `php -r`][php-r-fail], as its not technically valid PHP syntax - it also [can't be `eval()`'d][eval-fail], for the same reason [work-command-line]: http://imgur.com/6eA7NDL [php-r-fail]: http://imgur.com/uGUuAhi [eval-fail]: http://imgur.com/2AsW8kj
The splat operator is a really nice addition, especially when/if they implement it for inputting named arguments.
I know you were in a rush to post this all over the place, but, I'd suggest looking for a text editor with a column select, in most it's achieved by holding down `alt` while highlighting with the mouse, and in 2 seconds your text looks like this: &gt; i use all the latest hype like vagrant composer and shit &gt; i use git, i test my code &gt; etc etc &gt; but it has been a week since the personal interview &gt; i even wrote a follow up email &gt; the company is small so i guess they might have more applicants than they can handle &gt; but the initial conversation with them was very prompt &gt; so i dont know &gt; they havent responded to the follow up email yet &gt; i dont know what to do It'll also come in handy when programming.
I like working with Laravel. You can use their functions and also go behind the scenes into the lib and read how the simple function works in full form.
Okay thanks, although it's still spitting out errors. Warning: include() [function.include]: Failed opening '/home/a3528260/config.php' for inclusion (include_path='.:/usr/lib/php:/usr/local/lib/php') in /home/a3528260/public_html/contact-process.php on line 9
The have been making their editor for years. This recent dust up with Rasmus is exactly that: recent. Intellisense, code highlighting and file management are done well in their app and form the core of an IDE. I ran their trial instead of being turned off by their website and I've been very impressed with the IDE (though their site sucks).
They obviously have no legal ground to stand on, but let's be frank. They *have* been using the name for a long time for a good faith PHP-related project, and it was a polite (if ignorant) request - not a demand. I imagine if we were talking about "phpunit" or "phpcs" instead of "phpdbg", public opinion would be a little different, too.
Study the manual. You'll understand pretty much everything in core, and at least have an awareness of what's there so next time you need to do something you'll hopefully remember it exists. Then study the docs for SPL and common extensions like mbstring and filter. Learn a lot about regexes - this is useful everywhere but is very relevant in PHP. Study the code of some smaller frameworks like Slim.
This is neat. I would like to receive critical errors by email.
I was under the impression that named splats would be part of 5.6.
I believe he is referring to named parameters such as in obj-c when you can pass parameters in a different order then defined because you label with named keys (kinda like letting you pass an associative array and simply looking at the keys for values)
It's still only proposed I think [the RFC is here](https://wiki.php.net/rfc/named_params)
&gt; I started working at a company where most of the developers left, and some got fired since they were slacking and lacking hard. Yeeeeeah ... it doesn't sound like the devs were the problem.
**No** they haven't been using the name for a long time ... **We complied with the license** by asking to use the name php **because we are using it**, they **have not applied to use the php name** becuase **they are not using it**. **phpdbg and dbg are different words** ...
I found it really stupid that they're not bundled by default... How are you going to get people using them like that?
I've used them a few times. They seem to be hidden away, which is a shame really because there is some good stuff there.
I am not sure why you are getting downvotes on your earlier post. There's no sense in downvoting honest experience. It's good to find an environment to comfort you while developing, which I would argue is a purpose of an IDE. I've been able to get away over the years with Eclipse (PDT), Komodo, and Notepad++. Most recently I just run Sublime with couple packages for PHP, there's a linter and an autocomplete package. I won't be 'that guy' to say I don't need an IDE. But I don't feel it being as useful with dynamically-typed languages. This is just me, but I would like to see an IDE for PHP to help improve a developer's code quality via type hinting, conventions, and some namespace scheming. 
Thank you for this post, I didnt even know PHP had those type of scalar mocking objects. I have wanted to be able to Type Hint primitive types for ages and now I can. I wish PHP was document the SPL properly, its so powerful, but so poorly advertised. 
[Growing Object-Oriented Software, Guided by Tests](http://www.amazon.com/dp/B002TIOYVW/ref=wl_it_dp_o_pC_ttl?_encoding=UTF8&amp;colid=H8DB5XIE3E6S&amp;coliid=I230L2C0HYR5DP) For TDD 2.0
All the files are there, in the same place. What file are you talking about, config or contact-processes? And sorry, I have no idea how to check its permissions - I did not change any permissions if that helps.
This is included: http://www.php.net/manual/en/book.spl.php You're talking about it or this? http://www.php.net/manual/en/book.spl-types.php
Thanks for your comments @motojo. I will look into those to improve as much as I can. Thanks :)
Yes; unfortunately, not all of the basic library takes SPL objects, and there's no convenient conversions. :(
This one http://www.php.net/manual/en/book.spl-types.php 
It seems that the development started back in 2006 http://pecl.php.net/package/SPL_Types Is there anything particularly hard about implementing something like this? I guess some work has to be done to make them work with native operators.
I very much like sublime as an editor. I actually use it for languages other than PHP. Without intelliisense and the ability to do things like right click a function and go to its definition Sublime is just and editor, not an IDE. We are using Zend framework and sometimes the MVC and template layout with partials can get overwhelming even when laid out will. Sublime is awesome, but I love that PHPEd brings me directly to a class just by clicking. It is great for new devs who are focused more on specific tasks than architecture or code organization type tasks or in cases where you have multiple projects with different organizational styles (Zend and non-zend for instance).
Maybe find occurrences with grep, invoke a custom replacer script with xargs?
TDD by Example basically set the pattern for TDD over the last decade or so. It's well written, clear, and makes perfect sense. I'd recommend also reading The RSpec Book (http://www.amazon.co.uk/RSpec-Book-Behaviour-Development-Cucumber-ebook/dp/B00A32NY44/ref=sr_1_1?ie=UTF8&amp;qid=1399120748&amp;sr=8-1&amp;keywords=rspec) for a perspective on some of the newer approaches to testing (examples are in Ruby but like the Beck book you can still get a lot of value).
I wonder what the motivation for this move is? Is there perhaps some other solution to the underlying need that you can suggest instead? 
Drupal is a Proper Grown Up CMS, it can take a while to master. Drupal8 looks pretty exciting too. I'd be tempted to use something tiny like Perch (http://grabaperch.com) just because it's pretty polished. It's not free sadly.
I'm not entirely sure what you're wanting this to do. Could you explain it further please? :)
Respectfully, the SPL is not very powerful and it has an incredible amount of design flaws. The most useful bits of the SPL are Iterators and that's in part because overall Iterators are pretty well designed. The data structures, the exceptions, the types addition... these are all pretty bad. To be clear, I'm not being rude; these things are much harder to get right than most people realize. As such I have started a repository to help work out the design issues of the data structures and exceptions: https://github.com/morrisonlevi/Ardent It's not ready for prime time (still pre 1.0) but several projects are using it with success. It doesn't address type issues (including enums) though. I think you are better off not using SPL Types; it's rarely used and the benefit you gain is pretty small. Additionally, nobody is very familiar with it so you'll have a hard time getting help when you find bugs (and I am quite sure you'll find bugs).
Do you have any idea how many projects are called dbg or have dbg in their name !? They are all infringing upon the IP rights of nusphere !? No, they are definitely not ... They are different words, different names, we are complying with applicable license, if nusphere want to use the name we chose, they would be breaking the terms of the license, not to mention trying to pinch the name we chose. I don't see that they have any grounds for anything, at all.
Hmm, "respectfully" is the new ["with all due respect"]( http://www.urbandictionary.com/define.php?term=with+all+due+respect)
Thank you, /u/aequasi08. Factual (hell, *clinical*) is what I am going for.
Uh, wow that example sentence. Can we not have this bot in this subreddit?
You need to fix the SQL injection, first off. It's a security vulnerability that might not directly affect you for a personal project, but you could still accidentally do something bad to your database if you don't escape variables sent to the DB. Use prepared statements! A UNIQUE constraint will prevent the DB from ever creating duplicate rows, so you can do the INSERT and just check for success. However, if you ever do want to check the existence of something in your DB (especially if you expect the DB to grow quite a bit over time), you're better off doing a `SELECT COUNT(*) FROM ...` rather than selecting the full dataset that you aren't going to use. Better than that is `SELECT COUNT(fieldname)` where maybe `fieldname` is your primary key. Basic code cleanliness and maintainability things: * `$query` and `$query1` are awful variable names. How about `$new_make_query` and `$new_model_query`? * You should use prepared statements, but another good practice is to use single quotes for literal strings and avoid variable interpolation entirely. Interpolated variables can't be wrapped in functions like `htmlentities` so you open yourself up to XSS attacks. Using single quotes and concatenation forces you to think about that.
I recently used MorrisJS with good success. ChartJS is nice, but lacks interactivity. http://www.oesmith.co.uk/morris.js/
It's only happening in one browser for me, strange! Here's the URL that triggered it: http://us3.php.net/manual/en/function.get-headers.php
You need to rephrase ypur question. 
I prefer getting errors logged to a database as well as getting posted to dev chat so that we are immediately aware of them when they occur, rather than at some undetermined point in the future when we happen to check the logs (or when the error email finally decides to arrive).
Yeah I did.
http://www.php.net/ Type any of the following, followed by &lt;enter&gt; * logo * I hate PHP * I love PHP * mirror * rotate * up up down down left right left right b a
We did some form of that, but only for type-hinting. Our IDE couldn’t tell what kind of object the container was returning. We stopped it as soon as we discovered a plugin for it. So as long as it’s a method of the container I think there’s nothing bad with it. If you were to extract it in a controller or any other class, there would be a lot of noise in your code, and none of these methods would be really reusable. And then, is `container-&gt;get('client.address')` more readable than `container-&gt;getClientAddress()`? I don’t think so. Instead of commenting, use better service / parameter names. TL;DR, There’s nothing wrong with it, but I can’t see the real benefit, so I wouldn’t do it.
Just curious: what country and region are you in? Because I'm from Romania and when I finished uni 3 ears ago I considered I know nothing(because of educational system) and actually i knew how to solve a "palindrome" problem since beginning of uni. Just want to have knowledge about educational levels. PS:your requirements are not 'too high', your request was simple, if they can't solve a such simple problem they won't be able to do more complex ones. Real situations are more difficult than this and your test was supposed to evaluate their logic not their PHP skills.
I would store those thumbs either in a db or in their own folder. You create thumbs on current directory but search in another. &gt; $filepath = getcwd().'/'.$thumb; ... &gt; $dir = "/server/www/*.jpg"; Propably would be a good thing to recreate these thumbs once in a while? I would change this: &gt; $ex_cmd = "$command $url " . $filename; to this: &gt; $ex_cmd = $command.' '.$url.' '.$filename; I dont really see why you should be resetting those variables at the end of foreach()
Ardent would be much better off implemented as a C (or C++) extension. For example, using the Vector from Ardent comes with none of the benefits of using a C++ Vector as the Ardent Vector is still just a linked hash map instead of a contiguous block of memory. Other than that, it's a pretty cool project with a nice API.
lol'd at it taking you to Python
I suspect the problem is the format you are passing to date(). m is the numeric representation of the month, not minutes. For that you would use i. You should also use H for hour, since this is 24-hour format rather than 12: date('y-m-d H:i:s'); However, in this case none of this is necessary, since the default behaviour when constructing a DateTime object with no args is to use the current time: $_SESSION['loginTime'] = new DateTime; // ... $diff = $_SESSION['loginTime']-&gt;diff(new DateTime); 
Thank you so much! It worked perfectly! 
If "dbg" is trademarked by NuSphere, then phpdbg would have had to get permission from them to use that mark in its name. I don't know that they own that trademark, mind you. I'm just saying *if they do*, then there's no difference between having to get PHP's permission to use "php" in the name and having to get NuSphere's permission to use "dbg" in the name. A trademark is a trademark is a trademark...
I can get the single words to work (like "mirror"), but I can't seem to get the sentences to work (like "I hate PHP"). What am I doing wrong?
The logic loops through all the top subfolders in the root web folder. If I added a folder for the thumbnails, then that folder would be included in the list. That's why I save them in the root folder, so that they do not show up as a new site in my list of sites/apps.
I'd like to point out that you might be much better off to store a unix timestamp, then simple subtractthat from time()
And this is PHP because...? From the sub rules: "r/php is not a support subreddit". Not that this question has anything to do with PHP anyway. 
There's this thing called Composer you know, you should look into it. It's nifty. Don't want to rain on your parade but where are the tests? 
I had to type "PHP" and "I" in caps to get it to work. 
Ah, my bad, didn't read the sidebar. I figured people here would have relevant knowledge. I'll remove, thanks anyway.
Done, thanks!
That's how I've always handled times; it's just so straightforward. Convert to a display-friendly string afterwards. If you need more accuracy, use microtime().
A class in a conditional sounds like a really bad idea... What makes sense for javascript does not necessarily make sense for php... 
Lol.
Why is this necessary when we already have autoloading, namespacing, and composer?
This design pattern is not needed in PHP. To make this design pattern to work more appropriately you need to forfeit any classes and functions as they clop on namespace and don't respect scope. Instead anonymous functions must be used.
It worked! I thought I did that before, but I supposed I must have mistyped. 
Just wanted to say that somebody who is a community figure like yourself probably shouldn't be making one word comments like this. It reflects poorly on you which then reflects poorly on your work. 
1. Can I provide a measurable return on investment for my employer and our client. End.
Can you recommend one for a guy that has been in PHP/Drupal world forever?
Every layer of abstraction will incur an efficiency cost. It's most likely a good idea, just don't over do it.
It doesn't matter that much, however couple of suggestions would be Javascript (NodeJS) or Python.
I'm seeing that as a huge benefit as well. I do full front end development as well. What would you suggest for a second language? JavaScript seems to be getting more moment as a server language now. I'm not a fan of asp. 
Good point. 
The following aren't questions per-se (as they're pretty much all close-ended questions), but they are things for you to consider about your own skill set. A senior anything developer needs to know more than just a specific language. I would go so far as to argue there's no such thing as a senior *php* developer or a senior *javascript* developer. There's only a *senior developer*. Basically, if you were handed a project and needed to do it from start to finish on your own, could you? **Tools &amp; Scoping** If I gave you a client spec, could you find enough of the holes in it to inform management that their $40,000 bid should really be $120,000? Given a client spec, would you be able to select the appropriate tool for the job? That is, should be it Wordpress? Should it be Drupal? Should it be Joomla? (trick question, it should never be Joomla). Should it be Symfony, or Laravel? Should it be 100% custom? **System Administration &amp; Dev Ops** Could you spool up an appropriate Amazon server? Could you set up a working environment in Vagrant that is easy for another developer to spin up if you needed their help? Could you obtain an SSL cert and get it hooked up? Could you untangle some nasty push into a git repo? **Full Stack** Could you create a responsive, semantically clear HTML front-end? What about javascript? Clean javascript, not some jQuery jungle. Can you manage a MySQL or Postgres DB without help? Going back to tools &amp; scoping, is a relational database even the right solution for project? Should you use a mix of both? Can you cleanly integrate &amp; optimize both? Do you know how to scale relational and non-relational databases? Do you know how to utilize transactions in PHP and set up foreign key constraints and cascades to ensure data integrity? What about apache/ngnix and other server-related things? **Leadership &amp; Teamwork** If you didn't have the time to do anything yourself, could you effectively manage a team of developers to hit milestones and sprint targets? (effectively becoming a low-level PM) How would you do it? How would you best allocate resources to overcome blockers? Can you lead a code review? Would you know how to assign tasks to the right people such that they become better developers as a result of working on this project - that is, pushing them ever so slightly out of their comfort zone, but not so far that it jeopardizes the product or timelines? **PHP-specific** Do you know how to apply software architecture principles and design patterns to solve challenges in the design of the project? Even if that's as silly as the right way to implement a theme in Wordpress? Can you tackle any third party API, REST or otherwise and integrate it into a project? For any libraries and modules you or your team writes, do you know how to write them in such a way that they are reusable in future projects so as to save yourself time, and your company money? Do you know enough of the third party library landscape to know what existing libraries would be helpful? Going back to teamwork, would you be savvy enough to do a quick cost/benefit analysis to know when the learning curve required of your team when using X libraries outweighs the benefit of using them? Basically, is the stuff on http://phptherightway.com second nature to you? Do you know how to write useful unit, functional, and acceptance tests? Are you able to perform triage on your code coverage depending on what your deadlines look like? ------------------------ This is all a pretty tall order, but it gives you a sense of the types of areas you should have proficiency in because if you went in for 10 different interviews, you'll likely face 10 different interviewers who have different priorities for the team they are hiring for. Realistically, a senior PHP developer is NEVER doing just PHP. They are doing a whole host of team support and project scoping and working on everything in the project. A senior development role can be a pretty demanding position. EDIT: Thanks for the gold :D
Sr. developers know how to speak the language of business, protect the business devs from making shit decisions, and guide the juniors in the execution of whatever comes up. Yes, that entails quite a bit. If you're doing both, sup señor. If you're not doing both or either, try talking to a business type, understand their problems and how you might solve them programatically (and rest assured you're not fucking them over with whatever solution you come up with). Then, mentor someone who needs/wants some guidance in whatever you excel in. 
&gt; trick question, it should never be Joomla Amen.
I can do all this stuff and I still don't consider myself senior. The things that make our senior devs senior is domain specific knowledge. They know our platform, have been around for several iterations of design and they triage support tickets because they know who worked on what and can best handle a particular bug. I'm amazed at how much these guys do in our organization. On top of handling and fielding support, they are the go to people for the entire team, and have to handle code reviews, merging, and deployment.
You should be able to give good estimates on time and cost. 
That's not the same use case. RequirePHP is meant to allow you to run your code in any order, receiving requirements as parameters to a function, not define package and versioning requirements of a project. Composer does not provide dependency injection or service location.
Because aside from maybe autoloading, those do not provide dependency injection. Autoloading would only let you define a class once, and does not let you alias a class. Autoloading also does not allow you to load a service, available to anonymous functions.
Correct, it is a dependency injection/service location container that uses a similar API to RequireJS. It is not meant to include your files for you, since we can use the include function for that. To use RequirePHP for dependency injection, you would do something similar to this code: https://gist.github.com/domenic/1274607
Saving this for later
This is only an example. You could also include a file, return an instance, run some arbitrary code, etc.
The reason PHP provides the __autoload() functionality is exactly because the full code is not necessarily available at the start of execution. Correct, you don't load your PHP in script tags, you load it with include calls, which introduces a similar problem.
You could have just blacklisted the thumbs folder
I've heard a lot of horror stories about offshore developers writing shite code. Why does this happen? Is it because they're not being paid enough to give a fuck? Language barrier? Mixture of both?
Yeah. I guess If I was paid that much I wouldn't give much of a fuck either. Which begs the next question. Why do companies keep fucking doing it?
Never used joomla in a live project or production, what is wrong with it? I am not pro or anti joomla, but IMO, joomla *looks* better than wp. BTW, I have been a WP user for the time I can remember. 
Great answer.
IMO this would make the code more complex rather than simpler, because you'd have to do the conversion to hours, mins and seconds manually. You also need to bear in mind that this approach doesn't take into account things like the dates straddling a DST change, leap years/seconds etc. I think it's generally best to use DateTime when doing date arithmetic so you don't get tripped up :)
Rofl
Cause it seems cheap but ends up costing them in the end, I welcome it because it just make seasoned onsite developers look better 
You could also use [DateInterval's format method](http://uk3.php.net/manual/en/dateinterval.format.php): echo $difference-&gt;format('%h:%i:%s');
&gt; Flash People still use this? 
I will suggest Python first and Node second. Node wants you to think in totally different fashion and if you have been doing vanilla PHP all the time it will be hard to pick up. 
Technical lead is just a role/responsibility on the project, not necessarily a skill marker. For me it goes without saying that you should be at a senior level to be an effective tech lead.
From memory, give me the formatting of date() to save in MySql DATETIME. GO!
I know some of that stuff, I think I'm a junior senior.
I used Joomla since it was named Mambo. It's a pain in the ass to upgrade to a new version. The menu/session system is complicated. Sometimes all the menus disapears or there's a nasty bug that drives you crazy and you end up reinstalling everything. Wordpress is simpler and now you can have pages and multiple users. Making no sense to use Joomla. I still use Joomla on a few websites just because they are pretty old and I don't really want to even toutch it since it's still working. It is possible to transfer to WP but...
Ah! I have heard similar stories about Drupal. Never used Drupal or Joomla for a project, just experimented with them. I developed a responsive skin for WP last year using bootstrap. 
Long story short: Never challenge your current way of thinking. /s
I'd like to see a description on what exactly the purpose of this class is, and good use cases for it. Because it looks like a swiss army knife, and I think something more than just a list of functions would be useful
If it makes you feel better I can do all of the stuff above and my job title is Graphic Designer. I make less than $30k a year also. No where to advance and no prospects without relocating which is not an option at this time.
Reading that made me a little sad.
I have 2 children in schools they love, with great friends, a wife with a great job, sure, relocation is not impossible, but for a lot of people it is not an option.
The post above never mentioned being a master, just "can you do these things?" Perhaps you read more in to the post than was intended. I didn't read it as "you have to be a master". And, FWIW, only a handful of sysadmins and DBAs I've worked with are markedly better than I am at this stuff now. I say this not in a bragging sense, but more as a sad state of affairs in the industry (just imo). I've been doing Linux sysadmin stuff since... 2000(?) and can set up and manage enough stuff in the web world to get the jobs done that I need for my clients. I've worked on a handful of teams where I had someone extremely competent to hand stuff off too and it was awesome. I've also worked on some teams where tasking a sysadmin with "I need a system that does XYZ" ended up taking way too long and giving me useless or broken systems that I had to redo everything myself, but also had to fight the political system to justify things. One example - we need a basic web hosting system - centos or ubuntu is fine - which is a copy of system XYZ to do some testing on. In a VPS setting, this would take a few minutes or a couple hours. Physical servers days, maybe a day. This situation is going back about 5 years, but I had a request like that take &gt; 1 week. Actually, no, this happened *twice* on different teams. First case, it took over a week because everything was being compiled by hand with some custom patches because the sysadmin "didn't trust" the base RPMs, and the "custom patches" would "speed things up". Nevermind that we now had a system that didn't match the live system, it was 2% faster on boot and 2.7% faster on disk searching certain partitions. Yay. The other time I had this happen was nearly the same thing, except gentoo. "emerge" took several days to compile everything from scratch (slower network and slow CPUs) and we again ended up with a system that was different from production. I love working with people who are really good at their job - I love to learn from them and also be able to have the team more productive. Unfortunately, in many cases, people are learning on the job, slowly. In fairness, 15-20 years ago, I was learning on the job and slowing things down, but rarely was I ever tasked with something pivotal/crucial to the success of a project in those days.
Seems to be a library like [undescore php](https://github.com/brianhaveri/Underscore.php) but better written. But a good documentation with examples would be appreciated
:-) I didn't mean that. I personally believe that if you need to grow you have to come out of your comfort zone. 
Using an existing logging library would be more appropriate. [Log4PHP](https://logging.apache.org/log4php/) can log your information to a file, database, email, syslog, etc.
At least you can move your feet.
CoffeeScript is cool too. I hear good things about Angular though so if I were learning a new language I'd probably go with Dart.
No, it's Y-m-d H:i:s This is the most logical order, as it's self sorting. And the separators for date and time components are not the same.
And know what to say 'No' too 
I use WP full time. I did try Drupal and Joomla though. Never wrapped my head around Drupal but built 2-3 sites with Joomla. According to me, WP looks and feels way better than Joomla. Joomla admin panel just feels too slow. Editor is not very good as well. With WP, SEO is way easier than Joomla. Joomla has lots of configuration options by default but WP is much simple and easier to learn. 
Half of these seem like a reimplementation of the standard functions? I can understand the usecase for something like a custom apply($closure, $on), because it can work on traversables, while the inbuilt array_map only works on arrays, but is_boolean? equals? is_string? range?
dont stop the beat. 
pointless_fuck was saying you're able to check for common errors that people make in php, and that was accidentally assigning when using if statements. However, even your example could be improved apon. If you write your commands like this: if ($role === 'admin') { // show admin things } Then one day you (for some reason) accidentally write this: if ($role = 'admin') { // show admin things } Then php wont complain, it will take the argument as true, and assign $role as admin. If you write it like this: if ('admin' = $role) { // show admin things } PHP will throw a parse error.
To answer your source control question, go with Git. There are a lot of third-party providers available (Github/Bitbucket/Beanstalk/etc), or you can create your own git server if you have a server and someone with the know-how to get it done. As far as the code is concerned: Are all the the sites contained within a single (albeit perhaps badly-written) framework, or are they all separate installs? If the framework is already in place, it would likely be worth your time to get it under version control and start cleaning it up. If not, it's probably time to start looking for a new framework that you can run all of your websites under. I'm personally a Symfony2 guy, but multiple-site support in S2 kinda sucks. I'd say give Laravel a look.
How did I not see this coming?
In the U.S./U.K., you don't have to have any legal binding documents to have a trademark; IP of any kind is implicitly protected. * U.S.: http://www.uspto.gov/faq/trademarks.jsp#_Toc275426680 * U.K.: http://www.ipo.gov.uk/types/tm/t-about/t-protect/t-protect-unreg.htm Anyway, enough internet lawyering for me. :-) For the record, I don't think you did anything "wrong" either. Any theoretical infringement is obviously unintentional.
the answer is don't use date(). Use $my_date = DateTime::format("Y-m-d hh:mm:ss", $some_date_string);
I could put "Lol" into 100 words if you like, but it would just be padding out the same effect. I usually give fairly wordy and balanced answers: http://www.reddit.com/r/PHP/comments/234shb/pure_php_vs_using_a_framework/cgtymd2 http://www.reddit.com/r/PHP/comments/234shb/pure_php_vs_using_a_framework/cgtqw2u Sometimes I don't feel like going that far. :)
okay - sorry - I didn't learn about them in the "basic" course I took. SORRY. Whatever, that is what I want to learn about. Please don't act agressive towards me, I never said I was good at anything anyway :(
I second Bitbucket. Free for private repositories so it will be a cheaper starting point than Github or Beanstalk. Beanstalk has the advantage of deployment tools built in though. 
If you're still focused on the LAMP stack, then you can use Laravel, a PHP framework (/r/laravel), which has gained lots of popularity recently. If a few of your developers still like the idea of writing everything from scratch, tell them that they can make their own framework by using Symphony components or Aura.PHP components.
Insane. Totally insane. It's scenarios like that taint people. I tell people I can get project X done in 3 months, and they violently disagree with me, because they've generally only seen projects work the way you described. For some reason, projects like yours still get started, funded and sometimes actually launched. Totally insane. If it took me 2 weeks to get someone set up on a system, repeatedly, I'd have been out of a job. Maybe I came of age in the wrong time period. 
It's an example that illustrates perfectly why js concepts cannot 0:0 be applied to PHP, and shows a fundamental misunderstanding of how php is supposed to be used. You can't just port something hope for the best :P Pretty design on your website, and I feel bad that you put so much effort in... Perhaps you can turn it around into something that's more of a DI container, and less emphasis on 'module loading'. 
Let's read some of the other comments on this thread. &gt; There's this thing called Composer you know, you should look into it. It's nifty. How about this one: &gt; someone drank the javascript koolaid a little too much.Cant believe one would want to use that. Seems a little silly to throw your toys out because I said "lol".
There is no easy way I know of. The best way I can think of is find a good MVC framework, go through every file and logically split the code up between view, model, and controller code. You will still basically need to design a full MVC application to handle all the shared code, but at least it can be unified. It will be meticulous no matter how you do it. Where I work, we had a ton of these applications, ranging from simple to complex. They were written by a half dozen programmers over the last 10 years. They were all procedural and none of them shared code. We've been methodically converting these to a unified MVC system for the last 3 years. We've developed a "system" application which handles all the shared code, but allows us to develop standalone applications. Common models, controllers, and views are kept in the system, and app-specific ones are kept in the app's code. It's worked out well, so far, but it's a slow process, especially considering we are only a few programmers, who also have to maintain and develop new apps. Basically our method is, whenever we need to touch old code, we convert it.
It's like being asked the question "Should I use a screwdriver or a hammer for this job?" and replying with "You should use this thing. I don't know what it does or what it's called but it has seventeen buttons"
Titles are often bullshit. I once interviewed a "senior developer" from a major bank. He couldn't understand how to reorder an array of integers from largest to smallest, even in pseudo code. I've worked several places that "senior" was not at all a reflection of the skill set. 
Go and call them assholes too then. :)
The code is bad, but it works. So what can a refactor, as you plan, provide? But please, start using a version control. Either Mercurial or Git. Mercurial is easy to use and very user friendly. But it is not as popular is git. You can try both and go with the one you like. Git will be available by default on most linux hosting providers. You can install Mercurial yourself, (you don't need root access) if the server has python available. You don't even have to make a git/ mercurial server to use these. You can get a free private repo at github or bitbucket. Push the code to github/bitbucket, pull it from your server and update. If you have two terminal windows open, this will all be over in 10 secs max. Edit: Also, I am currently looking for work, so may be, we can help each other..
&gt; Aura.PHP I had not heard of Aura.PHP before, this looks very promising. We could do it chunk by chunk rather than fully switching. Thanks for the tip!
You're welcome! Also one thing I forgot to mention is to use Composer (getcomposer.org) which is a package manager for PHP. It simplifies managing dependencies for your projects.
this should be known by every programmer. Also this time format is not even only used in programming.
Its getting harder since with every new PHP version they are fixing those things.
Was the MVC developed in house or are you using a 3rd party MVC? When you convert old code do you leave the old code in place so that legacy apps can use and create "version 2" or do you go through and convert everything using that code? Thanks!
Apart from a working knowledge of design patterns and other language-agnostic pure-development topics, these are the things that I think separate a "workhorse" engineer from a senior engineer, and these are among the qualifications we seek when promoting to that level at my workplace: * Ability to see the forest through the trees. By this I mean keeping perspective on platform direction, performance and scalability concerns, and making decisions based on maintainability as well as fitness for any given purpose. * Capacity for mentorship. The difference between even a very productive and effective "heads down" engineer and a senior engineer is the ability to grow the skills of the team, to be a person that others perceive as someone to go to for help if they need it, and the ability to balance one's own priorities and the needs of the group as a whole. * Someone else said security. Senior-level engineers should always be thinking about scale, performance, security, and maintainability, and should have a pretty solid grasp of what is required to actually achieve each of those things. A senior engineer should know what the typical attack vectors look like; how to scale systems with different use cases and requirements (caching vs. queuing vs. job distribution vs. some mixture); and why dependency injection, decoupling, and various OOP patterns are useful tools to make systems maintainable. We also look to senior-level engineers to be able to make the call between spending extra time refactoring something to make it "right" and getting a feature out the door in a timely fashion. There are always compromises to be made and making those decisions wisely benefits everyone.
&gt; The code is bad, but it works. So what can a refactor, as you plan, provide? Hmm good question. My primary reason for wanting a refactor is because I spend a large portion of my day fixing bugs that shouldn't exist, and reinventing the wheel. For example, someone puts "Chicago's Number One Car Dealership" in the site's title and it breaks the entire site because the framework doesn't sanitize input. Then when I make the framework sanitize input it breaks 50 other sites because those sites were manually doing "mysql_real_escape_string()" at everywhere. Thank you for the tip about Mercurial, I didn't know it was easier to use/user friendly, I'll check it out!
We use a modified CodeIgniter framework, but that's a whole different story. Heh. Anyway, I can't advise you specifically on one, but it should not be hard to find a good one that suits your needs. You can only leave old code in place in blocks. If the code looks good, you can usually copy it with minimal modification. I usually have to write most of the model code, but I can usually use most of the SQL, for instance. If the HTML is well separated from the other code, it can be almost trivial to move it to a view. Much of the logic and data-juggling that you might do in a controller, can often go in without much hassle. Once you've done it a few times, it becomes pretty easy to see where each block of code goes and what you need to do to get it to play nice.
I don't think it is a bad thing to take a utility "belt" and have it implemented across many languages. This is underscore's API essentially. Standardizing these utility functions everywhere makes sense in that everyone who has seen the functions in one language, know what they're doing and how they're used immediately. 
You have all of the skills of a senior developer and you're making less than 30k? That's painful to read. Seriously, if you really have that much experience, why not consider work from home? If a senior developer told me they'd work for 30k I'd weep tears of joy.
If this was how he was doing things I wouldn't call him talented. I'd call him ignorant, unprofessional, arrogant, and stupid. Basically, you're either going to need to sleep at your keyboard 4 hours a night for quite a while, or you're going to need to hire extra manpower. Your employer needs to be made aware of this due to the security concerns. This is *especially* important if any of those sites handle payment information since this may blow back on you if sites start getting hacked.
Once in a while you find a senior who is only senior because they were part of the organization from its early days. They don't have 10 years of experience, they have one year of experience 10 times. Watch out for those, and don't get caught in that trap. When they leave the company, take time to really, really reflect on what they installed into company culture and decide for yourself how to move on.
No! That's a perfectly reasonable test. (If anything it's too easy.) Assuming you made reasonable attempts to get them talking, I would just keep looking. It boggles my mind that a uni-educated programmer would be unable to even attempt that problem. Question though: is this really relevant to the domain they'll be working in? My job involves a lot of 3rd party API interaction, using workers/async/offline etc, and my interview reflected that. There were a few algorithm-y questions but the bulk of it (~4-5 hours!) was about designing systems that don't break when 3rd party dependencies fail. They respected me enough not to waste time on bullshit brainteasers, and I respected their focus on **real** problems.
Took the words right out my mouth. :) 
...that is quite piss easy task that i am confident even a noob like me could have figured out in a few mins. Hire me :)
Thankfully, there is literally 0 sensitive data on these sites.
Wait. Yoda expressions have a function? I have to rethink my life.
Find a remote job? Gotta be one out there somewhere.
Didn't get you..
Weak typing. How would you answer?
I'm actually planning on redesigning my framework with this concept to be rid of the System 5 style script loading that it currently uses: https://github.com/sciactive/2be-packages I understand why you feel that this shouldn't be used, because it's not like what PHP was meant to be, but I'd like to roll with it and see just how far I can take this idea. Facebook does something similar to this in their code, except that they don't use closures. When I worked there, I realized how poorly using old Unix techniques in a framework works for maintainability. I'm about to design a new site using 2be, so getting rid of the weaknesses of it is my main goal right now.
My goal is not to create a super popular library. My goal is to make something that works for my use case, which I believe I have. I made it open source, gave it a website, and submitted it here, because I like to give back to the open source community. If someone else likes it enough, they can make it installable through Composer and write some tests. As for now, I'll just continue to use it on my own, and see if it picks up steam elsewhere.
One item that I haven't seen anyone list, but is on my wishlist for pretty much any senior developer is an understanding of regulations and compliance standards (HIPPA, CAN-SPAM, PCI) and how they effect the development process, resources needed to be in compliance, ability to explain these regulations to upper management and clients, and the backbone to be able to go into a meeting with a client and explain to them why a feature they want cannot be implemented because it is either unethical or in violation of one of the aforementioned standards. I've run up against too many clients who've requested features that, although they can be done, should not be done -- either because the feature is unethical or more importantly because the request is illegal. And it seems like it's an uphill battle since sales and management seem only too eager to please the customer and no one wants to spend money bringing in a lawyer to smack everyone upside the head.
Awesome thanks, I'm learning Python at the moment after coding PHP for a good few years.
My SO's parents are in their late 80s, live on their own and a few blocks away. She (SO) was an oops baby when they were their 50s. She and I have an agreement that we stay here for them. Here being in the middle of nowhere. Which happens to be a decent place for our kids to grow up, so here we stay until either the kids all turn 18 or her parents pass. Either way I'm not looking forward to it. ;) EDIT: I do make about $15k a year doing freelance work right now. I make less than $30k from my 9-5. Still have never broke the $50K mark. The only down side is I work about 60 hours a week and do not seem to have time to do much else but work and sleep. I lot of that time is spent hustling to get the projects. No real payout there unless they bite. I do mostly small business websites, but I need to do a *big* project to be able to point at to a prospective employer and say, "here, see I'm qualified." Having a paycheck to count upon is a major deal when supporting a family. The plus side is with the projects I am able to decline work when I want though. I also have 3 weeks paid vacation to take from the 9-5. I am looking forward to that if I can ever take it. 
That raises another very good point. A senior developer needs to be highly personable and posses mentor like qualities. It's just as import for them to be able to convey clearly and concisely a problem in non-technical terms to a layperson as it is for them to be able to talk through a problem with a co-developer. Being a Senior developer is as much about project management as it is about writing code.
&gt; For the last two years a young (18) and talented guy was their only programmer. "Talent" and discipline are not the same, unfortunately. A talented programmer might be able to make "clever" solutions to problems, but unless it's maintainable and secure then it's... well.. complete shit. These two things are, in my opinion, the unwritten requirement. Everything should 1. fill the requirement, 2. be maintainable, and 3. be secure. Code that doesn't fill the last two requirements cannot be said to "work" in any capacity. &gt; We expect to launch ~100 sites this year, and I'm spending 40-60 hours a week just pumping out websites in this terribad system. **STOP IT** Seriously. Stop doing it. You cannot hope to fix this mess while making more mess. You need to stop and think about what your job actually is. Your job is not to shit out sites, but to create a system. &gt; The biggest stipulation is that at no point can you just stop pumping out websites for a significant amount of time. This is, in my opinion, a showstopper. The notion that you can't stop making problems in order to fix them is asinine. Imagine your company is a kitchen. You look around and there is rotting food in fridges, cockroaches and rats everywhere, all the knives are blunt and dirty and there's a weird smell. Now imagine being told that you can clean, but that it's not possible to stop cooking while you clean. You actually NEED to stop cooking, because you're making bad food, because you might make someone very very sick. Every one of the sites you have out there is a risk of being hacked, is a risk of being compromised, and consequently compromising all the others. Every site is a compounding maintenance problem, potentially a *legal* problem. This is not your company's problem. They just want sites. They don't know or care about all of these issues. You need to make them care. If you can't make them stop entirely with this "pumping out" process, you need to at the very least make them go to a bare minimum of speed, so you can maximise your time improving the system. As for what I would do... I'd use Laravel, and I'd build a single multi-tenanted application with a single, central codebase. I'd find the commonality between the sites and I'd focus on that as the base functionality. With "exceptions" in terms of behaviour I would strive to minimise them, while building that functionality as configurable options into the core. Where possible I would avoid variations. Where functionality requirements contradict the core I would strongly recommend against doing it at all, to the point of saying no, this simply isn't possible. The amount of "push back" you are going to be able to give is going to depend on your relationship with your bosses, etc. But if you can build a system that is awesome for 98% of people, or a system that is a bit shit and broken for 100% of people, I'd pick the first one.
Well, the answer is pretty much covered here. The code **doesn't work**. It's unmaintainable. That is the opposite of working. I'd recommend against mercurial, btw. Git is more common and probably more widely supported. But either is better than none.
What could we tell about PHP? We see only frontend - show code so we could tell you more. I am no frontend man, but i like design. 
I was on about the functionality of the site, faceted navigation, sorting, pagination etc :)
You can always send people to this [Gist](https://gist.github.com/Hamz-a/0b7d2e552812640dd8ef) that a friend compiled.
Just because there is no sensitive data doesn't mean you don't need to pay a least a little attention to security. Getting hacked could mean: * Having false information written to your site, potential incurring confusion for your customers or legal repercussions. * Crashed site because the database was dropped or tempered with. * Malware or XSS inserted into your HTML than can harm your customers * Above can also cause your site to flagged as harmful and be removed from search engines.
No disagreement here. MVC is what we are using, so that's what I personally can attest to.
Just having your site compromised and used as a launching bot for other attacks can get you in to trouble as well - your own sites/data may not have anything happen to them, but other servers may be attacked from yours.
Thanks, this is helpful!
... Touché.
Just a note: My recommendation was to put *new* development on some modern framework, like Laravel, and to have *old* development migrated over to a Composer-installable "library" that you can slowly clean up. The end goal was to have all of the old code eventually die off and only have the Laravel (or some other modern framework) code exist. **Edit:** One other consideration. In their current situation, they are hosed if they lose you. If played right, this is leverage to be able to make changes to your job situation and to earn more money. Obviously, don't be a douche about it and do your darnedest to get them out of that situation. But also **do not** martyr yourself to this company. There needs to be balance in what you give them and what they give you. Spending more than 40 hours a week at work is needless suffering and sacrifice on your part, particularly if there are other jobs that will pay you just as well without requiring you to live your job.
The client is a hospital and they always have companies coming at them trying to take them away from us. One of the plows they use is "they are using ASP which is outdated and unreliable, nobody uses ASP anymore, MS doesn't even support it". So the hospital Board being a bunch of non-tech people is insisting we change it over to PHP because thats why others have suggested to them. Basically the famous, "we're used to getting what we want, so either you do this or lose the contract next year".
I know it's a shirt situation but if you want my advice. Don't change a thing. Check everything out in version control. Only change a site to a new framework if it has a change request or feature being added to it. I can guarantee you have under quoted the work. 
Why not try to do freelance work or find a job that allows you to work remotely from home? If you have the skill set then you can get yourself to be paid more than $30k and make the most of your situation.
I would first decide whether the elements that make up your sites are unique enough for your own CMS or not. IMO there are very few web sites nowdays that need a custom CMS. It's only when the site is an application as much as a CMS that a custom system is needed. If you decide that you have a standard palette of goodies that you use, and that there's not much difference to a 'normal' website, then I'd switch to one of the large CMSs. Wordpress or Drupal most likely, only bothering to look at the smaller ones if it turns out neither of those meet your needs.
...or wordpress or drupal...or any of those other bloated insecure slow pieces of obsolete shit
It'd make more sense to test them both via nginx or apache. Just changing the httpd alone and leaving PHP via fast cgi for both tests can largely affect a benchmark.
Consider building functional and acceptance testing around your sites before refactoring them so you know you're not breaking anything. I've had decent success with [Codeception](http://codeception.com/) at work. Testing takes forever, but it beats being the guy who broke the site for very valid codey reasons that the bean counters and upper management won't understand.
I hate that is bigger than my screen.
Hold the phone! WordPress is popular? Not with developers its not...
I'll take Drupal as a CMS over Joomla as a CMS though. Basic UX concepts are totally alien to Joomla. Like, why can't I use a menu if I have some edit view open? Why do I have to click close/cancel first? Talk about 1999 UX.... Don't even get me started on the whole "every page has to be added to a menu first" nonsense. Or, what about plugins that aren't really plugins because installing them hits the database? This makes version controlling a project in a shared dev environment a total pain in the ass. CMS work in a shared dev environment is *already* a PITA, Joomla just makes it worse. And the plugin/extension landscape? Holy fuck.... it's a big sea of vultureware: you get "free" extensions that you need to pay for documentation. They're also coded horribly with TONS of xdebug errors because they all think @ is a totally valid operator. Plus 90% of it is barely English european software so you get [shit like like this](http://imgur.com/r/softwaregore/yrMA2Pi) Most of the extension "families" like RSForms, RSMembership etc are coded as if they're in isolated blackboxes. RSMembership and RSForms don't talk to each other. Virtuemart doesn't even use Joomla user groups to determine which group you're in - it uses its own shopper groups. So if you use something like RSMembership for renewable subscriptions, which uses default joomla user groups, Virtuemart can't take advantage of that for its group-based discount engine. You literally need to code your own extension that bridges RSMembership and Virtuemart because god for fucking bid all Joomla extensions just use the core Joomla user/usergroup table for the sake of interoperability. Joomla 2.5's cache attempts to lock files before it creates them, and the only reason why most people don't notice it is because they aren't using Xdebug scream. Meanwhile a simple file_exists check is not only faster than using @, it's more appropriate. Of course, why you're even attempting to lock a file with a random hash before writing to it is beyond me. So you literally cannot develop in Joomla with Xdebug scream enabled else your screen is an unusable wasteland of errors and notices. To be fair, a whole slew of 2.5 projects were thrust upon me and every single step of the process has been a painful experience. Maybe the new version of Joomla built on a proper framework is better. I'm sure the extension ecosystem is still a pile of shit, but maybe core Joomla isn't so bad. I feel bad writing this because I know there's a core joomla dev who is active in this subreddit, but talk about a project that needs to be rm -rf * and started from scratch with some proper thought given to UX. Maybe that's what they did with the new version, so if I ever get a 3.3 project or something, I'll reserve judgement until I get too frustrated to go into work because of it... 
[== comparisions are a nightmare](http://i.imgur.com/2qifrZT.jpg) and parameter ordering in core function are totally unpredictable.
You can probably freelance and make more. If you have all of those skills to be self sufficient, and you can do graphics design, you can definitely do full service client work. As long as you make sure you're contracts are solid and you're getting some money up front with regular deposits as you deliver progress and milestones, it will minimize losses from clients that decide not to pay you.
Joomla's architecture (at least 2.5) is BARELY MVC, but it's tolerable. The real problem is Joomla itself, and the ecosystem of existing extensions which either work like shit, or require payment for documentation, or are in fact coded horribly.
Read a book. This would be a good start: http://www.wrox.com/WileyCDA/WroxTitle/Beginning-PHP-5-3.productCd-0470413964.html
I do see that, but personally, everytime I pick up j oomla I write my extension s fron scratch, and the framework does a great job at giving me everything i need. Ajax, input filtering, popular libraries for quite a few common tasks. Call me a fanboy, but I stand by the fact joomla is a solid framework and cms to extend.
Seen I guess the difference is I write all my extensions and plugins from scratch. I see how it could be frustrating if you were left to modify and work solely off third-party plugins. 
Incremental refactors are the way to do this. Don't try to solve everything in one big push. Identify problem areas, and refactor them such that they are not a problem anymore. Don't bite off more than you can chew, but certainly improve parts of the system a little bit at a time until the whole system is something that is maintainable. Once you have something that is solid, write some good automated tests, and then get into the really big stuff. Most importantly, do not despair!
And that's exactly the approach that I took in the one I wrote a while ago by the same name: [RequirePHP](https://github.com/ircmaxell/RequirePHP)...
Get revision control up and running first and automate the deployment and update process somewhat. Then you should have more time to spend on improving the code. Also like others have said, make your employer aware of the issues and potential risks involved and let them know that more staff are required. Thanks to the way modern frameworks are written you should be able to incrementally replace sections of code with framework components until eventually you'll be completely framework driven. In regards to some comments talking about sensitive information not being an issue, this may be true. The only thing of value is the collection of information itself and your systems, after all that's how you make money. So, like you, I wouldn't be too worried about attackers stealing your data and much more worried about attackers destroying your data or rooting your web servers. Things that immediately come to mind would be SQL injection vulnerabilities and remote code execution. Good luck!
Yes, I would iteratively fix one problem at a time when I'm "in the area", rather than re-work working code for 0 business value
It seems like a lot of this is built to replace built in functions, not to mention it looks like it breaks single responsibility design. While I can kind of see the usefulness of it, I don't see the logic behind it
Semicolons. Semicolons everywhere.
&gt; . The code doesn't work. It's unmaintainable. My question was only to make OP really think about his reasons and validate them before proceeding...:)
MVC is a golden hammer!
&gt; Incremental refactors are the way to do this. Preach the Word, my brother.
I have been building up my business slowly each year. It is a lot of work finding and getting the jobs. Eventually they will come to me and I will be able to leave my job and support myself. Last year I made just under $15k in freelance work. Just knocking myself out to work 60+ hours a week is tiring. I can see the end goal though so I keep doing it. 
&gt; Providing services in an agency setting (multiple clients &amp; design focused) it's always essential to have features that differentiate one from the next. Or is it necessary to have **designs** that differentiate one from the next? Features can be enabled or disabled to provide drastically different sites. &gt; It wouldn't be awesome for 98%, it would probably be awesome for 20%, tolerable for 60%, and a deal breaker for the rest. You know their business remarkably well. &gt; Which seems like one of the large draw back of MVC/frameworks. Now this is just plain ignorant.
FYI: https://www.gitlab.com
+1 for Laravel. /u/utotwel has done some amazing work with that, but what is better is that it's in continuous development (unlike dead frameworks like CodeIgniter). Also, it comes with composer (think like apt-get/npm of PHP; easier life).
&gt; This might be too specific a question for you to be able to answer without more information, but would you go with a true multi-tenanted application or like evilmaus recommended where we have a Composer-installable "library" of code. You're right that it's too specific to answer. Really it comes down to what your business will actually need. Someone dismissed my response by saying that it wouldn't be awesome for 98%, it would be awesome for 20% and good enough for 60% while being dealbreakers for the rest. IMO that's dumb, and the vast majority of functionality will consist of listings, simple display logic and which fields are shown. The core of the application will stay the same. But only you know *just how much* the sites change from one to another. If the changes are drastically different in a way that makes them impossible or impractical to reconcile, then you may need to have them separate. To me the "library" of code solution solves a lot of the problems, but not all. The core problem is that you're dealing with literally hundreds of codebases. You're dealing with hundreds of applications. I'm advocating one exceptional system over hundreds of adequate systems. I'm advocating a solution where you have the ability to unit test, to refactor. Where finding and fixing a bug doesn't fix 1/300th of that bug in production. Where you can implement static analysis, code reviews, continuous integration, build chains and project management metrics. If you're pooping out a site every three days, using a library is going to be more "flexible", yes. And it's definitely the way you'll need to go, and having a central source of composer managed core files will absolutely help with maintenance. But it still is, in my opinion, the wrong approach. Are you really willing to sacrifice quality and maintainability for "flexibility"? The Composer-installable library sounds more flexible.
This is seriously awesome.
Is there any advantage of using`fopen` instead of`file_get_contents`? Seems to me that making the whole process under the hood should run better. 
Heres another one, https://github.com/Anahkiasen/underscore-php
My favorite variation on this one is: &gt; If you got to be [BDFL](http://en.wikipedia.org/wiki/Benevolent_dictator_for_life) (for a day), what single change would you make to PHP that you feel would majorly improve it? Often times, it's not the things you *hate* that make life miserable, it's all the damned papercuts from the little things.
file_get_contents reads files from the OS. fopen reads from a file handle, the filehandle points to a socket stream. I don't think file_get_contents can do that, I might be wrong though.
Benchmarks don't mean anything to anyone. The observation that web applications are nearly entirely made of code that HHVM cannot effect is extremely valid.
Was it of any use in "real life"?
+1 for Aura. /u/pmjones and friends are doing a phenomenal job
My advice would be to make your "container" a little smarter, eg. $this-&gt;container()-&gt;getDeliveryAddress(). It is in the domain of the client object to "get" and return the information you need. The other domains shouldn't know the technicalities of "how" the client object retrieves that information. This would: * give you only one place to update the "client.subscribe.deliveryAddress" property if it ever changed * give you a clear place to add transformers/mutators to clean up the response data * make it easier to mock of the client for testing purposes
This is why you have CSS. If you are design focused then features become less relevant. Eg http://www.csszengarden.com/ If you add a new feature to one site you want to be able to use it on future sites. This is one of the competitive advantages you have as an agency. Phillip.
Read this book: http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052 Edit: You need to be able to make changes without introducing new bugs, and fix bugs in a way that you'll be sure you aren't going to reintroduce them. The answer to both these problems is to have tests. There are a lot of techniques you can use to test code that is written in a way that is hard to test. I highly recommend this book as it will help you get there.
I'm typing this from my phone so sorry for not linking to sources I'm referencing. That said, there are some amazing sources for refactoring old code bases, and even better there are some very good php specific sources for refactoring old code bases. I am far from an expert on this topic, but I think the way I'd approach it would be. Find a good way each projects code base into more managable, logically separated chunks. Find often repeated logical operations and substitute in functions wherever possible. As you replace code write unit and acceptance tests. This also implies that every time you run into global state, you should instead replace that with dependency injection. Basically just make it a gradual process. Oh, and most importantly, version control your code and get a solid workflow going so you don't accidentally push code live that isn't stable yet. This means you should probably set up your own private git server, if this isn't something you're familiar with don't fret. The git-scm "pro git" book is free on the git scm website and it is an amazing resource for learning how to do this. 
Hey, why do you need this? IMHO- you project needs object based scalar types managing only if there are advanced features applied on them. Since https://github.com/nikic/scalar_objects/ is the most relevant choice to start with! you do not have to use SPL. My advice is to not transform PHP into java like thing and hold on the main PHP nature. If you need scalar type hinting- use hack language and HHVM.
I think https://cartalyst.com/manual/conditions/introduction does this. 
OK, late to the party (yay Europe) but here we go. I have worked several years as a dev and have moved into project management. So here are my 2 cents: * Review the sites - yes, ALL OF THEM * Write down what features they offer * Write down "special cases" - the exceptions you are referring to Afterwards, cluster those exceptions - very, very likely, these are not as many and not as diverse as you think. The rework the codebase, any new project gets set up into the new codebase, not the old. Then migrate the existing sites.
Nah, fuck that guy. He's a massive arrogant twat who has delusions of grandeur. Instead of spending his day making a good contribution to the PHP community he spends it berating Taylor Otwell on his use of the word "facade" in Laravel. His twitter: "Internationally recognized PHP expert" what a twat.
&gt;you project needs object based scalar types managing only if there are advanced features applied on them. Having strict type checking for function arguments can protect you from a number of potential bugs and can act as an implicit documentation. 
You're in for a lot of pain. The steps in http://www.slideshare.net/pmjones88/it-was-like-that-when-i-got-here have usually helped me out some times.
I was in your position in a couple of years time. I took over a job where I was the only developer running around 2,500 web sites and 400 portals. The web sites and portals were churned out by some script which had changed a lot over the years so if you found a flaw you have to hunt through every web site to find which may or may not have it. As people said below, refactoring is the way to go. Not just the code but the database as well. Create new tables and a good db connection class. Then pick one item of functionality at a time. Recreate it using your future system (eg Laravel mentioned elsewhere). Go through each and every site and replace that chunk of code in the script with a "include &lt;mycentralisedcode&gt;", as well as in the generator of course. You will come across some hack jobs and exceptions, just enter the extra functionality into your script and put into the db a flag for that site that activates it. Expect a lot of support calls of the form "MY SITE IS BROKEN!!!!". Don't panic. Often it's as simple as "The banner on X page has gone the wrong shade of blue". After a while your site scripts will dramatically shorten in length, and you can start combining multiple includes into a single one. Your "happy day" is when every single site is a single file with 1 line that is an 'include' statement. Then you are only a server config and "rm -rf" away from having a sane system. I would disagree with comments saying put everything into revision first. Just put your new centralised code into revision. Forget the rest. There is no going back! Phillip.
It's crazy that non-technical people are making that sort of decision, but I guess it's an organisational problem you'll need to deal with. Commiserations :-/
...$yes, finally! :)
Yes! We develop SaaS solutions for E-Recruiting, Applicant-Management, and HR-Management. 
 /** * Return the maximum value from $collection. * * @param array $collection * @return mixed */ public function max(array $collection) { sort($collection); return end($collection); } Are you aware of PHP's built in function [max](http://www.php.net/manual/en/function.max.php) and [min](http://www.php.net/manual/en/function.min.php)? I couldn't help but wonder why would one want a library for these.
Awesome, thanks.
Thanks for this OP, I am also currently rewriting my framework and this might works it's way in, I am using Pimple for DI ATM but I think I might see if this has a place. Thanks for the hard work.
best one around is workable.com
Why not just start with an ecommerce package like magneto? It already has all of this worked out.
The problem is that $container-&gt;get('client.address') doesn't give you any functionality. Suppose all this does currently is return a string or an array, and then the client asks you to include the extra 4 digit zipcode of the address, or change its formatting in some way to also include the client's phone number (e.g. all places where the address appears, should be more like a mini contact card with phone number as well). `container-&gt;get('client.address')` can't be modified to return a different type of result as easily as `getClientAddress()` could. Personally, I like being explicit where possible just for the sake of documentation. You can outline a very straight forward API method list rather than having to document what string corresponds to what piece of data.
&gt; This is underscore's API essentially. Underscore JS exists because it shims functions which may not be available in all browsers, adds new useful ones and makes uses of prototypial inheritance to add useful "extension" methods to objects. Belt simply creates copies of existing functions and adds very little. I really don't see why I would use this.
Not really. It was more of an experiment in alternative DI mechanisms. It was a learning tool, not a "useful tool". And considering it's basically define-time-wiring rather than injection-time-wiring, I think it's less useful than a dedicated DI container.
https://getcomposer.org/doc/articles/vendor-binaries.md
Ok, a few things: 1. Don't typehint against `Closure` as you do [all over the place](https://github.com/ilya-dev/belt/blob/master/src/Belt/Collections.php#L15). Instead use [`callable`](http://www.php.net/manual/en/language.types.callable.php) as it's much more flexible. (Additionally, the `Closure` class is generally regarded as an implementation detail, not something to be relied upon. 2. Don't rely on `spl_object_hash()` as you do [quite often](https://github.com/ilya-dev/belt/blob/master/src/Belt/Functions.php#L36) **unless** you also store an instance of the object. Hashes are not unique during runtime, garbage collected objects will have their hashes reused. This *will* result in odd behavior. 3. Why are you creating global state with `cache()` and `once()` etc? Why not decorate the callback with a memoizer / limiter. So you'd do `$cb = cache($cb);` and then proceed to call it later. Use function composition, not raw state. Ex: function once(callable $cb) { return function() use ($cb) { static $called = false; if (!$called) { $called = true; // &lt;- set it early to prevent recursion return call_user_func_array($cb, func_get_args()); } }; } 4. The `Utilities` class is simply bad. I mean using `uniqid` for creating an [id](https://github.com/ilya-dev/belt/blob/master/src/Belt/Utilities.php#L13)? Yeah. Not good. And `htmlentities` for escaping? `UTF-8` called and wants its characters back. 5. Why redundant code? Like [Object::apply](https://github.com/ilya-dev/belt/blob/master/src/Belt/Objects.php#L17)? Why would I write: Belt::apply($obj, $callback); When I could just do $obj($callback); The only benefit may be to immediately executed anonymous functions, but even then, you're limiting it to a single parameter (required), and you're putting it before the callback? WTH? 6. Please don't do [this](https://github.com/ilya-dev/belt/blob/master/src/Belt/Objects.php#L42). Like ever. You're breaking the type system. Please don't. 7. [This](https://github.com/ilya-dev/belt/blob/master/src/Belt/Objects.php#L31) won't work in the general sense. Always test with `isset($obj-&gt;$pop)`, as that will let getters and setters to work. 8. Objects don't work like [this](https://github.com/ilya-dev/belt/blob/master/src/Belt/Objects.php#L65) in PHP... 9. You don't even use your own methods [internally](https://github.com/ilya-dev/belt/blob/master/src/Belt/Objects.php#L131)? If it's good enough for others to use, why aren't you dogfooding it (using it yourself)? 10. Why is [`isNumber()`](https://github.com/ilya-dev/belt/blob/master/src/Belt/Objects.php#L184) on `Objects`, and not on something like "Primitives"...? In short, I don't see the utility here. Some of the things (like Collections) could be valuable, but they are cluttered with so many other convoluted concepts that I don't see the value at all. And if you want to work with collections, why not use something like [Nikic/Iter](https://github.com/nikic/iter), which is far better designed. 
That slideshow gave me some good ideas, thanks!
Yes, I've developed a product for HR outsourcing, focusing mostly on talent acquisition.
Is 'Modernizing Legacy Applications In PHP' a guide to do that in Aura? or a guide to do it in general? Thanks!
Totally agree. PS: they're over at [github](https://github.com/wsdl2phpgenerator/wsdl2phpgenerator) now. 
Also looks promising! Bit more complex than cartalyst, but seems like i can do more stuff. I like doing stuff :) Ill try to work out which one to use, thanks!
Cartalyst are doing an ecommerce platform on top of Laravel. They're releasing all the bits and bones that will become their platform in a non-agnostic packages.. Their code is pretty good, with tests, etc. If you need other packages, check their arsenal. They have a cart package and stuff like that. 
Did you develop it on your'e own? 
You are wrong. The difference between using a handle to read and `file_get_contents` is not about reading from the OS vs a socket but instead intended usage. All `file_get_contents` does is provide a more friendly usability function when wanting to read something whether a file or socket stream; the function does the same as creating a handle and reading all contents into memory, closing the handle, and returning the contents as the result. What you are doing with your code sample is maintaining the connection handle to enable the ability to perform multiple actions as if it were interactive. Performing both read and write functions to a single point is beyond the scope of `file_get_contents` as would reading an extremely large file that exhausts available memory. There's nothing preventing the usage `$html = file_get_contents('http://www.google.com/');`.
Charge more.
Since no one has mentioned it, I'll throw in [Symfony Expression Language](http://symfony.com/doc/current/components/expression_language/introduction.html). In fact, as a bonus, [here's an article](http://florian.voutzinos.com/blog/using-symfony2-expression-language/) describing exactly the functionality you are looking for. Check it out! Edit: [Here's another great article](http://jwage.com/post/76799775984/using-the-symfony-expression-language-for-a-reward).
Here's the internals post: http://news.php.net/php.internals/73888 edit: and here are some technical details: https://wiki.php.net/phpng-int 
The SPL documentation could be better. If you want to see how/when to use the different Data Structures, Iterators, and Exception it provides check out [Mastering the SPL](http://www.phparch.com/books/mastering-the-spl-library/). It really helped me understand how you can combine Iterators. Full disclosure: my company publishes this book.
Here's a great talk about transforming legacy apps to use Symfony: https://www.youtube.com/watch?v=g2f_BzKrpaU
Why? Because the community keeps letting them. And note that this is not the PHP project, but Zend that is pushing this (along with a few outsiders).
Explain please like I'm 5 years old.
Latch is a service that allows you to add an extra level of security to your online services. To help prevent unauthorized use, Latch gives the user the ability to disconnect their accounts with a single move when not being used. (https://latch.elevenpaths.com/) This bundle implements lacht in Symfony Authentication.
So he's not even going to look into the 7% failed requests? At all?
"I'm going to complain about this because I don't understand technical documentation for a pre-alpha feature that really has no reason to have a thorough writeup at this point." There, I fixed it.
&gt; Unreadable, unintelligible, sadly, par for the course. Is it? Perfectly readable and intelligible for me. If you can't understand what `./configure` does, then you're probably not the target audience here. In due course, there will probably be better instructions for people who have no technical background (bearing in mind this was posted to internals, not announce), but this is just a sort of early alpha thing. Also, the internals docs so far are pretty good: https://wiki.php.net/phpng-int
Are Zend not part of the PHP project?
I'm not too well-versed in the internals of PHP but from what I've heard about HHVM, this seems to be a similar approach they took. One of the focuses of HHVM was to rewrite the internal data structures to be more efficient in terms of memory lookup and CPU cycles. Good to see such a great improvement in PHP core. Hopefully they can keep finding gains here and there. I'm just interested to know when this might hit the stable branch. 5.7 based on phpng Wiki? Presentation about it from the Hack Dev Day: https://www.facebook.com/groups/hackdevday14/1438200999752349/
yep. we're the ones with the broken hearts- you can spot us from a mile away.
PHP 6 is going to be a long effort. So that would make the most sense.
I call Dunning-Kruger on guy making $30k with above skillset.
So what is the exact command you are running. That will help reproduce the issue
It was a rebrand of software I made for other purposes. I had help with embedded staff on mostly UI and workflow.
I like this a lot, I'd love too see you expand on the subject
Was PEAR ever high enough to fall? If I needed to use PEAR packages, I'd grab the project source code, compile, and install the damn thing myself.
/me nods An earlier version of the essay was "RADR: Request-Action-Domain-Response" so I get where you're coming from. However, when I reviewed the existing patterns, they all leave out the part that leads up to the central logic (those parts being the routing, dispatching, request, etc). This review led me to think that the routing/dispatching logic probably fits in better as part of the Front Controller logic.
I would agree with everything here except Leadership. A Senior developer doesn't need to be a team leader.
Yay! Another rehash of [RMR](http://www.peej.co.uk/articles/rmr-architecture.html) with different names!
Design dictates function. If you need for instance a tag cloud of all the brands of cars available—I don't know why—it wouldn't be efficient to do it on every single site if 90% don't use it. Sure, options make sense. But. it seems that that's dependant on the client's view. --- &gt;&gt;&gt; You: But if you can build a system that is awesome for 98% of people, or a system that is a bit shit and broken for 100% of people &gt; You: You know their business remarkably well. Thanks for rephrasing my reply to you. --- I said it seems. Relax. It's just the limitation **I** haven't figured out how to do as nicely as without the MVC approach.
It's not as simple as adding display:none on everything. Sure, its possible. But, getting everything from a database, and sending everything to a client isn't optimal. I've never used this much touted Laravel that everyone's mentioned ITT, so I'll see how it looks as compared to the others I've used before.
Ah, I see.
Snark aside ;-) I was not previously familiar with RMR, which is part of why I offered the essay. Reading it through the first time, I can see how the tentative ADR and the existing RMR map to each other. However, I see some possible discrepancies. I ask these questions naively, since I am not familiar with RMR: - In RMR, does the _Respresentation_ handle setting of headers on the HTTP response? - In RMR, does the _Resource_ represent the _Domain_ logic, the _Action_ logic, or something else? (The _Resource_ seems to be a combination of domain element and logic that acts on that element.) I'll ask other questions as I have them. Thanks for pointing RMR out to me.
How about earlier? I assume it's too untested/too late to hit 5.6, but a later version of 5.6? or 5.7?
Pretty sure it's a joke. Ben is quite the PHP fan. 
Yeah, should have made it more clear. The point was that the default setup (which for most people will remain the only setup) depends heavily on Github.
&gt; MVC poorly describes what "MVC" webframeworks actually do. Agreed. It's been the best description we had, and I think the ADR description (or something else like it) is a positive refinement. &gt; As for the view, it is debatable wether a webframework should or shouldnt have a view layer. This is one reason I talk specifically about a _Response_ and not about a "view". The result of the web interaction is an HTTP response, and I think the organizational pattern should reflect that.
Composer doesn't currently support this, but the feature is in progress for both HHVM and PHP (see PR [#2898](https://github.com/composer/composer/pull/2898)). Nils, one of the Composer devs, was out at Facebook last month for their HHVM/Hack conference, and was talking about this (I have a write-up [here](http://jmikola.net/blog/hack-dev-day/)). One of the bigger hurdles has been support for Windows, where compiling PHP extensions is a miserable affair; however, PECL recently began doing automated Windows builds for their hosted extensions (see the "DLL" links [here](http://pecl.php.net/package/mongo) for an example). That still leaves HHVM, which has yet to settle on a distribution method for extensions, but progress is being made.
Ah, so I am. Good catch.
Too many variables to control and it's hard to reproduce. However I will make a future post where I have a simple web app that you can download and performance test. To reduce the number of variables I wrote a script to scrape the CrossFit open 2014 data and compile it into a csv. 
Apparently their trying to get it into 5.7
This is satire for those not familiar with American satire.
I agree that router is essential, but it feels more like bootstrapping to me. In a de-coupled system, the actions (?), domain objects and responses shouldn't really depend on each other. The router depends on both the request and action - as a glue. I would keep the action (?) and domain object (probably with a nicer name) but think of how request, route and response can be referred to. RRADR doesn't have such a nice ring to it. What about something like TAD (Transport Action Domain)? Then the transport (in this case HTTP) can be taken out of the picture (including the router) without the others losing meaning. **Edit**: Uncle Bob once referred to these as boundaries (HTTP transport and associated components), interactors (actions/controllers) and entities (models). **Edit**: here's where: www.youtube.com/watch?v=WpkDN78P884
Ha! And you're from joomla. I suppose it stands to reason why you'd think this is acceptable. 
You say that like it's somehow inferior to British satire. ^^^^^^^^^^^^^heheh
Dunno, which do you think are the important hosts to cover? Or are you thinking it should be none or all?
I don't see it landing in a 5.x version, personally — it's too big a change.
Since PHP whatever-the-hell-the-next-version-number-is hasn't even been branched yet, there's definitely time. I expect to see it there.
Paul, I did mean it to be snarky, but just snarky. Not as an insult ;-). 1. In an ideal world, you shouldn't be setting HTTP headers on the resource level. That should be happening much higher in the stack. The reason is that RMR is ideally suited to HMVC-style setups, where you can have "meta resources" which really are just collections of other (possibly heterogeneous) resource types. Thereby, one "request" could actually turn into multiple internal sub-requests. So setting headers would need to be handled at the sub-request level (meaning merging them appropriately, and dropping when not needed). 2. The resource represents the domain *object*. Not logic. The Method dispatches the domain logic on the object (read/write/etc). I'm not saying RMR is perfect. Just that it seems quite similar to your proposal ;-) 
*shrug* seemed as good as any. Pretty popular. Know someone who has already asked about this one to, tho he does work there, so his choice may have been a bit biased. Also, some of these PaaS platforms basically work the same (eg passing config variables as $_ENV) so hopefully it could be converted to others with minor tweaks.
I don't care **in this case**. I did not intend it to be an active project. I was more voicing my general concern with activities like this. This is the third project I've had stepped on (the other two were real, distributed projects with a lot of users). Some may say that I should pick more "unique" names. But that didn't work for [Ardent](https://github.com/morrisonlevi/Ardent) which was stepped on by [Laravel's Ardent](https://github.com/laravelbook/ardent). Rather than searching, and looking to see "Hey, is this name used?", people just name the project. And that's dangerous. I try searching every time I name a project. If I think it's going to be used, I make sure it's a unique name (PHP-PasswordLib and password_compat were both 100% unique when I started them). Suffice it to say that it's a pet peeve of mine to see project names stepped on like this.
Is your comment a joke? There is no way anyone could think that was serious.
PHP 6 isn't a thing. There is a nebulous of ideas for what "the next major release" will look like, but that's it. Here are the currently active release versions: http://php.net/releases/ Here are the only PHP 6 wiki pages: https://wiki.php.net/ideas/php6 https://wiki.php.net/ideas/php6/engine
It's however a huge change to the ABI and internal API. This will break any pecl extension. Since another such change is already planned for PHP6 it might make sense to release them together.
It's a really significant internal change for extensions, though: basically anything in an extension that manipulates a zval is going to have to change. There's been the odd BC break for extensions between 5.x and 5.x+1, but this is much, much bigger, and having it as part of a new major version helps signal that. There's also no real guarantee that there won't be userland BC issues as well. It doesn't look like they'll be significant, but I'd be *really* surprised if this was 100% BC with existing PHP 5.x code.
Recently worked with Heroku support to install MongoDB. Requires updating to the "develop" branch of their PHP buildpack. More info here: http://blog.mongolab.com/2014/05/mongodb-and-the-new-php-on-heroku/
NPM isn't actually that old. Looking at the commit histories, composer's first commit came only 1.5 years after NPM's first commit.
Joke? No, this is a serious topic, son. I agree with all points on the article. 
&gt; In an ideal world, you shouldn't be setting HTTP headers on the resource level. That should be happening much higher in the stack. (/me furrows brow) In RMR, after "creation" activity, what should be setting the proper response headers indicating the next location after that activity (e.g. a 302 or 303 redirect on success, or an equivalent after failure)? Current MVC setups have the Controller doing that, ADR advocates the Response logic doing that. EDIT: From the example, it looks like the Resource object does that. But that seems at odds with the idea that the Resource represents the domain object, and not logic, and with the idea that one shouldn't be setting HTTP headers at the resource level.
Maybe consider, that the author is not a native speaker of english. You can be a great developer without having fully mastered the english language. Also if you did understand the content is surely wasn't unintelligible nor unreadable.
Yup - I contribute to a project that powers 4% of the internet. That is correct.
Well that escalated quickly.
I know NPM isn't that old. I'm talking about systems like FreeBSD's Ports, Gentoo's Portage, Debian's Apt, RedHat's RPM, and so on. NPM and Composer are attempts to do the same thing but in JavaScript and PHP.
While I'm not familiar with all of these, they may do similar things with regards to dependency resolution, this is only half of the problem. The other half is what to do with the packages once their downloaded. Composer big strength is that it comes with build in autoloading - otherwise I'm sure it would've been PEAR all over again.
I have no problems whatsoever with the autoloading and PHP-specific functionality in Composer. It certainly makes the world easier. However, the other package systems I mentioned are all capable of handling this as well, and are not PHP-specific.
I think that is obvious.
PHP *is* Inherently Insecure
i have it on good authority that this post is 100% factual and genuine* *only the part about switching to C, even though we all know that Fortran is coming back...
&gt; In RMR, after "creation" activity, what should be setting the proper response headers indicating the next location after that activity What says a header should be sent for that activity at all? Why not respond with the created object, serialized appropriately, with hypermedia links to where it will live?
Perhaps I am being unclear. Let me rephrase. The response message has to include a status header or status line of some sort. Under the example you give, of sending back the serialized object, *something* has to set "200 OK" on the returned response. With that clarification in mind, what should be setting the proper response headers? From the example, it looks like the Resource object does that. But that seems at odds with the idea that the Resource represents the domain object, and not logic, and with the idea that one shouldn't be setting HTTP headers at the resource level.
7% failure rate from 0% is unacceptable in production.. For all we know, it just went 503/504 instantly. Which would explain much of the 17% speed increase. It simply hadn't bothered to respond. 250,000 daily requests becomes 17500 daily errors hitting the log.. at 0.5% conversion, which becomes 87 daily failed sales. Which would be a huuuuuuge problem.
I really do hope `$q` is not populated from user input. If it is, this is just a perfect place for cli injection.
When you say that you're hiring, is it an option to hire enough people that you could have one or two working on a complete rebuild? If so, I think that's what I'd do. Two people should be able to crank out a pretty bad-ass replacement product within a few months; after that, I'd just start migrating devs over to the new codebase, one at a time. Might take a few months... nine months to a year maybe? Considering what a cash cow it is, I'd ease in slowly. As for what the system would like, I would definitely think long-term: considering the # of sites you're talking about, I'd think about creating a single, unified backend for the end-users - meaning all the car dealerships, right? Give them one portal, and build an API off of that data, which would be consumed by the individual sites you make for each one. So it's actually two projects - the backend, and the frontend (the client site). I'm not sure about the individual &amp; unique features you mentioned, perhaps there's some way you could treat some of those as modules that get enabled/disabled, on a per-client basis. Either way, one backend for everyone would be a shitload easier to maintain &amp; upgrade. And worth more, in terms of a product you could sell or whatever. Not only that, you could also start charging a monthly/annual fee in addition to a one-off price per site. Recurring revenue is awesome shit. (Maybe you're hip to that though.) Frameworks: Laravel is definitely good, I find it to be pretty intuitive. It's been reviewed *a lot*, so it feels trustworthy in that regards. And the [Generators](https://github.com/JeffreyWay/Laravel-4-Generators) are pretty sick, you can strap up a new site pretty darn fast. Aside from Laravel, I've been using Python (Flask/Django) for new stuff, and so I don't know much about any of the other PHP frameworks out there. Version control: git. Sounds like a pretty intense challenge, no matter which way you end up going. Good luck with it, and congrats on being successful in your niche!
Those results were based on the HHVM nightly build. I would take that with a grain of salt.
Seems like HHVM got the perf guy(s) on the PHP team off their duff. We saw the same thing happen when Lars Bak decided to speed up Javascript with V8. Cheers to those who lead the impetus of real change.
&gt; Those results were based on the HHVM nightly build. I would take that with a grain of salt. 
Yes it's possible, but don't do it. The performance hit is worse than the little bit of typing you're saving.
You can do this with classes, it's called magic methods. http://www.php.net/manual/en/language.oop5.magic.php This isn't possible for functions however.
I've never liked using composer.
I think you have a front-controller outside of the application domain which handles things like that.
&gt;All issues and pull requests in this release may be found under the [1.0.0-BETA10 milestone](https://github.com/doctrine/mongodb-odm/issues?milestone=2&amp;state=closed). &gt;**Improved support for differentiating identifier types and non-scalar values** &gt;ODM previously required that documents use scalar identifier values. Also, the identity map, which UnitOfWork uses to track managed documents, was unable to differentiate between numeric strings and actual numeric types. After internal refactoring in #444, it should now be possible to use complex types such as MongoBinData and associative arrays (i.e. hash type) and the identity map should no longer confuse strings and numeric types. Embedded documents and references are still not supported as identifier values. &gt;**Classes not listed in discriminator maps** &gt;When a discriminator map is used, ODM will store the object's short key instead of its FQCN in the discriminator field. Previously, ODM might leave that field blank when dealing with a class that was not defined in the map. ODM will now fall back to storing the FQCN in this case. This primarily affects embedded documents and references. &gt;**Criteria API** &gt;The base DocumentRepository class now implements the Selectable interface from the Criteria API in Doctrine Collections 1.1. This brings some consistency with ORM; however, ODM's PersistentCollection class does not yet support Selectable. This functionality was introduced in #699. &gt;**Read preferences and Cursor refactoring** &gt;ODM's Cursor class was refactored to compose the Doctrine MongoDB Cursor. It still extends the base class for backwards compatibility, but methods are now proxied rather than simply overridden. This solved a few bugs where the cursor states might become inconsistent. &gt;With this refactoring, ODM now has proper support for read preferences in its query builder and the UnitOfWork hints, which previously only supported the deprecated slaveOkay option. Much of this work was implemented in #565. &gt;**DocumentRepository findAll() and findBy()** &gt;The findAll() and findBy() methods in DocumentRepository previously returned a Cursor object, which was not compatible with the ObjectRepository interface in Doctrine Common. This has been changed in #752, so these methods now return a numerically indexed array. The change also affects the magic repository methods, which utilize findBy() internally. If users require a Cursor, they should utilize the query builder or a custom repository method. &gt;**Lifecycle callbacks and AlsoLoad** &gt;The @HasLifecycleCallbacks class annotation is now required for lifecycle annotations on methods declared within that class to be registered. If a parent and child close both register the same lifecycle callback, ODM will only invoke it once. Previously, the same callback could be registered and invoked multiple times (see #427, #474, and #695). &gt;The @AlsoLoad method annotation does not require @HasLifecycleCallbacks on the class in which it is declared. If the method considers multiple fields, it will only be invoked once for the first field found. This is consistent with how @AlsoLoad works for properties. Previously, the method might be invoked multiple times. &gt;**MongoBinData subtype change for BinDataType** &gt;BinDataType (type bin) now defaults to 0 for its MongoBinData subtype. The various binary type classes have all been refactored to extend BinDataType. BinDataType's previous subtype, 2, is available via the BinDataByteArrayType class (type bin_bytearray); however, users should note that subtype 2 is deprecated in the BSON specification. &gt;**Priming references** &gt;Builder::prime() now allows any callable to be registered, where previously only Closures were supported. The method will throw an InvalidArgumentException if the argument is not a boolean or callable. Boolean true may still be passed to utilize the default primer. Priming is now deferred until the very end of Query::execute(), so it will now apply to findAndModify command results. &gt;The signature for primer callables has changed to: &gt; function(DocumentManager $dm, ClassMetadata $class, array $ids, array $hints) &gt;A ClassMetadata instance (of the class to be primed) is now passed as the second argument instead of the class name string. The reference field name, which was formerly the third argument, has been removed.
Two scenarios: 1) $q = 'df'. Command "man df 2&gt;&amp;1 | col -b 2&gt;&amp;1" produces "good" result ($code = 0) and the output is a man page on df. 2) $q = 'nonexistent'. Command "man nonexistent 2&gt;&amp;1 | col -b 2&gt;&amp;1" also produces "good" result ($code = 0) but outputs "No manual entry for nonexistent", so it's a false good result - "man" fails but "col -b" doesn't, so $code is set to 0. if I remove "|col -b", then $code is populated correctly. 
sanitized using `escapeshellarg` I would hope.
However they are not easily ported to other platforms. A lot of us develop on Mac OS X or Windows.
PHP-NG -- I like the ring of that :)
Like code that pass from bad developer to bad developer, getting worse and less secure each generation?
I hope is a good one.
I read this. Liked it. Saw the link for RMR. Read it. Liked it. Now confused again. So, ADR or RMR, are there any frameworks out there structured this way?
Looks like a delightful resource for me to use as a crash course for some of my coworkers that haven't the faintest idea what "object oriented", and certainly don't see any reason they should learn about it, thanks.
I appreciate the concern but I actually asked a concrete question. Do you happen to know the answer, or you just here for the code review? 
This is just too broad. What you have described is a typical n-tier architecture. What problem are you trying to solve?
Sorry for spilling my Haterade here, but it kind of bothers me that Wordpress is used as a benchmark. Surely there are better benchmarks of best-practise use, such as bootstrapping a modern framework like Symfony or Laravel.
Is your... where are we up to?
Pretty much convinced me not to.
I like the idea. A lot of developers are solo devs, and so finding someone who can objectively look at their work and show them potential improvements or point out flaws is a benefit. Developers who work solo often simply don't know about new or better techniques, and skills can stagnate. Let me know if it goes anywhere.
What does this do that Doctrine DBAL or Zend\Db\Sql don't?
Well the functional programming guys seem to think it's the wave of the future. Sure it's seven times slower, but you can easily parallelize it and run it on the ten thousand cores we'll all have next year.
&gt; 14,072 questions &gt; 24,463 answers It is a good idea, don't get me wrong. But do you see why this kind of ratio might be an issue? Stackexchange's setup is good for Q/A, but Code Review in general isn't Q/A. For some things it is opinion [e.g. Too many comments], for some things it is fact [e.g. Sql injection]. I don't think a solo dev or a developer working on a side project after hours can form a valid opinion about the quality of his code based on 2 reviews by random strangers. I think it would need more orchestration than that. 
I'll try to keep track of this thread and see. We'd probably need a minimum of 5 users for it be an effective group. I think 1-2 opinions aren't enough unless it is finding obvious issues. [e.g. sql injection] Do you have any ideas in terms of sustaining quality or format?
Thanks for sharing with us. Would you like a cookie?
Yep, give me that damn cookie
Personally I would have gone for: PHP Voyager 
and once again, thanks to competition, we (consumers) win!
:) wasnt sure if there was more to update, i just noticed the version number
Also, thanks for making this :). Using it with [bldr](http://bldr.io) (task runner) to replace some of the front end stuff from grunt :)
Awesome, I'm glad to hear you're getting use out of it!
All of the API stuff is stable, nothing there has changed. From a user perspective you just need to update composer and make sure things work as expected, and then you can reap the benefits of the various updates without needing to do any coding on your end.
Great article/thinking. I've spend too much time writing separate logic for the web and for the CLI that essentially do the same work. They both take a load of "input" and transform it a bit, send it through to some domain logic and then render an output. Personally I'd like to investigate the idea of reducing all concepts of an application's work ("controller methods" or "CLI commands") to "Actions". class Controller\CreateUserReportAction implements ActionInterface {} class Command\CreateUserReportAction implements ActionInterface {} The application should have a unified router/dispatcher to dispatch arguments against a common interface: class CreateUserReportAction implements ActionInterface { public function dispatch(ActionRequest $request) { // ... do work } } interface ActionRequest { /** * @return CLI arguments/query string/route parameters */ public function getQuery(); /** * @return Request body, deserialized from content-type */ public function getData(); } The next-level of (over-)architecting would be to selectively create a request object per-request-type: CreateUserReportRequest extends ActionRequest { public function getUserId() {} public function getStartDate() {} public function getEndDate() {} } This would be a place to keep all the data-transformation which is often jammed in to the controller logic. This is a clean separation of domain logic and the implementation details. (oh yeah, this is just a thought experiment and possibly way too over-the-top)
But how about the author's underlying book, did it get improved since the last time it was being [talked about?](http://www.reddit.com/r/PHP/comments/1x7v5a/building_secure_php_apps_opening_my_first_ebook/)
I would also add its memory usage when updating (or adding) packages. Apparently, having less than 2G dedicated to it is heresy nowadays.
Looks like an encoding issue, when I copy that into http://ideone.com/ it shows little red dots. Probably indication there's some hidden character in there messing up the code. The variable is not $a but $a with an extra hidden character. In the var_dump, the first is $a and the second one is $a with the hidden character. Hence the output of "NULL int(1)" Incorrect: http://ideone.com/kuJceu#view_edit_box Correct: http://ideone.com/FCWrdA
http://ideone.com/EeE9Yo works fine for me 
english majors
The variable isn't simply `$a` it actually contains a [THREE-PER-EM SPACE](http://www.fileformat.info/info/unicode/char/2004/index.htm) unicode character after it. This character has been encoded as `0xE2 0x80 0x84` which is within the valid range of bytes allowed for PHP [variables](http://www.php.net/manual/en/language.variables.basics.php). For more info see: http://stackoverflow.com/questions/3417180/exotic-names-for-methods-constants-variables-and-fields-bug-or-feature
Just curious what makes this better than Phing?
Nope, PHP Deep Space Nine is clearly superior.
Take a look at the Sylius components: https://github.com/Sylius/ 
He and Phil sturgeon do PHP TownHall, right?
/r/lolphp
[Robo](https://github.com/Codegyre/Robo) is also worth looking at.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Call stack**](https://en.wikipedia.org/wiki/Call%20stack): [](#sfw) --- &gt; &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), a __call stack__ is a [stack](https://en.wikipedia.org/wiki/Stack_(data_structure\)) data structure that stores information about the active [subroutines](https://en.wikipedia.org/wiki/Subroutine) of a [computer program](https://en.wikipedia.org/wiki/Computer_program). This kind of stack is also known as an __execution stack__, __control stack__, __run-time stack__, or __machine stack__, and is often shortened to just "the stack". Although maintenance of the call stack is important for the proper functioning of most [software](https://en.wikipedia.org/wiki/Software), the details are normally hidden and automatic in [high-level programming languages](https://en.wikipedia.org/wiki/High-level_programming_language). &gt;A call stack is used for several related purposes, but the main reason for having one is to keep track of the point to which each active subroutine should return control when it finishes executing. An active subroutine is one that has been called but is yet to complete execution after which control should be handed back to the point of call. Such activations of subroutines may be nested to any level (recursive as a special case), hence the stack structure. If, for example, a subroutine DrawSquare calls a subroutine DrawLine from four different places, DrawLine must know where to return when its execution completes. To accomplish this, the [address](https://en.wikipedia.org/wiki/Memory_address) following the call [instruction](https://en.wikipedia.org/wiki/Instruction_(computer_science\)), the *return address*, is pushed onto the call stack with each call. &gt;==== &gt;[**Image**](https://i.imgur.com/J2EwK6O.png) [^(i)](https://commons.wikimedia.org/wiki/File:Call_stack_layout.svg) --- ^Interesting: [^Subroutine](https://en.wikipedia.org/wiki/Subroutine) ^| [^Stack ^overflow](https://en.wikipedia.org/wiki/Stack_overflow) ^| [^Recursion ^\(computer ^science)](https://en.wikipedia.org/wiki/Recursion_\(computer_science\)) ^| [^Stack ^buffer ^overflow](https://en.wikipedia.org/wiki/Stack_buffer_overflow) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chavl3m) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chavl3m)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
To each their own, I suppose. May I ask why?
I was just correcting the typo in the thread title.
Man, your work situation sounds very very close to what mine was about 2 years ago.. Basically I did color separations for a large screen printing company for about 5 years, and have always had a knack for web development stuff. We got a new manager in our department that is super into redundant organization and data tracking, and seemed like the start of the end for me because I really was not feeling that atmosphere anymore. But as these new practices where introduced, I began to see opportunities to do different but related work. It started with some applescripts to help organize stuff, and moved towards flash (eww I know) to make a tool that would essentially try to determine how inks should be printed in relation to the garment color they where printing on. Fast forward a few months and I am presented an idea to replace a specific form that we use internally with something digital.. And there is where I saw the golden egg. I pushed the scope of that project to be as large as conceivably possible. Once the form existed, we needed a user login system. Then a method of recalling those entries made with the new form. Then tools to help with scheduling them. And from there it has been growing into a beast that will not only encompass the entire company, but will replace several pricey enterprise solution applications that we have already bought. I am the only person working on every aspect of this project, with the end users doing a lot of the testing because I can only allot so much time to every part that needs work done on it. I will likely be getting someone part time in the future to help me out, but I have zero managerial experience, and learning that could be trickier than the languages themselves. I guess what I am trying to say is try to find an angle.. Even if it is something as dumb as an applescript that rearranges a few files. To people who do not know how to code things this stuff is wizardry, and you just need to find the right person to believe in your skills!
&gt; $PIPESTATUS That is exactly what I need. Thank you very much! ${PIPESTATUS[0]} will have the exit code of the first command.
it almost works but where it's meant to be self populating the text fields it's having problem. This should be taking the information from phpmyadmin when the user is logged in. If you look at [this screenshot](http://imgur.com/11bCAWS) you can see it has put "mike" above the text fields where it should be after 'First Name' and so on. This has also meant that the submit button code has been put in the text field instead of at the bottom of the form where it should be. Any ideas? EDIT: I've added a bit more code just above your comment so hopefully this will make a bit more sense now.
hi mate, sorry it took so long but here's a bit more code: &lt;?php include 'connection.php'; $id = $_SESSION['customerID'] ; //Get the primary key passed $query = "SELECT * FROM Customer WHERE customerID= '$id' "; $result = mysqli_query($connection, $query) or exit ("Error in query: $query. ".mysqli_error()); //see if any rows were returned if (mysqli_num_rows($result) &gt; 0) { // yes - Display Form $row = mysqli_fetch_assoc($result); //Fetch the row } //Display the form with original values ?&gt; &lt;?php if (!isset($_SESSION["authenticatedUserEmail"])) { print "You must be logged in to register onto the Weekly Social. Please &lt;a href='login.php'&gt;&lt;b&gt;Login&lt;/b&gt;&lt;/a&gt; or &lt;a href='create_account.php'&gt;&lt;b&gt;Create an Account&lt;/b&gt;&lt;/a&gt; before doing this.&lt;/br&gt;&lt;/br&gt;"; } else { print "&lt;p&gt;Please enter the following details, if they have changed, so we can add this to the Weekly Social database:&lt;/p&gt;"; print " &lt;form action='weeklysocial_reg.php' method='POST'&gt;"; print " &lt;p&gt;First Name: &lt;input type='text' name='first_name' value= ". print $row['first_name']."&gt;&lt;/p&gt;"; print " &lt;p&gt;Last Name: &lt;input type='text' name='last_name' value= ". print $row['last_name']." &gt;&lt;/p&gt;"; print " &lt;p&gt;Email: &lt;input type='text' name='email' value= '". print $row['email']."' &gt;&lt;/p&gt;"; print " &lt;input type='submit' name='submit'&gt;&lt;/form&gt;&lt;/br&gt;&lt;/br&gt;"; } ?&gt; the function of the loop actually works as the page will only display the form when user's are logged into the site. the problem is just the positioning of the text in the text fields. for some reason these are all 1 row above where they should be. Thanks
[/u/Soccham](http://www.reddit.com/user/Soccham) hopefully this extra code will mean it makes a bit more sense for you too
There is also [Bldr](http://bldr.io/). Seems like there are a bunch of these popping up recently and I honestly don't know which one to use.
I have to say that strikes me as not being part of the Front Controller duties. Front Controller, afaict, is about handing off to the "actual" controller and then perhaps sending the finished response, not about further modifying the response after the "actual" controller is done. But perhaps that is a lack of imagination on my part. Even if what you say is true, it means that the Response work is now spread across two sections of the application, which I admit is unappealing to me.
Most of those "wordpress heroku" Google results were custom buildpacks, modified from various third-party PHP buildpacks that were around. I plan on clearing out some freelance work then looking at how easy it is to install PyroCMS on there from scratch. We have a few command-line installer options so it should be relatively trivial, and with 2.3/develop supporting PostgreSQL or SQLite it should be much easier to get up and running. If that can be wrapped up in some sort of buildpack then I'll be all for it.
IMHO, that's not really the case here. The front controllers job is to deserialize the request, and hand it off to the appropriate controller (potentially routing as well). And its job is re-serializing the request. If you don't include re-serializing the request, and make that part of the controller's job, then you can no longer do a hiearchical model without "undoing" a lot of the serializing. Instead, you treat the controller as inside of your application, and the front-controller as the border between your application and the outside world. You'd have different front controllers for different formats. So if you had a REST api (returning data only) and a "normal web" api (returning rendered HTML), they would share the same controllers and back, but have different front-controllers (as the requests need to be deserialized differently). The same holds if you want to add a cli interface. You only need to replace the front controller. The rest of the controllers can be re-used. And it's not that "Response work is spread across two sections". It's realizing that there's a difference between representation and serialization. The representation is the job of the domain model (inside the application). The serialization is not.
This reminded me of an article by nikic [A plea for less (XML) configuration files](https://nikic.github.io/2012/07/09/A-plea-for-less-XML-configuration-files.html) He's not wrong. As a PHP developer, having to mash complex stuff into XML is not fun for anyone, so doing things like this - to PHP developers - is a great step forward. But, not everyone is a PHP developer. :) I would suggest that in quite a few instances, working with Phing is favorable over doing it all in PHP, especially seeing as the syntax is almost a 1:1 clone of ANT syntax. Anyone who has spent a decade fighting with Jenkins can use Phing without any confusion. So, for that reason I would beg whoever runs that to remove "Phing-killing" as the slogan. It's not accurate, and its pretty aggressive regardless. Two things can do the same job without one having to call the other one dead.
Fair enough! M
Hadn't heard of that! Defo work a look. M
Good to know that these are no longer issues, thanks for pointing them out.
It's obviously only my opinion! A lot of Phing was written before the "Modern PHP" era; I know that's a phrase thrown around a lot! PHP-FIG and Composer have improved PHP a lot over the last few years, and Task is built from the ground up to follow those 'best' practices, whereas Phing is not. I think the nikic article referenced in @philsturgeon's comment does a better job than I could of arguing for PHP over XML! I've found that the declarative approach for this kind of thing; Phing's XML, Grunt's JSON, is great for small, simple projects, but become unwieldy. Both build.xml and Gruntfile.js become huge files quite quickly that are difficult to navigate. It's much easier to break up large Projects with Task than it is with Grunt, and as far as I know it's impossible with Phing. It also brings lots of neat ideas from Node task runners, that Phing doesn't include, that you'd have to run the full Node stack to benefit from in a PHP project. I think Phil also makes a great point about aggression however, and I've removed the Phing references from the site. I'd like discussion and interest to be around Task rather than Phing! If only you could edit Reddit submission titles... M
Js minification should not be done dynamically...what a waste of cpu and unnecessary latency
Awesome. I appreciate the detailed response, and that makes a lot of sense. Another question if I may—would it be uncommon to use a tool like this for deployment? And does Task have anything for SFTP?
take another look at what /u/TIL_nothing posted before. All of those print statements are making it more complicated than it needs to be for you. PHP5 lets you simplify it a lot! &lt;?php if (!isset($_SESSION["authenticatedUserEmail"])) : ?&gt; &lt;p&gt;You must be logged in to register onto the Weekly Social. Please &lt;a href='login.php'&gt;&lt;b&gt;Login&lt;/b&gt;&lt;/a&gt; or &lt;a href='create_account.php'&gt;&lt;b&gt;Create an Account&lt;/b&gt;&lt;/a&gt; before doing this.&lt;/br&gt;&lt;/br&gt; &lt;?php else: ?&gt; &lt;p&gt;Please enter the following details, if they have changed, so we can add this to the Weekly Social database:&lt;/p&gt; &lt;form action='weeklysocial_reg.php' method='POST'&gt; &lt;p&gt;First Name: &lt;input type='text' name="first_name" value="&lt;?php echo $row[first_name'];"&gt;&lt;/p&gt; &lt;p&gt;Last Name: &lt;input type="text" name="last_name" value="&lt;?php echo $row['last_name']; ?&gt;" &gt;&lt;/p&gt; &lt;p&gt;Email: &lt;input type="text" name="email" value="&lt;?php echo $row['last_name']; ?&gt;" &gt;&lt;/p&gt; &lt;input type="submit" name="submit"&gt; &lt;/form&gt; &lt;?php endif; ?&gt; Here's something a bit similar that I'm working on that I hope you can use to kind of understand where I'm coming from. If you look in the span tags you can see where the php is being weaved into the html. This has to be saved as a php document though! &lt;?php if ($locations!=null): ?&gt; &lt;div class="store-locator-results"&gt; &lt;?php if (sizeof($locations) == 0): ?&gt; &lt;p class='store-locator-no-results'&gt;No locations found near the address you entered.&lt;/p&gt; &lt;?php else: ?&gt; &lt;div class="stores-left"&gt; &lt;p class="store-locator-results-header"&gt;Locations near &lt;?php echo $_GET['store-locator-address']; ?&gt;&lt;/p&gt; &lt;?php foreach($locations as $location): ?&gt; &lt;div class="store-location"&gt; &lt;div class="store-distance"&gt; &lt;span class="dist"&gt;&lt;?php echo round($location['distance'], 2); ?&gt;&lt;/span&gt; &lt;span class="miles"&gt;Miles&lt;/span&gt; &lt;/div&gt; &lt;div class="store-info"&gt; &lt;span class="store-name"&gt;&lt;?php echo $location['name']; ?&gt;&lt;/span&gt; &lt;br /&gt; &lt;span class="store-address"&gt;&lt;?php echo $location['address1']; ?&gt;&lt;/span&gt; &lt;span class="store-city"&gt;&lt;?php echo $location['city']; ?&gt;, &lt;/span&gt; &lt;span class="store-state"&gt;&lt;?php echo $location['state']; ?&gt;&lt;/span&gt; &lt;span class="store-zip"&gt;&lt;?php echo $location['zip']; ?&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class="store-phone"&gt;&lt;?php echo $location['phone']; ?&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;?php endforeach; ?&gt; &lt;/div&gt; &lt;div class="stores-right"&gt; &lt;div class="map"&gt; &lt;div id="map-canvas"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;?php endif; ?&gt; &lt;/div&gt; &lt;?php endif; ?&gt; 
Yup. I've been known to be on it from time to time as well.
Oh the irony. I was just looking up one of my [older posts](http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php) and noticed myself calling Composer a PEAR-killer. Maybe in that case it was accurate. :)
Have you encountered [Monolog](https://github.com/Seldaek/monolog)? If you haven't, it could open new possibilities for you. See the list of handlers on the README. As to your question: Sending email notifications when an error occurs is very good for, well, notifying you that an error occurred. But its a pain to debug from that alone, even if you email yourself stack-traces or error messages (you lose the ability to do comprehensive operations, like searching/grepping. Sure you could search your whole inbox, but that’s a pain) I’d say log your errors somewhere (a file, a separate DB, extremal service, etc), and send email notifications to you that an error occurred. But I’d limit that to critical and fatal errors, too. You can achieve this with Monolog.
Task would suit deployment very well, as would any task runner. As for SFTP; task/task itself does very little, it's the plugins that do the heavy lifting, but there's nothing for SFTP yet. I'm hoping that people will like the idea and implement the pieces they need, and share them as plugins. M
I knew I recognised your name! You're in charge of the double claw distribution at the moment! I'm still waiting for mine ;)
DAL/BLL/Application Layer generally is a good idea for most applications but: 1) Performance directly relates to the costs in a significant way. Depending on the volume you are expecting, this is potentially every write request in your application. [e.g. If you are building an application that is write heavy and is likely to suffer a high number of concurrent requests. You can't solve performance issues by caching. ] 2) You abstract intelligently and in an organized way which is something only experience can teach you, really. Any situation where your DAL:BLL:Controller maps to 1:1:1 is not an abstraction. An abstraction should be 1:n. [e.g. A single abstraction should be usable in N use cases, I would suggest a minimum of 3]. 3) You need to be sure to unit/integration test the abstractions. Otherwise, programmer A is going to make a change and break code written by programmer B because of a use case programmer A was unaware of. 
While I agree with the takeaway, such an architecture can be _extremely_ hard to unit test, since you can't do anything in isolation. The best you could accomplish is functional testing.
Literally the first paragraph talks about the ongoing work that's been done to speed up PHP: &gt;[S]tarting from PHP 5.0 we already made 6 times speedup on synthetic benchmarks and about 2 times speedup on real-life applications. We endlessly made improvements in PHP engine and OPCache. However, by PHP 5.5 release we weren’t be able to make any serious progress, and among other things started to experiment with memory managers, JIT technologies and other potential ideas.
I got similar with eval.in: https://eval.in/147224
 C:\&gt; php -f test.php int(1) int(1) C:\&gt; php -v PHP 5.5.6 (cli) (built: Nov 12 2013 11:35:48) Copyright (c) 1997-2013 The PHP Group Zend Engine v2.5.0, Copyright (c) 1998-2013 Zend Technologies Uh-huh...
You need to refresh the token. There is a `refreshToken` method on the `Google_Client` class. You should also use `setAccessType` and change it to `offline`.
Its not just XML based configuration. In fact, the default is Yaml. I will be adding functionality like robo/Task at some point too, but I didn't like the idea of building tasks using PHP
that one seems a little more fair of a judgement... haha
You can call it anywhere you want. You just need to pass it the refresh_token you get after getting your first access_token. Make sure you save the refresh_token somewhere (encrypted) for the user.
Wow, we're a lot closer than you thought. I spend a decent amount of time writing applescript or javascript to automate InDesign or Illustrator. The problem is I have become very efficient because of these scripts of mine. Others use them, but not all. Because I can get more work done I end up with more work than others. I have been pushing to build the system you just described. I had built one at a previous job using FileMakerPro and it made life so much better. Want to see what is assigned to you? It handled every phase of the work flow from scheduling, billing to production stages. It was fantastic. Where I work now the place was purchased by a publishing corporation who brought in their own systems. Telnet to a computer somewhere else and get access to their 20 year old database... The problem is it stops at scheduling and billing. All tracking for production is on paper. I have been pushing to build something that will aid in production. Perhaps I should speak to the VP when I next get a chance and present the idea to her. It could be used across the corporation in the end. 
Well, actually, there are a lot of problems with PHP security. 1. The most common setup is just running .php files if you get it into the folder. I was able to exploit that at work by crafting a .png file with `&lt;?php phpinfo() ?&gt;` and valid png data while at the same time fooling the image upload functionality into naming it img135235.php because the uploader took the file extension from the mime type (which is user submitted). So remote code execution and a free dinner for me for finding the bug. Remember, if you make sure that people write secure code by saying "put .htaccess in the image upload folder!" or whatever, a lot of people will fail at this. 2. Printing `$_GET` in one of your files is just so easy. Like "you searched for $_GET['search']". So that's why a lot of PHP sites have XSS vulnerabilities, because it's not secured by default. 3. Remote file inclusion, another thing that developers who are not careful might get burned by. You might try something like `include $page;` and if that variable is set based on something like $_GET or maybe the filename of the file you just uploaded (the filename could be changed to be '/etc/passwd/' or something) etc. PHP security is really hard because the defaults are insecure and you have to make sure you don't mess up.
PM me. Re shirt. 
None of the charting packages allow feature like controlling number of major and minor grid lines/ticks. I have looked at pretty much all of it. I resorted to forking jqplot and updating code to handle it. When you throw in reverse axis features and few others that are fairly standard in gnuplot, it is quite frustrating. In fact, gnuplot does produce HTML5 canvas output - however, if you are attempting real time updates, volume of javascript that you end up reloading make for a very inefficient website. 
Unfortunately, lack of response is nothing new. I have personally known of fairly large organizations - think big banks, online book stores - who do not take time to respond even after multiple face to face interviews. On the other hand, there have been occasions where the return call took couple of months. There is no point in calling back repeatedly. You thank them for the opportunity, repeat your contact information and move on. 
yeah this looks like it should help. I was just confused about keeping it in the loop but looks like that endif; command should fix that. I'll give it a go a report back!
&gt; slightly more troublesome That is unless you introduce some kind of streamed output. The controller waits for the stream to terminate before sending, while CLIs just output as the stream has data...
Slight preference for MySQL: I found that users/passwords for database access was much easier than Postgres. 
MySql is easier to set up, but Postgres beats MySql many times over with features etc. 10 years ago MySql won on performance, but today there isn't much difference. My preference is normally Postgres.
Postgres for features, though mysql/maria is catching up in that regard. MySQL is much easier set up and maintain a cluster.
Postgresql hands down. - A smarter optimizer - More ANSI compliant (it's easier to switch from postgres to mysql than vice versa). - Table inheritance - [Deferred constraints](http://docs.oracle.com/cd/B19306_01/server.102/b14200/clauses002.htm#sthref2934) which is handy for [class table inheritance](http://martinfowler.com/eaaCatalog/classTableInheritance.html). - Speaking of constraints, mysql doesn't allow arbitrary check constraints. - It seems to cache better (I can't prove this, just my personal experience). I really wish postgres were more popular..
I use Percona, a variation of Mysql with some performance improvements.
I usually use DB Abstraction, so do not get affected by the choice. Specifications usually come with what DB to use. Personally I do not deal with DB's large enough to notice a performance hit, as with modern hardware the DB needs to be in the GB's to get degradation. As for backups, snapshots are taken on the file-system level so DB does not affect those either. Edit: Fixed up my butchered spelling and grammar.
You can store it however you want as long as it's secure and encrypted. I'd say the database. The first time you get an access_token you get a refresh_token. By default you won't get another one. You can force a refresh_token to be returned every auth attempt by adding `approval_prompt=force` to the authorization URL.
Postgres 1000 times over. If you think PG is hard to set up, just use Amazon's RDS, it's very easy to set up over there. Postgres is many times faster when the DB is designed properly. It's fully ACID compliant and is more linearly scale-able under high workloads. The latest versions support JSON and the next versions will support JSON in binary format which will be fully indexable. You can write functions in anything from perl to plsql to javascript, which may not seem like it's necessary until you find that some languages work really well with certain datatypes (javascript/json for example). It supports more SQL features than mysql does-- like common table expressions with recursive support (which help a lot in views and queries that query and represent trees or directory structures). I could go on and on, but just make the leap to PGSQL and you'll be glad you did. The only downside to postgres is that you can't run everything on it-- wordpress and some other tools don't work with it without special versions, plugins, or tinkering.Some tools do though. I use Laravel and postgres together out of the box and it works well. 
So I know somebody will respond "just google it", but I liked your answer so I will ask if you can put it in your words, what is exactly table inheritance, speaking to someone who has never even heard the term before?
Is Percona a drop-in replacement?
Replication in Postgres as a weak spot means that it's more difficult compared to MySQL or that it is absolutely difficult in Postgres?
Yup. Just install and go (usually).
Its doable, but normally by 3rd party extensions. This seems to be a good summary of where everything is currently at with replication in Postgres: http://wiki.postgresql.org/wiki/Replication,_Clustering,_and_Connection_Pooling 
Would Amazon's RDS be a "fix" for this?
try amazon RDS and you won't complain about replication.. of course it's not free (after the trial anyway), but dang if it isn't easy.
I'm interested in this, as I say in a comment above. Would you be kind enough of pointing me to where could I start to learn about Amazon RDS, and specifically about replication? I haven't heard of it (Amazon RDS) until today.
AFAIK it still is. It will always be referred to as "MySQL" though. Not too different than how we always call Icinga "Nagios" at work. 
Curious, why unfortunately? I haven't found a better, more user friendly piece of blogging software.
I don't know much about Postgres on Amazon's RDS, I know it works well for MySql. A couple of things to note it would probably be using one of the solution above beneath the hood, and it means that you will need to host of Amazon (which may or may not be a problem). 
http://aws.amazon.com/rds/postgresql/ I'll give you a primer from my standpoint. Basically Amazon RDS is a platform where you can launch a DB server for several platforms (Oracle, Mysql, postgres, sql server, etc.) You sign up for amazon AWS services and if you like you can launch an RDS instance for postgres and choose the "free tier" which will give you a certain amount of free time to play around with a DB instance. After setting up the firewall settings (IE just what IPs are allowed to connect), you have a nice clean DB cluster to connect to and play with. RDS is managed by Amazon, so the installation of the software, the disk management, security settings and even things like backup, recovery, failover and even software upgrades are managed by Amazon. RDS allows you to take "snapshots" of you DB so you get a backup as easy as 1 click. In addition to these snapshots (and automated nightly snapshots), you can set up a "recovery window" where the DB saves log files back to a certain time (max of about 35 days)-- any time within this rolling window, you can restore back to any second within that time frame. Additionally "restores" are handled in a very cool way. When you restore, instead of wiping out your entire server, it launches a brand new server/db instance (RDS instance) at your restore point. You can then destroy the old server if the restore was successful and does what you want... it's very cool and normally would be difficult to pull off without extra hardware laying around. Additionally, RDS can be set up (not on the free tier) to be Multi zoned which basically means that you get 2 servers set up in different amazon availability zones, and if one server (or the entire zone) goes down, it will automatically fail over to the other one without you having to do anything-- ever.. it's just a checkbox and an extra fee, that's it-- since it actually runs on 2 physical servers, the fee is understandable. In addition to all of this, you can upgrade your server (the actual hardware) in mere moments and you can purchase a tiny server all the way up to a pretty large one-- as with most AWS services, you only pay for what you use-- so you pay for the disk space you use and the actual DB backups you choose to keep, and the time that the server is actually "on"-- if you turn the server off, you only pay a minimal fee for the data. I've got 2 servers through them and us them for email and rds and my monthly bill is between $30-$40, and all my servers are on full time. You can get a discount by buying a bunch of time up-front instead of paying it all out monthly. I hope this rambling helps at all-- feel free to ask any questions, I'll try to answer as best as I can.
That's just awesome. Thanks for great work!
"Streaming Replication (SR) provides the capability to continuously ship and apply the WAL XLOG records to some number of standby servers in order to keep them current. This feature was added to PostgreSQL 9.0. " So, at one point it was true that mysql did replication better than posgresql but no longer. 
This post is about partitioning, but the initial section on inheritance may help you, it was reposted on HN recently: https://github.com/fiksu/partitioned/blob/master/PARTITIONING_EXPLAINED.txt Note that this is about inheritance between sql tables. "Class Table Inheritance", as linked to in the parent, applies to inheritance between application classes, which are then mapped to sql tables.
Postgresql (9.3.3) was much easier to set up than Mysql when I last tried (on Linux).
This was a great elaborate response, thank you. How about replication, or master/slaves situations? I mean, does Amazon handle that too? Because it would be sweet to be able to do it with no -or minimal- modifications to the code
Both are potentially equally fine for the job. I would be cautious though about hiring anyone who does not recognise this.
I don't really care about running software like wordpress so it's not a downside for me. The only apparent downside I get from the other comments is that replication is lacking. What's your experience in this regard, specifically with Amazon RDS?
Why would you try to degrade this serious piece of pop culture critique Anthony?! Some of us are trying to help end world hunger here.
I actually tried my best to make it worse... In all seriousness though, as difficult as this is, yes it has been improved. Each chapter has been through technical review by 3-4 experts. It is still focussed on beginners though so don't expect it to cover everything evar. A big "feature" is that it is a quick read so I didn't get to cover as much as I would like. I want to avoid being yet another security book that people buy and never finish though, I feel that it's worth the sacrifice to keep it succinct.
Shit I forgot to include fortran since it seemed so obvious. Now I have my next blog post topic.
It does take FOREVER! Stop being a hater and learn some facts. Gosh.
Never heard of this Town Hall you mention. Is it some type of tea party terrorist organization bent on destroying code quality via extreme use of semicolons?
Mission accomplished.
MySQL is easier to set up. But if you want to go to MySQL route, I strongly suggest you to use Mariadb instead. Its a drop in replacement and has got a lot of performance optimizations in place, so much so that a query I wrote was crashing the mysql server, but execute in less than 100ms on Mariadb. 
I have saved a lot of time with [temboo](https://temboo.com/) in the past. Keep in mind the free tier covers only 1000 calls a month https://temboo.com/about/plans 
What was the query? This sounds like bullshit. 
Minimally dump MySQL for MariaDB. It seems that many of the Linux distros are already doing this. Tools like Sequal pro work seamlessly with it. Many people say that it is a drop in replacement but it isn't 100%. Very close but just a tiny bit different. I forget what I had to do but with a old creaky codebase it took me a few minutes to make the needed changes. I too am looking at PostgresSQL but can not yet comment on that. 
See [this discussion](http://www.reddit.com/r/django/comments/23vzie/django_with_mysql_bad_idea/), where PostgreSQL seems to be the preference.
It was a complicated query having around 12 joins and 4 subqueries, executed on a database whose size was around 2GB (around half a million rows). At first, MySQL was crashing after not responding for 5 minutes. That was a standard install though, without changing any settings in my.cnf or anything. Upgraded to MariaDB and the query just ran without any issues and it ran quite fast too. 
Dont forget boolean data types.
You're essentially asking whether French or English is best for writing a book. What you need to do is spec the system, make sure you look at open source systems out there, it's much easier to add new modules to an existing system than start from scratch. Finally get some proposals/estimations from your developers and pick the best one. It's good to consider the language / platform since this may have an impact on maintainability and ease of recruiting developers but this should only be one of your criteria in deciding on a system.
Have you ever looked at the source code? It's full of techniques you should avoid at all cost
I find sticking with singular just keeps things simpler in long run.
Sounds like it should be pretty easy then, if you can suck config variables from $_ENV sounds like your all set. Would you release this as an "official distribution" or something then? 
I was actually very recently working to refactor some old style code php at work. I wanted to use an object to I could make it chainable but the old functionality depended on it to be an array. So I thought I would implement ArrayAccess. Then when I had coded the solution I noticed that the application didn't work since array_key_exists always returned false when that class was used as the array. This forced me to go with an not as pretty solution and made me really pissed at php. I don't really care which order array functionality takes parameters, but when there is no documentation of a thing which has a big impact it's really bad.
That sounds fair. Just out of interest, do you mind sharing (or can you) who did the review? (not questioning their authority, but just interested to know).
By model I'd take it you mean entities? If so, I'd say stick with singular. And prefix with "Collection" if you need an iterable. Example: UserCollection repesent a list of User objects.
Ideally you shouldn't even run 'composer install' or 'composer update' straight on production at all. Include the .lock file that your tests ran your application with, that why you are sure that you get the exact same packages after running Composer on deployment.
thanks for the reply I appreciate it.
Thanks for clarifying that's a great analogy! 
Yes, I usually don't take such kinds of assumptions with php anymore. And you are right about the order of parameters in array functions. When people usually talk about making the language consistent they usually mention things like parameter ordering and function naming, completely ignoring much worse cases like this.
Choose ruby, you'll be happier in the long term.
It would have been a build pack originally, and I have not yet looked into "official distributions" to see what they are. In the past we supported another PaaS called PagodaBox simply by having a branch with a few bits set up, but this time it might be a Phing task or some other bash script. 
Seems as if there's variation in some core concepts of MVC. Singular if you're referring to models as database entities it seems. To me, anyhow. 
And let's not forget the main reason that MariaDB exists. It isn't owned and maintained by Oracle. 
Yes, pretty much, it's like MariaDB...
MySQL for the most part. Just so much easier. After reading the comments though perhaps I'm trading an easier/familiar setup for a great deal of optimization. Might have to reconsider. 
I do have the same preference for PostgreSQL over MySQL, but I can't agree to most of your arguments. &gt; * A smarter optimizer Most users won't see any difference. And I wouldn't claim that one's optimizer is always smarter, I suppose MySQL's is better on some specific queries. &gt; * More ANSI compliant (it's easier to switch from postgres to mysql than vice versa). I won't object on the ANSI-compliant part, but **I totally reject that it's easier to switch from postgres to mysql**. If you write ANSI SQL, it will almost never work in MySQL. One simple example : MySQL gives a different meaning to standard " quotes. And if one uses PostgreSQL's richer SQL (even plain ANSI), many advanced queries have no equivalent in MySQL. Try to make [recursive queries](http://www.postgresql.org/docs/current/static/queries-with.html) with MySQL, you'll need to write your own stored procedures. Now for differences: * Writing stored procedures and triggers in PostGres is order of magnitude more versatile and powerfull. * MySQL and PostgreSQL have very different authentication systems. MySQL's is simpler on basic needs, but hard to scale or customize. * MySQL's basic tools are arguably more mature : PHPmyadmin, adminer, mysql-workbench. Personaly, I have many bad memories with `mysql-workbench` and `mysqldump` and their various bugs. * MySQL has many quirks that depend on various options (global or par session). For example, texts will be silently truncated by default in short columns. MySQL in strict mode is a different beast. PostGres is more consistent. * PostGres is evolving with, IMHO, many interesting features added recently, while MySQL/MariaDB has less visible enhancements. Notably, you can store serialized data (JSON) in fields and query on their *structured* content. 
I'll second this...especially in the US and when dealing with personal data, there's a *lot* that's being done that shouldn't. It was briefly mentioned but this applies to development too. Imagine what would happen if regulators came in and found that most of the development staff have access to production data. While this makes sense for testing purposes, it's a nightmare for compliance. While things like redacted data are a pain to get set up, it's a must in this kind of situation. While some of the laws have changed since it was published in 2006, this article gives you a good overview of each major regulation: http://msdn.microsoft.com/en-us/library/aa480484.aspx
mysql/maria both have similar features to postgresql for the nosql store.
&gt; Seems as if there's variation in some core concepts of MVC. There are two types of MVC. There's the [pattern](http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html) which basically nobody uses. And then there are the bastardizations of it, which everyone calls "MVC". Which leads to the term MVC not really meaning a pattern anymore, but a concept of a separation of concerns between input, output and logic. That doesn't mean it's not useful, it just means there's nothing rigid about it. Anyone saying they've implemented the "MVC Pattern", who isn't strictly using observers to update views from model changes, keeping persistent instances and connections between them, either doesn't know what MVC really is, or doesn't care. It's a pet peeve of mine, because the more we abuse terms, the harder it is for us to communicate.
It can only be added in a major version, because it breaks it breaks internal API(source compatibility with extensions) and even the basic zval structures and stuff, so basically every extension has to be ported to work after the change. We are so early in the development of the next major version, that we don't even have a branch for it, so there is plenty of time.
&gt; using observers to update views from model changes, keeping persistent instances and connections between them Some of us (such as myself) didn't even know this was the actual definition. Given this, is it even possible to strictly adhere to the MVC pattern in the lifecycle of a PHP Web Request? There is no persistent state between requests, so how would one go about it?
Worked fine. Thanks a lot for that mate!
One of the few ways to actually implement MVC in a technically stateless environment is to introduce a persistence layer between server and browser. This can be achieved using the observer pattern and web sockets. Otherwise, it's not MVC. 
MySQL has a bool/boolean which is a synonym for TINYINT. 0 is false, 1 or higher is true. I have used booleans in MySQL and PHP/Python without any special code, just the DB values.
No, I pulled it out of my high horse's butt, what do you think? I've used both systems. Here's an exercise: write an enterprisey, pure SQL double entry accounting system for both databases and see which one looks better.
Using is certainly not the same as mastering.
I think it's technically doable to have the model update the view as the response is built before finally sending it. But it'd be completely illogical.
I don't know why you're getting so huffy. Innodb should handle it just fine.
Glad I could help!
Singular, so that your class names are consistent with your table names. Your foreign keys will also be consistent as well. * `Customer.php` * `TABLE Customer` * `Order.customerId` However: One thing that might come up is that "`user`" is a reserved word in some databases, so you might have to pick an alternative if you are attempting to write code that can utilize any db.
PostgresSQL. Version 9.3 and higher
I also create a Node/JS version of it here https://github.com/rezigned/uri-template.js
Try this with InnoDB: BEGIN; ALTER TABLE foo ADD COLUMN bar INT(11); COMMIT;
I tried setting up PostgreSQL once it was a massive pain in the ass. I couldn't even login as root. But anecdotal evidence is anecdotal, maybe it's gotten better. Maybe the packager has pulled their face out of the plunger since then, who knows.
Except that tinyint stores a lot more than 2 values.
At this point, you've got issue not with what innodb can do, but how it does it. I mean, I'm guessing that you think that schema changes wrapped in a transaction is some kind of must have for databases to be acceptable.
Yes, I've seen it bastardized by people that should know better. Well put. 
I really respect your opinions, I have learned a lot from you over the years. I agree that what I'm referring to is not "true MVC", from my understanding of it, but am using it for lack of a better term. Is there any particular term you use to accurately describe this system, or do you just refer to it abstractedly as a "separation of concerns"? Also, I'd really appreciate your input in regards to the actual question on SO, I'd love to know how you set this stuff up :)
I prefer singular, but I'll let you in on a little secret: From a practical standpoint, it doesn't matter as long as you are consistent across your company's code base. Take a couple of hours to write basic coding standards and then make sure they are followed in code reviews. After a month, nobody will even question it and will be coding to standard by habit. 
The only area where replication is "lacking" in RDS is that you can't set up read only replicants right now. With RDS, you can set up replicants for failing over.. that's the multi-az setting.. it's a checkbox and it works great.
Transactional DDL completely eliminates the need for external migration management. It may not be critical if you are running a Wordpress website. It is critical if every hour of downtime costs you $50k. BEGIN; ALTER TABLE games ADD COLUMN totals INT(11); UPDATE TABLE games SET totals = wins + losses, record_version = record_version + 1; COMMIT; 
What version of mySQL were you on? I'm pretty sure mySQL 5.6 out performs Maria.
So you could "properly implement" MVC using a combination of PHP, JS and web sockets with PHP being the model, JS being the observer, and web sockets being the transfer layer. That makes sense. What about when data is updated server side? I guess you would need a trigger / observer in PHP as well that would somehow push the update through the socket for updating client side?
with RDS, you check the multi-az box and.. boom, replication is set up. You now have 2 db's in the back end that you hit using 1 front connection point.. if one DB goes down, the other silently is promoted to master without you having to do anything. The only downside is that you cannot run queries off of the slave (IE read only replicant), but I usually don't do that in the first place for other reasons. Seriously, it's a checkbox and a fee, that's it (the fee is just paying for the 2nd server)
What you have just stated is that transactional DDL is the only way to manage changes effectively. You might want to rethink your claims. I co-managed an 11TB MySQL database for approximately a year. We ran somewhere between 4 and 5 nines, and with replication to external facing databases, no one ever saw an outage. 
I think you're on the wrong subreddit. /r/rails is that-a-way.
&gt; What you have just stated is that transactional DDL is the only way to manage changes effectively. You might want to rethink your claims. No, it's a *superior* way to manage schemata. It is perfectly possible to do so with shell scripts and a hand on the bible without outages; it's just undesirable. &gt; I co-managed an 11TB MySQL database for approximately a year. We ran somewhere between 4 and 5 nines, and with replication to external facing databases, no one ever saw an outage. Congratulations, but you're defending the indefensible. Feature wise and maturity wise, MySQL is a toy compared to Postgres.
And you don't think that using a native facility and removing an entire external software artefact (which requires care and feeding unto itself) is simpler?
&gt; Is there any particular term you use to accurately describe this system, or do you just refer to it abstractedly as a "separation of concerns"? There are so many variations by this point, I call it whatever framework's version of MVC. So "Rails MVC" vs "Zend MVC", etc. It sucks, because the "MVC" has no real meaning anymore, but what else can you do when nobody else seems to care...? As far as the actual question (singular vs plural), I'll respond with another question: *How many do you need?* Well, there are going to be cases where you need to operate on *one* instance. So the domain should definitely be singular. `$user = new User()`. There are going to be cases where you need to operate on *many* instances (think listing users). In reality, this is nothing more than a collection of individuals (the sum is no more than the parts). Therefore, I'd call it a `UserCollection()` or something like that. Note that a UserCollection is really just an aggregation of other user instances. There may be times where you want to work on 2 user objects, but then they will typically not be aggregated. It would be like `if ($user1-&gt;email == $user2-&gt;email)` or something like that. So there's no real abstraction benefit to separating the **2** case from the **many** case. So there you have it. Now, when you talk about DB schema design, things change a bit. A table of users is not a User, but is multiple (so calling the table User feels wrong). But it's also not an aggregation (so calling it UserCollection feels wrong). Instead, it's a table of users. Hence: Users. A note of caution: beware of any ORM or ActiveRecord that requires you to map class names 1:1 to table names. This often will result in a overly coupled system where schema changes mean business logic changes. And that's **always** a bad thing.
&gt; some framework creators took the concept Rails.
I use MySQL for Drupal because, being lazy I guess, but it's the path of least resistance but I use PostgreSQL for my Symfony apps. I prefer PostgreSQL. I have not found it more difficult than MySQL. pgAdmin III is very good. The only thing I miss with PostgreSQL compared to MySQL or MS SQL Server is the ability to query across databases on the same server by using fully qualified table names. Something like: SELECT ta.column1, tb.column2 FROM db1..table1 as ta INNER JOIN db2..table1 as tb I wish PostgreSQL had that. I think 9.3 has something close but not for live queries. Not really a problem but something to be aware of is the case sensitivity of PostgreSQL. For an efficient case insensitive search, I think you can build indexes that include a function so you can have an index for something like lower(name), then make sure your queries only search for lower case. 
They weren't the only ones. But yes. :-)
ADR!
My personal favorite MySQL quirk that's been breaking many applications lately: Horribly named utf8 and utf8mb4. The utf8 standard should handle 4 byte characters. This labeling really should have been utf8mb3 and utf8. So many dying applications trying to insert emoji's into the database. 🔥 This cute little fire (Unicode: U+1F525 (U+D83D U+DD25), UTF-8: F0 9F 94 A5) is a perfect example of something that craps out some apps. 
The js would handle subscriber updates, those updates would be published by the server, to the client in real time based on how the subscription is defined. if the subscription contract is defined to receive any updates to model 'x' , the websocket server would push-deliver those updates to the subscribers and js event handlers would be defined that can consume those published updates. This is where the web WILL go in the next 2-3 years. I've recently implemented this in several reporting dashboards, and in a call center/ VoIP app. It blows people's minds when they see updates happen in real time based on changes to the data model from disparate interfaces. Someone just placed an order in your storefront, your admin dashboard view updates to reflect this without your interaction in any way. Server push technology is the cats ass. 
My thoughts: interface SomeFunctionality { public function setActive(); public function setCompleted(); public function setCancelled(); } What I mean by that. Hide logic of changing states (whether value may be integer or string) in protected methods. If you're unsure whether will you need new states or not - in near future http://en.wikipedia.org/wiki/YAGNI
Let's be clear. MySQL is not a database. It's a metadatabase capable of running many database engines. It's not limited to one flavor, and that is both it's greatest strength and weakness. It can interpret, with the right engine, anything as a database including a database. I believe that MySQL was always created to be as pluggable as possible. You want to write your own security audit plugin you can do it. You want to create a storage engine that is powerful and plug that into MySQL, you can do it. If you want to create something simpler, you cN do that too. If you're running a traditional three tier development structure (like you should) transactional DDL is a mute point.
New states may be added in the future, and given that I'm writing the spec and leaving the code for others to implement, it's difficult for me to decide whether this should be written or left for the developers to add in case they need it. Having said that, your take is clean and simple. Is this common practice? What are the downsides? Is it better to write getters and setters for each state? When is it too much? Sorry for so many questions! :)
Indeed, not very bool-ish. You could always store it as a `CHAR (0)` where `NULL` is false and `""` is true. Only 2 possible values :D
I think the downside is to have too much getters and setters for any new state. For me , I just put to accept strings and document the acceptable cases, and define a fallback option which should be used is none valid state is provided.
If a "state" is simply an atomic concept in your use case, with no metadata tied to it, then I think this is overengineered, and you'd be better off doing something like what /u/IDCh suggested, or: interface SomeFunctionality { public function setState($state); } ...where `$state` is the string (you could keep the enum if you want to abstract the literals).
&gt; It's a metadatabase capable of running many database engines. Of which it has exactly two: MyISAM and InnoDB. The rest are edge case hacks that are barely useful. The MEMORY engine is useful if your schema is misdesigned and does too many queries instead of internal caching. The BLACKHOLE engine is useful to intercept and process external CSV imports by a trigger. I can not fathom use cases for the rest. &gt; You want to write your own security audit plugin you can do it. You want to create a storage engine that is powerful and plug that into MySQL, you can do it. Yes, but I don't want to *write* database plugins, even though I can do it in both cases. I want to *use* them. And [here](http://www.postgresql.org/docs/9.1/static/contrib.html) are the ones shipped with Postgres. The reason MySQL is popular is the low bar of entry and default configuration that allows lax compliance with standards. That is to say, it is easy to use by undisciplined non-professionals, which unfortunately many PHP developers are. It became a meme precisely at the point when dynamic website technology began to develop and web construction workers needed something that could store data and wasn't a plain file. The enormous blunders by MySQL developers, including the one character password bypass and the silent destruction of triggers on ALTER TABLE is not a testament to MySQL's quality. &gt; If you're running a traditional three tier development structure (like you should) transactional DDL is a mute point. In fact, I am, and because of regulatory compliance, external schema management makes a huge mess. I am forced to pile hacks upon hacks so that the credentials of the administrative account, which is allowed to read restricted objects and modify schema, is not retained in the application tier, where the schema changes are injected - because the external schema management needs access to the runtime environment of the application layer to do its job properly.
Well, I blame them. Rails was that thing that started Web 2.0 pastel colors scaffold everything revolution where pretty websites could be created in minutes by people who could barely recall their own name. From there it spread to the likes of CakePHP and such.
DM'd the full list. The publicly announced editors are: David Stanley Eric Roberts Michael Wales 
Table names should be plural for the same reason entity classes should be singular. I want to create a **user** and then store it as one of my many **users**.
More than likely it's the integration between your web server and the php handler. It sounds like you're using Apache and fastcgi, in which case Apache is timing out and "hanging up" the connection to fastcgi. The solution is to tweak the Apache timeout settings