stonecypher, it's simple.. stop being a total dillhole.. you just make people feel bad. we'd much rather you go away than share your "intelligence" with us. Nobody cares how smart you are if you're just gonna act the way you act. Either improve your attitude or GTFO 
Try this. if (!isset($name)) {DIE("Don't play with fire."); else ($name = $_FILES['file']['name'];)} 
 Parse error: syntax error, unexpected T_ELSE
While it is a best practice, you are correct. "MAX_FILE_SIZE" is not required to fix the problem. Duly noted.
This is correct, thanks. Implemented, tested, and verified working.
Thoughtful response on strict checking. Great insight. Thanks.
Added to IRC, thanks for this 
The working solution, per PHP 5.3.0, has been posted to [pastie.org](http://pastie.org/2252233) Thanks, everyone!
Some observations: **TagContent.php:** $strRootInclude = "if (!defined(\"AS_ROOT_DIR\")) define(\"AS_ROOT_DIR\", \"".AS_ROOT_DIR."/\");"; Let's translate this to English: If `AS_ROOT_DIR` is not defined, define it as `AS_ROOT_DIR` followed by a slash. But if `AS_ROOT_DIR` is not defined, `AS_ROOT_DIR` followed by a slash is just going to a slash by itself, possibly preceded by an error message telling you you're trying to access an undefined constant. This ain't going to work. Besides, you already defined `AS_ROOT_DIR` at the top of the file, so you'll never be in a situation where `AS_ROOT_DIR` is not defined. ob_start(); ob_clean(); Why are you cleaning the output buffer as soon as you've started it? Note that `ob_clean()` only cleans what has been outputted since the last time you started an output buffer, so your code will clean nothing. $file_contents = $strRootInclude."?&gt;".file_get_contents($plugin_path); ... [snip] ... @$return = eval($file_contents); What's wrong with plain old `include`? Change it to: include $plugin_path; There, it's much cleaner and much faster. As for the usefulness (or lack thereof) of `$return`, see the next paragraph: Don't get me started on the error suppression operator... By suppressing all errors and relying on the return value of `eval()`, you're only catching syntax errors and ignoring everything else, such as warnings. This is bad, very bad. You absolutely want to know if your template produces any errors, and you also want to know exactly which line of which file is responsible for it. Trust me, you'll feel the pain the first time you need to debug a template with an obscure bug. Newbies care about syntax errors because they produce lots of them. Experienced programmers seldom produce syntax errors, so they care about actual bugs. **TagScanner.php:** # Wrap plugin tags in a div by their own name $strContent = "&lt;div id=\"".$strTag."\"&gt;\n".$tagTag."\n&lt;/div&gt;\n"; HTML element IDs are supposed to be unique. What if you want to have two instances of the same plugin on the same page? Boom, you get an ID conflict. Consider using classes instead. Also: $_rd="";while(!is_file($_rd."angry_square.php")) $_rd.="../"; Others have already commented on this. I'll just point out that the same line seems to be in a lot of different files. Just define it as a constant in `index.php`, and it'll be available _everywhere_ regardless of file or function scope. That's what constants are for. Finally, kudos for using object-oriented programming! That already puts you one step above a lot of PHP devs, though there's obviously a lot more to learn still. Keep learning and subject yourself to reddit's ruthless critiques, and someday you could become good enough to contribute to a popular web framework. Even if this particular CMS ends up getting nowhere, it would have been a good exercise trying to figure out what it takes to make a CMS or framework. Edit: numerous clarifications. 
Not fantastic. Read @isometriks's comment in this thread. Using `include_once` will prevent you from inserting the same template twice on the same page, because PHP silently ignores subsequent includes. For example, you might want to have "previous page / next page" buttons both at the top and at the bottom of the page. If you use `include_once`, those buttons will show up at the top but not at the bottom. This can be an extremely frustrating bug. Maintain a list of templates that are currently being processed. `$name` would be added to this list immediately before `include` is called, and removed immediately afterwards. Your function would return false (or throw an error, etc.) if it detects that `$name` is already in the list. This prevents recursive includes. For example: function get_form($name) { static $processing = array(); // Read up on the "static" keyword! if (file_exists($name.'.php') &amp;&amp; !in_array($name, $processing) { $processing[] = $name; include($name.'.php'); array_pop($processing); // Remove last item from array } else { return false; } } If this sounds too complicated, just make sure that you never call templates recursively. &gt; Am i going to accidentally my server You accidentally a word.
I agree with you up to a point :) and I could have elaborated a little more on why I posted my template reply. [For me] the key aspects of using smarty/any template engine was to remove the ability for any non programmer to even try to use php and enforce proper mvcness. It doesn't matter how much one preaches to people about keeping business logic out of views, I inevitably find it happening at some point. I've seen mysql calls, curl calls you name it calls that don't belong in views. Like anything, there are always trade offs. Gain something here but lose something there... For the most part I use php in my views unless I'm working on something that I know might need to be more secure in the future. An interesting side note. Programmers are the people that complain most about using template engines :) non programmers just think it's awesome that they can 'do' something without needing to learn any programming. Psychology 101!
 $file = isset($_FILES['file']) ? $FILES['file'] : null; if(!$file) die('No file uploaded');
I agree, to a point. Now is better than never. Although never is often better than *right* now. (excerpt of Zen of Python, by Tim Peters) You should resist putting crappy code out without a thought. This road leads to pain and suffering. :)
There is also no other way for me to take pride in what I do. Even if I had to write PHP again (currently it's Python) I would still want to deliver good - call it craftsmanship.
Sound advice.
Yup, that's the "old" way of doing it before 5.3 when I think __DIR__ was introduced.
&gt; You accidentally a word The whole word?!? 
Using string replacement for large template files with lots of variables is not the greatest idea, a lot of people would prefer to load a class with variables via some method, then have them accessible to the template using &lt;?=$t['varname']?&gt; if at all possible, it is faster, and it also allows for plain php in the templates, which can be mega handy. Just in case you wanted something extra to code in there.
Learn a few other programming languages. Build something large with them. You should come back to writing better PHP code than before.
&gt; Keep learning and subject yourself to reddit's ruthless critiques, and someday you could become good enough to contribute to a popular web framework Is it alright to submit your work to reddit for critique? Do you know any code critique sites? A StackExchange site maybe?
It's in there just in case some of the plugins want to use mysql. Some of the plugins that I use for my website use mysql and I just didn't take the variables out for the github post^^ AngrySquare wasn't about providing premade functionality to people who can make it themselves. It was just about having an organised way of storing code and reusing it for a new website. Basically just promoting generalisation. :)
Didn't know this, thanks :)
Thanks :)
Nothing at all, this is the first real thing I've written in PHP without any real experience. The real point of me posting it on reddit was just to get some useful feedback and opinions :) I appreciate your input, I'll use absolute path names in any future versions^^
Cake 2.0 fixes a lot of these issues. I used to think (as a junior who hadn't been taught otherwise) that Cake was amazing, but the more experienced I got the more I became frustrated with it's limitations and bad design of some of it's core components. I even rewrote the [ACL classes at one point](https://github.com/rich97/acp). I now run Lithium. Aside from some missing features, it's just a joy to use and so easy to extend. Though I imagine a lot of that joy actually comes from PHP5.3.
Aha, thank you :)
Aha, a better solution, thanks
Okay, thanks. I didn't put any of my plugins up on github simply because I only have a few run of the mill ones like register/login. There is a mysqli interface for my plugins, so I didn't take the variables out of the config file. Posting AngrySquare online wasn't really to offer people any premade functionality, more so, a simple framework that they can use if they desire, and to get me some feedback on one of my first PHP ideas. Thanks for your feedback^^
Wow! There's a lot there. Thanks for your feedback, I really appreciate it. **About eval:** I don't really have many syntax errors. The reason why I catch the return value of eval() is so I can use error_get_last() and print it to a page instead of crashing that page with an "eval() error on line x of TagContent.php" error. Is there a better way of me catching ALL errors and offering an informative error string that doesn't crash the page with just "eval() error on line X"? I've taken out the ob_clean, thanks :) **include $file_path** Will that allow me to store the output the same way as file_get_contents and eval()? I'll have a tinker later on after work. **TagScanner.php** - where I've wrapped the plugins in a div with ID of their own name - I thought it would be useful if you want to use getElementById - is there another way of doing this using class="etc"? When I define a constant in index.php - is it going to be cached and available for all other files that get called independently? Why doesn't that work in config.php? ;s Furthermore, if I define them all in config.php and then include config in index.php, will that fix my problems? I'd like to offer a way of letting the user put in what directory AS is in, and then prefix that with the root directory, i.e. say it's in a directory called "blog", they define a variable saying "blog/" and we prefix with "/var/www/" . "blog/" and define that as a constant. Thanks for your constructive feedback, OOP is new to me as I've only just finished my first year of CS at University - but I want to expand my knowledge as much as possible. Any further help would be greatly appreciated!
Also being able to alt tab out (or ctr+alt, or just switch windows once you figure out how to ssh in with putty etc.) is pretty priceless.
Use whatever is more conveniant :)
&gt; i just let the users input html and use strip_tags to only allow ones I want. How do you then remove undesirable attributes in the element you allow? eg &lt;img src="notthere.jpg" onerror="[javascript here]" /&gt; or &lt;img src="javascript:[javascript here]" /&gt; IMO you'd need HTMLpurifier or a good (!) KSES implementation.
yep, I have only used eval() on a few occasions (not in this site I'm working on), and I've leaned to fear it.
Thanks, I can try and give something like this a whirl.
You're welcome :)
What exactly do you think the database is accessing? DB access might add some overhead for query parsing and what not, but in the end, it's all disk access.
Null byte attacks should largely be [remedied soon](http://markmail.org/message/aod5kwuipsu3aqye).
Why? eval() is a very useful tool in php.. It only becomes risky when you pass user generated variables to it.
&gt; Is there a better way of me catching ALL errors and offering an informative error string that doesn't crash the page with just "eval() error on line X"? Yes, use set_error_handler(). &gt; include $file_path &gt; Will that allow me to store the output the same way as file_get_contents and eval()? I'll have a tinker later on after work. Use the output buffering functions to store the output if necessary. Using include() will allow PHP code caches to cache the byte code of the included file. 
Oh man, ColdFusion, is that still around?
Okay Guys, SC is a big retard that doesnt now any better. So be nice to the retard.
&gt; The reason why I catch the return value of eval() is so I can use error_get_last() and print it to a page instead of crashing that page with an "eval() error on line x of TagContent.php" error. `error_get_last()` will only give you the last error. What if the template contains two or more errors? Besides, your code calls `error_get_last()` only if `$return` is false, and `$return` is false only if `eval()` encounters a syntax error. So in fact, you're not catching any errors except syntax errors. Just let syntax errors crash the page (as they should -- and PHP will tell you where it happened anyway), and focus on catching real runtime errors. By "runtime errors" I mean warnings, errors, and notices caused by malfunctioning database connections, temporarily inaccessible third-party APIs, trying to access the wrong file, trying to read nonexistent array keys, etc. Unlike syntax errors which can be fixed once and for all, these runtime errors cause subtle bugs that can be difficult to track down. &gt; store the output the same way as file_get_contents and eval() Yes, use output buffering. ob_start(); include $file; $output = ob_get_clean(); In fact, you're already doing this in TagContent.php. One thing you're going to lose by switching to `include` is being able to `return` anything from inside an `eval()`, but you're not using this functionality in AS anyway. Otherwise, `eval()` only ever returns null or false, which isn't particularly useful for anything. &gt; where I've wrapped the plugins in a div with ID of their own name - I thought it would be useful if you want to use getElementById - is there another way of doing this using class="etc"? It is true that classes are more difficult (and slower) to access in JavaScript. But you should be using something like [jQuery](http://www.jquery.com/) anyway, so you can do `$('div.etc').whatever()` and it'll apply to any div with a class named "etc". Also remember that an HTML element can have as many classes as you want. If you do: &lt;div class="hello world reddit rocks"&gt;&lt;/div&gt; the div will be accessible using any of the four classes. This gives you a lot of flexibility, both when styling them with CSS, and when maniuplating them with jQuery. The extra convenience is absolutely worth the minor performance hit of using classes instead of IDs. &gt; When I define a constant in index.php - is it going to be cached and available for all other files that get called independently? Why doesn't that work in config.php? ;s No, it'll be available only in files that are included from index.php. If you call another PHP file directly without going through index.php, of course your constant won't be there. But why would you ever want to bypass index.php? All modern CMSs and frameworks use `mod_rewrite` to make every page go through index.php, and for a good reason. But if you really want to be able to bypass index.php (e.g. you want existing pages in your site to be able to import some of AS's functionality without making them part of AS), you can define the constant somewhere else, like config.php, and make sure you include _that_ file. Whatever you do, do it in one place and one place only. It's called [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself). 
Don't do it too often, or we'll think you're looking for free homework help. As for code critique, there are [a few](http://refactormycode.com/codes/recent/php) / [places](http://www.bytemycode.com/tags/tag/PHP/) where you can get it, but neither site seems to be particularly active. I wonder why, because people love criticizing other people's work on the Internet! SE is good for getting answers to specific problems, but I don't think people there would appreciate it if you just dropped an entire github repo on them. But one of the best ways to learn is to read good code and try to emulate it. The [Kohana](http://kohanaframework.org/) framework, for example, is simple, elegant, and very well written. Try to figure out how they do various things like loading configuration files and displaying templates. (Skip the more complicated parts for now.) Try to understand why their method might be better than what you're used to, and ask clear questions on StackOverflow if you're stuck. 
ArrayObject has it's own internal storage; I'm not sure why you're putting your own in there. You can access it by calling parent::offsetGet(), parent::offsetSet(), etc. ArrayObject also implements IteratorAggregate already, so it's kinda pointless to specify that in your derived class. Edit: Now that I look at it again, you've essentially just copied what ArrayObject already does, with the exception on returning false for non-existent keys, which IMO is a bad idea unless you never plan to store booleans in your arrays.
Trying to build a better array construct is a pretty natural progression for PHP developers, here's my attempt to make a fluent builder style Array class http://ominian.com/2010/03/22/stupid-php-tricks-the-array-builder/ Unfortunately I have used this in one place in a production environment, but with a LOT of unit-tests around it.
Forgive me if I'm misunderstanding the purpose of your ArrayBuilder, but from your example: ArrayBuilder way: $x = ArrayBuilder::FACTORY()-&gt;hello("World")-&gt;digits(1,2,3,4,5)-&gt;foo("BaR?")-&gt;toArray(); // keystrokes: 89 // can be used as an array literal: no // function calls needed to build array: 5 vs the regular way: $x = array('hello'=&gt;'world','digits'=&gt;array(1,2,3,4,5),'foo'=&gt;'BaR?'); // keystrokes: 70 // can be used as an array literal: yes // function calls needed to build array: 0 Not trying to disparage here, just genuinely curious.
If you think adding your own prefix will make it so "no-one can mess with your shit", you have another thing coming...
It's just me playing around with PHP magic methods, the production version incorporated type validation as it's used to make it a very complex JSON object more readable and minimize syntax errors. So instead of $msg = array( "foo" =&gt; "bar", version = "123", "modules" =&gt; array( array("name" =&gt;" xWidget", /* 12 more properties */) , 15-20 more "module" definitions ); it's $msg = ArrayBuilder::Start() -&gt;foo("bar")-&gt;version(123) -&gt;modules( array( ArrayBuiilder::Start()-&gt;name("xWidget")-&gt; ... -&gt;toArray() , 15-20 more "modules" ) )-&gt;toArray(); With the above, it would be trivial to extend ArrayBuilder to create two children: MessageBuilder and ModuleBuilder and add public methods to provide additional input validation. Combined with unit-testing, source code is ideally a write once, read many times datum so for me it's not important to avoid saving my fingers from typing as ensuring whoever reads my stuff has a chance of understanding what the hell I was doing. 
&gt; ... to provide a concise Model View Controller for ... I'm sorry but this is bugging the hell out of me. "Model View Controller" is not a noun, it's a phrase containing three separate nouns which represents a behavior. You can't have "a" MVC any more than you can have an AJAX or a LAMP, there always has to be a proper noun to assign the behavior to such as an AJAX request or a LAMP software stack. You have a MVC **Framework**, please stop teaching people the wrong terminology.
Magic methods are fun to play with indeed. And keys as methods is an interesting take on it that I'd hadn't ever considered.
I would much rather have the "old" way and not have to reverse-engineer your code. I'm lost trying to think of how you could introduce syntax errors when producing JSON, unless you're one of those that constructs the string manually...
Yeah, I would definitely classify mine under Stupid PHP Tricks. It was originally just a way to get around not having to check if a key is set. 
 var_dump( $test[42] ); // 'foo' var_dump( $test['42'] ); // 'foo' This is expected behavior, not sure why it's documented. And I don't like the idea at all. One of the most common complaints with PHP is that it's types are too dynamic; making them even more dynamic is only going to introduce more failure points (not to mention more code executed at runtime). I can see how this was probably a fun exercise, though, since I've played around with the same concepts before too.
Or even Autoit would be better, and its fairly easy to learn.
I meant syntax errors with PHP, the JSON object I had to build was somewhat nightmarish in complexity and was outside of my control as it was a external vendor's idea. If you've ever worked with ExtJS, imagine building an entire ExtJS application ( window manager, panels, nested forms, data grid, etc... ) in PHP then passing it to a REST service as a JSON POST. Still even I know using my *Builder classes was entering into a grayish area where I might not be able to defend its usage. My hope is that whoever maintains it after me, will see the unit-tests before deciding to hunt me down and firebomb my home in a fit of rage.
It's impressive how you can pack so many bad practices in so few lines of code. Surely this PHPUniversity thing is some kind of troll, right?
Seems more like a scam to me.
You have problems with syntax errors while coding in PHP?? Are you using notepad or something?
There's nothing special about that, although I was thinking about what would happen if those two keys returned different values. This was just an exercise to allow both $test-&gt;foo and $test['foo']
TIL it's ok to use reserved words for function/method names, so long as they're called using magic methods. I was totally expecting this to blow-up, but it works fine, lol: $x = ArrayBuilder::FACTORY()-&gt;__halt_compiler()-&gt;function()-&gt;private()-&gt;class()-&gt;namespace()-&gt;php()-&gt;eval()-&gt;array()-&gt;toArray();
Ideally I use Komodo, but sometimes I'll be on vi or in one terrible client's case nano. Also in retrospect, I meant logical runtime errors vs. syntax errors as usually php -l catches my mistakes when coding from a console.
Oh wow, I had skimmed your blog post, but looking at this a little more closely this is pretty slick.
&gt; although I was thinking about what would happen if those two keys returned different values That's why I said it's expected that they're the same; it's impossible for them to be different (and thus, demonstrating both is superfluous).
Joomla just released 1.7, many, many talented programmers slaved for over 3 years to build one of the best combinations of CMS and framework. I have no idea why you thought you could beat that 
It works fine today. Tomorrow? Who knows. That's why they're reserved: not because they don't work, but because the devs won't give a second thought to breaking your program if you use them in any way.
Quit it lol! 5 years ago I was just happy to have a job coming in from college. Little did I know Coldfusion was not setting me up for a bright future haha. I remain stuck here until I learn some PHP :) Coldfusion is an easy language to learn, it does everything a sever-side language can do. You can embed actionscript in your .cfm pages to produce flash.That's the only cool part on my end. The community and tutorials, documentation isn't as massive as PHP. Starting to love PHP, I even ask questions on the CodeIgniter forums, I get a response within hours! I ask a question on Reddit and I am overwhelmed with responses in MINUTES!! Reddit is bomb! You agree! XD
Excuse me. I would be most interested if you point out a bad practice, along with a description, citation, etc. on why it is bad, so that I may both learn from and correct it. I don't even expect you to do this for free. But I do expect you to back up your insinuations with a little more than what you have given. Thank you.
I wouldn't consider it a framework, because it really is only one thing. Besides, on the wikipedia link I sent, the first line is &gt; Model–view–controller (MVC) is a software architecture,[1] currently considered an architectural pattern used in software engineering. So clearly it can be used as a noun. EDIT: I added the word "skeleton" to the description(thanks tobsn). Thank you.
what if a word gets reserved that wasn't before?
I know what ColdFusion is, but last time I heard of it was back in 2001 :). I just don't know/visit any website (as far as I can tell) written in ColdFusion.
Essentially, this happens when you fall very short of what people would expect a serious attempt at something to look like. Imagine an average 7 year old painting something, and then trying to use that painting to sell his services as an art teacher. Do you really expect serious critique?
You're fucked, unless you read the changelog prior to updating PHP versions.
Haha, you bastard, who'd have thought there was a way to overengineer declaring an array. The unit tests are the icing on the cake. Very enterprisey indeed. As cool as it is to see somebody's mad little project, if I ever find myself working somewhere where I come across this class being used thanks to some crazy colleague, I *will* be coming for you!
Look at FETCH_INTO on Pdo.
Wow, didn't realise it was a bad idea. I rescind my advice!
LOL, php "University" and it's running on wiki . The programmer 'Theodore' has another project on that site (far from mvc), and the randomly placed mysql_query() call is giving me shivers. eek.
Eh, it's ok. I don't self judge my worth based on karma from a glorified message board. If people like what I say, so be it. If it adds value, even better. If my comments are downvoted because somebody (or several people) have too much spare time, ego issues and are haters... so be it. It affects my life not at all. :)
How crude. I don't think hopeseekr is passing him/her-self off as an expert, but not all of us are rockstars with years of experience and genius fueling our passions. Some of us are still learning, and he/she is doing what is best to learn. To make something and get some feedback on it. While I haven't actually downloaded the code to take a look (sorry), I think that no matter how bad it is, hopeseekr has not come across as arrogant or anything that would garner him this derision. Constructive criticism works better than insults. Of course, if you are only here to make yourself feel better at the expense of another, you can die in a fucking fire.
Except that is not the case at all. hopeseeker IS trying to pass himself off as an expert. Not only that, he is actively trying to get people to pay him 5 dollars a week for PHP instruction. That's the whole point of his site/business - which he is promoting here. If this was a case of a PHP beginner trying out his first new framework, he would get a pass and probably some help from the community. Again, this is simply not the case.
Ah, I actually didn't look that far into it until this post so now I feel bad, but agree. 
MVC Skeleton.
You can also download the ubuntu source package, it includes scripts and probably patches for the "Ubuntu" way and you may want to adapt it to the newer versions. One thing you can also do is subscribe to the security lists from Ubuntu so you are up to date and see the workarounds before they release the patch. But let me tell you, they are very fast to deploy patches and even more with popular packages like PHP. Maybe this flaw is not a problem with the package deployed by Ubuntu or you have to enable/disable a module or a config parameter for this to happen and that's why it's not patched yet? From my point of view as a sys admin, I would refuse to install a SVN snapshot in a production server as they tend to be unstable and who knows if there are more flaws introduced everyday as the development cycle is different for an "alpha" version. Good luck.
MVC is a software architecture, and blue is a color. You don't say that you own "a blue" or talk about "a MVC", you own a "a blue chair" or talk about "a MVC framework". It has nothing to do with English being versatile or evolving - it has to do with your sentence being wrong. And not just that - you don't even seem to grasp why your quote from wikipedia has nothing to do with why your use of the term MVC was wrong. Just admit the correction, learn from it, and move on.
I went to check that other project to see what the hell you were talking about, and the first mysql_query() call I saw used a parameter from a POST request directly in the query string, no escaping or prepared statements involved. When the first 30 seconds of looking at a php file are enough to spot a "PHP 101" SQL injection vulnerability, "shivers" doesn't even begin to cover it. Some university that must be...
Ah, you are a genius :) I'd never heard of mod_rewrite before. Use the *include $file;* method for the time being - but I'll still look for a handy way of catching all/most errors without crashing the page (if there is one ._.) Thanks for your help, I really appreciate it. Now to read up on mod_rewrite and use it within AngrySquare :) I'd appreciate any further tips / resources you have for implemented mod_rewrite or improving AngrySquare. Have an upvote or two :)
If you remove the slightly unpleasant tone to the reply you got, it might go something like this: &gt; Calling it "an MVC" sounds a bit weird. Nobody else ever really uses MVC as a noun in the way you have. &gt; Kudos for trying to help people learn the concept though, it's something a lot of people seem to struggle with at first. I mean, you *are* wrong to use it as a noun, but the tone of the correction makes you less receptive to the idea because it kind of paints you as an idiot which you obviously aren't. Come to think of it, there's a similarity between what's happened here and what people were talking about in that StoneCypher thread the other day. You can't correct people in a condescending way and expect them to respond well to it. Also, if it were StoneCypher and not ChiperSoft that you were dealing with, you'd already have a 300 word reply quoting every line of your response, full of words like (headpat) and so on, especially since this is exactly the type of "teaching people wrong things" that he claims justifies treating people like shit. But this is beside the point. I promise you that you're the only person I've ever known to use 'MVC' as a noun in its own right. English is a versatile language but this is just a case of *very* *very* *minor* incorrect usage.
You know what, this is a fair point. * It's best to stick very strictly to one-class-per-file. Even if it's just a simple little exception, it's just a million times easier to maintain when a codebase inevitably grows. Maybe in this case it's not supposed to grow, but it's what people are used to finding. It also makes it much more simple to write a decent class autoloader (in fact this should probably be the main point but I'm bored of editing this comment). * "I'll make everything a static method as an easy shortcut to implementing the Singleton pattern" (ControllerCommander) is a phase a lot of us have been through. I definitely did it once a few years back. I see it a lot in other peoples' code too, and it's never in great code. First, [the singleton pattern isn't considered that great any more](http://misko.hevery.com/code-reviewers-guide/flaw-brittle-global-state-singletons/). Second, the "everything is a static method" pattern robs you of constructors and destructors, which you might not need now but might need in three years when requirements change. Plus it's just generally ugly and hacky-looking. Here's [some guy's code I stumbled on a few days ago while idly browsing frameworks](https://github.com/dannyakakong/PHPzy/blob/master/src/classes/db/dbmysql.php). One day this dude is going to have an application that needs to use two different database connections, which is a pretty common occurrence, and this design decision is going to fuck him hard on that day. I have personally experienced exactly this situation. That's the type of gotcha you open yourself up to with this idea, on top of how difficult it makes unit-testing. * You're using filter_var($_POST['name']). There exists a function more suited to what you're doing there, which is [filter_input](http://php.net/manual/en/function.filter-input.php) * The autoload function you register in PHPU_MVC doesn't autoload. The first time it runs it loads eight specific files, and any subsequent calls just return null and don't load anything. And then right after registering it as an autoload function, that first call gets made anyway. So every time a class is requested that isn't declared yet, PHP will make a pointless call to that method to see if it can load the nonexistent class. [It should take a classname as a parameter and attempt to find and load the file containing that class](http://php.net/manual/en/language.oop5.autoload.php). I've seen far worse code written by people who claimed it was good, and I'm no John Carmack myself. But I think these four things are pretty uncontroversially true and probably not too tough to change.
I question why you didn't link to it if it's on the same site. EDIT: I've searched the handful of projects on phpu.cc and only found mysql_() functions in a quickly-built console script that I wrote back in 2008. So you're just blowing wind, hacking my server or something. Now, I *do* teach people mysql_() functions but just so they can work with legacy code. The course teaches off of PDO by default.
What is "that other project"??? I'm really confused and it's my own site.
Where is your "constructive criticism" if you're just going to attack my coding skills without showing any evidence despite me directly linking to source. Find a flaw in the open sourced app linked that is worthy of your attack.
Thank you.
Sorry, I never thought about it. We talk about "the ORM", "the MVC", "the DAL" at work (everywhere I've worked) all the time. I guess I just got inculcated. I was hostile because that the first response and ***it*** was negative (his tone is horrible, assuming I'm an idiot) and I felt like he was nitpicking just to be a dick.
Just focus on the open source project.
Would you *please* look at the code and *please* just give me an honest opinion? I would be very thankful at this point.
I had a problem, a serious problem. filter_input(INPUT_POST) is NOT unit testable. It is simply impossible to provide $\_POST[] vars and have it unit testable. After asking about it on the PHP internals mailing list, I was told to use filter_var($_POST['var']). In my main apps, I use a framework for this, but I didn't want to have to package that **just** for two filter validations. Plus I wanted to show people filter_() functions.
I rewrote ControlCommander in my main library to a proper commander $commander = new ControlCommander(); $commander-&gt;addFollower(new GenericController); $commander-&gt;addFollower(new GreetingsController); and implemented it as a proper Observer of all the Controller subjects. I **really thought** about porting it to the demo, but decided against it due to time constraints (busy this weekend) and thought that the two times it is called would be forgiveable for like a week or so. I didn't include the TODO from my main project that included refactoring that part.
&gt; It's best to stick very strictly to one-class-per-file. Even if it's just a simple little exception I respectfully disagree, and **NO**, that does NOT mean I am wrong and you are magically right. EVERYTIME I do this, the exception is **tightly** coupled to its class. For instance, [ControllerException](http://kobol.phpu.cc/mvc/reports/coverage/controllers_ControllerCommander.class.php.html) should **never** be available without ControllerCommander. Therefore, we can just agree to be equally right.
Seems people are being a bit hostile... I'll be honest - I really like it :) Cheers! ps, if you get around to making any changes/improvements to it - I'd love to see them. pps, Why did you chose the CC license over the MIT or BSD licenses? The CC license feels horribly bloated in comparison, while still retaining the attribution clause.
Yeah this is a problem I've run into myself before. Sorry for assuming you didn't know, it would have been quite a feat to somehow know about filter_var but not filter_input!
I guess the idea here is the definition of crappy versus unmaintainable. All my code is maintainable, but if you read up on MVC etc, it is crappy and 'bad'. The real issue here is that MVC doesn't fit all paradigms and specifically the code I deploy doesn't fit into an MVC universe.
Heres a [link](http://bazaar.launchpad.net/~theodore-phpexperts/consolechat/trunk/files) 
I have read the other comments, and it may seem from one point of view a lot of hostility. I would like to take this opportunity to remind us of what open-source contributions have done for us. I applaud your contribution, like any other, and like all open-source projects before it, may it be collaborated and improved upon. Thanks.
In the subreddit [r/improviseit](http://reddit.com/r/improviseit) which I created for the site, where I originally posted this, all the posts got downvoted to zero and removed from the page!
relevant [thread](http://www.reddit.com/r/PHP/comments/iu7xw/stonecypher_can_you_tell_us_about_your/c26slio?context=3) 
If that's supposed to be a Front Controller, that's not how a front controller works. First of all, the FC is a Singleton, and it loads a single action; not multiple 'followers'. Observers? It's pretty clear that you haven't spent any time with a major mvc framework. I'd recommend picking up an intermediate-level book on ZendFramework.
Somebody downvoted the posts to zero in Improvise.it's own subreddit, damn haters! So [here](http://improvise.it/dissection.html) is a direct link.
Check out miniPHP Studio (http://exvision.net/miniphp/classic/). It has a nice UI, and uses PHP 5.
More power to you, then.
Was on the GigPress site, saw this comment linked at the top, and could not resist looking at the code (I tried not to, but after I saw this comment I had to know). You're right, it's terrible. I'm going to have trouble using this plugin now, if I can even use it at all (which is even less likely, considering that I'll have to make a number of changes to the functionality before I can).
I think maybe you have the wrong approach. What might be beneficial is if you write a series of utility functions included by any file you have for generating bits of html. Say, with css: function print_css($css) { if(is_array($css)) { // Loop through and create markup } else { // Single item, create markup } Keep in mind you can specify optional parameters for functions you intend on using in a variety of different ways. Take for example: function print_header($title, $css = null, $js = null) { // print out things like &lt;html&gt;, &lt;head&gt;, any &lt;meta&gt; echo '&lt;title&gt;' . $title . '&lt;/title&gt;'; // $title will be required if(isset($css)) { print_css($css); // As outlined before } if(isset($js)) { print_js($js); // In a similar fashion } // Any last bit items: &lt;/head&gt;, &lt;body&gt;, etc. } Say you have that in a file called boilerplate.php and all it contains is functions to generate bits of markup you'll use for each page. At that point you can re-use what you have without potentially confusing gotos all over the place. include('boilerplate.php'); print_header('My Page Title', 'this_page.css', array('jsfile1.js', 'jsfile2.js')); // Do your unique content or programming logic here print_footer(); // You can create this with optional JS to place Sure you'd be repeating yourself with the include(), print_header(), and print_footer(), but is that really such a bad thing? The logic for that utility is maintained by boilerplate.php and you can make updates there and have this translate to any page implementing this mini-API you've created for yourself. Using goto all over the place is just messy and hard to maintain.
Ok this is going to sound harsh and flip, but please take it in all sincerity; read a PHP book. You clearly have no idea what you are doing and you are teaching yourself really bad habits which need to be nipped in the bud immediately. You need to read a PHP book and learn some good habits right now before these terrible ones get ingrained in you. Some quick advice: 1) You should not have a separate PHP file for every page on your site. You should have one index.php which is then called telling it what page to display. 2) You should separate out the display concerns from the logic concerns. For more information on this look up Model View Controller (or MVC.) You don't need to stick to strict MVC implementation or be pedantic about it, but when writing a project you should take the time to separate out the logic and processing from the output. For a simple site you can be quick and dirty about it but you should at least separate those concerns to keep things clean and maintainable. 3) Never use Goto. Ever. It's good that you got an inkling that you shouldn't be using goto. If you find yourself thinking you need to then you need to step back and figure out what you've done wrong to bring you to that point. In the above case the problem is that you're writing a unique PHP script for each page and trying to include your header and footer in a weird way instead of just having one index.php which always includes the header and footer and calls whichever other page in the middle. Here's some quick advice on your specific project: - Look into smarty templates. Use those to separate out the interface (HTML &amp; CSS) from the PHP logic. - As I've said 3 times, write an index.php that is the main hub of your site. There may be reasons to have other scripts that are called directly but those are usually going to be utilities or scripts that vary in function so wildly from the rest of the site that they should be separate. Your index.php should maybe look something like this: require_once('configuration.php'); // configuration file sets variables like site name, etc. require_once('smarty.php'); // or whatever templating engine you choose $display_page = $_REQUEST['display_page']; // perform some escaping on this, make sure it just contains a-z and only use a-z for template names. // site logic $smarty-&gt;parse("../templates/header.tpl"); $smarty-&gt;parse("../templates/$display_page.tpl"); $smarty-&gt;parse("../templates/footer.tpl"); exit; That's just a quick example of "correct" flow for a simple site. Lastly, there's no shame in using a Framework. It will not hinder your learning. In fact I would say you will learn better using an open source framework because you will have well written code to learn from.
&gt; I don't want to use a framework, mostly because I'll learn more building ground up. This is the wrong approach. Using a framework will give you lots to learn; they are all mostly well designed and use a proper approach. Trying to go at alone doesn't give you anything to learn from. Once you've understood how a few frameworks work, you can always try building something from the ground up without it. 
Wow, that actually makes a lot more sense. Thanks for the help, I'm glad I asked!
Building standalone windows EXE files from Perl code is a pain, even with tools like PAR. And if he were to go that route he might as well just write it cross-platform to begin with.
You shouldn't rely on any information sent by the client. Not on the filename, not on the mimetype. Use [`finfo_file()`](http://php.net/finfo_file) to detect the actual file mimetype based on the file's content. function file_mimetype($filepath) { $finfo = finfo_open(FILEINFO_MIME_TYPE); $mime = finfo_file($finfo, $filepath); fclose($finfo); return $mime; } if(file_mimetype($_FILES['myfile']['tmp_name']) == 'application/zip')) { }
O man! That was a project I forked from a student in order to help him improve his app, which was in a very very bad state. // Derived from the Atnischismogenesis Project 5 // Originally Copyrighed (c) 2011 Mark Fancey. 6 // To the extent possible under law, Mark Fancey has waived all copyright and related or 7 // neighboring rights to antischismogenesis. This work is published from: Canada. He granted his stuff into the common domain so other people could help him. I in no way coded any of that, I just copied it verbatim. I put it on launchpad so others could collaborate more easily. Here's that project's posting on r/php: http://www.reddit.com/r/programming/comments/g6tln/here_are_the_first_five_screencasts_explaining/
Um. This is hilarious. JUST_COLLECTS_MYTHS just pointed out how singletons are bad, even for controllers, and now you're saying they're good. Can you agree opinion is divided?
Licensing is of course very hard to decide. This project was not done in isolation. Over at the PHPU, a group of us have been learning how to develop MVCs from scratch and this is part of the Rosetta Blog project, which is licensed under the BSD License but only to past and present members of the university. There was some concern that they had paid for high-quality source code to learn from but now it would be given away for free, so the compromise was to license it under the slightly more restrictive CC-Attrib license and keep the BSDL for the members.
About the autoloader: Very few production products are complete. I'd say none. There's always room for improvements. Yes, I could have nitpicked some of your suggestions to death before releasing. Yes, I have a 20-item TODO list, yes, that will almost certainly increase. It's not about how perfect your first release is, it's 1. how likely is it to fail? and how badly? 2. how sure are you of it operating correctly (QA + unit test coverage)? 3. how quickly can you release? 4. how often can you release? I was satisfied that this was a releasable product, that it had 100% unit test code coverage, that it was QA'd by a QA pro, and that it was time to release the first iteration. That's why I appreciate your suggestions for improvements. I also apologize for my tone to you, sir/madam. I read your comment after about an hour of reading pretty much nothing but seemingly-hostile comments. I really appreciate you taking the time to analyze the app **and** providing suggestions; your time definitely will not be wasted, I assure you. Thanks.
And this isn't released for the 10 year vets who know everythign already! this is released for utter noobs who know nothing. based on that, I do believe this is a ***far*** better sample of good code than I ever saw "growing up" as a coder, and it's better than pretty much any one saw in books, etc. if this is not the case, I would **love** to be introduced to a book **aimed at beginners** that teaches all the concepts in this code so far, in an easy-to-understand, highly-documented fashion with unit tests.
To further your knowledge a bit, you could use preg_match (regex) to grab the last part after the final period (but use finfo_file as suggested): \\.(.*)$ grabs everything after the last period. You could foreach loop through an array of acceptable file extensions once you have that. 
You in no way coded any of that, yet you shamelessly added // Copyright (c) 2011 Theodore R. Smith &lt;theodore@phpexperts.pro&gt; to all files? What are you, a liar or just a plain egomaniac? If this is truly a student project to which you added nothing by your own admission, then added your ©, renamed it and published it with yourself as sole maintainer, then yeah, I can see why you are using the word "university". Seems to mirror very well a lot of the college experience. I guess you couldn't have taught your "student" to use launchpad instead.
The FC is not a singleton. ZF chooses to have Zend_Controller_Front also implement the Singleton pattern, for their own reasons. See: http://framework.zend.com/manual/en/zend.controller.front.html Furthermore, ZF will eliminate the use of the singleton pattern in Zend_Controller_Front with ZF 2.0. See: http://framework.zend.com/wiki/display/ZFDEV2/Zend+Framework+2.0+Roadmap
First off, your code seemed to work fine for me using "test.zip", "test.0.zip" and also "just a test.zip" (in PHP 5.3.6). So I'm not sure exactly where your problems is, but here are a few things I would check: * Make sure your $\_FILES variable actually contains what you are expecting it to contain (specifically the "tmp\_name" value) using a PHP debugger or simply print\_r the $\_FILES array to see what it contains. * Since your allowed extensions are lowercase, make sure you [strtolower](http://www.php.net/manual/en/function.strtolower.php) the string you are checking against. [in\_array](http://www.php.net/manual/en/function.in-array.php) is case-sensitive, so although you would probably consider file.ZIP valid, your function would say it is invalid. * Consider using [pathinfo](http://www.php.net/manual/en/function.pathinfo.php) to find the extension of your filename. There is nothing wrong with doing it your own way, but my preference is to use built-in functions when I can. Like some others have said, using the file extension to check a file type is sometimes not very reliable, so [finfo\_file](http://www.php.net/manual/en/function.finfo-file.php) can be used to try and find out what type of file the server thinks it is. It will return you a mime-type (something like "application/zip" or "application/rar"). Keep in mind that this relies on the server being able to read some "magic" bytes at the beginning of the file and match them against a database of known values, and it doesn't always work perfectly. Depending on your PHP version and your server setup it may or may not work for the file types you are trying to detect. I would make sure to test it on the server you are going to be running the site on. If you are planning on these uploaded files being served back over the web, I would make sure that they are not going to be run through the PHP interpreter at all. It's possible for someone to create an image that also has PHP code in it, and it may be able to be done with other files types as well. You can read more details [here](http://birdhouse.org/blog/2007/06/19/php-inside-image-files/), but I would just make sure the extension of the uploaded file is not "php" or any other extension that your web server will run through the PHP interpreter, or even better would be to store the images in a directory that is not set to route any files through PHP at all. In Apache this can be done either in an .htacess file or in your web server config. [Here is an example](http://www.electrictoolbox.com/disable-php-apache-htaccess/) of how to do it, although it might only work if you are using mod\_php. Again, I would test it to see if it works for your setup if you are planning on using it.
Doing a simple substr/strrpos would be much faster than executing a regular expression match to get the same thing. Might be a negligible, but every microsecond counts! Also, that regexp wouldn't work if there's more than one period in the file name - something like \\.([^ \\.]*)$ would work ninjaedit: take out that space since I can't figure out how to escape the ^ from making it superscript
JUST_COLLECTS_MYTHS pointed out that any pattern, like singletons, can be used badly. Using the singleton pattern where it makes sense is nothing to be ashamed of. The PHP community currently has a trend of "singletonitis" were it is used often and where not needed.
If you were not planning to implement the autoloader, than you should not have used it incorrectly. I am also not sure why you named your autoloading class PHPU_MVC. Instead, have your bootstrap (index.php) set up a correct classpath. Have each of your class files begin with references to dependent files using require_once. (_once makes sure the classes are not loaded if they have already been loaded) This makes the PHPU_MVC class irrelevant. You would simply require your FrontController class, and call your dispatch method. Every other class required would be loaded based on require_once calls. Why require_once over include_once? See: http://alihartono.wordpress.com/2008/01/14/include-vs-require-on-php/ If you are aiming your tutorial at beginners, you should be teaching them this sort of practice as opposed to an autoload hack.
Not trusting the client has already been mentioned so I'm just going to add that you should make sure that you use the function is_uploaded_file() to make sure that the file in question was actually uploaded. Otherwise, an attacker could include files outside your root etc. Not sure if you're using the function somewhere else, just thought it was worth noting.
At least we now know you're a troll and derive pleasure from being a combative asshole.
If you store objects into sessions you *have* to use an autoloader for them to be unserialized successfully.
Yesterday I wrote a reply to you but couldn't be bothered checking it before posting it. It went something along the lines of... I noticed everybody here shitting on your code, and you asking for specific examples. So I thought, "I'll have a look, can't be too hard to find if everybody's saying this". I spent a good half an hour reading through and clearly couldn't come up with all that much. I think there's a hivemind tendency to check the comments first and formulate about 90% of your opinion based on whatever the top two or three comments say. I also know what it's like sitting on a bunch of code that you know isn't perfect yet but that if you keep aiming for perfection it's never getting released. There's a *lot* I'd change about your code, but then there's a lot I'd change about *any* code, everybody hates everybody else's taste on first exposure to new code. Oh, one thing I just noticed from a teaching point of view. Your GreetingsController passes off a person object to GreetingsManager, which validates the object and returns a specially formatted string using $person-&gt;name, which in turn is passed to the template. I'd argue that ensuring that required user input is present is the responsibility of the controller (the empty() check), ensuring that the model object has valid data (the is_string() check) is the responsibility of the model, and that formatting a string based on the properties of the model to send to the user is the responsibility of the view. Different people would almost certainly organise those three things differently to me (I'm not 100% sure that's how I'd do it myself), but in my opinion, GreetingsManager is a potential source of confusion as a teaching aid because it does a little bit of M, a little bit of V and a little bit of C. 
What does that change? You are not storing objects in the session. And even if you were, you do not have an autoloader. Your autoloader would not help in that case anyways, as you are registering it after session_start(). 
Fair enough. I understand the issue with singletons and unit-testing. I've read about implementations where the FC is part of a DI container. With this implementation, the FC itself is not a singleton, but it is still a single (sometimes static) member of the DI container, which means it's still limited to a single instance. 
at the end of the day, I would just rather get paid, and maybe learn to write beautriful code without the asshole. Like everyone does already
nope
Are you done?
http://en.wikipedia.org/wiki/Illusory_superiority
http://en.wikipedia.org/wiki/Illusory_superiority
http://en.wikipedia.org/wiki/Illusory_superiority
Is there any similar function for non 5.3 users?
http://en.wikipedia.org/wiki/Illusory_superiority
he suffers from this http://en.wikipedia.org/wiki/Illusory_superiority
Just install the finfo extension if you are not using 5.3.
This is a school project, he doesn't have time to learn PHP, learn a framework, learn two more frameworks, and then write it in plain PHP. In fact losing two days to getting familiar with a framework can be bad enough.
They still hate you and they would be glad to see you go. It makes them feel inferior.
Not sure why you're getting downvoted, the `mysql_*` functions are all being deprecated.
Looks like it might get added after all. http://svn.php.net/viewvc?view=revision&amp;revision=313641
Its up to you whether you want to do the bare minimum. You can write a php app anywhere, but people will hire this guy because because of his flexibility and attitude. Now if you feel that the bare minimum is enough...well ok but in the real world some people choose to do more, and the rewards encourages that.
Edit again: ignore this. wrong info. $stmt-&gt;bind_param('s', $table); Binds the variable 's' with value $table. $sql_gps = "select * from `$db_st`.`?` where `lat` NOT LIKE '%0.0000' limit 1"; can be translated to: $sql_gps = "select * from wifi_st.`:s` where `lat` NOT LIKE '%0.0000' limit 1"; What you need to do: $stmt-&gt;bind_param(':s',$table); Edit: replaced the ? with :s. s does not mean a string in the bind_param function, it simply tells the function which parameter the second function argument should bind to. 
You can't bind a parameter to a table name like that. If you are seeing an example of this somewhere, can you link to it? If you really do need to dynamically change which table you are selecting from, I think your best option is to use the old fashioned: "SELECT * FROM $table WHERE ....." Just ensure that $table is a valid table name, and don't trust user-supplied values in there. I can't say for sure just based on that code snippet you provided, but I'm not entirely sure what you are trying to do, and I'm not sure how prepared statements would fit into what you are doing.
I'm pretty sure this is wrong. 's' means that the parameter is a string.
According to the PHP manual for [Bind_param](http://www.php.net/manual/en/mysqli-stmt.bind-param.php) the first argument for it is a type (String, Decimal, Integer, or Blob), not the variable that you want changed.
Ah ok this explains a lot, I did not know that you could not bind a parameter to a table name. I am pulling information from a table, to generate the table name, so its not directly user supplied data. Ill just have to keep that limitation in mind. Thanks for the help
Oh you guys are right.. I was under the assumption that OP was using PDO. 
You sound very out of your depth here
But Joomla *is* shit.
Haters gonna hate. "xBox is way better than PS3." "maybe, but computer gaming is the best" "not if you're on a mac, pc rules" "for gaming maybe but linux us clearly the better os" "joomla and php? use a real language like Java" iPhone vs andoid... some people just like to complain 
it's not shit, its just that drupal and wordpress are clearly better
First, just because tons of people are doing something and think it's a good idea does not mean it's a good idea. See: Vancouver Riots &gt; This kid is 20 years old and has a degree from Art Institute online or some shit and he thinks he knows more then 300 collective programmers who have slaved for 3 years creating the latest Joomla? That laughable to me. Joomla, like anything, has its pros and cons. Perhaps all of the cons applied to how this kid would normally use a CMS. For instance, Joomla is extremely bloated. Maybe the kid just needs a template system that pulls page info from a database? In that case Joomla really does suck and his rant makes sense. I have from time-to-time said "WordPress is terrible". WordPress is insanely bloated and resource intensive. And it makes certain things that are ordinarily simple, insanely complicated. For instance, WordPress uses static links for *everything*. If you move your WordPress site, expect to spend a lot of time doing search and replace in the database. Even still, I use WordPress a lot because a client wants a site they can update and they want this and that for cheap. With WordPress plugins I can often accomplish these tasks quickly and cheaply. **tl;dr** All CMS/Frameworks have cons and sometimes most of those cons apply to a certain developer. Edit: &gt; Is it really necessary to have all the optimizations and load times and etc. for a simple $2000 website? I mean most sites wont ever see more then 20,000 hits a month and that's being generous, do they really need all that? Generally having good programming etiquette will keep your sites relatively optimized and incur at most a modest penalty in the amount of time it takes to initially build. This small investment in time pays off when/if a site hits it big and makes it easier for devs after you to pickup where you left off.
See, I've felt for many years that *Drupal* is shit. I don't try and force that opinion on others, but it is very definitely mine. People try and use it like a framework, and it's just not. As a CMS, it can't even update itself - doing updates is a management nightmare for Drupal. Me and a few other developers almost got to sit down with Dries and talk to him at Zendcon last year, but he ended up having to leave early.
The problem with programmers is that they aren't from da hood homie' ... arrogant programmers are usually nerdy fat kids who haven't been spanked and humbled enough times. I guarantee you that 99% of the times, the programmer who comes with that aggressive attitude is just a frustrated asshole in the rest aspects of his life...and he would never express his opinion so freely if that was a one to one conversation, he wouldn't go on to say you aren't as worthy as he is to your face, because then you could smash his face (I'm personally sick and tired of guys with that fucking attitude, srry)
After taking a look at PDO, I now see why people love it so much. I can do what I was trying to do with MySQLi, but failing, in PDO, and its works.
I can't comment much on Joomla or Drupal, I'm more of a wordpress guy. WP is just so damn user friendly and if I have to do something out of the scope of WP then I just use a framework.
You make valid points. I don't try to use Joomla for more then it is, but it does what its supposed to do pretty well. I can launch a custom Joomla site in a week or less. Its more cost effective on my end, and most sites are simple. For instance, one of my clients was tired of magento and I moved his site to Joomla. He gets about 100k+ hits a day and processes many orders just fine. In fact, the old magento site, on the same server, used to crash all the time. Joomla has proven to be more reliable, and easier to maintain. My client could care less, as long as it works, and it works very well.
yes, and ranter's gotta rant (im ranting). why cant everyone just help each other out and stay humble while doing so?
open mind is key. I'm always playing devils advocate with myself. It just sucks when you think your on the right track to something and somebody just slams you down. 
People are idiots, plain and simple. People develop a hatred of various things I think in response so that in their mind they can feel assured that they "picked the right thing" more than anything. I ran into a guy that hated anything that someone else wrote. I asked him if he wrote his own operating system. He told me "Yeah, when I was a kid, in Qbasic". The funny part is the guy is so far off base that he doesn't even know it. When I was first dipping my toe into automation I was doing it through Excel. If I solicited advice, I'd have been told I needed a "real" database, that VBA was horrible and stupid, and that I should do it right. The net result was that I'd never have learned ANYTHING, because what people wanted me to learn was not applicable to my job (too high a barrier to entry / software not available at work etc.) At the end of the day, can you get the job done with the tools you have? If the answer is yes, GREAT! If the answer is no, time to start looking for some new tools that look like you could reasonably use them. At the end of the day though, I hate it when people suggest that someone else dumps years of work down the drain because their language or framework of choice generates a FORM better. Seriously? I'm not trying to create a missile guidance system, I don't need to cure cancer. I need a fucking FORM. Most websites at the end of the day are so blindingly simple, and get such little traffic, that I honestly have not seen a good case for being dogmatic on language choice. I've seen a lot of people that are seriously passionate about it, but not me. What I use is just a tool to get a job done. The small company I work for has about 30 websites right now sitting on a VPS, and COLLECTIVELY they probably get 30k page views a day. The context is just as important as the tool, and because people won't realize that or lack the needed objectivity, these kinds of discussions will exist forever. IMO that's part of why John Carmack is cool. He stated that he thinks DirectX is the better API at this point, but it would just cost too much to switch because of all the tools they have developed / workflow etc. OpenGL is "Good enough". That kind of pragmatism seems rare unfortunately. For some reason people seem loathe to admit that their tool is not the "best", but honestly I don't think it matters. Yes, I use PHP and so what of it. If anyone would like to PAY ME to learn for example ruby on rails, then FINE. Send me the fucking check. Otherwise, don't try to push shit on me when it means that you are essentially telling me I should spend hundreds of hours making the change "just because". Make no mistake, it COSTS you to learn something new. The question is, is what you pay worth it? Is the ROI great enough to merit doing it? If you want to learn something and find it fun, then that's great its its own reward. At some point though I say "ENOUGH", I just want to get a job done, and its not fun smashing my head into the wall for hours over something I could have done in another language in 5 minutes. Not only that, but in terms of the ability to set things up or get help, this can be huge. I was trying to dabble in python and its been nothing but a hassle. I just wanted to set up a VM with Ubuntu on it, but imagine my surprise when it was much harder to deal with than PHP. (In Ubuntu, you simply do sudo tasksel, select LAMP, and you get a fully functional LAMP stack.) Then I tried to use Vagrant on Windows 7 which uses VirtualBox. No dice. For php I just install WAMP and 5 minutes later, I have a working development environment. Couple that with xdebug and NetBeans, and I couldnt be happier. Where does python make up for that in terms of ease of use? Whats that ease of use worth to me? Obviously A LOT. I want it to be a fucking tool, not an obstacle. 
Bravo!! I don't think I could have said it any better! You summed up every point that frustrates me, dead on. I literally feel refreshed reading this. Thank you!
Just a suggestion, use PDO. I find it better than MYSQLi and i think most developers would agree.
Nice argument. I don't see how I could refute that.
Perfect analogy
&gt;take out that space since I can't figure out how to escape the ^ from making it superscript Same way you escape in PHP... \\^lksjdf (although RES doesn't seem to acknowledge the escaping. Bug!) Edit: Nevermind! It doesn't work on superscript for some reason. - http://daringfireball.net/projects/markdown/syntax#backslash
Drush pretty much fills that gap, unless you are running into dependency issues and even if it did update itself, those would still exist. Also Drupal 7 is capable of updating itself. I think saying that its not a framework is kind of pedantic IMO. I'm sure that technically you can make a case that its not a framework in the same sense that CakePHP / Zend / CodeIgniter / Yii are, and its probably not quite like Django CMS as you really cant extract "just the framework" part, but splitting hairs IMO. At the end of the day, I think that Drupal / Wordpress and others are here to stay, because people don't want to pay for a site to be built from scratch. Oh, I know I know "I am a coding god and can build a site from scratch in my framework of choice as fast as someone can build a site in Drupal" but spare me. Lets grant that this is true *for you*, to get the obvious kneejerk reaction out of the way. At the end of the day, the average coder cant build a site suited for a CMS from scratch as easily as it can be made in Drupal / Wordpress. If you CAN, you are not an average coder, and are not likely to be charging mediocre amounts of money for making a site. I knew someone that wanted a from scratch multi-person blogging site. He said he couldn't stomach even *seeing* WordPress. His site went from a Wordpress blog, to a Drupal blog, to a 2nd Drupal dev site that never got launched, then a 3rd Drupal dev site that never got launched, and now its back on Wordpress. As long as he thought he was going to get it made "for free" (meaning he wasn't going to have to pay for it) that was a viable option. If making a site with features like Drupal was fast and cheap, Drupal and Wordpress just wouldn't exist. If you can and DO turn out sites for 1k - 2k that have all the features that Drupal has, then ... uh raise your rates or go do something worth doing.
Premature optimization is the root of all evil. Or in more obvious terms: If you over invest in the initial version and spend too much time getting it out there, you may NEVER need to handle more traffic. Unless you are fairly talented, I think that your architecture / decisions will need to be addressed as a site grows, no matter who you are (unless you just have bucket loads of cash to throw around).
The OP is using `move_uploaded_file()`, which performs the same checks as `is_uploaded_file()` before moving it.
Please don't think that I'm saying they're bad products. I've used almost all of the CMSes available at one point or another, and when I have to use one, these days I end up using WP most often. The maintenance is simply easier. I have not tried Drupal 7 - so I can't give an opinion on that. I spend most of my coding time working on much more nitpicky features for my job - I've done the "write the CMS from scratch" routing, and it's not something that I have the desire or time for. I'm very glad that there are OSS products out there that can do it. There *are* people out there who try to use Drupal (or WP, et al.) as if they *were* stand-alone frameworks. That's just disturbing. :p
just before the first $this-&gt;_DBQuery I'd do this var_dump($this-&gt;_DBS); die(); doesn't sound like your DBConnect statement is successful.
object(DBConnect)#3 (8) { ["PDOConInfo":"DBConnect":private]=&gt; string(38) "mysql:host=localhost;dbname=myDB" ["myStmt":"DBConnect":private]=&gt; NULL ["myResult":"DBConnect":private]=&gt; NULL ["user"]=&gt; string(15) "readonly" ["pass"]=&gt; string(10) "******" ["db"]=&gt; string(10) "myDB" ["server"]=&gt; string(9) "localhost" ["PDOConnection"]=&gt; NULL } 
$this-&gt;_DBQuery is probably being returned null for some reason. Turn PDO Exceptions on and continue from there.
Without seeing the specifics of the DBConnect class it would be hard to help you. But I suspect that's where you will want to start looking for the problem.
The [query\(\)](http://www.php.net/manual/en/pdo.query.php) function is used to actually execute a query. If you are planning on using prepared statements, you want to use [prepare\(\)](http://www.php.net/manual/en/pdo.prepare.php) and then [execute\(\)](http://www.php.net/manual/en/pdostatement.execute.php) the statement after you have bound values to your parameters. You can see examples on those linked pages in the manual. Another comment on this page is right though, if you turned on PDO Exceptions you would see an error from that query() call telling you that it is invalid SQL since it is not expecting the ":profile" parameter. It is actually executing the literal SQL statement you are passing to query(). edit: For reference, you can set PDO to throw exceptions using [setAttribute\(\)](http://www.php.net/manual/en/pdo.setattribute.php) on the PDO object you create: $pdoObj-&gt;setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION)
I know its connecting to the DB fine... If I put in a value instead of the :profile it works fine.
DB connection is fine.
I am an idiot... I used query instead of prepare.... Thanks!!
Well, I'm curious about the relation to the DBConnect class and the PDO object, specifically the query method. Because if that's the same as the PDO query method then I think I might know what's wrong.
Issue was that I was using query() instead of prepare();
Well, you probably just haven't seen drush. All you have to do to completely update a Drupal site is run "drush @site up" and it does the rest. Now if you only have FTP access you are out of luck though.
There are a couple of real reasons why parameterising table names is not allowed: - One of the main purposes of prepared statements is to allow the database to re-use the same query plan for multiple requests, while only doing parsing and optimisation once. The calculation of this plan depends on knowing the table and column names, so these must be available at parse time and cannot be parameterised. - The original purpose of prepared statements was to do as above: execute the same query multiple times with different parameters. The fact that it reduces the chance of SQL injection is a secondary benefit, even though to some (including me) it's become an even bigger reason to use prepared statements than the original reason. More info: In some configurations, PDO will emulate prepared statements itself instead of passing them on to the database. I think that when it does this, it may allow things like table names and the parameters of LIMIT clauses to be parameterised. Obviously it is a bad idea to rely on this. [See PDO::ATTR_EMULATE_PREPARES here](http://php.net/manual/en/pdo.setattribute.php#refsect1-pdo.setattribute-description). 
people that still use them got butt hurt
How do you intend to make the timer work? If the process takes awhile to complete, you'll need a way to let other incoming requests know not to run the process again. I recommend using something like [flock()](http://php.net/manual/en/function.flock.php) to manage this. Other than that, make sure that the stuff being done by this process doesn't need to be run on a real schedule, and can basically be lazy-loaded whenever.
Yep, well most stuff I need this for isn't time sensitive, it's just things that need to be kept relatively up to date. I would update the timer at the *beginning* of the request, right after "flush();" and *then* do the processes that take a while after that. So no other incoming requests would run. So it'd be like "OK guys, I've got this one" then goes to do the tasks. Edit: Just had a look at flock, looks good, thanks! I did have it using the database, but you bring up a good point. Perhaps I'll add in a `LOCK TABLES process_timer` query. I just am unsure about having to use a file, means the customer will have to CHMOD the file to be writable, another one of those barriers for the non-technical.
Not really done something like this before, as I just use cron. Have you looked at the way wordpress does theirs? They call the script when a user visits the page, and the cron hasn't been run.
Change query() to prepare(). Consider bindValue() instead of bindParam() and also note the third param on bindValue(). After your bind to the SQL, use a try/catch but use PDOException. In the try section run the execute() followed by a fetchRows(). If error, pick it up in the catch and use die('error: ' . $e-&gt;getMessage()).
Yeah, that's the way I originally planned to do it. But for my case, calling external APIs can mean page loads are increased by seconds, which is horrible for user experience. Using the method I described, it works in a similar way, but stops the user from experiencing any increase in page load time. The only downside is that for that page load, nothing has been updated, and it won't be until the next page the user visits that any changes will be seen. I'm not sure what order Wordpress executes their feature.
It looks pretty solid for me, as someone else mentioned you may want to add a table somewhere holding a "running" variable for each of your users, setting it to true whenever a user is running the "cron", so you can prevent users from running it twice at the same time or whatever.
This is known as "poor man's cron" :) For the right kind of task it's perfectly sensible though. If the nature of your cronnable work is batchy (e.g. process 10000 users in some way) you could consider having each request process a handful of users. Then no request is 'wasted', and you won't hit your scheduler with a giant task at random times. Did you consider having PHP write directly to a crontab file? Probably fairly hax and prone to disastrous errors... which would make it fun ;)
Depending on how php is running, you may not be able to guarantee the script will execute to completion. For php running as a FastCGI (I'm pretty sure that is the one I am thinking of) there is normally a strictly enforced max execution time which might cause issues depending on what your cron-esque like script is doing. 
I switch between styles as well. In addition, I first taught myself to program using Visual Basic, so I end up with things like this: $rsUsers = new ResultSet(blah blah blah)
I stumbled upon the following code in a project I worked on a couple years ago. I laughed out loud when I saw it. try { ... snip ... } catch (Exception $e) { unset($e); //error handling at its finest! }
Thanks rod ;) This is what I wasn't sure about, whether PHP's different running modes would have any bearing on it. For what I'm doing at the moment, nothing should generally run over 30 seconds anyway. I'll look into FastCGI and perhaps do what someone else suggested here and do the work in batches if it becomes too much.
Stricly enforced == FastCGI/fcgid will kill the process if it goes too long. This is the main drawback to long-running PHP processes. Anyone not using mod_php (such as anyone using nginx, suexec or suPHP) will be running via FastCGI which has an execution time limit. For what it's worth I think the default limit for many setups is 30 seconds, and if you have access to the server you can increase this. Another issue with FastCGI is that the request is buffered. None of the request will be sent to the user until the whole thing has executed (or a buffer fills up, which is very large). The size of this buffer could be decreased, though you would lose some performance benefit. You'd also need to take care that no more than one could run at a time, for example, since any long-running PHP process will take up one of the limited number of slots of processes active at a time allocated by Apache or FastCGI. My approach to this problem is to break the work up into small chunks, each of which should last no more than 2 seconds at most. If this can't be done, consider doing something in real cron, or a daemon. PHP via CLI works ok for this.
What? You mean I'm not superior? &lt;/sarcasm&gt;
As long as your 'job' doesn't need to be run at specific times or within specific constraints then you should be fine. What I've done in the past was give the clients an installation script that detects installed jobs and add any jobs that don't already exist, and also start crond if it's not running. (It's also polite to tell them you're going to do this in the install script)
You don't *have* to use prepared statements for simple queries. The way I understand it, a prepared statements generates at least two queries, one with the query itself and one with the parameters. It makes sense for a batch of queries, where you'll save time by sending only the data that changes. If all you're doing is changing one or two variables in a single query, consider using mysqli_real_escape_string instead.
No worries, generally for what you are trying you are definitely going to want to break it up into batches. From seeing this sort of thing implemented I would also probably set a max batch size so that you don't end up with jobs with 20,000 parts to them. The other thing would probably be a way to back off from running it for a while if there are no jobs queued and a way to short circuit the process if there are no jobs to run so that if there is nothing to do, the process exits as quickly as possible (without hitting the db if you can). Also you should probably avoid using sessions with the batch processing if you can get away without them.
Are you sure about some hard timeout in PHP execution under FastCGI? The way I remember it working is that apache will eventually just give up waiting (and give the user a 500 error), but php-cgi should continue running until max_execution_time is hit. But I haven't tested that.
Buy space on another server and set up a cron for each customer, then YOUR cron can call a similar page to that ajax script you wrote. Or just do it from your PC at home (leave it on all the time) or http://webcron.org/ --edit-- I forgot to mention that you may need to look at wget or curl
Looks like it's been done before. http://drupal.org/project/poormanscron God I feel sorry for you having to resort to this. Seems like a recipe for random pain.
Ah yes, the difference between that and mine is it doesn't close the connection. If the process takes 60 seconds or more, the AJAX request from the browser will still be working. Mine kills the connection to the browser but keeps PHP running, so the browser only spends a few ms on the connection and doesn't have to wait for the processes to finish.
It's an interesting idea. However because I'm selling the product, I don't want it to have to rely on me at all. I want people's websites to still function regardless of whether I'm around or not. :/
You can make simple web calls via a javascript hack that tries to load it in parallel, thus having no sensible effect on the actual page load. Simple trick as: new Image().src='http://example.com/cron.php';
Could even go further and remove JS altogether. Using: &lt;img src="cron.php" /&gt; And have cron.php output a blank 1x1 image with correct headers before it cuts the connection.
MySQLi parameter binding is incredibly confusing. I gave up on it after trying to bind parameters dinamically when the number and type of parameters are not known in advance. In PDO you can do that with a simple loop, in MySQLi you have to use 3 loops and some esoteric php features like variable variables just to make it work. It isn't worth the effort.
This is pretty much how vBulletin does crons, they just call an image file each time and echo the base64 of a white pixel. 
I stumbled upon a blog post today titled "[Setting up PHP &amp; MySQL on OS X 10.7 Lion](http://akrabat.com/php/setting-up-php-mysql-on-os-x-10-7-lion/)", which mentions that the PEAR phar install file exists (go-pear essentially downloads/runs this) but simply needs to be executed. Of course either method works, especially after running upgrade-all. It also specifies that PECL needs XCode (it's needed to compile extensions). Anyway, anyone reading this reddit post would probably enjoy what it covers.
This "poor man's cron" technique works perfectly for that kind of purpose, in fact as I recall I think Mediawiki (the software that runs Wikipedia) uses just this kind of technique. I might be wrong though.
XenForo actually does this. http://xenforo.com/
Not really. Prepared statements are becoming massively popular. Less worrying about having to sanitize input, and it's neater! (with PDO anyways)
Ok, this is the sort of thing I was worried about. So, it doesn't get sent to the user even if `flush();` is called?
Yep, and Poor Man's Cron functionality is built into Drupal 7.
Considering most PHP installations run under apache, which is run under another user, it's not very likely that your script would be able to modify any meaningful cron files.
I wouldn't say it's neater with several lines of code for a simple, one-time query, instead of one. Prepared statements are great, but using them everywhere doesn't make much sense.
Yup, which is why I'm surprised they're allowed in this context. Most times you can't use a reserved word in any context outside of a string. Perhaps it is technically unfeasible to check these, but it's still interesting to me nonetheless.
Jut make sure it creates a lock, so 20 people don't initiate a process that takes 30 seconds to complete. 
How about you stop professing your love for StoneCypher and instead point out where I'm wrong?
Your love for StoneCypher is preventing you from seeing the point of my post. For someone who claims to be a "college-trained linguist" and for someone who goes out of his way to make fun of someone's use of English, he got the spelling of gullible wrong *twice*. That's what I'm pointing out.
I'm starting to think you're StoneCypher's sockpuppet. If he is your soulmate and you love him so much you should tell him to change his behavior. All I see from your posts are defensive statements for the guy. You're a classic apologist. Why can't you point out where I'm wrong? The guy is a gigantic douche. Everyone agrees.
Why are you using preg_match if there are no expressions in it? Use a simple strstr(), the code should work. Cleared it up a bit: http://pastie.org/2269472
Or if you really want to use regex: http://pastie.org/2269532
This causes the a blank page to load.
I am a noob, someone suggested preg_match so I tried it. Joomla isn't playing nicely with this. It loads the page (guess that means no errors?), but it does not insert the canonical url into the code of the page. I have inserted this code into the header area of my template. Other code (PHP and Javascript) I have in there works properly, but this doesn't. Any Ideas? Do I need to add &lt;?php echo link_process_canonical(htmlentities($_SERVER['REQUEST_URI'])); ?&gt;
It's kinda hard to figure out what your're actually doing but assuming your component has the layouts "ask-a-lawyer" and "articles" and you want them to have a canonical URL of the "default" layout: $layout = JRequest::getCmd('layout', 'default'); if ($layout == 'ask-a-lawyer' || $layout == 'articles') { $document = &amp;JFactory::getDocument(); $head = $document-&gt;getHeadData(); $canonical = JRoute::_('index.php?option=' . JRequest::getCmd("option") . '&amp;view=' . JRequest::getCmd("view")); $head['custom'][]= '&lt;link rel="canonical" href="' . $canonical . '" /&gt;'; $document-&gt;setHeadData($head); } EDIT: TBH you obviously have no experience or knowledge of writing Joomla Apps or extensions so why don't you just go and download a SEF/canonical URL plugin from the JED and save yourself the hassle until you have some free time to follow a few tutorials and learn how how to work with and understand Joomla and not be fighting against it.
TIL about ignore_user_abort(). 
I would suggest devving a small app on Google App Engine that GETs a URL on your PHP application, and setting up a crontask on that app - GAE lets you have high-frequency crontasks (I've got several that run every 5 minutes, and you can go even more frequent than that) and it's really easy to work with.
A little more explanation. Hope this makes some sense. Our site is huge and was built with a Joomla component that has not been supported for the last 3 years, Azrul's MyBlog. Nothing plays nicely with this component. Most modules like Joomla's latest_news module produce a url structure of sitename/components/id# instead of an SEF URL for MyBlog articles. However, MyBlogs extensions produce the SEF url (i.e. sitename/articles/article-title). I would like to eliminate our duplicate Title/Contents issues caused by all the different urls that go to the same article. I would like to insert a code to set the canonical url if the url includes /articles or /ask-a-lawyer. The article/ and the ask-a-lawyer/ are categories set by the joomla menu. If we add an article to one of these categories, it automatically produces the article/article-title url. Not sure if this helped at all. IMHO, Joomla isn't built well for SEO; it is confusing and hard to explain.
I have downloaded an SEF/canonical url plugin. It works perfectly on everything except our myBlog component. My Blog produces the following urls /articles-archive/4107- /articles-archive/4107 /articles/dadsdivorce-live-what-surveillance-activity-is-allowed-in-divorce-cases.html /component/myblog/dadsdivorce-live-what-surveillance-activity-is-allowed-in-divorce-cases.html These SEF/canonical plugins (I have tried 4 different ones) select this (/articles-archive/4107-) as the url to apply the rel="canonical" tag to. My last hope is to hard code php to check the url and add the rel canonical tag to the SEF link. **You are correct, I have no experience writing Joomla Apps. I have modified quite a few, but I cannot figure out this myBlog extension. Unfortunately, the company who made this plugin would not offer support or insight on how to do this. 
You would need some good php knowledge to figure this out. Ive used that component before, it sucks. I would look into sh404SEf, this component will give you a lot more control.
Agreed. If I was here when the site was setup, I would not have chosen it. I am worried about causing 404 errors when I switch from Joomla's SEF to SH404SEF. Do you know if this will be an issue?
&gt;I was hostile because that the first response and it was negative (his tone is horrible, assuming I'm an idiot) and I felt like he was nitpicking just to be a dick. You realize that this is **exactly** how StoneCypher behaves to other people right? I find it strange that you don't hold him to task for that. Now you know how other people feel when they are on the receiving end of StoneCypher's behavior.
Shouldnt be, the sh404 component should override all of those settings. It will also give you the control to completely rewrite the url anyway you like. Apparently, there is already an extension for myblog and sh404sef: http://www.bestofjoomla.com/component/option,com_mtree/task,viewlink/link_id,463/Itemid,95/ 
[Insert blatant self-promotion disclaimer here.] Oh, and I know the code sample in `register_globals` is horribly inelegant, I just didn't want to copy/paste from the manual.
Automate the fetching of as many RedTube videos as possible in 2 hours!
Great article, great examples! I want more :)
Yeah, okay, nothing that will get us fired...
Nice, that's a great idea.
I am really liking this site... I see a lot of practical uses for optimization here (and some really bad examples too). All tons of fun to read.
Something I hav always found curious would be to do something like instapaper where it pulls out the "body text" of a webpage, but go deeper and have it have the output XML style or something where you get the text, words in text, any links in the text, title, ... idk some other stuff like that. Thought it might be something interesting.
Think I spotted a small error... In #9 I think you meant php4 and not php3, as sessions (and those related functions) didn't exist in php3.
Indeed, thanks for the typo catch.
Some ideas I just came up with: * Much like a search-engine spider would do, given an arbitrary URI/Page (so, arbitrary markup), and following HTML semantics, attempt to boil down that page's content to it's main points: Title (not of the website, but of the important content on the page - this would probably be a &lt;h1&gt; somewhere in the content area), a small excerpt from the body, maybe a related image, etc. * I like static website compilers, and the current offers aren't too stellar - make some of those! * Make tiny-\* - a tiny forum, a tiny framework, a tiny cms, a tiny search-engine? Keep it simple, the 'tinyfication' is the best part. * Maybe some sort of code game, where you have a base software that runs and manages everything, and your team writes 'players' or 'bots' (as classes) that then fight each-other in code. Not quite sure how that would work, but it seems like it can be a lot of fun. Maybe something where the 'players' are working around the DOM, trying to get their own elements into the page and destroying those of their enemies (**edit:** actually not only does this makes more sense in, but would probably be more interesting with javascript) 
Give them the travelling salesman problem.
[This](http://marc.info/?l=php-internals&amp;m=131119129710002&amp;w=2) removal may also interest you.
I'm out of my depth but assume that apache's user has a cron table like any other user. Obviously something of a hole in the idea if this is not the case :)
Not to burst your bubble, but PHP 5.4 will short syntax for arrays. $x = ['hello' =&gt; 'world', 'digits' =&gt; [1,2,3,4,5], 'foo' =&gt; 'Bar?']; 
[Indeed](http://mcglockenshire.com/blog/posts/waiting-for-php-5-4-death-to-magic-quotes.html). Putting the finishing touches on that one before submitting it.
I've got quite a lot of code that uses import_request_variables so I'm going to have to keep an eye on that one, one day when hosts start upgrading. (got everything from 4.4.4 to 5.3.6 at the moment)
[Facebook Engineering Puzzles](http://www.facebook.com/careers/puzzles.php)
an allrgb image, winner is the one with the smallest filesize
Not strictly related to XSS, but [this](http://programmers.stackexchange.com/questions/46716/what-should-a-developer-know-before-building-a-public-web-site) may be useful to you.
&gt; PHP 4.1 introduced the “short” superglobals that we know today: $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV and $_SESSION. &gt; If you somehow still have code that uses these in production, you should be able to get away with a mass search and replace and not break anything. Um, Am I reading this right, Superglobals are going away?
No, the wording is a bit unfortunate there. Superglobals with the short names are staying, the older $HTTP_POST_VARS etc. are leaving us. They were the ones that you could auto-populate if you declared register_long_arrays. You probably didn't do that recently - my first production PHP site was built using the last few betas of PHP 4.0 and that setting was already old fashioned by then.
Yeah, me too, discovering that is what got me to come up with it in the first place. I thought I could use ajax to abort the connection straight after the request was made (using a timeout) and keep the PHP going using this function. Then I realised I could close the connection properly using PHP. 
that was a close one!
Yikes, I've updated the wording to be less ambiguous.
You can emulate what it does with some creative calls to `extract`, though you might be better served by slowly switching away from crutches like that and towards using the GPCS superglobals.
[XSS Prevention cheat sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)
&gt;[XSS Prevention cheat sheet](https://www.owasp.org/index.php/XSS_\(Cross_Site_Scripting\)_Prevention_Cheat_Sheet)
Tested on my server. Works fine. If you have a cheaper host, it may send emails in a cron. So you might get a whole bunch of your test emails at once at a later time. 
A trick to situations like this, is replace the email function, with an echo. This will tell you if the program even gets that far, and if it does, you know is a mail function issue. But jemka might be right, cheap hosts are cheap for a reason.
What type of host is it? Shared, VPS or Dedi? I've never come across a shared host that doesn't have some sort of capacity for sending mail (excluding free hosts.) jemka could be right though, best thing to do would be to call your host, the script looks fine to me for a simple contact form. Nice site by the way. :)
Escape all the things!
The spider idea is a good one, it's always useful to know how search engines work, even if it is at a basic level. It makes you think about SEO in a different way. Look for pages with no title, missing (or dupe) H1s, &lt;article&gt; and &lt;aside&gt; tags, 404s, 302s that should be 301s etc. All good fun and at the end of it you have a useful little testing tool. Bonus section: implement page rank (http://en.wikipedia.org/wiki/PageRank) on your site, which page is most important? (usually the terms and conditions on most sites - it's linked from every page)
Check out these links, relatively new API from Google AFAIK. http://code.google.com/apis/maps/documentation/distancematrix/ http://www.programmableweb.com/api/google-distance-matrix
This is a good resource: http://ha.ckers.org/xss.html
I found it interesting, and with good examples and phrasing.
It's possible you don't have access to sendmail on the server. PHP doesn't actually send mail, just sends it into sendmail. You may also check the return value of mail(). If it's false something is definitely going wrong. Just because it doesn't return false doesn't mean it's not broke though. Mail sometimes likes to return true even if the message doesn't get sent out. You should also change the breaks in the headers to \r\n.
Thanks! If you ever need someone to help with some front-end design give me a shout!
I just got that book myself, haven't read too far into it yet, but it does look good. (still reading new MooTools book)
Not sure if you're into frameworks, but CodeIgniter 2 has XSS and CSRF protection built in.
Thanks, I'll bet I wasn't the only one sweating.
Sorry if this is a noob question coming from a Java emigrant, but what does the double exclamation mark operator do? Double negation? As in $res = !!$row[0]; 
im finally getting to the point where I am seeing how the random is hurting everything.. im goign to try to remove RAND from my code!
It's a rather inefficient and poorly self-documenting way of doing this: $res = (boolean)$row[0]; 
Wait... so the team of programmers you manage gets meanfingful and intelligently stiumulating work simply for the sake of keeping them happy? What sort of bizzaro (by that I mean totally unlike mine... in a good way) world do you work in? Can't be corporate...
this worked perfectly! I owe you a reddit drink. 
Really, holy crap I've never come across this before.
I presume this means he identified that the problem was in fact the mail capabilities of his server/host.
&gt; ignorologist Now there is something for my notes.
Why 2.0? It's an alpha. I started working with CakePHP when 1.2 was in alpha, and from alpha to RC, so much changed it wasn't funny. I would recommend 1.3 instead of 2.0 for an overhaul.
1) Try modifying the headers you're sending, they may be getting blocked. 2) Try to get some log and check if there's an error (you could at least add an if(mail(...)) { header ...; } else { echo 'mail error'; } 3) You can save time (since the code seems correct and it's probably some issue with the server) and use Swift (I think it's the most solid library around, overkill but easy to use) with an email account you created and send it via smtp. 
&gt; $\_GET, $\_POST, $\_COOKIE, $\_SERVER, $\_ENV and $\_SESSION In case anyone was confused. I was for a second, thinking the ones without the \_ were some extra-short superglobals or something. \\ is your friend.
 $res = !!$row[0]; ! //first "!" evaluates the "Boolean" (!$row[0]) // second "!" casts to Boolean; Should not be used it's inefficiency, not easy to read and does not follow code best practices.
Everyone should be looking at the link this guy posted. It is a goldmine of information.
I used to be with a really cheap host ($5/month) and emails would sometimes be hours or even a day late. The customer service reps would run test scripts with their email addresses and be up front about not receiving emails, investigating the issue, but come up with no resolution. Sometimes emails would go right away, others there was a delay. Needless to say, I'm no longer with them, but just assumed it was a function of the architecture of shared hosting.
I can't give it away, but it is a internet company. One of the big ones, but not GOOG, AAPL or FB.
**Edit:** Removed to help protect anonymity.
Only half of that is correct, and now I will shut up.
Efficiency is not a concern; flipping a bool to it's logical counterpart is not hard.
As others have said, it's a cheap way to do: $res = (boolean)$row[0]; I believe it originates, at least in the common usage, from Javascript (although the principle is valid for a slew of languages).
Flipping a bool to it's logical counterpart is not hard, and the concept is only [very moderately] challenging the first time you see it. Anyone who has worked with JS in the past 5 years is plenty used to it by now.
Hey everyone thanks for the responses. I will spend some time reading through these and may come back with questions!
Just figured I'd throw it here for a little criticism. If you don't know why you'd want to do something like this, than that's okay, you probably wouldn't use it.
I'm pretty sure I'm fully correct -- you just took one half of my comment too literally.
Are you hiring competent, clever, socially-apt IT guys? lol
Can you provide a little documentation on there? I'm confused as to what getInnerStack is meant to accomplish, as well as having underscores at the end of method or property calls. This also would trip up on protected/private methods of an object yes? so you couldn't exactly have object a's protected property updated by object b's public function or whatever.
Can you give an example where something like this would be useful? My only criticism that it needs a better name since "Stack" generally means something else entirely. 
https://twitter.com/#!/simonw/status/28410497096 "The solution to XSS is NOT to filter input, it's to escape output - input filtering ignores existence of different escaping contexts"
You could write your own `import_request_variables()` function and put in an `if (!function_exists('import_request_variables')) { }` condition and deploy it anytime. 
Yes, but anyone reading that will think it's effectively a *nop* when the operation exists exclusively for the side-effect of the cast. It is being unnecessarily clever.
then you have to worry about sql injection
I don't see how anyone with even a basic understanding of programming could misconstrue that as a _nop_, but I do agree that it's probably a tad too clever for my tastes WRT PHP. I don't necessarily frown on it, though.
FWIW, I picked it up long ago in perl, which has no casting (as we think of it in PHP) and no "real" boolean type. The idiom makes more sense there.
Not right at the moment... Actually let be be more accurate. IT is hired out of a different office, if I had my way we'd have a good IT (server) guy on-site... I'm working purely with PHP devs.
[Alloy](http://alloyframework.org/)
Not if you use prepared statements.
&gt; I don't see how anyone with even a basic understanding of programming could misconstrue that as a nop A double-negative is a nop. This just plays on the side-effects of automatic type casting in PHP to be something more. In many other languages, this sort of construct would be completely optimized out by the compiler.
Faster [Intro](http://voloreport.com/faster-a-minimalist-zero-config-php-mvc-framework) [Code](https://github.com/volomike/Faster) 
getInnerStack returns a subset of the original as a Stack. Method names that end in underscores indicate that they want the Stack itself passed to them as a first argument; loosely in python's 'self' style. This is to overcome the inability to change what $this refers to from within the method. This allows for things like class UpperCaseTransform { public function __toString_($stack) { return strtoupper($stack); } } class Foobar { public function __toString() { return "some string"; } } echo Stack(new UpperCaseTransform(), new Foobar()); // displays "SOME STRING" And lastly, yes, it does not have any access to any of the contained objects private or protected attributes or methods; but I think that's a good thing; an object's private bits aren't meant to be accessed externally.
I could see this as possibly being useful in testing environments where stubbing/mocking one or more methods is desirable in the interests of isolating a method. If feels a lot like a form of dependency injection. The issue I see with it though is that objects lose their identity. Basically you're creating one object to act as an encapsulation layer for one or more other objects. This means I could have class Stack with class Fruit and class Vegetable both inside of it, and I wouldn't know what class I was calling a method from.
Then you have to worry about your PHP programming practices.
My mostly appriciated change is array dereferencing: function a(){ return array(1);} $a = a()[0];
I find it mainly useful in two scenarios; in situations where I might use a regular PHP object just as a container, I can use a Stack and reduce what I need to keep track of. For example, if I have some code that generates a table with captions, I could create a stack like class RecordSetToString { public function __toString_($stack) { return $stack-&gt;getFirstName() . ' ' . $stack-&gt;getLastName(); } } $stringifier = new RecordSetToString(); $s = Stack( array( 'caption' =&gt; 'a caption', 'title' =&gt; 'Some Title' ), $someRecordSet ); and then have code that looks like echo $s-&gt;title; foreach ($s as $record) { $record = Stack($stringifier, $record); echo $record; } echo $s-&gt;caption; It's even better when working with multiple objects (say, column configurations or a string encoder/linkifier type thing). Using the same example, the second reason I find it useful is often my $someRecordSet object is from a library or framework that I don't want to modify (say, flourishlib). This allows me to do things like alter the behavior __toString() without having to change the source of the class in the library.
[http://projecteuler.net/](http://projecteuler.net/) is fun 
[http://sevenkevins.com/](http://sevenkevins.com/) The tutorial it spawned from: [http://www.phpro.org/tutorials/Model-View-Controller-MVC.html](http://www.phpro.org/tutorials/Model-View-Controller-MVC.html) 
Specific exceptions for specific errors. Otherwise it'd be rather hard to use actual exception logic to catch different exceptions. There's also a [Stack Overflow question that discusses this in a bit more detail](http://stackoverflow.com/questions/1411289/catching-specific-vs-generic-exceptions-in-c).
Specific exceptions for specific errors. Otherwise it'd be rather hard to use actual exception logic to catch different exceptions. There's also a [Stack Overflow question that discusses this in a bit more detail](http://stackoverflow.com/questions/1411289/catching-specific-vs-generic-exceptions-in-c).
Yeah, that's the way I've been doing it for quite some time. It gives you the ability to catch specific exceptions, while still leaving the door open for catching them as general exceptions. However, for some reason this doesn't seem to be a widespread practice, which leaves me to wonder: why not?
For something like `InvalidArgumentException`, it's unlikely that you need to be more specific. For the code catching the exception, what difference does it make that it's from the database module? On the other hand, the difference between `HttpConnectionException` and `DatabaseConnectionException` is rather significant. 
Okay, I suppose that makes sense, but where do you draw the line of what should be a general exception and what should be a specific exception? Should I leave usage errors as general exceptions and sub-class exceptions for logical errors and system failures?
I don't think there is any hard and fast rule for this sort of thing. It's actually fairly rare to be able to actually *handle* an exception; most often your handler exists to print a friendly error message to user and log the error with a stack trace. In that case, the type of the exception really doesn't matter that much. Obviously, if you have an exception that is designed to be properly handled, it should be it's own type. 
Alright, well, for a practical example: In the case of a template engine, do you think that setting the path to a file which does not exist should result in a class-specific exception or a general exception?
I use it as a way to keep the separation between controllers (which are typically tightly coupled with libraries) and views cleaner, as it allows even the object structure to be abstracted. That's true, you do lose the ability to tell which class is being called; but that's the point in a sense. If You wanted to tell the difference, array( 'Fruit' =&gt; $fruit, 'Vegetable' =&gt; $vegetable) would suffice. Having them in a stack allows you to not have to specify which, so that code that uses the stack later is oblivious to which is being used. a Better example would be BetterFruit and Fruit; code can be written to use Fruit methods, but a BetterFruit instance could be used to in place of a Fruit instance in certain places without cloning Fruit (so mutators still work properly) and without needing to extend Fruit or have control of the construction of the Fruit object (say, if its the result of some SQL query or such.)
Isn't this comment thread also a Daft Punk song?
filtering - [filter_var](http://php.net/manual/en/function.filter-var.php) escaping - [htmlentities](http://php.net/manual/en/function.htmlentities.php) attack detection - [PHPIDS](https://phpids.org/)
I know you'll think this isn't what you are looking for, but Code Igniter is pretty small, actually very simple and insanely well documented.
I use a `FileNotFoundException` for this purpose. This is pretty much a critical error for which there is no recovery so nice error message and stack trace is all that's needed.
[LightVC](http://lightvc.org/) + [Idiorm &amp; Paris](http://j4mie.github.com/idiormandparis/) :) LightVC is a simple MVC (*almost*) framework... with no **M**odel - just the **V**iew and **C**ontroller layer. Paris acts as the **M**odel, built on top of Idiorm which is an ORM. End result: A very elegant, very simple, very neat MVC framework.
I use kohana. I like it because all mods are disabled by default, making it pretty light out of the box. Guaranteed there are lighter ones out there, but kohana is lighter than the beasts like codeigniter and cake.
I'll take a look to this, i been playing with Sinatra lately, but I'm mostly a cake/PHP dev, i don't want to leave that stack weak.
Could you perhaps be more specific about what types of reports you want to generate? Formatted data? PDF? Excel files? Charts? There are plenty of packages out there that will do just what you need, or you could roll your own if it's simple enough. If it's something relatively simple, I'd be happy to try and whip up something for you with CodeIgniter. What's the PHP version on your server?
I want to punch myself for suggesting this, but you can do this with MS Access or LibreOffice Base. Just set each user up with a read-only system DSN and connect access/base to it - you'll get more advanced functionality this way than using a web based solution.... unless there's some unmentioned reason you want it as a web based solution. 
PM sent
I know there are ways to do it with software but I was wanting to keep it web based just to make it easier on the users and to give me more control over it. If I can't figure out anything else then that's what I'll end up doing but I don't think it's impossible.
Honestly I am just trying to see what's available right now. I am wanted to return the results to the screen and then be able to download to a csv or pdf. I probably won't need charts. I'm currently using php 5.2.13 
Basically this. Everything in my data processing scripts gets filter_var'd and run through a check depending what I'm expecting it to be: string, ints or bools giving them a default value if they aren't there. Everything into database is PDO'd. In my database fetch function, everything gets htmlentities with ENT_QUOTES (unless flagged not to if it's going straight back into the database). While some think it's not the best idea to do it to everything out of the database, I feel safe knowing that I work with a younger developer or two :) Finally every form has a hidden field named hash. Hash is md5("processing method name" + user_id + "random generated string per session"). No XSRF there. 
OK, sounds simple to do with CodeIgniter. I'd be happy to try and throw together a quick solution for you to then do with as you please. Can you give me some sort of outline of how you need to interact with the data? What is your current PHP knowledge? Are you familiar with CodeIgniter? Would you be comfortable using it? I'll go ahead and start mocking up something for you.
At first it looked quite cool... but then I saw the quality of the documentation... =/
Hey, I see that you're posting a lot of double posts. Reddit returns a status message if there's a problem posting messages. There's a handy little guide about it: 502 - It went through 504 - Try once more
What's strange is the error was 504
I can't believe that I forgot to ask this, but you didn't say what kind of database you're planning to interact with. That's pretty important.
[Laravel](http://laravel.com). It's RESTful out of the box with a light ORM and fluent query builder very similar to Idiorm and Paris. Documentation is very complete and detailed. If you enjoy Sinatra, you will like this. The routing is very similar.
It's MySQL
Cannot tell you how many times I've rewritten a project or parts of a project from scratch just because I thought I could do it better. Sometimes I don't even do it better. But I get this OCD where I just need.. rewrite. 
I still use the original mysql functions over mysqli or PDO. I escape and sanitize everything even though I know there's still some test cases that can defeat it. I know, I know. Get ready to burn your pitchforks. 
not always true. I had a 504 go through earlier today
Would you be ok with showing me your table structure? I just want an idea of the tables, fields and field types this needs.
Ah, good point.
Have them make a [command-line chat program](http://php.net/manual/en/book.sockets.php)?
And, for what it's worth, it's the [preferred framework](http://www.sitepoint.com/rasmus-lerdorf-php-frameworks-think-again/) of Rasmus Lerdorf, creator of PHP
I was under the impression [he](http://toys.lerdorf.com/archives/55-Writing-an-OAuth-Provider-Service.html) [uses](http://news.php.net/php.internals/51322) Kohana, not that it matters anyway.
He used kohana for his recent work at WePay (they were already using it, and he's no longer there), and he does not recommend any particular framework (such as code igniter) ... that was taken out of context.
around the world, around the world, around the world, around the world...
You would normally build this from scratch.
You fucking legend. I remember seeing these ages ago, but forgot their names and had been trying to find them again for months to take another look.
Hmm, I have been taking a look at this, it looks pretty good, but the documentation isn't great (at least for someone like me with little experience with this kind of Framework). There doesn't seem to be much of a community either.
:D Glad to be helpful!
I've looked around for such a mythical beast and I've found tools that came close to doing the job but none of them did it in a manner that didn't make me cringe. And none of them were full featured enough to be useful for even basic report building.
The documentation is complete and accurate - there just isn't much to document! Admittedly it does require a little knowledge to piece together, but with reasonable PHP skills it should be no problem. The community is almost non-existent, and the forums have recently fallen into disrepair by the looks... Still, thats no reason to disregard it! Good luck!
I'm not sure if this is new, old, good or bad, but I always enjoy a fresh look at development.
Wow, I thought I was on github. 
I'm not a fan of the name either, although in reading more about the project it does sound tangentially related to a what a true stack is. Maybe. But I'm always weary of projects whose name or functionality overlaps [current native functionality](http://php.net/manual/en/class.splstack.php).
When you first do it... it's awesome. bake bake bake is how I make my projects. no handwriting code for me when CRUDing projects :)
Or you could just use if ($data-&gt;active) bad example, anyway.
wow this is an old post, are you stalking me? it is probably one of them things I need to set up.
the problem here is there's always the potential for unexpected results. PHP has weird funky behavior with programming, and also not to mention that it's very possible to have invalid data in what should be a boolean field. There are far better examples, for example, you have an avatar image file name stored with a user's record, you could make a function that returns a full uri to that image. You could then later roll out S3 or similar support by changing that one function. The beauty of it, is your database doesn't have to store the path, since it's irrelevant info that your db doesn't need to know, but your code does need to know about it.
Was looking for some CakePHP comments I had made before... stumbled on this... just wanted to expound upon how awesome it is. Yii does things even cooler through a web interface, but I like cake better than yii atm ^_^
Well in that case I will now go set it up, I haven't done any ~~PHP~~ work in the last week or so.
If you need any help, hit up #cakephp on irc.freenode.net [super easy link](http://webchat.freenode.net/?channels=cakephp&amp;nick=TheSkyNet)
I will do, you are now known as the friendly cakePHP guy.
KoolGrid
Disclaimer: I'm a dev with the kohana framework so I'm biased. That being said, You should really check out Kohana. The entire system is modular and sounds like exactly what you need for this. Ideally, you could write a simple application(the application folder in kohana is just another module really) that links up these modules, and just enable them as you need them. This way you can keep all these tasks with seemingly different functionality separated. You could also obviously make a shared module that one or more other modules can use to keep things DRY. I strongly suggest even with a framework, you take time, look over the choices out there, the documentation of whatever you chose to use going in, then plan out how you want it to work before you ever write code. It's very easy to get excited and want to write code day one, but you'll almost always regret it if you don't have a solid plan of attack. Something like a mind map or UML would be great to plan out a file structure and what you expect to go where.
Good question! I try to talk to different people who are writing PHP as well, but a nice place to go to would be cool. http://davidwalsh.name/ blogs about web developing stuff in general on a relatively high level. Maybe you want to check out his blog :)
Any framework that supports some concept of modules ought to be fine. Zend Framework does this passably well. I see nodren over there suggesting Kohana, which is probably fine too. I imagine your request bootstrapping phase would have to look for installed modules and invoke some initialization code in each. Your main app should have well-defined (and documented) extension points that your modules can use to do things like get their entries into your global navigation. Finally, you would do well to look at some open-source projects that have strong module support. These sorts of projects try to have a nice rich API for modules to use, since the audience is 3rd party developers. Here are some ideas of places to look - these are all things I've written modules for at one point or another: * I recently did a little work with [vanilla forums](http://www.vanillaforums.org) recently, and the approach they take to modularization is pretty clever in many ways. * [Wordpress](http://www.wordpress.org) is obviously an insanely popular blogging platform. * [Drupal](http://www.drupal.org) is a module-centric CMS. It's architecture is a little strange (in that it's not really OO at all), but is sane and performant once you get your head around it. * [LemonStand](http://www.lemonstandapp.com) is a commercial shopping platform that has a pretty handy module system. You can register for a free developer license and get your mitts on the code. Documentation is pretty good, too. HTH
Any framework that supports some concept of modules ought to be fine. Zend Framework does this passably well. I see nodren over there suggesting Kohana, which is probably fine too. I imagine your request bootstrapping phase would have to look for installed modules and invoke some initialization code in each. Your main app should have well-defined (and documented) extension points that your modules can use to do things like get their entries into your global navigation. Finally, you would do well to look at some open-source projects that have strong module support. These sorts of projects try to have a nice rich API for modules to use, since the audience is 3rd party developers. Here are some ideas of places to look - these are all things I've written modules for at one point or another: * I recently did a little work with [vanilla forums](http://www.vanillaforums.org) recently, and the approach they take to modularization is pretty clever in many ways. * [Wordpress](http://www.wordpress.org) is obviously an insanely popular blogging platform. * [Drupal](http://www.drupal.org) is a module-centric CMS. It's architecture is a little strange (in that it's not really OO at all), but is sane and performant once you get your head around it. * [LemonStand](http://www.lemonstandapp.com) is a commercial shopping platform that has a pretty handy module system. You can register for a free developer license and get your mitts on the code. Documentation is pretty good, too. HTH
This. Kohana is the bee's knees, I've used it for many projects. 
Lemonstand is great, a tad lacking in the documentation area, as some of it is outdated and just not true, but it's a good framework for e-commerse. 
Lemonstand is great, a tad lacking int he documentation area, as some of it is outdated and just not true, but it's a good framework for e-commerce. 
[Limonade](http://www.limonade-php.net/) has worked well for me. It's in the style of microframeworks like Sinatra and Flask.
The [PHP tag on StackOverflow](http://stackoverflow.com/questions/tagged/php) can be a great resource for learning all of the horrible ways to do it wrong. The [PHP chat](http://chat.stackoverflow.com/rooms/11/php) can be very enlightening, on the other hand.
Not a site, but... \##php on irc.freenode.net is usually a decent resource if you're looking to talk to people live. There's the channel on efnet as well, but I've found them to be a little draconian if you disagree with them on pretty much anything.
Think of objects as little self contained procedural apps that handle their own set up, hold their own set of functions and vars, and can start other procedures as well.
You'll have to sift through a bunch of the articles to find one that relates to your skill level, but [here](http://freelance-php.blogspot.com/2011/06/massive-list-of-php-articles.html) is an aggregate of a bunch of awesome PHP articles, many of which lead to other articles and sources.
I personally would not put anything in a cloud service that I didn't mind anyone seeing. I would GPG encrypt that file before uploading.
Kohana is great with the hmvc architecture and its modularity. The documentation, however, is lacking quite a bit of details, but once you get past the basics, you'd be referring to the API class documentation which fortunately is thorough.
I disagree, for [reasons I stated here](http://www.reddit.com/r/PHP/comments/ista4/good_php_framework_for_making_a_web_app/c26e83u)
This is the sort of thing I was hoping for. Thank you very much for this link.
Escape for DB on the way in, and escape for XSS on the way out.
I had to reflect on this for a bit before I got it.
There's a good overview of the what and how here: http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/ The why and when will come with experience.
I'll second Limonade being easy to work with. It lacks the M which suits me.
Check out this [online book](http://www.tuxradar.com/practicalphp), it covers a wide array of PHP topics, but there are some solid chapters on objects including the building of a basic OOP website. The book, [PHP Objects, Patterns, and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=sr_1_1?ie=UTF8&amp;qid=1311800397&amp;sr=8-1) is an incredible resource of PHP OOP concepts and application design. It starts off with a few chapters on the basics of OO PHP coding, giving you the rundown of syntax and inner-workings. From there it covers popular OOP design patterns (MVC, Adapter, Component, etc) and then lives up to its name by showing the patterns in practice. After you've picked up the basics of OOP, check out a PHP web framework. I would recommend [CodeIgniter](http://codeigniter.com/) for its amazing documentation, not to mention this wonderful set of video tutorials [CodeIgniter from Scractch](http://net.tutsplus.com/sessions/codeigniter-from-scratch/) featured on Nettuts. Once you get a working knowledge of a framework and have built some basic applications and websites, take the time to study the code behind the framework. Find out where the entry point is and trace its execution, checking out the source for each and ever object that is instantiated. Not only will you pick up on some sweet OOP concepts, but you'll gain a great understanding of how a typical OO PHP application is structured. Good luck and have fun! Keep your programs DRY! (Don't repeat yourself) In procedural, you would take those large blocks of code and faction them up into functions. With OOP, look even more abstractly and take several large blocks of related code and put them into classes, which are, at a very basic level, a collection of related functions and properties.
Once you get the basic idea of what OOP is about, look into moving into a framework for bigger projects which help you further separate business and presentation logic. (My choice is CodeIgniter). Tis will all help you make apps faster, more securely, with more reusable code and better structure for team based building. 
This looks like a great step-by-step process to taking OOP seriously. Thanks!
Thanks! This was a good read, I'll be copying those examples and building from them when I get a chance.
I made a good post about this awhile back, but between reddit's crap searching and Google's inability to properly index reddit I can't find it. Sorry.
If you stumble across it at some point I would love a link.
The online book is quite good. Consider the recommendation seconded.
I will look again but I got _really_ frustrated looking for it the first time. Is the only way to review/search your past comments by using the crappy pagination here? I know the timeframe roughly, but I'll be damned if I'm going to click _next page_ 250 times.
Sorry, but this is not a good way to think about objects. You'll never end up using inheritance properly, using polymorphism, abstract classes and interfaces to their maximum if you think of classes in terms of procedural code. OOP requires a fundamental paradigm shift in the way you think about writing a program, and the advice contained here will not help bring that about.
If you are using functions for common tasks, you are probably doing fine enough. Otherwise, convert common tasks to either functions or classes, whichever is more fitting for the task.
Hey there, this is Danny from LemonStand. We work pretty hard to provide extensive documentation. What did you find lacking or untrue?
Hey there, this is Danny from LemonStand. We work pretty hard to provide extensive documentation. What did you find lacking or untrue?
Do you remember what your subject was? I can try and find it as well.
Hi Danny, we've talked a lot :) Well, I feel like there is a lot of documented classes that seem to be documented incorrectly, I often find myself having to go into the code to figure out how to accomplish what I need (perhaps its easier for me to read the code then the docs). One example is the product class -- I was trying to create a product from a controller, and the docs wouldn't tell me whats required, how to relate a product to groups or categories, etc. As far as the not true claim goes -- well -- I took a colleague whos working on the project with me's word for that. One problem is that we're creating a very involved application, and, even though LemonStand is the best product out there for such a thing -- it's still customer focused. It's pretty clear that after developing for it (for a month or two, I'm no expert), that the customer documentation is more developed then the developer documentation. I have a hard time searching the documentation for how the API works, and when I do find what I need it's very scattered and not very concisive. Perhaps's I'm way too used to Kohana's docs. Otherwise, I love LS :)
You're right, I was far too simple and vague. [This guy can explain things](http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/) Scroll down to **Comparing Object-Oriented and Procedural Code**
Behat has been around for a fair while, but I would say it's not widely used. It's perfect for front end testing, you should give it a whirl the next time you do something that requires it. The ability to test javascript on your website is a massive plus.
I'm personally a fan of Active Record . Doctrine 2 goes away from that. I think your best route is to just upgrade to Doctrine 1.2. If you didn't already have 1.1 installed, I'd recommend Propel 1.6. Everything you're looking for is great in Propel, except it's heavy-configuration. I actually really like the heavy configuration.
I'd tend to agree, I just want a nice clean AR implementation. Sticking with Doctrine 1.x is certainly an option, my only gripe with that would be that performance leaves something to be desired. edit: just checked and we're actually running Doctrine 1.0.6 so updating to 1.2 might be a good start...
None of what is mentioned requires PHP in the least. That's a shell script. Plain and simple.
Criticisms: * this should be a shell script, not a php script * mysqldump is very slow for big data sets, should use xtrabackup to take hot backups * use duplicity to manage the backups for you, it'll auto prune old backups and encrypt the data for you. example that uses duplicity, xtrabackup, and lzop (instead of gzip). prunes backups older than 1 month. export AWS_ACCESS_KEY_ID="" export AWS_SECRET_ACCESS_KEY="" DATE=`date +%Y%m%d-%T` MYSQL_BACKUP_PATH="/backup/mysql/" MYSQL_BACKUP_FILE="${MYSQL_BACKUP_PATH}percona.tar.lzo.${DATE}"; mkdir -p $MYSQL_BACKUP_PATH echo "Backing up mySQL to ${MYSQL_BACKUP_PATH}" BACKUP=`/usr/bin/innobackupex-1.5.1 --slave-info --stream=tar ./ | lzop - &gt; ${MYSQL_BACKUP_FILE}` duplicity remove-older-than 1M s3+http://s3-bucket/`hostname` duplicity full /backup/ s3+http://s3-bucket/`hostname`
This is how I think I'll use my inheritance.
Doctrine 2 is a complete re-write... you'd have to rewrite a lot of stuff yourself since its implementation is quite different. it's much cleaner but I don't really have info on the benchmark... It's probably faster though... a worth learning tool, but I haven't worked with any different ORM's. Zend_Db has some pretty cool relational DB features but I never really studied them well enough to use them.
This should be your first stop regarding [PHP and CI integration](http://jenkins-php.org/) As for unit testing, [this is a good introduction](http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html) of the basic mechanics, but unit testing is more of a mind set. The mechanics are easy, the mind set/culture takes time and practice.
[php.net](http://php.net)
Been playing with and loving [RedBeanPHP](http://redbeanphp.com/) lately (requires PHP 5.3+). No idea how appropriate it is for a large scale project.
I love redbean for quick and easy usage, but I don't think it has what I need for an enterprise level application.
Beyond syntax, which will be explained in various other links provided, to sort of sound a bit like GLaDOS, you need to get to the point where, "Now you're thinking with objects!" Any sort of complex, repeating data type should be turned into an object. For instance, if you're writing something like reddit, you'd want a SubReddit class, a Submission class, a Comment class, a User class, etc. What you'll probably find is that the vast majority of SQL tables you have should be either the main storage for a class or one that "links" two classes together (like, say, a table for storing who is subscribed to what subreddits). PHP doesn't enforce variable types like most languages do, so be sure not to become lazy about design if you ever plan on jumping to, say, Java.
But what is the object of the game?
to extend your programming ability.
Does that involve being abstract?
I think rule #3 applies here &gt; "Try not to die." - Betty White
ha, my first class was to make a div. it was so fucking useless
Indeed, mostly in private.
It just takes accepting new ideas.
I really think knowledge like this needs to be public.
but don't you think first you must look at this-&gt; 
why accept new ideas when you can __construct them???
In relation to gaming, you can think of objects as enemies - complete with health, strength, cold resistance, and other stats (or "properties", if you will). These enemies might have the ability (or 'method') to... * spawn (via `__construct($x, $y)`) * `cast($spell, $target)` * `shoot($weapon, $target)` * etc. Or, you might have a `class chainsaw_of_the_gods` inheriting from `class chainsaw`, with `special_strike($enemy)` causing `$enemy-&gt;health` integer value to be reduced by a random number. I have no idea why I just gave the above ridiculous examples, or how it helps in any way other than give very abstract idea of the OOP concept.
Uh... whatever you say, man. Your response really clarified why you would just rename and publish it with your (c) added and license changed to QPL instead of just teaching him to use launchpad. The "professor" doth protest too much, methinks.
You're welcome, but I wish you hadn't edited your post and removed the parts where you talked about English being "versatile" and "evolving" in a very patronizing way, especially seeing how I referred to it in my response. Revisionism much?
Instead exit gracefully?
I like idiorm
That was my first thought, not the pun, but basic education. Not really a question for /php/ any book written in the last 30 years could answer :(
what do you mean by 'enterprise level application'? what is Redbean lacking?
Nope.
I don't know about *you*, but I was actually quite *impressed* by this great *pitch*. It's a *little* bit of a stretch to claim that being *fast*, showing *stack* traces when errors occur, taking *security* seriously, or including *code* generation tools are *innovations* that are *unique* in *the* PHP world though. I am especially *impressed* by the dependency injection container. It uses *XML* and is therefore very *enterprisey*.
Been using it for many months during BETA/RC, very very good framework so far.
I'm doing a project on it right now. I have yet to dive into forms to compare them to Zend Form (which was my main criticism about ZF actually). I think the bundle system makes sense. The RC release cycle have been a bit amateurish though.
There's always [Flourish](http://flourishlib.com/) if you're looking for a PHP library (and then some) to build your own MVC from instead of using a canned one.
Symfony2 is another world than Symfony1...i hope to try it very soon.
I'm waiting for the admin generator before I start a Sf2 project.
I am partial since I wrote it, but it sounds like the [Flourish ORM](http://flourishlib.com/docs/ObjectRelationalMapping) fits your requirements pretty well. It automatically models your tables and relationships, provides hooks and plugins, and has been under solid development for the past 4 years.
We are hosting the UK launch party, if anyone fancies joining us :) Ctrl &amp; F For Sheffield here : [http://symfony.com/blog/symfony2-launch-parties](http://symfony.com/blog/symfony2-launch-parties)
I've been developing on Symfony2 for a few months now and I absolutely love it. Once you have a firm grasp of it's capability you will fall in love as well. With it's release I hope it will create some jobs using this wonderful framework.
I see what you did there.
Can't you use Yaml as well for the dependency injection container? Just a guess, because still haven't tried symfony2, just used the dependency injection container component elsewhere.
has it solved every gripe that most developers had with symfony 1.x?
Funny, I just started a first small personal symfony2 project exactly when this was posted. Trying to get my head around it. It's so different from Symfony1.4. Head explodes... It'll probably take a while before I understand the philosophy behind it.
&gt; By embracing the HTTP standard, and thanks to the &lt;em&gt;ESI&lt;/em&gt; standard They should really use the `&lt;abbr&gt;` tag instead of `&lt;em&gt;` for _ESI_, since even after Googling it I still have no idea what "ESI" is. A demo or screenshots of the debug toolbar and related stuff would also be neat. Overall though, they've done a great job of presenting their product; nice mix of detail with broad concepts IMO.
It's completely different from symfony 1.x, try it yourself :)
Yes you can. The recommendation for public shareable bundles is XML, but you can use yaml or php.
*I* see what *you* did *there*.
In regards to the release of Symfony 2, are the guide books for 1.4 at symfony-project.org still relevant? I've been reading the jobeet book and wonder if there are new tutorials updated for version 2?
If you put it that way, then the best framework is the one you're most comfortable with. Most have a "getting started" tutorial.
RedBean lacks the ability to have any sort of behavior like functionality. Or to specify a few things my app does which RedBean could not do: - Automatically join in a permissions table to *any* query which includes the main app object. For permissions control in the current app using doctrine, any time anything in the app issues a query involving the 'Case' object, that query is automatically rewritten to innerJoin on another table. We also use this dynamic query rewriting in other places. - The ability to automatically maintain created/updated/deleted timestamps. - The ability to easily handle version control of data, as well as soft deleting data. - The ability to perform data and structure migrations. - Support for many to many and other complex relationships. Those are the things off the top of my head that I can think of which RedBean does not offer. This is not to say that you can't do it with RedBean, however it would be a fair bit more work than using an ORM which supports these things.
Does it have to connect to SQL server? I mean if you are setting up a dev environment to learn, use XAMP or something. Get busy learning the code. Configuration stuff will come later. EDIT: Besides getting a framework running is going to be just as hard to figure out if you can't connect to SQL server. I have read several places that a framework is not the best place to start. Try to learn how to use PDO without any framework to connect.
I am reading the "PHP Objects, Patterns, and Practice" book right now. I am trying to learn OOP too. So far it has been extremely valuable. I highly recommend it.
I am a jr. level Coldfusion Developer. I set up a YII frame work, got it to connect to MYSQL. Had to do it for class. I set up the CI framework. I am trying to use it at work. So I'm afraid I have to use SQL Server.
Then one of the requirements of the framework is that it MUST support PDO since you need to connect to MSSQL. FWIW, CI does not have native support for pdo.
This is what I've done for years. I've always wondered how they get those short numbers you can text back to, however.
Then you have to worry about usability
I agree
I extensively test [Flourish](http://flourishlib.com) against SQL Server, especially 2005, and we use it where I work for production sites that need to talk to SQL Server. If you start with the [fDatabase documentation](http://flourishlib.com/docs/fDatabase), it shouldn't be too hard to get up and running. All of the implementations we do use TCP/IP connections and use SQL server authentication instead of Windows authentication. With this kind of a setup you just end up needing to know the IP of the box, the user account name and the password. If you are running an express instance you may need to look up what port it is running on, whereas all of the commercial installs I have seen use 1433, the default. Just today one of the Flourish users released a third-party package for using it with CI2 pretty easily. You can find it at [https://github.com/turner296/ci-f](https://github.com/turner296/ci-f). Also, fDatabase runs in such a way that you get UTF-8 back out of the database. It wraps whatever SQL Server extension is installed on your machine, so you don't need to worry too much about it. I recommend checking out http://flourishlib.com/docs/UTF-8#MSSQL, which talks about configuring FreeTDS if you are running on linux, but gives an overview about how to deal with unicode content. I hope this helps!
Don't rely on CI2's XSS protection for serious projects. Using something like [HTML Purifier](http://htmlpurifier.org) is much more safe; it uses the white-list method, rather than a black-list method.
Thanks, that was already posted above [here](http://www.reddit.com/r/PHP/comments/j1fr0/looking_for_tips_to_move_from_procedural_coding/c28d5mx) and I'll be using the examples from that tutorial.
Haven't upgraded past Symfony 1.1 and don't plan to. They turned a RAD framwork that could save me 20-30% in dev time to another Java wannabe framework that only adds code overhead.
Good advice. Thanks!
No they're not. And no, I think Fabien said he wasn't going to do a Jobeet style tutorial for Symfony 2; a great shame in my opinion as that tutorial was ace.
There's info about it [buried in the book](http://symfony.com/doc/current/book/http_cache.html#edge-side-includes) with a link to the [actual specifications](http://www.w3.org/TR/esi-lang).
Fill out the definitions at the top of the file, and run the script on any host. **Requirements:** cURL and a Moderator account for the requested sub-reddit Adding ?css to the end of the script will fully build the CSS for everything you've supplied. Enjoy!
http://silex-project.org is currently my favorite. It is based on Symfony2 components so if you learn Silex, you're learning some Symfony skills. And if the project grows, it's straightforward to migrate into a full Symfony app.
There are patches submitted that you can find in the CI forum to integrate the latest microsoft sql server (and its pdo) against. Our new great programmer got it going and it looks good. you'll need the sql server 2008 R2 client, microsoft's php sqlsrv&amp;pdo driver, xampp works great, don't forget the visual studio deps. I believe our great new programmer even posted back a how-to make it all work. I'll send this thread to my bud and maybe he can help you with more detail. And big props to the dude who coded the CI to microsoft sql server patches 
No, unfortunately. Calling flush() is like a suggestion only, and only works when everything in your stack cooperates with it. There are so many layers of buffer it'd need to be communicated out past, and anything outside of your own app, like a caching proxy at the client's network, is out of your control. And as mentioned if you use something like FastCGI it's flat-out ignored.
I manage the process pool by mod_fcgid (it's also possible to manage them with PHP). When you do it by mod_fcgid, it will kill execution after the timeout regardless of a max_execution_time setting in PHP. I don't know if it's the case when you manage your process pool with PHP, but I believed it was.
Ah. I've not played with mod_fcgid much. My experience with running php-fpm under mod_fcgi seems to be different. Still haven't tested it yet, though.
Cool, thanks. I can clearly see the SSI heritage.
Ok thanks. So perhaps I should combine the solution with a timeout on the AJAX call, so if it takes more than a second, abort the http request. The PHP will still run until the end of the script with `ignore_user_abort(true);`
If you do, I'd be interested in the results. I could be wrong in my understanding - I was basing it on my observations but I haven't dug into the internals a huge amount.
I tried looking again but failed. I'll just redo it :) I enjoy the blogs of the people who work on PHP since they're practically guaranteed to be accurate and timely. [Stas Malyshev](http://php100.wordpress.com/), [Ilia Alshanetsky](http://ilia.ws/), [Derick Rethans](http://derickrethans.nl/) and [Sebastian Bergmann](http://sebastian-bergmann.de/) are the main ones that I check. Of course [Lerdorf's toys](http://toys.lerdorf.com/) has great content....when he gets around to posting. Speaking of not posting much, [Sara Golemon](http://blog.golemon.com/) doesn't really post anymore, but wow she used to put up some good articles about PHP, but on a C level (zvals, opcodes, etc.), something which most of the other bloggers rarely touch on. She also wrote a book that I hear is very good if you're looking into making a PHP extension. I'm sure much of her material is still relevant, but it is still dated material. 
I think Propel ORM could be a good option. AFAIK, it works with CI and SQL Server
Misterkrad pointed me here to help, since I battled with this same issue recently. I hope the guide I posted helps you out. CodeIgniter Forums: [CodeIgniter Reactor and MS SQL Server - How To Guide](http://codeigniter.com/forums/viewthread/194797/) Also, I'm always happy to help fellow CI developers! Feel free to add me as a friend if you need any other help or just want to talk shop.
A day on the internet is like an eternity. I'm surprised, and very thankful, that you didn't just let the topic die.
I really wish I could upvote this more
I would actually suggest to avoid ORMs and instead to write a pure SQL within [DataMapper](http://martinfowler.com/eaaCatalog/dataMapper.html) pattern ( do not confuse it with ORMs with same name ). The main problem with ORMs is that it causes a "technical debt". Because it makes it fast to solve simple problems, but when you have invested in using it, you encounter more and more complicated issues. And then the problems begin. Besides, I would be especially wary of any ORMs that implements ActiveRecord pattern. It causes a huge discord between mental models of OOP and SQL.
I'm no massive PHP expert so I'm a little confused in places. The [code runs](http://www.tico24.com/c25kFlair.php) and it shows the image correctly, however it never sends the PM to the user and doesn't do the final stage of actually setting up the image. What do I put in 'define the encryption key for the pm'?
See [php array length](http://phpabout.com/php-array-length-tutorial/)
&gt; There's the channel on efnet as well, but I've found them to be a little draconian if you disagree with them on pretty much anything. Yeah, not the most friendly support channel on IRC. Understandable given the service they provide, but still...
No, I really mean there is no room for disagreement there. If you happen to disagree on even philosophical viewpoints that have no absolute correct answer you risk being kicked out and banned. Channel moderation is needed in some cases, but it should be used as a last resort when other options have failed. It certainly shouldn't be used to enforce your opinion on the users. The function of the OP in channels that are run well is to keep the peace, and to ensure the channel stays topical. Not to crush everyone with a sense of free will.
Sorry I just realised you said efnet. I was talking about freenode.
Just tested with custom-compiled 5.3.6 on OS X. max_execution_time is set to 30. This script successfully writes to /tmp/testfile 10 seconds after apache gives up and sends a 500 response: &lt;?php sleep(40); file_put_contents('/tmp/testfile',date("Y-m-d H:i:s")); echo "Done"; phpinfo(); Apache's error-log looks like: [Fri Jul 29 10:37:51 2011] [error] [client 127.0.0.1] FastCGI: comm with server "/web/php/sbin/php-fpm" aborted: idle timeout (30 sec) [Fri Jul 29 10:37:51 2011] [error] [client 127.0.0.1] FastCGI: incomplete headers (0 bytes) received from server "/web/php/sbin/php-fpm" PHP is configured like: &gt; './configure' '--prefix=/web/php' '--enable-fpm' '--with-mysql=mysqlnd' '--with-mysqli=mysqlnd' '--with-pdo-mysql=mysqlnd' '--enable-sockets' '--with-mhash=/web/lib' '--with-gettext=/opt/local' '--with-gd' '--with-t1lib=/web/lib' '--with-freetype-dir=/web/lib' '--enable-gd-native-ttf' '--with-curl=/web/lib' '--with-openssl=/web/lib' '--with-openssl-dir=/web/lib' '--enable-mbstring' '--enable-bcmath' '--with-zlib=/opt/local' '--with-bz2=/web/lib' '--enable-calendar' '--with-libxml-dir=/web/lib' '--with-mcrypt=/web/lib' '--with-pspell=/web/lib' '--with-jpeg-dir=/web/lib' '--with-png-dir=/web/lib' '--enable-sqlite-utf8' '--enable-pcntl' '--enable-zip' '--enable-exif' '--enable-soap' '--with-iconv=/opt/local'
I've never used PHP before, where do I have to put '?css'?
Is it really so different from 1.4? At work it's our standard framework as of perhaps 4 months ago. It would be disappointing to see the framework get away from me over the period of time I'm employed with this company... I really like symfony. I guess I can try to keep up in my spare time at least.
What did you think of form handling in 1.4? I like it, but I'd like to see certain improvements. Particularly with i18n.
Mine was a form's zip validator using regular expressions of epic simplicity. I was overly pleased with it.
Holy shit, I have decent LAMP skills and I didn't even know they were called that. I always thought LAMP was a language. My introduction to development hasn't been ideal.
after the url
any text string
Hmm. Then I'm stumped :( I appreciate you're probably not offering tech support, but if I send you my code, would you be willing to take a look?
Of course I would! Although if your server does not support cURL then the PM and the flair won't work :(. (If your server doesn't support cURL I can host it for you)
I essentially started with symfony 1.4 as my introduction to PHP. I knew bits and pieces, understood what OOP is and some principles behind it. My introduction has been pretty brutal and unforgiving. Thankfully my brain works and I can pull through. I think executives at my company simply didn't understand what web designer meant and I was fucking thrusted into a mock development role. Releasing quality code on time is going to cause me to finish going bald much sooner than I expected. I suggest starting with PHP, then using your newfound skills to use a framework to your advantage, not the other way around. You'll hit so many walls.
I try to shrink code, sometimes to the detriment of timelines. Whenever I see something overly procedural or protracted, I get to work.
Hmm. Maybe that's the problem. Is there an easy way to tell? I'm just hosted on DreamHost. edit: google seems to suggest it does support curl.
I try to shrink code, sometimes to the detriment of timelines. Whenever I see something overly procedural or protracted, I get to work.
&gt;sometimes offend co-workers I suppose because I am somewhat new to writing code, my coworkers hate any refinement I make to our applications or sites. At first I worried that I was making bad changes, but no one has 'corrected' my improvements so I think it really just damages their ego. I initially started at the company as a graphic designer of all things. The php developers here though, they write everything in these long, drawn out, barely commented, poorly named swaths of poorly formatted code. I think they've gotten lazy. Often what they write in 6 or 7 lines of code can easily be turned into 1 or 2 lines. Not that that's the ultimate gauge of code quality... But it says a lot about their efficiency. edit: I should add that they are far better and more capable with php than I am. I'm not trying to say I'm better. Just tidier.
Create a php file (or edit the current one) do have the function phpinfo() This will output all the data regarding your PHP, then ctrl+f for cURL
It's apparently enabled, yes.
Debugging the PM, it returns BAD_CAPTCHA Maybe reddit thinks your mod bot is a spam bot? I'll take a double look at the compose API, but this is the first time i've seen the message.
ah. It's a brand new user that I created for this task, so maybe the bot isn't allowed to PM yet. I'll try with my own username/password. edit: No. Even using the user 'tico24', it still doesn't send a PM
&gt;spladug: you probably got rate limited and the site would be showing you a CAPTCHA right now If it's a new account that could be the case too.
Doesn't work for my username either.
but the question is, are you still receiving the captcha error. How I check: Remove the redirection code on lines 149 - 154. Add: echo 'Key 2 Encode: ' . $key2encode; on line 127 //comment out line 139: //CURLOPT_RETURNTRANSFER =&gt; 1, Give me the jumbled jQuery thats returned.
Sounds useful. I convinced coworkers to use mine. Ahh, those "first real job" memories
Have you tried [PHPActiveRecord](http://www.phpactiverecord.org/)?
 Key 2 Encode: w543b4w2z2g4m2l464q5n5f4t4e454h454w2t3c4y5m454g5g4g5k4n453u474j5o524s2{"jquery": [[0, 1, "refresh", []], [0, 2, "attr", "find"], [2, 3, "call", [".error.USER_REQUIRED"]], [3, 4, "attr", "show"], [4, 5, "call", []], [5, 6, "attr", "text"], [6, 7, "call", ["please log in to do that"]], [7, 8, "attr", "end"], [8, 9, "call", []]]} Using my amazing detective skills - I'm guessing that means its not logging me in?
It's not creating the login cookie, are you sure the cookies .txt is already created (and blank) and in the same directory as your script?
cookies.txt exists in the same directory, yes. I also chmod 777'd it. edit: It was not empty, I emptied it and tried again. It just filled up again. edit2: Im a retard - I didn't update the modhash when I switched users. Jquery output now says: Key 2 Encode: w543b4w2z2g4m2l464q5n5f4t4e454h454w2t3c4y5m454g5g4g5k4n453u474j5o524s2{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3, "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr", "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []], [1, 10, "attr", "find"], [10, 11, "call", [".status"]], [11, 12, "attr", "show"], [12, 13, "call", []], [13, 14, "attr", "html"], [14, 15, "call", ["your message has been delivered"]], [15, 16, "attr", "end"], [16, 17, "call", []], [1, 18, "attr", "find"], [18, 19, "call", ["*[name=captcha]"]], [19, 20, "attr", "attr"], [20, 21, "call", ["value", ""]], [21, 22, "attr", "end"], [22, 23, "call", []], [1, 24, "attr", "find"], [24, 25, "call", ["*[name=to]"]], [25, 26, "attr", "attr"], [26, 27, "call", ["value", ""]], [27, 28, "attr", "end"], [28, 29, "call", []], [1, 30, "attr", "find"], [30, 31, "call", ["*[name=text]"]], [31, 32, "attr", "attr"], [32, 33, "call", ["value", ""]], [33, 34, "attr", "end"], [34, 35, "call", []], [1, 36, "attr", "find"], [36, 37, "call", ["*[name=subject]"]], [37, 38, "attr", "attr"], [38, 39, "call", ["value", ""]], [39, 40, "attr", "end"], [40, 41, "call", []]]} edit3: It appears to work! Thank you. edit4: Now I just need to work out how to get the sprite to work.
[Flight](http://flightphp.com/) - a fast, simple, extensible micro-framework [Slim](http://www.slimframework.com/) - a Sinatra clone in PHP [FatFree](http://fatfree.sourceforge.net/) - a single file framework with lots of features [Limonade](http://www.limonade-php.net/) - another framework inspired by Sinatra [Klein](https://github.com/chriso/klein.php) - a lightning fast router for PHP [Silex](http://silex-project.org/) - a micro-framework from the Symfony developers
Which URL? I'm trying it out on a local host before looking to host this somewhere.
Glad it's working! If you need any more help i'd be glad to lend a hand.
It will work on the local host too, just add ?css after the .php Example: localhost/flairbot.php?css
Sorry to keep bugging you - I can't get the sprites to work at all. This isn't really anything to do with your php script. I've even taken the css and the sprite image from [this guy's post](http://www.reddit.com/r/modnews/comments/j1piv/moderators_give_your_users_some_flair/c28f4ly) and it just doesn't display anything in my subreddit - that's before I get your script involved! edit: Sorry, once again - I've realised where I screwed up. As a thank you for your helps - I want to send some reddit gold your way... it'll be tomorrow though - hope that's ok?
Remember the sprite has to be uploaded to your subreddit as well, and the $sprite_image definition should be set to the *exact name* of the uploaded image. [Looking](http://thumbs.reddit.com/t5_2rgoq_0.png) at the image you have uploaded on the copy of the script you sent me, there's only one sprite there.
Yeah, I've not changed anything in your script at all. I uploaded a copy of the /r/assistance sprite and CSS to my subreddit and referenced it accordingly, but no images display.
Hadn't ran across DataMapper before. Do the SELECT queries live inside of PersonMapper as well? ie: $list = Person::getList(); class Person { public static function getList() { PersonMapper::getList(); } } That seems redundant, but I like the idea of abstracting the actual DB access from your model.
Just to let you know, I had to edit your CSS to make it work - there was an extra space near the beginning and I had to remove all the ':before's to make it work without an annoying grey background.
Yes you could say that queries *live* inside the mapper classes, but it would give you the wrong impression of the structure. I will try to explain a bit. Emm .. the concept of mappers is usually seen in relation to *Domain Models* , which is closely linked to classical MVC and Model. The bes example i can come up with for a [domain model](http://martinfowler.com/eaaCatalog/domainModel.html) ( .. name 'domain business model' is also common ) would be a **Library** model. And this domain model would use two types of *[domain objects](http://c2.com/cgi/wiki?DomainObject)* : **Patron** (visitor, reader .. whatever) and **Book**, and it operated with multiple instances of said objects. &gt;Node: domain model and domain objects are both forms of M in MVC, the distinction is only in hierarchy ( or object graph ). Domain model is the domain object which provides you with the public API, and you can come up with structure where instance of same *class* can be either Domain Object ( used only internally ) or Domain Model and vice versa. If you use DataMapper patter , then neither Library nor Books nor Patrons are aware of system which is used for inventory of Library. _That part is responsibility of **Librarian**._ In this case *Librarian* is the DataMapper. Code example &lt;?php class Library { protected $_librarian = null; public function __construct( Interface\Mapper $_data_mapper ) { $this-&gt;_librarian = $data_mapper; } public function add_reservation( Interface\Patron $user, Interface\Book $book ) { $user-&gt;reserve( $book ); $this-&gt;_librarian-&gt;store( $book ); } } As you see, the method `add_reservation` doesn't give any indication about where the information was stored. Most likely the the `reserve` method on user did something to the internal state of book, but Library model does not care about it. It is not a responsibility of Library. Neither is the Library aware of storage medium. This method would not need to change if you moved from SQL database , to , for example , external REST API, or flat-file storage. You can freely change the mapper , and the domain object as long as they still have the same interfaces. P.S. I would suggest to avoid usage of static classes , because it creates tight coupling.
Rasmus Lerdof is a terrible programmer, I would advise against attaching him to any project.
entry-level developer, $22/hour isn't bad. The only way I think you could ask for more money is if your job involved directly your design skills. That said, if you think your skills are good enough talk to your managers and show them that you're worth more. Also just wanna address this line &gt; I know I produce very high quality code. Careful with that thinking. Your code sucks, my code sucks, everyone's code sucks. You don't realize it know but 5 months from now you'll look at it like, "What idiot wrote this!?" That type of thinking leads to complacency which is a death-knell in a ridiculously rapidly changing field (web dev.) Didn't mean to rant but yeah
You could probably make more, but not at the company you're working at now. Add it to your résumé and shop around.
Well put. I should have phrased it as 'my code is much better than what other people were writing previously'. My lack of complacency is really the engine behind getting me where I am and I agree entirely. Edit: What do you mean by my job directly involving my design skills? I do design quite a bit still.
I am sorry but you deserve a down vote for even mentioning Access.
If you're developing with a framework (Symfony in this case), it's probably giving you the right groundings in architectural design. Getting familiar with best practices is what you should do now - design patterns, unit tests, automated functional tests etc. *Don't* worry about what language you're coding in. Once you have the fundamentals of a programming language sorted, you can move between languages with relative ease. In terms of money, you probably couldn't find better elsewhere if you went in purely as a junior developer. Certainly once you get this stuff ingrained in you, you deserve more. If you're still designing with this job though, then I'd ask for more.
In my experience your current employer is never willing to pay you until somebody else wants to hire you. Like the old cliche' that a woman is never interested in sex until another woman starts eyeing her man. If you're stuck - get moving. Nobody is gonna give it to you - you gotta take it.
Thanks. This is insightful. My goal right now is pretty much what you've described - Getting familiar with best practices and fundamentals of programming. I really love it so far. I do quite a bit of design still, along with regular frontend coding. My graphic design skills are actually pretty highly regarded at the company, which combined with the fact that I'm the only 'web designer' who can do any development makes me feel particularly under compensated. I get worked pretty hard. Thanks again. I don't think I'll be asking for more money quite yet... I may just shop around discreetly and see how I'm valued locally.
I have a feeling it's looking this way. I certainly don't want to over-value myself and lose a great opportunity (I'm currently learning a hell of a lot for a decent wage after all - I've had jobs where that wasn't the case) so I think I will establish my fundamentals in OOP a bit more and then start shopping around. I definitely need more time to be able to claim I'm 'good'. I think part of what bothers me is the subject matter too... I'm not all that interested in what I'm building at work. It would be amazing to find a position where I was really into the applications.
Code samples?
I think if you're doing the work of a designer as well then you're definitely not being paid enough. I've never used Symfony, but I found [this detailed manual page covering both unit and automated functional tests](http://www.symfony-project.org/book/1_2/15-Unit-and-Functional-Testing). It hasn't been updated with the new versions for a while, but I doubt much if anything has changed. Head First Design Patterns is a book for design patterns a lot of people swear by, if GoF's Design Patterns is too heavy for you (it's too heavy for most people with any shred of sanity left).
I always say. If you believe you can make a good case for a significant increase in pay then its worth going for. If you ask me, you deserve it. But just because you deserve unfortunately doesn't mean you will get it. If it were me, i would start looking looking for other work with the skill set you obviously have with a higher starting salary. And once you have something hopefully locked in (which is usually easier if you already have a job). Go to your boss and ask for the raise you want, if they cant or are not willing to provide it you have somewhere to go where you can. Since you mentioned your pay is in CAD, at least me, living in Toronto there are many job opportunities out there. Even with the ups and downs of the market Toronto has always been a pretty easy place to get a job so long as you have the drive and skills to get one. I know its not always that simple, but in my experience working somewhere that you feel you are undervalued can be a very depressing.
I just left work for a long weekend, but I'll post something when I get back. I'd actually appreciate some feedback! I'd love to find out that my code is crap or that it's not - I find it hard to tell when rating myself. I spent quite a bit of time migrating sites built by others to symfony, which involved rewriting code and breaking repetitive procedural code into proper classes and functions. So I know my code is technically better in that regard, but more objectively, it could be really shitty. I do follow the best practices laid out for the symfony framework (really closely) so that might mean something.
I'd say that they are basically paying you to learn and sharpen your skills, and you are doing it in a pretty comfortable environment. If you get hired on elsewhere for a significant amount more money, the responsibilities and expectations will be likewise raised. I'd figure out first how much you can still learn / grow while there, and move if you are not learning enough.
Excellent advice... I think this makes a lot of sense.
Be interested in how you are building it and how you can improve imo. There are all kinds of things that I do that I could give two shits about, but at the end of the day the tech is what I find fun.
Frameworks aid in development. But learning curves do not. They aren't for beginners, but rather an organized an easier way to build applications. PHP has the flexibility to be a lot of things, which makes it great. But easy to write sloppy code. Frameworks Help that.
Aren't those libraries you personally developed a "framework" of its own right? I dare say you've already been using a "framework" of your own devising all this time and just not realizing it. In regards to "how easy is it to customize others' frameworks", I believe it all depends on any ini settings or built-in extensions, classes, or functions they override at startup that you'd need to account for. You'd probably have to check their documentation to find that out. Otherwise, it should be as simple as just defining, including, and calling your own defined function or class instead of their's.
They really are kind of my own framework but lets say one day I need to collaborate with someone on a project. I understand my stuff great but I am sure they would have a tough time. Appreciate the info thanks!!
Ya, if someone needed to use my libraries I would feel bad for them. I am not to worried about the learning curve to much, I have a very good understanding of OOP.
Yes, you should use a framework. Just try them all and pick one. Read the documentation, create a hello world app, and get a feel for how they do things. At the core most frameworks call themselves MVC, but they might do things here and there rather differently.
&gt; They really are kind of my own framework but lets say one day I need to collaborate with someone on a project Documentation helps. But as dontforgetpassword [said](http://www.reddit.com/r/PHP/comments/j3uq2/is_using_a_framework_really_decrease_development/c28x5tw), learning curve. Time it takes to learn another's framework is downtime. Whether your own framework or any others out there, whether for just yourself or future partners, this should be a top consideration when choosing any framework.
Take a look at some of the better frameworks (I'd suggest Symfony2 and ZF, since those are the two I've studied deeply and thought were smart), and make sure you understand the problems they're trying to solve, so you can evaluate their solutions. You might be surprised at how much you can learn from them, even if you never use them yourself. Chances are that once you see how much they've got nailed down very tight, with clean code, and good documentation, you'll start using it instead of reinventing the wheel all by your lonesome. 
Developing sites is a side gig for me and im in between projects right now so that's why I am looking into this. My main goal is to develop faster and better security. I am very conscious about escaping and preparing statements but we all make mistakes now and then. If this allows me to remedy those issues then ill take the extra time to learn.
Developing sites is a side gig for me and im in between projects right now so that's why I am looking into this. My main goal is to develop faster and better security. I am very conscious about escaping and preparing statements but we all make mistakes now and then. If this allows me to remedy those issues then ill take the extra time to learn.
Think of all the hours poured into your libraries that you reuse. Now imagine a team of equally talented programmers are also working on a similar library for free. Now imagine a community of 5000+ who test qa and suggest new features for that library all for free. that's the benefit of a framework. Also there is nothing wrong using someone elses code. In fact if I was hiring programmers and had to pick from one who used a framework and a DIYer I would pick the framework guy because he knows not to reinvent the wheel.
I totally agree with your last point. In my career I have worked with several guys who felt the need to write their own framework and in every single case it was far worse than the things you can use for free. Somewhere out there people are talented enough to write a good framework, it's just that for every person that can do it, there are hundreds or thousands who can't but try anyway.
once you've learned it, yes. i like codeigniter, easy learning curve and good docs
Do they decrease development time? Well, what's faster? Writing and testing safe complex SQL for HABTM relationships from scratch or having multiple layers (PDO + database wrappers + SQL generation) on top? Starting from nothing or having a full CRUD system with a generated MVC scaffolding and URL rewriting ready to go with little more effort required than designing database tables? The answer's pretty obvious. :P Frameworks aren't for beginners. They're there to provide a jumping-off point with solid, safe, well-tested underlying systems and useful tools to keep you sane (an HTML form generator, for example).
If you have a big project, you need to use a Framework: this will decrease development time. Bigger is project, bigger is the "decrease". There is a not simple learning curve but after this you can develop better with OOP - MCV pattern: your project will be more manageable (after and during development phase).
Basically, the bigger the framework, the more shit it will have done for you out of the box. These will apply to most: * safe and easily configured email? Done. * Injection-safe database back-end? Done. * Easy to use session and user management? Done. * Organised separation of concerns of code? Done. * Automatic generation of common Create/Read/Update/Delete code? Done. * Fast prototyping of core logical functionality? Done. * Automatic CSRF protection in forms? Available. etc. All the stuff you probably probably written, other people will also have written, but (likely, unless you are a very well-organised coder) in a more structured and organised fashion. Also, while you are building applications, other people might be releasing open-source plugins for the framework you're using, that contribute more and more code that you *won't* have to write. 
Define a 'proper class'? You can still write classes that are not object oriented you know. I wanna see some code samples.
I tried a few for a while after convincing myself I needed one but I was setting my sights way too high. Learning curve on some was a pain in the ass. Ive now gone back to just writing things from scratch &amp; worrying about things like email later.
you can learn a lot using a framework in my experience
In my eyes the key role of a framework (as it's name implies) is patterning your development in an extensible and modular way. MVC Pattern, Factories (Dependency injection pattern) and configurable global application contexts are some of the the tools Frameworks use, and guide you to use, during your development to help you achieve extensible, modular and maintainable code. Using a framework may not decree your development time right away, but it will drastically decrees your maintenance time, which is nearly always longer. MVC separates the business logic (*M*odel) the presentation/output (*V*iew) and Request(*C*ontroller) : * The patterns allows things like changing/adding views (json,rss,xml,csv,excel etc) independent of business logic and the request handling. * Expose your application as a web-service (or cli, or whatever) by only extending your view to support that output, without changes to the actions controller specific implementation or business logic. Factories makes the componenets of the application extremely modular * Switch things like loggers, translation managers etc by configuration... without touching any part of the application which uses them. * Switching template engines, only needing to add language specific templates. Having a global application context gives you some of the magic that abstracts your application from the context it runs in: * Routing for soap, cli etc contexts that set the appropriate views and output types. * Translation manager that can be set by routing (or anything else) and live as part of the application in all levels (Say for validation errors as well as templates and other output types). list goes on... 
 Just curious, which framework would you recommend?
Frameworks speed up development, and they're for more advanced PHP users. I think you have a slight misconception of what they are and do. It takes things like injection attacks and connecting to a database and has them done for you. A lot of frameworks have built in user authentication/management that you could probably write yourself, but why spend the time? Most also force a design paradigm (model-view-control) that keeps your code neat. I can't stress enough how vital using a framework is if you plan to scale your site in any way. 
My promises are all kept by [Agavi](http://www.agavi.org/). a word of caution - Agavi is a high-level framework best suited for serious development and where your requirements may accumulate and change in unexpected ways. The principle that guides Agavi is: &gt; Agavi puts choice and freedom over limiting conventions, and focuses on sustained quality rather than short-sighted decisions. As a result It is a bit more verbose and abstracted then the popular PHP frameworks. Improving Time-to-market for 'common' projects by relying on out-of-the-box components is not it's Focus, especially when it may be limiting. I wouldn't say Agavi is the best solution for any Project, but I use it for all my PHP projects for the last couple of years.
So what's the problem you're having?
I'm not even seeing ZipFile as a php class. What I do find is [ZipArchive](http://php.net/manual/en/book.zip.php). What would be helpful to know is where you are having trouble. OK, I've figured out where your trouble is: zip.php &lt;?php // Check POST vars.. if(!isset($_POST['checkfiles'])){ exit("You didn't choose any files"); } // ZipArchive - There is no ZipFile. $zip = new ZipArchive; $zip-&gt;open('download.zip', ZipArchive::CREATE); // Here, you had $zip-&gt;addFile($file); - You needed $selectedfile. foreach($_POST['checkfiles'] AS $selectedfile){ $zip-&gt;addFile($selectedfile); } $zip-&gt;close(); $zipfile = dirname($_SERVER["SCRIPT_NAME"]).'/download.zip'; header('location: '.$zipfile); ?&gt; 
The easiest-to-learn, most-effective framework I ever worked with was CodeIgniter. Give it a try if you're curious. They have excellent documentation. The learning curve is not that bad. You just have to understand the MVC architecture. And if you don't, it's a great intro. But yes, it does make it a lot easier for building larger scale applications. I was able to put together a full user account system with it in a couple hours after I was first introduced. Another great MVC framework is Sapphire, but it usually only comes bundled with the SilverStripe CMS, another excellent piece of software.
After I select the items and click submit, it says the page can't be opened. Not that it doesn't exist, but that there's something wrong with it. And no zip file is showing up in the directory.
The first part seems to be working, but it's not taking the selected files and zipping them.
I've just updated my reply. Check it again.
Be observant of what other devs make in your area and what your boss makes. a lot of companies pay bottom dollar even to managers. In my area 22 an hour is unheard of. I had to start my own freelancing business to make a proper salary in this area. I'll eventually move to a better area. But do your homework before asking for more.
Does it handle other HTTP responses other than 200 OK and 404 Not Found? I'm having a lot of fun playing around in Faster! :)
Were you able to get the code to work? I've just made a final update to the code. Now it will work regardless of where your script is at.
Lots of people are talking about the technical side of things. I'll focus on the non-technical side. Established frameworks allow you to get people started and productive faster. If you are using Zend or Symfony, you can hire someone who knows Zend or Symfony, and they already have a good understanding of how your system is working. Sure, there is business logic that needs to be learned, but it's much better than having to learn a new, custom framework on top of that. Case in point, we recently hired someone who knew Zend and Doctrine, and they were able to start being productive much quicker because they already understand what we were doing, how we were doing it, and what our approach was. We could focus on the business requirements and didn't have to explain where things went, the naming structure, and other technical details. He was able to jump right in to solving problems. Their is also the documentation. Good frameworks have lots of documentation, and people are always writing documentation for them. This lets you reap the rewards of having good documentation written for your underlying system. Finally, there is also the updates and bug fixes. While you might fix some yourself, more often than not, the contributors to the frameworks are adding and testing more than your team could.
Screenshot of page?
Sorry it took a bit to respond, I got distracted on something else. That's almost perfect! The only thing left is that that download file is staying on the server, so after you make the initial selections and zip/download it, you can't make other selections to download because it always gets that original download file. I need it to delete the download file as soon as it is downloaded once. So it will take the selections, zip them, force the download, and clear the zip file so it can be reused. Is that where I would use @unlink('download.zip'); Thanks so much for your help! Or would I have to do... $cleardownload = "download.zip"; unlink($cleardownload); ? That's what I gathered from searching how to delete a file with php.
Not much to it, but here's a [screenshot](http://i.imgur.com/uE7bH.png). It shows all the files that are in the directory, in this case I'm just using two test files. Once you check them and click submit a zip file starts downloading with the selected files.
If you add unlink to the end of zip.php, it will delete the file before you can download it. If this is a personal use script, then it should overwrite the zip file each time you create a new one. The only alternative I can see is changing the code to read the file out to the browser and then delete it afterwards. You'd have to change the header to output a content type, then stream the contents of the file to the browser.
It's not overwriting the zip file each time, that's what I'd like it to do. Could it be a problem with permissions? Would this work for streaming it? header('Content-Type: application/zip'); header('Content-disposition: attachment; filename=filename.zip'); header('Content-Length: ' . filesize($zipfilename)); readfile($zipname); 
Just get [Zend Server CE](http://www.zend.com/en/products/server-ce/). Gives a very consistent environment across platforms and is really simple to install.
Read the [Ruby on Rails security guide](http://guides.rubyonrails.org/security.html). The examples aren't in PHP, but Ruby is generally easy to read. It covers pretty much everything security related. 
I'd tried that, but it doesn't seem to wait until the read is complete to delete the file. Perhaps there's a way to have it wait until the read is complete, and the file has been closed? It could also be permissions. What's your current permission settings?
lol
Wait, so what's the problem? Sounds like it works to me. I don't understand.
No luck - I have a couple more things which will solve the CAPTCHA issue though: 1. Wait for the new bot account to age a little. 2. Allow the bot to earn a little legitimate karma (post some links to your subreddit through it). 
644
the ?css part is really confusing me, I've uploaded the script as "index.php" and uploaded cookies.txt. I've tried renaming index.php to index.php?css with no luck. http://gw2reddit.alwaysdata.net/
I certainly think your philosophy of wanting to learn the ins and outs of PHP before diving into a framework is a good idea. If you don't know PHP well, a framework is simply a crutch and developing good code will be difficult, and you won't learn as well. However, once you do, it becomes another tool in the toolbox and can give you a lot of flexibility (while still adding an element of uniformity) and really speed up production. It also makes collaboration easier. Most good frameworks are pretty easy to extend with your own functionality, drop in your own libraries, etc. They're not the be all and end all of software development, but they are a tool, quite often a useful and valuable one, but each project should be evaluated on its individual needs. 
Codeigniter was the first PHP framework I picked up. I often see it called a "beginner" framework because it lacks some of the features, performance, and flexibility of frameworks like Symfony or Zend (which is somewhat subjective, somewhat fact). Personally, I think it's great for the small to medium projects that most freelance devs are doing 95% of the time. I recently built a fairly large REST API with CI and it worked out great. I was amazed at how easy it was to pick up. It's extremely well documented and an experienced developer should be able to get the basics in just a few hours. 
If you're going to reinvent the wheel, at least make you sure you end up with a better wheel. 
I think every developer should try their hand at writing their own framework. it's a great learning experience, both in terms of programming and managing a large project. I just don't think they should be married to it and determined to use it in anything but their pet projects unless or until it reaches the level of maturity and quality of existing frameworks.
It works once. After that the original selection is always downloaded because the download.zip file it creates is never cleared.
using Zend Framework and Doctrine 2 has thought me more about good OOP practices than any php book ever has
This is like asking, does using code over that you already coded make it faster? The answer is of course it does. But the problem is if you don't remember how you wrote the code to do it. That is what you have with a framework. Code that is reusable that you don't know how to use at first. Then you remember (learn how to) use it and bam you are in time saving mode. Plus if you start working with someone else, you know what type of programmer will be a good fit (php user versed in the framework you chose).
Yes. Much easier.
Using back ticks, you can issue commands to the CLI. http://php.net/manual/en/language.operators.execution.php So just do it that way.
You just put the widest grin on my face, sir.
You don't have to rename the script, you just have to add the text string ?css after the .php When the script runs, it checks to see if ?css is entered into the URL, if it is, instead of giving a sprite selection it outputs the CSS, if it's not there, it shows the selection.
How do I go about adding ?css to the url without changing the file name? I think I know too little about coding to do all this, I might just resort to doing it by hand.
Example (if you're still using index.php): http://gw2reddit.alwaysdata.net/?css
Why not just unlink the file at the top of your script? That way, it's deleted before the new one is created.
I'm waiting for the day when I come across a framework that claims to be a "non-MVC" framework.
Spend 10 hours, get 20 back within the first 6 months alone. It's an "investment" that pays "interest" effectively, but it also makes you better at working with other people's code, which is hard to quantify but is a great thing, especially for employability.
Well I doubt that anyone would advertise as such, some frameworks do not apply the pattern as rigorously as others (Hell, even symfony 2 tutorial on controllers has an example with HTML syntax issued by the controller) but in general MVC is straight foreword and makes enough sense for any Application framework not to declare it self as 'non-MVC'. 
I recommend you use the PHP5 method getting a list of files in a directory, instead of the PHP4 method: foreach (new DirectoryIterator('path/to/directory/') as $file) { // there are three types of 'files' in DirectoryIterator: // isDot() - ignore these, these are just . and .. referencing the current and parent directory // isDir() - directories, includes . and .. // isFile() - non-directories if ($file-&gt;isFile()) // mp3s will be files, not directories { echo $file-&gt;getFilename(); // file.mp3 } } Use that to get a list of the files. getPathname() will give you the path/to/file.mp3, which is more convenient if you are going to be using file functions on it later (like $zip-&gt;addFile()). EDIT: Sorry, this isn't a tip on how to fix your problem. It is just a tip on what you should be doing in PHP instead of the shitty old PHP4 method of scanning directories. This is a Hell of a lot easier and will help you to save time and frustration in the future.
I think he's more interested in understanding the method.
recess! framework claims to be an mvc framework. but is really versatile if you know what you are doing.
I find that Frameworks are useful when starting off, but as time goes on they harm more than help. In my last few projects, we spent the first few days of the project writing a new framework specifically for the application. This has the advantage the framework was developed with the application in mind (not vice versa) so gives us more flexibility, and by developing your own all the developers know the full code base inside-out, which REALLY helps with troubleshooting and finding bottlenecks.
My best recommendations would be to build a REST-based API, use a framework such as [frapi](http://getfrapi.com), and treat your API as a [first-class citizen](http://phpadvent.org/2010/first-class-apis-by-helgi-%C3%9Eormar-%C3%9Eorbj%C3%B6rnsson) in your application (if at all possible).
we used [recess!](http://www.recessframework.org/) and toyed around with frapi, and quite a few others. Our product is quite amazing. Implementing stateless authentication and numerous data outputs. We've forked recess! for a lot of our own needs. We recently released our first beta mobile app for testing coded in Sencha Touch that pulls everything from the api.
Come on... you could've picked something better, it's a toy framework for writing simple things, and will do nothing but hinder you in the long run. We have better ways to organize things, better ways to handle database access and UI interaction etc... pretty much every component that CodeIgniter has as standard has been done in a slightly ass-backwards way, but it has documentation that explains stuff to noobs (and leaves out the real meaty details, like... the type of objects being returned). 
Last I checked recess was pretty much dead, with the project owner being gone(?).
I know this is r/php but if it does not absolutely have to be PHP, I've found that Sinatra is great for this. I recently built a REST API using Codeigniter, of all things. It wasn't my decision to make and not really my first choice, but it worked surprisingly well. Not that I'm recommending it for this purpose, I was just surprised how well it came together and it made me re-thinking adding public APIs to a couple of small web apps I'm building in CI. I'm definitely going to check into Frapi, though. 
Yea, it is. We forked it and made enhancements. We are still looking at other options. The code is portable. We aren't utilizing the frameworks past the REST controllers.
We considered Frapi, but decided the ability to add methods in massive quantities could be hazardous to standardizing our data. We opted to use the simplest framework within reason, and code extremely generic methods. getSpots, getFiles, etc. we didn't really need much overhead. We sliced the recess framework up and added stateless signature auth. JSONP out and XML output.
Spammiest blogspam that ever blogspammed.
[CakePHP's REST](http://book.cakephp.org/view/1239/The-Simple-Setup), if you're interested.
I've been looking into yii with heavy interest the last few days, any opinions? I believe it handles REST as well which is one of my requirements. I was going to go with CakePHP, but the "freshness" of yii is something that I like
Using strtotime like that is bad. Strtotime is pretty slow.
sake of reading and correctness i suppose. no professional application.
I had no idea about UDF in SQLite, very cool! Have an upvote :)
[Agavi](http://www.agavi.org) You can implement any API on top of it: SOAP, XMLRPC, REST, REST+JSON, hell if you wanted hessian binary over a serial wire you probably could. The correct MVC separation means that introducing an API over your code is just a new layer of code and configuration, almost never modification of existing code.
Awesome. Does a similar function to `sqlite_create_function` exist for MySQL?
You may want to put your compensation or the amount of the company that will be theirs. And what you will be doing. Developers don't want to work for free and if all you got is the idea they have that as well.
If you can't do/don't understand OOP, you're not ready yet. I would wait until I max out all that I could learn or if the job is unbearable.
PHP has very simple OOP syntax. Don't let it overwhelm you. It's highly influenced by Java's syntax: http://www.youtube.com/watch?v=c5kfCH50wl0
Some developers choose to work for free if they are working on open source projects...but yeah if it's a paid gig then the compensation package is kinda required.
Don't use echo. You can write a simple function or method that returns htmlspecialchars($var) in your templates. I personally use a template class with a method called out(). So I would have something like this in my templates: &lt;?php $this-&gt;out('first_name'); ?&gt;
From the look of his website it doesn't seem like it is a open source project.
Get the Syntax down first. Especially basic OOP. Some new frameworks are also using anonymous functions, method chaining, etc.. So it would be a good idea to really understand how these things work.
From my research no, i would have preferred that. But I think it's because of sqlite's server software essentially being the php script.
Which means he's looking for someone to do all the work while he takes all the money. Which means he's a scumbag.
I've also run into this issue, after much research I found that you can't use a prepared statement to change the order or limit.
Is there a reason you need to have the limit values and order type paramaterised? IANA expert but I think paramaterising is only necesary for sanitising input. If your limit values and order type are variable you could set them in php and construct your query like this... "select * from db.table order by ? $sorttype limit $start,$num" I am no expert. I'm sure someone will come along with the answer. 
So with PDO you are not able to change the order and limit, and with the MySQLi prepared statement you cannot change the database/table. Basically there is nothing that easily allows you to change almost anything in a statement? 
Can confirm. these are times when you'll have to use [validation](http://php.net/filter_var) and interpolate.
Backticks are used in mysql to escape column names as literal text. They are not the problem.
well the page that is using the statement has the order and limit set by the URL. So I was trying to make it a little more injection safe.
use code to build the SQL statement before passing to a database object, you have full control over every aspect of the SQL string.
Makes sense, but I presume PDO alone won't stop somebody from crashing your app by adding limit=99999 to a URL.
To clarify, this project isn't for money, especially since being part of the [XCDP program](http://www.xbox.com/en-US/Community/Developer/home) explicitly prohibits it. It's not open source, but it is a project aimed at filling a void in the Xbox community.
Thanks.
you never mention running the input through a mysql/mysqli escape method so I still think it's vulnerable to SQLi. what if I changed the orderby paramater to something like id DESC; drop table `table`; --
I see. I'm sure you realize this, but your backup can be to to manually sanitize those inputs the old fashioned way instead. Also, Speaking from experience, [stackoverflow](http://www.stackoverflow.com) is an excellent place to ask programming questions. I'm sure reddit is too, but I thought I'd recommend another good source (IMO)
This is a good premise, but simply validating your integers is enough to prevent injection for that value. After all, if you're sure it's a number, it can't be the other characters that are required for an injection. I wrote a short article on integer validation and how SQL injections work that might interest you. It can be found [here](http://wiki.hashphp.org/Validation).
Range checking an integer should be a part of validation if this is a potential risk.
This is a limitation of the way prepared statements work in MySQL. From the MySQL manual: Parameter markers can be used only where data values should appear, not for SQL keywords, identifiers, and so forth. This means that using the a placeholder for the field you want to order by is out of the question. You might be able to do it for LIMIT - at least the PDO emulation of prepared statements support it - but you need to [take care of supplying PDO::PARAM_INT as the type to bindValue and casting the value as an int](http://e-mats.org/2009/02/pdo-and-pdoparam_int/).
SELECT * is never a good idea...you are potentially running two queries (the one you think youre running and also the one that actually fetches the column names from the cache...). Name yer columns, bro.
Coolest script ever! Try it!
Why would anyone downvote sound, accurate advice?
Sorry for reviving and old discussion, could you please show me a simple example?
If speed is the concern, you wouldn't be using sqlite as the database store, or php userland code to perform the sort. Both are pretty slow.
hmm, I guess it would have helped if I had read the MySQL manual. Update: I tried it out with just using bindParam for the limit values, but that didn't seem to work either. I will just have to stick with validating and sanitizing them before hand.
I thought the entire point of PDO prepared statements was to not have to use mysql/mysqli escape methods.
Maybe they've disabled acces for you based on no user-agent etc. try with CURL.
I got it working with cURL, thanks a bunch!
This is very untrue. The database itself supports it, but the bindings (PDO, mySQLi) do not. However this doesn't prevent you from using the feature. Here's a working example (done with PDO): $DBH-&gt;query("PREPARE STH FROM 'SELECT url FROM assets ORDER BY ? LIMIT ?'"); $DBH-&gt;query("SET @a = 'url', @b = 15"); $STH = $DBH-&gt;query("EXECUTE STH USING @a, @b"); echo $STH-&gt;rowCount(); // will be 15 while($row = $STH-&gt;fetch(PDO::FETCH_ASSOC)) { echo $row['url'] . "&lt;br/&gt;"; } In the end prepared statements are executed by the database server, not PHP. You can read all about it [in the mySQL documentation](http://dev.mysql.com/doc/refman/5.1/en/sql-syntax-prepared-statements.html)
I smell an IP ban next :p
Yeah, I'm hoping they don't see me pinging their site excessively. There's about 800 movies that I need data for use in a spreadsheet. Maybe I'll span this over a couple days instead of all at once. 
curl supports proxies!!!!
a simple \(int\) cast will work too. Worst case scenario, you'll OFFSET 0.
And you lose the advantage of prepared statements...
You shouldn't use casting to INT as validation - it's sloppy. While it won't be so bad in this case, it leads to user confusion later. More than that, if you get a something that isn't a number (think, 123q4, or similar) in the middle of it, it won't produce 0. The article discusses several ways one might attempt an integer validation, and why they shouldn't be used.
No.
...assuming you're running a mysql version that supports prepared statements - not all versions do. The benefit of using PDO in these cases is that even if the database server doesn't support it, it will emulate the behavior. It really isn't that hard to validate your inputs.
Part of the point is. If you're using them properly it's more than that. Proper bindings can check data types and allow the server (if it supports it) to perform optimizations on repeat calls to the same query. So, while automatic escaping and quoting are definite benefits, they are hardly "the entire point".
just drop them a mail. If it's a small personal project or something for school, I bet they don't mind if you scrape the 800 sites.
Which article? You posted a link to the php manual. You mention a few reasons why casting to INT is bad: &gt; it's sloppy That's just like, your opinion, man. &gt; it leads to user confusion later Why would it be confusing for the user? If you mean that it'd be confusing to other developers, I disagree. What is confusing about checking and casting to the type of variable you need? &gt; if you get a something that isn't a number (think, 123q4, or similar) in the middle of it, it won't produce 0. If a user wants to do that to your POST variables **\*\**, let him. He will be able to change "*5*" to "*123*" either way, with or without the "q". There are no negative effects here, providing you check that the value is within your allowed range, as you should. \*\) Although imo the LIMIT and OFFSET variables shouldn't come directly from POST, ever.
Not a bad idea. 
Sorry, it was in a previous post. See: [this article](http://wiki.hashphp.org/Validation) &gt;That's just like, your opinion, man. No, it's a fact. Be professional, or don't - that's your choice. &gt;Why would it be confusing for the user? If you mean that it'd be confusing to other developers, I disagree. What is confusing about checking and casting to the type of variable you need? Because while your or I may understand how php casts strings to integers, we can't expect the user of an application to understand this behavior. &gt; If a user wants to do that to your POST variables **, let him. He will be able to change "5" to "123*" either way, with or without the "q". There are no negative effects here, providing you check that the value is within your allowed range, as you should. It goes back to good programming habits and defining rigid validations where you get exactly what you expect, and nothing else. This sort of "it's good enough" attitude is precisely why every php programmer gets looked down on by people who predominantly use other languages.
Yes, that's correct. But its supported in version 5.1 forward -- no excuse for using something older then that :)
self::$db-&gt;sqliteCreateFunction('rank', 'rank'); for use thru PDO
In theory you're right, in practice sometimes you wind up using what is provided to you. Better to make your code portable.
&gt; No, it's a fact. Be professional, or don't - that's your choice. Professional in my *opinion* is getting your project done according to expected functionality, on time and on budget. My version of professional does not include which of the 25 possible solutions to a simple problem other programmers might prefer. &gt; Because while your or I may understand how php casts strings to integers, we can't expect the user of an application to understand this behavior. Why is the user reading the code? &gt; It goes back to good programming habits and defining rigid validations where you get exactly what you expect, and nothing else. This sort of "it's good enough" attitude is precisely why every php programmer gets looked down on by people who predominantly use other languages. I get *exactly* what I expect. An integer within my allowed range. What more do you want?
Do you think it takes significantly longer to properly perform validations? Really?
Yes.
No obviously not since I'm already performing bounds validations. Do you really think *not* parsing "123q" as 123 *in this instance* makes the code better?
It's a pre-compiler/code generation tool. I won't touch them, personally.
...or they might just actually give you the data and save you the trouble.
Couldn't agree more. Had this issue where I used to be. Only got put on as salaried full time when another company offered it. The next one was that people with degrees got paid more to start and had no experience. 
What exactly are you trying to do, and is there an open API somewhere that has the same data? I bet there is :).
I can't see why anybody in their right mind would ever use this.
I would think the checking is still done when the query is validated...otherwise how would you know that column X exists? Edit: To add a bit more of my opinion to this I wanted to say that I do not believe you should specify the columns if you are going to select all of them anyways, but if you do not need all the columns then you should specify. The savings is in the data transfer and not the query execution.
I tried looking around for it, but was unsuccessful. Not sure if it exists. I need the data on specifics of movies, like distributor, gross, yearly rating, etc. 
because it doesn't answer the question. I hate that about r/php. 
It is a pretty standard object oriented sort of PHP framework so pretty much any PHP developer should be able to handle it for whatever their going rate is. I'm currently doing an e-commerce site in it so if you have any specific questions fire away but hiring someone for it shouldn't be any different than for any other PHP based project. Pretty straight forward, really.
The same reason you'd use SASS or CoffeeScript: Easier and simpler coding at scale. A single PHP dev probably isn't going to see much benefit from this. But when you're developing a serious application where you've got multiple people working on the same bits of code, it's incredibly helpful to have simpler to understand code. This just pre-processes code, so you stick it into your CI stack and it's entirely transparent. Again, the same as SASS and CoffeeScript.
Yeah, except those are useful and this PiHiPi thing looks shitty. edit: You can downvote but PiHiPi is still going to be shit. Let's code in a language less than 10 people in the world know how to use, that'll be smart!
I think being unprofessional is a problem in every instance. By the way, filter_var() can do range checking while you're type checking. Bad input should never make it to your query if you're doing it right.
OpenCart has a long history of SQL injection, XSS and CSRF vulnerabilities, and the developer in charge does not have a history of treating these problems seriously. Avoid it.
This is why we can't have nice things.
You mean the table schema which is aggressively cached by the RDBMS? "*" is sort of harmful in that column names are not explicitly specified. This means that if the table is modified you may get extra/different column names. If you explicitly name them, the query will error if the names change possibly providing you with a way to see that there is a problem. Naming the columns in the query also makes your queries a little more readable. What they don't do, is cause any amount of significant overhead in "extra queries".
Asking people not to use SELECT * is decent enough advice, but his logic is faulty.
Changed column names can be handled in variables. Not all RDBMS cache the same way, but SELECT * forces a cache lookup every time. Technically this is not a query, but it is an operation that can be avoided. Some people would call this a microoptimization, but I think it has more to do with doing it right the first time. 
PM if you want, i can't start anything for the next couple of weeks but I can give free advice if you want.
What would you suggest instead?
Technically this happens anyway since it has to know the column names in order to determine if they're valid. Think about it.
Unfortunately the only e-commerce product that I know of that isn't a piece of shit is Magento, and that's an over-engineered (but awesome) trainwreck.
Personal opinion: No.
Sorry, no. For one thing, everything you generate out of it is going to need to be validated, and not simply through functional testing. I don't now, and will never, trust code generators for that simple fact. You never know what's going on behind the scenes unless you validate all of the output. If you have to do that, you might as well do it yourself (and in probably a more efficient manner). It has nothing to do with single dev or multiple, or commercial or homebrew. I'm one of the leads on two separate SAAS apps that each individually receive billions of requests per month and I just wouldn't touch it.
http://lemonstandapp.com/
Yes but not just r/php. Many a google turns up a forum thread 'How do you do this?' and the first reply 'Why would you want to do that?' Someone who answers a question in that way obviously thinks they know what they're talking about. If you actually know what you're talking about and you want to help your reply should be "You do that like this. It's an odd way of doing things, though, why are you doing it like that?"
Using PDO properly kind of separates the two parts of an SQL query. So it's 'SELECT ? FROM users WHERE password = ?' and sent along with this are the values 'ausername' and 'apassword123'. The query is parsed in two sweeps. So even if the username is 'id DESC; drop table `table`; --' or something the query will just look up a user with the name 'id DESC; drop table `table`; --'
You can do it using bindValue() and casting the value as an int. I don't know if there's a way to do it while passing an array to execute(). http://stackoverflow.com/questions/2269840/php-pdo-bindvalue-in-limit/2269931#2269931
shopify.com and forget about it
`Limit` arguments work fine as of mysql 5.0.7. From [mysql manual](http://dev.mysql.com/doc/refman/5.0/en/sql-syntax-prepared-statements.html)... &gt; As of MySQL 5.0.7, placeholders can be used for the arguments of the LIMIT clause when using prepared statements. See Section 12.2.8, “SELECT Syntax”. But as for `order` or any other mysql keyword or any object name, not at this time. This is why OP's query is failing.
You can change limit using prepared statements if you have mysql 5.0.7+. Just not order or anything else referencing an object name or keyword. I'm sure there's [complex statements you could do](http://www.reddit.com/r/PHP/comments/j4x6o/pdo_prepared_statements/c2978yj) to work around it while still using prepared statements, but are you sure you want to make things more complex than they need to be?
I've been googling around for a bit now and can't find any evidence of these still being issues. Do you have any links by chance? I'm mid way through a project with it and we weren't able to cause any of these issues with our install. Though I'll have to grant the server hosting it is locked down pretty tightly so most brute force SQL, XSS and CSRF attacks don't even hit the code. But I'm pretty paranoid and won't hand over a product to our client's that has such security vulnerabilities. *Edit: This had me going back and looking over code. It looks like only the admin system has a token system implemented. Time to go digging around and see what the front end does to prevent attacks, sigh.
As is often the case in programming, there is more than one correct way to get from A to B. Singling out one particular way as "Professional" and labeling anything else "Unprofessional" is just silly and childish. `filter_var` is a great approach here, and *depending on your situation*, as is casting to int. Without knowing the requirements, you really can't label one as better than the other.
I like Interspire Shopping Cart, but it isn't free (or cheap), but it's just part of business expenses setting up. Pretty much agree with all the other comments though, can't believe the shitty software that is kicking around after all these years.
it's not much different from smarty
[Relevant](http://forum.opencart.com/viewtopic.php?p=72582)
I agree completely... and I also agree with Rasmus when he says that PHP is already a templating language, and using Smarty on top of it is kind of ridiculous. Smarty has never been anything other than a performance nightmare and bug factory in my experience. I have not used the latest release, however.
Range checking? Do you select count() to find out the valid range before filtering? Go easy buddy, you sound a little like you have a little knowledge and think it is a lot.
Did you look at [IMDB offline interfaces](http://www.imdb.com/interfaces)?
phpclasses.org - srsly, reddit? I hate that site - you have to register to download any classes from that site; and since i did that about 3 years ago i keep getting newsletters (read: 90% ads, 10% "new software on the site this week") from this site and i cannot unsubscribe from it! Also, i wonder how much authors earn if they contribute any work to phpclasses.org and they show it between a whole bunch of ads, or people who pay to use the site (premium accounts). Here is the original post; without any ads: http://www.php.net/index.php#id2011-06-28-1 edit: im not alone: http://www.reddit.com/r/PHP/comments/cyeg7/php_classes_repository/
The submitter is the owner of the site. My feelings basically mirror yours in terms of the utility of phpclasses.
sue them for spamming if you really can't subscribe
I don't like smarty, but it introduces some syntactical sugar that is interesting. The {foreach} .... {foreachelese} .... {/foreach} for example. The PiHiPi could be extended to allow other mini languages to be embedded into PHP. They have regex: $text !~ `\S` which is nice. They could add SQL (or Doctrines DQL) which'd be cool: $query = SELECT * WHERE id=?; .... $query-&gt;params($id); It could syntax check your SQL as you go. Tripple quotes are a really nice idea, especially when you're in the view hacking jQuery and HTML tags. 
You could try [TheMovieDB API](http://api.themoviedb.org/2.1/methods/Movie.getInfo). That's what I use for [tho.se](http://tho.se).
Your statement really doesn't make a whole lot of sense in the context of a LIMIT clause unless you think this is about building a pager. The OP was fairly non-specific about it. Of course, the people who use COUNT() in a pager aren't doing themselves any favours either. Obviously you're not going to range check your starting index, but you would probably want to range check the number of values to pull in a LIMIT clause since you'll want a fixed maximum value for that. Think about it.
Got proof or are you just talking stuff? I mean, it was Reddit where I first heard glowing praise for OpenCart versus Magento. OpenCart was leaner, meaner, and used a simplistic MVC arrangement that made sense, I heard.
Lets see, there's the one approach that works every single time, or there's the approach that may modify input, but let it blindly pass anyway. Perhaps you could point me in the direction of an example where casting user supplied data to int is going to be far more beneficial than doing a more thorough check. I can't think of any instance off the top of my head where this is true. I have to hold to your way being bad, no matter how many friends you scare up to try to tell me that I'm wrong. I realize this bothers you, but I take input validation very seriously. You should too.
[Rotten Tomatoes API](http://developer.rottentomatoes.com/) I used it for a personal project and it ROCKS. Seriously. Fuck the screen scrapping bullshit (been there, done that). A clean JSON responsed api is a breath of fresh air for this.
If you havn't committed to Opencart yet, I would suggest looking alternatives. You can tell a lot about the product by looking at the source code.
CodeIgniter is what a lot of beginners use. You may reach the limits of its capabilities. It is unbloated. Kohana, what I used until recently, is getting more popular too. I've started using FuelPHP now, though. Cake and Zend are reputed to be slow frameworks out of the box. MVC is usually not explained that well, I'll reply to this with an overview of MVC in the context of web scripting languages.
When I was starting out with MVC, no one explained it in a way I understood, I wish someone had written it out like this, (this is from a PHP MVC standpoint as per Cake, CI, rails): None of these examples will work in real frameworks they're just PHP psudocode. **Controllers**. Each controller is a collection of functions (aka actions or methods) called a class. The class' name usually relates to a database table, but not always. So for example, if you had a table in your database called 'page' in your database you might have a controller with various actions that a user can access related to that class (such as viewing, deleting and editing). Your controller class has various actions or methods such as edit, view, delete etc. Each of these actions is a chunk of sub-code like any other function. Example &lt;?php class page{ function view() { //view page code here } function delete() { // delete page code here } } Now, if you wanted to access the 'view' chunk of code on your 'page' controller, you would go to this url: www.yoursite.com/**page**/**view**/ That would tell your framework to load up the collection of page functions then execute the one called view. You might have many different controllers with various actions within one website. Some frameworks offer an easy way to get variables into your code via the url. Let's say you wanted to load a page based on an database ID supplied within the url. In this example the ID is 31234 www.yoursite.com/**page**/**view**/31234 &lt;?php class page{ function view($page_id) { //now we have a $page_id varibale which we can use to select certain stuff from the database } } Controllers never have direct database related code or html within them. Controllers are to react to user interaction (in this case sending of a url, but also cookies and GET/POST data) and based on that user information access various parts of the application such as database stuff (via a model, which we'll come to later), then pass that stuff into the views (we'll come to that later). GET,POST and URL stuff should only ever be accessed within the controller. **Models** Controllers sometimes are related to database tables. Models, almost *always* pertain to database tables. If we carry on with the 'page', example, i'll give you an example of a basic model. Again this is basic, pretend code. &lt;?php class page_model{ function get_from_id($page_id) { $database-&gt;query("select * from pages where id=$page_id"); return $database-&gt;result; } function delete($page_id)) { $database-&gt;query("delete from pages where id=$page_id"); } function get_all() { $database-&gt;query("select * from pages"); return $database-&gt;result; } } As you might be able to tell, the model is just a set of actions related to manipulating a certain type of data. In this case we're manipulating a database table. Models should never have HTML or access GET or POST data. Models should be the only place you access your database from in your application specific code. **Models and Controllers** This is how the relationship between a model and controller might look. &lt;?php // this is our controller class page{ function view($page_id) { $page_data=Page_model-&gt;get_from_id($page_id); } } If a user went to the url www.yoursite.com/page/view/453 Firstly the page controller would be loaded, then the view function would be executed with the variable from the url (453) set as a parameter. Then the parameter passed into the page model and the page database record returned. **Views** Views are your presentation data, mostly HTML. Views should never access the database or models. Views should never access get or post variables or cookies and should only contain the most basic of PHP functionality such as echo and loop control structures. I don't really need to show what a view looks like because it's just HTML and PHP, but here's an example of what one might look like &lt;!-- a_lovely_view.php --&gt; &lt;title&gt;&lt;?php $page_title;?&gt;&lt;/title&gt; &lt;h1&gt;&lt;?php echo $page_heading;?&gt;&lt;/h1&gt; &lt;?php echo $page_content;?&gt; The final part of the jigsaw is to get variables from the controller, into the view **Models, Controllers and Views*** &lt;?php // this is our controller class page{ function view($page_id) { $page_data=Page_model-&gt;get_from_id($page_id); $data=array(); //create a blank array $data['page_title'] = 'Hello everyone'; $data['page_heading'] = 'This is the heading'; $data['page_content'] = 'The Page ID requested was '.$page_id; // now push these variables using an array into the view we made above view('a_lovely_view.php',$data); } } So if our user went to www.yoursite.com/**page**/**view**/1234 the result would be &lt;title&gt;&lt;Hello everyone&lt;/title&gt; &lt;h1&gt;This is the heading&lt;/h1&gt; The Page ID requested was 1234 I hope that simplifies this for you. As an absolute beginner, I'd suggest CodeIgniter because its very, very simple.
You're over-thinking this. MVC is just a technique for separating business logic, presentation, and data access into separate application layers. It's not some hard and fast rule. It's popular because it's a design pattern that typically works really well for web applications. Frameworks that use the MVC pattern have become popular because they usually save a developer the time coding the same boring stuff over and over. Stuff like form building, form validation, rendering out annoying things like lists or tables, login and authentication flows, URL routing, etc etc etc All the available frameworks will help you accomplish your goal. It boils down to personal preference. Some frameworks rely on convention, others rely on configuration. Some are extremely object-oriented, some rely on new PHP 5.3+ features, some rely more on lazy instantiation and singletons. There's no one "right way". Just a variety of different ways to solve problems based on your own personal preferences in coding style.
Codeigniter. It's clean, simple, well-documented, and will definitely speed up coding time. I think of it more like a library of useful code that I can use, along with a very clean and adaptable organization structure (MVC). The library aspect includes things you'd probably have to code anyway (like URL routing to function calls) and some nifty time savers (like auto-generating html tables from data) that you could do without but make things easier anyway. The organization structure is helpful for breaking things up into pieces that are easier to modify later and reuse. For example, if you have three different ways of displaying data (like a table, a graph, and a heat-map), you can easily create each as a separate view. Then the controller grabs whatever data you need (by calling a module) and feeds it to whichever view you want. If you add a fourth display method later, you only have to create one view, then tweak the controller a bit to call it. Everything else stays the same. If you have a different set of data you want to feed into one of your existing views, you can just write a different model to pull that data instead. Once you get used to it, this makes things really easy to change and reuse. It also makes it really easy to find things if your project gets big. 
Your suggestion?
I like Kohana. With it and kostache (mustache module) I roll stuff out pretty quickly. Why should you use MVC? I feel that separating the concerns that MVC separates makes a lot of sense and allows for better code, in many senses. It's cleaner, more concise, more focused.
I agree with the bulk of your thoughts and that's pretty much been my thinking, but everyone is always saying that there is a better way. Look at this thread already: many people already replying with suggestions fro MVCs...
How is using FuelPHP working for you? Easier? Faster? Better overall? Just curious. Thanks!
&gt; can't find any evidence of these still being issues While all of the issues brought up have been fixed *eventually*, the fact that there have been what, three or four forks *just because* of the security issues and lack of historic response speaks volumes.
Here's [one example](http://webcache.googleusercontent.com/search?q=cache:GxNTLYTONrsJ:blog.visionsource.org/2010/01/28/opencart-csrf-vulnerability/+opencart+security+fork&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us&amp;source=www.google.com) -- from the Google cache because the site is down. The link provided by kudoz is also an excellent read. The poster that replies in red text is the lead dev.
That's a very good overview, although I have to disagree with this statement: &gt; Models, almost _always_ pertain to database tables. Models simply represent data within your application. They may be tied to a database table, a Web service, or any other source or a combination of sources for data. I find that trying to tie your models 1:1 to database tables can lead to either poor database design or a mess of model classes. Abstracting the data access away from the models allows for a much more flexible (and testable!) application. I realize that you said "almost," but then you added emphasis to "always." Other than that statement, I think this is one of the better short explanations I've seen of the MVC pattern. Unfortunately, a lot of beginners tend to get caught up on that 1:1 mapping, so I feel it's important not to stress that link.
Thanks for pointing this out. MVC is a pattern which many frameworks follow, but that's not to say they are "MVC frameworks." Zend Framework, for one (and the one I have the most experience with - I can't speak for the others), has several ways of setting up your MVC, or you can skip MVC entirely and simply use it as a component library.
It's good, so far. It's more straight forward and also more flexible than Kohana. The ORM implementation is good too. Some people find FuelPHP harder to use, but personally I find it easier. Give it a go. 
I think this is because prepared statements aren't simply supposed to be "SQL with variables"; when you run `prepare($sql)`, it is actually doing things under the hood to essentially precompile the query. Changing the values of given inputs simply alters the result-set, but at the end of the day, it's all pulled from the same result-set. OTOH, changing the `LIMIT` on-the-fly produces SQL which is likely too complex or downright impossible to precompile. 
No, yeah, I really agree, and the dev kind of scares me with his response to any kind of critique. Our plan has basically been to get the latest version and make our own fork, mostly because we're having to change a lot of the base code anyway. And then when security issue is posted just go in and fix our own version and not wait for him. I was just worried that there may be a list of security issues out there still open that I couldn't find.
That's because you're running ctype_alnum on it, not because of the prefix. In your exact example, the prefix contributes nothing to security. The file is forced into the folder, and as such cannot traverse at all... I was replying in general to the concept that prefixing can help. It doesn't. It's not bad to do, just it's not a requirement for security...
Heh, I was going to bring that up. When your database is a complex XML document, it is hard to have individual models for the data within. It *can* be done, but at a cost. I've always found it easier to pull the require data out (XPath etc) and build objects based on the resulting XML.
You might want to delete one of these.
&gt; When your database is a complex XML document You're probably doing it wrong..
Okay, thanks.
Solution use PHP module write i C template engine http://alexeyrybak.com/blitz/blitz_en.html
Not really. A complex XML document returned via an API call. While not relevant to this project, my day job has me never talking to the DB for our product. Just API calls to a very robust private API.
There seems to be a misunderstanding. Some people are having the wrong perception of the site because they misunderstand how it works. Let me explain. The login requirement to download is an option of each author. They can enable or disable that requirement at will. That is not controlled by the site. If registering to the site was such a bad thing as you suppose, the contributing authors would not keep that requirement. There are benefits for both authors and users to login when downloading. You can read about that here: http://www.phpclasses.org/browse/package/1/download/zip.html As for the newsletters, there are several different types. You probably unsubscribed from one type but not from all you do not want to receive. The site does not have interest to send newsletters to people that do not want to receive them. It is a free service that costs money to provide. At the bottom of each message there are instructions to unsubscribe all at once. Just use the site contact if you still have difficulties. Some users can't unsubscribe by e-mail because they registered with one address and try to unsubscribe from another. Regarding advertising, unfortunately it is necessary to keep a niche site like this alive. If it was not for advertising, the site would have closed a long time ago. As for what authors gain, part of the explanation is in the page I mentioned above. Another part is that authors that contribute innovative packages earn free lifetime premium subscriptions, which among other things get them early access to posted jobs or not be exposed to advertising. There are hundreds of authors that benefited from that since 2004. http://www.phpclasses.org/winners/ Finally, I would like to invite you to put your gun down and try to be a contributor like many thousands of users of the site. I am sure you will enjoy it better than you thought.
Is it really a good idea to validate sessions using the user's IP address? I've heard that some ISPs provide dynamic IP addresses that can change from page to page. Is this true, or have I heard wrong?
Page to page is certainly wrong in any experience I have ever had. Half the reason for this is that having an IP address that changed so much would break lots of session functionality and other applications on the internet. It is a good idea to validate against an IP address so that if any session cookies are stolen - by an XSS vulnerability or otherwise - the attacker doesn't automatically gain access to the session using the data they have just stolen. Typically, ISP's will give out a new IP address either every time you make a connection to them or renew them daily, weekly etc.
Well, what I heard is that you could only check the first 6 letters of the IP address. This would allow you to validate the approx location of the user. Or at least, that's how I understood it.
That simply shouldn't happen. Most providers use a DHCP lease time of several hours at least (days, in most cases), as anything shorter would cause a tremendous undue strain on the network. Even with mobile devices, which can move between networks, there is a [standard](http://en.wikipedia.org/wiki/Mobile_IP) for maintaining the same IP for as long as possible. Have an upvote for asking a good question. :-)
http://en.wikipedia.org/wiki/Wikipedia:AOL#Why_are_AOL_users_often_blocked.3F AOL is one immediate issue that comes to mind, you'd be surprised how many "herp derps" still use the service. They basically place ALL of their users behind a series of proxies. My experience with this is mostly tied to system abuse and identifying patterns with automated systems. You see an influx of abuse coming from an IP, after it crosses a threshold you stop servicing that IP... if that IP happens to be an AOL IP you might block hundreds or thousands of legit users in one swoop on accident.
GeoIP will indeed give you a rough geo location of a user based on their first couple octets but jumping from proxy to proxy or routing traffic through Tor defeats this easily.
But it _does_ happen. I've seen problems with AOL myself. EDIT: I just noticed chadillac [posted a link on the issue](http://www.reddit.com/r/PHP/comments/j5wta/a_schadenfreudetastic_security_review_of_devsheds/c29h9ya).
&gt; AOL is one immediate issue that comes to mind, you'd be surprised how many "herp derps" still use the service. There are some places where dialup is still the only thing available.
I like OpenCart. These guys here are pretty good: http://opencart.hostjars.com
Why do people downvote both:( It's an honest mistake and they can clearly see they were submitted at the same time.
I like how hes concerned about a 1 in 100 million collision that can occur with sha1, use a different hash? Anyway, why would you write this yourself when it has been done properly in at least 5 open source softwares.
I can confirm that used to happen on a Vodafone 3G data connection. Every 15mins or so the IP would change. (I've not tested in the last year or so, so I don't know if this is still the case).
let me know what you find - time to code - especially working with CLI only - especially when you are working extremely agile code (diggin in with compex ETL's (edi/xml/flat/etc) where specs are not available or the business process is undefined. and no auto-incrementers please :) guid's or newsequentialid()'s only. 
That still doesn't mean they have to choose AOL.
Yeah the hashing algorithm collision 'attack vector' is ridiculous. Edit: he also says that hashing only the password and a 40-character salt leaves you open to brute force attacks. The number of combinations you can make with 40 a-z characters has 56 zeros in it. I'm impressed by the thoroughness of this guy but his conclusions are questionable. Edit2: first hashing attack vector not so ridiculous 
I find that Reddit often posts twice, but then when I go back to check and make sure it hasn't, only one post shows up until some random time later.
[Teach a man to fish](http://www.php.net/manual/en/features.file-upload.post-method.php)
Yes, i have seen your "unsubscribe from all newsletters" link at the bottom of the newsletter, and i am very sure i tried that more than once - however i am still finding your newsletter in my spambox at work at least once a week, so apparently there is something broken with your unsubscribe function. I think people would be less hostile against this site if you would be less aggressive with the ads; and as far as i remember my newly created account there was by default subscribed to all newsletters - not cool!
It doesn't even talk about the more serious issues, like [side channel timing attacks](http://en.wikipedia.org/wiki/Timing_attack). This used to be a major flaw in ssh, and it seems like *everyone* makes this mistake. The issue here is that most people implementing security have absolutely no background in cryptography, so they don't know exactly what they're up against. This includes the guy who wrote the article linked by the OP.
I, for one, protect all my things from side channel timing attacks. All of the successful attacks that come to mind recently involve users being the weak links that users typically are. Just sayin ...
I assume what he means here is that the attacker has database access and therefore knows the salt. If SHA1 is being used to hash this, generating a rainbow table is trivial given the power of computers now given that SHA1 is a fast hashing algorithm. Something like Blowfish is better as it includes a work factor that would make this generation computationally impossible in a short enough time to be relevant.
If you do, good. I imagine most people here haven't even heard of it before today.
Please don't take this the wrong way, I'm going to be pretty brutally honest with you. It sort of depends on what is being expected of you. If you're being expected to just make things work, you'll be worth a fair amount to that person. If you're being expected to provide well engineered solutions, you're probably not worth anything. &gt;Regardless, I know I produce very high quality code If you haven't even mastered OO concepts and patterns *at the very least*, you really shouldn't be making the assumption that this is true. It's not that you're incapable, it's that nobody starts out writing rockstar code. It takes a long time to learn everything involved in that, and just knowing language syntax is not enough.
&gt;You can still write classes that are not object oriented you know. This is a huge point that I support 100%. Many novice programmers treat classes as nothing more than containers to throw functions in to.
I agree! but the author mentioned stretching. I understood this to be either repeating the input to the hash or applying the hash many times, rather than anything to do with hash speed. Also if the database and source are compromised (assuming salt from source) there's trouble regardless of the hash you're using :)
To be honest I've never heard of it until your comment. Thanks for this. However, I really didn't understand the wikipedia article. Could you explain it simply or is there an any other article you know explains in a simple way?
If you have the php command line installed you can php script.php and run it in a terminal To run it normally put it in the web server's root folder, usually /var/www (on linux) ~/Sites (if using the default apache install, on mac, ~ is your home folder) C:\\www (or something like that on windows, not sure) then in the browser type http://localhost and look for the file in the list. If you don't have php installed there are many many tutorials which you can find by googleing 
I don't have php installed but everything you're talking about sounds like I'll need server information. Am I going to need that?
You won't need a server installed if you go the commandline php route, but there are many packages that will install the whole shebang (apache, php, mysql...) look for WAMP (windows), MAMP (mac) It's really not difficult to install. What OS is this on?
[WAMP](http://www.wampserver.com/en/ ) and [MAMP](http://www.mamp.info/en/index.html) can help you get PHP up and running on your local machine pretty quickly.
Are you on Windows or Linux? I'm going to assume you're using windows based on your experience. Download [this file](http://windows.php.net/downloads/releases/php-5.3.6-nts-Win32-VC9-x86.zip). Extract it all to C:/PHP open a command prompt, and type cd c:\php Then type: php "C:/Full/Path/to/your/PHP/script.php" That should work.
Basically, stretching is artificially slowing down the hash. So if the hash can normally be computed in 10 microseconds, with the stretched hash would need many times that duration (ideally many orders of magnitude more) to compute. So with an iteration count of 100000, the iterated hash is 6 orders of magnitude slower. It increases the expense needed to brute force significantly. Sure, this is only a significant issue if the raw hash with salt is leaked. But just ask Gawker/Gizmodo/Lifehacker if that's important...
Blowfish is indeed the best choice given the current implementations. But scrypt would be even better. PBKDF is an alternative, as it's trivially easy to implement even on old versions of PHP. And the rainbow table is dead. In todays age, the power of a GPU will likely be just slightly slower than a rainbow table for an unsalted input (given a $500 GPU can hash about 1 billion sha256's per second). For a simple salt (hash(password + salt)), the GPU will be orders of magnitude faster than generating a rainbow table. If you don't believe me, just give JohnTheRipper a try... It's shocking how fast it truly is...
I do indeed know about timing attacks. However, I didn't see any in that code (I do admit that timing attacks aren't a priority to me, when bigger and easier to exploit vulnerabilities exist, so I may have missed one). If you do see one in the reviewed code, please elaborate so that we all may learn (That's not a jest, I would like to see the vulnerability). 
The major issues with the script were its complete inadequacy for teaching anyone how to program well. I think the "security review" was just a pretense for frustration the author was otherwise unable to articulate. DevShed needs some better editorial oversight. Teaching people the same PHP that was causing headaches ten years ago, let alone today, is one of the principal reasons the language is in its current state. 
I was hoping for something exactly like this. Gave you all upvotes. Thank you!
Any reason you need to host your own store? You'd probably be better served just using a SaaS provider like Shopify. If doing it yourself you don't just need to factor building it into the equation, you'll also need periodic updates to track the upstream project, and if you've got any local modifications that can be time consuming.
I know how to upload a file using PHP. In fact I've been using PHP for 10 years. I know a good script existed that was simple and well maintained so why on earth would I want to roll my own solution.
I have no idea, so my suggestion is to punch whoever wrote the app that's supplying data like that.
Are you saving the data from your multi-page form in a session? You could use AJAX for this, but the technically easier solution is to add an extra page at Section 3 and Section 4 to add extra plans and managing areas. For example, in Section 3, you'd have your normal "Next page" form submit button, but you'd also have a link navigate to a page (let's cal it Section 3.5) to add one Lesson Plan. The form submit action would either submit back to Section 3 or submit to itself and then redirect to Section 3 (depending on your preference). Your Section 3 page would then reload and then read the added Lesson Plan. Same thing for Section 4.
Try this, ~~ it's not exact but should give you some hints~~ should work as expected: $input = array( 'admin:azzz:bzzzz', 'admin', 'role', 'role:azzz', 'role:bzzz', 'role:sdfsdfdf:sdfsd:dfgdf', 'role:sdfsdfdf:sdfsd:fsdfdd', 'role:sdfsdfdf:gdfgbgh', 'cheese' ); $output = array(); foreach($input as $item) { unset($lastItem); foreach(explode(":",$item) as $subItem) { if (!isset($lastItem)) { if (!isset($output[$subItem])) { $output[$subItem] = array(); } $lastItem =&amp; $output[$subItem]; } else { if (!isset($lastItem[$subItem])) { $lastItem[$subItem] = array(); } $lastItem =&amp; $lastItem[$subItem]; } } } function convertEmptyKeys($array) { $output = array(); foreach($array as $k =&gt; $v) { if (is_array($v)) { if (count($v) == 0) { $output[] = $k; } else { $output[$k] = convertEmptyKeys($v); } } } return $output; } // you can use closures and array_walk_recursive, but i'm lazy $output = convertEmptyKeys($output); print_r($output); Edit - fixed formatting, hopefully Edit2 - made it work *exactly*
I highly recommend [XAMMP](http://www.apachefriends.org/en/xampp.html). It's available for all the major OSs, is completely free, and is easy to use. Quick instructions for using it: Install XAMMP Run XAMMP Click the run buttons. Put your files into the "htdocs" folder in the XAMMP directory. Type "http://localhost/{your folder/filename)" And that's it. Hope this helps.
No offense but only a naive/cocky programmer would think that frameworks are for beginners. 
Ahh, this is excellent. Almost exactly as I need. Except for the leaves of the tree. For example.. [admin] =&gt; Array ( [azzz] =&gt; Array ( [bzzzz] =&gt; bzzzz ) ) should be... [admin] =&gt; Array ( [azzz] =&gt; 'bzzz' ) I'll have a tinker and see if I can alter this. But thanks, alot! can I buy you a months reddit gold (or a beer via some other means). 
thanks but don't worry about it, only took a couple of minutes :)
Thanks for the feedback. I think I might go the AJAX route. Your way would work too, but I think it would help in the long run if I have a better understanding of AJAX. I've been putting off learning it, but it seems like it could be pretty useful. 
You could ajaxify my solution fairly easily by just putting the Section 3.5 page into a jQuery colorbox.
What's supposed to happen for multiple identical leaves? $data = array( 'cheese', 'cheese', );
I agree - Someone else pointed out that my code is probably really awful. I think it is, actually... I'm always frustrated with how daft my solutions appear within a week of writing them. When I wrote that statement, I was saying that it's very high quality compared to what it replaces and builds upon. So, it's a relative thing, and seeing as I'm new and the previous developers wrote really tacky stuff, it's probably not saying much at all. I do make things work primarily. We need solutions to problems or to accomodate new advertisers' models of doing business, random features here and there to appease a variety of groups of people, and it's my job to hammer away and make sure we've got functioning sites at all times despite the rapidly changing requirements. I think that's worth something. Of course, at the same time I've got all kinds of work related to my original job description. Site mockups, small design oriented tasks, plenty of frontend coding. &gt;If you haven't even mastered OO concepts and patterns at the very least Yeah, I am not there at all. I understand them fairly well, but implementation is a different story. As you probably know. It'll come with experience.
Glad we could do your homework for you.
It means not exiting authentication early if the username is invalid. Go ahead and do the password hashing and then return the error. If you return early the "side channel" attacker has learned that the username is invalid.
As long as you understand you have more to learn (and never think you've reached a point where you believe you have nothing left to learn), I think you'll be OK.
I'm constantly in a state of wondering what the hell I should attempt to learn next. Work forces me to learn mostly, but outside of work I like to learn as well. Never ending. I like to use my spare time to figure out really random things. Like the developer tests on facebook. I don't really build any 'real world' stuff in my spare time.
Thanks for the homework solution.
What did the upload script do?
Well, I didn't include that on purpose, since the registration page will tell you that explicitly (and without updating the brute force detection logs either). Try registering a username with an invalid password, and the system will tell you if the name is already taken. So the timing attack you mention here doesn't actually provide any new information...
After lots of looking I finally found it. It is called [File Thingie](http://www.solitude.dk/filethingie/)
Fancy.
That's an interesting point of view. To be completely honest, most people are telling us the documentation is too developer oriented. We tend to agree with them, considering there isn't a lot of basic guides such as "this is how you add a product" for example. With an ever changing product, it's a challenge to keep our documentation up to date in all areas. We're also working on some ways to organize it better. On each page in the docs, we have a comment form in the bottom. We do this so people can comment if they find something that is wrong, needs clarification, or just plain sucks and they want to tell us about it. Don't be shy to use this! We want our documentation to be great. We appreciate the feedback.
use jquery $.post() its very easy. **edit** Ignore below. 2nd, never use $_GET when pulling data from a database because its a sql inject waiting to happen. 
I've also noticed it's lacking in that department, too... I'll deff keep my eye out for inconsistencies on the docs, of course, any time I run into a big enough I use I can't figure out in my code, your guys are always there to answer my questions. 
For pulling data? Please explain how a $_post is any better at preventing sql injection.
Thanks I meant for inserting. 
Same question...with _get data there is a csrf concern...but not sql injection (atleast compared to post data). So...please enlighten me in the event i am misinformed
I agree with reflectivesingleton here. The RESTful design pattern actually prefers using GET for "pulling" data. (ie reporting) Not really pertaining to the OP question but don't need misinformation spreading
When you send a message to unsubscribe any newsletters, the site sends you another message to confirm the request, if it finds the sender e-mail address. Sometimes people send unsubscribe requests from different addresses and the site cannot guess their real registration address. It is not the site fault that people use different addresses in different circumstances. In that case the site sends a message telling the user to send the request from the correct address that is in the To: header of the newsletter message or contact the site to get further help. Maybe that is your case. Send a message to info at phpclasses.org to get help with is your case. As for the advertising, I am sure you do not work for free, so it is not reasonable to demand that the site gives up the revenue of the advertising that is displayed. I wish the advertising revenue was not necessary because ads slow down page load and distract users. Unfortunately it is necessary to keep the site alive. When I see people in the sites like Reddit voting down PHPClasses site articles submitted here, I wonder what exactly those people aim to achieve? Boycott the site just because they do not agree with things totally unrelated with the submitted articles? I wish people that complain tried to understand and do not fight against the site because it needs to do things that are necessary to keep it financially viable. I am sure you would not like the site to shut down because everybody would loose a resource that is valuable to many thousands of users that visit it every day. Think about it.
1. pull all relevant database data into session data 2. update session data whenever needed 3. When hitting 'save', save the session data back to database. That's the easiest solution...
It seems he wants to just run non-web-facing scripts, rather than webpages; but otherwise I also love XAMPP.
how the fuck are you getting this data?
Userland*
&gt; 2nd, never use $_GET when pulling data from a database because its a sql inject waiting to happen. Tip: Do ~~this~~ if you want to retract something you said. :)
Thanks exactly what I'm after. I was just going through the several attempts that I made before and realised my attempts were quite similar to this solution, and that I was actually almost there! The temptation to quit is always at its greatest the closer you are to succeeding. 
Wow, looks like someone didn't get their cornflakes this morning. Its from parsing resources from a Zend_Navigation object.
Well, it looks like there are better ways to parse the data. Either use *resource* with http://framework.zend.com/manual/en/zend.view.helpers.html#zend.view.helpers.initial.navigation.acl or grab the data that you want to use in easier ways, using of properties of the class: http://framework.zend.com/manual/en/zend.navigation.pages.html
When you initialize a session_start(), are you then using cookies?
Ask them to explain if they use mysql_*, mysqli, or PDO, and why.
Since you said the harder the better: Write a function that examines arbitrary PHP code and determines whether that code will stop or loop forever given a certain input. 
thanks, but like I said we need hard hard questions, and this one is a 3 on a scale from 1 to 10. 
need way harder questions please.
&gt; Invoking "new" With an Argument Vector is Really Hard What? That's just a sign that the factory pattern can be applied.
this is pretty interesting! thanks
Just so you know, it's impossible.
What is the value of $a? $a = 123 == 0123; true or false this is tricky because you need to know that php treats 0123 as octal.. so its false :-) 
I would give some project euler questions to be solved using PHP. [http://projecteuler.net/](http://projecteuler.net/)
You'll enjoy the PHP quizes from Dynom [PHP Quiz part 1](http://blog.dynom.nl/archives/PHP-Quiz-part-1_20080424_23.html) [PHP Quiz part 2](http://blog.dynom.nl/archives/PHP-Quiz-part-2_20090514_27.html) [PHP Quiz part 3](http://blog.dynom.nl/archives/PHP-Quiz-part-3_20090921_37.html) [PHP Quiz part 4](http://blog.dynom.nl/archives/PHP-Quiz-part-4_20101102_51.html) Some real tough questions in there. Here's a sample: ----- $a = "A"; $b = (unset) $a; var_dump($a, $b); What is the output?
Have them explain what this code does in terms of Bar: class Foo extends Bar { public function __call($func, $args) { if(method_exists($this,$func)) { return call_user_func_array(array($this,$func),$args); } } } [Full explanation](http://www.puremango.co.uk/2010/11/poking-holes-in-php-object-privacy/)
Can you post an example of the questions you've been asking each other so far?
If you've run out of ideas doesn't that mean your coworker won and by asking us to help you, you're cheating?
That is not remotely difficult at all. That would be easy for High School AP Comp Sci let alone professional developers.
some people might now actually realize how sessions work...
No, it really isn't hard. Most people are just terrible. Just because most people can't do it doesn't mean it's hard. Most people can't drive for shit either.
No problem. http://www.reddit.com/r/PHP/comments/ipdal/best_way_to_select_multiple_separate_ids/c25p8f8
Like I said, most people are terrible. The context of the OP asking for questions is based on 2 at least competent programmers. This is not going to be a challenging question for them.
Lies. It is completely possible to determine code will not loop forever given an input.
Hm. It's not VladGH is it?
&gt; Alan Turing proved in 1936 that a general algorithm to solve the halting problem for all possible program-input pairs cannot exist. A key part of the proof was a mathematical definition of a computer and program, what became known as a Turing machine. We say that the halting problem is undecidable over Turing machines. It is one of the first examples of a decision problem.
Nope, sorry. This is me: http://vladh.net
what? how?
That's not what I'm saying. You can't determine if the code will loop forever but you can determine it won't.
I'm aware of the halting problem, re-read what I wrote.
You can only realistically determine that for a subset of those programs that don't loop forever. Where do you draw the line?
~ß But you need the ASCII ß, not the Unicode ß. Explanation: Space in ASCII: 00100000 ß in ASCII: 11011111 ~ß: 00100000
If you're looking to run a local webserver, I wrote a WAMP tutorial ages ago that has some useful info in it: http://www.puremango.co.uk/2009/01/wamp_97/
You could compete with each other on [phpgolf.org](http://phpgolf.org) - see who can solve the most puzzles with the least bytes. This would probably be a long-term thing, unless you wanted to try one puzzle each day.
At practicality.
i think you're just being awkward, please pastebin your code that beats the halting problem. Then feel free to collect your fame and riches.
I ask this one sometimes: Reverse an array without using a second array to put the values into. (Obviously you can't use built-in functions either) 
People actually use DevShed as a real resource? I've had it show up in my Google results before, but I always remember why I never use it as soon as I open the link and get inundated with ads.
[Facebook Engineering Puzzles](https://www.facebook.com/careers/puzzles.php). Try the ones near the bottom. Might not be a "quiz question," but it would give you both something about which to dialogue and challenge each other.
I haven't solved the halting problem. There is a difference between positive and negative identification.
this is exactly the type of question I'm looking for. but it's a little too easy though.
great suggestion. thanks 
you win for the moment. have an upvote and my appreciation. thanks
effin great question! thanks!
excellent suggestion, thanks!
Funny had the exact same question during a Facebook interview. My reflex has a PHP developer was "array_reverse" :D But still, good question, even though in PHP it's a non existing real case. (Still fun to do)
what sort of questions has he asked you? and what have you asked him already ?
I havent done any thorough reading on it, but this is what I have discovered so far. It sets a cookie with one long algorytmic value (phpsessid), that very value reffers to a session on the server, which holds all of the data that you have set. So you can highjacking someone else's session by manually setting the phpsessid to something that already exists (session highjacking). Which is why many developers do checks against their ip-adress for example.
I will never know what was so remotely not difficult at all.
it's a good test - tests basic OO knowledge, knowledge of magic methods, some more advanced stuff like the call_user_func functions, and the array(obj, method) way of passing a callback. And then there's the subtlety of exactly what this piece of code *does*, which is to make any protected methods in Bar public, and everything in Foo public. I'm perversely proud of it ;)
While you are at that kind of problem-sets I would like to suggest [facebook.com](https://www.facebook.com/careers/puzzles.php) and [spotify.com](http://www.spotify.com/no/jobs/tech/) as well.
Imagine the set of all possible code and execute each on one of an infinite number of state machines. As time goes by, the number of completed programs will tend upwards, but you can only ever find all of the halted programs by waiting an infinitely long time. What I'm trying to say is that you can't prove any particular code *will* or *won't* halt, even if you wait forever. So no, you **can't** determine whether code "will not loop forever".
It was the FizzBuzz problem: &gt;Write a program that prints the numbers from 1 to 100. But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz". Which is stupid easy. It's good for filtering out people who can't program at all from people with a basic level of knowledge but it's not at all challenging for an actual programmer. And this post is titled "hard PHP questions".
http://php.net/manual/en/function.count.php
Thanks, I think the act of writing out my question helped me think through the problem where I was able to solve it myself. Very simple!
What I think he is trying to say, is that you can determine if _some_ program/input will halt, by the simple algorithm: "try it; if it halts in 10 minutes, it halts. If it doesn't, there is no decision yet."
Halting problem I guess.
Your edited solution is slightly off. &lt;?php if(count($v) &gt; 1) { foreach($v as $outdoor) { ?&gt; &lt;img src="&lt;?php print $outdoor; ?&gt;" alt="&lt;?php the_title(); ?&gt;" width="100" height="60" /&gt; &lt;?php } } ?&gt; ...makes more sense, in that it checks the array size before doing any looping.
This should be filed under /r/lolphp
Show them some code from an open source project such as wordpress or phpadmin and ask them to tell you what it does. Then ask them how to make it do something slightly different.
The expand on this the reason you want to do it the above way and not your way is because count($v) will be called with each loop of the foreach. So if you have 5 items it will run count 5 times. Whereas if you switch them it will only run the loop if count &gt; 1, but won't count again. edit: Sorry if this is captain obvious to you OP.
Ah, that makes sense. Thanks!
Thank you very much, that explanation helped.
Oh god, when your programming language is copying javascript you know you're screwed.
Thanks, I'll try this out with some real data I have when I get a chance. I have been working on a project which involves filtered searches on hundreds of thousands of rows, with various joins of different junction tables for matching additional criteria and many-to-many relationships. It would be interesting to see if there is anywhere in the code I can try this out and measure the results.
How the hell do you do a cock pushup?
&gt; &lt;?php foreach($v as $outdoor) { ?&gt; &gt; &lt;?php if (count($v) &gt; 1) { ?&gt; &gt; &lt;img src="&lt;?php print $outdoor; ?&gt;" alt="&lt;?php the_title(); ?&gt;" width="100" height="60" /&gt; &gt; &lt;?php } ?&gt; &gt; &lt;?php } ?&gt; Why are you counting $v 999 times inside the foreach loop?!? &lt;?php if(is_array($v) &amp;&amp; count($v)): foreach ($v as $outdoor): ?&gt; &lt;img src="&lt;?php echo $outdoor; ?&gt;" alt="&lt;?php the_title(); ?&gt;" width="100" height="60" /&gt; &lt;?php endforeach; endif; ?&gt; And yes, I like to use alternative syntax instead of curly braces when in an HTML view file. EDIT: removed unnecessarily verbose tags to reflect typical coding habits.
Lay the cock out parallel to the floor and instruct him to use his wings to push against the floor. Don't let him cheat, he'll try to push off his knees.
I've asked "what is the scope resolution operator" at least 10 times and I think 1 guy got it right. I didn't think it was a hard question but apparently it is. FYI- it's not a good idea to judge someone's skill by quizzing them w/ hard questions, collaborate with them on a white board on some partially-written code so you get a sense of their abilities to work with a team. If they don't know how to code or aren't up to snuff, it will show immediately as opposed to humiliating them with a machine-gun fire of questions that people rarely do well in.
Do people seriously write PHP like this, with a million inline statements? Why not just use print() and keep everything inside one block of &lt;?php ? It's much more readable.
Because normal people use IDE's with syntax highlighting.
You're jumping to some mighty conclusions there, bud. Code readability goes hand in hand with highlighting, to be sure, but there's something to be said for structuring your code neatly and not using a million unneeded php opening and closing tags. Ahh well, there's a reason why PHP developers get no respect. 
I'm a normal person that uses an IDE with syntax highlighting, but that doesn't mean that I write messy code. What IDE are you using that features syntax highlighting with a side of code uglify?
Just took the Zend course/test. It really is difficult to ask "hard" PHP questions. What Zend does, and it annoying as fuck, is ask a bunch of negative logic questions. Something like "Give the output of this function" or whatever. You'll read through it, come up with the answer and discover you were wrong because you didn't notice the missing semicolon on the 5th line. Lots of gotchas don't determine knowledge.
**CSS:** .outdoor { height:100px;width:60px; } **PHP:** &lt;? if(isarray($v)){foreach($v) {print("&lt;img src='$v' alt='".the_title()."' class='outdoor' /&gt;\n");}}?&gt; 
No offense, but generally the "no respect for PHP developers" is usually aimed at people who write code in your style of "if a filename ends in .php everything must be echoed/printed out in PHP". It is much more common for PHP developers to separate business logic from presentation and use MVC and similar structures so that another developer can find what they're looking for where they expect it to be. Typically the only PHP found in a view (if any) would be echos and the occasional foreach loop.
All of the IDE's I've used will not parse/validate/highlight this as html: &lt;?php $longOutputString = '&lt;article id="' . $article-&gt;title. '"&gt;&lt;h2 id="article_' . $article-&gt;id. '_heading"&gt;' . $article-&gt;title . '&lt;/h2&gt;&lt;p&gt;'. $article-&gt;intro . '&lt;/p&gt;&lt;/article&gt;'; ?&gt;
Okay I agree then. That should be ridiculously simple for anyone that actually programs.
Can my function take infinite time to get you the answer?
So you're just being obtuse on purpose? 
I've got piles of production, deployed, well-tested PHP code under my belt, so believe me when I tell you that I know full well the bad practices you'll find all over amateur PHP code. I personally find the pattern shown in this thread, with lots of &lt;?php's all over the place, to be fairly gross and un-necessarily verbose. For me, the business logic is always 100% separate from the HTML, and the HTML is one big print() statement, single-quoted, with '.$foo.' used to output variables. It looks much cleaner, especially on large paragraphs of HTML. The only real problem is having to escape single quotes, but if you're putting all your text directly in there instead of pulling strings from an internationalization abstraction, you're doing it wrong.
In a pinch, you can use randomly generated data to test. It's not as good as the real thing - distribution characteristics matter a lot - but that way you could get a quick modest quality answer while waiting on your slower, better answer.
&gt; It is much more common for PHP developers to separate business logic from presentation and use MVC and similar structures so that another developer can find what they're looking for where they expect it to be. Not really.
To be fair, doing it with a bunch of prints isn't much better.
How is this Javascript-esque exactly? Also, this doesn't solve the referenced problem, nor does it fulfill the author's self-imposed goal of reducing unnecessary code. In other words, this would be perfect for the user comments on php.net's manual. 
essentially
You might as well ask what 'paamayim nekudotayim' is, since most PHP developers will never encounter such jargon (either 'scope resolution' or 'paamayim nekudotayim').
the classic if-foreach in php.. without the if, we'd all be screwed. did somebody fix this in php5.4 ? I'm so sick of if-foreach. I just want to do foreach
fail-esque.
So, did you pass?
Yep. I use scope resolution daily and never knew a name for it. I have a clear understanding of its purpose though. [Paamayim nekudotayim](https://secure.wikimedia.org/wikipedia/en/wiki/Scope_resolution_operator#PHP) for the lazy.
That's not really necessary and can actually cause some problems if the user's ip changes for whatever reason. Not sure what the default session_id length is in php, but assuming it's probably around a 32 character string, guessing a session ID would be like cracking a 158 bit key even if all seven billion people in the world had a session open at the same time.
All i want is form filled in with something like "boobs", hit submit. I go to [boobs.willkillusall.com](http://boobs.willkillusall.com) The kicker is actually making the URL into a subdomain. I can upload an htaccess file if I need to...
If ALL you need is for the form to redirect the user: &lt;form action="redirect.php" method="post" onsubmit="document.location=document.getElementById('loc') + '.willkillusall.com'; return false"&gt; where to? &lt;input type="text" name="loc" id="loc" /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; And as a fallback, redirect.php &lt;?php header('Location: '.basename($_POST['loc']).'.willkillusall.com');
Awesome. The best free PHP catalog software is going to get even better with this fork. Keep up the good work.
I can get the form to output *indexnew.php?topic=+dfg+sdf+gsdfgdfg* And I thought setting the .htaccess file to Options +FollowSymLinks RewriteEngine On RewriteBase / RewriteBase /subdomain/ RewriteCond %{HTTP_HOST} !www.willkillusall.com$ [NC] RewriteCond %{HTTP_HOST} ^([a-z0-9-]+).willkillusall.com [NC] RewriteRule (.*) indexnew.php?topic=%2 [NC,QSA] ** was going to help. But no. I'm just kind of trying anything I think fits.
&gt; The fourth goal is to provide better security and user support. No offense, but when you're building something where payments are involved, security should be numero uno on your priority list. You're going to be handling very sensitive data, so you should treat it as such.
almost worked: http://willkillusall.com/indexnew.php redirect is just &lt;?php header('Location: '.basename($_POST['loc']).'.willkillusall.com'); ?&gt; it returns http://willkillusall.com/[object%20HTMLInputElement].willkillusall.com 
might help: http://stackoverflow.com/questions/586129/create-subdomains-on-the-fly-with-htaccess-php
First, does your 'A Small Orange' DNS support wildcards? This is crucial if you want to setup subdomains on the fly. Next, if your on a shared hosting plan, it may or may not support this type of setup. Basically both DNS and hosting needs to point *.willkillusall.com to 1.2.3.4 (replace with your ip address). That way no matter what the subdomain is, it will query the IP of your server and you can fill the page with relevant content based on the subdomain prefix. Hope this helps Others here have responded with useful forms.
yup. already done. it already works. check it out http://skinny.monkey.willkillusall.com any idea how to get a form that outputs indexnew.php?topic=+dfg+sdf+gsdfgdfg and converts it to dfg.sdf.gsdfgdfg.willkillusall.com? 
You're absolutely right. That list is more the why I'm doing it then the what I'm going to do. That point is more that security concerns and issues aren't properly addressed by the current developers, so it should read 'better security support and user support'.
All I can say is PHP needs more options for e-commerce, so kudos. I'd offer to help, but I'm already planning to start a cart of my own this next winter, using ZF and Propel. I have a ton of experience with Magento, and I know where it could do things better, but I'm not about to fork it :D
You have to include http:// in the header, if not it thinks it's just a path on the home domain. Ex:&lt;?php header('Location: http://'($_POST['loc']).'.willkillusall.com'); ?&gt; Also, why would you use basename? Just wondering... 
One print, not a bunch. Get everything ready first and then print it in one chunk. Makes it much easier to read and debug.
Most of the php carts are all clones of each other. Don't introduce another similar cart into the market. Make yours stand out - both on GUIs and architecturally. Reason why I mentioned that is because you want to "fork" the code over to your own cart.