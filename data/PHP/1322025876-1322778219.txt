PHP master? Far out I'd call being able to do all of OPs post "intermediate" level. I can do all that and I only get paid 57K NZD in NZ (43K USD). I've been doing PHP/web dev for 3 years. Now on the other hand if you had **in-depth** knowledge of all the frameworks and intricacies, architecting and building complex production apps in them, optimising the applications for lots of concurrent users, I'd call that "senior" level.
I wouldn't want to work for you. This reads like a list of cargo cult programming requirements; using other peoples best practices because it's voguish. - MVC is a fraud. If you don't understand the origin of that pattern and its misapplication for webapps, you are unlikely to use it reasonably. - "No deprecated methods" flies in the face of reality. It's one thing to avoid dated code, but another to avoid the optimum solution. - OOP has only one design pattern. It's called messaging. Nobody wants to be bickered about the GoF patterns all day, in particular when they have been designed to solve the shortcomings of C++, not PHP (which is an interpreted language based on the hash as central data type). - From your notes about unsanitized SQL I'd conjecture you're still maintaining old code, and using simpler and more contemporary approaches is off the table. - "No globals" - Again personally not a fan of avoiding language features at all costs, and just because it's a meme. (Also people amusingly always relativize the Oh-I-would-never-use-globals when you point out $_GET and $_SERVER). On the other hand, you would still get an above average programmer with that list. It's still a big step up from the typical headhunter inquiry. I just believe it won't yield an actual expert.
Stop making it a pain in the ass to interview for your job. Don't make me take half a day to do a silly programming test, or go through long, involved phone interviews about basic programming concepts ("Explain what OOP is?"). Especially if you insist on code samples and fancy computer science degrees. All that does is tell me you have a serious lack of hiring skills. Don't start off assuming I want to come work for your company--sell me on the job. If your company doesn't really have an amazing product I can get excited about or believe in, if you offer no real opportunities for career advancement or developing valuable new skills, be ready to offer a truly excellent salary.
upvote for the use of journeyman-level developer. I like that.
I am a junior developer just out of college, this was extremely informative and I now know what I could be making and what people are looking for. Thanks! (saved)
Paper-based coding tests are idiotic.
I thought this was going to be a Jerry Seinfeld joke.
Yes as Nicoon stated xdebug is one area too look. The other areas are your web server and database configurations. If you're running MySQL I would enable the slow query log to see if you have some nasty ass slow running queries (or what ever your rdms equivalent is).
Using a service would be the first thing I looked at.
REST is a loosely defined set of practices and approaches in designing an API. SOAP is a well-defined and structured protocol. They aren't exactly comparable apples to apples. REST tends to be simple, intuitive and easy to use. SOAP is the most unnecessarily over-complicated abortion that's came to programming since XML. Whatever you do, do not use SOAP. (Especially in PHP. PHP's SoapServer implementation is horrible. If you /have/ to use SOAP, you'll save yourself years of headaches by using Java or C#/.NET)
To put this in perspective, the mere act of connecting to a database takes 100 to 1000 times longer than anything you're looking at here. 
It's in php.ini. If your httpd.conf configures PHP then you're doing shit very very wrong.
No it's just a waste of money. Quotable quote is quotable, though.
And another Hell Yeah and Amen.
I guess Knuth was wrong then. I bow to your superior knowledge.
What meritt_zare said. SOAP is a nightmare. Use a RESTful API with JSON. Everyone involved with the code will thank you later. Even if they don't thank you, you'll know in your heart the pain and anguish you saved them... by saving yourself from the very same pain and anguish! JSON stuff with CakePHP is simple. Done it for a bunch of projects. It's mostly painless.
Knuth had a brilliant idea and put it forth in a way that was very quotable. These days the quote is used way too literally and no one understands why premature optimization is bad. I see tons of people quoting Knuth and when pressed for why it's the root of all evil (really?) they can't explain why in any decent shape or form. So no, Knuth was not wrong, but most of the the idiots quoting him are.
I'm on my phone right now away from home (so I can't get into much detail) but I would say always design with making big changes in mind. Think about how you would add feature x or remake feature y or redesign element z and write your code in the way that will make changes as seamless as possible. This takes some intuition gained through experience actually having to refactor old code
&gt; you also seem to want a jack of all trades, and a master of all of them as well. why not hire an SQL guy, a javascript guy, etc... i understand you need to have knowledge of these things, but a lot of this can be abstracted away and handed off to the master of each area. The best dev shops I've ever been in had people who had a working knowledge of everything, but had each mastered one area. If it takes 10,000 hours (5 years of 8 hour days Monday to Friday without ever a break, holiday or digression) to become an expert at something and untold hours to keep your skills up to par, you're not going to find people proficient in all these areas, just passable or 'good enough'. Sure I can write the JavaScript, but the guy that's spent the last 5 years of his life living, breathing, eating and shitting JavaScript can probably do a better job. And when he needs something on the PHP side of things, he sends it my way. I have enough knowledge of JavaScript to know what he needs and to not make his life more difficult (or even to help him out when he needs a second pair of eyes), but he can always write better JavaScript than me. He has more experience. You (unless you're retarded) don't expect a proficient PHP programmer to also be your designer, why do you expect him to also be your DBA/Analyst? Your JavaScript developer? Your CSS guru? Your CSR? Do one thing, and do it *very* well.
A thousand times over.
&gt;We're not offering 40-65k like others seem to be suggesting. The amount is a lot more than that. People who would be qualified for this job are very likely qualified for jobs that pay over 100k (sometimes well over) in your market. If you paid 85k, I'd pass (in your market).
For the part with you're asking too much: indeed you are, from 99% of the candidates. The fact that i listed a bunch of technologies, those are my personal experience and i work with them almost everyday, that's why i listed them. The main point is, even if you don't need or use those technologies, at least ask about what the candidate knows about them to evaluate how much exposure the candidate has to additional technologies. As for the ORM advocating, it is just what i would do. But requiring doctrine knowledge or propel knowledge at the interview again measures the degree of exposure to these technologies, and a basic knowledge about what ORM stands for. Cutting to the chase, what i would like to be hearing at a interview is about this: 1: Previous experience, what has the user done exactly 2: Best practices [sometimes not applicable]. If the candidate is or seems very well prepared, then skip this 3: Evaluation of additional technologies beside PHP. Caching, databases, web servers, experience with network programming in PHP [can be useful for apis and so on]. 4: OOP: Concepts, this would nicely incorporate the square rectangle problem. See how the user arguments his opinion and see if his opinion is sustainable. Also see if the user has the power to back down and accept another solution in case he is wrong. This is not a definitive test, but it is a very nice test to see how flexible the programmer is. 5: OOP: Design patterns, give him a example, see how he designs the component. For example make him design a system where a user comes from shopping cart and has to choose a payment method out of 7-8 payment methods. See if the candidate can identify common parts, see if the system design is good and allows additional payment gateways to be added, deleted, modified without affecting the entire application. Basicly see if he is capable of separating a small module from the application he is working in. 6: Application design: give him a small application and make him design the modules. identify and confront the candidate with potential flaws you discover. Put him to explain why he chose to design the app as he did. See if it scales. 7: Chat with him. See what he reads outside the program. See what his interests are. This is a long interview, but should give you all the needed informations to asess the quality of the programmer. 
Thanks I've been playing with this @home https://github.com/kvz/cakephp-rest-plugin and it looks like it may be viable. I do think I have to give looking into a SOAP solution a fair chance though since I was tasked with determining which to use. Seems as though SOAP has a bad rep to it, which is fine by me, I never liked it even when it was the "IN" thing, that or XML.
PHP's support of XML is iffy anyway, it and SOAP are harder to work with, and JSON data gets you quick and easy native JavaScript support should you ever need it. I dunno what all that plugin is doing (I should've been in bed 90 minutes ago and thus don't feel like reading) but it's rather straightforward to get Cake to serve JSON. I think all it takes is one line to configure the Router to acknowledge URLs ending in `.json` and then some JSON views that serve the proper headers and `json_encode` the content. There's a great comic demonstrating how "simple" SOAP is but I'm having trouble finding it.
Listen to people's advice, try to understand *why* they are saying what they say. Don't form any habits until you are sure they are based upon rationality, and be prepared to change them. Use other languages and see what concepts and styles stick - I'd recommend learning Python and then seeing how you can apply the concepts of that to PHP.
Only problem is that there's bad books out there and if you're reading one a week perhaps you will be more likely to expose yourself to them as there's not so much time to research which books are good. Perhaps it'd be better to read one excellent book every month. Also, book learning isn't for anyone. I don't think I've actually managed to read a programming book cover to cover, however I am an experienced web developer. Ooh, one book I *did* read... [Clean Code: A Handbook of Agile Software Craftsmanship (Robert C. Martin)](http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882)
Do *not* comment the hell out of your code. Well written code should be self explanatory. **Do not comment *what*, comment *why*.** Read this book: [Clean Code: A Handbook of Agile Software Craftsmanship (Robert C. Martin)](http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882)
Skimmed 'em and they seem pretty legit.
H T E F L A M P
we decided there was an easy way to deal with SOAP. use something like soapui to generate the soap rpc-xml structure then just send them using curl. it cut the debugging time right down, it's not perfect but when dealing with over engineered SOAP api's it works quite well.
Unless you want to travel to the seventh circle of hell (where SOAP was born &amp; lives) I would go with REST
in that case you are probably underpaid
&gt; I had to google "fat controller" Did you get [this](http://upload.wikimedia.org/wikipedia/en/1/18/Fat_Controller_TTTE_1.jpg)?
I don't think you're being tough and unreasonable, I do think you're being strict, having some experience with the market I know that with an ad like yours the interview would be a pain in the ass but once inside it'd be awesome to work there. I think you're strict to a fault on two points: the code standards - you should required someone who'd be able to follow your code standard, saying things like " knf or allman" is just throwing smoke; The php 5.3 +, I get it, but you're loosing a lot of good people right there. Like many said, one should keep up to date despite his/her job, however, I meet all your requirements and I don't even do PHP anymore, I do Perl, that's because most of the things you mention **are not php specifics**. Example, a while back I was doing php for a living and got invited to a perl web dev team (where I am today), despite having no perl experience I picked it up very quickly and like me, others that followed with similar careers. So if I (and most people) were to drop my job today and work for you today, you'd never notice that I haven't code php 5.3 before.
&gt;I'm not going to quit my job that pays more just to work with more interesting code Why not?
To an extent I agree, however lessons learnt from that type of premature optimisation can easily be added to successive projects from the start and at that point they are no longer evil.
I can work on my own stuff at home which offers absolute freedom. I'm not going to take a 20% cut in pay to work on something cooler. You can all too easily get back into the position of being bored with what is going on, and taking that 20% cut in pay just isn't worth the risk. I ask them, just match the salary, but no one seems to want to. I don't care, I don't hate my job, just bored there and I have my own personal fun project at home that's letting me be creative. I'm content for now with just that (first time in my life I can say that).
3 month ago I created some kind of mailing system with Codeigniter. I sent about 600 mails with custom templates using mail library or something like that. It take about one hour to send all... I used a VPS hosting. http://i.imgur.com/tw5kt.jpg I dont use it now, and dont going to use it anymore... dont reinvent the wheel. Saludos from Spain!
&gt;Because manually optimized code might sometimes have less "readability" than unoptimized code, optimization might impact maintainability of it as well. Optimization comes at a price and it is important to be sure that the investment is worthwhile. Thats a pretty simple explanation of it. I can say that most people I've seen use this quote seem to understand it though. I don't think that its a difficult thing to grasp.
The point is that premature optimization is not only about time costs. There are so many bullshit articles on how to improve PHP performance by doing bizarre things that its just amazing. I love it when people spend time doing things like switching everything to single quotes when the reality is that they have a really fucked up database query thats eating 90% of the time.
As others have said, SOAP is pretty awful. REST is really easy and simple to implement and use. PHP's JSON support is nice as well.
&gt; I can say that most people I've seen use this quote seem to understand it though. I don't think that its a difficult thing to grasp. Then I want to live in the world you do. Sadly the people I run into online are clueless about it and regurgitate the quote only because it sounds good. 
Haha, I came here to see if anyone had already said the first bit. You can't compare the two - REST is just (essentially) a set of ideas, whereas SOAP is an actual protocol. I've seen people use "REST" but have verbs in the URL and POST requests for **everything**. Surely that can't be called REST any more? 
I think it's important to take into account what you're trying to do with the API. Are you looking for a relational CRUD interface (a RESTful API works best here), or a way for the client to call functions on the server (SOAP, XML-RPC, and other variants here)? A lot of people come straight out with "use REST," without really understanding what that entails. Since you haven't given use cases for your API, that kind of advice is a bit premature. There is a lot to consider, and RESTful interfaces are not the magical cure to everything.
RESTful APIs are probably the way to go. If you want to find a middle ground between a RESTful JSON API and a SOAP RPC you might try JSON-RPC. Not sure what the servers are like on PHP, only used python servers but the protocol is lightweight and acts similar to a SOAP call.
"SOAP is the most unnecessarily over-complicated abortion that's came to programming since XML." -- I'm so gonna put that in my next write up to my client when we discuss services again.
Could not agree more.
I was a bit worried coming into this post, thank you for putting my fears to rest. Soap can go jump off a bridge.
Completely agree. If I had to do a SOAP or multi-protocol web application API, this is one of the few instances I might turn to .Net as WCF is one of the more interesting things they've come up with and honestly one of the better ways to create an app that can expose an API to multiple platforms and protocols. 
You may agree, but I think you can tell by the distribution of upvotes/downvotes here that the majority of others do not. You're of course welcome to your own opinions, but you have to keep in mind the reality that the rest of us are dealing with when it comes to trying to find a new hire. Good luck!
I considered this so I implemented a timeout manually. Essentially, I store the expiration time and check it against the actual time on every request. When the time exceeds the expiration time the user get redirected to the logout page. What might cause this behavior?
Yep, we cache shitloads. Still though, my code-boss told me to write in a way that uses as few opens/closes as possible, that it takes a little power each time the server parses an open/close tag set. Just wondering basically if that's hooey or what. 
Why? I've even had an applicant complain about a computerized test, because he didn't have all of his fancy text completion macros. He was literally useless when it came time to program anything.
Hey Jesse, sorry about the late reply but what did you think? Did you read parts 2 and 3
If you have two options, and one of them is SOAP? Use the other option.
Most everyone else in this thread has already told you what you need to know, but just for the sake of completeness, [the S stands for Simple](http://wanderingbarque.com/nonintersecting/2006/11/15/the-s-stands-for-simple/).
Having worked with SOAP in PHP for a couple years...I can confirm what you said is completely true.
I always felt dirty for doing similar... I figured the spec was being followed, the problem got solved, and I didn't have half a bazillion classes in some set of random frameworks to sift through to get some basic requests done. Sometimes your problem really is a nail, and sometimes it doesn't need that big of a hammer
Every time you use SOAP a developer loses his wings
That's just it, there are always more options. SOAP isn't the only RPC method available, but REST is completely different than RPC. I've found both XML-RPC and JSON-RPC extremely easy to implement with PHP. Edit: To clarify, SOAP does still have use, and it's not JUST an RPC interface. SOAP is more about remote object sharing, but I haven't really seen it used that way.
A web service using pure HTTP to make commands is always better than SOAP. But just because it's a web service using HTTP doesn't make it REST :P 
Why did I read that in Jerry Seinfeld's voice?
you beat me to it.
REST/Avro for binary or just plain XML and Never look back
Am I the only person that likes SOAP? It's well-defined, there are a lot of libraries, and it was specifically designed for this sort of thing unlike HTTP where REST seems to just be a general idea of how to do things without much formality. I've only used either as a client, though, not as a server. I assumed there was some kind of library to handle WSDL generation and such for you, maybe I'm wrong?
Another simple one. **Post the salary range**. It will show if you're actually serious, don't expect anyone qualified to waste their time applying unless you do this.
Yeah, it's hooey. It has no noticeable gains at all. If you execute a script multiple times, the execution time won't be exactly the same due to different applications fighting over the resources as well as some other factors. If the optimisation is indistinguishable from that noise, then it is not worth your time.
Me too. In fact I think that I might send it out preemptively, just because I can.
Well, since DELETE isn't supported by all (most) browsers, in order to make something that works, you have to be able to override the method. Technically, I don't think that anything *is* REST. That said, "POST requests for everything" is definitely wrong.
REST is just implementing the HTTP/1.1 spec in its entirety. Just read the spec and conform. SOAP is a nightmare, whereas REST is the purest form of API design for the web.
Great post. As a senior level PHP dev myself, dealing with many of the same issues, I feel you've summed everything up pretty well. Thanks... 
In response to #1: There are many high-level developers like myself who focus on start-ups because we are interested in the potential if it works out. I do agree though, that most start-ups you find are of the type where some db thinks you are going to make him a facebook clone for 10% equity while you do all the work. These people are a joke, but their are good opportunities out there if you're looking hard enough. #2: I agree, although I think you're slightly off for most developer positions. From what I've seen, most of the jobs in socal are around 95-105k for top level developers. You are right though that they need to be offering more if they expect to compete with bigger name companies and getting the best employees. Especially if they are trying to poach...it's ridiculous how many people think I'm going to jump ship for less money. #3: This ties into what I was saying about #2, but if you're using a recruiter make sure the recruiter isn't lying about the salary range. I can't even count how many times a recruiter has told me the salary goes up to 135k, and then you get further into it or find the company's real job posting and the pay range is like 60-80k. What a waste of my time, and leaves a bad impression in my mind about the company even though it's probably due to the recruiter. Also, the recruiters need to stop sending any warm body. It's amazing how many recruiters don't do any simple skill checking, and send complete liars to you when you need people. I was recently hiring developers, and all but 1 guy that they sent us I wouldn't even consider amateurs.
Yes yes yes to #3. I threw my resume out recently (on dice and monster) just to see what's out there. Then I get tons of calls and emails from recruiters, and it's always something "Hi, I have an opportunity. Call me". Never "email me back", never any information on the job, just "Call me". Outsourced Indian's are calling me too. In the same day, 5 of them called/emailed me for the same job. That would be funny, but it was a complete waste of my time, and frankly even if I wanted that job it might have pushed me away from it.
Yeah, code samples is also dumb because high level developers with real job experience likely won't have access to any of the code they have written for a long time. Or if they do, it would be a contract violation to send it. He's basically looking for the people who contribute to github for public projects all day, rather than getting paid. GL with that.
I don't agree. Web development, especially when you're talking about scaling is based on experience in the language and it's frameworks. Sure, good programmers can pick up languages, but if you need an expert you don't want some dude learning on the job to run your project.
Doubt you can do all that stuff, don't doubt that you are 'intermediate'.
Doubt you can do all that stuff, don't doubt that you are 'intermediate'.
Yeah, socal here too...SD companies seem to be extra cheap.
1. With this one, I think we're on the same page. My main problem with start-ups are the onerous time and pressure constraints. It is really a gamble on whether one thinks the potential benefits (equity, stock options) are worth it. They're definitely helped if there is already venture capital in place or good, previously successful angel investors. 2. Yeah, I pretty much meant $110k+ for companies trying to poach a worker from his current job. For someone looking for a new job, $95-105 is reasonable. The problem is that the best people usually aren't looking.
http://www.youtube.com/watch?v=u6XAPnuFjJc In development, money is often a bad, even counter-productive, motivator. There are better ways to show respect to employees than just cash in the bank. Of course money always helps, especially when luring people in!
#3. Watch out for recruiters that will modify your resume by adding their logo or changing the way it looks in any way. Send PDF or password-protected Doc[x] files to prevent them from changing the layout.
I am in a senior/management role now, and it surprises me that recruiters call me with junior level jobs which, obviously, would not pay as well. 
&gt; 6. And for the love of all that is holy, please do not use the words ninja, rock star, or guru to describe the position. This!!! (unless a very enthusiastic and probably under-paid young person is what you're looking for)
Dear God yes. Thank you. I just did a round of interviews and I disqualified one company as soon as their HR lady asked me, "On a scale of 1 to 10 how well do you know Web Development?" .. "How about C++?".
I looked back over that posting and the closest I could come to salary was this: &gt;We're not offering 40-65k like others seem to be suggesting. The amount is a lot more than that. I think we found the issue. Its an anonymous posting without any stab at stating the salary. If they were paying 120k a year, why not just say that and be done with it. Instead the need to fuzz it indicates to me that the poster feels they will be called out immediately on what they are offering. This changes the nature of the question to "How can I get someone that undervalues their skills and experience, whats the trick?" This is a pretty common trend in any job. "WAAAAA I cant hire people to pick my crops because they won't do back breaking labor for 12 hours a day for less than minimum wage, americans are lazy!"
jesus, just reading this you sound like a tool. as a programmer I would NOT apply for this position.
I don't know about docx, but passwords can usually be stripped from PDF quite easily, see http://pdfpirate.org/
probably it meant no stuff like: function floated_admin_avatar( $name ) { global $comment; //more code here }
This. Overused OOP in PHP is a problem.
That list isn't that difficult and have done it all of it before. Hardest part is probably making a factory.
It's not difficult to have heard some of those things. We're not talking simple familiarity with this stuff, we're talked about whether the person has a true understanding and any experience in it. I know plenty of people who know some theory, but have 0 experience and don't actually understand how to implement the concepts they claim to know.
I'm guessing a bug in your code... if you want to pastebin the relevant parts I could take a look at it for you.
Do you have Ajax?
It depends on how much you like your job. Personally I would make it a long term plan to slowly implement better structure over time. You essentially have zero chance of making a big change right away, and since it's a new job, that's the way it should be. You are new, prove your worth and knowledge, then start slowly recommending different things. One month of employment is not enough time to be in a job to start rocking the boat.
Yeah well I wasn't talking about theory. For the list above I've used the Zend Framework and played around with CI and FuelPHP. Also written my own small MVC framework which while doing that you end up implementing a few design patterns anyway. As for the rest of the stuff, if you've been doing development for 3 years and built some reasonably complex projects then the rest of the list is no trouble.
Yes, but there's a big difference between doing it, and doing it right and in the right situation. Anyone can repeat a tutorial...well almost anyone.
There's more to it than simply having done it. You can go through a book, follow the examples, and have done almost 'everything'. Doesn't mean any of it was done properly, in the right situations, or that there is any clear understanding of what is actually happening. Yes, this list isn't that crazy...that's the point. It's there as a litmus test to get the person talking, so you can determine if they understand why they are doing what they do. If you have a good understanding of all of that in 3 years with real world experience in them all, hats off to you. Most people aren't there after 5 years. Truely good developers are hard to find, and unfortunately there's alot of people out there who can fool an HR person. To me, the list seems pretty standard and ok to me for interviewing for senior level developers. I wouldn't be looking for someone to just know the terms and put them in that position however.
Well, that's my challenge. The first programmer built most of the site, and I'm the third programmer at the company. A year from now, they're expecting to have 20 developers on staff, and I'm worried that if we don't start pushing our code in the right direction now, we'll be fucked a year from now. I've been biting my tongue a lot as I try to get used to the application we're building, but I keep hearing the same thing from the operations guy - if you see something we're doing wrong, or that we should be doing differently, tell us, because we're a startup, and we can turn on a dime. They want me to be telling them this stuff. The tech lead has no problem with me developing my segments with models and more structured code, so long as it works. But I'm not comfortable enough yet to be able to justify my ideas. Which is the bigger risk - trying to make a change, or not trying to make a change?
My sentiments exactly. 
Yeah it's an interesting conundrum. Just move slow and learn to read if your pissing people off or not. At start ups I've worked with, even though an ops manager might say they want better code and their heart might be in right place, the fact of the matter is delivering a product is most important. Having something to sell immediately and coming back to fix it later is better option than building a perfect product, running out of time and money, and never having anything to sell. That is not my opinion of course, but it may be the opinion of folks in your company, and if your lead developer delivers, that just might be their attitude.
For sure - they've pretty much told us that January 1, we have to deliver the site - after that, we can go back and fix things. So I'm trying to plan out what I'm going to want to push for come January, what's going to be important. The ops guy said that if I can figure out what needs to get done, then I can focus on the big picture stuff and the day to day stuff can go to the next programmer we hire. Is that how things are gonna hash out? I don't know, but I figure I've got a better chance of impacting things for the positive if I've got a plan of action. And that's something I want to do - I just need to make sure I can really justify wanting to rewrite code that 'works' beyond just saying 'it'll make things easier down the road.'
payphone is right
Here is a tip... I haven't had an employer in more than 5 years because they can't afford to pay me what I make out of my bedroom office.
I don't even understand what you are trying to sell. ORMs are a Vietnam of computer science. You want more structure for a sake of structure. How do you describe enough structure? More OOP for a sake of OOP? What's wrong with functional / procedural. What's your arguments? Oh, you seemingly don't know, because you are asking it here.
Well, I've never understood models, tbh, so try convincing me.
&gt;6. And for the love of all that is holy, please do not use the words ninja, rock star, or guru to describe the position. I love you.
And we are looking at potentially sub-contracting a PHP developer from a company called - *Happy Ninjas*. Sigh.
Yeah, so your computerized test worked. You probably don't really need a "test" anyway. Just sit the candidate down at a machine and give her a straight-forward programming challenge, if you must test her ability; and then review the code. Unless you are clueless about technical hiring, you can tell whether someone can program in 10 minutes just by talking to them. Paper-based tests completely take the candidate out of context. You want someone who will solve your business problem, not someone who can jump through a bunch of artificial hoops. 
Yeah, if you pay $120,000 per year you can can get a lot of those kinds of developers. Now if you are in So Cal that might be higher based on the cost of living. And since you clearly won't be investing in the employee's training or his education, and he will have to foot the bill for that, your cost of hiring a developer just went up. Because the ones who are already qualified either have a job, or don't want to work with PHP but instead prefer something trendier. You will have to pay a premium to get a superstar. They don't grow on trees. Or you could do something smart and take a young developer without the complete skill set and train them while building long-term loyalty to your company. Oh wait. You are a fly by night company that doesn't care about long-term results or employee loyalty? Yes. I think I know you.
It should be: * NamespaceA\ClassA * NamespaceA\ClassB * NamespaceA\ClassC Assuming all these classes group together in some kind of logical way. It's just as reasonable to put a subclass in a different namespace if it's for an entirely different subunit of your project. I would recommend avoiding the global namespace entirely as all built in PHP classes and extensions put their names there -- leave it for them. 
Don't walk in to it like you're selling a product. Walk in to it like you're making conversation with your coworkers. The way I see it, even if it doesn't work out the way you want it to, being social with your coworkers still has its advantages. If you use Models/ORM in your own stuff, start by showing people you work with the things you're doing on your own time. Don't immediately try to tell them that you want to turn the current project upside down, but show them how easy it is to get around in what you're doing. The purpose of this is twofold: 1) you're educating them in alternative methods, and 2) you're exposing them to the idea without asking them for a commitment. The best way to convince a potentially resistant person that an idea is good, is to try to lead them to thinking it was their idea in the first place.
7. Allow your employees to work from home.
I work for a startup as a developer. We just raised 2.5MM, second round, previously successful angel investors. Great office, best boss I've ever worked for, solid ideas, health benefits, options, good PTO, etc... Still really hard to find talented developers at any rate. I'm not sure what the differences between mid and upper level developers are but we get a lot of people who I wouldn't even consider interns applying for jobs. I imagine the problem is more location as we are in a major east coast city not named NYC.
Examples are better using actual keywords rather than "class" or "namespace". As wvenable said, you group them logically... say: API.php (or \API\API.php) \API\JSON.php \API\XML.php Or maybe: \MyProcessor\Parser.php \MyProcessor\Tokenizer.php Or, if you wanted to represent something like PDO... \PDO.php (or \PDO\PDO.php) \PDO\Exception.php \PDO\Connector\mysql.php \PDO\Connector\oracle.php
The main problem with SOAP is generating a WSDL file for your service. As PHP is weakly typed you're going to have some pretty serious problems being able to automatically produce something that everybody using Big Boys Programming Languages™ can use (e.g. Java, C#, C++) The best advice I can offer is to use JSON-RPC if you don't want to write your own interfacing documentation.
Well there are two specific use cases I'm interested in at the moment. One is my database singleton class, which is in Database.php. There are two other base classes which interact with it. Currently all the database classes sit inside \Database\, which means I'm doing \Database\Database all the time (excluding `use` shorthand). The other is a page template class named Page, with a bunch of subclasses that add additional layout onto the base template. Currently these all live in \Page. It just feels kinda silly to be typing \Page\Page, so I'm wondering if there is a better alternative, short of coming up with an alternate namespace name.
What is this position's salary? I wouldn't do it for less than £30,000 for the skills required.
Yeah I mean a great dev that's worked in 5.2 most of the time is sure to have done some of their own code in 5.3, or will at least write 5.2 code that will be easy to update.
Yes, breadcrumbs are supposed to show how you got to where you are. What you describe here is not a breadcrumb, even if it is what most people call it. How useful a site-based breadcrumb is, considering most browsers now have it built in, is debatable.
Well, it *sounds* like you're using it correctly for the Page situation. I wouldn't make a separate namespace that exists for only a single class (Database) unless you're going to be extending it later. Its great use is for factories where you may be instantiating various types of the same parent class, similar to the PDO example I gave. Say you have a "FileTransfer" class: \FileTransferFactory.php \FileTransfer\ftp.php \FileTransfer\http.php \FileTransfer\rsync.php ... Then the factory instantiates the namespaced classes.
Not to shamelessly self-promote or anything, but to completely shamelessly self-promote: http://mcordingley.github.com/PHPStats/ In a more serious way of answering, you'll want to either do some clustering analysis or some association rule learning. And for that, you want something specialized, like crackanape's suggestion of R. Oh, another thing that you may want to do, since you can disappear down the rabbit hole pretty quickly with data mining, is some regression analysis. Since you're taking a number of parameters in to ultimately estimate a probability, you'll want to do a logistic regression.
"hi, want to be a web developer?" "you mean, tech lead of the office for $100k/yr?" "well no" "well... no!"
Hi Matthew. I enjoyed the article, although I was hoping to see some database content being cached, along with some time-to-live control/logic. Your examples help provide some insight, but it leaves me wondering what the real world benefit is in configuring routes via ini and storing in cache. I generally use a bootstrap class in each of my app modules to define routes within the module. I'm assuming it's faster to define routes via php vs parsing an ini file. Also, I thought the example involving paginators was a little strange. Long story short, I thought the first page and half was very useful, but thought the examples were obscure 
I've seen a lot of APIs use a hidden POST parameter for the method to "fake" DELETE support in browsers. This is the approach that [ASP.NET MVC](http://geekswithblogs.net/michelotti/archive/2010/01/08/implementing-a-delete-link-with-mvc-2-and-httpmethodoverride.aspx) and [Ruby on Rails](http://guides.rubyonrails.org/form_helpers.html) both take. They support having the verb in a hidden POST parameter or a X-HTTP-Method-Override request header, and internally the framework treats this the same as if a "real" DELETE or PUT request was sent. However, the OP was talking about an API. Unless it's for requests from a browser, APIs should be able to handle PUT and DELETE requests. One caveat: If using IIS, you need to disable the WebDAV module as it handles all DELETE requests by default. &gt; Technically, I don't think that anything is REST Yeah, true, and everyone seems to have a different perception of what REST is. I personally see it as being a combination of the following (although I could be wrong!): * Nice URLs that describe the content (/customers/123) * GET, POST, PUT and DELETE HTTP verbs accepted, and no verbs in the URLs (DELETE /customers/123 and POST /customers as opposed to /customers/123/delete and /customers/create) * Stateless * Cacheable responses, and GET requests should be idempotent (as with regular HTTP) * JSON because JSON is awesome
I'll be honest, I haven't looked into ORM extensively but from what I've seen you are right - it's unnecessary complication for no benefit. What the heck is wrong with a simple SQL query?
As others said this is comparing strings. But I'm curious to know why you think it *shouldn't* return true, even if they are parsed as dates. 2012 is later than 2011, therefore `$value` is greater than `$value2` anyway.
Ah okay, then this is a lesson in expressions in PHP (or any language). `[anything] &gt; [anything]` will always return a boolean, whatever the types.
make sure your NAT timeout is set to a log period. only heavy xml requests that take 60+ minutes i kept getting fails behind nat - check router - nat tcp timeout=60mins
spend $125 on gammadyne mailer and create some templates on the fly and let that program deal with it. php-activerecord = all the database goodness of CI without the VC. command line ftw
I'm an expert Borland TurboBasic programmer and have twenty years of experience in Google Dart.
PDF is generally read-only. A password protected PDF prevents opening, printing, changing, copying, etc. In order to change it you will need something like Adobe Acrobat, or an image program that can handle it.
Yeah, I've love to get into a start up, I'm 29... it'd be fun, but I refuse to get stuck in one where they expect me to work 80 hrs and I don't have control over direction. I also don't think I should have to work 60 hrs, I can prolly get all the work I need to done in 45 hrs. If it's something really cool and part of it is open source, then you can get me working 60 hrs with no problem (I've happily done that before).
Especially since those are three very different skill sets. When you think about it.
I'm guessing south eastern city? Boston has a bunch of tallent from what I can tell, I know Philly sucks with start ups, and DC has a lot of talent, if you can get them away from government work.
&gt; The collapsing margins was probably the hardest question, only one person of about 10 interviews knew what it was. I looked at that question and said ["Huh?"](https://s3.amazonaws.com/kym-assets/photos/images/newsfeed/000/197/134/NnWaD.jpg?1320773853) I thought it was some sort of weird dynamic technique, possibly including JavaScript or something. Reading your explanation, however, I was like "Oh, that. I knew that." Maybe it's just a matter of names being disconnected from definitions. That left/right, top/bottom answer was pretty bad though. I don't really think I know CSS well at all, but even I'd facepalm at that answer.
This is exactly what is wrong with the job market in the U.S.. And employees are discouraged from talking about their salary (or outright terminated in some cases), both to keep lesser-paid coworkers from demanding raises and to keep employees from hearing about competitors' higher salaries.
Indeed. It's not uncommon for people from my university to get 6-digit starting salaries in one of the two primary population centers here in California.
Or they spend the at-home time working on more interesting/esoteric new technologies. Or they spend it carving wood, mountain biking, reading books, spending time with their kids.
Probably a result of Java schools, imo.
&gt;You have an understanding of OOP design patterns such as factory, dependency injection, singleton, etc. See: http://i.imgur.com/nW2gD.png
I don't think it's any easier in NYC than Philly. I am in DC and everyone is hiring but nobody is looking.
Yeah I think asking "two divs, one 20px margins, the other 10px margins, what will the gap between them be?" would be better.
I'm working on a startup and having the time of my life. Best boss and coworkers I ever had.
I worked for a start up division of a company, it was a blast. I'd love to get back in that environment, but I don't wanna get stuck working 60 hrs on some closed code POS that's someone else's dream.
Years ago I used to work at a dealership and they had a policy that anyone was caught discussing their salary with anyone else, they would both be put at the lower of the 2 peoples salary. It was very effective too. 
I used to be the anti-ORM guy. I hated them with a passion. I'm fluent in SQL and can whip up complex queries with ease. I always saw ORMs as a lazy way of avoiding SQL, for those lesser programmers who can't hang with the big boys. I saw them as performance-robbing layers that made a project more complex, while adding nothing. I saw them as a learning curve that just puts you exactly where you started at the end. I swore to myself to never go near one. However... this was before I actually tried an ORM. I was forced to use Doctrine for my last project. I cringed every time i had to write a doctrine related command. After just a few days, i started seeing the benefit. After a few weeks, I refuse to work without it. Basically, Doctrine handles the heavy lifting of data reading/writing, so that you can focus on the more important task: adding features to your project. You define your entities in the beginning and define the relationships. After that, you have a reusable, predictable, object-oriented, shareable, easy-to-use interface to your data. If you need to update your email: $user-&gt;setEmail($email). If you need to get all your widgets: $widgets = $user-&gt;getWidgets(). If you iterate over those widgets, each one has all of its properties available. If one of those widgets has a subWidgets, you can $widget-&gt;getSubwidgets(), and each one of those will be a complete object with all properties and relations... and so on. Doctrine handles all db connection, input sanitization, and data validation. If you take your entity files, put them on a different computer/server, doctrine will generate all the SQL statements to rebuild the database schema, complete with tables, columns, indexes, and foreign relations. If you update an entity file, doctrine will analyze the entity and your database, figure out what's different and generate the SQL to alter your table. This makes it really easy to sync database changes with fellow developers, or replicate your setup elsewhere. It's a thing of beauty. Once you learn the benefits, you stop trying to feel like a big man by writing SQL. You begin to be able to crank out features, products, and prototypes faster than ever, and more reliably.
I think Zend_Db_Table is a good starting point to sell someone on models. Once you have the libraries installed and ready to use, you can do things like: $usersTable = new Zend_Db_Table('Users'); $usersTable-&gt;update(array('firstname'=&gt;'Bob','lastname'=&gt;'Smith'), $userId); This kind of thing is so easy to do it's hard to argue against it. Sprinkle it around your code, and they'll be tempted to use it too. If they begin to embrace it, you can begin to build your own model files and take it from there.
I get that sometimes, too. I have a few that know me, they know how much I make. I'll be like "That's less than what I make, it's five times the commute, and it's a 3 month temporary job" -- Well you should interview for it anyway, it could be a great opportunity. Yup, those guys go to my junk mail, now. 
Been there done that. Not anymore. These days there are multitude of backend stores, many NoSQLs too; Redis FTW. I said it's a Vietnam, so this fight is not worth fighting. These days I tend to write less server side code, and more UI code in Javascript. Especially in web applications. Server code just dumps JSON structures, usually de-normalzed flat ones (to Backbone.js), and manages the updates. Be happy with your ORM.
Yes, don't insult me with your silly nonsense. I prefer the term wizard thank you very much.
just for future reference, PHP does not understand m-d-Y format. only m/d/Y. So in this case you would have to do this... strtotime(str_replace('-', '/', $date)); learned this the hard way.
My project manager's coding knowledge is straight out of 2004. But of course this doesn't stop him from thinking he knows programming like we do. Every time I look at his code, I want to cry a little inside. He literally has 3000+ line pages with 4 or 5 includes each and functions called showheader and showfooter that are nothing but print statements. It's a nightmare.
A really, really old site that my boss wrote is like this, but he actually took it upon himself to have the PHP edit all 100+ HTML files every time you click "update" in the admin panel. 
Personally, I use Eclipse to manage big projects and to synch files via svn, but for actual editing its too heavy. I found [Sublime Text 2](http://www.sublimetext.com/2), customized it a little and now I use it for all kinds of documents. It has great syntax detection and utility in making various kinds of operations. Check it out.
Heh, I was in a very similar situation. I drew up a re-factoring proposal, they shot it down. So I quit.
[Are you a wizard?](http://angrywhitedude.com/wp-content/uploads2/2010/05/are-you-wizard.jpg)
Isn't "php" and "quality"mutually exclusive?
That's pretty dang funny.
&gt; One is my database singleton class, which is in Database.php This should probably be called Connection and live in Connection.php. Then you have \Database\Connection which is much more logical. And again for Page, you probably want that in namespace called Template or Layout. So it's Template/Page rather than Page/Page. You just need to think outside the box a bit with your namespace and class names and the problem more or less disappears. 
&gt; \Database\Connection That... makes a LOT more sense.
A few years ago, I'd just about gotten my CS degree, but I didn't really have much real-world programming experience. A friend of mine recommended CodeIgniter, and I started using that instead of tweaking an existing CMS for new projects. CodeIgniter is all basic MVC, and it made sense to me - URLs mapped to methods in the controller that directed traffic to models for manipulating the database, processing data, anything else that wasn't strictly presentational. Views were where the HTML went. This makes sense in my head. Dividing things like this made it very easy for me to figure out what's doing what - if I needed to change something, I'd find the appropriate controller method, and go either to the method the model calls or the views being displayed in that method. The structure just made it easier to program, easier to comprehend everything that was going on. It makes a lot of sense to me, just because I've happened to end up in an MVC framework, but I can't verbalize why a good organizational scheme makes sense.
That's legal?
God dammit! Lesser GPL for the lose ;/ Please consider Creative Commons, BSDL, Apache, PHP License, Qt License, hell... anything other than a virus license.
SOAP isn't great for PHP (shit libraries).
I'm with calmcamel. I've used many different ways of making web applications work with databases and I find the Active Record type approach you mention ($user-&gt;setEmail('email'); $widgets = $container-&gt;getWidgets()), is my preferred way to work with data in my applications. I keep all of my SQL code inside model classes (and even then most of them are very bare since the bulk of the code is inherited from the abstract parent). The resulting business code that works with model objects ends up being very nice and clean and, of course, entirely decoupled from the data layer. If I change my storage from MySQL to, say, an excel spreadsheet (grimace), the application doesn't need to know the difference. Just gotta fix up the model classes accordingly.
I've got two programmer coworkers: The aforementioned tech lead, and a programmer who is a month and a half less new than I and has a rapport with the tech lead but hadn't said anything to him about doing things differently for the same reasons I had - he's been new. However, I've shown him some of the stuff I'm doing with models and ORM and all that, and he seemed pretty impressed at how easy it all was. Yesterday, the two of them were talking about something - I wasn't paying attention - but then #2 asked me to explain to the tech lead the benefits of models. So I was kind of on the spot, trying to 'sell' it to him - he was arguing that moving code to models from the views requires him to have more files open, I argued for code reusability, he said that he can write a function in a common file for reusability, and we kind of went around in circles and I didn't make a very good argument. Perhaps I'm experiencing a little shock because I'm moving from a big structured web development company to a do-what-works startup. I'll keep doing what I'm doing, and hopefully as my stuff starts getting integrated with the rest of the site it'll be easier for him to come around - but five years ago, I coded a lot of shitty websites with tables, stubbornly refusing to learn how to float a div, and I don't want to miss my window this time around. I think that's why I'm tempted to 'turn the current project upside down,' but it makes more sense to move incrementally and stealthily. I'll just have to muster up the presentational skills/confidence in my own work to be able to call him over and say "hey, take a look at this thing I did, isn't it cool."
"you said it worked!" "It did, you saw it!" "FIX IT" "Already did..." ... the fear sets in again.
I don't know. Probably (though it was years ago) . They can basically do just about anything they want as long as it isn't discriminatory or violate OSHA which leaves a lot of latitude for manipulating/controlling their employees. 
Indeed, if PHP is your first introduction to namespaces, datetime classes, and late static binding, you are an unfortunate soul.
I went with lesser so that it could be included into whatever without repurcussions, commercial or otherwise.
Nusoap has worked *okay* for me but that's about as far as I'd say.
New BSD!
I would not meet your requirements, even though I've been working as a professional developer for about 10 years now. I don't have a college degree but still I'm working as a developer and teacher for the most respected university in my country. When you're hiring a developer the experience weights much more than the education (in my experience), especially if the developer comes from an academic university and therefor hasn't learned how to do things practically. I can learn anything related to programming, system administration, etc. in a flash (I've also worked as a sysadmin for FreeBSD and linux servers). Your requirements are too narrow minded. I'm working 3 jobs now and have to deny others since I'm too busy because I've got a great track record. I would never waste my time applying for a job at your company if I would be sure that my boss would be as narrow minded as you seem to be considering your requirements. I'm not meaning this in an insult, I'm just trying to give you some feedback. Edit: Forgot to mention that I'm always experiencing with new technology in my spare time, even though I've got 3 jobs (2 part time, 1 full time) and a family to take care of.
This is exactly how I eventually got the feel for functions. Keep doing it and eventually, you'll be writing something for the first time and think "Hey... this would be a lot easier if I shoved this into a function." And it will be. Just keep going back and improving your old code, or you won't learn anything.
They often need to edit your resume to remove your contact details so that they don't get cut out of the loop/commission. 
I spoke with a potential client just the other day who basically asked me to drop my rate because the work was in PHP. My response was that the rate was for my experience and expertise, not the technology being used. Needless to say, that's one contract I didn't get, but this post, and your post, reminded me of it.
If you have APC installed (as you should), the server will only parse the script once. So even if you wrote something that took a few milliseconds longer to parse, it will have absolutely no effect on page load speeds after the first time. PHP ain't the old scripting language anymore.
I can't recommend SES highly enough as long as you're truthful in saying that these are *not* going to be considered spam. Amazon easily has the infrastructure to handle millions of messages a day (lots of room for growth). You won't be able to send half a million right off the bat, but if you spend a month or two sending up to your limit (and send quality messages) it will quickly increase. You can construct your messages however you'd like (you're probably correct in assuming a generalized framework will be noticeably slower than a purpose-built application run over a half million messages) and then just pass them off to the Amazon API. SES will cost you $0.10/1000 messages and about $0.12/GB of bandwidth (although you don't pay that if you send from EC2 - so you may find it cheaper to spin up an EC2 instance for an hour a day to send the messages out). Assuming 250kB messages, a half million would cost you about $64. For that price, though, you get a much better chance at delivery given that few servers will have blacklisted, or be willing to blacklist Amazon's IPs. I'm guessing if you have a half a million users then a couple thousand dollars a month wouldn't be a big hit.
Yeah, it's really missing a lot of functionality that would make it truly useful (some of it outlined in the [article that nemeth88 posted](http://html5.litten.com/html5-keygen-element-and-internet-explorer/)).
&gt; I simply don't think it would be worth my time to spend so long just to make it slightly more secure for advanced users. Correct! Just keep in mind that it only takes one person to crack it, and it's all over. I haven't tried since... I guess .NET 2.0, but it was really trivial to decompile a released application and remove the license check.
Could always track your hours 'per-feature' or something of the sort, and only invoice them when the feature is complete.
The company I used to work for provided a quote and billed them exactly what was on the quote. If you asked for another dozen hours of extras or were generally a pain in the ass and we went way over on time they still generally billed you exactly what was on the quote as long as we were still actively working on the project. The company wasn't exactly... successful. This model, but with proper billing (if you ask for more features, you get billed for more features!) would probably work fine as long as you can estimate reasonably accurately. Which doesn't sound too hard until you start getting questions like "How many hours will it take to fix this site that doesn't work?". Every time my boss got a request for something like this I had to explain again that I had no idea and could in no way reasonably estimate this. I could open the code and find the issue immediately, fixing it in five minutes. I could open it and spend a day finding the problem and another day fixing it. In one case, I opened it up only to find that the actual code had *never been written*, the software was just a bunch of forms that did nothing. I eventually just brought a set of D&amp;D dice into work and started either just rolling some dice or simply always answering "six weeks" whenever the owner walked back to ask me how long one of these things would take. He still didn't get it. Gah. I now co-own and operate my own company. For new projects, large updates, new clients, or if a client specifically requests it, we'll provide a quote but specifically state on it that it is non-binding and explain in friendly language that we've estimated it to the best of our knowledge and ability, but unforeseen complications, changes to the scope or nature of the project, etc. could cause it to change, but that we will contact the client immediately as soon as we suspect it's going to be significantly outside of the quote. We're typically pretty good at estimating this stuff, so the client usually already knows if they're going to go over because they've been asking for a bunch of changes or additional work. We do occasionally end up under and charge them less than the quote. We then actually invoice them for our actual time spent, charged hourly at a rate depending on the type of work (HTML/CSS is billed lower than JavaScript/PHP). Our rates are currently standard rate for this market even though we typically finish our projects in a half to a third the time that any other company quotes. We're relying on this to help build some word-of-mouth sales right now, and will then probably continue this billing model just with a higher hourly rate. (Last project that came through was quoted $6.5k from another company at a lower hourly rate. We completed it for $2.2k, and having seen the other company's work, did a much better job. Still billed an hourly rate that would make a doctor blush.) As for you - You could always explain to the client that in order to cover your ass against unexpected complications and compensate you for your time doing up all the necessary scope documents for features, you will have to add a 30% overhead to all of your estimates, meaning that even if you manage to estimate everything perfectly their costs are going to increase 30%. Give them the option of accepting what is essentially a 30% raise for knowing what it will cost beforehand, or continuing to pay you as is. And in case you're not familiar with what I mean when I say 'scope document'... If you're going to bill based on your quote/estimate, you absolutely **must** do up a document beforehand explaining *exactly* what the feature will encompass. If you don't and simply say "$2000 for feature X" you have no recourse should they decide to change the project part way through, significantly increase the functionality of feature X, etc. An example: &gt; Contact Form: The contact form will be a single form added to the existing "Contact Information" page consisting of four fields: Name, E-Mail, Phone Number and Comments. The form will be added with minimal to no visual styling. No fields will exhibit any special functionality beyond that of the default form elements. Upon submission, the form will be sent as plain text message via the default PHP `mail` function to an address of the client's choosing. No form validation besides ensuring the fields have a value (any value) will be done. This covers your ass should they decide that they actually want a 30-question, 4-step wizard of a questionnaire added to their contact form, or a captcha, or their server doesn't properly support `mail`, or they decide they *really* want that one text box to go through the colours of the rainbow as text is entered because it fits their corporate branding , or they want validation e-mails sent to the user before delivery to the company, or whatever other nonsense they can come up with. This is why you build some overhead in to spend time writing these. Otherwise you're going to end up doing a *lot* of free work.
Is it just blocking requests for headers? Does `file_get_contents($url)` succeed? Several hosting services (and, potentially your client) block outgoing connections from their web servers to prevent it being used to propagate malware (like some of those annoying OSCommerce/phpBB worms). See if they can whitelist whatever server you're trying to connect to if it's consistent.
Get any Kohana contributor, and ask them if SQL is supposed to be in views. Guess what their answer will be. That approach is pretty objectively wrong. (the following is uncited, choose to treat it as opinion if you wish) After a lot of experience, the general community has found that the only part of MVC that should be able to get 'fat' is models. Neither views, nor controllers, should be. They should both be on a diet at all times.
I dont't have any advice, but it sounds like a very interesting read. I'm not often confronted with projects that get too big, but if I am I feel very lost. I also don't think I would mind paying for it, it would be nice to get for my kindle. Best of luck!
In this case the login details are a token, so store the token. ...
What expertise level are you aiming this at? I'm by far and away a novice with PHP (it's more of a hobby), but would be interested in understanding the difference between small scale web apps and the type you're talking about. The knowledge you've already inferred that goes into such a system is alien to me, and I'd consider myself capable of hacking together a not too shabby PHP app. So I suppose, what I'd like to see (and would indeed pay for) is a book aimed at a novice/intermediate PHP programmer that explains the concepts, paradigms and language differences that differ from a small scale app to make it scalable to the levels you're talking. I imagine there are PHP experts that would want the same book written in more advanced/technical prose, to tweak their own efficiency and best-practices, but I'd imagine this is a much smaller community than us little guys looking to the top of the tree for what we need for advanced careers in the field.
http://www.youtube.com/watch?v=iCUV3iv9xOs&amp;feature=list_related&amp;playnext=1&amp;list=SP442FA2C127377F07 Followed by http://www.amazon.com/dp/143022925X/ When you're beginning in PHP, remember that the code that you write at first will be almost surely very insecure in some way or another. Now no-one is perfect at security, but just keep this in the back of your mind while you're learning :)
To be honest I picked up the basics from http://www.tizag.com/phpT/ years ago, then kept undertaking mini-projects to improve my learning in different areas. Write as much of your own code as possible then review what others have written to achieve the same objective - you'll quickly see where their approach is better, and you'll naturally improve.
Did you complete the [Quick Start](http://framework.zend.com/manual/en/learning.quickstart.html) tutorial? That should give you a basic idea of how a typical ZF application fits together. From there, it's a matter reading up on other Zend libraries as and when you need them.
From such a dev-to-dev book (not "introduction to" kind of a book) I would expect more "We had a problem like...We used ... tools to detect the cause. We tried ... and ... worked because. ". So I would expect the book to be problem oriented.
Very good question. It's a subject of much debate with some of my former colleagues/friends, but the overall feedback was very similar to what you are asking for, as in writing for junior/intermediate developer and bringing them to a higher level. In one of the chapter draft i tried to have Tips boxes with more advanced concept (ways to compile PHP, etc, ...) or other book references that talk about the specific subject (for example i have little interest in writing a full chapter on MySQL optimization as there are books dedicated to the subject, good ones). I'll see which approach makes the most sense. But so far i am leaning toward junior/intermediate, or senior with no experience in scaling a web app/site.
A chapter on all the ways you can think of that someone can stuff up. Don't get me wrong, I love PHP as well, but it just gives you so many options in this regard! &gt; i know enough not to screw up ^^ basically this knowledge. Even if this didn't come out as a good chapter, I bet the list you got would give you some good ideas for other chapters or notes to make in existing ones.
Depending on the total number of rows in your table you could just load the entire data set into an array then sort it in PHP directly. This is probably what I would do. You could also take a look at nested sets - a way of structuring tree data in a database so that you can read a full tree without multiple queries, adding new items is slightly more complex though. 
If you really want to do it in a query, instead of just looping through everything in code, then: SELECT t1.id, (SELECT GROUP_CONCAT(t2.id) FROM table AS t2 WHERE t2.refid = t1.id) FROM table AS t1; 
Cool. I used to work at everyone's favorite online ticketing company which had its interesting on-sale traffic. Granted the main stuff didn't run PHP but Perl :/. One thing I think you should include is Multi-cluster / multi-data center development if possible. When you have to span 2 data-centers you run into different challenges, such as how you approach session handling. I would envision starting out with background on PHP High traffic architecture and challenges people could face. Then choose perhaps an example based from experience, and try to solve a problem with each chapter. Thus by the end of the book you would have re-created the high traffic architecture, and people can use a quick reference possibly. So maybe bottom up approach start like PHP configs -&gt; Op caching -&gt; Database setup -&gt; Web Server -&gt; proxy etc. Also I think a chapter to include deployment. Tools, tips, tricks on rolling out to multiple servers etc, and fallback if something goes wrong. This may not be so much as actual optimization for high traffic, but understanding a good deployment strategy is important since if you are having that kind of traffic, cost of downtime (bugs in release) is amplified. 
I would buy that, keep it up Mr Pornhub ex lead developer man!
Sounds like the term you're looking for is "Case Studies"
I just finished building architecture that is intended to handle upwards of 50,000 - 500,000 users per day. I would definitely buy this book to corroborate some of my own findings and things that i learned throughout the process. All i can say is to make it fun, make it interesting, use plenty of case studies, and keep us updated on your progress!! PS do you have a blog somewhere or some way to follow your progress?
A tech lead who puts SQL in views, that's reassuring. I'd just tell the OM how wrong he is.
nginx and proper configuration php 5.3 with php-fpm and APC database and/or caching layer of choice (percona and redis ftw) everything here: http://developer.yahoo.com/performance/rules.html 
I think that siloing is one of the more interesting, helpful and unknown aspects of steps take to address huge scale. (Speaking from having several years experience with a large scale web property photobucket.com)
i'd pay money for such a book. concise knowledge doesn't grow on trees, after all. - keeping multiple backend servers in order.. I mean heck, you could write a whole book on "Deployment", but maybe for the topic at-hand, just a few pages listing some traps/pitfalls/etc could be useful. - DB replication - an appendix on setting up a multiple-server environment on one PC using virtualbox - definitely caching from a macro view, i'd say just treat it like this: - front- &amp; back-end setups, overview. (focus on top ~5 setups found out in the wild) - a couple chapters of case-studies, implementing 1 or 2 of those from ground-up - deploying, assessing, tuning, &amp; maintenance in prod environment - troubleshooting, saving the day, &amp; maintaining personal sanity. - examples, examples, examples, especially anything that you don't have to write yourself :). There's tons of great guides &amp; articles out there, but they're all over the place. - an appendix of your own reference materials you've collected over the years, things/reference sites/methods that help you get the job done, especially when the going gets rough. good luck with it, and best wishes! (*edited for formatting)
RE: Distribution - mind that you will probably earn more money with this niche product by selling it online for a low price (i.e. 2 to 5 bucks) then trying to get it to a "real" publisher, where you will probably get cents per book sold. Kindle etc. should be your friends there.
The business case is the **only** way to sell these things usually. At one stage in a project, we had to make a fundamental change to the spec, which meant that basically every call to the database had to be rewritten to include new conditions. Up until then, we'd been using Models as simply named ORM instances and doing the where() etc in controllers. I wasted days going through every call re-writing it for the new change. Using a fat-model-thin-controller pattern fixes this problem almost completely. Need to change your find_by_id logic? Do it once. 5 minute job, not days tracking down that elusive bugger you missed. Not using Models **will** waste developer resource when an 11th hour change occurs. Kohana is meant to be DRY. Not using Models (or controllers, views, helpers et al) properly is pissing all over that philosophy and making it decidedly damp.
Your bottleneck here will most likely be the mail-sending process, not your CLI. So using a framework is not an issue at all. But honnestly, using a specialized service (Mail Chimp or others) will save you much time and much trouble. Moreover, it doesn't cost much money nowadays.
What would be great is the evolution of a setup - what steps were taken in tackling specific problems and issues - why you decided to use some of the tech you have. I'm also in the same arena and have thought of writing a book or at least putting everything in the same place - I was also going to touch on the use of load-balanced virtual servers in place of decided servers (for serving up the application side), and where/why it's better to use nginx over apache. I was also going to have a section on a quick intro to writing C extensions to PHP for some of the more intensive tasks
That's exactly the sort of thing I wanted to say, but couldn't verbalize. Thank you.
I feel like a book of this nature should be mostly case-studies
You're very welcome :) Good luck bringing about change, and even if you can't do it in your current job, stick to your guns in any freelance / personal projects you're doing; you are doing it right.
Senior PHP, $60/hr permanent contractor for a large corporation in Houston, TX. Comes out to ~$125,000/yr. Definitely Top 0.5% of the payscale here (esp. since the cost of living is dirt cheap and there is no state income tax).
I see numerous problems with this posting: 1. No payrate is given. I usually won't even bother with postings that don't list 6 figures as the maximum range, because why would i want to take a huge pay cut for the same or worse job? 2. There's no way in hell I'd move to Pennsylvania. Is this a telecomuting position? Will you let me work anywhere in the Americas? Because, if so, I'd actually work for *less*. Yes. I'd work for up to 20% less to be able to telecomute 100%. 3. You state you're looking for someone with "up to 5 years" experience. I started with PHP when it was at v2, so I have 15 years experience now. Your stating of 5 years makes me feel like you do not appreciate serious talent (and are therefore unlikely to offer good working conditions (with sane SDLCs, QA people, BAs, sane PMs, etc.) 4. How many of those terms do you know? I see no mention of it in the report. Would I have to try to do QA testing and BA work on my own? 5. What is your SDLC? Do you not have one? ouch. Is it total waterfall or some other monstrousity like RUP that will sour my day with endless unproductive meetings? Yeah. Answer those questions, please.
I originally wrote the code to query the database multiple times --.. I used the group concat method but I am fearful for the big O that I had going on. My hope is to grab the entire dataset and loop through it in memory, but how?! What is most efficient?
Your boss is obviously your junior, as far as craftsmanship goes. You should build your own project on your spare time that will make enough money to get out of the 9-5 rat race. Or bounce around jobs until you either become lead or work in a more structured place. Right now, you're trying to swim upstream.
I'm probably gonna start thinking of getting my green card and moving there...
Architect level in Montreal, Canada. 70k
The quickstart is where I started but it can be challenging at first. There a site called zendcasts with video tutorials on Zend which can also useful.
Probably the best book I've read on this matter is [PHP 5 Objects, Patterns, and Practice](http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804). It will bring you through the basics of OOP in PHP all the way to the advanced goodies found in patterns and practices. Many of the patterns found in the book are cornerstones for the plethora of MVC frameworks out there and I feel that anyone who has a good understanding of the material in this book will be just fine out there in the real OOP world. Also, checkout out [this really good aggregate](http://freelance-php.blogspot.com/2011/06/massive-list-of-php-articles.html) of a bunch of web development (mainly PHP) topics and articles.
This. I spent a lot of time trying to code to security standards that I didn't understand at the time during my first adventures in PHP. Just write! If you find yourself doing something wrong, there is always time to learn different approaches and research implementations. But you can't find out what you need to improve on without making the mistakes in the first place! 
well I figured it out but it is ugly as hell... If someone has a better way, please pipe up... public function isAssigned($site) { //return ($this-&gt;isMemberOf($this-&gt;sites, $site)); $returnVal = false; $isAssignedTable = $this-&gt;database-&gt;prepare($this::getLocationTable); $isAssignedTable-&gt;bindParam(":orgID", $this-&gt;organizationID, PDO::PARAM_INT); $isAssignedTable-&gt;execute(); $table = $isAssignedTable-&gt;fetchAll(); $childArray; $children[] = 1; $this-&gt;getChildren($table, $childArray, 1, $children); foreach ($childArray as &amp;$childElem) { $childElem = substr($childElem, 0, -1); } unset($childElem); print_r($childArray); } public function getChildren(&amp;$table, &amp;$childArray, $node, $children) { $childArray[$node] = $node .','; foreach ($table as $tableRow) { if ($tableRow['refID'] == $node) { foreach ($children as $childElem) { $childArray[$childElem] .= $tableRow['ID'] .','; } $childrenCall = $children; $childrenCall[] = $tableRow['ID']; $this-&gt;getChildren($table, $childArray, $tableRow['ID'], $childrenCall); } } }
Wouldn't that just provide one level down? This is an m-ary tree with a variable number of layers.
Alternatively a 'pay what you want' scheme could work wonders I'd probably put in a good £5-10, maybe more depending on the contents Im sure most users would put in atleast a few quid, with the occasional user downloading it for free.
You just blew my mind with nested sets... My only concern would be in the updating of the table... Seems like data could become corrupted quite easily... I think I will just stick with my current method, but thank you so much for introducing the concept to me. Have you used nested sets in production?
If you're writing a book, you might need to know the difference between 'insure' and 'ensure'.
Yes but hopefully not the single case kind like "How to build a blog with PHP" . This is a man with much experience (many cases) and I would very much like it if he share it with us because I'm fed up of books just copy+past the php reference...
Thanks for clearing that up, English is not my first language, and i still do some mistakes from time to time... And anyhow i'll have everything checked by some native speakers.
Haha, well, if you're leaning that way then keep us informed. As I say I'd definitely buy a book on this, even if I never directly use the knowledge it'll help me understand colleagues who have relevant projects.
Definitely mention the use of a CDN for images, css, ect.. and also for video streaming/downloading. Adding the content of brazzers to the cdn helped a lot of countries who had terrible download speeds. For sure proper caching techniques. Like what to cache, how to cache it, how long to cache it based on the use case. Varnish cache is something i use now for front page caching. Also another great subject would be backups. With sites that have extremely high volume and/or content, how to do proper backup of data/content. Security is another large concern that I learnt the hard way. Properly checking everything that comes from the user, like querystrings, image uploads, escaping all values going into queries. You can also show the difference between certain use cases for low traffic vs high traffic. For example, in a low traffic site you can solve this problem like this, but in a high traffic site the complexity rises and you have to solve the problem in a much more complex way. Oh also, you can talk about analyzing your code and re-factoring. For example, suppose you have an algorithm with a runtime of O(n^3) but you can rewrite the algorithm to speed it up to O(nlogn) or O(n) by using a little more memory. Bah, i could talk forever about this subject. Well good luck Pornhub_dev! Remember to mention the awesome guy who hired you back in 2007 or 2008 ;)
With twig and smarty you can configure the caching in a way that you can cache the pregenerated templates for sections of the page at a time, letting you only render the header/footer section while grabbing the static content area.
You really really shouldn't be running either of those versions. Edit: Why downvotes? There are many security issues in both of those versions. 5.2.4 was released in August 2007 5.2.10 in June 2009. That's over two years old. I mean, if you want to make it even more trivial to get yourself owned, I'm not going to waste effort trying to stop you, but if your're dealing with any client data on those systems, running PHP that old is just negligent.
What's the reason for these two versions? Why not go with 5.3.8 instead? Even if you want to stay on 5.2, you should really stay up to date on security/bugfix releases, which means 5.2.17.
i don't think you can gain performance by adding a another layer of abstraction like a templating engine. there are some good points here: http://stackoverflow.com/questions/1920999/performance-increase-using-smarty-caching
I have had pretty good luck with Memcached, but I mainly use it to catch commonly used DB result sets, not the full page.
Why not go with a mini chapter discussing how/why to use each of those mentioned above? Also, I'm curious; why not nginx? Which mpm did you use for Apache? I had to use mpm_worker for a site, but it still needed a load balancer and at least 3 servers. Regarding selling it, you could distribute it for cheap with Amazon or similar.
I've been through this a hundred times before. Depending on how your system is built, what kind of traffic you get, and the type of content being cached can all weigh in greatly on this. For *most* sites though I think it is safe to say that selective template caching provides more benefit than it does harm. I'm the developer for a web design/hosting company with a centralized framework with ~3k domains; converting all of their code from inline PHP to Twig has both sped up the time taken to deliver pages and lowered the overall cpu, memory, and disk use. The fact that you get caching along with making development easier makes the deal all the nicer in my opinion. Yes, caching systems add another layer of complexity. That extra complexity *can* be used to deliver better performance when done correctly though.
Good point on the IP addresses, esp. since this is geared towards university students. Not too worried about fraud, so I may do the cookie solution. I think I'll do this until it becomes a problem. I like your 3 col solution, but I'm still resistant to creating my own user system b/c I want as few barriers to participation as possible--at least until I can get some participation going. Another possibility is using the Disqus API to allow a user to login through already existing accounts on other websites and then use that username or email to record the identity on the 3 col solution. So now I need assistance with the Disqus API. *Submits another self post.*
You mentioned caching with Redis, which is an interesting way to do it. But what about caching pages with Smarty? Most large sites are probably already using Smarty (or some template system), and the built-in page caching features are really very good. It can even cache static portions of pages while letting other parts change dynamically. Only generating page content once and then caching it is really key to taking most of the load off of the database and server. Once that's done, browser-side caching is great for taking additional load off the servers and speeding up the site in general. I always make sure I set "Cache-Control: public, must-revalidate, max-age=" headers for all pages and other content whenever possible so the browser doesn't re-load content multiple times unnecessarily. EDIT: I have no idea why this comment is currently at -1, but both server-side page caching and browser-side cache headers are very important for making PHP sites as fast as possible. If whoever downvoted this comment has a different opinion, please share it.
Different caching, Redis is for data caching (but mostly fast data access, manipulating lists/sorted set of with millions of entry in a close to irrelevant time - depending on what you do), for front-end caching : Varnish is your savior (true story).
Instead of saying "I don't have this knowledge, all I need is ____" why not become literate with what's involved with "connecting with APIs" ? 
Senior, California (southern) 90K
I completely agree, and while I'm typically a good googler, I've not found much in the way of general API tutorials. If you know of any out there, I'd love to hear your suggestions. Or do I just need to get a book?
Were using a custom view manager, no smarty or twig so thats off the table sadly.
Yeah thats the goal I think were going for, were not too worried about the logic part of the code, its not much so I think were just going to try and cache the db sets.
DB and filesystem are usually the bottleneck of a site. If you can cache everything you need and keep it in memory then you should notice a significant improvement in speed. 
In particular, you're probably looking for something that supports T-SQL (Transact SQL). I have no suggestions to that end, but you might do some searching using that term, rather than "MSSQL Server".
Thanks ill have a look into redis!
How familiar are you with frameworks? Is this your first attempt? Personally, I'd recommend avoiding Zend. It's kind of outdated. It's pretty complicated to learn, and then you find out that those aren't even the best practices anymore. There's Zend 2.0, which will be more worthwhile, but it hasn't been released yet. And when it is, it'll still be a while before the community/documentation picks up. I'd recommend learning Symfony2. It's a much more up-to-date framework with better practices and patterns, based on PHP 5.3. Much easier to learn too. That being said, i found that the best way of learning Zend is to learn the individual components. Zend was designed to be a set of standalone components. If you try to "learn Zend", you'll probably be overwhelmed by its complexity. Hold off on using it as an MVC framework at first. If you look in the library/Zend folder, you'll see lots of folders in there. Each one is a component that you can learn individually. The majority of those, you won't care about. I recommend learning a few of the important ones like Zend_Db, Zend_Auth, Zend_Form, and Zend_Config. Learn to use an autoloader to load the classes. Learn to look up those classes in the Zend documentation. You don't have to become an expert on them. Just become comfortable with recognizing what the standalone components are and how to look them up in the documentation. Once you do this, Zend suddenly becomes a lot less scary. Once you have that down, you can begin to use Zend as an MVC stack and you'll be ok.
Hey! Didn't know you were a redditor! Pretty much what i had in mind when i started thinking about it. It's a lot of stuff, but i think it's worth my time to organize this, and i have more than enough Case Studies for all the areas. 
Well each of those will be covered in their respective parts (Caching: Memcached, Redis, why moving away from Memcached to Redis etc). As for Nginx, it is a very nice alternative indeed, but a properly setup Apache+PHP is not that slower, plus Apache knowledge is much more common when it comes to PHP. Some people tend to forget to account for the human aspect, technology Y or X might be nice and shit, but if nobody as a decent enough knowledge, banking too much on it might be a bit suicidal.
"Don't send code that lacks convention (are you using both camelCase for some variables and under_scores in another?, what about braces? do you use a familiar brace convention such as knf or allman?)" ThisIsCamelCase and thisIsMixedCase. CamelCase &lt;-- Doesn't it look like a camel? o0
I thought about the writing extensions part myself, but i think it is too much stuff to cover. I'll probably put some reference (there is only one -decent- book anyway on the subject : [Extending and Embedding PHP](http://www.amazon.com/Extending-Embedding-PHP-Sara-Golemon/dp/067232704X) ), there is a couple articles on Zend.com that do a nice job on this specific subject.
Probably through [Twitter](https://twitter.com/#!/MichelBartz). 
Definitely in my targets (multi-cluster/data-center). The way i was seeing it, was to set a "stage" - a fake website- that through the book grows traffic and faces new challenges, allowing me to introduce new stuff, as well as keeping the reader in the same frame.
Thanks, very useful. &gt;maintaining personal sanity Very good point. I failed at that one, and i think i want to share that, i don't want anybody falling in the same traps i did...
It's a matter of reading, and reading, and reading, until you grok it. I'm sorry, but I'm not going to be coaxed to do the exact same thing you could do. I'm not sure if discus would programatically provide usernames for you, since their comments are separate from your site.
Very good point and i intended on doing so. I'll have to contact my former employer to see if i have the right to use names and concrete example. If not i'll create ones (set from real ones), as long as the ideas stay the same.
Just start banging it out. From your credentials, you are the 1% of [/r/PHP](/r/PHP) readers and we should be listening to you instead of the other way around. Be sure to post here when it's out! :)
Yes and no, some areas are obvious to cover, but then i want to make sure i also address some real needs, as i am not writing the book for me (-ok maybe a bit-), but for the users.
There is other data you can get from a user's browser to identify them, such as their User Agent. For logging for different polls, have a table of polls, and a table of votes. The votes table has (for example) fields for IP, UA string, vote metric, poll id. If you like the cookies option, flash cookies are often more persistent.
in 2004.
Digital will be my first target as it exempt me from finding a publisher, and if it's successful it might attract one (better deal), but i'm getting ahead of myself, months of work ahead :]
&gt; I don't think you can gain performance by adding a another layer of abstraction like a templating engine. Generic statement, and completely untrue. They wouldn't have been invented and kept being reinvented if this wasn't possible.
Varnish and other caches such as Squid are only useful when you have a site which is mostly static on the front-end. If your website is mostly a blind(consumer side) API based Content Management System(back-end-administration) with many users on it, using a URI based cache is dangerous as large portions of the site might be configurable via session storage. Just my 2 cents.
Likewise. UK Dev here, my salary is closer to 10% of the_gil's...
In the vast majority of sites, if there was improvement, it would be unnoticeable.
Yes, and this is why i feel the need to write about it, because no way i can cover the subject in one reply, i was mostly making a generalization... If you have a highly dynamic website, the problem becomes way trickier, but also more interesting. 
This is satire, right?
Yep,I have that book. Good luck. personally, I think a case study style for this type of book would be good
Agreed. As your sites are more dynamic, you end up having instead to avoid bottle necks such as mysql and rely more on internal structure caching such as memcache / redis. In the end, the only people who can rely on varnish / squid are large Content driven websites such as NYTimes, Yahoo.com, itunes, etc since the face of their sites don't change much and to their users, the only thing that matters is their purchases, or comments which can be offloaded via services such as facebook comments / discus which dynamically insert into the DOM.
The back button generally wont trigger a refresh, so you'd just be seeing the old contents. 
Is there any way to fix this?
When you navigate, are you navigating from and to different directories?
Yes
I have once, and it worked out alright - I wrote a pretty solid class that handled all database bits for me. The main problem was when people who were unfamiliar with the code tried to work out what was going on, I worked with a number of junior developers who had a difficult time grasping the concept. In retrospect I wouldn't use them again unless it was really going to benefit the speed of the application. I don't work on anything that is very high end tho. My preferred way to handle tree type data is to load it into an array structure then cache the resulting data to the disk. If the tree is updated then I invalidate the cache. 
http://php.net/manual/en/function.setcookie.php Make sure you have the path set. If you're going to be using the cookie throughout the site, set it to "/".
You could try reading them from Javascript, but I'm not entirely sure if they're loaded at runtime or dynamically read: http://www.w3schools.com/js/js_cookies.asp
Thanks, but I originally thought that was the problem, so I already did that and it didn't fix it.
Javascript is able to read the cookie, but PHP still isn't.
So this probably isn't a bad idea (not that I'll follow through with it): The SysAdmin Co-op | Covering Each Other's Shit Since 2011
Read about what an API is, to start with. Use wikipedia, google, whatever. You'll find out they're extremely simple at their core. If you understand the underlying principle you might find it quite a bit less daunting. There is no rocket surgery going on Is it just that the disqus API documentation suggests using methods you're not familiar with? Are the URL's really confusing? Too many parameters to keep track of? Try explaining where you're stuck and we can suggest the right resources for learning.
Senior PHP Developer in Ontario, Canada making $54k a year (anyone want to offer me an upgrade, lmfao)
Ha no worries dude, I figured as much after seeing your AMA. It sounds like a great book. Definitely worth looking at big publishers like sitepoint, packt etc - as well as editing they'll help a huge amount with publicity.
You could use a recursive procedure call. That's the only think I can really think of in SQL.
Soadapop is right, 'PHP 5 Objects, Patterns, and Practice' is great. [PHP Object-Oriented Solutions](http://www.apress.com/9781430210115) by David Powers is also good. Instead of just talking about the concepts or using simplified example scripts to illustrate an idea, each chapter focuses on building a different, practical script that solves a specific problem. What I like best is that he discusses the reasoning and decisions behind the design of each script.
Mid-Level in Utah, USA. 60K-ish.
That is how I am doing it right now... Although my code is complete spaghetti right now... I'll work back through it later. Pasting here in case you are interested: public function isAssigned($site) { //return ($this-&gt;isMemberOf($this-&gt;sites, $site)); $miss = false; foreach ($this-&gt;sites as $individualSite) { $memcacheCheck = $this-&gt;memcache-&gt;get("location_".$this-&gt;organizationID."_".$individualSite); if ($memcacheCheck === false) { $miss = true; break; } else { if (in_array($site, explode(",",$memcacheCheck))) { return true; } } } if ($miss == false) { return false; } if ($miss == true) { $isAssignedTable = $this-&gt;database-&gt;prepare($this::getLocationTable); $isAssignedTable-&gt;bindParam(":orgID", $this-&gt;organizationID, PDO::PARAM_INT); $isAssignedTable-&gt;execute(); $table = $isAssignedTable-&gt;fetchAll(); $childArray; $children[] = 1; $this-&gt;getChildren($table, $childArray, 1, $children); foreach ($childArray as $key=&gt;&amp;$childElem) { $this-&gt;memcache-&gt;set("location_".$this-&gt;organizationID."_".$key, substr($childElem, 0, -1),0,86400); } unset($childElem); $this-&gt;isAssigned($site); } } public function getChildren(&amp;$table, &amp;$childArray, $node, $children) { $childArray[$node] = $node .','; foreach ($table as $tableRow) { if ($tableRow['refID'] == $node) { foreach ($children as $childElem) { $childArray[$childElem] .= $tableRow['ID'] .','; } $childrenCall = $children; $childrenCall[] = $tableRow['ID']; $this-&gt;getChildren($table, $childArray, $tableRow['ID'], $childrenCall); } } }
Show us the cookie setting code you are using.
In addition to what others have offered (redis, memcache, APC, CDN), you can also reap some pretty significant increases in load times and server performance by using something like nginx or lighttpd (my choice) instead of Apache.
Right, that's why Redis is useful for data caching, but Smarty takes it a step further by caching the actual page (or a portion of the page) so that the PHP code doesn't need to be executed again at all. It give you a whole different level of speed and efficiency. They're really used for different purposes. As someone else mentioned, something like Varnish is a different kind of solution that's only useful if the entire is always the same for a given URI. Smarty allows you to incorporate any values you want, including cookie values, and POST form values, that are then checked against the cache ID to see whether a new page needs to be generated. 
Why not just use the Smarty cache? Memcache and redis aren't really ideal for caching web pages (but are more appropriate for caching data when you want to avoid hitting the database). I also agree with what you said about the limitations of using a URI-based cache like Varnish or Squid which don't give you enough control when the content isn't entirely static (which is rarely the case).
There can be stability issues with nginx as well, particularly with php-fastcgi. It seems like alot of people like to push nginx as some magical way to speed things up, but it's really only noticeably faster at serving static content than apache. I've worked at large companies who backtracked off of nginx to go back to apache. also, apache mod_rewrite rules are nice, and alot of out of the box software doesn't write nginx ones.
http://webdesignfan.com/yslow-tutorial-part-1-of-3-reducing-file-size/ http://webdesignfan.com/yslow-tutorial-part-2-of-3-reducing-server-calls/ http://webdesignfan.com/yslow-tutorial-part-3-of-3-reducing-parse-time/
I'll put in a good vote for that book as well. [This](http://www.amazon.com/Zend-Framework-1-8-Application-Development/dp/1847194222/) is also a fantastic book if you're interested in learning a framework. I cannot stress how much I have learned from this book. It's a really good resource, and takes you much further than most other framework books I've read.
I don't know how reactive Ubuntu is, but Debian would backport the security patches pretty quickly. A PCI accreditation vendor I dealt with a while back would run automated scans on my machines and always complain about the PHP version being insecure, 5.2.6. Every time, I had to go check the Debian changelog and cross check the CVEs and sure enough, every critical issue was patched; then I had to link to or paste the changelog. Provided my packages were up to date, I was alright.
Not a fan of Smarty at all, or any template engine for that matter. But i do agree on fragment caching, it is a very important technique and really not that hard to implement. 
Recently I wrote a thin data caching library for work and my startup project. The reason I chose data caching instead of template caching is because for us it didn't work that well. We couldn't just go with fixed amount of time caching and needed a fairly easy way to invalidate that data. Maybe it works for you, but if not feel free to take inspiration from my library: https://github.com/mhitza/Volatile-Data-Store And the basic usage documentation http://mexperiments.info/project/volatile-data-store/example.html
I can't recommend you any books on design patterns; the only one I read was the GoF book; which is an overhyped book (in my opinion). That's the feel I get when talking about it with a bunch of developers. However I can advise you to read upon the G.R.A.S.P. and S.O.L.I.D. object oriented design principles and take a modern framework for code review (say symfony 2) where you'd try to match those principles in action; probably easier to understand them with practical applications.
after January, they're going to give you another deadline and another list of things that need to get done. They're not lying to you, they probably really do plan on letting you go back and "fix" things. It's just that when the time comes, they'll have pressures, and letting you go back and change working code won't relieve those pressures.
You can't make that judgment from seeing a one sided description.
Everything you've described can be done without models, so I'm unsure as to why you think this is a reason for going with the models approach.
That doesn't seem unlikely, but at least for the moment I'm being cautiously optimistic. I'm hoping I can move stealthily enough that we can start adopting better habits piece by piece.
Do you want a book that deals with just PHP, or OOP and design patterns in general?
Actually Memcached or Redis are pretty good for that too, better than any file based solution i've seen.
"better habits" is subjective. If that's the only reason for doing a thing, it isn't worth doing.
I just did this exact thing for a class project. You don't have to use cookies or or log the ip address. How you do it goes like this: 2. if the user upvotes or downvotes a topic, check your dbase to see if a row already exists for that user and topic. if numRows != 0. alter the table with the new vote (up or down), else, insert the new row for the user and topic.
Thnaks,. will look into it. sorry for formatting - im drunk, thankds agin upvote.
hmm never occured to me! thanks I will check into it!
Senior PHP dev &amp; Linux administrator doing short &amp; long term consulting work in Melbourne, Australia. $70-$90/hour =~ $130k
Erm - "I'd like to do it all without creating my own user/login system"
Don't forget, if you are using a file based cache, your files are actually already in memory anyways, atleast that is the way it works on a unix system. That is from the grape vine as i've heard in the past that unix file systems normally cache files in memory when they are small enough, so hosting files which are static will be every bit as fast as redis / memcache especially with an opt-code caching mechanism enabled such as APC. Anyways, using smarty to cache websites is really only good for content driven websites which don't change much. I'm currently using Smarty w/ Code Igniter and it works quite well in terms of making the code managable, probably should have used twig, but it gets the job done and it is extremely fast, anyone who claims smarty is slow obviously has not set their compile directory, which once done has render speeds well within 5-10ms which is totally acceptable to any website.
I think pay scale is all relative to where you are located and what the marginal rate is based on your skill set, experience, and how skilled you are at reading what your potential employer will pay you.
Interesting, the tests i ran gave a 5 to 10% edge to Memcached base fragment caching over Smarty, haven't really looked into TwiG, i guess this will be a good excuse (no matter how much i hate template engines). 
Hey jesse_dev, thanks for being so honest and frank with your feedback. It really helps to get more focussed on what I'm writing. I'll be spending a bit more time with the upcoming content that comes out. Are there topics that you'd be interested in writing about? Do you have a blog that I can subscribe to - would you like to submit some content?
Don't forget about xcache to store DB query results - it is very simple and yet we(where I work) use it to serve millions impressions a day.
Zend Framework would be that last place in the world where to learn about good programming practices. Hell , 2.x even has `global` keywords on the source.
Freelancer, Czech Republic. $30K. I suck at business :(
Ah, misread the question. Yeah, that would only give you the direct children.
I believe the top answer on this stackoverflow stated this as well, many upvotes on it: http://serverfault.com/questions/43383/caching-preloading-files-on-linux-into-ram
It's over hyped, but I still think any developer (past the initial learning stages) should give it a good read.
Besides what everyone mentioned, don't forget about the very powerful caching mechanics described as part of the HTTP spec.
An IP address is not a viable identification method for an individual client.
Never herd of it, will look into this too thanks! Lots of options to look into haha, appreciate it all.
Yeah we already take advantage of that :) looking for a bigger boost.
yep - just be sure not to use any caching mechanism directly in your code - abstract is some classes so you can change it as your needs grow and change over time. Because xcache is cool when you are running on a single server but when you go load-balanced you will definitely consider memcached or something elese. Sorry if this is obvious point but I would have much less trouble if the dev before me got it right years ago...
It's at -2 because Smarty is insane. It is an interpreted programming language compiled by an interpreted programming language that adds nothing at all. "Most large sites" use PHP for templating, because that's the sane performant thing to do. High performance websites use reverse proxies as static caches and in memory object stores like redis for data caches. (And APC, etc. for op-code caches). Smarty is a hangover from 2002 when PHP programmers didnt know how to separate display logic from any other kind of logic. Even mentioning it as a templating system is absurd, let alone suggest high performance websites should go anywhere near it. 
Everything I've described could be done with functions and non-oop code as well if you really wanted. A good coder could also make a procedural system easy and clear to use. But just because you can do something doesn't mean you should. I think it's more the fact that the framework has been designed to do things a certain way, and not doing it that way is making things harder than they need to be. I could hammer in a nail with a piece of birthday cake, but it's not the best way of doing it. Unless the cake was really stale.
well, if you're using a custom view manager, you might be able to write a wrapper around smarty or twig... however I can't be certain that will end up improving performance.
OK, be skeptical of my own opinions and methods, because they might not necessarily be right. Got it.
Zend perhaps isn't the best OO framework, but that book specifically is a very good book when talking about OOP. I'm not advocating Zend, I'm advocating that book.
Yep as UK developer I make a fraction of what people have posted. I could look on JobSite or something and the highest paid senior web dev jobs out there are often less than £50k. I guess people don't really want to pay web developers very much in England. 
 setcookie('foo_session', strip_tags($_POST['dsk']), time()+3600, '/');
Squid. It's a proxy cache. Request goes through squid before going through to your web server[s]. Could be quite useful to do quick caching of pages for dynamic data that doesn't need to be updated exactly at the right moment. http://www.squid-cache.org/
I can't tell if you're being sarcastic or not, but that certainly wasn't what I was trying to convey. If you don't have an actual, technical reason for doing something, then you're just doing it for the sake of doing it. Too many people fall into the rut of doing something for the sake of doing it, or rationalizing reasons for doing something that isn't necessary or required.
Except that isn't what you said originally, and it certainly wasn't what I responded to. If you're in a framework, don't fight it unless you have to, that's common sense. What I was responding to was the follow: &gt; Using a fat-model-thin-controller pattern fixes this problem almost completely. There is nothing inherent in a fat-model-thin-controller that fixes it, and there is nothing inherent in a non fat-model-thin-controller that causes it.
varnish is another similar proxy cache.
&gt; As a side question, why don't tutorials use a separate Class file for users and instead put the methods right on the main code itself? Most of those are quite old and their purpose is to show an example of login functionality and not OOP features of PHP
hiya, yea I'm sure I could've been a little more subtle with my comment. Caching is one subject I'm always interested in learning more about, with all php frameworks. I spend a lot of time learning outside of work, but I don't really write about what I learn. I've done a ton of ZendFramework, Magento, and Drupal, so I'm sure I could find things to write about. Right now, I'm focused on building an e-commerce system with Symfony2. I haven't released any code yet. I should be ready sometime in January. I'm fairly busy with everything I have going on, so I'm not sure about spending time blogging. The php 5.3 frameworks seem to be getting really popular. With v5.4 coming out, it will be changing the game further. I'm sure we'll be seeing heavy use of traits.
At the end of the day, all user authentication tutorials will be pretty much the same: 1. Submitting info 2. Compare u&amp;p to those stored in a database, hopefully encrypted 3. How to handle the view based on whether or not the details are accurate. 4. Setting cookies/sessions if all checks out. http://phpsense.com/2006/php-login-script/ Pretty old school but covers the basics. If you're learning OO PHP with, say, CodeIgniter, have a look through Tank Auth (http://www.konyukhov.com/soft/tank_auth/) and it's various tutorials to learn more. 
It's all good. As you can see by the original post, I suck at formatting and it's a wonder that anyone can understand what I am trying to get at. Much thanks for helping!
This, but don't escape it, just use msqli with binding.
&gt;So, I'm working with code that isn't my own... Is the code on the next page unsetting the cookie in any way? 
It's possible to make websites that have the PHP code mixed in with the HTML code, but there are numerous reasons why a template system offers major advantages. - Separation of web design from the PHP logic so that web designers don't need to mess pages interlaced with PHP programming code to alter the look of the site (this is hugely important for large sites). - Multiple templates for multiple versions of the display pages (for mobile, etc.). - Use of language files to allow multiple languages for foreign language versions of the site. - Intelligent and simple caching of all or part of *completed* HTML code (more efficient than just caching data with Redis or code with op-code caches that still requires executing the PHP code each time the page loads, but allows dynamic content that reverse proxies don't). Yes, there are ways to implement some of those points in a clunky way with PHP code, but using a template system is so much easier and more elegant of a solution. I get that it isn't immediately obvious why a language like PHP that can be mixed into HTML pages would also need a template system, but once you understand how valuable it is you'll never go back. 
Slight modifications: 1: Store a userId, userName, and bcrypted password in a database. To use bcrypt in PHP, download [PHPass](http://www.openwall.com/phpass/) and use its PasswordHash function. Bcrypt is better than hashing, hashing+salting, or hmac'ing. 2: Allow the user to type in their username and password. 3: Using PDO or mysqli with *prepared statements*, try to pull down the user's bcrypted password based on the username they provided. 3a: If their username and bcrypted password were found, compare the password they provided to the stored password using PHPass's "CheckPassword" function. If it matches, log the user in (create an entry in the session table, initialize a PHP session, whatever you prefer to do). 3b: If their username and bcrypted password were not found, compare the password they provided to a random stored password using PHPass's "CheckPassword" function and do *NOT* log the user in whether or not it matches. This prevents an attacker from being able to tell whether or not the user exists based on how long it takes to get a response.
&gt; "once you understand how valuable it is you'll never go back." &gt; &gt; The vast majority of PHP programmers responsible for Zend, Symphoney, Fuel, Kohana, Cake, etc. have all used Smarty. Everyone who has been using PHP since version 4 has used smarty. It is now universally abandoned by every major professional coding company I have ever heard of or visited. There are no well-respected PHP frameworks I can think of which use Smarty or anything like it. I used smarty. I grew up. Professional PHP developers grew up. &gt; "designers dont mess with pages interlaced with PHP code" &gt;&gt; If you have to use smarty then they are 'messing with' pages with code; just because it isnt PHP doesnt mean it isnt a programming language. I dont see the difference between smarty syntax and, &lt;?= $var; ?&gt; &lt;?php foreach($foo as $k =&gt; $v): ?&gt; &lt;li&gt;&lt;?= $k; ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;?php if($x): ?&gt; &lt;h1&gt; &lt;?= $view-&gt;title; ?&gt; &lt;/h1&gt; &lt;?php endif;?&gt; etc. Smarty statements *must necessarily* be as complicated as any replacement for the php version. It is a procedural language built on top of php. Designers dont need to learn php. They do need to learn *something*. Why are you teaching smarty? It is much better for you and them that you share a basic level of PHP knowledge. They shouldnt know anything about the backend. They should know what variables are available and what their structure is. &gt; "Multiple templates for multiple versions of the display pages (for mobile, etc.)." &gt;&gt; This is very easily achieved natively with some very simple conditional dispatching in a front controller or greater resolution in the view system. include "$controller/$action/$formFactor/$action.phtml" (one line, vs. a compiler?!) &gt; " for foreign language versions of the site. " &gt;&gt; Smarty for I18n sounds horrific, esp. when there are native ( http://devzone.zend.com/1500/internationalization-in-php-53/ ) and well designed components ( http://framework.zend.com/manual/en/performance.localization.html ) to use. &gt; "Intelligent and simple caching" &gt;&gt; Smarty is just doing on-disk data caching (for partials), which is much less efficient than redis or other in-memory caches. Again there are well written components for caching (http://framework.zend.com/manual/en/zend.cache.html) as well as layering (or at least being reasonably intelligent about) reverse proxies. My only recent (post-2006) exposure to smarty has been in PHP4 code bases, with endless files still ending with '.class.php', countless define statements, abitary includes and meshes of linear procedural code whose authors think their architectural problems are solved because designers dont see &lt;? . The whole project really needs to die, the opportunity cost (programmers still thinking that its the right solution because their learnt it in tutorials written nearly a decade ago) is terribly high. 
Thank you, guys! I will be looking over your suggestions and links. This will be a great help to my learning. :)
Start with creating a db table via phpmyadmin, then write some code to interact with the table.
All these things are easily achievable with regular PHP. Also i keep reading "template engine are important for large site with big teams", hate to break it to you but no big site that i know off uses template engines, actually we tend to avoid them like hell. As for the "web designers" , in large companies they have front-end developer, and usually it is a requirement for them to have basic knowledge of PHP syntax, i wouldn't trust an integrator that doesn't understand the basic concept of PHP (or programation) like loops, if statements and variable types, it's not that hard, at that level they should know this.
Another vote for nested sets here. We use it with some pretty decent traffic and as dazzled did we have a pretty robust class around it to handle all the resizing and whatnot. In terms of your m-ary tree, this is what you'd want to use to be able to get any level. Imagine your dataset grew large and you were trying to go through it with php. You'd run out of time or memory. For more information you can check out Joe Celko's book, SQL for Smarties: http://www.amazon.com/Joe-Celkos-SQL-Smarties-Programming/dp/1558605762
Yeah I don't think it will in the long run, my college's think we should go with just data caching at the moment.
Thanks for the tip!
I wasn't trying to be sarcastic. I perceive our code to be disorganized, my impulse is to try to fit it more into an established pattern, you're saying that that isn't always better, so I'm trying to be more skeptical of my impulses. I've conceded that I'm new to this project and don't have the expertise to verbalize why we should be doing what I think we should be doing, so I may not be as correct as I think I am. That said, the code does seem roundabout, disorganized, and arbitrary to me. My worries are nonspecific because my experience with the site is limited but we're moving quickly - that new programmers will find the learning curve steep and make more mistakes (I certainly haven't been plunging into the code with certainty), that overspecific code will slow down development, those kinds of things. But they're worries, not certainties. And perhaps, as I've come to realize as this topic has progressed, my question should not be "how do I sell this" so much as "how worried should I be?"
You should check out this guy's post about auditing a php login tutorial. I learned lots http://blog.ircmaxell.com/2011/08/security-review-creating-secure-php.html
Then just say so. I wouldn't apply either, yet i know i highly exceed the requirement (-yeah that sounds cocky, but being confident in your skill is important i believe-). As a former lead myself, when i was interviewing and posting the requirement i was just listing general skill. The resume and interview will tell me if the guy is my guy/gal. I don't ask "are you familiar with the factory pattern" or list it, first off if he is in an interview, the resume grabbed my attention, and i will make the interview revolve around it, the guy /gal listed Sphinx, i'll ask him questions that will let me know what type of developer he is, was he curious, or he just executed and listed it to look nice. Filtering applicant through the job posting is a bad idea, your first rule when writing a job posting is making sure it will attract a wide range of developer. If a guy/gal has no degree, little professional experience, but participated in open source project, hacked together some interesting piece of software, i certainly don't want to scare that type of dev by being too tight on the requirements.
Also any reasonable developer with OOP experience in PHP knows that most of those patterns are unusable in PHP if you don't want to end up with an over engineered piece of software that choke going over 2 requests per seconds. Good developers, more so in PHP, knows the language and its limits, what not to do, what to do, when to do it, and why. PHP just doesn't have, and was not meant for that, what it takes to be a full OOP language, and some people should reflect on it, learn where the limits are, and how to go beyond them, but mostly some people should just learn when not to use PHP...
If all you want to do is authorize logins, just store the user's Facebook ID. (Not their token.)
Would this method also be viable for using Twitter/Google as well? I'd like the login process to be indifferent to each service.
You could download cakephp and try the tutorial in the 101 area of their site. It's the one after the blog tut. 
It sure would, and in fact I've done just that before. Google, Yahoo, and a bunch of other sites use OpenID to log in. Each user has a unique "Open ID identifier" which is a long string. That's the unique ID you'll be wanting to save for those users. Facebook and Twitter don't use OpenID, they use OAuth, which works slightly differently. But using OAuth, you will be able to get back a unique numeric ID from Facebook or Twitter for each user, and you can store that. Facebook and Twitter unfortunately use different varieties of OAuth, so there isn't one API out there that'll handle both of them (as far as I know) meaning, to do all this, you'll need: 1. An OpenID API (for Google, Yahoo, etc.) 2. A Facebook API 3. A Twitter API
Just what I wanted to hear (well, read). Thanks, I'll see how things go.
Sounds like a wonderful idea. I have decided against implementing it just yet... Right now I essentially determine each nodes children and store that in memcache until someone adds a node to the tree (Impossible to remove a node). It is only expensive when someone adds a node which, in this application, will be quite rare. And when it happens, the tree only has to be re-factored once. I wrote out the nested set methods and really like it. Before I go and implement it though, I want to make sure that my understanding is bullet proof. Thanks for the link!
session_id, ip, and useragent are great if the person stealing the session are on a different network. In the case of public wifi or something along those lines this policy may not help at all. The best way to prevent session hijacking is by using https. 
2 quick thoughts: 1. The more requirements you list, the more you box yourself into a corner. Stay open and flexible with the requirements. 2. I never apply for jobs that don't list at least *some* kind of number for salary. "DOE" is too vague, as is "competitive salary". 60k+ works fine, though, even if you'll pay as much as 120k. 
&gt; No payrate is given. I usually won't even bother with postings that don't list 6 figures as the maximum range, because why would i want to take a huge pay cut for the same or worse job? Exactly. If I don't find some kind of number for the salary range--even just a bottom range--then I stop reading the job description. "DOE" and "competitive salary" are such abstract terms that they really have no meaning.
&gt;To prevent this, store the session id, ip, and useragent in a sessions table Use SSL. IP is a terrible idea because some people are still behind transparent proxies. This would effectively make it impossible to use your service. Useragent is pointless since it's easy to spoof.
You use books for core concepts of the language. You use DOCS, blogs and tutorial websites to keep up on the latest shizz.
The Internet.
To extend upon this comment: For php: php.net For JS (and you better use some extended js library like jQuery...) : related documentation; and jsfiddle /FOR TESTING/! For trouble with anything: stackoverflow (it usually does help, believe it or not...)
I love this one: http://webdevrefinery.com/forums/topic/3280-how-to-make-a-user-account-system/. It says *what* to do, instead of just giving you chunks of code (like a lot of "tutorials" do), and it suggests the use of classes instead of chunks of procedural code. And as for your side note: I agree - Tutorials should use classes. Another good question is "why do tutorials still use the deprecated MySQL extension?" MySQLi and PDO have been out for a very long time. Protip, learn PDO, it's pretty good. Have a read of [Your MySQL Code Sucks](http://webdevrefinery.com/forums/topic/1272-your-mysql-code-sucks/).
bcrypt is built in to PHP since 5.3 (see https://gist.github.com/972386 for a code sample) and you can use Blowfish in earlier versions via crypt(). There's also the [mcrypt extension](http://au.php.net/mcrypt) It's probably better to use something built-in to PHP.
The idea with using user-agent is that it's not going to change in the session, and someone trying to steal the session probably won't know the user's exact user-agent string. If you get a request from a different user-agent, you can invalidate the session.
You could suggest using an existing service, it'll be probably more cost-efficient. Clicky: http://getclicky.com/ comes to mind.
You are reinventing the wheel here. Just put Google Analytics script on your website (they do have real-time).
If you can't use GA for whatever reason, just install piwik it has a live module. If Piwik doesn't exactly fit your needs, just write some plugins for it, it's easy and the important thing is that you have a good base to start working on.
I develop ideas for large scale website projects, create a business plan and pitch it to VC people I have developed relationships with. They pay me salary to develop it and I end up with a small % of ownership on the end.
http://hummingbirdstats.com/
&gt;Personally, I'd recommend avoiding Zend. It's kind of outdated. [citation needed]
0 is always encoded as 0 in any sane symbol-encoding, so it will always be the same character. base 64 encodes 6 bits at a time. Since we computers generally use store data in 8 bit blocks, then 64 bit will only evenly transcode when the data is a multiple of 3 bytes (8 * 3 = 24 = 6 * 4). From wikipedia: When the number of bytes to encode is not dividable by 3, that is there are only one or two bytes of input for the last block, then the following action is performed: Add extra bytes with value zero so there are three bytes, and perform the conversion to base64. If there was only one significant input byte, only the first two base64 digits are picked, and if there was two significant input bytes, the first three base64 digits are picked. '=' characters might be added to make the last block contain four base64 characters. The '==' sequence indicates that the last group contained only 1 byte, and '=' indicates that it contained 2 bytes.
I know (knew) how base 64 works, and could've replicated that functionality somewhat easily if I wanted to for ascii-base64 charset conversions. That would indeed have solved the "very large numbers" and "leading zero's" problem for that specific conversion. I don't find that very interesting though, base64_encode exists. For the sake of experimentation / practice it would be more interesting to implement a function that could do this for any two character sets (or at least determine if it would be possible for any 2 character sets- some combinations might lead to block-sizes larger than the maximum number that we can store).
and another to throw on the pile. http://haveamint.com/peppermill/mint/all_versions/
For PHP I would definately recommend [PHP 5 Objects, Patterns and Practice](http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804). [Pro PHP Refactoring](http://www.amazon.com/Refactoring-Driven-Design-Experts-Source/dp/1430227273) is also pretty good. And the latest book on [PHP Security](http://www.amazon.com/Pro-PHP-Security-Application-Implementation/dp/1430233184) is good too. For javascript I would start with [the Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742), go to [Javascript Enlightenment](http://www.javascriptenlightenment.com/) and read what is available in EAP for [Secrets of the Javascript Ninjas](http://jsninja.com/) because although the book may never actually be finished what is there is worth 30 average javascript books.
I pretty much have a rule I live by. First time writing code, it's going to suck First refactor, it's going to be cleaner First rewrite, it's not getting any better I don't think I've ever written code where I didn't come back to 6 months later and realized I could have done it a little bit better.
This is true for all things, not just PHP
Or download Symfony2 and check the source code of the security module.
Well, I generally don't buy PHP specific books, so this book doesn't really talk about PHP, however a lot of the design patterns can be transfered over. I thought it was a very good book: [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/gp/product/B000SEIBB8/ref=kinw_myk_ro_title) Another one that's not completely about OOP, but is PHP : [Real-World Solutions for Developing High-Quality PHP Frameworks and Applications](http://www.amazon.com/gp/product/B004XCRBMG/ref=kinw_myk_ro_title)
did you write radicore? if i write something functional that is RAD - takes me 1 hour - then everyone else takes weeks to replicate the same functionality in ORM/MVC (its command line batch job btw) - what is right? i'm all for learning ORM/MVC but there are times when a lib include and some code is way faster (both in execution and dev) -but i know it's not DRY- i'd love to move to ORM/MVC faster but i keep running into solutions that need hacks. If most of the UI is moving to the browser (99% of ui is now all javascript) and the other .5% is background apps (cron jobs/command line) - it seems that there has to be some in the middle for the 99% and 1% :) i'll be glad to use OOP to make my database tables into models but if i'm just crapping them out to json so a complex javascript app is using me as a datastore then to me it makes sense that you should just build a connector in javascript server side node.js and perhaps just code the command line in functional (totally anti-DRY) but that will be hella faster than trying to tie a huge MVC/ORM server side when the MVC is really in the browser nowadays and the M(remote storage) is what you are presenting. So if xampp is doing the M(c) and the ui is MVC (remote storage to server M(c)) then what is the best rad solution? 
You could make your websites source-code visible through a simple script. It's true that the code shown in such a viewer could be spoofed, but I don't think people would really expect you to go through that much trouble for (relatively) trivial information. [edit] Crap, I didn't realize this post was already this old.
check the timezone on the server as well as the timezone of the browser and make sure they're not being discarded for being expired.
No, it's better not to roll your own. The implementation you've linked to requires some amount of "rolling your own" (for example, look at the salting process), so it's inferior to using a widely accepted library such as PHPass.
I agree with literally every single point you made here. Also, subscribed to /r/phpcodereview :-)
Seriously, listen to the other guys. Install Google Analytics.
(Use bcrypt, probably phpass.) Running a general hash function multiple times is actually a bad idea. Consider this: at the first run, the input can be any length allowed for the password, and contain any characters. (Use bcrypt, probably phpass.) At any other run the input is the output of a previous run, which means it's fixed-length, with a reduced character set. (Use bcrypt, probably phpass.) How can an attacker use this? Let's assume I have the result hash. I use a rainbow table / brute force to reverse it. Oh wow, look, it's a hash! Now I can assume that the next N reverse lookups will also result in a hash. I have significantly reduced the space I have to search in. I can also make an educated guess about N: it will probably be a power of 10. I still have to work harder than if I got the password in the first pass, but not really all that hard. (Use bcrypt, probably phpass. Seriously.)
That's actually the whole point: if it takes longer to compute, it (should) take longer to reverse.
I discovered the crypt() function. Also storing a random generated salt together with the user, and making table names not obvious names like: "username, password, salt". Thanks though!
crypt is good, random per-user hashes are good. Re-hashing with a new salt at every login is even better. I think you might as well not bother with making the table names (column names?) less obvious though. It adds a minimal level of obscurity, but it won't really change the overall security of your authentication scheme. Good job taking the time to learn about these issues, keep the habit :)
...except php already has functions to perform all these conversions, with the possible exception of base96 and base222, which nobody really uses. [base_convert](http://php.net/base_convert) [base64_encode](http://php.net/base64encode) [urlencode](http://php.net/urlencode)
&gt; it takes longer to compute, it (should) take longer to reverse That is true, but you don't see any issue with performing 200 hashing operations in a production environment? It slows down your page load time and places considerable load on your server, especially if a few hundred (or thousand) people are doing it at the same time. This is a question of whether the security gained is worth the risk of your server crapping out when it gets hits with a traffic spike.
http://www.piwik.org
In the general case a traffic spike won't cause a significant spike in login attempts. Even if it does, the number of iterations (or the complexity factor in bcrypt) should be adjusted so that response time is still acceptable - regardless of wether we're under heavy load or not. A DDoS attack is another matter of course, but then authentication performance isn't your greatest concern :)
PHPass is an option, but there are lots and lots of options that are "widely accepted".
Check out the open source frameworks on GitHub. https://github.com/symfony/symfony http://rad-dev.org/lithium/source https://github.com/fuel/fuel Good js article http://blog.rebeccamurphey.com/2009/10/15/using-objects-to-organize-your-code 
Minneapolis, Minnesota. Senior Position at a small company (4 developers) $83,000 + a computer of my choice ( I took a 17" macbook pro ) which is given to the developer (it doesn't get returned if I leave) -- so call that $84,000 if you count the value of the computer before they replace it for me. Something to note -- informal surveys of this type are always highly skewed -- people with lower salaries are generally not anxious to talk about it, even anonymously. 
I don't know what this has to do with PHP since your state changes will happen in the browser. And then (when in client code) you don't need the Observer pattern since Javascript has events for DOM node state changes.
Someone suggested piwik ten hours before you.
Shit. I searched the thread and completely missed it. Fair enough.
Sounds like a job for [backbone](http://documentcloud.github.com/backbone/)
I wasn't aware of base_encode, but like I said; I mostly wrote this stuff as practice / because I thought it'd be interesting to do.
i suggest looking into the nested set pattern instead of your current table structure, with nested set you can get the parent node and all it's children in one query, it's much faster than multiple queries or loading the table into an array and manipulating it.
was wondering the same thing...
There are a ton of books, but i guess the main question is: what are you interested in? Concepts or examples? Because many strong conceptual books are using examples from java, c++ and other languages, very few of them use php as example. If you have the ability to comprehend other languages, then: http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&amp;qid=1322476598&amp;sr=8-1 definetly a must read. Beware not to memorize it, it is more like a dictionary. It should be pretty easy to read, a little harder to comprehend and you need to work with the patterns presented in that book. http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804 - has already been mentioned, is related directly to the above mentioned one, so should be easier to grasp. http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420/ref=sr_1_1?ie=UTF8&amp;qid=1322476712&amp;sr=8-1 - one of the most amazing books i have read some time ago. Needs alot of time and good prior knowledge. http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_4?ie=UTF8&amp;qid=1322476712&amp;sr=8-4 - another interesting read, unfortunatelly i cannot give details because i haven't had the time to read it all.
I am interested in books that hand out problems like the PHP: Cookbook, where you get an assignment, and try to solve it, while the author gives you his line of code.
I was actually thinking in sending out the data to PHP to be calculated and then get back the results. It can be implemented in Javascript too but then I will have to do the calculations on both ends. My original thinking was "User changes Field A, I submit the change, gets calculated, maybe 3 fields are updated, I get them and update the page". We are talking about a form with maybe 60 fields but around 20 of them are calculated from the values in the form and some other constants pre-defined (system wide and also as a user preference).
Nice, thanks for the idea. Is there a way to know the compatibility with browsers? This application needs to run from IE7+ and Firefox as that's what the customer use. 
I understand pretty well what you are saying and it seems to be the right approach. But I don't see where the Observer pattern fits in here. This is what you are on, right? // in page Javascript observe('some_fields', 'onchange', function() { ajax('computation.php', { parameters: serialize(form) }, function(response) { someOtherField.update(response.text); }); }); // in computation.php echo computation_on_post_values();
The code generates a salt and uses the algorithm built in to PHP for the actual encryption. You're always going to have to generate a salt to use it, and salts are often application specific (some apps salt the password with the username, for instance). It really doesn't matter how you generate the salt as long as it's sufficiently long. Having said that, crypt() in PHP does have the option to generate the salt itself. See the manual at http://au2.php.net/crypt. Given a PHP version that supports it, using a single crypt() call is always going to be better than loading a full PHP library for hashing. Does PHPass have its own salt generation? If so, how do you retrieve the salt? Surely it's not much different. 
Yes, exactly. It is just that because I am converting this from Excel I need a way to also affect other fields when there is a change in PHP. Like in a spreadsheet. Let's say that on the server-side I have Field A,B,C,D. So I want to be able to add rules and say "If B or C is updated, recalculate D as D is SUM(B,C)". I want to keep track of this and do it in this way was I believe it would be easier to do this. Why? Well, what if I add later Field E and now B is calculated from E+3. Then I want the system to change E and the fire the calculation of B and of course this should fire the calculation of D. I read some examples about people trying to implement a Spreadsheet and they implement an Event Manager (Observer). At first I was thinking in just understanding the "model" in Excel and just do it straight forward in PHP, maybe this is easier.
PHPStorm - http://www.jetbrains.com/phpstorm/download/
&gt; I read some examples about people trying to implement a Spreadsheet and they implement an Event Manager (Observer). It's just strange, every UI framework (talking about non-web applications) should have an evented model built in. And as far as PHP goes, I've seem only 3 scenarios where the Observer pattern was required: * Plugin system * Pre-method, post-method code execution (poor mans object aspects) * Emulating mixins As far as your application goes, there is no need of Observers; or at least I do not understand where exactly and how you'd use this pattern.
I'm a fan of [Aptana](http://aptana.com). I have been looking at using [Netbeans](http://www.netbeans.com/) though.
Netbeans for me. The coding environemnt is good and it has support for stuff like PHPUnit and subversion.
this - a thousand times this. Netbeans and eclipse try to do everything (php/c++/java/html/etc etc) and end up doing an "ok" job. PHPStorm is built specifically for php/web dev - its amazing
NotePad++, its pretty much just a really light weight editor &amp; for PHP its all you really need.
Aptana runs like a sack of shit on my machine.
Yes, that's why I asked. I was reading about it in some blogs about doing "spreadsheet" like apps. I will take a look at the event manager in PHP or Symfony and see how to implement this. Also I have seen this in Magento for updating the prices and so on but it seems they strip the comments in the code, it is quiet hard to learn from it. Thanks again!
Hmm, costs money, too bad.
I started using Aptana, then they axed the PHP support in favor of Ruby. Then they brought it back haven't used it too much since. I primarily use Netbeans since it has some good PHP framework support and doesn't run as slow as Eclipse. Though I realllly like the Remote Systems Explorer plugin. Best for editing config files on remote server and you get full directory tree to browse and terminal. Granted I could do vim via ssh, but this runs over SSH too and gives me nice editor view.
You can look [here](http://components.symfony-project.org/event-dispatcher/trunk/book/02-Recipes) for common recipes with the symfony event dispatcher. That should make the implementation seem fairly obvious.
I used to code with UltraEdit, but a year ago i tried NetBeans, my life changed. - Integrated Git/Subversion support - Useful source/project navigation - Built-in local history (Pretty useful) - Support for remote connections (FTP/SFTP...) - PHPUnit/PHPDoc support Obviously it has code folding, code auto-completion, and the usual stuff. I think one of it's problems is that's heavy to run, but i never had any problems with it in my computer (currently running on 12GB Ram and an i7 processor) 
I use PhpED, costs money though.
I've used both on several projects, I prefer Netbeans, but use Aptana because of ignore invalid / unsigned / self signed FTPS support.
[phpDesigner is quite excellent.](http://www.mpsoftware.dk/phpdesigner.php)
Really? It doesn't even meet the requirements of sftp/ftp. I would hate trying to manage a 100+ file project in notepad++, having to switch between explorer and it to open files because there is no concept of projects or workspaces, also uploading files, I don't always want to upload the entire project, just certain files, this would force me to have to navigate my ftp to each directory and manually upload each file instead of say upload all opened files to their relative paths. It's fine for editing single scripts or really small projects, but anything else would require so much extra time to do things a serious ide can do for you.
you can tell the noobs from the ides/editors they use
Sometimes you have to pay for quality, when you pay for things, they fix the things you point out as broken much sooner then at the whims of open source developers.
Netbeans is a major resource hog though :( 
This looks great for RAD, it's almost as convenient as a schema-less storage. (upvoted) But leaving schema creation to an automated tool is not something I'd do in a medium-to-large project. DB admins have a job for a reason.
I'm surprised no one's mentioned Komodo. I use this at work and at home, absolutely love it.
&gt;But leaving schema creation to an automated tool is not something I'd do in a medium-to-large project. DB admins have a job for a reason. Very true, but looks like a great way of prototyping / RAD. Interestingly it seems that at any point you can "freeze" the schema, and then update it manually. Seems like a great way to build the majority automatically as a prototype/scaffold and then take over full control yourself.
There's a very handy FTP plugin for Notepad++ which is actually nice. Now it comes pre-installed with the Notepad++ installer. There's also an Explorer plugin so you don't have to switch to windows.
Just a quick glance, but the means of querying the DB doesn't look pretty
I didn't notice that; it mostly kills the drawback. On the other hand once you do that, any schema changes leave you in the same position as any other ORM.
Worth it, if you actually work as a developer all day and don't just edit a file every once in a while. Pop on a vi plugin if it isn't 1337 enough for you as is.
Eclipse is the best IDE out there (no need to specify the prog language)!
&gt;once you do that, any schema changes leave you in the same position as any other ORM. It leaves you in the same place, but gets you there (potentially) a lot faster. Would be damned handy if you could freeze specific parts of the schema..
Do you know of any PHP ORM's where the means of querying the DB is pretty? Genuine question.
In the same place, with a possibly (I don't know) inferior library. Freezing parts of the schema would be really cool. Also, I'm out of arguments :)
Actually it doesn't. The "freeze" just turns off schema updates. Any manual changes to the DB structure are still picked up by redbean. I've used this in a couple of projects where there was no ORM at all - just a pile of SQL statements everywhere (ugh). It works well for that because you can drop it in and the rest of the app is none the wiser. There are a few drawbacks in that if your PKeys are not called "id", you have to add a config call for the table/keyname.
That's nice. I might have to try this out some time :)
I've been using RedBeanPHP for several projects over the last while, and have recommended it to a few other people working on small-scale projects. It's been nothing but fantastic. For new users, it's a very easy way to persist data. The [documentation](http://www.redbeanphp.com/manual/) has been nothing short of awesome. I've had a couple of friends in university that needed to use PHP for some class or another come to me for advice... I pointed them at RedBeanPHP and haven't had any questions since. I've used it for a few smaller projects myself as well. The performance difference versus raw mysql functions has been pretty minimal, and the time saved in development is awesome. I never really got on board with the other ORMs I tried because they all required a bunch of changes to your code or constantly referring back to the documentation to make full use of. RedBeanPHP makes it so simple: Get a bean, do stuff to it. It's exactly what I wanted. The way it's written is excellent as well. If there is anything about it you want to change (for example, I wanted to use it for reading from and writing to some existing tables which used 'Id' (upper case 'i') instead of the default 'id' (lower case 'i')), you can inherit from some class or another, inject it into RedBean and be on your way. I've not had reason to modify rb.php yet. Which I guess brings up another point: For small applications, having an ORM in a single file is really handy. Less to copy, less to include, less to worry about. So much power in that one little file. The schemas it creates have been fine so far. If you're concerned, though, you can just freeze your schema (a good idea for release anyway) and tweak it by hand. And, small thing, but the support for sqlite is really nice. When I'm putting together some small, quick project for a client I don't need to bother with setting up a database or connection or anything in MySQL. Just let it use sqlite, and deploy it to MySQL. Appeals to the lazy fuck in me. About the *only* thing I would like to see changed is to add a lot of the methods available only on the R class to the beans themselves. I've written a BeanWrapper class that does this, but I think it would be nice available natively. Basically, instead of "R::store($bean)", allow you to use "$bean-&gt;store();".
Hell yes. The CTRL+SHIFT+O function which allows you to find files by partial name match is a massive time saver. 
I'm using this on my current "big project" at work and it's been pretty awesome so far. No noticeable performance penalty, and my code using it is clean (no unnecessary boilerplate). My only complaint is the documentation. It would be great if some of the classes in RB.php were explained in better detail, such as the basic Model class they provide.
Komodo IDE 6 http://www.activestate.com/komodo-ide
I agree, or Zend Studio if you are looking for a little more refinement. But once you get eclipse configured properly. Its great. It really helped in my transition to learning Python since I didnt have to worry about a new IDE.
I tested windows IDE's pretty extensively, looking for advanced features like debugging, remote revision control with mercurial and git ( I barely use ftp anymore), snippets, hotkeys for efficiency, error handling, extensive project/dir search, local history, project management, console, etc, and of course a nice color scheme ( this is besides all the regular stuff like code completion, etc). The only 3 strong contenders were: Netbeans 7.0+ PhpStorm PhpEd I really think phpStorm is incredible in terms of its features, but on large projects it was topping out at around 400mb, netbeans was more around 200, (phped was the even better) and since I often have a lot of stuff open that is even more resource intensive it got kinda sluggish, even with a good machine.
It is to some extent - but what else do you need the resources for while you're working? Maybe like Photoshop or something I guess. It won't phase a mid-range machine i5 + a few gigs of ram. Maybe not the best software for an older system.
I was using an old version of Dreamweaver and different notepad tools forever. I even tried Eclipse and Netbeans when I was looking for something better a few months ago. I ended up reading reviews for PHPStorm and gave it a shot. It's definitely changed my life. Don't think twice about the money. You'll be much more efficient and it will pay for itself in a weekend.
This one is delicious. Supports git, too.
Komodo edit is pretty solid, and free. Komodo IDE is also good but not free.
Please note OP: you can try the Komodo IDE 7 Alpha for **free** (for longer than the 6 trial) There is also a completely free version called Komodo Edit, which with a little customization is just about as good as Komodo IDE imho.
An IDE is an Integrated Development Environment. These all have several common characteristics distinct from *EDITORS*, namely: Almost/every IDE... 1. can **debug applications**, via breakpoints 2. can **set breakpoints** and step into the execution path as the application executes. 3. can **view all local variables** set by the application at any arbitrary execution point *without the need to add debugging code*. 4. has **smart syntax error-catching**. 5. can **profile the application** for speed and/or memory statistics. 6. can **intelligently complete statements**, such as $this-&gt;[method list dropdown]. 7. (frequently) has **built-in support for unit testing**. 8. (frequently) has **built-in SVC support**, such as SVN. 9. can **highlight code based on syntax**. Notepad++, from my understanding, has *one* of these features (#9), making it not an IDE but a slightly-less-dumb editor.
I second PHPed, followed by PhpStorm, then Netbeans 7+, then Zend Studio (very distant, due to CPU + Memory + file system utilization/hogging), lastly PDT (for lack of features, hardness of setting up, most of the headaches of ZStudio, etc.)
Don't forget, £50k is still around CAD$ 80k
I know [one](http://www.propelorm.org/reference/model-criteria.html).
I use Zend Studio 8, they have 9 coming out soon. * for debugging (love that firefox toolbar, makes it easy to debug forms) * profiling * ctrl click any function to go to its source * ctrl shift f to tidy up the code * sftp ftp and svn support * local code history * compared my code from history or other files * opening same file on multiple tabs Running it on ubuntu as a vbox guest, on win7 64bit, it can be slow depending on the size of your project.
Still ugly. _maybe_ Rasmus will actually introduct a sane array literal construct some day.
VMWare and Chrome, to name a few. Each use 1-3 GB of RAM :/
Array literal construct it's not the DB querying solver. You need proper abstractions at your database model, logical abstractions, and business abstractions. A good ORM like Propel give the means to this, with functional like abstractions; the what instead of how. Compare: BookQuery::create()-&gt;recentlyPublished(); BookQuery::create()-&gt;onDiscount()-&gt;paginate($current_page, $limit=10); To what you'd do with light abstractions over your database.
You mean like in php 5.4? First example on that page would be re-written as: &lt;?php $books = BookQuery::create() -&gt;filterByPublishedAt(['min' =&gt; time() - 30 * 24 * 60 * 60]) -&gt;orderByTitle() -&gt;find(); 
That actually got approved? I thought it got killed in committee? Still wish they'd do the smart thing (as ruby did in 1.9) and allow : instead of the awkward to type =&gt;
Aptana Studio all the way!
I like using [UltraStudio](http://ultraedit.com) 
It's hardly LINQ.. :)
You can do all that in PHPStorm with the advantage of not having a bloated and slow IDE. Seriously, I used to love Zend Studio 5.5 then they moved to Eclipse and it went down the hill. I then discovered PHPStorm that also support ZenDebugguer and the magnificent Firefox toolbar and never look back. And... it's also cheaper :)
PHPed -&gt; PHPStorm -&gt; Netbeans.
Zend Studio will **kill** SSD drives. Just watch it rape your drive as it reads and writes files over and over and over and over while it does its blasted "code analysis" that will be the bane of your existence, as it also uses 100% CPU for *hours* at a time and loads of RAM, too.
One of the things I like about Komodo Edit, aside from the functionality and that it's Free, is that it works on Windows, Macintosh, and Linux. So, whichever environment I may be on, I can be using the same set of features and be in my happy place.
varnish is awesome! Almost no configuration and you are ready to go, has a configuration language which allows for inline *C*, so you can use the GeoIP library to segment the cache, etc. etc. And it's fast! I use it productively on a site with moderate traffic (~100 hits/second) with a hit-ratio ~90%. The drop in load was quite noticeable when I first set it up.
As I already recommended below, have a look at [varnish](https://www.varnish-cache.org/), which is basically a caching HTTP reverse proxy. Easy to set up and through it's configuration language allows for very complex configurations. In your case you could use it's feature called *[Edge Side Includes](https://www.varnish-cache.org/docs/3.0/tutorial/esi.html)*, which are tags embedded in your HTML that tell the cache that it should insert dynamic content from somewhere else (the edge of the cache). So can have the cake and eat it too! You can cache your static part of the page and let the cache query your app-server for the dynamic part. You can partition the cache for that included part via the user-id (preferably in a cookie) and even set a custom ttl for it. I imagine it would even be possible to evict that cache specifically when a user triggers a POST. The documentation (which is pretty good) should help you with that.
Aptana ingloriously yanked PHP support from version 2. What keeps them from doing this with version 4?
oooo an IDE I have not heard of!
For PHP I recommend one of the following: **NetBeans** I would use this if there wasn't an annoying OSX bug that can't be fixed. It is a bit heavy in terms of resources but you most likely wont find a better IDE in terms of features (or price). It takes some configuration but you can make it run pretty well. I recommended this IDE to a co-worker who has worked with a number of others and this one is still his favorite. It has db inspection built in, good VCS support (you need a plugin for GIT I think), ftp capabilities built in, you name it and NetBeans probably has it or has a plugin for it. Plus there are easy ways to get autocomplete working with just about any framework. **PHPStorm** This is what I currently use. Not free but jetbrains makes some really good IDEs for a number of languages. If you get it now I think they are having a sale where it is 50% off and you get a free upgrade to 3.0 when it launches next month. This IDE doesn't have as many features as NetBeans and the code inspection is a bit flaky with PHP 5.3, also support for popular frameworks isn't great. But it is faster than NetBeans plus jetbrains products have good technical support if you run into an issue. **Komodo Edit** This was my environment of choice for awhile. It is about on par with PHPStorm for speed and unlike it's brother (Komodo IDE) it is free. There are a number of plugins for it that will raise it to almost parity with a real IDE. Also similar techniques to NetBeans allow for autocomplete to work in most frameworks. With all that said it is still a glorified text editor though. However if it had good VCS, debug support I would still be using it. [EDIT] I should note that I think a lot of the PHPStorm issues will be mitigated when 3.0 drops
They've kinda annoyed me though. I downloaded the trial, ran it once real quick and then never got around to trying it until a few months later. Of course by then the trial is expired. So I contact their customer support and ask if it's possible to reset the trial so I can give it a go, and they email back telling me rather bluntly to contact purchasing without giving me any contact info. So I find the purchasing contact and send them an email, and never hear back. Not terribly impressive customer support (or, potential customer support). 
Its shit like that which causes piracy. If what you said is true then I won't be purchasing after the trial expires
After reading the comments, I've gotta laugh at myself, as I'm apparently the only dumb mofo still coding PHP in Dreamweaver... old habits die hard. Clue me in though people, I've been wanting to fully switch over to Netbeans, but - how do you look at remote files? I think ultimately the *only* reason I stick with DW is because of the ability to set up a site with any number of "remote" servers, and then be able to push around files as needed. So for example, I'll wind up with a server setup like this: - local dev server, folder: /www/[myproject] - remote dev server, folder: ~/clients/[myproject] - remote dev server root, folder: ~ - remote prod server, folder: ~/html/ - remote prod server root, folder: ~ With DW, I can set up all of those, then pick one as "testing", and another as "live", and switch those assignments around as needed. Seriously, 70% of the reason I stick with DW is for the "Files" window/browser and the multiple servers. Does Netbeans have anything like that yet?
Since I fully admit I am a PHP noob, what is your opinions on CodeLobster? That is what I have been using to learn with. 
PHPStorm / PyCharm (intellij etc..) are the cream of the crop for anything other than MS stuff imo. One of the few products actually worth paying for, and a fairly reasonable price. It also has a very fast update cycle which is great.
Download the EAP (beta) copy for 3.0 instead. It has a separate 30 day trial that resets with each new beta. 
notepad++ has some of 4, 8, and 9 with the right plugins, along with an sftp / ftp plugin. Once you go to all the trouble of customizing it to do what a regular IDE comes with standard, I'm not sure it's worth it, but it's hands down the best editor.
Some of the other features can be added via plugins, but I agree that a lot of the more difficult features are not included. That said, a lot of web developers don't use those features, especially if you're spending more time with JS/CSS than with heavy-duty PHP programming.
this looks... awwwwwesome. holy crap. 
You should look into Notepad++. It's not a full IDE, but that won't bother you since neither is Dreamweaver. The FTP/SFTP support is essentially the same as DW, and the built-in syntax highlighting and code completion is better than DW in my experience.
I personally feel that ORMs are only good for prototyping. Once a project gets serious, I've never met an ORM that doesn't cause a world of pain as it becomes more and more depended on.
Checking in: Core 2 Duo @ 3.0 / 8GB ram, and NB runs reasonably well for me.
Ya know, I use NP++ at least a dozen times a day, but I can't stand it for projects. It just looks fugly, and the FTP/Explorer plugins really don't cut much mustard. It's funny though, because I do use the crap out of, for mundane stuff though, like editing confs, rainmeter skins, autohotkey scripts, occasional python scripts... but not web projects.
But 8GB RAM is less than 40€. If your workflow isn't worth 40€, maybe you need to re-evaluate your skillset?
Notepad++ does all those things via plugins.
emacs all the way!
I don't think you need to worry about the Observer pattern on the PHP side. It should just be processing simple calculation AJAX queries you pass back and forth and won't really "watch" the form changes directly. If I were you, I'd bind a listener to the main spreadsheet form. Then, when onChange is fired by any of the form's fields, you make an ajax request to /update_form.php?update_fields[A1]=10&amp;updated_fields[B7]=11 Have that come back with a JSON object for all the affected fields (PHP is where you'd store the logic for "well A1 is part of the sum column A in cell A10, so we need to update A10)...so return something like {'updated_fields': {'A10': 100, 'C30': 210}} then update your client accordingly. On your ajax request, you could even pass the excel-like functions in as the parameter value ie: &amp;updated_fields[A10]=SUM(A1:10) (url encoded of course) Once you have that rocking, then you could look at doing some math client side for simple stuff just to make the UI more responsive, but starting with the server side changes is the way to go.
They just had a sale ... damn :( Would have purchased it if it was half the price
The Recess ORM is pretty nice: http://www.recessframework.org/book/html/ch12s02.html Everything happens lazily so it performs well too. It needs to be decoupled from the rest of the framework though.
It's worth it at full price. I've tried Netbeans, PHPEd, and a bunch of smaller IDEs/editors. None come close to the ease of use, functionality, and support of PHPStorm. Edited to add: It's also cross platform, so if you ever find yourself moving to Mac or Linux, you won't need to learn a new IDE.
This is my favorite on the Mac as well. Bought it during one of their biannual half price sales and have absolutely no complaints. I always liked Netbeans (which is good) but PHPStorm is even better.
Publish this and I will buy it. As for organizing the book, I would put each topic/technology into a chapter, such as having a Memcached chapter, a chapter on using Squid, a chapter on frameworks, one on writing PHP extensions, etc. After that initial organization, I'd then organize those into larger sections, such as an Advanced PHP section to contain the embedded, extensions, SAPI, etc chapters, and a high-performance section that contains the chapters on using Squid, Memcached, etc. I would also include a chapter at the end of each section that ties together the section's chapters into a cohesive whole, such as one on optimally combining Squid, Memcached, and clusters, etc.
Also check out lessify, http://leafo.net/lessphp/lessify/ It does the reverse, converting CSS to LESS by looking for common selectors.
Dunno if this is what you had in mind, since I may be misunderstanding what ORM means, but here's an example of using my own system. if ($_POST['gallery_order']) { foreach ($_POST['gallery_order'] as $i=&gt;$id) { $o = new dGallery(); $o['id'] = $id; $o['order_index'] = $i+1; $o-&gt;save(); } } dGallery is a subclass of the base [DBRecord class](https://github.com/ChiperSoft/Primal/blob/master/classes/Database/DBRecord.php), which extends ArrayObject. So you treat the object as an array to get/set values in a table row. Loading a record is as simple as: $o = new dGallery($primary_key); or: $o = new dGallery(); $o-&gt;load(array( 'columnA'=&gt;$value_a, 'columnB'=&gt;$value_b )); The code for dGallery is simply: class dGallery extends DBRecord { var $tablename = 'galleries'; } You can provide more details to improve read/write speed, but that's all it needs to start working.
audacious
Cheers guys i'll look into those. some of them are very detailed for me but i'm sure i'll find suitable one for me.
I don't seem to have that issue in MacOS, Windows7, or Ubuntu.
Actually zend is fairly nice, version 9 is WAAAAY faster now too. I do agree though, some of the older versions could be pretty slow on a mediocre computer. I think the reason many people go for Zend is it works on all platforms.
It's not a job... it's a business. I developed an idea and pitched it to a number of VC capital firms and people that I knew who had the money to invest. It's that simple.
i've been using PHPEdit by Waterproof ( http://www.waterproof.fr/ ) FOREVER. never left it. i highly recommend you try it out. if you write them an email requesting a free personal license assuring them you're only coding for personal use they will most likely approve you. they're really cool like that.
Vim with fugitive support for git, VimDebugging for xdebug, tags for autocompletion/tag jumping, cscope for source navigation. My vimrc in here: https://github.com/MasseR/dotvim
Nested Sets are awesome. The corruption exists, but you can prevent it (be sure to look into LOCK TABLEs and BEGIN TRANSACTION/COMMIT stuff). When I created my class to control it, I apparently liked these enough to put them in the comments up top. * http://dev.mysql.com/tech-resources/articles/hierarchical-data.html * http://threebit.net/tutorials/nestedset/tutorial1.html * http://www.developer.com/db/article.php/10920_3517366_2 * http://www.edutech.ch/contribution/nstrees/index.php
1. It's convention, not security. 2. OOP and PDO are separate things. Object orientation solves (many) naming conflicts and gives better (IMO) encapsulation of work. It also reduces redundant typing in a lot of cases, because you can use shorter function names. e.g. Instead of using "`$var = mysqli_fetch_assoc($result);`", you can just use "`$var = $result-&gt;fetch_assoc();`". You also know that the functions you're calling are compatible with the "object" you're working with, because they're defined by it. PDO is simply an object-oriented database library. 3. There are libraries. Just look for 'markdown' 4. Run while you still can. :p 5. Degrees are just pieces of paper. The experience is the important part, no matter how you achieve it. Field experience is worth a lot more than classroom experience, IMHO. (H for 'hiring', not 'honest') 6. Dive in head first. Start small and work your way up, but there's no reason not to go whole-hog.
 $o = new dGallery(); $o-&gt;load(array( 'columnA'=&gt;$value_a, 'columnB'=&gt;$value_b )); Ok, so show me how you do a "like" statement? Or a join across three tables? Or what about where you only need 5 fields of a 200-field table? Most ORM's are fine for basic selects like this, but look ugly and clunky the second you try and do anything with even moderate complexity.
Great comment, until you edited it. Spill.
It was saved. I wonder if the : is on the board?
I'd argue that even the *worst* book out there has some bits of useful material in them. And that's why you should read as much as possible. After a while you can learn what to trust and what not to. But don't take anything as gospel, make up your own mind. And the best way to make a good decision is to get as much relevant information as possible...
Careful, ExtJS is not free for commercial applications.
I've used: http://flexigrid.info/ But you also have: http://www.trirand.com/blog/jqgrid/jqgrid.html You can make it work by conjugating PHP + JavaScript. 
Doctrine2?
I've used [http://datatables.net/](http://datatables.net/) couple of times
To answer 4. When you are "hopelessly I want to put the fist through the screen, set the PC on fire and emigrate to a country with no electricity" stuck (which will be once a day when you start out)..get the fuck away from the machine and go for a walk then while walking describe the problem as if you were explaining it to your mum (in your head if there are people around...). Also take regular breaks (even if it is getting up for a cup of coffee) at least every couple of hours or so. To answer 5. I was programming for nearly 20 years (sometimes even for money!) before I went University.
Well, in the past I've used Ext. These days I try my best to avoid using data grids at all. They are nice if what you really want is to emulate a spreadsheet, but most of the time that's not actually what you want to do and you can provide a far nicer UI without using them. Edit: though my preference would be no grid in most cases, I just remembered [KendoUI](http://www.kendoui.com/) is being released (official) tomorrow and has a pretty nice grid implementation. Not to mention it's an overall fantastic library. 
I've just switched to Ext from Dojo for a back end maintenance system. Good things about Dojo: * Cool page-less grid implementation * Good filter plugin for the grid * Declarative mode is a nice idea - bit slow. Bad things about Dojo: * Documentation isn't great. * Seemingly designed as a set of widgets rather than a system for building a whole front-end. I reckon you could do a pretty elaborate system using just Dojo but it's not obvious how exactly. Good things about Ext: * Pretty much all the components you would ever need, and they're all pretty good. * Excellent Documentation: http://docs.sencha.com/ext-js/4-0/#!/api * Very easy to build the whole front-end using Ext. Everything is designed to work together so passing a record from a grid to a form is simple. CRUD is easy in general. Bad things about Ext: * Some widgets are a BIT dodgy. I'm not a huge fan of the combo-box and the default grid filter plugin isn't very flexible really. * Because it's gone though so many versions so quickly it can be hard to find a relevant answer if you get a problem. * The examples are a bit annoying because they rarely show code as it would be in real life. It'll just be a load of object literals in global scope which I think encourages new users to screw up their application structure (I did!). * Not free unless you open-source your app. Overall Ext IS better I think.
&gt; If you can give a single tip (or two, if you want!) regarding PHP/MySQL/CSS, what is it? It can be about design, security, or anything that would help me learn more about websmithing. For MySQL (or any SQL database, really), learn how to properly design a database. In particular, the first 3 normal forms. It might seem like more work for little gain at first, but it will save you so much trouble in the long run. Don't be afraid to ask for feedback on your first few attempts. For CSS, once you've got the basics down, learning about the box model is never a bad thing. If you understand it well, you can usually figure out what's causing those truly bizarre layout problems.
Same, I like how it uses XUL so you can customize the shit out of it with a userchrome.css. My favorite trick with this so far is filetype tab coloring.
How does one handle schema "patches" during upgrades between versions of an app?
[citation needed]
DBRecord is just for working with individual rows in each table. I tried coming up with a system for joining records, but like you said, it just kept being too clunky. If I need to perform joins on data, I use a [query builder class](https://github.com/ChiperSoft/Primal/blob/master/classes/Database/DBQuery.php) that I wrote which lets me pass a class name to wrap the results in.
4. Whenever you write some code always think to yourself: "How can I simplify this?". Break problems down into small blocks that encapsulate discreet concepts and turn them into classes/class extensions - don't be tempted to write all encompassing classes or methods with huge switch statements and 12 levels of nested IFs. 5. Regardless of what they might tell you nobody ever learned how to make good websites without actually doing it - a lot. You need to do your time in the trenches. The first stuff you write will suck. The important thing isn't to write perfect software right off the bat. It's to aspire to write perfect software the next time. 
It looks like you're trying to do node-like stuff in a language that isn't JavaScript, and it doesn't look like it's working.
My subjective review, stuff that matters. http://stackoverflow.com/a/5487365
Sublime Text 2, but it's more of a nice text editor than an IDE.
worked for me
As others mention, getting to know the basics of how APIs work and how to interact with them (which, in PHP for example, is pretty much as simple as a cURL and some parsing on your end depending on what you're trying to do) is a great start. Once you've got a good grasp on those topics, feel free to head on over to our Disqus Developers Google Group too https://groups.google.com/forum/#!forum/disqus-dev and we'd be happy to help with any specific technical implementation questions you have.
DT is great! *Very* flexible and powerful.
Yeah I was loving this framework, too bad it died.
As weird as it seems, it's the only one which I tried that has proper auto-completion for cakePHP.
In your code, all the encoding "less than" hexadecimal is actually a subset of the hexadecimal encoding, and could be reduced/defined as such. It would be an interesting exercise, and good practice to generate on-the-fly *all* the arrays that you define statically in your constructors (think about looping over/incrementing a starting ascii value) Changing style and using array_map() with a different callback function could simplify things?
I keep meaning to try this out, but the demo looks great - http://www.jtable.org/
Is 0.3.0 compatible with LessJS? Last I looked at this project it had it's own "strain" of syntax that wasn't the same as LessJS.
I thought it looked pretty sensible and elegant, although a few things including authentication struck me as unnecessary and probably not suitable as framework type code. What looked wrong to you?
For one, every example is a static method call. What about namespaces?
5 - The key is to both 1) Never underestimate your potential and 2) Never forget how little you know. You'll perpetually struggle to stop sucking, yet love the idea of being able to do those things you want to do with programming. In the process, you'll surpass a lot of the people who went to school for computer sciences because you'll have heaps of applicable skills and a hell of a lot more drive than many of your peers. That's how I get by. A few of my coworkers have degrees in computer science, and mathematically/computer science-wise they absolutely are more knowledgable than me, but when it comes to solving problems, getting things done, anticipating work place needs, actually producing income for my team, etc... I have them beat. A degree can't just give you those skills. edit: I also have several years of frontend experience, which comes in handy more often than I expected at this particular work place.
Thanks for reminding me... Going to download right now.
I assumed either the project was started before namespaces were available, or backwards compatibility perhaps. It's a legitimate question though. Edit: Static calls are pretty common in modern frameworks, aren't they?
I love phpDesigner, I won't put in my shameless plug about the product though.
Some static calls are common on modern frameworks, but I've never seen a framework where all of: * Specific action redirects * View invokation * Input masking * ORM interaction Is done statically. While I've seen #3 and #4 at the most basic level (in Symfony 1.0 almost four years ago now), #1 and #2 are almost outright. The redirect code made me cringe - this is the kind of PHP that makes programmers make fun of PHP.
I see where you're coming from. As of symfony 1.4, quite a lot is still static. I can't speak for 2.0 - I'm still getting acquainted. I think the best selling point for this framework is what looks like a shortcoming to you. That might sound stupid, but I think a ton of PHP programmers would be right at home with this style of code. It looks easy to be productive with (Probably why so many shops love PHP - It's just fast to write). The redirects for example are extremely intuitive. If you don't mind me asking, how would you go about the redirects?
i've been using the yii framework for that kind of stuff. the gii tool inside of it will generate all your models and crud operations for you automagically, just have to give it a valid table. The crud stuff uses CGridView in yii which does pagination, sorting, filtering, searching, and all that fancy jazz; and it includes easily modifiable buttons for view, update, delete.
Actually, all core classes are namespaced under the Laravel namespace, and follow the PSR-0 conventions for classes in sub-directories. However, the commonly consumed classes are aliased out of the box for convenience. The aliases can be controlled in the main configuration file.
I love it! Until now I had no way to recompile a stylesheet on the production server (rarely needed but still useful). There's no way I'm installing node on my server, but this should work.
Looks like 0.3.0 was designed to be compatible with LessJS. The syntax was changed to match the official one.
For a junior/entry-level position: - HTML, CSS, basic JavaScript - you don't have to be a pro, but you shouldn't feel totally lost when looking at a javascript file, either. - Basic version control - preferably Git, but if you're familiar with the concept, you can pick up any system with some practice - Basic OOP, basic security best practices, a good general understanding of PHP5 - Ability to think out/plan how an app should work - again, doesn't have to be perfect, but you can't just be throwing things together. Alternately, if you suck at this, you'd better be good at following directions of others. Actually, you should be good at that, either way. - Ability to problem solve and utilize whatever skills and resources you have to find an answer - Clean, well organized code. If you're just starting out, it's probably not going to be perfect and super-efficient, and that's fine, but it does need to be clean and well organized, and consistently formatted. This will make everything you do so much easier. To keep that job, you need to: - Be willing to learn and step outside of your comfort zone - Be willing to accept criticism and admit when you don't know something - Not have to be told something over and over before it sticks - Show consistent progress and improvement and a desire to improve yourself - Not be afraid to ask questions or ask for help - Don't hesitate to take responsibility, whether it's responsibility for getting something done and then doing it or for owning up to the screw-up you made.
I've used [jqGrid](http://trirand.com/blog/jqgrid/jqgrid.html). I use the javascript version of it (free) but they also have a PHP component (costs).
I also recommend this, been using it for years. It's got lots of features, including syntax highlighting and code completion (even for things like jquery, cakePHP, etc). Plus you can customize it with all kinds of plugins. 
This may fit better in another subreddit, but since we're on the subject... Are there any big advantages of using LESS over COMPASS (in terms of the CSS authoring itself, not necessarily compiling it)? 
same here. I've used it on both mac and pc, works like shit on both. I don't know wtf they did. It randomly goes black, the cursor will be blinking on the wrong line, huge chunks of code become invisible. I gave up on it when I found Komodo.
Komodo will do code completeion for cakePHP
I use Komodo Edit. I've had IDE before, but there wasn't anything in it I actually needed. Edit works just fine for me.
Are you building a web application or a web site? If site, then go jQuery, and for that I recommend jqGrid. jQuery is more markup based, and easier to crawl. If application, then go ExtJS, as it's much more integrated than jQuery + UI, and you will save a lot of time, especially if you use Ext Designer. ExtJS is $329 per dev for an unlimited license, unless your app is GPL, in which case it's free. 
You'll be fine with IE7+, Firefox 4+, as well as webkit browsers Chrome and Safari (this includes the mobile versions for Android and iOS respectively).
* HTML, CSS, basic JavaScript - you don't have to be a pro, but you shouldn't feel totally lost when looking at a javascript file, either. HTML is relatively straightforward. I wouldn't be able to discuss the finer points of the latest and greatest new HTML5 tags, but I figure I grok common-use HTML well enough. As far as CSS, I'd just say that I'm not a designer. I can do CSS for what I typically need to do, though occasionally with a few hiccups, but I have issues with color and have used blinding yellow terminals (color-coded for different uses) without thinking anything of it, only to have others comment about how they had no idea how I could stand it. I am not good with color. As far as JavaScript, I'm not lost looking at it, but while I generally understand the language, I feel like I'm only effective if I have access to jquery. &gt; Basic version control - preferably Git, but if you're familiar with the concept, you can pick up any system with some practice I use svn on my own projects. I do this because while I get that git is the new hotness, it seems more likely that I'll encounter svn in the real world - open source projects notwithstanding. I also work alone, so certain advantages git has over svn don't apply, though others do. It's a trade-off. &gt; Basic OOP, basic security best practices,... Basic OOP is a given, since I have some experience in other languages from college days that used it extensively (*cough*Java*cough*), so I don't have the same "aversion" that it seems some PHP devs still might have towards PHP's implementation. Basic security - sanitize all inputs, parameterize all queries, sanitize all outputs, salt+hash your passwords (use bcrypt, not md5), use CRSF tokens, don't put anything sensitive in a cookie... this is all I could really think of off the top of my head, but I think it covers the basics. &gt; a good general understanding of PHP5 I think this is the real meat of my question. What constitutes "good general understanding"? Which areas do I need to know? Is it a matter of understanding how the language itself hangs together syntactically? Is it some combination of understanding string, regex, PDO, datetime, and array manipulation functions? Where do you draw the line within the language? Obviously you can't expect someone to have every function in the language memorized, but you also can't get by with just knowing how to find and reverse some chunk of a string. This is the part that I really worry about, because I don't know that I know "enough" functions and functional areas of the language to be good enough, because I don't know where the "good enough" marker is for such a thing. 
I'm not a hiring manager, but I've been a junior PHP developer, and you already know a lot more than I did when I started. I'd say you're in a really good position. A portfolio of finished sites and/or personal projects might be a good idea to show something concrete; "good" understanding comes down to having the application and being resourceful enough to actually make something. You don't need to memorise function names, after all; that's what Google and online manuals are for. If you can start with a general problem, break it down to smaller specific problems, and implement code to make it work in whatever language is required (PHP may not end up being the best fit in a lot of cases), you really shouldn't have any difficulty at all by the look of your responses. It's unlikely that any job you take is going to have a perfect overlap with your skills. You'll end up reading Linux/BSD man pages, PHP flavour-of-the-month framework docs, Perl CPAN docs, that sort of thing; if you're confident you can *pick that stuff up* as you go, you're going to do really well!
&gt; you already know a lot more than I did when I started. I'd say you're in a really good position. You have no idea how good it is to hear (well, read) someone say that. It really scares me that I won't be able to get a job, and knowing that someone else, someone who has been there, has confidence in me is a really good feeling. &gt; A portfolio of finished sites and/or personal projects might be a good idea to show something concrete; "good" understanding comes down to having the application and being resourceful enough to actually make something. My problem with this is that I don't know where to go from CRUD. I tend to doubt a project which amounts to "so I used CI to throw together this basic blog/forum/reddit-and-or-stackoverflow-clone which shoves stuff in a database and pulls it out when needed" is a really good example. &gt; You don't need to memorise function names, after all; that's what Google and online manuals are for. You don't need to memorize function names, but you also can't get by without knowing what PHP can do. I don't want to be the guy using `substr()` to figure out a file extension while everyone else shakes their head wondering why I'm not using `pathinfo()`, or why I wrote a regex to convert newlines to `&lt;br /&gt;` tags when `nl2br()` exists. I could have been clearer, but I didn't mean "have every function in the language memorized" to mean that I could recite every function and it's arguments off the top of my head, but I would like to know what areas of the language I need to know cold, which ones I just need to generally know exist, and which areas I could get by without acknowledging their existence at all. &gt; break it down to smaller specific problems right down to a level that PHP can spit them back with standard functions I think I'm looking for a general definition for what you just referred to as "standard functions".
You sound like you're in a pretty good place to start out, then, to me. You're probably right on the VCS, too. Most big companies are likely to be using SVN. In answer to your question, yeah, syntax, data types, functions, arrays.... basic concepts and constructs that apply to any programming language, and a familiarity with PHP's syntax for them. PHP has a crap-ton of built-in functionality... probably too much, to be honest, and it's unreasonable to expect anyone to know all of that, but you should know basic functions for manipulating data (srings, objects, arrays, date/time) and performing common tasks like reading/writing to the file system, interacting with the database (PDO), sanitizing and validating user input, that sort of thing. Oh, and you should also be familiar with SQL to the point of being able to write basic queries and do table joins. There will be a lot of instances where your ORM of choice won't entirely cut it and you'll need to write your own queries. 
This, except don't update with GET, instead use POST.
&gt; I tend to doubt a project which amounts to ... I hear you, but it doesn't really matter. If you actually *make* something, even if it's just a WordPress plugin or some JavaScript experiment or something, you're probably already doing what a lot of applicants won't. Show it to the interviewer if he's technical and talk excitedly about how you made it work and the problems you overcame doing it. Watch the expression on his face as he thinks, "*Finally.*" &gt; I don't want to be the guy using `substr()` to figure out a file extension ... You're going to make mistakes and do things wrong. Completely unavoidable. That's why you're going for junior roles; your salary will reflect that, as will the necessity of code review from a senior developer. As long as you don't get pig-headed when someone points out an inefficiency or poor style in your code, it won't be nearly as much of a problem as you think, particularly if the code *works*. You are likely to be by far your own worst critic. The problem with telling you what you need to know "cold" is it depends so incredibly often on the job. Any hiring manager or senior developer worth his salt is going to understand that it's important to hire people who will be able to pick up whatever's required for the project of the month. The best I can do is tell you what you're almost certain to need at some point, which would be: * All the basic 32-bit math operators and functions, unless you're doing statistics or something requiring arbitrary precision integer math, in which case you should learn bcmath or a similar library as well. * Most of the string functions * Most of the array functions * MySQL and PostgreSQL interfaces * XML and JSON interfaces (95% of the time SimpleXML will be all you need) * `header()` calls and how to control HTTP responses with them * Encodings (UTF-8, ISO-8859-1) and escape functions (`htmlentities()`, `htmlspecialchars()`) That's really about it. In each job, you'll find there's at most about 20% of the PHP manual that applies to what you do day-to-day. Building up *practice* and a *general understanding* of programming is what you need to do, and you seem to have a pretty good handle on it already.
As a noob, which IDE you use shouldn't matter too much, as long as it doesn't make you *less* efficient.
On number 6, it is good to learn multiple ways of doing things (i.e not *just* PDO), if only for the perspective that it gives you and the ability to choose the best method for the job thereafter. You'll find plenty of people who tell that *X* is the best tool for the job, but well, people aren't *always* right.
1. Convention 2. Less typing than the alternative, autoloading. 4. Use PDO or MySQLi. Escape your output appropriately. 5. No, creating websites is simple. Computer Science has nothing to do with it. 6. If you don't understand SQL then there is no point in learning PDO.
As someone who hires junior/entry-level web developers - I completely agree with the above. I also make sure that anyone I work with knows [this](http://www.w3.org/community/webed/wiki/Main_Page) and has the ability to do a google search.
hmmm...you will pirate a software because their support isn't up to your standard. That's a bit harsh. Isn't it? Do you take off after gas up your car because the cashier won't give you a blow job? Jeebus! The shit logic of some people.
I think it deserves more attention. Pretty cool tool!
1. Security has nothing to do with it. Do whatever works best (which would normally be methods in appropriate classes). 2. OOP helps you encapsulate data and methods in fewer variables. It's a better way of thinking. 3. It's called *Markdown*. [Here is the PHP version](http://michelf.com/projects/php-markdown/). If you want a live editor (like RES on reddit) use [PageDown](http://code.google.com/p/pagedown/), by the Stack Overflow people. 4. Keep HTML and PHP as separate as possible. (Read up on MVC.) 5. You don't need a CS degree to use PHP. No decent university even teaches PHP, they teach *computer* programming, not web programming. However, a CS degree helps tremendously with a lot of concepts in PHP or whatever you use, in terms of writing good, efficient, maintainable code. 6. It's fine. It's probably better to start there, to be honest, save all the hassle of procedural mysql, security flaws, etc.
A few thousand visitors a week is a drop in the ocean. Even basic shared hosting can handle that. When you're getting 100,000 visitors a day, then you might need to make some improvements. However, it's always good to know about this stuff for when the time comes. APC is an opcode cache which at a basic level means it caches the compiled version of the PHP scripts for speed. I'm baffled why this isn't standard in PHP (oh yeah...they're trying to sell you their Zend crap). For pages where the user is logged in, you could still cache most of the page and use PHP to output the user details, e.g. `&lt;?php echo $username; include 'cache.html'; ?&gt;` Make sure the server is sending all text content gzipped. CSS, Javascript and your HTML output should all be compressed. Finally, if you're using Apache the one thing that made the biggest difference for me was increasing `MaxClients` to 250 and reducing the `KeepAliveTimeout` setting to 3-5 seconds instead of the default 15 or more. Edit: forgot to say, those apache options are in apache2.conf which is in the /etc/apache2/ folder on my system.
But if it's not triggering a refresh, then why is it showing different content? It should just show the same content it did before.
Doing this with cookies is a big overhead. Once you set a cookie it gets sent to the server on *every* request. As soon as a user has voted on more than a handful of posts, they could be sending KB of data on every page load. You should link the votes to a user account. I don't know of any site that allows voting without an account (too open to fraud and spam). Then you can store userid/postid/vote in a table.
jsfiddle is a tool for sharing code snippets, not a tutorial site. I'd recommend the Mozilla docs - https://developer.mozilla.org/en/JavaScript
any openings?
Great tips, thanks!
Screw the list of skills. Bring me some sample source code you've written and do a simple problem solving test during the interview and I'll look at it. If you're a junior developer then you'll mostly be told what to do and how to do it, so the most important aspect is that your code is easy to read and maintainable.
If you're in Israel - than definitely. In any case, feel free to send me an email (eli.sklar@gmail.com) with some details - I do have some clients that are OK with working with a remote dev. 
I'd like to think when buying the software, I'm also buying support. If a company doesn't want to reset a trial to a potential customer then how do you think they treat their actual customers? I'd take a guess and say poorly, as they've already got your money.. *edit: This is based on previous experience. For all I know JetBrains have great customer service and chadcf just got unlucky
&gt; Show it to the interviewer if he's technical and talk excitedly about how you made it work and the problems you overcame doing it. Watch the expression on his face as he thinks, "Finally." OP, You'd be surprised how often I can do this... in that it's not very often. I can count the times on one hand, and we've been interviewing for months. Your basic run-of-the-mill PHP dev applicant won't know half of the things you know, and will have a "portfolio" consisting of brochure websites created for clients here and there. It sure *sounds* impressive to say that you created a Drupal site, except for the technically minded, who realize that a brain-dead chimp could throw together a Drupal site. It **is** impressive to write your own Drupal plugin. It **sounds** impressive to hear that you use jQuery/Mootools on all of your sites, but it **is** impressive if they submit extensions and plugins that they've submitted themselves. See the difference? It's in the "type" of side projects that you decide to pursue. I personally believe that side projects define what a person is like outside of work. If you think of programming as as 9-5 job, and have no interesting projects to show for it, then I'm not interested. I account for the fact that not everybody has time for side projects - I personally don't, at least, not to fully commit to any, but I do at least have something fresh and interesting to show (plugins, etc). I am also of the same opinion as tyrmored: When I was first hired on as a PHP dev, I was definitely more junior than you. I picked up javascript in under a year, and *really* got to know it these past four months. You're doing just fine.
That's the point of trial period, isn't it? If you don't like how they treat you then just don't buy it. There are plenty of options out there which doesn't include the rights for you to pirate.
Yes, in the Toronto area... (for me, anyway)
Although true, it's a good place to test your knowledge. I forgot to word it correctly. &lt;.&lt;
I doubt it. The Php parser already uses `label:` for goto. I don't think the parser would be smart enough to handle that and allow for json style associative arrays.
Yet another PHP framework.
Not sure about the idea of using many simple queries in preference to fewer more complex ones. The overheard will be pretty bad, particularly in environments where the database is not on the local host. Doctrine seems to do quite a bit of this sort of thing and it generally just makes it harder to optimise SQL queries. It would probably be fine for a small record set however.
Got any front-end experience? We're in Toronto. You don't need to be a whiz at UX, just be familiar with box model and fleshing out an API. ... great, now I don't want to share my salary :P
Toronto, Canada, mid-level front/backend, ~$60k Although living in the burbs reduces my cost-of-living by a lot.
If you're someone that teaches yourself, you've already demonstrated enough base knowledge to "know where to look".
Italian because Leonardo was always my favorite ninja turtle ;)
I'm at work so can't explain further, but you can use Zend Framework's Zend_Barcode library to render Code 128 barcodes. http://framework.zend.com/manual/en/zend.barcode.objects.html
Looks like a promising lead (especially with the BSD 3-point license). I'll give this a shot. *Follow Up* It worked great! Thank you.
Do you know basic programming? The classic test to find out is the following: Write a program (in PHP) that prints the numbers from 1 to 100. But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz" instead of the number. Done? Then the following should be checked off * Basic OOP * Know how HTTP headers work, and how you can manipulate them. * Encodings (UTF-8, ISO-8859-1). * JSON (and XML). How to output and process input. * PHP's PDO extension (If you don't know this it wont be a problem as long as you know you'r SQL). If all of this clears, you are **100%** ready for a junior position.
Ha, im an 'advanced/senior' programmer who regularly works on big budget projects, and i forgot that pathinfo() exists! BRB while i go modify a few functions for extension detection ;) PS. A mediocre programmer with confidence will go a hell of a lot further than a great developer with none. Work on your self confidence - that will get you hired - you can continue focusing on your skills and knowledge after you get hired. Remember: if it is possible to do, it's possible to learn - trust your ability to learn over your 'hard' skills to get the job done. Ive completed more than a few projects successfully by remembering this simple truth.
I tried a bunch of them... they all sucked so I made my own.
To me, skills are not that important. Skills can be learned pretty easily. Of course you'll need a basic understanding of programming concepts (including at least a cursory knowledge of OOP), but I'm not looking for anything strong for a junior position. What I care about is two fold. First, I care about passion. I want someone who's not only willing to learn, but who puts forth the extra effort to go out and try to learn on their own. That shows me commitment and a drive that when you come aboard you'll be easier to train and teach. Not to mention that you'll be more likely to become a better developer over time... Secondly, I look for personal skills. Are you a complete introvert? That's not a good sign. But are you easy to talk to and will you work well in a team environment? That's what's important to me. Even the best person is a bad choice if they can't work well with a team... To me being a Junior dev is not about doing menial tasks. Even the most junior devs on my teams own projects and make decisions. I want it that way, because the only way to get better is to expand yourself. I firmly believe in the mentoring process (basically like an apprenticeship). One of the things that I try to do is have even the most junior people become mentors to other devs (possibly even higher level) because I really want them to get used to teaching and mentoring. I am a big believer in *The best way to learn is to teach*. So I'm looking for someone who's got the social skills to be able to teach and learn at the same time... That's what's important to me...
Crappy solution... if PHP isn't reading the cookie then you aren't setting it correctly.
We highly value SQL at my job, but arandomgeek has covered the rest well. From your comments, you sound a lot more capable to me than a lot of people I see applying for high-level jobs. If your job doesn't last, it'll be because you leave for a higher offer. 
Agreed. The MySQL bias is showing. Better databases will eat complex queries for lunch and you generally want fewer, more complex queries.
Sublime Text 2 in combination with Flashfxp (auto upload).
Hey uhm...i don't know how to say this. Would you be interested in giving like simple tasks of your everyday php-workload to a total stranger who would then proceed to try and code it for the sake of gaining experience? Of course without the guarantee of returning working code. That sounds incredibly intriguing to me, as the total stranger. Does it to you?
I'm gonna give this one a shot thanks.
&gt; "Why does PHP need this"? I think perhaps a better answer is that, PHP doesn't need this. No language needs this. This isn't useful to a language, it's useful to users of the language. Why do the users of PHP need this? Because PHP has such a smooth learning curve, you'll find non-professional and semi-professional developers scattered across a very wide range of skill levels. Most of these people are self-taught, they started with adding a simple hit counter to their website- they changed it slightly. Than they moved over to drupal, they installed some mods- maybe they made a minor change to the mod they downloaded. That's how a lot of people learn PHP. These people will most likely never formally learn the language as developers might with a different language. By having a good, solid best practices collection, these people could be helped avoid some major downfalls.
`&lt;?php for($x=1;$x&lt;=100;$x++){ if(($x%15)==0){ print "FizzBuzz"; } else if(($x%5)==0){ print "Buzz"; } else if(($x%3)==0){ print "Fizz"; } else{ print $x; } } ?&gt;` 
It's true that a lot of the problems appropriate for this collection are solved by most frameworks. I'm not sure that there are enough left to justify the existence of the wiki, but I tend to think there are. Two examples I keep thinking about: safe password storage, and recursively operating on directories (SPL). (the examples are just that: examples. not proof.)
That's a great start. If I saw that on a resume I'd certainly give you a call. My company is hiring a few PHP devs starting in the new year. If you're around Baltimore, Maryland, PM me and I will send you an application link.
15 - 25 bucks an hour I would think.
Something else that's really important for a Junior Dev is the way they deal with being wrong or not knowing something. If you're defensive or try to act like you know things that I can tell you don't, you won't last long.
I'm not from Baltimore - I'm not even American - but thank you!
* Decent understanding of PHP, HTML, and CSS * Knowledge of basic OOP (classes vs objects, public vs private) * Familiar with SQL (including JOINs and understanding SQL injection risks) * Ability to Google effectively * Strong problem-solving and debugging skills The last two are very important - if you have these, you should be able to pick up more advanced skills as you gain experience and eventually move up into higher positions. The key here is that you need to show potential.
what do you mean by header manipulation? Like redirecting and defining content types?
I looked into the Janrain API docs, which were much more idiot-friendly and was able to succeed in making requests and parsing responses. &gt;which, in PHP for example, is pretty much as simple as a cURL and some parsing on your end depending on what you're trying to do That's exactly the kind of basic, general knowledge I've been needing, but have found lacking on the web. However, I've begun to piece that all together in the past few weeks, and I think I'm getting the hang of it. I had the same problem with learning how to make AJAX requests. Thanks for the link! 
I've ended up opting for the database model. Using Janrain to let users log-in through outside accounts, then setting session variables to keep track of their profile info, logging their actions in mysql under the profile id. It's working pretty well so far.
if (his_butt != a_hole_in_the_ground &amp;&amp; shit != shinola) { hire }
I like it. Let me know if you need any help with it. Probably an installation of MediaWiki somewhere would do the trick. I notice (anecdotally) that a lot of people who end up developing PHP don't necessarily come from a Computer Science background, but fall into it from other directions. That means that sometimes even simple things like proper indentation and use of white space are lacking. I've found PHP.net to be a fantastic resource on the exposed functions in the PHP core, but dubious in terms of higher-order thinking about design and implementation.
define a good general understanding of PHP5, please.
MediaWiki is what I was thinking too. Probably with custom templates later down the line (for supported PHP versions, how sure we are that the solution is complete, things like that). There's plenty of room left on my Linode node both HDD and transfer-wise, so hosting is not an issue for now. There's mostly positive feedback, so I'll probably start setting up the technical side soon (&lt; 3 days). What I have zero experience with is the community side of things. I'm not even sure if there's a need to "organize", or just build it and they'll come. I'd appreciate any help on this front.
I stopped reading right around "NotORM can actually run faster than a native driver". It **uses** a native driver.
In North American money, I earn approximately $24 per hour in the (probably) lowest paying city for this type of job in my province. I've been writing php for a year now, frontend coding/designing for far more years. When I freelance, I earn $65 per hour. Clients don't bat an eye at it, and I could probably charge more by now. I would never earn that much in an office of course. I do freelance work so I can afford to get drunk and feel bad about my salary. I develop websites for my employer with Symfony 1.4, otherwise write custom php for individual tasks. I'm in charge of quite a bit (Some of it is a bad idea), such as writing our best practices for use of Symfony in our work place (It's a new addition, relatively. No one really knows what to do with it besides me, and they hope to hire people to use it in the future), documenting both new and old projects for future employees, developing boilerplates for frontend tasks, and ultimately, just building the crap my team wants. Sooo yeah, that's worth about $46k per year here at far west Canada in the fun little city of Victoria. edit - This job also comes with: - Decent dental coverage (Around $500 per year in value to me) - MSP for my family paid for (worth $1872 per year) - RRSP matching to a maximum of $2000 per year (Worth $2000 per year to me) - Free lunches on Thursdays (Worth $600 to me) - Year-end bonuses, christmas bonuses (Around $3500 last year) All benefits considered, you could pretend my job is worth more like $54,000 per year. After taxes though, my earnings are more like $37,000 in pocket.
No problem, you never know when paths cross. Good luck with your search!
Did you try using it though? It still works.
[wiki.hashphp.org](http://wiki.hashphp.org) started down that road, but it looks like people lost interest. The people who know enough to do this sort of thing don't care, and the people who are interested in contributing can't because they don't know enough.
&gt;Work on your self confidence I've never been hired for a job I was actually qualified for. I get by on selling myself, then learning until it hurts.
Exactly. I think that drives from the willingness to learn, but it's worth pointing out. Thanks!
That's kind of what I had in mind. It's not very well structured though. I also have no idea what to do differently to make sure it's not abandoned again.
 header(Location: $_SERVER['HTTP_REFERER']); would be I'm guessing along the lines of what they mean there.
There really isn't enough there to even worry about structure.
Actually, it should list common frameworks and what they provide also...
GET actually saves a request when you're dealing with AJAX according to Yahoo! [Source](http://developer.yahoo.com/performance/rules.html)
I'm largely clueless there, too. Though, I would imagine that once it has a large user base, some will contribute. To get a large user base, you have to have some critical mass of useful material, so the first step would be to just gather a small core of committed contributors and get it to the point where it'd be a worthwhile bookmark for a junior dev.
sorry for posting here straight away, I usually wait and see if stack overflow have anything to offer but I'm working on a project that I need this for and its close to completion. Cheers guys
I do not envy you right now...
hah, i just stumbled across this on their site and *ran* to go post it to r/php as a first post.... 2nd'd. either way, i love this ide. totally worth full price. **TIP** when you start your trial, open up phpstorm and then look in the help menu for an option titled **Productivity Guide**. This is a handy list of IDE shortcuts that will save you sooo much time and effort, and it presents it in a fun way showing you what you use regularly and do not. [Example](http://imgur.com/SgdlT) 
I've created [phpfu.org](http://www.phpfu.org) as a google sites wiki for this purpose... 
I decided to test this against my PHP 5.3 codebase and just do a simple refactor rename of a core base class -- didn't work at all. It didn't find any instances of the class name outside of the file I was working on. Anyone know the exact status of PHP 5.3 support in this product?
Well, I'm thinking of a particular example of someone we hired as a junior. He seemed great, really eager to learn and really pushing himself, but as we got to know him better he seemed to have issues with taking advice from people more experienced than him. He wasn't really rude about it or anything, he just kind of ignored it and instead would do things wrongly. But yeah, I'm totally with you on the mentoring thing. From my experiences programming, being in environments with other good developers with frequent discussion does wonders for skill development. Problem solving ability is the #1 skill I look for in a programmer, the rest is just semantics right? Edit. Any thoughts on hiring designers? I've had extreme issues with designers, it seems like either their good at design and unable to ever grasp the basics of programming needed to make a template, or the opposite.
I'm using it right now and man did it require a bunch of RAM the first time it opened a project. It actually ran out of memory and opened a box requesting I assign more (it had been set to max out at 800MB by default) I bumped it to 1600MB and watched it actually hit 1100MB before it settled down. Anyway, that was only the first time it loaded up a project. Great IDE.
An all-public class that mixes business and display logic is really ironic.
Integrated UML editing is not something you see very often in PHP IDEs. That's a compelling feature all on its own.
Most IDEs require a pretty generous workspace the first time they index a large project.
Depends on what else you know. If you only know PHP and nothing else about the big picture, prolly $18 - $20 / hr
http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html
Skimmed that, read the results too. Says it doesn't matter. This is a large problem on our server, we have 8 processors, and 32 gigs of ram, this seems to be the one thing that is slowing us down over heavy load. I'd like to fix the problem somehow, thanks for the article link though. *EDIT* Reading the article more, maybe you were telling me not to use concat?
&gt;This is a large problem on our server, we have 8 processors, and 32 gigs of ram, this seems to be the one thing that is slowing us down over heavy load. Are you certain that's where the problem lies? You might want to install a profiler to find the exact source of your problems. Have a look at xdebug and the like. The problem might also be in the query itself, so you should analyse the query and see if you can improve it. Also, does the results change a lot? If not, I'd suggest you'd have a look at caching. &gt;EDIT Reading the article more, maybe you were telling me not to use concat? Lol, that's definitely not what I was saying.
1. Is the type column indexed? 2. I don't know how MySQL optimizes these queries, but you could try sorting only the first table, then using the result in the join like this: (SELECT ... ORDER BY type) LEFT JOIN ...
&gt;LEFT JOIN {url_alias} ua ON ua.src = CONCAT(\'node/\', n.nid)'; Why are you concatenating anyway? Surely you should be using indexed integer IDs for joining tables.
Although doing some sorting in the application instead of in the database can be a good thing, that should be a last resort. It's more likely that your query would perform very well if you put an index on the `type` column.
The data can change very often, it's an instant search box, and each letter they type can run a query. I just heard about a profiler today while googling MYSQL performance. I didn't see one built for Drupal, so I can look for a stand alone one.
Thanks for the reply, I'm not great at mysql yet. I have a table called node, and the column "type" exists in that, how would I add an index to it and improve this speed?
xdebug is an extension for PHP. While you run your scripts, xdebug will log the amount of time the script takes for all of its operations and dump it to a file for you to examine. That way you can easily identify the bottlenecks of your scripts. 
1. I don't think so. 2. A little over my head.
got it, will look for it now.
Found it, reading up http://xdebug.org/docs/install it's a new thing to learn, but I hope it helps.
http://www.tizag.com/mysqlTutorial/mysql-index.php
I see that it looks easy to create the new table and index, but how do I tell my code to use the new index?
MySQL does it automatically. When it's indexed it's a "special" column when accessed. Can't remember how it works exactly, but you don't need to call anything special in the PHP code.
You might want to try [phpMyAdmin](http://www.phpmyadmin.net/home_page/index.php) as a GUI for working with your database.
Can you paste a desc table for each of the tables? (node, url_alias) The correct solution is fixing your table design and/or SQL.
A database will use the index automatically if it thinks it will improve the performance of the query you are executing. The real problem here is you've designed your tables and queries in such a way that the database engine cannot optimize them. Keep it simple. Don't use expressions in joins (like calling CONCAT). This sort of operation is very fast if you do it right. 
It's worth pointing out that the main example in that article -- that simple string concatenation causes an entirely new string to be created in memory -- doesn't apply to PHP. In PHP, $foo .= 'bar'; actually modifies $foo in-place, so you don't run into the Shlemiel problem. A better analogy for PHP might be the decision to use 'foobar' vs. "foobar". Technically, single-quoting a simple string allows faster parsing than double-quoting it, but the difference is so insignificant that it's hardly worth mentioning. Then again, when I'm bored and not feeling ambitious enough to tackle larger problems, I sometimes make a game out of finding tiny insignificant optimizations. But I'm just weird that way.
Well, the point of the article was not the Shlemiel problem, that's just an interesting little parable. The point of the article is, if you're replacing one method of doing something with another method of doing the same thing for only a slight gain, that gain is likely to be so insignificant as to have any effect at all on the performance. 
Personally I think an important thing to know how to do is setup a development server on your machine. I've had arguments that developers shouldn't need to know how to do this and that it is a sysadmin job but I say that's bullshit. I would also suggest you know basic unix commands so that if you need to say upload files, you can change file permissions if need be, delete temporary sessions, grep etc. Edit: As in an Apache + MySQL + PHP etc. 
Installed it now, but the last bit of the installation process "zend_extension = /usr/lib64/php/modules/xdebug.so" broke the websites. Nothing worked, so I am trouble shooting now.
Right. It's about understanding that some performance optimizations are worth the effort and some aren't. But, being that this is the PHP subreddit, I just wanted to put the basic examples of that article into a PHP context. It stated in big bold letters, "Every decent programmer knows that string concatenation [...] is deadly poison in loops," but that particular issue doesn't actually apply to PHP.
I use phpmyadmin. Thanks.
http://imgur.com/a/89AAk
Wait.. You're not doing this on a production server, are you? Also, the default root for extensions should already be set, so your file paths should be relative to that. 
Fair enough. 
Noooo... I would ^never do that..... &amp;#3232;~&amp;#3232; (we don't have test servers)
&gt;(we don't have test servers) Then how do you do development?
I really don't want to reply to this... I may be banned from r/php. Very carefully is my answer. I work from home, the company hasn't provided any test server situations, and I make backups before I do any work. I use dropbox as a sort of revision system as it tracks every change I make when I hit save.
But surely you test the scripts prior to throwing them on a production server?
Most of what I use is pre-made code or modules. I seldom write code myself which connects to the database. If it's PHP code I'm writing, I'll put in an if statement which only shows true if it's me.
I don't understand why you have all those CONCATs. Chances are they're doing one/all of three things: confusing the optimiser, confusing the cache (I know some functions will prevent result caching e.g. NOW() but maybe they all do... not sure), preventing indexes from being used. Difficult to say without an EXPLAIN (even with one it's not always obvious). The first thing I'd do is break down the query to it's most basic components - remove all weird functions - and see how fast it runs without them. Are you caching results at all to e.g. Memcache or Redis? This will help A LOT even if the underlying queries still kind of suck. There are some mysql config optimisations that can help - check the result cache is enabled (not just the query cache). Also if you have a lot of ram you can push the key buffer and query cache up to larger sizes (mysql workbench makes it simple to play around with this things). Generally speaking 10k results aren't that many so if queries are slow I would say you probably do have a problem with either your schema or your query (most probably the query).
But you must run them prior to putting them on a production server. If not, I'm seriously questioning your work methodology. 
The previous versions (I'm using 2.1) did refactoring anything just fine, are you sure you selected "search entire project"? It supports PHP5.x just fine.
Install PHP on your local computer you'll save yourself lots of time and headaches: http://www.apachefriends.org/en/xampp.html "XAMPP is an easy to install Apache distribution containing MySQL, PHP and Perl. XAMPP is really very easy to install and to use - just download, extract and start." Any website you are working on, run an identical copy on your own machine. Make changes there and if they work, upload them to the server. 
Are you using it with code that contains namespaces? I didn't select any options -- just whatever is the default. Loading up a project, waited for it to finish indexing, and tried to refactor. I assume "search entire project" should be the default otherwise the refactor option isn't much of a feature.
Well, your datatypes look okay, but why is there so many multiple indexes? Also: * Try defining as view, to better cache that data * Try simplifying the query to check for a pitfall (remove COALESCE, WHERE, ORDER, etc.) * What size of data are looking to? If is it big, all those concats could be a huge perf hit * IFNULL is simpler thus quicker than COALESCE I’d try this: http://pastebin.com/XZRmvX8C You already have temporary tables in your query, so sub-query won’t kill you. P.S.: I am a FROM at the end of line 8
The option to add indexes should be easy to find in there. In any table, you want indexes on columns you use for comparisons and joins. You should be able to retest your query in phpMyAdmin and see improvements if you've got it right. This type of query should be instantaneous. 
&gt; Probably something like: “Use Phpass”. There, it’s not that complicated. Then again, it very well could be much more complicated than that. But that all depends on your target audience. As someone who makes websites for private networks, I need to be absolutely sure there's no danger of an extension, framework, or 3rd party library phoning home or creating a vulnerability exposing the network to unauthorized users, let alone crashing the site. I'd like not to have to constantly audit these things. I'd also not like to have to redesign a site from scratch at the last minute when the framework or extra 3rd party library we've depended upon all this time can't be made to work on a newer and more secure PHP (or even OS) version any time in the near future. A collective knowledgbase of best practices is great and all, but it's certainly _not_ best practice to "use this or that plugin" as a default answer. I think "best practice" should absolutely be: "study and become familiar with the fundamental language, and never rely on 3rd parties."
Junior level in Indianapolis doing full-stack PHP/JavaScript/templating making $36k/year. I need to move to California, damn.
In the top part, replace $website with $_POST['website']. I gotta say, it's code like this that gives PHP a bad reputation. 
Yep this pretty much. Its why people right awesome tools and then there is no documentation for the tools.
This thing is a brutal resource hog. Even of successive openings when it shouldn't really be indexing anything. Does it ever calm down? It seems like some cool features, catching unused variables and such, but it's nothing I haven't seen with add-ons in notepad++, is it? 
Does a Linux terminal, by default, actually interpret utf8? Perhaps there is other conversions going on here. What happens if you run: echo "select entry from employee where id=3640" | mysql -h localhost -u root --pass='password' --default-character-set=utf8 testdb The default output from the mysql command is latin1, not utf8. 
replace: $db=new PDO("mysql:host=localhost;dbname=testdb", "root", "password"); with: $db=new PDO("mysql:host=localhost;dbname=testdb", "root", "password", array(PDO::MYSQL_ATTR_INIT_COMMAND =&gt; "SET NAMES utf8") ); And eliminate: $db-&gt;query('SET NAMES utf8'); See if that makes a difference. If you're still having a problem, do a dump on the string with: for($x = 0; $x &lt; strlen($row['entry']); $x++) { echo ord($row['entry'][$x])."\n"; } and let us know what ordinal values it's dumping. Please also provide a table schema using: 'SHOW CREATE TABLE yourtable;'
It's garbled when I do it that way. I have my Putty terminal set to utf8 encoding, so I would think it would be displaying it correctly. Maybe the data is getting entered into the db incorrectly, though I've done all the obvious stuff, set forms to accept-charset='utf-8', html pages to content="text/html;charset=utf-8", and any other places I could find to force utf8. Thanks, this is helpful, at least I have a new angle to research. 
Thanks, I already posted an update earlier with the same thing. Actually, it was me that added the website part to the copypasta code, so I'm the one to blame. 
Notepad++ is a text editor. PhpStorm is an actual IDE for people who need professional-grade tools. Don't confuse the two.
Right, I get that. I was trying to figure out what features people we're so in love with as to necessitate the fact that it's a brutal ram hog and slows everything down. I'm not familiar with it, so I'm sure I'm missing something awesome that makes it worth the cost. Clue me in. 
OK, I think you guys have led me to the issue. I had "converted" my table to UTF8 by running an alter table statement: ALTER TABLE employee DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; However, when I look at the table definition I see: CREATE TABLE `employee` ( .... `entry` text CHARACTER SET latin1, &lt;------------------ .... ) ENGINE=InnoDB AUTO_INCREMENT=3869 DEFAULT CHARSET=utf8 So hopefully if I fix that it will start working correctly. Thanks!!! 
Sorry for coming off like an asshole. [Here is feature list](http://www.jetbrains.com/phpstorm/features/index.html). The IDE really shines when you have a project with hundreds of classes.
I have run into a number of issues regarding 5.3 support. I still think it's a bit flaky at this point. Of the tickets I have submitted all are set as "fix for" version 3.0.1 so possibly soon support will get better.
nailed it.
I should've probably specified stuff instead of just referring to the other thread- but yeah, I did mean with a good understanding of (my)sql, (x)html/css and at least basic understanding of JS.
Despite some idiosyncrasies, such as hard-coding the use of the RPM utility into the install script, their Linux-native SQL Server driver for unixODBC seems to be well-supported. I usually hate Microsoft for their intentional non-compatibility with open source software, but between this, and their extension/PDO driver for PHP, I gained some respect for them. If you're wondering the relevance of this to PHP, it's that this driver enables the stable interfacing of Linux-based PHP applications and SQL Server, which can solve many headaches. Previously, you had to make use of [FreeTDS](http://www.freetds.org/), which wasn't a picnic.
When you JOIN on the CONCAT you're preventing the index from being used. See the [MySQL Performance Blog](http://www.mysqlperformanceblog.com/2007/10/16/be-careful-when-joining-on-concat/). MySQL converts numeric arguments to [binary strings](http://dev.mysql.com/doc/refman/5.0/en/binary-varbinary.html) when CONCATed. If any part of a CONCATed string is a binary string, MySQL treats the CONCATed result as a binary string. `nid` is an INT, so the result of the CONCAT is a binary string. However `src` is a character string, so MySQL won't use a the result of the CONCAT against an index on `src`. You need to [CAST](http://dev.mysql.com/doc/refman/5.0/en/cast-functions.html) `nid` to a character string (CHAR) before you CONCAT it: SELECT n.title title, n.type type, COALESCE(ua.dst, CONCAT('node/', n.nid)) url FROM {node} n LEFT JOIN {url_alias} ua ON ua.src = CONCAT('node/', CAST(n.nid AS CHAR));
Considering SQL server is a business centric piece of software and a large amount of servers use Linux, their development of a Linux driver is one of necessity and more financially motivated than altruistic..
Without a doubt. But, that it was done for business reasons is no basis upon which to discount the action. They probably could have sold the driver for a large enough sum that only large businesses could afford it, but instead they are distributing it for free. I'm certainly no fan of Microsoft; I think their business practices have damaged the growth of personal computing, as Apple's have as well, but I still must credit them when they make these sorts of gestures.
As a professional developer you always have to make the decision on where to draw the line between 3rd party components and custom development. There may be some applications where that line must be at a really low level. When that's not the case, you get a list of things that have worked for other people. You basically buy development time for trust.
Why are you using symfony 1.4 over 2? 
It's a still solid framework and it's required at work. I do use Symfony 2 in my spare time too. I'm moving a project to it from 1.4 currently. Initially I was kind of put off by the lack of documentation, but the occasional trial by fire has actually been really rewarding, largely due to reviewing source code that's so much higher quality than what I'm capable of. Such a fun framework.
PHPStorm is my current favorite IDE. Much better for refactoring than Eclipse PDT. I will definitely check this out ;)
You can't agree with it being a financially motivated decision *and* say it's a gesture.
It's financially motivated to produce the solution. It's a gesture to provide it for free.
I'm still angry I missed the 50% sale last week :( I don't want to buy it now
Even it they sold it for a large sum, they would've been forced to release the source code (GPL), which makes it pointless.
That's simply not true. The driver isn't GPL, and in fact it's very "non-free" in the sense that one cannot modify the driver under the license. Though, something odd that I've noticed is that the license for the driver explicitly states an expiration of its applicability, which has already passed. Technically, it's unlicensed at the moment.
Was posted earlier today.
Also why you don't see Microsoft taking credit for the kernel, despite being the biggest single contributor to the project.
I'm curious about whether you have a source for that claim or not. It's not something I've heard before.
I was unable to get it to setup a project from existing sources properly, I wanted it to connect to the web server but it only seemed to do it if I specified the web root as the project root - which is obviously wrong.
I stand corrected. I originally read that in LinuxFormat, but after a bit of research the following turned up: - Microsoft is in fact among the biggest but only 7th, not first (but allegedly contributed more to the kernel 3.0 than Canonical). - Microsoft's "first" ranking comes from one of the Microsoft devs being the most prolific single contributor. http://www.h-online.com/open/news/item/Microsoft-contributes-a-lot-of-changes-to-Linux-kernel-3-0-1280528.html is the most concrete reference on this I can find, but googling for "microsoft contribution kernel" and similar terms will yield some of the other results on this (all except the article I originally read this in, sorry. I'll keep looking)
Just came here to say that I love this IDE!
1. Strike up relationships with people in foreign countries with lower costs of living. These people will gladly do your creative work (HTML, CSS, etc.) and sometimes PHP. And they will do so **happilly** for rates you would find appalling ($10/hr is awesome most places). 2. Codify coding standards and use an established Software Development Lifecycle (I'd recommend Scrum or AgileUP) and rigorously enforce this among both yourself and your teammates. 3. Rigorously unit and integratively test *everything* in your core stack. You never want to fix the same bug for 2+ clients at once. I require 100% integrative testing code coverage (nothing less) and at least 80% unit test code coverage for **every line of core code**. 4. Don't create unit tests for clients' work unless they explicitly pay you extra to do so (after you, hopefully, sell them hard on how it reduces maintenance costs, showing your own stack as an example). 5. Don't use common frameworks (like CodeIgniter or Zend) heavily in your core stack. Doing so will just entice your clients to extend your stack for you, without you. 6. Give your clients a bucket of prices to choose from. Start from something that is delivered in a very soft (non-rushed) schedule, 10% unit tested, and with a very modest SLA (like 2 days guaranteed response) for your base price. Offer cheaper packages for even less work, and a super expensive rate that you feel is overpriced for the one with 100% test coverage done in 20%+ less time than the base, and with a 8 hour same-business-day SLA. 7. ALWAYS offer this pricing algorithm to every client every time. 8. Your repeats will gradually see the benefits of paying you more and more. More work will come in at that extreme high-tier price, just wait for it. Usually by the 6th month and 3rd project most clients will be paying you probably 2x per hour what they would pay their own top coders (usually $100/hr), but this only works if you price per project and are very rational about your team's time estimates. After you get established clientele, throw in hands-on training seminars for their devs at the going rate: $1500-2500/hr/student. This is where you get out of coding for the most part during those weeks, fly (at the corporation's expense, usually; i mean, what's another $350 at these rates?) and train their staff to become better coders. Source(s): This is how I've run my business.
My bad. Did not notice that. Deleted.
50K EUR ~ 66K $ Europe, "East" Germany, Saxony
Contrary to popular belief, Microsoft has people dedicated to actively supporting Apache/PHP/MYSQL on the Windows platform. [Mark Brown](https://twitter.com/#!/markjbrown) is probably their most forward-facing member of that team. He speaks regularly at conferences, like [cPanel's](http://www.thewhir.com/web-hosting-news/100610_Mark_Brown_Explores_the_Benefits_of_Running_PHP_on_Windows). Sure you may look at it as a financial decision, but Microsoft knows that Apache/PHP/MYSQL are stable platforms with a huge backing, so they'd be silly to not be on board.
Go ahead..
Save your money... use Eclipse http://code.google.com/p/zend-sdk/downloads/list
Im using version 3 (even on Linux) and can't say anything bad about it. Very good customization options (from layout to behavior), clean and fast.
They do this since early 2009: http://en.wikipedia.org/wiki/Microsoft_Web_Platform_Installer Given that PHP has been a big player since *at least* 2002 (from TIOBE), they were a bit late to the party. But nice to have them on board and helping none the less.
Hmm, when they listed the libc/other dependencies I automatically assumed they've used/modified gpl'd code; My bad.
I've never had it use much more than 1gb of RAM (which is rare in my personal projects), why is this a problem for so many people? Granted, I have a gaming PC with 8gb, but 1gb shouldn't be a problem for anyone. I also use it at work, with a less than average laptop, working on an extremely large project with over 800 PHP files, and it runs fine using ~300mb.
You missed the first concat
It seems to have calmed down now, after having it open for a long time, it's possible it was still syncing. It's clearly much larger than other text-editors I've used in the past, but I've never really played with a proper IDE, so I don't know what's typical. 
There's some great advice here. Could you give an example of your pricing strategy (number 6)? Thanks.
Oh, you mean like the [PHP Standards Working Group](http://groups.google.com/group/php-standards/topics)?
It's too bad that it look so bad in linux, compared to windows &amp; mac, Seems like a great IDE
there are two places to set the full path to your app directory. the first is on the Deployment page, under the Connection tab, called **Root Path**. This is the path to your www root. Then click the Mappings tab and fill in the **Deployment Path**. This is the rest of the path to your app, **starting from the Root Path**. Example: App lives at: /usr/home/username/public_html/some/random/path/ Root path: /usr/home/username/public_html Deployment path: /some/random/path/ That should be all you need... Good luck.
very typical for a java-based IDE.
Rape isn't funny...except in this instance.
MySQL will use the index automatically. You only have to add the index with this SQL. ALTER TABLE `node` ADD INDEX(`type`);
I was playing around with Windows Virtual PC in Windows 7 yesterday, and decided to create a new VPC using all the default options. To my fucking surprise the default VPC created by Windows was a Linux distro! Debian to be exact. That's something I wouldn't have expected from Microsoft in a hundred years.
I really must credit Microsoft for http://php.iis.net/ When I was tasked with trying to figure out how to get our webapp to work under IIS 7.5, I cried a little... well ok a lot. 15 minutes and about 1000 dialog boxes later and bam.... phar'ed webapp under IIS works flawlessly without any code changes.
heh Using PHP 4 + SQL Server 2000 + UTF-16 == custom network protocol and raw sockets to execute db queries. it sucked, a lot, but at the time, we just couldn't figure out any alternatives.
You can do that by reading keypress events, but its just bad form IMO. Teach users how computers are supposed to work so that they know how *EVERY FORM EVER* works, instead of making them rely on the entire application / internet space conforming to them.
with a name like "instapunish", saying this is "bad form" just seems so... instapassive, considering just how bad of an idea this really is.
Ha. I created this account as a novelty account based on The League of Legends Tribunal.
pseudo-code: $('.formElt').bind('keypress', function(e){ if(e.keyCode == 13){ $(this).next('.formElt').focus(); } });
Php do not need a micro framework it already got most of the stuff you want from a micro framework souch as templating and routing and a couple of more stuff built in to the language. Edit: When i say micro framework i am thinking about something like bottle or flask. But in php terms frameworks like codeigniter are pretty sleek and smal. 
[kohana](http://kohanaframework.org) is pretty tight and has a large community. I use it for most of my stuff. Edit: looking at lemonade I think kohana is probably more that you are looking for. Regardless, I would still suggest you check it out. Edit2: oops. 
What is to prevent them from introducing copyright infringed code in the kernel and then using that as a means to sue in court? Has this happened?
We're using FreeTDS and I'm curious if you'd suggest switching to the native driver, or your experiences between the two.
Honestly, I never got FreeTDS to work. I don't recall what exactly the problem was, because I last tried it over a year ago, but I recall it being a show-stopper of a problem.
I've been happy with FuelPHP which is similar to Kohana and it works well for small sites just as well as larger applications.
I'm not sure if this is considered a "Micro"-framework, but it certainly isn't bloated. [CodeIgniter](http://codeigniter.com/)
If you are going to reuse the $stmt variable (looping an insert, for example), the first version is more effective as you only create the statement once and then just change the variables and reexecute the statement. At least that's my guess, but I prefer to do it properly and use stored procedures.
Don't make my mistake. I get paid about $15.50/hour salaried because I was happy to get a job (no college degree). This was 3 years ago so I won't really need a degree to find a higher paying job as many places take comparable work experience. I'm actually giving notice soon. I'd say that I'm objectively a mid-level developer. I charge $65.00 per hour for freelance. 
Because that second query opens you up to SQL injection if you're not *incredibly* careful. If you completely control what is in the $data*n* variables - and by that I mean they're generated completely by your application using literal constants - then you might be ok, but if there's even a chance those variables contain data submitted by a user, then you're boned. A user could inject data into a variable which contains what's called an SQL injection. This basically means that your $data1 variable contains a string which would prematurely close the query you're writing, then execute a second query with their own payload. For example, if $data1 contained the following: '; DROP TABLE users;-- Then when that variable is dropped into place in your interpolated query, the query that gets sent to the database would look like this: INSERT INTO table SET table_column1 = ''; DROP TABLE users;-- ', table_column2 [...] The database would see this in three parts: * First, the database would execute the INSERT, but would only try to insert an empty string to table_column1. * Next, the database would execute the DROP, brutally murdering your users table if it exists. * Third, the remainder of the query would be ignored because `-- ` starts a comment in SQL. On the other hand, binding parameters offloads the hard work to the database. You're saying "I'm going to send you some data, and you need to sanitize it so that it's only used as a value in this particular location. It doesn't close the query, it doesn't specify two values, it's just this one thing, right here. Got it?" and the database runs off with a "Yes, Sir!" attitude and it makes sure that you don't get boned by SQL injection. If there's "bad data" there, the database ensures it can't hurt you.
ToroPhp! http://toroweb.org/
I assume by "designer" that you mean graphical/visual design? Design and Development are two different things, one is a creative approach and one is a logic approach (left brain/right brain). I do both, and I can tell you that it is very difficult to switch between the two. I do design work for 2 months, then go back to programming and I am completely lost for two days, and vice versa. Finding someone that is good with both skill sets is not easy, and you should take your time in finding a good candidate if you need someone to do both tasks. I also personally feel that you should compensate them appropriately for both tasks, but I'm not a hiring manager / owner so I don't have to worry about budgets.
Because they don't both do the same thing. Binding a parameter checks type, automatically quotes, and escapes. It also will perform server-level optimisations on the query if you run it more than once with different parameters. The second method does none of these things, and is probably vulnerable unless you took the time to escape the injected values which you probably didn't.
oh how I hate these replies... when someone asks a programming question just answer it. if the user doesn't like the UX they can leave, and take their ball too! I wouldn't call it bad form, but rather expressing an idea.
try FuelPHP, it has a smaller footprint than codeigniter...just not as many "functions"
i completely agree, but it's what my boss wants. I prefer to not even waste my time trying to figure this out because i've never had to do it before. Thanks for the reply btw. I will look into keypress events.
thank you!
[Silex](http://silex.sensiolabs.org/). I went to Symfony2 conference in Cologne this year and one of the standout talks was by Igor Wiedler on Silex. I would recommend it based on that talk alone.
It has routing built into the language?
Hi. By answering the question and not remarking on the larger picture we're possibly leaving original question poster in a poorer state then when they started -- Adding the remark gets the poster to re-think WHY they want to do it in the first place. The classic name for this is the XYProblem. For instance the poster here may not want a form to submit when pressing ``enter`` because he's trying to develop a spreadsheet/grid type application, where it is traditional for ``enter`` to move focus downward and ``tab`` to move it right. This would be a correct usage. OR... the poster could be trying to prevent an end-user from accidentally submitting a form before it's completed (sending a blank form). What he should really be asking is how to validate the end-user's data to make sure all the fields are filled before submission. This solution would catch all errors, allow the data to be entered in any order, and the standard form controls still apply.
Do me a favor, run your actual code but use these values: $data1 = "It's good to see you"; $data2 = "I've had a great time"; $date3 = "What's up doc"; And report back the results. I think you'll find it now becomes pretty obvious. You don't even have to create the table or the columns. Run the bottom line first for the more immediate effect. 
I wouldn't say we're leaving the poster in a poorer state, I would say we're leaving them with an answer to their question. it's just annoying otherwise. Take this for instance, if I ask what the speed limit on the 401 highway is I would like to see someone say "100 km/hr". I would be annoyed to see answers like "what are the weather conditions?", "is it an emergency?", "you should know if you passed your driver's exam!" etc.
Yes. `http://example.com/why/hello.php` will automatically execute whatever is in `why/hello.php` off the document root of the webserver. Surprisingly effective routing for the most part.
should also have e.preventDefault();
I think that routing is more in the web server(apache, nginx) that in PHP, since you could do that with normal .html . I guess when I think of routing in PHP, it starts with a front end controllers and is defined by rules that can be over written.
It only works with nesting, doesn't discover variables. Try something like this: .div { color: red; } .div .something { color: blue; }
Few of the actual micro frameworks have a community. The smaller the likier that it's an individual developer project. I would just look for a fancy API there. http://matrix.include-once.org/framework/shortlist And the question becomes, why what would you need a community or support forum for if the feature set is limited by design? - The only thing you should look out for is some SCM history. If it existed for a year with steady development, it's more likely to outlive another.
As with any forum, we are free to answer as we see fit, just like you are free to comment on it. Also I *did* answer his question. I told him that it was possible, and that he needed to use keypress events to do it.
True enough -- that routing does happen in the web server. However some other platforms don't do that sort of file-based routing even with apache and nginx in the front end. With PHP a front controller is optional. 
I wrote the micro-framework, [Flight](http://flightphp.com/). Feel free to contact me directly if you have any questions.
Silex is pretty cool, I recommend it as well. Igor is a personal friend of mine and he originally got me to use it for a few of my projects. There is a strong community behind this one (mostly extending to symfony) and likewise, there isn't a lack of support.
[Laravel](http://laravel.com/) popped up recently, and while I haven't tried it, the docs are very solid and it looks to be pretty well written. While it's not quite micro (Footprint of half a meg vs Sinatra at something like 150k), it isn't absolutely huge either and it might be worth a look.
well you kind of threw a general statement out and then began to berate the poster and their question, which usually leads to others chiming in at how much of a bad design or bad form something is. I just see this happen sooo much on forums, especially when it comes to UX, that it just gets to me.
The difference though in your example is you're asking for an absolute. The questions people ask are **how-to** questions and they teeter on the edge of anti-patterns so they smell of "Bad form". A better example question is: "How can I determine the speed limit on the highway without using the signs?" "Well, depending on the area, local and state laws, weather conditions, and the flow of traffic you can make educated assumptions. But why not just read the signs occasionally as they will always keep you legal?" "Well, I'm trying to drive to the hospital because I seem to have used battery acid instead of contact lens solution. I can't read the signs!" "Intervention! I'm calling an ambulance. I know it's not the answer you expected, but I'm saving your life, and possibly the life of anyone else who will use the highway..."
I'd say that we are. We are encouraging several behaviors which have negative effects. By training the end user that the application should conform to them instead of the other way around, we encourage a feedback loop where everyone wants to differ from the norm. Bob hates that enter does not submit the form. Suzy loves it. Joe wants CTRL+N to move to the next field. Alice wants ~ to fill in the last thing she typed in that field. Pretty soon you need a printout taped to the desk for how to use it. These users get so rooted in memorizing the quirks of this application, that they fail to learn general computing. Thus they spend hours every day "using a computer" without learning how to do so. Worse, when put in a similar environment, they are then confused when their personal shortcuts don't apply to a form they are filling out on their bank website or on amazon etc. Its really a disservice to not only the developer (in wasting time implementing features that already exist) but to the people that use the form / application as well. The road to hell is paved with good intentions, and this is one such world. This is all assuming that the OP actually understands what they are asking and are taking the correct approach at solving the problem. Quite often they are not. Excel is a great example. Just browse any Excel forum and you will see that it is stuffed full of a variety of common problems which are ill suited to a spreadsheet at all. Its like going into a DIY forum and posting the question "How do I scrape this paint off with my hammer?" Its an absurd question, and no one would answer it with "Well, if you use the claw end and you are careful..." because doing that makes no sense.
"What is the best way to make the ENTER key act as the TAB key on my html web form using PHP or JavaScript?" sounds like an absolute to me.
I wouldn't say I was berating the poster. I was certainly strongly stating why I think he shouldn't do this. You could say I was berating the idea, but at the end of the day its difficult to say something is a bad idea without coming off like you are berating the idea, if you are going to look at it that way.
Forgive my ignorance, but doesn't the MySQLi class prevent multiple queries from executing within one execute() or query() ?
This is excellent info, thank you. How do you find clients? It sounds like you work with some big time companies, but how did you get your foot in the door to begin with?
Because the parameters have to binded to the place holders. The place holders are the '?'. Using this will make your query faster and prevent sql injection. Here is an example of a dynamic bind parameters that bind an unknown amount: Values passed: https://github.com/ProdigyView/ProdigyView-Core/blob/master/system/PVDatabase.php#L1161 Method: https://github.com/ProdigyView/ProdigyView-Core/blob/master/system/PVDatabase.php#L1402 
what if I don't want my form to function just like amazon's? what if I want my form to do a backflip when the user presses the letter 's'? what if I want purple rainbows to shoot out of a donkey's ass in a musical animated gif if I detect their IP address is in southern california? I'd be hard-pressed to get an answer for those questions here. just use the claw to scrape off the paint. next question please.
I'm not actually planning to get a full time job- or anything like that- any time soon. After a few years of having work on and off I recently went back to college. Thus far I've been kicking major ass (Averaging all grades so far it's roughly 9.3 out of 10), it's really going far too well for me to currently consider stopping that (Also since college isn't financial suicide in the Netherlands). I might consider something for a few hours a week, but frankly I'm also not actively looking for that at the moment. I was mainly curious.
TLDR: people want to be idiots, help them do it. Pass.
People want answers, give them to them. Pass. (What are we passing?)
Not an IDE user. Can't warm myself up to non-console fonts and delayed display. That's also the snag with Java based editors, where not even font hinting works per default. And there are some more fiddly things with this release. While you can configure a PHP interpreter with some back and forth; you can't easily set up other versions. I have my alternatives all in one directory (php505, php510, php520, php54b) but since PhpStorm only accepts directories for PHP, not binary names, you can't utilize them (what's the point in such config dialogs). Homedir spamming with ~/.webide10 is also not very contemporary (Hello, XDG_CONFIG_HOME). Autocompletion is nice, but not super speedy. The xdebug evaluate expression dialog is kind of clumsy (which is a shame, because debugging features are the only thing I'd even consider an IDE for). The help looks sufficient though (doesn't explain how [why not] you write PhpStorm plugins in PHP though). And you can't have any nice editor features like piping selected content through some commandline scripts etc. The code menu and macros might make up for it, but look like it took a while to accustom to.
I've been following [MicroMVC](https://github.com/Xeoncross/micromvc). The project seems like it's heading in the right direction and has a number of forks/followers on Github already. I think this could be a great project with the right developers involved.
well maybe not but it is pretty simple to get the url and assign it to diffrent functions. 
FTFY http://kohanaframework.org (not .com)
It looks like you're right (I tend to only use PDO, and I prepare everything, so I guess I'm out of practice here), but it's still a good habit to get into using prepared statements to stop similar problems like improper escaping.
Oh absolutely. I just wanted to confirm that I haven't been thinking crazy thoughts all this time :-)
At the very least, you made me play with mysqli for the first time in recent memory, so it helped me out too!
This has nothing to do with php.
Have you considered making the form flash? For something this odd, it might be your best bet.
Because if you have to execute multiple inserts, you can prepare the INSERT statement, then perform a loop using bind_param and execute: foreach($array as $data){ $stmt-&gt;bind_param('sss', $data); $stmt-&gt;execute(); } Testing has shown the performance difference between multiple separate insert statements vs. a single insert with multiple value sets is negligible. I have no citation for this. However when you consider the added protection against injection and the logistical hurdle it would be to prepare a proper INSERT with a possibly unknown multiple amount of data, the looping through a single prepared statement multiple times becomes more attractive.
yeah, sorry for my ignorance. js and jQuery are beautiful things. 
unfortunately, I have never learned actionscript or flash :( JavaScript did the trick though
It isn't a big deal. People starting out sometimes have difficulties in separating the technologies. Many of us who have paid our dues often take it for granted.
I would argue that even if you have complete control over the creation/lifetime of the input parameters, you should never embed them unless that creation/control is *local* to the query. Otherwise, you run the risk of someone changing how the input parameters are created without realizing the implications.
I am sorry for the lack of information, but my form already catches all errors. The form indeed updates records on an SQL database. The request for ENTER to TAB; however, was made by the President of the company I work for. He is very picky and anal and wants to get his hands on everything I do for the company. When he tested my application, he kept hitting ENTER and my program would echo the Error and tell him what fields he didn't fill in. But he just didn't like that i guess. Ignorantly said that would probably be easy to fix and when I couldn't find the answer right away I came to you guys. JavaScript worked wonders though.
Bikeshedding: http://en.wikipedia.org/wiki/Parkinson%27s_Law_of_Triviality
&gt; but rather expressing an idea But I did the same thing and you're complaining about it! Besides, I was really just referring to instapunish's writing style not living up to his/her name. 
[this](http://1.bp.blogspot.com/-EfJLeJZFyX8/Tm5RcD8YTtI/AAAAAAAAAAw/oVfkcwN5hZk/s1600/littlepigs.jpg) will explain why that analogy doesn't work :(
He's a good guy, we went to dinner on Thursday night and had dirty burgers at an Irish pub, in Cologne.
&gt; You basically buy development time for trust. Good way to frame it. That old "time vs trust" decision we're all constantly faced with. IMHO, it might help visitors to add a preface or note about the importance of researching and weighing trust in 3rd party solutions vs development time saved.
That's pretty minor in your worries, an " OR username = "admin" for example would let you login as anyone, spend money, expose/deface/delete your users data etc.
What about Ubuntu, the server Linux that most people use?
Isn't Kohana just a PHP5 port of CodeIgniter (which itself is PHP5-only now)?
If you (like me) are concerned about marrying your company to a framework that will continue to be actively maintained indefinitely, I think there's really only one sensible choice in the PHP market, and that's Zend Framework. I am not sure what you specifically use as criteria to determine what makes a framework 'micro', but ZF is very much a glue framework, meaning you can pick and choose from the dozens of components it includes and use only those you require/desire. It also allows you to inject your own (or third party) components into the mix and do anything you need. It's very actively maintained by a professional crew and is probably the best bet for PHP framework longevity. There are other well established and well maintained frameworks out there, like Cake, etc, but having used that one at least, I'd sooner use Zend going forward. Also, I find getting forced into a lot of the conventions of all-in-one frameworks sometimes annoying. Cake's models are crap, that is all.
That's based on the file system and the web server, not php.
I've go with [PHP Objects Patterns &amp; Prac](http://www.amazon.com/dp/143022925X/?tag=stackoverfl08-20). I haven't read the other 2, but this book is definitely worth investing in
[Lithium](http://lithify.me/) is awesome. I ask really stupid questions on their IRC channel #li3 all the time and everyone has been the greatest about answering immediately. 
Though I hear amazing things about this book and am buying it myself. I have to ask is the OP completely new to PHP to the point that maybe they should start something that goes over the basics first? Quick quote from an amazon review. " In terms of content, this is an excellent book. It is probably a little too heavy for absolute PHP beginners, unless you're already well-versed in other modern programming languages. For people who only know PHP, or who don't know any languages and are looking to start with PHP, you should make sure you have a strong grasp of procedural PHP before heading this way. "
It started off that way but has been reworked twice since the fork. 
Pardon my ignorance, but what are the advantages for using something like this? Couldn't consolidating all of your code into a single file get a bit unruly?
&gt; The people who know enough to do this sort of thing don't care, and the people who are interested in contributing can't because they don't know enough. It's not that everyone who knows doesn't care, it's just that sometimes you get tired of trying to be the loudest voice in the room when fifty other people are all shouting at the same time.
Nice. This functionality should really be added to mainline, the way it just drops return values is horrible. Or at least pull a Perl and stick it in `$_` or something.
I have to politely disagree. PHP is quite a capable language if you work with it properly. It's not right for every task, and I agree that javascript is a great language to pursue as well (and perhaps even more misunderstood than PHP), but PHP isn't the little toy people make it out to be. I think it's just too easy to do really bad things with it. The internet is absolutely saturated with awful PHP and people who don't care to use it for anything awesome.
Having read the book as a beginner, I'd say it was useful in pushing me in the right direction but not great as a reference for getting comfortable with the language. I mostly read it as a source of inspiration while pushing through the basics using php.net, euler project, reading framework source code, and following a starter guide on tux radar.
*PHP5 and MySQL Bible* Never read it, but I'll review it anyway. **Good** * It's yellow. **Bad** * It's also almost 8 years old now, so it predates all of the PHP good stuff. * Programming books that look like phone books are usually lousy, especially if they have three or more authors. *PHP and MySQL Web Development* Read it, not a bad book. **Good** * It's MySQL coverage is better than any of its contemporaries--it was one of the first intro texts to recommend using the `mysqli` extension instead of `mysql` * It devotes four good chapters to security. **Bad** * It's getting old. It was obviously written before PHP 5.3 and the rise of the Web frameworks. * It definitely skimps on object-oriented design. * Kind of phone-booky. *PHP Objects, Patterns and Practice* Own it. Great book, but--as mentioned elsewhere--not the best if you're a true newb. **Good** * It's remarkably well-written. Zandstra is a good communicator and teacher. * It object-oriented *design*, not just object-oriented programming. Most PHP books teach the small-scale mechanisms of OOP--how to make a class, how inheritance works--but *PHP O,P&amp;P* teaches how assemble classes into an application. Patterns are introduced in the context of a problem. Different solutions to the problem (in the form of [design patterns](http://en.wikipedia.org/wiki/Software_design_pattern)) are examined. The consequences of design solutions are weighed. It does a good job of explaining what makes applications well-designed (loose coupling, separation of concerns, flexibility, etc) and why we should care. * It's fairly up-to-date, covering things like PDO and unit testing that are central to PHP development now. * It is a real book, not a phone book. Apress books aren't big blocks of paper that occupy your reference shelf. They're meant to be read. **Bad** * It isn't an introductory book. If you don't understand at least the basics of programming you won't be able to follow it. It's a great second book, but not a great first one. * It doesn't thoroughly cover the "webby" or "databasey" side of PHP. It won't teach you about sessions or HTTP headers or parsing XML or any of that important stuff. The assumption is you already know. While there's a good chapter on database patterns, it assumes you already know enough about SQL to create and manipulate a well-designed, normalized database. For a true newb I'd recommend [*Beginning PHP 5.3*](http://www.amazon.com/Beginning-PHP-5-3-Wrox-Programmer/dp/0470413964/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1322721696&amp;sr=1-1) by Matt Doyle. It's a solid intro to modern PHP. Follow that with the Zandstra book or a good database book.
christ, not again
I can't imagine a general tutorial that would just teach you everything you need to know about PHP. I think you should pick something specific (probably related to what you want to make later on). For example, find a tutorial about making a log in script, a contact form, some pagination etc. Make sure you understand what they do and try to expand the code on your own. That having been said, the best resource you will ever find is of course http://www.php.net and while I have never looked at it, I imagine http://www.w3schools.com/php/ would be a good reference.
It hasn't. The opposite happened. Microsoft was initially forced to contribute 20k lines of code to the kernel for device drivers they wanted to use which were already under the GPL.
http://thenewboston.org/list.php?cat=11 It won't teach you everything, but follow along with it and you should learn enough to know you want to do in the future. The worst thing about PHP is that you learn how to make a site much, much earlier before you learn how to make a secure one. But until you're going into production, don't worry too much.
LOL that you think PHP simple and people shouldn't read books about it. Some of the worst php crimes I've seen (pattern-itis, overuse of ORM, object abuse) have been by Java programmers thinking they know how to write good php code.
I switched to Max OSX from Ubuntu for this reason. To sumarize: Linux is for servers, Max OSX is for productivity, and Windows is for gamerz. They are all great OS for their intended purpose.
deja vu. i've seen this question a thousand times already... i bet we will see another "which is best" type questions.. 
[This might be worth checking out.](http://net.tutsplus.com/articles/news/diving-into-php/) Nettuts+ usually have pretty okay tutorials, methinks.
My advice is to actually type up the tutorials as well. Not just copy and paste, but type them in, run them, make sure they work. Even if you think it's something you won't need. Doing so will help you to remember what you learned later on and also get a better understanding of it, especially if you take a bit of time and play around with the code.
Read Head First PHP &amp; MySQL Here you go: http://headfirstlabs.com/books/hfphp/ Using this HeadFirst guide you can easily learn PHP and how to connect and retrieve data from MySQL Databases. This book has many examples which makes learning fun. **If you prefer learning online, then w3schools is the way to go.**
*Sigh* I guess I should learn something about unit testing... 10 years PHP experience and never have done them. Seriously, if you could sort your points based on importance, would testing be at the top? BTW thanks for great advice.
You can covert pdfs to images using ImageMagick: `convert example.pdf example.png` You can also use OpenOffice to covert documents to other formats, I'm not sure if it'll covert it to an image, but it can do pdfs, so then you can just use ImageMagick again. Bit of palaver though. 
I really want to use an IDE instead of N++. I tried Netbeans and PhpStorm but their interfaces are so slooooooow. Is there a trick I don't know to make them work like, well, a normal software ?
w3schools is a terrible reference, ignore it like the plague. Much better: http://net.tutsplus.com/tutorials/php/the-best-way-to-learn-php/ http://net.tutsplus.com/tutorials/php/learn-php-from-scratch-a-training-regimen/
&gt; Autocompletion is nice, but not super speedy really? I find that when I used Netbeans or Eclipse in work, its ridiculously slow in comparison to PhpStorm. Most of the time its quicker to look up the class definition yourself than let netbeans finish loading auto complete suggestions
Yeah I use it on Ubuntu and Mac OSX, looks a bit crud on Ubuntu but you get used to it
[Netbeans](http://www.netbeans.org) + [XDebug](http://xdebug.org/) (search for a tutorial to meet your needs) Step through some requests, see whats going on, see where things are being called from. Makes it so much clearer.
[ZendCasts](http://www.zendcasts.com/) [list of all tutorial videos for easy searching](http://www.zendcasts.com/index/) Note that the ZendCasts guy is waiting for Zend 2.0 to be released, so the latest casts are him exploring non-zend stuff that he finds useful. Skip back a few months, or search for something you'd like help on.
shift/end/home productivity my ass :( 
Completely new to PHP? Head First - PHP and Mysql Really, the whole head first series is good for people just getting into programming.
PHP is actually difficult to do well. Simple to get something working, hard to do it right.
[Example #1](http://uk3.php.net/manual/en/language.operators.logical.php), take a look at $f
C++ port: #include &lt;cstdio&gt; int main(int argc, char *argv[]) { bool a, b, c, d; a = false; b = true; c = a or b; d = (a or b); printf("A: %d, B: %d, C: %d, D: %d\n", a, b, c, d); } Output: A: 0, B: 1, C: 1, D: 1 PHP's behavior is ***sooo ass-backwards*** on this simple and accepted (for **decades**) boolean logic, it's almost worth forking the language just to fix it!
It gets worse: From the manual: $a = 0; $b = 'G'; $c = false; echo $a == $b ? "true\n" : "false\n"; echo $a == $c ? "true\n" : "false\n"; echo $c == $b ? "true\n" : "false\n"; Output: true true false
This is completely acceptable. Loose typing is a blessing and a curse. === would take care of all of these. 
`or` has [lower precedence](http://php.net/manual/en/language.operators.precedence.php) than `=`. On the other hand, `$c = $a || $b;` would work.
You obviously lack the basic understanding of what prepared statements are. I pray for your company's sake that you're a junior dev and "the [wo]man in charge" ;-)
Wow, that's awful. Perhaps you can give them suggestions on how to do dynamic type conversion on a loose-typed language to make this give the output you expect. Also, out of curiosity, what WAS the output you expected? From the example, I sortof expected the result that was given. When you know that ($a == $b) is going to force $b into a type conversion, and that there is no number 'G', it's going to equal 0. Perhaps the right tool for the job was ($a === $b)?
For the lazy, basically the "OR" keywords works differently than two pipes "||". If he had done $c = $a || $b; he would have been fine. On a personal level, I'm glad I prefer || and &amp;&amp;, so I've never had this issue, but it's certainly interesting.
Caveat emptor: definitely examine a Head First book--any Head First book--before you buy one. Some people love these books, others find them completely unreadable. I've tried a couple of Head First books (*HF Statistics* and *HF Servlets*) and couldn't last through more than a few dozen pages in each, despite a couple of hours of work. I found the excess imagery, typographic eccentricity, and frequent callouts very distracting. Some people love them though. YMMV.
I don't have a formal education in it, but I would classify myself (on a scale of n00b to ten) as a 5 with PHP and a 6 with MySQL.
It's a PHP archive, not all the code in a single file. edit: And this is how the content of the archive looks like https://github.com/fabpot/Silex
Part of my job currently is taking bad PHP and making it work. From some of the scripts I've seen, you can do some really heinous things if you don't know what you're doing.
If you know anything about the topic they are useless, and will bore the hell out of you, because they're really geared for HS kids or first years in college that don't have a clue.
Then go with PHP, Objects and Patterns as someone else said, it'll be a lot more beneficial.
ehh, not understanding precedence is a real WTF. Now if you want to get into an argument about why || and OR aren't on the same precedence level...
Is this supposed to be some sort of pseudo-_bestof_ for SO, or did you actually have something intelligent that you wanted to discuss?
I find php.net my go-to resource for most tasks. I will generally search for a specific task, such as string manipulation or image processing (maybe a known function, like strrpos), then I will end up at the php.net documentation and find comments from others which include example code. That example code can be used as a guide for your own project. 
I believe burying_luck is referring to this line of the Silex site: "A microframework provides the guts for building simple single-file apps. " I've wondered the same thing about this and other frameworks like Sinatra and Node.js. Being an MVC guy, I can't get my head around how to structure these apps. Then again, it did say simple apps. So maybe this is mainly for utilities and small things?
This code can be found in the CakePHP core libraries, I've always wondered why this was done as well.
I do not recommend using or in conditions. The only time I use or is for something like: $result = query($sql) or die('sql error')
That's kind of how I started too. I think its an alright way to start because you get to see what not to do for a while before starting any big projects. There was a guy who worked in my office before me who used switch statements for absolutely anything conditional, haha. On the bright side, I learned about polymorphisms in the effort to fix that. There were multiple thousand line files just littered with identical switches.
Gah. Sounds familiar. Most of my starting experience came from messing with Drupal and WordPress sites for side clients. Then I got this job and discovered my first ever 20,000 line file and almost threw up. I used to be all "herp derp PHP can only go one way". Now I know better O_O
O'Reilly's [PHP Cookbook](http://commons.oreilly.com/wiki/index.php/PHP_Cookbook) has a wiki that might also help you.
It is for small web applications because once you want to grow it you start reimplementing the MVC pattern. But Silex makes easy that scenario, because once you start to grow your application you can easily convert it to a symfony 2 project.
I have been following the [Kohana style guidlines](http://kohanaframework.org/3.2/guide/kohana/conventions#comparison-operations) for most of my projects. Who knows how many rogue defective conditional statements I have written!
I've seen this in the Vanilla Forum code. It started out with the switch statement, and later moved to the single function method, with the switch statement commented out. I was wondering at the time if it was related to compatibility with specific PHP versions.
Ah, so if you're planning a large project, you could use this to make a nice working model of the app and then turn around and make a large app without rewriting the whole thing? That sounds pretty sweet.
Same here. I have always used || and &amp;&amp; for logical operations, but not for any particular reason other than convention. Looks like I made the right choice. It seems to me that OR is broken, if it can't be used in an expression lile this without parenthesis. Edit: not broken, after looking at some examples, but just *different*. OR is not the same as || and that simply needs to be undestood. Having said that, I would generally put logical expressions like this into parenthesis anyway, just to avoid it "leaking out" into other statements, especially ($a ? $b : $c). I left a semi-colon off a line the other day and did not get a run-time error. The line with the missing semi-colon simply sucked the following statement, about 20 lines lower, into its assignment expression. I should have documented it, as it is the first time its happened to me in 10 years of PHP coding.
http://stackoverflow.com/a/8343560/931542
I agree wiht aaarrrggh. Nettuts has a bunch of tutorials from introductions into PHP, to in depth discussion on frameworks, etc.
I wrote a bit about the danger of using call_user_func within a class here: http://www.puremango.co.uk/2010/11/poking-holes-in-php-object-privacy/ reddit comments [here](http://www.reddit.com/r/PHP/comments/c8nzx/hideous_bit_of_php_i_just_wrote/) and [here](http://www.reddit.com/r/PHP/comments/dzfzx/poking_holes_in_php_object_privacy/)
I have created a book that teaches you everything, including design patterns, XHTML, JavaScript, AJAX via JQuery, MySQL, PostgreSQL, unit testing, proper encapsulation, and a lot more. But reddit frowns on self-advertising, so Im not going to post a link here.
What's your nick? I might have seen you! :P
I know that. I'm referring to the Silex introduction. It says that it's intended for applications that can be written in a single file. Edit: Just saw the rest of the conversation. Thanks for the info!
Micro optimization. There is an overhead on using call_user_func_array, but it is very minimal. [edit] I dug my benchmarks on this one, on a 100 run, each run doing a million calls of each TestCase (call_user_func_array vs switch), on average the switch test case performs at 1853.1187295914ms VS 1866.6991233826 ms for the call_user_func_array, giving an amazing 0.01358 microsecond difference on average per call. If you look at the percentile and such, you have almost no difference (fraction of microsecond...). So yeah, quite the useless optimization, better to stick to call_user_func_array just for the sake of better looking code.
So, does anyone have any useful feedback? So far, it has just been complaints about the license and nothing about the code.
Always. Sanitize. Input.
So, does anyone have any useful feedback? So far, it has just been complaints about the license and nothing about the code.
Exactly. Prototype something in a weekend. Does the idea work? If so, switch it to the framework and start configuring the 1000+ switches :)
You don't have to sanitize it for insertion into the database, no. You probably need to sanitize it on the way out when you go to display it on the page.
Added to my to-learn now. I do that with CI right now, but it'd be way faster with something so lightweight. Thanks!
The switch statement will present the same behavior, the __call magic function is the dangerous one.
So what was the point of your post?
Don't sanitize input -- sanitize output! If you are sending user input to a database, stuffing it in a JSON string, or outputting it into HTML those all require different sanitation rules.
Upvoted for the effort in actually testing this. Good job.
Thanks for the tip. The client has moved the box to a separate network now, so I can't test that anymore. I still can't replicate the problem in my test environment either. So for now, I'll just have to let it go, and hope it doesn't come up again for any other clients. 
&gt;Don't sanitize input -- sanitize output! No, you should either sanitize input, output, or both, depending on the situation.
That's how I do it
Thanks! Looking forward to more replies. I never aligned my arrays, so I'm not sure how the masses would do so in such a case.
/Thread A thing i might add: Use tools. A thing like Zend_Rest_Client does most of the "boring" stuff so you can focus on the right error/response-handling.
I'd like to clear up a common misconception I see in every sanitation thread I read: Sanitation is not some mystical process that should be summed up in a few choice, sage words for the masses. *In your situation*, because you're using prepared statements, sanitation is not necessary for *querying the database*. However, when you go to display that data on a page, you will have to sanitize for markup. The point is, sanitize for whichever of the many possible contexts in which you're actually using your data *at that time*. It would be nice to end all sanitation threads by telling everyone to always use PHP's mysql_htmlentities_real_escape_filter_var() function for everything, if it actually existed, but it doesn't. Just use your head.
Sanitization and escaping are two different things. You can go by with just escaping all the things, and without ever consolidating formats. Sanitization just makes sense for consistency. Many people subconsciously eschew it because they have to rely on tedious APIs (yes, filter_var is useful, but still too parametric).
No comma after the last element of an array. But yeah.
yep that's correct.
C++ doesn't have an "or" operator -- how exactly did you compile this?
I agree it depends but you can't simultaneously sanitize and escape a particular input for all output situations. If you make sure anytime a string leaves your code (to the database, the web, etc) is sanitized and escaped properly than you're good. This includes not only direct user input but your own strings and data.
so $c = $b OR $a would output this? ["c"] =&gt; bool(true) 
Exactly. That's why you should always use || instead of OR if you want to avoid this kind of mistakes.
&gt;I agree it depends but you can't simultaneously sanitize and escape a particular input for all output situations. Yeah, which is why I corrected your seemingly definite answer. You should: * sanitize input if you know that the data will not need multiple sanitation methods for different outputs, either in the case of it only having one type of output, or if the data displayed is uniform across the board. * sanitize output if you know that the data will be needing multiple outputs requiring different kinds of sanitation. * sanitize both input and output if you know that there will be multiple outputs requiring different kinds of sanitation, but you know that there's some data which shouldn't be present in any of them.
Actually, the trailing comma is allowed. It is perfectly valid syntax, and it cleans up diffs nicely and makes rearranging array items easier (don't have to remember to add a comma from one item and delete from another). It has become popular lately, from what I can tell. I like it. Of course, I typically only place it there when my array is split over multiple lines (which they usually are, since its really easy to go over 80 characters).
Dear user: learn how the language operators work before making a fool of yourself.
I disagree with your first point. If you sanitize/escape input for HTML because you have no need for different sanitation methods for different output now restricts you to that decision. If you suddenly need to output to something other than HTML, you're stuck with stored HTML input. Furthermore, if your sensitization is buggy or the methods change (which has happened with HTML) then you've got problems. I agree with sanitizing input. For example, you can ensure utf8 string input is valid utf8 when it enters your system. You should ensure numeric fields are really numbers as early as possible. At the same time, you shouldn't pre-escape input for inclusion in HTML or SQL since it mangles the data. The problem, I think, is terminology. It would be better say I "sanitize" input but I "escape" output. I don't sanitize strings for use in SQL or HTML, I escape them. But the OP isn't using the terminology that way. 
I know that it is allowed - i was not pointing out an error - but where i work the CodeSniffer says i should not do it. So i don't do it. And every time i can avoid this Jenkins-guy "styling" up my code i do it ;)
They're not the same precedence level so that you can use them in different ways.
Why is that bad? It behaves exactly as documented, and in a way that seems quite sensible to me. Perhaps if you have no programming background and never think about type...
I use phpcs and it's got no issue. It shouldn't, either, since even the php manual says it's ok. As far as I know, the PEAR and Zend standards for phpcs allow it. I wonder what standard you are using complains about it? Maybe a custom one?
It is a company-coding-style. Mostly Zend but with a few "tweaks". I don't like all of them, but most of them make sense in our work environment. ("Hey you know, you can ommit that break; in the default-case..." "Nope!")
Chuck Testa?
 CodeIgniter says the same in their [style guide](http://codeigniter.com/user_guide/general/styleguide.html#logical_operators)
 CodeIgniter says the same in their [style guide](http://codeigniter.com/user_guide/general/styleguide.html#logical_operators)
Benchmark ran with PHP 5.3.6 + APC Enabled.
More like QA, but you got my point.
That's not how opcode works. The two piece of code use different keywords and functions, which results in two different opcodes output that will be cached. If you look at the opcodes for this block of code: function test($arg1) { echo "$arg1\n"; } $num = 1; $test = "test"; switch($num) { case 1: $test("test"); break; } call_user_func_array($test, array("test")); You will see the clear difference in opcodes : 2 0 &gt; NOP 6 1 ASSIGN !0, 1 7 2 ASSIGN !1, 'test' 9 3 CASE ~2 !0, 1 4 &gt; JMPZ ~2, -&gt;10 5 &gt; INIT_FCALL_BY_NAME !1 6 SEND_VAL 'test' 7 DO_FCALL_BY_NAME 1 10 8 &gt; BRK 1, -&gt;10 11 9* JMP -&gt;10 13 10 &gt; SEND_VAR !1 11 INIT_ARRAY ~4 'test' 12 SEND_VAL ~4 13 DO_FCALL 2 'call_user_func_array' 14 14 &gt; RETURN 1 You can see the clear difference in the opcodes as the switch is n#3 to n#8 (CASE to BRK), whereas the call_user_func_array call spans from n#10 to n#13. For it to compile to the same, you would need to have a syntaxical alias. Two instructions that look different in PHP, but really are the same at Opcode level, which is not the case here. 
No! Prepared statements take care of SQL injection. He just needs to escape the content when he outputs it to the page. Unless thats what you meant =)
Speaking from experience, the DOCX/ODT/etc -&gt; OpenOffice -&gt; PDF -&gt; PNG route works, but it's not something that can be done real time (i.e. it might take 2 minutes per document) so you'd need to queue them up and have a cron job or daemon that picks up the tasks and performs them in sequence. Also, IIRC, the open office API that's exposed through UNO cannot work with multiple tasks in parallel - you have to do one at a time, in sequence. http://code.google.com/p/jodconverter/ --- ninja edit
i do what you do, except for the commas on the last element. allowable in some languages, but think it breaks javascript and actionscript. or maybe i'm thinking of JSON?
Kohana was forked from CI, IIRC
It breaks IE.
makes sense then.
&gt; I can't imagine a general tutorial that would just teach you everything you need to know about PHP. I think it's very possible ;-)
[Zend 101](http://devzone.zend.com/6/php-101-php-for-the-absolute-beginner/). I'd be careful what tutorials you use to learn php, many of them are truly terrible.
But what's the reasoning behind this recommendation? Edit: silly me, it's explained just above the code example... Well, as ArseAssassin says, it's kind of a silly reason.
got me, I always use pipes.
&gt; Use of || is discouraged as its clarity on some output devices is low (looking like the number 11 for instance). &amp;&amp; is preferred over AND but either are acceptable, and a space should always precede and follow !. WTF
This is correct, but note that PHP Markdown takes care of sanitizing the user's input, removing script tags and so on.
yep, pretty much. So what is right then, || &amp;&amp; or OR AND ?
It breaks in Javascript in IE6 (maybe 7). But it's perfectly valid and works fine in PHP.
The only thing I'd change is the 4-space indents. I'm partial to 2-space indents.
They recommend this: if ( ! $foo OR $bar &amp;&amp; $baz) That has to be the ugliest style outline in the world.
&gt;on average the switch test case performs 13.58ms faster &gt;0.01358 microsecond difference on average per call. When you issue results like this, it means nothing because it's going to be different on different hardware. It makes more sense to base these sorts of results in terms of percentages. I could run the tests on a blade server and suddenly get wildly different timings.
Yeah i just threw this in 5min, but % is always better. Anyhow it doesn't change the bottom line: use call_user_func_array. The hardware will have little to no effect on which one to use, the difference will be insignificant. I just ran it to stand my point as i knew call_user_func_array was the better choice. I don't want to spend an hour benchmarking for a Reddit answer where i am 100% sure of what i am saying. As a side not, i used to run benchmarks on three different hardware (laptop, working station, server (production type)), and the hardware as little to say in must of the cases, only a handful of use case are really affected by hardware. Also as a rule of thumb, i always know that if i run a benchmark on my laptop for this kind of test, the results on a server will just reduce the gap enforcing my point.
It isn't that it's "just better", it's that it is necessary. "13.58ms faster" means nothing without something to compare it against.
That's if you want to be anal. With the information i provided, 13.58ms is enough of an informations to make an opinion, when i'm not writing a report or something serious, i tend to go for the fast answer that any decent developer will understand. But i'll edit my post...
Four spaces (no tabs) is the PEAR standard, Zend standard, and pretty much all PHP code I've ever seen in the past decade. But hey, to each his own. I'm just glad I don't have to audit/read/work on your code. ;-)
Make sure you ask about whether you have to sign an NCA or not. Some companies try to claim ownership over everything you do on or off the clock.
Thank you for giving me a heads up; that's something I had absolutely no idea about until now. That wouldn't fly one bit :)