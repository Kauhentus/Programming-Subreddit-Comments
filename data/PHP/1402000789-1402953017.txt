Silex is the only one of the lightweigth that i like.
highlightjs works too
That's what I was wondering too...
Thanks for your feedback and suggestions!
I have always really appreciated SI (or something interesting for those of us that have been following you for a while) for their designs and attention to small detail. The brick work in the background of the blog post header image for example is a really nice touch. 
Seconded. Slim is amazing for small apps.
Are you using it in just one file? Then 4 lines out of hundreds or thousands won't make a difference. Are you using it in more than one? You should then add your own layer of abstraction. What if you want to use Google instead of Yahoo? Or even add your own source? Heck, maybe another library comes around and you like it more, or Swap stops being developed. You now have to change dozens of lines of code. In the end your goal is not *get rates from Swap*, but *get rates*, so you can implement a simple `function getRate($currency_a, $currency_b)` and remove the verbosity. Adding a layer of simplification is a lot easier than the other way round. As /u/florianv said it's key to have a good architecture, even if it seems more complex in the beginning.
Cheers mate! Yer the brick work is a carry over from the homepage chem lab theme.
What kind of suggestions are you looking for? I've got a [few projects](http://www.tedious.io) that may be relevant. 
we do the same ... in multiple ways actually with the same wordpress installation we do a) use a normal blog on a subodmain blog.somedomain.tld b) use the post_type in connection with post_meta data to serve "ad-like" contents to front pages and micro sites c) use the post_type in connection with an own renderer to display magazine content under a tld like www.somedomain.tld/magazine/ i love to say it over and over again, wordpress might not be perfekt but it is an AWESOME timesafer, not only on development side - its also insanly easy to manage as a lot of content people just already know it, you dont have to teach them the quirks of "some other cms" 
If you do a quick Google search for "PHP micro-framework" then it'll bring back some of the options mentioned in this thread already. The two already mentioned in this thread are probably the most popular; Slim and Silex. My choice would be Silex. It's made by the same as folks behind Symfony and uses several of Symfony's components.
You can embed with https://gist.github.com/
I wrote a PHP script that called a command line converter when I was in high school over fifteen years ago, but if I had to do it over again, I think I would do it with NConvert (http://www.xnview.com/en/nconvert/).
hah, nother awesome library. Idk how you have so much free time... Looking forward to checking this out!
Automatically added by the IDE. Didn't necessarily feel like changing it. 
Nope - I got it working! I'm generating a table with both versions of each row, and I highlight the columns that haven't changed in green, and the ones that will change in red. Then the user can click a submit button to commit the change. Thanks very much!
What controller implementations are you referring to that would impede your use of a "Responder" style view layer per action? Controllers are just routed callables in my corner of the world. If those callables happen to be bundled into a single class because they're related, that'd be irrelevant to whatever view creating strategy they each take.
Maybe give the Disco PHP Framework a try? [http://discophp.com](http://discophp.com)
Now to disconnect the backend too... `^_^`
Then feel free to make replies to them about it? You know, I think we're in agreement, but wow are you making it hard.
If the "rebrand" is actually a "rewrite", and could be deemed to be a new product, I don't see what the problem is here? Plenty of vendors charge money for new major versions of their things in the software industry. The butthurt over someone wanting to make money off their work here is astounding. If you don't want to support their product, then don't pay for it. Simple really. 
Very nice approach, I like this, I guess it would be super fast too compared to the regular wordpress front'end
PHP5.6 is really annoying me because I really like these new features but I'm never going to get to use them. Or at least not use them for a long time 
A little out of left field, but: switch from the qwerty keyboard layout to one designed for efficiency: dvorak (http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard). Qwerty was created in the age of typewriters, literally to be as inefficient as possible. Commonly used keys are spaced far apart, in order to prevent key jamming on type writers. Since switching, I've also reduced finger and wrist joint strain as well as sped up my typing (once I rewired my brain away from qwerty).
Yeah it was, I recognized your handle. 
&gt; Even if the API is slightly harder to use, it leads to a clear separation of concerns and easier testing. I personally value the usability of a library a lot more than how easy it is to test. Wrong place to make a trade-off IMO. Still a nice library!
I'm trying to do something similar at work... Put the admin behind the company firewall and have it push changes into a Solr database that's accessible outside the firewall, then have a front-end site that pulls the data from Solr and uses it to build all the content. If/when it happens I'm going to try to get the Powers That Be(tm) to let me open source it.
I think it's great you made your own CMS. I think every PHP developer should make a CMS. I made a CMS when I first started coding PHP around 2007, and it looked similar to yours.. keep learning and eventually you'll have something modern and awesome. As it stands, you're not going to get any great feedback on the code itself.
Yeah, I know my MVC stuff is messed up. I jsut tried to split stuff up how I saw fit. Edit: Also, its not like I'm releasing it tomorrow (or probably ever) its just a learning experience
Yes, I understand that, I'm saying your time would be better spent putting that learning experience into an already existing MVC framework. You are much more employable after learning how a framework or two works than you are after putting together some hacky CMS or custom framework.
I know I'm late to the party, but I've added an example of its use in my projects boilerplate: https://github.com/sinergi/sinergi You can see it in "src/DemoApp/Listener/UserListener.php" and it is being called from "src/DemoApp/Model/User/UserEntity.php::setEmail()".
&gt; What controller implementations are you referring to that would impede your use of a "Responder" style view layer per action? If you're OK with `new Responder` in each action method, you are correct, there's nothing to impede it. But I am way onto the dependency injection bandwagon, and so using `new` inside anything that's not a factory now raises flags for me. So then one could build a Responder that has methods that correlate to the Controller methods: a `browse()` method in one relates to a `browse()` method in the other, and you inject the multi-method Responder into the multi-method Controller. At that point, I argue that the parallel methods indicate they need to be extracted to their own classes. Alternatively, one could use a ResponderFactory, and in the Controller action method call `$responderFactory-&gt;newInstance('actionName')` to get an appropriate Responder. I suppose that's OK, but it strikes me as a bit much for straightforward cases, and hides the dependencies more than it should. Finally, the fact that the routing points not merely to a Controller, but to a specific method in a controller, is one of the points I raise to support the case of splitting the Actions out to their own classes. Splitting the Action out means organizing along lines of classes within namespaces, not along collections of methods inside classes, so no structure is lost. That was a hell of a ramble, and while it might not convince you, I do hope it helps to show that I have tried to work through the problems you raise.
I ran into a 'bug' today in 5.5.12. If you try doing infinite recursion inside a `__toString` method it segfaults. A fatal error w/ line number would have been nicer :-)
Thanks for the advice. I think I am going to start learning Laravel.
Contributors put in a lot of their own hard work, as well (even more than the author(s) in a lot of cases). Closing source is like giving the finger to your community.
suppose you want to test range function By your suggestion it would be something like function testRange() { $result = range(1,100); $expected = $result; assert($result === $expected); } Which would be pointless if you use this function, function testRange() { $result = range(1,100); insert_export($result); } after you run the program function testRange() { $result = range(1,100); $expected = array (1,2,3,....100); } Now you can just add the test condition function testRange() { $result = range(1,100); $expected = array (1,2,3,....100); assert($result === $expected); } makes sense now?
Please see [this example](http://www.reddit.com/r/PHP/comments/27edlu/a_trick_i_have_been_using_to_specify_complex/ci0cuk6)
There is of course a lot that could be improved as people have already stated. So, I'm going to try and say what you could do next. * Read some books on programming. [This book](http://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X) is a great one. - Basically, you want to know about things like design patterns, code structure, common programming principles. Take a look at things like dependency injection, separation of concerns, and the single responsibility principle. Mastering those last 3 things alone will make the quality of your code much, MUCH higher. * Use a framework. Seriously, if you're okay~ish with PHP now, try pick up a framework. Learn the terminology. See how they solve certain problems and use those things in your own code. I spent the first 2 years of my time with PHP without using frameworks. I wish I'd started doing things with them sooner as simply using a framework skyrocketed my learning. --- Since you have asked though, after quickly going over some parts of your code: * You should keep PHP and HTML separate (this includes generating HTML in classes in *most* cases. * Try PDO, or if you're feeling a little more adventurous in the future; a DBAL / ORM like Doctrine. * DO NOT use globals. They are evil. They make your application unpredictable, amongst other things. [Lots of reasons for this here.](http://programmers.stackexchange.com/questions/148108/why-is-global-state-so-evil) * In a class like your ['Post' class](https://github.com/Brobin/BrobinPress/blob/master/cms/Model/Post.class.php) you might want to consider using getters and setters and making the class variables protected / private. Then you can keep your constructor shorter, and you get to type hint the data going in and have more control over it, rather than passing an array into the constructor. Also, considering the thing you're passing to the constructor there is an array, you could type hint that as an array: public function __construct(array $row) { Also of note in this class, the variable name $row implies that it will be coming from the database, and while it probably is, this class should not know anything about that. (Yet another reason to use getters and setters, you avoid this problem completely). * [This kind of thing](https://github.com/Brobin/BrobinPress/blob/master/cms/Controller/DatabaseConnection.class.php#L117) is very bad! [This is where you call that function](https://github.com/Brobin/BrobinPress/blob/master/cms/View/PageManager.class.php#L125) and [this is where the value you're passing in comes from](https://github.com/Brobin/BrobinPress/blob/master/cms/View/PageManager.class.php#L34). Similar things can be found elsewhere, but you should always sanitise your input, especially if you're not going to use prepared statements. This currently leaves you open to SQL injection. * [You don't need this line](https://github.com/Brobin/BrobinPress/blob/master/index.php#L13) and it's actually a little dangerous to have it. This is happening in a lot, if not all of your PHP files. Any file that ends with PHP code, or that only contains PHP code shouldn't have a closing PHP tag. The reason is pretty simple, if you leave whitespace or something after that closing tag by accident etc then PHP will start outputting to the browsers. This means headers will be sent, and it also tells the browser to let the user know that the page is loading for them (even if it's still processing!). [More info about this here](http://stackoverflow.com/questions/3219383/why-do-some-scripts-omit-the-closing-php-tag) * If you're going to do something like this, then you could make it more organised too. Think about other things you might want to customise. This is an example of a config file that I made for an application I'm currently working on: http://snippi.com/s/07eu5yf. From that, I also made a Configuration class that reads this file and parses it so that it can be used like $this: $host = $configuration-&gt;get('database.default.host'); $user = $configuration-&gt;get('database.default.username'); // ... --- Also, my off-the-top-of-my-head definition of MVC: * **Model**: Represents the logical structure of data, and processes in your system. This layer of the application does not contain anything about presentation, no HTML etc. It's purely focused on logic, and data. * **View**: Represents the presentation logic. Data should be injected into the view(s). It is not concerned with where the data comes from, just how to display it. This is where your HTML and whatnot is. * **Controller**: This sits between the model and the view passing things back and forth. Usually you'd start with the model. Collect all the data you need and then pass it to the view once it's ready to be presented to the user. A controller is a class that has 'actions'. On a simple level; actions usually define an interaction with a single page. For example, you would have an action for displaying a blog post. Their use in more complicated systems can be a little different, but the concept is the same, you map a route in your application to an action. So, usually step by step: 1. User makes a request. 2. Route is resolved to a controller action. 3. Controller grabs things from the model, or initiates a change in the model. 4. Controller gives things to the view if applicable. 5. View is sent to user if applicable. --- If you're not sure about anything I've said, or think I'm wrong, then feel free to ask me about it, or tell me about it etc. I think it's incredibly important while you're learning to know WHY you do things, not just what you do, so yeah, ask if there's anything you're unsure about!
Except they aren't closing the source. Sentry remains as is.
I tried to register on your site and while that was successful the social login option presented that I tried first was not. This looks great, and thank you for your hard work. Two questions: Any intention to support a single cache between multiple servers? Also, why the support for APC? http://stackoverflow.com/questions/9611676/is-apc-compatible-with-php-5-4-or-php-5-5 
I reckon he could get away with using his own creation for his own website, to show he can make something that works. If it was for a client, then you're right, it would be insane to use this in production. ;)
Just wanted to clarify my answer. You don't really do it with PHP. You just call command line programs to do it for you. Output the converted files to a static directory your web server uses and check for the converted file before conversion, and you have built-in caching.
And you think Sentry 3 isn't based on Sentry 2? Contributed work doesn't just vanish when you rebrand and version bump.
WOW. Thanks so much for taking the time to go through this so much. I just finished my first year of Computer Science classes, and learned just about everything I know about web programming on my own, so this feedback helps me greatly. I threw most of this together in about a week, and it was the first time I tried using classes in PHP, so I know I messed up the organization a bit. Yeah, my database stuff is messy. I got it work, and that's it. I think I'm oging to try and use prepared statements to fix that up a bit. After your feedback and others' I have decided that learning a freamwork would probably be a good idea. Is there a certain one that you would recommend, or onw that is most widely used/trusted? 
Nope. Still doesn't make sense. You're comparing whether the interpreted result equals the expected result. In which case: $a = array(1, 2, 3, 4, 5); $b = range(1, 5); var_dump($a === $b); // true
range is an just an example that I used to illustrate the point. In real life it will be one of your custom functions, say, if you have a function to return an array of all prime numbers between the passed arguments. So a test for it would be something like $result = primeNumbersBetween(1,1000); insert_export($result); after you run the function $result = primeNumbersBetween(1,1000); $expected = array(2, 3, 5, 7, 11, 13, 17.......997); assert($expected === $result) 
Props for originality.
I have no idea if it is a from-scratch re development or not. That wasn't *entirely* clear.
I understand that it's just an example. But if the mocking function returns the correct result, it would pass. So I'm struggling to see what the function offers? Granted, it is a Friday and it has been a long week, so I might be missing the obvious??
One way would be to have a version number field in each and every table that gets incremented with each update (`SET version_number = version_number + 1`). Then you capture the initial version numbers of all affected entities in the first transaction and check that they haven't changed in the second one. Or you include the captured version number in the `WHERE` clauses of the second transaction and check that the number of updated rows matches your expectations. The second option doesn't work if one of your `UPDATE` statements modifies multiple entities.
Parsing binary file formats via PHP, especially [atrocious ones like PSD](http://stackoverflow.com/a/769443/1233508), is not a very good solution for complexity, byte juggling and performance reasons. As [suggested](http://www.reddit.com/r/PHP/comments/27f2g4/in_light_of_github_recently_launching_support_for/ci07eqe) by /u/jen1980, you'll be better off invoking an external converter.
Good luck in your endeavors. Once you learn Laravel to a decent degree go pick up a new language. Something different. I'd say Java or C# since they're static, strongly typed languages. It will teach you a ton and you don't have to stick to it. Learn syntax first then move on to a popular framework in those languages, like spring (Java), or MVC5 (C#).
My current go-to framework is Symfony, but Laravel is another very popular solution that you'd be able to get a lot of support for. I'd take a look at the documentation for them and see which you think you'll feel most comfortable with. I know Symfony has the cookbook which is a great place to start learning it.
That's wonderful! I didn't know it was so easy to use the WordPress pieces without using the templates. For those who want a quickstart guide on how to use this beautiful piece of code: In your WordPress root, replace your index.php file with the code from the article (backup your index.php file please). Add this code to the top of your new index.php file define('APP_PATH', dirname( __FILE__ )); define('WP_INSTALL_FOLDER', '/'); define('MAX_ARTICLES', 10); Add the following code to the bottom of the new index.php file after the closing PHP tag: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;?php do_action('admin_init'); ?&gt; &lt;?php wp_footer(); ?&gt; &lt;/body&gt; &lt;/html&gt; That's it. Now you have a blank page with the admin bar if you are logged in! To further expand on this, you'll need to use an existing router or build your own so when you go to /sample-page, it will display the content for the sample page the way you want. To go about that, place this code inside your body tag and you'll see all the information you need to determine what type of content would normally be displayed: &lt;?php var_dump($wp-&gt;getPosts()); ?&gt;
i believe APC sticks with the whole apache process. Its incredibly fast (faster than memcache).
The proposed solution is not equivalent to the current functionnality because it allows only to retrieve rates with one base currency (USD) in this case. Also keep in mind that not only the rate can be retrieved, but also the date at which the rate was calculated. This is not possible with the proposed solution.
&lt;?php echo '&lt;pre&gt;'; print_r($_REQUEST); echo '&lt;/pre&gt;'; ?&gt; Should show that you have all the items present, however from what you posted you are just saving the first item: $_REQUEST['item'] You need to do the inserts for any additional items you may have as well ($_REQUEST['item2'], $_REQUEST['item3'], etc...). You could write a somewhat silly loop to go through them where you use a regex or some string function to see if another itemxx exists but personally I think this would be a good use for HTML arrays: http://stackoverflow.com/questions/3314567/how-to-get-form-input-array-into-php-array edit: to use html arrays you will need to modify your javascript so that it isn't appending form elements with name="itemx" but instead use name="item[]" on all of your item form inputs. Once you have it in an array use a foreach($item as $value) { //do your SQL inserts here }
That's strange I append the offset to the button every time to avoid that. I can't replicate it, could you press send on this form for me please? http://sidigital.co/help
Mods, this might not be the right place to post this; so apologies in advance.
I'll have to look into the social login stuff, thanks for the heads up on that. &gt;Any intention to support a single cache between multiple servers? The Redis and Memcached drivers are great for this use case. If you have a bunch of front end servers they can talk with your Redis or Memcached cluster for their caching needs. &gt; Also, why the support for APC? Although support for APC is dropping, the APCu functions are available (as mentioned by Veonik). Even if that wasn't the case I'd leave the driver available for people still running 5.3.
APC persistance depends on the "type" of PHP you're running. If you're using PHP CLI then it's basically useless as it'll disappear between calls. If you're using mod_php or php_fpm then it should persist in memory. Ideally if you're using the APC Driver you're doing it with the Compound driver and are also using SQLite or the FileSystem for long term persistence and are just using APC to keep current things fresh in memory.
Thanks :-D
Testing for a small range make sense, but I often like my tests to cover a lot of cases. I don't mind digging up a failed test to see which case is failing. This is often due to time constraints. So if you can cover all the special cases, like test for end of a year to next year, end of a month to next month, test for special cases like leap days in a single test, I prefer to do it so. The downside of this approach is that, when a test fails, it would not tell you what exact case was failed. But I consider that as an acceptable tradeoff. Regarding constructing the expected value using the function under test, where is the harm when you can manually verify the generated value? Even if it is an array of 10 days, it is much easier to generate it automatically and verify it manually than to generate the whole series manually. 
&gt; Regarding constructing the expected value using the function under test, where is the harm when you can manually verify the generated value? Even if it is an array of 10 days, it is much easier to generate it automatically and verify it manually than to generate the whole series manually. I think therein lies the danger, as long as you're happy and you are manually verifying the data, knock yourself out, but it's very easy to eyeball that data and think, yeah that looks about right. 
Isn't Eloquent an Active Record ORM? If so, then you need to switch to another library that follows the Data Mapper pattern instead, like Doctrine. I'm sure you can use Doctrine with Laravel, is there any reason you want to keep using Eloquent?
Yep, as davedevelopment said, "the human factor" might have a bigger effect if you just look at the supposedly correct results and then verify them manually. I'm not saying it won't work that way, but it is important to acknowledge the downsides. And besides that, it may not be clear whether using the under-the-test-function's results as a base helps at all (you still have to, some other way, collect the right results for it).
Of course, you have to know what you are doing. But there is another aspect. Suppose you wrote 5 tests, manually verifying the result. Now you know that the function works. A this point I usually write some more tests with a bigger data set, just to lock that functions behavior in its current form, to act it as a 'catch all' test in case I have missed any edge cases in the my manually verified tests. For these, I generate the output as I mentioned earlier and does not bother to check the full result. Because the point of these tests is not to make sure that the current behavior is correct, but to make sure that I will be notified when the current behavior changes. Does that make sense?
&gt; The CurrencyPair class is a value object, it's purpose is to represent a currency pair, while the Swap class is a service performing operations on currency pairs. I feel that this could be improved, and that you'd be able to provide a much neater interface by doing so. A central tenet of object-oriented programming is that objects consist of data structures *and the algorithms which act upon those data structures*. To separate the two is to take the Single Responsibility Principle much too far.
In this case this looks a good approach. Ie. if you use the getAllWednesdays to dump the expected array and paste it into your test, then verify the array by hand with calendar (if the "expected array" is there hard-coded, you have less moving parts and can still benefit from not to have to manually type all the keys by using the function's output).
&gt; Its incredibly fast (faster than memcache). The reason is, storing a variable in the cache, amounts to copying the variable from it's current memory (allocated by Zend) to process shared memory. When memcache does this, before it sends anything over the wire, it has to convert each variable to a type internal to it's own type system. With the exception of objects, APC(u) does not have to do this; it can copy hashtables (that's arrays) bitwise, bucket by bucket, as they are. In summary, any scalar or array variables are stored and copied in a format that is native to Zend's type system. So, APC's caching mechanism is extremely fast, for well understood reasons. None of this makes a blind bit of difference if a requirement of your cache is that it be distributed, APC(u) do not and will not support that, it would overcomplicate remarkably good software with something others are already doing well enough. The same reasoning that set it's performance apart today simply would not apply if we introduce the network overhead, any benefit of native types would be envelopped, entirely, by the complexity of distribution. YAC ------ For the sake of being unbias (I maintain APCu), and also to tell you about some really cool software ... The only thing holding APC(u) back (locking, basically) appear to be solved by an *extremely clever* cache written by Xinchen, it's lockless, it really is very very clever ... https://github.com/laruence/yac I haven't yet researched it properly, I have a niggling feeling that locking provides us something ... there are specific scenarios where a lockless cache might be damaging. In a heavily loaded situation with an expired cache entry, more contexts are going to end up doing more work, because no other context can see a cache entry created by another context while it is being written, only at the end of the write, so many contexts in theory are going to end up working harder than they would have to. A cache not only makes things fast, it makes things very easy from the perspective of your hardware, giving the website better performance, however it also has a calming effect beyond what you would expect from just storing some variables in persistent memory, because of the way locking works. This is only loose theory, I haven't had the time to test it out, I'm sure we'd all love to hear about some proper tests ... it's a very clever thing anyway, check it out ...
&gt; if you use the getAllWednesdays to dump the expected array and paste it into your test Yes, here is where I use the function I have shared in [the previous post](http://www.reddit.com/r/PHP/comments/27edlu/a_trick_i_have_been_using_to_specify_complex/). Instead of dumping the value and copy pasting it to the test file, you can dump the value directly into the test file by calling the insert_export function and passing it the value. After you run the test, the line that contains the call to insert_export will be replaced by the hard-coded array or string value.
I'm locked into PHP 5.4 on my server. Probably going to switch to digital ocean and forge next year.
I'll try address what you've said: * The word "template" is actually never used in it. Not even once. I state that the view represents the presentation logic. That is to say that it is a visual representation of *it's* model (note, not *the* model). * The only time I talk about a DBAL / ORM is when I'm recommending that CleverEagle use PDO, or a DBAL over MySQLi - purely for the advantages that using a DBAL offers; the ability to switch data source more easily, etc. As described in my post, the model is where the data (e.g. state) of the system is represented, and where transformations may be made to it (i.e. logic / business logic). * I'm not really sure where you get that I'm saying controllers are for application logic from. They are not, and I've not intentionally implied it (though I did write the original comment at 3am &gt;_&lt;). They are used to link the user with the system, and within the actions in a controller they control the link between the model and the view. Just simply passing data back and forth. Everything else is already taken care of either in the model or the view. I would like to know what you've meant by your comment, because at present it doesn't make much sense, all of your points about my original comment... are wrong. To the point where they seem to have just plucked things out of thin air. :S Edit: If this is going to get downvoted, please leave a comment saying why. I want to know what is not being agreed with. If there is some flaw in my the definition of MVC that I have actually written, then please let me know what it is!
I wrote a package and I added a comment that said "This would be better if variadic functions were here. Hurry up PHP5.6"
Also, you may get more help by asking this in /r/laravel...
Check this out: https://github.com/domnikl/DesignPatternsPHP
I knew the functionality but not the name. You learn something new every day!
Although I don't have a real answer for you, what might help you in your quest for knowledge is that most, if not all, of those are actually not specific to PHP, but other programming languages as well. If you've been googling for "PHP", try googling for "software engineering" instead.
Weird, I can't replicate it either at the moment. I sent browser details though. 
Practically every programming language does this. It also works the other way around for the OR-operator as well. If you write `true || bar`, `bar` doesn't get evaluated as the interpreter already knows the entire expression will evaluate to true anyway. I use this all the time for stuff like this $foo = getObjectsFromSomethingIHaveNoControlOver(...); if(is_array($foo) &amp;&amp; count($foo)&gt;0) { The method is supposed to return an array with the items I want but might return null or an empty array when the data I want doesn't exist or something. Just the count would yield a warning when `$foo` is `null` and this way it only executes when it is. For the OR-case you could think of stuff like $blogpost = BlogPosts::get($id); if(is_null($blogpost) || $blogpost-&gt;isDeleted()) { render404(); } else { render($blogpost); } to catch non-existant IDs and soft-deleted blogposts in a single clause. Without the short-circuiting, you'd get a fatal error for calling `isDeleted()` on a non-object. (Oh and don't judge me for this code - it's a simplified example ;) )
Nice article, and an idea I've used in the past. It's good to have a CMS that people can easily get help on, but as a front end, Wordpress has lots of issues. While I don't have this problem currently, it'll be one that I'll be running into soon: it creates very messy blog content. If there's any complexity in the post, you'll find lots of stray tags that are empty or orphaned. While, in general, it's "OK" to let them fly, it makes it hard to ensure that content on the back end looks the same as content on the (non-WP-themed) front end. Put simply, I'll be shopping for a better back end CMS.
http://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124/ Design Patterns are language agnostic, you just have to apply it to whatever language you are going to use. The Head First book explains it really well, IMO.
As /u/spin81 pointed out, 99% of these patterns are not specific to PHP and can be applied to any language. I would suggest picking up a copy of http://books.google.com/books/about/Design_Patterns.html?id=6oHuKQe3TjQC . This is the holy bible of design patterns; I've carried a copy of the "Gang of Four" book around for a decade and it is as helpful and relevant now as it was then. 
Back when I was in school, I lost points for this. I had always worked with languages like this, I took a Microsoft ASP course and my code didn't work well because I thought it did lazy evaluations like proper languages! 
It's worse when 5.3 is the default though. Keep having to remember to run php54 when I run artisan commands. I just don't get why 5.4 isn't default for the server by now
It is well known in PHP, and means this kind of construct is seen a lot in the wild: if (isset($_GET['my_var']) &amp;&amp; $_GET['my_var'] == 'whatever') { // Do stuff } Putting aside whether you should be looking at $_GET like this all over your code, what this does is prevent the reference to the get_var element of $_GET causing a warning if that element is not set. If you removed the isset() check, then a warning would be generated if the my_var element does not exist, and it would be like working with an application from 2001 all over again (by that, I mean warnings generated everywhere, but all suppressed and hidden). 
I think that it will change in the next 12 months. Laravel now requires 5.4. What is this php54 command? I can't find it.
This is kind of off-topic, but I often see `is_null($variable)` used over `$variable == null` or `$variable === null`. Are there any particular reasons to use the function over the comparison or vise versa?
`$variable == null` is probably a bad idea as that catches a lot of false positives (e.g. 0). Other than that: probably not. I suspect `=== null` is probably slightly faster because it saves a method call, if `is_null` isn't already changed to that anyway by the optimizer. I actually prefer the comparison, but I used the function in my example because most of my co-workers do, which has made it some what of an unofficial coding standard I've gotten used to. 
Oh.. seems like it [was in a "coma"](https://github.com/stefanesser/suhosin/issues/20) at the time we upgraded our servers from 5.3 to 5.4.. there were some major issues with 5.4 + suhosin back then..
`is_null($variable)` is unambiguous and is the same as `$variable === null` `$variable === null` is susceptible to be accidentally typed as `$variable == null` and can be a source of bugs. using `is_null($variable)` prevents this from happening accidently. `$variable == null` is suspectible to be accidently typed as `$variable = null` in a comparison. yoda coding it as `null == $variable` prevents this.
Ah. So far, so good for us. We came from 5.3 though and only upgraded a couple weeks ago.
Great success! Jak se mosh!
I hope the interpreter unless those function calls; that's the sort of thing we're not supposed to have to worry about.
For information, I'm working on this right now. I probably publish my work today or tomorrow.
It's particularly common in shell scripting, where `some-command || exit 1` is a common idiom (but you should probably be using -e instead).
The technical term is, [short-circuit evaluation](http://en.m.wikipedia.org/wiki/Short-circuit_evaluation). **Edit:** Well fuck me for trying to teach you something else.
This is where I get confused: &gt;To further expand on this, you'll need to use an existing router or build your own so when you go to /sample-page, it will display the content for the sample page the way you want. I'm just trying to walk through in my head how this would work for pages. First off, with every router I've ever seen, you define the least specific routes last. So (using [Slim's router](http://docs.slimframework.com/#Routing-Overview) as an example ...) your routes would look something like: //For all "book" posts or what have you $app-&gt;get('/books/:id', function ($id) { //Show book identified by $id }); //////// Lots more routes .... //////// Now at the bottom of the routes file //For all pages with a parent: $app-&gt;get('/:parent/:child', function($parent, $child) { $page = get_page_by_path($parent . '/' .$child); return $this-&gt;view-&gt;render('page', ['page' =&gt; $page]); }); //For top level pages: $app-&gt;get('/:page', function($page) { $page = get_page_by_path($page); //same as above } On the right track? Just trying to get a really clear picture of this in my mind. 
I love the way JS returns the 'last value' when short-circuiting, it really reduces some cruft. If only PHP had something similar... x = true &amp;&amp; 'ok'; // x === 'ok' x = false || 'ok'; // x === 'ok' x = false || true &amp;&amp; 'yes' &amp;&amp; 'ok'; // x === 'ok'
Nothing super-horribly jumps out at me, looking through it. Obviously it's purely procedural code but if that's your assignment I'm not gonna berate you for not writing an HTTP kernel. ;) Instead of using a series of if-else statements to call the apologize function, you should create an variable to contain the error message, then you only need to call the function once. It also might be a bit "cleaner" as a switch statement, but that comes down to personal preference in my opinion. [Here's how I'd probably write that snippet](http://pastebin.com/6gVeBuLG). To avoid having references to $_POST scattered throughout your code, I'd get all the required data and assign it to variables at the top of the code. That way, if you change where the data is coming from later on you only need to change it in one place. At line 30, you retrieve all the stocks for the user and then loop through them to see if it matches the submitted stock ticker. You could cut out that loop entirely by updating your query to check for the user id and the ticker: $symbol = query("SELECT * FROM stock WHERE id = ? AND symbol = ?", $_SESSION["id"], $_POST['symbol']); At this stage, be thinking about ways to avoid doing things more than once, or in more than one place. Don't repeat yourself if you can avoid it. EDIT: You should also consider some more descriptive variable names in some places, as well. You'll spend about 90% of your time reading code, not typing it. Keystrokes are cheap, comprehension is not. For example: * $sellerId vs. $id * $numberOfShares vs $shares * $currentlyOwnedAmount vs $db_amount This is especially helpful for my second example since `$numberOfShares` is much less ambiguous than `$shares`.
It's a little old, but Jason Sweat covers it thoroughly in my company's [php|architect's Guide to Design Patterns in PHP](http://www.phparch.com/books/phparchitects-guide-to-php-design-patterns/?utm_source=reddit&amp;utm_medium=comment&amp;utm_campaign=DesignPatternsBook). We're updating it with newer code examples with all the PHP 5.3-5.6 goodness, but the principles are solid and the code is still quite understandable. I actually bought it before I had any association with the company to help me solidify patterns.
OK, so the solution you presented works for single-user (or at least single-writer) databases. No worries.
Thanks for having a look :) &gt;I'm not gonna berate you for not writing an HTTP kernel I wouldn't know where to start ha &gt;Instead of using a series of if-else statements to call the apologize function, you should create an variable to contain the error message, then you only need to call the function once Cheers, there are still a few thing's that don't fully click using PHP after C perhaps this is one. Looking at your code though that's quite nice. So it run's through the switch - any case = true error message is assigned and then printed with the bottom if statement. Is this purely design or would performance be affected? If I'm calling the function in all them if statements, it isn't *actually* being called in the ones that aren't triggered is it, or is it? &gt;To avoid having references to $_POST scattered throughout your code, I'd get all the required data and assign it to variables at the top of the code Yeh that makes complete sense now you say it. Felt a bit odd using $_SESSION["id"] all the time etc... Should super globals generally be assigned to variables at the top of pages or is that very here and there? &gt;At line 30 Yes ha ha... I wrote this loop in a bit of a 'fuck it' moment, I'd been trying to find a better way for ages and I knew this one would work, so I went with it. Reading what you've written makes complete sense - and after writing this loop I actually got a touch more familiar with the SQL, all good Thanks very much for the input, it can be a bit tricky when you're learning alone and don't have any one to bounce off 
Second this. Also worth a look as well: http://welcometothebundle.com/symfony2-rest-api-the-best-2013-way/ I'm very happy with Symfony + FOSRestBundle + Nelmio Api Doc Bundle.
&gt; Is this purely design or would performance be affected? To the best of my knowledge, performance should be identical, or close enough that you won't have to care until you're Facebook. &gt; Should super globals generally be assigned to variables at the top of pages or is that very here and there? If nothing else, it makes refactoring much easier (refactoring, if you're not familiar with the term, means restructuring code without affecting it's behavior). For example, say you want to get your data from somewhere other than $_POST, like an API or something. Doing your variable assignments at the top means there's a single location at which you need to replace the source. It may not seem like a big deal now, but its importance scales exponentially as your code gets more complex. And happy to help! It always a good thing to have a second set of eyes on your code.
Yes, you're on the right track. You can create your own routes separate from WordPress. If you want /books/0 to pull up the first post in the Uncategoried category in WordPress, you would place this code at the bottom of your index.php. You can then replace var_dump with your own call to a render() of your choice. require 'Slim/Slim.php'; \Slim\Slim::registerAutoloader(); $app = new \Slim\Slim(); //For all "book" posts or what have you $app-&gt;get('/books/:id', function ($id) use ($wp) { var_dump($wp-&gt;getPostsInCategory('uncategorized','',$id)); do_action('admin_init'); wp_footer(); }); $app-&gt;run();
Hm, doing diff migrations of databases is an interesting thought, i'd love something like this. I tried using phinx but I found it's scope very limited in how I could create tables. Do you mostly run your migrations as raw queries to get what you want instead of using Phinx's methods?
I'm still relatively new to Phinx so currently I do both raw SQL and also Phinx's active-record type commands, but I am trying to use Phinx's methods more, or to be more precise, I'd love to use a library, or perhaps develop one to generate Phinx commands.
Why won't you be able to use them for a long time?
or just PHPCommunity.....
&gt; If nothing else, it makes refactoring much easier.... Makes sense again, new habit to get! &gt;EDIT: You should also consider some more descriptive variable names... Definitely, this is actually something that I struggled with a bit! Probably because I didn't (don't!) really know what I was doing for a lot of it, so I didn't fully understand where everything was going.... I guess its basic manners to go back and tidy up though :/ I was concious about using `$stock_entered_by_the_user_from_the_form` monstrous variable names though. 
Thanks, this is very helpful
Generally speaking, you can omit things like "by" and "the". In your example, I'd call that `$inputStockSymbol`or something similar. Consider the variables names in this function (random example from my current project) - I think they strike a good balance between brevity and readability: protected function calculateRange($batchNumber) { $batchNumber--; $start = $this-&gt;startItemNumber + ($batchNumber * $this-&gt;itemsPerBatch); $end = $start + $this-&gt;itemsPerBatch - 1; return "$start,$end"; } 
http://youtrack.jetbrains.com/issue/WI-21666 Soon.
This is essentially what I'm in the process of doing as well (however maybe a few years behind you by the looks of it). Very well done! How would one go about replacing components? Clone the default project and hack away?
Is this going to be publish in iTunes at some point so we can subscribe to it?
PHP 5.3 got closer to this with the short ternary `?:` but it doesn't work if you need to `isset` which renders the short ternary useless about 70% of the time.
http://dbv.vizuina.com/ ? I don't know.
I love codeception. Keep up the good work guys and girls.
Is that something that can be used independently of Doctrine, within Silex for example? 
[Navicat](http://www.navicat.com/) is not PHP but it can compare 2 existing databases. Navicat is not very fast while comparing, may be that's why there is no what you are looking for, PHP library for this job.
As it happens, I actively use that but I want to get away from it and manage the database through code instead
My experience with Laravel is pretty minimal but as far as I know, yes, the two are very similar as the same design patterns power them. This project culminated silently over the last 2 years through my development work writing projects from scratch and learning a lot about raw design patterns and what works the best. This is the end result. I agree with you though, in demanding environments going with a project that has a huge community backing is preferable to going with one that does not. Maybe this project will be picked up by the community and used, maybe not. That is for you guys to decide. 
Sort of, `?:` is still not quite the same though.
How much experience do you have with JS? edit: [other langs that have this:](http://en.wikipedia.org/wiki/Short-circuit_evaluation) Lisp, Lua, Scheme, Lasso, Perl, Ruby, Python.
You can use DBAL without Doctrine ORM. It's a separate library. 
Ha! thats why this issue never seems to go away... I'll see things like: if (is_null($var) &amp;&amp; empty($var) &amp;&amp; !isset($var) || !defined($var)){ ... } I love skinning a cat as much as the next guy, but thats ridiculous! 
I'm a fan of the rule "one action on one line" and no syntactic shortcuts for test / assignment at once.
Thank you for pointing out this library, I've started to try it out. I have a Silex app created and I have added DBAL to it. However Comparator expects a particular type of Schema to be passed to it. Do you know how I could create that Schema type?
Yes, welcome to the no-framework party! It's just meant as boilerplate code. Every module of it is interchangeable with other modules as this is the point of this project. I think it is a great way to promote good modules independent of frameworks and composer makes it so easy to use parts of a framework and parts of another that I don't see myself using a framework again.
Say you come from Laravel, CodeIgniter or CakePhp, how does it makes less sense than Symfony2? You don't have to learn anything, you can just jump into it using an IDE and everything is connected. I would argue that it makes more sense than Symfony2 since you don't have to configure anything in YAML.
https://github.com/ruckus/ruckusing-migrations Does not require you to use an ORM or framework. Edit: Ignore this. I just read your comment. Title was a little misleading :)
I actually started with Java. PHP was the language I went and picked up to learn web dev (becuase my experience with JSP in my CS class was horrible). 
&gt; They will have the same exact values at all times. $var will contain the return from the function under test. So it can change if the behavior of that function changes, and different from the hard coded value in $expected variable, possibly indicating a bug.
&gt;That is for you guys to decide. Laravel's community didn't just spring up by accident. /u/totwell has said on various occasions that building a strong community around Laravel was a priority from the start. I imagine that's been invaluable probably in terms of both getting the word out but also getting critical feedback from an engaged and knowledgeable userbase. You seem pretty dedicated to writing docs so that's definitely a good starting place. Speaking of docs! On the routing guide I noticed it says `View::get() - Match a HTTP GET request` ... shouldn't that be `Router::get()`? 
Can it be used outside of Laravel to generate migration files?, 
&gt; The idea is was to make a program that can read a yaml or json file with the database structure and make a database schema accordingly. A migration should be more than just the structure of the database, it's the ability to define what occurs while you're moving between versions of your schema. For example, say part of a migration takes three status fields which are mutually exclusive and merges them in to a single ENUM - logic has to take place to determine what each row's enum gets set to. In order to do this you need to be able to write code that determines how a migration acts when it moves forward to the next version, and backwards to the previous version.
With all this Laravel comparison going on, I couldn't help but notice that your facades look superficially like Laravel's facades but they seem to behave more like the Gang of Four facades. I.e., they provide an simplified interface to a more complex sub-system, yada yada yada. Laravel's facades are more of a service location thing, and what's great about them is that even though they are called statically, those static function calls can still be mocked in a unit test. Disco's facades lack that feature. They are making *actual* static calls. Which is unfortunate, because this means they render any function that uses them untestable or, at least, unable to be properly isolated for a unit test. &gt;In Discos case we use Composers autoload.php script to handle our Dependency Injection. That's not what Composer does. Composer just makes sure that all the necessary files get required. It isn't meant to handle dependency injection at all. While it does technically allow you to make a static call to a class that you haven't instantiated anywhere previously, it does not strictly speaking "inject" that dependency. You're just using your facades as global statically-accessed objects, which is an anti-pattern that many in the PHP community are trying to get away from.
That just introduces so much uncertainty into tests, which are supposed to empirically reduce uncertainty.
You linked it here before you have: - Documentation - Example usage - The goal of the project I gather that it's a PHP framework that is designed to work with Stripe API calls? It sounds like this could be extremely useful. Unfortunately your link seems to think I know anything about your project.
http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/index.html as well which probably uses that. Can generate the classes for you and everything. Edit: Found this too - https://github.com/KnpLabs/MigrationServiceProvider
You claim your framework is using dependency injection, but I'm not entirely sure the term is being used properly here - you don't have any capacity to actually inject anything. For example, with [Laravel's IoC Container](https://github.com/illuminate/container), I can specify `$container-&gt;make('SomeClass')`, and if that class's constructor has other classes or interfaces as arguments, the container will attempt to resolve those dependencies. $container-&gt;bind('Acme/FooInterface', 'Acme/DefaultFoo') $foo = $container-&gt;make('Acme/FooInterface'); //returns a new instance of DefaultFoo As far as I can tell, the closest equivalent in Disco is Disco::factory(), but that function just creates a new instance without any constructor injection, which seems kind of pointless.
Also, I don't think you're going to get much adoption if you don't have any testing whatsoever.
OP doesn't really know what he wants, or the problems that surround it.
I've been using this for the better part of a year now, and it's probably the best solution if you've got no other migration management code.
I laughed out loud when I scrolled down and saw the footer now reads "© 2011 - &lt;?= date('Y') ?&gt;". I'm a nerd.
&gt; So if you have a mysql database, you can use this program to make a yaml schema definition out out it and make an sqlite or pgsql database schema from it. I'm not sure how much work you've done into this, but this is a very difficult problem. You will either an infeasibly complex piece of software, or end up having cut out a lot of the functionality of the actual databases: e.g. stored procedures, indexes, foreign keys, constraints, etc. Doctrine sort of does this already, in that you can take yaml definitions for Doctrine entity, and have them generate database tables (or vice versa). This is, however, not anything like a database migration tool, as it doesn't address stored procedures, migrating old data, or indexes. 
&gt; I have added DBAL to it. However Comparator expects a particular type of Schema to be passed to it. Do you know how I could create that Schema type? use Doctrine\DBAL\Schema\Schema; $schema = new Schema(); // add your tables to the schema Or, you can create a schema object from a connection with the current state of your database. $conn = \Doctrine\DBAL\DriverManager::getConnection(/*...*/); $schema = $conn-&gt;getSchemaManager()-&gt;createSchema(); Check out Doctrine's [Synchronizer](https://github.com/doctrine/dbal/blob/master/lib/Doctrine/DBAL/Schema/Synchronizer/SingleDatabaseSynchronizer.php) object(s) as well. The docs on the Schema API are a bit sparse, so you might want to [read the code itself](https://github.com/doctrine/dbal/tree/master/lib/Doctrine/DBAL/Schema).
I just want to say thank you for putting this post in the right place at the right time. I knew about short-circuiting, but you reminded me for a current project that I'm working on that we're not supporting it, and need to be. Thanks!!! ;-)
Pretty cool work. Maybe you could research some of the criticisms leveled at Laravel and work in solutions to those problems inside of Disco. That'd set you apart and would provide people with more options to turn to. PS - I love those expanding bubbles in the "What You're In For" section but you're missing the code example for "IoC &amp; Facades". 
&gt; I'm not sure how much work you've done into this, but this is a very difficult problem. I know, but thank you for the warning. I only intend to cover only basic things that are common to the main database providers. And I have stopped working on it some time back, but I haven't abandoned it completely yet.
It's just my hosts way of running php5.4 commands since php 5.3 is the default. 
My host doesn't have 5.5 installed. I doubt they'll install 5.6 for ages. Then when I start my job I would be very surprised if they wrote 5.6 code on release
Please correct me if I'm wrong, but as I understand it, this can only be used within Laravel. Doctrine seems to be the best solution.
I started doing this using Silex as a front end to WordPress' API. It used React too, so 1 long-running WordPress process handles multiple web requests. We didn't fully finish it, but it was an interesting proof of concept. https://github.com/dave1010/wordpress-silex
for the first one why not just: if($foo) {
Yes, thank you for that totally and completely unnecessary explanation of something I'm quite sure we all know and understand. Now, if you would have read my previous post you would see that I don't give a shit, because its not something that I'm going to be using, and it was automatically added by my IDE. Thanks. &lt;3
Also, seeing that there is a redirect defined in the function file, you should use this to do a post-&gt;get redirect pattern when updating data. Normally once your database updates are successful you use the redirect function to load a page that reads back the same data you just updated with your post and your post page never gets delivered back to the browser. Alternatively you can just redirect them to a page with a success message instead of showing them the data they just changed. This all makes for safer and better browser back button support (ie if someone hits back or refreshes the page the browser wont give them confusing messages about reposting form data). After all you don't want them to attempt to perform the same transaction again if they hit the back button or refresh the page.
It's not exactly PHP, but you might check out [SQL Compare](http://www.red-gate.com/products/sql-development/sql-compare/).
There are some specific cases where this is really useful for writing expressive code. A big one is working across cross browser differences. For example: var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function( callback ) { window.setTimeout( callback, 1000 / 60 ); }; Here it finds the 'requestAnimationFrame' supported in your browser, or gives you an alternative shim at the end if it's not supported. Personally I also having more white space in your code, allows it to be a lot more readable. I can add in more white space and pad things out more, if the code it's self is more direct and concise. Although it really depends on what you are talking about. Magical one liners that do 100s of things at once, are confusing and bad.
I am looking for one of these with a further addition of the ability to "soft" roll back, e.g. if I add a new mandatory column in a commit, then I want to be able to soft roll back by e.g. just setting the mandatory column to one with a default value, so that my code would still work and I would get to keep all the data in the database (for diversity).
Hey, fuck you too. &lt;3 You know it's bad form, and yet you're going to keep doing it. How nice it must be to hate your coworkers.
The spacing is kinda weird, especially for comments. There's no need to make comments any bigger than they need to be, given that most of your comments are already emphasized (with asterisks) There are some odd spacing in other lines, such as: if($symbol["symbol"]=== $_POST["symbol"]) Which has a space between === $_POST but not ["symbol"]===. The if section beginning at line 65 should be spaced better as well. I'm just being nitpicky here, I don't see much wrong with the actual code. 
I believe `??` is added in 5.6? Or maybe 5.7? Basically it's the same as `?:` but with an isset check. Remember hearing that somewhere.
I am interested to see how someone who speaks Dutch feels about the Excel translations. If you are looking at the English version, why would you ever see the Dutch? And vice-versa. This is a very interesting question. I said originally that the documentation - the comments, etc. - would be the hardest part. OTOH. all of PHP.net is presently available in multiple languages. Most of your objections have to do with programmer-defined names, which do have more opportunity for confusions of that type. I don't think that's at all an issue for reserved words. I'm not at all suggesting automatic translation - I'm proposing the use of tables that would generally be contributed by the programmer(s) themselves, and a mechanism to support them. (In another reply I did note that the biggest issue would probably be performance issues around parsing reserved words, as I think those are presently compiled in.) I think your objection on abstraction applies again almost entirely to documentation. I don't know that I've ever used or seen a variable, class, or function name that would remotely be considered abstract, so I think that's looking for problems where they don't exist. We're not discussing the poems of Blake. It seems highly unlikely that a programmer would use metaphysics to define variable names, and again, it's up to that programmer or someone writing the translation tables to provide applicable substitutes. Similarly, your problem of plurality - $items vs. $item - would merely mean that if the person defined $item in the translation table, $items would show up as untranslated - it's a different variable (we _attach_ meaning to it, but it's just a string to the parser). It's possible that the human translator might put the same translated word for both, but that would likely show up as a consistency error in the table input process. So the translator (person) would perhaps use "$item_multiple" and "$item" - whatever fits the language best.
Sorry I took so long to get back here - I've been travelling, at conferences. First, I'm basically looking at this from outside. Other than the fact that PHP's parser is built using YACC's parser generator, I don't know many details. I'll say at this point that the biggest issue is probably not the doability, but the problem of speed. I assume that YACC is only being used on the reserved words mentioned below (not programmer-defined words), but AFAIK YACC is not designed to build a parser that supports a dynamically-generated symbol table - the symbols are basically compiled in when PHP is built. But if that approach is used, there is a potential explosion in the number of symbols to be processed - so the entire reserved word set would have to be handled in a way more similar to the way programmer-defined words are presently handled - i.e. more like interpreted code, which is slower. It's not quite that way, but this will do for a Reddit comment. (And yes, I know I'm not describing YACC at all correctly here.) So, having said that ... As I mentioned, in a PHP program there are essentially three elements - oops, four now I think of it - pertaining to this question - reserved words (if, for, while, static, public, const, class), PHP function names (mysql_real_escape_string), programmer-defined names for functions, variables, classes ($what_is_this, do_this_thing_here(), ...), and comments which I'll ignore for now. 1) All of the reserved words and function names are a well-defined, limited set. There should not be any serious problems with those. These words are already in tables in the codebase - that's how parsers work. This would only need a way to point at different tables for each language. That is, assuming we stay with ASCII or 8-bit chars - IDK if the code is ready for variables containing UTF chars. Creating language tables is already a natural part of many software projects. --- out of time, maybe more later. :)
Why is not possible? You could always have it return a quote object from `exchange()` that encapsulates the data related to the exchange. I guess maybe that makes the API more verbose again, but for anyone that wants just get the rate on echo, you could provide a `__toString()` method which does that, keeping the API simple when users need it to be simple. Though to be fair, this is splitting hairs over your API since it does indeed introduce another usage layer to the API that the proposed API was trying to simplify in the first place.
Very interesting, but it would be good to know what differences will there be between the free and the commercial product?
&gt; This is bullshit - you're oversimplifying a complex situation to the point of no longer adding anything to the discussion. FTFY
Could imagine that the commercial version ships with premium support or similar. Or with installation help. 
The CurrencyPairs don't depend on anything, they are simple POPO. I agreed that it should have probably been immutable but I didn't like to use reflection.
Actually with an API like that it would be probably possible to not limit the usage while returning an immutable object: https://gist.github.com/florianv/cb141b090556285b015d
It's good that there's now alternatives to the zend engine... unfortunately without a proper language specs, it's going to cause a lot of troubles. Hopefully different implementations will force PHP to write one. 
Because that's less robust. If I'm absolutely sure I'm either going to get null or an array, then yes, that'd work. If for some reason I'm getting a string or non-zero number, it's going to pass that test and cause unpredictable behaviour down the road. I prefer to weed out invalid/unexpected values and types early on so I can trust them to be right in the rest of my code. It's much easier to diagnose that first `if` yielding false than it is a "Warning: array_shift() expects parameter 1 to be array, string given" or something on a random line 3 levels deeper.
Started out as research for Facebook. So, why aren't they using it, or endorsing it?
What's with this **H**vm naming fashion?
This sounds too much like a parody...
From the blog: &gt;We will make a commercial pre-release which includes extension modules and web server integration some time in the next few months.
We use the same idiom in PHP: foobar() or die();
This is a feature of Javascript, for some reason the logical operators in JS return one of the expressions depending on the evaluation result rather than true or false: &gt; Returns expr1 if it can be converted to true; otherwise, returns expr2. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators Whereas PHP logical operators will only return true or false: &gt; TRUE if either $a or $b is TRUE. [FALSE otherwise] http://www.php.net//manual/en/language.operators.logical.php So don't try this in PHP :) The shortest you could write that jQuery shortcut would probably be with a ternary operator instead.
Protip: Given a complex conditional statement with multiple things to check, always make sure the order is from simpler, easier to check to more complex, in order to take advantage best of this feature.
Cheers - I'm not sure what you meant about the `post-get` pattern? The sell.php renders sell_submit.php and displays a message, but I'm not sure whether the browser can be refreshed and resubmitted? I'll have to check, good point :)
:) no worries. The comments were originally on the right hand side of the code, but pastebin kind fucked up everything so I had to put them in between (the ones that start with // at least) 
Yeah couple of people have mentioned the use of super globals and TBH while I was doing it it kind of felt a little sloppy but I wasn't sure if it was a done PHP thing or not because I'd read about people using them to store variables they needed. Nice one
Probably a dumb question, but do you write everything in PHP still or is the whole thing a new language?
First of all, I'd probably just use urlencode and urldecode (not rawurldecode): &lt;?php // Search string $text = "test:!@&amp;test (and)+stuff"; ?&gt; &lt;ol&gt; &lt;?php // // #1 // Output: test%3A%21%40%26test+%28and%29%2Bstuff // $encode = urlencode($text); echo "&lt;li&gt;$encode&lt;/li&gt;"; // // #2 // Output: test:!@&amp;test (and)+stuff // $decode = urldecode($encode); echo "&lt;li&gt;$decode&lt;/li&gt;"; // // #3 // Output: test:!@&amp;test+(and)+stuff // $raw = rawurldecode($encode); echo "&lt;li&gt;$raw&lt;/li&gt;"; ?&gt; &lt;/ol&gt; Running that code here: [Image](https://www.dropbox.com/s/b1naeizb1pdxnmi/urlencode.PNG) And to the problem: **I think your preg_replace is wrong**. I tried it, and it does not remove the "&amp;", "+", ":" and "()" signs. You could make it easier on yourself and just use str_replace: // Example: str_replace(["&amp;", "+", ":"], "", $string);
Probably not really production ready as they say it supports "some" core functions.
I prefer using "empty()", as it doesn't throw errors. You'd use it in the same way, but you can check complex arrays. As an example: if (empty($_GET['x']['y']) || $_GET['x']['y'] != "abc") { // do something } There are some caveats and differences from "isset", though. An undefined variable, a null variable, a "false" variable, and one equal to 0 all count as "empty". YMMV. * edit: I should note in the above example, if I used $_GET[$x][$y], $_GET, $x, and / or $y could be undefined and it would still not throw an error. It would simple trip the "empty" and return *true*.
I doubt this will gain much support. If you care about performance why stick with a language inherently hobbled by its "start from scratch for every request" semantics?
The general goal with these is you write standard php and it just complies it differently.
&gt; I am interested to see how someone who speaks Dutch feels about the Excel translations. If you are looking at the English version, why would you ever see the Dutch? And vice-versa. This is a very interesting question. You can't always chose what your computers language/Locale is set to, and even for your own computer it can be annoying as hell. I have the international version of win7, but some stuff is set to dutch, my time, money, etc.. To express it simply I expect my computer to operate in nl_US. That is obviously not an existing thing, so what I get is a keyboard that sometimes randomly decides it's a dutch layout, programs that initially want to install in dutch language, and office software that gets schizophrenic when I want euro signs and dutch date/time format, but with english language and spelling. As for the translation of functions themselves. I KNOW what strpos does, I KNOW what "implements Iterator" does. I do not know what "tekstpos" is or "implementeerd Repeteerer" is. I would have to relearn all those functions and keywords again. As for the rest of your reply. Code is inherently an abstraction of the business problem it is trying to solve. Whether that is calculating PI to the Xth digit or implementing some corporate solution. Not comments, not documentation, but your actual code will reflect (should reflect) the problem it is solving and the task it is doing. And your solution of simply not translating it when no fitting translation can be found. That sounds like an excellent way to create new barriers in sharing code.
How are you using the $link variable in this line from search redirector $link="http://www.example.com/search/".$slug; I mean, do you echo it on the page or do you redirect to it?
You can possibly leverage [Google Docs Viewer](https://docs.google.com/viewer) to do this. I setup a proof of concept demo a few years back. [Here](https://support.google.com/drive/answer/2423485?hl=en&amp;p=docs_viewer&amp;rd=1) is a list of supported file types and it includes Adobe PSD and AI.
&gt; Because for certain classes of application that's a desirable feature Citation needed. Ruby and Python both seem to be doing fine for web applications without this.
He didn't say it was a requirement, just desirable. 
Yeah I wasn't insinuating that their community formed by accident, or discounting the value of working to build the community up around the project. I would love to see the community around the Disco project grow but I'm not here to force it on any one. I also know that if there is not documentation then there will without a doubt be no community. How can you learn a new system without docs?? You just cant. Good catch, I'll being fixing that shortly.
That is definetly a great idea! Thanks, the empty bubble was kind of a joke around inversion of control though...
Definitely do! Laravel's IoC Container is the fucking bomb. Automatic resolution ftw. Furthermore, it's available as a standalone component, meaning you could just *use it* in Disco if you wanted to. I'm assuming you don't have a Laracasts subscription but there are some really nice videos there on how Laravel's IoC container works, and how IoC containers work generally. I'd also like to mention [Pimple](http://pimple.sensiolabs.org/), which is a much simpler, much more scaled-down IoC (aka DI or Dependency Injection) Container. It's only got about 80 lines of actual php code. That simplicity makes it a much better introduction into how IoC containers work / what they're meant to do. You could also just *use* Pimple in Disco if you wanted to. Something like:: Class Disco extends \Pimple { } Obviously you could do the same with Laravel's container. With all the great open source stuff out there these days, there's no reason to build a DI container by yourself unless find some specific use case where the existing options aren't sufficient. 
I would be surprised if the next major wouldn't break any userland api.
You can't. There are libraries that attempt this, e.g. ion cube, but all are easily circumvented by someone who knows what they're doing.
The solution here is to offer the solution as an "Appliance" that you manage remotely but lives on their network (e.g. make them buy a server you run).
Yeah. It would help particularly with functions that *can* normally accept an array. Then you can't even do something like `if(count($args)===1 &amp;&amp; is_array($args[0]))` to expand it out.
If you want to protect your source code, PHP is the wrong language for you.
You build a compiler/interpreter that is compatible with the PHP language and optimise it.
Awesome!! Agree with not reinventing the wheel (except to learn occasionally) so I'll be checking this out. Thanks for your input and the links!
I ended up making a virtual appliance for my system. No matter what anyone who knows what they are doing can get your code but this helps somewhat...
I had a client insist this years ago, I billed them for the server, billed them for this software: http://www.zend.com/en/products/guard/ Obfuscated everything and let them deal with installing it themselves, if they needed help over the phone, billed them for that too.
Even C applications get cracked very easily so there is no right language for "protecting" your code.
Yeah. I tried looking through RFCs and such and couldn't find it. Well, here's to hoping.
We're working on it, but we're having some trouble with the iTunes approval. In the meantime, feel free to subscribe to the feed manually: 1. Go to File -&gt; Subscribe to podcast… 2. Enter http://feed.soundofsymfony.com/rss /Magnus
Couldn't you just point your app to their database? This way your app is owned by you, yet they own their data.
They are both the same. The only difference is, that the Javascript Request is done in the background. Its not faster, it just feels like it is.
I was confused too. At first I thought it was a joke or a parody of HHVM. Apparently it's not. 
I am confused about the purpose of this post? You're definitely using POST in either case, which has nothing to do with HTML, jQuery, JavaScript, PHP or your dog...it's a HTTP method. Some other HTTP methods are GET, PUT, OPTIONS, DELETE etc. 
i used to give such comment to /r/php and the /r/php simply bash me.. they cant accept that php has a design flawed right from the beginning.. 
and what flaw is that?
They didn't say if this improvement is for real apps or just for synthetic benchmarks. It's possible their engine is optimised specifically for the benchmarks, like how graphics card manufactures did (or still do?) optimise for 3DMark to get higher scores. 
After it's compiled, it's no longer source code.
You could keep the app yourself and point it to their database. How about that? Will you please elaborate on what your application does such as interesting features, etc.. I always wonder what kind of functionality people will pay for.
... and? OP is basically trying to prevent piracy and you don't need the source code to pirate a program.
What the OP said *specifically* is protecting source code. All of this being said, a contract and a license is more effective than any other means, software or otherwise, you can come up with to ensure you get paid (or have legal restitution if you're not).
Zend guard does a good job of obsfucating. 
Ah that makes sense
Codeception needs a forum for community. Disqus is not enough. 
This is the route to pain. Any 'solution' to this is always awful. Your customers will hate it and so will you. If you want protected source code, write your programs in a compiled lang.
You are right. Can you suggest a platform for such forum? I do not like Google Groups (no syntax highlighting, email spam, poor readability). I don't host codeception.com so I can't setup forum there. Sure I could just buy Digital Ocean instance, install a Discourse, etc, but is there something that takes less efforts? 
Personally, I like [EsoTalk](http://esotalk.org) - Clean and modern
simple example, y use -&gt; for instance property, :: for class property, use \ namespace seperator? y cant just use one operator for all those operation? php array is combination of array and map.. here interesting example http://www.reddit.com/r/programming/comments/dst56/today_i_learned_about_php_variable_variables/c12np38 have a google urself..php is messy 
Given the upvotes you have, I must be misreading your suggestion, but... do you mean running the app on a traditional hosting server and accessing the client's DB from there? That's not a decent solution. 1. The client would have to allow remote connections to its DB server, which would send their network security team into a fit. 2. The raw data would have to travel to your app over who-knows-what networks and end up in the app server's memory, and after that, nice readable HTML would have to travel back (SSL can protect your HTTP traffic, of course, and decent databases allow encrypted connections, but your app still has to process that data in its unencrypted form). Bottom line, their data would still leave their secure network, which is what they're trying to avoid.
A similar project that has been around for a while longer is Ardent: https://github.com/laravelbook/ardent
Just a question, Does it support mulitple sets of rules for each POST *resource method?*
I have a few issues with Ardent. First off, it grew well beyond it's original concept, now doing things like autofilling models, hashing password fields and other interactions from the input. Second, it has been slow to move to a trait implementation. It was difficult to integrate with other libraries because of PHP's single inheritance. For example, a Sentry user model could not also use Ardent. This is built to use the new trait integration features in Laravel 4.2 and sticks to doing one thing - model validation. This kind of validation is one of the few things I miss from Rails when using Laravel. Another option, however, for those seeking a class to extend for model validation but not interested in the baggage it comes with is [Jeffery Way's model validation package](https://github.com/JeffreyWay/Laravel-Model-Validation).
It supports multiple rulesets, but what do you mean for each POST resource method? RESTfully a POST method should create an object, so you could add `creating` rules which will only be run when creating an object, otherwise add `saving` rules which will be run with creating or updating an object.
https://github.com/scrivo/highlight.php
I agree and this is actually a serious problem for me as well. Shared hosting at the time was 5.2 only, and 5.3 although had a lot of nice changes took far to long to be standard. Even if I go for 14.04 LTS Ubuntu server for example, or have that provided to me as the server to use, then it means I have PHP 5.3 to work against. It's annoying to be stuck like that without a easy upgrade path.
Okay so let's say I have a Post model and a Post Controller. Now this controller needs 2 sets of rules for the *store* + *updated*. How would you assign 1 validation array to each with different rules? If this makes it any clearer.
The controller doesn't need any rules, they are all stored in the model. At this stage you would need to set a different ruleset for the `creating` event (store method) and for the `updating` event (update method). What I would like to do in a future version is allow you to have a standard ruleset which would apply to both events and then you can set additional rules for `creating` or `updating` if they differ however you please. That would reduce the repetition of having two relatively similar rulesets. I hope that answers your question, please let me know if I missed the mark.
Cheers, now i understand ;)
Anybody know the constant "SHORTINIT"? I think it takes the step further (and more aggressively).
Is there a way for save () method to thow an exception instead of returning false when validation fails?
Not at this stage - it's a good idea though. Something like `save!` in Rails. I'll add this to my todo list.
I have the exact same criticism against Ardent. I regret using it. Also, when 4.1 rolled out, it took them 3 weeks to patch it even though there was a lot of pull requests for it. Ardent simply does too much. I'll check out your package, from a quick glance, it looks like what I needed. 
This is a great approach in this situation. If, as a client, I were to buy some code to manage my financial data, I sure as hell would prefer having access to the source code. 
Yeah, looking at it again I also forgot about their oversimplification of model relationships. Totally unnecessary for a validation package. And the 4.1 update thing was a hassle for me as well. Thanks and please send through any feedback. Really want to make this a solid and flexible option for Laravel validation.
I've just pushed a new version which lets you set a property on the model to raise an exception following a validation error instead of returning a bool. I think I'd like to add another method like `saveWithException` but trying to think of a better name. Anyhow, if this is something you end up using please let me know what you think.
&gt; What I would like to do in a future version is allow you to have a standard ruleset which would apply to both events and then you can set additional rules for creating or updating if they differ however you please. That would reduce the repetition of having two relatively similar rulesets. I was already mentally thinking about that while combing through your code :D
Hahaha, it seems pretty obvious now in hindsight. But part of the reason posting it here was to get some feedback and ideas to improve it before it hits version 1.0, so really glad I did!
You should crosspost on /r/laravel
I did, unfortunately it didn't fare too well over there. I might try again when I have a more feature-complete version to show off. That subreddit doesn't seem to get much traffic though which is why I decided to try here next. 
that's cool. Thanks!
Fast response! I'm not the guy who requested this, but I will definitely use the exception implementation. Makes way more sense to me, validation errors are a great example of exceptional behavior 
Kudos on figuring out how that trait booting stuff works before I even documented or mentioned it! :) Looks pretty good!
Let me see if I can frame this question accurately: Rather than applying the Validation Trait directly to the Model, is there a way we can apply it to a Repository instead? As it currently stands, it looks as if most of your driving logic relies on the idea that `$this` is required to be an Eloquent Object. It's my personal preference to keep as much as I can out of the Model class that isn't directly related to a Model's given properties and relationships. Case in point: People might have problems implementing this on models that already have properties called "rules" and/or "messages". Granted, your Getters and Setters can alleviate this issue, and much of what I'm asking comes down to personal coding practice. But if I can suggest a possible solution: protected function getModel(){ return $this; } Then change any Eloquent methods from `$this-&gt;{method}()` to `$this-&gt;getModel()-&gt;{method}()`. This way, the class using this trait can simply override the getModel method if needed. Overall, I love what you're doing with this. Keep up the great work.
14.04 LTS has PHP 5.5
YES! This book is ABSOLUTELY Amazing! I regret that I needed the cash in college and scrapped it. Guess I can always buy it again.
I did too. Wasn't fun :| Lot of magic going on in there.
TBH I thought it was called "lazy evaluation".
Hi, have you seen [Yellow](http://datenstrom.se/yellow/)?
Thanks so much, I noticed it pop up in the beta so jumped right in!
Thanks! Will do. EDIT: Just noticed in the prepareUniqueRule method, you have what look like other Eloquent calls in there. Would `$this-&gt;getTable()` and `$this-&gt;getKey()` also require the change to `$this-&gt;getModel()-&gt;{method}`? I've submitted a Pull Request for your review.
But laravel and symfony2 both use symfony packages, which is what he was getting at.
I'd like to see a PHP specification but having different implementations won't force PHP to do anything.
&gt; For example, say you want to get your data from somewhere other than $_POST, like an API or something. Nah, just rewrite the $_POST superglobal to contain your desired information: $_POST['foo'] = $app-&gt;getFooVar(); *This is sarcasm and yes, I've actually seen people do this to reuse code which had $_POST or $_GET variables all over the place*
I see how could get that wrong. The concepts are quit similar, lazy evaluation is about not instantiating stuff until you need them. It's really quite simple, but for some reason I cant think of a good example in PHP.
Yes, I also just started using the same method today to solve the same problem. EDIT: When you call session_start(), PHP locks the session data, so that any other page calling session_start() within the same session will block until the existing usage (initiated by session_start()) ends.
You could make a subreddit for it.
Don't just blindly blog because it is cool or someone told you to do it.
There are reasons why we use such tools like Vagrant besides from it being cool. We use it so we can quickly create and destroy VMs that match production so we can pickup bugs related to our environment as early as possible before we deploy. Edit: To elaborate more, the blog argues that XAMP is ok for something like prototyping. The only reason i see people using something like XAMP is purely because they're inexperienced or just lazy. We have tools such as [puphpet](http://puphpet.com) that allows us to very easily provision a VM with Vagrant that matches most production environments, so i no longer see any use case for anyone to be using XAMP. Edit 2: grammer.
Or at the very least, don't put a shitty rage comic in it. This doesn't cement an idea, it just makes everyone look at you like you're 13 and bored because your CoD guild had to go eat dinner.
It's not really that simple ... Let's take the example of using xampp to develop your software. It's simply not true that anyone is using xampp in production, so if you develop in xampp and deploy on a proper operating system you are actually causing yourself problems. It's not sensible to develop systems in one environment and deploy them to a completely different one. Another weak example is FTP, FTP hasn't been okay for our purposes since it's inception. The advantages of version control should be obvious, even if you work on your own (which I have, for many years at a time) a version control system is an invaluable asset. It's not a case of FTP is okay, because that gets your code where it needs to be; nobody alive can endlessly change software and retain any kind of meaningful record of their changes in their head, it just isn't practical to assume to can. Before you go deciding that something is hype, you should research it; you should not assume that because it's being talked about it must *all* be hype ... a more sensible assumption is that the subject should be researched with an open mind, possibly even with the preconceived notion that this new thing can provide some benefit and it's on you to make the most of it ... *because that's really how it is*.
Thanks I just orderd this !!! :)
There was a discussion on this recently on PHP internals (21st May - "encode php scripts with opcache compatibility" - unfortunately I an't find it archived on the Gmane web-based UI). Due to its nature, all PHP gets compiled to op-codes, which are trivial to "reverse engineer" to working PHP source code. If I recall correctly, the 2 main suggestions were: * Write an extension with some application critical functionality and require that be installed for the application to run. I think someone went further and suggested this extension could load an encrypted volume that contains the actual functionality. * Write an API with some portion of application critical functionality and host that on your own servers. You can use an API key as a license key that allows you to block access to specific clients.
I like this and might try using it or dig in a little further. Some feedback I have would be: * rename "validating" to something like "validateOnSave" (otherwise "validating" == true sounds like the model is currently being validated (which it isn't)) * there's something not right about the setting and re-setting of properties eg. storing "$currentThrowValidationExceptionsSetting" temporarily. I can see why this is necessary (to get around the event system) but it seems like a problem with a "global" state and might cause some unexpected behaviour later. * I've done "injectUniqueIdentifierToRules" before except with tokenized replacement, so a rule would look like "unique:users,email,{id}" and opens up the possibility of more complex replacements eg. "unique:users,email_address,{id},id,account_id,{account_id}". It might be a nice addition to the library. Anyways, my 2c as always.
And still he didn't convert uppercase to lowercase.
It will be a separate edition afterwards. Unfortunately, it's up to the author on timing so I can't give an ETA.
Yeah, looking back now I think exceptions will be a better default configuration. I'm going to try and tweak it to make setting it a little cleaner too. 
Thanks, I agree with you on renaming the validating method and finding a better solution for restoring the existing values when forcing a save. I'd also like to revisit the unique identifier stuff to make it a little more flexible. I'm not sure about placeholders though as it will prevent users from using the rules standalone, unless I make the unique identifier stuff public instead of private. Going to have a think about this one. Thanks for the feedback and please let me know if you have any other thoughts. Want to make this as good as I can!
&gt; Ruby and Python both seem to be doing fine for web applications without this And neither of which are used inside the top 10 websites in the world. PHP (the language) powers at least 3 of them. So that does imply something...
Closing the session does not close the response, it simply notifies PHP that you will not be making any more changes to the $_SESSION superglobal and it can therefore release the lock on it that may be preventing other scripts from starting their own responses.
Looks promising. What does this have over GearmanManager: https://github.com/brianlmoon/GearmanManager ? Edit: Also - how does this auto update? Does it try to detect changes or simply reload the client each time? I've been bitten by GearmanManager not auto updating a few times which means I have to manually restart it in development quite regularly.
It offers support for composer and PSR compliance, as well as a much more simple and elegant API. Also, an auto-update that works for real. From GearmanManager: &gt;auto_update - If set to 1, the manager will fork a helper process that watches the worker directory for changes. If new code is found, a signal is sent to the parent process to kill the worker processes so that the new code can be loaded. GearmanManager watches the worker directory for changes, but does not consider dependencies to be changes. So that makes it a bit useless.
Saw your edit after, it restarts the worker every time you send a job, so it does not miss any changes. It will slow down the process a bit (might take around 0.3 seconds more) so it is not meant for production but does make development so much more simple.
Thanks for your replies. I agree that the auto update feature in GearmanManager is quite useless. I was considering writing something myself, but I'll have to give your library a go when I get a minute.
It wouldnt be so hard to imagine the Job implementing the JobInterface tagging itself as an autorestart job.
That implies absolutely nothing. Those 3 companies are using PHP because they are stuck with it. I have multiple FB developer friends and they are all aware this. It is the very reason they created HHVM and Hack - to at least mitigate the horrible parts of PHP. Honestly, I'm a bit shocked to hear this "*more people use it so it must be better*" argument from you...
And me thinking the Germans had found a way of being even more efficient.
http://www.youtube.com/watch?v=ru2uixqA7Fk
If you use the Laravel framework, you can just pull in the paypalpayment package.
I was surprised /r/PHP was endorsing modern slavery.
Packagist lists various options for interacting with paypal: https://packagist.org/search/?tags=paypal
This post introduces Cloudinary's upload presets that allow you to control your asset upload options using an interactive UI or an API. You can update image uploading settings live for your web sites and mobile apps with different thumbnail sizes, tagging, photo moderation and more. Sample code included for Ruby on Rails, PHP and Node.js. Disclaimer: I'm one of the co-founders of Cloudinary. 
I just finished setting up PayPal button ordering for a site. I am not going to sign up to check the downloadable code, but based on the code in the article, there are two glaring security omissions. 1: At no point is the transaction verified with PayPal using the [IPN](https://developer.paypal.com/docs/classic/ipn/ht_ipn/) (or PDT) APIs. If a site is using the article's code to process completed transactions (such as granting access to digital goods) someone could POST fake transaction details to processed.php and get free stuff. Additionally, handling IPN messages allows the site to handle situations like chargebacks. 2: [The PayPal button itself is not encrypted.] (https://developer.paypal.com/docs/classic/paypal-payments-standard/integration-guide/encryptedwebpayments/) In the example given, it's not an issue, but in many situations, the buttons should be encrypted to prevent someone from changing the HTML button code to cheat the system.
Apparently, `$foo{0}` is the same as `$foo[0]` but there might be some subtle difference.
This is a great RFC and I applaud Nikita for proposing it, but I see its chances of acceptance to be slim (even though it targets PHP 6). If it doesn't attract opposers (no chance) it would be many, many years before we get to use it in production. So yeah, it's a nice dream to have. I'm sure our children will appreciate it in a decade :)
This is a low quality tutorial. Beside the issues /u/spacechimp pointed out, the title of your tutorial mentions using PHP &amp; **MySQL**, but at no point do you show any code related to MySQL. Secondly, given the very simplistic approach to using Paypal, why not use their [modern REST api](https://developer.paypal.com/docs/api/) rather than their classic API? This article was written in 2014, but I've seen this method of communicating with Paypal through tutorials written back in 2005. EDIT: How did this get 8 upvotes so far? I'm a bit suspicious. Paypal's [own tutorials](https://developer.paypal.com/webapps/developer/docs/classic/express-checkout/integration-guide/ECGettingStarted/) gives the same info minus the security holes.
There is not, they are the same (see http://www.php.net/manual/en/language.types.string.php#language.types.string.substr)
Why do you think the chances of acceptance are slim? The things that it breaks are barely used at all (not just hand-waving here, code analysis has shown that they are virtually not used at all), so I'm not sure what there really is to oppose.
1. No, its not too late. 2. Start by doing. I would recommend installing either a debian or freebsd image to a VM (virtual machine). Get comfortable with the command line. Learn how to SSH into the system. Learn how to install packages or compile ports. Learn how to run PHP scripts. Pick a simple project that will help you in your day-day life. Text manipulation is usually a good place to start. Something that opens a block of text, searches that text for a specific word/phrase/pattern, then formats and outputs that pattern to the command line or another file. 3. In 6 months? You'd be slightly less useless. I'm in a similar boat, I started programming as a career change in my mid-twenties. It took me ~3 years before I was able to be paid to do it. You might get lucky, but that was with me devoting a a fairly substantial amount of time towards it. EDIT: Other advice: * Find somebody who's already a professional who will help guide your development. * The freeBSD handbook is *really* good.
i love that with this, you can do: (function () { ... })(); currently, you have to: call_user_func(function () { ... })();
Hey Nikita, can you fix the ternary operator next? :D
The MySQL was added for SEO purposes. That's fairly clear. It's also why this is the second low-quality blog-spam from this guy in the last 24 hours.
&gt; call_user_func(function () { ... })(); IMO better assign closure to a var instead of `call_user_func()`: $cb = function () { ... }; $cb();
Insanely awesome RFC.
PHP support an alternative array access syntax using `{expr}`, which does the exact same thing as `[expr]`. The only difference is that you can write `$foo[] = ...` but not `$foo{} = ...`. Some people prefer to use `{}` to access string offsets. Personally I'd like to drop this syntax -- it has been deprecated in the past, but that was reverted due to heavy opposition. But as long as we do support it, we should support it properly and not just kinda-sometimes ;)
&gt; Am I to late to the party? Why would you be? It's no harder than learning any other skill. You don't need a comp science degree to get started with web dev if that's what you're worried about. Particularly as a hobbiest. &gt; Where do I even start? Books, videos...? Give yourself a simple task and find out how to do it. I'll get you started. * Set up a server and database on your local machine. * Make a contact form which saves to the database. The only thing is, be careful about where you get your information from. There's a lot of crap that has built up over PHPs long &amp; illustrious career. &gt; I have about 3-4 hours per day to spare. Given that I throw them all in learning PHP, where would I stand in 6 months? You would be a "noob-who-thinks-he's-not-a-noob", not that there is anything wrong with that mind you, it's a position we have all been in. But the only way to advance from noob to advanced-noob is to work in team and make it your day job. Web dev is about problem solving and there is a wide and complex array of problems to solve (that's what makes it fun) and it takes a long time for the ball to get rolling. It's a job that teaches you every day that you know nothing. Who cares though? You'll be making cool shit and feeling like a boss every time you fix that one *shitty* little bug that has been taunting you for the last 2 hours.
Agree on all counts. This is an amazing RFC that I don't think has much chance of being implemented because the core team tends to think they are running a fiefdom and the infidels should be burned at the stake. :P
&gt; it has been deprecated in the past, but that was reverted due to heavy opposition Given that, I hope you can understand why I think there will be opposition to your RFC :)
PHP 6 inevitably *will* break BC. The question is rather how much it shall break it. Probably not too much.
&gt; PHP 6 inevitably will break BC. It *will* break the internal API. It *might* break the userland API. Even though no one will oppose the first one, many will oppose the second. Because if breaking the userland is allowed, drawing the line will be *very* difficult and with the inevitable flame wars etc. it could derail the entire PHP6 progress and it might even end up abandoned like the *other PHP 6*.
Yea, finding the right mentor can be critically important. But even if you don't know anybody, usually just asking questions on forums like php.net or debian.net or freebsd.org will get you there. There is also phpmentoring.org, but I don't know anything about it really. The ~3 years it took was w/ me working a day job, so my projects tended to spread themselves out over months to a year. Find something doable, chunk it out, and start chipping. Its honestly the only way.
I can't find anything wrong with this. It's a well thought out idea that will make PHP act in a more intuitive fashion and it should be implemented.
No, I'm pretty sure it will break userland, because all the proposed BC breaks affecting userland have been kept out of minors.
&gt;Am I to late to the party? The only way you're late to the party is if you're dead. If you like problem solving, have an analytical nature, and the tenacity to follow through programming can be a deeply rewarding experience. &gt;I have about 3-4 hours per day to spare. Given that I throw them all in learning PHP, where would I stand in 6 months? This is plenty of time to invest. While I can't say exactly where you'll be in that time since people learn at different speeds, it is enough time to be building useful things for yourself. Just don't expect to be a master of the domain commanding a $100,000/year salary - it takes most people 5 - 10 years to get to that point.
Make sure your website directory only allows System Administrators and members of the IIS_USRS group. The IIS_USRS group is the default authentication account on IIS webservers, but of course you may change that via the Internet Information Services Manager.
There is absolutely no doubt that PHP 6 will contain BC breaks for userland code. What /u/ircmaxell is likely referring to in that comment is that we will not introduce any major breakage (like renaming all functions, changing parameter order - what the discussion in that thread is about) and want it to be easy to create code that is compatible with both PHP 5 and PHP 6. The whole point of doing a PHP 6 release is allowing some measure of BC breakage.
I'm 27, and taught myself PHP (among other languages) at the age of 12. I've been paid to program since I was 15. There are things that took me a long time to polish and learn because I was self-taught, but it's by no means impossible, and you certainly aren't "too late". Here are some rules, as someone teaching themselves, that will help keep you from forming bad habits, and help you learn quickly. 1. Start the very basics at http://codecademy.com/ where you can start to get the syntax down. 2. Learn how to set up a web server on your desktop or laptop. Learning how to do this will be an exercise in "finding out how to do it" as much as doing it. I'd suggest MAMP or XAMPP. 3. Once you sort of understand the syntax of the language, use http://www.phptherightway.com/ to help you NOT form bad habits. At this point, you're going to ditch the server you set up in #2 and use a Vagrant set up as outlined on PHP The Right Way. The reason I had you set up one of those is to learn first hand what you lose if you use a MAMP/XAMPP setup. 4. Set up an AWS (Amazon Web Services) account, and learn how to use EC2, RDS and S3. This will probably take a few months, and will also involve learning GitHub (which involves learning git), SSH and SSH keys, and some of the server stuff. 5. Pick a framework and learn it once you are somewhat confident with PHP The Right Way. Popular choices include Laravel, Silex and Symfony (among others). This might include learning an ORM (database interaction manager), and several other things. 6. To help learn that framework, and learn AWS, GitHub, and how deploys work, pick a small project (like a blog) and make one. Most of the time, when you have a project like that, it's a better idea to use existing and tested code, but this is for learning. Some things to keep in mind. Step 1 will take 1-2 months (maybe quicker if you're particularly adept), but Step 2 &amp; 3 will take a while, and Step 4-6 will probably take more than a year for you to really be comfortable. If you can get all the way through Step 6 though, you're qualified to be a junior dev, even if you can't prove if with experience. Extra tips: 1. **There is lots of bad PHP advice out there**. If you have questions or need to search for something, check phptherightway.com first, *then* check stackoverflow.com next, then come here. Do not be afraid to ask questions, and do not use a google search if you can avoid it. 2. Learning *how* to think about programming is really important, especially to the person who will eventually interview you. Immerse yourself in it DAILY, or you won't be able to learn this. 3. There are LOTS of non-programming things that are REALLY valuable to know, like how to work with Linux on the command line, how to use git, how to work with Vagrant, how to Unit Test, and so on. Some of these are more advanced than others. 4. Some people will tell you to take it slow and to learn the basics first. This is true, but after you learn the syntax and go through phptherightway.com, you want to try to learn ALL OF IT together. That way it will all be integrated for you. It will all make sense together. It seems daunting, but it's better. 5. For documentation (if you need to look up a built in function or some other core question), use php.net AND PAY ABSOLUTELY NO FUCKING ATTENTION TO ANY OF THE COMMENTS. I'm so very serious about that. If you're just learning, *even reading* the comments at php.net will harm you. I guarantee it. If you have specific questions, you can PM me. I've gone from a self-taught kid in high school making a few extra bucks to CTO/Lead Engineer at several startups. Even I still suffer from Impostor Syndrome occasionally. Keep at it, and know that there's always more to learn. After a few years, pick ANOTHER language to learn, even if you don't want to work in it. The things you learn from that SECOND language will be the difference between being a developer and an engineer, and I think you can guess which one makes more money.
Ah man. Well, I have no clue what the market is like in Romania. I worked with a dev shop in Romania briefly, but it wasn't much. Find some local people to mentor you.
That is good to hear! I am now a little bit more hopeful for this RFC :)
A lot of the security practices for Linux (Apache and Nginx) servers apply to IIS too. Keep all the non user facing PHP files such as include files and config files outside the web root. If you're running an app with a front controller (like most modern frameworks), only the index.php and assets like CSS and JavaScript should be in your web root. I usually accomplish this by having a "public" directory and setting that to the web root. This reduces your attack surface since people can't directly hit files they're not meant to touch. 
You can try REACTPHP 
I'd rather create a service layer with those "facades" and invoke those inside the controllers. Controllers are not facades. Controllers are controllers.
Yeah, I just have no idea how much experience this guy has or how much time he has to implement it. A rough queue system with a basic loop and SQL table can be up and running in two hours even if you've never done it before, as opposed to a few days of learning RabbitMQ and Supervisord. Don't get me wrong, I agree that's a better way, but without project details I don't know if the tradeoffs of time and knowledge would be worth it. EDIT: Also, given the description I'm not entirely sure that database locking would be necessary unless he runs more than one process at a time.
You aren't too old. Something I see a lot of beginners do is try to read too many books and try to understand everything at once. The best tool for learning is for you to pick a project you can be slightly passionate about and complete it. Build some type of application from start to completion, maintain it a little, and you'll be more knowledgeable than the person that's read 100 php or programming books. Also, there are better paying and more solid jobs in .NET or Java development than php. Php is a semi-decent place to start but a lot of info out there is outdated and supports bad practices so be careful.
I've responded to this same comment on my blog, with the following: &gt; The point is to clarify the purpose of a Controller/Action. I've seen way too many cases of "I don't know where to put this, I'll stuff it in the controller," and "I don't want to create another class, I'll stuff it in the controller," and "It's not doing *that* much work, I can do this in the controller." If we define a Controller/Action as a Facade for the activities of marshaling the request, invoking the model/domain, and marshaling and returning the response/responder, we evaluate all the logic in the controller against those, and refactor to remove anything that falls outside of that. 
I get you here. Even so, I think the article is a superset of your comment: to wit, that the controller is a facade to three things: retrieve input from the request, move that input to the domain (service layer), and move the domain output to a response or responder. The facade is over those three activities, not over the domain itself.
You don't rely on it being left-associative though, right?
Our children will still use PHP by then?
Well, hopefully not :)
This is not a place for you to advertise services. Reported.
:/ I wonder what this sub would look like if every time a Symfony component was updated they pushed the changelog to /r/PHP. Does Aura being a "library, not framework" mean that each individual part gets it's RSS feed sent to this sub?
Also, "Sting manipulation" 
As I've pointed out before, that necessarily means that the domain becomes larger. In the form of services or in the form of DBAL or in some other form. The Domain, IMO, needs to be broken up into a Data layer that includes the DBAL/ORM, and a Processes layer that includes services, API integrations, things like Gearman processes, and so on.
I remember reading about creating "handler mappings" to access files that aren't in the root directory? Is this what i would use to access the files not in the root directory?
I don't see them as a facade, IMO a facade should provide a simplified interface to something and rarely is the HTTP interface more simple than the actual interface to the application code. Controllers are more like the adapter patern, they make your application code work via a HTTP interface.
That's completely out of the scope of my post, tbh.
Interestingly, Adapter is another of the seven structural patterns in the GoF. ;-) I could see an argument made that they are a combination of Facade and Adapter, to be honest. I'm arguing Facade to indicate the specific set of responsibilities they should perform *internally* -- which better fits the "provide a simplified API over a complex set of operations" paradigm.
Thanks, bookmarked. Question: does it do any handling of failed jobs? Retrying, etc? If a worker explodes (with unhandled exception) is there any help there? Restarting via supervisor won't help as same worker will just fail again and restart again, never able to recover. 
If for no other reason than being allowed to do this: (function() { ... })()
Fair. I made a new post for it: http://www.reddit.com/r/PHP/comments/27psgs/mvc_vs_adr_and_what_it_means_to_webaware/
If you boil down the facades to something that "provide a simplified API over a complex set of operations" than ActiveRecord and ORM implementations are facades as well. I don't think that this advances the conversation or helps me with my fat controllers... besides giving me a reason to keep them fat (ie: if they are supposed to hide my complex code under the `execute()` method then it is exactly what they are doing) :)
Read the first four bullet points on the article, and then go and read the GoF chapter on Facades. I'm summarizing in my article.
I am **not** suggesting that you should shove anything in them; I am specifically arguing against that. I'm suggesting they are facades for **three specific operations:** - Marshaling data from the request - Invoking models/domains with that data - Marshaling and returning a response/responder 
Less known syntax: current([function () {}])-&gt;__invoke(...$args); But I'm kind of resistant to the idea of IIFEs in PHP because it makes vastly less sense than it does for JS. I mean the syntax supporting them is fine, just don't use them. On the other hand I do kind of wish that parent-scope variables were accessible in anonymous functions without the `use` statement.
Still, reactphp isnt a good idea here, why would you want to fire a request to analytics api with every request on your site, even if its asynchronous? Implementing a simple queue system with one process and performing a bulk send (multiple rows in one payload) will be enough for most projects, even with basic locking and transactions. I you have a redis or memcache is even simpler, assuming that you do not care about non persisten data (memcache)
Thank you for your input. You're right, I have to use a queuing system. Everything else is not secure (CURLS using exec()) or too hackish with no proven results. Maybe Gearman is overkill for my current needs. I'll build something simple using either DB or a flat file and run a daemon to send all requests logged with a simple locking mechanism to prevent double hits to the same item on the list.
REACTPHP looks very interesting. Thank your for letting me know.
If you're doing a really simple queue that doesn't need to lock (because only one process runs at a time) a decent system involves two tables: `queue_targets`: Contains the information needed to process one item and a DateTime of when it was added the queue. Order by DateTime ascending, process one row. `queue_log`: After a row is processed from `queue_targets`, add a row here containing the relevant information, the time it took to process that queue item, and another DateTime. Then delete from `queue_targets`. Again... that's not really a super robust system, so... you know your use case better than us. But if you're considering building a manually managed queue, this is where I would start.
It doesn't provide any help to your workers. I guess the best way would be to handle the exceptions in the worker if possible.
So HippyVM, running on [PythonJS](http://pythonjs.blogspot.com/2014/05/pythonjs-now-faster-than-cpython.html) instead of CPython, should be faster than pure C right? :P
var_export($data) and see what it looks like exactly, and that'll tell you how to work with the data if you don't already know.
That's where the facade part breaks down for me, the first and last operations are only there specifically because of the interface that this controller provides, HTTP. If you had a different controller for some other protocol, would that be a facade as well? Why would you have different facades for different interfaces to the same thing? You wouldn't, you'd (possibly) have one facade for the underlying application code, and an adapter for each protocol, which would do the marshaling. 
If you run your website off of a partition that is not the same as your C: partition, you completely eliminate most of the directory traversal exploits.
No handler mappings needed for that. The point of moving files out of IIS web root is to make sure HTTP requests cannot access them directly (meaning, to ensure users cannot create a request that bypasses your app's entry point and goes directly to app/includes/config.inc or somesuch). As long as the IIS user has permissions to read the rest of the app's files/folders outside the web root, it will be able to read/include such files, but it will be impossible to request them directly via HTTP. In the best case, your web root could contain only the following: * entry point (index.php) that ideally contains only `require __DIR__ . '/../application/bootstrap.php';`, letting said bootstrap.php load and run your app * css/images/js/other static files needed for the frontend (e.g. favicon.ico, robots.txt, crossdomain.xml ) * user uploads and autogenerated files that are supposed to be available for direct download (if you are not using dynamic functionality like access control or hit counters on them) and everything else is outside the web root, in a folder that the IIS user can read.
This is a perfect answer, much better than what I was going to post :P You can use `require(__DIR__ . '/../blah.php')` to get to files outside the web root. 
This is not really JSON-specific. You access that data the same way as you would access any PHP data structure, using `$var[$index]` to access array properties, `$var-&gt;property` to access object properties, and so on. Like /u/JordanLeDoux suggested, do a `var_dump($data)`, see what it contains, and access the contents accordingly. (Or, run that script in a debugger, see the data structure at runtime and experiment with accessing its contents in various ways interactively.)
Fair enough. Zend\Stdlib\DispatchableInterface was going along that route, and I've always seen it as a "web adapter". That said, I'd argue that yes, if you have another protocol, you'd write a controller for that, which is a facade for the workflow required for handling that protocol. The HTTP and the X protocol variants may end up invoking the same model/domain, but how they marshal arguments or a response/responder would differ. They are each a facade, however, *for those operations*. Where the facade part comes into play depends on what you do in the system: you may use the same controller/action to respond to multiple URLs; you may create a hierarchical MVC where one controller may invoke another -- and in such a case, you'd continue passing the request down the tree (or have each caller create a custom request). In these cases, you are exposing a single, simplified API for an operation. You can also think of them as adapters -- adapters and facades are both structural design patterns; you can definitely mix-and-match design patterns when a particular domain cannot be described using a single definition. I've noted previously in this comment thread that adapter also fits the bill; I have glommed on to facade, however, to discuss the specific operations I feel a controller should be restricted to. I think the 3 responsibilities make sense in terms of thinking about what it is you're doing with your controller, and how to keep it focused. 
It's not as hard to get set up as you'd think. The multiple table database method will no doubt work, but I want to make sure he isn't scared away from RabbitMQ in PHP without just saying "It will take a few days of learning" RabbitMQ is installed in two lines.. $ deb http://www.rabbitmq.com/debian/ testing main $ sudo apt-get install rabbitmq-server The PHP client is installed using composer. composer.json { "require": { "videlalvaro/php-amqplib": "v2.1.0" } } Install PHP Client library: $ composer.phar install [How to Send Messages (21 lines)](https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/send.php). You can publish PHP arrays or whatever on to the queue so there's no need to define a schema. Snippet: $channel-&gt;queue_declare('hello', false, false, false, false); $msg = new AMQPMessage('Hello World!'); $channel-&gt;basic_publish($msg, '', 'hello'); echo " [x] Sent 'Hello World!'\n"; [How to Receive Messages (27 lines)](https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive.php) Snippet: $callback = function($msg) { echo " [x] Received ", $msg-&gt;body, "\n"; }; $channel-&gt;basic_consume('hello', '', false, true, false, false, $callback); With a full tutorial [here](http://www.rabbitmq.com/tutorials/tutorial-one-php.html) It's *maybe* an hour of messing around with the examples and you get a multi-consumer (if you want), fault tolerant, production ready queueing system. Arguably much less effort, and a WAY better system. Just my 2 cents. 
As I said, you're right it's better. I don't want to scare him away. I've just seen projects where even that creates too much instability/uncertainty to be done as quickly as needed. For instance, adding to the queue in a two table setup is a single sql insert. Adding to the queue with rabbit involves interfacing with rabbit specifically inside your existing code base. It provides great return on doing so, but some code bases are so awful that doing something like that can be scary if you're not experienced enough. If he wants it to be maintainable going forward, he should use something like rabbit. What I suggested was a hack that's "good enough" because that's how he presented his concerns.
I'm really sorry... but I can't understand anything he's saying. :/
Makes sense, thanks for the great explanation!
Can you view the apache error.log? Or is there any error on screen? 
You are getting a standard object back. It is a set of key/value pairs like you see there. To interact with it, you would reference the values like: $blah = $object-&gt;attributes-&gt;primary-&gt;color; var_export($blah); If you instead call: json_decode(file_get_contents($itemURL), true); You will get an associative array instead.
Is there an ORM that lets you write plain SQL which gets transformed into an object? It's tedious translating fairly simple SQL queries into function calls. [DQL is the closest I've found.](https://doctrine-orm.readthedocs.org/en/2.0.x/reference/dql-doctrine-query-language.html)
Sorry it took me so long to respond, I was on lunch. &gt;all Front Controller elements (including routing and dispatcher) are explicitly described as out-of-scope Yes, and this is an attempt to separate the application from a particular adapter, which I understand. With few exceptions though, most web applications end up being very aware that they are web applications, and I see benefits to having the Action have responsibility from the handoff from the server. That said, I don't think they definitionally need to be part of the pattern. Rather, I'm using it as a tool to profile actual applications as they exist. &gt;Under ADR, these both fit under the Domain portion. The Domain layer encapsulates both of these to hide the specifics of how the Domain "actually works" so that all the Action does is feed input data to the Domain, and get back its output. Yes, and I think we both agree with that. The reason I prefer the way I described it is that it explicitly separates DBAL from the processing. While it isn't *part* of the ADR description, there is nothing in ADR that suggests that the processing of data and the DBAL should not be dependent. In my view, the things that end up in the Process layer should not care *where* the data came from. I think we agree on that, but this pattern makes it explicit that you pass hydrated DTO's or DAO's functioning as DTO's to the Process layer. This sort of separation allows you in the future to have your processes consume data from API's for instance with little difficulty, and it also correctly shows that taking the API info and putting it into the proper DTO format is the responsibility of the Action, which should be the only input-aware part of the application. &gt; Further, I assert that if one handles both of these aspects directly in a Controller or Action, one is intermingling concerns that should be separated out. I don't think these should be handled directly in the Action. With regards to the Action-Persistence-Process cycle, the Action should: - Be responsible for Dependency Injection into the relevant Persistence or Process objects. - Provide any translation from input -&gt; DAO, input -&gt; DTO or DAO -&gt; DTO. - Understand the order in which the Persistence and Process objects must be executed for the desired output. - EDIT: Signal when to persist data, where possible. (Sometimes this must happen inside the Process layer instead, but that should be discouraged/designed out.) But that's it. Essentially, if you deal with persistent data store of any kind, some part of your application will have to be aware of intermingled concerns to a very limited degree. This pattern centralizes that concern but *reduces* the volatility of the Action and reduces the amount of code that ends up being in the Action. &gt;I don't think we have any significant disagreement here. I assert that the Response (or Responder) layer should not be making updates to or otherwise modifying the Domain layer in any way, but using objects emitted from the Domain is perfectly within bounds. Just to be clear, the point I was making is that the Responder should not use its own special data format. In other words, your Process layer will be dealing with DTO's/DAO's. You shouldn't have to reformat the data for the Responder, but the Responder should treat these as read-only as a matter of convention or a matter of function. The Responder should never be modifying the Process or Persistence layers.
 VALUES (NULL,'$title','$blog','$date','$topic',`$keywords`) The $keywords part is surrounded with backticks, not single-quotes. That is your problem.
Your foreach syntax should be: foreach ($data as $key=&gt;$value) { } where $key is the key (like 'attributes' or 'text') and $value will be another object (which you can parse through using another foreach), or a value. You could use is_object to check which one it is. Edit: fixed the arrow from -&gt; to =&gt;. Thanks to /u/JordanLeDoux for pointing it out.
Thanks, I will give your advice a shot. I'm not getting any errors at all it's just not inserting the data even though it was working fine previously while set up the same way. Also, this is just project for practice, nothing I will be using. I know I need to sanitize the input before inserting anything. I've been using FILTER_SANITIZE_STRING and such on other areas and would fix that before I ever launched anything. I also know I need to learn more about parametrized queries as well. Is there anything else specifically that you recommend I do differently?
Wow, I can't believe I missed that! Thank you very much, you've saved me a lot of headache. 
:) I'm responsible for a lot of junior devs now, and they tend to make these kinds of mistakes with some frequency, so I've gotten good at spotting them. It's all part of the learning process. Good luck, and you might want to handle the inserts in a way that doesn't expose you to SQL Injection Attacks.
It is a CENTOS 6.5 I guess I can try but the possible issue is that php is installed under /usr/local/php/ directory which I don't think is the default install directory of PHP. In addition isn't APXS2 part of the httpd-devel RPM package? Apache has been install from source as well. So that is why I am not sure if I have to first uninstall PHP or I can do re-install on top of it the current install.
what does that offer? also, the mentioned syntax is wrong -- we don't need the `()` at the end with `call_user_func`.
I've used IFFEs for cleaning up old scripts. I wrap the entire file in an IIFE to prevent globals from escaping.
Look into PDO, it'll simplify that a lot.
try this: http://webtatic.com/packages/php54/
HA...nice. Will give it a try. If I could also find a repo for Apache/2.2.24 that would be excellent.
With CentOS, you shouldn't have compiled from source. Use yum. Check if you can find a yum package for apxs2, and then uninstall your compiled php and reinstall it all with yum.
The developers need that specific version :-&lt;
Wait... why? They most certainly do NOT need that specific version. They are doing something wrong.
Maybe interesting, but it's using deprecated technology. If the article were written for PDO or at least MySQLi then I might've read it properly.
I have no idea why they insist on that version. I guess their code depends on that specific version due to modules that do not exist in newer versions?....which really that is not the case. Each newer version doesnt kill well established features. Seriously I have no idea why :(
If they just can't do 5.5 and need 5.4 for libraries... I'd look at seeing if the latest 5.4 yum package will run their code. They may just be telling you the version requirement from outdated documentation of a package they use. Running a specific version like that introduces some security concerns that I assume you (the SA?) will have to deal with, and that's not acceptable.
&gt; if every time a Symfony component was updated *Does* Symfony release their components on independent schedules? I admit to not following it too closely.
How would you handle multiple forms of presentation of the same Information? For example, you might want to present a data set as an HTML table, a CSV download, or even (gulp) an Excel spreadsheet. What would ne the best flow of information/parameters/etc to allow that flexibility on a user-by-user basis, without vast redundancies?
Well... yes. The components are all separable, the same way Aura is designed (more or less). They don't offer them all on a menu website like Aura does, but all of them have their own Composer packages, and can all be used independently. For instance, there are several projects which use the Symfony HttpKernel package by itself. Twig is considered entirely separate, and is used in other projects as well. Doctrine isn't even managed by Sensio, and other things like the Config component, Console component and DependencyInjection component can all be rolled however you like in your own setup that follows the PSR standards. I guess that's why I never really understood Aura that well. To me, it seems like Symfony, only you're not offering a package that pre-rolls them if that's what you want.
If you're running multiple servers would you not set up a VPN?
The data in the Process and Persistence layer should always be the same no matter the presentation, and should use DTO's or DAO's as desired or appropriate. The Responder would handle different output formats like a view does, by providing different ways of translating the DTO's or DAO's in a view. EDIT: And to be clear, as the only input-aware part of the application, the Action would decide which Responder to use.
&gt;I assert that the DI system, not the Action, should be injection dependencies into Domain/Process/Persistence/Model objects. The Action translates input over to the Domain, yes, for whatever Domain element has been exposed to the Action -- but the Action should not be doing much other than handing off to the Domain and getting back the result. In most frameworks, this would require coupling your Domain very tightly to the framework itself, and the DI system you're implementing in would be a required part of any future application. In other words, I think this makes the application too framework/library dependent. I'd rather my Action layer depend on my Persistence layer, because I know that those two layers will always be together. I cannot say the same about the Persistence layer and DI system itself, or the framework that it is part of. Additionally, because of how simple the Action should be, if you need to refactor dependencies for some reason, it will not be complicated to refactor your Action layer, which makes the coupling (as much as it is coupled) easier to swallow. &gt;The Action should probably not be signaling the Domain when to persist data directly; that is, the Domain should be deciding when to do that, based on the inputs passed to it. This will always lead to tightly coupled processes and models, which I guess is what I dislike. If you don't have a problem with that, then what I'm suggesting isn't useful. EDIT: Perhaps I should roll a framework as a demonstration of this design pattern.
Yes, exactly. My conclusion after watching the vid was "All this can be solved by mysql_real_escape or something similar." Shitty video. Couldn't even understand the guy, because he talked really fast and corrected his sentences all the time.
That's actually a really good point :) In the use case that I was considering, this would not have been an option (where the client requires me to have the DB on one machine and the web service on the other, without me being able to control the network layer (?) between them) but yeah, you're totally right... if an option, I imagine a VPN would be way easier :)
&gt; In most frameworks, this would require coupling your Domain very tightly to the framework itself, and the DI system you're implementing in would be a required part of any future application. I don't think this is the case. For example, the Aura components need dependencies injected, but are not dependent on Aura.Di (or any other DI system). Complex objects, whether in the Domain or elsewhere, can be instantiated via Factory, for example, and thus have no need of an external system to put them together. EDIT: Maybe "in most frameworks" you are correct. But it's not necessary to tie a Domain system to a framework; indeed, it's better not to.
&gt; Well... yes. The components are all separable Not quite what I'm asking. The question is, "Do they *release* on an independent schedule?" I.e., does HttpKernel ever get released by itself, separate from the Symfony as-a-whole release?
Not DI in general, but if you're signaling persist orders outside of the Action, it either has to come from what I called the Process (non-DBAL Domain), or from the framework. The former makes the Domain a huge, tightly coupled ball of string, the latter ties you to a specific framework, and possibly even a specific version of a framework.
Why not just give the link to your public folder in google drive as your website?
That's not a horrible idea, I just was hoping to be able to make it look more like a traditional website, with my own formatting and theming going on. But editing content is a literal breeze no matter what.
Then why not use wordpress? It'll do pretty much the same thing as far as editing controls go, and it's got the "looking like a website" thing down cold. EDIT: I guess what I'm saying is that if WordPress is too complicated or too much work to post text documents, you probably need someone else to do your web work for you.
Not to contradict you, but do you have links or something that shows the release schedules for individual components? My very brief review from the components page shows release numbers for, say, the Finder component that track the Symfony as-a-whole release numbers. Again, I am not too familiar here, so I may be missing something obvious. EDIT: I mean, &lt;https://github.com/symfony/finder/releases&gt; and &lt;https://github.com/symfony/symfony/releases&gt; seem identical to me. Maybe that's not the case for other components.
&gt; has to come from what I called the Process (non-DBAL Domain) That's exactly what I'm getting at -- the Domain portions can easily be seen to encapsulate those behaviors. &gt; makes the Domain a huge, tightly coupled ball of string I can easily *imagine* otherwise, and I have heard others *describe* otherwise, but I admit my own Domain work has usually been pretty straightforward. Even so, I just don't see a requirement that it be tied to the framework.
While it doesn't support Google Drive (yet), [Flysystem](https://github.com/thephpleague/flysystem) does support Dropbox. I'm hoping they'll sort out a Google Drive adaptor soon.
Well I mean... most of the Symfony components are mature to the point where they aren't often updated. I believe that some of the most recent changes in many of the packages had to do with some HHVM updates, and php 5.5 updates. But each of the git repos update separately, and are what composer pulls from. But if you mean that their version numbers are managed separately, I have absolutely no idea.
&gt; But if you mean that their version numbers are managed separately, I have absolutely no idea. That's exactly what I'm saying. They do not appear to make independent releases of the components ... and Aura does.
&gt; Honestly, I'm a bit shocked to hear this "more people use it so it must be better" argument from you... You missed the point entirely then. It wasn't "more people use it so it must be better". It was that shared-nothing architectures have advantages when running at scale. Significant advantages. To the point that I would be genuinely surprised if any of the top 10 have anything significant shared (more than trivial on-server caches). Simply because once you get past a few dozen servers, shared state becomes a PITA to manage reliably. And reliability becomes the key factor at large scale. &gt; Those 3 companies are using PHP because they are stuck with it. Sure. Because no other company at that scale has ever migrated off of a platform... If it was important to them to get off, they would have. They haven't because there are tradeoffs. So it's very much not "stuck with", but "choose to", even if the other choices suck...
We shoot from the hip. We do things with not much thought put into it. I have been in this company for 8 months and I grew some grey hair.
Just use redis lists to atomically buffer your stats data, then pump it to the remote host using a scheduled process. It really does not need heavier stuff like a message queue. 
I have to say I have found this very enjoyable. Thank you for your consideration. :-)
I do something kinda similar sometimes. I have a setup to load arrays from flat files which is useful for big data like that. I use it because at work I deal with a lot of large xml documents that need to be parsed into arrays and modified. 
Likewise. :) Maybe I will put together that barebones framework I'm talking about to demonstrate the APPR pattern I'm talking about. I might even use some Aura libraries in it, lol. No reason to reinvent the wheel.
This is a really common gotcha with using json_decode. tl;dr: use json_decode($json, true) instead of json_decode($json) and you'll save yourself a hell of a lot of headache and you'll write less code. What follows is an exploration of the fucked-upness of json_decode. &lt;? // Here's an array. $arr = array( "foo" =&gt; "bar", "baz" =&gt; "qux", 1 =&gt; 2 ); // What's it look like? print_r($arr); /* Output: * Array * ( * [foo] =&gt; bar * [baz] =&gt; qux * [1] =&gt; 2 * ) * */ // We'll json_encode it. $json = json_encode($arr); // You have to represent this as a json object, because json doesn't have the concept of associative arrays. echo $json, "\n"; // Output: {"foo":"bar","baz":"qux"} // If we json_decode it, PHP treats it as a stdClass object. print_r(json_decode($json)); /* Output: * stdClass Object * ( * [foo] =&gt; bar * [baz] =&gt; qux * [1] =&gt; 2 * ) */ // Ok, that's a bit weird. We've got a php object with a member named 1. // That doesn't fly with the variable naming rules, but whatever. // Lets see if we can get the member value programatically. $var = 1; var_dump(json_decode($json)-&gt;$var); // Output: int(2) // Ok, it works. // If we pass true to the "assoc" parameter of json_decode, it will give us back an associative array. print_r(json_decode($json, true)); /* Output: * Array * ( * [foo] =&gt; bar * [baz] =&gt; qux * [1] =&gt; 2 * ) */ // Now, just for ~evil~ fun, lets try casting the stdClass object to an array (this is where a lot of people go wrong.) // Note: DON'T DO THIS. $badArr = (array)json_decode($json); print_r($badArr); /* Output: * Array * ( * [foo] =&gt; bar * [baz] =&gt; qux * [1] =&gt; 2 * ) */ // Looks normal, right? // Lets look deeper. var_dump($badArr["foo"]); // Output: string(3) "bar" // So far so good, lets try the one with the numeric key. var_dump($badArr["1"]); // Output: NULL // Oh yeah ok that looks ri-- WAIT, WTF. WHY IS THAT NULL? FU PHP. /* * Accessing the "1" key of the stdClass object works when it is still an object, but once you cast that puppy directly * to an array, it ceases to work at all correctly. This is an outstanding bug in PHP. * * MORAL OF THE STORY: * If you are fine with getting stdClass objects from json_decode, use json_decode($json). * If you actually want an associative array (most of the time, you want this), use json_decode($json, true) */ 
muh facades
True. Especially as I'm always one to complain when I find out of date tutorials... I will reply if / when I get this done. Thanks for calling me out on it, and giving me a good excuse for dusting off the blog :)
Ah..... doesn't that mean it *is* invokable, just not with that syntax?
if you're a little adventurous, and would like something new to try, yes, try react :) you'll have fun playing with it.
This code snip completes my TIL quota for the day. I'm wishing for the same thing, not having to declare imported variables with "use", but just for aesthetic reasons. I do like however that you have to be explicit and verbose about pulling in parent variables. With PHP creating variables without the need for "var" declarations, I think "use" is a necessity.
/u/JordanLeDoux if symfony released a component and have a blog post about it, they can announce here. To my understanding they release every component on a single day / time for all are subtree splits. But I am not getting into war of components / framework. But I do understand your feeling. Does a post about aura in a week disturbs too much? Or can you just close your eyes seeing it?
The one you are talking is something different than what Aura.SqlQuery provides. Just taking an example from docs $select = $query_factory-&gt;newSelect(); $select -&gt;distinct() // SELECT DISTINCT -&gt;cols([ // select these columns 'id', 'name AS namecol', 'COUNT(foo) AS foo_count', ]) -&gt;from('foo AS f') // FROM these tables -&gt;fromSubselect( // FROM sub-select AS my_sub 'SELECT ...', 'my_sub' ) -&gt;join( // JOIN ... 'LEFT', // left/inner/natural/etc 'doom AS d' // this table name 'foo.id = d.foo_id' // ON these conditions ) -&gt;joinSubSelect( // JOIN to a sub-select 'INNER', // left/inner/natural/etc 'SELECT ...', // the subselect to join on 'subjoin' // AS this name 'sub.id = foo.id' // ON these conditions ) -&gt;where('bar &gt; :bar') // AND WHERE these conditions -&gt;where('zim = ?', 'zim_val') // bind 'zim_val' to the ? placeholder -&gt;orWhere('baz &lt; :baz') // OR WHERE these conditions -&gt;groupBy(['dib']) // GROUP BY these columns -&gt;having('foo = :foo') // AND HAVING these conditions -&gt;having('bar &gt; ?', 'bar_val') // bind 'bar_val' to the ? placeholder -&gt;orHaving('baz &lt; :baz') // OR HAVING these conditions -&gt;orderBy(['baz']); // ORDER BY these columns -&gt;limit(10) // LIMIT 10 -&gt;offset(40) // OFFSET 40 -&gt;forUpdate() // FOR UPDATE -&gt;union() // UNION with a followup SELECT -&gt;unionAll() // UNION ALL with a followup SELECT -&gt;bindValue('foo', 'foo_val') // bind one value to a placeholder -&gt;bindValues([ // bind these values to named placeholders 'bar' =&gt; 'bar_val', 'baz' =&gt; 'baz_val', ]);
Aura is not the problem. Aura is a really good set of classes. I just find it absurd that the Aura team, you included, basically went: "All of our packages are independently versioned and operable, so that means that every package we maintain will be posted about separately." The Aura project has 18 packages. Sixteen of them are in 2.0.0-beta. Does that mean that we will see sixteen different posts when each of them reach stable? Does every package get a post at a minor version increment? My point is that is ridiculous. If any other framework which maintains full separation of packages were to independently version them and then post about each of them at once, it would also be insane. What I would really enjoy seeing is "The Aura Project has reached 2.0 stable! All of our packages are out of 2.0-beta!" Then give us a quick run down of what happened in this major version increment. Anyone who is awaiting the stable 2.0 version of a particular package in Aura is already paying attention to your news feeds directly. The level of information and detail that you provide for your project here is... well let me put it like this: if a LARGE project were to do this, the /r/PHP page would be completely flooded. And I say this as someone who has worked with individual Aura packages before and found them useful. Fantastic even. You are using semantics to pretend that each package is not part of a single branded project, and multiply the exposure of your project by 18 as a result. I have no problem with Aura, it delivers on its promises. I have a problem with your marketing, because it's annoying and cluttering.
I will. :) I actually could probably just write my own kernel and DIC and accomplish the rest with Aura packages, actually.
ok, I understand. I wish I could not spam you again on aura release.
Sure, and as you wish :-) .
That already works as of PHP 5.4 ;)
Using APIs really isn't that difficult at all. The best way to do it is to read through the docs and play around with it.
My bad. :) Thanks for the correction.
You need to use curl commands, the documentation tells you how to use the API. Example: http://sandbox.ihealthlabs.com/dev_documentation_RequestfordataofBloodPressure.htm
Usually there is a ton of documentation available from the API provider. Most times there are also code snippets or even classes you can download. Look around the help/documentation section for examples or check their forum (also a common occurrence for heavily used APIs) for folks who have developed classes to ease the use of it. As an example, my company uses Authorize.net and PostMarkApp in almost every project. We have classes for both that make using them dead easy. Authorize, being one of the largest payment processors around, has a lot of documentation, provides a PHP class for every service they have, and a great many developers who have come across all the problems you will soon face. The short of it is this; check the documentation and check with the community. Both will give you what you need.
OK, this seems cool, but it is a lot to take in. I've got the demo app running. But there's so much in there. Do you have some sort of documentation on how to start a new site, how to get the basics set up? Or do I need a lot more experience with these separate packages before I can use this?
In the general case, an API is simply a contract: "do this, and that will happen". Every library is an API, every system call is part of the operating system's API. For web-based APIs, each API is different in how it is actually used. Some APIs use a SOAP interface where you can use a standard client like SoapClient to make requests. Others provide you with a handy library in the language of your choosing so you don't have to worry about the communication at all (For the authentication part you will probably want to find one of the OAuth2 Client libraries that run in PHP). Others, like this one, simply say "send this request and we will give you that data" To send requests over http you'll probably use [libcurl](http://us1.php.net/curl). As the very basic example on the `curl_init()` page shows, this is broken down into steps: 1. creating a curl handle with `$handle=curl_init()` - this handle is used in every other function 2. setting up curl with the correct `curl_setopt*()` commands - there are quite a few examples in the comments. 3. execute the request and get the result. (note that the data the website sent is not provided to your program by default, there is a `curl_setopt()` flag to get the response.) 4. parse the result to get the data. Given a choice of JSON or XML, I'd go with JSON, which you can parse with modern PHP's `json_decode()` function 5. destroy the curl handle with `curl_close($handle);` when you are done requesting data (if not, loop back to #2 and you can setup another request... sometimes, depending on the server). If you have trouble with `curl_setopt()`, see if you can get the command line `curl` to make the request work. Also read the comments on the page, they are FAR more helpful than the listing of every option possible, since many of them tell you which options you need for specific tasks. Once you have it working with the command line, add `--libcurl output.c` to get a C file of all of the libcurl function calls the request used. These match pretty close with PHP's functions so it's easy to convert from C.
Looks like empty() uses __isset when checking object properties so may not be doing what you expect, depending on how the mysqli class has been implemented. 
1. does "marshaling data from the request" should take 5 lines of code or 50? does "marshaling and returning a response" should take 5 lines of code or 50? 2. The same 3 specific operations happen on active record ... the active record implementation gets a "getOrderItems($params)" request, "marshals" it into a query, invokes the DB, returns a result. Is ActiveRecord a Facade?
... and switch to nodejs?
It seems to be that you need: http://www.tutorialspoint.com/mysql/mysql-concat-function.htm
http://www.php.net/manual/en/mysqli.affected-rows.php affected_rows is an int.
Impossible to know if you don't post more code.
It may seem like overkill but I'd recommend looking at [Guzzle](http://guzzle.readthedocs.org/en/latest/) ([on GitHub](https://github.com/guzzle/guzzle)) as it'll actually make it a lot easier to maintain in the long run.
Aye, guzzle is grand, but may be an extra step to learn if just starting out. A good tool is Postman for Chrome. It allows you to fire things off to your API of choice direct from your browser. For tutorials, try youtube and tutsplus. Look for shorter videos (5-15 mins max) as it's not that involved, and some people do like to talk. 
I had originally found this, I'm just not too sure on how to use it. All the coding I've done has been done in c# and just barebone php, using a framework this time is my first. Any helpful suggestions on how to get started, the gets tarted guide is very specific, and not quite what I want to do. I'm open to provide a description of what I want to accomplish and get some suggestions on how to proceed, om lot looking for someone else to make this for me. 
Which PHP version are you using? From the documentation: Version 5.5.0 Description empty() now supports expressions, rather than only variables. 
Silex isnt the best framework to use if you’re just starting out. Its based around Symfony components, but if you’re comfortable with verbose object orientation then its a good way to learn some best practices. Silex doesnt try and structure your app in any way, so if you want to be guided in any way it might be a wrong choice. 
It might be useful if you could provide some more details so people can give better considered advice. Is there any reason you need to use PHP and not a standard MS stack which might be more familiar (just asking)? There are many concepts with C# in common when learning modern PHP but it's still going to be a steep learning curve, especially if you're working to a deadline. To ease the learning curve it might better using a bigger framework, in Silex not much is done for you, so things like setting up Doctrine can be tricky - in something like Laravel there are a lot less decisions to make and a lot more is configured out of the box.
How does phploy handles switching between different versions? If they upload everything in one directory the application might be in a unstable state, e.g. if file a.php is already updated but file b.php is still the old file. Then the application might crash while accepting requests. Also what happens if your deployment fails? Will the application stay in an unstable state? You could fix this by using symlinks and switching over to the new version at the end of the deployment, but symlinks are not supported by ftp. Also please don't use ftp for deployments because everything is in plain text. You should not transfer your credentials in plain text. Otherwise: Kudos for open sourcing your tool :)
It would be great if it does not require access to the PHP CLI, just launched from Browser. To deploy on no virtual server without shell access.
Care to PM me your Skype handle or email so we can discuss it in details? 
Some projects can contain a LOT of files, and PHPLoy does not seem to have a custom time_limit. The lack of multithreaded FTP support in PHP is also a big blocker for making this script better than a regular tarball uploader. 
Not to mention it would be really slow.
Hey man, welcome to Reddit. Don't mind the downvotes, /r/PHP can be sometimes an elitist bunch.
There certainly are VPS hosts which I work on, but do not own that the System Administrators are not willing to give me an SSH user or install Git on the server.
But it works!
Just use eloquent and a router.
There's not really a deadline. I'm mostly interested in learning it just for the fun of it. I mainly work with ssis and ssrs , and that family of products. There no time management system at work, so I created an excel sheet to manage my hours, however this quickly became useless as I sometimes leave work to do something and then return and there's the whole problem of working with hours in excel. Which is much easier in SQL. So I though I'd create a php site ( chosen because it's easy to find php hosting, less so aspx, also php is easier to get help with) where I can enter start, end, break, mark if it's a holiday, and some other options and then input that to the database, and then I'd so the calculations and so forth in SQL and output a nice formatted report of my hours, tasks if I worked on a holiday in the evenings and so on. 
Oh, thanks for the warm informing welcome. :)
PHPloy makes sense in two aspects: 1. While many of the hared host nowadays will give you SSH access, most of them won't have Git installed and won't allow you to install it yourself. 2. Setting up Git on a server and configuring deploymens on push can be a tedios job. Many web developers don't do complcated stuff and work with multiple projects continually. To those PHPloy is a super-awesome Filezilla alternative. They don't even want to hear about Git depoyments. With these in mind, I build PHPloy.
PHPloy does not transfer credentails. Also FTP is fine for deployments of small sites, even though it is in plain text. For switching between versions, I'm a under-maintainance feature that will be activate until the deploy is done. Other then that, not much can be done.
Note: When using empty() on inaccessible object properties, the __isset() overloading method will be called, if declared.
&gt; many will oppose the second It's a major version update, it *must* break things (to make some things better of course)
Link seems dead for me, any1 else?
Yeah, in that case yes. I develop WordPress themes, for example, and no configs are saved in the theme since I make a Git repo only the theme.
It's a bit hard to use it on a server without shell access. It won't work as it is, for now. But come over and let's build an interface for it. :)
What makes PHPloy desirable is the incremetal feature due to coupling with Git. That means you upload only files you changed and you don't neeed to remember which ones those are.
It's the *current* behaviour which makes no sense!
You are perfectly right. And SFTP support is comming too.
I want to make a pure PHP application and YAML is not. Although I admit annotations in Doctrine and PHPUnit are not pure PHP either but it's a hack meanwhile: https://wiki.php.net/rfc/annotations. &gt; staggering, at best Don't be silly.
Who is your audience for this piece? Apparently, only those who self-identify as doing things "just blindly." Maybe instead of premising your article on insulting your readers, you should offer helpful advice instead. You're actually making a good point here: &gt;It's also okay to use FTP for deployments for some cases like if you're stuck on a shared hosting environment where you can't use Git or other deployment tools and its also okay to use CodeIgniter if you're forced to support legacy versions of PHP. Wordpress is also having too much hate but its still okay and its still a good choice to use it if you're building a blog or a simple CMS etc... especially if the budget is low and you have a tight deadline and WordPress fits the project requirements, why re-invent the wheel? I'd say a better writing strategy would be to expand upon this - more specifically, when is Wordpress and FTP deployment okay? Dunno why, you just brought out the English major in me.
Jesus christ this is not good. I am glad I just played with CI and never put any into production. :|
Its not empty. The object exists. And it has that property. Use === 0 instead of empty 
Question: what is mcrypt used for? I have never used the extension; I think I don't even have it installed in development or production. Should I be using it? What are some use cases?
You're saying the value is 1, right? Well correct me if I'm wrong but: if ($db-&gt;affected_rows &gt; 0) this is testing if it is greater than 0, which it is. Shouldn't it be a &lt; sign? edit: Oh I just realised that part wasn't the problem. My bad.
You can write your own code if you really want to, it's not the problem. The problem is the API itself. It's totally crazy and has a lot of shitty details, from strange `!!|~` or `@!|~` strings in page token to returning 0..maxResults items in the file list
Encryption, not surprisingly http://www.php.net//manual/en/function.mcrypt-encrypt.php http://www.php.net//manual/en/function.mcrypt-decrypt.php If the question is what are the use cases for encryption - sensitive data like credentials to third-party services, credit card numbers, cookies.
Yup, that was the question. Interesting. I find it odd that its not included in a typical php installation. I guess I never had to use it since I use password_hash for passwords, but that's it. I will keep it in mind if I ever need to store that kind of data though EDIT: So I tried to install the extension in my CentOS server and I couldn't because I have php-common-5.5.13 installed but mcrypt requires php-common-5.5.12. Anybody know how to install the extension with the latest version of php? EDIT2: Solved yum install php55w-mcrypt --enablerepo=webtatic-testing
You might also want to consider posting this on /r/startups, even if you don't exactly want to turn this into a startup.
Oi vey... This has made my somewhat decent week crappy... We're currently using CodeIgniter as our framework on our platform (Not my choice, but stupidly my fault) and this just makes it even worse... Luckily after our next release, we're completely ditching CodeIgniter for a 2.0 complete rewrite of our app.
In my country CodeIgniter is the most popular framework. 30% of polled programmers said they use it (and 40% don't use any framework). This was polled during a PHP meetup. 
It depends on the app. There are many cases where that wouldn't be feasible. Especially if they have other apps on their own server writing to the database.
That's frightening.
They were **unserializing browser supplied data**!?! What. The. Fuck.
Just make sure mcrypt is installed
I have never run until a time limit unitil now. That's the only reason I'm not using it yet. I've pushed even hundreds of files that have taken like 5 minutes, but I've not run into a timeout. I've been excpecting one, but it has not happened. And no one else has complained either. :D
If you are on unix read from /dev/urandom otherwise use the openssl_random_pseudo_bytes function but ensure you check the crypto_strong flag. *edit: Symfony security component is a good example of how to do it properly: https://github.com/symfony/Security/blob/master/Core/Util/SecureRandom.php
so ... is this one of the smaller EU countries :) ... ?
Props to you for giving an explanation that a beginner can actually make use of. "It's simple, just read the docs" is not helpful for someone who doesn't even know curl is a thing. 
I'm going to go ahead and copy/paste your copy/paste for good measure. &gt;&gt; And as the first rule of cryptography is "don't roll your own", the words "custom encryption scheme" are never a good sign. &gt; I'm going to copy-and-paste this again. &gt;&gt; And as the first rule of cryptography is "don't roll your own", the words "custom encryption scheme" are never a good sign. &gt; Maybe a third time too, it's that important. &gt;&gt; And as the first rule of cryptography is "don't roll your own", the words "custom encryption scheme" are never a good sign.
Why not? It's (functionally) no different than setting a bunch of cookies and reading the values of all cookies. From the CI docs: &gt; While the session data array stored in the user's cookie contains a Session ID, unless you store session data in a database there is no way to validate it. For some applications that require little or no security, session ID validation may not be needed, but if your application requires security, validation is mandatory. Otherwise, an old session could be restored by a user modifying their cookies. This vulnerability doesn't appear to effect sessions stored in the database (at least, there's no mention of it) so I don't see it as a major issue if you follow the docs and RTFM.
Would it make sense to try and tackle this with Laravel? Or would that just bog me down too much? Probably would? 
Because unserialized strings can create objects.
There's no down-side to adding the set_time_limit(0), is there?
 &lt;? echo function_exists('mcrypt_encrypt') ? "Your server is ok" : "Your server is susceptible to the exploit"; should tell you if your server is susceptible to the exploit
Which country is that?
Or Symfony2. 
But.... but.... https://plus.google.com/u/0/110695574125259754582/posts/A6wKdgwheMe
I would report this as a bug to PHP. [https://bugs.php.net/](https://bugs.php.net/)
Yeah, but there is no upside either.
Please tell me that's a troll account. I mean, based on the fact that they are making *some* good points and truly trying to defend their views on the bad ones makes me think it might not be. But... just.... wow...
I don't know... a hard time limit has a risk of halting operations midway. Perhaps an internal check every once in a while would be better.
[Here's a tool](https://github.com/sindresorhus/pageres) for generating screenshots remotely. This will require some knowledge of Node JS and running console commands. As for everything else, much of what you want would be fairly trivial with a framework like Laravel or Symfony. I haven't personally used Silex myself, but I would say that a lighter framework might be more appropriate in this case. I would suggest just diving in and getting your hands dirty. Set up a localhost on your own machine and play around with composer and running commands against your own server. You can get up and running pretty quickly using a simple LAMP stack like [MAMP](http://www.mamp.info/en/) (OSX), [WAMP](http://www.wampserver.com/en/) (Windows), or [XAMPP](https://www.apachefriends.org/download.html). Once you're able to do that, see what you're most comfortable with. If you still feel like you're out of your depth, look into hiring a developer to handle a lot of the more technical work. **UPDATE**: Links
Mmh, good point. :)
Silly thought, but one to try and figure out what's going on: try ... if (empty($test = $db-&gt;affected_rows)) { ... } And see if that works.
We are switching to Laravel. 
&gt; The data in the Process and Persistence layer should always be the same no matter the presentation, and should use DTO's or DAO's as desired or appropriate. Not sure I'd agree with that. Writing a response to a mobile client might involve only sending down a subset of information. Unless you're saying a DAO would decide(?) to only pull a subset of info. ?? 
The DAO/DTO should be the same. The Responder should choose how much of that information to present in the view.
And combined with __wakeup() can cause all sorts of issues. Good point.
I'm not sure where this post belongs but I know it's not here.
Could you explain why this is so bad? //Scramble password and put into database Database =sha1($salt.md5($Pass)); //take out and compare with user input if(sha1($salt.md5($Ppass)==$row["pass"]){ echo='Verified'; } Obviously you use it with failed login attempt counters and other mitigation strategist, but even CI does something remarkably similar to this code that everyone is making fun of that guy for. The only difference is the hashing algorithm used (which may be related to age of code or server libs installed).
I'd argue Symfony's SecureRandom is not doing it (security wise speaking) properly: https://github.com/symfony/symfony/issues/10759
Sorry 'couse I wasn't clear - this was interview for PHP Developer. It's kind of trending that interview is not only technical but with lot other bullshits. So it would be great to hear experience of other PHP Developers who maybe was in same situation. &gt; m not sure where this post belongs but I know it's not here 
Here we go. This should provide unbiased secureRand() results and also work with negative numbers. function secureRand($min=0,$max=PHP_INT_MAX) { if ($min &gt; $max) { $tMax = $max; $max = $min; $min = $tMax; unset($tMax); } $bits = $this-&gt;securePseudoRandomBytes(PHP_INT_SIZE); $val = $max - round((bindec((binary)$bits) / PHP_INT_MAX) * ($max - $min)); return $val; }
Yes, well spotted, I was looking more at their implementation of using open_ssl_random_bytes correctly, by checking for the strong boolean, but yes, falling back to anything that is not cryptographically random is a bad idea.
&gt; lot other bullshits You're using this lovely phrase to refer to what's traditionally known as "domain knowledge", which is usually more important to your employer than what you might happen to know about a specific programming language. This is especially true of high level managers, like the one your friend flippantly dismissed.
Damn.. I just realized I've made the same mistake of introducing this vulnerability by serializing an array to simplify and centralize storage of cookie info on my app. From what I can tell.. this is only really a vulnerability if I have a class with a __wakeup() method... and in addition to that.. the __wakeup() method would have to help in producing anything interesting. Is there a site that details vulnerable __wakeup() methods in popular libraries? 
It's only *obviously* a problem if you have an object in the namespace that has a __wakeup() method... but that doesn't mean it isn't a vector for other sorts of attacks.
CI = Shit
seems more than a little potentially wasteful to do constant XYZ calculations when they may not be needed. the practical impact, with strong caching in place, may be negligible in some situations, but I'm not sure I could be a fan of that sort of architecture.
??? Constant calculations? This architecture reduces the need for calculations, because the data doesn't need to be transformed to be fed to different processes or layers. Are we misunderstand what the other person is saying?
Why would the Action not know which set of data to get? It's the only input-aware part of the program, and also the program that dispatches the Persistence layer. If you want to prevent unnecessary row retrieval like that, you could do it in the Action. If you don't want to mix in that logic to your action, you process extra data. How do you handle this now?
Well if you are familiar with OOP and MVC pattern then learning how to use Laravel would be trivial in my own perspective, but regardless of the tools something i am not getting is what exactly is the purpose of the app, why I would need to get a screen shot of my website to see if they are "ok" or not, what kind of data, diagnostic or feedback would this tool give me beside a static screen shot?
andorra?
"If your boss ask you to learn all about Marketing for tomorrow - how will you proceed ?" -- I would ask for more info. You'll never go wrong asking for more info. Maybe he wants you to build a kick ass tool to automate a pinch point for the marketing team? You never know.
Because of THAT, lot of good developers failed at job interviews - good examples are Dropbox, Tumblr and probably thousands more. They were good to create multi billion services but not to be developer in some company - irony :( . The point is that those question are not relevant and important for developer position - probably yes for some management position. If you ask me - I'll probably fail too because at job interview you are not relaxed at all. Each developer will be more appreciated if have dev ops skills or front end skills or ... beside of strict language. That is my understanding of "domain knowledge" and it is good if you put it in category - general tech knowledge. Cheers
Can't do that on 5.2 :/
I'm confused, does it being an int change anything? 
I'm using 5.2.
Well, the ORM determines the database connection. My personal preference would be Symfony using Doctrine 2 and the oci driver: http://doctrine-dbal.readthedocs.org/en/latest/reference/configuration.html EDIT: Laravel doesn't play very nicely with Oracle because Eloquent (the ORM) doesn't support it. Also, don't use Cake.
I'll go with SlimFramework + Composer. This will give you freedom and flexibility to do what ever you want. I can recommend you some Composer components: Monolog - for logging Guzzle - if you need to create request to third party web service Database - hmmm never worked with oracle from PHP :( Twig - templating engine - probably better to go with AngularJS on Front and skip templates server side. This will save you development of API in case that you have to integrate mobile app with your web app. predis - driver to work with redis - best solution for caching - much better then memcached Swift Mailer - for sending mails All of this can be found @ https://getcomposer.org/ Rest is PHP ;) Cheers and I hope this will help. 
&gt; Obviously you use it with failed login attempt counters Unless I get a database dump from your server. The simple reason is that your passwords are incredibly easy to bruteforce. MD5 is a one-way encryption: I don't need to know what "database" actually equals to be authenticated, I just need to match the value. SHA1 has been cracked, and there are rainbow tables that exist to match values. All I need to do is find the most common database value (which will most likely be equal to "password"), and then figure it out: 1. MD5 isn't secure. It's not too hard to guess an MD5 value (http://md5.gromweb.com/) 2. SHA1 ain't much better (https://crackstation.net/) 3. MD5 is 32 hexadecimal digits (128 bits) long. 4. Your password would then be $salt . $md5password (which I have figured out). 5. All I need to do then is SHA1 your salt with the $md5password and I now have access to every user with the password "password". From there, I can figure out every other password in your database. And it took me a whole of 5 minutes. I only have to do that with 50 or so of the top 100 passwords in the world before I'll have your database wide open and know the passwords of every single one of your users. It should be assumed that if you give someone the data and they know your encryption method, they shouldn't be able to figure out all of your passwords. &gt; Never hash a password two times. It does not add extra security; rather, it makes the hash weak and inefficient. For example, don’t try to create an MD5 hash of a password and then provide it as input to sha1(). It simply increases the probability of hash collisions.
usually controller step checking parameters (user agent, hostname, etc) and passing that info to a service method which decides which data and how much to pull back.
Some things I maybe would do is * create a phar * maybe add more commands to create the deploy.ini file * properly integrate a more viable shell fx [commando](https://github.com/nategood/commando) or [symfony/console](https://github.com/symfony/console) * composer!
This would be very similar then. The Action (controller) would have a step that checks the relevant parameters, then informs the Persistence layer how many results to get. Then it would inject those results into the Process layer to perform whatever processing needs to happen, and the result (a DAO/DTO where the data has been altered by the Process layer) would be injected into the Responder. The main difference is that you wouldn't trust the Process layer to talk to the database or persistent store at all. Perhaps it's coming from Redis instead. Perhaps you need to change ORMs. The Process layer should expect *data* itself in a DTO or a DAO that is functioning as a DTO and process the same way no matter how many records there are or where they came from.
With PHP 5.5 or later: http://php.net/manual/en/function.password-hash.php PHP 5.3.7 or later: https://github.com/ircmaxell/password_compat
I've deployed projects that have literally taken more than half an hour to upload and have never run into a timeout. The only possible timeout may come from ftp_connect(), but with a [default] value of 90s, it's quite improbable to happen.
It won't do anything - CLI PHP scripts have no time limit.
Always assume that someone has access to your data for an infinite amount of time, and that they also know how your algorithm. Basically, even if someone knows everything except your password and your salt, they should not be able to figure out your password. This should have all of the information you need: http://stackoverflow.com/questions/1054022/best-way-to-store-password-in-database As Neothermic said: Use built in functions. You are not clever. And you are certainly not more clever than any random script kiddy. No one is going to break into your website by bruteforcing 17,000,000 password attempts at your login portal: They're going to download the DB and do it in their free time on their own computer. And if I am good enough to steal your database, do you really think I'm not good enough to steal your code or storing methods. Algorithms like BCrypt have added factors designed to make them more difficult to encrypt, and therefore, more work to calculate each one. If each value value is unique, and each salt is unique, then they'll have to calculate a new table of potential values for each encrypted string. Meaning instead of (example) spending 0.004 seconds getting a single SHA1 value from salt, they would spend 0.037 seconds calculating each value. Increase the work value and they have to spend 0.1 seconds calculating each value, etc. It's the difference between me asking you to find 36^2 vs. 36^9 .
Ok, my bad. I forgot empty() handle int values. But, in my opinion and it was what I was meaning : it's always an int, even if no queries has been executed. You will always have an int, 0 or more. You can directly check his value. I was also confused by your problem so I did some tests with differents queries : var_dump($mysqli-&gt;affected_rows); // int 0 var_dump(empty($mysqli-&gt;affected_rows)); // boolean true var_dump($mysqli-&gt;affected_rows); // int 1 var_dump(empty($mysqli-&gt;affected_rows)); // boolean false For information, I did it with PHP 5.4.16. Nothing wrong here :(
Meme feels relevant: http://i.imgur.com/siQUomy.jpg
Ill thank you both. I knew nothing of ADR before this. I just had a good ah-hah moment.
/u/JordanLeDoux basically when you are writing a story I feel we need to point the context of the story. For a newbie when I start with SingleTon and Dependency Injection they may be wondering what the hell. But for a person who have been reading the same it will be annoying / disturbing. But it is always good to take the good, and remove the rest. After all it is free. You can take something good. As you mentioned in the replies, your comment when first read is like a flame war :-) , but I know it was not ;-) . Thank you.
It's grand. It feels like cheating at programming. 
http://laracasts.com 100% worth ten bucks a month. Just try it for one month, or just his free ones, you'll be hooked. Jeffery will blow your mind. I have yet to find anything that even comes close to rivaling Jeffery Way's screencasts when it comes to learning. 
Actually, in a system where numbers are represented by bits, for non-power-of-2 ranges (3, 5, 6, 7, 9, 10, etc), that solution will be biased. Check out [this explanation](http://stackoverflow.com/a/10984975/338665). Instead, what you should do is the "choose" method, where you keep generating numbers until you get one in range: function genRand($max) { do { $candidate = genRandomInt(); } while ($candidate &lt; $max); return $candidate; } Of course, for small ranges, this is exceedingly inefficient. So you can "mask" to the nearest power of 2. This is a technique I use often: $bits = $this-&gt;countBits($range) + 1; $bytes = (int) max(ceil($bits / 8), 1); if ($bits == 63) { $mask = 0x7fffffffffffffff; } else { $mask = (int) (pow(2, $bits) - 1); } do { $test = $this-&gt;generate($bytes); $result = hexdec(bin2hex($test)) &amp; $mask; } while ($result &gt; $range); return $result + $min; There's more to it, but that's how [RandomLib](https://github.com/ircmaxell/RandomLib/blob/master/lib/RandomLib/Generator.php#L166) generates unbiased integers. It's harder to do than you think.
Don't use mysql_* things . It has reached the end of life. Try using [PDO](http://php.net/pdo), if you think its hard, try something like [Aura.Sql](http://github.com/auraphp/Aura.Sql/) or [Doctrine DBAL](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/introduction.html) EDIT : Sorry in the first look I thought it was mysql_ , just understood it was mysqli :-)
Serbia. We're backwards in many things :) In our company there are several website groups. My group switched to Symfony2 last year, but other groups are still stuck on CI. On of the other groups is planning to do a rewrite of their site and they haven't decided yet between CI, Symfony2 or Laravel. Seriously, somebody is planning to START a serious project in CI in 2014 :(
This actually sounds like a really cool project for myself as well (I'm doing an apprenticeship as a php developer). Not too much involved, but stil challenging enough to get me out of my comfort zone. Only thing I currently have no idea how to do would be the "automatic scrrenshot every morning" part...
This is a good reminder about the weird quirks related to crypto coding (let alone the recently posted CI stuff). This kind of things are pretty impossible to know/handle unless one has been studying the subject. The simplified random number generator in PHP core would help alot ;) 
&gt; backticks, not single-quotes Copy-paste detected :)
__wakeup(), unserialize() and __destruct() are all problematic. Furthermore it's not uncommon for unserialization procedures of internal classes to contain potentially exploitable bugs.
I agree, a Javascript only project should really only use a Javascript package manager, otherwise how many different languages package managers do you support :/.
What we really need is some kind of standard global package manager feature set and syntax. [That would totally solve all of our problems](http://xkcd.com/927/)!
You also have to be very careful with type coercion when using ==. If your hashes contain only numbers (rare, but happens) then PHP will convert the two hashes to numbers, and compare them numerically. It's unlikely to ever be exploitable, but using === would be safer. http://phpsadness.com/sad/47
&gt; somebody is planning to START a serious project in CI in 2014 That is really sad :(
It's not just __wakeup() you need to worry about. __destruct() will (probably) be called as well when the object is destroyed. __toString(), __get(), __set() and __call() can also trigger, depending on what's done with the object after it's returned by unserialize(). And even if one of these isn't directly exploitable, the __destruct() method of a class might create a new object (for example), so then you're looking at all of the __construct() methods available as well. Chaining different classes together like this is called a POP chain. There are some great slides from BlackHat USA 2010 about PHP object injection if you want to learn more : https://media.blackhat.com/bh-us-10/presentations/Esser/BlackHat-USA-2010-Esser-Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits-slides.pdf I'm not aware of anyone having listed vulnerable classes, but it's known that the Zend framework has classes that can be used for code execution (detailed in those slides).
According to that, they both use the CSP (cryptographic service provider) to generate their random value. I get what you're saying, that's why it's a fallback if mcrypt is unavailable. Better than falling back on my own "random" bit generation.
Would you have a small framework in c# that can be suggested, or is it easier to just use the wizards from visual studio? 
Right, because the property exists, which is what I was saying. I misread OP's question though, I thought they had expected it to return empty if affected_rows was zero. Perhaps running reflection against mysqli will shed some light. There may be something odd about the property, if I get time I'll look at the source, I'd be surprised if this was unexpected behaviour after all this time though.
&gt;I don't want to be committing or rsyncing or scping anything in the development process. I would also prefer not to install any server software on the machine I develop from since I want to keep it running as snappy as possible and I don't really know anything about servers on Windows. Seems like you're out of luck then, because you basically just said "I don't want to do any of the solutions to my problem that people have invented". I use an Ubuntu VM on my Windows desktop for development with git, PHPUnit, Vagrant, etc. What you're looking for specifically is browser testing, right? A great solution to that in the PHP world is http://codeception.com/, which allows you to write acceptance tests with Selenium, so you can do ACTUAL browser testing automatically. But you still have to execute a command to run the tests, and I've only ever done a testing suite like that on a Linux desktop.
[I asked something similar a while ago](http://www.reddit.com/r/webdev/comments/1ihtui/why_cant_we_have_a_unified_package_manager/), though not much could be extracted from that thread. One of the problems of a unified package manager is that each one has their own philosophy. For example, NPM stores each dependency recursively (your package gets the exact version you asked for, just for you), while Composer only stores one version of a package. If instead of a unified package manager we had each one being able to interpret other package manager's formats, it would be easier to implement but we'd end up with diferent file formats (like we have now) that could not target language-specific options (`package.json` won't include namespace information to PHP, it's not their focus). In the end it's all about retrieving packages from sources. It can be done. Problem is to get everyone to decide on how to design and implement it.
mnot is right, that is a problem... with Linux :D
This.
Yo! Change code snippets colors. I can't see a thing.
sometimes you still need ssl for monitoring as its not wise to have the monitoring within the same network that it monitors, so either you need to write an api/wrapper that queries the mysql monitoring data and publishes it to some api, or you just allow ssl connections from one specified external API that allows software like munin/caccti/mysqlmon etc to get its data 
I prefer when code is on the same machine as the code editor. Developer + Code -&gt; samba -&gt; webserver Instead of Webserver + code -&gt; samba -&gt; Developer That way, if there's network problem, your source code is still there. Vagrant helps you setup the VM and the sharing in this way. Code editors are so much more responsive when doing this. 
Yes https://rebuildinglaravel.com/part-2-application
Someone would have to maintain it and keep it updated. For a package that could be acceptable, but for many packages and many languages I don't see it like a viable route.
But there are half a dozen JS package managers alone. It's still ridiculous to support all of them. I refuse to support Bower now, since the dev spammed every goddamn JS github repo with a generic "hey support bower" message.
&gt; The passwords should be stored as a cryptographic hash, which is a non-reversible operation that prevents reading the plain text. When authenticating users, the password input is subjected to the same hashing process and the hashes compared. &gt; Avoid the use of a fast and cheap hash such as MD5 or SHA1; the objective is to make it expensive for an attacker to compute rainbow tables (based on hash collisions); a fast hash counteracts this. Use of an expensive hash is not a problem for authentication scenarios, since it will have no effect on a single run of the hash. &gt; In addition to hashing, salt the hash with a randomly generated value; a nonce, which is then stored in the database and concatenated with the data prior to hashing. This increases the number of possible combinations which have to be generated when computing collisions, and thus increases the overall time complexity of generating rainbow tables. &gt; Your password hash column can be a fixed length; your cryptographic hash should output values which can be encoded into a fixed length, which will be the same for all hashes. &gt; Wherever possible, avoid rolling your own password authentication mechanism; use an existing solution, such as bcrypt.
Spot on. While the general purpose of each of the package manages is the same, there are significant divergences in dependency handling. This doesn't explain the lack of unification for the shared properties however. (Or at least taking a cue from established system package manager schemes.) The workaround onus shouldn't [lie with package authors](https://github.com/AndreasPizsa/grunt-update-json). A simple import interpretion seems sufficient. But it's unlikely that the NIH latecomers (in particular composer) would ever bother. I'm still unconvinced about JSON anyway. It's the obvious choice for the JS bundle managers, sure. But even there it's copy'n'pasted+ hand-edited; nobody is utilizing its machine editability e.g.
I find it amusing that the guy sending the PR dismisses the library author's concerns with "you have nothing to lose, merge this", but when someone mentions that he can fork the repo, it's "too much work". There is already a solution for composer mentioned in the PR, but noooo, now I have to check for bugfixes manually, that is also too much work. Get your head out of your ass. 
I got around doing this by stubbing out the method that does the output buffering, but still wondering if this can be done.
Did I understand correctly that you have output buffering enabled and you want to output something anyway, bypassing the buffer? If so, have a look at this: http://borkweb.com/story/bypassing-output-buffering-in-php
Three shall be the number of managers thou shalt support, and the number of the supported managers shall be three. Four shalt thou not support, neither support thou two, excepting that thou then proceed to three. Five is right out. 
NPM for server-side JS deps and developer tools your project uses (i.e. Grunt, Gulp, less, coffeescript). Bower for front-end deps (bootstrap, jquery, jquery plugins, angular). Composer for server-side PHP deps. I don't really understand why there should be overlap between these.
Why do you assign a password to the key in the first place if you're just going to remove it later? Just generate a password-less key like this: `openssl genrsa -out server.key 2048`
Will sort that nonsense out!
Thought I'd quote the exchange, cause it's hilariously awful: &gt; **Helpful commenter**: Speaking of flexible; someone could also just maintain a fork of this repo for this very exact and specific purpose. Or does this seem like an outrageous proposal? &gt; &gt; **Pull requester** this means, the one manage the fork, must update its fork every time, there is a change on this repo. Its possible, but crap. &gt; &gt; **Helpful commenter**: Well you could limit it to tags/versions. But this was only a suggestion. Merely stating there's more than one way to approach this topic. &gt; &gt; **Pull requester** well there are, but to be honest, only one makes sense. I know your oppinion, and i don't think you'll change it, but making suggestions, which aren't usefull solutions doesn't help. Please folks, don't be like **Pull requester**.
If you want to edit files on a Linux computer from a Windows one, win-sshfs is the best tool I think, despite being a bit buggy. https://code.google.com/p/win-sshfs/
Have you looked at Vagrant?
I mean, if someone in the PHP community really wants hinclude to be available on composer, they *can* do that.
Exactly, it seems that all the package managers at least have mutually exclusive domains. Perhaps someone needs to make a package manager manager.
If spending the better part of a day wading through Softpedia, Download.com, Sourceforge, Geocities, multiple search engines, *.ru websites and TPB is your idea of a solution, I'd rather live with the problem.
Why would anyone use a PHP package manager for a Javascript library? This sounds like a non-issue.
This will bring PHP 6 much closer to the flexibility of Perl(5)'s syntax, which is a welcome improvement.
I too use npm to manage my frontend dependencies. Oh wait... Grunt...
I did not expect this to go viral, but people seem to like it so I've posted it here.
[**@dr4goonis**](https://twitter.com/dr4goonis): &gt;[2014-06-11 06:49:22 UTC](https://twitter.com/dr4goonis/status/476617165463105536) &gt;PHP Streetfighter :) [#php](https://twitter.com/search?q=%23php) [*pic.twitter.com*](http://pbs.twimg.com/media/Bp1IyS7CYAATIEB.jpg) [^[Imgur]](http://i.imgur.com/Qul9lWN.jpg) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/27w7eg%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
I forsee strict errors complaining about non-existent offsets in your future. . .
The success message will never be written, because instead of setting the success message to $msg, it's set to $_SESSION['msg'], which will be overwritten with an empty string after the HADOUKEN!
The boolean predicate stuff is only a little example that shows how to define a builder. The library does not provide a rule engine (although I created this library developing Rulez, a fast rule engine for php, still in early dev phase https://github.com/nicmart/Rulez)
I expected this to be something about the internals mailing list.
The bottom $_SESSION['msg'] is for catching the error messages. The success message is added directly to $_SESSION['msg'] before the redirect and exit happen.
Ha, missed the redirect. :) This is why this sort of code is so unreadable...
First off that code is disgusting, but why are they returning a function? Serious question.
Nasty crap like this happens in every language. It's just bad code. Nothing unique to PHP.
They're not returning a function, they're returning the result of a function call.
Is just a joke, there's no need to *defend PHP*.
&gt; `$this` FTFY
You can use [`expectOutput{String,Regex}`](https://github.com/sebastianbergmann/phpunit/blob/461607a24972f73015b9781a2c97c4f8c9b3a033/src/Framework/TestCase.php#L415-L444). Here are some [docs on it](http://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.output).
I expected something involving /u/philsturgeon :p
Except they don't. Take a look at any number of bower packages which are managed like this because the author wont ship a built version... Invariably the fork is always out of date by up to a couple of versions, or worse the fork maintainer falls off the face of the planet and no longer looks after it. There really isn't any motivation for a forker to maintain a package beyond their own immediate needs. Once the project they need it for dries up they typically stop.
&gt;If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program. \- Linus
Yes please Ryu. Obliterate that code. 
Made me chuckle.
You get a token from their API and using this token you can make a request. Then this token will no longer be used. Or something like that. You will need another token to make another request. Public key is known by everybody. Secret key is known only by you. It the same thing used in https (SSL). It is used for secure communication.
You mean notice level errors?
Interesting. I've been working on a fluent API for the last week or so but I never considered this `end()` business. I'm not sure how I feel about it yet. It does reduce the brackets, but the brackets also help the IDE align things and help you ensure you end everything correctly. Is that basically all this library adds? In your example you have `use NicMart\Building\AbstractBuilder;` but never use `AbstractBuilder` anywhere. Was `CompositePredicateBuilder` supposed to extend it?
Didn't even have to mouse over that link :|
Thanks! I'm certainly still keeping my eyes open. This company looks pretty cool!
&gt; I'm still unconvinced about JSON anyway. It's the obvious choice for the JS bundle managers, sure. But even there it's copy'n'pasted+ hand-edited; nobody is utilizing its machine editability e.g. I do. As long as I can remember the damn syntax. npm install --save[-dev] package composer require package # I *think* this updates composer.json?? bower --i-dont-know-what-the-hell-i-need-to-put-here package And I don't even know if that all have corresponding uninstalls. Sometimes I'll just nuke the whole friggin vendor/ or bower/ or node_modules/ folders to get rid of the crud I didn't end up using.
True that. And this is why I never install unofficial builds, even if they are more convenient.
"Not a" and "yet another" naming conventions are pretty gay IMO, but "napalm" does sound pretty sweet.
I use grunt/gulp to collect/minify/bundle my bower dependencies. There's no need for those libs to be available via npm.
Fucking apt-get has jQuery in Ubuntu. Package managers have no bounds to what the fuck they support.
This is an SQL question, and not necessarily a PHP support question. MySQL = Database Type PHP = Server Side Language SQL = Middle Ware (Let's PHP communicate with your Database) Your SQL looks wrong, I assume you are new to SQL. I suggest doing some standard beginner tutorials to learn how to properly format an SQL query. Here is a helpful link to understand the SELECT statement in SQL: http://www.sqlcourse.com/select.html You also want to be sure to read the SQL White Pages to understand how dangerous it can be if a hacker wants to inject code into a variable that is not sanitized. This can allow a hacker to manipulate your database and return values and records they are not supposed to be able to access. $User_Input_String = "Bill"; $Sanitized_User_Input_String = mysql_real_escape_string($User_Input_String); $query = "SELECT `Username` FROM `users` WHERE `Username` = '" . $Sanitized_User_Input_String . "';"; $results = mysql_query($query); if (!$results) { print "Username not found."; } else { print mysql_fetch_assoc($results); } 
In programming, a "token" is typically a bit of data assigned to you by someone else for the purpose of either identifying you or authorizing you to use a resource (or both). Consider a bus token: because you have a bus token you are allowed to get on the bus. In this case, because you have an access_token you're allowed to access their API on behalf of the user (it both identifies and authorizes you) "Public key" and "secret key" are two halves of an asymmetric keypair for encryption. Anything you encrypt with the public key can be decrypted with the secret key (and in most useful cases, vice-versa) Because of this, you give out the public key to everyone everywhere, and they can always use it to send you encrypted data. You keep the secret key (also known as the Private Key) private and never let anyone have it, and only you can read the information that was encrypted with the public key. As for how they come into play in all of this, you'll have to read their docs to figure out what they're doing. I skimmed it and honestly I'm not sure.
What /u/tidder112 said. This is an sql support question - having nothing to do with php. ...that being said. First, get yourself a Database Abstraction Layer. Many of these will have sanitation built in. Many frameworks will have DbA's built in - PEAR also offers a nice one. Second, read up on parametarized queries. 
It can be convenient, for example Bootstrap is in there. Our project has a composer.json, a Gemfile and a package.json for Composer, Rubygems, and NPM in that order. I've also found a few packages that are bower only but i couldn't bring myself to use another one.
Thank you very much for the help. I greatly appreciate it.
Shouldn't have even mentioned `mysql_query`. Let's get the noobs started with PDO and forget `mysql_` even exists.
My beginner's guide to guzzle: Read manual, enjoy.
I'm waiting for the day when people stop talking about acronyms and start writing software. Seriously, it doesn't always fit in MVC because you shouldn't be following MVC religiously. Since it doesn't fit into MVC, we need to create a new acronym that more accurate describes it? 
Cool stuff. Looks like you give instructions for installing Guzzle 4, but the code samples are for Guzzle 3.
World Cup is just around the corner, maybe something to do with different teams or stadiums? Multiple stadiums as classes an interface to show what each must have. Just throwing things out though. Might not be as complex as you are looking for
I know you mentioned you did not want code but you should read this stack overflow answer. It does a great job of explaining oop in php and gives an example you that may spark some ideas. http://stackoverflow.com/questions/1343619/php-real-world-oop-example 
It was a joke. FizzBuzz Enterprise mocks over engineering of a simple problem. Some classes I've worked on in PHP recently: - an SQL query builder - database classes/PDO extension - Twitter API client - Little-endian binary reader/writer - CSV reader/writer
This library is only an idea on how to implement nested builders with a fluent interface through callback passing. As you can see from the drawback section, there are some downsides, as IDE autocompletion. Yes, you are right, I've just updated the README, thanks!
Thanks for noticing. Yes my code was version 3 based. Updating to latest seems good idea, thus, I have fixed the examples to match latest version.
the most simple variant is always using WinSCP and chosing "keep remote directory up to date" this syncs all the files on startup, and then all changes when you hit the save button, which usually takes very few seconds (only the initial sync takes a while) This like all Setups that basically let you test on production hardware is not perfect, but it works and is by far the easierst to setup as you only need to install winSCP :)
`npm install grunt` is what I'm talking about.
comments come to mind (- ;
Yep as mnapoli said, it is practically impossible to counter all the possible browser dependent quirks etc. If you need to allow HTML in user submitted data, go with, say, [HTMLPurifier](http://htmlpurifier.org/).
Except shims are a pain in the arse. Much easier to simple `require()` it without any additional config.
Don't do this. It's practically impossible to effectively protect against XSS via regex patterns. Do whitelisting instead.
Whitelist it is! Thanks for your feedback!
One note on this though - CSP is supported slightly differently in different browsers, so be sure to check out this chart if you have specific browser versions in mind: http://caniuse.com/contentsecuritypolicy
 if ($loop instanceof StreamSelectLoop || $loop instanceof StreamSelectLoop) { $this-&gt;setLoop($loop); } https://github.com/sinergi/gearman/blob/master/src/Gearman/Application.php#L86 Submitted a pull request to ensure $loop is an instance of StreamSelectLoop or LibEventLoop, not just StreamSelectLoop twice.
How about an activity feed? It allows you to showcase a lot of skill, and would be fun to code. ( will require db code as well though ) Could have the Primary Class and Iteration class. 
Is the escaping that htmlspecialchars doing inappropriate here? Why would you want to allow a direct use of the "&amp;" in your app's output? That's just asking for trouble.
&gt;I'm escaping the posts just before they're printed using htmlspecialchars() That's exactly what you're supposed to do. &gt;but this, of course, escapes the ampersands. Yes that's what it's supposed to do. `&amp;` as input is escaped as `&amp;amp;` in the HTML source which is rendered as `&amp;` when the HTML page is viewed. &gt;Is there a safe way to allow the ampersand character as user input? Yes, do what you're doing.
Oh, that makes sense. Normally I would just call the method with $this-&gt; so i was confused.
&gt; Added "finally" keyword. finally... only took 8 (?) years of discussion ;)
Thanks for the comment. It uses a non-documented feature of the Rapportive API explained in this blog post http://jordan-wright.github.io/blog/2013/10/14/automated-social-engineering-recon-using-rapportive/.
Urgh, the code... so much over prematurely abstracted and pointless inflexible interfaces, a mountain of boilerplate and overhead to obscure what *could have* been a neat 100 line snippet.
If you want to protect against XSS but still allow some HTML, then use a library such as HTMLPurifier. If you don't want to allow any HTML then just use htmlentities() on your output. Personally, I'm a fan of using parsers like markdown or bbcode instead of allowing raw HTML. Edit: I don't recommend that you try to build your own XSS filter. I guarantee that hackers will be more clever than you and use tricks to break your filter.
I would just use UDP non-blocking: $fp = fsockopen("udp://$host", $port, $errno, $errstr); if (!$fp) { return; } stream_set_blocking($fp, 0); fwrite($fp, $data); fclose($fp); 
I downvoted you because all you did was shit on his code without giving any constructive criticisms. People like you are what make this subreddit unbearable. Go back to coding in your perfect codebase you dumb fuck.
*Edited: Wrong reply
[Snoop](https://i.imgur.com/XuBDppG.png) approves
I downvoted you for the 'people like you' comment. But, otherwise I agree with you. Probably, could have also done without the 'dumb fuck' ending. 
Unfortunately most CMS's don't adhere to this, so while it is a great practice for your own projects it almost always falls apart when dealing with 3rd party software.
I believe the current recommendation is to use the app pool (local machine\IIS Apppool\name of app pool) instead of IUSR.
No, it was not well said. It was tribalistic and personally attacking. But the gist was correct. 
&gt; Probably, could have also done without the 'dumb fuck' ending. That's absolutely goddamn false and you know it you passionless uninspired worm, what are people like you even doing picking apart individual subphrases and critiquing people's sentences; this is the internet, and you can learn the language or get out -- I'll hit your gabber square in your mum, I swear on Australia
Oops. Meant to respond to you not him...
I created a gist example https://gist.github.com/florianv/ba3f2e46065543194a2b
&gt; well said. &gt; We all started somewhere. 
Welcome to the personal tribe of the internet, where the gist of what we say is *all* that matters and is always taken with salt.
A few things I generally do when setting up IIS to run php: * Create 3 disk partitions C: is the OS partition, D: is the log file partition and E: is where my website files are. Some day soon I will probably switch to centralized logging and move the log files entirely off the local machine (it is a very good practice to eliminate the ability to manipulate the logs if the web server is compromised). * Create an app pool for my php sites and set my directories containing php to allow Read &amp; execute/List folder contents/Read access for that app pool. * Set open_basedir in the main php.ini to restrict php to only run in certain directories. I have run into some issues with open_basedir on IIS involving the use of forward slash as a file separator instead of a backward slash. I had issues with 1 CMS (looking at you Drupal) where I could not get open_basedir to work unless the folder was at the root level of the drive. * Create a common directory outside of my web root that contains my common function libraries and classes as well as a common config file that defines where certain directories are (like the uploads dir) and establishes database connections. An include for this file is more or less the first line in every php file on my site. * Create an uploads directory outside of the web root where the php app pool has read/list contents and write access (no execute). * Install an SSL cert * Install the IIS URL Rewrite module and default your entire site to SSL edit - I also think it is a good idea to run all of your servers as VMs and disable remote desktop to the guests and only allow remote administration to occur from your intranet by remoting into the Hyper V host and using the Hyper V console to administer the IIS server (or any other guest server). Removing the gui and just installing core on the server is also supposed to be a significant bump in security but it is also a significant downgrade in convenience (for someone of my skill level at least). edit2 - Modify your headers to not advertise what version of IIS you are running (or the fact you are running IIS at all).
Awesome, thanks! Very cool stuff.
Nice work. It's great you can use use solid and tested components together. I find the frameworks with no magic are the easiest to learn and develop on for smaller. Most of the PHP web development I do is for smaller contracts where there are extreme varying degrees of skill level. I find developers tend to build the applications from scratch and then pull their favorite pieces from different projects to complete their tasks so your "none-framework" would be more appealing to those developers so they can be very flexible.
There exist multiple people groups to despise. Thanks, the world is a better place now I understand it. This is not the Internet - it is Reddit. 
The syntax is annoying, though...and less flexible IMO.
Drop the salt. It is worthless. 
You can't judge the whole framework by one bug.
Write a PSR-4 compliant autoloader, or a dependency injection container... you'll be a PHP expert by the end compared to most developers. :)
I used to run a local VM on my development machine then had a a shared directory that both the VM Guest and VM host could see. To see an updated web page just involved saving the file and refreshing the browser.
I apologize for wanting to learn so I can be more than a "noob"
That is pretty ignorant; of course you can, especially if it's a security vulnerability like this one.
After reading some of the comments here, I have to point out that white-listing does **not** make you immune to XSS, and may not help you one bit, depending on the characters you need to allow as input. Basically, there is no shortcut or magic bullet. The best defense against XSS is a *strong* understanding of how it works. OWASP has some good materials available.
Please see my comment before taking this approach.
Not really. If that were the case I could argue that ssl as a whole isn't worth using because of heartbleed, which is now fixed. Critical vulnerabilities happen in everything, even your (assuming) beloved Laravel.
Thank you for your suggestion. I'll run some tests with it.
Ironically, (doesn't apply here) but some systems such as Magento actually have a backend problem for their admin section where if you put an &amp; in say a product attribute frontend value, it will escape to "&amp; amp;". Now this seems right yes, but heres the catch. When you save that attribute data, it runs through again and catch the "&amp;" in "&amp; amp;" and will render it again, thus giving you "&amp; amp; &amp; amp;" every time you save. See the problem? So while in this case htmlspecialchars is fine, there are some places where issues may arise :). EDIT NOTE: I put the space between &amp; amp; intentionally. Not sure how to format reddit to prevent it from changing. Go figure.
I have no projects built in Laravel you clown, only Phalcon, Symfony &amp; FuelPHP How many legacy CI applications that were built on contract for a company that has no in house developer will be affected by this? It is entirely dissimilar to SSL.
Great package, I toyed around with it, Rapportive has a crazy low request limit though.
Thanks. Yes, I think it's about 50 requests per hour.
I got one on my first request.
Not really, since openssl is included in plenty of contracted applications as well. I've been meaning to learn Phalcon, just always am under the gun and never have the time to do so.
&gt; InvalidResponseException InvizzleRespizzleExcizzle mah Nizzle.
Remove the ORM from the project, it has nothing to do with access control. You can continue using the DBAL component, or if you really want PDO only, remove that too.
I can use the DBAL component without Doctrine's entities, right? And then I would be writing SQL not DQL.
i am? "YAML" is a horribly stupid name. along with [all of these](http://en.wikipedia.org/wiki/Yet_another). same with recursive acronyms.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Yet another**](https://en.wikipedia.org/wiki/Yet%20another): [](#sfw) --- &gt; &gt;Among [programmers](https://en.wikipedia.org/wiki/Programmer), __yet another__ (often abbreviated __ya__, __Ya__ or __YA__ in the initial part of an [acronym](https://en.wikipedia.org/wiki/Acronym)) is an [idiomatic](https://en.wikipedia.org/wiki/Idiomatic) [qualifier](https://en.wikipedia.org/wiki/Qualifier) in the name of a [computer program](https://en.wikipedia.org/wiki/Computer_program), organisation, or event that is confessedly unoriginal. &gt;[Stephen C. Johnson](https://en.wikipedia.org/wiki/Stephen_C._Johnson) is credited with establishing the naming convention in the late 1970s when he named his [compiler-compiler](https://en.wikipedia.org/wiki/Compiler-compiler) [yacc](https://en.wikipedia.org/wiki/Yacc) (Yet Another Compiler-Compiler), since he felt there were already numerous compiler-compilers in circulation at the time. &gt; --- ^Interesting: [^Yet ^Another ^Perl ^Conference](https://en.wikipedia.org/wiki/Yet_Another_Perl_Conference) ^| [^Yet ^Another ^Movie](https://en.wikipedia.org/wiki/Yet_Another_Movie) ^| [^Yet ^Another ^Cleaner](https://en.wikipedia.org/wiki/Yet_Another_Cleaner) ^| [^Yet ^Another ^Previewer](https://en.wikipedia.org/wiki/Yet_Another_Previewer) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci5yvhd) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci5yvhd)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
fair point. they wouldn't be so bad if it didn't automatically include the lib whether or not you actually use it though. i remember making up this big list of shims, and then wondered why my output JS was so big when i didn't up using half of them.
Oh ok...thank you.
I know I can, it's just that the database is rather complex. It would take a lot of time to check that the relationships were mapped correctly, write manually the ones that were skipped etc. I've tried it before and I gave up completely because it was too much work. 
Huh, nevermind. You can download documents as any of the export options: https://developers.google.com/drive/web/manage-downloads#downloading_google_documents Maybe it is all feasible. Let us know what you manage!
LOL. Igor, this is [another](https://github.com/igorw/brainfuck-php) [one](http://yolophp.com/) [of](https://github.com/igorw/reasoned-php) [your](https://github.com/igorw/whitespace-php) [weird](https://github.com/igorw/doucheswag) projects.
Heh, oh he's the yolo framework guy. Very funny Igor.
Thanks for the info! This is definitely some stuff I'll start implementing with my setup.
Yes.
I use grunt to run build tasks for my frontend, including minification and so on. I need to install grunt with npm.
The "type" of white-listing is irrelevant. White-listing, as a general concept, is only as secure as your knowledge of attack vectors. It's really as simple as that, and that's the point I was trying to get across. Tools like HTMLPurifier effectively remove your ignorance of attack vectors from the equation, which is a tremendous help. But, it's still not a magic bullet, and you can still get XSSed while using it. There's just no substitute for knowledge.
It ain't no brainfuck!
I would probably use the symfony 2 security component since silex comes with a built in provider for it. http://silex.sensiolabs.org/doc/providers/security.html
Thankyou /u/nikic :)
I just asked a request for feedback for the Auth component. http://www.reddit.com/r/PHP/comments/280u3d/request_for_feedback_on_auth_component/ https://github.com/pmjones/Aura.Auth early development so good to hear your thoughts.
Tried it on myself and a couple of random addresses and couldn't find anything. Does it only work on "internet celebrities"? I'm not doing anything special to hide my identity.
It is fair to campare it to something like Sentry even at this early stage? **EDIT**: forgget my question, i read the statement about it's scope on the repo.
I know I'm a bit late to the show here, another idea to expand on that would be a white label program.
My own opinion of course, but can't agree with this. For me the use of private/protected methods helps me define the "contract" my class(es) have with external concerns/code - throwing that all out the window to say "all is public" is counter productive in my mind.
What is the point of EmailGeneratorInterface ? What is the point of SnoopInterface ? Jesus, why does everything need an interface ? 
Yeah I entirely agree, but I dunno man, I thought my comment *was* constructive criticism and wasn't expecting to get ranted out about it, heh I guess that's the reason I don't frequent /r/php ...
`It gets rid of the useless overhead from setter / getter functions.` uuh class BankAccount { public $balance = 0.00; public $thisCanBeStringOnlyOrTheWholeSystemWillFail = ""; } $myBank = new BankAccount(); $myBank-&gt;balance = 1000000000000; // I'M A BILLIONAIRE! :3 $myBank-&gt;thisCanBeStringOnlyOrTheWholeSystemWillFail = false; Yeah, get rid of the getters and setters. 
since you say used to, mind me asking what you do now instead? I'm personally using vagrant with shared folders, but always looking to improve workflow.
&gt; I thought my comment was constructive criticism Your's were. Don't feel bad pal...
You are hilarious.
When a method is private, it makes it simpler to update, as you know that it is only used in the class itself.
It works on anyone, maybe they didn't crawl your informations yet.
Excuse me, but why are we even discussing a six year old blog rant?
I heard that there is a Whitespace port for Swift, and will be released on next year... arround April ;-)
Sorry I didn't get the question. If you still have something feel free to ask. Thank you.
Is there an application need for storing IP addresses? If the only reason is for tracking users, consider using google analytics or something similar.
Personally I'd leave the queries in the Repository, no matter if it's raw SQL or some DSL
I'm not recommending it, but putting sql in the DB, allows DBA to tune SQL etc. I know this does not answer your question, but please consider using HEREDOC/NOWDOC, i can't see any advantage of using concatenation, maybe except for conditional sql - which is ill-advised anyway.
 public function getFreeNode() { $queryString = 'with siblings_of_last_user as ' . '(select count(*) as user_count, parent, parent+1 as next_spot ' . 'from users where parent = ( ' . 'select parent from users where id = ' . '(select max(id) from users)) ' . 'group by parent) ' . 'select case ' . 'when user_count &lt; 20 then parent ' . 'else next_spot ' . 'end ' . 'as available_spot from siblings_of_last_user'; $result = $this-&gt;runQueryForResult($queryString); return $result[0]-&gt;available_spot; } Why not like that if you gotta concat it all?!
i only have 2 additions either use one big " " string even crossing lines or use HEREDOC notation i.e. $queryString = &lt;&lt;&lt;'QUERY' with siblings_of_last_user as (select count(*) as user_count ... ... QUERY; i prefer method one cause i am lazay and sofar there never has been a single usecase where it failed, it just might look not as agood as heredoc when analyzing query log files
You can directly use MaxMind's [GeoIP2 PHP API](https://github.com/maxmind/GeoIP2-php).
Subqueries are bad news. It would be a good idea to rewrite them when you move them, it would kill two birds with one stone and solve your problem. As for where to put them, that's a matter of taste. I tend to have one class for general queries (any page page might need them) and the rest in the class their data is specific to.
&gt; Subqueries are bad news. As with most things SQL, a blanket statement like that is nearly as likely to be right as wrong, given a specific use case. Sometimes subqueries are the most efficient way to form the query. For instance, if you're joining against a big table with only a few indices, joining to a subquery that selects against that table's index is frequently much more efficient than a direct join on the table. You can prevent a full table scan that way, which, depending on the size of the table, could shorten your execution time by many seconds. That said, a quick glance at OP's query shows it contains two *nested* subqueries, which makes me nervous about its performance. But depending on the schema and indexing patterns, it might be fine.
No, it is related to concatenation itself. The only reason i would use concatenation to build sql is to include some logic, say: if($isAdmin) $query .= 'OR 1=1'; in any other case HERE/NOWDOC is the way to go (see previous comment). Building queries dynamically it dangerous, might be difficult to debug etc. (i like it beacause it's DRY) 
You mention query builders, which makes me suspect you're in some sort of MVC context here. If not, you should be. For me, that function is best organized as a class method inside whatever ORM object is most naturally the "home" of that query. In this case, probably the "User" class.
I suppose. I have used them once or twice and they were always a massive performance hit, enough that I was scared off of them permanently. I wouldn't recommend them to anyone who didn't know exactly what they were doing and why.
My experience is on databases with 500k+ lines per table across 20 tables too, under heavy, constant use, so any performance issues have always been magnified.
All the more reason to really understand what's happening under the hood.
&gt; I have used them once or twice That may not be enough basis to pronounce that they're "bad news". Like any tool, they have their time and place, and you have to understand their subtleties and comparative advantages in order to use them well. I mean, if you tried to use a hammer once and hit your thumb, does that mean that hammers are "bad news"?
I get it. They can be used without disaster. They're still very bad practice unless optimizers have changed radically within the past 3 years.
For good or bad, there's a lot of folk out there that already have databases full of MD5 and SHA (etc) hashed passwords. At the very least, this gives them something they can use while transitioning. Likewise, if they have htpasswd files, Apache (as far as I know) does not provide bcrypt options.
This works fine too, and is easier to edit later. $queryString = " with siblings_of_last_user as (select count(*) as user_count, parent, parent+1 as next_spot from users where parent = (select parent from users where id = (select max(id) from users)) group by parent) select case when user_count &lt; 20 then parent else next_spot end as available_spot from siblings_of_last_user ";
I think the article name is wrong. It's more of a history of PHP than anything else. PHP is still plagued by many of the problems mentioned in that article, among others. But I still love working with it, and it has improved - vastly. 
You don't need to concatenate at all, you can just make it one big long string, on multiple lines. Or use heredoc. 
i read the title as "where to put the raw squirrels"
At least the FIG and PSR gives us hope right? :)
A surprisingly large amount of full-time PHP devs never heard about the FIG and composer. This needs to change for PHP and its userland codebase to evolve.
And the link to slides takes you to 404, it has extra double quote at the end
Now I am either on a windows desktop at work and connected to a fully featured environment (dev, test and production servers) OR I use my linux laptop and I have a full lamp stack running on 127.0.0.1 (using name resolution and some hosts file entries to support multiple sites), so still a nice local save &amp; refresh. The goal with the laptop was to be able to complete all of my development tasks without being connected to a network or the internet.
PHP still sucks, but I still love it anyway :)
besides which, most of the things that article described as beneficial improvements are improvements of the *community*, not necessarily the language. It's been facilitated a bit by PHP itself, but it's a community accomplishment.
CMS like Joomla, Drupal, Wordpress disabled a lot of PHP devs to become real devs. Unfortunatelly they are big part of PHP userbase and they will never see what is missing in PHP. BTW - Php did great progress since version 5.4.
PHP sucks less than it used to, personally I'm fond of it. The community is certainly undergoing a transition. It used to be hobbyists, script kiddies and beginners (I was one of them), now there are more professionals whose companies have (rightly or wrongly) invested in PHP based products and services; It has pushed the community in the right direction. There are a ton of devs out there who basically grew up on PHP / CGI / PERL and it stands to reason that as the people mature, so does the community. That being said, I still can't decide if Node is the new PHP or PHP is the new Java.
&gt; Auth::IDLE -- the user has been idle for too long, and has become Most enlightened auth library ever. Has become a grapefruit??? We must know! The suspense is killing me.
I wish we'd see a huge, rapid effort to rehaul the internals, something microsoft-scale as theyre doing with their msvcrt runtimes now...or even split the language a la C++ (php++) and rewrite from scratch with all the good parts and best practices in programming today. 
:D [You need help](http://i.imgur.com/AT8vYy6.jpg)
As an alternative to leaving them directly in the Repository, it might be a better separation of concerns to move the SQL calls to a Gateway class. Then you can inject the Gateway into the Repository. The Repository calls the Gateway to get the "actual" data, converts the data to entity objects/collections (perhaps via a Mapper) and returns them. That way your SQL can be tested separately from the Repository functionality. (This is similar to the approach I advocate in [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp).)
You're right, will do, thank you 
Yay! I know I've been kind of vocal about the way Aura has been posted, but this is exactly the kind of post that I think *always* helps make this community better. - It has a specific purpose to include the community. - It's about a topic that is relevant to a large portion of the community. - It's exciting to see a new Auth package, especially an Aura one. :) My not would be this: If you're going to include the session manager in the Auth package, you also need to make it agnostic to the data store. In other words... how would I store the session in a database? I'd have to extend the SessionManagerInterface myself I believe, but that's a common enough use case that I think it might be worth looking at how to natively handle that, or at least provide a prebuilt scaffold for it.
Echo things one at a time, but use output buffering. Delivering data little bits at a time is very bad. You don't take advantage of compression or use the full network packet. The affect you want is storing everything in a variable and spitting it out all at once. You're just not going about it right.
I've said it before and I'll say it again. The only reason any platform sucks is because the observer doesn't understand it. EDIT: I get the impression there are a lot of immature people in /r/php, because any developer that I respect has drilled this into my head over and over when I was younger and less experienced. 
Ok. Thanks, that does answer the question-- it *is* a concern, and there is a right way to do it, and it's called output buffering. That should get me on the right track. Thanks!
I wish they would just normalize the function names and alias the old ones as to not break old code. Have it make a warning at high level error reporting. Heres what needs to be fixed: * We put underscores between the words * We use to and not 2 * We put the word string and the beginning of the function and not the end * We use string and not str (or vise virsa) * Whatever else people usually bitch about
Access modifiers are essential when building a complex system with lots of programmers. *In general*, a class shouldn't have any public properties, otherwise you end up in a situation where disparate code paths operate directly on your model data. If you have a long living object, this ends up causing bugs that are difficult to trace because the object's internal state can be manipulated from potentially anywhere in the application. One of the key benefits of encapsulation is that it provides the class' implementer with guarantees about the internal state of an object, this results in predictable code that also takes well to automated testing. If you aren't encapsulating your object's internal state, you might as well eschew the use of methods altogether since functions will be able to achieve the same functionality but with a cleaner flow of execution since you'll have to explicitly pass your model into the function before mutating or returning a cloned mutation of your immutable data. &gt;If somebody does not understand why he is not supposed to modify the balance property - he will find ways around it. And it won't be pretty, trust me. He'll directly write his values to the database and reload the object. He'll simply change your source code without warning. He'll extend the class and overwrite the set method. That is obscene to the point of absurdity. If your developers are introducing these types of crazy hacks into the project then any discussion of effective software methodology is moot since such a programmer will not adapt to *any* conventions or best practices and will simply reinvent the wheel or hack their way through any roadblocks that require them to comprehend the code before making changes.
I'm almost always using a templating system of some kind nowadays. For example, building up an html string and returning it, I'd pass that data to a template or view of some kind that would consist primarily of HTML. Most of my templates look a lot like [this example from Plates PHP](http://platesphp.com/templates/syntax).
No, some things just objectively suck. For example: strpos($haystack, $needle); in_array($needle, $haystack); That sucks.
All 3 of my CI sites are running mcrypt. Looks like they will live to die another day. CI is a great framework, I enjoyed working with it. It was so easy to mould. I've since moved on to Yii and more recently gone to the dark side with C# / MVC 5 / EF 6. Visual Studio is a dream and with nuget package management and git built into the IDE the whole thing is just awesome.
Ahem. I say it never sucked. just how people used it and their opinions sucked. 
&gt; you also need to make it agnostic to the data store It is in fact agnostic, in at least two ways. (1) You are always able to set_session_save_handler() to deal with session storage any way you like. (2) The SessionDataNative class uses $_SESSION under the hood directly, but the SessionsDataObject class allows you to inject an object of your own design. &gt; extend the SessionManagerInterface Alternatively, it supports callbacks so you can hook into the session management routines of your choice. Hope that helps!
Use a spell checker: aspell check blogpost.md
This is indeed the problem, there are still way too many custom hashes on the wild. I think it would help to get rid of those insecure hashes by not providing out of the box support for them any more. (anyway if someone wants to continue to usem say, raw SHA-256 hashing, it is not such a big deal even if it is not supported from the Aura.Auth). If you offer HTTP basic auth from Aura.Auth, it should be backed up by bcrypt (Apache htpasswd supports bcrypt hashes).
You're trying to spin working around half of the entire language out of necessity as something _positive_?
My personal nemesis is this one: array_walk($array, $callback); array_map($callback, $array); The array functions, like you've pointed out, are generally pretty awful. It's one of the big reasons I like hack
i have been dreaming this forever..
&gt; Apache htpasswd supports bcrypt hashes Ah so? I was unaware -- Google did not reveal that to me. Can you link me to the docs?
If I recall correctly it was added in version 2.4: http://httpd.apache.org/docs/current/programs/htpasswd.html
The optimal is neither: you want to buffer some amount for efficiency, but still print the page `&lt;head&gt;` as early as possible so the browser can start loading external files from it while the rest is sent, and then send the rest of the page in packet-sized chunks so it can render incrementally instead of blocking.
&gt; You are always able to set_session_save_handler() to deal with session storage any way you like. I didn't see an API for that in the classes. Did I miss it? &gt;Alternatively, it supports callbacks so you can hook into the session management routines of your choice. Ah, very nice.
Look into something like Smarty, which would have a foreach and caching built in to the display. It's best to always try to separate concerns, and mixing HTML and PHP can lead to issues.
You need to run that from a terminal as such: chmod 755 config.php from the directory it's in. Doesn't go in the file. 
You need to change the permissions using either your FTP upload tool or from a shell on the server. If you have ssh access it would be something like chmod 755 /path/to/wherever/you/have/admin/config.php 
You could say that I guess. I wouldn't particularly agree.
Exactly. So then if you decide to switch to Node on the backend, your front end doesn't have to change one bit.
Why not just use a string? Heredoc is pretty ugly IMO. $query = 'SELECT * FROM table ...';
Is there a particularly good reason to validate it? There are all sorts of possible names and someone, somewhere, somehow might have a $ in their name. [Falsehoods Programmers Believe About Names](http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/)
No, there really isn't, the more I think about it. Furthermore, I may not even require names on my website (like reddit doesn't require them). I just had it already built into my website and figured I should do some validation since its there... just looking for some unnecessary work for myself. On the subject of validation, do you have any good links for email validation? I bookmarked your link about names for future reference, so thanks for that.
Thanks a tonne! Have a good one.
You don't need to automatically convert anything. The old functions would still work. You give people a grace period of like 10 years before they are actually completely removed from PHP. I don't think theres anyone out there naming functions so similar to the built in PHP functions like new_line_to_br. But actually thats a pretty good idea for a library if someone could build it into PHP. On the other hand it would be taking up memory on the stack for the sake of semantics. Back to the point, I think the impact would be minimal. The only problem is the overlapping of functions which has got to be a very, very, rare scenario. 
This is a package I wrote and open sourced with AOL. I would love any reviews, feedback, and ideas on it! :)
+1 - suggesting HEREDOC/NOWDOC was my first thought as well.
Thanks for the information.
&gt; you should really be doing a constant time string comparison /u/davedevelopment could you expand or link to some where. I didn't get that. Thank you 
Ahem. http://www.mediawiki.org/wiki/Register_globals You could argue that developers were negligent and abused this function or you could argue that this function was ill conceived and had no place in the language to begin with. Regardless of which side you fall on, there's no denying that in hindsight, it was a bad idea. I like PHP these days, a lot, but to say "it never sucked" offends my greater programmer sensibility. EDIT: Also everything sucks to some degree.
&gt;&gt; You are always able to set_session_save_handler() to deal with session storage any way you like. &gt; I didn't see an API for that in the classes. Did I miss it? When you have created a `SessionSaveDbHandler` and set the handler at http://in1.php.net/manual/en/function.session-set-save-handler.php you can always use the $_SESSION which can read and write from the handler. So if you are using the https://github.com/auraphp/Aura.Auth/blob/develop-2/src/Session/SessionDataNative.php it can also do the same work.
PHP: List of Function Aliases http://www.php.net//manual/en/aliases.php
&gt; Most enlightened auth library ever. Has become a grapefruit??? Probably you mean the easiness to work on.
This looks interesting and well done. I could do with a bit more documentation. I think I get where you're going with it but it's a bit muddy. I get it's basically a service for creating objects that represent your data and proxy your source data attributes / properties into whatever more consistent naming conventions you desire. Just FYI there's another package out there that is based on the same premise and uses the term "Transformer". http://fractal.thephpleague.com/transformers/ EDIT: By the way, I couldn't really understand what the MySQL utility was for. What's that do exactly?
These are fixed in Hack, its map function is a method of the Vector and Map types so you do `$blah-&gt;map(...)` and there's no ambiguity. :) 
What's with the fanboyism in here? Was anybody even around for the PHP3/4, minimal oo feature support, mambo server, md5, register_globals, where's your shared PEAR or PECL dependency directory madness and let me Google for "how do I add that channel to get that library I want to use" for the umpteenth time MADNESS that was PHP not too long ago? include include include include include include include global global global People writing sloppy code suck, sure, but I don't think the language and the community are mutually exclusive. I just don't think it's realistic to say PHP never sucked. It did. So do early versions of most things. It's ok. Around version 5.3 is when it REALLY stopped sucking so much. There were a lot of new OO features packed into 5.3 that made the language much more capable and then Composer happened which is STILL not without it's issues but is soooooooooo much better. Then the community started stepping up to the plate and revamping shit. If you contrast the way the community handles things like package management against other languages there's a big difference. Look at NPM and Ruby gems. Those are ridiculously good and have been around since the dawn of their native language's inception. It's good, I like PHP but I think you're burying your head in the sand to claim it "never sucked".
I hear everyone says this but really how easy is it to circumvent ioncube? I have yet to see nulled ioncube scripts like WHMCS... etc
&gt; Was anybody even around for the PHP3/4, minimal oo feature support, mambo server, md5, register_globals I was; and at *that* time PHP was undoubtedly the best solution. I moved from both classic ASP and PERL in those days and PHP was easily superior to both. Include include include include was far more than you could do with ASP. And minimal oo was fine. MD5 was a built in even! If you needed something that didn't exist today there was a good chance it would be added in the next release. It was amazing but messy times. 
No I knew that, I just thought you guys would wrap it in the SessionManager.
I love the fact that when I followed the link, it was a security-oriented book. I used to be a security researcher. Since then, I started a company for PHP developers managing sites on their own servers like at DigitalOcean (my company is [ServerPilot](https://serverpilot.io)). I've learned a lot since I started the company. I now see that in addition to security knowledge, there is a lot of fundamental business knowledge that every developer should understand even if they aren't a founder. I don't have a link or simple summary of that knowledge, but this is just to say that as a developer and security researcher who started and is running my own company, I have a level of respect and appreciation for business and people skills that I never understood before. And as I interview and hire for my startup, it's clear that the most valuable developers (at least to a startup) are those not just with technical knowledge, but those who have amazing technical knowledge and skills combined with understanding of people, business, simplicity, learning, and communication.
http://www.php.net/manual/en/filter.filters.validate.php Particularly FILTER_VALIDATE_EMAIL
Thanks for your input. You make some very good points and pretty much summed up my way of thinking over the last 12 years or so of development. When I started out with PHP I was one of the typical "hacks" that just learned enough to get things done. I wrote some bad code, and some insecure code. It wasn't until a while later that I started to realize how deeply irresponsible that is. I started to really focus on security much more. That was in the early 2000s, and now I don't write an application in any language without thinking of securing it and "doing the best I can" to make sure the data is secured. I feel like some folks still need to reach that level. Just think of how you would feel if your identity or personal information was stolen, or that of your family. That should be motivation enough to do it right. This is why I endorsed this book in the way I did, I would really like to see more PHP developers take this route. PHP is easy, fast and reliable which is why it's so popular. But taking the time to do it right means you can still spin out awesome apps and sleep at night knowing you've made a good effort to secure things.
here's your email regex .+@.+\..+ some characters, followed by an @, followed by some more characters, followed by a dot, and then some more characters. anything beyond that, and you're probably fucking someone over. don't do it. edit: [see this answer](http://stackoverflow.com/a/201447/65387)
This isn't even good enough. Email addresses do not require a TLD (i.e., `foo@localhost` is valid). The correct way to validate an email address is to send an email to it. Other than that, `.+@.+` is pretty much the only sensible regex for speedy up-front validation to prevent obviously invalid addresses.
Tangent: methods are not inherently more OO-y than free functions, and free functions are sometimes vastly better from an API complexity PoV. PHP does not do a good job of levering the flexibility of free functions, however. With free functions you could have a single `replace()` function that behaves similarly for strings, arrays, and any other container types. The problem isn't that `str_replace()` and `array_replace()` are free functions but that there was no reason to have two of them in the first place. C++ is built up around this. That's not to say that you're not right in that it would greatly simplify PHP.
Conversely, if you have to switch back to PHP, your front end doesn't have to change one bit. I'm not sure the point of talking about decoupled services, when they have nothing to do with the implementation language. 
I'll just leave this here http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/
Why use a slow as balls regex?
That's bullshit because you can't send accurate headers if you do that. For fuck's sake. You're a PHP Dev. At least learn how http works. People like you give the language a bad name.
Also twig, blade, aura (ugh) etc.
I'd rather dump a basket of fruit into Python and have it spit `NonAppleFruitError` when it finds a banana. Yeah, PHP isn't as bad as it used to be, but there's still plenty it can do to improve from code cruft and inconsistencies down to the actual people who work on PHP.
Thats def a fact that projects like wp, joomla and drupal has made PHP more approachable to beginners, still the fact remains, people working solely with these tools wont learn programming and lock themselves to a very narrow skillset. When things go wrong theres no redemption. The scary part is that projects are shipped to paying customers, and the quality is often very poor. I have seen db queries executed in the template layer, plain text passwords stored in db, and many many other bad practices.
Interesting reply. Do tell then, how does http work? 
there is no 'doing my best' or 'making a good effort' as it applies to security. This is one of those things that are cut and dry. Your best effort doesn't matter; you do it right, or you've done it wrong. That's all. 
You're a shit commenter. Consider not commenting.
thank you for this post, I purchased it and will be thoroughly reading over it to rework my current applications and help my future development. I am only a one year old dev so learning these kinds of things will greatly help me and the future of my generation of developers I believe
And yet those systems power some of the most robust and feature filled websites on the web. CMS's aren't the right fit for every project, but the concept behind them is not going away. You will get more bang for your buck for any application that is primarily dependent on what these CMS's provide. Furthermore, the adoption of these CMS's allow very smart and talented people to put more focus on things that many of the elitest twats often overlook. Proper source ordering, minification of assets, seo/sem/attribution/micodata/contextual content, cacheing systems, security, etc. Yes, many of these platforms suffer from outdated architecture, but to insult all these systems and everyone that uses them is narrow minded bullshit. 
Symphony should be Symfony
What the hell are you taking about? I'm commenting on the content of the link, and giving valuable constructive criticism. The fact that the author probably doesn't want to hear it only makes it more valid.
If it was so valuable, then why'd you delete it?
Example codes here https://github.com/aol/transformers are not colored.
&gt; On the subject of validation, do you have any good links for email validation? What do you want this email for? If it's for account recovery, then let them put anything they want in the email field, check for an @ sign, and just make a note above it that since it's only used for recovery, it's not validated. If you want to actually eventually send them an email, then try. Take the given email address, check it has an @, then ask your mailserver to start an email to it. If your mailserver can't work out how to handle the address given, return to the end-user that you're awfully sorry, but it seems that you're unable to email that address, and you would love for them to try another email address. If you can't get the mailserver response down enough to make the signup responsive, just send the address a confirmation email. Keep a flag in your table to indicate if an email address is valid or not, and give a link in the email to validate it.
It 'know's what date time formats MySQL prefers, for instance, so can handle the string-&gt;DateTime conversions. A few other things like that.
In short, yes. If you know you are finished with the session, call session_write_close as soon as you can. Also do session_start at the latest responsible point. When you call session_start, your process gets an exclusive lock on the session until session_write_close is called (or the process ends). Any parallel processes serving data to the same user will block when they call session_start until the first process releases the lock. This will case unexpected behaviour. Calling session_write_close has zero impact on the response, so don't worry about that.
A mod must have done it.
So basically call htmlentities and call it a day?
When outputting, yes. Never encode before putting into the DB.
Don't use that. It filters out some valid email addresses.
I respectfully disagree that it is 100% cut and dry. There are plenty of security measures that would be considered over the top for a given application. Some things are far too time consuming and expensive with little return. There is certainly a baseline of things you should always do, like what's covered in this book. There's no harm in going the extra mile when it comes to security. But you aren't going to take the same measures protecting top secret nuclear launch codes that you would on the posts of your Wordpress blog. 
Fixed. Thanks!
Thanks for the feedback. I remember looking at Fractal a few months back, but didn't remember they used the same term within the package. If I remember right, fractal only provided a one-way conversion whereas I needed to be able to transform data both ways. As you noticed, I'm really struggling with the documentation on this one. I've tried writing this a few different ways and I cant seem to nail it with clarity. Perhaps some more explanation and a use case at the top before diving directly into code would help. As for the utility classes, ciaranmcnulty is on the right track. Internally we are using Mysql, Mongo and some external APIs, all of which store dates differently, but internally we want to use a proper DateTime object. Rather than create many method names specific to the data store (i.e. defineDateMysql, defineDateMongo, etc) it made more sense to define an interface for common definitions (defineDate, defineDateTime, and defineId so far) and implement utility classes specific to MySql, Mongo, and our external APIs. Edit: I meant to say, this has the added benefit of defining a transformer once and being able to use the same class for any datastore. For example, you could pull something from a database, manipulate it in your app, and then send it out to another service, using the same transformer between each env with a different utility class.
I don't think robust means what you think it means. Cmses are good at doing a small set of things but if you deviate from that they work against you more than for you. That's the exact opposite meaning of robust. 
I know what robust means. 
Real language spec with an abstract syntax tree is my only big one still on the list. 
BankAccount has deposit, withdraw, and getBalance methods. This is the cliche.
Nice. I was looking for something like this a few weeks ago!
&gt; Newer versions of PHP don't like passing variables by reference Wait, what? You can't variables by reference anymore? Just for that one function or everywhere?
References still exist - you can't directly pass a variable by reference (aka call-time pass-by-reference). This has been the case for a few years. E.g. function mutate($x) { $x = 'bar'; } $var = 'foo'; mutate(&amp;$var); // Fatal error echo $var; will cause a notice, where as: function mutate(&amp;$x) { $x = 'bar'; } $var = 'foo'; mutate($var); echo $var; // bar will not.
I assume you need to use call_user_func because the function name isn't known in advance? What about something like this? $function_name = 'test'; $function_name($var); Tested with PHP 5.4.17.
Explode for sure. Then either query once, building a query with each word in the array - or query each word while looping through the array. I guess it depends what you're doing with the results. Good practice to minimise the DB calls if you can, but don't get caught up in optimisation unless you're building Facebook. 
You cannot decide to pass by reference at call time. You must specify in the function definition whether it will be value or reference. The issue appears to be that when using call_user_func the variable is passed into the called function by value and not reference and cannot pass a reference into the call_user_func and expect it to be passed onto the function because that would be a call-time decision.
It's at 5000 words now, it will be at 30,000 in the future.
Use a whitespace tokenizer instead of just exploding, then shared string.
Can you expand on this a little please?
Ah ok, I thought everything had to be PDO these days to stop injection and bad things?
It supports (and it's encouraged to use them) prepared statements but doesn't force it. This feature is supported with mysqli. However, PDO is the way to go for new projects and make sure you use prepared statements when using it.
Nah, you can still use mysqli directly if you're smart and sanitize and escape your inputs. PDO is a nicety but by no means is it required, especially not for a small scale, one off utility program like it sounds like you're writing.
Drupal version 8 requires PHP 5.5 and uses Symfony, Twig, and a number of other components. It's a pretty major update.
What the hell are you taking about? I'm commenting on the content of your comment, and giving valuable constructive criticism. The fact that you probably don't want to hear it only makes it more valid.
You really need to find a way to do what you need without this type of hack. It's just asking for more trouble down the road than it is worth...
I like how the article quotes Jeff Atwood on PHP in a supportive context, probably one of the greatest haters of PHP out there :)
That still seems pretty small -- small enough to load into memory anyway.
 function somefunc($var) { return false; } somefunc(&amp;$var); vs function somefunc(&amp;$var) { return false; } somefunc($var); The first is not allowed, and hasn't been for a long time, and the second is the correct way to handle references. OP just has a poorly engineered application.
I think it goes: Cobol is Cobol, Sr. Java is the new Cobol, Jr. PHP is the new Java Node/JS is the new PHP Meanwhile, the Haskell guys are writing simulations of the entire universe in 900 lines and wondering what the big deal is anyway?
You are free to simply check for the existence of an `@` (and `mb_strlen() &gt; 1`). You can do that in O(log N) time. Regexes, in any language, have perfectly adequate performance for stuff like this, though.
What you can use is PDO or the MySQL-specific MySQLi wrapper. What you cannot use are the `mysql_*` functions, which have all been deprecated. `WHERE field IN (...)` is ANSI SQL syntax and is supported by any respectable database regardless of what language or wrapper you use to query the database.
yep totally agree, I wish there were more people whiling to give a chance to stuff like Laravel or Yii. Modern PHP can be as elegant, maintainable and just plain enjoyable as Ruby or other competing technologies. 
I'm not aware of any PHPUnit debuggers, but I simply through echos/prints/whatever in the unit test function to validate correctly. I also utilize my IDE to only run a single test which makes it much easier.
I'm not at home, so can't investigate your situation properly, but would `call_user_func_array()` work?
Is there any other difference between call_user_func() and calling it like this?
The `$foo()` form does not support `'Foo::bar'`-style callbacks and requires `['Foo', 'bar']`-style instead. Of course that's an advantage, because the latter is the standard form, whereas the former is a freak of history.
You can't just explode on space because new lines and tabs will screw you. You can't ignore punctuation. And then there are weird corner cases like control characters being in your data. Explode isn't enough.
&gt; meta image tag I don't want to get og:image, ,i want to grab the biggest image from the current DOM. Most sites don't use og:tags anyway
Briliant! thank you. EDIT: My excitement was too fast. It works fine but it's terribly slow. On my server with 100Mbit connection It takes 10 seconds to generate biggest image. There must be better ways to do it 
You can't really get the actual size of the image without making an HTTP request to get the file size (which the above example does, which will give you the largest file, not largest image) or retrieve the image (which your own code did) and decode the actual image size from the file. You can probably use a bit of heuristics to guess which image is the main image by extracting items close to semantically important elements (h1s, etc), and then retrieve those images. You can probably also exclude any gif/png/bmp images, unless any jpegs fail to give a satisfactory result. .. or you could live with it taking 5-10s, by deferring thumbnail generation for a link to be performed in the background (which is what reddit does) and adding it when it has been retrieved.
I was wondering, why was this removed?
Upvoted simply cause I never knew about the array union operator (+). Nice to learn something new today. 
I only have one line of code in my software that does this, I have found no other valid uses for this.
I use the latest PHP version included with my distro's packaging system
&gt; It works fine but it's terribly slow. That's because it loops one image at a time. If you want to go faster you need to execute in parallel. You can try [curl_multi_exec](http://php.net/curl_multi_exec) to run multiple curl requests at once. I also made a library, [RollingCurl](https://github.com/chuyskywalker/rolling-curl) which makes using multi curl a bit easier.
Reddit definitely uses the og imagery. But if you want to get the largest image on the page without downloading every image you'd have to use a headless browser and inspect the generated Dom. There are no tools in php to handle that, and any library is going to be thoroughly outpaced in functionality by a headless browser.
...just give me a fucking zip file...
I wrote a library to do this a while ago, maybe you can make use of it. https://github.com/rchouinard/thumbnail-finder
I hate php, all it ever does is make me money. 
Yes.
Right, I understand your complaint. I'm saying your reliance on `call_user_func` in this manner is almost unquestionably because you have a poorly engineered application.
It's not that he specifically knows PHP but he does know OOP.
One line of PHP code and you are ready using one of the many FREE online services. $_POST['location']=file_get_contents('http://www.telize.com/geoip/'.$_SERVER['REMOTE_ADDR']); or this one: $_POST['location']=file_get_contents('http://freegeoip.net/json/'.$_SERVER['REMOTE_ADDR']); You get back this info (in JSON) these services have a maximum amount of hits/day, check out their sites first... {"country_name":"United Arab Emirates", "dma_code":"0", "timezone":"Asia/Dubai", "area_code":"0","ip":"195.229.241.111", "asn":"AS5384", "continent_code":"AS", "isp":"Emirates Telecommunications Corporation", "longitude":54,"latitude":24, "country_code":"AE", "country_code3":"ARE"} 
As nikic said you can use this technique with classes too. class A { static function b() { .... } function c() { ..... } } $class = 'A'; $method = 'b'; $class::$function(); $object = new A(); $method = 'c'; $object-&gt;$method();
Just tested this, I totally did not know I could do this. I will be droppping call_user_func as soon as all my servers are on PHP 5.4+ Thanks!
Yeah, it's unfortunate that it doesn't have the same effect as array_merge. `$template + ['addition' =&gt; 'value']` is a lot more readable than `array_merge($template, ['addition' =&gt; 'value'])`.
Firstly I would question if your code should be echoing stuff to the console under normal circumstances and certainly shouldn't be invoked via the webserver. That being said there isn't anything to stop you extending the phpunit testcase base class with your own functionality or adding a trait trait Debugger { public function debug($msg){ //do your thing } } class ThingTest extends PHPUnit_Framework_Testcase { use Debugger; public function testSomething(){ $this-&gt;debug('foo'); } }
You probably want to swap the operands for them to be equivalent: `['addition' =&gt; 'value'] + $template`. As long as you do this it's perfectly fine to use either, with string keys.
It's worth checking if any errors are being thrown that you don't know about, with this line at the top: error_reporting(E_ALL);ini_set('display_errors','On'); Beyond that, you're sure those variables at the top are both `true`?
Are you sure your db query is returning at least one row?
I guess that's one usage... but normally you store the defaults somewhere else so that they can be overwritten globally; public static function (array $options = []) { $options = array_merge(self::$defaults, $options); } 
Soooo what do you suggest? A regular expression?
Try adding "LIMIT 1" to the MySQL query especially if you have the username column as a unique index (which you should). Then remove the while loop as it's unneeded. Then you can just do this: $row = $result-&gt;fetch_object(); return $row-&gt;ID; or array style: $row = $result-&gt;fetch_array(); return $row['ID'];
Suspect your getting a MySQL error as that would still return a MySQLi instance to $result, so you'd be better using $results-&gt;error; 
as mentioned, limit 1 is important also get used to using === when working with boolean. your code is also unsafe, lern about mysql injection &amp; escaping finally it returns "null" if no user was found which is pretty much espected as you dont check for it
Your `getID` function doesn't have any knowledge of the `$mysqli` variable (it's not in the function's scope), so you're calling the `query` method on a nonexistent object. Try passing your `$mysqli` object into the function: Line 7: `$_SESSION['id'] = getID($mysqli);` Line 18: `function getID($mysqli)`
Still nothing if I pass in $mysqli. . I followed /u/IntenseIntentInTents advise and changed: &gt; Line 7: $_SESSION['id'] = getID($mysqli); &gt; Line 18: function getID($mysqli) But nothing. And the way I'm connecting is no issue either &gt; $mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME) or die("Failed to connect to MySQL: " . mysqli_error()); 
After 30000 registered people and 5 years of continuous extension, my regular expression checking for name "validity" has evolved to this: `/^[A-Za-z0-9\xC0-\xFF\.\ \-\']+$/u` P.S.: Yes, there are actually people with numbers in their names!
MySQLi still has redeeming aspects, such as async capabilities (though still kind of poor) and also works in HHVM. 
Actually I get pretty good usage out of it for adding a default option to a list of options pulled from a DB or some other source for a `&lt;select&gt;` tag. $options=[''=&gt;'Choose One']+$option_list; puts the Choose One option at the start of the list and prevents a screwed up datasource from overwriting it.
That's exactly what I tried doing the other day; turned out we did have a `0` option. Had a very angry client complain about a missing option. Woops.
Should I call this after initializing them? Will this create a permanent cache?
Every page that can be loaded through a separate http request will need to have session_start if you want it to access session variables. I usually build my sites so that all pages are internally forwarded to a single script (front controller/router) so I only need to call it in one file. 
What do you mean by separate?
You would call it (or `session_write_close()`, which session_commit is an alias of) just before you actually do the redirect. Normally PHP writes session data after the script exits. When the browser receives the command to redirect, it will immediately request the new URL, which may begin before PHP has gotten around to finishing the first script's cleanup process (especially with HTTP keep-alive, when the browser is already connected to the webserver).
That's not true. session_commit is just an alias of session_write_close, which will get invoked regardless of whether you call it explicitly. The function's exposed because sessions are locked to prevent concurrent writes, and calling session_write_close allows you to reduce the loading time caused by the locking by committing the values and up-heaving the lock as soon as the values are set. 
Include and redirect are two different things. A redirect is when you tell the user's browser to completely drop what it's doing and go load another page. (So usually done by "Location: ..." An include/require is where you load the code from a separate file so that you can reuse code or separate stuff out. The best way to do session_start at your level is to have a "bootstrap.php" file that you include at the top of all your individual scripts. Then in that file, you can stick configuration options, session_start, open your your database connection and so on. Beyond that, what the other commenter said is best, a front controller that all your other scripts load through is the best way to keep thongs maintainable. Look into "model view controller"
Also, you might be interested in [**MyCLabs\ArrayComparator**](https://github.com/myclabs/ArrayComparator), which is very useful to merge complex arrays or arrays containing objects. It might be overkill for a very simple merge though. Here is an example use case: you have 2 arrays containing user inputs, the old (saved) one and the new one (modified through the form). ArrayComparator will compare both arrays and call callbacks in each of these cases: - when an entry exist only in the first array - when an entry exist only in the second array - when an entry exist in both arrays but is different (here it's useful because you can also compare/merge objects inside the arrays) Given you define the callbacks, you have the complete liberty of *how* arrays are merged: which array has precedence, how to handle differences in objects/sub-arrays, how items are compared, …
That's most basic implementation thus is recomended using OG2.0 with PHP SDK 4.0 it this case.
Ya sure we will surely come up with such articles in upcoming blog posts. Thanks for your suggestion. Please follow us for more updates https://www.facebook.com/weblessons.info
Yes, you need to put session_start() on first line in your case. But, you should grab a simple MVC or include all of your files throu a single index.php, and then load subdocuments with include()...
Am I the only one around here who things CMSs should both give a lot of freedom for clients to move things around without developer intervention AND be almost as extensible as a framework for all the custom and dynamic bits?
Yes. This is why we can't have nice things.
Good lord, I couldn't agree more. What is all this talk about facades when all that is happening is delegating some work to a dedicated class? That does not facade complexity, it just follows an OO design standard - that of functional cohesion. Does that need a name now too? Design patterns help us in communication with other developers, and in quickly analyzing code. Delegation of some responsibilities to a separate class is something very easily explained, any programmer with some OO knowledge should understand the concept of object cohesion. Calling this practice a Facade is confusing more than anything else. Confusion is making communication with your peers and analyzing code harder instead of easier. I'd appreciate it if people would stop doing that.
So Drupal 8 will be using traits?
he needs session start only where he uses sessions
you need session start only where you use sessions
Does PHP update session expiration time without calling session_start if a browser provided a session cookie?
no as long as php.ini's session.auto_start is 0
I use iconv with ASCII/TRANSLIT setlocale(LC_ALL, 'de_DE'); $trans_sentence = iconv('UTF-8', 'ASCII//TRANSLIT', $utf8_sentence); http://php.net/manual/fr/function.iconv.php 
 [''=&gt;'Choose One']+['0'=&gt;'zero'] [''=&gt;'Choose One']+[0=&gt;'zero'] [''=&gt;'Choose One']+['zero'] all return a two item array of [] =&gt; Choose One [0] =&gt; zero but `[null=&gt;'zero']` as the second operand does not, apparently an empty string and null are the same array indices.
That'd be tricky. You probably need something like this. I hope this is one of those times someone comes out and shows it can be done in 3 lines, but I've been experimenting with parsers lately :) &lt;?php function get_phrases($sentence) { $inQuotes = false; $quoteChars = ['"', "'"]; $separators = [' ']; $phrase = null; $res = []; for ($i = 0; $i &lt; strlen($sentence); $i++) { $t = $sentence[$i]; $isOpenQuote = !$inQuotes &amp;&amp; in_array($t, $quoteChars); $isCloseQuote = $t == $inQuotes; $isLast = $i+1 == strlen($sentence); $isSeparator = !$inQuotes &amp;&amp; in_array($t, $separators); if (!$inQuotes &amp;&amp; $isOpenQuote) { // Opening quote $inQuotes = $t; continue; } elseif ($inQuotes &amp;&amp; $isCloseQuote) { // Closing quote $inQuotes = false; } if (!$isOpenQuote &amp;&amp; !$isCloseQuote &amp;&amp; !$isSeparator) { $phrase .= $t; } if ($isSeparator || $isLast) { //yield $phrase; // skip $res in 5.5 $res[] = $phrase; $phrase = null; } } return $res; } function assertEquals($expected, $actual) { if ($actual !== $expected) { echo sprintf("Assertion failed: %s does not equal %s\n", print_r($actual, true), print_r($expected, true) ); } else { echo "Assertion passed\n"; } } assertEquals(['Hello', 'world'], get_phrases('Hello world')); assertEquals(['I', 'am', 'a', 'foo bar'], get_phrases("I am a 'foo bar'"));
Pomm is not an ORM.
Typically MVC frameworks have like a system (library, app, ect..) folder that contains the nuts and bolts of the framework. If your using your own custom build then create a directory that holds all your custom libraries. Throw all your "misc. function" in classes and make the objects available through out the system.
What about grouping them appropriately and putting them into a [trait](http://us2.php.net//manual/en/language.oop5.traits.php)? It's really okay to just have functions as well. Group them appropriately in files (`escaping.php`, `sanitization.php`, `hashing.php`, etc), put them in a namespace, and have composer [autoload them](https://getcomposer.org/doc/04-schema.md#files).
Given that there's no such thing as "100% secure", there's also no such thing as doing it right vs doing it wrong. The only "doing it wrong" is not doing anything at all and being completely blind to any possible threats. To [jeremymorgan](http://www.reddit.com/user/jeremymorgan)'s point about doing the best he can, I think books like this help those out there who fall into this "completely blind" category have their eyes opened and get them started down the right path. Is there more to securing PHP apps that just what's in Ben's book? Of course there is, but it's not meant to solve all of the problems. The unfortunate fact is that probably a good 80-90% of security issues that pop up in PHP apps are due to integration problems. As PHP graduates into something even better than before (thanks largely due to tools like Composer and a larger push towards well-architected applications), it's important that the security aspects be pushed right along with it. IMHO anything that can help improve this is a good thing. It helps developers and opens their eyes to a whole world of possibilities for abuse and practical ways to prevent them.
You sorta reimplemted `str_getcsv()`... str_getcsv('Hello world', ' ', "'") === ['Hello', 'world']; str_getcsv("I am a 'foo bar'", ' ', "'") === ['I', 'am', 'a', 'foo bar']; Main difference being that `str_getcsv()` can't support both `'` and `"` in the same pass, but if that's not a concern, then you might be able to get away with the native function.
I prefer to use a static class instead of functions, for no other reason than they make the dependencies a bit more clear to me. `StringHelper::matchesWildcard($pattern, $value)` is more clear as a dependency than just `matches_wildcard($pattern, $value)`. Using a trait is an interesting approach, though. I may take that approach in the future, especially for smaller utility classes that only have one or two functions.
htmlspecialchars doesn't do that, so you must have some other code doing that.
There is very few CMS like that - unfortunatelly :( 
Well, the short answer is "nowhere". The longer answer is: you shouldn't be using "misc" functions everwhere. Escaping (SQL) should be near your DB access. Nowhere else should be doing that, otherwise you can create extremely complex problems. Escaping (XSS) should be near your output (template). Nowhere else should be doing that, otherwise you can create extremely complex problems. Sanitizing should be near your input. Nowhere else should be doing that. Hashing functions (password) should be near your authentication logic. Nowhere else should be doing that. Hashing functions (crypto) should be near the specific service that needs it. Notice a pattern? Don't get me wrong. There are cross-cutting concerns that are "global". Things like logging. But every single one you mentioned is (or should be) local (not global). And that's why I say nowhere. When you do come across a truely global cross-cut, then you find a place to put it (and it's usually obvious it belongs in a first-class package, like Logging). But when you find it hard to find a place for it, it's likely because you're either miss-using the concept, or trying to make a global concept out of a local one (which is dangerous). 
This is pretty much right. If you need a function that creates a hash, you want a class that contains your hashing methods, and so-forth. Any utility functions for use in views (trimming, escaping html, etc) should be treated as view helpers though, which should be organized as such....though the premise is largely the same.
 phpize ./configure make &amp;&amp; make install yep, pretty rough
 yum install libssh2-devel wget http://pecl.php.net/get/ssh2-0.12.tgz tar -xzvf ssh2-0.12.tgz cd ssh2-0.12.tgz phpize ./configure make &amp; make install what's so hard? I just installed ssh2 in 30 seconds
For this you had to: * Know what libraries you need for the PHP extension * Know how the package manager works on the distro * Know what the dev libraries are called in the package manager's repository Which can take a varying amount of time between 30 seconds and annoyingly long 
Sounds great. Good luck to the authors!
not really * pecl.php.net that's where you get the php extension... simple * if you don't know how your package manager works, why are you trying to compile extensions? * ./configure will tell you if you don't have the libraries you need, then ask google for the name in your distro Honestly I've been compiling php and extensions for 16 years now, so I do have an edge. But, I don't think projects like this do much to help perpetuate knowledge, I feel that they block the ability learn. If I have a hard time with something I search the internet to find out... it's not that hard.
Yeah, let's abstract PHP further! Who needs to know how to compile things anyway?! 
PHP extensions are pretty trivial to install, so the project doesn't excite me all that much. When it's integrated with Composer, and extensions are managed for me, based on my project dependencies, *then* you've got my attention.
My error turned out to be a hidden 'session_destory()' function I forgot to remove within 3000 lines of code after flipping to another design decision. 
Like I said in /r/programming when this was posted: Sanitation is highly context-specific, so good luck in covering all the aspects of this. 
A little project I've been working on over this weekend I thought I would share! deploy is an easy-to-use deployment script that uploads files via SFTP supporting plain-text and SSH key-pair authentication. It stores checksums for the files and only uploads those which change to save time and bandwidth! It has support for Sass and UglifyJS built-in, and is open-source so feel free to expand on it or report any issues you find! UPDATE: deploy now supports Less, the other popular CSS pre-processor!
It's a nice idea, but I'm with some other people on this one. If it's *only* going to install PHP extensions then it's not really all that useful. You should learn how to do this yourself as it is a fairly trivial task. I'm gonna put another vote in the development of something that manages extensions based on dependencies somehow. That'd be pretty nice. 
Maybe? As I said, it requires 5.5, so it could. I don't have the time to dig through all the files and see if it's using them now, and given that the code isn't released yet, it could still use them in the future. 
That sounds like a pretty hard problem to solve.
&gt; if you don't know how your package manager works, why are you trying to compile extensions? Further, if you *do* know how your package manager works, why *are* you compiling extensions? There are many reliable, trustable sources out there for up-to-date PHP binaries for slow-moving "enterprise" operating systems, many of which will try to make all of PECL available to you. I'd sooner point a newbie at one of those repositories than dare to ask them to compile something simply due to the list of things that *could* go wrong in the process.
Doesn't pecl work anymore? Used to be as simple as this (+ ssh dev packages for your OS): # pecl install ssh2 or even simpler: # apt-get install libssh2-php
Something I've always wondered - is it possible to create a new project type in PHPStorm? IE "Drupal Module", "HTML5 Boilerplate", etc.
I'm reasonably sure pecl still works....? I've used it in the past year at least once.
good point! though, I do have some custom needs, that's why I compile on my own.
Use the SimpleXML library (http://us3.php.net//manual/en/book.simplexml.php) to read the xml file, and then you can loop through, grab each title, strip the timestamp using regex, and then rewrite the XML file with the new data (using SimpleXML again) 
Laracast has a great video series on PhpStorm, which might be bit more in depth of some features. [It's available for free](https://laracasts.com/series/how-to-be-awesome-in-phpstorm)
 ^(.+) - .+$ Should do what you want, but jesse_dev's solution is probably better. Regex explained: http://regex101.com/r/zN8eG3
I was going to comment on the same line, so I will piggy back here. Memory leaks are really not that common (especially the ones that actually do any impact) in current PHP state. Nor does PHP 'run separate' process for each request in modern php-fpm pool based setups. In a typical setup you actually want to increase pm.max_requests configuration to prevent respawning of processes. 
It was just a quick weekend project, I'm improving it bit by bit and am welcoming others to contribute to it as well! Everything was kind of put in when and where needed, organization is definitely needed. :)
That is true, but to a limited set of packages the distro decides to support.
Thats essentially what I need, but I dont know how to go about doing it. Its an XML file from a server, I need to edit it and keep it an XML for when our software asks, "Which XML File" do you want. So basically, Broadcast Server (Server A) has the XML feed of the next upcoming show. A separate server (Server B) can have an XML feed to display on it which show is coming up next. So I need Server B to get the feed from Server A, but to drop that timestamp. I see what you're doing, but I dont know how to apply it. The XML feed we get looks like this: &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;rss version="2.0" xmlns:psg="http://192.168.1.110:3000/psg_namespace/"&gt; &lt;channel&gt; &lt;title&gt;Channel 22 Public (Out 1)&lt;/title&gt; &lt;description&gt;Channel 22 Public Access&lt;/description&gt; &lt;link&gt;&lt;/link&gt; &lt;item&gt; &lt;title&gt;Healthy Meals with Mary Rose - Mon, 16 Jun 2014 16:31:32 -0400&lt;/title&gt; &lt;description&gt;Salads &amp;amp; Salad Dressing: Bring good taste and good energy to your dining table.&lt;/description&gt; &lt;pubDate&gt;Mon, 16 Jun 2014 16:31:32 -0400&lt;/pubDate&gt; &lt;psg:eventId&gt;202456&lt;/psg:eventId&gt; &lt;guid&gt;MaryRoseEpisode1.mpg&lt;/guid&gt; &lt;psg:thumbnail&gt;http://192.168.1.110:3000/thumbnails/10815.jpg&lt;/psg:thumbnail&gt; &lt;psg:attribute name="Producer"&gt;&lt;/psg:attribute&gt; &lt;psg:attribute name="Series, Regular, FIll, or PSA"&gt; &lt;/psg:attribute&gt; &lt;psg:attribute name="Tape Date"&gt;&lt;/psg:attribute&gt; &lt;psg:attribute name="Air Date"&gt;&lt;/psg:attribute&gt; &lt;psg:attribute name="Locally Produced or Locally Sponsored"&gt;Locally Produced&lt;/psg:attribute&gt; &lt;psg:attribute name="Archive #"&gt;&lt;/psg:attribute&gt; &lt;/item&gt; &lt;/channel&gt; &lt;/rss&gt; 
Would it be possible to just not include the timestamp in the title to begin with?
Well we logged into the server (called "TelVue"), and we cant tell it to exclude the timestamp from the RSS Feed. Really annoying
It has to be written somewhere; a timestamp really doesn't belong in a title. But to sortof answer your question you'd do something like this: $title = preg_replace('#^(.+) - .+$#', '${0}', $title);
Yeah. But the problem is, The TelVue software is locked down. we cant really go in and edit the xml file directly, otherwise we would of done that. D: But with that code snippit you posted, where would be put that? (Taking into consideration we cant edit the original XML feed)
I should have said "may not" instead of "won't." I have run into situations where explicitly calling session_commit (or session_write_close) has fixed that kind of problem in a redirect scenario such as noted by /u/DerfK. It certainly doesn't hurt to do so when redirecting and exiting.