You know, when node was relatively new there were almost identical posts doing the rounds.. "server side javascript will never amount to anything", "it's all just hype"... fast forward a few years and it's thoroughly ingrained. It's nice that you have a crystal ball and can determine what will and wont ever deliver - wish I had that, I could retire on that kind of knowledge. 
With paratest, you can use the WrapperRunner and create a separate database for each test thread. Use the bootstrap script to create/migrate your databases. 
You gave no issues to address so you're asking us to read your mind to determine if it's worth it for you. 
Can you expand on this? Are you saying you are developing an ERP with Vue and Laravel, or developing for an existing ERP?
Getting a surface-level understanding of a language is not a big time commitment. With few exceptions, you can probably get to at least “will I enjoy working with this” in a week or less (but probably a day or two). That’s not a lot of time to spend if you’re investing in your career. I don’t care for Go much, but it’s a good choice if you’re looking to expand your career options. And what you learn will probably translate pretty well to concepts from other languages developed in the same timeframe (rust and swift come to mind)
Our company is doing somewhere around a million requests an hour in PHP. The only thing we'd benefit from is moving directly to C or Assembly at this point. We tested redoing one of our APIs in Python and in Node in the hopes of getting performance gains. Python was able to handle about 4% more RPS than PHP was on the same hardware and API results. Switching everything over to Python would have taken months or years. PHP just works and it's more friendly than Python.
What strikes me most as getting lost in these debates is that we're not really looking at one language replacing uses of another language. The world is adding more applications at an accelerating pace for an array of domains that is also growing at an accelerating pace The whole pie is blowing up, and PHP and node for example both have slices of it within which they are the best option and both are growing. There's another slice where you could use either, and that's growing too. It's not worth much to try to guage what people are talking about more, that's biased by what domains are talking more about their code right now and we don't even know that more chatter is a good indicator Personally I've taken a sharp turn back to using PHP for all the things I could use node or PHP for. There are fun things in node but if you're not working on the same code base all day and have to come back to something in a year the node ecosystem will leave you hanging with most of your framework-level deps abandoned
Without seeing code its hard to give much feedback. I'd prefer the job title be larger than the company. That resonates more with me than a company I haven't heard of before. Keep coding!
Is there a flag I can turn on outside of static analysis that will notify me if e.g. a property is missing a type hint? So easy to forget to even declare class members still these days.
If you know less than 4/5 different languages, then it's almost always worth to learn at least the basics of a new one.
Go is what PHP should have looked like if their developers weren't so keen on making it look like this mix of Java and C++. PHP frameworks and libraries literally abuse PHP array/hash as a data structure for configuration purposes, I absolutely hate that. It looks like incomprehensible shit and off course nobody ever remembers what keys is needed for this or that function or constructor. In Go you define structs that are easy to build and make code and types extremely readable. No maps everywhere because defining classes with properties and instantiating them is such a pain in the butt. Go is extremely easy to learn and to read, has a fantastic std lib for web programming, and does not try to encourage over engineering with IoC containers and what not. 
Always worth it even if you don’t use it.
Go can be a great addition to your toolkit when you need some long-running processes (e.g. consumers). 
From what i recall it added a considerable amount of extra time. Can't remember exactly but it was enough for me not to change it for tests. We do use it for non test data however.
Just a note on dB structure, its better to call it user_id instead of users_id as you're linking an address to one user - not multiple
INSERTS You can get the id of the previously inserted row using `$pdo-&gt;lastInsertId()` which saves you from having to look it up again. You should only need to do two inserts for your case, but I would suggest normalizing your tables into one, will a user ever have more than one address? Also I want to stress that you should never store the passwords in plain text, you must store them hashed and then only compare hashes when they log in. See php's password_hash and password_verify functions. SELECTS You could accomplish all this in one query using a join something like this: ``` SELECT * # or just the columns you need FROM `user` JOIN `address` ON `address`.`userId` = `user`.`userId` WHERE `user`.`username` = :username ``` Only after you've received the result (or handled no result) would you compare the hashes using password_verify. Again, unless the user could have more than one address, I'd suggest just one table to keep it simple which would be: ``` SELECT * # or just the columns you need FROM `user` WHERE `user`.`username` = :username ```
Just wrap the INSERTs into a transaction, other than that I don't see anything obviously wrong with this. Selecting user data seems OK, one SELECT to get the base information from Users, then another query to fetch all the associated addresses.
depending on the DB you plan to use you can just append a RETURNING id; to your first insert statement so you get the new ID without having to run a select right after. but as s.o. else suggested wrap this stuff into a transaction anyways.
You can also use the \`-&gt;lastInsertId()\` method in PDO if your database driver supports it - MySQL returns the generated auto id for each INSERT.
Thank you for feedback. I made the job title now larger and the company name smaller. 
1. https://i.imgur.com/DK1ckG8.png 2.it's OK save for the stap 1.2 you need to get the [autogenerated id](https://phpdelusions.net/pdo#affected) instead of the select query. A [transaction](https://phpdelusions.net/pdo#transactions) is also OK
I avoid the equivalent OUTPUT construct with MS SQL server because it can stop working after an insert trigger is added to the underlying table. It doesn't make a lot of sense why A and B are connected, but that has bit me several times.
Do you *really* think a JOIN-based solution would be any plausible? With 2 queries it's just 2 lines of code. With join it's a mess of loops and conditions.
Learn Go, Crystal and C programming is you want to develop your skills further.
If I recall, PornHub uses PHP so...
Why the text center aligned? It looks weird. 
Or parameterize the whole thing into a stored procedure which gives you data type checking /enforcement and you can do the transaction and table operations at the same time with one SQL call. If it is looking for the existence of an ID parameter you can use it for updates AND inserts based on the data context too 
&gt;PHP frameworks and libraries literally abuse PHP array/hash as a data structure for configuration purposes Where did you get that? I use Symfony, never had to remember any keys. Once the service is manually configured (in rare cases where it can't be done automatically), you never need to do that again. &amp;#x200B; &gt;does not try to encourage over engineering with IoC containers and what not There is a very good reason why IoC is invented and if you don't understand it, it is still not an argument against it. &amp;#x200B; &gt;Go is extremely easy to learn and to read Again, not an argument. If one language has less features that other, yes, it makes it easier to learn. But it is still language with less features.
For web that requires per second updates such as a forex trading platform or a web such as livescore.com. . . can you say php is ideal? 
Water, Oxygen to the roots, c02 to the leaves, nutrients and light? No wait, I know electrolytes.
&gt; Or parameterize the whole thing into a stored procedure Did you try this shit yourself? Did it make your PHP code less bloated? How it would look like to get the two different resultsets from the query? Did it improve the maintainability of the project code?
I think CodeIgniter is not recommended anymore because it's anti pattern.
Yes You load the parameters and submit the query, nice and clean The stores procedure is native sql, and my sql development team can tune and maintain it without having language confusion, and it can be used by other front ends thanks to its separation. There are no results other than return values. Any other heated questions?
So, in case I need to add another column to the field list to be returned, I need to create a JIRA task for the "sql development team" and wait for several days to have it implemented. NO, thank you. With PHP I load parameters and submit 2 queries, 2 lines of code, 30 seconds to change the query. Nice, clean and I am in the full control of the business logic. &gt; There are no results other than return values. So you don't even realize that there are two different result sets from two different tables. Why I am no surprised. 
In general I find node and its tooling to be wholly inadequate for mid to complex database schemas. Also for mid to big applications. Bolting TS certainly helps here but adds yet another layer of complexity. In general node tooling is unwieldy, low quality, poorly documented and constantly in flux. I use both daily though as there are things Node is way better than PHP (where async helps).
&gt; I use Symfony, never had to remember any keys. What do you think happens when you don't to use all these Yaml/XML configuration files because PHP is already a freaking dynamic language with Symfony? And you are ignoring the fact that previous versions of Symfony did not support auto wiring. &gt; There is a very good reason why IoC is invented and if you don't understand it, it is still not an argument against it. There is no good reason to use IoC in a dynamic language, just write factories it will be clearer, no code generation magics. &gt; Again, not an argument. If one language has less features that other, yes, it makes it easier to learn. But it is still language with less features. Given the poor support for concurrency and parallelism in stock PHP I'm not sure what you are talking about by "less features". Implicit interfaces? where are they in PHP? stack based Structs? where are they in PHP? what are the "less features" you are talking about? Go isn't a language with less features than PHP. 
Golang has for itself type safety, multithreading and speed. Against it, tooling is yet immature and hard to set up. It's also similar to javascript in the way code is organised - very easy to end up with messy code trees. It's way awkward to work with Golang in general. But if you need sub-ms response times for certain things you can micro-service, it's bloody excellent.
If I have understood what you wanted to say, to have updates on website every second, you would not want to refresh your page every second just to see if something has changed, for that kind of work you use AJAX. Thats why you use PHP &amp;&amp; AJAX.
Is there any way to make roadrunner return other PSR-7 objects rather tan Diactoros? I'd like to integrate it with Slim, for instance.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [spiral/roadrunner/.../**PSR7Client.php** (master → f9baa69)](https://github.com/spiral/roadrunner/blob/f9baa69aa34de7d71953dc75cc0310ee8958d2e0/src/PSR7Client.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e70sl6d.)
Did you get consent from the actual content owners to use their material? 
Seems good, thank you.
Unless it has changed, Crystal is still single thread only. So not more performant.
WOW, I've been looking for something like this for ages (the sending to Sentry part). Bless you!
And to be clear on the way password hashing should be done (unless you know what you're doing and intend to use something like `libsodium`), use the standard library's [password_hash\(\)](http://php.net/manual/en/function.password-hash.php) functions. $hash = password_hash($password, PASSWORD_DEFAULT); if (password_verify($password, $hash)) { // Authenticated. if (password_needs_rehash($hash, PASSWORD_DEFAULT)) { // Rehash, update database. } } Example courtesy of [Paragon Initiative](https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-passwords).
&gt;What do you think happens when you don't to use all these Yaml/XML configuration files with Symfony because PHP is already a freaking dynamic language ? What yaml/xml? I clearly stated that once set, you never have to remember them. And that is what you said is a problem in php. &amp;#x200B; &gt;And you are ignoring the fact that previous versions of Symfony did not support auto wiring Yes, just like I am ignoring php3-5 as well. So what's your point? Btw, autowiring exists since Symfony 3.4 or similar but had to be explicitly turned on (now it is by default). &amp;#x200B; &gt;And I'm not even talking about Symfony forms and what not, ridden with array/maps for field configuration. Think about this before answering; do you think it is because Symfony developers made a mistake or is there a reason for that? Hint: look for [form extensions](https://symfony.com/doc/current/form/create_form_type_extension.html) and **learn** how to use them. Only then you will understand the need for such config. Symfony/forms is the best thing I have ever seen, Spring/Laravel/Zend... forms are a joke compared to it. But to fully utilize them you must go with array map and it is **not** a limitation of PHP; if you build same features in **any** other language, you would have to use array maps as well. The only possible was to use (anon) classes instead is if language allowed dynamic class generation via multiple other classes. But that is beyond stupid. &amp;#x200B; But once more; you have to learn forms first and comment it later. Otherwise you are making logical error called "[argument from ignorance](https://en.wikipedia.org/wiki/Argument_from_ignorance)". &amp;#x200B; &gt;There is no good reason to use an IoC container in a dynamic language, AKA language you do not have to compile, just write factories it will be clearer, no code generation magics and all that bullshit. So... you suggest me to write factory for each service instead of letting Symfony do that for myself? Yep... totally makes sense :) Btw: &gt;dynamic language I don't think it means what you think it means. You keep repeating same words like it somehow gives you an argument. All my code is 100% strict, every single parameter is typehinted. So how it is any different than static languages except for obvious speed difference? &amp;#x200B; &gt;Given the poor support for concurrency and parallelism in stock PHP There is plenty of tools that allows them and you can't ignore them to somehow win an argument. &amp;#x200B; I am not going thru the rest as you totally missed my point.
I'm honestly not recommending you rewrite your whole system in something else, but if you were hoping for speed ups, why in the world were you looking into Python and Node? Why not Java (very similar in style to "best practices" PHP 7), Kotlin (can use all Java ecosystem, but a nicer, more expressive, language), or Go?
With the most basic database wrapper the whole task is 2 lines of code $user = $db-&gt;query("SELECT * FROM users WHERE username=?", [$username])-&gt;fetch(); $user['address_list'] = $db-&gt;query("SELECT * FROM address WHERE users_id=?", [$user['id']])-&gt;fetchAll(); With the most basic ORM is' just one line User::find(['username' =&gt; $username]); Your bet. Provide the code for both stored procedure and a PHP script to query it and get the results. Then try to justify your solution.
I thought so too, but alas, it does not. I'm gonna get a stab at this, tyvm for the pointers.
Node is awful. NPM packages are generally pretty bad (compared to, say, popular Java libraries), poorly documented, with not-great performance. PHP is better than Node. However, just because I don't think PHP should be afraid of Node, doesn't mean it wont eventually die as Java gets friendlier and other, more maintainable, languages are maturing (Go, Elixir, Kotlin, Clojure, maybe Rust, etc). One point in Node's favor is TypeScript is a pretty good language and is growing in popularity. I think TS is a better language than PHP, but, again, the Node ecosystem is pretty bad, so it's hard to honestly suggest TS as a backend tool at this point.
Could really use [PSR-7 HTTP message interfaces](https://www.php-fig.org/psr/psr-7/) support to make it easier to plug into existing frameworks. Rather than having the library try to parse request info on it's own, would be nice if it could accept a RequestInterface and then an option to provide a ResponseInterface instead of directly outputting.
Absolutely. Go is a better language than PHP **and** it approaches problems in a totally different way. So if you learn Go, you get the benefit of using a fast, statically typed language, with good concurrency built in, with one of my favorite Interface concepts of any language (it's like static duck typing- really cool and convenient); **and** you will grow as a developer by learning a different style to development. As far as things that Go can do that PHP **can't**, that would be non-server-backend software, and good concurrency. Plus it's probably faster at certain things.
No
Yes... you are right. I've personally worked with Ajax. That wasn't what I meant to ask anyway. In any case, as I've experienced, for websites that requires several calculations happening in seconds on a particular input and from several users, PHP doesn't perform well. It gives wrong values sometimes especially when there is a surge of users at peak hours. This is not the fault of the hosting since the hosting plan used is the highest( a vps). I heard it's due to the lack of multithreading in php... I'm alreading making plans for node. The Truth is... I love php but, it's not giving me the options you guys are saying. Love the tech &amp; be honest man
I like it. It's useful, it's well written, it has clean tests, it seems to work well. The [System](https://github.com/slashtrace/slashtrace/blob/master/src/System/System.php) class seems to be some kind of static god factory, I'd rework that to not violate SRP, put it into separate factories, make them non-static to be able to swap out implementations easily. There's also no reason to make a singleton out of it. Just use make the `SystemProvider` a dependency and let it initialize your "default"-factory by default public function __construct(SystemProvider $system = null) { $this-&gt;system = $system ?? new System(); } Making it a singleton has no value whatsoever, there is no general reason why the class shouldn't be instanciated twice if you really want it. Generally, singletons are an anti-pattern, they aren't any better than static classes except for the ability to typehint them. I do agree with /u/riimu that you should look into PSR-7 and base your request class off that (or even use an existing implementation), that would enable quite a few better interop possibilities. The interface naming isn't my preferred style, but it doesn't violate PSR-2, so it's just preference (I am always expecting classes when I click into the files, unless I've seen the `implements` before) Everything else looks great. Good work!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [slashtrace/slashtrace/.../**System.php** (master → 65c1ba5)](https://github.com/slashtrace/slashtrace/blob/65c1ba5f33d4aee60cde01255ffcf8cdc7e7ed29/src/System/System.php) ---- 
THAT WAS EXACTLY WHAT I WAS LOOKING FOR THANKS
Indeed it’s a single thread I meant I’m referring these timing although it’s not a real world use case: https://devhub.io/zh/repos/kostya-benchmarks Other tricks we could use cluster for a multiple process: http://blog.seraum.com/crystal-lang-vs-nodejs-vs-golang-vs-http-benchmark Hopefully, we reach 1.0 milestone soon if the experimental branch is going well. 
u welcome i need from you two thing : the country and the site wich you want to redirect audiance to it ))
Thanks a lot for the detailed feedback, I appreciate it! &gt; There's also no reason to make a singleton out of it. Just use make the SystemProvider a dependency and let it initialize your "default"-factory by default I agree, that's actually how I implemented it at first. Multiple `System` instances don't bother me, I used a singleton simply to illustrate that it's a single entry point for all low-level methods. &gt; Edit: Regarding the System-class again, I wouldn't "rewrite" functions in the way you do (like having an output-function to do an echo). The functions you use there will never be removed from PHP and never work differently. It just creates additional function lookup overhead. Just use the functions directly, that also avoids the requirement for some kind of god class like System is. It's so I can mock them. It's very hard, for example, to test that the output buffer is cleared, _within_ PHPUnit, since it uses output buffering too and instead of one test failing you have the entire test framework fail. It's easier to test that the [error and exception handlers are installed](https://github.com/slashtrace/slashtrace/blob/2d61928910c5c26da614397e9279060e753475bd/tests/ErrorHandlerTest.php#L51-L58), that the [previous error handler is still called](https://github.com/slashtrace/slashtrace/blob/2d61928910c5c26da614397e9279060e753475bd/tests/ErrorHandlerTest.php#L181-L204), etc. I am not against adding classes to make the whole system more testable.
No, redirecting users automatically is literally cancer.
# [Paginator](https://github.com/iranianpep/paginator) This is a powerful PHP pagination engine to take care of pagination hassles. This is a quick example to show how it works: $totalItems = 3; $perPage = 1; $currentPage = 1; $url = 'https://example.com'; $paginator = new Paginator($totalItems, $perPage, $currentPage, $url); if ($paginator-&gt;hasPages() === true) { if ($paginator-&gt;getPreviousPage()) { $previousPageUrl = $paginator-&gt;getPreviousPageUrl(); echo "&lt;li&gt;&lt;a href='{$previousPageUrl}'&gt;Previous&lt;/a&gt;&lt;/li&gt;"; } foreach ($paginator-&gt;getPages() as $page) { if (!$page instanceof Page) { continue; } $pageNumber = $page-&gt;getNumber(); $pageUrl = $page-&gt;getUrl(); $cssClass = $page-&gt;isCurrent() === true ? 'active' : ''; echo "&lt;li class='{$cssClass}'&gt;&lt;a href='{$pageUrl}'&gt;{$pageNumber}&lt;/a&gt;&lt;/li&gt;"; } if ($paginator-&gt;getNextPage()) { $nextPageUrl = $paginator-&gt;getNextPageUrl(); echo "&lt;li&gt;&lt;a href='{$nextPageUrl}'&gt;Next&lt;/a&gt;&lt;/li&gt;"; } } &amp;#x200B;
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Where did you experience this? I am working with PHP for over 10 years now and I've never seen values miscalculated, only when I've miscalculated them with my own code. That happens for floats sometimes due to the way float values are represented in binary, but many languages suffer from this, that's not PHP specific (and especially JavaScript does, by the way). That's why you do precision decimal calculations with e.g. bcmath, where floats are represented as string values or you scale them up to ints by a factor of your required precision. The lack of multithreading leads to miscalculation of numbers? If anything, heavy multithreading without knowing what you're doing will lead to miscalculations. Multithreading itself has nothing to do with miscalculation of values. There is no technical reason why it would except if your CPU is broken (which would result in a lot of other errors you'd have noticed) I am 100% sure it was an error in your code or something that occured through dynamic typing (like strings starting with numbers being cast to ints in specific cases). Surely it doesn't have to do with PHP miscalculating values, especially not under load. It simply doesn't make sense. Then, let me clear one thing up: **Node.js isn't multithreaded, can't multi-thread and doesn't multi-thread**. It's a common misconception. Every Node.js process is running on a **single core, single process and single thread**. You can cluster it over multiple processes and cores, but that's clustering. Any language can do that, including PHP (it's simply a matter of starting more processes, what PHP is really good at through its nature). JavaScript is **asynchronous**, that means, it has an event loop and procedures can run concurrently, which essentially means that are switching between who can work with the (single) CPU currently and suspend until e.g. they received a response or a result, during which other procedures can work. This all still runs **on the same CPU, in the same process, in the same thread**. In reality, PHP has the `pthreads` extension and as long as you're running a ZTS build of PHP, you **do have multi-threading**. You should quickly ditch your plans for Node if these are the reasons for switching for you, since you don't understand the implications. Node.js is slower than PHP and actually _harder_ to scale, not easier (Having a `cluster` module doesn't automatically make your application scalable. There's much more to it)
&gt;if you were hoping for speed ups, why in the world were you looking into Python and Node? When most of your work is done in external components any language can be fast. Python is slow, but asyncio can be fast as it spends most of its time running something from a C library or in epoll calls.
More problematic when you haven't updated it.
&gt;What does that mean for those wanting to program without types? Only time will tell, but I predict that at least a small majority of programmers wishing the language to stay with its dynamic roots will look to other languages. Have fun in Javascript Land.
Something like database access is one of the things where a fast external library makes a huge difference - accessing a remote database means sending a query and waiting for a response. The whole time that's happening (which depending on your setup may well be a large part of handling a request) is time a decent eventing library will be doing other things for you with minimal time wasted on bookkeeping and checking up on the outstanding query that needs to eventually get a response. Something like turning the results into a JSON blob to return or whatever can also be very quick even in an otherwise slow language if the stdlib does all the hard work in some C lib, or if you can use something [like this](https://github.com/simplejson/simplejson) to add in a C lib for all the heavy lifting yourself. Data validation certainly can slow things down a bit if you have a lot of involved logic for it all in python, but even if you do: the other speedups can more than make up for it.
[Sourcegraph](https://github.com/sourcegraph/sourcegraph), which was open sourced yesterday can also potentially help. It will make your code searchable and make it easier to jump between related parts.
Since 2012, I've been working with PHP. I should know if the codes are responsible for wrong results during calculations &amp; to be honest it isn't. Like i said, this issues occurs when there is huge traffic(which means more calculations- since It's a very large e-commerce web). The coffee itself isn't that intelligent enough to know when to make the errors. It has to be architecture of the language- php. It can't take several tons of calculations in few seconds devoid of errors(miscalculations). For lack of a technical name, I would say PHP lacks this &amp; that's what I've heard nodejs can solve... atleast, you can agree with this on nodejs. One more thing, you are there only one saying nodejs is slower than PHP. Are you for real? 
I really like the breadcrumbs idea. Thanks for this!
WordPress is easy for end-users. *Not* for developers. And laravel is not the only alternative (I wouldn't even call it an alternative at all, as it's not a CMS but a framework). Checkout Symfony, Zend, etc. My personal favourite is symfony as it scales really well from just a few components to a fully fledged framework with everything on it.
yeehaw
Looks really good, especially for frameworks like Slim.
Awesome good job :D
Use PDO if you can, it is way better.
Whoops *can* be configured to dispatch to external handlers, but the integration isn't as nice as this package. OP (potentially) has a real winner here... I'm about to try it out!
It's good to have options and the ability to choose a tool for the task and not adapt tools to the task. There are things Go excels at, there are things PHP excels at. Use each to their strengths :)
For that, we have ReactPHP that handles that async I/O and speeds up the parts that are I/O bound by doing something else while waiting. Sometimes you just need to look around - PHP has some major tooling improvements past few years that is quite mature and allows things that half a decade ago where prerogative of Python/Ruby. These days PHP spanks those two like nobody's business. The only real perf gain is to switch to something that compiles like Go, but that's a completely different kind of beast and it does not always makes sense (logical or/and financial) to do it because the gains are not always as big as people expect. Truth is PHP std library is VERY fast and if you just parse requests, update data and spew a response - you might not even get a 100% perf boost, especially if you start using PHP-PM process manager that keeps PSR HTTP request compatible systems initialized in memory completely removing PHP's bootstrap phase of the app.
Magento2
haha nice :D i also like bayreuther but prefer augustiner ;)
Depends on needed use case: https://websitebeaver.com/php-pdo-vs-mysqli
&gt; PHP has some major tooling improvements past few years that is quite mature and allows things that half a decade ago where prerogative of Python/Ruby. These days PHP spanks those two like nobody's business. I was already familiar with ReactPHP existing, but to call it 'quite mature' or say it 'spanks' something like the Python experience is pretty... optimistic. Admittedly I've had limited exposure to ReactPHP. (Because as far as I can tell, very few people actually use it.) The fact Python supports `async`/`await` as keywords, has asyncio as part of the standard library *and* a reasonably lively third party ecosystem with things like [trio](https://trio.readthedocs.io/en/latest/) (which can be used pretty seamlessly with code written for asyncio thanks to the [language standards](https://docs.python.org/3/library/asyncio-task.html) for concurrent programming) make me reject the idea PHP 'spanks' Python in this regard. (I don't really keep up with the Ruby world, no comment there.) &gt; The only real perf gain is to switch to something that compiles like Go ... unless you're not actually bottlenecked by execution of the code in the language you're using, in which case performance gains would be marginal at best. If you're largely bottlenecked by something like all the postgres calls you make you can do something [like this](https://github.com/MagicStack/asyncpg) that lets you beat out Go with Python. &gt; Truth is PHP std library is VERY fast and if you just parse requests, update data and spew a response PHP is quite fast for an interpreted language for sure, but as per above: it hardly matters if the real thing holding your system back is isn't the time it takes to execute lines of code in the language you use. Switching from a thousands-of-threads approach to the event loop can dramatically increase performance regardless of which language you use. (And that performance gain will be much larger than you'd get just switching out Python for Go/C despite Python being one of the slower interpreted languages out there.) Much as you said: you make PHP faster not by actually making PHP faster, but rather by cutting out cruft like bootstrapping. That's why a lot of systems comparable to help do the same thing exist for other languages like [uwsgi](https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html) for Python. 
Nice result; &amp;#x200B; You should use *Euclidean distance* here [https://github.com/ricardofiorani/php-legofy/blob/e52f7c5e86b6da91bb77478ead376b9f86e03c91/src/Pallete/ColorPalette.php#L274](https://github.com/ricardofiorani/php-legofy/blob/e52f7c5e86b6da91bb77478ead376b9f86e03c91/src/Pallete/ColorPalette.php#L274) instead of Manhattan distance. &amp;#x200B; You are picking (arbitrary) nearest pixel here [https://github.com/ricardofiorani/php-legofy/blob/e52f7c5e86b6da91bb77478ead376b9f86e03c91/src/Legofy.php#L88](https://github.com/ricardofiorani/php-legofy/blob/e52f7c5e86b6da91bb77478ead376b9f86e03c91/src/Legofy.php#L88) which is far from perfect. It can be fixed by simply downsizing (with bilinear interpolation or better) to ($amountOfBricksX, $amountOfBricksY) the input image here [https://github.com/ricardofiorani/php-legofy/blob/e52f7c5e86b6da91bb77478ead376b9f86e03c91/src/Legofy.php#L65](https://github.com/ricardofiorani/php-legofy/blob/e52f7c5e86b6da91bb77478ead376b9f86e03c91/src/Legofy.php#L65)
Nice ! Do not forget to override the default \_\_clone behavior if required.
Nice!
Obscure, practically pointless but still rather clever. Great work, have an upvote. 
The only thing I could suggest is try to make the bricks multiple studded bricks like a normal set would be. It would make the mosaic feel more realistic.
No, it is not. Both have their own use cases. Also, if you want the advanced stuff - you have to use mysqli lib.
http://php.net/manual/en/spl.datastructures.php http://php.net/manual/en/book.ds.php
In theory, yes. I have found php 5.4 to be a big blocker in tooling, but I might be able to hack it together or find an old version. Even getting it running on a modern OS was challenging, and involved digging through the dark ages for forum posts, mailing lists, and symlink-ception. There is evidence of at least 2 attempts to bolt on a framework from years ago. My first instinct was to light it on fire and start over, but the company is kind of dependent on it. I am working to make it a headless api, with a js frontend.
Why would one use this over ArrayObject? I also very much doubt this being high performant as advertised. Nothing to bank up that claim.
Arrays only accept strings and ints, this Map implementation accepts any value as a key. Regarding performance: using plain arrays is definitely faster if you're not using the additional features. A naive benchmark puts the Map implementation at around 10x slower than regular arrays.
After a while augustiner gets a bit boring though :)
So it's high performance compared to what?
If you want guidance in what changed from version to version, you should check [https://github.com/PHPCompatibility/PHPCompatibility](https://github.com/PHPCompatibility/PHPCompatibility)
Gosh darn it. There goes 20 years worth of effort and customers down the drain. Why oh why didn't someone tell me php based console commands were impossible a long time ago? Before I made a career out of using them. Very sad. Guess I better get to work on refunding all my fees. Funny how the customers never complained.
How much are you willing to pay for personalized help?
&gt;Whoops can be configured to dispatch to external handlers, but the integration isn't as nice as this package Not had chance to take a deep look yet but one thing I really want is an easy way to capture errors externally, hopefully this will do it.
I would like to find free help if possible. This is an introductory course so the codes are pretty simple (not to me obviously). Like right now the one I am working on is done, but I missed something somewhere and I think someone who knows what they are looking at would be able to spot the issue in 5 minutes. They are pretty short and simplistic codes that don’t do much. I am hoping to find a thread of people that would be willing to help me out, but I could and would absolutely would consider paypal-Ing some cash if it takes more than a few minutes. Does that make sense? I don’t need hours of help, just a quick proofer once in a while
Why would anyone want to provide value below their cost? If it’s not worth anything to you, why do you even bother?
Well, what is your point?
I need a shell all the time. I agree that assuming everyone does is the pinnacle of ego. But given the volume of questions on stack exchange I think there is a need. Repo has been public for more than a year, few weekly clones. Maybe I mistakenly assume it’s because fellow devs cant make it work. 
I am always surprised to see this kind of bullshit tasks that has **zero** relevance to any kind of realistic programming. Is this your homework? It sure looks like one. And I am sorry you have idiot for teacher. 
Why not use an actual shell?
Maybe try r/PHPhelp. 
The Code Review Stack Exchange site is designed for that. Not specifically for school work, but definitely for people who want to improve. It's generally not considered ethical to give help for a current school assignment, but I see nothing wrong with asking for help with a past assignment that you'd like to understand better.
Hey friend maybe this comment will help. Feeling useless and frustrated is completely normal when you're learning a programming language. It's the first stage of learning. Push through it.
Sorry if I offended you. I thought I would try my hand at a beginner coding class because I’m good with computers and was hoping I would be good at it, but didn’t realize how tough it would be. I am almost through with the course and just want to try and not fail. I will not be taking another coding class as I obviously am not cut out for it. That said if someone asked for help in one of my stronger subjects I would be more than willing to take a look and I have done this before, so I didn’t think it was an unreasonable ask. I understand you feel differently though, and I get why. If someone is an excellent coder who gets paid to do so, they will not want to help someone like me. If someone enjoys helping others or solving a quick puzzle, they might. If anyone wants to name a price for what I guarantee would be less than 20 minutes of help than I will go that route. I bother because I am a mom of three and this is my very first semester of community college and I want to be able to continue receiving financial aid which means not failing classes. 
Thanks, I didn’t realize it would be unethical but I could see how it would be. I have helped peers figure out a math problem without giving them the answer and I was thinking this would be like that. Again, thank you for the resource.
I really appreciate that! I think my problem is that I am taking it as an online course from a local community college as I have 3 kids and It can be tough to try to learn some of this by myself. I have been pushing through as much as possible and am over halfway through the course. Now if I can just find what character I missed when I go back to my code. I swear it’s always the smallest of mistakes that render the whole thing useless.
Please explain why, then you have an answer to your initial question. 
I've been using php for more than 15 years. The 'one stupid character' mistakes never go away.
On point and helpful, thank you. 
If you absolutely can't get something to run, then yes, face-to-face help before finishing the assignment is appropriate. This is like giving hints with math, but having them do the calculations themselves. Except with software development, there is no one right answer. (Plenty of answers are much better than other answers, but the best answer is always domain specific and frequently subjective.) The minimum that I would want from my junior developers is, if everybody else in the office were sick, and they had a straightforward task, could they make progress on it, having only an internet connection for support? It doesn't have to be elegant, it just has to work. A developer who is self driving is valuable. When code review time comes, I can point out best practices, different patterns that are useful, things to watch out for, etc. If there are specific concepts that you're having trouble with, feel free to ask. We all like inflating our egos by showing off how smart we are. It helps to keep the feeling of imposter syndrome at bay.
If it's not done with a for loop, then how would it be done? Hint: yes, a for loop is entirely appropriate here. It could also be done with a while or a do...while. It could even be done with a recursive function, but I wouldn't suggest it for a student.
Thanks. Usually my issue is as simple as a missed set of brackets or some other wayward character and I have been staring at the same code for an hour despite the fact that it’s only about 10-20 lines and I’m just so mad at myself that I can’t see what I did wrong that I just want that “hint” you referred to, ya know?
I can see how! Some days I’m like hey I can do this and other days I can’t stare at the code for another second because I’m so annoyed that I can’t find what I know is so simple and right in front of my face. 
Some people get enjoyment out of helping others. You should try it sometime.
There are a some acm-icpc exercices who you can solve without a loop ;), most of them are for begginers.
Maybe he's training for the icpc?
Getting a good editor / ide will help immensely with finding these kinds of errors.
This is not about the end result but to train yourself to approach a problem and solve it. It teach you to research, think and choose a solution within multiple valid choices. And all of this while helping you familiarise with the given language. If he is really new to programming and starting with php I think it’s not that bad of an exercice.
A good IDE will point out syntax errors. I use PHPStorm, and I'm sure they have a free license for students. Others have their favorites. The general consensus here is that PHPStorm is the current best. (I'm honestly curious about alternatives since I last looked around 2 years ago, so if anyone in the peanut gallery wants to reply... ;-) ) Other than a good IDE, though, getting used to the error messages is a huge help. Turn on all errors and warnings while you're developing, even after you're long sure of your skills.
How does this compare to https://psysh.org ?
I wrote this post "[Why you PHP guys should learn Golang](https://mikespook.com/2012/08/why-you-php-guys-should-learn-golang/)" 6 years ago. Some of the content has been out of date, but the major idea hasn't changed. \`If you are using PHP heavily, you need some others to give a hand." PS: Look at the comments to the post. How many people can still stand their own position now? Go is amazing. PHP is amazing too. How it could be when they are working together? LOL &amp;#x200B;
Do you have any you recommend? I’m using notepad ++ as per my professors instruction but I could try a secondary 
Thanks! I will download that
Yea it is...
I've been using Komodo Edit for PHP and it's pretty good. Sublime Text is also good.
Totally. I find they're easier to spot after a good night's sleep.
Can you elaborate? Go tooling is quite good and quite easy to use. And I am not clear on the comparison to JavaScript. How is it structured like JS leading to messy code? 
Will look into it 
I have heard that excuse many times and still think it is 100% bullshit. This is something that will teach you literally nothing, or nothing that can be used in real life. If I were a teacher, I would give different tasks. Example: create classes to represent something like truck company, it has drivers and vehicles, both have work logs (because vehicle has many drivers)... No FW, no ORM... And later add new requirements, maybe change some of them... That's real programming, not useless loops. That knowledge can be later applied to any other language as well, it is easy to add annotations and have their values in DB preserved (Doctrine/Hybernate/TypeJs)... Teach them to use typehints and similar, what iterables and generators are... That would be real, useful knowledge that kids can apply. From my POV, anyone who gives tasks like this is a person who has no programming experience, only basics learnt from tasks like this. Infinite loop basically.
I am a Linux exclusive kinda guy so I don't know much about Notepad++ therefore I can't comment on how to use it effectively. Some excellent free / open source editors are Atom and vscode. Closed source / paid options are Sublime Text and PHPStorm. Make sure to install any required plugins to help with PHP coding. As a student, you may qualify for the PHPStorm free student edition. Learn to pay attention to the syntax highlighting and error marking.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [AlanMenhennet/SpiralNumbers/.../**spiral.js** (master → 57ecee6)](https://github.com/AlanMenhennet/SpiralNumbers/blob/57ecee601877a5b8a5b605c2c4bc1fd7b7d0ffff/spiral.js) ---- 
Go wasn't something we considered at that point. We were looking for something easy to convert to and Go just didnt make the radar of web languages we had experience with. Last thing anyone wants to do is convert a code base to a language no one on the team has ever programmed in.
Nice one! I would add however, purely in the interest of learning (I'm not being facetious in anyway) instead of telling someone to use x,y, or z, perhaps an explanation would go along way as to why? (Again, not being facetious in anyway, I think your point is totally valid)
When used as is, PDO is way better, providing a lot of useful features and handy shortcuts, while mysqli being just a thin wrapper over the C API, making the code too verbose and counter-intuitive. 
[removed]
When you see a title "10 things a PHP tips and tricks" you can tell you are about to see another collection of bullshit. But this is a new level. Stay Away from Anything Ending With _once() &gt; include_once() and require_once() is extremely hard on server resources. Bullshit. Besides, in the modern PHP app there is **no no manually written require_once()**, everything is [autoloaded.](https://www.php-fig.org/psr/psr-4/) &gt; to turn error reporting to E_ALL, and you should only turn it off ten seconds before going into production mode bullshit. [E_ALL should be **always** ON](https://phpdelusions.net/top#zero_error_reporting). Use PHP's Inbuilt Functions &gt; You want to count the number of keys in an array? You can loop through the array and simply increment a value for each iteration, right? Anyone ever tried it this way? Seriously? &gt; The best and safest way is to use mysql_real_escape_string() for all database before it is added to the database. An utter bullshit. [mysql_real_escape_string() has nothing to do with any security](https://phpdelusions.net/top#escaping) and never has been. *Let alone this function doesn't exist in the language anymore*. Use POST Not GET &gt; The reason is simple - GET is simple to emulate, all I need to do is add something to my address bar and I can hack your project. This is simply ridiculous. Or rather childish I's day. "I close my eyes and nobody is seeing me". "I can't see POST data in the address bar so it's harder to tamper with ti for anyone" 
Is 5.4 even supported at all? I hope you're not handling credit card data because that its a potential PCI compliance issue if you can't get security updates on that. Good luck.
Good work, from a self marketing perspective, this really makes you stand out in an interview setting. Everyone will remember you as the "lego guy" and thats not a bad thing at all.
&gt; How will this get more people to like PHP Because most sane developers prefer their types strong and static. This is a step in that direction.
This is really great, I never thought of a lib like this but I can see how it's a major improvement over exec and shell_exec. I read the doc you linked and I found it easiest to understand when I saw the example code. So I think having a very simple snippet of example code that does something that can't be done easily with exec/shell_exec (changeUser() is good) right up the top would be eye catching to people looking for a lib to solve some problem they've just googled. I also think the shell lib should be it's own project on github so that it's easy for people to use by itself. The browser component can be it's own project as well. 
I know, but php-ds isn't pure PHP, and you [didn't seem keen to try implement constant-time lookup in there](https://github.com/php-ds/polyfill/issues/13). I just wanted to see if it could be done properly.
Would confirm. Doing a lot of interviews lately and none had any relevant private/online presence. Lego guy would definitely stand out here 🧝‍♂️
Didn't know you could seek() further than EOF. It would be interesting if you went more in depth about the technical side of it though.
Yes you're right, I should have given more explanation. &amp;#x200B; 1/ To get the nearest color of a given color against a color set (the input image pixel vs the lego brick color palette) we need to compute the distance for each color in the palette. What is the distance between 2 colors ? Simply think a color defined by 3 values (R, G, B) as a point (x, y, z) in a space. You then just need to peek the formula to get the distance between 2 points. The Euclidean distance is the real distance, the straight line (= the length of the vector BTW). The Manhattan distance (think of a path around street blocks in Manhattan) is a good approximation of relative distance which is useful when performance is an issue (basic arithmetic, no sqrt). It is good for ranking which is the case here. Not a big issue. But since the Euclidean distance is perfect and there is no performance constraint here he should simply use it. &amp;#x200B; 2/ Each lego bricks in output image corresponds to a (rectangular) block of pixels in input image, in this case $amountOfBricksX x $amountOfBricksY. Currently, instead of merging all pixels for each block (by averaging them) he only picks one (a corner pixel) which is arbitrary an not accurate especially if the block is big with heterogeneous pixels. One way to fix that is, instead of scanning the input image in its original size, to first downsizing it so that the proper accurate merging for each block will be applied by the image library. &amp;#x200B;
If upgrading your application from Yii1 to Yii2 requires a rewrite, then switching to Laravel or Symfony will also require a rewrite. If you have read [Clean Code: A Handbook of Agile Software Craftsmanship](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) by [Robert C. Martin](https://blog.cleancoder.com), then you might remember the *Grand Redesign in the Sky* - if not, take a look at [What is Clean Code?](http://www.informit.com/articles/article.aspx?p=1235624): &gt; The Grand Redesign in the Sky &gt; &gt;Eventually the team rebels. They inform management that they cannot continue to develop in this odious code base. They demand a redesign. Management does not want to expend the resources on a whole new redesign of the project, but they cannot deny that productivity is terrible. Eventually they bend to the demands of the developers and authorize the grand redesign in the sky. &gt; &gt;A new tiger team is selected. Everyone wants to be on this team because it's a green-field project. They get to start over and create something truly beautiful. But only the best and brightest are chosen for the tiger team. Everyone else must continue to maintain the current system. &gt; &gt;Now the two teams are in a race. The tiger team must build a new system that does everything that the old system does. Not only that, they have to keep up with the changes that are continuously being made to the old system. Management will not replace the old system until the new system can do everything that the old system does. &gt; &gt;This race can go on for a very long time. I've seen it take 10 years. And by the time it's done, the original members of the tiger team are long gone, and the current members are demanding that the new system be redesigned because it's such a mess. &gt; &gt;If you have experienced even one small part of the story I just told, then you already know that spending time keeping your code clean is not just cost effective; it's a matter of professional survival. &gt; &gt;Unless you and the team you work with has already asked and answered these questions, maybe there are more interesting questions to ask, for example: - What are the actual costs of a rewrite? - What is the business value of rewriting the application? - Perhaps the business is better off improving the current system than rewriting it entirely? - What can we learn about coupling our application to frameworks from this situation? 
SPL's are broken at least in PHP 5.x. Too much memory consumption, too much time spent on operations. Picking good stuff out of SPL is a must, as long as any performance matters (which I assume is the reason to go for better data structures).
Nice one
&gt;You want to count the number of keys in an array? You can loop through the array and simply increment a value for each iteration, right? &gt; &gt;Anyone ever tried it this way? Seriously? &amp;#x200B; Yes. I have seen that "life hack". That array was result of "SELECT \* ...", and count was used to create id for next row to be inserted. In his defense I suppose was a fact that he only was a student - thus somebody with lots of things to learn about yet.
It would help understand composition over inheritance. Go doesn't have inheritance. I really like Go, much prefer it to PHP, but PHP pays the bills atm.
&gt; When used as is, PDO is way better, providing a lot of useful features and handy shortcuts I'm not necessarily disagreeing with you but how is PDO 'way better' what are the shortcuts that make it 'way better'? &amp;#x200B;
&gt; Last thing anyone wants to do is convert a code base to a language no one on the team has ever programmed in Fair enough then if it's just a skills gap it makes sense not to go with it. On your original point though, if you are hitting the limits of PHP then its worth investing in GO and maybe even Rust, they will both take you much further than PHP. C is probably impractical to manage although I have played with the Kore framework I don't know anyone using it at any kind of scale. &amp;#x200B;
A shell also maintains an environment separate from PHP. E.g. any exports you do with exec() will no longer be in effect next time you call exec()
If I had to pick one, I would go for Python than Go.
https://twitter.com/ShrapnelCol/status/811554258927702016 for starter As of the shortcuts, there is [a plenty](https://phpdelusions.net/pdo/fetch_modes#best). But all this stuff is applied to the raw usage. Of course one could write a wrapper for mysqli that will implement all the functionality offered by PDO.
This is a real system shell. No different than using putty to ssh into your server. Input and output of the terminal is simply piped to PHP. Think of it as exactly the same as hammering commands into bash from your keyboard, staring at the black screen.
Exactly right.
Exactly. In PHP it is even worse because unlike Java, we don't have to typehint parameters (although it is possible for 10+ years). That makes the barrier much lower and I can't describe you what nightmarish code I have seen from "senior" developers.
If I had to do this, I might be tempted to cheat and wrap a `tail -10 filename.txt` in PHP (because we work exclusively on Unix systems). &amp;#x200B;
CodeIgniter has small footprint. With good programming practises, actually you can do more and code less. In fact 40,000 is such an overkill to behonest for such OCR and acchiving system. I even created a complex system with HR/workforce human time logging management with fewwer codes. :) \- exprience , and 10+ years of other experience. 
Thank you, I’m going to take a look at these.
Thx dude ur awesome
uhh [https://github.com/amphp/socket/blob/master/examples/simple-http-server.php](https://github.com/amphp/socket/blob/master/examples/simple-http-server.php)
&gt; Against it, tooling is yet immature and hard to set up. can you detail a little bit? what Go tooling do you deem immature and hard to set up? to start coding in go, all you have to do is download a zip file not matter what platform you are using.
\&gt; **What could Go do for me that PHP can't** Concurrency. We can use mutli curl but thats only for api requests \&gt; **and vice versa?** No exception handling One single uncaught error and the whole program goes down for all users. In case of php, a single uncaught error/exception will affect only that single user who encounters it while all the other requests will still continue to run fine. &amp;#x200B;
*Spoiler: I'm author of Rector.* If it uses any stadardized framework (no matter how old), you're lucky. You can use Rector - https://github.com/rectorphp/rector - that changes code in fraction of what manual work would take. Personally I'd go with Symfony, as it has great ecosystem and I know I the best. But pick what you feel that suits you and your team I can help you with setting up Rector for to-Symfony transition.
Is /r/PHP like a listing sub for unrequested blog posts?
New PHP features in Netbeans 10: https://cwiki.apache.org/confluence/display/NETBEANS/Feature%3A+PHP
Great, thanks for the answer. I’ll give it a try and post more insights if necessary. 
Well, the idea is usable for blurring images I guess
The difference is that this is an interactive PHP shell. Meaning it's a shell that executes PHP code - not a system shell. For accessing system level non-php functions this does nothing to simplify.
What do you mean by "configuration when you include new classes, no"? Well, I don't know how Yii works, but this principle doesn't depend on any framework. It's plain PHP. Basically implement this: "collect all services of type A and add them to type B". That way collecting is handled by DI container and you don't have to do anything extra manually. 
Netbeans 9
I’ve tried to use both Eclipse and NetBeans as a replacement for IDEA or PhpStorm. The main problem is their understanding of Symfony, or rather the lack thereof. IntelliJ’s IDEs immediately understand my codebase to an extremely intimate and detailed degree. It is amazing, fascinating, and incredibly useful. Neither Eclipse nor NetBeans come close, and, unfortunately, this makes them comparatively unusable for me. I still try new versions of NetBeans and Eclipse when they come out, or rather when their Symfony support is updated, hoping they’ll catch up to IntelliJ. One day, hopefully!
Your API is not .... eloquent? :D Idk it could just be me but I'm really not into method chaining. You have 3 GETs until you reach the shit that you actually need and then you have some true/false params that probably enable/disable stuff and I have to open your documentation and see what every flag is doing. Well, honestly, I rather set up a cronjob for w/e I'd need a system shell in PHP. 
You are right and in-line with /u/d47 point, I for some reason expect others to dig deeper than i would myself. I have to break up the project, isolate each component and put example code as the very first item on the readme.
Psh, my codez are way fewwer than yours
Bollywood people see it like a golden opportunity to get some ad revenue.
I am more or less in your situation, our web app ( MailWizz ) is maybe the biggest app ever built with Yii 1.x. We plan to rewrite it in a few steps but for Yii 3 which is in the works now. Migration should not be that complicated if you plan for it, it's just it takes time and it's up to you to decide if you're willing to invest the time or not. You already know Yii and given the size of your app, i assume you know if well, so don't switch frameworks, just rewrite, but rewrite when it's really not possible to use Yii 1.x anymore. 
Neat, maybe make it more prominent with a comparison where a PHP script is "the terminal" where Bash is being used. E.g. # in terminal $ hello_world.sh &gt; myfile.txt $ cat myfile.txt # in PHP $shellObj-&gt;exeCmd('hello_world.sh &gt; myfile.txt'); $out = $shellObj-&gt;exeCmd('cat myfile.txt'); Is feature parity 100%? E.g. can it be used to run SSH remote commands _interactively_ for instance? $shellObj-&gt;exeCmd('ssh foo@bar'); // following is done in remote server $remote_out = $shellObj-&gt;exeCmd('ps aux'); // drop conn $shellObj-&gt;exeCmd('exit');
I'll them one and test it out just for old time sake, I was a Netbeans addict years ago. However, the track record of not supporting the latest of PHP features and the lack of meta type-hinting such as phpstorms `.phpstorm.meta.php` and string injection makes it a big problem for me. PHPStorm had a bug for at least 6 months that broke this feature and I was constantly looking for other alternatives. I'm also a bit hesitant of choosing Netbeans again due to the fact that new PHP versions take months if not ages to support. With PHP 7.4 in sight it's going to be interesting how quickly Netbeans will catch up, to show if they are serious about supporting PHP.
There is a red thread in most of the comments: "dont talk to me, show me an example". I think your idea is good, to make it explicit have a side by side terminal vs Lib. &amp;#x200B; On your question about parity, yes anything you can do in BASH you can do in the lib. For [SSH](https://github.com/merlinthemagic/MTS/blob/master/SHELL_README.md#remote-shells-linux-only), i already built that. In the spirit of illustrating immediately with an example :): &amp;#x200B; Connect using SSH: `$shellObj = \MTS\Factories::getDevices()-&gt;getRemoteHost('ip_address1')-&gt;setConnectionDetail('username1', 'password1')-&gt;getShell();` &amp;#x200B; Then if you want to keep going, you can bounce from server to server. Use the shell from the first server to login to a second server: `\MTS\Factories::getDevices()-&gt;getRemoteHost('ip_address2')-&gt;setConnectionDetail('username2', 'password2')-&gt;getShell($shellObj);`
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [merlinthemagic/MTS/.../**SHELL_README.md#remote-shells-linux-only** (master → c52288d)](https://github.com/merlinthemagic/MTS/blob/c52288df62ed0496cf6510a39fd8cacebf794694/SHELL_README.md#remote-shells-linux-only) ---- 
I think I would love to see native PHP websocket support or socket support. I've seen Ratchet but to me it seems like a bit hackish, but again would love to see official implementation!
Recent delay was caused by the whole Apache thing, but they prepared support for 7.3 which is not out yet. It's looking good so far.
We have customers that use our app that demand security audits, and the auditor will for sure mark outdated frameworks as bad. And upwardscompatibility with PHP will sometime stop aswell. So I think the sooner we start (as we are in very active development of further features) the better, so we don't have to rewrite more and more modules as time passes. Thanks for the input :-)
This is an excellent answer.
NetBeans 9 does not support PHP (at least not now) - this is due to change of ownership to Apache foundation and releasing code from Oracle in parts.
Thank you!
Not just examples, but examples that solve real problems. Running `whoami` and or `ping` isn't going to help anyone. I run Windows 10 but I have Ubuntu installed through the Microsoft Store, so I do have bash and I run those commands on my own. With my SSH i connect to any of my company's servers with like 5 taps. You need to offer more. 
I think you can also talk to the developers, maybe they can extend the framework EOL to give you more time.
It doesn't give me the warm and fuzzies that support for a major language was omitted from a major release (9). Yay, it's back in 10 but I this doesn't give me a lot of faith in it being maintained or kept in pace with development in future releases.
Hi, this is my solution, done in PHP. You can pass 4 arguments : integers for the start and end values, a string for the original direction (up, down, left or right) and a boolean if it's a clockwise rotation or not. [https://github.com/Modjow/spiral/blob/master/Spiral.php](https://github.com/Modjow/spiral/blob/master/Spiral.php)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Modjow/spiral/.../**Spiral.php** (master → f9a1e46)](https://github.com/Modjow/spiral/blob/f9a1e46c542ade933af30deb2b45a43d768711a1/Spiral.php) ---- 
Totally! I'm doing more and more Go. I actually used go to handle LDAP as it had much better libraries and the speed we wanted. We also built an authentication gateway to our PHP API. So it worked out really well. We're finding more and more reasonse to use it, but PHP7 has really helped us improve speed without re-writing. They can work well together. 
(export FOO=bar; php -a) Interactive shell php &gt; print($\_SERVER\['FOO'\]); bar &amp;#x200B; Why would you need a "PHP shell"? \`bash\` can run your php files, just as you run perl or python or go files. What is your use case that makes bash or zsh or csh unusable?
At a glance, I'm not sure what this is doing that can't be achieved with [symfony/process](https://symfony.com/doc/current/components/process.html). &amp;#x200B; But if I'm being honest, I stopped paying close attention after "I hope this project will become the standard way to interact with the shell in PHP when the job requires root." &amp;#x200B; You also lost me a bit in your installation instructions at "mandatory: python." &amp;#x200B; I'm having trouble imagining the use case. Seems like a solution to an [XY Problem](http://xyproblem.info/). A thousand people on stackoverflow asking for a thing is not necessarily a good reason to build that thing.
Apache? Doesn't Oracle make Netbeans? 
No more
It'd probably be more lines of code if it did.
/r/TitleGore
I think you misunderstand, the Lib does not make any particular shell unusable. It gives you access to an instance of said shell. But more to the point regarding use cases, any number of tasks involve access to resources outside of PHP and some require elevating privileges or changing user. For example if you need to interact with a shell specific application or bind a service to a port &lt; 1024. What about changing and reloading system services (firewalld, ssh, whatever). Maybe you have a php script that requires root privilege to execute, but for good reason you do not want apache running as root and a cronjob does not fit the task, because of timing/whatever. This lib lets you run your web-server as the unprivileged user it was meant to (www-data, apache) and when your program requires it you instantiate a shell with root privileges and interact with the application you need to. Then you can trigger only that part of your script as root and the rest lives in a non privileged world. Even something as simple as the ping command requires root privilege on some systems. Another example would be some bash shell script that runs on your system. Normally you would trigger it from a cronjob. That means handling all interactions, including exception handling, in BASH. However using this Lib you could instantiate a shell and trigger each of the individual commands from the shell script and handle exception logic in PHP. I am interested in where you got the idea that a php interactive shell was the same as this project, where in the documentation did i mess up and mislead you? I am genuinely interested as i am sure you are not the only one who thought this. &amp;#x200B; &amp;#x200B; &amp;#x200B; 
[https://imgflip.com/i/2jamck](https://imgflip.com/i/2jamck)
Which is why LOC is usually an awful metric unless you’re playing code golf. 
&gt; What about changing and reloading system services (firewalld, ssh, whatever). In what use case would a PHP script need to reload the firewall? In what use case would you need PHP to have root access? If PHP has root access, what is to prevent any regular user from using PHP to gain root access? What keeps me from using the latest unpatched wordpress security advisory on your server and installing such a script that allows me to update the sshd on *your* machine to allow root to login without a password so I can steal all your data or repurpose your entire server? &gt; Another example would be some bash shell script that runs on your system. Normally you would trigger it from a cronjob. That means handling all interactions, including exception handling, in BASH. You can write shell scripts in PHP and execute them from cron. Furthermore, if I need to run a bash script from PHP, use `exec()` so you don't gain elevated access. Any elevated access should be specifically whitelisted in `/etc/sudoers.d/` We're not running Windows XP anymore.
We seem to have strayed, whether or not any particular use is a good or bad idea is a bit outside the scope of my question. However i am still interested in how i gave you the wrong idea (php -a vs lib) or was it simply an assumption you made?
When you say "shell" for a scripting language, you (except specifically you in this case) speak of the interactive shell for the language. Python shell? Interactive python. MySQL shell? Interactive MySQL. Perl shell? Interactive perl. PHP Shell? Interactive PHP. Ruby Shell? Interactive Ruby. Even BASH shell is interactive bash. It seems you're trying to put a bash shell around `exec` and should be called something other than a "shell." I still don't know what use case you would need this for, though.
I can't speak for others, but I don't really like it. For many reasons: * first of all, there's not many functional based frameworks, even less stream based, so it doesn't really fit as of today, * going in this way means that you have to fully rewrite all you software to work with the very same pattern, else beware of side effects, that's a terrible price to pay on existing applications, * it's not easy to grasps, RxJs is very well documented, and even with that, you have to really twist your neurons to make it work with your brain, especially when you're a senior like me, and used to more procedural paradigms, * not all Rx* implementations worth the same, I looked at its code, and last time I checkout I though it was terrible, so many indirection layers, but I guess that's personal taste, * for the reason stated just above, I didn't benchmark though, but I think it's slow, * and last, not the least, I think that not all applications will go smoothly using this paradigm, classical functional programming or just procedural or imperative programming are fine for lot of usages, * changing the world is slow. 
I'm just trying to provide an explanation - in no way am I cosigning that shit.
PHP has very poor (verbose) syntax for the style of programming that RxPHP enables. Things that PHP is missing: - Some way to treat callables and runtime defined callables the same way, that isn't clunky. - Implicit return values. - Better lambda syntax. - Better support for object closures It's very rare that I write in a functional style in php. Even simple things like maps are more complicated than they need to be in PHP. Doing things imperatively is the most obvious way.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
**This free HazratSultanBahu Referrers Script provides two options. On the one hand you can analyze who send traffic and refer visitors to your website including how many times and on the other hand you can use it as link exchanger to display and track link exchange. You can display links in html, php and all other formats and extension web pages.** Script Page: [**https://hazratsultanbahu.com/scripts/#referrers-tracker-and-link-exchanger**](https://hazratsultanbahu.com/scripts/#referrers-tracker-and-link-exchanger) **Demo:** [**https://www.hazratsultanbahu.com/referrers/index.php**](https://www.hazratsultanbahu.com/referrers/index.php) Download: [https://hazratsultanbahu.com/scripts/referrers.zip](https://hazratsultanbahu.com/scripts/referrers.zip)
I cant seem to find what laravel offers to me in go, python, or any other shitty js framework. (Adonisjs was the closest tbh)
&gt;The best method would be to fread a reasonable chunk from the end of the file and then find the last line in it. This what tail do, it uses an heuristic to convert the number of lines to a byte count, say N, and then read the last N bytes (by seeking to start + size - N). If the buffer does not contain enough lines it iterates backward with 8KB buffer (as seen on my tail implementation via strace).
Thx dude reddit is amazing... i proud to take part in such a helpful community
Captain here - this is our latest contribution to make the PHP development little bit more easy and intuitive. We're thrilled for your feedback. Please any downvoters, tell us your critique or suggestions. We have been watching how many great PHP editors got outdated and died; so we've worked hard for months and made it properly with guaranteed maintenance and support.
What is the problem of their understanding of Symfony? To my understanding Netbeans 8.2 already supports Symfony as a framework, unless I am missing something. 
Is there a difference between the following versions: &gt; PHP 7.2.10-1+ubuntu16.04.1+deb.sury.org+1 (cli) (built: Oct 1 2018 11:45:50) ( NTS ) And: &gt; PHP 7.2.10-0ubuntu0.18.04.1 (cli) (built: Sep 13 2018 13:45:02) ( NTS ) The first one is based off a local build that was originally on Ubuntu 16.04. I upgraded the machine to 18.04 using the upgrade option available. The second is based off a remote build that I built from scratch using ubuntu 18.04. Do I need to do something for the 16.04 one to change? Or is the ubuntu version display unimportant? Thanks all
Unless you added the 8.2 plugin repository and installed it, which works great actually.
The LoC part was just a half joke :) What I was really trying to say was that's it's minimalistic, ie. anyone can read the code in a couple of minutes, yet compared to its size it has interesting features.
Good question. Didn't need it really. It's used internally for a couple of projects I'm working on.
Apache didn't include PHP in Netbeans 9 because they wanted to focus on improving the core and Java parts. The language support for PHP and other things comes as plugins. I simply downloaded the PHP plugins from the 8.2 repository and used those in 9.
Oracle dumped it like they did OpenOfficr.
Fair enough. Did you try [https://pimple.symfony.com/](https://pimple.symfony.com/)?
Cron Jobs: Is there any way to create a PHP web interface to manage the cronjobs file? I'm not looking for an existing service. I'm wondering if I can code a webpage that manages the entries in it. Thanks
The company I work at runs a multitude of small and large web applications all written in Yii. Over the last two years we have slowly been moving everything over to Yii2. &amp;#x200B; We where able to maintain and add new features to our applications while migrating a component or webapp to Yii2 at a time. It can be a bit of a pain, a few features we had implement in both Yii and Yii2 due to some of the web applications being already converted. So far it has been an extremely successful upgrade and not as difficult as I would have expected. There are a few oddities that caused some small bugs like function params being in different order in the Yii2 version but nothing major. Plus Yii2 is a much better framework, your team will be a lot more productive using a modern framework. 
Why bother when there is [PhpStorm](https://www.jetbrains.com/phpstorm/)?
Yap, used it in the past. Nothing against it, it works fine. I just wanted to write my own. Some features mine has that Pimple doesn't: \- cycle detection: Pimple will just blow your call stack if there's a cycle in your dependency graph \- parametrised resolvers: meaning the container can't support dynamic loading
I think “light-weight” doesn’t matter as soon as anyone has installed Slack on the same machine. 
It costs 
What makes you think that maintainers will delete https://github.com/yiisoft/yii when EOL is reached?
Out of curiosity, how do you determine whether it has been a *successful upgrade*?
I used to love using netbeans many, many years ago. It was the best free editor by far. Lots has changed since then
What I like about PDO: Named parameters. What I don't like It's a bit slow and It's not completely "OO", PDO doesn't understand the concept of "manytoone", "onetoone" and such (EntityFramework/C# and JPA/Java understand it), so the user still does the heavy lifting. PDO is OO for small projects (list a single table), but it's not for a relational query. &amp;#x200B;
I created a library on top of mysqli. Here I put an example of it [https://medium.com/cook-php/php-and-mysql-playing-with-the-database-c3b2a3eebf6c](https://medium.com/cook-php/php-and-mysql-playing-with-the-database-c3b2a3eebf6c) It's quite the same (after all, the library is based on mysqli) but it's short, for example the code ``` function getUserData($db, $id) { $stmt = $db-&gt;prepare("SELECT * FROM user WHERE id=?"); $stmt-&gt;bind_param("s", $id); $stmt-&gt;execute(); return $stmt-&gt;get_result()-&gt;fetch_assoc(); } ``` is resumed as ``` $db-&gt;select("*")-&gt;from("user")-&gt;where('id'=&gt;$id)-&gt;toList(); ``` or as ``` $db-&gt;runRawQuery("SELECT * FROM user WHERE id=?",['id'=&gt;$id],true); ``` Since it's a small library then it could be expanded and modified. In any case, passing the database as parameter, while it's valid, it's an old way to work. 
I like templates that use tags-XML (such as JSF), but it's against the "concept" of Blade. 
I agree. A barebone code of Laravel consists of over +300 files. It is the definition of insanity. Anyways, it always depends on the type of project.
The opposite to **monolith framework** is not agile-fast-micro-or-some-buzzterm framework but **fragmented framework** :-P 
So.... Reddit app doesn't allow me to click or copy this.. 
We use rundeck
&gt; It costs and I have personally noticed it’s laggy compared to VsCode at times Yeah.... because one is a text editor and the other is a full-blown IDE.
One of our larger apps was completely converted over to Yii2 about two months ago. With the upgrade, we have a nicer framework to work with. Also new features on version upgrades. Example 2.0.14 introduced a caching shortcut function that has been really great. I don't have any solid metrics just the dev team has really liked Yii2 over Yii. 
It's precisely this attitude that leads to application bloat as seen in Slack and IntelliJ. Electron is an interesting tech (and does well what it aims to do). Same for IntelliJ. They both seem to share a disregard for performance, though...
Id say the use() statement in PHP anonymous function makes it very annoying to use sometimes, at least for me it always gets in my way. 
PDO is a database API, not an ORM. You cannot dislike an apple for not being a cider. You can use an apple to make a cider. You can use PDO to make an ORM (Propel, Doctrine, Eloquent, whatever)
&gt; I'm still going to use PHP for PHP projects That's probably better than using Visual Basic for PHP projects ;)
I am satisfied with [php-debug](https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug), [intelephense](https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client) and [phpcs](https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs). And I don't have to purchase a license for using them.
You managed to confuse everything :) - global is not an OOP heresy, it's a global heresy - what you called injection is a singleton - a real injection is **passing the database as a parameter** - a function is not different from a singleton For a simple code your approach is OK, but for the complex OOP code the best way is to pass as a constructor parameter. 
Wow, a [eval](https://github.com/EFTEC/DaoOne/blob/master/lib/DaoOne.php#L716)! Do you realize this is a security breach mucj worse than SQL injection?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [EFTEC/DaoOne/.../**DaoOne.php#L716** (master → 60a10ec)](https://github.com/EFTEC/DaoOne/blob/60a10ecbd34d1a02399e70f80caa19ce132a156a/lib/DaoOne.php#L716) ---- 
I used to use CI all the time years ago. Its popularity seems to have died down. Maybe this'll spark it back up? Just wondering, why would this honeypot class need to be part of a framework? https://bcit-ci.github.io/CodeIgniter4/libraries/honeypot.html?highlight=honeypot &gt; The Honeypot Class makes it possible to determine when a Bot makes a request to a CodeIgniter4 application, If it’s enabled in Application\Config\Filters.php file. This is done by attaching form fields to any form, and this form field is hidden from human but accessible to Bot. When data is entered into the field it’s assumed the request is coming from a Bot, then an execption is thrown. 
If you have a form and you don't want spammers (robots) to auto-complete and submit your form than you use Honeypot. You should think about the comments section, take Wordpress for example. &amp;#x200B; So.. it's still not useful? Laravel has something similar. Symfony too.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I wonder why BCIT took over the CodeIgniter project if they were just going to raze it and start over...
How long did it take them to upgrade? How many people were involved in the upgrade process?
If you are referring to [Software disenchantment](http://tonsky.me/blog/disenchantment/) by [Nikita Prokopov](https://github.com/tonsky), I have read it and agree with the article. That is, I’m neither arguing that bloat in software is good, nor encouraging it, but I believe that the effects of that bloat depend on the context. When I’m in a context where I don’t have access to electricity for hours in a day, or work on hardware that is outdated, then maybe lightweight matters. When I’m in a context where I run a lot of applications that consume a lot of resources at the same time - e.g. Slack, Docker, browsers (I hear some people have tens or hundreds of tabs open at the same time) - how much does it matter to use a lightweight IDE that is soft on resources? Also in that context, how does using that lightweight IDE make *me* perform better, when it is perhaps subpar in features to the default solution? I’m not questioning the work that went into this product, just questioning the argumentation. 
I know codeigniter isn't the most popular or modern framework.. But I still use it. Last time I checked it performed much faster then other frameworks. Curious about ci4. 
Looks very Laravel-esque now.
Catching and re-throwing the same exception with skipping the context is such a bad idea. If you want to teach people do things properly, please start from yourself... 
Lol if you think vscode is a text editor 
Check for an additional source somewhere here /etc/apt/source*. Remove it. Apt update and install. 
I agree, but it also saves you from dumb errors, that you may stumble upon very easily in javascript, like hiding variables in scope with new ones without noticing, stuff like this. It makes the context explicit.
This is usual combination, and for free it is good enough. We have a few notes tho - [intelephense](https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client) has not been updated for more than 8 months and half of its features already does not work. Also the IntelliSense could be faster (what we are used to from grown up Visual Studio). - [php-debug](https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug) just works weird, there is no builtin server, using watch usually terminates my debug session, watch tooltips don't work, projects UNC paths don't work, cannot debug phpunit tests, etc. Anyway I understand it is fair enough for free.
I've used Code igniter 4 for a few projects, it's MUCH better than CI3. It feels like in the middle between Laravel and Symfony.
The name?
Not.
VSCode is really presented as a code editor from its beginnings, personally I think it starts to look like a full IDE already.
Even full-blown IDE can be fast (see Visual Studio and C# or even [PHP](https://marketplace.visualstudio.com/items?itemName=DEVSENSE.PHPToolsforVisualStudio2017) again)
I'll certainly look at it. I still use CI from time to time where I want a very lightweight and fast framework. Most new development I do is on Laravel, but a modernised CI that plays to its traditional strengths definitely would have a place. 
It will continue to work. &amp;#x200B; A deprecated notice is a nice way of saying that something should no longer be implemented into new code and should be refactored out in existing code. &amp;#x200B; mysql\_ was deprecated in 5.5 and removed in 7 so as long as you are not bumping to php 7 you will be fine. &amp;#x200B; However.... you really should avoid using mysql\_ and opt for mysqli\_.
This is about... what. 4 years late?
The name shouldn't matter to them. They used it as a teaching tool in their curriculum. They could've built anything.
Have you checked out the symfony 4 performance? Fast would be an understatement.
I'd stay on 5.2 while refactoring the code to work on 7.2 or 7.3 by now.
So where's the code? I guess this is a good time to learn about code smell as it seemingly managed to permeate into your frontend.
It doesn't matter. It's a (re)start. A good one. &amp;#x200B; And you exagerate with the "4 years late" because PHP version 7.1 or higher is required in order to use CI4. PHP 7.1 was released in December 2016, less than 2 years ago.
It never permeated haha. The Code is deeply embedded into the System as the Interface is based on Boilerplate and the MVC is designed after every Controllers made to interact just like the other Systems, afaik. I never use Frameworks made by other peeps, So I stick with my own, As is. The System has prebuilt extensions based on Zend to protect the Code from getting Reverse Engineered by other PHP Developers. \^\^
i did NOT say 40k are my lines. i refer to the first post above. hahaha
Uhmm, I apologize. Hehe, The first one was the Starting Point of the Software Development, as for the other stuff, I'll post it elsewhere, Or market it perhaps; Sorry. Hehe. For the 3rd time, I wont. Let's just leave this post behind its predecessors. Haha
You don't need explicit typing on local variables when your compiler is able to do real type inference and detect errors for you. PHP does none of the two which is terrible.
Sadly is too complicated to participate to testing...
&gt; The Code is deeply embedded into the System Is this a fancy way to say PHP Spaghetti? &gt; I never use Frameworks made by other peeps https://en.m.wikipedia.org/wiki/Not_invented_here &gt; protect the Code from getting Reverse Engineered by other PHP Developers. ^^ The way you keep digging this hole here for yourself I'm afraid the only reason people would want to do that is to have an example on how not to do it. Your lack of willingness to actually show what you have done to professionals and instead resorting to technobabble says a lot about your approach to technology. 
**Not invented here** Not invented here (NIH) is a stance adopted by social, corporate, or institutional cultures that avoid using or buying already existing products, research, standards, or knowledge because of their external origins and costs, such as royalties. Research illustrates a strong bias against ideas from the outside.The reasons for not wanting to use the work of others are varied, but some can include a desire to support a local economy instead of paying royalties to a foreign license-holder, fear of patent infringement, lack of understanding of the foreign work, an unwillingness to acknowledge or value the work of others, jealousy, or forming part of a wider turf war. As a social phenomenon, this philosophy can manifest as an unwillingness to adopt an idea or product because it originates from another culture, a form of tribalism.The term is normally used in a pejorative sense. The opposite predisposition is sometimes called "proudly found elsewhere" (PFE) or "invented elsewhere". *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Its not superior; the Extensions however are off the charts basically because it is more on C Programming Extension based on Zend, Plus. Its not really something that I plainly use it with other Frameworks. Due to that, I didn't even try to explain it that it is more sufficient than the Frameworks (Generally not every Framework) only to some of which I've used before, because they are a market based or generally a company based Framework. What I wanna try to say, Is that the Programming built on this is more on C Language. I didn't try to be rude by the way. To be honest, I'm plainly planning to create a Network that is more on Unix or Monolithic like System so that it can interact with the Machine Language it is solely intended to do.. \^\^
This might help you - [https://github.com/dshafik/php7-mysql-shim](https://github.com/dshafik/php7-mysql-shim) &amp;#x200B; (It emulates the 'mysql\_' functions if they're not present). &amp;#x200B; You should however look to migrate to PDO or mysqli\_\* at some point.
Hmmm, Maybe. \^\^
Every person here can reverse engineer every Github repo. They're open source. 
1. https://i.imgur.com/DK1ckG8.png 2. It means you have to change to [PDO](https://phpdelusions.net/pdo)
It's a readily available userbase for them. No need to build it from the ground up. The name has to be the main drive.
This feels very much like a newish developer throwing around terms he does not understand.
No. 5.6 has bugs and security fixes. I encourage you to work with 5.6 supress the deprecated warnings until you can fixes and move to 7.2.
is it even high performant? the docs say: &gt; Some simple somewhat-efficient collection implementations for PHP.
"Deprecated" -&gt; still available, but developers reserve a right to remove it in the next release. "Removed" -&gt; unavailable (though, somebody may have pure PHP implementation for it, or it's still possible to active it with some flag)
now im gonna want property setters and getters :)
It is not going to be fine. Adding that silly i is not enough. Least it was the intention of PHP devs to make poor users write another silly letter when calling the most used function in the code. The reason is security, which will take the whole different approach to running queries. &gt; I haven't used mysqli in particular in a long while Why you're in with your comments then?
&gt; 5.6 has bugs and security fixes. For the whooping 2 months left. Will be EOL right by the time the guy finished with the refactoring. A very good time investment, if you ask me. 
You meant, Reinventing the Wheel, right? :)
Fully qualified namespace?
Because it's useless crap, functional reactive programming is shit, period, especially in imperative languages.
Is there a single word for this? I would like to use this in a variable. I now use $className, but I feel like "Invoice" is the class name.
FQCN - Fully Qualified Class Name
I would like to use this in a variable. I now use $className, but I feel like "Invoice" is the class name.
&gt; I agree, but it also saves you from dumb errors, that you may stumble upon very easily in javascript, like hiding variables in scope with new ones without noticing, stuff like this. It makes the context explicit. That's why you use a linter. I bet you don't write PHP code in notepad either.
&gt; Why you're in with your comments then? Because I've used php for over a decade and kind of have a sense of how things *might* work out in a certain context. Here, he asks a rather simple question, given an outdated version of php and how even php7 is backwards compatible with php5 in about 90% of the cases, *the feeling* I have is that simply changing mysql to mysqli will not have a substantial impact on the problem OP is facing. Downvote me if you disagree, but fuck off with that "why are you even talking" mentality.
I suspect that the immutability requirement has claimed another victim. A real shame.
Tnx, that's it :)
`Application\Models\Invoice` is the class name. Just the `Invoice` part is [sometimes called](http://php.net/manual/en/reflectionclass.getshortname.php) the short (class) name. Unless you are working on a code generator, the leading backslash has nothing lost in the class name. (If you do work on code generation, then this is the fully qualified class name, as has already been mentioned by other commenters.)
&gt;FQCN Oooo. Gotta rename some variables now :\^)
Let me give you a life pro tip. Beside talking you may also *listen*. To what a more knowledgeable person would say.
Because VSCode is free, PhpStorm isn't. Does jetbrains pays you each time you link to their product? if not, they should /s
Still doesn't use PSR-7/15/17. Still rolls it's own database and migrations. Doesn't look like there is an upgrade path from previous versions that doesn't involve a lot of rewriting. Why would someone choose this over Laravel, Symfony, or ZF?
I am almost certain that you can already so this with laravel passport - although in addition to the user credentials you would have to send a client id and client secret (unique to the application hitting the api). See https://laravel.com/docs/5.7/passport#password-grant-tokens - Password grant tokens
For the larger application that was the most recently upgraded, it took about 4 week with 5 people working on it full time to convert the entire application. Other apps and components we have been able to have a single person make it their full time task to upgrade and that also normally takes a few weeks. One of the nice things about the upgrade is with a little bit or work you can get Yii2 to work with Yii1. Before our large application was upgraded it was using a few classes and components that we had already upgraded. I had to build in a small amount of logic to deal with the differences in Yii and Yii2 such as "Yii::log" is now " Yii::error" etc.
My god this is arrogant as fuck. Also, (LPT) next time you try to come back at someone with your bullshit, maybe don't put a period in the middle of a sentence. Makes you look less. Smarter.
I doubt they were planning to raze it when they initially took over. Still, it seems like it's still based on the same philosophy, and much of the code has likely been re-used in the new setup.
&gt;We should always be open minded, learning and growing our experiences to better plan for the future. That's a great way to think!
You're right. So, depending on how OP's code is structured it may be easier to change to an OO approach rather than create a global `$link` everywhere. Either way, MySQL extension is not removed in php5.6, so OP should be fine without any changes.
Sure, they can be fast. But the point is that you can't compare speeds between IDEs and text editors because it isn't a fair comparison. That would be like comparing speeds between a truck and a backhoe. VSCode isn't an IDE. There's plenty that you can do to give it most of the capabilities of an IDE, but by it's nature, it is not an *Integrated* Development Environment. Visual Studio is pretty good, but it's a whole suite of tools that are optimized for C# and ASP.NET development (along with a few other Microsoft-specific languages and frameworks). I'm not sure how this might affect the speed comparison metric, because Visual Studio might not necessarily *need* all of the extra addons that come with PHPStorm by default. If you compare PHPStorm's capabilities and performance to other popular IDEs like Eclipse, Netbeans, Aptana Studio, etc. then we would have a fair comparison between programs with similar purposes and expectations.
are the developers still arrogant abusive idiots who abuse anyone who points out errors in the code?
Ha, thank you! But no, I’m not getting paid - I’m just a satisfied customer. 😉
`Invoice::class` would get handy here
You want us to watch a video posted by someone who can't even link properly on reddit?
Thank you for sharing your expertise on the matter discussed here. Your contribution is much appreciated. 
bitbucket pipelines
That's a bit disingenous, 99% of the features would run fine without 7.1 It's pretty obvious it took years to release the 4th version when the architecture of web frameworks in PHP land had moved on.
I fell for this honeypot post! IIRC, CI was the first actual framework I used. I’d like to see it survive for nostalgic reasons. 
Deployer is interesting as well
I'm not sure if you know how to use Reddit, but every comment doesn't have to be the topic of the post. Thank you for sharing your arrogance regarding the question discussed here. Your contribution is much appreciated.
most websites require JavaScript to be enabled. Which makes your strategy ineffective in most of the cases. To circumvent that, you can have a look at headless browsers like panther for example https://github.com/symfony/panther or others that use selenium driver to programmatically emulate browsers
I’ve personally been using GitLabs CI runners and at work Im always seem to be using Jenkins.
TravisCI + Saucelabs
Go feed yourself elsewhere.
Jenkins is a self-hosted solution correct? I think that's likely what I am looking for, at least for now.
Yeah you can install it on your own server
I've tried everything I could think of to implement something faster, in the end it wasn't worth the time. 
The description used to be "Simple high-performance collections for PHP" which was what I was aiming for, but I toned it toned in the readme later when I realized that that was unattainable in pure PHP.
Well you are saying that the IDE is slower because it is packed with features. So I'm guessing it is OK to wait for a key press because after all it has so many features.
Your mom is busy.
More than likely it's a labour of love that happens to be open source.
You can use gitlab self hosted. Possibly with a cost attached though
He can find a place to fit easily and no one wants to step on his toes.
Actually _most_ websites have all the data you want to scrape present in the raw html and you don't have to do anything with the JavaScript. But sometimes the data you want is present in the js code but wrapped in an IIFE which means actually running the js won't give you access to the data so it is better to read the js code into a string and use regular expressions to grab what you need.
I think having top-notch security (like the one you can have in a popular framework that was abused by tens of thousands of users for many years) and anonymity/obscurity exclude each other almost by definition. Frankly, I'd like to have the first because anonymity can be ruined by a single person that ever had access to the code. I think the exceptions are governments that can partially enforce anonymity (as long as you ignore whistle-blowers :-) ).
Thank you guys Your response is overwhelming and quite constructive, reddit community is really awesome, Had I posted this on SO , the downvote nazis wouod have killed the question for being lame. I am very obliged , thank yiu again guys. I will take a look into these suggestions and get back to you.
i been using bitbucket pipelines lately, and it's pretty nice. 
Travis.
I agree, just pointing out the previous comment, that PHPStorm is sometimes laggy. With no comparison, it just is laggy which makes the development frustrating sometimes. So exactly as you've note - if a developer prefers a lightweight small editor that is not laggy and does not have tons of features, now he can pick the VSCode.
Thanks for your valuable comment.
Jenkins + SonarQube 
Fair enough. I'm not sure what "laggy" is referring to in any of the criticisms I usually see (and believe me, I have my own fair share of criticisms against PHPStorm), so I take it to possibly mean startup time? It's only when it needs to index the project when it truly starts to crawl for me. Outside of that, I've never personally had an issue with lag after it loads.
What do you more frequently now?
Of course, but even the greatest IDE cannot prevent all possible errors. Sometime squashing or hiding a variable can be a legitimate thing to do.
slim, laravel, symfony
Circle. I’d really like to move to something else though, the setup is awful and they’ve been very unreliable recently. I just don’t have the time nor interest to fiddle around with other options right now. 
FuelPHP is basically a simpler and more mature version of CI, imo.
PSR is overrated.
Thanks, There are a few developers that I manage on this project though I'm the primary contributor. It's closed source PHP, and I have to juggle a sandbox, dev, and production branch and the occasional feature branch that needs special attention. I think I'd outgrow a free tier of just about anything pretty fast. And it seems like the free tier of most SAAS CI options are open source-only.
It is a PHP project. I should have said as much. I do not like that /r/php doesn't let me write a body to text submissions :(
Yes, sometimes you need a headless browser. This is frequently as easy as installing Chrome and then exec'ing chrome --headless --disable-gpu --dump-dom [www.somethingorother.com](https://www.somethingorother.com) and redirecting output to a file. However, before you start messing with headless browsers, use a conventional browser's dev tools mode to look through the web page you're trying to scrape. You might be lucky and find a direct URL which returns the data you need and which doesn't need javascript. BTDT, a couple of weeks ago. Saved me weeks of work. But don't assume that regex or simple html dom will let you scrape absolutely any website. It won't. Not any more. &amp;#x200B;
Did not get your point 0=
I made the switch to buddy.works and I’m loving it 
Thanks, will do
Perhaps it's time to consider paying for a service that would clearly benefit you.
I do not disagree. But the previous comment implied that you always need to use a headless browser. This is not the case. there are still a massive number of websites and a massive number of industries that have not gotten on the API and front-end framework bandwagon yet.
Absolutely agree. Unfortunately, on this project, its not my decision. However I am going to try to sell that based on the fact that CI means their product will inevitably be better, and they'll pay less in labor for manual deployments.
How do you use async PHP in an event loop with a sync stdlib? Becuase of how PHP work it would require a new async stdlib, making it unfit for the usecase node was built for. In node everything is async so you can use the normal stdlib just as you would in a browser context. PHP is ill suited for anything real time, like sockets etc. The model is not really compatible at all, each request starts up a new process and kills it of as soon as its finished, this way worked back in the early 2000s but is not a nice model for apps today. Python, go and many other languages does not have this limitation.
 By that logic 99.9% of all sites runs JavaScript.
is it worth it to pay for Travis? like is it easier to use? or does it have more features? or is Jenkins just as good?
A ticket system, the user submits a ticket, then you can respond to the ticket with different statuses that lets the user know if it was resolved, in-progress, etc w/ a notification dashboard for both the user who submitted the ticket and the user who was assigned that ticket. &amp;#x200B; That would involve a few tables: users, tickets, ticket\_users &amp;#x200B; Make it simple at first to learn the basics, then maybe add user authentication. &amp;#x200B; [Scotch.io](https://Scotch.io) has a lot of php app building tutorials, you could check those out and maybe come up w/ project idea and there might be code there that will help you. Good luck!
Will definetly check it out, thanks!
Please use /r/phphelp instead. Have a look at https://phptherightway.com/ if you need help getting started with PHP. If you require a mentor for more in-depth feedback and support, have a look at https://php-mentoring.org/ /r/PHP is not a support Reddit, so you should not expect hand holding from here. Try to find someone to help define goals and test what is realistic in 100 hours as student. If you don't want to dive head first in using frameworks, I suggest not to work on an application that has users or any form of authentication, because you can sink in all of the 100 hours setting up user management and authentication, if you're just starting out. Try to focus on something that gives you the opportunity to focus your efforts on domain logic. You mention being familiar with markup and styling, so how about using PHP as a way to expose server information and HTML and CSS as way to visually present that in a pleasing way. E.g. a speedometer for your CPU usage, some nice graphs to show how much space is left per disk partition. The top five most resource consuming system processes. These are my 5 cents. Go out into the wild and make a huge return on that investment. 
Thanks for telling me this
Gitlab.com for the code, on-prem private runner for CI.
What made you think i'm thinking that? I meant simply support the framework for longer, sorry if that was not clear. 
&gt; Some of you might suggest increasing the time out, but you would be downvoted because the solution is wrong. Why is it wrong?
I do routinely create CSVs on a $5 app server with over 1000 items. In fact, looking at line 2245 of a fresh phpoffice/phpspreadsheet CSV now. 
I'm using clay and bamboo. It's working for me, after I properly configured my rig and profiled the process to see how I had to allocate resources around it.
I use TravisCI for open source, Gitlab free for private CI projects (2000 free build minutes a month is more than enough for me). At work we use self-hosted Gitlab on a DO droplet and CI runners on a dedicated server.
What is "Email Invition and "spacific resource"?
Jenkins is a piece of crap honestly. I've used Tracis-CI, Circle-CI, Jenkins and GitLab CI. GitLab wins IMO
Fuck standards right! Who enjoys consistent and familiar programming, not this guy!
I have system that has manage more than one resource for example document and this document related to some services...so. I need to invite users that have not registered in my system to share document and this users have limited access to this document , so how can I implemented this concept...?
Of course, it matters _how_ one points out errors in the code... `:=)` 
u/Mouadennaciri, could you add your own post to say what this is, and why you think it ought to be more popular? 
Just recently found PHPcensor - CI written in PHP easy to be selfhosted
Jenkins but i tried bitbuckets pipelines recently and was pretty impressed.
They should adopt a Code of Conduct /s
&gt; each request starts up a new process and kills it of as soon as its finished And this exactly is not true. PHP is used for many long-running applications (e.g. I use it for long-running data importers or e.g. IRC bots without problems) and when utilizing an event loop (which it can, through extensions and stream_select, asynchronously) it can drive your whole web-application alone. I agree it's not yet fully suited to do this from the language perspective, but the community tools are already there and developed very actively (Things like Amp, ReactPHP and e.g. Swoole, Guzzle does async requests etc.) So, PHP doesn't have this "limitation" either. It just lacks the native language support/constructs to easily utilize it, which will change in the coming years. 
Have you looked into scrutinizer?
Deployer is not automated right? Deployer pro has been in closed beta for a very long time...
because CI developers apparently haven't heard of Selenium
This really seems to be the concensus!
Looking back on my comment I'm not sure sure I had one
As someone who is not very familiar with CI, what tasks do you run using GitLabs CI?
Wait wat. Aren't you [that dude with that horrible broken hosting platform swiss cheese](https://www.reddit.com/r/PHP/comments/9io8dt/intisp_is_a_hosting_control_panel_that_is/e6m11f1/?context=2)? So yeeeeah no thanks. You can keep your spam for your broken service thank you very much. And stop making innocent victims. Thanks.
We use cpanel on these servers
So what is this verifying? https://host.delinz.com/index.php?m=licensing
Can you take a look at my reply to this post? In my PHP script, I have the $\_FILE set to file ($file\_name = $\_FILE\['file'\];). I seriously have been trying all day otherwise I would not have posted a question.
Files are stored in the $_FILE array. Normal inputs are stored in $_POST. In your PHP script add this where you are handling the CSV: var_dump($_FILE,$_POST). This will show you the contents in those variables when you post something.
You'll need both inputs to do this. One input type=file for the actual file, and another input type=text for the text you want the user to enter. The text input should look something like this: &lt;input type="text" name="filename"&gt; Replace "filename" with any name you wish. This is the key you will use to access the value when the form is posted. Then, in the script where you're doing the stuff with the file, you can get the value from that input by accessing $_POST['filename'], replacing "filename" with whatever name you chose for the input earlier.
I may have not understood your question but from this reply. &lt;?php $input = $_POST ['text']; ?&gt; .. &lt;input type='text' name='text'/&gt;
This is my PHP script below. Should I replace $file\_name = $\_FILES\['file'\]\['name'\]\[$x\]; with some\_array($\_FILE\['file'\], $\_POST)? $file\_dir = "/data\_uploaded/"; *if* (*isset*($\_POST\["submit"\])) { *for* ($x = 0; $x &lt; count($\_FILES\['file'\]\['name'\]); $x++) { $file\_name = $\_FILES\['file'\]\['name'\]\[$x\]; $file\_tmp = $\_FILES\['file'\]\['tmp\_name'\]\[$x\]; $file\_target = $file\_dir . DIRECTORY\_SEPARATOR . $file\_name; *if* (move\_uploaded\_file($file\_tmp, $file\_target)) { *echo* "{$file\_name} has been uploaded. &lt;br /&gt;"; } *else* { *echo* "Sorry, there was an error uploading {$file\_name}."; } } } &amp;#x200B;
Do yourself a favour. Where the form submits write echo "&lt;pre&gt;"; print_r( $_POST); print_r($_FILES); It should give you a much better understanding of what's going on with that sort of thing. 
This takes a user inputted text then, obviously with a little more code, it uploads it to the server? Provided the path is specified.
What? Did you do what I said about the var_dump? That should explain it. No offense but it seems like you don’t understand the code you have written in front of you. Have you tried reading the PHP manual?
Text input isn’t a file. You don’t look to have the text input in the php side of things at all. I’m not saying you’re in the wrong place, but I’ve always had way more luck on stackoverflow and posting your full code and the things you’ve tried will get you better answers. 
Fair enough. I do not understand PHP very much.
It doesnt upload anything. It POST's some text. You could use this and fopen/fwrite to save a file to a path. So user-text1.txt
Using Gitlab CI on gitlab.com and super happy with it
If PHP would support native async with an internal eventloop it would require a new stdlib. This is not really a goal as i have understood it. All the swoole, reactphp etc projects are a good concept but in practice they break down because of the nature of php. Now if this was actually implemented it would not be php anymore, php would kind of reimplement node with a php syntax.
we've been using it too, it's super easy, and the pipelines file is like writing in simple English 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Their model is nice, until you want to validate pull requests coming into the main line of development. You can't run tests against PRs, blows my mind. I get it, merge master back into the branch regularly and you won't have a problem, but... that shouldn't be how it works O_o At any rate, I love Pipelines and it works well for our organization as well. Being able to use any Docker image I want, or different images in multiple build steps, is priceless.
You create random string (token) and send it to email. When sending save this token somewhere (database or caching mechanism like memcache or redis) with some expiration time and info about what can be accessed eith this token. When somebody opens this link which has this token in query string you check in your system if there is such token. Id there is such token you grant access for this email for docs provided in this token. Token id can be something like chenrh47rhjdob4udnrj and value can be encoded as json string {doc1: read, doc2:readanderite,...}
At work we use Scrutinizer and Teamcity. Personally I like travis.
I really don't think you should see that as a bandwagon. For a good number of industries, it's a natural evolution of their ecosystem.
you can literally run anything because you can configure the CI to use your custom Docker images. So e.g. you can build your custom image in a first step and upload it to the Gitlab registry, execute your tests and Code formatting check in a second step and deploy the application to the corresponding environment in a last step.
Depends how much freedom you want. If you want to have to spend time regularly to manage the pipeline and do lots of custom stuff, use Jenkins on your own server. If you like to forget about CI and have a single file to configure everything, go with Travis.
Does sonarqube have good checks for PHP? It seam to be little more then PSR-2 and dead/duplicate code violations detector :(
GitLab
Jenkins and CircleCI
Thnx..this good 
&gt; You can just add new ones, like fread_async, socket_accept_async etc. Thats a really horrible solution, its probably the worst solution. PHP has done this for many years, and look were its now. The stdlib is full of weird ```real_functions``` etc. etc. Adding even more to the global scope would make PHP even more unusable. &gt; JavaScript doesn’t have any more async language features than async/await and promises and it works fine. You seem to misunderstand how javascript works. Javascript is by design an eventful language, almost every IO bound function is handled async. In the dom/node api there is very rarely anything that is sync. Most functions accept a callback that is called when something is complete. In PHP you wait synchronously on almost every IO function call. Async/await is just sugar in the syntax spec, you can easily have the same effect with traditional callbacks, or promises before async was a thing. &gt; Node with a PHP Syntax, wtf. Please, understand what Node is. Node is a bunch of C-extensions coupled to a VM (v8, Chakra) that interprets and runs. PHP is an interpreter and runtime in C that works with C-extensions. It’s pretty fast by nature. PHP doesn’t have the VM overhead and JavaScripts prototype model and ducktyping is harder to calculate. Thats just a bunch of crap. Im not event going to try to write anything constructive here 
In my company, we use self-hosted Gitlab and Jenkins. We use Gitlab CI to run test suites, and since we're not big fans of the Jenkins interface, we just curl Jenkins from separate deploy jobs in Gitlab CI.
Aws Codepipeline + Github +Teamcity (at ec2) + CodeDeploy Before that we've used codeship but decided to limit the number of services with access to our code. 
And how about this invites users grant them direct access to my system or redirect them to fallow normal registeration., and if this user have account in my system how to handel this issue invite.
&gt;Jenkins is a self-hosted solution correct? I think that's likely what I am looking for, at least for now. Gitlab is also self hosted and it provides you with a complete end-to-end solution it's not just CI it's your repo, project management, issue tracker, container storage and wiki page all of which tightly intergrate with each other. There is no other product that even comes close to it. It's also free and opensource for the core product. 
What did he say? He's deleted the comment and you never quoted him 
&gt; Thats a really horrible solution, its probably the worst solution. PHP has done this for many years, and look were its now. The stdlib is full of weird real_functions etc. etc. Adding even more to the global scope would make PHP even more unusable. At this point, I can only assume you're trying to troll me. There is one `real` function, it's `mysql_real_escape_string` and it's named like that because that's its name in the mysql C library. At no point have functions in PHP been replaced with `real`-versions of them. Stop talking bullshit. PHP is not unusable. Millions of developers use it every day. Tell me what makes it unusable? You don't even know about its stdlib as it seems. &gt; You seem to misunderstand how javascript works. Javascript is by design an eventful language, almost every IO bound function is handled async. In the dom/node api there is very rarely anything that is sync. Most functions accept a callback that is called when something is complete. In PHP you wait synchronously on almost every IO function call. Async/await is just sugar in the syntax spec, you can easily have the same effect with traditional callbacks, or promises before async was a thing. I think I understand this more than you. Not everything happening in JavaScript is async. Not every callback to another function is async. JavaScript is running in an event loop which has a strict way of working, it triggers timers and then waits for streams to tell them they are done with something at which point it lets the procedures behind it work on, waits for them to go async again and lets other procedures work while waiting for new "responses". Any language can do this, given a way to pause an execution context and resume it when needed (namely, Generators, which PHP has). Non-blocking streams existed for a while now in PHP. When you do a `for (let x of something)` in JS, it's synchron. When you do `something.forEach(x =&gt; ...)`, it's still synchron. It doesn't switch execution contexts. It's the IO functions that give it asynchron tasks, like reading from a file or network socket, requesting a HTTP resource (which is just reading/writing from/to sockets, too). Unless you use anything explicitly asynchronous in JavaScript, you will write synchronous code. async/await is sugar-syntax for Promises, both of which work completely synchronously as long as you don't use asynchron IO. Any language can implement an event loop. That's why there are [existing](http://php.net/manual/de/book.libevent.php) [Event Loop](http://php.net/manual/en/book.ev.php) extensions based on C-libraries for Unix as well as [Multithreading](http://php.net/manual/en/book.pthreads.php) (which Node.js lacks completely). And PHP is just as close to C as Node.js is, it can use exactly the same things Node.js ever can. Heck, there is even [a v8 extension for PHP](http://php.net/manual/de/book.v8js.php) &gt; Thats just a bunch of crap. Im not event going to try to write anything constructive here You can't. Because you don't know what you're talking about, it's obvious.
thanks
I think you can do that. In the custom pipelines section define your pipelines and in the Branches section you can click the ellipses off to the right side and select the custom pipelines to run, we do this on our projects to run manual build steps for building sandbox environments for a given feature branch as needed.
Bitbucket deployments can either be manual or automatic (defined with the [trigger option](https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html#Configurebitbucket-pipelines.yml-ci_triggertrigger)).
&gt; do you really disagree? I do. The SPL is pretty solid and you can go and find flaws in any API design of any language. "horrible" is definitely not what it is. it has inconsistencies in function naming and parameter naming due to the way it evolved. &gt; Doing a quick grep (with "real") on PHP global functions i get 31 hits. Its not the real_ word thats wrong, its the way the library was initially built. You were stating PHP would create "real" versions of functions to replace old/bad ones, it doesn't and never did. It simply mimics the respective C-APIs. You're purposefully lying to make PHP look worse than it is. How could I take you serious? Click on your "real" hits, read it. Read where the functions come from. &gt; A for-loop is not directly IO bound, this is also why its sync. It would make no sense to have a primitive as async. In this sense variable assignment would have to be async too, so you can see why its unnecessary. Now you're just repeating what I stated with own words, countering your own arguments. &gt; [1, 2, 3].forEach(async (id) =&gt; await updateSomeStuff(id)); &gt; &gt; The primitive is sync, as it does no IO, but the caller is async making it a non-blocking process. Let me get something clear, I think you don't grasp it. 1. The example above would run synchronously, regardless of the async/await 2. It doesn't create a "non-blocking process", it still runs on one CPU core, on one process, on one thread. In the very core of it, it's a synchronous process, it is just able to schedule what to run when. You don't create processes. Or different threads. Node.js can't do multithreading and can't even escape its single core. PHP can btw., easily, as every request triggers a new process in a process pool. 3. This is the core of any non-blocking IO in any language and has nothing to do with Node. Node just leverages it, like PHP can and does. &gt; For example a simple DB query, http request or file read would block in PHP because its all sync. I told you, non-blocking streams exist for a long time now. I think you don't understand the basis of it. [stream_select](http://php.net/manual/de/function.stream-select.php) exists since PHP 4.3, the only thing that was lacking to get concurrency was generators, which were introduced with PHP 5.5 in 2013, **5 years ago**. Now, the only difference that stays is that that it was based on user-land implementations and the only thing Node.js did differently was implementing an event loop in C and providing interfaces to work with it. That's the same thing like using libevent, libev etc. for PHP, it's a C-extension that can leverage native C-speed and provide an interface to PHP. 
i'm trying to create a php page that handles files, i know about input type=file and adding headers. However, i want to create a user initiated event that will open a file dialog box for view not for upload. The file will already be created, the user just needs to select a file that the OS will determine which appliction is suitable for open and viewing
Scraping tends to be one of the things I don't reach for PHP for as the rather wonderful Python based Scrapy seems superior to anything else I've seen - (https://scrapy.org). Sure you have to go to the hassle of installing and configuring Python on an otherwise PHP system, but the kickback for using something specifically designed for scraping seems an easy win on balance.
Always liked this article on building a simple [MVC app](https://symfony.com/doc/current/introduction/from_flat_php_to_symfony2.html). 
I made a [pull request](https://github.com/EFTEC/DaoOne/pull/1) to fix this eval vulnerability
Not a Drupal 8 user but I'm a bit skeptical that Symfony's ClassLoader is still being used. The ClassLoader was a pre-composer autoloader and has not been used by the Symfony framework for a very long time. Completely removed in S4. 
probably - article is from 2017 fwiw
Holy shit you are stubborn. Lets make it even more clear: async function updateSomeStuff() { // do database call } console.log('start'); [&lt;items&gt;].forEach(async (id) =&gt; await updateSomeStuff(id)); console.log('end'); // Prints immediately In Node the console logs will print immediately. This means the updateSuff function is doing stuff and like 99% of apps waiting for IO. It WONT BLOCK THE MAIN THREAD. This means you can serve your users and wait on IO in the background. Now, with PHP this is IMPOSSIBLE. There is async wrappers (like ReactPHP), and third party tools for this but the CORE STDLIB wont work. If i do this in PHP: $updateUserNameToFoo = function($id) { $corePHPPDO-&gt;query("update users set name = 'foo' where id = $id"); } print('start'); foreach ([&lt;items&gt;] as $userId) { $updateUserNameToFoo($userId); } print('end'); // Prints only after DB calls are finished Im blocked as long as the db calls are executing. Even worse im not the ONLY ONE BLOCKED! ALL USERS are blocked! Sure you can use any async php library here but the biggest gripe with any eventful code is NO NORMAL PHP WILL WORK as it blocks. If you choose to use PHP with an event loop you CANNOT USE ANY CORE FUNCTIONS as they all are blocking. You must you only specialised libraries. This kind of defeats the purpose. This is why im telling you, if PHP want to be async to the core it needs a new stdlib that has full support for any IO bound tasks. 
the development of Drupal8 took so long that it still has Symfony components from 2.1
each stage is meant to be separate. So if you configure each stage to use a docker runner then yes, it will have to spin up a new container. 
When I'm doing some heavy lifting in a sizable project I reach for PhpStorm. But if I just need to jump into some code to check something or make a small edit it's a tossup between VSCode and PhpStorm. VSCode is open pretty much 100% of my working hours for basic text tasks. It's a nice little piece of software.
What a horrible, horrible piece of text.
Agree
Thanks for saving me a click. 
You won't believe number seven! /s
Low quality article that brings nothing to the table. Verging on spam..
You can already tell that from the title. You can also tell that it's a promo for the Bangalore-based outsourcing firm.
But there's only 5?!?!
Seems nice I will definitely try it.
Nope. Drupal 8.6 for example, uses Symfony 3.4. 
Even though that was slightly outdated, I still found it very useful.
D8 has no dependency on composer, and it's not decided if D9 will. D9 will be based on S4, so they need to find a solution for this. https://www.drupal.org/project/drupal/issues/2937534
I like it. It does the job well enough when it is a part of a bigger CI/CD solution. It catches some things. But I use plugins to extend it. You also have to turn in the majority of checks on it and not only the PSR checks. I also use pre commit hooks to prevent violations from making it into a main branch, but sonar also becomes useful when someone tries to bypass that. There's also integration at the IDE level which is extremely useful, as it shows you violations as you develop. 
PHP Specifically.
You're mistaken. It may gain many of the capabilities of a standard PHP IDE, but that requires explicit installation of various plugins and extensions to achieve those results. This means that while it may eventually get to the point that it might be able to achieve the same level of features and functionality, it will still never be an *Integrated* Development Environment. This is the key difference, **but there's nothing necessarily wrong with that**. There's no hate. VSCode is a solid editor, and I use it for various types of projects. People just need to understand that IDEs by their nature are going to be slower because they have MANY more features out of the box, while text editors take an "a la carte" approach. I can almost guarantee that if you were to shoehorn in ALL of the features and pieces of functionality that PHPStorm has - or any other IDE, for that matter - into a given text editor, there would be very little difference in startup time and performance. It all just depends on what you want to use it for. If you plan on doing super heavy development that requires all of the features and capabilities that an IDE will give you, then use an IDE. If you only want to pick and choose a handful of things for certain types of projects and keep your development workflows streamlined, use a text editor.
Yes. Everything has a tradeoff. The out of the box tools, and tools that aren’t yet available in VSCode, make it worthwhile by themselves. Not to mention that I don’t have to hunt around and make it all work. In what way is it slow? Indexing? My machine isn’t top of the line but I’ve yet to have any performance issues.
Even though the name is Laravel Homestead I would just use that to avoid hassle, even for other projects than Laravel if you want to use a LEMP vagrant box.
I'll try that, thank you. I came across it before, but didn't look into it much because I thought it was a Laravel specific thing.
Read up on Synced Folders: https://www.vagrantup.com/docs/synced-folders/
Can anyone point to a good resource for learning CI/Docker/etc. from the ground up? I've been playing with PHP forever but always solo and never large projects, all self/internet taught. Been googling around for good resources on deployment etc. but they never seem to be for actual beginners.
Hello, I have been working on a base for an API using PHP and the Slim framework. It includes MySQL connection, CORS, Auth template and a useful directory structure. I have written an app using this and it has been working well, but would appreciate some feedback on ways to improve it. &amp;#x200B; [https://github.com/drum445/PHPSlimTemplate](https://github.com/drum445/PHPSlimTemplate) &amp;#x200B; Many Thanks
Hello, I have been working on a base for an API using PHP and the Slim framework. It includes MySQL connection, CORS, Auth template and a useful directory structure. &amp;#x200B; I have written an app using this and it has been working well, but would appreciate some feedback on ways to improve it. &amp;#x200B; &amp;#x200B; [https://github.com/drum445/PHPSlimTemplate](https://github.com/drum445/PHPSlimTemplate) &amp;#x200B; &amp;#x200B; Many Thanks
ha, won't let me add text to the body so comment below :)
looks okay, some thoughts: - i dont think doing sql right in the controller is very good. i'd offload it at least to a static method of the "Person" class. or a "PersonHandler" that has a "getPerson" method or "getAll" method. you might be re-using those calls - on top of that, i don't think doing sql in general is necessary. consider an ORM like eloquent or just the query builder: "illuminate." allows you write code like `$db-&gt;table("customers")-&gt;get()`. especially useful for sanitized inputs - i prefer to have a Routes file with a simple route to controller method map. then use controller classes. then your app structure can have something like "Controller, Handler, Entity" or something, which is pretty standard. - i see you're using sessions in your endpoints. this isn't really standard unless it's exclusively consumed by a web ui (maybe your case). otherwise you should consider some sort of auth / token or even Basic auth header flow otherwise good job. i love slim, so quick to take it from idea to app
Thanks mate, I will look into ORMs have always stuck to writing the SQL myself but might be unnecessary. When offloading the queries to a PersonHandler class for example would you pass the db connection through, something like PersonHandler.getPerson($this-&gt;db); As $this in the context of the slim app won't be available in the handler? &amp;#x200B; I agree though after using a fair few languages/frameworks I am enjoying slim. Always preferred lightweight frameworks. 
It doesn’t have tests. Basically, there is no proof it works in any way. 
For example you can sync the root folder of the vagrant project into the `/var/www/html` with the following: `config.vm.synced_folder ".", "/var/www/html"`
heya. yeah check out eloquent, i think you'll like it. It allows for queries like `Person::all();` or `Person::where("name", "=", "Billy")-&gt;get();` which is pretty nice. But yeah I use raw SQL all the time, but for simple stuff, I prefer an abstraction. Especially when you can do `(new Person(["name" =&gt; "Timmy"])-&gt;save();` As for the handler suggestion, i suggest that *because* you don't have an orm, otherwise i'd say you probably dont need a handler layer. Either an orm or handler class to wrap sql would be fine. On larger projects I recommend both. As for bootstrapping it, you'll need to do some research, but I believe in `bootstrap.php` you'll need to do something like `$app-&gt;getContainer()['PeopleHandler'] = new PeopleHandler($app-&gt;getContainer()['settings']['db']);` or something like that. Also, the eloquent orm uses a global db connection, so you dont have to inject the db object. i like putting all my routes together in one file, yes. Then you can like foreach over it to add them all in your bootstrap. Also, I prefer creating a `class MyRestApiApplication extends \Slim\App` and then doing all your bootstrapping in the constructor also as other's have pointed out, it's good to get in the habit of writing unit tests for your code. but that's its own evening of learning if you're new to it
Hi, thanks for the reply, do you have an example of this please?
Also those statements make assumptions about the include search path that at best will not always be true, at worst could load a script someone has uploaded somewhere else.
Lovely, appreciate the response. Unit tests are a must but PHP isn't my main language so will have to research them. Eloquent sounds pretty top
Appreciate it!
nice good luck. unit tests are awesome. tip: make a "script/test.sh" (or bat) that runs the test suite. yes eloquent is great, especially for small to medium projects. even for large projects with 50 line sql queries, it works. some people don't like that the orm models are not "thin" models. they contain logic and methods. some people prefer that entities are thin plain objects. update us on your project!
Might want to skip vagrant and go straight to docker. It's amazing in comparison. 1. Setup Docker for your OS. 2. `git clone https://github.com/phpexpertsinc/laravel_quickstart` 3. `bin/containers up -d` 4. Profit! It literally takes about 2 minutes: https://vimeo.com/254289186 You won't have any of the hassles of Vagrant.
&gt; it will still never be an *Integrated* Development Environment Are you fucking kidding me? Stop spreading bullshit (╯°□°）╯︵ ┻━┻ You're blatantly wrong. VSCode has a built in: * Debugger * PHP Code Syntax Validator (using the php runtime binary no less!!!!) * PHP Code Suggestions * Terminal * Version control interface These are all features of an *Integrated* Development Environment. The fact is VSCode is an IDE. Period. You don't get to pick and choose what classifies an IDE just because it's missing some features you'd like. And by the way.... all IDEs are also text editors. That's kind of a prerequisite. 
Are YOU fucking kidding me? Go ahead and install a fresh copy of VSCode. Tell me all about the PHP support it comes with out of the box. Oh, you mean it has none? It has to be installed separately? Then shut the fuck up. It's not integrated, no matter how much you want it to be. And if you still insist that it is, then you clearly don't understand what "integrated" means, n00b. &gt; And by the way.... all IDEs are also text editors. That's kind of a prerequisite. Yeah, duh. Nobody is arguing that, so there's no need to state the obvious to mask your lack of experience.
 How does this compare to [Lando](https://github.com/lando/lando)? 
&gt; VSCode has a built in: &gt; Debugger &gt; PHP Code Syntax Validator (using the php runtime binary no less!!!!) &gt; PHP Code Suggestions &gt; Terminal &gt; Version control interface Let's look over this list, shall we? Let's start with that Debugger. Sure, that's pretty nice, but you forgot to mention that it [only supports NodeJS](https://code.visualstudio.com/docs/editor/debugging) out of the box. That PHP debugging support? Yeah, [you're gonna need an extension for that](https://imgur.com/a/t9PjjNy). **So shut the fuck up**. PHP Syntax Validator and Code Suggestions? I'll concede the linter, that's a nice add. But the Code Suggestions? Go ahead and install Wordpress or a custom Composer library on a fresh installation of VSCode, and tell me all about the suggestions and code completion for LITERALLY anything other than basic PHP. [Oh, you have to install Intellisense](https://imgur.com/a/t9PjjNy) to achieve that basic kind of IDE behavior? **Then shut the fuck up**. Terminal? Every program can emit commands to a terminal. Text Editors included. That's how computer programs work, **so shut the fuck up**. Version control interface? Yeah, for Git only. Granted, I might give you that one since 90% of every PHP developer is going to rely on Git support in some fashion, so Git is a safe bet.... for a Text Editor. Literally any other IDE will provide unified support for Subversion, Mercurial, or even Team Foundation Server on top of Git, so you can't sit there and act like this is a huge feature. In any other IDE, I can version control across multiple or many VCS flavors, so based on VCS feature comparisons alone, **you can shut the fuck up**. I'm not sure if you're arguing if VSCode is an overall IDE (which it isn't), or if it's a PHP IDE (which it also isn't). In either case, [you're wrong](https://code.visualstudio.com/docs/languages/php), because it provides only the most basic out-of-the-box support for the most basic functionality: Text Editing. It's not an IDE for any language. It's a text editor for many languages. **So shut the fuck up**.
umadbro?
Nah. Your inexperience just amuses me. It was nice chatting with you, though.
15 years of inexperience. Blow me.
Literally none of the things in your paragraphs of bullshit that it took you 30 minutes to write make VSCode not an IDE. What are you even talking about? Do yourself a favor and step away from the keyboard and take your blood pressure medication before you get a heart attack. Seriously. lmao Your entire argument is "well it doesn't have this, and this, and this so it's not an IDE"..... meanwhile you still haven't really defined what makes an IDE and IDE...... So please define for me what an IDE is. I'll wait.
It's cute seeing you get all worked up over this. [Take all the time you need](http://lmgtfy.com/?q=What+is+an+IDE). I know you're a little slow, so I'll boil down the basics: * An IDE will have a fully integrated debugger that integrates with xDebug, ZendDebugger, or both. PHPStorm, Netbeans, and Eclipse PDT can all do this. **A fresh VSCode cannot.** * An IDE will provide basic support for Unit Testing in the form of test runners and perhaps unit test stubs. PHPStorm and Netbeans can do this. **A fresh VSCode cannot** * An IDE will have some level of support for automated builds. PHPStorm has an [integrated configuration panel](https://www.jetbrains.com/help/phpstorm/creating-and-editing-run-debug-configurations.html) that will provide support for common tasks in setting up watchers and other tasks. **A fresh VSCode has no such panel.** * An IDE will know what a custom function, class, or namespace is and where they're located for automatic code completion. **A fresh VSCode has no such support.** * An IDE will support multiple versions of its target language across multiple projects. **VSCode can only support one target language binary at a time** I know you're a mindless little fanboy that thinks that you're limited to either one or the other, but seriously, this is basic stuff. There isn't a VSCode vs XYZ war going on that forces people to "pick a side". Again, I like VSCode for what it is: A fast little text editor for a handful of common languages. I also like PHPStorm for what it is: A feature-rich IDE that contains everything I could possibly need for any web project - modern or legacy alike. And remember: [Even VSCode doesn't purport itself to be an IDE anywhere on its website and documentation](https://code.visualstudio.com/), or its [Wikipedia entry](https://en.wikipedia.org/wiki/Visual_Studio_Code). Feel free to correct the team over there if you think they're wrong. I'm just a guy who enjoys teaching angry people with inferiority complexes.
Good bot! 
What is your main language? Just asking because a lot of the suggestions are language agnostic. 
Please give me a simple code example then. Ideally a core php function, like pdo, file access etc. anything that does some IO and show me how its done. 
Yeah, I just mean there are common phases that are shared among programing languages. Like the phases of a compiler (interpreter applies as well). How the code is scanned (lexer), parsed, and turned into an AST for further optimization. Most interpreted languages end up turning the AST into some linear code that is further executed by a virtual machine. In the case of php, the virtual machine is called Zend Engine. What sort of things would you like to know?
You can specify scripts in your Composer file. This way your code is os agnostic and you don’t need another directory and file.
Your db connection is a dependency in this example. You don’t want to pass dependecies in methods, but in the constructor. So that kind of rules out the static approach, but that will bite you in de ass when you’re going to write unit tests anyway. Iirc Slim offers a DI container - PSR compliant I hope - so that should be pretty feasible.
It feels more like a tutorial than a template. My suggestions to improve this: - introduce namespacing - read up on PSR-4 - introduce interfaces for flexibility and extendability - introduce a `composer.json` file - if I want to use your template I either must copy your code or clone/fork your repository. If you create a Composer file you could have Composer create a project based on your template using `composer create-project` - introduce unit tests and add the phpunit (or another testing framework) to your dev dependencies of your project - In a readme I don’t really need the information on how to setup Apache on Linux. Maybe I’m on Windows, maybe MacOS, maybe I use Docker, maybe I prefer Nginx. What I like in a readme is: what is this, hoe do I install it and how is the basic usage. But it is a good start. So keep it up.
I'd like to know what happens when php has to work with a request from a source code perspective (right after opcode has been generated). I started reading [http://www.phpinternalsbook.com](http://www.phpinternalsbook.com/) which is very interesting but its mostly focused on module development. My goal is to familiarize my self with that language so that i can contribute or play around any add extra features. Keep in mind hat im not that familiar with C and i think that if i start playing around with the PHP source i will also gain valuable understanding of how a highly optimized C project is structured. 
You might want to take a look at [TYPO3/Fluid](https://github.com/TYPO3/Fluid/blob/master/doc/FLUID_SYNTAX.md).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [TYPO3/Fluid/.../**FLUID_SYNTAX.md** (master → e450fb4)](https://github.com/TYPO3/Fluid/blob/e450fb4596b751af31bbc6f79e22b94a0222f293/doc/FLUID_SYNTAX.md) ---- 
Like this? dim variable as string = "Hello world" print "&lt;html&gt;&lt;body&gt;&lt;?php $variable = '" &amp; variable &amp; "';" print "echo $variable;" print "?&gt;&lt;/body&gt;&lt;/html&gt;" :)
Hey, I prepared [an update](https://github.com/slashtrace/slashtrace/pull/6) to add a JSON renderer. Have a look at the PR and let me know what you think :)
Same here. My company has been using Drone for several years, and it’s fantastic. Literally just “run stuff in Docker and see how it goes”
Every commit gets PHPStan, Twig Linter, ESLint, Unit Tests, Integration Tests, Smoke Tests. All of them are simple commands in a Makefile, called concurrently by the GitLab Runner.
Thanks for the feedback, I've added autoloading via composer.json and a controller layer to simplify the routes file.
Pretty good setup, I've done pretty much the same thing with WordPress but also with docker containers instead. Makes setup on other systems and cloud services much easier and reproducible.
Thanks
I've heard a lot good stuff about rundeck. Otherwise, whats the use case? Is it something that needs to be run often or? 
This may be offtopic. But i would setup [https://www.bugsnag.com/](https://www.bugsnag.com/) or some other error logging service like Sentry(So you just know when errors are coming). And probably make a class/global function to mysql\_\* functions, which would do mysqli/pdo behind the scenes. I've tried [https://github.com/dshafik/php7-mysql-shim](https://github.com/dshafik/php7-mysql-shim) (please don't put that into production). It was slow. But you could probably make your own faster implementation from that, which could get you up to a higher PHP-version. 
No need to create an autoloader, if you are using composer you already have access to an autoloader, it's in the vendor folder.
Since the map keeps a reference to the object, I don't think it would be destroyed. Even if it were, it will not return a different object with the same id unless Hashable is implemented and equals() is overridden.
I had no particular reason. I am just familiar with Guzzle.
Have a look at this ;-) http://docs.php-http.org/en/latest/index.html
The thing is: the package hasn't been updated in 2 years, while guzzle had an update 24 days ago.
What a strange metric to stick to, considering the nature of the package. HTTPlug defines a common interface for HTTP clients, so this metric actually exposes high package stability, which is in it's favor. It is becoming the industry standard and formed PSR-17. Per my previous proposal, you would create a separate package using those interfaces, which still makes the package have not received updates. Have a look at their daily downloads. Maybe you'll reform your opinion. There is no real single golden metric that should determine whether a project is worth using.
Have a look at these metrics instead: https://packagist.org/packages/php-http/httplug/stats
Phpmyadmin?
Why would it take a day? A “normal” report takes me about 30 to 45 minutes. My app is already in place so I can copy an existing report so the core bits are in place for a nice report. mysqlconnect print html print table start select columns from table order by server print column 1 print column 2 ... print /n print /table print /html Seems simple enough.
Adminer - https://www.adminer.org
Is it just a single table? Writing the PHP code to display it as an HTML table on a web page is probably no more than 20 minutes' work. Or as others have said, just use adminer or phpmyadmin. Or google for some free mysql CRUD tools.
If you're prepared to put a wee bit over minimal effort in then GroceryCRUD - https://www.grocerycrud.com/ - is pretty nice and you get a lot of bang for buck.
So make a PR to make it PSR-17 compatible, case closed. You *really* seem to love your HTTPlug.
 foreach ($pdo-&gt;query ("SELECT * FROM logs") as $row) { foreach ($row as $val) echo $val, "\t"; echo "\n"; } In case you need pagination there are examples on the web
You merged the model, the view and the controller into one file! Courageous. I like it. 
Are you affiliated with HTTPlug in some way?
Less code, less abstractions, no or very little JavaScript, verbose names, less dependencies, code that makes comments mostly obsolete, return early on faults, less code, DRY, don’t overgeneralize. Write the code with refactoring in mind.
It's not a strange metric when you want to contribute something. A package with an active development community around it is far more interesting than something that seems abandoned over two years ago.
If you've thought of a really clever way to do something, don't. We're not here for your ego. (Related to your 3/4 I think). 5 is both subtle and deep.
To go with #1; try to keep anonymous functions less than 4 lines long. Never declare an anonymous function inside an anonymous function. We have 1 "line" of code in our code base that is ~250 lines long and an utter nesting mess. Nobody has had the balls to refactor it because nobody can figure out what that fuck that section of code is doing. 
Sinclair Z80 then coding BASIC on the CoCo :) I started out programming but moved to system administration and engineering. Hobby coding and scripting. I poked at c++ back in the 80’s but it was a bit over the top for my purposes; D&amp;D game monitor, car wars vehicle generation, star trek game, network utilities, and then personal web sites. My most recent stuff is an inventory app I wrote to maintain server details; mysql, php, and jquery. 
Not code per-se, but the best rule of thumb for being an software engineer or architect: Always budget time to come back 6 months later and redesign and/or refactor it. No initial design survives contact with the enemy.
If anyone else is reading these comments and think it looks like bots talking to each other, you're not alone.
What sort of crazy stuff are you doing that a few hundred tests take 20 minutes?? 
Some of the tests involved a lot of database operations, but I also test data migrations. And one test takes \~5 minutes due to all the migrations having to run (using slimmed down data.)
It's a sign that you might have too many integration tests in there. I tend more towards functional tests of the app itself and very few carefully selected test cases that need a database to run,if any at all. 
Yes, they technically are integration tests. But they could not be tested functionally. Well, they could, but we'd have to fully bootstrap all of these migrations. This allows me to test each component individually and specific end results X assumed number of products imported, their attributes and properties are correct. It could not get by alone on pure mocking.
HttpPlug had nothing to do with PSR-17. Perhaps you mean PSR-18?
 $thing = collection($arr)-&gt;flatmap(function($val) { /*250 lines of shit */ });
the rule of thumbs is there is no rule of thumbs. Something is more or less valid given a specific context.
Or, you know, set up a freaking CI on your own damn machine. Here compatible with any IDE.
Drupal core doesn't like BDSM.
I make a living working on my own project, coding for myself. I've discovered that I am my own enemy :(
CodeIgniter is long in the tooth these days, but that's still quite a nice wee system 
A coworker of mine has a rule of thumb he uses as a litmus test "would my grandma be able to u der stand what this line does, without any introduction? 
Yeah, I would recommend Adminer Editor too. I’m using it for these kind of tasks. 
1. Select * is a bug. 2. Commit early, commit often. 3. Create branches for large changes. 4. Comments. Nuff said. 5. Functions should do ONE thing. Functions over 15(ish) lines are probably doing more than one thing. 6. Classes should manage ONE thing. EG: User, File, Process, etc... 7. Use strictness on your checks. Using == or != is a bug. You must use === or !==. 8. Controller functions MUST only display one data type (EG: html or json). 9. Magic numbers or magic strings MUST be settings or constants. Settings if it's remotely possible this value will ever change. 10. Use static paths when possible. /templates/images/image.png 11. You MUST separate your model from your view from your controller. Mixing these isn't acceptable. 12. Processing should NOT happen in template files. If you need a special view pass an object with a function you want to call in the template file. 13. There are no routine errors, notices or "bugs". The code must execute on the highest strictness settings. 14. Delete is a status, not an action. This means all database tables need a deleted flag. 15. All tables must have: ID, Deleted, Genesis, Mutation
No. Not possible.
I know what you mean, there are times when I write something and think to myself, "I am going to hate myself when I look back on this in six months." That is usually a good enough sign for me to slow down, rethink what I am doing and clean it up right then and there.
Try to resist the temptation of copying and pasting chunks of code from one place in your project to another. You may be saving a few seconds now by not doing this properly but you're going to hate yourself in the future. Also, the "I'll come back to this later to do it properly" is the biggest lie that you can tell yourself.
I think you've missed the point of CI. It's not there to run tests locally, it's there to make sure your branch integrates with other peoples code, and the tests run on that. A proper setup would include automatically running all these tests on a common CI when they're pushed, but I'm not going to commit code just to run tests. Also, if you're doing TDD, then having to commit, push and wait/run your entire CI stack to see if the single change you made passes is going to really slow down your red/green cycle. OP's method lets you easily and quickly run just the tests for the class you're testing, which is damn handy if a complete unit test run is slow (they shouldn't be - but they so commonly are that your workflow needs to account for this).
name conditionals, especially complex ones one level of indentation avoid else/elseif/switch avoid intermediate variables
Put everything on one line to reduce LOC: if ($foo) { global $b; $a = $b; while ($a) { c(&amp;$a); } } &amp;#x200B;
Please explain #15 
It's for MySQL. All MySQL tables need to have a auto incrementing ID column, a deleted status column, a genesis column (when the row was created) and a mutation column (when the row was last modified). This can be incredibly useful for maintaining data integrity and knowing if records are being used and making sure that data isn't lost by a deletion.
What’s wrong with JS?
Try make a pull-request for a major framework. You might learn what kind of discipline is used in such projects, it's a good teaching opportunity.
index.min.php ???
This should be posted in /r/phphelp (rule #4)
You can expand on 5. with "functions should state a clear relation between input and output". Can be true for all functions except on the top level (controller functions).
Here’s a question: how old are you? Would help put your points into perspective.
Didn't know this sub existed. Good looking out
Usually we call those columns `created` and `modified`.
In Laravel these are * id * created_at * updated_at * deleted_at You don’t get all of them by default, setting them up early is often worth it - though sometimes actually deleting a row is preferred over simply marking it.
udemy.com
HTML-&gt;CSS-&gt;JS-&gt;PHP-&gt;Laravel Plenty of sites. Codeacademy is a good one to start off with and see if you actually enjoy it as the first steps are free of charge. Best of luck!
I trimmed that line down a bit for the reddit reply. It also has this bit on our wiki: Functions should have a singular return type (boolean, array, object, float, etc...) and should be easy to read.
This is a good one. 
Don't be like YandereDev.
S.O.L.I.D
How does one updated_at column tell you how **often** an entry has been changed?
\&gt; No function should be longer than 60 lines; it must fit on one page (or print-out in the olden days; messdetector can help you with this). &amp;#x200B; Jesus that's a huge function.
😂😂😂😂
Else is never necessary If a function accepts a Boolean argument, it probably does to much Composition over inheritance Comment why something happens, not what happens 
&gt;Delete is a status, not an action. This means all database tables need a deleted flag. So your saying don't delete rows, but instead flag rows as deleted (boolean)? but what about the increasing size of the table?
You can setup periodic truncation based on mutation and deleted. Eg: delete rows that are marked deleted older than x.
No function should be more than a few lines long. 60 lines is a huge code smell
Early return from functions instead of nesting and a single return at the end
For me SOLID principles (https://hackernoon.com/solid-principles-made-easy-67b1246bcdf) are my main way to write clean code. Everytime I choose to skip those principles and choose the quick-and-dirty approach, I come to some point later in the propject that I have to say "ok, let's refactor this and do it properly, or I'll be getting myself into an even bigger mess later". So better do it right the first time. Especially the Single Responsibility principle made me "wow" a little on your "60 lines of code principle". I think 60 lines for a function is way too long. The function (and thus the class) is probably responsible for too much stuff and it should be substracted to different objects. 
Had to scroll way too far to find this.
What?
#DON'T BE LIKE YANDEREDEV.
People will want to upload files. Sometimes it is possible to determine what is in the files, often not, especially in malicious double-use files. Zero day exploits can not be detected by definition. If I use security headers, I can avoid scripts being executed even if I can‘t stop infected files being uploaded. And I have the feeling that one day, JS and it’s thousand frameworks might end up like Flash or any plugin that gets hacked sooner or later. Computing power is on the server, I don‘t see why I have to use the browsers power, too. Each framework has to be security audited for each version. While knowing cases where JS does make sense, I guess very often it is because we‘re a little lazy and want shiny things instead of secure things.
I tell my juniors that they should only ever delete a row if they are absolutely sure that no one in the universe will want to look at the data again or if they know for a fact that the table will overflow the disk if they do not delete instead of mark deleted.
I know object oriented code does make sense generally but I do hate the 5housand getters and setters and factories etc. - in webdesign our objects last only milliseconds and our „objects“ are relational tables again and again. Sure I have a database class and a mail class and a PDF class and HTML purifier but that‘s about it - when tasks can be encapsulated well. When getting content from a DB and throw it out, why should I use a different class for each table? I better make that configurable..
You are right it often isn‘t in that case - but I am the one who negotiates with the client and I will not take impossible projects.
Yes, off by one error. Cheers for the correction ;-)
Favor type decl phpdoc: use type declarations to express parameters and return types. Only user phpdoc if you can't express it, e.g. `Class[] `. That is, most methods don't have phpdoc. Regarding actual phpdoc and/or code documentation: where context/class/method/parameter names don't suffice or the task is complex, add phpdoc. Otherwise don't. This minimizes chances of overdocumenting and documentation getting outdated. 
I favor singleton class resolution with containers. They are a way for me to mark a class safe for concurrent access i.e. they don't have (mutable) state.
HTML-&gt;CSS-&gt;JS-&gt;PHP-&gt;MySQL-&gt;Laravel-&gt;Linux 
Very solid advice!
This is taken from NASA guidelines.
[removed]
A pig. In a cage. On antibiotics.
u/[jj20051](https://www.reddit.com/user/jj20051) has covered most of them. Here are few extras: 1. Never use abbreviated names. 2. Never mention again what this entity is. For example **tblUsers.** No shit its a table. Thanks for telling me. 3. Never repeat the name of the class in functions. Example User::findUserByID. Of course we are finding users. Its inside the User class. 4. Never call classes directly. Always use dependency injection. Some frameworks like laravel make it very easy. 5. Never bloat your models. Use Repositories and Services. 6. Except. When something cannot be done use exceptions and dot just return false or null. 7. Your model is the representation of the entity. Besides getters, setters and relations you must not add anything else inside. Use Repositories instead. 8. Before writing a function think about the test first. How would you write it? If you cant then the function is too complicated. 
My best guess is that *name conditionals* refers to giving complex logic a name/wrapper for easier reading and understanding: &lt;?php //... // some complex logic for checking if some order is eligible for a discount if (($order-&gt;total &gt; $minDiscountTotal) &amp;&amp; ( ! $order-&gt;isDiscounted) &amp;&amp; ($order-&gt;date &lt;= $eligibleForDiscountUntil)) { $order-&gt;addDiscount($discount); } //... The above shows you the exact rules of when to discount an order, although you'd only want to know if it is eligible for a discount or not. Some possible enhancements by intriducing names: &lt;?php //... // same complex logic put into a variable $isEligibleForDiscount = ($order-&gt;total &gt; $minDiscountTotal) &amp;&amp; ( ! $order-&gt;isDiscounted) &amp;&amp; ($order-&gt;date &lt;= $eligibleForDiscountUntil); // same conditional as before but now using the variable above if ($isEligibleForDiscount) { $order-&gt;addDiscount($discount); } //... // or using a function if (isEligibleForDiscount($order)) { //... } //... // or a method if ($order-&gt;isEligibleForDiscount()) { //... } //... This nicely seperates *what* from *how*. That's just a guess though (feel free to correct me if I got it wrong /u/lordofworms).
Nope, you got it :).... wrap conditionals in helper methods/variables/functions that _name_ what you are conditioning for.
Instead of: if($total &lt;= $user-&gt;getBank()-&gt;available(new Date()) &amp;&amp; count($store-&gt;getProducts($productType)) &gt;= $productCount) { /... ` You write: $buyerHasFunds = $total &lt;= $user-&gt;getBank()-&gt;available(new Date());`l $productIsInStock = count($store-&gt;getProducts($productType)) &gt;= $productCount; if($buyerHasFunds &amp;&amp; $productIsInStock) { /... Which is much easier to read and gives you nice diffs in VCS. 
It is ok for some very simple things like utf8lib::safefilename($string) but I would not allow any instance to do something like this $user = $this-&gt;ServiceLocator-&gt;get("MyVersionOfPDO")-&gt;find("User")-&gt;where(["id"=&gt;4])-&gt;get(); If you need singletons that means that some classes do things on their own and that they know some kind of "service locator" or "instance container". This can make it easy to write bad code and is therefore avoided by most modern big projects. I had my singleton phase back some years ago and I moved away from it the day I started test driven developement.
uh. depends. you can introduce problems that way. sometimes it is better to leave it until you have to rewrite it. "better" can be subjective if you don't get the way the code is used due to time constraints.
maybe he wanted to ask how much php experience you have?
[removed]
&gt;4. Comments. Nuff said. Though I agree that good comments do make sense, sometimes I find myself writing comments which have no real value. &lt;?php // list of valid/invalid dates $validDates = []; $invalidDates = []; // date to check $dateToCheck = getDateToCheckFromSomewhere(); // range of valid dates (inclusive) $startDate = new \DateTimeImmutable('yesterday'); // always start yesterday $endDate = new \DateTimeImmutable('+ 1 week'); // range ends one week from now // check if date in range if (($dateToCheck &gt;= $startDate) &amp;&amp; ($dateToCheck &lt;= $endDate)) { // date is in range - valid // add to list of valid dates $validDates[] = $dateToCheck; } else { // date is not in range - invalid // add to list invalid dates $invalidDates[] = $dateToCheck; } I usually remove and/or replace these with appropriate function/method calls and data strucutres which simplifies the code IMHO. &lt;?php $dates = new DatesWithValidity; $dateToCheck = getDateToCheckFromSomewhere(); $validDateRange = new DateRange( 'yesterday', '+ 1 week', DateRange::INCLUSIVE_FULL ); $dates-&gt;addWithValidity( $dateToCheck, $validDateRange-&gt;contains($dateToCheck) ? new Validity\Valid : new Validity\Invalid ); **In short**: try to keep only the most necessary of comments (the good ones explaining *why*, not *how*) and get rid of all the others.
7 years. So intermediate.
I try to imagine explaining the code to my colleagues without feeling embarrassed or saying "yeah I know, this code sucks".
&gt;Delete is a status, not an action. This means all database tables need a deleted flag. Be careful with GDPR. You have to **delete** some things of the user asks you to, and if there's no need to keep it. 
At my work we have CreatedOn, CreatedBy, ModifiedOn and ModifiedBy.
Oh, okay. Now it makes sense. Thanks!
If you are reading this and you are a REAL noob and you make crappy non-OOP PHP sites, and you know they are crappy but you don't know where to begin to be an actual developer, and/or this thread is making you feel like you're not doing things right but you don't know how to start improving, here is one rule of thumb that I wish I knew when I was in your shoes: Separate your logic from your output. Every file you make should only do output, or do something else. A `for` loop to make rows in a table is fine. But if you have a SQL query and HTML in the same file, you're doing it wrong. While you're at it, escape things properly. It's a simple rule to follow but if you follow it consistently then that should teach you a lot. Then if you get that down you can start separating out more stuff. Another best practice is to separate getting stuff from the database from other stuff. If you do that and you structure your code decently, you now technically have a three-layer application, with a bit of structure. Then once you get that down, learn a framework. Separation is part of what the pros do: they keep separating stuff until they have small units that only do one thing and are easy to understand. This is why people like object-oriented programming: it allows you to do this easily. For example, if you have a lot of duplicated code that's similar but you can't deduplicate it because there are a few exceptions here and there, then maybe you can put the basic logic in a class and use a subclass for each special case: now you have no more duplicated code *and* you've structured your special cases, because of course you did this with a PSR-4 autoloader so you have everything neatly structured in the directory structure. Also learn Git and use parametrized database queries.
Don’t comment “what.” Comment “why.” If you are removing comments after writing code, you’re commenting “what.” What we are doing should be clear from the code, why we are doing it is a business rule and is never really clear from code. Why comments have immense value in 6 months and you are wondering, why are removing three from this value? Oh, it;s because system foo includes three widgets we don’t care about! 
I don't know if they're good, but their ads are annoying so I don't like them
I don't really like to see `SELECT *` but there was one time when I had to go through a legacy codebase adding a new column to every affected select statement, and those `SELECT *` were a little ray of sunshine in a monotonous task. There again, I can also think of a time where `SELECT *` caused a hard-to-spot bug, because it was used in a query with a join, and at some later point a column was added to the second table in the join with the same name as a required column from the first table. This meant that when the column was accessed like $row['column'], the code suddenly started getting the new column from the second table instead of from the first.
So you’d rather have 15 4 line functions? 
Yeah.
Yeah, all the younger programmers in here are bitching that 60 lines is too long for a function. They’d rather have 15 functions. ;) Trends in programming are real depending on when you learned it.
As I wrote in another comment, the 60 lines rule is from NASA guidelines. When looking at 10 year old legacy code, this rule will make sense. ☺
I agree with you about minimising use of JS frameworks: those are much more likely to become unmaintained in the future. As for why should one use client-side script, the obvious two are UI responsiveness and reducing server load. Yes our end users want pretty things, and they also want usable things. It's part of our job as developers to give the customers what they want without compromising security. If we don't, then our customers might go elsewhere. 
Another reason i prefer this is that with a breakpoint on the if, i can immediately see the values involved in the comparison. With a load of inline `$x-&gt;y()` i have to step into all the functions...although i cant help feeling i might be missing a trick in phpstorm on this?
Yeah, I’m old school, been doing this for almost as long as you’ve been on the planet. :) For me, a 60 line function is preferable to 10’s of functions that do almost nothing. Ultimately a function should be easily understandable and it’s outputs should be well defined. Code should be abstracted into other functions when it’s reused, not just because we’ve reached some arbitrary line count, all though I agree with you (and NASA apparently) that around 60 lines it starts to get hard to understand something... m.
You can get away with HTML-&gt;CSS-&gt;PHP-&gt; at a bare minimum surely? 
Maybe I'm thinking in narrower terms - ego as it relates to code. Creating a project is in the "business decision" bucket for me, not the "programming decision" bucket. Clarity is everything when it comes to code.
1. Let the code read by someone else and ask for every WTF he or she founds. Without censoring!
&gt; arbitrary line count It's not arbitrary - it's what fits on a screen or paper print out.
Do they not have code linters in php? Haven’t used it in years jw
It looks like you read book "Clean code" because most of your rules are described there, haven't you? If you haven't you really should, you will learn some additional rules.
Got ya, thanks for the explanation!
Besides \`php -l\` for syntax checks, we have code sniffer and mess detector. I use both, but of course a linter cannot see if a function is properly factorized or humanly readable. It's a good start, though.
there are certain laws (GDPR) that *require* you to delete data should your users request it, at least in the EU.
Marin Fowler? Didn't get around to him yet. I had some predefined opinions about him, like being totally overrated, but I read his book about NoSQL and thought it was very clear in composition and explanation. Maybe I'll check out some convent talks by him.
If you can separate those two buckets your are better than most people, I think. :)
&gt;You have to delete some things of the user asks you to And how the fuck you gonna keep track of what you deleted if you delete it? Better to remove the offending information and mark it's status as deleted than wipe it out. Keep the receipt!
In my experience, almost anything that can be 'deleted' by a user is a small edge case of the process and a very small subset of the data. The risk of later needing the data (happens all the time) generally outweighs storage concerns. Storage is usually very cheap unless you're talking about billions of deleted. In the last few years I've used a delete query within the code only once and I forget the exact scenario where it was required. That said, it is important to consider the long term when dealing with what you know is going to be a large continuously growing table. We recently exceeded an unsigned int (4294967295) in the auto-increment of a few tables and it caused a 4-5 day outage as we altered the tables. Our DB will run out of storage in ~9 months, and our current plan is "eh, we'll deal with that later"
&gt;Don’t comment “what.” Comment “why.” &gt; &gt;If you are removing comments after writing code, you’re commenting “what.” &gt; &gt;What we are doing should be clear from the code I agree, that was the point. &gt;why we are doing it is a business rule and is never really clear from code. I'd say you should make the business rules clear from the code itself (eg by codifying terms based on the [ubiquitous language](https://martinfowler.com/bliki/UbiquitousLanguage.html) for the given domain/client on a high level of abstraction) whenever possible. If not possible I'd still say that there are places where business rules fit better (eg [features written in Gherkin](http://docs.behat.org/en/v2.5/guides/1.gherkin.html)) than in comments. IMHO comments explaining why should not contain information about business rules but rather contain information about **technical/architectural (low to mid level) details** instead (not architectural decisions though as there are [better tools](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions) for that too). &gt;Why comments have immense value in 6 months and you are wondering, why are removing three from this value? Oh, it;s because system foo includes three widgets we don’t care about! Could you give an example on how that might look? That would probably help showcase the specific situation better.
You never worked with legacy code?
Exceptions to every rule are possible, but it should be a good reason. 
Sure, framework specific implementations are fine ... we don't work in Laravel so to each their own.
You could try to [optimize your code for deletion](https://work.stevegrossi.com/2016/11/04/optimize-for-deletion/) in that case. If you can remove the existing functionality and rewrite it (from scratch) in a short amount of time you'll have a lot of flexibility and can react to change rather fast. The boy scout mantra can still be applied: just try to make it a bit better/cleaner every time you rewrite stuff. Eg if the current module uses different terms for similar things then try to reduce that in the new rewrite. Granted you'll need to have small independent modules in place (or work towards them) for this to work. &gt; "better" can be subjective if you don't get the way the code is used due to time constraints. That's probably the real problem here. Contracts, tests and good tools for usage search etc can help to get a good grasp on where and how the code is used. Still a lot of hard work in most (legacy) codebases though.
Exceptions are a possibility with any rule. Generally these rules produce better, more stable code, but rules can be bent or broken.
Most people expect that when they log in to their account and click on the big red "delete my account" button (and perhaps confirm it with their password) that it actually gets deleted. I remember the "outrage" when people realized that Facebook's delete button actually only disables your account and then deletes it 30 days afterwards if you don't log in again (whether the data is actually deleted is questionable but that's beside the point). There are legitimate reasons to not *immediately* deleting user accounts since people might have been phished etc. but in that case it is usually enough to combine the delete request with a confirmation email. Most online businesses have no other way than an email address to identify their customers anyway.
Yes and they will have to ticket in to do so unless I find I'm dedicating a whole human to EU bureaucracy. I've had a single request to date ymmv.
The Joy of PHP is a terrific book for beginners
&gt; I suppose people who over comment are out there. I can only speak for myself but all too often people tell you things like *"comments are important, so comment often"* which can lead to stuff like the above. Also, reading [the sources](https://github.com/bcit-ci/CodeIgniter/blob/v2.1.0/system/core/CodeIgniter.php#L100-L220) of [some frameworks](https://github.com/bcit-ci/CodeIgniter/blob/v2.1.0/system/libraries/Form_validation.php#L76-L149) back in the day might have contributed to this notion. &gt; comment on any line that is abnormal or does something unexpected. This seems like a great idea :)
Well said, but you really should have two master DBs in sync to prevent downtime from resizes. Let me know if you guys are interested and I can probably find you a new home cheaply and help you move. We just made the transition for similar reasons.
&gt; 4. Comments. Nuff said. As much as I like how simply you state it, it’s not enough. I’ve had coworkers leave too many meaningless comments. They should provide insight to what a method is doing or explain something that isn’t immediately apparent.
I think your rules are too strict and too formal. there are reasonable exception cases for any of them and I find that for some of those rules the exceptions are either common or too subjective to reasonable expect a team of developers to all agree on. 
I take the opposite approach. Data and code are both liabilities, not adding soft-deletes means less data and less code. When the feature is requested, We’ll add it. I can see though, how your approach can sometimes save a LOT of headaches later.
To learn to program is similar to write a novel, you set the ending and you start from the first page. Setting the ending is not about "**to learn about OOP**" or something like that, it's to define a destination: "**today, I want to show a table!**". It's not rare that your first destination will be to run a simple example : **"hello world"** . Is it easy? Nope, it's hard because you must set your working tools (apache, php, mysql, LAMP, WAMP plus some editing tools). &amp;#x200B;
Ok
1. A good code is a code that could be debug at ease. 2. It must runs and be fast. 3. Be heretic in everything else. To add Interface for every class is cargo-cult, setter and getter (unless they are used) is cargo-cult, DI (unless it's usable) is cargo-cult. 4. There is not such thing as a clear definition of name of a function. However, it must be consistent!. &amp;#x200B;
Learn SQL though. Don't skip it and jump to ORMs, as you still need to know how a good database is organised.
Said the person who ended up wasting half a day hunting down obscure bugs because their one liner didn't account for the awfulness of the code.
I like to use the @param blocks more, so for $escapeMode you could add `Either html or js` and the description could be reduced to `Returns $text escaped with $escapeMode`. It makes it easier to look up specific argument options/requirements and makes the description more succinct.
To add to what /u/jj20051 said, a lot of businesses don't fully understand this and the myriad of exceptions to this rule. There are often very good business reasons and record keeping laws that require that you *not* delete data.
&gt; Never bloat your models. Use Repositories and Services. I thought "fat models" were pretty usual?
That's what we do xD
&gt; Computing power is on the server, I don‘t see why I have to use the browsers power, too. This feels like building a game and saying computing power is in the CPU, and you don't see why you have to use the GPU power, too. 
/u/BerlinBrummie, was referring to a legacy code base, which is what I based my response on. That's where you're mostly to run into issues with being able to neatly hand it off to a one liner.
Then my apologies for misunderstanding.
-10 for good reason. :)
I did give an example, but coincidentally antirez wrote a great blog article about this very topic: https://news.ycombinator.com/item?id=18157047
The worst framework I used is the custom one the last developer used, I call it em_veehPhp. It doesn't stand for anything, it's an arbitrarily chosen case convention, and some random abbreviations that meant something to someone sometime. Remember in include based design, meaningful file paths and URLs are an anti pattern. 🤣
I guess my definition of a "large change" is different from yours. Any additional feature is a large change. Altering text or fixing one line bugs is not.
I have very few hard rules. Here are some things I will comment on during code reviews: - Untested business logic - Overly indented code (often caused by abuse of if-else) - Complex code without comments. Always document stuff that is hard to understand.
No problem.
When talking about frameworks I've profesionally used I'd say the worst is Angular. Not because of design decisions like directives and whatever your annoyance is in the framework itself. I was more annoyed by the constant change and them jumping around in version numbers invalidating old stuff as when you bump a major version you seemingly must try to make an effort to make braking changes. &amp;#x200B; Best? Symfony. Those guys have done incredible things for the PHP community.
Worst: some home-grown monstrosity that some dude wrote 15 years ago that the client was still using. Best: Laravel.
You can't null on a date time column. 
MVP?
I meant this one https://www.oreilly.com/library/view/clean-code/9780136083238/
They’re all terrible in some way. You want simple PHP classes for the most part and then a few libraries here and there (routing, migrations) etc
Can you give me some concrete examples of magic? I've used it so much now that I find it hard to distinguish what looks like magic and what doesn't
I like laravel for how little magic there is compared to other frameworks. I suppose middleware, view composers, DI and things like the service container can seem somewhat magical but all of it is mostly exposed and configurable. 
worst : a pseudo mvc based on XML/XSL best : CakePHP, i like to bake my code :), crud for a model in 5 minutes max, Hash class and Helper are so cool when you build complex UIs
It's gotta be WordPress. I understand they focus on end users but they put the developers in absolute misery. I did a talk (https://ayesh.me/talk/No) that I highlighted WordPress as a project with a focus on end users. For developers though, WordPress can easily bring you nightmares if you have to build a web site where you are used to modern frameworks. 
Best: Symfony, although Zend Expressive is pretty cool as well. Worst: homegrown stuff. Furthermore, I don't like Laravel because I am a purist.
Interesting article, I think I get it now. Sometimes comments are the best way to document certain things, specifically for reducing cognitive load while reading. Thanks.
I too have used this framework.
I also like Cake and have used it for years but after working with Laravel it has become my new favorite. The community is much larger these days as well.
"First make it work, then make it good". Yeah, right.
Right? I completely agree about Angular and I know people who refuse to use it because of that. And for bonus points, mention this in an Angular forum and tally up your down votes. 
Is there a presentation of your talk online (besides for the slides)? 
Once I used PhalconPHP at work, which was a blast. Wordpress, on the other hand, is absolute piece of not-even-once.
Professionally speaking - best Symfony worst Laravel.
Facades are optional.
TIL and that's horrifying.
It simply doesn't provide much useful info. My [MySQLi article](https://websitebeaver.com/prepared-statements-in-php-mysqli-to-prevent-sql-injection#creating-a-new-mysqli-connection) goes over all this and much more.
"Bad programmers worry about the code. Good programmers worry about data structures and their relationships." - Linus
Joomla.
Yeah that's always been somewhat contentious issue and is understandable but like the previous comment said you can easily ignore them. 
Sure, and I don't use them, the big problem is when you receive a code full of them 😔😔😔
Best, Laravel. Worst, Joomla. Fuck Joomla.
Tbh, the version change wasn't as bad as some people make it out to be - they only did it once, and it was basically a wholesale rewrite into a largely new framework. If they'd just given it a new name and presented it as a separate thing, they wouldn't have had the criticism they have now. Besides, AngularJS is an incredibly naïve framework in a lot of respects in terms of modern frontend development. There was a lot of reliance on magic two-way bindings, and the system wasn't hugely friendly towards bundling. I think the decision to EOL AngularJS was absolutely the right one to do, and I think the decision to create Angular made a lot of sense - I'm not convinced by the module system, but the rest makes for a fairly well-designed modern frontend system. Unfortunately, they fucked up the PR with the naming issue, and ended up with this reputation for unreliability and huge breaking changes, which is a real shame.
Worst: Something called "ibase 2.0" ([https://www.interface-medien.de/de-DE/leistungen/software](https://www.interface-medien.de/de-DE/leistungen/software)), used in the legacy web shop of one of our clients. Allegedly modular design, but for some reason the modules are so intertwined that the shopping cart stopped working when the email module broke... Even though there are lots of comments, there is no way to understand the code by reading it, the only way to grasp what it might do is by stepping through every single function call. &amp;#x200B; Best: Probably Laravel
Well I've been using Symfony on pro projects for around 10 years. That said "symfony" before 1.4 was quite a pain :P (I just missed the magic autoloading "before namespace" for a long time, then get used to it, and now there is auto wiring that serves the same purpose).
Wordpress and drupal
Worst wordpress, best slim
First, test the input and return all the cases where the input is invalid. Then deal with the corner cases, then the edge cases. Whatever's left suddenly looks really simple. Reduce cyclomatic complexity and prosper 🖖.
I agree! For a long time I thought I was alone with such conclusions. I feel like the node ecosystem is very immature for building bigger (web)applications at this moment.
For non-ORM code it is always a mistake. It makes database refactoring a nightmare and selecting everything is most of the time not what you want. For ORM's this is hardly relevant.
&gt; Comments. Nuff said. &gt; Commit messages are also comments.
Whenever I’m refactoring/reviewing old code, I have to remind myself, “no matter how bad this is, this made sense to someone at sometime in history”. 
Yeah, the AngularJS stuff was a complete mess, using directives and then switching to components. It was mostly backwards compatible, but you end up with a set of rules about how you can use the framework, with another set of rules about how you *should* use the framework on top. Tbh, the Angular 2-&gt;4 release wasn't a huge breaking change, it was just a transition into a more regular rolling release cycle that, again, should have been handled a bit better. Most people I talked to at the time were able to just update immediately. I think if you dealt particularly heavily in animations it had a few breaking changes, but I think they had a lot of deprecations in place rather than just dropping whole APIs, so it was mostly just a clerical transition.
Yeah we were quite early to adopt community guidelines as the framework was, lacking, in that department at least early on. Johnpapa and toddmotto and everyone else that contributed in the community was really what held that time together for us I think.
Thankfully I've only just picked up the framework recently, I'd worked on Angular (2+) before, but this new job has a fairly aged AJS project that's my main area of concern. Thankfully, working with the more modern stuff, and reading up on the best practices in the AJS world have made my job a lot simpler, but it's still really easy to tell how old any particular bit of the codebase is just by looking at what the "style" is in that particular area - directives vs components, how the module system is used, etc. Currently I'm trying to look into steps to modernise, so we'll see how well that goes...
Whenever I’m refactoring/reviewing old code, I have to remind myself, “no matter how bad this is, this made sense to someone at sometime in history”. 
Worst: Symfony, 10-12 years ago. Ridiculous amount of bloat; for instance, it recursively scanned all (sub) directories for version control meta files so it could ignore them?!? I remember using XDebug to profile a couple of applications, and one of them took 10s of thousands of function calls to render the initial page, the other 100s of thousands. Barely a dozen hits per second could be sustained, whereas the contracts with a couple of \*big\* Atlanta area media outlets were calling for support for spikes of 10s of thousands of hits per second. They lost those contracts and the startup's employee count plummeted from about 70 to about 17 employees -- they only stayed alive by getting into a completely different field. Best (albeit not objectively, but because I got to use it in a project, even asking TWICE for permission): I got off that sinking ship, and got to use my own 60-line micro-framework for a company contracting with Cisco. Size mattered as it was running on a set-top box. It was downloaded close to 10 thousand times from [code.google.com](https://code.google.com) before it got auto migrated to github -- now I'm self hosting it on my own website. I can dig up an address if anybody's interested. Not saying it's general purpose, you will definitely need to bring your own ORM framework, but it could be a good choice for embedding in other PHP software.
If you look at the code that uses that guessing function (the belongsTo method), you can see that \\App\\User::class is the first argument ($related), but if $relation (the fourth argument in the belongsTo method) is null, then it uses this method to name it..
Good luck :)
Also, great to see senior devs also contributing to the discussion! I feel like it's rather rare. Maybe it's more common than perceived?
Slim3 is excellent, used to pair it with elloquent for models but now stick with PDO. Half baked self made solutions. 
&gt; Worst, Joomla. Fuck Joomla. Why, specifically?
which is which?
Oh my...
Best: CakePHP, love their approach and architecture. Worst: I guess Laravel? Not because of the framework itself, but because of the availability and overuse of facades by Laravel devs. Worst non-framework: Joomla. Ain't enough money in the world for me to touch Joomla again.
Codeigniter is fucking horrible. Symfony is right at the other end of the spectrum. 
Worst: wordpress probably. Best: Symfony, but not as a general purpose framework. I just take components I need and wrap it myself.
I like the "No framework" framework, which allows you make a framework from compenents you choose as tue best fit.
Same.
Data is the dominant factor, without data we wouldn't need programs. We need to design data layouts and interactions very carefully to maximize it's usefulness and efficience. A proper API describes the data and how to interact with it. Further unnecessary abstractions or simplifications will likely bend the originally intendet interaction pattern into a differents one. A wrong one, that breaks the promises of the original design. 
writing tests is your metric of an above average dev? lol
Exactly. Just the power savings due to optimisations in PHP 7 must have saved a few glaciers around the world. &amp;#x200B;
That doesn't make it right or good. ;)
The problem with Joomla/Drupal/Wordpress is that they weren't supposed to be frameworks. They were supposed to be CMSes. When people started demanding more features, plugins this, plugin that, etc., they became bloated monstrosities made worse by the scrubs who tried to shoehorn them into something they were not.
The problem with Joomla/Drupal/Wordpress is that they weren't supposed to be frameworks. They were supposed to be CMSes. Then, hack scrubs started demanding more features, plugin this, plugin that, to make them into all-purpose application platforms. When that happened, they became horrible monstrosities shoehorned into a role they were not supposed to be.
 Couldn't agree more on both points. 
Best: Codeigniter Worst: OpenCart - what a cluster that code base is. Lot of fan boi's though.
I too detest Joomla.
Tell me about Slim? I've only seen the front page - what is it like to work in?
This is a common misconception. Anything dealing with conducting financial exchanges will almost always fall under legitimate interest or legal obligation. A demonstrated legal obligation (such as records of transactions) is pretty open and shut. Legitimate interests requires you to demonstrate it is necessary for you to retain the information and that those needs outweigh the interests of the data subjects. The right to be forgotten is not absolute, and depends heavily on the lawful basis for processing. 
Profesionally worst: Codeigniter. Generic Worst: Joomla. Profesionally best: Phalcon. Generic best: Still phalcon 3. 
I'm probably the only one here VERY satisfied about our own framework/CMS/DAL ... Still wondering why/how we got there while others didn't .
I’m (mostly) with you. Ours has kicked ass for most of a decade, and is only now starting to feel creaky. It might be too much just for me, but I’d like to see if I can tighten it up and keep it for years to come.
Best framework: spring Worst framework: Zend 
90% of everything is shit. You may be in the lucky 10%. I personally can't stand most of the popular frameworks as their design is generic, demo-driven and based on fashion trends in the industry, rather than being up to step with the current development requirements or my company's specific needs and practices.
If we're considering design patterns, framework specific keywords and doing things the "X thing way", then WordPress is absolutely a framework. Do you use WP_QUERY in other languages/ frameworks?
I mean in most cases a major version bump is meant to be reserved for breaking changes. That way you know for sure when composering in packages can be absolutely safe in your constraint choices.
One option would be to create one cronjob that runs a script every minute, then that script runs tasks on whatever schedule you like via PHP. It’s how Laravel’s scheduler works. Perhaps looking st their docs will give you inspiration: https://laravel.com/docs/5.7/scheduling
I am a 16 year old PHP Web developer, and I have learned a lot about the following topics: \- Object oriented php \- PDO, MySQLi object, and procedural MySQLi. \- working with forms, CRUD, File I/O, and creating basic applications such as a photo sharing app or a APA citation machine. &amp;#x200B; What are possible other topics that are more advanced that I should or could learn? What should I be able to do to consider myself an advanced PHP developer?
Dependency injection and unit and functional testing are the two things that spring to mind. This is way more important than learning to use a framework, which is another logical next step. 
Thumbs up for the good work. Well ours is still going strong(er), despite being like 13-14 years old (started as a CMS, a reaction to the traumatizing experience with early WP versions). I believe the thing is, it has to be maintained and upgraded constantly, and you might need to refactor the code several times, we did that too. It only got to this neat stage like 4 years ago. But original design is probably what matters most. If it's rubbish, time will tell. Then it's maybe luck if you can even refactor it. Ours is probably as fast in execution as it can be done with PHP, the whole execution tree is very carefully optimized; low on mem; plus coding in it is also very fast. For example yesterday we had to interface our ERP system on top of it, with a new POS system (quite different from past ones) and it was all ready in a few hours debugging included, plus a helper app that sits in the tray and communicates with the hardware (that one is not PHP though). Side note even the core of the ERP was written in just 2-3 weeks over New Year vacation and a pneumonia that kept me indoors (at that time was doing stock inventory, invoicing, cash/bank reconciliation, employee management). We have a plethora of plugins for anything imaginable, for example a flexible datatable editor that adjusts itself around the table structure, and often removes half of the work to be done in a certain project. But I still wonder how/why we got here and why others didn't, why self-made frameworks fail so often I'm probably just an average coder but focused on simplicity, performance and security. Lots of years and countless versions behind though. To me the whole experience is the opposite of whatever anyone else is telling about custom frameworks. 
So heres my thoughts on the framework, while yes you can not do things the Laravel way, and if you doing things to get around things like facades, why even use it? SRP violations, such as accessing and modification of session data from the request object (I assume cookies are accessable and modified from the request object). The Blade template engine allows you call anything from it, which can make it harder to trouble shoot something when seperations of concern are not there. I personally don't care for ORMs for most cases, and Eloquent makes some assumptions about your table setups which is annoying to me. Also the default setting of UTF8 MB4 can cause some headaches with index sizes. Also I heard that trying to use Eloquent outside of Laravel is kind of pain, so that tells me that's there's tight coupling. Good tutorials are far and few between. The ones that are well written are all in with every single feauture and then some.
That is interesting you chose laravel as the worst but Symfony as the best. I love them both personally for their own reasons but am curious why you would hate a framework based off Symfony? Mind if I ask why?
I still use AngularJS, even for some new projects. What specifically makes it so bad?
My thoughts on the matter: https://www.reddit.com/r/webdev/comments/4dlxg5/today_i_hate_being_a_developer/d1sr14t/ Architecturally, Joomla is just a mess to write custom code in. 
Yes, I understand that. Thanks. :)
Yeah, the very first place I worked as a dev we used a CMS custom built by the lead. I’m sure that in some ways it would be seen as laughably antiquated now, but it was easy to use, easy to extend, and it had features I still haven’t seen implemented in other systems almost 20 years later.
Can you share some of those features, for curiosity?
I built a web php framework. Taught me a great deal about how to architect an application. Then I built an API framework. Then a CLI framework. Basically I had to go through that for my own knowledge. 
I feel extremely lucky, tbh. Having the ideal toolset in this line. Anyway it"s built to do the job, business-first, not to meet irrelevant trends or such. I think the success comes from the original design and goals/principles behind it, so you might be right. But frameworks out there are still doing a lor of good, though, despite their drawbacks. Writing full code from scratch would be insane otherwise. 
One I remember was the ability to view a given page at any date, past or future, with the ability to set the presence or absence or configuration of any element on that page, including CSS and JavaScript, by date. So you could schedule the publication of content very easily, and even schedule changes to the design and layout of the site. 
Wow, cool design - never heard of something like that. Doable of you ask me but it might bring a petformance impact with al the database stuff, snippets and recomposing. 
As I said, he was a database guy at heart. He put a lot of work into making sure performance was good. The system served up a couple of dozen high-traffic sites with visitors from all over the world without trouble. I think it would have scaled up from there fine. We had the servers on site, so I know that it was only using a couple of load-balanced web servers and a couple of DB servers, and they would be considered pretty underpowered these days. I’ve lost track of the lead, and I always wondered what he went on to next.
The easiest way is to use composer. Composer is package management software and makes it easy for you to install packages you are interested in. https://getcomposer.org/doc/00-intro.md http://socketo.me/docs/install
I think you're the only one here says good thing about codeigniter. Care to explain it?
Just started my first career software dev job and don’t have PHP experience. We use Laravel and while I’m really enjoying working with it but it’s been a little hard to wrap my head around. Thank god for a good mentor and a boss that understands spin up time is a thing. 
CI was nice back in the day, but definately a stepping stone. Kohana 2 was nice, but I think Kohana 3 made some bad choices.
Error, you misspelled **definately**. It's actually spelled **definitely**. Don't let me catch you misspelling words again!
Hey, ellisgl, just a quick heads-up: **definately** is actually spelled **definitely**. You can remember it by **-ite- not –ate-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey, misspellbot, just a quick heads-up: **definately** is actually spelled **definitely**. You can remember it by **-ite- not –ate-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
It's light and fast with an easy install and config. For what I do - which is small, one programmer, web applications, it is perfect. I am used to the hate. But tbh, to get the hate from other programmers - when they get hate themselves for programming in PHP, is pretty pathetic.
I hope I'm not making wrong impressions here, I still use and maintain CI3 based application today. But mostly migrating to slim3. So it's nice hearing good things about CI3 from other programmers Like you said, CI3 is perfect for junior back in the day when composer is not common. Learn a lot of OOP concept with it. Though many programmers think it's wrong concept of OOP. But it's a good stepping stone when I migrate to slim, composer and other recent PHP development stuff Cheers
This article initially had some critical flaws and had been edited based on my critical reviews. Moreover it took me a considerable effort to convince you that your initial views on such important matters as error reporting and prepared statements were wrong. Yet there is no word of recognition in any of your articles, some of which are mostly based on my research. Whatever their present quality, your works smell.
Cause you made it. To everyone else, there is nothing but flaws.
Best: Laravel Worst: Zend (1 and 2)
Nice. I have been meaning to look seriously at Slim for a while now. I have only been able to get past the first page before other commitments drag me away. CI4 is in alpha currently btw.
composer. just fight me bro. 
&gt; - Object oriented php This is something that you can't really "learn". You've likely learned the *syntax* of OOP in PHP, but actually doing proper OO design and thinking about problems in the context of objects, behaviors, messages, dependencies, encapsulation, and various patterns, is a life-long pursuit of iterative improvement and applied experience. What you need to do is get cracking building complex projects to start gaining experience regarding OO design. 
Nobody will disagree that the transition to version 2 of Angular was harsh, but it was necessary. Everything has settled down since then though. They have recently introduced "schematics" which ensures that future updates will be a breeze. Schematics are functionally similar to Symfony Flex recipes. The new cli command "ng update" uses schematics to update the framework to the latest version as well as \*update your code\* if there are any deprecations. 
Best: Yii2 Worst: CodeIgniter 3 (As there are no restrictions what should go where I have people write huge ass controllers and stuff)
Best: symfony Worst: Prado. I got dragged into a legacy project based on Prado. This steaming pile of shit tries to mimic .net 2.0 mvc ish. To make things worse, the company that started the project made a layer on top of it and made every class final and every implementation of those classes explicit instead of based on an interface. In a few months the application will retire and I will dance on its grave. 
1. Use git how much ever small the project is 2. Use composer for 3rd party dependencies 3. If the team is bigger than 3 use a decent PHP framework so that code structure is consistent 4. Write tests and set CI server for the project 5. Use pre-commit hooks which checks code styling and quality before programer commits his/her code 6. Write short but clear comments while you code so others can understand your code's intentions 7. Use modern IDE so it catches errors and pitfalls early while you code
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Speed, code quality, efficiency and micro optimization. 
* Dependency injection (Why and How) * Design patterns and how it's implemented in PHP * REST API concepts and how it's implemented in PHP * Understand MVC concept, what are PHP frameworks, why it is needed and when to use. * Using composer package manager in your projects * Learn to work with a famous PHP framework like Laravel, Yii2 etc * Writing unit tests for your PHP projects
Learn about SOLID, Design Patterns and optionally Domain Driven Design in PHP. Learn writing Clean Code. Build your own (unit tested) Web framework. Build something non-web-related with PHP. Learning well done OOP alone is a life-long pursuit. I am using PHP for more than 15 years now and I am still learning.
Exactly, it's like building/fostering the culture on how to approach this whole thing.
https://github.com/shieldfy/API-Security-Checklist/issues/6
Sounds like a good coder. This reminds me of old times building an enterprise call center solution, when I had to load and process several GB of data in 10-15 seconds, on an Pentium 3 machine with old HDDs. Like 2002 or so. That's when I learned to optimize databases. It was down to the speed of HDD reading itself. So yeah, even this can be scaled fine. I'm just saying that the base performance is way different with it. And this might be important depending on your configuration choices. For us, instead of renting expensive space from clouds, all we need is a couple dedicated servers and we can run millions of accounts from those. The difference is huge in server costs, in comparison with container-based and other big clouds ways of processing data. (hundreds of times cheaper). But the code has to be seriously optimized for this. You can throw in caching, and further db tuning BUT if you have things that require active non-cached processing, it will be way different as base performance. Databases are bottlenecks. 
Best: laravel Worse: drupal
The documentation was indeed piss poor when I was working on a couple of Joomla projects as well. But what struck me the most was how absolutely obtuse their architecture was. What they called "MVC" was like this tangled knot of shit that was nothing like an actual MVC design. The way routing was handled, and views/templates, was the most convoluted shit I'd ever seen. What would have taken me literally *seconds* in a framework like Laravel, was this hours-long agonizing learning process of trial and error and completely unintuitive design in Joomla. I couldn't fathom how a human mind was able to take such a simple concept and contort it into that convoluted mess.
This thread isn't a security debate whether JWT is secure or not. It's a suggestion request!
It’s really nice and easy to use. Used it for several projects now. It’s lightweight and does not determine the structure of your application, just handling http and routing and it plugs in with psr7 di containers. For small prototypes you can just write function route handlers and for larger ones you can leverage di to write proper controller classes. I used it for user facing websites with twig or plates for templates but also for api’s that just take and return json. It has it’s own built in di container but I prefer to use it with php-league’s container.
That being said, this book helped me gain a number of insights back in the day: https://matthiasnoback.nl/book/principles-of-package-design/ I do believe it might be a great stepping stone for OP.
okay ! this is the thing [https://github.com/revive-adserver/revive-adserver](https://github.com/revive-adserver/revive-adserver) 
https://api-platform.com/
&gt; but all i know is simple php from simple cms &gt; what should i do. Seems like the answer is obvious: do more programming in PHP to gain more experience. Come up with projects you're interested in building, and build them. 
Learn the language, not a framework. Once you know the language whatever framework you work with should be easier to get in to. Every job has a period where you have to learn how to work with the tools the company uses. Don't worry, apply when you feel you're ready, and if you don't get hired make sure you know why not so you can improve on this. Good luck!
i dont know where to start. any leads? all i hear in php is frameworks and other fancy stuff
Thanks! 
PHP is by far lowest paying programming language in the industry. I suggest you should consider learning full stack JavaScript and apply for a junior NodeJS or JavaScript developer. This way you can have a well paid job and a good career. As far as PHP is concerned, you can still code in your free time as a hobby!
I tend to suggest learning via something like Symfony or Laravel, as it teaches good conventions (that are applicable in *any* modern language). PHP lets you play dirty, which is fine for lesson 1 and 2, but beyond the basic syntax the rest is learning *how to program*. 
Makes me wonder what you're missing by not using e.g. Laravel or Symfony. All of the work you're doing seems really good, but if you were platformed on one of those you could probably do even less and remove large chunks of your code, and probably not change all that much.
Sounds like you’re qualified for a junior dev role - go and apply for one. 
If you're talking about AngularJS, as in the 1.x versions, then it's a combination of a lot of things. Purely from a practical perspective, the framework is relatively slow compared to most modern frameworks. It has no virtual DOM implementation under the hood, which means that when you make changes, the framework is directly getting and setting values on the DOM, which has a tendency to slow things down. It also had a whole bunch of things that you probably ought not to use, and odd scope rules that can be difficult to understand. The solution to this is generally to use components, but the AngularJS component implementation is a bit lacking. There are also two-way bindings all over the place, which are useful when you start, but contribute to complete spaghetti code by the time you finish. On top of all of this is the fact that it's just very old, and designed for a web era that doesn't really exist any more. For example, it bundles its own version of a promise implementation that also tries to be a deferred implementation. It has a module system that works well enough, but is at this point almost completely unnecessary if you're using a bundler like Webpack or Rollup. It's all designed so that you can run the scripts you write directly in the browser, but that comes at a cost of ending up with hundreds of tiny files that all need to get loaded in the browser and downloaded one-by-one. Even the implementation of jqlite hails from an era where the browser DOM API was sorely lacking, which is honestly not the case for most developers these days. From a tooling perspective, it's not great (my IDE recognises that kebab-case and camelCase are usually the same thing, but can't automatically jump to the definition of a custom element in the HTML source). From a documentation perspective it's pretty bad, and the third-party advice tends to be from all over the place. It's also no longer maintained, I believe, which means that any security issues that come out now will no longer be patched. On the other hand, if you're talking about Angular 2+, with TypeScript and observables and that sort of jazz, then I think it's fairly good. It's not my favourite thing to work with sometimes, but it solves almost every issue I have with AngularJS (apart from still having a separate module system to that of my build system, but oh well...)
Now they're correcting each other.
Once you've grasped PHP to a good level start expanding your skill set in other areas. AWS, PostgreSQL, deployment pipelines, maybe some front end bits, etc.
Learn the details of HTTP. Master mysql. Learn details of networking. Learn about security. 
Performance, monitoring and testing are endless in terms of how much you can improve. Everything that's behind the marketing bullshit word of DevOps is actually really important once your prototype has some decent user base.
That's a good list. Some (if not most) of these stuff can be auto detected, enforced and fixed by proper tooling. &amp;#x200B; \&gt; Commit early, commit often. I used to fight so much with my team on this ahahah
Thank you!
Don't rely on humans following conventions (hint: it never works). Cherry pick as many good tools as needed for your code and architecture to stay relevant. Don't over engineer. Always start with a V1 and improve it step by step. Never refactor too many things at once. You can almost always find an incremental way that will force you to take care of every possible outcome. There are many good rules in terms of architecture but nothing come close to experience (making the mistake to understand why this design pattern exist in the first place). That's in fact the main difference between a junior and senior dev.
No tests? You can use it for a personal project but not in a professional environment.
It's not mine. I just came across it while I was search in Github!
???
+1 for Phalcon. Pleasure to work with.
Zend 1 ? Why ? I used Zend 1 in 2018 (Outdated projects), and it wasn't THAT bad.
A self made one, such a mess, and it's still in production as e-commerce platform for a couple of giant sport gear retailers. Then I would say cakephp1, still on production for another company I used to work for, we couldn't upgrade has they had changed so many things in the lib itself that was impossible, plus they were (probably still are) having vendor/ on version control, as they did change some stuff on some vendor code too. 
This is by far the largest load of bullshit I've ever seen.
Hi! Can you describe more detailed about how you write test with database operations? Which framework are you using? Perhaps there are articles with examples that you could recommend?
Thanks for sharing a great video
Best: Nette Framework Worst: Joomla or Magento
Have you ever heard of ASP.NET?
I often tell the juniors I expect to see at least one commit a day. Doesn't matter if it works, doesn't matter if it's all psudocode...
You did I your deleted comment. Your response to someone saying there was too much magic in Laravel was that you can understand DI, viewComposers and middleware magical. These specific patterns are well understood and have been around longer than they have been in Laravel.
You dont seem to grasp how the event-loop works. It does not matter how much you push your ignorance, PHP will always block because PHP is 100% sync, and has no notion of async in its core libraries. When you use PHP core libraries with any PHP based event-loop you are up for a bad time. Maybe you dont care, but your users will.
Yeah I told them that too ahahah "push before leaving the office FFS". How can we keep track of their progress otherwise.
There's a principle that can be used to guide your design process: _Risk_. Over-design can be a risk, but so can under-design be. You can judge it in each case by doing a proper risk analysis. [Here](http://www.methodsandtools.com/archive/agilesoftwarearchitecture.php)'s an article about risk-driven development.
Further reading https://hackernoon.com/want-to-be-a-web-developer-learn-node-js-not-php-dc298154fafd
I have dabbed with many ecommerce platforms, and in my opinion, OpenCart is amateurish, but at least it's pretty simple to figure things out. Magento on the other hand is bloated peace of shit nightmare I don't want to see ever again.
I don't disagree, but at the same time, Laravel is not a CMS. If it were, it might be different.
WordPress is a piece of insufferable garbage that will refuse to die until somebody can come up with something to replace its deceiving ease of use and include a plugin market (where plugins actually get properly vetted) Laravel, Symfony and their collection of alikes are the best. When somebody makes a CMS for Laravel or Symfony that can also be used by Basic Bridgette from Marketing will be the day I start pushing it for more common use. 
The worst I've ever used (but perhaps not worst, structurally speaking) was Typo 3. God damn what the *hell* is that thing? It's like a good CMS had a three day-long fever dream and then decided to implement the contents of that dream as features. Best is, as always, Laravel
Lol sorry, you're right. I assumed you couldn't. Thank you.
Scared? Do not apply. &amp;#x200B; Find 10 other job postings for PHP dev, ones that may not be such a good looking to you, do it for the experience of... job seeking and job interviewing. Then apply for your dream job ;) (Also take note of questions asked about your CV or stuff that should land on CV. Refine after each interview)
Worst: WordPress. So badly written, and worst for security since PHPNuke. Best: would have gone with Laravel had I not gone down the python/dango route. Phillip.
Consider just-for-testing in-memory repositories for those X's. (It may even allow you to drop overall # of integration tests if now you test only real repositories) (If X's are only repositories, consider doing such tests in transactions - with rollback at the end of each group of tests. Alternatively check if your DB supports purely in-memory tables.)
Good 
Spam. And the *eg comments seem spam too
Ah, "uncle Bob". Yeah, I guess I should read him finally.
Is a database really that much overhead these days?
You can infinitely call -&gt;first() on DB models. -&gt;first() pulls back the first model, then calling -&gt;first() on that returns the first model in the table... Not always surprising except the cases where you're expecting a collection, and call -&gt;first() on it only to get an essentially random object from the Database.
Functions should only ever return one type. - This has improved the structure of my classes to no end. If you need to return false, null etc maybe just throw an exception instead? The calling code has to check it anyway, and it's a lot more obvious to do that with exceptions than a multitude of if (false === $model) { ... } statements
Nice talk. &amp;#x200B; Pretty much sums up my thoughts on how important constantly refactoring is. Unless you like controller methods with 250 lines :D
Apply. Learn the language. Don't rely on frameworks. Little over three years ago I was just graduated from a university of applied sciences. I basically learned very little there, or I had no interest, but it was mainly C# there. I did very little programming on my on, mainly some Wordpress \\ Drupal template development and basic JavaScript. I didn't know much about classes, inheritance, method visibilities etc. I applied for a job at a start up company (just me and the boss). Got the job. Worked 3 years at the company and we basically wrote all the code and SQL manually. We didn't rely on other people's libraries but rather we had a custom framework ourselves. CMS, e-commerce, custom solutions, API's.. basically anything web related. Three years I worked there and now I'm building my SaaS model web platform, working at a bigger company as a developer where my skills were immediately noticed and I even got a pay raise very soon due to my performance. It scared me applying for a job because I had very low experience but it was totally worth it. Ofcourse not all jobs are like that but if you believe you can learn and you're passionate about programming, do it! Just don't rely on frameworks. Learn the basics.
did you take into account there is a fairly small limit for the number of entries in a limit in most filesystems?
oh wow it's 2008 again
Oh, great, more spam
Why not use SQLite for small scale databases?
Best: Symfony - Easy to add components, Doctrine was great, not too much magic, easy to break apart bundles. Worst: Laravel and Phalcon. Laravel: Inherited a terrible project with facades, blade injected variables from everywhere, all the helper functions that I had no idea what they did. Also Active Record is a nightmare once you get a ton of tables and so many joins/relationships. Phalcon: It was so hard to debug. We ran into a Redis error with their Redis library that caused all reads from there to take up to 100ms. If we plugged in predis and made the same calls, it was sub millisecond. Since the library behind it was written in another language and we couldn't dive into the classes and debug, it was terrible. Also we never found a IDE/plugin with good autocompletion/helpers for it. Since the project needed to be quick to respond, we ended up scrapping it and writing it in Go.
It's a Drupal Commerce application, and Drupal has a concept of "Kernel tests". Which are a "layer" above Unit testing that allow interaction with Drupal's service container and database layers. It's called a Kernel test because it works with a minimally bootstrapped system and the wrapped Symfony HttpKernel
composer isn't a framework...
Just apply. In all honesty, since you're a junior, I don't expect you to do much. I hire most of my juniors based off if they are willing to learn, aren't annoying and don't think they know it all. In all honesty, I can probably get out projects 50x faster than you with less bugs, more tests, nicer code and better scalability. So I'm hiring you to be dependable and help out on small pieces of code and learn from me. I'm hoping in a year or two you turn into someone that can help me do projects, not help me too much right now.
Partially php but smarty. Just love separating code from design
worst: Magento, hands down, 2 years of experience working with it, and I fucking hate it with a passion. It should be banned by geneva conventions. Then comes the merely bad: Expression Engine Then comes the annoyances: Drupal Then comes the starting to enjoy: Laravel Then comes the surprisingly better than most people give it credit for: Wordpress And that's the extent of what I've worked with in PHP and my rankings. I haven't worked with anything professionally (in php) that I would go "damn, son, this shit is the taco salad!" But I definitely have "don't mind working with to varying degrees" Now, if we extend beyond php... React is awesome for front-end applications, paired with a few other things like React-Templates, React-Redux, React-Router... Can take a bit to get used to it, but once you do the whole flow works really well.
What you say is stupid, Netbeans is not outdated and is completely FREE! I work with Netbeans from 6 years as freelance and I develop each project with this fantastic IDE. PHPStorm is overpriced (200 €/year) for a small business, so for personal use...
Improving the PHP language itself will make many old use cases of eval() go away. One example was the famous anonymous function/closure, now it’s been available to use since PHP 5.3. Another one I can think of is dynamic traits, in which you can use traits on the fly when instantiaring an object from a given class, this is made possible since the introduction of anonymous classes. PHP has come a long way, but there are still improvements that can be made to make the language more elegant, expressive and consistent. 
Well /u/DavidsJon, you and the first replies to the topic were all accounts that only existed for a few days. No comments, no karma. The two replies both are accounts ending with Eg, so probably so (semi) automatic replies to try to get some traction on your post. So you can cry all you want, I’m still warning other users even if you think my reply is spam. Not that I value your opinion in any way. 
2 hours for PHPStorm, plus 1 hour for Abobe products, plus 1 hour for Spotify, Netflix..., plus plus plus... Let me drive my business. I do not like to spend my money stupidly, when I can have the same (or something that is enough for my needs) for free. For this same reason (and not only this one), I will try Affinity's products to replace Adobe (i hope).
Just recently I created a pill request (a typo but sounds good!) to remove one from a code I noticed here in this sub.
Reminds me that there is an eval/create\_function in [phpseclib](https://github.com/phpseclib/phpseclib/issues/1293#issuecomment-415033946), which looks like not possible to fix with pure-PHP codes?
Kinda disagree. It's third load I've seen this month -- OMG … I'm so sorry. One of my manglement team left their cage last night without us noticing and they've been throwing 💩 at anything they see. /joking 
I totally agree with @Hall\_of\_Famer. Long life to Netbeans!
I also like CodeIgniter. It's small, fast and well-documented. A lot of people dislike it as it doesn't stop the programmer from shooting themselves in the foot. I think that's fine - that's a failure on the part of the programmer. 
eval is only used for the performance gains from the opcache there. Refactoring away from eval would be a huge performance hit.
Can you elaborate on how eval speeds the code up?
Thanks for clarification :)
Because reflection is expensive
I'm using it for [strange stuff](https://github.com/preprocess/pre-plugin/blob/74bf7893cea59077cca120ca73987c0297820efc/source/functions.php#L52), at the moment... In this instance, it's to execute base64 encoded source in a separate process, to load an isolated set of Composer auto-loaded dependencies.
you can also checkout https://github.com/apioo/fusio which helps to build REST APIs
&gt; #Some Example Uses &gt; User Login System Well there's no way this can go horribly wrong
 eval('$func = function ($_action, &amp;$self, $_text) { ' . $init_crypt . 'if ($_action == "encrypt") { ' . $encrypt . ' } else { ' . $decrypt . ' } };'); return $func; I don't see how reflection would be used instead of `eval` here. Looking at how $encrypt etc. are created, why aren't there just functions for all the modes, which should be better for the opcode cache than using eval?
https://i.giphy.com/media/fxI56tbwBxBNhpg1J8/giphy-downsized-large.gif
You do you. 
The functions that are being dynamically created aren't just mode specific - they're key specific. The function that the `eval` generates for AES with a key / IV of "zzz" / "zzz" is different than the function that it generates for "aaa" / "aaa" and the way it's generating these key specific functions it's able to achieve a significant speedup.
Thanks for your time 
Well, question 1 makes no sense whatsoever and doesn't include a correct answer in the list of choices. I hope it gets better.
Newsflash: badly written code can be exploited. eval() or no eval(). 
Aww it says there’s a playback error
Look at the phpinfo() output.
At work our app loads the workspace of a customer using the subdomain. Each customer has their own database. To allow running Doctrine Migration commands on specific workspaces, the classes of the original migration commands are parsed and (after fixing class imports) a proxy command which adds a parameter option to define a workspace is added. The original methods of the migration command then have access to the workspace option, which in turn loads the correct database.
2) Wouldn't care if people didn't know this. Would be more worried if they wanted to use PEAR today. &amp;#x200B; 3) Depends, people seem to forget that you are perfectly fine using PHP only as long as you're a strict backend dev which we actually see a lot of with js frameworks and mobile apps. &amp;#x200B; 8) Preferably using class names and namespaces. Composers autoloader? &amp;#x200B; And no I'm not really into the "oh but this is for beginners and Composer is too hard". Why teach them the wrong way to do things first? Fixing all the wrong ways to work and think is hell afterwards.
Care to explain the choice of using base64 encoding? 
Is your code fully test covered, stress tested, peer reviewed and fully documented? Is anyone that is going to start working with you instantly going to be familiar with the router, db abstraction, view rendering, dependency injection container, service registration, session integration and form handler? I'm guessing no, and that's reason enough to use a framework. You will spend weeks writing all this code where you could have just got code that was written by people so much smarter than you and is totally tested and used by thousands of other sites. Not sure why you reinvented a crappier version of the wheel.
oh my.
It's all the autoloading of shit going on. I have completed a few components, modules and plugins but every time I have to go back to it... Ugh. 
&gt; Because reflection is expensive Citation needed. I have a hard time imagining how instantiating an object could be slower than invoking the compiler.
It's just the first thing that popped into my head when I was looking for aw ay to represent multiline content without serious character escaping. I'm sure there are a myriad of alternatives...
In that context
Brilliant reply. You have strengthened your argument profoundly.
Company I used to work also had homegrown frameworks that were leveraged over multiple products over 15+ years. It takes a lot of effort and love to maintain those, and occasionally decide to deprecate some parts. My guess is the difference in your case is the longevity you've had doing this work, while many projects are done as one-offs, or don't have a dedicated maintainer. 
&gt;Note also that eval only execute PHP code. There does not need for the opening tags &lt;?php. This explains a number of situations where you can read the following code : &gt; &gt; &lt;?php &gt; eval("?&gt;$str2"); &gt; ?&gt; &gt; &gt;The closing PHP tag is necessary to close the opening tag from eval and let PHP open again the script from inside $str2. For example, when $str2 contains '&lt;?php $variable + 1 ?&gt;'; I’m speechless.
But it’s effective and efficient for your team, and that’s really the goal for any system at the end of the day
&gt; is there anyway to either get MYSQL working, Not with 7.2 There are a few workarounds, but the best choice is to downgrade back to 5.x.x You could also rewrite the mysql functions, which will possible introduce bugs.
If any external input can go into an eval call, it can possibly be exploited. 
Thanks for the response. Was hoping someone found a way to load it. I can't get the page or wp-admin to load because mysql is no longer supported, so will have to find a way to upgrade Wordpress manually.
Thanks for the reply. I'll have to try upgrading Wordpress manually. Was hoping someone knew a way to get mysql working.
Thanks for the reply. I'm going to back up the folder and try upgrading Wordpress manually. Will see how that works.
I am trying to conceptually grasp the interaction between php and the likes of vuejs/react. I have a bunch of questions in mind but if anyone can clarify these two, I would appreciate it: * Do you always need to run two servers, one for node and one for php? That's quite obvious when php is only set as an API, but is it the case in general when using these js libraries for front-end? * Vue or React can also do server-side rendering. Does that work alongside php? I have seen numerous Laravel/Symfony integration and a couple of Slim ones too. Any particular recommendation you might have, especially if it's more generic (less framework oriented)? Thank you in advance
Probably an ancient version of WordPress using the old Mysql functions. These were deprecated at around the same time the dinosaurs went extinct. 
Yes, but to those following STIGs....it's not 'eval', so you're OK! This is a nice work around...
Upgrade WordPress first. It should have compatibility for older php versions.
Yep, that's exactly the problem. The person responsible for the Intranet before I took over didn't bother upgrading anything, so now I'm stuck trying to get everything working. Not necessarily complaining, looking at it as a way for me to learn how to setup servers and get everything working.
No experience with WP itself but I would suggest installing the latest PHP 5.6, upgrading WP to the latest version on that, and then upgrading it back to PHP 7.2
Precisely.
Indeed it needs ongoing maintenance and upgrades from time to time. But today, it's not an effort anymore to maintain it, on the contrary - rather pleasant things like adding new stuff or further optimizing certain parts. It has a certain maturity, but there's always room to improve, of course. I think many coders over-complicate stuff. And if you add perfectionism into the mix (way too common) plus coding fashion and trends , it's a recipe for disaster for any homegrown framework on mid-term. I always stick to doing the job, end of the day, shortest and most reliable path. Get things done. And I only hire people that get things done.
You want to do that anyway. If you're still running a version of wordpress that's so old it doesn't even support PHP 7, then it's literally a ticking timebomb. Actually I'd be highly surprised if it weren't already compromised and sending out shitloads of spam or something without you knowing. 
It's a bit worse (somehow): [Declaring a function called __lambda_func() completely breaks create_function()](http://phpsadness.com/sad/39)
How is this even related to any backend technology, let alone Drupal? There’s nothing apart from the title and a tag used for the article that has anything to do with Drupal or PHP. 
Agreed on all points. Letting a privileged process take input form the outside world is is dangerous. In addition i will admit my knowledge about the capabilities of Linux ability to delegate privileged access is limited. I initially built the project because I needed a way to get reliable returns from commands executed on remote systems over SSH. Allowing for root access was a side effect. However i disagree there is never a need for a shell, exec(), shell\_exec() and proc\_open() do just that, in an less interactive way. I also am not of the school that believe that because something can be abused it should not be built. Software it will be abused, period. There is a [single line](https://github.com/merlinthemagic/MTS/blob/c52288df62ed0496cf6510a39fd8cacebf794694/MTS/Common/Devices/Actions/Local/Host/Shell.php#L67) of the Lib that requires Python to spawn the shell environment as the regular apache/www-data user. If the web server should never be able to gain shell access, python is where we have to fix it. &amp;#x200B; &amp;#x200B;
Yes, thanks for the tip. It is not the case that I am passing user-supplied data to an eval call.
Best way, by far: Find a mentor who loves teaching (like me!) and dedicate to fastiduously coding your own projects with the mentor's insights for at least 6 months to 1 year. Then seek out bona fide work. Worst way: Read online tutorials and immediately attempt to write Wordpress plugins :-/
9/10. Excellent form. \*golf clap\*
What's a good way for me to write and test PHP and MySQL stuff while I'm sitting in a vehicle riding down the road? 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Should this be in /r/PHPhelp? Did you install PHP 7? If you're running Windows, did you read the PHP Installation instructions? [https://secure.php.net/manual/en/faq.installation.php#faq.installation.addtopath](https://secure.php.net/manual/en/faq.installation.php#faq.installation.addtopath)
I think i tried something like that &amp;#x200B;
Roughtly about 60% of the time is spent in jms and 30% on doctrine overhead (about 3% on the actual SQL query). That's unfuckingbelievable. 10% is spend on the actual app (including the above query), including bootstrapping zf2. All this when a json_encode() of SQL results loaded into arrays would have been just fine. I'm literally loading and serializing a few hundred to a few thousand db rows out of one table for the simplest API possible. Beyond that, it just stops responding in time. Worst architecture I've ever seen and I've worked with magento, zf, and a bunch of other garbage. 
Do you see the location of your PHP binary in your `$PATH` variable?
Lol. You got that right. 10x what is spent on the actual SQL query is spent on the doctrine overhead. That's another fucking piece of garbage that should be banished from the face of the earth. What the fuck are those idiot developers thinking? Obviously not about profiling. Fucking garbage. 
Plugins and Wordpress “frameworks” is actually how I learned. Not the best or worst way but ....
I added it but still the same 
I was surprised that there wasn't a PSR for this, but I need an interface that I can import. If that isn't viable, which interface would be best? Cartalyst uses the following: - ArrayAccess - Countable - IteratorAggregate - JsonSerializable I'm guessing IteratorAggregate or just make my own.
Yeah, I oversimplified. It's actually: eval('function __lambda_func(...)'); followed by: runkit_function_rename('__lambda_func', "\0lamba_$idx"); It's.... special.
There is no kenmeta. I have, however, looked at the code referenced by /u/jfcherng and all I can say is whoever is claiming it can't be done ever so much better with closures and without sacrificing performance profoundly misunderstands closure binds.
This is the post he's referring to: https://www.reddit.com/r/PHP/comments/9mfetd/the_land_where_php_uses_eval/e7ef4x7/
I don’t think you understand what we’re talking about here, this is about the language itself. What keeps you from implementing async core functions? It’s C! PHP is not 100% sync, check out stream_set_blocking, stream_select and generators and stop talking bullshit. It just lacks an event loop and a language feature to pass execution contexts around other than generators (which are made for different use-cases), which would simply be async/await and/or Promises. You’re basically saying „You can implement an event loop with C for JS, but you can’t implement an event loop with C for PHP“, do you really not understand how stupid that sounds?
&gt; It is unclear to me how one could speed that code up but if there's a way I'd love to hear it. Do you have a benchmark script? I'd love to show exactly how it can be sped up. Several claims of 35% have been made with no data to back that up. If I'm going to invest time in rewriting this objectively ugly and unparsable mess, it'd help to be starting from the same place in defining "performance".
Just wrote a benchmark script. I'm seeing a 25% speedup myself. Here's the script: https://pastebin.com/ZJ6cDxuT To toggle back and forth between the eval approach and the non-eval approach swap the commented out line: BigInteger::setEngine('PHP64', ['Reductions\Barrett']); // 0.8073s //BigInteger::setEngine('PHP64'); // 0.6459s Quoting one of the phpseclib author's posts, "_If you can think of a way comparable speeds can be obtained using pure-PHP code and without the use of eval [TerraFrost] will pay you $500 USD PayPal_".
Oh. To be fair, that was Examo making that claim - not me.
I will be messaging you on [**2018-10-16 00:30:30 UTC**](http://www.wolframalpha.com/input/?i=2018-10-16 00:30:30 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/PHP/comments/9mfetd/the_land_where_php_uses_eval/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/PHP/comments/9mfetd/the_land_where_php_uses_eval/]%0A%0ARemindMe! 7 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I'm not sure we're talking about the same code at this point. How does changing the big number implementation shake down to the selection of symmetric cipher implementation?
They both use `eval`. The benchmark scripts utilize distinctly different parts of the code (as evidenced by the `use` statements).
It may well be, looking at this is reminding me that PHP7 still needs some performance love on the function call overhead front. To admittedly shift subject for a moment, this must be infuriating to try to maintain.
This should really be in /r/PHPhelp You are not really helping. If you want us to help you, at least make an effort to provide the information needed. /u/SaltineAmerican_1970 asked you if you read the instructions and even pointed you to the FAQ about adding the PATH, which is, after all, the error you are getting. "You think you tried something like that". Not really helpful. 1. You need to read the docs. 2. Then add PATH as stated. 3. Then restart computer as stated so the environment variable is updated to reflect it. It sounds like you just added the path, and expected it to work. You need to restart the computer, which you would have known if you actually read the docs. If that doesn't work, and you are still getting the same error, then go back reading or tell us exactly what you did (or even better: r/PHPHelp or google it), because right now it seems like you are not doing what the error/docs/redditors are suggesting.
Anonymous functions: How *not* to implement them.
Thanks but, I don't think I'll be able to do this with a SQL query of any kind. In my example, I need to first group the children, calculate a figure for each group, then sum them all together. (For a couple of values). Sorry I wasn't more clear originally.
That's up to TerraFrost lol but I think $500 is a small price to pay for improvements to PHP core! According to the PHP DocBlock header, his email is terrafrost@php.net. I'd chip in!
Also, in case you were curious, My delta for Blowfish-ECB (haven't taken the time to do all algos/modes yet) is: 21.540 seconds for 20 iterations of encrypt using the eval approach. 22.559 seconds for 20 iterations of encrypt using my non-eval approach. That's a bit shy of a 5% performance hit, and given the context of the eval use, I still can't fault the use case. Any anyway in full-honesty there's some limiting factors: 1. I'm only testing the 64-bit "it's safe to do 32bit math without worrying about floats" path. 2. I'm only working with 1MB of data (using your benchmark script), that gap will likely enlarge with more data. 3. I'm adding in some memory tricks which may be applicable to the eval method, so that's not 100% fair. Bottom line; I think I can make this faster, but not unless I leave eval in place.
I just got pinged about this. This is pretty cool! phpseclib wouldn't be able to take advantage of any code that exclusively worked on 64-bit systems but still... I'd love to see what you come up with! &amp;#x200B; If you email me your PayPal address I'm down for sending you the $500! As @kemmeta pointed out, my email address is [terrafrost@php.net](mailto:terrafrost@php.net). &amp;#x200B; Thanks!
Honistly, There is no worst way to learn, as well as, how are we measuring this metric. Alot of things can contribute to a best or worst way. * Security * Coding style * Methodology * Practises * One mans opinion The answer to the best way to learn, At your own pace.
Hey, DrWhatNoName, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Would the `iterable` pseudo type work for you ? http://php.net/manual/en/migration71.new-features.php
I don't see the issue, this should be easy with SQL. If you share some schema on http://sqlfiddle.com/ I'll have a look.
&gt; i disagree there is never a need for a shell, exec(), shell_exec() and proc_open() do just that, in an less interactive way. True, and very unfortunately so. It doesn't need to (and shouldn't be) this way. On Linux with C, for example, you have the [execve](http://man7.org/linux/man-pages/man2/execve.2.html); it *does not* invoke a full shell, it only runs exactly what you ask it to. In fact you can see that `proc_open` [goes out of its way to invoke a shell in the source.](https://github.com/php/php-src/blob/8d3f8ca12a0b00f2a74a27424790222536235502/ext/standard/proc_open.c#L839) because the underlying OS exec stuff php uses to build its proc stuff doesn't automatically invoke a full shell. What does this mean in practice? Well for one example: &lt;?php proc_open("echo 'foo' &gt; some_file", [], $pipes); // this will invoke a shell that will no only find and run the echo program, but will also redirect echo's stdout to a file, creating it if it doesn't exist and truncating it if it does. Any other shell language magic could also occur depending on the argument passed in to `proc_open` . execve("echo 'foo' &gt; some_file", NULL, NULL); /* this will cause a failure, because there is no file with the literal name `echo 'foo' &gt; some_file` */ Why is it considered bad practice? Because the shell has a lot of tricky magic in it. So much [you can't reasonbly hope to sanitize any user input that'll be subjected to all of the shell's magic.](https://gist.github.com/Zenexer/40d02da5e07f151adeaeeaa11af9ab36) It's a problem [that goes beyond escapeshellarg](https://en.wikipedia.org/wiki/Shellshock_\(software_bug\)). Fortunately there is salvation: `pcntl_exec` doesn't invoke a full shell. &gt; I also am not of the school that believe that because something can be abused it should not be built. Software will be abused, period. True, but why tempt fate if you can easily not do so? I'm not going to tell you that you should entirely disable the root account and all full-access sudoers on a system before considering it good enough for production even though that isn't incorrect security advice. Why? Because doing it that way costs more in effort and the odds of it being the problem that does you in are hard to argue are worthwhile relative to the costs. But not running a full shell? What full shell features do you actually use? Probably none. &gt; . There is a single line of the Lib that requires Python to spawn the shell environment as the regular apache/www-data user. That line doesn't require running a full shell, so I'd personally recommend preferring `pcntl_exec` for it because that right there avoids not only any issues with security but also cuts some overhead. Also, as per the prior post, it shouldn't need you to run it directly as root. Since you're already requiring python be present on the machine anyway it'd probably make a reasonable amount of sense to just write a small service right in python for that component, but eh: I understand that can be a bit much for just one thing.
If you really want/need a new PHP and don't want to change all the `mysql_` calls everywhere you could use something like [https://github.com/bAndie91/mysql-compat-php](https://github.com/bAndie91/mysql-compat-php) or [https://github.com/combro2k/php7-mysql-compat](https://github.com/combro2k/php7-mysql-compat). I have not used either though, so I can't say if they actually work without problems. 
As others mentioned, doctrine collections is the one that is most widely adopted, at least in code that uses symfony. 
Do you mean for the php-ds extension's 'Collection'? That's available here: [https://github.com/php-ds/polyfill](https://github.com/php-ds/polyfill)
If I see `array_merge` in some kind of loop which collects data from the loop, it's a sign there could be a performance bottleneck. I usually avoid array_merge unless I know it absolutely won't matter.
Oof, that's expensive.
Php 7+ yes , I am running it on my system and it's in testing phase as of now. 
&amp;#x200B; &amp;#x200B; I am using schemaspy for mapping out relations between tables as of now, don't know how to do it with php though, even if there was a way, it would not have been easy to figure out what part of the whole thing is business logic and what part is additional code added by some frame work. I learned recently that multiple php frameworks were used while developing revive adserver. 
I stopped reading after question 2: what is T_PAAMAYIM_NEKUDOTAYIM? If I were given that question in a job interview I could answer it but I would seriously start doubting if I wanted to work there. Why would I want to work for someone who thinks trivia about legacy error messages is a good way to test for PHP skill? I mean T_PAAMAYIM_NEKUDOTAYIM, if it even still exists at all, is now only in the C source code of PHP, and I highly doubt that knowing all the internal parser token \#define names by heart is what separates the pros from the amateurs.
Thank you for comment!
[removed]
**Please Support us by disabling your AdBlocker.** How bout no. Setup a trial and then charge me instead if I deem the service good enough.
I wish I didn't start off by learning Wordpress way back. My reincarnation would have been so much easier.
*session_register* my ass! I won't even flag this as a spam, as it's so hilarious to read.
Cached text-only version that doesn't complain about your adblocker: [http://webcache.googleusercontent.com/search?q=cache:U-LUsAyGg9gJ:https://www.onlineinterviewquestions.com/core-php-interview-questions/&amp;hl=en&amp;gl=de&amp;strip=1&amp;vwsrc=0](http://webcache.googleusercontent.com/search?q=cache:U-LUsAyGg9gJ:https://www.onlineinterviewquestions.com/core-php-interview-questions/&amp;hl=en&amp;gl=de&amp;strip=1&amp;vwsrc=0) 
The terrible english in that post makes my headhurt.
I use this combo for a project myself and until now I am happy with it. Eloquent outside of Laravel works just fine nothing to complain at the moment. But like I said just used it for one project yet.
&gt; ease of use ``` array_filter( array_map( function ($element) { return $element-&gt;foo; }, $array ), function ($element) { return $element &gt; 2; }); // vs $array -&gt;map(function ($element) { return $element-&gt;foo; }) -&gt;filter(function ($element) { return $element &gt; 2; }); ``` (I admit that `foreach` is more idiomatic PHP but I prefer the functional/declarative approach)
I just disabled javascript on the site, then had a good laugh at those questions.
Worst: CakePHP 1.2 Best: Symfony 2/3/4
Congrats on releasing. You are a brave person.
There are only a handful, literally two or three that I'd use. If I'm not sure of the ability level of the candidate and it's a more junior position I'll ask about how to get the length of an array, because that should be second nature. I'd also potentially ask about XSS, to see how firm their grasp of security issues is. But my preferred go to question is to ask them what their favourite features in PHP 7 are. It's more open ended and it lets them lead the discussion (or alternatively dig themselves a hole).
\`array\` is just a concrete type, right? How can custom type pretend to be an \`array\`? Will \`array\_reduce\` &amp; company work with such imitation?
there's no debate, JWT for state is insecure and pointless. ymmv as long as you refuse to look at the odometer tho.
&gt; How can custom type pretend to be... How can you rely on that everyone would use a "custom" type in a way that OP is referring to? If you need something to be of a custom type, you would bundle that type or add it as a dependency.
Write unit tests. Use some tools which can improve your code quality and enforce code conventions like PSR1 and PSR2. e.g.: [https://github.com/phpro/grumphp](https://github.com/phpro/grumphp) [https://github.com/vimeo/psalm](https://github.com/vimeo/psalm) [https://github.com/FriendsOfPHP/PHP-CS-Fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer)
Frankly, first approach is more extendable. You could define \`pick(property, array)\` and then the code is: array_filter( pick('foo', $array), function ($element) { return $element &gt; 2; } ); If we had good operators we could have a \`(&gt;2)\` "shorthand" for comparator, but still we can have \`gt(2)\` that's actually higher order function that produce final comparator, right? Then our final code is: array_filter( pick('foo', $array), gt(2) ); But, that's still not entirely right. After all we want to filter pick property first, then filter right? So let's have \`pipe(f1, f2, f3... fn)\`: pipe( pick('foo'), filter(gt(2)) ) It's only, your version for fluent interface based API is final. No radical improvements are possible. But with function based interface there is still hUUUUUUUge room for improvements. HoFs for the win.
thank u
How is this different from the other 30+ already out there?
Interesting read, thanks! 👍
That's a very good rule-of-thumb advice. To expand on this from experience: - in case you return an `array` but it may happen that the data isn't there, don't return an empty array in the error event (which likely evaluates still properly in `if` conditions) but use `null`. This also allows you to declare the return type `?array` - but try not to return arrays as bag of unstructured data, a class / data transfer object may be more appropriate :-) 
&gt; Cherry pick as many good tools as needed for your code and architecture to stay relevant. 👍 I guess the term is: automate what you can automate. Example: Code format? Use a service or tool _automatically_ fixing the code (create a commit on top) and don't bother expecting everything fixing it manually. Everyone makes mistake and this removes friction from code reviews from step 0.
&gt; I should know if the codes are responsible for wrong results during calculations &amp; to be honest it isn't. It seems you don't, since your technical explanation doesn't make sense at all. &gt; The coffee itself isn't that intelligent enough to know when to make the errors. It has to be architecture of the language- php. It can't take several tons of calculations in few seconds devoid of errors(miscalculations). What's the "coffee" here? CoffeeScript? Or an autocomplete error? Show me the code, I'll show you the errors. Easy as that. There is no logical, technical explanation why PHP should miscalculate values on high load. Every request gets an own PHP instance, that's by design. The only thing that can happen is that your server takes too much time to calculate something, but then it should end in a Request Timeout, not in miscalculated values. The only valid technical explanation is you either having faulty code or using floats where you shouldn't. If you're using floats where you shouldn't, you'll end up with the same problem in Node.js/JavaScript. [Read this, understand it](https://modernweb.com/what-every-javascript-developer-should-know-about-floating-points/#floatingpoints). It's not a design-error, normal floats are not made for precision, it's the sole reason why languages like C# introduce an extra `decimal` type next to `double` and `float`. If PHP would miscalculate values on high load, in any way, it wouldn't be where it is. It would not be used at all. Facebook used pure PHP for the longest of times to manage 1 billion users and many billions of likes and you're telling me its miscalculating values on high load? You have higher load than Facebook? Searching for PHP miscalculations on high load on google yields no results whatsoever. You're lying or you don't know what you're talking about. Pick one. &gt; For lack of a technical name, I would say PHP lacks this &amp; that's what I've heard nodejs can solve... atleast, you can agree with this on nodejs. So you've "heard". But you don't know? Because I do. I am developing in both, very actively. Tell me, what can Node.js solve what PHP lacks? You want the same concurrency with PHP as with Node.js? Use Amp/ReactPHP. You want multithreading (which Node.js lacks, natively, as it runs in a single process and is confined to it), you can use pthreads in PHP. You're not solving problems with that, you're just moving them to a different language. You can't even tell that Node.js doesn't do multithreading, but only concurrency, so why should I assume that you know the real differences between PHP and Node.js? I am telling you, as someone that knows both languages and both platforms really, really, really well, deep down to the core. The thing Node.js solves is using the same language for the frontend and backend and having a big (and sometimes annoying) package ecosystem, which PHP also owns now with Composer. PHP has many advantages that Node.js doesn't have, like explained above, the stateless nature, as an example. I don't know if you understand what stateless implies in the scale of cloud-deployed, clustered applications using imports and exports via messaging queues. I do. If you like, I can explain it to you in detail, just ask. &gt; One more thing, you are there only one saying nodejs is slower than PHP. Are you for real? [I am.](https://www.w3c-lab.com/php-7-1-swoole-v1-9-5-vs-node-js-benchmark-test-php7-swoole-beats-node-js/) [Really.](http://grigorov.website/blog/performance-comparison-php-vs-node-js) PHP has no native concurrency, right now, it's basically faked through stream_select or several Event-loop libraries, as explained. The Swoole extension is a webserver implemented in C, as an extension for PHP (just like Node.js does it). Take a look at the stats. It's a simple matter of time when concurrency enters PHP natively and its speed will be faster than Node.js, just by the way it was optimized over the last years since it currently (still) runs 80% of the web.
Everybody gets one.
I just can't seem to find anything of any quality relating to the PHP library other than what seems to be the same copy and pasted tutorials of setting up and the very basics of Elasticsearch. The documentation for the PHP library are 'okay' for the basics but don't cover intermediate or advanced topics such as custom analyzers, advance mapping techniques or rescoring queries. Even something popular like boosting positives and negatives I'm struggling to get working effectively and can't find any good material on the subject. Searching leads to a scatter of old stackoverflow posts where it's either not PHP related or as in most cases (articles/tutorials as well) all relate to version 2 of Elasticsearch when we are now on version 6 so a lot of the information is either incomplete or irrelevant now. Doe's anyone know of a good resource? I don't mind paying either if it's a book or video course.
Custom analyzers, advanced mapping techniques or rescoring queries are \_Elasticsearch\_ concepts and configured inside Elasticsearch, they're not specific to PHP. The PHP interface to Elasticsearch doesn't relate directly to any of those things, except how to send queries to Elasticsearch (which is usually done as a JSON structure, which your selected client library should abstract away) and parsing the response given back (which the library yet again should abstract away and give you proper access to). If you want to define any custom items, you send a request to Elasticsearch as you'd do with a regular query, and you structure the request as expected for the endpoint you're sending your request to. The [official PHP client exposes helper methods](https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/ElasticsearchPHP_Endpoints.html#Elasticsearch_Namespaces_IndicesNamespace) to send the request to the expected endpoint.
Been there, done that. Hint: don't limit yourself by those whatever "Libraries". Nah. Once I decided to go with pure cURL on my own, I got wings. No limitations anymore. Just use cURL. Don't pursue the easy way which usually has limits.
This seems like https://ocramius.github.io/blog/zend-framework-2-delegator-factories-explained/, which is DIC specific, but I implemented it in `zendframework/zend-servicemanager` and `symfony/dependency-injection` (via compiler passes). What I don't understand is why your `create($signal)` is: * allowing `mixed` as parameter * returning a `callable` Retrieving a service of the same type requested would be much more useful, no?
Afaik there is no php extension for elasticsearch. What you propose to use instead of "cURL" which I take as a PHP extension wrapping the C API?
Details please. The thing is, there are many articles posted on this subreddit which are, to put it politely, less that useful. Such articles are often accompanied by a number of "great stuff" "good job" "nice" comments. See where I am going with this? So what exactly was interesting? What did the article explain that is not in the docs? Any good examples? New way to use existing functionality? In short, provide some reason why someone might actually want to click on this.
/u/shitcanz, /u/saltupz, are you multi-accounting now to downvote me twice to let your own comments look better? Or did you call your friend to spread more bullshit? [This is implemented with 100% PHP, no extensions needed by default](https://reactphp.org/) Tell me, how can something that can't be asynchronous be asynchronous? Come on, I explain it to you, since you don't seem to get it. It's easy. [Read this](https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html). Educate yourself and stop trolling forums of a language you don't understand and don't like, as it seems. Generators can generate values, but also be sent values back. This will switch execution contexts _inside_ a function, back and forth, *it works both ways*, it's basically what async/await do (`yield`acts as a `return`, but also as a parameter, basically, you can do `yield 'something';` and `$something = yield;`, which would be sent via `$gen-&gt;send('something else')`. Then there is `stream_set_blocking`, which works for files and sockets. Next to that there is [stream_select](http://php.net/manual/de/function.stream-select.php), which allows you to dynamically retrieve a stream from a bunch of stream that contains new data to read or write in any way out of a few non-blocking (or blocking) streams. Combine these three, add an event loop to correctly dispatch these things (because, that's _all_ an event loop does, not whatever you think what kind of magic Node.js would use, it's no magic) Let me get this straight: _You_ think, Asynchronous JS is like Multithreading. You think, doing `async someFunction()` creates a function that runs asynchronically, automatically. This is _wrong_. async and await are sugar for Promises. They do nothing more than create and resolve Promises. Promises themself work _synchronically_, if you do ``` let promise = new Promise(fulfill =&gt; fulfill()); promise.then(() =&gt; console.log('Test')); ``` you've been _synchron_ the whole time, there is no part in there that gets called at the same time. You also believe, Callbacks make things asynchron as it seems. They don't. Callbacks are functions without a name, it's in the sense of functions to call them _when something specific occurs_. Doing ``` function doSomething(db) { doSomethingElse(); cb(); } doSomething(() =&gt; console.log('Test')); ``` is working 100% synchron at _all times_. When does Node.js get asynchron? Obviously only when you do asynchron operations. `setTimeout`, `setImmediate`, `setInterval` and async implementations like Node.js `fs.readFile`, reading and writing from Network and File-Streams. Hey, didn't I show you above how asynchronous network and filestreams can be done with _pure_ PHP, these days, without any extensions? Weird, it's almost like....PHP can be asynchronous, just like Node.js, whenever it wants. *So what is the big difference?* PHP doesn't _have_ async file and network functions right now. It has the functions mentioned above, which allows you to implement it in userland. But there are no native C-equivalents for this, right? That's the only thing Node.js has to _offer_ regarding asynchron work. A C-extension working asynchronically. And async/await (which didn't exist when Node.js was created and basically were created _through_ Node.js and the huge callback orgies) Take a look at this: ``` $files = ['/a.txt', '/b.txt', '/c.txt']; $streams = array_map(function (string $path) { $fp = fopen($path, 'rb'); stream_set_blocking($fp, false); }, $files); while (true) { $read = $streams; if (stream_select($read, $write = null, $except = null, 5) === 0) { break; } foreach ($read as $readStream) { $content = fread($readStream, 1024); $streamIndex = array_search($readStream, $streams); //If you need it $fileName = $files[$streamIndex]; //If you need it //$content can be any content from either '/a.txt', '/b.txt', '/c.txt', the streams are read asynchronically } } ``` Throw generators into this that pass the execution context around and you have a construct like `async/await`, just with `yield` instead. It would be really, really awesome if you just stick to Node.js and stop spreading bullshit and lies in the PHP forums that occur through missing technical knowledge. Thank you. 
You might want to search for Elasticsearch queries, instead of php-related sources.
&gt; See where I am going with this? Not really. I was just telling the author/OP I liked it. It's neither my intention nor responsibility to provide TL;DR's for people not wanting to click the link. Just visit the page, skin the first few paragraphs and determine for yourself if it's interesting to you. 
Generally, ElasticSearch uses the HTTP Protocol. That means, you can use any HTTP client to send and receive data from ElasticSearch, e.g. cURL, Guzzle or simply `file_get_contents`/`fsockopen`/`socket_create` etc. But if you want an auto-completion API to work with, which limits _a bit_, but can be really useful for many use-cases where you don't use every single feature of ES, you can use something like [Elastica](http://elastica.io/). I've made really good experiences with ElasticSearch combined with Symfony, Doctrine and the [FOS Elastica Bundle](https://github.com/FriendsOfSymfony/FOSElasticaBundle), which automatically keeps your entities and search index in sync.
Shoulda called it Despacito 31
I like Laravel but honestly Eloquent is my least favorite component of it. It's *too* magical, and while it's amazing for rapid prototyping those same features make it extra hard to replace with something else down the line.
Maybe it's a setup for local development, so that you can have a local copy of your project and work on it.
it's great! slots right into any project. i'm currently using it in SLIM. previously we used it in a custom cms at my old company as well
Perhaps some tests are run when it is deployed? If so they might depend if the MySQL-server being there. 
Yes, that's probably it. But the question is if it's necessary if I'm connecting to a remote one. I just want to make sure it'll be fine for me to remove it.
What kind of tests? I'm pretty sure our unit test have their own schema they run against on the DB. Is there any other tests that could be running? Can't imagine there is.
I know in the Laravel tests I’ve been writing I have it testing stuff in the DB, to ensure people haven’t messed with joins and stuff... maybe it needs them to do that locally. It’s actually difficult to know 100% without having the code in front of me.
What an annoyingly wrong spam "quiz".
Just `php-mysql` will do, no need for the server.
All you need is php-mysql and mysql-client packages. Installing the server without setup leaves the door wide open. 
Do I get one?
Maybe there can be some rule against that. It's prevalent across reddit probably, but I notice it too and it makes me assume it's just spam with some bots when the top five comments for an article are a variation on "good read" or "thanks".
&gt; crud for a model in 5 minutes max This sounds like an awful lot of time for a crud model.
&gt; When does Node.js get asynchron? Obviously only when you do asynchron operations. setTimeout, setImmediate, setInterval and async implementations like Node.js fs.readFile, reading and writing from Network and File-Streams. Praise the lord! Now you got it! Most of IO ops are async! Thats my point! You did not seem to understand that. DB calls, Filesystem access, sockets, http, etc etc. are ALL async. In PHP they are not. You seem to finally get it! I dont care about your stream_selects etc. Core php functions are blocking and dont use anything async. &gt; This is implemented with 100% PHP, no extensions needed by default As i mentioned already, this (reactphp) is a good effort but please show me how to use code PHP PDO database access, with ReactPHP. That was my point with the code example. It can be done because its blocking. Contrary to node, i can use ANY database layer because none are blocking by nature. You seem to have hard time grasping the difference between IO and primitives (like variables assignment, for-loops) you better read up on them. When doing IO you wait (like PHP, and other languages) on a response. Here Node can do other stuff and wait at the same time. Thats why it even works. If node would block it would be 100% unusable. CorePHP on the other hand cant do anything else but wait. Thats why the process model uses apache/niginx to serve new users while the one process waits for a response. &gt; Edit: Oh, btw., did you know that babel polyfills async/await in JavaScript with Generators? Yes, ive been using JS long before generators was a thing. &gt; Doing function doSomething(db) { doSomethingElse(); cb(); } doSomething(() =&gt; console.log('Test')); is working 100% synchron at all times. Well no shit! Thats just calling functions in a row, just like PHP would. Hey why not calculating fibonacci to 1000? You get the same effect. CPU bound functions are blocking, it does not matter what language you use. Again, read about IO/CPU and learn. &gt; It would be really, really awesome if you just stick to Node.js and stop spreading bullshit and lies in the PHP forums that occur through missing technical knowledge. Please, it might be hard to get, but the reality is code PHP IO is blocking, and thats why you cant e.g. PDO with ReactPHP or other IO bound functions. &gt; /u/shitcanz, /u/saltupz, are you multi-accounting now to downvote me twice to let your own comments look better? Or did you call your friend to spread more bullshit? Actually i gave you an upvote! Im not spreading any bullshit here, just the facts! 
This is more in line with what I was thinking about. Thank you very much.
I did the same. Haven't been happier with a CSS framework.
Under most circumstances, probably, but not on PHP7 unfortunately.
Depending on what you are looking for, this may work for you: [https://github.com/tightenco/collect](https://github.com/tightenco/collect)
I'm probably not going to write the collection class, but requirements are still coming in. Nothing wrong with implementing Traversable or ArrayAccess, but there may be something that matches my needs more closely. I will probably end up going with these though.
Will check this out. Thanks. Not really on the Symfony side of things so Doctrine got over looked. Apprecate it.
Always test your code ... even generated ;)
No need, they’ve never claimed to be a framework. It’s only a bunch of haters on the internet who try to make that classification. It’s a CMS / blog platform. Obviously it’s not going to hold a candle to modern frameworks...
There's nothing to test if I'm just chaining methods. like ... where()-&gt;where()-&gt;where()-&gt;get()/update() is only going to change so much... I'm a fan of code testing but i've seen some tragic things. Borderline testing if 2+2 equals 4. 
Pure Curl? That code had to look like shit.