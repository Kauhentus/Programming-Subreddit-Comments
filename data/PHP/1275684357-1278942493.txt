Well, with how Fringe finished up, I can believe it. (maybe its a cross promo?)
Thanks, that's very helpful and informative. It would be interesting to poll the subscribers of this subreddit and find out what their favorite frameworks are and under what conditions.
Rule #8 Whitelist. Instead of just checking for things that *shouldn't* be there, **only allow** things that *should* be there.
I disagree here. If you're using the framework, you're using the language. And, you're using it in a structured and guided way, with a bunch of already good code for you to use as an example. I present to you as an example Ruby on Rails. Hardly anybody dives into Ruby without Rails in partnership. Ruby is a great scripting language in its own right, but Rails helps make it shine. Now, PHP doesn't have a "pet" framework (though I suspect Zend would like to change that), but the principle still applies. All the major frameworks have more similarities than differences, so I say pick one and learn to code with it. If you want to be "close to the metal", then choose a lighter framework like CodeIgnitor or Kohana (I recommend Kohana, since it's fully PHP 5), and start building a project. In the end, if you find yourself in a situation without the framework as a crutch, you only need to teach yourself what you were missing. "How do I make a DB connection", "How do I build safe SQL", etc... All this information is out there. Easier to pick that up later after you have the basics of the language taught to you in a structured way. Further, you can model your "cowboy code" on the framework, and end up with a better result for it.
I am not saying you are wrong, I am saying that in my experience learning the framework before you learn the basics of the language can cause confusion. Coincidently it was teaching beginner classes in Rails to kids that brought this to my attention. While you are 100% right that when you use the framework you are using the language, how does a beginner know where one ends and the other takes over? You can of course learn what you missed later, but beyond the gross aspects (making a db connection etc) it is often hard to know what useful things you missed. It is not impossible by any means and YMMV.
There's probably many ways to skin this cat. I suppose jumping STRAIGHT into a framework might be a bit much if you have no prior coding experience. However, if you've written much code in any other language, I'd say it's the way to go. For a total beginner, there's probably some merit in writing a few hello world, hello database, hello form posting apps might be a good way to get a gentle introduction. However, I wouldn't advocate staying in cowboy code mode for long. More and more apps are being built on frameworks. More and more job postings are asking for MVC experience. The quicker you can transition to that mode of thinking, the better.
If you want a print resource that will get you coding quickly, I can't recommend [Head First](http://headfirstlabs.com/books/hfphp/) highly enough. Obviously, php.net is an outstanding resource when you have an idea of what you need to accomplish, but can't remember the needle/haystack order of a function's arguments.
It will be harder to learn a language and a framework at the same time, but at the same time it's probably easier than learning to program procedurally and then unlearning that and learning how to operate within an MVC. Php isn't that hard to pick up, particularly if you have ever done any programing before.
yes
Well, that certainly explains the pimples. 
note to self, remember to lock my computer every time I leave the desk
⩶ I cant see this character, i asume is a character close to = but it isnt, is it?
- Get a Apache/PHP/MySQL server setup - Make a simple blog system
Long Live PHP.
&lt;http://www.fileformat.info/info/unicode/char/2a76/index.htm&gt;
\*Checks. Shrugs. Copies, pastes. Runs.\* o_O Sonoffa.. Is that from the I-Ching?
Thanks for this on my new job right now we basically have this problem of programmers using $_GET to get variables and pass them to javascripts, basically breaking rule #0 of this list. We use Zend Framework, and I was proposing that we clean the $_GET from the main index.php what would be the possible drawbacks of doing this? What methods do you guys use personally to prevent this?
you should do that anyway
Don't listen to this comment at all, anyone. I can't believe anyone would actually recommend this book. This is absolutely ridiculous and you should be ashamed of yourself mhankins.
Thanks. Notepad++ put it in as a question mark, and I must have spent my fifteen minutes wondering if I was crazy in thinking (true ? true) is invalid syntax :P.
Here's to hoping PHP 6 ditches loosely typed variables! :D
Stay away from XAMPP. Learn how to set up Apache from scratch, start and stop it. It's REALLY easy. Learn how to get PHP working. A lot more difficult and involves httpd.conf After you can get the basic phpinfo() working in a served page, start on MySQL. Install MySQL. Getting MySQL working with PHP depends on php.ini - apache is not involved refreshing phpinfo() will let you know when it's enabled, so keep working on it till it is. From there, start on solving a basic problem like... an html form with dynamic elements (the time) submitting to a PHP script via GET or POST. Work on inserting submitted data into a MySQL table. You're halfway to being literate in PHP.
⩶ != ===
The link is dead. :( Too bad; looked like it had promise.
PHP finally reaching jailbait status... 
start at the top of the page with &lt;?php
Python is strongly typed....
Definitely worth knowing, but it doesn't sound critical to what he's doing. He definitely needs to understand the settings that can be modified with apache and PHP but it sounds like he'll probably just go through Dreamhost or something when he does actually host the site.
That is more what I was getting at, I should have said it better in my first post. When a total beginner starts using a framework they have no idea what is going on under the hood. You use this command and you get x as a result. Some people will dig deeper as they learn the framework and get a full understanding of the language, but for some that approach doesn't work well. It can be hard to go back to "baby steps" after you are used to churning out apps. So my badly made point was that if you show a raw beginner the fundamentals, to at least the level of calling functions they can understand what the framework is doing under the hood and have a basis for reading the through the code to see how the framework is doing it's magic. Which eventually leads to becoming a decent programmer, again in my opinion.
php: how i stopped worrying and learned to love the bomb
Does locking my door count?
Can't believe we still haven't killed it off... Oh well, IE6 is still around, I guess it's par for the course.
$ svn diff Yeah, there you are you little bastard! $ svn blame Dead man!
You should be able to find that in a heartbeat with a simple traceback.
Do you have other people, cats, or ghosts in your domicile?
Any context?
Oh hell. http://bugs.php.net/bug.php?id=36073&amp;edit=1 .....I'm not even sure how that happened. I couldn't link to the post before submitting it. Either way. : )
At first I thought Fringe was a lame show, what with all the 3D text effects and clichés. Then I started liking it because it just sort of went with it and never took itself too serious except for that black guy who always looked serious except for that episode before season 1 went on hiatus he looked like he got hit by a train after drinking all night and then getting only 3 hours of sleep. But then season 1 ended and I didn't care to watch season 2 at all.
Reddit lets you have either a link or body text, not both.
Pretty much. All the devs seem to be jerks.
It would have been more topical if you'd raised this point with the responder in 2006. All maintainers have attitude problems. The attitude comes from too many stupid users filing bugs that aren't bugs. The symptoms include not reading bug reports, not caring what users think, and typing terse replies. See Ulrich Drepper for the best/worst example. I'm not defending the reply, but also keep in mind that, being an OSS project, the dude is likely just a volunteer, not really an "official."
We all have our bad days and moments.
So it took you four years to come up with that reply? :) Although I disagree with the approach you took, it's at least partially understandable. Also, I reopened the bug report.
The following is not specific to PHP but it's well worth the time. It'll teach you about programming, including C, and also touches on PHP. Take your time and do it.... seriously. http://cs50.tv/ And just think, it's like going to Harvard for free ;)
Some more than others.... Eh am I kidding? The devs do an excellent job, but bugs should be more important than new features.
:$ git blame WTF? I didn't do that? Maybe I should stop leaving my computer logged in during lunch/cig breaks/etc
When i saw this without reading your post the first thing that popped up in my head was the name *sniper*! Regardless how decent your bug report is he has a great Talent to piss people off.
Not my report, and it was only now brought to my attention. Nevermind that I hadn't heard of Reddit back in 2006. : )
Thank you for that, I never knew.
It would have been, but I was given the link to that bug after a good friend of mine had it happen. Yesterday. And, while the guy is a volunteer doing, I assume, an otherwise impressive job, not being paid for something isn't a licence/excuse to be an ass.
Silly, if you ask me. THey should allow both.
Actually it's a license to act however you please, as long as you don't become intolerable to work with then most people will put up with the fall out. As an active community member in the city I live in, I see this all the time and I put up with a lot from people who are useful. 
This is awesome, I didn't know `getElementsByTagName` exists in PHP. Also this tutorial seems to be a bit better: http://www.phpro.org/examples/Parse-HTML-With-PHP-And-DOM.html
Both on and off topic, but one can't help refer to the friendly [SimpleHtmlDom](http://simplehtmldom.sourceforge.net/) class when discussing this topic.
people abuse ==, and underuse ===
Using phpdom with curl and htmltidy. you can write some pretty easy scrapers. 
I've worked with volunteer organisations and observed something worse: not being paid seems to be in many places a license to be friendly but completely useless.
Haha, that's pretty funny, though one cannot be both annoying and useless :). One or the other. Idon't see that too often though frankly, but it's probably the orgs that we are involved in respectively. 
Yeah - the one thing the phppro tutorial was missing that I had to track down was the getAttribute() call. Most of my blog posts are notes for myself that I expand to try to be helpful. 
I prefer [phpQuery](http://code.google.com/p/phpquery/). Same concept but with jquery-similar syntax.
You should go back to the last thread you wrote and pretend you asked this question, because you're just going to have the same ideas reiterated to you.
Start with a chatroom, add information on the board status to what the chatroom call is sending back. Handle everything on rules through the back end. Something like Chess isn't going to need to terribly lag free making it a fairly simple project from that POV. If you where trying to write a action game or something that needed low lag you'd have a lot more issues. But for a turn based board game you're basically looking at chatroom concepts and can do the whole thing around AJAX or Flash.
You have so many options here. It's like asking "How do I make a chair? I've been reading about wood, metal, plastic, mesh, etc." If you're great with Flash, that would be the easiest I assume. My Actionscript is so rusty it's got holes in it though, so I can only tell you what I'd do using PHP on the server and Javascript (using the JQuery library) client side. The PHP would keep track of the board and game state and enforce the rules, while the Javascript would do the animations and anything to do with presentation (while also enforcing the rules, but it's client side so you should never rely on the rules being followed). i.e. * Player A moves his pawn from B2 to B4 * Javascript sends an ajax (god I hate that word) request to your server: get /chess?game=3735&amp;player=736&amp;move=B2B4 * PHP does all the necessary checks (game exists? player's move? move legal?) and sends back an OK / Not OK * Player B's Javascript polls the server to see if it is his turn, as it does every 5 or 10 seconds. * PHP replies "Yeah dude, go ahead", (and sends player B player A's move, or alternatively, the state of the whole board) * Player B sees it's his turn and moves his ... etc. etc. I haven't given this a huge amount of thought, and this is a pretty request-heavy way to implement a game of chess. Maybe someone else has a more efficient idea.
I don't think JavaScript can make the type of connection needed to do that in any less requests. The only way I can see to slim down on requests is to increase the time between automatic polls of game state. (And then optionally, add a link to manually poll the game server, or make the automatic polling stop if the user hasn't done anything on the site for X minutes.) I *think* it's possible using something like Java to make a connection with the game server in which you "listen" for it to tell you the move has been made, rather than bugging it over and over with JavaScript. Still, I don't think it's tooooo huge of a deal, especially if you are much more confident with PHP / JS than Java.
Yeah exactly. And if you use memcached on a few oft-polled variables, your average el cheapo server should be able to handle dozens or even hundreds of simultaneous games, even at 5 second polling intervals.
Besides continuous polling (via setTimeout) you could use [Comet](http://en.wikipedia.org/wiki/Comet_%28programming%29) (server-push) which has been around for a while. For the classic example google *comet chat* or take a look at [webchat2](http://code.google.com/p/webchat2/).
If you want real-time, consider not using PHP. It's unusable for comet/websockets. (Or are there new things about this in PHP6?)
You can't (as of yet) open a connection to send data continuously to the server, but you can receive without polling. See [Comet](http://en.wikipedia.org/wiki/Comet_(programming\)).
look up a protocol calld COMET
I can't speak as to why, but I do enjoy history so looked it up. Over 12 years ago [this commit](http://cvs.php.net/viewvc.cgi/php3/functions/unified_odbc.c?r1=1.17&amp;r2=1.18) was made that implements it. Kinda weird, eh? :)
That's like saying you want to build a house out of legos. I mean, you could... but why?
i often reinvent the wheel because the existing wheel is slow, bloated or not very modular, overly complex (violates K.I.S.S.), i don't know how fix/tweak/modify the existing wheel since i didn't create it, would take more time to implement than making my own wheel. 
The solution to this problem without making repetitive unneeded ajax requests is to pretty much do [what facebook does for facebook chat](http://gregosuri.com/how-facebook-uses-erlang-for-real-time-chat). Specifically: &gt; The method we chose to get text from one user to another involves loading an iframe on each Facebook page, and having that iframe's Javascript make an HTTP GET request over a persistent connection that doesn't return until the server has data for the client. The request gets reestablished if it's interrupted or times out. This isn't by any means a new technique: it's a variation of Comet, specifically XHR long polling, and/or BOSH.
All too true. I often reinvent the wheel, much of the time just because it is more enjoyable, and if there is ever a bug I can fix it myself, instead of relying on a 3rd party developer.
Is there anything like this that works on webpages that aren't built with modern DOM? I have been preg_matching but it can be sloppy.
Yes, e.g.: ALTER `table` ADD INDEX (`field` (1000)); Uh, why the down votes? This and notenoughcharacters9 response are completely correct.
http://dev.mysql.com/doc/refman/5.1/en/indexes.html &gt;When you index a BLOB or TEXT column, you must specify a prefix length for the index. For example: &gt;`CREATE TABLE test (blob_col BLOB, INDEX(blob_col(10)));` Instead of setting the length of the actual column you can just set the length of the index.
Ah excellent, I was trying to set the character limit of the column when I should have been setting the character limit of the index. This worked fine: CREATE INDEX text_col_index ON table1 (text_col (1000)) thank-you!
That's nothing like implementing a real-time multiplayer game in PHP. Building a house out of Legos would be fucking _awesome_.
ALTER `table` ADD INDEX hugeidx (`field` (500));
Got an example? 
http://tarr.uspto.gov/servlet/tarr?regser=serial&amp;entry=73484976 Horrible, awful, disgusting. It shouldn't meet Government requirements.
No I won't, in the last question I was asking for ideas on how to develop the game with basic rules, now I am just asking how to make it a real time and multiuser, like if we were playing chess, I make a move and you see in real time my move. Thank you for replying anyway
thanks! In case I use AJAX, how are you noticed about my move? is there some kind of refresh call in your browser that tries to get the new state of the game (in case the game's state have changed)? Thank you
I like your idea
I have never use setTimeout, I will google about it. Is this some kind of refresh call so I can get the latest state of the game? Can I compare that to the way twitter shows me the new notifications?
Thank you for your answer! Even though this will be a real time game we can have latency, we don't need 100% accurate real time updates. Imagine this like a monopoly game
I will, thank you
this house won't be a bunker :) The game will be like a monopoly game, it is multiuser and we need real time updates but not like 100% accurate real time updates.
Lets suppose I use memached, how do the clients get the updates? Do i have to place some kind of refresh call every X seconds?
&gt; VARCHAR column, but then the max length is 255. This does not apply for versions 5.0.3 and up. A VARCHAR field can in those versions contain up to 65k bytes. Note that VARCHAR columns with &gt;255 bytes naturally use 2 bytes as prefix to indicate length (as opposed to 1 byte &lt;= 255 bytes) Also, when dealing with (VAR)CHAR columns be wary of trailing spaces being discarded and (silent) truncations (if not using strict mode).
You would need to use AJAX to make a request once every set amount of time to get updates on the game state.
If the column is that long, I was question how the index is going to be used. What kind of data does it contain and how would you normally search for that data?
You can invalidate the cache when new data comes in. That way you don't have to pull it out of the database every request.
Note that an index like that only benefits you for queries such as: SELECT .. WHERE text_col like "value%"
This might be of interest to you as well: http://www.sphinxsearch.com/
A PHP websockets responder should be simple enough and there's a number of libraries out there to help. http://code.google.com/p/phpwebsocket
Indeed, search for James May's lego house. He made one in the UK last year. Was awesome.
That's really not going to help you. Your index will slow down inserts and barely help at all with actual searches- as evertrooftop points out it'll really only be useful for matching strings like "value%", and in most cases the first dozen or so letters are enough to make a worthwhile index.
and http://www.reddit.com/r/sphinx :)
Before you string me up for the suggestion, I gotta point out that I love php and use it in my day to day career (and hobby projects), but have you considered using Java or Python? Google Apps engine is pretty good for hosting and relatively inexpensive. Plus it is fun. :) 
So what will help with actual searches?
thank you
Yes, I have considered pygame. I am just analyzing which is better
thank you
Honestly it really depends on the situation. There are a number of things you can do to reduce calls, such as by caching the results. You could also try using something like [Sphinx](http://sphinxsearch.com/) to implement full text searching in a much more high performance way.
I haven't looked very far into this, but don't you essentially run another apache childprocess for every connection? And letting those processes just sit there and wait would be really bad. I didn't mean it's impossible to use, just not usable in a practical way. There are better ways to do comet/websocket/longpolling on the serverside. (node.js for example :) )
I've already started taking a look at sphinx but until I figure it out I'll have to stick to my MYSQL FULLTEXT indexes. I do use a LIKE '%query%' on the column in question. It makes sense to read more than just the first letters as it looks for different string patterns in the field separated by special characters. You wanna get sphinx set up and working for me on my unix server and set up all my indexes and website queries? How much you want? Anyone else? It's already been compiled.
&gt;It makes sense to read more than just the first letters as it looks for different string patterns in the field separated by special characters. The point is that the index itself works by comparing the first letters- if you do "%something" then you will end up doing a full read of each row, and all text, rather than the indexes themselves. &gt;You wanna get sphinx set up and working for me on my unix server and set up all my indexes and website queries? Sorry, I'd love to help but I'm busy with my own job. However, there are [Sphinx consultants](http://sphinxsearch.com/consulting.html) out there who can help.
Haha, I remember that. Then they took it down :(
What did you need out of it?
&gt; Javascript sends an ajax (god I hate that word) request Perhaps you should considered calling it an XHR request (XMLHttpRequest). It's a little more cryptic and the term is geeky enough to seem rooted in intelligence rather than popularity.
Pretty much everything.
Unless they've changed behavior since 5.0.x, you can't have two different copies of mod_php loaded at the same time. Try running 5.2 under mod_php and 5.3 under FastCGI. You'll need to futz with Handlers in the VirtualHosts, but it shouldn't be hard. In the alternative, the 5.2 to 5.3 migration is pretty painless...
Topical! You may find the phrase "the simplest thing that might possibly work" to be more manager-friendly...
build 5.3 as a cgi and then a cgi handler to execute the php script, granted you may need to change the extension from .php to something else. Its a little tricky, but its doable.
Run two copies of Apache on different ports, use ProxyPass on the one running on port 80 to forward requests through to your second Apache. Let me know if you need any help. On our boxes we actually have 6 instances of Apache and an instance of Tomcat all available through port 80. (They all run in chroot jails, we have two Apaches running PHP 5.2, two running PHP 5.3, one running mod_wsgi, and one which is listening on port 80 and proxying the requests ... actually on our production boxes we don't need the apache on port 80 as we have an appliance which does the same job.)
I've created a shell script for setting up a fresh Ubuntu Server 10.04 installation to handle Apache2 requests for multiple versions of PHP. It uses [phpfarm](http://cweiske.de/tagebuch/Introducing%20phpfarm.htm) to make installing multiple versions of PHP easy as pie. I made it because I felt the [tutorial on phpfarm's website](http://cweiske.de/tagebuch/Running%20Apache%20with%20a%20dozen%20PHP%20versions.htm) was lacking a bit. [Here it is.](http://trangpham.ca/install_apache2.2_phpfarm.txt) I'd be happy to help with walking you through it (and help you set it up on your system) if it's a little too advanced for you. Some of the commands will likely be unnecessary for your system. If anybody wants one for RedHat-based systems (where the script would use yum instead of apt and httpd instead of apache2) I would be glad to prepare one. I've installed Httpd+PHP on CentOS this way, too. EDIT I should've been more specific. This setup specifies directory-specific PHP versions (rather than trying to install multiple versions of Apache and listening on different ports, or messing with mod_php, or messing with extensions like index.php5.3 or index.php5.2 or whatever) which I felt was an optimal setup considering the flexibility of it. This works for PHP4 as well (although it requires a bit of tweaking as PHP4 doesn't create a php-cgi binary and instead has the normal php binary acting in that regard).
6 will never come out.
&gt; The idea is that quality does not necessarily increase with functionality. There is a point where less functionality ("worse") is a preferable option ("better") in terms of practicality and usability. Ugh, I really wish they hadn't used "worse" and "better" to describe this. Instead something like: **quality** functionality *over* **quantity** functionality. Related: http://en.wikipedia.org/wiki/Unix_philosophy &gt; Write programs that do one thing and do it well.
This is similar to the fact that people will bubble up in a company until they are at the place where they no longer function optimally, but everybody recognizes them for past accomplishments.
Thank you for the script and pointing me to phpfarm (hadn't heard of that before). I've compiled PHP a couple times, but it's always a daunting process, but it looks like this makes it super easy. Reading more about FastCGI, it seems like it's a more efficient way to load PHP in general anyway which I didn't realize.
Cool idea, but it's a bit faster to just grab the default options and just change it on paste going down
&gt;BSD license. = Blue Screen of Death license?
Um.. http://en.wikipedia.org/wiki/BSD_licenses
FastCGI is relatively new when compared to mod\_php (despite FCGI support being around in the early days of php-4.x), and the implementation is refreshingly clean when laid out in the manner I have, and the performance is comparable to mod\_php as well. Although mod_php is a lot easier to install, so that is why it is overwhelmingly more popular (and the documentation for setting up PHP via FastCGI is lacking). All in all I'm glad I could help.
One problem I've noticed with this method is that some browsers will still post with the second redirect. If the page is setup to ignore it that's not much of an issue, but sometimes Safari will pop up a warning about submitting the same form twice (even though it goes to different pages).
Make sure you're sending the correct redirect (303 I think, but don't quote me)
Just skimmed over the ORM class. I like it. I'll see if I can put it to use in my own projects, and if so, I'll likely contribute back to the project in the future. Of course, you will be respectfully credited. Thank you for your hard work! (Actually, you've gotten me interested in joining github, finally, so I can follow you. Kudos.)
that's a bug in safari then (unless they decided to advertise it as a "feature")
YES. I have been saying this for years. I hate sites that don't use this. Unfortunately my work involves maintaining an existing application that is famous for torturing back-button users. lol
I've worked on and with the [Xaraya CMS](http://www.xaraya.com/) for many years, and it has always handled forms like this. The redirect happens only if the form is successfully submitted, otherwise the form is represented with error messages. I used to think it was a bit silly adding this extra redirect step in, but this illustrates nicely why it should be done, and why I've never noticed the problem this article highlights. One question: is this kind of use of Wikipedia not frowned on? I mean, is it likely to be removed?
I do something similar: - Start with a normal form that submits to the same page. - The top of the page, before any output, processes the form. - If successful, do a redirect to where-ever. - If not, show error message and re-populate form with what user entered. Not sure why the GET step is needed?
e.g.: homepage.php?status=ordersuccess&amp;orderid=2324 Allows you to show a custom message on the homepage/redirected to page/whereever saying whether the last action was successfully or not. For example the above link could simply output: "Order #2324 was ordered successfully." that way they can bookmark it. But it's up to the individual programmer and what he likes to do. 
Thanks that makes sense. 
If you immediately redirect the user upon submitting, don't you lose access to the $\_POST data? Or are you supposed to work with that data first and _then_ redirect?
You're supposed to process the post data first, and then if successful, redirect the user.
Just be glad your work doesn't involve maintaining a non-existent application.
GET doesn't force you to add parameters.
Don't use this for forms where it might be legitimate to go back and change some stuff and resubmit, please!
Useful in fringe cases, but hopefully unnecessary. Maintaining a site with individual files for each page instead of some form of template/include system is just asking for problems.
The site makes my eyes bleed :( 
Yup. I saw this site a while ago on a different reddit and I think I went blind in the amount of time it took my eyes to find the beginning of the article. Edit: Also, this guy uses 2 accounts, one without the _ a and pretty much posts every article on that blog to reddit. The _ a one seems to be new, having switched to it about 6 months ago. Probably just trying to make money off the page views.
Same, it threw me off and initially I thought noscript had something to do with it. For the original author: consider it constructive criticism, I had no intention to be mean about it.
See edit above. Pretty sure he's trying to make money off the page views.
Wordpress is horrible, I've seen it go up to 18mb a page load for a simple blog post. Absolutely crazy. I try to keep each request under 5mb, anything more than that and you're doing things wrong (for a web app). Also, look at memory_get_peak_usage() to get the maximum memory you use (since you could be using considerably less at the end of script execution).
I happen to have hooks built into a recent site. **For a view with a lot of model interaction:** Baseline: 0.4mb Config Loaded: 0.43mb Framework Loaded: 1.74mb Session Ready: 1.74mb Controller Ready: 1.74mb Page Pre-Render: 4.96mb Models Populated: 12.85mb Ready for Render: 12.91mb Page Rendered: 12.98mb **For a view that contains a paged data grid:** Baseline: 0.4mb Config Loaded: 0.43mb Framework Loaded: 1.74mb Session Ready: 1.74mb Controller Ready: 1.74mb Page Pre-Render: 4.96mb Page Rendered: 5.73mb **For a view with no *visible* data interaction:** Baseline: 0.4mb Config Loaded: 0.43mb Framework Loaded: 1.74mb Session Ready: 1.74mb Controller Ready: 1.74mb Page Pre-Render: 3.6mb Page Rendered: 3.6mb 
&gt; anything more than that and you're doing things wrong I disagree, maybe for procedural code, MVC &amp; ORM easily gets you to 2-3mb before you start any custom code. Load a couple data models and you're already over this 5mb limit you suggest. You simply can't make blanket statements like that. It differs wildly app to app. A blog? Ok sure... Ill give you that.. it's a blog.
After reading this I have to say I am very proud of my custom cms, forums and gallery. It uses on average 2.58 MB of memory, and it uses Kohana Framework.
I've seen a poorly designed site use 260MB per user... *this person* was doing pagination with models and populating all of the children for each relation. 
My latest site is a zippy ecommerce job that uses between 2-3MB. Not only that, but according Google Webmaster Tools the pages take on average .3 seconds to load. I guess all that effort with memcache and apache tweaking was worth it. Not to mention Solr. That thing flies.
curious, is that with their Kohana object relational mapping, templates, and an active session? link to your site?
&gt; populating all of the children for each relation What do you mean? 
Yes, using ORM, views and sessions, as well as a few extras such as hooks (one hook that checks for a few different system based tags, such as {media=some/path/} to quickly display a listing of mp3 files or something else, need to make it more flexible, but it was a temp work around). I will have a live example in a few days, it's currently just available locally on a linux machine at my house (I've had it on Windows too, no big difference in ram useage).
Imagine a table of paged data that displays users. Imagine users having relationships to *n* addresses, a race id, and a profile. The profile has relationships to statuses, etc, etc Rather than run the query and return an array to put in the table, some people like to run the query using whatever framework's ORM. On top of that, this time they built custom code to fetch all the related models, store them all in memory, and then loop/display them in a table. Do display the user id, last logon, and one address, 19 other models were loaded and never touched. 30 rows on this page meant there were 570 fully hydrated (some very large) models instead of a tiny array. Moral of the story: don't use a data model unless you are changing the data. 
Same here, custom built CMS, not more than 2MB for a simple page, a little more for more complex ones (forums, news etc).
I don't know about anyone else but for me using the Zend Framework for dev on a WAMP stack the base memory usage, without an opcache, is 5MB. Once I start using forms and SQL it adds up pretty quickly to a peak of 8MB for some pretty fancy stuff (lots of queries, filtering, and loops). Add the opcache and move to Linux though and everything drops by around 60-75% or around 1.5MB to 3MB. 
Thanks, I will be sure to post it when it's to a point. The only thing I really need to get working on is a menu management system. I currently just include files based on the current page name I am on, really just a way to rush my site online. Who knows, I may leave it out and open for third parties to pick up on. I do plan on giving out the code when it's finished, and hope maybe to even pick up a few devs to help out. It's nothing major like Joomla. My goal was speed and power in simplicity. I wanted things as simple and easy to work with as it possibly could be while leaving things completely flexible for developers or webmasters to do their own thing with it ( I was originally thinking of just releasing it absolutely free, under no license, but would need some input on it. I would like a bit of credit for my work, but nothing monetary).
I love it. I used Joomla forever, but there was so much to Joomla I never used or needed, and wanted to get rid of some bloat. I ended up removing and rewriting a ton of Joomla code, even posting quick patches for XHTML compliance on the forums, but it got to be a lot of work and picked up doing custom work.
I was thinking of that or the Apache2 license. If I remember the two can go together and I think Kohana is Apache 2 licensed. I have to read over them all to make sure I understand them.
I just did a quick test controller in my own MVC framework to see how this went. At the start of the controller execution I'm at 138k. I then loaded two models and spat it out again. It peaked at 240k the first time it ran and dropped to 150k on subsequent requests. I dropped the memory output into a couple of big pages in projects I've built with this and saw at most 2.4MB, but the majority of pages I tried it on were under 500k. Pretty much the only times I've run into memory issues are when either dealing with a LOT of data (ie, performing analysis on 3000 survey responses involving a half million rows), or when working with GD.
See this: &lt;?php echo round((memory_get_usage() / 1024) , 2) . 'kb'; ?&gt; **63.81kb** - LAMP 5.1.6 89.65kb - LAMP 5.2.4 315.51kb - WAMP 5.3.2 **611.74kb** - LAMP 5.3.2 --- So, keep that in mind. Maybe folks should be posting their php version along with this. Also, we shouldn't be benchmarking wildly different operating systems and webserver configs. Some of the replies here don't give a very good real world view. 
What version of PHP? It sure as hell isn't 5.3.x
I disagree, if you're moving above 5mb into the 10mb area, you're not freeing memory when you can and your models are messed up. First, PHP is copy-on-write, so if you don't modify your model objects, they should take up minimal memory because all copies of them point to the memory location of the first model. Second, stop throwing everything into a session. I see this all the time: oh, just loaded something up, better throw that into a session. It creates buggy memory intensive code (especially if you're storing sessions in a database in a non-memory table). Third, use iterators for database result sets. I hate seeing frameworks/ORM's that read in an entire result set into memory. If you have a large result set, you'll eat through a bunch of memory, when you could just store a pointer to the first row returned and then just jump around/use an iterator when necessary. I wrote about it a bit here - http://leftnode.com/php5-database-iterators-performance/ I built and launched a whole social network on an MVC pattern and it takes up at most, 3.6mb per page load (http://www.prospectvista.com). If it started getting close to 10mb per page load, I'd really start looking at how I could optimize some of my code.
What part of Zend? The entire thing is 439,000+ lines of code, are you just talking about the MVC stuff (and I've never used Zend, seemed like overkill to me).
I can live with that :)
Correct, we're still on 5.2.13 due to some legacy sites.
What is the point of `exit;`?
Operating system also makes a difference. Certain functions in PHP perform better/worse depending on the OS it is running on.
The company I work for uses Zend Framework for their CMS, and right now the homepage uses about 15MB and on some other pages up to 20MB if they are not cached (measured at the end of script execution). Is this normal for Zend Framework or did they design the whole thing poorly? Using PHP 5.3.2 on Ubuntu 10.04 64 bit with Apache 2.2.14
It's normal for such framework. I am using symfony and a standard 3 query pages with 4 *partials* costs around 14 Mb in my dev environment.
On one of my latest application developped using Symfony 1.4 &amp; PHP 5.3.2, I get a peak at 40 Mb when displaying their product administrator page. The other modules (invoices, warehouse) are around 20-30 Mb.
Consider the lack of comments here a compliment. IMO the PHP manual is one of the best out there.
I find most of the current document to be excellent, actually. SPL and DomDocument are two areas that seemed a bit sparse last time (which, granted, was awhile go) I looked through them though.
There are a few areas with sparse documentation, otherwise the comments section could use some sort of rating system. A lot of functions people post are actually pretty terrible.
Agreed. Please don't go changing things.
For an app I've written in CakePHP 1.3.2, on PHP 5.3.2, on an intensive page is about 7.32801819 megabytes. The others are about 3mb. Not bad for using full ORM and alot of Cake's features. Though I am using caching and APC
I have a newb question! How do I use this? What I mean is, where is the best place to put this in the script? I am a bit confused because I put it at the end, in my case the \_\_destruct of my main view class, and I also put a separate call in the \_\_construct of that class and got the same result, but I would assume that it should be a lesser value? As a rough example I have my script set up so that if you go to the URL example.com/page/look/here it will call method "look" from class "page" which extends "view" and display the contents of "here" which is a row in the database. So I called memory\_get\_usage() in \_\_construct of "view" and another in \_\_destruct of "view" and got the same result. I also tried memory\_get\_peak_usage() and got the same result as the other two. Also, I get the same result on every page, regardless if it displaying one row from the db or several fetched with multiple joins and formatted six ways to Sunday. Am I doing this in the correct way? Also, I love /r/php, I never even knew function this existed. **EDIT:** I believe this was because I was using the function with real_usage set to TRUE. Setting it to false gave me more interesting numbers. Incidentally it appears my peak memory usage so far hovers in the 570 kb range using php 5.3.2.
there isn't a point, copy/pasted without removing it, also reddit messed with the formatting, I fixed it up now
holy shit.
I think it's fantastic, and some of the best documentation I've seen on a language. It'd be really nice to have a list of most commonly used functions, though. And a "functions you never knew about but are awesome" list, too!
wow, what changed in 5.3 that made it balloon up like that? That's almost seven times the memory requirement.
check out this function i did to remove spaces im releasing it under the PGL lisense function getridofspaces($mystring) { for($x = 0; ($x == strlen($mystring)) == false; $x = $x + 1) { if(substr($string, $x, 1) == " ") { $space = " "; $nospace = ""; return $newstring = str_replace($space, $nospace, $mystring); } } } i tested it like 100 times it works please give me credit if u use it xlegolas233 @aol.com p.s. also do u no were i can get free games
A few have started implementing this in the past, but the task usually ends up growing in size. Like, worrying about note order, if tagging should be added (e.g., 'code', 'gotcha', 'tip'), and more. Then it becomes forgotten. Maybe simply starting small (simple voting) would be for the best.
A few things that bug some people: Too many pages (clicking) e.g., like for the PCRE syntax page. Sometimes difficult to find an extension. User comment quality varies from awesome to poor. The [search could be better](http://wiki.php.net/ideas/phpnetsearch). Other things no doubt. And don't worry, nobody plans on getting too crazy :)
Interesting, that sounds possible although I'm unsure what they'd be. Probably newish stuff (SPL, Filter) along with new features (especially for 5.3). As for commonly used functions, maybe new school (e.g., DirectoryIterator) versus old school (e.g., opendir()).
Another potential solution would be comment threading. Even if it was only 2 posts deep so related comments and fixes to the functions are grouped together.
It's embarrassing how much time it took, but at least every SPL method now has [at a minimum] a skeleton in the docs (i.e., a home in the official PHP manual). And in related news: the original theory behind user comments was to find content which would eventually be folded into the manual proper.
Can we get a list of the most-viewed pages (eg: top 10) for php.net/manual/*? Certainly that would be a good place to start. Also, the [installation section](http://ca.php.net/manual/en/install.unix.php) could use an update, in particular I've created [a wonderful shell script](http://trangpham.ca/install_apache2.2\_phpfarm.txt) (for installing multiple versions of PHP on Apache 2.2 on Debian-based systems) that I'm sure many people would benefit from (specifically people requiring 5.2.x and 5.3.x, and maybe even 4.4.9 (the last php-4 release)). EDIT Furthermore I would like to express my disdain for mod\_php in favour of the FastCGI method of Apache+PHP script processing (similar to the disdain for mod\_python in favour of WSGI in the Python community).
Is the LAMP 5.3.2 running 64 bit Linux?
Agreed, much of the installation and faq sections have become outdated. And in relation to FastCGI, php-fpm will exist in 5.3.3. :) And several ask about setting up multiple versions, so we may as well provide information about this.
It seems 'improving user comments' is a common theme here, which is understandable. The 'how' part however is a little more difficult. Maybe people here can provide a mockup or some other form of idea?
Good idea, I think the idea of keeping it two levels deep both keeps it simple yet solves a real problem (people fixing or following up other comments). It's a fine line because they aren't meant to be a discussion forum, but an extra level may be okay.
Ohh, I didn't know about php-fpm. It certainly looks interesting and I will definitely look into it (when I have the time =\\).
Simply stated, it cannot be improved. I have used it for over 7 years and the best method of using it is php.net/XXX where XXX is the function name. It provides the return result, the inputs, etc. Comments have rarely been useful to me, but they are useful nonetheless. The only thing that would be more useful is to built it into some type of local install to speed it up, but that would be more cumbersome than using php.net/XXX
Add flagging capability to the comments. 
It's great, but I often find myself annoyed when I do a search for something like "$_SERVER" or globals, etc. from the php search, first with its default to "function list" and then after I have switched to "this mirror only" but still don't get any useful results. However, if I just search from Google then it comes up fine. This is opposed to the function list search where searching for a function name pretty much always returns the right result.
Comments immediately go online. Moderation takes place after, but some items are missed. This format has probably outgrown itself over time (it's been this way for ~15 years) but the method has its benefits too. The future should most definitely harness the power of users better (i.e., self-moderation) which is something the voting/tagging/flagging/etc. ideas attempt to do. Here are a few [notes status](http://doc.php.net/php/notes_stats.php) for the curious. And *roughly* 20,000 out of 100,000 user notes remain in the PHP manual today.
Make it a wiki? (I haven't fully thought this through)
I'm taking this from Google's Webmaster Tools under the "Site Performance" section. Using YSlow I regularly get between .3 - 1 second. But I'm in a different country to where the site is hosted. When I visit the main office the speeds are slightly faster and more consistent. Amazingly today I'm getting the entire html downloaded in 94ms! The only optimisation left is to offload the images to a CDN. But the traffic doesn't warrant the cost yet. It is a hugely image-led site. According to GWMT "**Performance overview** On average, pages in your site take 0.3 seconds to load (updated on May 24, 2010). This is faster than 99% of sites. These estimates are of low accuracy (fewer than 100 data points)." The site has just launched so the traffic isn't huge. Currently 2 of the 8 planned languages are live, getting between them just over 10,000 uniques a month and an average of 5 pages per visit. That kind of traffic isn't going to make us rich, but it's still early days. Most of it comes through adwords. I work on another well established ecommerce site with close to 300,000 uniques/month. And that's only the UK site. There are 7 sites in total all running off the same hardware and code base. But I don't have the memory usage for that one. It's slow as hell though. Too many people making decisions. Marketing wants their widget. The product dept want their crap. The CEO wants his special thing on every page. Loading time for that is 3-6 seconds! Again, this is from Google WMT backed up by YSlow. Sorry to be so off topic. I know this should be about memory usage. But I get all geeky when it comes to speed. I just bought a spiffy new SSD for my MBP and had my 3rd cup of coffee this morning. bzzzz bzzzbzbz bzzbzbzbz zbzzzzzz
Wow this made me even more proud of my framework's performance. The (very data heavy) home page of a client's site it runs on takes up 1.54 MB pre-render and 1.92 MB post-render. The framework itself, prior to performing any actions and outputting any data takes 110 KB (26 KB more than a blank php file)
3mb on my local server, 4mb on remote (local has a few images missing so could possibly be that? local is Windows, remote is linux).
You can search in the documentation as well.
Definitely there should be invested a little more time in documenting the SPL. For me it is enough the way it is, but for new users it would be troublesome.
We had to raise the memory limit to 512M, with Symfony. Doctrine is the worst, but Propel can use a lot of memory too.
the code was probably throw in at the top of another script before he copied it.
threaded comments might help; if someone posts some ridiculous crap, the replies will be grouped with it. At the moment there's a lot of stuff like "Joe's comment 14 replies down said...". So threading would help with that. I also feel that voting on comments might help. The "see also" section is often really useful.
&gt; they aren't meant to be a discussion forum why not? I mean really. You could create user profiles, a karma system, threaded discussions under each manual page. You'd build a massive community of PHP developers in no time, and it would be an amazing resource for developers.
I'm pretty sure that the date function is the most viewed. At least I use it the most :)
I agree with most of the sentiment here that the documentation is thorough and easy to read (and the user comments are invaluable). I was preparing to note how difficult it was to locate the **See Also** manual page subsection, but, considering it has been a short time since I have been to the manual, it looks like it has already been improved. Huzzah! 
This. I always have to mess around to find PCRE stuff (I can never remember "/(?&lt;named&gt;matches)/ syntax) -- couldn't it be linked on all preg_* manual pages? Also, when I type http://php.net/string I expect to go to http://php.net/manual/en/ref.strings.php but end up at http://php.net/manual/en/language.types.string.php -- perhaps not everyone expects this behaviour? I think that anyone who knows that http://php.net/search works is probably looking for functions though. Maybe I'm wrong on that count. Overall though the manual's amazing, thanks a lot for all the years I've used it.
Not on a manual. Please. I hope you're being sarcastic.
is it that much of a leap from the existing comments section? I'm not suggesting the existing documentation be removed or changed at all. Just where it has comments at the moment, have threaded discussions. Like how imdb pages have the "Message Boards" box at the bottom. It doesn't interfere with the standard of the content outside the board, and it adds value.
There are plenty of communities all over the internet for PHP, what need is there for one that the manual staff would need to expend time creating and maintaining? I don't get it. The advice on the manual pages that users contribute is already bad enough (as mentioned a few times), giving it further credibility by building a sparkly new system around it genuinely scares me. I like the idea to have a 2 level threading so that at least the current system is fixed up, and basic voting would be good to knock down stupidity. I'd just prefer that the manual staff continue to focus on the manual, not the comments.
&gt; I'd just prefer that the manual staff continue to focus on the manual, not the comments. well sure, if it's an either-or I'd go for improving the documentation over improving the comment system too. But I don't know if it is an either-or situation. And the docs don't really need improving. &gt; The advice on the manual pages that users contribute is already bad enough yes, and we have no way of knowing if jim@example.com is a good contributor or a bad one. With a karma/rating system, correctly done, we'll be able to build up trust in certain users, and you'd know to take users on "1 reputation point" with a pinch of salt. Note that it needs to be designed properly; the fact that you have 500 karma and I have 7000 doesn't at all mean that my opinions are worth more than yours. A reputation system would have to work more as an average score per comment than a cumulative score. Building a genuine forum for discussion can cause badly thought-out comments to be reduced. Currently the barrier to entry for comments on php.net is very low. Look at hackernews and reddit; we have few trolls and a decent signal-to-noise ratio because we get rewarded for saying good stuff and penalised for saying bad stuff, and we have intelligent conversations because the discussion medium supports it; threaded comments and notifications of replies. &gt; what need is there for one that the manual staff would need to expend time creating and maintaining? Improving the knowledge and practices of PHP developers everywhere. Not a worthy goal? *Plenty* of people read the php docs who would never look at /r/php or any other community (moreover, these may well be the people most likely to produce horrific code, and thus who would benefit most from this). By "bundling" it with the docs, you get the message out to more people. If the community is structured correctly, you can improve the quality of PHP developers and thus the image of PHP. By building the discussion forum into the manual, you implicitly keep everything on topic. Imagine /r/PHP with no self links and all the links as php manual entries. What a great knowledgebase that would be. No?
It's been a long time since I've used it, but sounds like CakePHP to me.
Ok, with the proviso that it shouldn't affect time spent maintaining the manual proper, I can buy into your suggestion.
please no. I love wikis, but programming docs are one place where pinpoint accuracy matters massively. wikies do not afford that.
When I first started with php 8+ years ago it was my first language and I couldn't make sense of the manual but now I just love it, it is so simple and so easy to use.
I stopped contributing to the manual some time ago when my comment about closures not being able to be serialized was deleted by a moderator because it was a "bug report". Well they wont add that functionality to serialize and 18 months on the manual page for serialize still claims it handles every type except resources. Could have just left my comment up about it because i know people would have found it useful to know that information. I was apparently just wasting my time letting other people know.
Perhaps use a voting system just like reddit? Stupid comments get buried, good ones get pushed to the top.
eCommerce uses a shit-load of memory, if you have any degree of organisational complexity of data.
It's BSD as far as I remember 
Nifty I knew about this but never really used it. Reading over the page I also saw memory_get_peak_usage(). Out of curiosity I ran it on a few scripts that I keep running in the background. They were fairly simple but were peaking at 14MB. I found the culprit and now it's running tidily at 432KB max.
as long as your user has permission to both of the databases, you can just do it like this: SELECT * FROM db1.names,db2.occupations WHERE db1.names.id=db2.occupations.user_id So, yea, if you can get 1 user with permission to both DBs it will make your life easy
Thanks. Fortunately, I am able to add such a user for this application. And it works. However, is it possible the other way? I may not always have that easy option.
It should work pretty much exactly as you expect. Create two database connections, making sure you set `$new_link = true` otherwise it will reuse an existing connection. The comments section for both `mysql_connect` and `mysql_select_db` at php.net have lots of examples.
i've never done this, but i *think* you can open 2 connections by using [mysql_connect()](http://us2.php.net/mysql_connect) and setting the "newlink" attribute to true, but only if you're not in safe mode. (which you should be, anyway)
He's right about micro optimizations. How many articles have there been comparing double quotes to single quotes? You know what, the extra micro second it takes to parse double quotes is far, far, far (like 100x) slower than disc access or database queries (usually also disc access), etc. So spend your time learning how to cache things, it'll have a much better performance benefit than arguing about single/double quotes.
Very good presentation. Good thing he mentions that you should start by optimising the DB, bad thing he points it out at the end. More offten than not I've found that the reason a script takes long time to execute is lack of / incorrect indexes - use EXPLAIN SELECT .... to save yourself a lot of trouble :-)
A few of the bug fixes I've submitted over the last were manual fixes, and I was shocked at how fast they were picked up and corrected. The only real change that I think would really help is threaded comments instead of the current "last to first" display. The comments tend to be really valuable, but occasionally hard to follow. Additionally some comments are more valuable than others- a reddit style voting system may be interesting.
It is both. It automatically marks and removes it and I manually confirm it or deny it. I am going to have to ask you to stop reverse engineering Reddit on this subreddit. I do not think that reverse engineering is allowed in the TOS and we really dont like spam in this subreddit.
Right now we're looking into using memcached, I'm surprise they haven't tried anything like this before in our company.
how many of you use output_buffering? What's your experience like?
It's amazing what using a memory cache will do to the performance of a website.
+1 for profiling. Profile your code first to find the _actual_ bottleneck, instead of just blindly stabbing at the problem.
I always use output buffering. It works as advertised. Output is buffered. What kind of experiences are you looking for?
Don't forget that you can store anything in memcache, including entire objects. Keep in mind that you probably don't want to store stateful objects with their state in-tact, and that __construct doesn't have a return value. If you want to use a single code path to instantiate both new objects and cached objects, you'll need to create a static method to deal with the work. This can get ... entertaining.
It's a nice idea and useful for the most extreme simplistic cases. But I think there's room for more flexibility while still keeping it simple. For example, storing your db resource statically limits you to one database instance. And from what I skimmed, it looks like you can only update tables that have an autogenerated identity column, which leaves some tables and many updateable views out of the loop. Making slight changes in those departments would be a huge boost to flexibility. But overall great idea and nice execution.
cache cache cache, and cache! It's amazing how much you can save by caching. Another tip, for things like cleaning tables, cleaning cache, process invoices, sync tables etc... put them in cronjobs, users shouldn't have to wait because you are doing tasks in "front office" that could easily be done in a job. Btw OP, great presentation.
The project I'm on now, I have been forbidden from using joins. 
That's terrifying. Are you expected to destroy your DB normalization to get things done, or perform an ungodly amount of SQL queries?
Yup! destroying DB normalization. Inserts/updates are getting a little trickier. To be sure, I'm rewriting a successful site--not creating a new one.
Why? Is your method faster?
Yeah, good thing that RAM isn't as expensive as it was a few years ago.
I was going to leave it to reader to test for themselves as to why, but in short yet. Let me preface by saying if you're dealing on the order of 10ish values it may not matter. Option 1: The initial collection is growing unbounded; memory hog for large sets that the internals still traverse over again to find out what's unique. Option 2: The memory doesn't expand but you're still traversing it all each check to make sure you don't have it. Option 3: It doesn't matter how many times you get the value you're looking for. The hash arrays are one good thing php offers. The lookup is fast-ish so you're either just adding one entry or setting the value to itself. The internal search for the index is the best this language offers. Do your own benchmarks before you believe my random-guy internet comments.
It doesn't waste memory and isn't slower (at least).
what i meant to ask was how's the performance compared to when you're not buffering? how does it increase the browser rendering speed?
It's still good to know what one does over the other, and when you know, you're more likely to use single quotes. It's sorta like using `fetch_assoc` vs `fetch_array`, they both basically do the same thing, but one is more efficient and it takes no effort to use the faster one.
Use it, you'll actually find an increase in load time.
Nope, but you can make yourself one with preg_replace :)
Why?!
Here's a go at it. Not very tested :) &lt;?php function linkifyUNCPaths($str) { if (!preg_match_all('/([ "])\\\\[^\1]*?\1/', $str, $m)) return $str; foreach ($m[0] as $match) { // remove leading/trailing space or " $unc = substr($match, 1, -1); // split into parts, urlencode and join with forwards slashes $encoded_unc = join('/', array_map('rawurlencode', explode('\\', $unc))); // linkify $str = str_replace($match, sprintf(' &lt;a href="file:///%s"&gt;%s&lt;/a&gt; ', $encoded_unc, $unc), $str); } return $str; } // must escape backslashes when literal $str = ' Check out the file located at \\\\Server\Share\File.txt for more info. Check out the file located at "\\\\Server\Share With Spaces\File.txt" for more info. '; echo linkifyUNCPaths($str); /* gives: Check out the file located at &lt;a href="file://///Server/Share/File.txt"&gt;\\Server\Share\File.txt&lt;/a&gt; for more info. Check out the file located at &lt;a href="file://///Server/Share%20With%20Spaces/File.txt"&gt;\\Server\Share With Spaces\File.txt&lt;/a&gt; for more info. */
Always - helps with sending cookie / session data after the actual content was generated. Also usefull for full-page cache systems (ob\_start(), ob\_get\_contents(), ob\_end\_clean())
Hey, thanks for doing this. I don't need it, but I appreciate quality posting.
If you use memcached, make sure you use the latest build, the memcached (not memcache) PECL extension, and you use igbinary for serialisation and the binary protocol for communication.
My rule for using single vs. double depends on the type of quotes in the string. If the string contains double quotes, use single, if it contains single, use double: $string1 = "Hello, Mr. O'Reilly, how are you today?"; $string2 = 'He responded, "my boy, I am fine."'; That way you don't have to escape a bunch of stuff and the string looks horrible. I also wrap {} around my variables in double quotes so I can use complex variables and they're easier to spot.
It's my humble opinion that if you need to send headers after you've sent output to the browser, you're doing it wrong.
Speed. Being able to Migrate Datasource from MySQL to Solr/into the cloud. 
&gt; I also wrap {} around my variables in double quotes so I can use complex variables and they're easier to spot. How come I was never told about this? (never saw it used, either) Time to read [the strings page](http://php.net/manual/en/language.types.string.php) again.
Something 90% of web project managers don't seem to realise; database access will ALWAYS be the bottleneck and no amount of server config tweaking will improve the performance of your SHITTY WEB APP that performs &gt;30 FUCKING QUERIES PER PAGE. /life
Yes, but that is only one use for outpu buffering. Used long before MVC became the (so called) industry standard.
Yeah, that's often the way to go, but since I use double-quotes in strings more often than single-quotes, I use single-quotes to encapsulate more often. Eg. HTML tags.
I would agree with the exception of the location header. I find many situations where a redirect is needed especially in a modular framework where an error or access denial occurs in a module after other modules have already been outputted.
Thank you very much! You're a genius! It works great! I had never heard of the "sprintf" function before.
This idea is growing on me, but the amount of thought and work required to pinpoint the behaviour, and of course implementing it ... isn't. ;)
Yeah agreed, it's not always obvious where it should go. For example, error_reporting is both a directive and function but in this cases we try to ensure that both places refer to each other. Also, in your particular example, string goes to the type string, whereas strings goes to the string functions, and the main reason is due to the url (filename) difference. Having a box that shows after every such redirect is another option, which would list alternatives to the one chosen (e.g., after php.net/string redirects to types.string, a box would say "did you mean string functions? or ....").
That's unfortunate. Maybe someone wanted you to file a bug report instead, and/or was having a bad day, and/or some form of miscommunication took place. Usually such things get folded into the manual proper.
Well if you really wanted the manual to be improved you would purge the box checkers overseeing the moderation of the manual and get people who are proactive enough that if someone really does make a "bug report" in the manual they will fill in an actual bug report in the right place so the problem gets resolved instead of dismissing it because it is not in the right place.
Not convinced that this is more memory efficient: &lt;?php $max = 1000000; $arr = range(1,$max,3); $arr2 = range(1,$max,2); // merge the two ranges so the array has some duplicates $arr = array_merge($arr,$arr2); echo count($arr)." entries&lt;br /&gt;"; /**/ // option 1: $start = microtime(true); $collection = array(); foreach($arr as $val) { $collection[] = $val; } $collection=array_unique($collection); $end = microtime(true); echo ($end-$start).'ms&lt;br /&gt;'; echo memory_get_peak_usage()."-".memory_get_usage(); //833334 entries //38.997009992599ms //192376568-133514496 exit(); /**/ // option 3: $start = microtime(true); $collection = array(); foreach($arr as $val) { $collection[$val] = true; } $collection=array_keys($collection); $end = microtime(true); echo ($end-$start).'ms&lt;br /&gt;'; echo memory_get_peak_usage()."-".memory_get_usage(); //833334 entries //0.99895691871643ms //212373576-154844960 ?&gt; this kind of benchmarking isn't my forté, so I'm looking forward to being corrected on my code. It is certainly a lot faster with option 3 though.
I was actually wondering if there is a difference between the two, with regards to performance or functionality, why should I choose memcached over memcache?
It's new, it's maintained, it has more functionality, and it uses libmemcached rather than the native memcache API, giving additional functionality. It also support IGBinary serialisation, and the binary protocol (although I believe memcache now supports this too). We've found it to be far faster and far more stable.
Occasionally when I search for things like "php array functions" on Google I end up [here](http://php.net/manual/en/language.types.array.php) (the first result), whereas I want the function list. Not sure if you can really influence SEO stuff but maybe make the link to the functions more prominent in the intro page?
&gt; Is your method faster? I wrote [a benchmark](http://www.reddit.com/r/PHP/comments/ce5m0/please_dont_do_this/c0s09un) to test the two approaches, because it wasn't immediately obvious that method 1 was inefficient. Option 3 is much much faster. Memory issues I'm not so sure about.
&gt; Option 1: ... memory hog can you comment on my [benchmark](http://www.reddit.com/r/PHP/comments/ce5m0/please_dont_do_this/c0s09un)? I'd like to know if I'm doing it wrong.
Here's what I get when I try &lt;?php $dataSet=range(1,10); $collection=array(); $time=-microtime(true); /* //Option 1 start for($i=0;$i&lt;10000;++$i){ $collection[]=$dataSet[$i%count($dataSet)]; } $collection=array_unique($collection); //Option 1 end //Option 2 start for($i=0;$i&lt;10000;++$i){ $collection[$dataSet[$i%count($dataSet)]]=true; } $collection=array_keys($collection); //Option 2 end //Option 3 start //This should have been busted out into two comparisons but for option four compare the loop w/ the alternate //interior of $collection[$i]=true for($i=0;$i&lt;10000;++$i){ if(!in_array($i,$collection)){ $collection[]=$i; } } //Option 3 end */ $time+=microtime(true); print "Option 3: " . memory_get_peak_usage()." bytes, $time \n"; //Option 1: 1500944 bytes, 0.069337129592896 //Option 2: 331232 bytes, 0.0036189556121826 //Option 3: 1195272 bytes, 1.308531999588 ?&gt; First this was ran just as a command line script to get a feel for the impact of just what we're looking at and not having to worry about other environmental factors hitting it through apache. You'll notice that I'm building a large collection but pulling from a small dataset. Memory savings aren't as great if your set your pulling from is going to be largely unique to begin with. 
 $collection = array(0, 1, false, true, null, ''); Now what? array_push($collection, array(), new stdobject); Now what? You should apply for a job writing in the php.net user comment section.
Step 1) You have a collection with the values illustrated Step 2) You get a compile time error. Perhaps you meant stdClass? Assuming you did that get's added to $collection. If you did then the method I described wouldn't be very appropriate or functional. You know there is a difference between constructive criticism and being a pompous ass. I"ll get right on that job application, let me know how your application to /b/ works out.
[Swiftmailer](http://swiftmailer.org/) is the overall best PHP email handling class I've used. But can you be a little more specific about what you mean by *receiving* email with PHP? Surely you don't want to write a mail server in PHP.
My guess is he means parsing incoming emails. Like perhaps an email to foo@bar.com triggers a filter (e.g., via cpanel) that is then saved as a text file somewhere. Then, parsed where things like attachments are extracted. I'm not making a recommendation here but long ago I used [mime_parser_class](http://www.phpclasses.org/package/3169-PHP-Decode-MIME-e-mail-messages.html) for a project and it seemed okay.
Did you add your SMTP server's address/ etc to php.ini?
I wrote [one of these](http://code.google.com/p/mortar/source/browse/trunk/system/library/Imap.class.php) but never publicly released it outside of it's [parent project](http://code.google.com/p/mortar/). It's currently being used for a few projects, including a helpdesk. It can handle multipart messages and attachments. BSD license. It prefers IMAP but can also do POP3. SSL is supported as long as the imap extension was installed with it. The only changes you'd need to make it work for your library/code are at the very bottom of the file, properly commented and everything (I used this outside of the parent project quite a bit). I'd be happy to help you with it if needed. At some point I need to really release it 'publicly', as this conversation keeps coming up.
Maybe [mailparse](http://php.net/mailparse) or [zend_mail](http://framework.zend.com/manual/en/zend.mail.read.html)?
Check out [fMailbox](http://flourishlib.com/fMailbox). It does not require any non-standard extensions (such as imap) and has been tested with various servers, attachments, multipart messages, SSL, and more.
It's been a while since I tried messing with it. I remember we ended up using PEAR's mail package to get what we needed done.
Have you tried [this](http://www.php.net/manual/en/function.include.php#76675)?
No, that wouldn't really work. The $_GETs are there to change parts of the page, which the main script doesn't know about. Thanks for the suggestion though :)
If the main script "doesn't know about" the data you want to pass to the `include`d script, I'm at a loss as to how that data would get there.
Hmm. Explained that badly. All pages are got though index.php, which includes several bits such as headers and the page. On one of the pages I have, I want to be able to use /pagename?trigger in the url to show/hide part of the page. This is the only page that does this, and index.php is there for many diffrent pages.
I've got 2 php scripts, index.php and get.php index.php &lt;? if ($_GET['page']==1) { echo "Hello "; include ("get.php"); } ?&gt; get.php &lt;? $name = $_GET['name']; echo $name; ?&gt; http://website.com/index.php?page=1&amp;name=Jason produces Hello Jason I don't see what problem you're having.
`/pagename?trigger=true`
&gt; /pagename?trigger No offense, but you mean "/pagename?trigger=1" right? $_GET['trigger'] would evaluate to false if not.
&gt; echo $name; echo htmlspecialchars($name); Don't want to open XSS holes.
"/pagename?trigger" evaluates to an emtpy string, so can be found with isset.
The problem is that $_GET can't be accessed from get.php
uuuh, why not? Don't get me wrong, the ops script is just one giant security hole, but it should work.
Right. Just had to check you weren't relying on "if($_GET['trigger'])" Other than that, there's no way to find out what's going wrong here without code.
there are a number of dummy smtp servers like devnullsmtp or smtpdummy. or you can change mail() to email() and write a little function to log emails to text files or whatever. when you launch your application, change the code to call mail() from your wrapper. 
Okay, i'll put the code up.
It's not the final script, just the first version of it. Some of us have to learn php before being able to do it properly ;)
I'd actually like to write a suite to test some mailing list mailings that I'm doing. I bcc them all to an address. I'd like to have a script that runs periodically, checks the mailbox, and sees that certain messages were sent to certain email addresses. What should I use?
By default Ubuntu uses exim4 as a MTA instead of sendmail or postfix. Exim is a great MTA, but the problem is the way PHP is configured. Look at your php.ini file (run phpinfo() to find out where it is. I use php-cgi, so mine is in /etc/php5/cgi/php.ini). Search for "*sendmail_path*". The default Debian configuration points to the executable at */usr/sbin/sendmail* with the flags *-t* and *-i*. This configuration works perfectly for sendmail and postfix, but the *-i* flag causes exim (installed by default in ubuntu server) to fail. You have two viable options. * 1) Keep Exim4 and modify your php.ini file. * 2) apt-get purge exim4 and apt-get install postfix or sendmail. for number 1, find "*sendmail_path*" in your php.ini file, make sure it is commented out, and add this modified line below it: ;sendmail_path = sendmail -t -i sendmail_path = /usr/sbin/exim4 -t That should be the easiest way to get the php mail() function working. You may also want to *sudo dpkg-reconfigure exim4-config* since it only has a default configuration and you probably want to customize it to your own tastes... or at least send mail from your own domain?
Are you basically trying to do include("somefile.php?somequerystring"); and check isset($_GET['somequerystring") from somefile.php If so, your right you can't. You can however do include("http://webserver.com/somefile.php?querystring") But it's not exactly recommended. I remember that I tried to do this when I first started learning php, when I realised I couldn't, I started looking at getting a similar result using oo &amp; classes etc and that all became much clearer. 
Can you give an example of a querystring you are passing to the script in the URL?
That doesn't answer the question- why can't $_GET be accessed from get.php, it should work just fine.
I'm trying to include include("somefile.php"); from the url http://domain.com/pagename?getthis And url includes are off :(
http://domian.co.uk/page?echoxml All pages are rewitten to index.php.
This is my problem. It *dosen't* work as expected.
You want [Zend_Mail](http://framework.zend.com/manual/en/zend.mail.html). It makes [reading mail messages](http://framework.zend.com/manual/en/zend.mail.read.html) dead simple. I run a small site that converts Second Life snapshots into images. The emails arrive as multipart, with several attachments, and Zend_Mail abstracts all the crazy away. You connect to the mailbox. I use imap, and I actually have it hooked into gmail (google apps hosted). $mailbox = new Zend_Mail_Storage_Imap($options); The $options there are externalized, it's basically just an array of user, host, password, any other tls or ssl settings and whatever the heck might be available for configuration. If you want to see how many emails there are, you can use: $mailbox-&gt;countMessages(); You can now easily iterate over all the messages using foreach: foreach ($mailbox as $messageNum =&gt; $message) { /* @var $message Zend_Mail_Message */ // do processing here. } When you're handling individual messages, you can use the recursive iterator from the SPL to iterate over the entire possibly nested multiparts. foreach (new RecursiveIteratorIterator($message) as $part) { /* @var $part Zend_Mail_Part */ try { if ($part-&gt;getHeaderField('content-type') == 'text/html') { // handle the text/html part (this happens to contain the message in my case) // $part-&gt;getContent() grabs the content. } if ($part-&gt;getHeaderField('content-type', 'name') == 'secondlife-postcard.jpg') { // found the postcard I was looking for. process the picture here. // in my actual code I use "$this-&gt;setImage(base64_decode($part-&gt;getContent()))" } } catch (Zend_Mail_Exception $e) {} // ignore any errors } The neat thing is just that it's so easy to iterate over everything, grab the various parts / attachments of the email as you want and process them.
is "?echocode" the actual querystring? what does your rewrite rule look like? I'm wondering how you're expecting that $_GET['echoxml'] variable populated in your example.
[Here's](http://code.google.com/p/rivet/source/browse/trunk/modules/Rivet/classes/EmailReader.class.php) an example of the library in action. This is that helpdesk software I mentioned before, specifically the class that loads emails into the system as tickets.
Test code is serious business.
I'd hate to say it, but the Horde framework has an application "IMP", which contains some pretty robust MIME parsing classes capable of handling virtually any message. Unfortunately the whole think looks like it was written and designed by a million retarded monkeys.
If it handles IMAP, then it will handle folders.
Do you mean without *installing* the whole framework? Zend is one of those frameworks where you can pick and chose what to install and use. There will be *some* dependencies, but you certainly won't have to install the whole thing.
Redirecting on a 404 is the most annoying thing ever. Don't do it.
First thing I would do is put a var_dump($_GET); at the top of Page.php. It's hard to tell where you would be going wrong without an example URL in which you're having this problem where you say GET isn't being passed (like 'index.php?echoxml=1').
I'm guessing that you're losing your query string in the rewrite. Your code looks fine. Check your rewrites.
I'm guessing it's a problem in your .htaccess. Something's going wrong in your rewrites. Have you checked that echoxml is present in index.php? Just because you can see it in the request uri doesn't mean it's getting parsed into $\_GET. $\_SERVER['REQUEST\_URI'] comes directly from apache before any rewrites.
Fuck yeah on the Zend_Mail. It made a huge pile of daunting mail-related tasks quite manageable. 
I own a server (linux). Want to know if I can send free SMS to my fam and friends via a PHP script. There are a few PHP scripts out there but the authors have abandoned them. I am not sure why.
Also, why do SMS gateways charge $$$ but we send email for "free"?
Google voice - create a phone number for your site, then call [gvoice.py](http://everydayscripting.blogspot.com/2009/08/python-google-voice-mass-sms-and-mass.html) via your favorite flavor of [exec](http://us3.php.net/manual/en/function.exec.php).
I tend to grab [formatting.php from WordPress](http://core.trac.wordpress.org/browser/trunk/wp-includes/formatting.php) for its escaping functions. There's a bit of a system for the function names so it's easy to remember. All the functions are like esc_attr_e (echo a string escaped for an attribute) and esc_sql (return a string escaped for SQL) etc. [More details on that](http://markjaquith.wordpress.com/2009/06/12/escaping-api-updates-for-wordpress-2-8/). 
http://www.zeepmobile.com/ Free, but ad-supported (they reserve the last 40 of the 160 chars of each text message for an ad) Their API is ok, but you can only send messages to people who opt-in to it.
Why not just send an email to the phone's sms gateway. It will show up as a text message. Example for ATT - send an email to 8882225555@txt.att.net and it will show up as a text message (replace the fake number with your cell phone number).
I'm not sure if this will help, but there are often email-to-SMS gateways. The email addresses are carrier-specific, though. See [this list](http://www.theblog.ca/free-sms-canada) for examples from Canadian cell phone providers.
Don't think Goo voice is available in CanuckLand.
Then you might be stuck asking your users about which provider they use and using [email-to-sms gateways](http://en.wikipedia.org/wiki/List_of_carriers_providing_SMS_transit) that a lot of providers set up.
It's not. :(
It requires having to know what someone's provider is, i.e. relying on the user to make the correct choice.
Accidentally teaching bad practices is seriouser business...er.
I've always wondered that too, I could drop my texting plan and just email phone numbers from my phone if I wanted to. But the unilimited text plan is cheap enough for me to not spend the time to spend the time doing that. My guess its a combination of the fact they already make a killing on regular texting + most people aren't aware of the email gateway for text messages.... btw if you ever need to transfer something from your phone to your computer, just email it to yourself from the phone. (even if you don't have a data plan). It's a lot simpler than the hell involved plugging your phone into your computer.
server side use a php aim daemon (They exist) to engage in aim conversations with their sms number
He has a good point. You through out some code without explaining why your method is better and the reason for posting it in the first place. You also neglected to point out that your method only works under certain conditions. Not to mention you're wasting your time with micro optimizing some code completely out of context. You should have taken a dump instead.
Then move
Can someone say why you can't just do strip_tags(stripslashes())? Would that be completely safe?
No, ?echoxml was the actual string. Thanks for pointing that out.
Hmm. Ok.
There are loads of good classes for interacting with google APIs if you're using Gmail.
What is the rewrite rule you are using? Also, as some other people have mentioned I would probably try var\_dump($_GET); at the top of both your included file and index.php to see what the value of that array is in both files. It should hopefully be the same unless something strange is happening.
The rewrite rule is currently: url.rewrite = ( "^/(.*?)$" =&gt; "/index.php?page=$1", "^/(.*?)?(.*?)$" =&gt; "/index.php?page=$1&amp;$2" ) [Using Lighttpd] I have changed them from something that may have broken a lot of stuff.
Your option 1 and 2 implementations includes a count() on each iteration. This means it's not a fair comparison. (also, if you tab all your code out once before pasting, reddit should paste it correctly) also I don't understand why you'd be building a collection larger than the size of the data set, if you're then going to dedupe it. Seems like this is quite a specialised scenario rather than a general principle we can take away and learn from. Other than the fact that `array_keys` is faster than `array_unique`. Which is actually pretty interesting.
I have used it – I wrote it. It does not currently support moving emails between folders for IMAP. It was built for the use case of monitoring an email inbox for messages to be automatically parsed for use in a web app.
I looked last year for free to but found nothing reliable. I went with a paid (cheap) service that has worked well. [Clickatell](http://www.clickatell.com) has been good and has a decent enough API
That is awesome. Thanks for the help. As usual the Reddit community comes through. I just laid some dough out for a Nexus One phone a few seconds ago. Can't wait to get it. Going to go Pay As You Go for voice and data rather than sign a contract. Awesome. Interesting (tangent here) some providers (like Telus) will offer money (~$300 rebate) if you commit to a 3 year contract. So it is like buying a subsidized Nexus One even though it isn't subsidized. I am surmise Rogers would offer a larger rebate if Telus is offering $300.
This was what I was thinking. Use Aim to send the messages. Shouldn't be that difficult. However, there is some limitations on the amount of messages you can send. And it is pretty low. So if you need to send them frequently you may have an issue.
Not sure if this will do exactly what you want to do. I searched google for Open Source SMS gateway and got: http://www.kannel.org/ 
We used to pay for an SMS gateway, but they screwed up and stopped being able to contact certain large networks. Still can't, AFAIK, months later. I have no idea why companies still use them. Then we tried a purpose-built SMS device called Foxbox. It worked OK unless you breathed on it too hard. It eventually died. Some sort of hardware failure. Now we use a Nokia phone w/ gnokii. We're basically sending messages from a real cell phone. So far it works OK aside from the occasional smsd segfault. Bonus: when the hardware device dies we can just replace it with another Nokia and we won't have to change the software again.
Clickatell is the provider we used until they lost the ability to contact some major carriers. I don't know if they've regained that ability.
Not necessarily. You could send to every provider and check for bounce backs. Granted, I'm not sure if every carrier will send a bounce back so it's less than perfect (and pretty spammy) but it could get around the issue of relying on the user. 
Post the entire script (on pastebin or somewhere).
Thanks! http://pastebin.com/sRAt6kia
as judgej2 already mentioned, you can treat the zend framework as a component library and only use the parts you want. there are _some_ dependencies (like Zend_Mail depending somewhat on the [Mime](http://zendframework.com/manual/en/zend.mime.html) component), but you don't have to use the whole MVC part of it. Still, I'd recommend you give the framework a shot. You can just start using whatever individual components as you please. It's rather well put together, allows you to build sites quickly and encourages best practices.
The code in your post doesn't appear in your pastebin. It also doesn't make sense to show that error there; the else statement as shown doesn't imply an error. You need to test whether mysql\_num\_rows() returns 0 or not if you want to display an error about zero matches. Also, the code is vulnerable to SQL injections. A (somewhat cumbersome and peculiar) function to escape the values is defined, but you don't use it to construct the SQL statement.
You definitely want to use some sort of library for sending mail instead of calling mail() directly. As mail() is pretty low-level, using it directly is very cumbersome for attachments and multi-part mail as you basically need to construct everything yourself and pass it as a string parameter. This gets hairy very quick, and it takes quite some effort to include the proper headers etc. to avoid being flagged as spam. Batch sending also requires lot of extra code to work decently, you can't just foreach ($recipients as $r) mail($r, ....) and get away with it when dealing with a non-trivial number of recipients. asshammer mentioned PEAR's mail package which is decent. I've personally used [SwiftMailer](http://swiftmailer.org/) a few times and find it quite good. You can specify whether you want to use their own native SMTP client implementation, a local MTA like sendmail or the mail() function as the transport backend. It also supports batch sending in a sane manner, as well as multi-part mail with inline images, attachments etc.
You can't use transactions spanning multiple HTTP requests, even with persistent MySQL connections provided by mysql_pconnect(). With the default Apache worker MPM (or any multi-process or multi-threaded webserver), each request will be served by the first non-busy child process which may be a different one than the one that served you the previous request. You will then end up with a bunch of webserver child processes each holding a connection to the database for their entire lifespan with uncommited transactions which is not what you want. For this scenario you want to save the data in $_SESSION and commit it to the database after validating everything when processing the final POST in page3.php This page gives a good overview of how persistent mysql connections works in tandem with webservers: [http://php.net/manual/en/features.persistent-connections.php](http://php.net/manual/en/features.persistent-connections.php)
I'll look into swiftmailer. The only hurdle might be getting it to work on dreamhost. I haven't looked at it yet, so I'm not sure what is involved yet. Thanks. If that doesn't work, I'll look into pear as well.
That shouldn't be a problem. SwiftMailer doesn't require any special priveleges to run, so if you can upload and execute PHP on your account you're good to go.
Simple, but efficient. An unlimited SMS plan + this might work better than other solutions. Does the smsd segfault when sending two messages at once? Have you tried to make some sort of waiting list for the messages?
Some of the example code is awful, there doesn't seem to be any sort of style guide used at all, some examples have brackets on newlines, some don't; other have comments while others don't. A good demonstration of this can be seen at [preg\_replace\_callback](http://www.php.net/manual/en/function.preg-replace-callback.php). The top example block puts curly braces on the same line as the functions and the brackets on new lines. The second and third examples switch between some brackets on newlines and some not. It would be nice if they followed the style guide of something similar to [this](http://codeigniter.com/user_guide/general/styleguide.html). I also feel the the SEO can use some work, most of the time when I do a search for a function I will get a comment shown as the description - it would be nice if the function parameters showed up instead, or a description of the actual function.
Store it all in a session and then insert it on the final step in a transaction...
Exactly. This needs to be held in a session, then committed when everything has been validated. This seems like it will never work properly, and adds unnecessary load on the database.
Kinda defeats the purpose of a transaction IMO. But then again, I guess there's a reason why I almost never use them. I was hoping there was just something I was overlooking, as there are several sites out there claiming this is possible.
The problem is that you're running multiple scripts, so all your classes and vars are reset when the new script loads. It sucks, but at least you have sessions to get past this problem.
That's very likely the problem. Unfortunately I don't have any experience with lighttpd so I can't really help troubleshoot those rewrite rules. Have you used var_dump($_GET); to see what is making it into your scripts? Sorry I can't help with the rewrite rules, hopefully someone else can. Good luck.
Yeah, I think I've found the problems using var_dump($_GET) and var_dump($_SERVER). I was rewiting it to take /page -&gt; /index.php?page=page, which ignored any gets.
If you only have the phone number you need to use a service, which usually costs money. If you can find out who their provider is you can use their [SMS gateway](http://en.wikipedia.org/wiki/SMS_gateways).
&gt; Kinda defeats the purpose of a transaction IMO It really doesn't, it's because of the way webservers and HTTP work this has to be done within a single request. HTTP is stateless which means that one request is entirely separate from another, so your second request will very likely be served by another process which has no idea about the transaction that was initiated by whatever process that handled your first request, and will merrily create a brand new, separate connection to MySQL where your COMMIT will fail since there's no active transactions on that connection. Any site claiming this to be possible is talking out of their arses. As a rule of thumb you should always use transactions whenever you're modifying the contents of a database. This will help you deal with errors, crashes and data consistency which in turn enables simpler code. For example, say you have in your database a table with two rows representing accounts where you want to transfer funds from one account to the other. One needs to be debited, the other credited. This requires two UPDATE queries which must be atomic, ie. you want to handle this as ONE operation - that is to make absolutely sure that the one cannot happen without the other. To guarantee this you must use transactions.
What can you use the API for? Could I load images based on words a person entered?
Haven't read the other comments yet, but this: &gt; I'd like the ability to rollback if someone fucks it up or walks away from their computer tells me that perhaps you should not be writing to the database at all until the forms are all filled in and finally submitted. It is no different to transactionless database connection.
&gt; Kinda defeats the purpose of a transaction IMO You need to understand where your transactions are. While the form is being filled in, the transaction is being held in the session, *not* the database. The three forms may actually need three different parts of the database to be updated, and *that* may be a transaction but all three parts would be updated in the same page request right at the end when all the data is available, with the ability to roll back if one of those updates fails. But like I say: don't confuse what a technology is designed to do, with using that technology to implement something inappropriately, which should be handled somewhere else. This is all about systems design.
Haven't tracked it down yet, dunno. It did just freeze up (stuck in some 100% CPU loop, futex'd on something) and had to be restarted. Looks like it's one of those Windows-style "reboot the thing constantly" services. Still, it's working better than the Foxbox does now.
good
I have a 'checkFields' function that receives an array and which fields must be present and which are string/arrays of string, also trimming them, and returns false if any field is non-existant. Usually called at the beginning of the script, like: if ( !checkFields($_GET, 'id', 'name', 'values[]') ) die;
And I thought I was over paranoid when I type casted EVERYTHING. NOW WHO'S LAUGHING?!
I hear ya - the dynamic nature of PHP can really bite you in the ass sometimes. I didnt even think about this string/array problem until a few months back, and I've been programming in it for over a decade now.
If you blindly cast your variables, you'll just never know when an incorrect value was submitted. (and you'll end up with "Array" in your database) Handle your input errors, don't ignore them.
You should be validating every user input before doing anything with it at all. It's good for security, eliminating bugs, and maintaining standardized data. 
In my experience the best way to handle this is on the application level, by using two separate connections. When I design applications I have a "default" with full permissions and a "default_read_only" account with just select access to the database. This has two benefits- 1. Select queries, the majority in most web apps, are done with minimal permissions. 2. Slaving requires nothing more on the application layer than changing a hostname in a configuration file.
Mysql proxy is cool how ever you have to make sure that the slave replication is working all the time and that it isn't backed up, you may need to skip dup key errors, but that shouldn't happen. Modifying your code is the best way, there is not a drop in replacement. I'd also recommend that you look at using MMM multi mysql monitor, it'll keep track of what master/slaves in check and do some cool shit.
You can use a combination-key where one is created at registration and the other is shared by all users (and remains constant for the duration of the existence of the application). This way if someone gets a hold of your database they will need to have more-than-passable knowledge of your application structure. Of course, the encrypted blobs will be difficult to search through (filtering a list of users based on their address/birth date/etc, for data analysis of course) considering the computational requirements. One thing to remember: make sure you authenticate and authorize every request for PII, and keep CSRF attacks in mind (they will be very difficult to fight off if you become a victim of such an attack).
as tedivm already wrote, do this at the application level. You can't really automate filtering read vs write queries and send them to different databases, because of the delay between the master and slave(s). So if you write a record to the database and immediately run a query that's supposed to include this new record on the slave, you might find it absent if it hasn't replicated yet. In general, my advice is to not go crazy on the slaves. It sounds like a good idea at first, but it's not an efficient way to optimize. Use a cache instead. If you're already using Zend Framework, Zend_Cache with a memcache backend is a fantastic choice. You'd get more out of a single memcache server with a gig or so of RAM than you'd get out of 4 or 5 mysql slave servers. Of course that all depends on how fast your read queries are, but DB reads are much slower than pulling something precomputed straight out of RAM via memcache. You can still use a slave db to run queries so you don't use resources on your db master, but I'd avoid trying to scale that out. It all depends on what you're storing, and what you're trying to do with it. in some cases mysql is sufficient, if you want proper searching capabilities you may want to add a separate lucene / solr instance for full text search, and in yet other cases you may want to use a document store (the nosql stuff) you can scale out and run map/reduce queries against in combination with memcache. something about the right tool for the right job and all that jazz.
wow. just wow. Good luck !
You know SQL is a language, right?
I'm reasonably sure that you want to look at http://php.net/manual/en/function.filter-var.php but i'm a bit drunk and not really sure I'm interpretting this well. In fact did I spell all that right?
At work I have a set of classes that I've worked on over the years that do this. Basically, there is one that generates an html table from a query string, with view/edit/delete links, one for updating a record, etc.
No, but between "lithium," "cake," and "stable," your post probably set off alarm bells at three-letter agencies all over the place.
That's what I'm looking for. i haven't found a good open source version of such a tool yet.
I've never really had too much a problem with it, but there are two things I am getting at, either could be bad, good, or a decent mixture. I started programming in general with PHP, so these concepts are just natural to me now. Although I've gotten a little into C++ and Ruby since, it still doesn't bother me much (although there are some things I would love to see PHP implement from C, such as data type declarations within functions). The second, is my curiousity has since expanded into other languages (as mentioned above). This could be good or bad, depending on your take on things. It was a basic start, and though there are similarities, I easily get confused with certain things (or I used to, such as function(string args[]), had no clue what the fuck that even meant). But, even the nature of PHP, sometimes it's not such a bad thing. There is always something to learn, which makes it fun and interesting. There is also a great barrier between average PHP developers, good developers, and great developers. It's usually not hard to spot the difference when browsing the code, either.
Thanks, we are already planning on implementing memcache its up on our test server and it just lightning fast now compared to our old disk based setup. Just got out from the meeting with the Tungsten guys, they seem to promise a lot and they said that their replication lag is lesser compared to mysql replicator. Now we're planning on evaluating Tungsten and a RW split using Zend Framework. Run some benchmarks and see which one is faster, I do think tungsten will win, but with memcache added to our setup now it might be a close competition.
symfony 2 is going faster so I think it will win the race. Twig (http://www.twig-project.org/) is a good implementation of Django template in PHP.
It's actually a pretty neat tool, I think it's really meant to be some code you include in your project to quickly make an admin backend.
I guess the main point of my post was to show the "gotcha" of the request variable possibly being an array and not expecting it. I think most people default to "OK this is user input and its coming in as a string". In all the examples I've ever seen I rarely, if ever, see verification that the user input is indeed a string, and not an array.
Look at the symfony/doctrine combo. It will essentially scan a table and build out and entire CRUD interface with pagination and filtering (including validation for the forms to match the length and types of the columns), no need to edit anything. http://www.symfony-project.org/book/1_2/14-Generators http://www.symfony-project.org/blog/2008/11/07/new-in-symfony-1-2-doctrine-goodies The how-tos might show you as building your table from a yaml or xml schema, but you can easily go the other way. 
I don't know of one either :( Have you looked at frameworks? I've heard good things about CodeIgnitor.
The developers have said several times that they won't commit to a specific date. However, with the recently-released v0.9.5, they've said that they believe the API is at a much more stable state. But I believe it's a mistake to label it as Cake 3, since it isn't. It was started by some Cake people, and it was initially an experiment to see what could be accomplished in Cake 3. But they decided it would be best for it to be a completely separate project, which it is now.
It isn't a race. There are fundamental differences between Symfony2 and Lithium (and the other upcoming releases, like ZF2), and if you're deciding on a framework, your decision should be based on the framework and not who can get it rushed out the door. 
Any ORM can be configured with query specific logic. Doctrine (my fav) or Propel, probably Zend, can have some query-time logic that says "oh this read is from tables X,Y, or Z and can use a slave" and you simply use that connection. While it's true that some queries wont be reliable due to replication delay, others will be.
I think you meant to ask what is common for generating a CRUD interface for a table. Doctrine is definitely my choice for an ORM. After that, I code up JSON responses and feed it to ExtJs grids or code out html tables as those approaches work within the confines of any framework. "Modifies a MySQL table" meaning, modifying table structure, should not be done via a script, in general. PhpMyAdmin is adequate for most changes.
Sorry mate - I meant to say provides CRUD operations.
The traditional release date for most open source software has and will continue to be: when it's ready ;)
using gui apps to modify mysql table is so time consuming and slow. Learning sql was one of the best decisions evar. It'll save you a boat load of time too!
Code examples [officially should] follow the PEAR coding standards, but sometimes they don't. Agreed we could use some SEO help. We messed with microformats for awhile but I forget where that went.
Well the idea is you use it for a "custom cms". For example you might have a table that holds a list of links (which are displayed on the "links" page of a website). The owner of the website might want to manage the links that are shown. So you need to write them some kind of "admin control panel" script where they can do all of the CRUD operations in a user friendly sort of way.
Well, for a start, you don't have any META tags describing your content.
yes sure, but if I want to choose a PHP 5.3 based framework documentation and stable release date are important to make a decision.
Beware replication lag, depending on the amount of traffic you're handling, I'd say force master for reads/writes by default and leave it up to the feature implementor to chose slave if it makes sense. That said, all you have to do is extend Zend\_Db\_Table (fetchRow, fetchAll, fetchColumn for slaves, insert, update, delete for master). It's actually pretty simple.
Absolutely. You can't use what is never shipped. :) But *comparing* Symfony2 and Lithium by release dates belies the most important method of comparing them: which framework enables you to get the most accomplished? Since these two frameworks happen to be so different, I think it's important to start there. I mean, Lithium's filtering system alone is so unique, it's really a very different framework altogether.
do you have a page where this works? I tried it across 3 different servers here at work and didn't get anything.
Nice! Now I'm going to tell the users of my PHP apps that I added that...
if you have [expose_php](http://php.net/expose-php) off it won't work. It works on my blog: http://www.puremango.co.uk/?=PHPE9568F36-D428-11d2-A769-00AA001ACF42 and as you'd expect, on http://php.net/?=PHPE9568F36-D428-11d2-A769-00AA001ACF42
I [blogged about this](http://blog.roshambo.org/archives/A-brief-history-of-PHP-logos.html) a couple years ago, which includes a few additional details. Also note, it's intentional that **php\_egg\_logo\_guid()** is not documented. :) Also, it's an [elephant](http://no2.php.net/?=PHPE9568F36-D428-11d2-A769-00AA001ACF42) as of PHP 5.3.0.
&gt; **elephpant** FTFY
Is **this** what they're spending their time on?!?!
Yes, years ago.
wow.. it seemed to work on all my sites.. good thing i discovered it by myself and know it's an easter egg.. had somebody else shown it to me, i would have been really freaked out
Hey, cool. If somebody wants to hide the PHP version (or the fact that PHP is used), just add `?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000` to the URL and see if it's still PHP4. **Are you out of your fucking mind??** 
yeah, and disable expose_php and it won't work, so, um, that's not true.
What? I can't see the cute dog when I disable `expose_php`? **Are they …** Oh, well. OK then … 
Fucking unmask, how does it work?
Check point #13 on this page: [http://www.hosting4developers.com/2010/06/setting-up-lamp-server-on-rackspace.html](http://www.hosting4developers.com/2010/06/setting-up-lamp-server-on-rackspace.html)
He said &lt;q&gt;how are you?&lt;/q&gt; He said "how are you?"
One other thing I just thought of: sometimes it's hard to search for things that aren't functions in the php docs. Like if I want to know what `&lt;&lt;` or `%` or `&amp;` does, it's difficult to find that.
&gt; does the current mask stay as 0755 unless I change it back to what it was origionally? That seems to be the case, judging by [the docs](http://uk3.php.net/manual/en/function.umask.php): &gt; die('An error occured while **changing back** the umask');
&gt; mail() doesn't work you surely have suffered enough crappy client support messages to know that techies need more info than that. Does it tell you the function is undefined? Does it seem like it works but your mail never arrives? Do you get an error message? Does the mail come through malformed? Are you specifying the From header correctly? There are a million things that might be wrong. Give us as much info as possible and we can help.
* There are a lot ([see slide 8](http://www.slideshare.net/mwillbanks/art-of-message-queues)), including [ones](http://github.com/s0enke/dropr/) in plain php. Also, see a nice [comparison](http://www.darkcoding.net/software/choosing-a-message-queue-for-python-on-ubuntu-on-a-vps/) for a few of them. * Try [Gearman](http://php.net/gearman) if you're just learning about the topic, since the PHP community has a lot of info ([blogposts](http://www.planet-php.net/search/gearman), slides) about it. * Try [mk-archiver](http://www.maatkit.org/doc/mk-archiver.html) if you need to archive/delete large amounts of data from a MySQL DB ([see slide 5](http://www.scribd.com/doc/15014708/Make-Your-Life-Easier-with-Maatkit)).
Excellent, thanks! Definitely alot to keep me busy for a bit :) RabbitMQ was the one I had seen before
K-I-S-S-I-N-G Obligatory.
[Digg](http://code.google.com/p/digg/wiki/Muuttaa) has their own SQL queue.
If you like Mongo and can run 5.3, you might check out the Lithium framework. http://lithify.me
Ok, it's cool and all that you're showing a comparison, but knocking MySQL, when comparing the PHP code to MongoDB? The author sounds like a douche, and a lot of the MySQL code he is using, is dirty. Sure, MongoDB code might be easier, but all that ridiculousness is still happening, just in the background. I guess this is normal though; people who do comparisons are 1) not qualified to do so, and 2) retarded. Great write-up though; better than most!
Excellent, and a PEAR install. Thanks!
MongoDB looks like an interesting project, but I've just heard too many horror stories about it recently to do anything other than play around with it.
This is silly, he's comparing some MongoDB library class (which obviously offers lots of abstraction) against simple procedural, low-level MySQL-client functions. A feature comparison between MySQL and MongoDB could be interesting. Comparing two vastly different interfaces is not.
define "faster".
We have been moving pretty steady on the releases. The 1.0 version was still receiving heavy development but we have not pushed it out because it lacked a few important features that the current users were demanding. That said, If we could get a few more people to chip in by writing docs, fixing bugs, finding issues we could get there faster. The current codebase is pretty stable since it is back by a very large collection of test cases. Please feel free to join #li3 on irc.freenode.net to chat with other developers and help get us to 1.0 sooner.
Symfony2 announced that they are shooting for late 2010- early 2011. I'm pretty sure Lithium will beat that considering it's at 0.9.5.
@upKelsey @elsand: I was trying to make it witty, but I must have forgot to pay the wit bill. As for the old school MySQL stuff, I was going to go the PDO route, but opted to do it quick and dirty. My articles are more a "translation" type of a tutorial. IE, I'm used to cutting carrots with and axe, but how do I do it with a knife?
People that are downvoting a valid suggestion just because it's from Digg are fucking assholes.
Hype is easy to generate... We'll see how it will work once it is stable.
Hey paulOr you might want to fix your there/their grammar in your code comments. It happened thrice.
Build a laser
Btw, thanks.
[JQuery validation](http://bassistance.de/jquery-plugins/jquery-plugin-validation/) [Prototype validation](http://tetlaw.id.au/view/javascript/really-easy-field-validation) [ExtJS Validation](http://blog.adampresley.com/2008/advanced-data-validation-using-extjs/) Samples of PHP validation: [1](http://www.htmlcenter.com/blog/php-form-validation/) [2](http://www.php-mysql-tutorial.com/wikis/php-tutorial/form-validation-using-php.aspx) [MySQL Real Escape String](http://www.php.net/manual/en/function.mysql-real-escape-string.php) (used to insert data into the database).
You could build your form and then build your server side or client side validation yourself. Since forms are so specific you're not going to find a framework for this. JQuery would be the closest thing to a "framework" if you want to do client side validation.
Learn regular expressions. They will make your life a lot simpler.
Client side validation is good (re: Buckwheat469), but you shouldn't rely solely on it! The examples of form input validation in PHP are good (again, re: Buckwheat469). As neoform3 says, learn Regular expressions (PCRE and Posix as PHP has extensions for both of them). Some good sites to look at are: http://techportal.ibuildings.com/2010/06/01/web-services-for-php-developers/ http://www.sjoerdmaessen.be/2010/06/03/the-filter-functions-family-input-validation/ http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
LIKE and FULLTEXT are not the way to go, in any situation. They are both extremely inefficient when you start dealing with large datasets. Keywords are the way to go. Extract words from the data to be search, add them to a keyword table, unique key'd, and then you match the data id with the keyword ids, then you just do some group by's, and some other fun SQL stuff, and you'll end up with a lot higher-performance search method.
This is good, but it's a hell of a lot more programmer work, so if he's looking not to write a "big ugly query", then I don't think he'll be jumping at the bit to do this. 
How about pulling your dataset into PHP then using PHP to search through it? I've done this with some simple searches and it usually comes out alright. PHP has some great array search functions.
Well that and I'm not working with a HUGE dataset. Maybe 10k rows after a year, max.
This is pretty much the way you do it in SQL ( I don't know about MATCH/AGAINST). And SQL is not ugly! :) Also, if you can remove one of the wildcards, so that LIKE '%string%' becomes. LIKE '%string' or LIKE 'string%', that will improve performance drastically. Basically a search for the beginning or end of a string. You might ask stackoverflow if you want more opinions. 
Well, this query won't take that long to process then. You can use PHP or whatever language your using to aid you in writing your big ugly query. In PHP: &lt;? $arrFields = array( 'Field1', 'Field2', ... ); $sql = "SELECT * FROM table WHERE " . implode( $arrFields, "= '%" . mysql_real_escape_string($string) , "%' AND "); ?&gt; Then, adding or removing fields from your query is as easy as adding or removing elements from the array.
Great, now they have two problems. 
Don't do this. Use a library.
just as a side question, i've been playing around with drupal. anyone know how to do custom forms easiest in drupal?
http://php.net/manual/en/filter.examples.validation.php
The source so far is topnotch http://github.com/symfony/symfony
Sounds like you should pick up a framework. You might go with Zend Framework, which has some pretty sophisticated form components. See: http://framework.zend.com/manual/en/zend.form.html
Not only does ZF have good standard validations ready to use out of the box, but it's very easy to extend (or overload if needed) their validation routines for unique fields/needs.
In my - admitted patchy - experience, drupal is shite at dealing with forms.
Don't do this. Use a regular expressions.
You need to do a [custom module](http://api.drupal.org/api/group/form_api/6) but Drupal has a pretty [robust form system](http://api.drupal.org/api/drupal/developer--topics--forms_api_reference.html/6), you create the form with arrays and Drupal renders and validates it. There's currently a [contrib module](http://drupal.org/project/webform) that does all that for you if you just need to collect the form output and don't need to do much with it in Drupal.
Don't do this. Just sit here and read Reddit all day instead.
I want to add [Dojo](http://dojotoolkit.org/) to that list. I've found that Dijit (an extension of Dojo) is great for form validation. Only complaints would be the framework is a bit slow to load and the documentation can sometimes be a mess as they moved it from one spot to another and don't always redirect you to the right page.
thanks
Why the hell was I downvoted?
If I'm understanding correctly, it looks like you just need to wrap your display code in another loop and add another parameter to your query: for ($boxId = 1; $boxId &lt;= 10; $boxId++) { if ($result = $mysqli-&gt;query("SELECT * FROM `Items` WHERE boxId=`$boxId` ORDER BY `Order` ASC")) { // Build a box with LI's in it } }
Thanks so much for the quick response :) From what I see though how is that creating a new ul? I would really like to understand that part.
I left the HTML part out, but here ya go: for ($boxId = 1; $boxId &lt;= 10; $boxId++) { $ul = "&lt;ul id='sortable{$boxId}'&gt;"; if ($result = $mysqli-&gt;query("SELECT * FROM `Items` WHERE boxId=`$boxId` ORDER BY `Order` ASC")) { while ($row = $result-&gt;fetch_array()) { $ul .= "&lt;li class='dblclick' id='item_".htmlentities($row['itemID'])."'&gt;".htmlentities($row['content'])."&lt;/li&gt;"; } } $ul .= '&lt;/ul&gt;'; echo $ul; } This should print out 10 ULs named sortable1, sortable2, ... sortable10.
I know this isn't related directly to your question, but since you said you're a newb, I'd strongly recommend you avoid naming any columns or tables after reserved words ("Order"). It'll save you some pain later on when you forget the accent marks around `Order` one time and you're trying to debug why in the heck MySQL thinks you're trying to tell it about an "Order" By clause when you just want to select the column! Learned that one the hard way...now I go with "position" instead.
Since the number of rows is so little, then this would work. MATCH() AGAINST() will more than likely be just as fast, but provide relevance.
you forgot "released"
"faster" is what makes people like @alduro make wrong decisions that will end with the demise of their applications. ;-]
Interesting idea, but I don't like this. $mysqli = new mysqli("localhost", "user", "password", "database"); $mysql-&gt;query("⁄*qc=on*⁄SELECT something FROM slowtable"); This requires you to add non-standard junk to the beginning of every SQL you write. The fact that it's a comment doesn't make this any less non-standard. In addition, this doesn't work with prepared statements -- which every web dev should be using. The selling points are performance (written in C) and ease of use (very little change to your code), but at the expense of prepared statements? That's big no-no for me. I use an OOP wrapper on top of PDO to do things like this all the time, and the performance penalty is negligible.
I just took an online PHP test to apply for a job. When I got my results today, I was told I was in the top 1% of people who had ever taken the test and the company was suddenly extremely excited about me. I'm a decent PHP developer, but not that good. What technical tests do you use for recruitment, and do they work?
I had an interview over a year ago, and while explaining my experience, I mentioned a lot of work with frameworks CakePHP, Zend Framework, jQuery, etc. This was for an up and coming social networking site. The site was originally outsourced to India, and they were pulling the programming in house. They liked me, but were afraid I relied too much on frameworks. They gave me an online Javascript test. Javascript is definitely not my strongest suit, I rely heavily on jQuery. I didn't get a question wrong, and finished the 30 minute test in about 10 minutes. This impressed them, however I wasn't much impressed with them at this point. These tests are usually a big waste of time IMO. They're really either very basic, and you end up blowing away the competition, or they're really advanced, covering topics most people never touch within the given area.
The one step I 100% agree with in Joel Spolsky's [Joel Test](http://www.joelonsoftware.com/articles/fog0000000043.html) is: &gt; Do new candidates write code during their interview? I believe that asking a developer to solve an actual problem is a thousand times more telling of his/her skills than knowing the names of functions or its parameters (which you can always refer to in 10 seconds using PHP.net anyway).
Other than interviews for co-op in college, I can't think of an interview where I wasn't expected to do any programming.
When I applied for my current job over 2 years ago, I had to program a calculator (basic math, memory, +/-, etc.) using PHP and JS. Not so much an actual "test", but more of an example of my work so they could see how I solved problems, code comments, efficiency, etc. If it's something generic that's just going to give them an overall score, then it's pointless. But if it's something that's going to give them a specific idea as to your programming skills/style/etc. then it's definitely worth it. I got the job having no formal education in web programming (basic HS classes in Q/VisualBasic, college class in C), but had taught myself everything I knew about web programming and produced the code to show it.
you use php and you use frameworks and thats a bad thing? Man, good thing you didnt end up working there. PHP without frameworks can be scary. It sounds like they have no idea what they were doing. 
yeah, they must like spending time on writing stuff that's been done over and over. the owner's logic was "do you think facebook uses a framework like CakePHP or Zend Framework?" This was my only prospect at the time, so I didn't bite that hand that potentially feeds so I answered "no". Now, I would go into details like, frameworks weren't prevalent when Facebook started, they've grown leaps and bounds over the years, and just because your competitor makes a bad decision, doesn't mean you should follow suit. They dicked me around, and I called them to let them know I had picked up a month long contract. They promptly made me an offer, and low balled me. I took the month long contract and ran.
yea it sucks working for start up sometimes. They cut corners all the time and low ball you and have retarded expectations. PHP can be awesome but because of the corners being cut, results in bad code written which results in security holes... its an endless cycle. 
Is the test available online? Post it!
The company I work for gives out a PHP test to prospective interviewees. The questions are dead easy, but all have a lot of different solutions. Not everyone who passes the test gets an interview, as not all solutions are equal. For example... //Find the sum of all numbers in the following string $the_string = '{"foo": 56, "bar": 97, "beb": 6}'; Now, you and I know the best way to do that, but it's amazing the amount of people who do a preg\_match\_all to find the numbers and iterate over them to add them up. Bottom line: if you've described yourself as an "Experienced Web Developer" and you can't recognise a JSON string: we probably don't want you working with us. 
Do you work for me? I've used a similar test (developer a calculator in PHP and JS) for dev candidates, although I also included the frontend CSS/HTML work as well as the functionality.
1 +h1|\|k +hey R +0t@lly |-|0+
&gt; They liked me, but were afraid I relied too much on frameworks. From the other side: I think it's a legitimate concern. Someone that's used to working with a framework might not do well adapting to frameworkless code. We have a lot of code that was written years ago, pre-framework, and continues to work fine (ie make us money). Occasionally get a new hire that has all sorts of plans for how to change years of code over to his or her preferred framework. Often ends up being a bad fit overall. Frameworks aren't a bad thing, per se, but I think it's important to demonstrate core language competence above all else.
Unless your real name is vastly different from your username, it doesn't look like it. You'd be able to tell immediately from my username, just add the vowels.
I would expect a prospective employer, presenting such a question, to throw a wrench in to things if I tried going the JSON route. "Oh, that isn't JSON, it just looks like it! Here try: '{"foo": 56, "bar": 97, 6 yahoo blamble}'".
Oh, you must post the test and your results!
Throwing a wrench into the works like that kinda defeats the object of that question. The point is that there's a very easy, simple way to do it; and there's other, more complex ways. 
Yeah, I could see that. There's also the "see how the applicant responds to curveball" stuff, though.
 $sum = array_sum(json_decode($the_string)); Sorry, couldn't help myself.
oh this isn't about testing... what do you guys think about testing php apps through some sure of online/curl method?
I'm good with PHP on its own also. I do have a preference for frameworks, as they make things easier and development faster. I've also picked up good coding practices from frameworks, and learned concepts that would otherwise be foreign to me.
They removed PHP. I see now that they've added it back....but doesn't seem to show up. I'm having to manually add PDT. edit: Stupid me.. Month old post.
Robb Stark is a character from George R. R. Martin's *A Game of Thrones.*
1) What does `phpinfo();` do? 2) Is `print()` useful?
Unfortunately, the test is not available to the public. It's produced by a firm called "International Knowledge Measurement". There is a list of their tests [here](http://www.ikmnet.com/products/search.cfm). Some recruitment agencies have also asked me to provide code samples, but I have a problem with giving out proprietary code written for previous companies.
Not available online unless you are registered, unfortunately.
I agree somewhat; my first instinct wouldn't be to go the json route. For starters, what's actually wrong with `preg_match`ing all the numbers out of it?, for another thing what if like you say it's not actually json, and for another thing `json_decode` seems a bit overkilly and introduces a minimum version requirement.
&gt; ...frameworkless code... *Shudder*
Sure, but the question says *in the following string*. You can state where the code you write would fail later if you like.
 $the_string = '{"foo": 56, "bar": 97, "beb": 6}'; $the_sum = 159; // Only works for this string.
Now that you mention it, it's a very good idea!
madness, but very cool.
Try this SELECT * FROM table WHERE columnA IN (SELECT columnB FROM table) Alternatively: SELECT a.* FROM table AS a JOIN table AS b ON a.columnA = b.columnB I prefer the syntax of the first method as it makes things easier to understand at a quick glance
Yes, I third this. CI's (and Kohana's) pagination is great. Query for total possible results, let it know, break into a dance party.
&gt; Warning: array\_sum() expects parameter 1 to be array, object given in C:\wamp\www\array_sum.php on line 3 You meant: $sum = array_sum(json_decode($the_string,true));
Neat! Being a pretty API geek, I would *improve* the class by: * using [ArrayAccess](http://php.net/ArrayAccess) for attributes * using __call for tags with optional attributes the result would look like: $html = HTML::form( array('action' =&gt; '/submit.php', 'method' =&gt; 'post'), function(HTML $form) { $form-&gt;fieldset(function(HTML $fieldset) { $fieldset-&gt;legend('Credentials'); $fieldset-&gt;input(array('type' =&gt; 'text', 'name' =&gt; 'username', 'value' =&gt; 'Superman')); $fieldset-&gt;input(array('type' =&gt; 'password', 'name' =&gt; 'password', 'value' =&gt; 'kryptonite')); $fieldset-&gt;input(array('type' =&gt; 'submit', 'value' =&gt; 'Login')); }); } )-&gt;build();
http://www.php.net/manual/en/ If you know actionscript you should be able to get around this. There's tutorials and a lot of help in the forum posts below.
Anything by Apress is great.
I wouldn't recommend anything in print for php unless you only want to know the basics. Looking back at them, the advanced books weren't even that much help. Instead I recommend you start looking into one of the frameworks that uses php (Zend Framework or one of the others). Build some small projects in that. Then start extending classes and such. This will teach you the modern way to use PHP and develop your basic skills at the same time.
Not a bad idea! I think this improves readability quite a bit. HTML::tag-name reads quite nicely. I'm personality not to found of the array(..) syntax. 
I've hardly read much of it at this point, but I'd recommend Beginning PHP and MySQL, it's an Apress book as donwilson also suggested. While I haven't read too much of it I did do a good bit of research and felt this was probably my best bet to go when learning php. I already had read javascript, php, and mysql (or something similar, it's an orielly book) so I did have a bit of knowledge, but I didn't retain much of it since I never put it into practice. I was originally going to use a web resource, but I couldn't really find anything that I felt was adequately comprehensive. 
I learned entirely from a combination of the manual, the newsgroups, and looking at other folks' code; then again, I'm not really a book-learner as much as I am the learn-by-doing type. Really, PHP's manual is the most solid and definitive resource that I've ever seen for a language (and I've learned and forgotten much of Pascal, C, C++, Visual Basic, and Java). I'm not familiar with Actionscript, but if its syntax is at all C-like, you'll have no trouble picking up PHP. Until you're comfortable, every time you have a task, go hit HotScripts and find a few scripts that do a similar task. You're not going to build applications this way, but you'll get a feel for how other people are doing it and you'll gain confidence and familiarity with the language. Soon you, too, will happily be building entire apps, writing abstract DAO classes, and all sorts of fun shit...
I learned entirely from a combination of the manual, the newsgroups, and looking at other folks' code; then again, I'm not really a book-learner as much as I am the learn-by-doing type. Really, PHP's manual is the most solid and definitive resource that I've ever seen for a language (and I've learned and forgotten much of Pascal, C, C++, Visual Basic, Visual C++, and Java). I'm not familiar with Actionscript, but if its syntax is at all C-like, you'll have no trouble picking up PHP. Until you're comfortable, every time you have a task, go hit HotScripts and find a few scripts that do a similar task. You're not going to build applications this way, but you'll get a feel for how other people are doing it and you'll gain confidence and familiarity with the language. Soon you, too, will happily be building entire apps, writing abstract DAO classes, and all sorts of fun shit... [Sorry if this posts twice, Cassandra's a whore etc.] [Edit: By "you" I'm referring to PooLatka, not darkstar999]
I'm not sure if this additional information I have is helpful or trivial to you but it's kind of related to your question. To save game state over time, you're likely going to want to use a database. I would recommend having a user registration system that gives each user a username and password. You could make a Users table that contains UserID (primary key, autoincrement), Username, and Password. I would also make a Games table that contains GameID (primary key, autoincrement), IsActive (tinyint that's 1 when game is playing, 0 when game is over), and GameData (text or blob field, more on that in a sec). Basically, you use if (!isset($_SESSION)) { session_start(); } at the beginning of your scripts (make sure the session is started). Have them log in, and when they go through the login page, use SQL like $result = mysql_query("SELECT * FROM Users WHERE Username = '".$_REQUEST['Username']."' and Password = '.$_REQUEST['Password']."'"); to authenticate. If mysql_num_rows($result) &gt; 0, then that means their login info is correct. You can extract their UserID from the database and set it as a session variable ($UserRow = mysql_fetcharray($result); $_SESSION['UserID'] = $UserRow['UserID'];) OK well I'll try to spare you from reading any more ugly unformatted pseudocode. Basically, once you have the person's UserID in a session variable, you can have them go through the Join Game process, maybe some sort of matchmaking lobby where they wait for people to join and then PlayerOne gets to decide when to start the game or whatever. Basically, once you start a game, you create an entry in the Games table. You can use mysql_insert_id() to find the created GamesID. you can use session ($_SESSION['']) or request ($_REQUEST['']) variables to keep the GamesID from page to page. Here's where the magic happens now (the part I earlier said I'd get to)... When you make your game, try to store it all in some sort of custom class or array. The beauty of arrays is that you can store pretty much anything you want in each element (including other arrays). PHP has a function called serialize($YourArrayOrObject) where you basically reduce your entire class or object into a string of text. You do this so you can store the game state into the database (things like $GameArray['PlayerOne']['OwnedProperties'] or $GameArray['PlayerTwo']['CurrentPosition'], etc). I have to leave right now, I wanted to type more but hope this helps, keep us updated
were you reading my code? hahaha thanks dude! My approach is going in the same direction you just told me.
&gt; PHP's manual is the most solid and definitive resource that I've ever seen for a language I just wish they would clean up their comments. Most are useless.
Did my other reply show up? Right now there are 4 comments but it says there are 8...
If you replied to me (other than "Did my other reply show up?"), then no... But reddit seems to be far more stable now than it was an hour ago. [Edit: But I also upvoted your comment which shows at only 1 point now, and I doubt anybody downvoted it, so who knows at this point. :( ]
I said that the PHP.net manual comments are whack and need to die. Most of them.
I went to reply to your comment and got [this](http://i.imgur.com/As6NQ.gif), so ignore my previous comment about reddit being stable. In any case, I've had the opposite experience with the comments on the PHP manual. Often someone has already solved the problem I need to solve, and the answer is there in the comments. Yes, there's some riff-raff but it's not exactly at the YouTube level. I've contributed plenty of comments myself, [e.g. this one](http://www.php.net/manual/pt_BR/function.exit.php#24201).
Frameworks and API's are great, but I really want to know PHP inside and out. Every idea that flows through my head leads me to 'crap, i need php', and I always find myself needing to learn lower-level languages, and php seems to be that gateway I need. Probably too ambitious.
php.net/FUNCTION_NAME is the best documentation resource ever.
never heard of them before. Looks good... Anything you'd recommend specifically (something that includes mysql) this one looks pretty good http://apress.com/book/view/9781893115514
Yep, make sure it says Beginning in the book's title.
Sitepoint is also great
I'm not sure how you learn, but I learn best by doing, so I just started building a simple CMS, and using google as my goto for any problems/questions I had.
In addition to [php.net](http://www.php.net/manual/en/), a framework is perfect for learning. The code is generally well written and commented. Load it on your test server, go through the code, and learn by trial and error. Break stuff on purpose and figure out different ways to challenge yourself. Then write a program however simple it may be. I'd recommend you start with a smaller framework with great documentation and large community like [codeigniter](http://codeigniter.com). Zend is great, but is huge and has a steep learning curve. 
I recommend [PHP and MySQL Web Development](http://www.amazon.com/PHP-MySQL-Web-Development-3rd/dp/0672326728). This book was required when I took a PHP course at Purdue, and I relied on it a lot, not only as a learning tool, but as a reference book, as well. It includes numerous helpful examples and I feel like the writing style can be easily comprehended.
If you know actionscript well, the biggest difference between php and that, is that php works in the http request-response-cycle. You should probably do a bit of reading on http and web servers, in addition to the actual language.
This + a degree in comp sci
You don't need a CS degree to learn PHP. It's a pretty simple language.
No but it helps when reading throught the mountains of horrendous code online. PHP is simple but it allows you to make a fuck lot of mistakes.
&gt; No but it helps when reading throught the mountains of horrendous code online. A good knowledge of the language and best practices helps with that. Which can easily be attained without a CS degree.
I should clarify that i meant orginally was I did this + had a cs degree. Php is a great language but requires a fair amount of structure to make sure it isn't a steaming pile of unsecure code. It allows you to make your own mistakes which is something I love about it but I wouldn't be as good a programmar as I am today if i didn't study CS. If anyone spends years at something they will be profficient at it regardless if they study it at uni or not 
&gt;No but it helps when reading throught the mountains of horrendous code online. What, are you going to apply a FSM to your CMS that you maintain ?
Yawn... for someone with a CS degree, you'd think you could come up with something better then this cliche response. Take your CS theory elsewhere, this is the real world
Hi shaunc, I was wondering if I could get a bit of help with that sql you assisted me with a couple of days ago. Thanks in advance :)
I am not trying to be a dick, but I dont understand these posts (I see them in /r/python too). The OP would like to learn a language, and already knows languages X,Y,Z. So this tells me the OP has at least some sort of common sense. Hmm, here is an idea, why not do what you did to learn those languages and apply it to learning this language? Now if the language you want to learn is called Php, dont you think php.net would be the place to start? I learned how to ask google a question long before I learned how to submit a question to reddit. Sometimes it feels like these people just want you to know that they are going to learn a new language. And really, for the last time, [just read this](http://www.reddit.com/help/faqs/programming)
This should be the only resource you need.
I do work in the real world and i would say that I'm a much better programmer now than i was at uni. I'm not sure what saying a is cliched about recommending a formal education.
Im just bitter this morning. Putting fellow redditors on blast makes me feel better about myself
For every 1 decent tutorial you find online as to how do something in PHP there are 5 bad ones. Its really easy to pick up php and knock out a simple web app. It doesn't mean these are designed properly. CS was the path I chose it some of the classes have taught me things that are pretty valuable. 
fair enough
sorry
sure, what's up?
It's a neat proof of concept, but I think using this in a production app would make me neurotic. It's a blast coding projects like this, and even coding a new site using them. But maintenance is nearly impossible, especially if you're on a team with dedicated HTML designers. When it comes down to it, nothing beats a templating system (PHP, after all, started as a template language).
Originally you tossed me what looked like a sick loop to allow me to spit out unordered lists with an id of sortable{$boxID} basically. http://www.scottsteelerectors.com/test/SAVEAJAX.rar is a small file containing the three php files I am working with. The loop you sent me should still be in your message history but basically I had to wrap the code inside db and update.php but I'm getting errors from the Twilight zone (Appearing inside div boxes, or the page won't display) There is a column in that DB now called boxID and I set a bunch of entries with numbers from 1-10 so that once it does work it'll spit out some items to the 9th or 10th table for testing etc. How would I apply this properly without any strange errors, I know that once I see how its ordered it'll be like I was hit with a clarity missile. Much appreciated man :) I think the main problem I had was in the db.php section but for so little code there I was at a loss!
I highly recommend [PHP Unleashed](http://www.amazon.com/PHP-5-Unleashed-John-Coggeshall/dp/067232511X/ref=sr_1_13?ie=UTF8&amp;s=books&amp;qid=1277820736&amp;sr=8-13), this book teaches you about the basics, up to classes, constructors, error catching, and a slew of other things. I found it very easy to read (granted I already knew C), supplemented by some good articles you should know most of what you need to.
Changelist available [here](http://xdebug.org/updates.php#x_2_1_0) and it can be downloaded [here](http://xdebug.org/download.php)
The path I chose involved a first year Comp Sci class, learning some basics but ultimately sucking hard at coding in Java.
No, "NULL" tells the DB whether to allow the field to be null, as in no data stored. You want this unchecked. Auto-Increment is the box you want checked.
Thanks. I love me some xdebug
Ah ok, thanks. The wording I was looking over just confused me that's all. So I insert NULL in the php statement, but having the field selected as "Auto-Increment" will turn that NULL into 'next value in sequence' ?
Solved, works beautifully!
This turned into some serious butthurt.
Sure, you can use NULL in the SQL statement, ie: INSERT tablename values (null, 'vala', 'valb'); but if you are using some GUI to modify the table structure, the NULL in the column setup is whether the system will allow you to insert a row with nothing in that field. I do not believe it will allow you to have auto-increment and NULL for the same column.
Appreciate the help but the problems been solved :), entries are being added properly now.
Without further context of your save.php it's hard to say. Just looking at the query you're building though, yes injection could be possible. Make sure $content and $itemID are run through mysql_real_escape string at least. Better yet use the mysqli library and parameter binding.
Yeah looks possible. Your not doing any cleaning on the input. ALWAYS clean and sanitize any input coming from anywhere. Even from the same application. Its good practice and will save your butt.
Oh I guess it is kind of vague from the other end of things. Here is what I want to add then (Will this work?) &lt;?php //Connection Info $username="MYUSERNAME"; $password="MYPASSWORD"; $host="localhost"; $database = "scot3008_workerdb"; //Connect to database $mysqli = new mysqli($host, $username, $password, $database); $mysqli="UPDATE `scot3008_workerdb`.`Items` SET `content` = '".$content."' WHERE `Items`.`itemID` = ".$itemID." "; /* sleep for a while so we can see the indicator in demo */ usleep(2000); { /* What is echoed back will be shown in webpage after editing.*/ print $_POST['value']; } And thats the whole file....will it do the job or am I missing something big here?
Yep I actually did this a few weeks ago for a webapp I've been building. Jeditable is a cool little jQuery library. Anyway, basically I sent a remote request to my php script (much like you have) and when it hit the php script I did the following (roughly): $newValue = trim($_POST['value']); $elementId = $_POST['id']; And used my database call to perform the tasks I needed it to do. Nothing too much more than that! :) Just make sure you are sanitizing your queries regardless of how it's being used on your site. 
That's literally the whole script? You're creating a mysqli object and assigning it to the $mysqli variable, then immediately overwritting it with a string. Where are $content and $item coming from? For the sake of example I'll assume these are coming in through the post params. $mysqli=new mysqli('host','username','password','database'); $content=$_POST['content']; $itemId=$_POST['itemId']; $statement= $mysqli-&gt;prepare("update `items` set `content`= ? where itemID = ? "); $statement-&gt;bind_param("si",$content, $itemId); $statement-&gt;execute(); 
lol I was worried it was going to do just that msiekkinen. $content was referring to what is actually being changed. The column in my table is named content. 'Content' and 'itemID' are coming in through the POST parameter. Thanks for the help, I really am coming at this from a "I would love to get these to go here and do this!" angle instead of something a bit more practical. I need to sit-down with a fat book of "Interacting with your sites database"
Put down your sword, we come in peace. nah, I learned the basics of those through school, however... I would sit through half a class, get caught up the little I know, drop the class and then learn the rest myself pushed my personal projects. Problem is, a community college would charge $150 for this method... and my dropped credits are going through the roof. On top of that, I like books. I like a bookshelf as something physical that says to the layman, "Hey! I read this shit!" I run my freelance out of my house and clients come over. The look on their face when I'm honest with them and pick a book up in front of them is a look of being impressed. They like to see that you know what you know, and how to overcome problems. Plus, I hate E-book, online manuals (great for a quick syntax reference, but theirs nothing like the book). I put a lot of value on the opinions of others, and a site like reddit seemed like a great resource to quickly find a good book without doing a bunch of research myself. However, I ended up buying another book (not the Apress) because the wonderful gentleman at the book store who referred me to the computer books section was also a PHP programmer, and after sitting the bookstore for 30 mins looking over his suggestion compared to the Apress, the guy knew what he was talking about. FYI, got this (http://www.amazon.com/Head-First-MySQL-Lynn-Beighley/dp/0596006306) However, you're right. To get the help I needed I had to let the world know what I was trying to accomplish.
Are you looking for something like this? &gt;GeoLite Country is similar to the GeoIP Country database, but is slightly less accurate. Should you require greater accuracy, GeoIP Country is a drop-in replacement for GeoLite Country. We also offer a free geolocation database on a city level. [Link](http://www.maxmind.com/app/geoip_country)
So how is the hooker business?
this
[Here you go](http://www.hostip.info/use.html "These guys are awesome")
If we're talking commercial, I've had good luck with netacuity: http://www.digital-element.net/ 
It's not a web app, but it uses the web... [I'll create a GUI interface using Visual Basic. See if I can track an IP address.](http://opencodeproject.com/article.php/63/vbguiinterfacetrackip+-+ill+create+a+gui+interface+using+visual+basic+see+if+i+can+track+an+ip+address) You might also find a use for my [Zip Code Range class](http://www.phpclasses.org/package/3156-PHP-Get-zip-codes-within-a-range-from-a-given-zip-code.html) on PHPClasses. Someone just supplies a zip code and a preferred radius and the correct range of zips are calculated based on a database set of zips and lat/long coordinates.
you should think about security too - as it stands anyone can hit that script with some content and any itemId and overwrite other people's data. Depending on your scenario that might be OK, but it's likely that you want to include a session-based login check like this: if($_SESSION['loggedIn']!=true) { exit(); } else { // the script goes here } and then a login page which checks the supplied details against a database and sets `$_SESSION['loggedIn']=true;` if the details are correct. You must put `session_start();` at the top of every script that requires sessions.
Hooka business?! It's called Pimpin' yo. Sheeat. (Pretty good blackcent there dontcha think?)
Tough to beat free: &gt;We also offer a free geolocation database on a city level.
http://php.net/manual/en/function.geoip-record-by-name.php It requires PECL geoip. Shameless plug of an example site: http://whatsmylatlng.com/
Colour-coded links or something along those lines would be nice - saturated for core functions, normal purple for optional internal modules, green for PECL modules, grey for stuff that's in deprecated or SVN versions.
Great! Just give me your zip code and I'll tell you what really hot girls live on your street and really want to come over to party! Seriously though, I'm making what I hope will be the annihilation of Craigslist.
&gt; I'm making what I hope will be the annihilation of Craigslist. Don't try to annihilate other businesses, especially ones as beloved as Craigslist. Once you start telling people that you plan to kill CL, the only way you will ever be considered successful is if CL shuts down and everyone uses your service. Instead, say "I'm offering an alternative to CL for x-y-z." Now people in the x-y-z segment will perk up because there is a chance they're not entirely satisfied with CL. But trust me, no user of CL wants CL to go away. And almost every person who will be using your service, will be a CL user.
Here's numbers for a half-arsed, self-written MVC-based message board, on a page with ~100 posts visible: * Line 1: 639 288 * Line 3; first line of common include: 639 880 * Last line of common include: 842 016 * Last line of controller layer code: 884 880 * After output code: 1 249 128 The output bloat is, I'm assuming, because I've got an object for any HTML tag with more than a handful of attributes. Makes the code look nice, but it doesn't come cheap. I wanted to use the native xmlwriter stuff for it, but apparently `LIBXML_NOXMLDECL` isn't implemented (and the bug marked wontfix) which kind of ruins that idea.
Yup, used this many times it works well. Though some addresses arent perfect. Mine translates to a more major city about an hour away, but that's probably just how that IP was registered.
The html5 location asks the user for permission, which lowers the chance of successfully finding the user.
After that executes do I need to bind_result? From what I see, we have: a connection to the db | $content and $itemID become what was sent from the initial submit request (From a &lt;li&gt; with an ID(item_32 for example and some 'content' like Frank J.) | $statement is now sending a query to my db to update the items table and set the 'content' of say item_32 to whatever change I made via jeditable | bind_param is saying that content is a string, itemID an integer | execute process Does bind_result need to be thrown into that so it gets updated or am I missing something else? 
Would something like this work after execute? $mysqli-&gt;query("UPDATE `Items` SET `content`= Argh_what_goes_here WHERE itemID = Argh_what_goes_here "); $mysqli-&gt;close(); Obviously I *don't* know what I would throw into the query, are the new values now inside ['content']; or .$content. , or something else?
Cool. Just a couple days ago I thought to myself that CL needs a facelift and better spam prevention. Show us when it's ready!
I'm not really familiar w/ jeditable so I can't comment on how that piece of the puzzle comes into play communicating w/ your server. If you're using the query method then the "literal" values (such as $content) go there in lieu of the ? place holders with the prepared statements. This might work but the prepared statement route and param binding is preferred practice to prevent against injection. I'm guessing you're on a shared hosted environment so this may not be possible. If that is so it would be beneficial to get apache/mysql/php running locally. Turn on query logging in mysql -- search for log in the my.cnf file, uncomment the entry to turn it on, restart mysql. You'll then see every single query as it is sent to mysql. It can be useful in debugging wtf database situations. You won't need to use bind_result here as nothing's being returned. bind_result is used in conjunction with select statements. I'd recommend taking your webapp out of the picture for practice to first make sure you get a solid understanding of the database interactions. Just create a save_test.php script with values for $content and $itemId hardcoded, instead of pulling them out of $_POST. Play around with that until the desired action works. Then take what you've learned and put it back into your save.php script that talks w/ your webapp. A google search for "mysqli tutorial" can give you much more in depth specific working examples than I can go into here.
Something like $statement= $mysqli-&gt;prepare("UPDATE `Items` SET `content`= ".$content." WHERE itemID = ".$itemID." "); After that would I just need to have the same bind_param line and execute line then an echo $content ?
What about the MaxMind GeoIP Apache API?
I had to do a coding test a short while ago for a social network (didn't get the job, unfortunately!). Quite enjoyed it actually, though I'm not sure if I'd be allowed to post the question in full. It was basically to solve a route-finding problem given various transport methods &amp; locations, with departure and arrival points, and show the shortest route between starting and finishing locations.
Not to mention that it barely works on wired networks and works way too well on wireless.
$&lt;salary for a full time job you think is in your reach&gt; / 1000, per hour
http://freelanceswitch.com/rates/ is a nice little tool for guesstimating a decent hourly rate. But, being a simple online calculator, it won't know what salary range you're used to, what the cost of living is like, experience level, market conditions, etc. I used to charge €65 - €80 ($85 - $105) a few years ago. After moving to Canada last year, I have to build up a new client base and portfolio so I lowered it to $69 an hour for a little while. Raising it to $75 after the current project moves to prod. Edit: My rate is based on 12+ years of experience. If you're just starting out but are confident in your ability, I'd suggest finding a rate between $35 and $50. When I quit my job to start freelancing back in '01 or '02, I charged €45 ($55). That was based on ~4 years of solid work experience for employers.
&gt; $ &lt; salary for a full time job you think is in your reach Let me expand that a bit: H = hourly rate for a full time job you think is in your reach T = time $ = ( T working + T finances + T looking for projects + T idle + sick leave + holidays ) * H ...and don't forget to add taxes
The tool that codefocus provides is nifty and important. It is important as it will give you a base of what you should be charging around. It is also important to help you when your run into the types of people that prey on students and the inexperienced with promises of future work(never happens), a link to your portfolio(not worth it) or they force you to a fixed price then give you a bunch of scope creep(not fun). Don't get lured into the trap of those who are weasels. You can always put your questions/experience into real world examples. e.g. If I am worked McDonalds would should I let someone order a combo meal, then upon completion of the decision and/or payment would I let someone add on chicken nuggets at no cost? Tldr; Just because you are new and a student, does not mean you should allow yourself to get scammed. 
Which is, FWIW, about double the hourly rate of a job that pays the same annual income as that salaried job.
Everything is worth what it's purchaser is willing to pay for it.
I thought this (or similar) was invaluable when going freelance, but I'm a seasoned pro and would probably feel differently at a half-year experience. http://cpm.aiga.org/setting_rates/freelance_rates
Yes. It's a good rule of thumb, nothing more. That salaried job, in the US, is probably worth about 30% more than the salary itself, when you roll in the extra expenses an employer pays for an employee that it doesn't pay for a contractor. So, someone making a salary of $50,000 probably costs the employer $65,000. If a guy comes along offering to do that job for $50/hr, it's going to be attractive because even if $50 * 2000 = $100,000, which is certainly more than $65,000, the contractor can be let loose whenever necessary. A permanent employee is more of a commitment. Also, the contractor can probably be held to bidding on a project basis, rather than just billing time spent in the office. That can bring the comparative costs more in line. I'm not a manager any more, but I was... I'm looking forward to not thinking about stuff this way anymore.
I usually put aside about 25-30% of my earnings for any taxes. Factor that in when it comes to the price. You can write off your expenses and earn back this 25-30% come tax time. This is my blog(that I don't update anymore), I wrote a nice article that helps explain some ways of figuring out if you are earning enough through your rate. http://www.unemployeddeveloper.com/266_are-you-earning-enough-as-a-freelancer/ Hope that helps.
you sent me a link on msn to this rather than just directly?
these upvotes are crucial
Figure out how much you want to make and divide by the number of hours you can bill. Note I said bill and not work: people are under the absurdly stupid idea that they should only be paid for your work- as in time spent producing, but as a contractor, you have to sell your services, do your taxes, and other things that you have to either pay someone for, or pay yourself. So ignore the posts about magic numbers and rules of thumb, and simply figure out how much you need to make- say in a month, and divide accordingly. if you don't get the answer you want you either bill for more things (telephone calls, meetings, etc) or you do more work (reports, scheduling, support contracts, etc).
Its a very good rule of thumb. It takes into account benefits you have to pay out of your pocket, vacation, unpaid time between projects and unbillable overhead (sales, marketing, accounts receivable, etc). The poster is a student so s/he probably has health insurance through school but if you aren't under a group policy your ears will bleed when you get your first individual health insurance quote.
I think insurance costs depend on the state. My wife's individual coverage was about $100/mo. That level doesn't pay for things like babies or other extravagences, though, but it might be enough for a young student.
inb4 http://tizag.com/
wow, good decisions is just to use only cakephp or lithium where you and gwoo are core developers ? be honest, just give us a RC date to take a decision.
Some general questions. It seems odd that I would have to retrieve the database resource inside of the extended Zend_Db_Table_Abstract class and not have it locally: $db = Zend_Controller_Front::getInstance()-&gt;getParam('bootstrap')-&gt;getResource('db'); $db-&gt;query($str); It feels odd to have the Gallery helper not be able to access the view directly and set error messages. It would be nice to set an error message and return false to the controller. http://pastebin.com/MCMwGkkF In the Gallery model, I do a bulk insert that is proprietary to mysql. Is there something similar available that could be done in the framework that is not proprietary? I don't want to loop over 100+ queries. http://pastebin.com/UPJL2etA 
This is friggin' awesome.
CodeIgniter.
http://net.tutsplus.com/ I frequent this page at least once a day. There are tons of good tutorials on just about anything regarding web apps. 
Definitely a great starting point!
I have to stand by Kohana. I use the 2.x version, and after exploring the code and all, I have to say it is incredibly intuitive, incredibly well written, and fun to work with. Kohana is the successor to CodeIgnitor, which I started with. Skip CodeIgnitor and move onto Kohana. 
I use my own framework but I've been following the development of Symfony 2 on GitHub and it seems quite promising.
I would ask that the responders add what size company they're coding for (or if they're freelance) in addition to the framework they use. I'm looking for a job and would like to get a sense of the market. Thanks!
It may just be me, but Symfony seems overengineered. Just look at the sandbox example in the docs. There's just so much *stuff* in there.
+1 for codeigniter, company have ~20 people, work on ISP and web hoster. The company site was codded by me using codeigniter, I like it because you can extended to infinite and you don't need to touch the core. Another plus, is the great documentation, start reading it one week is enough to be comfortable using it. /sorry about the English, I'm tired. 
Also, the OP should learn version 3, since it's the latest and best supported version. Also, I love the Kohana support on #kohana @ freenode! ;)
i like! added to my rss
CodeIgniter is a crap framework. There are so many things wrong with it. - Still sticking with PHP4. No static methods or properties for you! PHP5 magic? No - Slow progress, it's painfully slow. - Stupid methods like "repeater()", it's exactly the same as str\_repeat -\_-. It's almost getting to the insane levels of Cakes "e" method! - No "drivers", want different Session drivers? (DB, Native, Cookie). Hack the core or use a stupid extensions system. MY_Session. Zend and Kohana handle this nicely with class naming. I actually used CodeIgniter, released CodeIgniter extensions and even wrote an article for the CodeIgniter website. CI has had problems for years and it just takes an absolute age for them to make significant progress.
CakePHP.
What would you recommend then? I also want to try out a MVC/framework.
I moved to [Kohana](http://kohanaframework.org/) and highly recommend everyone give it a try. It just doesn't get in your way like others do. Some more links. - http://github.com/kohana - http://github.com/kolanos/kohana-universe
yii
Personally I do not recommend CakePHP. It makes you jump through a lot of hoops to get even simple things done and adds a LOT of overhead to projects.
I use my own framework that I've made over the past two years, but I've heard a lot of good things about Kohana and from what I've seen in their documentation it's very similar to mine (just far more comprehensive). If you need premade framework, I put my vote in for Kohana.
Can you give an example? I use it all the time, and to me even complex things are simple to build.
Once you learn how things work, it's a pretty nice framework. If you're scared to look into the src when you cant figure something out then it's not for you.
First experience with Cake was about two and a half years ago when I was looking to start writing pixhilarity.com using an MVC layout. The very first step I tried to undertake was an image upload form. I needed it to take the upload, process the image, create a thumbnail, and insert a row into the database containing the filenames. It's a 10-15 minute task, easy peasy. Just getting it to display the upload form was a half hour ordeal involving at least five files. Handling the form post was another three hours of tinkering and exploring the documentation before I finally said "Fuck It", tossed the entire thing out and started over from scratch. My second experience was a year later when a client contacted us about creating an admin interface for a DB driven survey site they had. They had been admining the surveys manually in phpMyAdmin and wanted something nicer. They wanted it in CakePHP, but since we don't do Cake in our shop we declined. They agreed to let us do it our way and a week later we delivered a nice and shiny admin tool that I had based around OSX's Address Book interface. It worked perfectly and the client loved it, even commenting that he liked the code I had produced. They paid for the work and it was probably the best client experience I've ever had. Two months later they contacted us to see if we would add some features to it, but here's the catch: they had converted it over to CakePHP. I connected to their server and downloaded the new beast – what had been half a dozen files and 100k of code had exploded to well over 100 files and a whopping 10-20MB. After the download finished I started looking through the source and I couldn't even FIND my original code. After that experience I will never recommend CakePHP to anyone.
I think the best framework you can look at is Symfony, but it is a STEEP learning curve. Besides that Zend is fantastic. One of the greatest drawbacks with many of these other frameworks suggested is that they are still supporting PHP4 and the development is greatly hindered by that. Zend is great because of its flexibility, but is hindered by it too. The fact is, figuring out a best-practices implementation of the MVC might take a little bit, but once you have a procedure for it, and your existing methodology for Zend, it is fantastic and powerful, can use any Model system, any View system, any Controller system, but you can just use the MVC stack of Zend as well. There are tons of tutorials and it is backed strongly by the community. I prefer Symfony with Doctrine as the ORM as my main MVC but it takes a bit of knowhow to install, and even to learn developing. It is definitely not for someone just wanting to dip their feet into an MVC framework. Good luck!
Zend Framework is where it's at, provided you're willing to learn some complex design patterns. Frameworks come and go, but the amount of knowledge you'll gain from using Zend Framework and its libraries will stick with you. Zend Framework is more like a very **large** library the follows similar coding practices and standards. It's very well written, unit tested and extremely flexible. The learning curve is greater though. This framework doesn't hide anything from you. Pretty much every other framework tries to hide complexity by tucking it away under layers upon layers of code which is really fucking stupid because at some point you'll need to break out of their paradigm and when you want to you're screwed. CodeIgniter is shit, avoid it like the plague. Same goes for CakePHP. Symfony is great too, along the same lines of Zend Framework. Zend is bigger though, while Symfony takes the more "magical" approach I mentioned above. Symfony has some incredible CLI tools though which let you automate the complexity. They're fun to use, but I prefer writing code not running shell scripts. If you prefer code quality and clean code, stick with Symfony or Zend Framework. If you want a lightweight framework to whip up a really quick site, you might like flourish (http://flourishlib.com/). It won't coast you through big projects, but for something small it'll do if you like its style. As for Kohana, version 2 suffers from similar bad practices as CodeIgniter. They basically took a shit framework (CodeIgniter) and forked, trying to make it better. When the project begins on the basis of bullshit, it'll end up that way too. Kohana version 3 on the other hand is a complete rewrite and is looking good so far. **I warn you**, the documentation is pretty much non-existent and unless you're willing to spend hours dicking around and wasting your time, avoid Kohana3 until they get their shit together in that department. There's also Solar. I haven't played with it too much but from what I've seen it looks like a poor man's Symfony with even more magic. One warning: ***DO NOT*** choose a framework that attempts to hide complexity. Kohana, CodeIgniter, CakePHP and even Symfony are notorious for this shit. _"Hey, watch you can create a blog in 15 minutes!"_ Fuck that. Zend Framework is marvelous in this regard. It's a massive library with no interdependencies between components. Every component is extremely flexible and offers support for drivers/adapters so you can tinker with it to your hearts content without breaking anything. Another word of warning: If you make the right choice and go with Zend Framework you'll need a good IDE with code assist/completion so you don't have to jump into the reference manual too often just to find method names. PDT and Aptana are free ones and work great. Zend Studio IDE is a bloated piece of shit that costs a lot - avoid that crap. Netbeans is fucking awesome, I'd go with Netbeans if I were you as they just added support for Zend Framework to the IDE (they have Symfony support too).
Dude don't post that fucking website. What the fuck.
Your own.
Because [fputcsv](http://us.php.net/manual/en/function.fputcsv.php) is too complicated, or what?
None. Spend some time reading the extensive PHP documentation and code like a man.
A few thoughts: #1.) CodeIgniter isn't necessarily bad, but I'd argue it's a bit of a sinking ship. PHP4 support is becoming a serious burden and its primary virtue (ease of use/excellent beginner's documentation) is also becoming its primary curse. Low entry barriers mean there are a lot of god-awful CodeIgniter developers out there and if you plan to do group projects, there's no demographic of web developer who's more frustrating to work with than the stereotypical CI guy/gal. #2.) Of PHP frameworks, I'd recommend Kohana. Zend is handy for larger projects, but its slower development time makes Kohana a better choice for most sites. A few of CodeIgniter's main problems are also applicable to Kohana, but if you have to choose a PHP framework, this is the way to go. #3.) Ever considered switching away from PHP? For development speed, Django smokes any of the PHP options for most common tasks. Rails also has its virtues (and offers more job opportunities than Python). The code in both languages is also a helluva lot more concise - especially for unit testing, etc. Definitely worth a few weeks of your time IMHO. 
In my opinion it really depends on the project. If it's a quick site with a few one to many relationships, some form validation, etc. cake, code igniter, kohana, etc. are fine. If it's going to be an ongoing gigantic project with a lot of customization then zend framework or symfony would be better. A lot of the frameworks with more "magic" are also better suited for NEW projects than an existing project with a legacy schema... 
there is a learning curve with cakephp, just like any other framework. I would argue the learning curve on cakePHP is shorter than other frameworks.
A note about the differences between Zend and cakePHP etc. - ZF is basically a really large library that you build your framework on top of in a way (glue). CakePHP will make a lot of the architectural decisions for you (full stack). I found ZF pretty painful in the documentation department. Also, some of the architecture is a bit of a nightmare to get through. CakePHP I can dive into the core and have a look at the docblock for a method or class and see what is happening pretty easily. ZF has implemented a shite tonne of classes to achieve the same thing in many cases, you have to navigate through half a dozen files to understand what is going on for the sake of some design pattern or another. Also, one thing I have never understood: creating an html form in the controller and then passing that to the view. Sure, you can get around this and use some form helpers to output the individual form inputs in the view, but then you have to mess around with the validator in the controller and it just doesn't seem like it was designed with that in mind. There were some big gotchas with ZF last time I used it on a project as well (few years ago). Some retarded things like, validating nested associative arrays: there was no recursion. Which not only was it annoying, it wasn't documented or designed that way, which was frigging stupid. Also on validation, I was getting false positives on numerous occassions. This was all possibly because we tried to bend ZF to our needs by keeping the generation of forms located in the view rather than controller. CakePHP is straight forward, quick to implement, easy to understand. ZF is bordering on over engineered, but it is strong and probably more job opportunities if you train up in ZF imo.
When you think about it, for each framework there is at least one person, for whom it is the best possible solution - Namely the author. Usually there are others as well. Each framework is the best for some group of people, so what you're really asking, is "What kind of person am I". And that is very hard to answer for most of us, because we don't know you well enough. I would suggest that you try to gauge the communities around a couple of framework candidates and determine for yourself just how much these people are like you. If they are similar to you, then it's reasonable to assume that you will have similar preferences.
I agree, ZF is my fav. Regarding the documentation - it is layed out weird, but even so the source code is nice to read. Want to know why Zend_Mail isn't doing what you want? Just browse the source. Or better yet, use a debugger and step into it and watch the code flow.
We prefer to code like *winners* by concentrating on the business logic and leaving the framework to others ;-)
I've been working with PHP for a bit over a year (web design for about 2 years) and I've just started to do classes so I can reuse alot of my code (mySQL_Connection, mySQL_Controller, PHP_Pagination etc.) and it's nice to know that I have code to do stuff that I want to do again on another site. I don't really know about frameworks though, I enjoy doing my stuff myself, even if they aren't perfect nor might not be better than anyone else's work, it works for me and it's nice to be able to share it with people that wants to do something i've already done a class for.
After having been using Symfony2 and Doctrine2 for the past month or so while they're both in Alpha/Beta, I'd say they should be your only choice. They're the first big projects to actually make good use of PHP5's newest OOP features (namespaces, closures, improved reflection performance). Symfony2 makes great use of dependency injection making it easy to extend pretty much any part of the system you want to. They're both incredibly fast too.
any way to get a breakdown of memory consumption? I'm using wincachegrind and xdebug but it's only profiling the time taken per call. xdebug is a truly great tool though :)
Why reinvent the wheel?
http://stackoverflow.com/search?q=myisam+vs+innodb When I must use mysql, I prefer InnoDB because of the fact that myisam tables don't support foreign keys.
Because you'll learn a hell of a lot more and become a better programmer overall.
Transactions, fc, crash resistant, and row level locking.
Which of the two does this apply to?
Can you elaborate on that?
InnoDB
Don't forget that MyISAM indexes corrupt damn near instantly when you're dealing with a high number of rows (even as low as hundreds of thousands) if there are a lot of updates to the table.
TLDR: MyISAM has really fast SELECT operations. Use MyISAM when there aren't a lot of interconnected databases and/or there is a ton of records and they get spit out all the time InnoDB has a lot of bonus tools like transactions, foreign keys, ..... use this when there is a lot of interconnected databases and/or the data integrity is very important... remember you don't have that blazing fast SELECT operation. For smaller tables you may never see the speed difference, once you have something like 300,000+ records it's a big deal. Of course choose the right tool for the job. If you need InnoDB for it's features, then just use InnoDB.
I tried using a PHP framework. I really did. In all cases I found myself rubbing up against them with minor annoyances, and then eventually they became more of a hinderance than a help. Frameworks can help, but if you're already that proficient with PHP it might not be worth the frustration. ymmv
In addition to the already mentioned comments, MyISAM supports FULLTEXT searching while InnoDB does not.
and you want your client to pay for it?
It does not support foreign key [integrity](http://en.wikipedia.org/wiki/Declarative_Referential_Integrity)
What an amazingly confusing and unclear article. It jumps around too much between facts and perceptions, and does not guide the reader through the reasons for using one engine or the other.
Innodb, in about 90% of cases, innodb is the best storage engine.
That was a great write up. Thanks.
Foreign keys allow you to link one table to another such that an update or delete in the parent table propagates to the child table. MyISAM requires that the programmer account for child tables and clean up extra rows when deletions or updates occur. The main reason one would use MyISAM, besides the level of comfort someone might have with it, is the fulltext indexing. Others have found that InnoDB can do fulltext searches with external apps, like Sphinx, but you may not want to set that up. You can always go with hybrid database structures, where some tables are InnoDB and others are MyISAM, to allow for fulltext searches. This has other underlying issues with memory management, however. http://www.mysqlperformanceblog.com/2009/09/10/what-to-do-with-mysql-full-text-search-while-migrating-to-innodb/
You didn't have a client pay you to learn PHP, did you?
+q for CakePHP. I find it super easy to code even seriously complex systems. Plus the documentation and code is well written and the core devs are nice and friendly.
Cake is all you need! :)
I went with Cake, because Kohanas docs are sorely lacking
I think he means you can get your client to pay for the framework dev
2 and a half years is a LONG time
Zend Framework can just as easily handle small projects. While it does ship with a massive library, each component is standalone and has a low learning curve if you're an experienced PHP developer. For an inexperienced developer, there are plenty of examples in the reference manual. &gt; A lot of the frameworks with more "magic" are also better suited for NEW projects than an existing project with a legacy schema... Bullshit. Magic is never a good thing. Everyone was so excited with CodeIgniter when it came out for this very reason. Then when people realized that CodeIgniter stores **all** session _data_ in a single cookie, they flipped their shit. Transparency is a wonderful thing.
Exactly right. The code is well written and commented. A beginner or novice developer can learn a lot just by browsing the code base. Every component in Zend relies on well established design patterns, while a lot of other frameworks use various "hacks" or obscure levels of complexity just to make something complicated seem simple.
Are you saying that in the last two and a half years CakePHP has completely changed the way controllers, models and views are created and worked with in the framework? 'cause that sounds even more frightening.
This I can personally attest to and is one if the main reasons I use InnoDB exclusively now. Foreign keys and constraints being the other.
I use my own. If there's one thing the world is missing, it's more PHP frameworks, so I tried to rectify that wrong. In all seriousness though, I've tried a couple frameworks, symfony and rails, and I think I'm just too concerned with optimization to put up with the simplicity a lot of ORM layers require. SQL is not something scary to be avoided. It's actually pretty useful if you aren't afraid of it. All that being said, if I'm just doing a simple CMS site for somebody, Drupal is the go-to framework for me. Takes a bit of learning, but once you get past that, it can really let a client do almost anything to their site which is nice. The other thing cool about the Drupal project is they aren't afraid to break compatibility from release to release if it means better code. Backwards compatibility is the bane of a lot of systems and it's nice that drupal doesn't waste it's energy on it.
The only downside i know to InnoDB is that it doesn't support fulltext searching for some reason. However, there are several projects out there that attempt to resolve this (as in, they are dedicated search engines): http://stackoverflow.com/questions/1381186/fulltext-search-with-innodb
Let's see. MyISAM uses less RAM, has fast SELECTS and full-text searching. I'll stick with MyISAM. (Especially since I have enough trouble shoe-horning a LAMP stack, with NGINX+FCGI instead of Apache, into 256MB of RAM...)
No, but many things in the framework have been vastly improved, especially the all the controllers/models/views work together. Completing a full form is just adding validation rules, to the model, then the form itself in the view, and just real basic logic in the controller. It used to be a lot more effort in the past, I know. Models are much more flexible now I've done that code you're talking about, except adding 4 images, sizing them, uploading them to Amazon S3, and it wasn't much effort at all, certainly not that long. The longest part was setting up all the models and relations, and their command line tool which does all that has had a ton of improvements in 1.3, which was recently released. I've written quite a few large apps in Cake, no issues.
MyISAM full-text search is rather, umm, unreliable. Also, there are 3rd party solutions that are better for the job, both feature and performance wise.
you should check out symfony2 (rewrite of symfony, requires php 5.2)
&gt; MyISAM has really fast SELECT operations Which, hilariously, hasn't been true in years. **Modern InnoDB versions are just as fast as MyISAM.** The [MySQL Performance Blog](http://www.mysqlperformanceblog.com/) is an excellent resource. Really, the only major benefit to MyISAM at this point is FULLTEXT, but there are external tools like Sphinx that are just better at it anyway.
this is so idiotic, you should punch yourself in the face until what you've said in this thread doesn't seem to be true anymore you want magic. you want everything to happen magically and not have to write any fucking code to make your app. that's the ideal. when you get to shit that the magic can't fix then you want good documentation and quick access to the common 'when the magic cant fix this' problems. write smaller posts lurk more
 Muuttaa uses MySQL to store the statements that must be ran.
Of course MyISAM supports foreign keys. It just doesnt enforce constraints :p
You might want to try 300,000 records in MyISAM And cry as it fails in almost every respect, including lookup speed.
CodeIgniter 2 will no longer support PHP 4 although it doesn't take advantage of many PHP 5 features. If by slow you mean development pace then definitely! If by slow you mean the speed of the framework then you couldn't be more wrong. It's one of the fastest out there. Some stupid methods, some helpful methods. There is a new driver system but it's not really what you describe. You can create new DB drivers though.
&gt;I don't always use MySQL, but when I do, I prefer InnoDB FTFY
Thanks.
I meant slow development progress. I have a feeling by the time CodeIgniter 2 is released, it's _still_ going to way behind what's already out there. If it's not supporting PHP 4, then why not take advantage of all the PHP 5 features? As for speed, that's always a moot point in my opinion. Speed issues can always be solved with proper caching techniques. 
The slow development progress sure is holding them back. Changing their development process to use mercurial is a small step but they're such a closed company that I very much doubt we'll see the benefits. I used to advocate using CI but it was outdated when it was released all of those years ago and now it's almost laughable. I really like a lot of the framework and it's simplicity but I agree it's still lagging behind. The biggest shame is that the same company now uses CI behind two of their big commercial products (ExpressionEngine and MojoMotor) and all the floors will be brought with it.
Yeah, Xdebug doesn't memory profiling. You can always try XHProf for that though.
thanks, I'll look into it. Appreciate the reply.
It just lists some random frameworks?
Hi Guys, I happen to be looking for a client right now and searched google for it and that is how i stumble on this discussion. WOOOWWW you all are getting way higher than me. well its because I'm in the Philippines and all of you are I guess in the US. I am very experienced with PHP/MySQL (8 yrs.). So if you guys are busy and you have new client coming, you can have me do the job and pay me for only 10USD/hr and you get all the rest. here's my email : ronnel.anasco@gmail.com
Good advice, and thusly taken to heart.
&gt; this is so idiotic, you should punch yourself in the face until what you've said in this thread doesn't seem to be true anymore Fuck you too. &gt; you want magic. No, **you** want magic. Everyone wants to write less code, but making that the #1 priority when writing any software package is a really big fucking mistake. Verbosity and explicitness nearly always win over writing a few shorter lines (think ternary vs if statement but on a larger scale). &gt; you want everything to happen magically and not have to write any fucking code to make your app. that's the ideal. Are you fucking stupid? That is **exactly** what ASP.NET is. A massive framework with a ton of magic going on behind the scenes. I really hope you've never seen an average .NET project because it's magnitudes worse than the shittiest PHP scripts on hotscripts and phpclasses. You have a lot to learn.
Assuming the use of mdb2 is correct (never used it), it looks fine. Make sure to have a database index on twtextID (for speed, and science).
Especially for science
all looks fine, but I wonder what else you're doing outside that code - where does $searchResults-&gt;id come from? Are you running this dupe check inside a loop?
I'm not sure but why not use COUNT(twtextID) ? SELCT COUNT(twtextID) AS twCount FROM from TWDATA where twtextID = 42 GROUP BY twtextID And then check if twCount is greater than 1. This should save you some memory as you do not infact fetch the complete record set.
A "count(*)" might be faster, but i'm not sure...
If it's twitter stuff, just make the twtextID field UNIQUE, that should prevent duplicate entries altogether.
Modify the field in your table to be UNIQUE that way duplicates will never be INSERTed in the first place thereby minimizing unnecessary table entries. 
You could also add HAVING COUNT(twtextID) &gt; 1 
Thanks, I keep forgeting about HAVING (works like a WHERE for GROUP BY part) :)
unique and indexed
its the id of tweet pulled out of the json array.
I already have a unique key on that field, I wasn't sure if it was the correct code.
good call.
yep
Yup, nothing to do with the title...
Yes and in functions as well. I know in functions I can use global $logger but I don't find it clean.
Yes. Also in functions without the need to use "global $logger;".
WTF is happening to reddit. This is my third time replying to you. Yes, I want to use them in other classes, as well as functions without the need to use "global $logger";
Static classes are a way of organizing globals. However, if you're writing any decent-sized app, consider using the Singleton pattern instead. That way, your code is testable with test harnesses like PHPUnit, whereas statics cause all sorts of trouble in my experience.
Right, so yes, what has been described above, using the logger you have there, will keep a single stack of messages in a single instance - you'll get the same class instance every time you call it statically.
The way that I view static classes, is that I use them wherever I want to reference general methods inside classes and functions that I don't want to necessarily instantiate everywhere. I want them to just work. I've always hated using globals and avoid them wherever I can. Logging classes make a great example of a static class. You can create static variables to handle the configuration of the class, configure it once and use it everywhere. Alternatively if you make all of your methods test to see if the class has been initialized before executing the body of the code, you can have it set some sane default values that should always work before continuing on. With a logging class I use the latter to log any messages to a file 'default.log' if the class hasn't been configured. This means that I don't have to ever worry about whether my static Logging class has already been configured in any the places that I use it. Log::err($msg); Wherever it's used will always make a log either in the default location or anywhere else I might have told it too. I saw another comment on the Singleton pattern. They are very useful and a good pattern to be familiar with however I disagree with to a certain extent. All static classes shouldn't be made into Singletons, there are useful cases where a Singleton just can't cut it. I also disagree that it is difficult to test static classes and methods, especially when using frameworks such as PHPUnit. I'd go on but I want to read some other posts. I'd be happy to share some of my private static code as examples. If you're interested message me.
&gt; Is a static class the same as 1 instance of the class? Behind the scenes, no. If you instantiate an object of your static class with the *new* keyword then you've indeed created an instance of that class. And you can even go on to create as many instances as you want. But since all methods and properties are static, the created object(s) are empty and more or less useless. It's for this reason that you should call methods or refer to properties of your static class using the scope resolution operator *::*. Otherwise an empty instance will be created, which should be avoided for performance reasons. &gt; why would I use (for this purpose) a static class instead of an instantiated one? Really, 'static classes' in PHP are functionally equivalent to namespaces. And for a very long time they were used as a way of fudging namespaces. But with the introduction of real namespaces in PHP 5.3 there would seem to be, at least from a purist perspective, no need for static classes. So to answer your question, you use static classes so as not to pollute the global namespace.
&gt; no need for static classes. singleton factories?
Static variables and static methods are methods that can be called on the class without creating an instance of it first. Infact accessing the static methods of an object is considered wrong. You most often find them on"utility" classes. here is a better example of a use of statics.. class Color { public static RED = new Color("#FF0000"); public static GREEN = new Color("#00FF00"); public static BLUE = new Color("#0000FF"); private $hex; public __construct($hex) { $this-&gt;hex=$hex } public getHexCode() { } public getRGB() { } public getCMYK() { } } Now the user can easily use this color class without having to know hex codes for some of the common colors. It's already got static variables they can use by calling Color::RED-&gt;getRGB(); for example. The other advantage is the use will use the static variable over and over rather than create a bunch of red colors. Also to add to the utlity of a color class you might also throw in some static methods for easy use class Color{ public static HexToRGB($hex) { return $rgb_that_was_calculated } } if the user already knows the hex code, and doesn't want to go through the trouble and the waste of creating a new color class, he can just quickly use one of the handy static methods to do it quickly. by writing this $rgb = Color::HexToRGB($hex); Also within the class itself you can use your static methods like this class Color{ public getRGB() { return Color::HexToRGB($this-&gt;hex); } } The possibilities are endless. edit: full code in one place... class Color { public static RED = new Color("#FF0000"); public static GREEN = new Color("#00FF00"); public static BLUE = new Color("#0000FF"); private $hex; public __construct($hex) { $this-&gt;hex=$hex } public getHexCode() { } public getRGB() { return Color::HexToRGB($this-&gt;hex); } public get CMYK() { } public static HexToRGB($hex) { return $rgb_that_was_calculated; } }
Quick tip so you don't get flamed in IRC: There are no such thing as static *classes*, only static methods and properties. (Everyone else has done a good job explaining that they are, how they are used)
Yes, I can clearly see now that static classes resembles closely a namespace. Thanks for clearing that up for me. As others mentioned it in this thread, my guess would be to use the singleton pattern in my app.
Probably will consider this. Thanks for the suggestion.
While I'm not saying singletons are evil, they are the most abused of all patterns. If you're trying to avoid globals inside your functions (a good idea) then you should look into OOP concepts like dependency injection.
That seems like naming pedantry. If you have a class with only static methods and properties, isn't it a de facto static class? It can't be instantiated, can it?
Of course it can. PHP adds the default (nullary) constructor to all non-abstract classes automatically.
A static *method* does not affect the state of the object, and is declared as such. Being static such a method can then be called up with there being an object instantiated. The static methods act just like standalone functions.
singletons are not always factories..
I use one as a global configuration object. My boot and settings files both do to define some settings System_Registry_Configuration::set(System_Registry_Configuration::environment(), 'var', 'value'); Later in my code i can do $value = System_Registry_Configuration::set(System_Registry_Configuration::environment(), 'var'); 
Yeah, dunno what you've been smoking, but the code you posted does not work at all: public static RED = new Color("#FF0000"); is not allowed. You cannot use logic in setting a static constant. Plus `public getHexCode()` is missing the obvious `function` keyword...
Except they don't live in the global namespace, which makes your functions more organized. Prior to php 5.3, this was the only way to organize your functions since namespaces didn't exist.
Factories are functions/methods, not classes. For the sake of argument you could have a 'static class' with a bunch of factory methods that return instances of other classes, but again that's just more namespace fudgery. Remember, 'static class' in this context means a class whose members and properties are *only* static.
Notice I said 'from a purist perspective'. Most people have no beef with 'static classes' and you'll find them used in a lot of professional applications and frameworks. For example, take a look at Kohana's 'helper' classes. For a class as simplistic as your logger class, I think wrapping it into a singleton pattern just adds unnecessary complexity.
Its shit like this that makes me realize I'm a terrible programmer
I made the mailing list (Google Groups) which is the place for discussion about Lisphp: &lt;lisphp@googlegroups.com&gt; &lt;http://groups.google.com/group/lisphp&gt; Join us if you are interested in this project!
Youre right, my syntax is all wrong. Been shifting through various different languages recently.. However the concept is still the same.
Not just reddit, the entire world has gone nuts
Anything that I read in /r/programming makes me realize this.
 require_once 'Lisphp/Program.php'; require_once 'Lisphp/Parser.php'; require_once 'Lisphp/Scope.php'; require_once 'Lisphp/Runtime.php'; require_once 'Lisphp/Environment.php'; What's the point of using all of those lines when the majority of the time you're going to use the same set of lines anyway?
I use to think I was hot shit until I tried to read anything written in a functional language
&gt; 'static class' in this context means a class whose members and properties are *only* static. ah right - good point.
Those lines are not just duplications, but help import submodules as library from client code. The main purpose of Lisphp is to be embedded as script language engine in the other web application written in PHP, so it had to be modular and easy to be loaded as library.
Any time ZF is mentioned we all get modded down. I guess the fan boys are out in force, which is a shame because ZF is going to become the industry standard - i.e. if you get a job using PHP they will expect you to at least know it. Yes there are better frameworks, but ZF is the one your future boss will want to know about.
I like http://www.bigprof.com/appgini/ It frees my time to write the code I enjoy and I just read and write the mysql tables. Try it. Very cheap and updated often. I have been using it for years. 
The whole site is coded as .php? What does that mean? All the files are given the extension .php, or the site is coded using PHP? How would you know if a PHP page uses PHP? You certainly can't right-click-&gt;view-source to find out. Anyway, what's the problem with using the .php extension if there isn't any PHP code in the file? Maybe there once was, or maybe there will be.
that's the worst way of doing it. and yes it's very common. the sensible thing to do would be using a template system to separate visuals (html) from the logic (php)
Something else to note is that static member values are shared between instances. class Fish { private static $instanceNum = 0; public function __construct() { self::$instanceNum++; } public static function numberOfInstances() { return self::$instanceNum; } } $a = new Fish(); $b = new Fish(); // Prints 2 echo Fish::numberOfInstances();
I am working on these sites. I have all passwords. Yes the whole site is coded with a .php extension even though 90% of the files are pure HTML. Head, Body, footers. There is not a HTML extension on the site. For 2 websites I am now maintaining. 
Depends - those files may be for the static version of the pages. The reason they're still named xxxxxx.php is for the site to have a common extension, for better indexing etc. Maybe those are cached pages writen directly to the directory by a cron job? There might be vaid reasons to do that, and the fac that the script is from India has nothing to do with it. Assuming that something from another country is inferior is just plain stupid.
Consider using a singleton to make your code testable? That's not ... right. They hold their state during the tests and make testing even more difficult. Very [well known](http://stackoverflow.com/search?q=testing+singletons)
Static classes exists in C# as far as I'm aware. But in PHP they may be different.
I am assuming some school somewhere is teaching it. That's why I referenced India. 
The only way to know for sue it to ask the original authors.
Yes, that's fairly common. PHP was originally intended as a templating language, so that would be the canonical way of programming websites with PHP, some 10 years ago.
Well if you think that there is a penalty on performance using print 'Hello $you'; than print 'Hello '.$you; than yes. The real question: Is it significant? No, I don't think so. IMO, notice errors are made to have nicer code and to debug some particular problems. 
It's not a performance issue, it's a security issue.
Test it. That way you'll know for sure. Here are my results on a 2.8GHz machine. 1,000,000 iterations, not displaying any errors on screen, empty login() function. if($arr['level'] == 'admin') login(); When $arr['level'] exists: 0.18 seconds When $arr['level'] does not exist: 0.60 seconds if(isset($arr['level']) &amp;&amp; $arr['level'] == 'admin') login(); When $arr['level'] exists: 0.26 seconds When $arr['level'] does not exist: 0.13 seconds So there does seem to be a performance penalty if you try to access a nonexistent array index, and this penalty is greater than the cost of an extra isset() function call. Still, not very significant. We're talking nanoseconds here. Personally, I code with both E\_ALL and E\_STRICT turned on, and those notice-level errors annoy me a lot. So I try not to cause notices in the first place. Edit: Oh yes, and it could be a security problem as well. PHP is known to convert certain user-submitted values into associative arrays, so if you run this script on a server with register_globals (gasp!) enabled, other people could control your uninitialized array key. So don't use either method. Just initialize $arr with all the necessary keys. 
Thank you for doing that testing. I assumed it was like in Javascript, where the value was simply registered as null (technically undefined, but that's basically the same). I'll need to start taking that into consideration.
Write a function to test if a value exists, and if so, returns it, otherwise, returns a default: // er stands for exists-return, if $k exists, return it. function er($k, $a, $default=NULL) { if ( is_array($a) &amp;&amp; array_key_exists($k, $a) ) { return $a[$k]; } return $default; } if ( 'admin' == er('level', $arr) ) { login(); } You can update er() to work with objects too using property_exists()
If you hate the isset and do not want to ignore notices (because they **are** very handy), use $arr += array( 'level' =&gt; 'the default level', 'whatever' =&gt; 'the default whatever', );
Perhaps it's because I'm used to coding in other languages (that would raise an exception if you did this), but surely it would be better to be more affirmative. It also allows for a more graceful approach. $arr = array('name' = 'John Doe', 'level' =&gt; 'user'); $arr['level'] = $user -&gt; getLevel(); if($arr['level'] == 'admin') login(); elseif ($arr['level'] == 'user') { header('HTTP/1.0 403 Forbidden'); die('You are not an admin'); } else { header('Location: http://example.com/login/'); exit; }
It's both
what are you comparing yes to?
Two things, only one of which applies. First, initialize your variables which means $arr['level'] should always be set. For example, it might default to 'guest' or 'anonymous'. Second, please start using === instead of == all of the time. I know, not really related, but it's a pet peeve of mine. :)
That's just hiding your head in the sand man; like writing unit tests that always assert true. 
thank you for the lightbulb moment man! usually I just have a number of lines like $arr['level'] = isset($arr['level']) ? 0 : $arr['level']; $arr['user_id'] = isset($arr['user_id']) ? 0 : $arr['user_id']; ... But this is much much more elegant.
Thank you for doing that testing. Not a game changer either way, but looks like it makes sense to use isset() when you can, especially if there's a good chance the key will be missing often. I'm confused on the security implications though. I understand the register_globals related concern of overriding variables via form post, but isset() in and of itself isn't going to mitigate that problem is it? I'd think isset would return true for anything register_globals had set woudln't it? I used the admin login example for the question to keep it simple, but I'm mostly using this technique with option arrays I send to my internal functions, ie: dbResult($query, $binds, $db, $options = null) where options might have 'start_record', 'end_record', 'order_by', etc. which all need default values for them. For folks in a similar boat, [Ergomane's reply](http://www.reddit.com/r/PHP/comments/cmjw5/is_there_a_performance_penalty_for_ignoring/c0tmylg) below is a really clean way to handle that use case.
Also, these notices will usually be written to an error log still. These logs can get gigantic if you do this often enough. I've had to deal with some apps that gave 100+ notices per pageview. It's not pretty to see the resulting logs.
What? Why? It's no different than typing: if ( isset($a[$k]) &amp;&amp; $a[$k] == 'login' ) { } a bunch of times, just more succinct. 
var_dump($object)
Are you kidding? This is an actual programmatic structure; [coalesce](http://en.wikipedia.org/wiki/%3F%3F_Operator). Although it would be better if the post author used [array merge](http://php.net/array_merge), eg: $default_options = array("level" =&gt; "unauthorized"); $options = array_merge($provided_options, $default_options; The coalesce structure makes your work more meaningful than the eye-sore that is `$level = !array_key_exists("level", $options) ? "unauthorized" : $options["level"];`.
you should be able to run a foreach over it: &lt;?php $p = new stdClass(); $p-&gt;abc = "def"; $p-&gt;def = "ghi"; foreach($p as $k=&gt;$v) echo "$k is $v\n";
You have to be somewhat of an idiot to use register_globals, so I think you probably deserve what you get (and have to watch out for tons of little edge cases anyway.)
The code I use looks something like ... $query = http_build_query( array( 'address' =&gt; 'Redditville', 'sensor' =&gt; 'false', ) ); $obj = json_decode(file_get_contents('http://maps.google.com/maps/api/geocode/json?' . $query)); if ($obj-&gt;status != "OK") { throw new Exception('Google gave bad status: '. $o-&gt;status); } $latitude = $obj-&gt;results[0]-&gt;geometry-&gt;location-&gt;lat; $longitude = $obj-&gt;results[0]-&gt;geometry-&gt;location-&gt;lng;
You could just cast the object to an array like this: $obj = (array)$obj; But if you put in true as the second parameter of json\_decode you'll get an associative array right away.
One thing that hasn't been mentioned here, is that if you ever need to track down an issue with the error log, it's going to be much more work to sift through thousands of notices. Not to mention the wasted hard disk space they will consume. I've seen log files rise into dozens of GB over a period of just a few days and bring a server down once all available disk space was consumed and you really don't want to have these problems if you can avoid it. Better to not cut corners and write your code properly (use a function as suggested by Leftnode to reduce the repetition).
If I wanted to cast to an array, I'd do it later in the code. Something like: extract((array)$obj-&gt;results[0]-&gt;geometry-&gt;location); But at this point it's just user preference, and I have the code set up the original way mainly because it's easy quickly look at and understand (imo).
I was speaking in terms of that function being used for error notice prevention; not whether the coalesce structure is good or not. I'm sure it's the bees knees :)
It's just a judgement call I guess. Yes, using that method would help prevent notice errors but, personally, I'm leery of that approach because of potential debugging issues caused by too much abstraction. For example, what if $a is turned into a string through the normal flow of your app (there are all sorts of ways for this to happen and depends on the actual code)? Well, using the function, it'll get the default value if one was provided. I see this as being a questionable hole though because something happened that the app didn't foresee yet the app didn't catch it or handle it and in fact thinks everything is kosher on a global level. The odds that this is trivial are really good, I agree, but considering a little verbosity would remove the potential issue I think it's a worthy trade off. Using that approach on specific chunks makes total sense so long as it's intentional; using a shot gun approach and going global has the potential to open issues. Like I said though, it's a judgment call but one that I would go the other way on. 
Using the second parameter of json_decode() is a key point here. Do that.
I always use isset. It not only removes the warnings but also stops nasty bugs from happening. I've been bitten on the ass one too many times by not checking an array with isset so I use it every time now.
I figured that array+= thing out myself a while ago, but it doesn't work on numeric arrays. WTF PHP?
It's mainly a security issue the performance difference is so microscopic it's basically non-existent. Honesty optimising your SQL queries and caching results efficiently are going to make far more of a difference with speed then deciding to check if a index exists or not. If you honestly cared about the nanosecond speed difference then you might as well be coding your website in assembly. 
Numeric arrays are reordered when merged.
&gt;you might as well be coding your website in assembly. Been there, done that.
Make yourself familiatwith [print_r](http://php.net/print_r) function - it will dump all the variables the object holds (even if they're private ,protected). Then just call $myOjb-&gt;VARIABLE_NAME to see its content. If the variable is an object (in this case denoted by stdClass aswell) just keep going $myObj-&gt;SOME_VARIABLE-&gt;INNER_VARIABLE 
 print "Hello $you"; than print 'Hello '.$you; FTFY
I've found type checking is faster than generating notices. Also if you're really sure that $arr['level'] should be set then thrown an exception that is appropriately caught and sounds an alarm before pushing it to production. At the same time fail gracefully in the event it makes it to production.
Never mind micro-optimization like this. Instead, do profile and conquer bottlenecks of your application when the performance becomes significant.
Fix your code, don't just ignore it when php tells you there is an issue. isset is cheap and it makes debugging so much easier later on when you're looking for real issues. I can't tell you how much I hate it when people leave bugs littered throughout their code, and a notice is a bug. Oh, also, since you're into micro optimization (tip- break this habit, use [xdebug](http://devzone.zend.com/article/2803)) you should note that isset is dirt cheap, so if $arr['level'] isn't set you're saving yourself an insignificant amount of resources.
extract is a filthy little fucker, you can't really rely on anything after calling it, especially if the input comes from the internets. Read the warnings on [the manual page](http://www.php.net/manual/en/function.extract.php). As I suggested, add true as the secont parameter of json\_decode, then you can do it like this: $myLoc = $obj['results'][0]['geometry']['location']; echo 'Lat is: ' . $myLoc['lat'] . ' Lng is: '.$myLoc['lng']; 
This is simultaneously ridiculous and awesome.
I don't really understand what you want to do. Is that PHP file list.php or editinplace.php? Do you want to end up having 2 requests to that file with a flag to say which boxid, or one request that returns 2 sets of data?
The question is rather confusing and assumes knowledge of your database and your application, but if I understand you correctly- you are looking for a WHERE IN. SELECT * FROM tablename WHERE id IN (1,2,3); That would grab all records from tablename with an id of 1, 2, or 3. If you don't have that information you can use a subquery. A lot of times it is helpful to use the implode function on an array of values using a comma as a separator. Does that help?
Oh I apologize for the stuff I assume on everyones behalf - I just tried to condense my question but while doing so omitted that kind of important information. If you'd like to see exactly what I mean here is a test version of what I'm working on: http://www.scottsteelerectors.com/frenchsort/ So each 'div' thats being thrown into a sortable box has a 'boxid' value in the db as well as an id/order/rating. So altering the query to spit out the boxid=2 results to #myList2 and boxid=3 results to #myList3 etc. Hope this clears things up. So this statement is what I should be looking into? ('SELECT itemid,content,rating,boxid FROM `Items` WHERE boxid IN (1,2,3,4,5,6,7,8,9,10,11,12); ORDER by `Order`')
According to http://freelanceswitch.com/rates/ my Ideal Hourly Rate is $99.17 and I chage my time at $90+GST(10%). Nice!
If the IDs are contiguous you can use a BETWEEN clause: SELECT itemid,content,rating,bodix FROM `Items` WHERE boxid BETWEEN 2 AND 12 ORDER BY `Order` /* this gets 2-12, boundaries are included*/ Your PHP code would be: &lt;?php // Connect to the DB include("config.php"); $result = mysqlquery(' SELECT itemid,content,rating,bodix FROM `Items` WHERE boxid BETWEEN 2 AND 12 ORDER BY `Order`'); while($row = mysqlfetch_assoc($result)) { //use assoc to minimize extra data $content .= ' &lt;div id="drag_' . $row['itemid'] . '" class="list_element"&gt; &lt;div id="' . $row['itemid'] . '" class="lol"&gt;'.$row['content'].' ' . $row['rating'] . '&lt;/div&gt; &lt;/div&gt;'."\n"; } // return list of elements echo $content; ?&gt;
I don't really understand -- if I have a static Factory class (in PHP, which is what I write, mostly), there isn't any good way to stub out that Factory when unit testing other classes that use it. So, I have to turn the Factory into an instance, and save a link to the instance in my class-under-test's constructor (or via a breakout function that I can override in my class-under-test, but that's even worse IMO). So, that said, how do you think I should be testing things that depend on code that is naturally static? I am genuinely interested.
Hmm now what I'm wondering is this (My entire event.js file) function getList() { $.ajax({ url: "list.php", success: function(feedback){ if(feedback != "") //Verifies if the list contains at least one element { $('#myList1').html(feedback); // Displays new elements in a list $(".lol").editable("editinplace.php", { // all lol elements use edit in place cssclass : "inpu", event: "dblclick", style: 'inherit', tooltip: 'Double-Click to edit ...', indicator : "&lt;img src='images/loading.gif' /&gt; Submitting ...", // Does a neat little animation here with a 16x16 gif callback : function(value, settings) { // settings involing plugin parameters $('#data').html('Element Changed : '+value); //alert(settings.cssclass); } }); $('#myList1').sortable({ // Renders items as "sortable" placeholder: 'help', // css class for the final position of the element if I wanted to re-add .help to the style page revert: true, // seems to work well axis: 'vertically', opacity: 0.4, update : function (sorted) { // Callback Function, modifies the list serial = $('#myList').sortable('serialize'); // Time to serialize that mofo $.ajax({ url: "sort.php", type: "POST", data: serial, success: function(feedback){ $('#data').html(feedback); } }); } }); $('#myList1').sortable("refresh"); // } } }); } How do I get that iterating instances where boxid=8 to #myList8 etc. Say I create an eventbox2.js file and change all instances of myList1 to say 2 the include that in the index as well. myList2 gets populated but obviously myList1 isn't anymore...for some reason lol. Is there a way to do this all in that one javascript event file or do I have to create the other 11 and just include some extra arguments so the lists don't annihilate each other.
Oh, yes. I can't look at it right now, but I think that's the way you need to go. :) Let me know if that works.
You have a few options: 1) Return a JSON object instead of HTML. This will allow your Javascript to loop through the JSON code and process it as an array. 2) Return HTML, like you are doing, but put it into a JQuery object - $(feedback). Loop through this JQuery object as an array (use $(feedback).children() or $(feedback).contents() or $(feedback).siblings()). 3) Don't use numbered divs as your place holders (stripped down code): &lt;div class="mylist"&gt;&lt;!-- not ID=mylist1 --&gt;&lt;/div&gt; &lt;div class="mylist"&gt;&lt;/div&gt; &lt;script&gt; function getList() { $.ajax({ url: "list.php", success: function(feedback){ $(".mylist").each(function(){ //do something with the return feedback. } } }); &lt;/script&gt;
What I'm worried about as well is jQuery's sortable 'connectWith' option. As you saw it'll turn myList1 into a sortable but I need myList 2-12 becoming sortables as well - and CONNECTED to the others so 'connectWith' needs to be tweaked (By a better programmer than I, because my attempt didn't work and made everything break down!)
[Seems like a crazy complicated solution doesn't it?]( http://imgs.xkcd.com/comics/workaround.png)
You do know that [element ID and NAME should begin with a letter](http://www.w3.org/TR/html401/types.html#type-name)? That is, if you use that example in your original post.
It looks like you might be able to use the functions [md5](http://us3.php.net/md5) to replace md.ComputeHash and [utf8_encode](http://php.net/manual/en/function.utf8-encode.php) to replace encoding.GetBytes. I am totally WAGing here, but it might be worth a try. Compare the db value to md5(utf8_encode($password)) and see what you get.
Unfortunately, that doesn't seem to be everything necessary. md5($password) and md5(utf8_encode($password)) return the same string, which does not match what is given by the above function.
Nope, doesn't work. Mainly because PHP plays so nice with UTF-8 that the string "test" is still "test", even when forcibly casted to UTF-8. As opposed to what encoding.GetBytes() returns, which is (roughly) [ 't', 0, 'e', 0, 's', 0, 't', 0]. How nice of them :p
Oh, b/c their shit does utf-16 encoding I think. So instead of utf8\_encode try mb\_convert\_encoding("test", "UTF-16") and see if that works.
See my reply to KeX3. There's still an issue of all those -'s. It's 32 hex digits without them, which lines up with what I'd expect from a straight md5 hash. I think if you can get the MD5/UTF-16 encoding to work and compare it against the DB value with the -'s removed, that might work?
I will try that. Much appreciated!!
UTF-16 Little Endian. Those byte orders suck! One reason to avoid UTF-16, but Microsoft seems to like it. md5(mb_convert_encoding("test", "UTF-16LE")); That should produce the correct hash for "test". Convert to uppercase and insert hyphens if you like: implode("-", str_split(strtoupper(md5(mb_convert_encoding("test", "UTF-16LE"))), 2)); Edit: BTW, it's a terrible program that hashes passwords with MD5 and no salt.
Wonderful! Very much appreciated! Exactly what I needed.
Looks like it needed to be UTF-16LE as kijinbear found. Thanks so much for your help, Ardentfrost!!
If you're okay with getting the data through JavaScript (which you can then transfer into PHP if you want to), use [Google's location service](http://code.google.com/intl/da/apis/ajax/documentation/#ClientLocation). To see a real-life example, check the source of [http://mu5ic.me/listings/new](http://mu5ic.me/listings/new)
Well gee you didn't have to do ALL the work for me!! :) Thank you so much for your help. It is greatly appreciated.
PHP coder? Do PHP developers really use Joomla? I think it's horrible under the hood, only useful for basic setups where you don't have to change anything. Maybe it has improved in recent years.
Personally I'd do it via a jquery plugin rather than serverside.
There is a difference between micro-optimization and being a fucking idiot.
Interesting hack. I'll have to try it out with microtime() to get better granularity of results on smaller sample sets. Anyone know of a similar "hack" for doing this with array_diff ? 
on smaller sets I wouldn't really bother using this, you'll be looking at milliseconds difference. But by all means, do a benchmark, it'll be interesting to see.
Good point, and obvious really. Milliseconds of difference, if it is in the middle of a heavily abused loop, adds up over time. (while doing array\_unique in the middle of a heavy loop may not be wise, in the real world, you can't always go with the most ideal method. Especially in a multiple-programmer environment. However, having array\_unique and fast\_array\_unique as a greppable swap out library piece, is possibly handy. (with the blog mentioned caveat that you clobber element order.) I know there should be an O(n) way of doing array\_unique (It was a question in an interview I had last year) So I might try and add that in as a third piece if I have time. (edit: escaping out underscores for formatting.)
I think you may have trouble writing a more efficient implementation of `array_unique` - you'd have to use a for loop and do the hard work manually. I think if you wrote `fast_unique` using for loops instead of `array_flip`, it would be much slower (slower than `array_unique`? I don't know.)
Which is why I'm curious on trying it. I would be a fool to say I can do it better without proofing it out. If I was not at work, I'd be writing code right now...
&gt; Which is why I'm curious on trying it. oh yes absolutely, as an excercise in coding it'll be fun to see how it comes together. I'm curious to see what algorithm you're thinking of to do it in O(n).
Nice writeup, but if I had 100K+ items I'd much rather do something like: SELECT DISTINCT column FROM table ... After all, databases are designed to handle specifically these kinds of tasks. PHP is not.
The way I'm thinking may be similar to the way array_flip does; let me pseudocode something up. But as I write it out, I'm realizing O(n) is wrong, and the way I'd do it would end up being O(2n) foreach ($foo as $bar) { $newarray[$bar]=1; } then just return $newarray... Then again, if you want it in the same type of array as input, you'd need to do another foreach($newarray as $token=&gt;$key) {$end[]=$token;} or something like that. Coding exercises are fun...
yes, you're right, if you're trying to `array_unique` large amounts of data you're probably doing it wrong.
that's awesome
for small project, Notepad++, due to its great ftp support for large projects Netbeans
TextMate.
Eclipse. The current version is abysmally slow, though. I recommend using the previous version until they figure out the problem.
Me, too. Even without debugging it's still the best solution I've found on OS X.
netbeans
Ditto
i still use the [phpeclipse](http://www.phpeclipse.com/) plugin. for whatever reason i vastly prefer it over PDT
None, I use Crimson Editor. The most advanced feature it has is text coloring.
Notepad++ with WAMP, really.
Notepad
or Gedit or Kate....really depends what os or distro I'm using at the time.
Oh ya? Out of curiosity, what reasons do you feel make it better? I just installed PDT with eclipse (not Helios though), and have not yet had experience with phpeclicpse. 
Been using gedit or komodo, mostly komodo (have a license at work, using edit personally. I used to use Nusphere, which is Windows only, and I have been phasing proprietary stuff like Windows out of my life lately. (too much of a cheap bastard to buy Windows 7...)
gedit or vi . Any decent programmer can write code in any editor. Its the good editor/IDE that is transparent to the point where it is irrelevant. But lately I've been dabbling in using Eclipse, since I use it for Java programming at work.
One upboat for Netbeans.
Yup, Komodo / vim here. Komodo is pretty decent but still lacks some of the VSS features, or at least they're slower than VSS.
[PhpED](http://www.nusphere.com/products/phped_features.htm) - mailny for it's FTP support (only missing ftp upload of media files) - I'm making a lot of little changes to the sites scatered all over the net, so Netbeans or Eclipse with their project-only ftp is a no-go.
jedit
Aptana, back when it had proper dedicated PHP support (1.51, I think was the last I used) then netbeans.
vim
How worth it is the IDE version compared to the Edit version? I've been using the free version for awhile and am not sure if the features are worth it (for reference I love my source control program).
++
`&lt;C-a&gt;`
[PHPStorm](http://www.jetbrains.com/phpstorm/), by JetBrains (makers of IntelliJ). Only recently released but I find it to be much better than Eclipse (and others). Especially good is the code intelligence and handling of mixed PHP/HTML/JS files. I always used to turn off JS and HTML validation in PDT since it screwed things up.
Depend on the type of work you're doing. Working in a big aggency means you've got a lot of old site to support. Also, all the sites are scatered across many FTP servers. Now, using for example Netbeans you're stuck with: a) making a Project from the site b) downloading the files, editing them and reuploading manualy c) using remotefs I'll start wit the last one. remotefs (in the past, dont know if it was fixed) is missing one significant feature. Intelisense or whatever it's called - when the IDE autocompletes the function etc. names Downloading files manualy is tiresome and making a Project of a 1GB or bigger sites just to edit a couple of files is also a pain in the ass. And trust me, there are a lot of small changes to be made in old sites. Then again - if you're working for a company that has one or only a couple of small flag products then the remote fs support is not so important.
I started using this when they had the free beta and bought it the moment I saw that it had launched. Best software purchase I have ever made in my opinion. I've used Komodo, Eclipse-PDT, NetBeans, phpEd, and phpDesigner -- for an IDE, phpStorm is just far better. I still use vim pretty much for anything else though.
Sublime Text
e-texteditor here (windows clone of textmate) Oh and Stylizer 5, but thats for css
Coda, cause it's so pretty to look at and easy to use. :-) 
[Komodo Edit](http://www.openkomodo.com)
Geany I work in linux, and on a development server that I can connect to via sftp (which is easily mountable in linux). I have no need for any IDE to be able to connect via FTP.
I don't know, are they working on the live versions of their sites, without a local dev server? Granted this may work for low traffic sites with very few changes, but you'd also skip version control, so you can't ever revert to a previous version.
I loved this IDE, but the code highlighter crashes all the time in OSX. Didn't buy it because of that. Amazing otherwise, though.
a mix of netbeans (95%) and vim for small updates will on the road.
ftp? yuck. FTW svn+ssh
[Aptana](http://aptana.com/). I occasionally use NetBeans, but the font rendering looks horrible on my machine which makes things difficult to read.
I have Zend IDE which works across win/linux/mac (company purchased) but I use emacs-nox on a day to day basis and the IDE collects dust. Life is better in a shell...
bluefish + kompozer
Notepad++ on Windows, [Geany](http://www.geany.org/) on Linux. Anything more feels overweight to me.
I use Aptana as well, though vim does make an appearance, as well as text wrangler (Aptana is too much for just making a quick change)
Yup, Geany all the way.
I used PHPEdit for years until I was convinced to sworn to Eclipse for the built-in CVS support. I'm still not the biggest fan of Eclipse, but it works. I do find myself slipping back to PHPEdit from time to time though.
I meant switch not "sworn". Stupid iPhone auto-correct.
I been using [UEStudio](http://www.ultraedit.com/downloads/uestudio_download.html) for a while, but I might try Netbeans just cause it is free.
All those $5 a month hosts = FTP, and theres a lot of websites on them.
Also, depending on what the problem you're solving is, it's often useful to avoid putting duplicate values in the array in the first place. // do this $array[$value] = $value; // instead of $array[] = $value; It's just as fast as pushing new values onto the end of the array, and it keeps any duplicates out. The only disadvantage is it can end up taking a little more memory. To deal with the memory issue, you can use: $array[$value] = true; And then get the values with array_keys().
phpDesigner
text mate
Komodo IDE and it's debugging is amazing. I also really like how it auto-uploads on save.
Many of us work on the same server or a cloned server of prod. in a walled off dev. It's easier than keeping a local server running that may or may not respond the same/have the same config as the prod. server. Nothing stops you from using svn or git in that workflow. As for the OP, I use winscp + notepad++ or vim. 
http://www.e-texteditor.com/
I use WinSCP. Double click remote file to edit, opens in my text editor, when I hit save it automatically uploads. And yes, FTP is dead to me (except when clients only have that available). SFTP is the best.
Kohana 3. The docs are crap but the code base is light, fast, clean and intuitive. Especially true if you are coming from a Rails background.
I love netbeans. Except it looks like [shit](http://files.krato.cz/screenshots/screenshots-apps/netbeans-6.5/screenshot-netbeans-6.5.1-ubuntu-8.10-by_krato-20090325-0053.png) under ubuntu
I have IDE tourettes i swear. Coming from a Java background I used to be hardcore into PDT, but god its dog ass slow, crash prone, and the ftp support is ass. These days: On Windows, PHPEd and E-TextEditor (TextMate clone). On Linux, gEdit hands down, 24/7. Honestly with FUSE support, the snippets plugin, column edit mode, and just knowing how to use svn/git on a shell, makes gEdit into TextMate for Linux. You cant beat it. 
remove class="lol" from where it is now, and wrap rating in a span: . '&lt;span class="lol"&gt;' . $row['rating'] . '&lt;/span&gt;' . 
You can configure xdebug to send exception dumps to TextMate.
We work via SFTP from various servers, including a local dev environment. Just because somebody uses FTP doesn't mean they are working on the live site. Oh, and we also use version control (SVN) but manage most of that through the command-line.
Theres a plugin called NPPFTP, it works with SFTP, just as good as ftpsynchronize. 
Aside from working with clients that have shared hosting, I've not used FTP for several years. So in some respects it is a necessity - but it really depends what you're doing. For nearly all my work and open source PHP projects I will edit files on my development server using vim or gedit on a SFTP mount (via sshfs). Then check it in to the version control repository (Subversion, Mercurial, or git for stuff I'm doing at the moment) using SSH to the development server. The main trouble with this is that I'm stuck if I don't have an Internet connection, although I often find coding without being able to test is quite efficient - and if it was truly a problem setting up 3G isn't much of an issue. Having everything on a always on server with gigabit connectivity is very useful though, it makes sending things backwards and forwards to version control servers bearable and also reduces download time for libraries and big web applications - it's also backed up six times a day.
Notepad++ or EditPlus
I wonder if the [Emerald Editor](http://www.emeraldeditor.com/) project will ever kick into gear?
You speak truth about the speed - previously I've been using Zend 5.5 and it was a little slow. The 7 series was just fucking slow - made me look for something faster.
Wow, I got all excited because they advertise it as a free version of Komodo. What a bunch of fucking assholes, it's still 300$.
I actually preferred Aptana to PDT. Then they had to go and start using PDT instead, right when I got a new work PC and had to install fresh.. Ugh.
With [git-ftp](http://github.com/ezyang/git-ftp) you can easily push your git repo up to your host without any need for SSH-access.
I use Espresso. http://www.macrabbit.com/espresso/
Komodo is pretty neat.. autocomplete pretty fast and easy to add new classes to, have tried a couple of others but always come back to komodo
Yeah but then you have to use git.
I use netbeans, I find it easier, snappier and more "working as advertised"
I always download directly from netbeans (actually I always get the nightly at regular intervals) [here](http://bits.netbeans.org/netbeans/trunk/nightly/latest/)
I almost gave you a downvote for "upboat"
All the more reason I'm glad I run Debian then :)
I use the free version. It's not bad, it has all the main features, just missing stuff like versioning and debugging and stuff.
CE hasn't been updated since.. what, 2004? I'm hoping that project does take off.
I couldn't find anything free but a 21 day trial. Link?
Komodo Edit *is* the free version. Komodo IDE is the pay one. The 21 day trial you see is them trying to get you to try the pay version. This is the link straight to Komodo Edit: http://www.activestate.com/komodo-edit/downloads
NetBeans and vim.
In my experience, PHPEclipse is a pain in the ass to install as a plugin... it can become a game of missing dependencies very quickly. PDT works out of the box and is very feature-rich. Regardless, this is a moot point for me, as I switched from PDT to Netbeans more than a year ago. On my Linix box at work, Netbeans is MUCH faster and more stable than Eclipse ever was. In addition, the out-of-the-box support for scm, xdebug, and unit testing is very handy.
Once you go Vim baby, you never go back.
Netbeans is probably the best PHP IDE right now. Anything built into Eclipse just seems clunky, including Zend Studio, which is $299. 
It's worth the price. Switched a year ago and I have no regrets.
+1
Nah, thanks but no thanks. I don't like having to hit special key combos just to so simple edits or inserts. I like to click with the mouse, add, delete or edit information, and continue on. This "How do I do this shit!!!" is annoying. 
netbeans all the way. No matter how you put it, netbeans support actually feels integrated, and any php support in eclipse feels hacked in to somehow work in the java ide.
[hah, you think youre a real programmer?](http://imgs.xkcd.com/comics/real_programmers.png)
Well the original ubuntu theme looks like shit IMO, I really like that sandy one. I also got rid of the main toolbar for the screen space (on a smaller sized laptop). The result is that mine [doesn't look too bad](http://i.imgur.com/SHlLQ.png). Ubuntu can be both a blessing and a curse. The blessing is the near limitless customization, the curse is that extensive customization is almost required. Also it sucks that I had to manually install netbeans to get the latest version, the repos are still on 6.7 and that makes me rage.
Thanks, I'll try it out!
PDT, nicer syntax highlighting, F3 to get method declarations etc., collapsing code. PHPEclipse has nice support for PHPDoc though imo.
+1
neither, Netbeans!
I find both equally sluggish (first impressions). I have netbeans as well, with the intention of getting used to the interfaces. I can then make a more informed decision.
That's the whole point of vim, never having to move your hands from the keyboard to use the mouse. Also, being able to go in the file system, grep and whatever else, and back into the code. It was best portrayed by the Operator in Ghost in the Shell. It's also how Data from Next Generation works. Wish I could find the video.
You can alt-tab to a console in everything.
&gt;I find both equally sluggish True, they're sluggish, I find eclipse to be worse, but generally I guess that's the price of java.
http://php.net/manual/en/function.strtotime.php tons of comments to help one with this
true. I never really read the comments unless I'm desperate, and they all require testing before you trust what they say. Even the page on [Time formats](http://www.php.net/manual/en/datetime.formats.time.php) doesn't make it very clear that a single char is considered valid; just saying that `/"("? [A-Za-z]{1,6} ")"? | [A-Z][a-z]+([_/][A-Z][a-z]+)+/` is considered a timezone.
I love phpeclipse, has everything I want and I've been using it for years and years
phpeclipse has collapsing code, ctrl to get to declatations, code completion, browser integration, and everything else i can think i'd ever want in a php IDE.
vim, period. should i be using an ide?
what's wrong with that
I suppose that make sense. 24 time zones, 26 letters. Perhaps J isn't the only letter that will fail? If not, what is the 25th time zone?
Ditto.
I think [the code I posted](http://codepad.org/I8eEUosp) addresses that. There's some info [here](http://www.worldtimezone.com/faq.html) &gt; `18`. The military of some nations refer to time zones as letters, for example: Z (Zulu) = Zero Meridian (UTC or GMT). Letters A to M moves eastwards and N to Y moves westwards. The letter J (Juliet) is skipped and refers to current local time of the observer. 
Phpedit
Here's a bunch of quick observations: * I don't like your naming convention. Stick with PEAR style for classes or combine multiple functions/classes into logical chunks and stick in a single file. * Your `lib` folder contains client-side auxiliaries. That's rather surprising to me, as I would have expected it to contain reusable (server-side) library code. * Your `_model` folder contains infrastructure code. That is certainly not part of the model layer. * `class contr` .. Abbreviating class names is a really nasty habit. * `class model` .. This class contains references to a view, and it contains references to HTTP-input. There's also presentation logic in there. None of that belongs anywhere near the model layer. On top of that, naming a class "model" in the first place is rather pretentious; The model *layer* can contain many different kinds of objects; You probably don't want to force an application developer to inherit from a single base class.
I agree on all points. I'd like to add, if you're going to use rewrites at all, you may as well store your code outside of the web directory. Also, you could do with cleaning out the .htaccess file and leaving only the rewrites.
Since that site is supposedly a vanilla example of Swiftlet, I'm confused: is it a framework or a CMS?
I use PDT. I would use netbeans, but for one project i edit data live on the server over sftp, and fucking netbeans asks me to okay the SSH signature every fucking time it moves a file. Anyone know how to make it not do that? Aptana is also nice (based on Eclipse). 
You can put the dedicated PHP support back into Aptana 2 http://www.bram.us/2010/01/26/installing-the-original-aptana-15-php-plugin-in-aptana-20/ It's what I use and it works well for me, but I also use notepad++ for quick edits. 
First rule of strtotime is don't talk about the 25th time zone.
&gt; I'm not that familiar with PEAR, can you give me an example of what you mean? PEAR is the closest thing to a standard naming convention in PHP. See: http://pear.php.net/manual/en/standards.naming.php &gt; All third-party code goes in /lib/. I considered putting jQuery and CKEditor in /_view/ but decided to put it all in one place. I would distinguish between client side and server side code. For example, you could put js in `/javascripts/` and css in `/stylesheets/`. Or stuff them all together in something like `/res/` (I prefer it this way, as css and js is often very closely coupled). I would then stick server side libraries in something like `/lib/`. I don't think there is a silver bullet to organising client side resources, but I'm surprised by seeing them inside `/lib/`, because many other frameworks use that folder for server side code. &gt; I could use the full name for the class. I went with the abbreviation to save keystrokes, the $contr object is accessed quite a lot. In my book, that's a really bad reason. Readability should take priority. Secondary, standards should matter. Saving keystrokes should never be a priority. &gt; Initially I may have misunderstood how MVC apps are supposed to be structured, where would you say does that code belong? With presentation logic, are you referring to the pagination? Probably. It's a complicated and ill-defined concept. However, most people would agree that the model layer must not contain any code that relates to controller or view. How the cake is cut between controller and view is much fuzzier. I'm referring to pagination code, output-formatting functions and any references to `$_SERVER`, `$_GET` etc. As a rule of thumb, your model components should be ignorant of the execution context (Eg. web or command line) and of the output format (Eg. html, xml, text).
I've used unix timestamps on several calendars and it has worked fine.
Unix timestamp. That's what it is there for.