MVC is not something that framework implements. Instead it should be implemented by your code. When was the last time you open-sourced code of a website, that you made? 
If you give up at everything after two days you will never learn anything. Seriously name one thing you are good at after practicing for two days? I mean do we really need another thread to espouse the virtues of using a good framework? If those virtues do not sound appealing enough to spend more than *two days* of your time learning then don't; but I promise you this type of poor strategic planning and to be perfectly frank, outright *laziness*, will greatly affect your career trajectory, not to mention your income, in the long term. tl;dr Give your head a shake.
When web guys think MVC, we traditionally think of "database &lt;--&gt; control logic &lt;--&gt; html code". And from a traditional / classical POV that is not really what MVC is about. In "classical MVC" there *should* actually be logic in the View .. and the View *should* actually talk with the Model .. and the "HTML templates" would be a separate thing from the View logic, which should be handling all the UI responsibilities. "Real MVC" is harder to implement in a web app... it is more something at home in traditional software design. What we use in web apps is more of an "architectural pattern" (vs. "design pattern") that is based on the classical MVC model. Purists will bite you in the butt for calling a web app that is simply divided into 3 folders "MVC". We have some here! I admit .. I just discovered the difference recently so I'm sure someone can explain it better than I can.
Sounds like he just wasn't able to understand it, so he decided to ignore it.
I totally agree with you that MVC is not "technically MVC". But if something pursues an architectural pattern that tries to divide code based on areas of responsibility (resource management / control logic / presentation code) .. to say this has "nothing to do with MVC" is a little bit of an overstatement, don't you think? It may be closer to MVP, but doesn't that have *something* to do with MVC? Or .. if you are just going to be a hardliner.. that's fine too.
I think you're splitting hairs in a discussion that's meant to help a newer developer get introduced to a new topic while not providing a lot of concrete examples to support your claim. It's not constructive discussion. I also struggle to determine what the takeaway is of your arguments. Are you just upset that some frameworks don't implement a "pure enough" level of abstraction between each layer of MVC? In the case of Laravel (and many of the other flavors that use Symfony packages), you have complete control over where your domain logic lands. You're not forced to put that in Controllers as you state. That's not even the case with CodeIgniter. I'm not asking you to show me code you've written specifically. I'm asking you to provide myself (and the others here) with either a Book/Blog article or something that might be able to better illustrate what "correct" MVC looks like.
Definitely more detail than I was able to go into in my 5 minute talk but I disagree with one thing in the handbook &gt; The first is to make sure you aren’t going it alone Having another set (or sets) of hands to get started is definitely useful but I wouldn't call it required. There is a lot of work that goes into it but if you're willing to do it yourself you shouldn't be discouraged to go at it alone. Aside from that I couldn't find anything missing really. If I had any ideas it would be one organizers could do (and we should do locally, PJ) is to have a meta meetup for user group organizers every few months to discuss tactics, organize joint meetups, suggest venues/sponsors/etc.
I found a nice article with some examples of it here http://www.sitepoint.com/the-mvc-pattern-and-php-1/
Hey Shawn - the idea was really that it's tough as you get busier to keep things going all by yourself. If you include folks early on, they have a sense of investment as time passes and don't feel like an add-on or someone who's filling in. I LOVE the idea of having an organizers meetup (I think was talking with Purdy about it at IgniteBflo). I was thinking sometime in January. But we can discuss that in email :)
Thanks for your comment, and your right there probably isn't much I know that I learnt in just 2 days, but that's not really the point, the point is I can spend weeks learning a framework inside out, or I can ship a finished product. For the record, I'm far from lazy, I work fulltime, I have 2 kids and a family, but I also have 10 games on the android app store and 2 on IOS, I build websites on a freelance basis, I own a website that makes me some money. I just have a problem with Frameworks I don't get them, and I really want too, like I said in a comment earlier, I am determined to fix this, so count my head shaken. 
In that case you could start by reading http://martinfowler.com/eaaDev/uiArchs.html 
Yeah, all those years [doing Smalltalk](http://heim.ifi.uio.no/trygver/themes/mvc/mvc-index.html) and I never quite [got it](http://heim.ifi.uio.no/trygver/1979/mvc-2/1979-12-MVC.pdf). I don't think it is a useful abstraction for modern web development and further, I have read so many introduction to XXX framework paragraphs that declare they are designed along MVC and in truth, they're not. Its kind of a rubber stamp of magical goodness everybody claims as their own.
I use CoronaSDK, which is a framework of sorts, but it's not OO or MVC
My comment probably came across as pretty snarky. I apologise. I agree that the majority of frameworks use the term MVC just to seem modern, while hacking together an over-engineered, cumbersome implementation. EDIT: Separating data presentation^1 from data manipulation (CRUD)^2, and having a central location for the user to interact with the app^3 is quite useful. It keeps things orderly and easy to maintain. Whether you call that MVC or don't give it a name at all is immaterial. It's still useful. 1. Views 2. Models (And database abstraction layer) 3. Controllers 
Cheers, says nice to hear it helped someone!
Thanks. Been waiting for this to open, received the email yesterday but forgot to sign up. I've already bought the book but I suppose I can give this one away to someone else. 
Thanks for that link. So just to begin, this article is about GUI applications. The properties of a GUI application that lives on your desktop does not wholly match how one would(or even should) design a web application. Some of the ideas (like Observers) isn't even relevant because this implies that as a Model updates, the Controller/View is told about that change. The only place where this article differs with how PHP frameworks "implement" MVC is through the Model. Based on Fowler's definition of a Model, I'm not even sure how this is possible in the world of web development where the life cycle of an app is so short. &gt; The presentation part of MVC is made of the two remaining elements: &gt; view and controller. The controller's job is to take the user's input and &gt; figure out what to do with it. This is precisely what happens in Laravel/Symfony/Slim/Silex/et al. You implement your services/repositories/whatever, the controller handles the input (if there is any), the view parses that final representation. So I can't help but feel like you're trying to say you simply cannot implement a true version of MVC on the web.
[Original description](http://heim.ifi.uio.no/trygver/1979/mvc-2/1979-12-MVC.pdf). MVC was designed to facilitate organization of graphical user interface code. It provided A but not THE separation between presentation and data. From the paper: &gt;MODELS &gt;Models represent knowledge. A model could be a single object (rather uninteresting), or it could be some structure of objects. &gt;There should be a one-to-one correspondence between the model and its parts on the one hand, and the represented world as perceived by the owner of the model on the other hand. The nodes of a model should therefore represent an identifiable part of the problem. The nodes of a model should all be on the same problem level, it is confusing and considered bad form to mix problem-oriented nodes (e.g. calendar appointments) with implementation details (e.g. paragraphs). These days this is pretty much the database and models are reified via the various ORMs you find around. ActiveRecord for instance. There is very little controversy about this. But things break down going forward. &gt;VIEWS &gt;A view is a (visual) representation of its model. It would ordinarily highlight certain attributes of the model and suppress others. It is thus acting as a presentation filter. &gt;A view is attached to its model (or model part) and gets the data necessary for the presentation from the model by asking questions. It may also update the model by sending appropriate messages. All these questions and messages have to be in the terminology of the model, the view will therefore have to know the semantics of the attributes of the model it represents. (It may, for example, ask for the model's identifier and expect an instance of Text, it may not assume that the model is of class Text.) In the original implementation, views were aggregations of screen widgets. They had some behavior. In the web world I think we can mostly agree that the web browser handles the view. The "questions" are pretty much the form submissions. &gt;CONTROLLERS &gt;A controller is the link between a user and the system. It provides the user with input by arranging for relevant views to present themselves in appropriate places on the screen. It provides means for user output by presenting the user with menus or other means of giving commands and data. The controller receives such user output, translates it into the appropriate messages and pass these messages on .to one or more of the views. &gt;A controller should never supplement the views, it should for example never connect the views of nodes by drawing arrows between them. Conversely, a view should never know about user input, such as mouse operations and keystrokes. It should always be possible to write a method in a controller that sends messages to views which exactly reproduce any sequence of user commands. K, this is where, in my mind it pretty well breaks down. Where is the controller? Is it the PHP code in the page handler (or rails "controller" method)? That stuff performs some aspects of controller, but it often also renders the views (this separation is pretty OK in rails - less good in some other frameworks). But then &gt;a view should never know about user input, such as mouse operations and keystrokes. It should always be possible to write a method in a controller that sends messages to views which exactly reproduce any sequence of user commands. But the browser does know that. Furthermore you can't really control the view from the server. The browser is in charge. What this leads me to conclude is that controllers MUST be written in Javascript and packaged with the view. You cannot write a proper controller on the server side. Yet all of these frameworks purport to offer just that. Lately I've been building applications - not web sites. The applications have views written in HTML/CSS, controllers written in Javascript, and the Model resides on the server and is referred to via the REST protocol. This means my "web framework" is really just a web server doing model manipulations in response to ajax style requests, typically serving results as JSON. My servers have thus become crazy simple, and my views/controllers have all moved into the browser. The headache is that it is a bit harder to manage the complexity of the application artifacts but angular is looking like it is going to save me.
Congratulation, you managed to completely miss the point. You are not even capable to understand that [template](http://codeangel.org/articles/simple-php-template-engine.html) is not a view.
There is a saying, if you can't do any good to anyone, then atleast don't do any bad as well. Talking about your suggestion, the only thing is that it's little faster (you can say micro seconds or something like that). Other than that, it's not solving any other purpose. Whether I should be teaching or not, I don't have to get that suggestion from you. And if you think that you are that smart, why don't you spare time to spread some knowledge you got rather than telling others to stop teaching what they know. THINK ABOUT IT.
You gotta just jump in and be a little persistent. You can accomplish it, but you need to learn the concepts, functions, modules, classes, etc that are associated with a specific framework. I am using Laravel and have been reading Taylor Otwell's and Jefferey Way's books on it, and man... I feel like a novice programmer. Unit testing seems overly complicated and slow, implementing interfaces seems like extra non-essential work, but after I have written 70+ tests and a few interfaces, I am starting to grasp the concept. TLDR; It is complicated at first, but if you stick with it, you will reap the benefits and be a better programmer because of it.
Isn't it a little bit ironic to be concerned about security and still use mysql_*?
I think this it really, there are no short cuts, just got to keep ploughing into the docs and tutorials and stick with it, it's just frustrating as when I get a project in my head I want it done, but I suppose it's like anything, short term pain for long term gain.
Oh unit tests, one day I shall write you.
I hear you brother, I've been following the tutorials on culttt.com (which is great) but about the third one in is on unit tests, test what exactly? All I've been doing is running commands that generates some magic code I don't really understand yet.
That's because you're doing a very poor job of making any kind of salient point. Okay, so a template is not a view. So what then is a view in the MVC of web development? Fowler says "The presentation of MVC is made up of controller and view". So are you linking me to a templating engine implementation to once again point out "this is the wrong way" instead of saying "here is something that IS what I'm talking about"? edit: it looks like someone else felt the same way back in 2005. http://www.sitepoint.com/mvc-and-web-apps-oil-and-water/
The whole gist is that you test your code that you write as best you can. Don't worry about the framework, as there are already tests covering most of it. But figuring out how to mock and separate logic so it is testable introduces a new way of thinking.
Spend some time studying up how &lt;random framework&gt; implements design patterns. Once you realize that factory methods and singletons are basically the same everywhere, learning the frameworks becomes a lot faster.
Second for this. I used it a couple years ago when I was writing my own framework and loved how easy it was to handle relationships. It also makes development a breeze as the database is fluid. You can add fields and columns dynamically. Downsides are that tables have to be structured in a certain way to play nice with redbean. Hooking redbean in to a preexisting table is very difficult. Second, the fluidity of the tables can cause problems if you spell something wrong.
Well, it's not the only problem. You're suggesting manually producing XML, which is a terrible idea and possibly insecure. You should teach the proper way: Producing an XML DOM and serialising it. &gt;And if you think that you are that smart, why don't you spare time to spread some knowledge you got rather than telling others to stop teaching what they know. I do spread knowledge. And I'm saying that if you teach, teach the proper way, and otherwise don't teach. The world does not need more bad PHP tutorials. It needs more good ones.
We Canadians receive tons of gold... oh wait... never mind!
Unless they use what hopefully will become a standard, of sorts, like the php-fig PSRs.
Well, consider Jeffrey Way is an employee of NetTuts and he did these laracasts in his spare time. He has no obligation to license them on NetTuts and NetTuts has no obligation to distribute everything made by Jeffrey Way. It's been pointed out that $9 is a great deal for the quality. However, I agree it would be awesome if they could work out some kind of mutually beneficial arrangement like what you describe. (hint hint NetTuts)
Thanks. As a newcomer to laravel this is something I've been needing to understand how to do more than simple crud.
You're welcome.
Perhaps you missed the part(s) where I actually customise the code..?
Seems like we should start calling it "Web MVC", so people stop raging about it. And at the same time we display respect for the sanctity of The MVC.
Agreed! That series by Fabien Potencier was the first thing that came to mind in helping to break apart this kind of framework. In terms of learning Symfony2, the [symblog](http://tutorial.symblog.co.uk/index.html) tutorial is a good one to work through. User beware - when I ran through it there were a few inconsistencies between versions which lead to some headscratching. Not the end of the world, as it gets you digging into the proverbial guts a bit more but check the comments on each step.
Application logic should be in the controller. Business logic in your models. I've built MVC apps and worked on teams that build MVC apps in .NET and Java and application logic is always in the controller.
Thought of the same thing the other day. I want to use a framework because I know it supports a lot more and gets more done, but I'm not sure what framework to give my time to. Any suggestions?
If you don't like learning new things, find a new career path. You should be picking up at least one major technology every six months or so at a bare minimum. Regardless, often the best way to learn something is to actually use it, don't spend 2 days learning a framework and then go on to build your project, start up a new instance and build the project as you learn - chances are you'll get a much better understanding of what's going on anyhow.
This somehow makes me doubt that you understand the context in which the term ["acpplication logic"](http://books.google.lv/books?id=vqTfNFDzzdIC&amp;printsec=frontcover&amp;hl=en&amp;sa=X&amp;ei=5sBJUvHtDabv4QTly4HwAQ&amp;redir_esc=y#v=onepage&amp;q=application%20logic&amp;f=false) is used. It's that, or you haven't even bothered to learn the basic responsibilities for each part of triad.
Just think, those frameworks represent thousands of hours of work that you don't have to do, and can use for free... A few days to get over the learning curve is nothing in comparison. 
Laravel seems nice, but don't kid yourself, all frameworks have learning curves. But it seems to be the easiest to jump into (out of the popular ones, at least). [I still prefer micro-frameworks, though.](http://flightphp.com/)
jeremy cioara is awesome if you're into networking.
The question you've responded to is precisely what I've been asking for for bloody ages. Everyone comes in spouting "It's not proper MVC", then can't even provide some simple code to back up their statements, then points to Martin Fowler instead of showing some PHP code (something that doesn't end up in anaemic models). I guess i'll keep my eye on Fracture to see how it should be done correctly :P
When I first was learning frameworks I would do a day of work, the next day realize I could do it better, and restructure everything I did, do another day of work, start over, repeat. Yeah, a bit frustrating and not particularly exciting, but once those things click, you find yourself saying "that's brilliant" to yourself a lot. You get faster and more efficient, and that improvement continues for a lot longer than 2 days. It's learning, and if you enjoy picking up new stuff and tinkering, then you're going to have a hard time keeping on the upper end of the market. 
Lemme repeat it again: **frameworks do not implement architectural design patterns.** Architectural patterns are implemented by applications and most of the application are NOT opensource. Yes, it is not possible to point to any opensource PHP applications which even attempted to implement anything similar. Write down opensource php applications that you know. The cross out one who are known for crappy code. See what you are left with. And on the other hand you have the fact that MVC and MVC-inspired pattern are **not** meant for hello-world level code. This architectural pattern is for adding additional constraints to a large scale application, where simply adhering to best OOP practices and principles is not enough anymore to contain the complexity. That's why there are no articles that contain "simple MVC examples", because there is nothing simple about use-cases, where it should be applied. The bets a blog post can do is illustrate the flow of information, which is only minor aspect of the whole thing.
You could say the same thing about any other layer of abstraction. It just looks like a bunch of unnecessary files, until you learn what it can do for you. I'm pretty picky about not putting layers on top of layers, but if its reliable, and not a performance killer, it really is just one more layer on top of dozens. It's probably the lightest one at that when it comes to servers as you work your way down to zeros and ones.
That's a bit of a strawman... It doesn't need to be a full blown application, even a blog post (or a pastebin link) with sample code (not built on any particular framework). Hell, I'll even take some pseudo code... What do YOU think is a good example of how things should be done?
PSR-4 has been around for at least 6 months. Apparently it needed 6 months and two weeks. It could have been around for a year. It would have then needed a year and two weeks. My point - which is seems to me like you might have missed - is there is not as much advantage to "waiting" as you seem to think. It is not how long you wait, it is the amount of discussion being had. The longer you wait, the longer people COULD talk about it in theory, but its been proven time and time again that it ends up being the more time people have to ignore it. The point is 6 weeks is MINIMUM. Smashing something through that quickly without a huge approval would be reckless, and that is not at all what happened with PSR-4. Also, PSR-5 has been in discussion for months. PSR-6 has been in discussion for almost 2 years. Time is not the issue here.
Yeah totally agree. I did put it into an existing database and you can add a model class to fix issues with tables names. But if build a project from scratch, redbean makes everything so fast. Just like with SQL you have to make sure you get the table name right. But this is far from catastrophic and quickly fixed. I find RedBean make app development so much more easier.
All the monolithic frameworks require a commitment, both in time and how you code. I would advise playing with some of the micro frameworks like Slim. Those you can get up to speed on pretty quick. Out of frustration I even wrote my own framework (basecoat) which is sort of a micro-micro framework. You should never start from scratch.
&gt; two weeks Why is that? Looking back through the discussions it seems the FIG group is expanding, but some members are asleep behind the wheel. Maybe they're dead weight? I can see you guys are between a rock and a hard place at times. You need the standards to be picked up by as many (popular) frameworks as possible to gain credence, and at the same time some of the representatives for those frameworks are being a bit lackadaisical. I have one prediction that I'm willing to bet the house and the farm on: by the end of the year you will have grey hair, or will have pulled it all out. ;) That being said, cool down periods are always important. They give people time to regain their composure and come back to the table with a new perspective. It seems many in the group were tired of talking about PSR-4, and just voted with a "fuck it, I'm too tired to argue" attitude. Perhaps having a post-draft would help, with a cool down period between draft and post-draft. Oh, and we should all get together for a beer in the city one of these days. I've been thinking about seeing if any PHP dudes would want to have informal meet-ups at a bar or something. Nothing too stuffy. Just general chit-chat.
I wrote a DB PDO class (not an ORM) that is being used on a number of ecommerce sites, along with the framework it is bundled with. The class is standalone though, so no need to switch to a framework. It handles most of the grunt work for you, including master/salve setups. For inserts you just pass it an array. [db.pdo.php](https://github.com/shutterstock/basecoat/blob/master/basecoat/classes/db.pdo.php)
Threw it in my favorites. Will check it out, thanks!
I think Jeffrey has seen that even through NetTuts he has become very popular and is now able to go out on his own and bring in cash. I really don't see these coming to NetTuts
Yes, but if you knew Laravel, you might be able to do the same work in 2 hours versus 2 days.
I got sick of the same thing with drupals built-in db_* functions, so I [built an Active Record way of using Drupal data](https://github.com/matthewbaggett/drupal_active_record). Maybe you could do the same for Cake.
If the curve wasn't steep, then the framework wouldn't be providing you with much useful functionality.
The reason there are frameworks is because 3/4 of those languages are general programming languages, which can't immediately just start serving web pages by default. You both need and want a framework or library of code to specialise those languages for programming efficiently in a web-based domain.
10 words: cheat sheets
PHP Frameworks are particularly bad. I can always finish the app in a cleaner and faster way just writing normal code. Perhaps bring in a few library classes that I know work. Much faster and cleaner. Full control of the system. No hacking around or looking up documentation to figure something out. The knowledge is in my head. I know enough about programming and the application to design my own architecture for it, not have that dictated to me by the framework. JavaScript however, I won't give up my jQuery. That's more of a library though. Can use it if I want rather than having that put limits on my design and code. Frameworks have a single use. You're a web agency. You crank out *basic* websites for multiple customers. You want a consistent code base among all your customers. The evil ones can charge them for framework upgrades too where they need to rewrite half the code because the framework author decided to rewrite everything in the next version. If I'm designing a long-term application for a startup or something it'll be written and designed from start to finish with the application design, requirements and performance needs taking priority over the whims of framework authors.
No, not really. It might seem too steep to some people if they're not familiar with the concepts involved in these frameworks. You keep going back to spaghetti code because your skills have a weak foundation. Until you fix the foundation, you're going to have a hard time learning anything more advanced. If you can't stick with a new concept for longer than 2 days it might be time to find a new hobby.
&gt;This is a lot of files for what I'm going to write This is a common novice error, thinking less code always equates to better code. &gt;I say "framework" because it could at best be described as a database abstraction layer. Then you didn't actually write an MVC framework. Misconceptions like this are exactly why you need to stop trying to do it yourself, and start looking at what experienced professional programmers have done.
You just hit upon why the php community is so very broken. It continues to cater to those who want the easy way out every single time. Given the choice between learning something new and hammering out another pile of shit, many choose the latter. It's especially eye opening when you spend some time in a non-php programming community and watch what people talk about, and the sort of work they do. It's like night and day.
Well, you got a point. But this project is **old**. So we have our own wrappers and stuff. I started migration to PDO, but it will take plenty of time to clean up all the old stuff :-)
I'll open up a few files at random and find some problems: https://github.com/stefanesser/suhosin/blob/master/memory_limit.c ^ sets ini on_modify handler, does not store, call or restore the old one... https://github.com/stefanesser/suhosin/blob/master/session.c ^ does something horrible; reads variables from global symtable when you request a session var ... I don't even know why this exists ... https://github.com/stefanesser/suhosin/blob/master/suhosin.c ^ creates a leak, just to edit the author string !!! The year is circa 1687, Windsor, England ... The recently deceased Sir Thomas Fitz's designs were being used to build the Guildhall, the project was overseen by Sir Christopher Wren; The town council insisted that the ceiling was too large to be supported by it's current design, despite the best engineers of the day assuring them support was sufficient. Wren was forced to change the designs to include more supporting pillars, not a stupid man, he had the pillars manufactured too short to touch the ceiling http://2.bp.blogspot.com/_eUArx6wdJJw/S8yes6bUaaI/AAAAAAAAAYM/bpp3ZBPn7MM/s1600/wrens_columns.jpg You do not require Suhosin like the Guildhall doesn't require those pillars, it provides absolutely nothing.
For sure, and I think it's a great opportunity for Jeffrey. But imagine if all the best writers went and done their own thing, it dilutes the quality of a nettuts subscription. I for one, am considering cancelling the nettuts and moving to Laracasts, especially since I was keen on more Laravel content anyway.
I recently built an app with Angular using it the same way you were and IMO this is indeed the closest we are to traditional MVC. Especially since Angular has two way binding, something you cannot achieve from the server side.
OK, thanks for all the replies on this post some good advice, although largely it can be summed up as Man up, grow some balls and get stuck in. So with that in mind, lets take something very simple and rework it in MVC (lets not go down the route of what is or isn't MVC, I think we've covered that, for arguments sake, lets just say MVC as Laravel &amp; friends implement it). How would you do something as simple as a contact form in a framework, lets say its a simple form, it needs validating, and the results need storing in a DB and an email sent to whoever. Is this right, View -&gt; The actual form Controller -&gt; Data from the form is passed through the controller, does validation happen here? if validation fails, what happens, the controller isn't supposed to talk back to the View is it, so should it pass a failed message to the model for it to pass to the view? If validation doesn't happen here, what does the controller do in this case? Model -&gt; Data is written to the database, should the model also be sending the email (I guess so), Model passes 'Sent' message back to a view. So is that the basics?
You can shorten up the whole migration and model generation with [Larry Four Generator](https://github.com/XCMer/larry-four-generator). Really useful and has saved tons of my time.
Thanks for the link - will definitely check it out!
You don't usually copy the files, rather you use the same for everyone and make it *look* different to each user via URL rewriting.
Very good idea. Thanks for this post! 
A model should definitely not be sending email. A model is for data interaction (get, save, store, update, delete). Validation can definitely happen in the controller, but sometimes validation rules are placed in a model as it's _kinda_ data related - this is usually just an ORM thing though. I think you're probably trying to cram too much into purely MVC. Remember you're always going to have to make some other classes for your logic, call them libraries/helpers/whatever. MVC is not the end-all and be-all of your codebase.
You're in NYC? Yeah, I'd love to set up a totally informal PHP drinkup where we could talk about shit like this. They could be used as a basis for PHP Town Hall episodes, or we could just record the occasional episode there. 
First off thanks for taking the time to answer, but I think i'm more confused now. So if the model isn't sending the email what does, the controller? if nothing in the MVC pattern is then how do I branch out of MVC and get the email sent? Also this is about as simple a task as I could think off, probably less than 20 lines of PHP, and I'm cramming too much into pure MVC! I get that I need to write other classes but how do they fit in, I think this is the bit I can't seem to get my head round, If I can clear this up then I really think I might get somewhere. Thanks again, I'm really trying to understand, but maybe I just don't get it.
No, the learning curve of PHP is too shallow.
This really isn't laziness exactly IMO. Its just efficiency and short term thinking. Why spend an immense amount of time learning something like a framework when a client is going to just want Wordpress or Drupal and they expect it for absurdly little money? Especially when every other thing they say is going to be "But but but, Wordpress has this!" If you're bidding on sites those people are probably entertaining lowballs from someone who is going to create a hack of a site in a CMS anyway. At that point as you note, you can just hammer out a site in a couple of days or you can spend much longer dealing with the framework. The client isn't going to pay for the framework or understand why implementing something in that framework might be a good idea. If it takes you twice as much time to do the same job, thats a cost that you bear. Many low end clients tend to be particularly averse to paying for quality. Cheap and dirty rules. Then you run into a trap, you've just convinced yourself that about the only thing you're capable of is brochure sites made with a CMS or very simple sites without a framework. A few years later you see that all you've done is made a bunch of sites where you didn't learn anything and larger sites require a level of skill you don't have because the gap between a brochure site and a large / complex site is fairly large. At that point, the choice is obvious. Subsist on brochure sites that have little to no requirements in terms of complexity / security, or spend the time learning how to build larger sites with a framework. Local development, git, unit testing, and a framework appropriate to the task at hand. Its a gamble with your time that the time spent learning this is going to pay off. Its worth pointing out that if you turn into a click monkey with a CMS, you're also spending time that adds up in the long run and that time isn't useful outside of that specific CMS. Personally I tried to be a jack of all trades too much and ended up just burning out. I spent a lot of time learning a lot about the sysadmin side of things in addition to trying to wrestle with Drupal in a bad time (6 -&gt; 7 with 8 upcoming). While I have enough of an understanding of frameworks to use one, I realized all of the above client issues and that the graphic designer (my boss) would need to learn it (to an extent) and just said fuck it I'm out. My issue being that so many people expect amazon + netflix + imdb for &lt; $3k. Finding good work can be difficult and I just found the time investment to be too much given the uncertainty of actually applying that information. If our small webdev shop (essentially 2 people near the end) was turning away lots of work it might have been different, but almost every site we built would have taken us 3x to 5x longer in a framework. Some might instantly kneejerk and say "What? Then you just are not good enough!" I'm sure thats part of it, but the other part is that you need a good development process. My boss was big on flying by the seat of his pants and didn't like doing mockups or getting tech specs. Needless to say guessing because communicating with the client is hard requires a lot of extra work. If its the type of work a CMS is good at thats not a major issue, but if you're doing it all from scratch it could be a lot of wasted time. **TLDR: People get addicted to cheap and easy point and click sites which is self limiting but low hanging fruit. Low hanging fruit that a lot of bottom feeders are competing for.**
How would in be a barrier to productivity? By not letting up upgrading PHP and getting new features? I don't see any other way it would be blocking.
frameworks help bigger projects, where there is usually &gt;1 person doing development with code maintainability and structure. As a lone wolf dev I saw no point in them either. Now I would use a framework for any project, unless it was inanely simple. The learning curve sucks. But learning the patterns behind a modern framework will make you a better programmer and open your eyes to a new way of developing. I feel for you and your position as it was exactly the position I was in, if you swap the IOS games for various other side projects that earned me money. It took a lot of effort to learn, but knowing now what I now know, I would whole heartedly recommend a leading framework - zend, symfony 2, or similar - if you are going to be looking for work in the next few years. Or just stick to working with pain in the ass wordpress clients, buy a Dremel power tool and lobotomise yourself :)
Performance of a framework is never optimal. That's not the benefit. It's development time that's reduced. Maintaining it, making it, working on it. Performance is always going to be **marginally** reduced over bespoke code. Whether that's a factor is subjective, but my view is that it's pretty much never a factor. And the hundreds of files argument is just meaningless. Who cares how many files there are? What do you have a quota or something? Let the framework do its thing. An install of Laravel is less than 50 meg. Assuming you have only a 10 gig hosting account, a trivially small amount, your framework accounts for 0.5% of that amount. TL;DR - bullshit.
Any reason you chose not to use a [RESTful resource controller](http://laravel.com/docs/controllers#resource-controllers)? It would take some of the hassle out of defining all your different routes.
I did something similar. Wrote a sort of active record implementation cross framework cross... thing. A bunch of utilities to help me with boilerplate type stuff. Ultimately I think it hurt me more than it helped. Because I had a working solution that eased so much of the pain, I tended to just use that instead of a proper framework or ORM. Forcing myself to cut that cord was difficult, but necessary.
You do not dull a butcher's knife because he might cut himself. You provide proper training to him instead.
If only the hiring managers knew that. I've been doing web development as a hobby for ~10 years now. I've been trying to get my foot in the door to turn my hobby into a profession, but I keep getting turned down because my degree isn't in computer science.
You didn't read what I said. The very next sentence in my post this this: &gt;Some might instantly kneejerk and say "What? Then you just are not good enough!" I'm sure thats part of it Then I go on to explain the actual issue: &gt; My boss was big on flying by the seat of his pants and didn't like doing mockups or getting tech specs. I'd end up rewriting the same thing 5 times, and then throwing it away when we go in entirely a different direction. All because we didn't do tech specs. We just did flat rate billing as well, so we didn't have change requests we just ate the cost. I'd say that at least half of the work I did on various websites was not used. In Drupal, this was typically just a few clicks in the interface and off you go in a different direction (which is why the boss got addicted to it). Need an entirely different content type and structure? Bam! 2 minutes later a non-programmer has that up and running. I toyed with Synfony 2 for a while and while it had a lot of great aspects, my boss was the type that would add 6 broken jQuery plugins to do the same thing and then just not remove them. Local development? Unit tests? Actually planning how a site was going to work? Nope, we were not going to do that. Throw a person like that into a Framework, and its just going to be a disaster. I personally suck at the graphic design aspect of things so it wasn't something I could do myself. Instead of using twig properly I can already tell you that he'd copy pasta and have a new twig file for each page or type of page, he wouldn't understand routing so we'd need a full clickable admin interface to create routes, and troubleshooting problems would be beyond him. Template inheritance would have been a dark art that he didn't have time for. As it was, I told him hundreds of times over two years that you don't need to clear the static page cache to fix an issue that isn't fixed when you're logged in and not pulling from the static page cache. He was a non-technical person, and I just couldn't see how he fit into using a framework. He was the type that would create a massive css file where half of it wasn't even being used because it was overridden so many times that it wasn't even funny. Impossible to manipulate or maintain other than "Hey, here is a 20,000 line css file, lets just keep adding to the bottom!" TBH, I had to tell the guy to *stop hardcoding links to assets* because I had to fix them all when we moved a site off of our dev URL, and I never got that through to him. Things were pretty bad when I started working for him, and I cleaned up a lot of stuff. That didn't really help him make more money though sadly, because people just don't seem to give a shit about doing things right or well. It just took us more time.
I wrote one of those geeky BDD tools for myself, partly as an exercise and I still use it when I'm doing katas. http://github.com/davedevelopment/dspec. One thing I like is having the nested contexts, which looks can it can be achieved with this library. As for people not switching from PHPUnit, I think PHPSpec is actually gaining a bit of traction and I expect that to continue.
You're mistaken about Suhosin. Suhosin does not fix "bugs" in PHP, it changes behavior to make it more "secure". To catch bugs in code, you write unit tests.
Suhosin tries to provide additional protection in case your application *is already insecure*. E.g. if you write `require 'files/'.$_GET['file'];` in your code the suhosin patch might prevent this *glaring security vulnerability* from actually being exploited. Of course, it is usually a much better solution to not write terribly insecure code in the first place :)
He is very much so being a hard liner, and this isn't the right audience for it (which is why I responded to him up above in such a manner). I did stumble upon his StackOverflow response that is quite complete and illustrates what he's been trying to say in these responses but has seemed incapable of doing here on Reddit. http://stackoverflow.com/questions/5863870/how-should-a-model-be-structured-in-mvc/5864000#5864000 Note the piece about "Templates are not views." His argument is that there needs to be another layer between the template and the actual rendering. So the controller calls the View (or does a Model?). The view is setup to do a particular task (as in his example "ListView"). I think one way to achieve this (in Laravel) is using [View composers](http://laravel.com/docs/responses#view-composers). In particular, the Composer classes which offer the greatest flexibility and re-usability.
To better yourself and further your knowledge maybe?
Yeah.. and I've noticed through Twitter a lot of other PHP devs in and around the area. I just created my Twitter account last week, and have 3 followers, but I'm sure if you put out a call for a meetup it'll be seen. I've been to a reddit meetup which was a lot of fun. Just beers, and talking about tech and programming and stuff like that. The group of us ended up creating a hacker space here on Staten Island, which was a lot of fun (while it lasted). http://make.si/ But it was all very informal and chill.
In the past it's been some overflows, special GET-Parameters and stuff they fixed, which occurred before it got to your code. PHP isn't really known for being secure at a language level. I agree it's easy to write stupid insecure code in PHP, which probably is part of PHP's bad reputation.
Have you looked at CodeIgniter? Maybe it's just because I'm coming from a mostly ZF/ZF2 background, but I found CI pretty clear/simple. I was able to grok it enough to build a complete web app (having never seen CI before) in about 10 hours.
*slams head on desk* Real world workloads != running a benchmarking script. HHPHP is designed to support 'frameworks', if you want to bench mark it don't use benchmarking scripts. Setup a server with one of frameworks it supports and run proper load test on HHPHP .vs native. 
Ha, I like the Smash Bros plan. If you want to make a meetup thing I'll pimp it the best I can, would be cool to have a little meetup situation thats not a big super serious 1000 people user group that meets maybe once a month if lucky.
Complete tangent, but everytime I visit a site and *WHILE SCROLLING THROUGH CONTENT* it pops up a modal trying to get me to subscribe or view other content or sign up **I close the tab**. If you want your content to be read, don't do that.
If you *have* to pop a modal asking me to subscribe if I liked the article, at least do it **after I've read the goddamn article**. Geez.
You're probably going to be better off going with a pre-made solution like WordPress.
This guy is an idiot, and that has nothing to do with frameworks. And if you're still working there you are committing career suicide. 
i just don't know php well enough to design a theme for them on wordpress
thanks :)
Not to discourage you, but writing a blogging platform from scratch will be a good bit more intensive than making a theme for wordpress.
Then you don't know PHP well enough to accomplish your original goal. I know that sounds harsh, but it's true. EDIT: Any solution is going to require you to have a database and some server side code to make use of that data, as /u/jellatin already stated.
Any attempt on your own to make a blog from scratch will likely be highly insecure and unmaintainable. It might be best to just let your client know this is out of your scope.
Yeah, but I don't remember why now. Will think about it and get back to you once I've had some sleep.
why are you confusing persistence frameworks and patterns?
I highly suggest installing wordpress and a free template for it.
reddit doesn't detect sarcasm very well.
Nah, you could easily write static HTML files with comment separators for which part is the content. Use &lt;!--includes for keeping the menu/etc workable. Now that's not necessarily the right way to do it, but you don't HAVE to have a database. :)
Sometimes you need to stop chopping wood and sharpen the axe.
Exactly my thoughts as well, how I'm supposed to react to a modal saying "if you dig this article..." if you won't even let me read it first?
On that note, has anyone actually done this yet?
what would i do for them then? Just send them to wordpress? Thats what I will do if I can't find a way to do it.
Seems slightly biased. ;-) (But I use Symfony2 and Silex quite often, and I like them both a lot.)
Yeah, but it also goes a long way to answering the question of why someone would spend time learning a framework instead of just writing include-hell PHP. The refactors shown could easily be done in most frameworks, just switching out the modules and syntax.
Thanks for the response. No specific need. I just really like dealing with objects. Say you wanted to echo a person's gender. It's stored "M" and "F" in the database but you want to print "Male" or "Female" to the screen. What's your approach? Would you alter the format during the database retrieval? Use a helper? Include an "if" statement in the view? Because every other framework I've worked in, you could just add a new accessor method called "getDisplayGender()", and your business logic in there to output what you need. The view stays clean.
Man, where are you applying? I've never heard of this. Start applying at smaller development shops and if you have an even remotely good or interesting portfolio of work and/or open source projects, you'll get hired in half a heartbeat. I know this because I run a web development shop, and I've worked with people who haven't even graduated high school, and have personally hired people who have not gone to college at all. Skills are the only thing that matters. Either you can code, or you can't. The rest is just gravy.
I would rebuild the site in WordPress. You say your client is running a blog. What platform is it on already? How are they making blog posts now? If you have to, tell the client that you don't know how to do it and walk away from the project.
Just learning Symfony has made me a far better programmer.
I've really only been applying to places within my network. A friend mentions there's a job opening at his office, so I send in my resume. There's some hemming &amp; hawing for a couple weeks, but they ultimately turn me down because my degree's in English and not an IT-related field. I probably just don't have enough commercial content out there to show off. As I said, it's mostly just been a passionate hobby thing, so the majority of my work is stuff I've made for friends or myself.
Point taken - switched it to throw the modal after you've scrolled all the way down. Thanks for the input.
I would be hard pressed to find a better intro to what MVC is and why you might want to use it. It's written for Symfony 2 but applies to basically all frameworks.
I'd figure "consultants" would already know that, but yay?
Didn't you know? Facebook's code comprises mostly of thousands of iterations of the same thing until the page is rendered.
Probably the most sensible answer is the long term security of the applications you are building. Frameworks have many developers working on them so its more likely that they will take care of security concerns that might elude you. In choosing a framework the most important quality for the long term is the community. Some frameworks and developers are enthusiastic about their work and what they are building, so overall the experience will be positive. Even if it takes longer to learn, in the long term you will be able to solve your development issues faster. Be very wary of developers who constantly flame each other or other frameworks. This is easy to spot; they won't talk much about what they are building, they post about how much they hate framework X or Y. Or that you are not following some architectural principal. Your clients do not care about patterns they want results. (Thats why wordpress powers so much of the internet) And when you are stuck with an issue and really need some help, you don't need someone flaming you because you haven't expressed a design pattern to their satisfaction. Read books and watch presentations that are for other languages. Check out Object Oriented etc books using java and other languages. Its not something you can read in 2 hours and understand, but the knowledge builds. Its like right now you are a brick layer - and at first it might seem impractical to study architecture. But if you study enough architecture - you will better understand how to build a wall that will not fall down. Again our clients are not paying us to argue with each other over the best way to build the wall - there might be times when raw php or wordpress IS the best solution because its the most practical way to solve the problem. The more you learn, the quicker you will be able to determine what is appropriate for the project.
It's not mvc. Not really. (I wish people would stop saying that about these web frameworks - it's about as meaningful a term as the label organic in the supermarket). And when was this written? 1979? Rewrite it using pdo and modern techniques and I might read more than halfway down the page. And I'm not dissing symfony - I'm sure it's a fine hunk of code for some particular use case. I don't really know.
&gt; $post = $this-&gt;get('doctrine')-&gt;getManager()-&gt;getRepository('AcmeBlogBundle:Post')-&gt;find($id) This kind of stuff really puts me off of these frameworks. There's just so much overhead to do something simple. It's all a bunch of snazzy design patterns, abstractions and tribal knowledge so you have to spend so much time for every new framework you learn. Frameworks are great - I even use SF2/Silex in a few projects, but all these overcomplications is why so many people prefer to just get shit done™ with plain PHP.
&gt; Rewrite it using pdo and modern techniques and I might read more than halfway down the page. About two-thirds down the page, [they replace the mysql_* functions with Doctrine](http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html#the-sample-application-in-symfony2)... 
Or you don't.
Yeah, that' s a pretty common use-case. Personally, I'd use the helper approach. I try to break up my projects into several plugins, and each plugin typically has a self-named helper that I use for formatting output for its relevant models. Then I just continue to dump/add methods as I need them. It doesn't always feel *elegant*, but it does allow you to "cross the abyss" and return actual formatted HTML if you desire, and sometimes that's nice to have. 
&gt; get shit done™ the wrong way with plain PHP Fixed that for you.
&gt;If you've never used a PHP framework, aren't familiar with the MVC philosophy, or just wonder what all the hype is around Symfony2, this chapter is for you. 
I can see how lines like that can be off-putting, however, there shouldn't be much of that in practice. If the repository is properly injected where it's needed, you'd see something closer to $this-&gt;postRepo-&gt;find($id).
What's the difference when it works? Anything you can write in Symphony I can write in straight php just as well
The difference is that here you see the query, instead of it being wrapped in yet another abstraction, Doctrine.
That does sound nice - haven't worked with Laravel before, but will check it out. Really like the idea of the object being versatile (both getting and setting data easily)
People discussing the differences between Doctrine, straight queries, PDO and other DB abstraction, should look into RedBeanPHP. It basically gives you the flexibility to use the DB as objects or regular PDO in one library. You don't have to tell RedBean how your DB is structured, but you do have to structure it in a specific format to utilize all of the linking notation. However, the structure is actually a good model to use for DB design in general.
It's a little tricky as at the moment as HHVM still doesn't reliably run the popular frameworks (apart from the Facebook one), but they're actively working on it: http://www.hhvm.com/blog/875/wow-hhvm-is-fast-too-bad-it-doesnt-run-my-code
The difference is in being able to maintain the code and in having someone else maintain it. I've seen too many hacked together Php applications to ever want to dive into another devs flat Php application. If you can write an application just as well in straight Php as an application built around a framework you are going to spend a TON more time doing it than the person using the framework. If you think you have an argument against that and if you think I'm wrong it only shows your inexperience and you may want to step back and start learning these things instead of just shunning them.
Understandable. It does do quite a lot of "magic" stuff where it isn't as obvious what's really going on behind the scenes. It makes things easy, but if you like code to be more verbose / explicit, Symfony2 is good for that.
Yeah, but nobody should be using the mysql_* functions at all. And I'm no fan of Doctrine but that's a different argument.
This was posted almost a month ago, the article and the original post on here. Just saying.
you are not going to get straight answers to questions like this. i could post an intelligent response as to why its fine to put your email sending methods in a "model" and it will get flamed. So figure out a framework you want to study, build some simple apps, look at other people's code, and keep in mind that in 5 years all these frameworks and maybe php will have been replaced by something else. but being able to talk to clients, solve problems, and build things that work will always be in demand. 
Same for me with Laravel. I think acknowledging the benefits of a framework *at all* makes you a better programmer, to be honest.
Nobody *should* be using it, plenty of code bases DO use it.
Eloquent is the only ORM to win me over, Doctrine and Kohanas simply don't compare in ease to use. Also you don't have to program the schema into doctrine, nor does a schema change break Eloquent.
To quote myself from above. &gt; There are three requirements. One stated and two unstated. What you make has to work. PHP does that well. &gt; But it also has to be secure. And it has to be maintainable. Frameworks help with the last two. 
Its not really that "magic". Once you get into larger code bases you really stop caring how your models work and in most large code bases your queries will already be abstracted into a model of some sort (even if you don't use a traditional MVC framework).
I prefer Laravel personally.
Google is your friend. https://www.google.com/search?q=%22This+code+use+for+global+bot+statistic%22&amp;oq=%22This+code+use+for+global+bot+statistic http://www.peterrosenmai.com/a-hacking-visible-only-to-google
Am i writing against someone who has used the framework for years or someone just learning?
&gt; it has to be maintainable That is a want more than it is a need. Not saying it's not important, but out of the 3, if you had to drop one thing, it would be that first.
This article is entirely how to upgrade things **to** modern standards. You've missed the point completely.
Wikipedia block IP addresses that request more than 1 URL per second, so scraping it is not an efficient way to get data. Quote from the database page linked by someone else: IP address nnn.nnn.nnn.nnn was retrieving up to 50 pages per second from wikipedia.org addresses. Robots.txt has a rate limit of one per second set using the Crawl-delay setting. Please respect that setting. If you must exceed it a little, do so only during the least busy times shown in our site load graphs at http://stats.wikimedia.org/EN/ChartsWikipediaZZ.htm. It's worth noting that to crawl the whole site at one hit per second will take several weeks. The originating IP is now blocked or will be shortly. Please contact us if you want it unblocked. Please don't try to circumvent it - we'll just block your whole IP range.
It's just not immediately obvious what $post = Post::find($id) does (in terms of code execution, not the result..). In a good code base, you will never see $this-&gt;get('doctrine')-&gt;getManager()-&gt;getRepository('AcmeBlogBundle:Post')-&gt;find($id). In most cases, the repository is a dependency, where it just becomes $repo-&gt;find($id). Finally, having a facade that has a static container hides your dependencies. I feel like this method of fetching your dependencies is equivalent to injecting the DI container in your class.
Either one. Have you ever built enterprise level applications? You aren't going to do that AT ALL in flat php (I wouldn't recommend doing it in ANY type of php). 
I don't know the difference to be honest. I like Yii... but... need to know what an actual framework is.
Can you expand on what you mean by a true MVC framework? Because there are some folks who would say the only true Scotsman is an MVC app written in SmallTalk.
Personally I'm kind of over this whole "OMG NOT ACTUAL MVC" nonsense. AFAIK the technical details of MVC can only be implemented in a desktop application, and doesn't apply to the web. Therefore it doesn't apply at all to PHP. But we know what it's actually about. The separation of concerns, using three different layers related to data logic or data, presentation and request handling. So can we please just cut the bullshit? Yes. You're right. Yes, it's not *true* MVC unless it jumps through very specific hoops. That's great. You're right. Cool. Can we get on with making things now?
None because MVC is a horribly bad pattern if you follow it strictly. Who the hell thought it would be a good idea to throw *all* your logic into "Model" classes. What the hell are models?!
No, I mean it. Seriously. It's interesting to understand how things work at a base level. But I honestly don't know at all how most of the shit around me works. I turn them on and they go. I don't know how an LCD panel works, but I'm happy to watch TV. I don't know how PHP compiles to C, or how it's written. I don't know how a database connection is actually made. I don't think I really **need** to know that. The point of abstractions is that you don't need to know what's happening below that level. Look at something like jQuery, I don't know how $() works. I don't know all the details about how it implements $.each. But I don't really need to know. I trust the framework. I trust the magic.
whatever . ORMs have nothing to do with MVC. Doctrine ORM is not part of the Symfony framework , nor is Propel. Symfony doesnt force you to use an ORM by the way( you can use raw PDO in a service layer ). MVC is overrated. Actually what matters is to write n-tier applications , where the UI(fat/thin client over HTTP) , the Business layer and the Data layer are well separated. You chose a web framework because it simplifies HTTP,Sessions and Form management , it has nothing to do with how you persist DATAs. 
&gt; I don't really know That part is true
Are you not using setUp()?
Another vote for Yii here, too, assuming it counts by these vague standards.
When the fuck did this "not actually mvc" shit start? Getting tired of seeing this shit on here and I've only just started to notice it the past few days.
I agree that it was career suicide, thats pretty much what I wanted to highlight. Quick and dirty only gets you so far and I know that from experience. Rather than quadruple down on time spent, I just decided to do something else for a while as tech is pretty volatile on the low end where I'm at.
Nope. I tried and couldn't get it to work for whatever reason, then took this approach. I think I'm kind of unclear as to what should go into setup and what should go into the test function. 
With Laravel I've found that I needed to call parent::setUp() first.
How much overhead is it *really* though? Chances are probably pretty good that the overhead you are pointing out is trivial compared to the rest of what is going on.
&gt; Seems like we should start calling it "Web MVC", so people stop raging about it. And at the same time we display respect for the sanctity of The MVC.
Same here, but it seems to be happening all over the place. I'm pretty over it.
Hmm. I will give that a try. Thanks!
My early days were exactly like overloader1's but this really hits you when you have spent years maintaining code which can only be altered by the original programmer. I think that starting a new project using a new framework is the wrong method. From experience if you have trouble you will learn to hate that framework because it's slowly you down and your clients are expecting the project to be completed. What I usually do is to port over libraries of code that I have organized from past projects. I have recently completed a port of a zf1 to zf2 CMS that I built. I also ported that code to Laravel. I plan on a symfony2 port as well. I use these ports to gauge how easy the transition would be for myself and the rest of the team. Finally learn your tools! Using a debugger with an IDE like Zend Studio, PHPStorm or NetBeans would help answer a lot of the questions you come across. 
I don't think so. JS Frameworks have been around for ages. 
Your LCD panel generally doesn't break, and when it does you just replace it. If you're a developer, when something breaks, or perhaps just starts to break down at high volume usage, for example, you need to understand what's going on and why it's breaking to be able to fix it. 
Perhaps read Jeffrey Way's book on testing in Laravel and/or watch some of the testing videos on Laracasts?
One of the biggest things you aren't considering is that basically anything you write from scratch is going to be infinitely worse. Your site will have tons of security vulnerabilities you didn't even consider. Don't reinvent the wheel. Push through it and actually learn it.
What's crazy is that I actually have that book and recommended it to somebody else on reddit earlier today. The setUp() examples there don't seem as involved as what I'm doing but maybe that's because I'm doing it wrong. Now that I'm remembering I need to call parent::setUp() I think I should be able to put things into better shape. Laracasts looks pretty promising!
Also, if you *have* to pop a modal asking me to subscribe, you **probably don't**. Really. 
yeah just wanted to know if there was code i could use
You should consider following the PSR conve**n**tions. [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) [PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md) [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) Edit: typo
You will miss Doctrine, Dependency Injection, and explicit over implicit when you start doing some serious development that requires unit testing. How do you create a stub for "Post::find()"? It's not testable, game over. Laravel is targeted at a different audience, and its developer was just starting to learn design patterns when he first created it.
It's still not mvc.
I just wanted to hear about what frameworks people liked that were designed around MVC. I use Symfony and Laravel mostly and like it, I was just asking a question.
Ha maybe because logic goes in controllers. Data access is done in the models....
huh?
&gt; 20+ of the most popular php frameworks **sometimes, kinda, mabye, not really** running on HipHop Virtual Machine (hhvm.com) FTFY
See, that's incorrect. Data access goes in DAOs. Data Access Objects. Logic and data manipulation belonging to your app goes in Domains, Managers, etc. Data holding goes in Entities. A model is a catch-all that really boils down to a developer throwing unrelated crap together and calling it a day. Logic does *not* go in controllers. You know what goes in controllers? As little as possible. Handle the current request by calling the correct code that handles logic, and then return a response. That's it.
you're intentionally making it more difficult than it needs to be $post = $mysqli-&gt;query("select * from posts where id=" . (int)$id)-&gt;fetch_object();
It has dependency injection in the same Symfony does, and that is unit testable thanks to it's IoC container system that makes unit testing easy. I would say the overall design patterns are very similar in a general sense, but the implementation and philosophy is a little different. Laravel makes everything super simple to do with minimal effort, but because it's doing more of the work for you behind the scenes, there's less room for customization less room for doing things differently than how it wants you to do them. You're more locked into a particular way of doing things with Laravel. So there are trade-offs.
[Think so?](http://www.reddit.com/r/PHP/comments/1nno0q/frameworks_is_the_learning_curve_too_steep/cckeoyi)
I certainly think, you should give it a try :)
Nice article.
&gt; This is the perfect scenario for an abstract class. I am sorry, but I don't think that situation mentioned in the article does exactly call for an abstract class. One could have simply extended the Message class and added an interface. Abstract classes makes sense where the abstract class implements a function that is shared by child classes and when that function uses one or more abstract methods whose behavior can vary among child classes. For eg: A getTotalPrice() method in an abstract class Product may use getDiscountedUnitPrice() abstract method to calculate total price as $this-&gt;getDiscountedUnitPrice() * $this-&gt;count . Child classes are free to have different implementations of getDiscountedUnitPrice(). So, the point is, if a child class correctly implements all the abstract functions, then it will automatically have correct implementations of higher level functions defined in the abstract parent class. Also note that these abstract methods need not be public. 
&gt; It's just not immediately obvious what $post = Post::find($id) does Really? Truly? You can't fucking see "select * from post where id-=$id"? I don't fucking buy it. 
you are definitely right. Fixed the post, let me know what you think.
&gt; doesn't really understand MVC. Yeah I get it, you don't understand a lot of things :)
If you want to pitch me on the advantage of your framework, you'll write your "not frameworky" example to the most modern standards. Otherwise, its more than obvious you're setting up a straw man to make your point and I don't code straw men. So I don't see any benefits at all to your little hobby horse. Poor salesmanship really.
Internet troll is obvious troll. Lamer.
Agreed, you are obvious :)
lol... I mean't actually getting the dbal / orm dependency, then getting the specific repository / model and then executing find().
It's a tie between Codeigniter and Play!
I guess that's why Angular JS is MVW (Model View Whatever)
or you could add it to your model and let your database update automatically, or even have your model updated from the DB I believe.
"My client" [...] "pretty sure" Red alert. But regardless. Look into a static site generator like [Jekyll](http://jekyllrb.com/).
Well, yeah. But as a developer I can pretty much bet that if it breaks it's not the **framework** that broke, but something I did. Knowing how to use the framework and knowing how the framework works are very different things. You may have a point with things like high volume usage or unusual use cases, but I suspect that wouldn't really affect that many people, and in the rare case it did there's probably a stackoverflow answer with your name on it. (for the record, I haven't been downvoting you. It looks like I have, but I haven't)
They missed a letter. It was supposed to say "convections". Circulation of air, liquid, etc. Makes more sense when you realise that.
I am learning flat PHP by building an app that I eventually hope to use commercially. I'm aware that my first fully working version will be a horrible hacked together mess, but I figure the only way to learn is by trying to build something. When I'm finished, I suspect I'll want to completely rewrite the whole thing, probably using some kind of framework, but right now I'm still confused by the idea of frameworks and wouldn't know where to start. What's a good one for a beginner to cut his teeth on? (Beginner as in, this is my first experience of coding and I don't know any other languages.)
By the time you get into learning what code is going on behind the scenes you'll also know that you can inject models and repositories and anything else you want into the controllers - suddenly Post::find($id) becomes $this-&gt;posts-&gt;find($id) and you don't have to complain about magic anymore.
I have the luck of formally learning C++ prior to learning PHP many years ago. I can't say that PHP devs should just get down and learn C++ and how to write all this stuff, but PHP follows pretty closely to how C++'s OOP functions.
That was a really good introduction.
Take a look at Laravel. $post = Post::find($id); It uses many parts from Symfony like a lot of frameworks do but the code you end up writing is so much cleaner. Last week I made an order listing for the back-end of the webshop I'm working on. $orders = Order::with('orderlines.product')-&gt;with('user')-&gt;paginate(25); The only logic in the template for that are 2 nested foreaches. Laravel let's you write clean code, offers a lot of stuff you need on most projects out of the box and has a large, active community for support.
I'd say it's closer to C# or Java than C++, the syntax is very very similar. 
I actually sort of agree. Too many people see the end of programming to be programming and not facilitating a business process. If you delivering a hack version of some code today allows another department to hit their goals on time when they otherwise would have been up shit creek then it can sometimes be worth it. The caveat is whoever has oversight on the process MUST know there is technical debt there that must be paid off sooner or later and there's every chance it'll be paid off the next time a critical feature is required. If they take a view on that and come to the conclusion it's worth it then fair enough. The other caveat is I think making things work and be secure in hack versions of code is considerably more difficult. You have to be a lot smarter to hack something to together and have it work properly than to design something and have it work properly because when you're hacking code you need to keep all the variables in your head at once - something like "if the user does X then Y then Z database is in an inconsistent state and must be updated" as opposed to "X is not possible in the Y context so we don't have to worry about Z database". There was a quote somewhere on here about how a bad programmer makes a complicated solution to a simple problem, a good programmer makes a simple solution to a complicated problem and a great programmer makes the problem go away. I feel like the difference between the last two is just design. tldr: I question whether it's always possible to make something work and be secure when hacked together but agree the technical debt can be worth it if it's recognized as such.
You should always use dependency injection so your controllers are easily unit testable. 
jtreminio, I'm afraid you're going to have to clarify what you mean here. It sounds to me like you're suggesting that MVC means that you should have a class (or set of classes, or classes inheriting from a base class) named "Model". If so, that's a misapprehension of what MVC is. M, V, and C are layers, i.e. umbrellas for multiple things, not concretions in of themselves. 
It's possible. I just definitely wouldn't hire somebody who thought everything everyone else ever did was terrible, or who tried to reinvent the wheel because he is smarter than everyone else. That guy sounds just awful to work with.
I'm amazed that I'm the first to bring this up, but the difference is not Eloquent vs Doctrine, it's in the underlying patterns used. Eloquent uses Active Record and Doctrine uses Data Mapper. FYI Doctrine1 also used AR. There's a reason they've moved on to DM.
This is hardly a cutting edge technique. Also... &gt; Reading XML in PHP is very easy. This post will show you the easiest way to *read XML in PHP*. You will learn how to read information which a webservice provides as XML. This seems more like SEO spamming than necessary information.
Personally I am fine with those trade-offs. It's a more "opinionated" system than Symfony, but it's got opinions I respect from people I know are much, much smarter than me.
The entire of Laravel's "App" core is actually an IoC container. It's intended to be dependency injected. The examples you often see are simple examples, and yes, they're not DI purely for that reason. If you want to see testable examples, most commonly implementing repository patterns, there are tons of videos on the web, some from Jeffrey Way, the "unit testing in Laravel" guy, or Taylor Otwell, the guy who actually wrote it. http://vimeo.com/53029232 - This video is from Taylor Otwell, the guy who made the framework. 
http://phpqatools.org/ Although most are available via [composer](http://getcomposer.org/) too I think.
Not your problem. That's the point.
I sort of agree. But: &gt; If you delivering a hack version of some code today allows another department to hit their goals on time when they otherwise would have been up shit creek then it can sometimes be worth it. I've seen this happen, sure. &gt; The caveat is whoever has oversight on the process MUST know there is technical debt there that must be paid off sooner or later and there's every chance it'll be paid off the next time a critical feature is required. But I've **never** seen this happen. There are things that business needs that it demands. But security and maintainability are things that are IMO ever-present and always unspoken. It's our job as programmers, as professionals, to provide these even unasked. A hack solution **may well be a viable option** taken pragmatically. I acknowledge that. But I'm actually not talking about specific solutions. I'm talking about approaches. If your approach on a spike solution is to whip something up in a framework, and then iteratively improve it if it's needed in production, that's fine. If your approach on a spike solution is to pull down your pants and shit out some rubbish bespoke PHP, or copy and paste the same thing you've been doing for 10 years, then you're helping no one **including** and most especially the business.
Strawman: Misrepresenting someones argument to make it easier to attack ^^Created ^^at ^^/r/RequestABot ^^If ^^you ^^dont ^^like ^^me, ^^simply ^^reply ^^leave ^^me ^^alone ^^fallacybot ^^, ^^youll ^^never ^^see ^^me ^^again
I'm the developer of esoTalk and I just came across this thread. I know it's 17 days old, but I felt the urge to reply anyway :P Yep, esoTalk's code is a bit of a mess. It was written by an inexperienced PHP developer who had no idea about the advantages of frameworks or proper application architecture (me two years ago ;) I've been wanting to rewrite it on Laravel for a while, but just haven't had the time yet. One day...
Good discussion, I like your points.
Good points!
&gt; Have you ever built enterprise level applications? You aren't going to do that AT ALL in flat php (I wouldn't recommend doing it in ANY type of php). Absolutely enterprise level applications are routinely written in flat PHP. I've just quit a job working on one. Because it was horrible. But you can and people often do. Unfortunately. 
&gt; Unfortunately. Key word right there.
It's fine to trust the framework until you run up to the limitations of whatever framework you're using. Frameworks are abstractions and [abstractions leak](http://www.joelonsoftware.com/articles/LeakyAbstractions.html). The more you understand how things happen under the hood the less time you'll spend with "impossible" bugs.
In my opinion, the biggest problem with PHP is that it's *possible* to throw together flat scripts that generate web pages. A conventional language like Ruby or Python is going to require a framework or a lot of knowledge to get up and running. You don't see Ruby developers arguing the merits of frameworkless development. They plunk down Sinatra or Rails and get to work.
You should use prepared statements tho'. Casting to int is not enough for data validation / protection against injection, especially if what you are entering non-integer data (strings etc)
Buy one, or use a free one. They're already done for you and you can usually easily change the logo and color of the page.
You're making an implication that by choosing a framework for maintainability you are losing security. In reality it's the exact opposite. Popular web frameworks are not just unit tested and peer reviewed by the team, they are used by hundreds and thousands of developers that by simply building projects in these frameworks test the shit out of them, insanely complex security vulnerabilities are found, and fixed(thanks to the open source nature of the framework). Tell me when that's done on your straight php project on your small team?
Maybe. I'm not arguing the point, I totally agree. I'm just not sure that's the **biggest** problem. There's a long list. I think, honestly, that the community is a bigger problem. Not that the language allows it, but that frameworks haven't yet become the de facto, so that when people post a "hey, look what I did" to /r/php they don't get 127 people saying "Hey, I notice you aren't using a framework", which they probably should get. Maybe when/if a framework becomes the dominant "right" way, like Rails did for Ruby, we can finally see people taking frameworks as seriously as they deserve.
So I miss a letter due to my keyboard and you guys trash an otherwise useful/informative comment? Way to go, you'll get very far that way.
Actually, no. The comment added not a damn thing to the discussion. It simply isn't relevant. That's why you have negatives. If you had a good comment with a typo you'd have minor jokes and a positive score. People are downvoting you because your comment is irrelevant soap-boxing, rather than actual useful information.
You need to save everything on the server, even images, since you can't programmatically set a value of a file-input. Just post the form to the server via AJAX / hidden iframe every 30 seconds. Remember to guard against CSRF. 
...Thank you? ...Cpt obv?
TIL in r/php not missing any letter is more important than delivering valuable content.
I would suggest looking at composer before liking at pear. Pear is a beast and installs system wide while composer keeps to the local program. Plus, it's easier too update libraries with it .
A lot of people seem not to be aware of these conventions, so I posted them. Whatever, you can keep writing crappy code if that's what you are into.
you should consider the following function strrev
By getting an underling to do it. Real answer: You're pretty much there. Sadly it is just legwork. You can't use the filename from the user's system even if you stored it, that's no good, so you *will* need to upload those files, save them on the server like you say, and "replace" the file inputs with little thumbs of the images. Only, not "replace" - keep the file inputs there, but add a little "current image uploaded for this field" thumbnail of the image you previously uploaded. It'll make editing these forms easier if you can see what's there and easily replace it. If all of this stuff is going to end up in a well-structured database once the draft forms are completed, then I'd want to use that structure to store the drafts too, not come up with some additional translation to/from an intermediary JSON format. If the eventual end result is to have serialised JSON stored in the DB though, then I guess it's ok to use that for your drafts too (although it might not be a good idea to store your real data in such a way, but I don't know its use cases or the rest of your system - maybe you're using Postgres and can search inside JSON from your SQL, idk). Rygu's comment about silent background form posting *is* a bloody good idea, but it's also a bit of extra legwork, and not "necessary" for what you're after. It's just a nice-to-have extra thing. Interfaces which do this sort of thing are fucking amazing though. I'm looking at you, Asana &lt;3 &lt;3 &lt;3 &lt;3 &lt;3.
imo there's no point of saving as json when you're going to save it properly to the database later. use ajax onkeydown w/ timer or onblur to save individual text fields. ajax upload individual images right after user selects an image. return a thumbnail when the upload is complete. the special dynamic fields can be saved in an additional table with name value pairs. 
I hire developers as part of my job. Could not care less what your degree is in. Maintain a github (or equivalent) account. This will do more for you than credentials, resume or experience. At least, at any place where you'd actually want to work.
This is certainly better than tying your implementation to one specific data store. Similar to the repository pattern. Like "repository light".
You make it sound like it locks you out of changing core components. You can just override or extend whatever you don't feel comfortable with.
Just a note that spreading your forms out over several pages might be easier on the users and can help you avoid saving by AJAX (only the last page would be lost if they didn't save).
I would create serialized forms (name the fields 1, 2, 3 etc) so you can loop through them and save them to a table with corresponding columns. Since you have fields for uploads also serialize them (maybe use higher numbers than the field names) so you can loop through them. Store the images in a second table with the primary key as the form ID. Don't use the names that the user provides to save the files on the disk - use the uniqid() function to generate unique names for the files (possibly append the form ID to the name too if this is a busy site since collisions can occur). The table with the images should have an ID, form ID, name (provided by the end user), stored name (created by the image handler), and a path of where the file is on the server. You will have extra work ahead of you to prevent CSRF if you are not using a framework that has built in security measures. I recently did something similar for a form that had 80+ drop down values that had to be stored. Worked like a charm. It also made it easier to target the fields with JQuery. 
Fair enough. 
Normally you don't need to guard against CSRF when doing AJAX.
Yes you do. If you can post to a hidden form then a malicious attacker can, too
Absolutely. It gets worse before it gets better, and you will _always_ be disgusted with code you wrote a year ago.
&gt; In a good code base, you will never see $this-&gt;get('doctrine')-&gt;getManager()-&gt;getRepository('AcmeBlogBundle:Post')-&gt;find($id). In most cases, the repository is a dependency, where it just becomes $repo-&gt;find($id). I've been getting into Symfony2, so I'm curious: how do you accomplish this, and why exactly?
I Didn't found realword workloads in the Article. This is another useless microbenchmark.
A bit more than slightly. Not sure why they chose to use the deprecated mysql functions in the Flat PHP example other than to make it look bad.
There is an example at http://stackoverflow.com/questions/12223176/how-to-inject-a-repository-into-a-service-in-symfony2. Generally most people just inject the doctrine manager, and then just store the repository to a local class variable, and not the whole doctrine manager unless they need it.
I don't think you can reason about security on an unmaintainable piece of code. The only security "validation" you'll have there will be via black box testing; which is bad, very bad. When you have to implement strong levels of security that integrates deeply in your business logic, think MAC. Maintainability is first there, because outside or reasoning and code review there is no other way to validate that via changes nothing has broken. I think you all downplay how important maintainability is. Or don't quite see the far reaching implications it has. It simplifies security, performance enhancement, speed of development, bug squashing,etc.
I would upload all images to a staging directory on my server (or maybe something like S3) and simply serialize all non-binary fields to json and save it in the database. Keep it simple! Kolay gelsin :)
Hey, I saw your framework and blogpost earlier. Good job, and nice implementation. But as I said earlier such tool requires lots of features, that available only in full stack framework. There were plenty of *Spec frameworks, and PHPSpec v1 was the first to make a RSpec clone in PHP. But none of them succeeded. PHPSpec v2 is completely different. Even though PHPSpec becomes popular it is about making a proper design of your code, and not the testing itself. Even you use it, you still need PHPUnit tests for integration and regression tests. PHPSpec will never replace PHPUnit, just because they have different purpose.
I work on a "small" engineering team, 3 back end developers, 1 front end developer, and 1 manager. On the team 3 of us Sublime Text, 1 uses vim, and 1 uses NetBeans. I don't believe there is a "workflow" that would mandate the use of a IDE.
At my job we treat editor choice like religion: everyone thinks they're right so let people use what they want and no one gets to enforce their beliefs on others. I love PhpStorm for things like code hinting and integration with code coverage tools. My guess is that as a solo developer, you're not working with a large, unfamiliar, object-oriented, unit-tested codebase. That's the type of project where an IDE gives you quick information about objects' capabilities without having to pour over the source/docs. But I also get that folks have spent hours customizing Vim to be just right, and their dotfiles give them their environment anywhere. More power to them!
By injecting things like the manager into controllers, it makes it easier to unit test (since you can mock out the database). It also helps you follow the [Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter).
 $id = $mysqli-&gt;real_escape_string($id);
~~So it's better to move away from using the service container, and injecting dependencies through the construct/setter methods instead?~~ Edit: So it's better to have services injected directly, rather than injecting the container and getting services from it?
I dealt with something similar a number of years ago. It was for a service that collected customer data from car dealerships... some forms had up to 100 questions (not all were required for completion... each form had its own rules) and many were abandoned and resumed later... sometimes as much as a month later. The whole thing was kiosk based and they would ask customers to fill out the info while waiting for an oil change or tire rotation and eating danish... etc. Sometimes they wouldn't finish till the next time they came back for their next service appointment. (although they did have the option to finish online from home as well... sometimes with a discount reward, free carwash or something as incentive to complete the data) Anyway. When a form was started I would have a hidden variable in the form which (if I remember correctly) was an md5 hash based on the customer ID and the time the form was started... called the FORM_HASH ... All data was stored in a temporary table structured kinda like: FORM_HASH | INPUT_ID | INPUT_VALUE ... and was saved as each question was answered or updated via ajax. This allowed us to add new questions and whatnot when we wanted to without having to change db structure. If and when the customer finally finished the form, the data would be collected from that temp table based on the FORM_HASH and then formatted into the proper structure for whichever client (dealership) the customer was answering questions for. We didn't use photos or anything but the same could be accomplished by using an ajax uploader and storing the system generated unique filename in the INPUT_VALUE field. Files could be collected and moved as needed whenever the form was completed and "processed" or whatever. So that's what I did in what (I think) was a similar situation... dunno if it helps but from your description I think the concept may work for you.
Prepared statements are still better - that's the general consensus. Read more about issues with real_escape_string here: http://stackoverflow.com/a/2353687/2572827
Honestly, it sounds like you have a bigger issue here: untestable code. Make sure you follow the [SOLID principles](http://en.wikipedia.org/wiki/Solid_\(object-oriented_design\)) and try to decouple your objects. Also, keep in mind, you should only mock when you have to. Usually that means anything that accesses outside elements, such as databases, file systems, or the network. Try to let the application use real objects when you can. It's a fine line, but just remember you don't have to mock or fake *everything*. Also, be aware that mocks are not the only type of fake object you can use in a test. You can also use stub classes that you create (actual classes, not objects generated by a mocking framework) as well as other types of fakes. [This article](http://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs) does a pretty good job explaining and describing the different types.
I would say just save the form like it was final and flag it as a draft. When the user wants to come back and edit it, you display the standard edit page (you will have to do it anyways) and offer the option to publish it. No need to do the work twice. You have one view which is add/edit, you can use it to display a draft the same way you would display the edit page of a published form.
I would never hire anyone who hadn't written their own MVC framework at least once. They just wouldn't understand proper architecture, why things are done certain ways, the problems they solve, or more optimal solutions. Those same people probably ORM everything and don't know how to write a properly optimized query.
As a quick alternative, Have a look around for a Jquery plugin which saves the Current form to the users Cookies. I used one a while ago but can't remember which, It will automatically save when the window closes and repopulate the form when it opens again. Quick and simple hack which requires no server/json etc
the consensus may be that prepared statements are "better" but they are also clearly more complex. The only info I found in the link you provided is that there is another link to [this site](http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html) which describes a potential vulnerability with mysqli_real_escape_string, but only when you start messing around with multibyte character sets other than utf-8.
What about ironclad queues? - its nearly already built into laravel. If you have a laracasts account, you can see how it works [here](https://laracasts.com/lessons/ironclad-queues)
An interesting point you make about not mocking everything. If we are speaking of strictly unit testing, I nearly *always* mock dependencies. The class describes its dependencies through an interface, so I just mock the interface. I find this also lets me truly test just the single class I'm trying to, without relying on the functionality of other concretes. It also helps enforce encapsulation: your class should function on its own, given its dependencies (defined as interfaces), without caring about the implementation of those dependencies.
Exactly how I would handle it and have done so in the past.
The code is not untestable, I'm just not good at testing. All dependencies are injected, concrete implementations are bound to interfaces, I'm making heavy use of laravel's IOC container and I'm following the repository pattern. I'll look into stubs but I have to say, mocks are serving me very well so far. Mockery makes it very easy. Every "shouldReceive" effectively functions like an assertion because the test won't pass if the mock's expectations aren't met. Unless I'm missing something. But to me this feels extremely thorough.
Logical, but my customer wants me to save things on serverside. Thanks for the information though!
We don't save the final output in database. When users click on submit instead of take draft, the output converts into a PDF file and then mails to the e-mail addresses admin specified. So, we don't have a db structure set for this task. I'm willing to go with what requires minimal database work. That's why I thought about saving everything as a JSON string and keep it in a single column. 
Perhaps you can hackit like the cookie thing did, Just have a generic script which dumps all formdata on the page to a separate table in the server, use the URL/loginid/uniqueid along with the ID from the &lt;form&gt; tag to create a hash and save everything using that hash to a simple table. When the forms submitted just delete the contents of the table. Make it completely independent from your other backend database stuff.
I'll probably save images in the same server since I don't know the owners of that company and I'm not sure if they would be willing to pay for a cloud service. Teşekkürler. :)
Yeah, I know it sounds a bit scary if I say that to professional developers who understand the pitfalls, but the app I'm building doesn't really have any opportunity for user input beyond selecting a few options from pull down menus. The only person who needs to actually insert data into the app will be the admin (me). So, in theory, minimal opportunity for the users to break things and (I hope) minimal security risks. Although, again, I'm sure that I will learn a lot while I'm building it and discover all sorts of security implications I hadn't thought about...
There is something called "same origin policy", all you downvoters can look it up or stay in your ignorance.
Sounds like you're taking yourself serious now. Sounds like you need a VPS now. Good thing they can be almost as cheap as shared hosting now.
Well, it's not *that* obvious.
Xdebug doesn't sound anything like "debug" admittedly. And "debug" doesn't mean doing extra stuff to find bugs of course. And extra stuff would never slow execution down. So I'll take it back, okay?
I think you only read the article title.
i really do not want to deal with the hassle of switching servers. Its an option, but i was hoping there would be an alt way first, before i made the move
If your hosting company isn't smart enough to understand SSH, then you need to find a new one. You shouldn't trust them with your business and your data.
Actually you can convert the images to base64 and throw them into the json. Sounds like a pig thing to do but unless you are processing obamacare applications the server should be able to parse the json/base64 so fast you will have trouble even noticing the speed hit. I had a variation of this problem last year. I had a file with a list of things in a single json file and then a list of images that went with most of the things. Then I needed to transmit the whole thing so I started with zipping and unzipping them then I tried getting the list and from that downloading the images but then I put the whole thing into a single json file and life became really easy. The reality was that the json file with roughly 100 20K images was 2-3 megs in size. So transmitting and processing this file in memory was a breeze. One catch is that in your php.ini file you set the maximum memory size for any PHP process. So you might need to bump this up either through a new setting or an override. All of the above might not apply if your images are 5megs each and you have 1000 of them. 
this is awesome, thanks. Can you recommend a URL monitoring service?
I don't have one I particularly favor. I use monitis for work but it's a paid service.
You're right, it's an extra method call or so. But using prepared statements literally makes it impossible to perform an injection, whereas it's still possible in some contexts using escaping. I'm just thinking, why take that chance, but to each his own. :)
Is there a control panel with web access to cron?
We to be honest since you have access to a database I'd not be keen to shy away from using it. There's no point in having a tool there and not using it properly. As has been suggested save the form as is, either on click or at intervals if you want to be fancy. Even if you don't need to generate the PDF more than once right now, specifications change and the infamous scope will always creep, so future proof it wherever you can. Believe me, in freelance work, there's no substitute for solving a clients future requests by turning a feature in as opposed to somehow engineer it into a system that wasn't built to scale correctly. That way you're charging what you would charge for the system, and let you do is hit the 'on' button. The database is the way to go here without a doubt, or some other storage engine, whatever, but the casing point being store that data! 
nope
I don't think cors is related to csrf, they mitigate completely different risks. That being said, I typically include a csrf token in an ajax form submission but forego it in favour of an authentication header for a generally available API with and add some rate limiting if required.
I use https://www.pingdom.com/free/ It's free for 1 url or ip
There is another way you can do this depending on what exactly this "cron" of yours needs to do. If it actually needs to make some sort of communication with something external to your application then this wont work. Say for example that you are aggregating data with your app or, clearing out a cache or something like that it will work. If you need to send an email notification to a user at a set time, it will not. Basically whenever somebody accesses your application it checks to see when the last time the "cron" was run, if the requisite amount of time has passed since the last time it was run and it needs to run again, execute the script, if it has not then continue loading the page as normal. This works because since the state of the application is irrelevant between page any two page loads. Say you need the script to run every two hours. If I load the application at noon, and then at 4pm, does it really matter if the script actually runs at 2pm rather then immediately before you loaded the page at 4pm? This only works for a very specific set of use cases and should not be used if the script needing to run is very time consuming, but its another option to keep in mind. [Wordpress uses this same idea with it wp_cron](http://wp.tutsplus.com/articles/insights-into-wp-cron-an-introduction-to-scheduling-tasks-in-wordpress/). However if you do need to do some sort of external action which is very dependant on time, then see the other suggestions in this thread. 
This made me laugh... Well done.
This is a dumb comment. Of course the hosting company understands SSH. It's a question of whether they are willing to dedicate the required support resources at the price level in question. Some hosting companies don't provide shell access for cheap accounts because of the many cans of worms that it opens, which can require costly hand-holding or even operator remediation.
EntryDNS is a service that allows me to keep my own domain pointed to my home ip address, only service I've found that does such a thing for free. I have a Windows task scheduled twice a day to run the command below. curl -k -X PUT https://entrydns.net/records/modify/my-special-code No reason it couldn't be modified to do exactly what OP wants, without spending extra as people tend to lean towards.
Why the fear of actually using a database to store data? That's what it's for. Laravel makes it super easy. I really don't get it here. You seem to be going out of your way to avoid the obvious solution.
Even so, the facade must rely on some sort of global state (otherwise how does it know how to access the database?). When you have something dependency injected, it's really easy to see what it's doing: class FooController extends Controller { private $_blogRepository; public function __construct(IBlogRepository $blogRepository) { $this-&gt;_blogRepository = $blogRepository; } public function show($id) { $post = $this-&gt;_blogRepository-&gt;find($id); } } In that code, it's really obvious how to mock the blog repository, and you're not relying on any global state. Disclaimer: I haven't done any PHP dev for over a year, and have never used Symfony.
Thanks for sharing this
But what if your rout goes to a view that doesn't use models? Don't add complexity that may not be used; the worst thing you would do is connect to a db just to close that connection after not doing anything.
It does seem faster at first. But people chose frameworks because they have already experienced the maintenance problems of using just raw PHP and rolling on their own. The benefits of using frameworks are long term. That is why you haven't probably seen the benefits of it if you don't stick with it.
Why on earth would your router need to care about your database and its credentials? That's like asking your driveway to worry about your door security system. They have different roles, and different responsibilities. Configurations should be stored in an application object which would reside near the top level and be invoked by your bootstrap. Why do you bother to abstract out loading a model, when all you're really doing is just instantiating an object? It makes sense to have a common base class with which to do initial setup but it makes no sense to have to call "load_model()" every time a controller needs access to one. Models should be usable in a controller, but they should not be coupled to the controller. Assign your models to local variables inside the controller's method (don't store them as attributes of the controller). If you're worried about shuffling data off to the view, pass that data to the view. The view should have no access to the controller, nor should it need it.
I thought it was pretty obviously sarcasm. I often forget that the amount of stupid shit people say sincerely makes stupid shit said as a joke look serious. :)
This really surprises me, too. I've got no degree at all. My tertiary study was in creative arts, **and** I dropped out. So pretty thoroughly not qualified. I've had no trouble at all with getting offers.
I've hired a few too. Github is useful, but essentially any way you can show me some stuff you've done, what you're into and how you work. Agreed, couldn't give a shit what your degree says. Chances are slim any of it relates to the role.
GoDaddy has a cron interface for their cheapest shared economy plan, at $7 a month ($4/mo if you go for a year) and this includes ssh access as well. I know it's fashionable to hate on GoDaddy, but their shared hosting is quite good. They aren't kidding about unlimited bandwidth or standing up to traffic spikes - a site of mine has been frontpaged a few times and it didn't go down for more than a few seconds while they scrambled to handle the load. For a VPS I'd certainly go elsewhere though.
I'd say they're as cheap, if not cheaper than shared hosting. Looking at the possibilities and performance you get from it.
You could use ionCube php encoder to obfuscate your source code. (http://www.ioncube.com) Obfuscating PHP source code is the best way to protect your code to be modified, as far as I know.
Let's not forget to mention this could be troublesome for the people wanting to use it in shared hosting environments. The absence of the ioncube module for PHP will render your script useless to them.
I've already altered the code that way. But there's no way to make the code execute only no write privileges? For example I want to protect someone from changing the author details to there name and company web site. The source code is encrypted but you can still edit the author details
Thoroughly agree. This is not what PHP does. This is not what PHP is for. This is probably not even possible, and any attempt to make it possible would probably be an unworkable abomination.
If you could make a file write protected, which is not that hard, then someone one else could easily remove the write protection. What is it that you are so paranoid about people removing your name as the author of the scripts? If you could prove that the source code was written by you in first place, there's no need to be so paranoid. The best way to prevent theft of your code, is to license the code and not sell it.
I could give you a dozen cons about obfuscating source code. The first being performance.
How do you license the code?
In the most simple form you tell the customer that he may use the source code but not modify it. To use the code, he has to pay you.
Really man, just read this: http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html (you don't have to choose SF2 route, the concepts explained there apply to any framework).
Not true at all. Shared hosting comes with zero hassle for common things through a panel and to some setting up a VPS -- installing, securing, managing -- is intimidating. I think it's absolutely the way to go but you're not necessarily doing something wrong if a VPS isn't ideal. 
Do you know who are you replying to? Go and check: http://philsturgeon.co.uk/code
Whatever url the ajax posts to could still be directly posted too with any manual means. 
Fun fact: Requests is the *only* HTTP library to do SSL host checking with both cURL and fsockopen. I spent a *long* time digging through OpenSSL to work out how to do this properly in PHP (and learnt plenty about both OpenSSL and SSL certificates along the way), as PHP's built-in support doesn't actually work correctly. (There's a proposal for the next version of PHP to include it now though, thankfully.) (Technically, WordPress had the code to fix this committed into its trunk first, but the code originally comes from Requests, plus `WP_HTTP` isn't really a standalone library.) Also, added by popular request: proxy support, multiple requests, cookies and sessions. In addition, a heap of bugs fixes and plenty more smaller features. Let me know what you think, /r/PHP!
PHP has something called `php-fpm` which allows you to define pools that execute PHP. These pools can be dynamically generated, and they can have fine-grained control over a variety of security settings, namely which user the pools execute PHP scripts as. By controlling the user that executes these scripts they are isolating the resources that the script has access to. There may be privilege escalation exploits that can cause the pool to execute code at root level, but there are additional safeguards available to further isolate resource access (jails, containers, and so forth).
How can the operating system run *any* code without it causing mayhem? By restricting what the user code is allowed to execute and access. Same applies here ;) "Run code" does not imply that said code is running under root ;)
I can only juggle 1
Basic SSL checking essentially ensures that both you and the remote server are communicating only with each other. The more advanced SSL checking ensures that who you're talking to matches up with who you think it is; that is, it checks that e.g. `https://github.com/` is actually a GitHub server. (Specifically: it checks the name in the SSL certificate against the name you requested, removing a bunch of man-in-the-middle attacks.) Ensuring that you have secure communications is important for a lot of things, including payment processing and downloading updates (executable files!), but also for smaller things where you want to be sure you're talking to the right API. One of the big reasons people disable this is because they're unsure as to why it's breaking. With Requests, this is intended to be hidden internally so you never need to worry about things like this. Requests also sets up the correct options and so forth correctly to ensure cURL (and fsockopen) operate as securely as possible. (Requests also bundles an up-to-date root certificate authority list with it, so you don't need to get your own.)
Length of time in your field doesn't make you an expert.
Oh God do we really need another one of these threads? Great you like Laravel 4 &amp; Slim, go tell it on the mountain.
Symfony scares a lot of people and in my opinion is really only at home with very large and complex applications. Like Zend, it has a significant learning curve and just seem like using a hammer when all you need is a nudge (for the majority of projects anyway). I've been stuck on CodeIgniter for a while now though am exploring other more robust (and actively maintained) frameworks. I've used CakePHP a lot and it was my goto framework before its strict conventions kept getting in the way and slowing me down. Kohana is a good alternative to CI as I believe it was based on an early branch of CI (could be wrong).
&gt; My problem is that this thread will be a circlejerk for everyone's favorite framework That's the point, to see what people are using. What THEIR opinion is on the frameworks THEY like. Like you, you PREFER symfony. My point wasn't about knowing the top frameworks my point is wanting to know what everyone IN THIS SUBREDDIT is using. You come off as an asshole and it's people like you that make me not want to come to this subreddit. 
Yeah I believe Kohana was based off CI, I used to use it quite a bit (enjoyed it) and moved on to try new things.
Are you sure your claim is correct? For example, /u/rdlowrey - the local expert on both the HTTP specification and TLS usage in PHP and also the guy behind the upcoming TLS changes in PHP 5.6 - has an [HTTP client](http://rdlowrey.github.io/Artax/) claiming to have "fully customizable and secure-by-default TLS (https://) support". I'm inclined to believe this statement.
He thinks you're an asshole because he posted here asking for advice and you jumped in and attacked him.
Not to answer for OP but he claims that his lib is the only one to check SSL *with both streams and curl*, while Artax doesn't use curl at all. The claim looks correct to me :)
What are you trying to accomplish with something like this? It is not clear to me what you are doing, but it already feels like there is probably an easier way.
It looks like what you may be after is EAV (entity attribute value) but hard to tell exactly.
looks like dependency injection
Sure, this will technically work, and might be fine for dev or testing. You don't actually use this for anything important / critical though, right?
You're right, a lot of shared hosts offer SSH. I just don't think wanting to avoid a VPS is a warning sign. 
Neither would I. I've written my own, contributed to several and evaluated many more. Making assumptions about people doesn't help anything, and suggesting that all PHP frameworks are "bad" is just as useless. A) You've not evaluated enough PHP frameworks, and you're providing an opinion on a topic you don't know much about. B) You've got an amazingly powerful ego, which says your code is better than everyone else. Either way you're contributing nothing by saying they're all bad, because they aren't. They're all different, and I like some more than others - mostly because some give you plenty of freedom to define your own OOP folder structure - which seems to be what you're advocating anyway. An employee that makes every single application from scratch and not particularly helpful employee, but they are somewhat un-replaceable as nobody else is going to want to look after their code.
Lol, how the fuck got this comment downvoted?
Most of these presenters either worked in PHP 4.0 and never bothered to view the latest versions of PHP or may be they blame PHP for the mistakes of newbises developers. PHP is loose language its use totally depends upon on the users. I am using Zend Framework 2 for my projects which is pretty awesome built of the major software engineering principles and it emphasizes on using the best practices of software engineering. I admit that PHP did have some issues but they have been either resolved or in the process of resolving. 
You can use this google spreadsheet hack for free: http://www.labnol.org/internet/website-uptime-monitor/21060/
for anything that i'm doing for a client (which usually has the budget for hardware), i'll go for laravel. for anything that lacks the budget for expensive hardware, i'll go for one of the microframeworks around + pdo/mysqli. the amount of overhead symfony2 or laravel introduces is just ridiculous: http://www.techempower.com/benchmarks/ but this overhead is outweighed significantly by other things like convenience, maintainability, support.
I don't know how they do it, but I use PHPSandbox, and it works brilliantly: http://github.com/fieryprophet/php-sandbox
[I just found an open source project like the ones you mention on github.](https://github.com/venu/Php-Online). Have a look by yourself ;)
[Here](https://github.com/venu/Php-Online)
I actually made a similar website, www.consolephp.com -- getting it to run in a way that's not exploitable was pretty tricky. PHPSandbox was the first thing I tried, but that has tons of gotchas. Look up preg_replace()'s /e flag for an example of the many, many things that a static code analyzer like PHPSandbox will miss. Eventually, I settled on running user-supplied code in its own isolated PHP process with a custom php.ini that whitelists known-safe functions, disables disk IO, and the like.
Sorry your post didn't work out :(
Someone clicked the down arrow
Might this offer a solution to Composer's MITM issue?
Can you expand on that with an example?
Neither A or B is true and not all frameworks can be bad, there are some well written ones. My main point was the application design, requirements and performance needs to take priority over the framework. Sometimes the framework is too big, restrictive, or too slow. However some companies try to use it for everything regardless. "When all you've got is a hammer, everything looks like a nail." Also I pointed out maintenance. Once your app is in a framework you are no longer in control of your application. The framework author pushes out a new update, sometimes not caring about backwards compatibility, now you need to rewrite all your websites running on that framework to take advantage of it. Wait too long and you are 2 or 3 releases behind. Now you're missing important security updates. Wait even longer and they've updated to the new fancy version 2.0 and you require a complete rewrite of the application. This is just more work for companies. Upgrading the framework isn't as simple as upgrading a library component. If you ask me, a better approach is a solid library of classes and can do everything your app needs above what PHP can't do. You load in parts of the library you need and use it to do all the necessary stuff. Couple together your own MVC core and framework code which won't change often. Then if it's a good library, the library authors should keep the API the same and only change the internals of the code if they want to make improvements. Rather than having the core of your application built on top of a constantly moving target which is isn't even directly customized for your app. What off the shelf PHP frameworks do the big players (e.g. Facebook) use?
Are you nikita, from the php internals? Thank you for all your work
Nice and clean website!
This would be a great step to fix Composer's MITM issue, however it is not a complete fix.
Just remember to switch them off when you're live! Nothing looks worse than "Fatal error" messages on your site.
I wouldn't trust this service with my passwords, though... From the [F.A.Q](https://www.setcronjob.com/faq): "Do you store my password?" -&gt; "No. SetCronJob stores only password hash (using the MD5 encryption), and it can't be decoded. So if anyone gets in the database, one can't know your plain password."
well true that ;)
thank you!
You should also add your parameters to parameters.yml.dist Your parameters.yml gets updated using that file.
I just checked Artax (I had missed it previously), and I can confirm that it's also vulnerable. To break down the real reason behind this: SSL certificates contain a field called the common name (CN) that for HTTPS contains the domain name it relates to. A long time ago, we realised that we needed more than one domain for some certificates (e.g. `github.com`, `*.github.com`) so a newer specification was released that specified checking the subjectAltName (SAN) instead. PHP exposes the ability to check against the CN with the `CN_match` parameter, but does not expose the ability to check against the SAN, which is not spec compliant and breaks with real sites (try GitHub, e.g.). That said, /u/rdlowrey *does* know about these caveats, as he's working on patching this into PHP itself after discussions we had. His library, however, does not appear to work around this in the meantime. Requests has to work with 5.2+, so it'll be a long time before it can use those improvements, unfortunately. (Also: Requests uses cURL and TCP sockets, this only affects TCP/TLS sockets. That said, that's roughly 10% of the userbase, which is not insignificant.)
It seems to solve it - thanks. I never did that before, is that new? I have made several minor projects since I started learning symfony2 last year and it never was a problem before.
So that was new - didn't notice the announcement. Thanks.
I'm not sure about what Composer's MITM issue is, but I'd be happy to help out if you can point me in the right direction. :)
Here's the issue on GitHub: https://github.com/composer/composer/issues/1074 SSL ought to solve half the issue, the other half being signatures to verify the integrity of the files themselves after fetching. 
FPM is fucking amazing for high traffic deployments when tuned properly.
Thanks! I'll chime in over there.
I was faced with testing abstract base classes a couple of weeks ago. I'm not sure if this is the "best" solution, but it worked for me. I just created a dumb class that implemented Base, eg: class Foo implements Base { public $foo; }
1. Very carefully. 2. They still occasionally fail at the goal.
Keep in mind that with most PaaS solutions your app is treated as a whole, not just a server that runs your code. By that I mean that by design, a good PaaS will delineate whatever you're hosting into separate distinct sets of resources. Your "app1" will run in an entirely separate container with its down database, web servers, cache servers and all that in a manner that is 100% protected from "app2". The two don't share resources or cross boundaries in any way. If app1 goes down, only app1 goes down. Nobody else is affected. &gt; Are there more benefits of using a PaaS service? (Mostly dev related, I know for example, you can scale up or down quickly.) Not just scale up or down, but scale out. It's a somewhat academic but important distinction. Adding memory / cpu to a system is generally speaking easy but I consider it very important to avoid being flippant about scaling and infrastructure. Clustering and load balancing is hard. With a PaaS this is (or should be) entirely handled for you and in most cases, scaling out (adding more nodes) is a better option for concurrency than scaling up. With scale out, you increase your fault tolerance every time you scale, with scale up you put more eggs into the same basket and increase your risk that a single server outage will cause a greater affect on whatever is hosted there. &gt; Can those PaaS services be used as a production server? (Like web hosting) For example, do they support adding domain name servers or allow me to host different applications by applying low resource? (Speaking about paid versions only) Not entirely sure what you mean but generally, yes. You can certainly add a domain name to your app, or multiple domain names, host various components of your app within the same container. Most have "free" versions, so you can setup a dev environment that mimics production with zero or very minimal cost. &gt; Fortrabbit wants me to add their .git link as my project's remote URL. If I do this, can I use Bitbucket and their service at the same time? (I believe I'll push to their repo just for uploading the files and keep the version control on bitbucket?) Yes, and I do this all the time. I often end up with my source control (origin), a staging / QA environment, a dev environment and a production environment all configured as individual remotes. &gt; Well, basically I would like to learn why it would help me as a developer to use PaaS services. Any reply would be appreciated. Other things to keep in mind... The whole point of infrastructure and all the complexity that comes with load balancing and providing fault tolerant services is risk mitigation. This is driven by business, not techies and developers and hardware geeks. The reason it's important to scale is not because it's "neat" or "fun" or "possible", it's because the impact of not scaling is real lost $$$ by way of reduced customer confidence, lost sales, yadda yadda yadda. When you host on a PaaS, you are basically hiring an operations team. While it's not free and generally more expensive than shared or VPS hosting, it is absolutely invaluable. It's a cost, but should be an easy sell to any client who gives half a shit about what you're offering them and their business. Random list of stuff that I like about PaaS: 1. Support, they are your operations team, they handle it if things go down, which they probably won't, or at least not as much as if you were rolling your own 2. Fault tolerance - Scale out across a bunch of nodes and expect failure, should a single node in the system go down you are covered 3. HA - (usually additional $$$) every component in the system can be recovered in real time from an alternate resource 4. Disaster Recovery - If shit goes down in a major way, they will recover it. Imagine you had a VPS you configured yourself with a dozen clients on it that just plain died, you'd be scrambling to assemble all your backups and deploy a new VPS, hopefully this doesn't happen in the middle of the night when you're sleeping. I like offloading this risk on to a provider, preferably one with a proven track record and capabilities that well exceed my own personal infrastructure skill set. 5. Cost - This is actually a benefit in my eyes, PaaS is CHEAP as compared to hiring an operations team and doing things yourself. 6. Portability - When done right, you should be able to deploy your app on to most PaaS providers with minimal change or anything within your code. You won't have to ever use the word "server" or "vhost" or anything ever again. 7. Money - If you're a developer, you can spend more time developing and less time configuring or fucking around with servers. 
Beats the pants off of `mod_php`, that's for sure.
Eh, most of the performance hit with Apache2 is `.htaccess` time.
A PaaS is a means of reducing development and operations costs at the (possible) expense of portability of your solution to other platforms. Adopting a PaaS means you spend less time writing code to manage configuration, provisioning, storage, job queues, workflow engines, etc. and more time writing your actual domain logic, whatever that might be. I say "possible" expense, because in theory, a PaaS provider could offer all of their platform components using open APIs (similar to what OpenStack does for IaaS) and in doing so facilitate solutions' retaining portability, but to date few PaaS standards exist, and in practice, adopting a PaaS usually means a commitment to their "way" of doing things (which, of course, is a "stickiness" PaaS providers readily encourage).
When I say it's vulnerable, I mean it doesn't appear to check at all by default. That means if you have any valid SSL certificate, you can MITM it. I may have missed where it sets a default CN though.
&gt; Are there more benefits of using a PaaS service? (Mostly dev related, I know for example, you can scale up or down quickly.) I've used Pagodabox in small usages. The big help to dev time is deploys are a simple git push (and or clicking a button on your PaaS' control panel). You'd be amazed how much more productive you can be when you're not worrying about infrastructure and other DevOps tasks. You've asked about local dev: local dev is actually easy enough, I would run and test our small site locally (in our case we were simple enough to just use the inbuilt php server but it wouldn't be too hard to setup Vagrant). It's really no different than dealing with deploying to servers you manage yourself, the key thing is the servers you are deploying to are very rigid and you must conform to them. Which, luckily enough, will force you into good habits. &gt; Can those PaaS services be used as a production server? (Like web hosting) For example, do they support adding domain name servers or allow me to host different applications by applying low resource? (Speaking about paid versions only) That's kinda their whole point. Plenty of apps you've probably used once or twice use [Heroku](https://success.heroku.com/) as their primary host (and Heroku is kinda the grandaddy of PaaS platforms). &gt; Fortrabbit wants me to add their .git link as my project's remote URL. If I do this, can I use Bitbucket and their service at the same time? (I believe I'll push to their repo just for uploading the files and keep the version control on bitbucket?) Local git repos can have multiple remotes, you can have Bitbucket be your named "origin" remote and maybe setup a "fortrabbit" remote so that when it's time to deploy you could do a `git push fortrabbit master` or something similar. Read up on [forking in git](https://help.github.com/articles/fork-a-repo) as this is what fortrabbit is actually asking you to do. The tl;dr of the argument *for* using a PaaS is you completely offload almost all DevOps tasks and let someone else take care of it for you. You will pay more money for this convenience but it will let you get your app up and available to the public immediately without infrastructure concerns hamstringing your efforts.
I would reframe from using magic methods, they make testing code less obvious and also harder to port to other languages.
Fastcgi Process Manager
I wouldn't go that route, because you're essentially testing a class which shouldn't be part of your application.
&gt; ...harder to port to other languages. Why would I want to do that? I'm not creating the next Twitter or Facebook... It's a PHP application and I'd like proper unit testing for it... Although I agree with you that magic methods makes code less obvious, but there are implemented in PHP for a reason.
just because you can cut your finger off with a knife doesn't mean you should. Those features were there back in the day when people didn't think about the ramifications of code-maintenance.
magic methods gives you way better maintainable application code if you do it right
Unit tests are for observable behavior, so this is fairly straightforward: mock the abstract class and test property setting. class BaseTest extends PHPUnit_Framework_TestCase { /** * @expectedException InvalidPropertyException * @expectedExceptionMessage Cannot set undeclared property */ public function testFakeProperty() { $base = $this-&gt;getMockForAbstractClass('Base'); $base-&gt;fakeProperty = 0; } public function testRealProperty() { $base = $this-&gt;getMockForAbstractClass('Base'); $base-&gt;realProperty = 0; $this-&gt;assertEquals($base-&gt;realProperty, 0); } } If that doesn't work for you, you'll need to elaborate more on your concerns. (edit was to fix visibility on test methods)
In this scenario Base has no properties, so it's impossible to test the setting of a property.
While I see your hesitation and I agree with your sentiment, you shouldn't believe that you're testing a class which shouldn't be part of your application. You're creating an object to assist your tests; you're testing the abstract class. It's not exactly a 1:1 comparison but you can see Symfony creates 4 classes exclusively for testing purposes, https://github.com/symfony/symfony/tree/master/src/Symfony/Component/PropertyAccess/Tests/Fixtures.
If `Base` has no properties, there's no point in testing it for anything other than the fail scenario (property doesn't exist): it has no properties, so there's nothing to expect. Property setting should instead be tested in the concrete classes that do have properties.
cool. didn't knew that
Not really answering any of OP's questions here, but... I've recently moved most of my work to Red Hat's OpenShift. Their base package is free, and provides more than enough power for most small business sites and applications (they also do a really great job of explaining what 1 "gear" is capable of). I'd highly recommend it for anyone wanting to dip their toes into PaaS without handing over any coin. As a dev who used to deploy on shared hosting and VPS, PaaS has made things quicker, cheaper and easier. 
Then again, doesn't make sense to test property setting in every concrete class that extends the abstract base class Does it?
The word is "refrain", and you can pretty much test magic methods like you'd test anything else. Set up a state, trigger a change, then assert that the new state matches what is expected. If you're following proper code testing procedures (write tests before code, write enough code to make tests pass) your tests should describe the object behavior. As for porting to other languages, this shouldn't really be a concern unless it's a project objective.
At the cost of performance. At least in 5.3, magic methods perform very poorly. It's faster to call getter/setter methods, and one could argue that is more maintainable.
A surprising amount of computer science stuff comes down to layers. We talk about the "LAMP stack", but really that's just taking four technologies of a system that runs from spinning metal plates to javascript abstraction libraries. At multiple point though these systems a developer has to ask the question "How much of this do I want to be my problem?" My general answer is "As little as possible". I strongly support things like ORMs and Frameworks because they make large chunks of application code "someone else's problem". When it comes to hosting, the developer can take multiple levels of responsibility. On something like Amazon Web Services, there's very little, and the developer has the responsibility to set up most of the required services. Commonly, on something like a VPS with cPanel, the developer is given an installed OS, and the majority of software set up and ready to go. However, the environment is not very specialised, it's a generic space, you could (often) be using Ruby, mySQL, Postgres, Perl... A PaaS by comparison is specifically set up as a platform, dedicated to a given language and environment. Heroku largely started it for Ruby, but there are plentiful PHP ones now, notably App Engine, FortRabbit, and Pagodabox. Think of it in terms of hiring a shop space. Amazon web services might be a warehouse. You get a big space, and it's cheap. But you have to do a hell of a lot of fitout to make yourself an actual usable shop. You might not even have electricity or lighting. A VPS might be set up as a basic shop. Cash register desk in the front, nice flooring, lights working. You'll need to get in some shelves and so on. A PaaS, by comparison, is a store with the right kind of layout, structured how it needs to be, with shelving and back room storage all in place. It's all ready to go, turnkey, it just needs your stock (app). While you have a warehouse with AWS, you have a fixed space with a VPS or dedicated server. A PaaS is not fixed. Post Christmas sale? Increase the number of cash registers for the day. Growing stock requirements? Dial up the floor space! Here's where the metaphor breaks down, of course. You can't do that with a shop. Still, the principle is there. These options work better for some people than others. It sounds like I'm critical of Amazon Web Services. I'm not. I'm just really, really thick, and couldn't get it working. I think it's great value for money, and in fact at least one other PaaS is a layer **on it**, FortRabbit I believe is. VPS or dedicated servers are also good, especially where traffic is known and predictable. Where PaaS or cloud hosting has an edge, though, is that ability to scale through traffic spikes. In my opinion, where PaaS excels as an option is as a startup. For a startup, traffic and finances are an unknown, and hosting can represent a huge setup cost. $200+ a month for a dedicated box is a lot, especially if the incubation time turns out to run longer than expected. *That never happens...* Being able to develop on a platform that's cheap or free until you're ready to launch is a godsend for people like me doing occasional little projects and flinging them into the world. This is something other people haven't really mentioned much. While saving operational costs of having a dedicated server team is a huge bonus, the sheer cost reduction of having a system that can scale **down** to the needs of a bootstrapped startup is important. Some of the other benefits to a PaaS system are some excellent workflow improvements. Systems like FortRabbit (apologies, but that's the one I know best) integrate tightly and brilliantly with Git, making deployment a much easier process than FTP based systems of the days of yore, and allow deployment by pushing directly from Git. PaaS systems tend to be very modern. FortRabbit supports Laravel out of the box with minimal setup (basic db connection stuff) and no fucking around. Fortrabbit also supports composer, not just from a command line, but it can actually read a composer update trigger in its git commit messages and act accordingly. PaaS options are not for every application. Some, such as Pagodabox, provide limited or no access to user file resources, and even those that do the access can sometimes be unreliable do the the nature of the cloud. If your app is strongly based on files, especially large files, it may not be appropriate. PaaS options also get quite expensive as traffic and usage ramp up. It may be that a successful or popular app will actually outgrow a PaaS solution, and reach a point where it's commercially better off on an alternative hosting solution. There are worse problems to have. TL;DR - Cloud based PaaS solutions play very nicely with modern development practises, and come highly recommended. Their ability to scale up to "reddit frontpaged" and down to "boostrapped startup I want to show my friend Susan" is a highly powerful thing. P.S. I had issues with Pagodabox, and don't recommend them. FortRabbit, however, has been exceptional.
Actually, I have to say, Laravel's migration system is a really nice feature.
Article doesn't seem to make its case very well. It seems to be needlessly caught up in the ambiguity of certain english words (such as attack) to be both verb and noun. In no way does it make a case for using verbs as class names. In fact it seems to make bizarrely specific classes in order to artificially create "readable" syntax. Why does class FireEmployee implements DomainCommand, HasPermissions Have any benefit over class Employee implements xxx { public function fire(){} } //$employee-&gt;fire(); Completely readable. And this kind of nonsense $auditLog-&gt;recordThat(new EnemyWasDefeated($onDate)); Could surely be $auditLog-&gt;record($enemy-&gt;setDefeated($onDate); Trying to make your method and class calls chain to perfect English seems to be barking thoroughly up the wrong tree.
If you changed the structure a bit you can have photoviewer.php, user1.php, and user2.php. When user 1 logs let photoviewer.php use variables from user1.php to determine which picture to show. 
If you'd have said that in the first place we wouldn't be disagreeing quite as much, because before you just said they were bad without eluding to why, which is damaging to the beginners here that do not understand why. Obviously every application choice needs to be made carefully, and keeping up with releases can for SOME frameworks be difficult (certainly not CodeIgniter, which doesn't ever change). But the point there is that you ARE getting security updates, and you dont HAVE to upgrade to the latest versions for quite some time, so that is a misnomer that it is "extra work". Changing from v1 to v2 of a framework for the sake of it is no different from you deciding over a beer that you've got some amazing idea of how to redo things in your custom app, so you have to recode it to get it done. Except for the fact that people will probably hate you for it. &gt; If you ask me, a better approach is a solid library of classes and can do everything your app needs above what PHP can't do. That is exactly what the majority of modern frameworks are, and do. &gt; What off the shelf PHP frameworks do the big players (e.g. Facebook) use? Apple and Bloomberg use CodeIgniter. But most companies use a series of tools, and implement service-orientated architecture to get that done. Different teams make different services available in different languages with different frameworks and that's all just fine. You need to use the right tool for the job, and PHP frameworks are definitely the right tool for many. Which framework depends on the instance, and sometimes you can get away with building something from scratch. This has been made much more viable with Composer being a thing, as you can pick and choose what bits of code you want, making your own basic framework for each task. Need routing? Use Symfony Router. Need templating? Shove in Twig. Need X? Use Y. If you're building everything yourself, then you are wasting your time and your employers money. If not, fair enough. Frameworks and components are these days basically the same thing, so you definitely can't just go around telling everyone that frameworks are bad. ;)
Lol, how the fuck got this comment upvoted?
Your shop example was so easy to understand but I'll ask one thing. You said; &gt; Their ability to scale up to "reddit frontpaged" and down to "boostrapped startup I want to show my friend Susan" is a highly powerful thing. How exactly am I going to scale that much? I'll probably need to pay for a dozens of resources. 
Thanks alot about the reply. Everything is alot clearer now. :)
use `public function classname()` instead of `public function __construct` because `__construct` is also a magic method. \#1 Rule: Don't do premature code optimization
A combination of this and the INI directive that disables functions. On my phone, so no link.
.htaccess + ModRewrite.
Globally? Don't know. One-off? Header("Location: /item/$_GET['id']"); Note: you should sanitize your GET input first with something like preg_replace
Please dont use regular expressions to validate input unless absolutely necessary. Additionally, redirecting the user with your header() call will do nothing but show them an ugly 404 if there is no PHP script at the url you redirected to. /u/followchrisp is correct, OP needs to setup mod_rewrite and then probably some kind of front controller pattern that can dispatch to the appropriate controller. For example, configure mod_rewrite to patch all requests through a single script, and within that script parse $_SERVER['REQUEST_URI'] to figure out which other script needs to be loaded.
I ran into this and started looking at more simple frameworks to learn the concepts and then expanded. Slim I found really easy to learn and helped me a lot once I got into a tradition to use it. I also ran into a learning curve with MySQL and using the mysql_query connectors before moving to the more secure myqsli interfaces. Having projects to do while learning new frameworks and coding methods I find the easiest to help move forward.
This is a hard question to answer, so generalities first. Yes. You'll need to pay for what you use. But **only** what you use. Lets say your normal usage is 20. Suddenly you get linked on something big (reddit, a popular blog, whatever) and your usage jumps up to 100. If you were using a VPS/Dedicated server you would need to have it actually at 100 (or at least 80) to make sure that it didn't fall over when suddenly slammed. PaaS systems have dashboards, with metrics and sliders and stuff. They show how your usage is, and will go red, etc, if your setup is inadequate. You can then upgrade as you need. Maybe you need more caching, maybe you need more workers, maybe more database capacity, maybe more web servers. I don't know your app, your bottlenecks. But yeah, you just slide up that bit until it's all happy. Yes, you will have to pay for the extra usage. But only for a **day** of extra usage, or two days. So if it would normally cost $15 a month, but you have two days that you had 10 times your normal load, you might end up paying more like $25 or something for that month. I pulled those numbers out of my ass, but the principle is right.
Eloquent does a better job at this
and don't use micro optimizations... we're not Facebook :)
Comparing Apples to Oranges. Yii is meant to be used as a full MVC framework, and not really as much for a library (though it can be, but why would you). Zend can be used as a framework or library. The article points out the several key aspects of each framework, but I think it doesn't touch the learning curve. Zend tends to take much longer to learn and use, where Yii is like most other frameworks. Personally, I use Zend in almost every project I do, but as the library aspect (sending mail, reading inboxes through IMAP, acting as a SOAP client, HTTP requests, etc). I have used Yii and love the ease of working with it, but have since moved on.
I'd say a basic CMS that is used to blog about your learning of PHP. Kind of meta. 
Since actually Yii is directly based on Django, it's not really related to MVC. Unless you are one of those people who think that Rails-like frameworks (template/logic/activerecord, with focus on scaffolding) fits the [MVC](https://en.wikipedia.org/wiki/Model_view_controller) architectural design pattern.
Given that `__set()` is only called if a property does not exist, I don't understand the point of checking this inside it. You're also missing the class parameter to `property_exists()`, which I assume was supposed to be `get_called_class()`? Either way, it's a noop. That having been said, testing this is straight-forward. Mock the Base class, and add a known property to the mock. Then test the two scenarios - setting a property on the mock which exists (assert no exception thrown), and setting a property which does not exist (assert exception thrown).
Yii is not directly based on Django (http://www.yiiframework.com/about/). As far as MVC goes, Yii provides a way/tool to implement your own MVC architecture. MVC is not something that framework implements or mandates. Instead it should be implemented by your code.
I'm not crazy about being forced to create a PHP object for every table (if I understand the Eloquent docs appropriately). RedbeanPHP just uses it's standard class if a FUSE model is not explicitly defined. Looks like Eloquent also requires that you define, or tell it about, your relationships in those objects, also not a fan of that. But to each their own. 
Dont have to in both cases
Which PaaS would you recommend for PHP? Which do you use? EngineYard and dotcloud look interesting but this is all still very new to me (and from what it appears, new for PHP).
I have used PagodaBox and FortRabbit almost daily for about a year or so with great success. Re: PagodaBox... some others have had bad experiences with their support team, personally I've had nothing but great service. PagodaBox had some growing pains about a year back I'd say, suffered some downtime as a result. They seem to be growing up, haven't had any issues as of late. Have also used Elastic Beanstalk (Amazon), it's a pig but gets the job done, tends to be a little pricey. Amazon AWS has other advantages, especially if you're hosting something with many components and PHP / web is just the front end. They now have OpsWorks which I need to look more into. I recently signed up for jelastic and started playing around with it. On the surface it appears to be solve some organizational challenges I've encountered previously with PB and FortRabbit, I just haven't actually deployed anything on it yet. Jelastic kind of feels like Elastic Beanstalk to me but with a much slicker UI and workflow integration. Again, I just signed up for a trial so no real experience to speak from on that one. Haven't branched out into EngineYard or Dotcloud yet. I toyed with AppFog at one point and before that PHPFog. PHPFog seemd real good, AppFog kind of seemed like it wasn't abstracting enough away from my personal responsibility at the time but I'm betting a lot has changed since then.
If getter/setter testing is part of the requirements of your project, then yes, it absolutely does make sense to test property setting on each of the concrete classes. Unit tests are to confirm expectations about observable behavior. Your abstract class here defines nothing about what happens when the property exists: it has no real properties of its own, and no code is executed when a property exists. This leaves each of the concrete classes to define that behavior themselves, so you must test each of them to confirm they still match your expectations. If all of the concrete classes should have the same property setting behavior when the property exists, then that should be a part of your abstract class. In that scenario, you only need one test to check when the property exists, and that test should be really straightforward: just adapt the code I originally provided. Otherwise, you'll need one test to check the behavior when a property doesn't exist, and one test per concrete class to check when the property does exist. Alternatively, you could forgo testing setters entirely if all you're doing is relying on PHP's native property setting and doing no processing of your own (e.g., merely `$this-&gt;foo = 'bar';`), but if you do intend to do more than that in the future, you should have tests.
Here's another fun one: array_filter(array(''), "blacklisted_function"); // phpsandbox lets blacklisted_function run! PHP is full of surprises like this, and a PHPSandbox-based solution would force you to try to anticipate all of them. My php.ini based whitelisting approach is much more forgiving about catching functions invoked in clever ways. It also lets me use open_basedir to restrict disk IO without having to anticipate every way someone will think of to do that! It also lets me allow things like this without opening up a security hole: $x = "myfunc"; $x(); PHPSandbox's approach would be to block that outright.
True. If I had a site that was consistently bringing in big traffic (and big revenue, assuming I'm doing it right) I'd wouldn't be using a shared plan. But for a website that is going to usually bring in low amounts of traffic, but occasionally may get frontpage'd on Reddit, Digg(?), or other social media and sustain a traffic spike now and then... a shared provider that has the infrastructure and policy in place to help you shine in your time of need is exactly where you should go. I've seen many other shared providers that promise cloud redundancy and all that jazz fail the reddit test. I just get frustrated sometimes seeing people give bad advice (Never use GoDaddy UNDER ANY CIRCUMSTANCES) because it's the popular thing to do. Praising GoDaddy typically results in downvotes. I find their design, advertisement, and marketing annoying as hell. They try to upsell you on everything prior to checkout, and their CEO is an asshole. But they provide a great service at a great pricepoint. I haven't had a bad experience with them yet.
If the idea of PDO seems confusing, I would suggest spending some more time trying to understand it. Once you get it, using it is simple and safe (with prepared statements). I've never used stored procedures, but it looks very complex for what you're trying to do. In PDO: // Create a new PDO instance $db = new PDO('mysql:host=SERVER;dbname=DBNAME', USER, PASS); // Turn emulated prepared statements off (optional) $db-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false); // Query the database using a prepared statement $result = $db-&gt;prepare('SELECT qid, simName FROM queries WHERE username = :username'); $result-&gt;execute(array('username' =&gt; $userName)); while ($row = $result-&gt;fetch(PDO::FETCH_ASSOC)) { // Do stuff }
I seriously doubt you searched as this seems to work: * Google: mysqli stored procedure out parameter * Top Result: http://stackoverflow.com/questions/48126/php-mysql-stored-procedures-how-do-i-get-access-an-out-value Answer: `$mysqli-&gt;multi_query("CALL get_queries(' . $userName . ', @qid, @simName);SELECT @qid, @simName;");` A few things to note: 1. Multi-query is inherently evil. Hence why stored procedures are underused, probably. 2. Not sure there's a rational reason to use stored procedures for security reasons. Parameterised queries which properly escape stuff is what's necessary. In fact, if `$userName == $_GET['userName']` I can do: `?userName=', @qid, @simName); DROP DATABASE; --` and boom. 
Have used Mandrill recently. I would say it's pretty decent. You also get to integrate it with mailchimp which I think is a plus. The PHP wrapper for it is quite easy to implement. If you need to go for a quick choice you can go for Mandrill. Haven't tried Sendgrid yet. 
Not to be an ass, but you are either confused, or totally off the track. &gt;I'm trying to convert my few mysql calls into mysqli calls using stored procedures, as to increase the security of my site It won't increase the security of your site. &gt;To me, I totally understand the idea of locking down the database to ONLY stored procedures Where did you get this idea? Why would you want to lock down a database to only stored procs? &gt;the idea of PDO is a bit lost on me The idea of PDO is lost on you, but you want to lock down your database to stored procs, to increase security? Forget all this nonsense, and use selects in the client code.
I may be overlooking something here but that looks like an incredibly complex way of doing it... if you have the lat/long of the centre of the search, and the lat/longs of all the objects, could you not use pythagoras? X1,Y1 = centre point X2,Y2 = object's coordinates Using A^2 + B^2 = C^2 ... dist = sqrt((X2-X1 * cos(Y1))*(X2-X1 * cos(Y1)) + (Y2-Y1)*(Y2 - Y1)); You could in fact do that directly in the SQL query :) though I'm not sure how resource-intensive the SQRT() function is in MySQL EDIT: Obviously that wouldn't take the curvature of the earth, or terrain into account, but over short distances that should be accurate enough. So "find your nearest store" for example would be fine... EDIT again: Actually, it should take he curvature of the earth into account, because thats how lat/long coordinates work! I'm sleepy! EDIT: A post on stack overflow reminded me how maths works! EDIT: Ahhh screw it I'm going to bed.
Mandrill! I have used both of them, and I certainly liked Mandrill much more. They have a very nice back user interface, and some very helpful features. SendGrid too has a plethora of features which I totally dont get, but sending/receiving stuff via it has been a pain for me. And don't forget, Mandrill free is &gt;&gt;&gt; than Sendgrid, and even if you go paid, Mandril paid's cost &lt;&lt;&lt; Sendgrid's cost. I never get why will someone use Sendgrid in the first place.
In your example, you are abstracting a simple select query into a stored procedure, and then calling the stored procedure in the client code. Instead of doing that, just do the select query directly (better yet, create a function for it) and throw away the stored proc. I can only guess why your coworker thinks it would improve security, so ask him to elaborate. If he's worrying about the damage that a user with a leaked out username/password can do, it will be a *bit* harder to delete your database, because the malicious user cannot just simply do a DROP TABLE user, but he can still use your stored procedures to delete the records from the table. It will also make it hard to dump your database without having access to SELECT, but, you have made it harder for a malicious user to do its damage if a username/pw leaks out by 1 unit, and you have made your own job 10 units harder. Not worth it. If he's worrying about SQL injection, then it will do exactly nothing against that.
Are you being serious? It's called a "sandbox" not "do your security for you-box." If you enable a function like array_filter what do you expect it to do? That's why it's called a "whitelist." Rewriting the function is brain-dead simple. And PHPSandbox let's you specify variable variables functions, check the manual. Oh, and I enjoyed rummaging through your "secure" server. /home/phpworker?
Here's an article that gets posted a lot on the subject, although I don't consider myself a good enough coder to call it valid or not: http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/ My $0.02? The maintainers of PHP floated from one standard to another on naming conventions and the like, and their decisions on what features to include VS not seems to be random at best. It's not a perfect language, and it has a lot of flaws, but I also think it's given a lot of undue hate. PHP is a pretty forgiving language, and it has a lot of ways to do certain things really poorly, so you'll find there's a lot of people out there who will do things poorly, and (whether it's just or not) the poorly written code is attributed to the language rather than the poor coders. So that's my take, for what it's worth, it's easier to attack the language than chastize the poor coders, and the language itself seems to be inconsistent in how it's constructed at best.
Do you ever give it a fucking rest?
I;m a happy user of [PostmarkApp](https://postmarkapp.com/), it's definitely worth taking a look at but I haven't used Sendgrid recently enough to give you a useful comparison.
No. No he doesn't. Here or on SO.
I came across [this post](http://net.tutsplus.com/tutorials/php/php-database-access-are-you-doing-it-correctly/) a while back that was really helpful for me. I was late to switching to PDO as well, but it really is just as easy. Just remember stmt in the tutorial stands for statement, because that is what you are creating. 
It's actually /home/console\_php\_worker1, as \_\_FILE\_\_ or $GLOBALS will plainly tell you.
Interesting article but I would like to compare them with laravel and symfony2 also. 
What about [Iron.io](http://www.iron.io/)? Just run a file_get_content or something.
The general method used to calculate the distance between two points is as the author said; it's the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula). For my own purposes I tend to do a bounding square calculation in PHP then run haversine in mysql. It's been awhile since I've done this. As the author said MySQL has an extension for spacial indexing, and both Postgres and MongoDB support it out of the box.
http://www.mailgun.com/ says up to 10k emails free. Mailgun was recently bought out by Rackspace so if you have Rackspace hosting you may get some incentive to use it. (No experience with any providers currently)
not sure you should be using SELECT to call a stored procedure. The select statement is already in the stored procedure and it will output the parameters automatically as part of the recordset. I haven't used PHP in years, but it seems to go against SQL protocol to do that. Can you do 'EXECUTE' ?
Mandrill is a type of monkey as it is owned by the rocket science group. I use Mandrill currently but have used Postmark App, Sendgrid, and others. Look into the docs and use what you find easiest. I use SwiftMailer as the mail library either way.
I gotchya -- I'm a notorious BC breaker and if it ain't bleeding edge I can't be bothered! I would recommend Requests to any security-conscious user without access to *5.4.next* and *5.5.next* ... which equates to, for the near future, most PHP installs.
Hey, nice website! :D
Aside from /u/reddeth's link I think part of the problem is that there are a lot of crappy php coders out there. There are a couple reasons for this. 1. Low barrier of entry. It's trivial to get PHP set up or get access to PHP. When I wanted to learn Rails, it took a couple sittings before I had a working ruby environment. 2. The language is forgiving and will almost always return something even if it's not quite correct. The combo of these two things makes it very attractive to novice coders. People who might never get a working ruby install will produce php code and it probably won't be pretty.
I use mandrill and it works great, I've never had a single issue. I use the SMTP server 99% of the time and have only experimented with the API but it was very simple to use. I also hate the sendgrid packages, I want to pay on a per message rate not on a prepackaged amount.
I use Mandrill. Their service is great, and the company is amazing. Not only do I love their products, but I also want to support them as a company. Also, as has been mentioned, it integrates perfectly with Mailchimp, so you can build your templates in Mailchimp and send them to Mandrill with a single click.
I see how it works, I see how it's implemented. What I don't see is why. Why would I want to do this? It seems like I lose a hell of a lot more than I gain. Aside from an interesting challenge I struggle to see the point.
It's not valid. There are arguments against PHP, legitimate weakenesses, etc. That article isn't them. It basically comes down to "I don't understand PHP so PHP is bad." and also "Loosely typed languages are bad because strong typing doesn't work omg". 
You can, I do, it's fast.
Thanks! :D
Much appreciated! =) Not surprisingly, after my reddit post, two-thirds of the resulting traffic was people trying to exploit it. To my knowledge, none have succeeded yet, and I think that's pretty cool!
May I suggest you look on Github for open source projects that you can contribute to? You'll be able to work at your own pace while still getting exposed to what it's like to work on a project that others work on too. 
&gt; interesting That's pretty much what I got out of it too. I can't imagine using it but I enjoyed the article.
I would talk with your host about it first-- they may be able to get you set up. On a related note, you don't necessarily need ssh to [set up a crontab](http://stackoverflow.com/questions/4421020/use-php-to-create-edit-and-delete-crontab-jobs). Even if PHP has functions disabled, cgi-bin may get you going as well. You may get in trouble for doing something your host doesn't want you to do. You may also run into issues if your website is moved to another server (they probably won't move the cronjob)
Being loosely typed language is actually a PLUS of php and it allows you to do things fast and easy. Of course if/when you need to compare the type of var you can use ===
I am using [Sendalytic](http://www.sendalytic.com/). Great app and scales real well. Also one of the only ones that provides a nice reporting interface. Haven't used Sendgrid enough to say for sure but it's worked for our team.
what kind of projects do you want to work on? ... what problem do you want to solve, and learn to code by busting your knuckles along the way?
My time is limited, but I'm happy to help if you need an experienced set of eyes, just give me a message :) BTW been coding for &gt;6 years in PHP (mainly in CMS and integration).
This is real good advise. You will be able to pull knowledge from an already established community. As [user/mukeshitt](http://www.reddit.com/user/mukeshitt) states it, It is propbably one of the better ways to get a good portfolio going and contributing to the world of opensource. Respect to anyone that does it.
Well, the weird thing about the project is that I'm not using any framework, and am sorta rolling my own in that regard. The PHP part I already know needs a good rewrite (or refactoring at least), but I want to know if my database is designed well enough or if I need to rewrite parts of it.. I use my database as a bit of an outline. Here's the database file: https://github.com/Tynach/Unite/blob/dimentions/database/rpsite.mysql What I do like about my little 'framework' is that it lets me just include a file at the top, which then creates a page object and enables output buffering, and then I can do whatever I want in the actual .php file the browser is asking for to generate the content of my page... And then when it's done, I have the destructor end the output buffering and package it up in a template file so that the content of the page is wrapped up in a full standard page template. It also lets me do logic for the title and other things inside the page itself; If I need to do a lot of logic just to figure out what title it is, I can even do that at the end, and it'll put the title in the right place. It also lets me format the output so it looks like nice and neat HTML. But, I would like to do it in a more sane way, and separate it all out into different folders - especially so that the browser/web server can only access one folder with all the pages that people would actually visit. My Git stuff is also really messed up... And I don't really like the name 'Unite' for it. The project itself is 'Dimentions', and the framework... I dunno. Main page is here: https://github.com/Tynach/Unite/tree/dimentions
&gt; I've done a little PHP stuff. &gt; If you have a large project You are not going to be very usefull to anybody serious if you are a PHP beginner. And for most projects what people are looking for is someone to write the docs ,unit testing ,ect ... Can you do that?
I'm building a small inventory website using the [Aura Framework](http://auraphp.com/). I could use some help if you into video gaming (It's related topic). you can PM me.
Checkout phpmentoring.org and their irc channel #phpmentoring on freenode (lots of noise though). We could do with promoting more of this kind of thing in the PHP community, see http://www.pairprogramwith.me/ and https://twitter.com/search?q=%23pairwithme&amp;src=hash for what others are doing.
I will have more of a look at it later, but glancing over some of the code I can give these opinions... * Some of the database tables *could* be combined (like the permissions) and use flags based on what each record would represent. Pro: cuts down on number of tables Con: scalabilty large rows = slownesses. * Use .inc for non-accessible pages, this is a security feature imo, cos its so easy to add a deny rule in apache/lighttpd etc. for anything ending in .inc but it can still be read by php. * Use a coding standard :) Just a personal preference from my pov, I use to hate them but using them professionally makes me cannot live without them (and looking at other projects ie. not yours makes me pull my hair out!) 
If you're looking to work on a project, look on Github for something that interests you and start fixing bugs or adding features and sending in Pull Requests (PRs). When you do this, you'll get an understanding of how the process works working on a bigger project. You should also link to your own Github account if you have one so people can see what you're made of.
Looks cool and I will check it out, but one thing jumped out at me in the README: &gt; At the moment I have only Windows available so only Windows is tested Check out [PuPHPet](https://puphpet.com/) and take a look at some tutorials about using Vagrant &amp; Puppet (e.g. [this video](https://www.youtube.com/watch?v=LfUubn4PrlI) and [this tutorial](http://www.reddit.com/r/PHP/comments/1m7r74/how_to_get_laravel_set_up_in_a_vm_using_puphpet/)). Vagrant will give you a Linux virtual machine on your desktop, so you can test against that.
I don't think that PaaS is the smoking gun that solves all things infrastructure but if your business depends on website / application up-time you'll need to start scaling your infrastructure at some point either to eliminate single points of failure, improve fault tolerance (less performance degredation should failure occur within any given part), improve availability (e.g. - clustered database or geographically diverse infrastructure), improve performance, etc. etc.. PaaS does help solve for those common things. It's the ever long pursuit of 100% up-time, how close and how much you spend adding 9's to your SLA is up to you. There are a few scenarios where PaaS isn't even an option but they are very few and far between, usually comes down to regulation and compliance. I see PaaS for what it is, you get deployment and management tools for cloud infrastructure with a slice of an operations team to manage and monitor it for you so that you can focus your resources on developing, assuming that's your gig. Sometimes you get into scenarios where the support from a PaaS isn't enough or your have some tricky infrastructure requirements that you don't want to tackle yourself but the PaaS won't handle either, that's when you pursue something like a managed services contract with a 3rd party. At some point you may reach an economy of scale or a specific set of requirements that require you to have your own team and manage everything. The real problem that PaaS addresses for startups and small companies is that hosting and infrastructure is always a cost centre for the business. It's a necessary expense. Assuming your team and your infrastructure shit is top notch, aside from operational efficiency in terms of *cost*, there is nothing gained from having the best infrastructure and team ever. Infrastructure will never improve profitability. The business is basically dependent upon you to provide reliable infrastructure, you either do it or you don't and the business suffers. Development / sales / marketing / features / everything else on the other hand actually contribute to making the business more profitable. This is largely the reason that working in operations is a total shit job, the whole point of it is to do more with less, end of story. There's no gains to be had, just improve efficiency, watch your friends and co-workers slowly get fired and that's it. There are a lot of organizations that try to distribute system admin / operations tasks evenly throughout their teams. Essentially, every developer is a bloody hybrid. Part developer, part operations. In many cases this is really short sighted and the business could benefit greatly from offloading their operations tasks on to a third party. It all depends but as a blanket statement I don't think that PaaS is a stepping stone, it's just another option. Re: Composer... that's just an entirely different issue.
Would you mind elaborating? This would be a tremendous help for me.
I would do that, if the references to the files were in simple fields. But often they are embedded in html content as src attributes to images, so a simple query will not point out the real usage locations/counts.
/r/jobs /r/work /r/freelance I'd consider hanging out with you for $15 / hour if you're feeling lonely. let me know. 
The funny part of your joke is pretty bad.
Hi Rusty, if you have a solid grasp on OOP and SOLID then forge ahead with something like Laravel or Symfony2 or Silex (just a few of the popular ones off the top of my head). If your OOP-fu needs work you'll probably get the most bang for your buck from just figuring that out first. Aside: You'll probably be told there's not point in creating a CMS and reinventing the wheel but as a learning exercise I think it's probably worthwhile. That, or even just a simple blog. Here's the defacto standard for Symfony blog tutorials... http://tutorial.symblog.co.uk/ And some more good stuff: http://net.tutsplus.com/tutorials/php/diving-into-symfony-2-2/ If you're going for Laravel there's a lot of great resources here: http://net.tutsplus.com/tag/laravel/ Also if you haven't yet used [Composer](http://getcomposer.org), you'll probably want to get up to speed on that real quick as well.
Why not go with an existing CMS foundation such as Drupal? The things you're describing are pretty common
I have seen this suggested here before, and may be an idea if you can not find someone to work with, but find a site/app and try to replicate it yourself. A good example is twitter. Build a form to accept a post, store it in the DB, pull the posts out. I'm mean that is a very basic explanation, but an ok starting point, and then build more features into it from there.
Oh, the small amount of experience I have is making a social network. Image upload, and thumbnail. comment on another person's page. Personal message. personal notebook. site-wide dictionary. Status updates. Only bad thing. I wrote it all the hard way...no framework. So that's what took up most of the time. 
Does anyone know why PhpUnit switched from a web interface like this one to purely command line? I kind of thing the web interface is better.
Is it so hard to demonstrate what it is that it actually does? I've read all the text from the link, and everything on the Github page, and I still have no idea what it is actually supposed to produce or provide. Saying "Skeleton Application" and "API" over and over does nothing, both of those are so generic that I could simply host a 2-line index.php and could rightfully call it a "skeleton api application".
Mandrill is excellent, gets the job done. Mailgun is also a great alternative worth checking out.
Honestly, this sounds like a situation where you should be searching for 2 or 3 people. A person with that amount of experience is going to see this as a red flag that you don't know how to structure a team. And, more importantly, are setting him/her up to fail, or at least not thrive. Good luck.
do you see the video? http://www.apigility.org/get-started-video.html
We use Amazon SES for our transactional emails. Dirt cheap, high availability, and haven't had any delivery issues in over a year of using them (About 750,000 emails per day across our network)
You don't actually freelance at $15 an hour, do you? Thats pretty cheap.
I'm not the best paid friend out there. 
Thanks for the feedback, I'm recruiting on behalf of another company, I'll pass that feedback along.
Better for what? If you are sitting in console all day playing with git why would you want to open a browser to view bunch of color coded tests instead of having a list of failed/passed tests within your shell? Also if you do CI, you would simply get a message that build is not passing due to failed unit test xyz which you can figure out on your own. This does not even look that nice, if anything it's more confusing and has too much extra visual data than console. Just saying.
Ya, maybe my projects have all been small enough that web is just simpler. Plus how can you test session, cookie, and IP address related things in cmd?
Ouch. Sorry man.
Want to help me with feed2js.org? It's an open source project (the site gets over 3 million hits a day). The RSS PHP compiler needs redone (or updated). I think it uses magpie. It also needs generally cleaned up, updated, or improved. Open to all/any of the above, since the project has become somewhat stagnant as of late. Again... that doesn't mean it isn't a worthwhile or a USED piece of software. Feed2JS is the #1 RSS 2 JS script out there, and used by some very big sites to convert RSS feeds to a small javascript applet for their site. I'm currently the webmaster/programmer of the project as the original creator Alan (http://cogdogblog.com/) has backed off in interest of other projects. I haven't been able to give much effort development wise as I just started with a new company as their PHP developer (digital signage). But I could certainly assist you or brain storm/help as needed. Github here: https://github.com/cogdog/feed2js Check out the site here and let me know: www.feed2js.org.
Fantastic. I am very glad to see that it properly supports the pipe operator in types, though I wonder if it allows them nested (e.g. (string|MyObject)[]|MyArrayObject) and I wonder if it supports "self" and "static" instead of just $this. It is definitely a prettier alternative to apigen and the hash-based URL's are a nice alternative to the many HTML files generated by apigen.
&gt; Functional Programming takes away assignment and mutable state. No. &gt; In functional programming *everything is a function* No. &gt; In functional programming, you have no data represented by variables. There are no data containers No. &gt; I’ve put “variables” between quotes because in functional programming they are *immutable*. No. &gt; Because you don’t have values assigned to variables, in functional programming you have no state. No. &gt; Finally, because we have no values in variables, while and for loops are unusual to functional programming and are replaced with recursion. No. &gt; We have no variable containing the value one or having a state of one. No state, no assignment, no mutability, no loops. No. I appreciate that he tries to inspire others to functional programming, but he obviously is fairly new to the idea because he conflates many things together, has a personal interpretation of things; and overall he still has just a rough idea of what functional programming is. There is assignment and state in functional programming; not everything is a function, because code without data is nothing. Immutability is not a strict functional language requirement. You can assign values to variables, or values (if we speak immutable). While and for loops are not used because of the implied cause, they are not used because there are better idioms for iteration. I'd urge people to seek out other material in order to learn functional programming, because this will only create more confusion than benefit to the reader.
An addendum to everything everyone has said in this thread: People nay-say PHP because they want to validate their language of choice.
Eh, you can do same things in a shell and it will be faster and cause less disruption. I'm not even sure you need to view tests in browser because most of a time you will know what's wrong without red/green screaming at you. I'm not a fan of var_dumping in a browser or console that not a really good debugging approach. I know some people will like this but I don't see the benefit from my end, not taking anything away from you or this project. 
...to waste their time? Even professional apprenticeships expect a base level of knowledge on a given subject.
&gt; (string|MyObject)[]|MyArrayObject string[]|MyObject[]|MyArrayObject should work &gt; I wonder if it supports "self" and "static" There is no self. For example you can't refer to a method of a class like this "{@see self::someOtherMethod()}", but there is no point also because you can just type "{@see someOtherMethod()}" and it will be looked up in the same context first, that is the same class, then the same namespace and then the global namespace. There is "@return $this", which is meant to indicate a chainable method but there is no special handling about it ATM. Static stuff is supported. &gt; hash-based URL's are a nice alternative to the many HTML files generated by apigen There are many JSON files generated though. This is for performance reasons - although there is no problem to stuff everything in a single JSON and make it work with minimal changes, this JSON could possibly be huge and lot of small files are loaded very quickly on demand.
But he's not asking for pay or anything, just to learn new thigs working with someone.
&gt;I've built a basic social network just ... stop &gt;I know that a lot of people that work as programmers do not actually have too much knowledge in their field. Are you on glue? Yes, you get some people who slip through the cracks, but that really doesn't describe the great majority of programmers.
I didn't read the readme, just browsed through real quick. But I'd imagine IDE or text editor integration is easier with a CLI application. As /u/bobef said TDD is easy you just refresh the browser, what's even easier is just saving the file and having it run the tests.
looks cool, my only suggestion is to have separate true/false asserting functions. It's all to easy to create a broken test... for example: testCase('My Test', function () { test($object-&gt;shouldReturnTrue()); //pass test(!$object-&gt;shouldReturnFalse()); //pass test($object-&gt;shouldReturnFalseButReturnsTrue()); //pass } ); It's hard to see the test is broken here, compared to this: testCase('My Test', function () { testTrue($object-&gt;shouldReturnTrue()); //pass testFalse($object-&gt;shouldReturnFalse()); //pass testFalse($object-&gt;shouldReturnFalseButReturnsTrue()); //fail } ); 
The article is valid. PHP is badly designed. A better description is that PHP wasn't designed. It just kind of happened over the course of the years.
This. My first functional-ish language was XSL and when I saw the line about not assigning values to variables I just kind of sighed.
Here is a good start http://www.phptherightway.com/
You make an API framework... **and you base it on Zend!?**
Loose typing causes tons of bugs and has negligible benefit (you don't have to explicitly cast things). Why do you think it's good? 
If you want to understand people's criticisms, you should expand your world. Learn some python, some c, some java, some haskell, and understand how others have approached problems. Many of php's language design issues come from a lack of forethought - things appear to have been done on a whim without any clear vision for the project. You can see how this lack of leadership is still plaguing development today by all the php-internals drama that's been leaking out. 
Whats your suggestion? I don't see any wrong with they using their framework :) It's like "Symfony made a CMF and they based it on Symfony?" :P But thanks to PSR-0 it should be "easy" to integrate with other PSR-0 libraries
Seriously...just write it twice. The only thing that (front end) Javascript should be validating is trivial stuff like (is x a number/5 letter string/etc). This is only for user convenience. Write the real, serious validation on the server in PHP and add the trivial stuff when you need it.
&gt; I'd urge people to seek out other material in order to learn functional programming, because this will only create more confusion than benefit to the reader. Do you have any suggestions? It seemed like all those rules backed him into a corner that, while maybe ok for the whole mathematical set concept, made it impractical for regular usage. The code was unique enough that it piqued my interest, but I'd like to see a more practical application of some of those concepts.
Duplicate of http://www.reddit.com/r/PHP/comments/1nr842/abstract_classes_abstract_methods_interfaces_what/.
(string|MyObject)[]|MyArrayObject and string[]|MyObject[]|MyArrayObject are not the same thing. The former says an array of either string or MyObject, or a MyArrayObject instance. The latter says an array of all strings, an array of all MyObject, or a MyArrayObject Self is helpful for saying "same type but not necessarily same instance that this method is DEFINED in" (e.g. copy-on-write API's that clone $this) whereas static is helpful for saying "same type but not necessarily same instance that this method is CALLED on". At least I think that's right (I base it on PHPStorm's inference engine which may not be right).
Yes I re-shared it, believe me its LEGAL! :D
Can't tell if title contains double entendre...
People still use global in functions?
I am a fan of writing it once, solely in PHP like this. When the form is submitted (ajax), I will validate and respond with errors or success. Much easier. Ultimately doing it on the server is the most important because anyone can skip client side validation if they know JS.
Well worpress does :) for good reasons
That's exatly what we looking for. We tried an exec, a shell_exec but we don't know how to capture output during the query by Ajax. We can have output return after the job his done but not before. We tried a progress event but in fact it's not an upload or a download event, it's just a function which execute cmd which respond text. **Function and GET page convert** $cmd = "avconv -i test.mp4 convert.avi 2&gt;&amp;1"; $stream = ssh2_exec($ssh-&gt;getConn(),$cmd); if(!$stream) { throw new SshException("Error in command "); } else { stream_set_blocking ( $stream, true ); $data=""; while ($buf = fread($stream,4096)) { $data .= $buf; echo $buf; } fclose ( $stream ); **View Test** function load() { $.ajax({ xhr: function() { var xhr = new window.XMLHttpRequest(); //Upload progress xhr.upload.addEventListener("progress", function(evt){ if (evt.lengthComputable) { var percentComplete = evt.loaded / evt.total; $("#test").text(percentComplete ); } }, false); //Download progress xhr.addEventListener("progress", updateProgress, false); return xhr; }, url: 'localhost/admin/convert', type: 'GET', dataType: 'html', data: { }, success: function (retour) { $("#test").append("SUCCES !!"); }, error: function(retour) { alert('Erreur : ' + retour.responseText); }, }) } function updateProgress (evt){ var percentComplete = evt.loaded / evt.total; console.log(percentComplete); $("#test").text(percentComplete); The result of GET request GET http://localhost/convert 200 OK 201ms Response : avconv version 9.8, Copyright (c) 2000-2013 the Libav developers ...... So the question is : How use the response during the query execution in ajax with GET or POST request ?
Care to elaborate on the reasons why you think that might be a bad idea?
You guys should talk. It is not a yes or no thing, it is a trade off. The awesome part is that the form validation always line up. It may be a productivity booster as well (less code to write and maintain). The code could turn into a mess. Maybe performance could be an issue? What I'm trying to say is that you should discuss it, and figure out if it seems like a reasonable route to follow, given the use-cases you have. Build a prototype perhaps?
What is wrong with Zend Framework? Edit: Also, the creator of Apigility (Matthew Weier O'Phinney) is a long time Zend Framework contributor.
It was discussed. But since you insist on flogging the dead horse: Booting a VM, or otherwise emulating a JavaScript parser for the sake of saving a few lines of PHP is horrible to the point of hilarity. It's simply lazy to insist on such a wasteful approach, when the same validation will take no more than a handful of PHP code. Edit: don't mean for this to sound harsh or anything. There's a fine line between how the response to this kind of question can sound and how harsh it should sound. A very fine line.
I think this is kinda what you were saying, but I think it bears repeating/clarifying - Always have all validation on the server, have validation on the client-side as an 'also' and 'nice to have'.
To me OP's post suggested otherwise, obviously. Can I assume you are the co-worker or are you guessing, as I am? (I'm rhetorical) This is very application specific. Some validation processes are quite complex. Do you have any data/experience to back your strong opinions? Side note: have you thought about this as meta programming?
Yes, you'd still have to work out where to store the old data. Also you'd have to devise a cheap way of checking to see if it had been updated. However, are you really sure this optimisation is worth it. A better computer scientist than me said: "We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil" So: * Do not optimise unless you are sure it's necessary. * Do not optimise what you think is slowest, test first - see what's slow under what conditions. * Consider the likely savings that are made and whether the optimisation you are making is an efficient way of getting the performance you want. * Use existing solutions - many problems have been solved in places where they have the resources and necessity to test it. Facebook uses memcache (or used to at least). There are much bigger WordPress sites than yours, how do they solve it.
One option is to retrieve the dataset you need, and stuff it into memcache (either as a raw array, JSON etc). Then your PHP page checks memcache, and uses that instead of the database. To handle expiration you can either set an expiry time on the memcache entry (maybe a few hours), or automate the process so that when your database is updated it removes the key from memcache. It depends how 'fresh' you want a page load to be after data has been updated. But there is a good chance you are over-engineering this. Most database servers (MySQL included) already include a query cache, which will relieve a lot of the load of parsing and retrieving the data. Since its only updated every few days this cache could be very effective (however, in the case of MySQL the query cache is cleared out *every time* that table is updated). Retrieving data from a database on every page load is typically how websites work. Add caching ONLY if you've identified theres a performance problem in retrieving this data, and then only after you've optimised the query and indices, to make sure it cant perform any better than it does.
Wow, thank you for this. I prefer to run a windows environment and I'm constantly wrestling with either xampp or a virtualbox instance of Linux to develop with symfony and it's console commands. Puphet looks like it could really help me.
why can't there be something in browsers that check a "cache variable" within the site. 1. Say chrome loads a site 2. Chrome checks a "cache variable" on the site 3. If the "cache variable" on the site doesn't match the browser "cache variable" then flush the cache and reload the site. Am I missing something?
"why can't there be something in browsers that check a "cache variable" within the site." There is. They're called cache headers. http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/ It's typically used with static assets, but there are ways to apply it to database resources as well. http://www.codeforest.net/cache-for-your-database-queries 
I thought the wp caching plugins were time based. maybe I didn't look into it enough =\
Ha, I never realized that was a [legitimate quote](http://martinfowler.com/bliki/TwoHardThings.html). I'd only heard the joke version: &gt; There are only two hard things in computer science: cache invalidation, naming things, and off-by-one errors.
If you are writing queries directly, maybe you could use SELECT SQL_CACHE a,b,c FROM table WHERE 1 and let the mysql server handle the caching for you.
W3 total cache if its really just wordpress page it can write static files or use memcache
Yes, that's caching. Try [WordPress Object Cache](http://codex.wordpress.org/Class_Reference/WP_Object_Cache#Persistent_Caching) and [WordPress Transient API] (http://codex.wordpress.org/Transients_API) 
I have this on my door. Someone said they didn't understand technical stuff and wanted me to explain it.
Don't do this. You're still wasting time initiating a connection to the DB, and also the time it takes to execute that command. The output of the query should be cached somewhere like memcached or the apc user cache. When the data is updated, empty the cache so that a callout can be made to the DB server.
Should work like this generally (really abstract here, but things like memcached, apc have methods to store/erase cache): On read: $cache_key = "figure out some cache key"; If (cacheHasData($cache_key)) { $data = json_decode(getCachedData($cache_key)); } else { $data = getDatafromDB() cacheData($cache_key, json_encode($data)); } On write (update): $cache_key = "cache key from above"; eraseCacheKey($cache_key); Basically, you want to spare yourself from calling the database at all, only grabbing data from it when necessary. Also note that this is one layer of caching. You can go one further by caching the HTML output of the page if it rarely ever changes as well. Some people save the output to a static html file and read from that file if it is present. 
It's pure PHP so it supports any OS/webserver. You may check the requirements in the [composer file](https://github.com/zfcampus/zf-apigility-skeleton/blob/master/composer.json).
I don't think that ZF is complex than the others. The console come a little late and the ZF1 docs as a framework was a little messy (ZF1 was conceded as a glue-framework so every component could work separated). I still prefer Sf2 though.
That's an awesome improvement! I'm not extremely familiar with caching, only listened to a few podcasts, but I believe that if there is no session data, which the web server itself can check before sending the request to PHP, then you would use the cached content. If there is session data, i.e. a user is logged in, then you would have the server query PHP. I really don't know any details beyond that though.
We outlined a proposal to fix the problem by checking cookies and extending the caching(with a proper backend, no spider) to the entire site (massive corporate content site) but the company was not willing to give us the budget.
I believe I have developed a plugin that is exactly what you need. https://github.com/BenjaminAdams/wp-redis-cache. It uses redis to cache the entire page and then serves the page directly from memory. If you need any help setting it up give me a PM.
Hi, thanks for taking a look :) I don't really mean to detract from OP's thread, but I appreciate any help I can get. * The problem with the database thing is that I don't know what the permissions actually will be yet. Also, I've met a LOT of roleplayers out there... And there is no central gathering place. I imagine the site could, potentially, get at least as much traffic as 4chan. Things need to be fast and scalable. * I was thinking of that, but I decided it'd be better to just make sure that the include files are not in the same folder (and thus not accessible from the outside world). I've yet to implement this, obviously, but this is what is planned. * I'm not sure what you mean by a coding standard. Do you mean the indentation style, or the function/variable naming? Or, something else?
I think you want to look into [Varnish](https://www.varnish-software.com/static/book/index.html). Go through the book and get acquainted with the http headers involved in http caching when communicating with a reverse proxy. You will probably want to look into these headers: `cache-control` `last-modified` `etag` Then google "varnish wordpress". Good luck!
to make wpdb available which is object to perform database operations. If you read about variable scope http://php.net/manual/en/language.variables.scope.php global keyword can come handy
I didn't mention writing to the FS in this reply. I did recommend it for full HTML output though in an earlier one, but that would be the recommended approach in that scenario before applying a proxy that would cache output like Varnish/Squid/etc. Reading from in memory-cache like memcached/apc would be significantly significantly faster compared to the time it takes to to initiate a TCP/socket connection to the DB and then to have the DB perform the query.
@jtreminio This is not my website, I liked the article it is just that
Not just a sarcastic remark. Zend is slow, very slow. While it's not as bad as using SOAP as your API, it's still very slow to build anything RESTful on it. I'm an 'evangelist' of sort for API-centric development, where everything in your software works through the API and where API is not just another layer, but the very core of your software. And if all of your components use API, then performance is so very critical. And Zend is not just slow, it is one of the slowest, heaviest frameworks out there.
It's really about how slow Zend is. I recently wrote an article about API-centric development [here](http://waher.net/archives/1158) and it's really important that for an API-centric development, you need something fast and efficient, because an API is at the very core of your software.
A bit slower is an understatement, Zend is really really slow. Like CakePHP slow. I highly advocate for API-centric software development, where API is the very core of whatever you build and all components and functionality is driven through API (read more about it [here](http://waher.net/archives/1158)). Zend is simply not fast enough.
It's really about how slow Zend is. I recently wrote an article about API-centric development [here](http://waher.net/archives/1158) and it's really important that for an API-centric development, you need something fast and efficient, because API is at the very core of your software. If you try that approach with Zend, you're shooting yourself in the foot, because every request and UI component would become exponentially slow with Zend, if using it for API-centric software.
not sure why you're getting downvoted. this is a perfectly reasonable answer.
&gt; somewhere like memcached or the apc user cache. or just the file system. don't forget, *nix automatically keeps frequently accessed files cached in memory, so file system caching is generally faster than memcached (since file system doesn't suffer from network latency) 
I thought it all made sense until you you started asking all these questions. I am going to throw some stuff out there based on what I have learned. Personally I don't abstract this much, but in theory, it shouldn't matter what is returned through the repository functions. They should all behave the same way and be completely interchangeable without modification of current code, either as objects or as stdclasses (Liskov Principle). The problem arises because you know an Eloquent object has functions tied to it, and they are easy to use, and other sorts of classes won't have those functions to make it easy, so the repository needs to have those functions available for you to call. Rather than this: $post=$this-&gt;post-&gt;find(1); $post-&gt;changed=true; $post-&gt;save(); You would need to do something like this: $post=$this-&gt;post-&gt;find(1); $post-&gt;changed=true; $this-&gt;post-&gt;save($post); Essentially Eloquent classes can be treated like a typical StdObject if you want. Again, as much as I want to do this sort of thing, I don't. I find Eloquent fits just fine for me at this time. I do however see the benefit of adapters/repositories for switching between Memcached and Redis, as that is what I am thinking about doing with a current app I have. But if I had done the abstractions in the past, it would be easy to plug and play, so... you live and you learn. What you should read up on, if this interests you, is SOLID Programming. Taylor Otwell goes into depth on these principles specifically related to Laravel in his book.
It's still slow. I've tested this. Reading from FS is around 80ms, while apc user cache might be 10-20ish. I generally use XDebug profiler to profile and get numbers for this. Source: I wrote the system that deals with processing tons of content for Yahoo properties, and my caching tiers generally works like this: APC (If available) -&gt; memcache remote (if avail) -&gt; Filesystem I agree though, FS would win out if network latency on memcache is too high for it to be effective, but APC will always win out because it's local, but then you're also bound to local system memory and can't do replication of cached data, but its no different than a FS read at that point
What are the benefits of using this new Google service?
Maybe try using Redis as a cache layer. It handles increments/decriments easily. You can key it against the name to the reference and the value would be the count. Then you can call a Redis function to do the incr/decr when necessary. I would basically have a caching layer that first checks redis if your reference key exists, and if not, pull the count from the db and populate the key with that count. When updates need to be made to the reference, update the redis key, but then you want to run some kind of process in the background that would update the DB itself with the new value (I recommend using a message queue like RabbitMQ/ZeroMQ for this) to keep things in sync. The idea is that you use the caching layer to manage performance/values on the user-facing side, and do the heavy lifting in the background via message queue, away from the app.
Sorry, you mentioned keeps the files cached in memory. I don't remember that fact to prove or disprove you on it, but if what you say is true then it should be on par with using something like apc user cache. I just didn't encounter that fast of a read from FS in my own testing.
Came here to say this. Varnish will do this for you once properly installed 
I think this is a common thing to stumble upon if you're using an ActiveRecord style ORM, things make a little more sense if you go for the DataMapper kind. As others have commented, perhaps stay clear of the persistence methods on the eloquent objects and just treat them like plain old PHP objects to maintain some sort of abstraction.
Sounds like it's basically Google's cloud servers. I think, instead of hosting on one server at say Godaddy or wherever, by using these services, your site can create many instances of virtual servers to be able to scale up to handle a crazy influx of web clients (for example as a result of a TV commercial let's say) and they charge you for use so during the time when it's mad busy, it spins up multiple virtual servers so your web clients are getting served quickly.... Later, when hardly anyone is visiting your site because the launch isn't being marketed, you're also paying for the amount of actual use, so the costs then go down significantly. Please correct me if I'm wrong. I'm being bold in throwing out what I think so that I can be corrected, if need be, and therefore, I learn too. :) 
I've never used Eloquent, so maybe my answer is off, but here is a suggestion: Maybe Eloquent is not good for you if you want to abstract it away. If your model classes inherit from Eloquent classes, then there's nothing you can do to abstract Eloquent. With Doctrine on the other hand, you write your model classes without extending anything from Doctrine. So I can have a DbRepository or InMemoryRepository, they will both return an array of my model classes.
So your concern is performance. In that case, do a performance test.
4) You really don't :)
That's about the size of it, I think. As I understand it, this is what's called Platform as a Service. All you want is a server that runs PHP and scales up and down with your needs - you don't care about being an Apache admin or all the other stuff - so this is what Google offers here. Build your PHP app, don't worry about the rest of the stuff, you only pay for server/bandwidth capacity when you need it. 
Anybody have real world experience with [Google App Engine pricing](https://cloud.google.com/pricing/)? I have only been on fixed price dedicated servers or VPS.
Finally, a comment from you that I can upvote. :) Hoping to see more comments like this. (Not being sarcastic!)
Yes, service locators have long been considered anti-patterns. Nothing new here. 
all what ChiangRai said and GAE takes care of security, DDoS, load balancing, ... all things that would require quite some time to implement on a EC2 instance. it also comes with it's own services that can be used out of the box like memcache, taskqueues, mail (we talking about mass mail). GAE Python and Go have more services to use, so i think the GAE PHP will steadily release new stuff. i haven't deployed a PHP app to GAE yet, so i don't know how strongly coupled the code is to the GAE platform. on GAE Python you pretty much can't deploy 1:1 your code to another 'normal' hoster, since you're using quite some GAE specific modules.
excluding Phalcon (for obvious reasons), what other PHP framework is too much faster than ZF2?
There are a lot of benchmarks out there, but this is the first I found: http://systemsarchitect.net/performance-benchmark-of-popular-php-frameworks/ Don't get me wrong, Zend is a great framework, but it is not built for modern RESTful web services and API-centric websites.
There are a lot of benchmarks out there, but this is the first I found: http://systemsarchitect.net/performance-benchmark-of-popular-php-frameworks/ Don't get me wrong, Zend is a great framework, but it is not built for modern RESTful web services and API-centric websites.
I think you would also need a ModelAdapter class for setting/getting values from your model objects. I like this approach though. This, combined with keeping your event triggers out of the persistence layer, seems to make the most sense
Like the singleton, injecting the container into the constructor (or elsewhere) seems necessary and useful *just this once* many times. But, also like the singleton, usually it's because the developer (usually me) is being short-sighted and lazy.
thanks for the response. your example code is super confusing though. You have a controller and two models named "Post" and in one of your Post model classes, your repo is name $post. I think i understand what you're trying to accomplish though 
Or, you could use a proper profiler like xdebug or xhprof instead. 
Well, this works when you cannot install a plugin
Like shared hosting. . . *shudders*
Install the plugin in your dev environment then. Xdebug should never run in production anyway.
I'm just finding out the total ball-ache shared hosting is. That'll teach me for not looking into it a bit better.........
I use xdebug to have better info on the errors. I just found out i can use it also as a profiler. The beauty of it all is that you can either use a plugin, or a few lines of code. You are free to do wtf you want.
I wanted to help but `global` aaaaand im out.
Oh so you are one of those...
Hoping for interesting responses: Why *not* use it in production? 
Where the heck is the 'µ' character on my keyboard?
Neat
Are you guys seriously circle jerking over a basic magic method implementation because it's written in one line?
I submitted a PR to remove 7 characters. You don't need the `static` keyword before the function declaration, as non static functions can be called statically with no errors/warnings/notices (the reverse is not true).
While it doesn't appear to be insecure, it is missing a lot of features you'd want in production (e.g. default callbacks if the URL isn't matched).
That's why we have namespaces.
Interesting way to determine the request method... getenv(REQUEST_METHOD) instead of $_SERVER['REQUEST_METHOD'] ...which works because PHP first interprets it as a constant, and if it's undefined assumes it's a string literal. Obviously a bit shorter, but kicks out a notice about the constant being undefined.
What exactly makes it a framework? Nowadays everybody seems to be calling their piece of code a framework... Why not call it "an API", "a SDK" or even better "a mainframe"?
relax... it's Wednesday... hump day... 
Next to the smiley face! ☺
there's a @ to squash those notices
those what?
It's definitely not any of those. But I agree, people call anything with a routing layer and _maybe_ a controller a micro-framework - which is annoying.
I see from your comment that you dislike the use of "global". 
God I hope they deprecate that damn operator at some point. I VERY rarely come across a situation where that operator is useful, and literally 100% of those cases can be solved with much better means. For more info, read the [second google result for why not to use "@"](http://derickrethans.nl/five-reasons-why-the-shutop-operator-should-be-avoided.html)
Not my comment, but yes. One should never (have to) use globals. Ever.
Well ContainerAwareness is bad in theory, but hardly avoidable in practice. You can make container agnostic classes only as long as they don't generate objects themselves. Symfony2 cheats sometimes by explicitly instantiating classes in some cases (e.g. the DoctrineType Field type instantiates a few hardcoded style, so there is no way of injecting your own. To solve this problem one could make all classes container aware, then you could override every class instantiation everywhere. You cna't have this high level of decouplement without such an approach (well at least until you consider injecting some sort of separate factories instead). 
Jajaj i'm such a whimp. Sorry for that response.
Opt-m on a Mac ("m" for "mu" which is how you pronounce µ)
The `return` is also unnecessary. 6 more characters off.
So the example is meant to switch out one of four different pictures. But instead of just uploading the image at four different sizes, it uses PHP to resize the file itself on the fly?
Interesting method to reduce the number of characters, but at what cost? A function call with an undefined constant that throws a notice that must be silenced by the error control operator is quite a bit slower than pulling a value from an array. 367ms (**361ms** with loop overhead removed): $start = microtime(true); for ($i = 0; $i &lt; 100000; $i ++) { @getenv(REQUEST_METHOD); } $end = microtime(true); echo ($end - $start) * 1000; 10ms (**4ms** with loop overhead removed): $start = microtime(true); for ($i = 0; $i &lt; 100000; $i ++) { $_SERVER['REQUEST_METHOD']; } $end = microtime(true); echo ($end - $start) * 1000;
Users like you make me fucking hate this site. "Best practises"? Fuck off moron. Get a life. When you work as a software developer and get to own a fucking enterprise, like I do, then lets talk about your (and I mean your and theirs) "best practices" fucker. I'm deleting this fucking account right now.
That is correct. Once the resizing is done, the new image is saved for future use so the resizing to that size never has to happen again.
&gt; But instead of just uploading the image at four different sizes, it uses PHP to resize the file itself on the fly? If generating the versions dynamically is a requirement, a better approach would be to either generate them when initially first requested and write the output to disk to use upon subsequent requests, or generate the images when the image was first uploaded. 
Well, that couldn't have worked out better for everyone. 
I looked at the interface and it was just as daunting as setting up an EC2 instance, except I could install and setup anything I want in an EC2. Here it seems there's a "google way" to do everything which is almost impossible to determine for your particular case, unless you've already tried and failed with it. The pricing is prohibitive to be screwing around with anything substantial. If you spin up a Google App engine with all the basic services I need and leave it for a month, I'm afraid I'd get a bill for over 20$ where an equivalent EC2 doing nothing will be around 3$ (variable on instance size). That's a huge jump and risk I have no interest in "trying".
Ah yeah, that would do it :) damn you and your SSD
&gt;a better approach would be to either generate them when initially first requested Better than just generating on the fly for each request, that is.
I've done something similar, although honestly I don't remember what forum package it was. Surely either vBulletin or phpBB. Doesn't really matter, the process is going to be the same. Treat the e-commerce portion as the "master" and the forum as the "slave." Users should register through the store, not the forum; this means you need to disable the ability for people to sign up directly in the forum (any popular forum has this ability built-in). You'll need to dig into the forum code to see how it handles user registration, and then simulate a new registration when someone signs up for the store. The two challenges are going to be "how does the forum handle passwords?" and "aside from the user table, what else gets created for a new user?" The forum I worked with had about 5 different tables that I had to drop a row into (user, settings, login session, subscribed threads, etc.) each time I added a new user.
I did something similiar to this once, first chose the "master application" for example lets pick magento, you would then need to find the code that creates the user in magento, and add a call to create the other user accounts in the "slave" applications (phpbb), you would need to add code to all of the areas that affect user account, logging in to the store, also call log in for forum, editing profile, etc. Then you would disable/remove all links to duplicate functions in the slave applications, you would never want someone to be able to accidently de-sync everything. This is the basic logic I used, I made a stand alone class to call from within the master application so that I was only adding a few lines to the applications, and it should make future maintenance easier. You will need to become intimately familiar with all of the code bases because you will need to get all of their user handling in sync. (specifically session lengths, you want them to all expire at the same time) I hope that is helpful.
DbOrderRepository and FileOrderRepository should both implement the same OrderRepositoryInterface and both return collections of OrderInterface objects, where DbOrder and FileOrder both implement OrderInterface. There are no adapter adapters or anything else tricky going on here. You just need to make sure that all your adapters implement the same interface.
I would advise against hosting a forum on the same server that is running an e-commerce application. That said, you can still accomplish what you want to do, in the same way that /u/shaunc and /u/ichelo have suggested - you should just make sure that the code &amp; database for the forum reside on different servers than the e-commerce code &amp; database, and that the only way they talk to each other is for this one purpose. This makes session sharing a bit trickier, but not impossible. If the forum gets hacked, you really do not want your customers' e-commerce data to be at risk.
well... shit...
Well that escalated quickly.
Speed and clarity are two concepts which should (ideally) never be sacrificed in the name of shorter code.
uniqid() using "Extra entropy" mode is significantly faster than without?
He wrote that sentence.
A lot of people aren't aware of the `getenv` function which also prevents errors if the key is undefined so you don't need an `isset()` check. I actually [submitted](https://github.com/lastguest/mu/issues/1) this change.
But what is gained from waiting for some poor schlub to come with one of your specified resolutions rather than just putting all necessary sizes up in the first place?
[I made one](https://gist.github.com/Xeoncross/5357205) that had support for regex path matching - but no HTTP verbs.
I usually @mkdir stuffs , that's the only place where i would use it,but you're right, it should be deprecated then removed. The whole php error system(notice,warning,...) is silly , people should write correct code that doesnt issue notices or warnings,there should be only errors or exceptions.
Depends on where they are used. I say in controllers it's totally fine,since that's where you're going to use all your services. The alternative is lazy loading wich makes things over complicated and add yet another layer of complexity to an application.
i'm looking more into Doctorine and am liking what i see. It seems to separate its objects out in a much clearer manner.
Symfony Form actually has an internal service locator( or form type "resolver" ) (you instanciate formtypes through strings ,ex "text","choices",... ) , which makes things great since you can pass the arguments you want to the fieldtype constructor in the Form Extension class ( like database a connection , etc .... ),yet have a clean way of writing form classes. So you dont need to wire a formtype to a database in a controller. That's where PHP shines , structured enough when you need it , yet dynamic enough to pull these kinds of tricks (Wether it is on purpose or no i dont know though)
Even with those kinds of situations there are ways to convert errors to exceptions and catch the ones you are "expecting" to happen so that it still lets other errors through. (I think i once spent a good portion of time tracking down a permissions issue that wasn't throwing errors because someone used @mkdir) Also, the whole PHP half-error/half-exception system that they have going on and the wild variations between error levels for similar issues is a problem, but it's likely something that won't be fixed till PHP 6 because it involves re-working a good portion of the core libraries.
Agreed it's a horrible operator 
OP wrote code, people here is talking about code, what's the problem? You must really hate codegolf. /rebol
Not if you're Greek, or sympathize with Greek/English speakers who grew up annoyed with the weird pronunciations people have come up with. If you're interested it is pronounced "me".
What's gained is never having to deal with the actual image ever again. If, in a year, 10 new device resolutions/sizes come up, you can just add them to the list of requested sizes and you're good to go. No converting, resizing, reuploading, none of that. You never know what kind of sizes you'll need further down the road, and by then your designer might have carried on. What's more, if you decide you want to replace a photo, uploading one big original instead of the previous one and deleting all smaller versions is all it takes - everything else is taken care of automatically. 
I agree that it's fairly okay to have the container accessible from the controller. However, as I see it, the options you've listed aren't the only options for solving the problem. For instance, if you have an event-based architecture, you could have a service provider listen to the dispatching event and see if that controller implements a specific interface, and then inject the required resources from the container which the interface specifies.
Seems like [line 67](http://lxr.php.net/xref/PHP_5_5/ext/standard/uniqid.c#67) is the reason. About uniqid() performance in general - I guess gettimeofday() is slower than all the hashing in the real hashing functions like md5/shaX (though theoretically it shouldn't be, dunno)
Please keep outside drama outside of our sub. We have a strict professionalism requirement for commentors, to keep the quality of discussion high.
I apologize, that comment should probably have been a private message, as opposed to to a public reply. This user has been flaming people in multiple subreddits. I wanted to give him some praise for a good comment here, and didn't expect to get my head bit off.
not sure it would actually. once you have the file cached in RAM it wouldn't matter if you had an SSD or a mechanical drive - the file is being read from cache. [This article](http://stackoverflow.com/questions/7118543/does-the-linux-filesystem-cache-files-efficiently) is interesting. It mentions setting the noatime option on the drive to avoid continually invalidating the cache. 
The @ is to suppress the "undefined constant" notice, since `REQUEST_METHOD` should be quoted.
Where are the unit tests? I demand unit tests!
It seems you're correct. Maybe it's my testing methods that are of question at this point. Thanks!
µ Nice. Unfortunately at first I used command+m and minimized the window. 
Note that this only applies to Unix systems. uniqid() is fast on Windows. See https://github.com/nikic/PHP-Parser/pull/65#issuecomment-20908636 for more info.
Because it uses a lot of things you're not supposed to do in PHP. For example: getenv(REQUEST_METHOD) - Since the REQUEST_METHOD constant doesn't exists, PHP goes ahead and assumes you meant to make it a string. Usually this throws a notice, but this is suppressed by the @. Also the combination of getenv() and @ makes it significantly slower than just using $_SERVER.
Also you can just make the class not static, and then the function name is __call instead. Also you can use $_ENV instead of getenv. And finally you can use concatenation rather than a two-dimensional array.
This is super helpful- I was thinking to do something along these lines but now i have a much clearer picture of how to work it out. Thanks!
More importantly, he shouldn't be using any of those things for password hashing.
Yeah this is something I didnt consider - I will probably try to get it working on the same server first since it will be easier than worry about separation and security after. thanks!
This. Exactly fucking this. I'm really sorry to say this, but I see it every time any PHP vs The World argument comes up. Anyone who defends PHPs' honour very very clearly hasn't every used another programming language for web development.
Yes, that would be the smart thing to do. One important thing to note is that it's impossible to define an interface that enforces public properties. If I were you, I'd design the OrderInterface such that it uses the standard getter method style (e.g. `$order-&gt;getTotal()`) over Eloquent's public property style. It's trivial to adapt either style to the other, but only the method style can be enforced by the interface.
Well you can't provide "All required objects". Example: function getItems(){ $items = []; for($i=0;$i&lt;1000;$i++){ $items[] = new Item($i); } } How would you DI here? You would need to pass some sort of a way to create those Item instances.
&gt; Well you can't provide "All required objects". You're correct in the sense that yes, you need some way to be able to link up code that provides objects with the code that requires objects. &gt; How would you DI here? You've got to turn it around. Rather than doing DI inside the function, you need to do the injection on the function parameters (or object constructor parameters if you're using an object) so that interface ItemList { function getListOfItems(); } class Item { } class ItemDAO implements ItemList { function getListOfItems(){ //returns a list of items. } } function someFunctionThatNeedsItems(ItemList $itemList) { $items = $itemList-&gt;getListOfItems(); //Do something with items } $provider = new Auryn\Provider(); $provider-&gt;alias('ItemList', 'ItemDAO'); $provider-&gt;execute('someFunctionThatNeedsItems'); On the face of it, that code may look slightly pointless. But what it allows is you to do is actually inject the dependencies that your code relies on from the top level of your code. * For the production environment `ItemDAO` could fetch the items from the database. * To make a unit test for the function `someFunctionThatNeedsItems` we could hard code a list of items to test against. * If we found that that page was being hammered by large numbers of requests we could replace `ItemDAO` with `MemCachedItemDAO` that stores the list of items inside memcache rather than fetching them from the database each time. The nice thing is that the object (or function) that makes the 'ItemList' doesn't get called unless a function is executed that requires the `ItemList` to be instantiated, so the overhead for this style of DI is very small. 
This really seems much more convoluted than being container aware, really. So pointless really? I mean if the container will provide we with $container-&gt;make_item() function that's all I ever need. And I can achieve the very same results with this and its loads faster to do.
Cool stuff. I decided to try my hand at it. This is what I came up with: 90 bytes in total. &lt;?php function u($m,$c){$r='REQUEST_';$s=$_SERVER;$m==$s[$r.'METHOD'].' '.$s[$r.'URI']&amp;&amp;$c();} u('GET /m.php',function(){ echo '&lt;form method="post"&gt;&lt;input type="text" name="name"/&gt;&lt;/form&gt;'; }); u('POST /m.php',function(){ echo 'Hello '.$_POST['name'].'!'; }); ?&gt;
Sort of feel like the sucker here. Been using Sendgrid Lite for quite a long time and it's gotten the job done, reliably. Ends up costing me about $1 a month. Low demand usage though. A breakdown. - 1 million / m = Mandrill $197.60, Sendgrid Lite $100.00 - 3 million / m = Mandrill $498.20, Sendgrid Lite $300.00 I think the moment you want anything out of Sendgrid beyond a glorified SMTP relay, then the price skyrockets because those plans are more expensive per email sent than "lite". Edit: SwiftMailer is what I use. [SendGrid Lite](http://sendgrid.com/pricing/lite_plan) is sort of hard to find, and I don't know if they'd cut you off after sending millions of emails.
You are fairly consistent, but the code just looks hard to follow. If you pick/stick with one standard the code would just flow and it would be easier for new developers to join in at a later stage. Check out: http://pear.php.net/package/PHP_CodeSniffer/
Except maybe when the purpose is to fit in a tweet and not to actually be used by other people?
And still no datastore access.
I still don't quite understand what you mean by a 'code standard'.
Yes, you would need adapter cover like you describe. (This would probably be the repository itself.) Whether or not it's worth the effort depends on how bad you want POPO models, and how bad you want to use Eloquent for database access. FYI, I have seen this done, and it's really not bad. Look into the Zend hydrator, available as as standalone composer package, to greatly help in writing such adapter code.
Is there anyway you could provide a simple example of what you're talking about in your second paragraph?
&gt; I VERY rarely come across a situation where that operator is useful But it is still **useful**. Before you can get rid of it you need to get rid of all libraries that issue notices instead of just returning something.
/r/tinycode
Okay, so say you have a resource "Foo" which you wish to have accessible from your controller. Now say you have a "FooAwareInterface" which you can implement to facilitate the injection of a "Foo"-object. Now, in your "FooServiceProvider", imagine that besides registering a factory for "Foo" to the container, that you also add a listener listening for the dispatch event. Upon its dispatch, you retrieve the controller from the event object, and check if the controller implements "FooAwareInterface". If it does, you inject "Foo" into the controller. 
And I thought it was 'mew' like a cat.
I didn't read every post so I apologize if this is repeat info: Yes, that would be caching. There are 3 options that come to mind, but all would require a little work on your part. 1. Most simple: APC cache. You should install this on your system anyways, it will optimize and make your code run slightly faster. You can also use apc cache's methods in PHP to cache (or 'remember') something in the system's RAM, and set an expiration. Then, (and on every page load) use the function apc_exists to see if the 'key' you stored has a value attached (it is cached). If true, use apc_fetch to get the value, otherwise run your database query and store it with apc_store, and a timestamp of a couple hours, so the query runs once every couple hours. APC cache also has the most simple setup of any of the 3 packages I'm mentioning. If your server is restarted, the cache will be cleared - since it's stored in the RAM. 2. Memcached. More complicated to install and set up, but if you are thinking about scalability, memcached can be installed on a separate server entirely and act as a database. Memcached also stores in memory, so if the server is restarted, the cache will need to be rebuilt. 3. Redis. Redis setup / install is similar to memcached, but is easier to work with if you have more than one cache server, unless you're using elasticache with memcached on AWS. Most arguments online say Redis is better, but they all go down to micro-performance issues which you and I would never see a measurable impact on. It's preference. Redis has an advantage in the persistent storage field though, you can use it as a full key-value data store, and if the redis servers are restarted, the cache is not flushed. You can use it as a full, reliable database. All 3 options have their ups and downs. APC should always be installed. Redis or Memcached should be decided on once you need to scale. You should create a class to manage your cache, and modify the methods within when you move from APC caching to Redis or Memcached.
It doesn't say anywhere that this is being used for password hashing.
Thx, Phil. My post was full of sarcasm if you didn't notice:) I mean - all those buzzwords like "api", "sdk" or "whateverish"...
Write an MVC first. Save that as it's own thing. Then use that to build your CMS. Then you have two pieces of software! I wrote my own MVC a couple years ago, and it was the best time investment I've ever made. Seriously, I wrote it in 8 hours, and learned much about OOP. Every friend I've given it to for their own use says it's the best framework they've ever used, and the easiest to understand. I've since used that MVC on multiple web apps and sites, some of which get 10 million page views a day. I've built many CMS's on top of it. I guess what I'm saying - build your MVC and then use it on lots of things. You'll learn a lot in the process. Then give it to friends, and teach them how to use it, you'll learn even more, and you can improve your framework as you go. A tip as you build: Create a DAO (database access object) that contains all of your main database methods that is completely separate from your main model, and extend your main model from that. When you need to move from mysql to mysqli or PDO, you'll thank yourself.
&gt; I am a minority in my new development team regarding (strongly) preferred formatting style &gt; This will allow me to edit/create code in my preferred style, but then shift back to the team style before final testing and commit. Grow up and stop it. There's a team style. You work in a team. Get over yourself and even if their style is completely retarded (and I've seen some shockers) **use it**. &gt; I can't believe this isn't a common enough problem that there aren't lots of solutions to it That should have been a hint. You're basically doing it wrong.
Why cant you inject an ItemFactory into the object that contains the getItems function, via constructor? Then you can use it like function getItems(){ $items = []; for($i=0;$i&lt;1000;$i++){ $items[] = $this-&gt;itemFactory-&gt;getNewItem($i); } } or you can pass ItemFactory as an argument to getItems method and use it to create items.
both of us downvoted because "grow the fuck up" isn't the answer OP wanted.
Cool project. How big is the PHP executable that's interpreting it? It would be interesting to strip down the PHP source to the bare minimum required to operate this framework.
Love the concatenation thing; simple and doesn't affect the functionality at all. Also, if you don't care about the trigger function name, as long as it's 1 char long, you can check for `$n[1]` instead of `$n=='_'`
You can chop off 4 characters without using `$r` and `$s`: function u($m,$c){$m==$_SERVER['REQUEST_METHOD'].' '.$_SERVER['REQUEST_URI']&amp;&amp;$c();}
its a router :)
Basically it is just a set of rules to define how the code should be layed out or look. For example, (like you said) function names should be consistent, indentation should be consistent and code should be layed out in a particular format. Send me a pm (so we dont hijack this thread too much), I'm more than happy to explain it further :) 
I guess they never heard of a service container...
You should be specifying the dependencies in the constructor explicitly, rather than using some weird array. That way you actually know what has to be passed, rather than having to scan through the code of the whole class and see which properties are used. Honestly, from a maintenance perspective your constructor seems to be a lot more problematic than the `new`s in the other method.
I agree with that, also, I'd say that object1 and object 2 should be passed in at the constructor stage, as they are also just dependencies.
Agreed because this is the way Zend Framework 2 emphasize to inject the dependencies 
pronounced micro in german Oo
You could probably format on commit to the vcs? Or suck it up I guess is the consensus :p 
It is also the symbol for the SI prefix micro, µm, µl, µg etc.
&gt; Grow up and stop it. There's a team style. You work in a team. Get over yourself and even if their style is completely retarded (and I've seen some shockers) use it. herrakonna is trying to make use of it in a way that benefits the team while still keeping it easy for herrakonna to read and write. Personally, I have no idea what the differences are that are big enough to cause a problem while at the same time being simple enough to automate a changeover with a plugin. But I'm willing to take herrakonna's problem at face value. That said, I'm part of the text editor crowd, so I don't have any IDE plugin suggestions and can't help that way. I do, however, use Sublime Text 2 with the Reg Replace plugin to better format SQL I get from debug lines (i.e. inserting line breaks to make it easier to read.) Don't know if that sort of thing could be helpful to you or not.
Ha, wow. I didn't try that because I was so sure that using the variables to store those would use more character. Awesome. It goes to show that you really should try something even if you're sure it won't work.
wow xD, I have no words for this
I would love to hear someone's opinion who's already read this book.
I think an excellent start at understanding would be http://anantgarg.com/2009/03/13/write-your-own-php-mvc-framework-part-1/ (This is the place I started about 2 years ago) - Do not be afraid to stray away from the tutorial itself. Put your own spin on things if you want, you will end up learning more and you will have a more valuable end product than something produced from the tutorial.
There is a free sample available for downloading, but I would like to hear someone's opinion on the book anyway.
Considering the author that ISN'T TAYLOR OTWELL appears to have posted it, it sounds like it would be a good buy. Also Taylor Otwell is involved. Definitely sounds good. Doesn't sound finished yet. 
Thanks! This looks really comprehensive.
i know, but im just suprised about the different pronounciation
It's about 30% finished. :)
I'll be keeping an eye on this. I've been trying to learn more about Laravel, and this seems like it would be a good idea. Thanks for the link. :D
You're welcome. It gets a new chapter every 2 weeks, and the next one is due out next week.
You and me both :)
I'll only give one more warning in this respect. Please keep outside drama outside of our sub.
&gt; Retrieving data from a database on every page load is typically how websites work I think this is only valid if the site has very little traffic. Otherwise fetching from the database is usually a last resort if all other caches are invalid. 
Are you running php from the command line or through a web server? The directory (and file if it exists) should allow the user you are running either the command line or web server as to write to it. If you are running windows you might need some more permissions on creating files, I'm not sure if just write is good enough. Also, read this article, which will give you the real reason why you are not able to create that file http://stackoverflow.com/questions/1207583/how-to-output-the-reason-for-a-php-file-open-failure and http://php.net/manual/en/function.error-get-last.php Also, using die() is a practice I hate to see. You would have an easier time if you just threw an exception (which will halt the program just as well, but at least lets you catch it and gives you a line number) Anyway, try getting your program to output the real error, that would be really helpful. 
Ah, thanks for your help, I'm going to start reading the articles right now. I am using a XAMPP as my server. I'd like to learn more about using command line, any books or recommendations on where to start as all the books I have just use a web server. Is your dislike of die() your own personal preference or is it bad practice? I'm just following the O'Reilly book so I'm really not sure if I should stop using it. 
One last question; why can I read using 'r', but all the other's (r+, w, w+ etc.) throw an error?
That usually means you only have permission to read the contents of the directory but not write to it.
If you've just complete a basic course try this simple tutorial: http://phpixie.com/tutorials/learn-phpixie-in-30-minutes/ (I do believe its the easiest framework to learn and understand) I'd also suggest trying Symfony when you get your feet firm in web development. It's MUCH more complicated, but widely popular, highly testable and very flexible in the right hands. 
Symfony2 has a steep learning curve, but everyone I know who uses it (including myself) swears that it's made them a better programmer. I recommend it highly. 
I've completed some great projects with Yii and am looking forward to Yii 2 (beta at the end of this year). However if I made the decision to learn a different framework, I would recommend that one instead.
I would totally agree with sf2 making you a better programmer. You don't just learn the framework but also a bunch of advanced OOP architectural concepts and patterns, the stuff that you can take with you to other languages. Still I don't know about starting with sf2 for a developer at OP's level, I just think it could really be waay too much. I haven't tried Laravel but maybe best to start their, not to mention you will get familiar with some Symfony Components. Also you'll get introduced to a service container and DI I believe.
This, really. Why is PHPixie pos again?
I would also recommend Laravel 4. Not only does it have a lot of hype and support around it at the moment which is fairly legit, but it also uses Symfony2 components which in turn are also used by the Silex framework and the upcoming Drupal8. So if you get familiar with this stuff you can get better "mileage" from your knowledge. Plus, I have heard that Laravel has a lot of similarities to Ruby on Rails (I dont know from first hand though), so that is going to be another chunk of transferable knowledge. Other PHP frameworks can be great as well, but they are more "unique" and the time you spend getting familiar with them will kind of be locked into just that framework.
jeffrey way? oh crap. nice. I've been following his tutorials on nettuts. Very informative. Thanks for this, I didn't know he started his own site for it. 
I think I would try to code my own framework. Not to use in production mind you, but to at least learn how something like that would be made. I would start digging into other frameworks to see how they approached problems and solved them. Working like this will give you a good idea of how these frameworks are supposed to work, and which ones seem like the best for you.
a lot of people learned codeigniter to start, but it's based on old ideas and practices. also, there will probably be no further updates since ellis labs is dropping it, so it's safe to say this is a bad idea. some of the authors of codeigniter have expressed a lot of interest in laravel. that would be my suggestion to OP.
code ignitor is a bit old from a php perspective. I think it has had its time but it isn't really keeping up very well with what the new frameworks can offer.
I was actually expecting a lot more of these "here try this great framework everybody loves it please pay no attention to the fact that I'm the author" comments, pleasantly surprised it's just this one guy.
Well it is on my github account. I just didn't find it relevant to the topic. What would you like me to do? Include a signature with each comment?
I am a professional PHP web developer and the 3 frameworks we use the most are Drupal, CakePHP, and WordPress. Yes, I know you could argue the semantics of "framework" but being practical those are the 3 I use. Drupal for more or less 'out of the box' stuff and CakePHP for web services or more custom sites. WordPress is...kind of in between. It's really simple and well documented but limited.
From an employment level, check experience reqs on job boards. In my market, no framework even comes close to Symfony experience. But if you don't like it, don't force yourself to just for that reason.
I would recommend Laravel 4. It's easy to learn. I was a mediocre coder (still I am) and afraid to learn a framework because of I was thinking they were too complex for me but surprisingly It went really smooth, thanks to Laravel. I don't have enough knowledge or experience to tell you which one is good, fast etc... but I can tell Laravel has a easy learning curve.
Sorry you're getting downvoted for your opinion. You may want to take some time to dig into some of the more modern frameworks however. I use Laravel 4 heavily but even it is not always the right tool for the job. Explore your options so you have a bigger toolbelt to pull your tools from!
Just don't forget to make sure your short_tags setting is right or you will beat yourself to death trying to figure out what is wrong. 
Symfony, Yii, Laravel, Zend Framework, CakePHP, CodeIgniter they're all good choices from a framework to learn. Check their quick start and choose the one that you feel is easy for you. Any of them will teach the basic of a web framework and then you can switch from one to another.
Symfony, Yii, Laravel, Zend Framework, CakePHP, CodeIgniter they're all good choices from a framework to learn. Check their quick start and choose the one that you feel is easy for you. Any of them will teach the basic of a web framework and then you can switch from one to another.
Your recommendation is unlikely to be quoted on their website, that's for sure.
I'm a hobby programmer with some OOP background, been working with PHP for years but only recently delved into any serious projects. Everything is hand coded and works beautifully. However, in the interest of maintainability by others, I thought I would try some frameworks out recently. SF2 definitely has that steep learning curve, same with CodeIgniter. Yii and Laravel were easier to pick up, and seem decent. Laravel has some funny design choices (in my opinion) but seems to work. It's Eloquent ORM is very nice, easy to work with. 
Ellis lab is actually finding a new owner for it. I haven't tried Laravel yet, but I still think Codeigniter is a good start since it's easy to learn, and the principles are transferable to other frameworks. 
"I haven't tried Laravel but maybe best to start their [sic], not to mention you will get familiar with some Symfony Components. Also you'll get introduced to a service container and DI I believe." This. I love Symfony but I'm still trying to get my head 100% around it after over a year with it. For a beginner like the OP I would say go for something less daunting! I hear great things about Laravel. Apparently it has great documentation and has a lot of "magic" to hide some of the more complicated stuff.
I agree. I started learning Symfony back in the 1.3/1.4 days and remember it was a bit of a struggle (WTF are all these directories?! I'll never figure out where stuff is supposed to go!) but stick with it and eventually it'll all make real sense. Part of the struggle is you're actually learning both a framework and the various concepts that the framework uses at the same time - often you can't understand why something seems harder than it has to be or unintuitive until you understand the reason *why* it was done that way. Personally I would run thought the Symfony Tutorial at: http://tutorial.symblog.co.uk/ . It might be a little out of date (it was at one point but the comments help you out) but it'll teach you the basics.
I bought it. It's worth every cent. Can't wait for the chapter on AngularJS. :-) Great work mate!
I've never experienced any problems with short tags and Yii. What problems/issues have you faced?
While learning laravel, I found [this](http://www.codeforest.net/laravel4-simple-website-with-backend-1) to be the most comprehensive and helpful tutorial on the net. He also promotes some extremely helpful development patterns for developing with laravel.
Hmm, Taylor Otwell uses OSX as his primary OS. That seems to be common among Laravel developers and power users. Is there a reason for this? (Nothing against mac users, just curious)
Just bought one also. Never used angularjs before, but I'm relatively proficient in javascript. How would you say this book does if I'm inexperienced with angularjs?
It's listed in the "future topics" section. Definitely look out for that update! :)
Was setting up my dev box and somehow the short_tags setting in php.ini was jacked, it took me ages to figure out that was the cause of everything refusing to work.
I'm having a strange issue with this as well. I have a server where fopen('/path/file', 'w') fails with 'path or directory does not exist.' I've seen this with the r modes, but never w. Additionally, I've checked file_exists, is_directory, and is_writable with all reporting true. I've changed permissions on the file to 777 and the owner to match the web server. No security modules installed. Could this be a bad install?
Wait, is this Taylor? If so, thanks for making one kickass framework.
My reason for not using a mac is because I can't afford one. :(
XD
Another drop in the bucket for Yii/Laravel. Dey good.
Sounds like the perfect use case for [Vagrant](http://www.vagrantup.com/)!
Purchased. Thanks!
Here's a followup: https://medium.com/on-coding/eed0c059d4ee
You're welcome. :)
Need to drive a nail, use a hammer. Now you have two problems?!
Recently bought the Code Bright book and I'm so thankful for laravel. It's a great tool even for an avid coder like me with mostly private stuff to build. Will be buying this after christmas!
What would be neat is if we could register some functions which php would invoke after each object creation. Used with traits, you could have all your dependency injections in one place. spl_afterinstanciation_register(array('myDIC'), 'inject'); class myDIC{ public function inject($object){ $traits = class_uses($object); if(in_array('Database', $traits)){ $object-&gt;setDatabase($db); } } } trait Database{ private $_db public function setDatabase($db){ $this-&gt;_db = $db; } } Add some 'friend' classes to restrict the use of the setters and you can bring back the unwilling in the "injection" part of dependency injection.
i was dying to find project based book for laravel 4. I'm new to laravel 4 and MVC programming. is this book for me? thanks.
It is, but don't take my word for it. Check out the sample: http://samples.leanpub.com/laravel4cookbook-sample.pdf
// approach 1 $search = array(); for ($i = 1; $i++; $i &lt; 11) { $search[] = "[{$i}]"; } // approach 2 $search = array(); foreach (range(1, 10) as $i) { $search[] = "[{$i}]"; } // approach 3 $search = explode(";", "[" . join("];[", range(1, 10)) . "]"); // approach 4 *died of death*
I know where the joke comes from, it doesn't work at all for vagrant.
&gt;I don't totally get what is wrong with php String library consistency it is the first thing that makes me crazy even today. For example: [str_word_count](http://php.net/str_word_count) and [strcasecmp](http://php.net/strcasecmp). Make up your mind PHP !!! With or without underscore ? And it looks like [I'm not the only one]( http://phpsadness.com/) that feels this way .
yeah that about sums it up.. The PHP MVC frameworks uses the terms in "name only" and not in the original MVC specifications. "Those real programmers" that come from C etc like to bash PHP as a "fake everything" (same reason Codeigniter gets some bashing). Because they do a job well but don't do the latest greatest cool thing I learned last week so it must suck. 
I do agree that compiling all classes in your application is a terrible idea if you aren't actually using all of the classes, but compiling classes into a single file that optimizes for a specific use and falls back on a normal autoloader can yield better performance than just using an autoloader (classmap or otherwise). I built a tool specifically for this: https://github.com/mtdowling/ClassPreloader.
[Symfony Console Component](http://symfony.com/doc/master/components/console/introduction.html)
You obviously haven't read the article. That's why you will get downvoted
Nicce idea. I guess I could combine the Core of the PHPixie frameworkd into a single file. But at small class couunt ( &lt;100 ) there's really no point. Plus Xcache basically destroys any need for this.
Very mature.
And describing to me what could be expressed in a simple downvote is?
Been using the Symfony console forever now. It's awesome.
I thought the joke was: There are only 2 hard things in web development: cache-ing! 
You turn on ad-block and don't worry about them any more?
What top overlay?
Actually, you can just ./artisan [whatever] on most systems. It has a shebang, unless I'm mistaken.
Step 1: Move your business logic as far from the framework as you can. Step 2: Switch frameworks, which should now be a matter of hooking up your business logic to the framework--a considerably easier task. Step 3: Profit.
basis of web, handle url and requests from it, handle data connection, create forms and views. you could possibly find all those pieces out there... like redbean for ORM, another library to handle your forms... etc The funny part I find with "framework debates" is I still spend all my time making the actual Javascript do what it needs to do (bootstrap, foundation, jquery, ajax) and the php almost becomes secondary 
You basically want an n-tier architecture. This how you should actually develop all your apps right from the start. Nothing new here. a framework is just a set of tools that make working with the HTTP layer easier, nothing more.
You're welcome!
I just can't get into Vagrant. It's really slow for me and I really like the VM setup I already have so haven't really been that driven to make Vagrant work how I want.
I'm not talking about types themself , i'm talking about how you register form extensions. You get the form type through a string, which is a service locator pattern.
how would this be useful if you are using Bootstrap or Foundation. The pictures change dynamically for display. Very incrementally(if that is a word). You would end up with 100 image sizes at the dimensions as they change on the fly. 
wonder if we have to tickle you to see said framework
I would say the statement of "understand the MVC framework AND familiarize myself with the practices in terms of databasing and security" don't necessarily go hand in hand. Usually you are left to that framework's vices for handling those items and 9 times out of 10 people don't look under the hood to see what is being done they just take for granted the framework is handling it correctly because the docs say they do. 
There's a number of [math extensions](http://www.php.net/manual/en/refs.math.php) that can be added. Personally, I've only used bcmath for wicked large ints. See also [pear](http://pear.php.net/packages.php?catpid=15)
Do not bother showing class diagrams.. it is not important. Show them what the project solves and how it solves.
I wouldn't fret about it. There are many developers with CS degrees I've worked with who produce embarrassing results. The fact that you have tests makes you lightyears ahead of many other developers.
Nice! Magento is actually the main driving force behind this technique. I'm looking forward to using an interactive shell to rapidly test all sorts of Magento code. Soooo much better than ALT+TAB F5.
I am self taugh as well (programming since high school) and I just had to get over the fact that I approach things differently from having to learn them in a "real world" fashion. Just listen to /u/hgenovese and show them the project. If they say they want to get into the implementation details, just have them do it offline so you aren't on the spot. If your boss isn't an IT guy, then "showing them" the project is more about how it works, and less about the technical aspects of it.
its a toaster...frakking skin-job
As another commenter said, you need to get the business logic to not be tightly integrated with the framework, then migration is as simple as reintegration of your business logic modules in the new framework. However, if this code drives a business, well, you can't go dark while all this work goes on. Also, it's irresponsible to just throw work away because you perceive an exodus from CI to other frameworks. While a good argument can be made to not use CI on new work, you can't just hop from framework to framework, at some point you need to ship your app. I'd love nothing more then to walking to my office Monday and get the go-ahead to go dark for a year to re-implement my businesses app on a better framework, but shit ain't happening, ever. Ultimately, the success of your business will be determined by the quality of your code then whatever framework you wrote it on. If it won't scale, untestable drek you're stacking the deck against yourself regardless the framework you used to conjure up the steaming pile. You can write clean, maintainable, livable code in CI, so it may not be a complete shot in the foot to live with it for a while until opportunity presents itself to transition to a new framework.
I actually looked into this to bid on a project for a potential client earlier this year. If you have a very old square reader you can do it. The new ones are all encrypted though. Typically they will emit audio and you use the mic jack to read the audio and interpret what data was read. You can find plenty of readers on alibaba that are not encrypted or build your own if you want. There are some pc versions that can convert the signal read into keystrokes emulating a keyboard (for a pc at least, didn't look into using one for a handheld). You can also buy domestic readers from a place like: http://www.idtechproducts.com/ They will send you the SDKs and let you enable/disable encryption on their devices. FYI you'd likely have to build a simple app and use a webview or similar to do this. This is actually not as complicated as you would think if you have some basic background in c or java (and have access to osx to build the app with xcode if you want to do it in ios). It might be possible to use something like phonegap as well but I never looked into that.
Exactly. You did the work and got it done. Period. Thats what matters. Explain the process and show examples of what it does. How you got there or the backend is really not relevant unless specifics are asked... they don't need to know 'all you did was edit a text file' or whatever... but honestly thats ahead of many other developers (like leftnode said). The fact that you have something to present means you have something of value to show others. Otherwise the idea of presenting wouldn't have come up. So keep confident.
I read the article and I don't get why he's downvoted
I do have a card reader for square, but my fear would be long term if it breaks, that will be harder to replace than just doing a different method. I'll have to look through the IDT options though. The other things I have heard is that maybe of a Surface, you can just plug a USB reader just like those IDT ones. I just don't have a surface to try that with. It would be nice to build just a simply app to have it interact with, and I do know Java, but the problem is the osx part. I don't have a mac and I don't really have enough other projects for that to be a purchase at this point. Thanks for the advice!
If you will be personally be meeting the other firm and have a 5-7 minutes oral presentation of the project **and** have all requirements documented **and** have tests written, you've got one of the better planned projects I've seen. :) One comment though, note where the data is from. From whom the requirements are gathered, how the requirement process was executed and how the finalized requirements have been verified by the stakeholders. Receiving requirements you know are valid and complete can be one of the greatest ways of receiving a project.
Nailed It!
"Math" library is a pretty broad term. What do you mean? If you're just looking for arbitrary precision arithmetic, try [GMP](http://php.net/gmp) for integers or [BCMath](http://php.net/bcmath) for decimals. If you want to do statistical analysis, try the [stats](http://php.net/stats) extension. If you want a linalg library we have an ext with some [Lapack](http://php.net/lapack) bindings, but that one seems very basic (only supports some minor things like computing eigenvalues).
CS master graduate here. Don't think about it as cs degree vs no cs degree. I myself (and a lot of professional programmers) would have probably done it the same way. However, think about how "enterprise-y" the other firm is. If you are presenting to other developers, be confident in your work and just show them what you've done. If you're presenting to guys in suits, they might actually expect something more formal and high-level. 
If you did a barcode instead of a magnetic stripe, you could use a bluetooth barcode scanner paired to an iPad or Surface. They typically emulate a USB keyboard.
Honestly, you are waaaay ahead of most people I've met. In 99% of the projects I've done myself or had others done for me or a client the documentation rarely got beyond "It needs to do stuff and look good. Oh, also, it needs to be cheap!" I think you are very well of with a small documentation. Maybe hype it up with some snazzy headlines, but that should be about it.
&gt; amazing console that allows you to execute code within a fully bootstrapped application environment Here console is used as a synonym to a repl.
Welcome to Web development for the 21st century, where server side is just an API and client side has you tearing out your hair in frustration. 
Hi Nikic! Thanks for your reply :) I was thinking in something more like this: http://github.com/sjkaliski/numbers.js/ or this: http://github.com/josdejong/mathjs What do you think? 
This is /r/PHP, not /r/Javascript .... both of those are javascript not php.
The symfony console component is not a REPL.
That's been the web since its inception. The client side has always been a sore spot because there are so many different clients to satisfy.
Feels like any improvements should be merged into PuPHPet. Just my 2c, not enough major changes to be its own project. Downside: I need to download and install chef librarian to be able to run vagrant up. This project is adding a step before the user can do what they want, they should remove it. 
The code reminds me of my drupal days. 
Oops, does sound like I'm moaning at you! I'll reword it.
It's not so terrible for 2007.
When in doubt [search Packagist](https://packagist.org/search/?q=math). There seem to be a few math libraries out there already.
Cool story.
Out of curiosity what's the emulation of prepared statements like and how does it differ?
I've read that by default, PDO uses emulated prepared statements. I'm not 100% sure what the security implications are, but after searching Google for a while, the consensus was that turning emulated off was more secure. 
Classic PHP, security off by default ;)
How dare you! In all honesty, rove allows you to choose more options (not many more), but provides less customizability. PuPHPet offers less options [0], but more details for each option. [0] - I just released v2 last night. The whole purpose of the rewrite was to make adding new features much easier for myself and other contributors... Coming soon are Zend Server, AWS, CentOS, Windows Azure, HHVM. I have a full plate of todos!
I love PuPHPet, I just found this to be cleaner. I wouldn't use it for the LAMP stack though (rove).
You've mentioned 'cleaner' twice now. Can you explain what you mean by that?
Sure. It's obviously my own personal opinion and I'm not a graphic designer, but: In revo, everything, from the choices of the stack to the configuration, is visible and in plain sight without the need of scrolling much. PuPHPet, on the other hand, is a pretty large page in terms of scrolling, and the position in which you are isn't reflected in the sidebar. I'm sure you have seen websites in which you scroll and the corresponding section of the sidebar gets highlighted. Maybe it's just me, but that simple change makes a lot of difference in terms of navigation. By the way, I love your blog. I wish you wrote more, specially about unit testing.
Frameworks, how many of today's frameworks existed back then in their current state? ~~MVC was much less common too. The language, and the programmers, have changed since then.~~ (Yea Ok that was your point I guess: but the thing about frameworks still stands)
Yeah the backend ends up feeling minimal to all the browser-tweaking javascript gymnastics I end up doing.
http://www.barcodesinc.com/magtek/bullet.htm# Perhaps something like this may work...
Never seriously used Vagrant before but on Friday an organization with a bunch of money and a big problem came to me. Their website was not functioning and they had no idea why. Their host had no idea either. I determined that the host had upgraded PHP to 5.4.x and that the organization's woefully outdated PHP codebase (built on a custom framework with no documentation and a ridiculous layout and no one could remember where it had come from) was failing due to this. My local machine only had MAMP (running php5.3.x) and the built-in PHP (also an older version). I jumped on PuPHPet, grabbed a VM that had PHP 5.4.x, found and fixed all of the code that was failing and had their site back up and running in record time. Now I have a new client that has a large number of old crufty sites that need fixing/taking care of and I'm loving this new fangled way of running a site for development.
This makes me happy.
Someone was working a late night: &gt; // Holy shit, is this the cleanest fucking frontend file you've ever seen?! &gt; ubersearch($_GET, $embedded = false, $template = true);
This question doesn't make any sense to me. In a router you would just match on defined URL patterns. So unmatched routes would be just that, unmatched. P.S. don't waste your time and at least grab a router library.
How much are you paying translators?
I'm using [Klein](https://packagist.org/packages/klein/klein) tonight with great success.
I'll answer your points in reverse order to your putting them. **1)** I enjoy learning 'how stuff works', building systems, and optimizing them for a production environment. And although I'm new to PHP, I'm enjoying learning it while I build my own framework, as noted at the top of my post with questions. It will only get better over time as I do. So... I aim to make the best overall architecture right down to the best router etc. I've looked at many router libraries as others in /r/php have referred me to some (some of, that I had previously found). But I'm making ok progress building my own to justify completing it - and - like building any part of the framework or designing it overall - I want to make the best part of the best whole that I can. Thus, I like to ask the most basic questions about the 'standard' functionality, or pattern, or w/e I'm working on. **2)** Either I don't understand your answer or you misunderstand my question. I'm not asking about how to match URLs to say a controller/action/viewpartial/w/e... I'm asking if it's good|bad and possible to IGNORE the URL for a particular part of the application - so that the app only gets controller/action info from 'internal' elements eg UI components like links, buttons, nav menus, etc? Or to put in relation to your answer - I'm not interested in unmatched patterns, they are as you write unmatched (although still 'catched' by my router, because I will send the user to the frontpage or a 404). I'm interested in how to code a router to ignore URLs that are not generated by the app itself eg within a private/protected user account, which is not designed for sharing and the user will not want to share, and security is required more for good UX(?) than the ability to change a URL in the address bar. So even if the user types in a URL that would otherwise be recognised as a match to controller and method|action - the router ignores the new URL (entered by the user) because it hasn't come from inside the app eg from a link, nav menu, w/e... in that protected part of the app eg http://myapp.com/myuseraccount/dashboard? I just wonder if anyone does this, and how?
I remember Drupal from a while ago. ¿Does anyone still use Drupal in this day and age?
Yay abibbles, But I've checked out a few router libraries, including Klein. Perhaps I'm asking something that more experienced coders/framework/router 'architects' wouldn't consider? But IMHO, it would appear that being able to ignore user entered URLS in a router for particular areas of an app, would make the app a bit more secure. You are welcome to comment on that or my above questions.
[The White House](https://github.com/WhiteHouse/fortyfour). Though if the US government is still shut down then I'm not sure if this is technically correct...
My PHP and general programming skills are pretty limited, would anyone care to explain what makes this code so terrible?
"Mass-exodus" is a silly term. What is mostly happening is that people are building new applications using modern frameworks, instead of using an old framework. People who switch for the sake of it are mostly inexperienced developers who have no idea what they are doing, or people with too much time on their hands. I will never advise somebody to switch from CodeIgniter to something like Laravel for the sake of it, because its REALLY f**king difficult to do without starting from scratch (as we've been discovering on the PyroCMS team). Now, if you want to build a new application in a new framework that is great - and you should - but you cannot build "framework agnostic applications". You can however separate out lots of your logic into packages - maybe Composer packages, maybe just PSR-0 folder structured code - and try to keep your dependencies as low as possible, or built around other Composer packages. You CANNOT make your entire application framework agnostic, but you can make _some_ of it agnostic. API's are awesome, and building one API which other applications consume is awesome. This means your admin panel can be crappy PHP/Bootstrap junk, your frontend can be Angular/Ember/Backbone and you can make other applications based off of all of it. v1, v2 and v3 of that API can be built in whatever the hell you want and you can switch it each version if you feel like it. That is how you protect yourself from framework dependency, but trying to run multiple frameworks in the same HTTP request through some crazy mind-melding it just asking for trouble. 
What does the cool web uses for a cms these days?
Don't sulk, Igor was right.
Remember this will work for registering users between both applications. When it comes to logging in, a user will have to log in twice though (and that's terrible). So you will want to take some extra steps to bridge the log in and session systems between the two as well, which can also be done similarly.
Nice try min.us
&gt; MAking such a tool is a fairly trivial task, Typo.
It is not hard to make a service that is just as fast. It's hard to make a site that is profitable and remains fast under heavy load. You're kinda asking it in the wrong subreddit, who says min.us and imgur use php? Besides that it's more a server configuration question than a php question.
Say cloud computing with CDN enabled. 
If you think facebook should have been using an off-the-shelf framework, then you're crazy!
&gt; Maybe better servers as well. imgur uses cloudfront...
using efficient webservers &amp; proxies comes to mind too
In addition to what people already said about the back-end, there's also the front-end to consider: http://developer.yahoo.com/performance/rules.html
Well this is probably a good a time as any to talk about X-Sendfile and X-Accel-Redirect. Modern web servers support a special header which instructs the server to deliver a file on behalf of the backend script (e.g. PHP). Here's the old pattern for displaying a JPEG via PHP: // things before we serve the file do_logging(); do_permissions_check(); // show it! header('Content-Type: image/jpg'); // probably other headers as well $path = $_GET['filename']; // zomg so unsanitized $fp = fopen($path, 'r'); while (!feof($fp)) { echo fread($fp, 8192); } fclose($fp); Now we can do this: // things before we serve the file do_logging(); do_permissions_check(); // show it! $path = $_GET['filename']; // i should sanitize this path header('X-Accel-Redirect: ' . $path); We don't have all the PHP overhead of reading the file, we let the web server take care of it. There are lots of other nuances here, and if you're using a more vanilla CDN or the content isn't protected (aka you don't need to wrap the file request in PHP processing) then it may not even be in play, but it seemed relevant to your question.
Build a distributed system instead of a monolithic app.
Depends on what the file is being used for. I don't think I'd encourage use of it as it may lead to difficult troubleshooting in the future in the event that you forget about it or someone coming behind you doesn't know of it. I recently used auto_append_file, but it was to include [Xhgui](https://github.com/preinheimer/xhgui)
Mongodb, please add mongo.
I'm sure min.us is slower overall than imgur, but I also think there's a bit of bias to our perception of how slow min.us is becuase bigger gifs get posted to min.us since imgur has a smaller file size limit. So, the gifs you tend to see being hosted on min.us are likely there because imgur wouldn't accept them.
/r/webdev would be more suitable.
In case you haven't seen: [Transactional e-mail provider comparison](http://socialcompare.com/en/comparison/transactional-emailing-providers-mailjet-sendgrid-critsend)
&gt; In all honesty, rove allows you to choose more options (not many more), but provides less customizability. PuPHPet offers less options [0], but more details for each option. For me it's mainly about Puppet vs Chef. And IMO Chef is way more powerful.
on existing projects that don't use any sort of framework it's a pretty handy feature. for new projects, absolutely not. ever.
&gt; E_NOTICE is insanely strict about variable assignments and I think increases development time to cope with that. A) You should be running E_STRICT in your development environment. Everything it warns you about may as well be a bug. B) I've come full circle about logging in production. The amount of extra time/space it takes to log is nothing compared to how downright useful it is when *something goes wrong*, and something *will* go wrong. C) ...increases development time? Seriously? You can't be bothered to do *variable assignment* correctly?
Interesting. It looks like they removed the normal tags and replaced them with short tags. I can see how that would cause issues. [source](https://github.com/thyseus/yii-user-management/issues/7)
Of course. Every remotely professional PHP developer will run with `E_ALL` (and I mean the PHP 5.4 definition of E_ALL here) in production. Don't ignore notices, ever. In the very rare cases where a notice or warning is incorrectly thrown (I'm talking `unlink` style functions here) use the `@` operator to suppress them - but don't hide them globally.
&gt; absolutely not. ever. The only file one should ever include is 'autoloader.php'...
All notices are errors. If you ignore notices you increase the chances of real undiscovered bugs affecting your product. The distinction between notices, warnings, and errors is a poor legacy PHP design that shouldn't be considered in modern development. 
Well, technically, and I supposed that is the best kind. It completely misses my point however. Symfony is completely based on Rails, has a 'console' that does everything the article mentions, and by the way, the article never even mentions REPL. Some of you guys only exist to argue. It's why I don't post in here often.
It really depends on what you put in the global file. I use auto_prepend_file for my auto loader and a few constants. That makes them available to the site, the crons, the unit testing framework, etc. I've been doing it this way for years and never had any problems.
The errors you get from E_STRICT are there for a reason. Unless you have a very good reason not to you should pay attention to them and fix the problems it is flagging. If you don't, you are likely to run into problems down the road or introduce bugs.
...the second way is obviously faster than the first though. Using PHP one way instead of using PHP another way can make your site faster.
imgur was started as a side project by a redactor.
Interesting, but they still need a ton of money to operate.
Yeah that's not how static works in php. Have a read of late static binding; although I don't think it'll help you in this instance. You shouldn't really be referencing foo in the abstract when it doesn't exist there. It just feels wrong to me. Maybe declare an abstract method "getMappings" that you implement in dog and call from "loadMetadata" in pet? 
Since nobody said it yet: Don't use Apache2. Use one of these for static image serving: * http://gwan.com/ * http://nginx.com/ * http://www.lighttpd.net/ And yes.. a CDN is needed as well. 
The article is definitely describing a REPL, Symfony is definitely not "completely based on Rails" and the console package doesn't do that. I'm not trying to argue with you but if you keep being wrong I'm going to have to keep pointing out that you're wrong. Sorry dude.
Isn't it "nice try imgur" or am I missing something ? I don't see a reason why min.us would promote imgur as being faster.
min.us asking for advice as to how they could be as fast as imgur
Ah I see. Makes perfect sense, thanks.
Even a simple assign like $foo = $_GET['foo']; if ($foo) { do_something(); } Become a lot more lines if (isset($_GET['foo'])) { $foo = $_GET['foo']; } else { $foo = 0; } do_something() One line becomes 5!?!
See I'm ok with E_STRICT, but the silly variable assign alerts that E_NOTICES throws makes me write a lot more code with little gain.
I wonder this all the time: how on earth does imgur make a profit?
As long as it's valid, use SimpleXml and xpath (http://php.net/manual/en/simplexmlelement.xpath.php) to find all the links. Then, filter through those and find the href you're looking for. The xpath expression to find all `&lt;a&gt;` tags is `//a`
http://www.neowin.net/news/from-rags-to-riches-the-story-of-imgur &gt; "Imgur has always been profitable right from the very beginning and the only time I ever had to spend money on it was for the initial domain name because as soon as I released it, people liked it so much that they were donating and so Imgur survived for the first six months just purely on donations." Imgur now employes 10 people, seven of which are engineers. While Schaaf wouldn't elaborate on turnover, Imgur is definitely making a sizeable amount of revenue per year. 
Pretty obvious that you dont know as much as you think you do.
Then I stand corrected. It was just the first thing I thought of, not having crossed this problem before.
Because 'foo' doesn't exist? Yeah, it should. Why are accessing array keys that don't exist and thinking that not triggering an error in that case is a good thing? If that doesn't convince you, this is *terrible* for performance. PHP still generates the notices and warnings even if you choose not to display them and the performance is much worse than just testing whether the key exists. 
You could do it in one line: $foo = isset($_GET['foo']) ? $_GET['foo'] : null; // or suitable default You could even make `original_evanators` solution below a bit simpler: function valueOrDefault(&amp;$value, $defaultValue = null) { return isset($value) ? $ value : $defaultValue; } $foo = valueOrDefault($_GET['foo']); The point here is that with E_NOTICE on you're effectively making every key access or variable access optional. That creates huge potential for error when you really only want optional access for a few edge cases. Ignoring notices means that any typo of a variable or array key is a potential uncaught error. It's better to just be explicit when you want that optional access by using the one line above or a suitable function. Is it more work? Maybe. But it's definitely worth it for the safety it provides everywhere else. 
No worries at all, as the article says, it's sometimes the right tool, but with several libraries built in to handle what OP is looking for, that'd be a more sane way to go. I'm totally with you that that was your first inclination...it was mine as well, and the way I solved it for quite some time, but after having to deal with all sorts of bizarre edge cases, it's easier to have smarter libraries handle the heavy lifting.
This is the right answer. Minus allows files up to 10 Mb
As we know it is impossible to set cookies in do_permissions_check(); and also impossible for htaccess to serve content based on if cookies are present. That is why it is through obscurity **at best**... because htaccess has absolutely no way of checking cookies... no way at all... nor do php functions have the capability of setting cookies. No way at all. Nope.
I am no security expert or htaccess expert, but this is the first thing that comes to mind. RewriteCond %{HTTP_COOKIE} !^.*someWeirdUserAndPasswordHash.*$ [NC] RewriteRule .* /fuckOffScriptKiddies.php [NC,L] 
Finally figured it out with a mix of a couple of steps. Used preg_replace. Since this wasn't going to be for a live site (just doing this once), just for taking out a lot of links that went to 404 pages and updating some content I went ahead and used it. 
Lol, you are probably right - it crossed my mind too, and often the most simple solution works. I have to think this through and test it, as I was hoping to not tie it to some user account/rights management system eg /rbac system but rather build it into the router, but you are probably right. However, I'd still like the app to verify that each request comes not from an app element eg link or button, rather than otherwise entered in the address bar, which your solution doesn't address, and is why I don't want to rely just a user account management system eg rbac.
Take a look at Imgur's stack! http://imgur.com/blog/2013/06/04/tech-tuesday-our-technology-stack/
I'm just using a front controller but, if you mean that I force or want to force all URLs to be a single URL eg http://yoursite.com - no that's not my goal, but I can see how you would do it as you suggest (although, again, that's not my intention). And yes, I agree that URLs are otherwise unavoidable as they are the 'driver of (web) application state' as you note. Thanks, but I know this, as I wrote in my original post: &gt; Or put another way - many users will arrive at the public domain URL &gt; from typing it, and some users will share links to public URLs eg a &gt;public profile page, but I only really expect crackers/hackers to try to &gt; enter or modify a URL for a protected resource eg a private user &gt;profile. However, I don't know how to do what I'm want to do ~ **I simply want to ignore URLs in non-public - private/protected/authorized parts of the app - from users - and only accept URLs created by the app itself - without engaging/using/relying on a user account management system eg rbac... IF POSSIBLE, which is what I'm asking?** I've had a look at a few RESTFUL routers and frameworks, and admit that the benefit that I've grokked so far is the extra granularity that comes from using HTTP verbs etc, and I can kind of imagine how I could use these in my router to achieve my goal of restricting all URLs passing/parsing in my app's protected user accounts to those from links, buttons, etc in the app itself... but I'm not sure how to rewrite my router for this yet, as my router uses $_SERVER["REQUEST_URI" rather than $_POST etc. I will look at HATEOAS, thanks. I have seen the name but don't recall how it 'works'. Can you give me a reason, taking into account REST/HATEOAS, that I should ignore URLs that aren't ID'd as from the app itself? Thanks for the advice about pitfalls in session storage/caching etc ~ but to me they are further reason to not rely on user account management, including sessions ... for restricting areas. They are needed, particularly for keeping (the right) state, but I'd rather the router or some part of my app's framework at the very top level - ignore any request for a restricted resource that is _not_ from the app itself, but from the address bar - unless it's just for a public page eg http://myapp.com/faqs - when I don't care if the user enters in the URL in the address bar, and would prefer that they did to initially get to the site if they learned of http://myapp.com, say, by word of mouth. Your Browser-&gt;Coolguy vs Server story is cool/funny - but to be me... it just highlights further why my router should act a little like a firewall and have a basic 'ban rule' - banning all address bar entered URLs for restricted paths (which the server will see as of non-app origin) - and only letting URLs be returned to the address bar from the app itself eg a link, button, or internal resource. I am doing my best to learn from you and everyone here, and I apologise if I ever appear closed minded and/or curt in my replies. Blame that on what I can't change, my stupidity, haha! But until I understand compelling production reasons to not do it, I don't think my idea is stupid. 
There is no shortage of ways to do this (reject a URI). My answer to the question, &gt; Would it be worthwhile and feasible to reject user entered URIs my vote is yes. Definitely feasible, and worthwhile if the resources are intended to be protected. My concern, however, is the presence of protected data in *potentially* public space. Rejecting access shouldn't be an issue; just don't put the resources out there. A commonly protected resource in apps is a database credential file, perhaps in the form of an `.ini` file that a web browser could print as plain text. The recommended safety procedure for like files is to simply not have it in the readable web root. That said, URIs are rejected all the time on the web. Admin areas, for instance (authentication required, else 401). Facebook API requests require the request to present a token to access a resource. Level3 CDN any many other services issue API keys to sign requests. These are examples of services *sometimes* granting access, but rejecting the rest. These are just examples of worthwhile rejection. I do kind of question why you think it necessary to block users from accessing `/myuser/dashboard` directly. Is `/abibbles/dashboard` different than `/phpn00b/dashboard`? Surely you wouldn't let the URI determine observer identity, so why not it be just `/dashboard`, and all users see only themselves? This shouldn't confused with public user profiles, ie reddit's `/u/abibbles`, because the specified user is the *subject* or the request, not the observer. If I view your profile, I may have an option to add as a friend, but when I view my own, with the same URI as the rest of the world, I could see something completely different. My identity (session) is constantly verified and evaluated and put into context of the request. The URI never mattered. Make sense? EDIT: dumb tablet copy/pasted OP's post. Fixed
If you already have experience with JQuery or CSS selectors, you might want to look at QueryPath in the future. It has a bit of a learning curve, but once you get used to using it, it basically seems like magic. It can also be useful for adding things to HTML as well. Also, /u/troymccabe posted the link to codinghorror, but if you didn't follow their link through to the original, you should. It's is even funnier: http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
Google has officially announced its support for PHP on Google App Engine (GAE) How to host PHP web application on GAE for free is explained in this tutorial. http://www.tinywall.info/2013/10/12/google-app-engine-php-windows-getting-started-hello-world-example-gae-development-deploy/
This isn't all that interesting, to be frank with you. 
Is /r/PHP really a place for discussion about such fundamental things like this? 19 lines of procedural php that downloads an url, writes it to a local file, then displays it to the user? 
&gt; However, I'd still like the app to verify that each request comes not from an app element eg link or button, rather than otherwise entered in the address bar Why is this so important to you? This would mean that you'd have to have forms everywhere and POST everything to your server (or make a POST request via AJAX). If you do this, people with access won't be able to bookmark any part of your app. The URLs won't change in any meaningful way. If you press F5, the browser would ask you if you want to send the POST data again (which will confuse the users). And you still couldn't be 100% sure if your app made the request, or if the user manually fired an AJAX request via the console. Or if the user modified any values in your form. There's no reliable way to differentiate between a clicked link, or a typed-in URL. You're looking at this whole thing the wrong way, don't take shortcuts when it comes to security. Another thing you could do is add additional routes only when the user is logged in.
You know, you make a good point and I change my mind about whether this is appropriate content for this sub. I don't find it interesting, but that doesn't mean everyone else won't. 
&gt;Load balancing is simply having a lot of servers that balance the load instead of having one or a few servers handle everything. Actually load balancing is having a fairly expensive specialized piece of hardware (hardware load balancers contain some secret sauce not found in regular servers) on the front end that decides which server to send requests to based on a ruleset. You can do it other ways with software, but it's not nearly as good.
Doesn't look like spaghetti code to me. Looks like fairly well organised procedural PHP. procedural =/= spaghetti code
[this isn't enough for you?](https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/) 
Symfony console is a component. It's PHP code. A REPL is a tool. It's not the same thing.
Since 2007, the PHP world has evolved a lot. Tools (composer, ...), frameworks, standards (PSR, design patterns like DI, ...).
Ross, is that you?
If anyone is interested: https://github.com/jsanc623/PHPDataStructures/blob/master/DataStructures/Stack/stack.php
Why would you poorly reimplement a standard class that's been on by default for 5 years and available for 5 before that?
&gt; Using PHP to serve static files will not make your site faster [than using it to serve them dynamically]. FTFY. Are you being deliberately obtuse or are you just naturally retarded? Try reading more than one line of the post you're replying to next time.
Here is an example using the Flourish lib that makes it a bit easier for beginners than plain php imo to process an uploaded image and move it somewhere. http://flourishlib.com/docs/fUpload You'll first need to install the flourish files with the instructions here: http://flourishlib.com/docs/GettingStarted The fImage class will also help you more easily manipulate an image after it has been uploaded http://flourishlib.com/docs/fImage
The OP solved it using RegEx and it worked for him. That's totally fine, especially since it was a one-off as he mentioned. With the utilities that are built-in and enabled by default, you wouldn't need to load a library--a `DOMDocument` solution was posted, I'd have used `SimpleXML`, etc. There are a number of ways to skin this cat that don't require external libs. That being said, you're right--it's important to weigh the cost of doing that for what could be a very small job (and turned out to be).
jQuery is not a backend. its a frontend. :) but nice job.
It's often useful as part of learning to, if not reinvent the wheel, at least understand how the wheel is assembled.
Nobody has mentioned psysh yet, I think it's pretty cool. http://psysh.org/
Because `SplStack` is a god awful excuse for a stack. The API is gigantic for no reason, and has blurring of lines all over the place (ex: `pop()` does not do what it should do for a stack). A good stack API should have 3 methods (perhaps more, but needs 3): interface Stack { public function push($value); public function pop(); public function peek(); } You could also make it `Countable`, you could make it Iterable, but you should avoid weird mutable states: public function prev(); A stack is supposed to be a single element data structure (meaning that you only have access to the "top" member). Why there are navigation functions, I have no idea... public function unshift(); Ummm, wut? A stack that you can modify inline? yeah... no... public function setIteratorMode(); Non-destructive iteration means you're not dealing with a stack but a variable height array... And at that point... I could go on. But why bother when implementing a stack is this simple: class Stack implements Countable { protected $values = []; public function push($value) { $this-&gt;values[] = $value; } public function pop() { return array_pop($this-&gt;values); } public function peek() { return end($this-&gt;values); } public function count() { return count($this-&gt;values); } }
Wisdom.
Because large diameter Internet tubes tend to clog less, right ? :)
No. I want more
I'm having flashbacks to Intro CS with C++
Sadly no real community discussion (no issues and no mailing list that I can see). I like zephir but what I was missing the most when trying to use it was an FFI. I tend to build PECL libs for interoperability more than just performance.
So how did we come to have such poor SPL support for it? I had assumed that the SPL functionality was mostly bullet-proof, being relatively new and seemingly more influenced by CS than the non-SPL PHP API. I'm guessing this will also never be 'fixed' in SPL, considering that we'd have to bring up the dreaded BC argument... Thinking about it more, the role and purpose of SPL confuses me. While I like a lot of what it's introduced, it's almost a competing API with non-SPL code; it uses exceptions, is mostly OO-based, etc, things that non-SPL functionality never dreamt of. But SPL seems mostly untouched after its introduction (aside from bug fixes), and so is it the future of PHP or just a side-project that somehow found its way in as a core extension? Perhaps it's the name -- Standard PHP Library -- which, if considered inclusively, would mean that anything not in SPL is not a part of the PHP library? Which I know isn't true, there's like 5k functions that are provided by PHP, and a vast majority aren't in SPL, but it makes the name "SPL" problematic I think. I'm not necessarily asking you for the answers here, just thinking out loud; I like SPL, but it seems poorly thought out and implemented.
why "initialize" the stack in the constructor and not when declaring the property?
imgur allows 10 Mb files now.
It also doesn't help that min.us uses a loading GIF where as Imgur does not. A number of UX studies have shown that adding a spinner makes users perception of time increase, even if it is the same or faster because it draws their attention to the fact something is loading.
Create an interface "IMediaApplication" or something and then make classes "LibAvMediaApplication" and "HandbrakeMediaApplication" or similar. Use the interface with type-hinting and write a quick if/else which determines OS, and instantiate the proper class which implements the interface. You will save yourself a lot of nasty if/else logic by abstracting the functionality into classes.
Figuring out how the source works is where the learning happens. It may take you a while to figure out what the code is doing, but the education is in the journey, not the destination.
Thanks, that makes a lot of sense. However, the other half of the equation is - can I reliably test to see what OS I'm running on, and if I'm running on Windows, can I reliably test to see if a specific application is available?
http://php.net/manual/en/function.php-uname.php Just to clarify the following part in the manual: "On some older UNIX platforms, it may not be able to determine the current OS information in which case it will revert to displaying the OS PHP was built on. This will only happen if your uname() library call either doesn't exist or doesn't work." - I have never seen a system, where uname() did not work. Ah, and there is the constant `PHP_OS`.
I did see that, but phrases like "...it may not be able to determine..." frighten me from using it in a production environment. I suppose if that's the best method available, then so be it.
If you aren't caching the image file why are you bothering to save it to disk in the first place? Granted I tend to use imagemagick instead but I'm sure GD has some way of manipulating images in memory? Saving the file should only be done if you need to retain it?
Well, I guess you could do feature detection instead of parsing a string. E.g. look for a `/dev/random` to check for a *nix system. Very last resort fallback could be prompting the sysadmin for a config/ini/databse setting.
I think that's what I'm going to do... when a new copy of the application is fired up, an administrator will be prompted to select what the environment is (*nix, Windows) and the app will act accordingly. This way, even if the wrong choice is selected, we have a paper trail of accountability. ;)
[SimplePHPEasyPlus](https://github.com/Herzult/SimplePHPEasyPlus#readme)
came here to say imagemagick &gt; gd . GD fails with transparent PNGs
By doing. It's all well and good to read the source code but I find that the best way I learn is to come up with a project and build it. That way I learn all the intricacies first hand. It's how I'm learning Python :-)
I wanted to learn Symfony2, so I decided to use it in my next project. For me using Symfony in a project was a great way to learn it. I had to look up many things and I finally got a feel for how it works as a whole. Lead me to also learn about composer and other package managers (like npm and bower for JS)
Because one is a static constant (created during the parsing stage) and one is a dynamic constant (added to the list of constants at runtime.) It can't get the value of the dynamic variable in the static context because it hasn't been run and evaluated yet.
Every quality software should have tests. So... Read the unit tests / features tests first. Those will show you how a specific piece of the code works. Also: 1. Play with composer packages. 2. Learn about [PHP SPL](http://www.php.net/manual/en/intro.spl.php) 3. Learn about [design patterns](https://github.com/domnikl/DesignPatternsPHP) and [beyond](http://blog.ircmaxell.com/2013/09/beyond-design-patterns.html) 4. Learn TDD, setup [PHPUnit](http://phpunit.de/), [Behat](http://behat.org/), [Mink](http://mink.behat.org/), [PHPSpec](http://mink.behat.org/) 5. Read [PHP The Right Way](http://www.phptherightway.com/) 6. Learn about clean code, EBI, DCI and how to put MVC on a shorter leash here: http://ikke.info/clean_code.html and here http://ikke.info/todo.txt and check out the #cleancode [IRC channel on freenode](http://webchat.freenode.net/) 7. Read a couple of books like: [PHP Objects, Patterns and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X) or [Code Complete](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=tmm_pap_title_0) or [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) or [The Pragmatic Programmer](http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X) or [The Mythical Man-Month](http://www.amazon.com/The-Mythical-Man-Month-Engineering-Anniversary/dp/0201835959/ref=pd_sim_b_3) 8. Start an open-source project or [contribute to one](https://github.com/trending?l=php) There are a lot to learn and if you really like programming you will never stop learning. 
Is this a good book for learning the basics of Laravel? I've been looking into learning it.
When I start something new, I usually read the docs first, then get to work playing around with it. If it is a framework, I build a simple app. If it is a plugin or something, I just write a script that uses it in the most basic terms. Once I am familiar with it, I like to view the docs about classes/features I use frequently, meaning the source on those classes and other classes that use them, or their parent classes. If the plugins/framework is fairly well developed, there will probably be fairly good documentation on what it is doing.
This is almost how it works for me. I find something interesting, I play with it, break it, and then I have to fix it. Then I know how it works.
What about the true test of user-friendliness: what would you recommend to your mother, OSX of Ubuntu? A command-line interface is indeed a powerful tool in the right hands but the amount of memorisation required to use it effectively makes it something that is not easy to use for the average user. 
var_dump($var) is better. Also install xdebug so it will get syntax highlighted