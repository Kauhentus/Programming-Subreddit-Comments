That's what is happening already. 
Nothing the FIG has dealt with is "new" in an absolute sense.
cant wait for this PSR to be ignored by the frameworks that matter.
Sorry I didn't read the whole message. According to your latest example you're initiating variable using the session, but then echoing the value of a post variable. Are you sure you're outputting the correct variables 
Robust type system would catch this issue. Technique is called flow analysis, and works really well.
Language could also support imposing getter/setter syntax for public properties, so that introducing them explicitly letter on changes nothing.
Enums are weak. Exhaustive pattern matching is way better :)
BC
Im going to add my form in a few minutes when I get access to my laptop so you can see. 
The more invariant you can encode in type system the less bugs there will be. Those are not the same. One could understand "more typed" as "more ints!!!" but really should be "business logic validated by compiler".
You just return `$this` inside the function so you can call another function on the same object. Eloquent is a nice example of where you can write more complex instructions with seeminly easier to use functions when you chain them. It's syntactically more nice to write but it's no different than. $x-&gt;doA(); $x-&gt;doB(); $x-&gt;doC(); https://3v4l.org/q1qmT
Is there a reason that it doesn't cover traits, namespaces and type hinting? Especially type hinting is a chapter that isn't covered by most tutorials.
The only thing in your post that isn't stating obvious facts and somewhat relates to what I wrote is that you don't care if someone is trolled or not (in context of asking questions without interest in answers). So yeah, I understand, I don't agree nor respect, and I didn't asked what you do or don't care about.
Or any better language which is any language but JavaScript.
Everything you do is practice. Every decision you make makes it more likely for you to make that same decision in the future. Writing insecure code is practice to be a shitty programmer. Adhering to best practices is practice to write better code in the future. You couldn't be more wrong.
Nice! So, where is coding standard set so I can add them to CI?
&gt; Both classes have equivalent type safety, What if the author accidentally uses the wrong type in the line private MyOtherClass $someVar; for example private CompletelyUselessClass $someVar; Your first class wouldn't compile. The second one would only not compile if you assume full type inference in a stically typed world which very few languages have at this point (I only know of Haskell). With full type inference there would be an error if you for example called the wrong method on the return value of `getSomeVar()`. Besides you're going very strongly in the direction of C#, where properties simply have `{ get; set; }` or something like that, and everything else is deduced.
 &lt;form action="submit.php" method="post"&gt; &lt;div class="form-row"&gt; &lt;div class="col-12 col-md-9 mb-2 mb-md-0"&gt; &lt;input name="name" type="text" class="form-control form-control-lg" placeholder="Enter your name..." style="width:17.25em; margin-bottom:1em;" required&gt; &lt;input name="email" id="email" type="email" class="form-control form-control-lg" placeholder="Enter your email..." style="width:17.25em; margin-bottom:1em;" required&gt; &lt;input name="phone" id="phone" type="tel" class="form-control form-control-lg" placeholder="Enter your phone number..." style="width:17.25em; margin-bottom:1em;"&gt; &lt;input name="gsname" id="gsname" type="text" class="form-control form-control-lg" placeholder="Enter your guest or spouse's name..." style="width:17.25em;"&gt; &lt;p style=" text-align:left; font-size:24px; margin-top:1em; width:17.25em;"&gt;Select Workshop Dates..&lt;/p&gt; &lt;input type="radio" id="select" name="date" value="Wednesday April 10th" style="height:30px; width:30px; float:left;" required&gt; &lt;label for="wednesday" style="font-size:20px; float:left; margin-left:15px;"&gt;Wednesday April 10th 11:00AM&lt;/label&gt;&lt;br&gt;&lt;br&gt; &lt;input type="radio" id="select" name="date" value="Monday April 15th" style="height:30px; width:30px; float:left;"&gt; &lt;label for="monday" style="font-size:20px; float:left; margin-left:15px;"&gt;Monday April 15th 6:15PM&lt;/label&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt; &lt;div&gt; &lt;button type="submit" name="submit" class="btn btn-block btn-lg btn-primary" style="width:15em;"&gt;Register Now&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; Then my submit.php page &amp;#x200B; &lt;?php session_start(); $_SESSION['name'] = $_POST['name']; $_SESSION['phone'] = $_POST['phone']; $_SESSION['date'] = $_POST['date']; $name = $_POST["name"]; $email = $_POST['email']; $phone = $_POST['phone']; $gsname = $_POST['gsname']; $date_sub = date("m/d/Y"); $time = date("h:i:sa"); $date = $_POST["date"]; // Function to get the client ip address function getUserIP() { $client = $_SERVER['HTTP_CLIENT_IP']; $forward = $_SERVER['HTTP_X_FORWARDED_FOR']; $remote = $_SERVER['REMOTE_ADDR']; if(filter_var($client, FILTER_VALIDATE_IP)) { $ipaddress = $client; } elseif(filter_var($forward, FILTER_VALIDATE_IP)) { $ipaddress = $forward; } else { $ipaddress = $remote; } return $ipaddress; } $ipaddress = getUserIP(); // set IP address and API access key $access_key = ''; $url = "api.ipstack.com/$ipaddress?access_key=$access_key"; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); $output = curl_exec($ch); $api_result = json_decode($output, true); $lat = $api_result['latitude']; $lon = $api_result['longitude']; $zip = $api_result['zip']; if (isset($email)&amp;&amp;($name)){ $open = fopen("formdata.csv", "a"); fputcsv($open, array($date, $name, $email, $phone, $gsname, $date_sub, $time, $ipaddress, $lat, $lon, $zip)); fclose($open); } //email to me to tell me there was a submission $to = ""; $subject = $name." registered for the workshop on". $date." at ".$date_sub; $headers = "From: ".$email; if (isset($gsname)) { $msg = $name. " and ". $gsname ." will attend the workshop on ". $date ." at AV ROOM."; } else { $msg = $name." will attend the workshop on ". $date ." at AV ROOM.";} mail($to, $subject, $msg, $headers); header('Location: http://www.mysite.com/thanks.html'); ?&gt; Finally, my block of code for the thanks. &amp;#x200B; //Located at the very top of the page before ANYTHING else. // &lt;?php session_start; ?&gt; &lt;h1 class="mb-5"&gt;&lt;?php echo $_SESSION['name'];?&gt;, Thank You for registering.&lt;/h1&gt; &lt;h4 class="mb-5"&gt;We will call you at &lt;?php echo $_SESSION['phone'];?&gt; the day before to confirm your attendance for the workshop on &lt;?php echo $_SESSION['date'];?&gt;. Please add this date to your calendar because you don't want to miss it.&lt;/h4&gt; &amp;#x200B;
I always do this, I write scratches to do PoC before wrtting it out properly. Its really useful this way, because you can write something poorly which works. Then when you write it properly you can just copy paste what you already done for the most part incorperating standards and securtiy.
Haskell has full type inference. Not possible with dynamic typing (PHP) and still extremely difficult for statically typed languages (see Rust, even they didn't attempt full type inference).
Python? If anything, PHP has gone the way of Java and C#, not Python, since PHP5. By the way, PHP originally stood for Personal Home Page.
You didn't reimagine PHP, you reimagined a language.
'Final by default' would break PhpUnit. Mocking involves extending classes. 
These scalar section sounds awesome, really wish we could get this.
1. There is nothing PHP specific in there. 1. It's not complete, here ares some subjects to cover: interfaces, abstract classes, visibility, namespaces, constants, class loading, difference between self &amp; static, inheritance, polymorphism, anonymous classes
I specially like the formatting of the document of the tutorial as a whole. Also I second what Sindhara says and I add that would be interesting a case of use of most common design patterns like Factory, Strategy, Observer... [https://www.ibm.com/developerworks/library/os-php-designptrns/index.html](https://www.ibm.com/developerworks/library/os-php-designptrns/index.html) &amp;#x200B;
Don't get too hung up on the fact it was a getter and setter I used, they were just an example. Could be any functions. &gt; The second one would only not compile if you assume some sort of type inference. That's *exactly* what I'm getting at! Why are we forcing programmers to type out things the type-checker already knows? And this isn't even a hypothetical thing: &lt;?php class MyClass2{ /** @var DateTimeImmutable */ private $someVar; public function __construct($someVar){ $this-&gt;someVar = $someVar; } public function getSomeVar(){ return $this-&gt;someVar; } public function setSomeVar($someVar){ $this-&gt;someVar = $someVar; } public function doStuff(){ $this-&gt;getSomeVar()-&gt;iDontExist(); } } $ phan src/MyClass2.php src/MyClass2.php:19 PhanUndeclaredMethod Call to undeclared method \DateTimeImmutable::iDontExist I put the calling method in the same class for brevity, but it could be anywhere. Point is we _already_ have static analysers (in this case phan) that can do this stuff for us. A developer may additionally choose to judiciously add extra (technically redundant) types to key functions in order to help consumers localise errors more easily, but that's a style issue, not a type-safety one, and shouldn't be mandated by the compiler any more than mandating every line be preceded by at least one line of comment.
I'm a 12 year veteran and own a development firm friend. You need to get in touch with the real world. I'm not a "craftsman", I'm a professional. 
This is the main problem with php (also with js or C): is that is so easy to write bad code, the language is only good when you build a structure around it.
My thought for version 8: * combine all date &amp; time stuff into a single consistent implementation * add default implementations for all PSR interfaces * an Enum type would be nice. One more thing, make all string functions work with all of UTF-8, oh sorry, that was PHP 6 :-)
Point taken, to elaborate a bit though. I'm more so talking in the development phase to get a concept working, then looking at what can: Be separated into other methods Be separated into their own class Where can we reduce cyclomatic complexity
Verbosity isn't always a bad thing. Phan may be able to see this, but as a Human developer, you can't just look at getSomeVar() and know what it returns. This gets even more complex when it's not a simple getter/setter. Shouldn't I be able to look at a method signature and know what I have to pass and what I can expect as output? Why do I have to dig into the properties of the class to know what the types are?
up vote.
"Final by default" - guess the OP has never had the need to alter the way a certain third party package works only to find that the class is final and cannot be extended. Honestly, I've never used final in my life. Though I do like the idea of having variables on classes defined as final, but that isn't much different from just having consts?
I guess this depends on just how secure and just how organized we are talking here. Prepared statements are a pretty low hanging fruit for secure code and quite objective. Organized code, beyond cyclomatic complexity scores, can be subjective.
&gt;When you know your shit, it's not a problem to write a secure organized code as fast as you would write a shitty sketch. When you know your shit, you'll know that this couldn't be further from the truth. Take the example of a CSV-generating local CRUD I made in the OP. I can write that in 20 minutes with probably less than 200 loc. If I wanted that to be secure and well organized it'd need authentication, routing, request mapping, seperation of concerns like data sources, views and controllers, DI to handle to those things properly, etc. etc. and it'd easily end up being thousands of loc and an hour or two of work including config. If you think secure, organized code is as easy to write as shitty mvp scripts then I would not trust your "secure" code as far as I can throw it.
You still have to consider how much the business made using the software over those 5 years, or sooner. It might far exceed the cost to have you come in @ 3x the normal rate.
&gt;The author is just venting on how they hate being held to professional standards of software craftsmanship I'd like to try reading my post, just one more time... specifically the first sentence.
From my original post: &gt;If you feel like adding the types explicitly to the methods makes the code more readable then go ahead - but it's not the language's job to enforce that. And of course your IDE could tell you the types anyway. 
&gt;in a business environment it's also important to keep in mind that you might not be the last dev to ever work on this Yeah, that's one place where my little rant does *not* apply. If you're writing code at work, someone else will probably use and see it.
I feel like you, and half the people who responded to this post did not read the very first sentence of the post.
I disagree, but that's another subject entirely.
But your IDE can't tell you the type of $someVar in your usages. At least, I've never seen it in my experience. Even sometimes the return type gets muddied when not explicitly declared. In my opinion, somethings are unnecessarily verbose, like \`public function\`, but types aren't them. Code is usually read a lot more than it is written, so the little bit extra of writing here makes reading this code a lot easier.
A great time for unit testing is during refactor. Make a test that confirms the result with the old code, refactor code, and confirm you still get the same results Any improving of legacy code starts with unit testing
In other languages (like C#) structs are getting passed by value and not by reference. How can we pass an struct object (or any other object) in PHP by value? I think this would require an new RFC. Everything in C# is passed by value, unless you specify "ref" or "out" in the signature. This would fix some of the issues we try to solve with value objects.
My advice; don't use it. You will almost always populate entities via forms and they don't care about fluent setters.
I prefer the Typescript type system
Those were the days 🥰
Had you bothered to hit the little “next” button at the bottom you would have found some code samples (*specifically* PHP). Had you’d bother to look at the menu, or hit next a few times, you would have found that he does cover several of those subjects. But let’s be lazy and discuss the infinite number of things he didn’t cover instead of saying “hey, thanks for contributing to our cesspool of a sub”.
Sure it was just a PoC, some fun on weekend ;) 
That’s a problem with the IDE. After using psalm with PHPStorm I’ve found that it’s much more capable without explicit return types.
&gt; When you know your shit, you'll know that this couldn't be further from the truth. This just makes you look you're arguing in bad faith and frankly makes you look like a bit of an idiot when you obviously have no idea of the experience of the people you're arguing with. The problem myself and /u/colshrapnel have been trying to highlight is that PHP has a long history of poor example code and quick hacks scattered liberally around the internet and that code inevitably ends up being copy and pasted by junior developers that don't understand the pitfalls in it. I've occasionally seen the same bits of terrible code copy and pasted from some ancient tutorial in projects I've audited years apart, code so uniquely bad that it stuck in my head. So people commenting beneath that code and providing an explanation of the problems with it can be hugely beneficial to people that stumble on it in the future. It can also often be beneficial to the person asking for advice in the first place, because a lot of these things aren't difficult and don't take significantly longer when you're practicing them regularly. Especially when it comes to security. I'm not a fan of the shaming nature some of the comments in here take, especially as people who have decades of professional experience forget that some of the people whose code their critiquing are teenagers picking it up for the first time, but that doesn't mean that much of the critique isn't warranted. As I said in my previous comment, a simple CLI script doesn't need a DI container and twenty layers of abstraction, it doesn't even need to contain a single class, but there is no excuse for it to be insecure, getting that right isn't hard and there's no good reason not to make all the code you write as securely as reasonable possible. I've probably written well over a thousand small utility scripts at this point, some ludicrously simple code has done some enormously heavy lifting and some of that code was objectively _bad_. A "prototype" I hacked together over the course of a week is currently buried in a fake rock under six metres of water in one of the world's largest aquariums and has been running uninterrupted for over four years now, when I found out it was actually being used I expected it to fail much sooner, but it's just kept happily chugging along. The problem isn't that you should never write quick and dirty things, it's that that kind of code _needs_ to be challenged when it's put in the public domain where people will inevitably learn from it.
Is this the final version?
I don't know whether you're intentionally ignoring parts of what I write, or glossing over them to focus on what you think your point is, but I assume it's the latter. You'd do well to take a step back, realize you're arguing against a point you've invented for yourself and not one I've argued, and move on from my post, because you didn't understand it.
Not op, but in the project I use PHP on, I don't have any control over the deployment environment. I have to email my boss a zip file that he'll unzip in /var/www/html. It's torture, and it rules things like hack (without some form of transpiler, but they deprecated that) out of the question
I think hack used to have this feature, but they deprecated it
Sounds like you need a new boss. 
It’s not a problem if you’re (very) diligent around using interfaces. But at some point it just becomes an exercise in pedantry. 
Not only do I disagree with a lot of these ideas but many of them would be extremely backwards incompatible. You would be preventing people from coding in multiple ways and the language would become restrictive rather than powerful. Languages should be power to let the dev use it as it pleases and intuitive enough that the public uses it correctly. There will always be idiots who write bad code and there is no stopping them. They would find work arounds for your “fixes” and it would just end up making it a PITA for the rest of the population who actually knows what they’re doing. 
Agreed. This would destroy interceptors and dependency injection preferences. 
10 minute scripts are fine... but you still always want to do your best to write readable code. Even if it's code that you know only you will see. Being able to understand your own code in X years when you come back to it will save you a lot of time and headaches. I work for a two man shop, so the odds are that most of the code I write will only ever be seen by me. I can't tell you how many times I wrote spaghetti code 5 years ago and can't decipher my own code. Doing things the correct/clean way will only save \*\*you\*\* time in the future. Stop trying to be clever, or cute, or lazy, and spell out your code to save yourself headaches in the future. If it takes 10 minutes to do a hack job, spend the extra five minutes to add some comments and name your variables appropriately. Your future self will thank you.
That's in review phase, we asked for help recently to make it official: https://twitter.com/phpfig/status/1109938099268784128
That's the beauty of this spec: if you want to enforce an interface for your listeners (or your frameworks requires it) you're free to do so, without loosing interop with other dispatchers, since you just need to pass your listener in in the form of a callable, i.e. `[$listener, 'handle']`
You specifically mention it being okay to write insecure code in the title and you go on to say there is no need to go on about "composer requirements, input whitelisting, PSRs, etc". The point I was trying to make is that there is a good reason to mention all of that stuff, even if it's not terribly important for the persona posting the code to take it all on board. As I said in my comment, the approach some people here take is needlessly aggressive, but that advice should be given for anyone reading that thread because people use the discussions here to learn and people end up finding these threads on Google years later. &gt;Not only that, but the fact that you think a simple CLI script needs security features is evident that your argument comes from a place of idealistic fantasy and not one where your tools are used to solve a problem. I didn't say it needs "security features", I said it needs to be written as securely as is reasonable, because you specifically said that it's okay for it to be insecure. A simple CLI script that takes no external input, can't be accessed or modified by the outside world and can't cause dangerous side effects by it's very nature isn't insecure. There's nothing idealistic about writing appropriately secure code for it's usecase, that should be the most basic of professional standards.
Symfony is already under way to make its dispatcher compatible, and acted towards it: https://twitter.com/titouangalopin/status/1110278458750484480 Taylor says that Laravel is easy to wrap in that regard: https://twitter.com/Morloderex/status/1110288086972461061
&gt; StoppableEventInterface I may be missing something, but that interface only contains one method, `isPropagationStopped`. Doesn't look like it defines a way to actually stop propagation. 
Type inference only makes sense where you are assigning a value, not declaring a parameter. For example, in C# and Go: `var str = "string";` `str := "string"` This makes sense because it is easily inferred from the provided value. A parameter doesn't have an explicit value, you can pass anything to it in any part of your code base. So without a explicit type, it's impossible to properly infer the type the programmer intended. When designing classes in PHP, you either want dynamic types or you want to strict types, but if you decide to use strict types, you should declare those types. Intention is the key here. Without declaring your types, you have no clear API provided to other developers on how to use your methods. Your API shouldn't have to infer from properties, which are implementation detail.
&gt;You mention it being okay to write insecure code in the title and you go on to say there is no need to go on about "composer requirements, input whitelisting, PSRs, etc". This is exactly what I'm talking about I feel like you, and half the people responding only read up to the 5th word in the title and didn't read the content of the post either. &gt;I didn't say it needs "security features", I said it needs to be written as securely as is reasonable, because you specifically said that it's okay for it to be insecure. A simple CLI script that takes no external input, can't be accessed or modified by the outside world and can't cause dangerous side effects by it's very nature isn't insecure. So you're just being a pedant for the sake of argument. You could have just said "I'm an asshole." before writing anything else to save me the trouble.
&gt; So you're just being a pedant for the sake of argument. You could have just said "I'm an asshole." before writing anything else to save me the trouble. Honestly, what is wrong with you? No, not at all, and I'm sorry that you see it that way. I'm not sure what other way "It's okay to write insecure [...] code" can be interpreted. It's genuinely not clear from your original post because you don't elaborate on the "insecure" part anywhere beyond the title and it's not common to refer to code that can't be exploited as insecure just because it doesn't have unnecessary security features. I'm going to stop replying at this point because I don't particularly appreciate being called an asshole while trying to have a dicussion, have a good day.
Not true.
My mistake, I misunderstood your previous comment. I thought you were discussing the return type rather than parameter type.
You appear to have not read my post. In particular, I specifically mention "internal only" type code on several points, as well as the fact that in most cases, people responding to posts here have no idea how the code is intended to be used, or who else may be reading responses, and how you're free to these types of replies. Seriously, if you don't want to hear peoples opinions about your code, stop posting it. But don't expect others to stop trying to improve everyone's knowledge and practices - That's not going to happen - Otherwise (IMO) software development is going to remain stuck in the 70's.
I meant the same for both. If you have a static return type, you should declare that type as well, that's part of the method signature (API). Type declarations aren't just for static analysis, they are to declare your intentions and document how to use your function. Input and output expectations should be declared when feasible. I do disagree with the OP author though, these shouldn't be enforced, but the original comment's code shows why people like the OP author have those feelings. An API should not depend on implementation detail (properties). The properties should be created to fulfill the API, not the other way around.
a CLI scripts that reads and writes files to the disk, or generates a CSV from a a database sound like jobs for which PHP is the perfect tool. I mean you could also do it fine in Python, Ruby, or Go (or even javascript with nodejs) but I don't think any of those language would be better than the other for these tasks, so I'd just go with the one I'm most familiar with, which is PHP.
I have built and work with multi-tenant applications - they have their place and provide a number of advantages at the cost of ongoing increased management. Getting the connection logic correct is a lot harder than you would initially think. Reliably and securely storing the DB credentials for each customer outside of your repo or db can be tricky, remember that not every customer DB will be on the same host, so you need to store the full connection-config not just the DB Name. You need tools to keep the DB schema in sync across all of your databases. I don't think any migration tools support this style of use, you will have to heavily customise a migration too to achieve your goals. Do you need to rollback all databases if a migration fails, or just the one you are working on. If you are using any form of auto-increment IDs, then you will have multiple records across multiple customer databases with the same ID. If you are using an ORM or DB tool that supports query or result caches, you run the risk of Project1-ID2 loading the record for Project2-ID2 from cache when running SQL queries. If you have workers or other CLI processes that need to swap the company DB on the fly, you risk more caching issues and services that have had their DB dependency injected performing operations on the wrong database. There are dozens of other snagging issues, and I am talking from experience that it's only worth if you are attempting to meet some specific target (EG: ISO security requirements with large volumes of sensitive customer data) and you have the resource to build a robust solution and stay on top of managing it while still developing new features.
Well...the program I'm implementing...(trying to implement) is Open Source and I look forward to keeping it free for all...even if I did buy LifeTime membership..I can Only whitelist one IP...
I would say there is a contradiction in the opening post that could be the source of argument. &gt; things that will never see access by another person is one thing. While &gt; asking feedback about something is quite another. Hence the different takes.
Sindhara, thank you for your response. I'm currently writing chapters on those topics: Traits, Namespaces, Type Hinting, Polymosphysm, Static Scope and Constants. I hope to upload them very soon.
alriksp, I have never thought about writing a chapter on design patterns. I think you gave me a nice idea. Thank you very much! Thanks for the design patterns link too. However, I'm not a fan of Github.
I think you missed the navigation panel and the next button. It's a problem for me how you missed that. Were you using the website on mobile? And, I'll add a text like "Continue to the next chapters to learn more" to prevent this in the future. &amp;#x200B; I have already covered Classes, Properties, Objects, Methods, $this, Constructors, Visibility, Inheritance, Abstract Classes and Interfaces. Traits, Static Scope, Namespaces and some others are in my TODO list. &amp;#x200B; Thanks for the response! 
" infinite number of things"? I'm bit confused
Yeah mixed type return is dirty. P.s. I have some dirty code for you.
&gt; Both P's in PhP used to stand for "procedural" No, it used to stand for Personal Home Page. Now it stands for PHP: Hypertext Preprocessor. It never stood for Procedural.
Yeah good analogy. I've never understood why people can't just do it right the first time. Even if you're hacking together a proof of concept, it doesn't take any extra time to build it properly and just indent your code so its at least readable.
Thanks, but some servers don't have the "LOAD DATA INFILE " enabled
You can easily release open source software that relies on own API credentials. Handing out your own API credentials (even in the name of open source) is in violation of their ToS. Please, don't abuse and bypass what people made available for use and consumption. 
Okay...I respect that..thanks..!
Your version would not power over 30% of the web.
&gt; php is a dirty slut that doesn't care what you do with it My thoughts exactly reading the OP &lt;3
ITT: people who respond to the first half of the title instead of the post.
It seems there's some confusion in a few quarters from people, despite nearly all of the design decisions being covered in the metadoc. &amp;#x200B; I am working on a blog series that goes far more in depth into the logic and reasoning behind most decisions in PSR-14. The first installment is here: &amp;#x200B; [https://steemit.com/php/@crell/psr-14-a-major-event-in-php](https://steemit.com/php/@crell/psr-14-a-major-event-in-php) &amp;#x200B; Further installments will be linked from there, plus posted to Planet PHP. Watch for them if you have questions.
Not a fan of Github as the repo host, or not a fan of git as a VCS?
My recommendation would be to work in more about PSR-1 and PSR-4. You have *Best Practices for Naming Classes* but you don't mention the PSR style guide as a source and don't mention any naming practices for properties, methods, etc. Autoloading and namespacing (PSR-4) is a big concern for how classes can work with each other on a large scale which tend to work very differently from other languages.
&gt; No method overloading &gt; It's a common feature request for PHP: having several definitions for the same method. Lol, PHP doesn't even have method overloading.
GIT as VCS is awesome. I'm not a fan of [github.com](https://github.com).
bdt0, thank you very much for your recommendation. I'll consider about this for sure.
&gt; But how is it unclear a method is public if it doesn't say "public". The problem is that `public` is the default. Forgetting to add a visibility is very different from wanting to declare it as `public`. Requiring a modifier at least makes you think about what you want. I'd prefer for nothing to mean `private` but hey we can't have everything.
I will add them for sure after the namespaces and autoloading chapters. You are correct, those PSRs are quite interesting.
&gt; Yeah, Composer makes a great example. People just fear it or just don't feel familiar enough with it. Really? It's like one of the best things to happen to PHP.
 i'm a total beginner and i loved the way you explained objects and there properties. 
On the other hand, programming is all about habits. If you allow yourself to write bad code you’re not putting the right habits in place. That’s why I try to write clean code even for things no one but me will see.
Best (civil) rant in /r/php of 2019. A shame I can't upvote you multiple times.
I actually recently wrote something like that in C++ with Qt personally, but PHP is just as appropriate if that's the toolset you're comfortable with.
A lot of people seem to read this post as "Stop giving newbies advice and let them be bad." Instead of "Stop telling people to waste time on things that are never going to be in a production environment." and I guess I should have written a PSA about reading comprehension instead. 
I'm really happy to see you enjoyed the tutorial. Thank you, Mouiguina.
While I understand this argument, is adding verbosity just to "sanity check" the developer actually good? In my mind, that's not much different from requiring every function declare a return type or removing parameter defaults. While this is good for some languages, those are different languages. If you want those features, that's why Haskell and Java exist in the form they do. Especially in this case where the ramification of forgetting to declare visibility is not going to be the biggest of your fears. Leaking a function because you didn't think strongly enough about its visibility doesn't sound worth it. Although I don't necessarily disagree with your belief about private by default. Not the way the cookie crumbled, though.
&gt;Real professionals Real professionals DO have time to do those things, because they don't have to fix all the crap caused by "quick-fixes" and cutting-corners-fast-coding that "will be cleaned up later". Doing stuff right the first time saves you a lot of time because: - less bugs, less time fixing them - a good basis is easier to extend, so faster releases of new features - good practices are easier to read, so easier to maintain. Also easier to alter when the requirements of the client change and/or the business logic changes - easier to add people to your team: no need teaching new hires how your code ("magical" hacks) works.
How about https://gitlab.com ?
Finding the right balance is what makes the difference between experience and being new. For a one-off script there is lots of legroom to do what it is supposed to do. The challenge is whether this is really a one time task? Are you really sorting your pictures just once or will there be 100 new pictures next months which you have to sort and then probably resort old ones as well? Having legroom also doesn't mean to forget everything else. But this differs between "fits comfortably on a single screen" and recognizing when the thing becomes bigger.
The post doesn't clarify the title (insecure is never mentioned again) and contradicts itself. By definition, code that you're posting and asking for feedback on isn't code that nobody will ever see. Even if your use case for it is as a quick and dirty script to get a job done, there is every chance the post will show up in searches for years to come, so comments that explain problems with the code that should be fixed before it's used outside the context of a throwaway script are very valuable. PHP has a long legacy of dangerous code being taught in tutorials and StackOverflow answers that rank highly on common searches. This subreddit still gets people posting tutorials for implementing authentication systems that use `md5() ` to hash passwords. People learning PHP shouldn't get harangued for not following best practices, but if they're posting it publicly, reasoned critique of the code that explains where problems may lie with it should be encouraged.
&gt; is adding verbosity just to "sanity check" the developer actually good? If the defaults suck then yes. No return types in PHP means `mixed` which sucks. No visibility modifier means `public` which sucks. If they were sane (`void` and `private`) then I would be absolutely on board with omitting them. I have unnecessary verbosity. But in this case I actually prefer it because at least I know it was done intentionally.
Is it just me or is there no info, nor a graphic?
There is nothing more permanent that badly written code.
I wouldn't say they suck, they are the products of backwards compatibility and dynamic typing, as long as you know the defaults, it's really not a problem. PHP4 didn't have visibility, IIRC, so using public as the default was much easier to transition to than making private the default. A default visibility of public really isn't a problem unless you come from a language like C# where it's the opposite, but neither is right or wrong, just different. Then, having void be the default would be reckless when considering the fact that PHP is historically dynamically typed and return types are optional. You're forcing a static typed paradigm on a dynamically typed language. There is no "dynamic" type in PHP, something is dynamic by default.
\&gt; I feel like a lot of the developers that are active here get caught up in meta-wank about the ecosystem and forget that the purpose of programming is to make tasks *easier* to accomplish. \&gt; Sometimes a 10 minute script can just be a 10 minute script. I would hate to work with you, as this post came off very much like: Its ok to write shitty code. Don't worry. Some one else will come a long and clean it up. Just hack it together and go. No. Many others here have stated why to the "No" so I wont repeat there words, but I can say from experience on working on both small and large applications (enterprise and SAP as well as CRM's). You can't screw up and architecture design is important, especially in my latest project - a medical app - you cannot screw up. You cannot "hack it together" and it has to be built with specific rules, regulations and so on in mind. What you are doing is advocating that its ok to be a shitty developer because "you're just learning", not its not. Least not in the work place, you wanna be a script kiddie? Great, your mothers basement is calling. You want to be a real programmer? learn to do it the right way. this isn't a tv show, this isn't mr robot. This is real life, peoples lives or data or sensitive info depend on your ability to keep it secure, safe and away from prying eyes. &amp;#x200B; Posts like this, show me that some people really don't know how to code and think its ok to be a script kiddie. It's not. Its one thing to have a side project or learn something new, but if you just play with mud all day and never move to clay, iron, steal and so on - you're gonna get no where. &amp;#x200B;
&gt;I can’t believe this is golfing, I’m totally not participating! Yah well that’s like totally your opinion duudee. &amp;#x200B; In this thread we’re implementing Psr-3/Logger, which shouldn’t be too complicated and might lead to interesting outcomes, even if it means plain trash can material - it could very well also end in the graveyard of ignored reddit threads but my guess is that the earth will keep spinning regardless. &amp;#x200B; **Participating means:** * Only 5 lines of code per entry / post, less is allowed. * (If needed) Code comments and empty lines do not count towards line count. * Cannot reply directly to your previous post / entry. * **You may not edit** your code entry post. * Main branch is based on comment votes. * Multiple branches (post trails) are allowed. * Copy/paste the previous code block before adding the next 5 lines. * Text and discussion is allowed by replying to code entries. * If you feel like expressing your line of thought, this is done below your code entry in the same post, keep it brief. * **Correcting syntax errors / changing code** in a previous entry counts toward line count, but you gain 2 bonus lines for a total of 7. * YOU SHOULD start off your entry by a brief stat on your additions / changes. &amp;#x200B; **Code starting point, 5 line entry:** Adding 5 lines of code, no changes, no deletes &lt;?php declare(strict_types=1); class Log extends \Psr\Log\LogLevel {} class Logger implements \Psr\Log\LoggerInterface { /** * @var Log[] */ private $logs = []; } &amp;#x200B;
&gt; By definition, code that you're posting and asking for feedback on isn't code that nobody will ever see. Well no, if one's asking a question about code they'll need to show it, but it will probably be clear to people reading it later whether or not it was meant for production vs a one-off script that they were writing to learn PHP, or to accomplish a simple task. As Op clarified: &gt; when they're asking feedback about something that runs locally. &gt; People learning PHP shouldn't get harangued for not following best practices, but if they're posting it publicly, reasoned critique of the code that explains where problems may lie with it should be encouraged. That I agree with entirely, as long as it's \_reasoned\_ - and not telling them to go watch all the Laracasts when a quick URL to the right documention page, or pointing out the syntax error would suffice. I think we can all agree that commented, structured OOP code with composer/yaml/etc json files is better than 10 minute ugly CLI cron scripts generally, but .. not *always*. Same as one wouldn't climb into a SUV for a sandwich when it's 2 minutes cycling.
To get things started and for demonstration purposes, there's probably a decision in that code that most likely is destined to be changed.
&gt; sounds like jobs for which PHP is the perfect tool. You need experience of more languages. There are plenty which handy this sort of task in a fraction of the work. &gt; I don't think any of those language would be better than the other for these tasks Ever used Perl? It loves CSV data like that, input or output. Probably 5 lines of Perl to 50 lines of PHP.
&gt; they are the products of backwards compatibility Absolutely. I'm not saying anybody's at fault or that we should change it. It is what it is. &gt; There is no "dynamic" type in PHP, something is dynamic by default. There isn't just dynamic or just static typing, it's a spectrum. You can erase types in C by using `void*` or you can box value types in C# even though they are though of as static languages. PHP is what we make it. People find types useful and that's why we added them. Types don't just add safety but they document your code and also greatly improve autocompletion in a good IDE. I find types so useful that I use [phpstan-strict-rules](https://github.com/phpstan/phpstan-strict-rules) to force me to declare a type for every parameter and every return types. That doesn't mean it can't be `mixed` but I'll have to explicitly declare it as such.
If you want type declarations, they are available, I see no reason to force it to be used by everyone. I think the way they were introduced in PHP is great. Same as TypeScript, types are optional to remain compatible with pre-existing code bases. I would be highly wary of a language that introduces massive breaking changes in new releases, especially 25 years after its initial release. PHP doesn't do this. The majority of code written 10-15 years ago will still run in PHP7, that's a good thing. 
Downvoted - this is not a productive way to vent your general anger. 
You've got it right man. These people aren't going to "get it" until they're forced to get more experience. They're the same style of people that think hiring an agile manager and wasting 2 hours of their workday in a daily standup is more productive than getting their work done at a decent because it's organized. They're stuck in a sunk cost fallacy because they don't want to admit how much time they've wasted to themselves. That's why the "but it might end up in production anyways" argument is so prevalent in the comments.
I don't know why but the next/prev weren't obvious to me at first. Maybe it's the yellow? I liked the way you explained things so I passed it on to my junior developer to browse over but I did point out to him where to click next in the event he didn't notice them either.
Might just be me, but I prefer to typehint my fluent methods with `: self` instead of the class name itself, because it makes it easier to copy code around if ever needed
This annoys me so much when a library enforces overly restrictive constraints on classes. 
React and Amp are single-threaded implementations that can use an event loop to asynchronously handle specific I/O events (non-blocking). Like this: https://imgur.com/rkbxBWI This spatie/async extension does concurrency in that it spawns separate processes that can be executed using multiple cores. It's really a poor naming choice (async) as that implies the above, but really it is parallel, like this: https://imgur.com/33PIGoy The former (React and Amp) are great because they are not multi-threaded so it makes sharing memory and such much easier, and are much better at waiting on thousands of I/O at once. This one is better when the wait is computational (cpu heavy, instead of I/O waiting) as it can utilize several cpu cores at once. The drawbacks are that sharing variables and autoloading is harder, and each process requires it's own memory allocation. You also have to be careful with how many processes you end up spawning. It's also less good at the waiting on I/O because it can only wait on as many as the number of concurrent processes it spawns. Basically they are completely different. /u/brendt_gd please correct me if I'm incorrect. 
seems like a good start, but i feel like this is missing the target. if you need to learn what oop is, theres a million books. if you want to see how to implement in php, youre babying people a bit too much. for an article like this i’d start off assuming people know oop.
If possible I would return : ProductInterface. 
Lol, that would break most older php applications
Ive had so much dirty hack code for a PoC that I shsow my boss. he says WOW looks good and you got it done quick! Ship it. Um NO. I told you from the get go I was writing a PoC code and that it would not be production ready and will take a lot more time and you agreed that I would be given the time. Here are my emails. So fuck off I am not shipping this code cause that isnt what we agreed to and I dont want anyone, especially myself, maintaining it. 
I agree. I have a bunch of helper scripts written in php and python on my local dev for the smallest little tasks. Obviously they will never ship in a release, but I share them with colleagues to make their life easier too. Often you would vomit at first site of them, but they do their job. 
Hey, thank you for the feedback. But, did you also miss the "next" button or are you telling me to introduce how to use OOP in PHP?
I have seen this done with a templating database structure. The tpl schema is kept up to date and the new databases are created with every new tenant. It seems logical when dealing with monstrous data structures. 
Tell your boss about GitHub, that system is insane
&gt; When you know your shit, it's not a problem to write a secure organized code as fast as you would write a shitty sketch. &gt; For example, using prepared statements is actually easier than using direct substitutions with escaping. One should just know how to do it properly. **There's no hard and fast rule in either direction**. It shouldn't be garbage spaghetti, but it doesn't need to implement every best practice I use professionally. Yes, I'm using a proper RDBMS. Yes, I'm using prepared statements (I don't even remember *how* to do old-school concat-built queries). Yes, I'm using O(n) over O( n^n ) because I'll make it back with the first run alone. Yes, I'm not passing plaintext user/pass in the querystring. Yes, I'm writing side-effect-free lambdas. Yes, I'm using consistent indentation/bracing/casing. Yes, I'm naming my functions and variables properly, not "`boogers_poop_coffee_3`". Yes, I'm linting. But I'm not writing 100% coverage unit tests. I'm not writing LePUS3 or UML docs. I'm not doing textbook normal forms. I'm not writing and deploying CI/CD. I'm not profiling my load times. I'm not using a PSR7 router for my three-page site. I'm not writing branded error pages. I'm not porting my fetch-and-save cronjob that's already written it in [bash|python|perl|ruby|standalone PHP|etc]. I'm not going to write progressive enhancement/graceful degradation. I'm not using a distributed message queue. I'm not using Event Sourcing to solve a non-existent scaling problem. As for redistributing shitcode, OP opens with "*this will never been seen by another human being*". This is the shell one-liner. This is the "throw away" of "write one to throw away". This is code where hand-golfing literally saves time. If you're shameless or ignorant enough to redistribute shitcode, you're a lost cause and no amount of berating will save you.
wont lie, didnt click next. but! like i mentioned, whos your target audience here? a new dev? not enough for them to figure out oop. a java dev? first page is unnecessary.
I'll do something to emphasis the "next" button
I think the point is that if they don't call me or can't find someone with my particular skillset who is willing to relocate, their businesses usually collapse within a year or less. Mass layoffs, the whole bit. I've seen it happen a lot.
Hey, thanks again. Yeah, the first page does not include all the things to let a new dev understand everything. That's why I have split the tutorial into several chapters. So, you are saying that I should add some code examples into the introduction page and improve it?
# # Update I have just added the chapters on [Triats](https://developer.hyvor.com/tutorials/php/oop-traits), [constants](https://developer.hyvor.com/tutorials/php/oop-constants) and [static methods and properties.](https://developer.hyvor.com/tutorials/php/oop-static-methods-properties) 
no im saying pick your audience. you want to teach oop fundamentals, or teach people that know oop how to use it with php? im guessing you want the latter so dump the oop for dummies page one imo.
I think dumping more details on the introduction page would be hard for a beginner. I introduce each concept step-by-step in my tutorials.
I hope not to offend you in any way, but your response is unfounded. The OP’s post is accurate. There is a time and a place to write elegant, secure code. Programming medical hardware with specific regulations and people’s life depending on the outcome is obviously not that time and the OP never once advocated as such. By going out of your way to mention this, you have only name-dropped yourself right into the aforementioned circle-jerk that the OP is referring to. If you are writing something quick and dirty for yourself—which will only ever be used by you and lives on your own system, as the OP already said—writing superfluous code securing your closed environment is an exercise in poor time management and literal masturbation. It is unproductive. The OP went out of their way to specify this does not apply to production code. Don’t waste time securing code that is not accessible to anyone else, it’s already secure if it’s not ever going to be used by anyone else—especially if you are getting paid for that time. I wholeheartedly agree.
I have a PHP CLI script that generates SVG files for laser cutting a miniature pinball machine. Each laser-cut component has its own class that outputs its own SVG, which consists of multiple SVG shapes. I have a simple way of declaring dependencies between classes so that Component A is calculated before Component B. The problem is that the interdependencies are turning out to be a lot more granular than that. They are not at the component level, they're at the SVG shape level. For example, the Playfield class generates a cutout for the trough (where the ball drains). Then there is a DrainGuide (with drill holes for attachment) that is calculated based on the dimensions of the trough. The Playfield then needs to know the location of the drill holes so it can duplicate them on the playfield, so the two parts attach precisely. Basically, there needs to be a whole lot of bidirectional data sharing between classes, with SVG shapes being calculated in a particular order. Just wondering if anyone knows of a pattern that might be useful for this situation.
To this degree, a agree. Probably, it's just different takes on the "insecure and unorganized code" from the OP that make an argument.
Sounds like you need to do things in layers. A long, long time ago, I wrote a tool that would calculate a hierarchy of zones a point was in based on a set of bounding coordinates. The point was inside particular draw, which was inside a set of draws, which was inside a room, inside a house etc. Start off by giving yourself something to represent a rectangular bounding box, X1, X2, Y1, Y2 and its parent, lets call it BoundingBox. Work from the outermost bounding box (your entire board) and for each component, pass it a new BoundingBox with the coordinates it has to fit in *relative to its (the parents) own bounding box*, so typically every box will be smaller. Your actual BoundingBox objects wont know where they are in absolute terms, so you need to provide a way for them to know that. To do that you need to give them an getAbsoluteX() and getAbsoluteY() function, that's going to recursively step through the parents, adding all of their X1s and Y1s together until you reach a null parent, and their sum will be the absolute position of whichever BoundingBox you first called it on. You might want to make each of your objects extend from this helper (or add it using an interface + trait). As you're creating these boxes, you can assign them to global variables or some kind of registry class. Sorry if the following code is crap, I wrote it in notepad at 4am. ```php $top = new Board(new BoundingBox(null, 0, 0, width, height), function(Component $self) { $self-&gt;add( new Gutters($self-&gt;mkBoxWithPadding(5), function(Component $self) { $hole = new Screwhole($self-&gt;mkBox(0, 0, 10, 10)); Registry::$screwholes[] = $hole; $self-&gt;add($hole); }); }) }); $bottom = new Board(new BoundingBox(null, 0, 0, width, height), function(Component $self) { $self-&gt;add( new Screwhole(Registry::$screwholes[0]-&gt;getAbsoluteCoordinates()) ); }); ```
Why not call it java and also make it compile? /s
excellent
Maybe a stupid question but how do folks make sure all their environment variables are available in production if it’s frowned upon to use a .env there? If there’s no .env file in production then how are new keys added or stale/unused ones taken away and how is that kept in step with what’s used in development?
Normally you would set the $ENV variable on the server. Most env packages use this variable the .env file overrides it.
There is nothing wrong with having a .env file on the production server. Just make sure it's not in the path that the webserver can serve files from and don't check it in. For some projects we drop the .env file on the server in the project root directory. (we serve out of the /public directory). Generally, I'd recommend you establish config files via some sort of deployment tool and use those. How this works will depend on your deployment tool and framework. Environment variables in production are in my mind an anti-pattern. It's hard to set them in such a way that processes pick up on the changes without hard restarts of processes.
&gt; Environment variables in production are in my mind an anti-pattern. It's hard to set them in such a way that processes pick up on the changes without hard restarts of processes. Not when you're using containers - in that case you're replacing the container anyway, and the environment variables are configured by the master process and coordinated across all nodes. It allows you to easily keep configuration outside of the containers themselves.
The ENV file is usually set for the user running the program (in this case Apache or fpm) but sometimes system wide (which is really not a good idea). This can be done in a variety of manners. Most setups tend to have the CI server clear and set those variables. 
It would. I'm not saying I want them to change it now but it would be nice if it were that already. 
Well I made a point, It doesn't really need to be github... I was referring to any VCS in which community could possibly help.
"Having common interfaces for dispatching and handling events allows developers to create libraries that can interact with many frameworks and other libraries in a common fashion."
what I didn't quite get yet... .env doesn't seem to really have, aside from the name, anything to do with actual Environment Variables. right? So.. why not just skip the parsing step and go right for a local.config.php or something like that?
But that's PHP thing. We could solve it overnight with better PHP typeings ;) You can NOT provide a lambda that support a function, and while anonymous classes are a thing in PHP those are not meant for such a use case.
This is true
Maybe we could use getenv_s to avoid the threading problems. I'm not sure how well supported it is.
A book has been written on serving images on the internet. This goes to show how complicated our jobs as web devs can be.
Newbie here: are these books any good? 
For a newbie they might not be so bad. 
nice partner link
Wow I just spent $140 on books from Amazon. 
IT is the real job creator. We are creating them literally out of thin air.
without affiliate link: https://www.humblebundle.com/books/web-programming-oreilly-books
it's 356 pages .... 
&gt;.env doesn't seem to really have, aside from the name, anything to do with actual Environment Variables. right? Traditionally in both the Ruby and PHP implementations of it, the variables you define in `.env` were all injected into the actual environment. &gt;So.. why not just skip the parsing step and go right for a local.config.php or something like that? Laravel does exactly this, compiling `.env` down to a PHP config file when you run `php artisan config:cache`
I see. thanks.
The "need" for a mixed/unknown type is not a real need. It's an "I'd rather lean on the type system to solve my problem than refactor this code to solve it" need.
What many of the other commenters here fail to recognise is, that eg. in many countries this is actually required by law when storing financial and personal data. Each business registration or VAT number must have it's accounts separately stored and access rights to each database and table must be audited regularly. Some guy from Finance aren't allowed to inspect the accounts from a subsidiary just by inserting a WHERE clause in an SQL statement. Similarly with HR data. An error in a WHERE clause in some HR subsystem, must absolutely not give that employee access to all the parent company's employee data. You could absolutely implement some of the big database vendors wet dream and activate row-level security and auditing, but that's just pure insanity on so many levels.
Ah, okay. Thanks for the suggestion. 
Typed callables? I have my company convinced to switch to Rust before that happens in the PHP world.
Now, now. Let's not scare the whippersnappers away...
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Can someone explain to me why ANY capable craftsman would choose to work in London as a PHP developer? {The Cost of Living differences between London and Houston, TX](https://www.numbeo.com/cost-of-living/compare_cities.jsp?country1=United+States&amp;city1=Houston%2C+TX&amp;country2=United+Kingdom&amp;city2=London) are between 46% (consumer prices) and 71% (housing) with food at around 14% more expensive.... Yet, I am making closing to $135,000 in Houston, TX, as a PHP technical lead and the highest paying PHP job in London according to this survey and what I found when I lived there in the Winter of 2015 is just £65,000 or $85,500 USD. HECK! I was making $85,000 12 years ago with 5 years commercial PHP experience. In Houston. I have make north of $175,000 in Dallas/Austin and $200,000+ in NYC (comparable to London). I know for a fact (from looking in Winter 2015, every day) that securing a technical knowledge worker visa in the UK is well-nigh impossible. Immigration officials told me less than 50 Americans had secured one and all their immigration quotas were used up by "low-income" Poles and Somalis (his words). So given that it's much more likely for a high-skilled PHP developer in London to get an immigration visa to America, why the heck would any decent dev choose or stay in London? Move to Houston! You can make DOUBLE -and- the cost of living is HALF!
The company I'm at stores them in https://www.vaultproject.io And we have our own "space" in the vault that only we have access to in order place any additional secrets. During deployment, we're given a one time use key which reaches into vault, retrieves the secrets, and then sets them appropriately. Typically they never change, however if they do, then we just do a blue-green deployment. Otherwise if there's something that's frequently changing, it's likely not a secret/API key and can just be stored in a config server: https://spring.io/projects/spring-cloud-config
Quite right - .env is a way of quickly setting 'env-like' values for testing or dev environments. In prod you should be using real environment variables set by your hosting environment (kubernetes, heroku, whatever)
Because of "real professionals" like yourself, developers are pulling their hair out maintaining legacy code. Well done. You've certainly leveled up your career and became "real professional".
I read your tutorial a few days ago, when you previously posted, I found it very good, clean and well written, my takeaway was your OOP section! Being relatively new to PHP I have learnt how to program procedurally, as that is how most of the tutorials are written. However, looking at any larger scale programs or frameworks I need to learn OOP, I've been looking at Laravel for example. After reading your tutorial, I found this video tutorial [YouTube OOP PHP Bitfumes Webnologies](https://www.youtube.com/playlist?list=PLe30vg_FG4OSEHH6bRF8FrA7wmoAMUZLv) which goes far more in-depth. It is more specific to my learning goals. These are the [notes I made](https://drive.google.com/file/d/14HCKaS5xs5uTzKga9ylIvS-yAwmZaGE6/view?usp=sharing), these are notes and not verbatim of the tutorial. They may help you spot any missing content. I think you now cover most of the gaps. Thank you for posting your tutorial, the basics are up against some well-established sites, such as w3schools. As very few sites have good in-depth OOP chapters, I think this makes your site stand out!
Care to explain? If you talk about DTO's, it is not worth to pollute each setter method with 2 extra lines, just for that. 
Environment variables are made with containers in mind. Services like Heroku or using Docker containers treat environment variables as first class citizens. For normal servers, like deploying a regular ol' Linux VPS, environment variables are just an extra step which is a pain, without some sort of provisioning tool or CI setup. So, I agree with just dropping in a .env, or using a traditional config file in that case.
Fork PHP and let's get what this guy envisions.
GitHub will be insanely expensive. Get GitLab and you get a CI system included for doing automated deployments, plus a good ticketing system, kanban board, etc. It's $4/month/user.
Packages like `dotenv` parse .env files and make them available to the usual methods of reading environment variables. This way, you can setup your application to expect environment variables in production, without having to actually set environment variables in development. Your application still thinks its getting environment variables, but technically it's not. If you want to use a .env file on production then there's basically no difference to just using config.php.
I bought this yesterday, anyone suggests an order which one to read first? &amp;#x200B;
It's a good idea to get in the habit of not writing shitty code. Why would you write shitty code on purpose?
Because it's useful and it's just 2 lines (generated by my IDE).
"These people" are your damned superiors! Show some respect or GTFO! # We are *sick* of unprofessional hackers ruining our lives! 
We're doing something similar, except we're relying heavily on dynamic secrets for AWS and database access. We have a dedicated sidecar container that handles grabbing secrets and shoving them into a json file that's in a shared mount between the sidecar and the main container. I'm not sure what that looks like in PHP as we're using C# on dotnet core which provides things like file watching and config reload.
When I arrived at a shop recently, more than 10 devs had never heard of composer, never used it, are terrified of it, went straight to the CTO with "He's gonna break everything!" They all related to me the Autoloader Horror Story, how some dev who quit the first week I was there (didn't want change) had tried to implement an autoloader years back and failed horribly. They all have been programming for 10+ years and tell you that very readily. **I'm a SENIOR PHP developer**, they readily exclaim, with an emphasis on *senior*. Yet, they don't know a single design pattern, never heard of xdebug, have never written a single unit test in their entire lives and, indeed, didn't know what they are. Had never heard of selenium. What surprised me most of all was the hostility towards Slack. They had never used slack, never even heard of it. How that is possible, I guess they just live in a bubble? But oh, boy, they RAIL against code reviews. Everyone in the entire office knows "&lt;myname&gt; is a block" because I took away their privileges to abuse `master` directly after I was -horrified- by one of them committing 20 SQL injections, **Inside** a `$pdo-&gt;prepare()`, and then arguing with me about how "a hacker will never find the code". And that's the guy who's been there the longest, many years.
Where I'm working, they write these scripts _AND_ simultaneously all have write access to Production database, on their local machines. I brought this up just yesterday and even their manager said, "it's one of the perks of working here." These same devs love "quick and dirty" scripts. They **rail** against me for instituting code review policies about how it will "slow them down", etc. And some of them (like the OP) get SO MAD if I just give just minor feedback on a PR. They *hate* that I locked down master to only PRs, because they were used to abusing it any which way to Sunday. Then, they want to take these scripts, unapproved, unlooked at, and run it directly on Production database.
What I saw was the single page about the OOP introduction and a menu on the left with other topics. It was not clear to me there was more about this topic. Perhaps starting the page with a table of contents linking to sub pages, or multilevel menu on the left might have helped me.
You really need to get out of here with your unprofessional attitude. Everything you do for money should be to a high professional standard. By advocating the dirty/lazy way of doing, you are only enabling terrible managers to enforce unprofessionalism on heroic-ego-driven unprofessional developers. Thus your sentiment is directly making the world worse, and I ask+advise you stop.
Like I wrote in another comment, to me it was not clear it was only a starting page about OOP. I saw that page and a list of other PHP topics on the left. Great to see there's more!
The dev who's been the longest on a project wrote this, about 20 times, committed directly to master and railed against me pointing it out. Since it was the first time I had reviewed his code, I thought the first 1, ok 2, were a mistake, but by #5 I was convinced he didn't care about SQL injections at all, and he told me as much, quite angrily, later. ``` $myId = $_GET['userId']; $pdo-&gt;prepare("SELECT * FROM foo WHERE id='" . $myId ."'"); ``` 
Where I work, they 1. write these shit codes, 2. execute them against the prod site / DB. 3. don't realize what all's fucked up. 4. go, "OK, no need for this anymore" and delete the quick code. They're on Windows boxes by choice and use XAMPP...in 2019. 5. congratulate themselves and openly boast about doing it (at least before I showed up) at the daily hour long "standup/sitdown". 6. later, we have to painstakingly diff the database backups to prod to figure out just what went wrong, because the crap code was deleted. That's what the OP's argument enables. Therefore, it's best to have policies against it and use only in exceptional circumstances, by proven professionals. And still commit it to git somewhere.
I hope you accidentally misspelled "pseudo", because you sure sounded professional enough as it is! [/s]
But where do you call setters manually? And why? Setting values in bulk is done only via forms, they don't care about fluent setters. With rich-form bundle, even DTO's are obsolete. &amp;#x200B;
&gt;So given that it's much more likely for a high-skilled PHP developer in London to get an immigration visa to America, why the heck would any decent dev choose or stay in London? Why would they want to go to America? I'm sorry but personally there is just so many things that are off-putting - You are very far away from your friends &amp; family - The gun culture is really nuts - The education system is screwed and insanely expansive - The healthcare system is a mess and insanely expansive - The relationship of Americans with food is... not the best - Public transports are pretty much non-existent in the US and I hate driving So yes you can make more money elsewhere than London but you know at some point you just want to live comfortably and have a certain quality of life, not purse endlessly places/jobs to make more money. Note that it's a strictly personal opinion but to a lot of people (which already earn enough to live properly), there is more to it than just money. Also those stats are provided by their platform, £65,000 is quite on the low end for being the "highest" pay job (not saying it's a bad salary). 
Not all data are set through forms, quite the opposite on the codebase I work with.
i disagree of course. i literally said it's not okay at work, which means for money.
Looking for a light weight/ very simple shopping cart. No login/user authentication system needed. 
/u/Tetracyclic, you are a true professional programmer and you are arguing with a person who is arguing for the right to be an unprofessional hacker. You can't win with your logic, because your heart and headspace are those of a craftsman and you're running headlong into the mindset of a hobbyist who is pissed off at craftsmen offering feedback.
Well, I think you should publish one of your best, well-maintained and polished open source projects right here, right now, or GTFO. Prove that you're not just a hacker hobbyist. Here's my latest hobby project: * https://github.com/phpexpertsinc/RESTSpeaker
My balance is 60% pragmatic, 40% idealistic. I mainly care about the cost to maintain over 10 years, and cost to extend, and testability.
You're assuming he's being truthful and has a crystal ball.
If it's just on your home box and doesn't touch anything else, then sure, but why would other people be involved and why the need for a PSA at all???
Use an array.
The only time and place it is OK to write inelegant code is on your own box, on your own spare time, as part of your own self-mastery and growth. This is common and good. The moment it occurs on work premises and/or for work projects, then this is terribly unethical.
No one is talking about hobbyist projects. This is a professional debate among those who do and don't act professionally.
I was looking at other languages and it looks like [rust](https://doc.rust-lang.org/std/env/fn.set_var.html) and [go](https://golang.org/src/syscall/env_unix.go) use regular getenv but wrap the getenv and putenv calls in a mutex. Is this because getenv_s isn't available on enough platforms? They were talking about using a lock in this [pthreads issue](https://github.com/krakjoe/pthreads/issues/848) too.
If you read between the lines, his original post was venting that someone, somewhere, critiqued his "script" as insecure and poorly written. He jumped on /r/PHP to seek moral support, but FORTUNATELY this place has quite evolved in the last 10 years I've been an active member and virtually everyone but 2 or 3 individuals critiqued him more. Then he just started off on all of us and I was called "overly hostile" and "the most jaded person on /r/PHP" but I'll accept those titles. We need to clear up the misconceptions some hobbyists who earn money have that they are professional while acting unprofessionally.
/r/PHP is not a support subreddit. You are supposed to visit /r/phphelp for help 
Is the pay really so high in NY for a php job? Genuine surprise. Was that with over 10 years experience though?
If you really want static typing for everything, why wouldn't you just use Java or C# instead of trying to make PHP exactly like those.
good lord.
According to this website it's 100k$/yr ~ 75k£ on average https://www.glassdoor.com/Salaries/new-york-city-php-developer-salary-SRCH_IL.0,13_IM615_KO14,27.htm (vs. 47k£/yr in London). The US traditionally pay more but then you need to pay more in education &amp; healthcare as well. I'm not sure about taxes though
You can use an Array as people mentioned or Collections from doctrine
&gt;Is there a reason that it doesn't cover traits, namespaces and type hinting? Especially type hinting is a chapter that isn't covered by most tutorials. Type hinting really doesn't have anything to do with OOP though. If it is added, it should be added in the PHP Data Types section.
Thank you, this is a good article. The first github issue linked is typical laravel developers attitude. Break something between versions, blame users and shut down the discussion.
If you're going to ask for recommendations, you need to give specific requirements, not something ambiguous like "light weight" or "simple"
It's not a stupid question at all, it's a challenge we all have to live with. Essentially you have the following types of variables: a) configurable, but which are reasonably always the same (eg APP_ENV=prod sort of thing) b) not sensitive c) sensitive (eg secrets) c) is always the biggest problem, as values need to be injected into the app's environment from somewhere secure where they're ultimately stored, and the means to do so varies depending on your infrastructure. For instance, kubernetes provides with secrets you can reference. If you're deploying straight into a server in AWS you can orchestrate using Secrets Manager. And so on and so forth.
Hey, thank you for your response. You are correct that this tutorial does not cover 100% of OOP. I'm still adding chapters into it. In my current plan, there are 4 more articles to be added. And, thank you for the note and it will help me to find out what I'm missing in this tutorial. Type hinting, Namespaces, Autoloading were already in my plan. But, I didn't thought of Method chaining. It will be a good one too. Thank you! &amp;#x200B;
I emphasized the "Next" button to prevent this in the future. And, I cannot imagine why you missed the left panel.
As PHP 7.4 gets typed properties (but no typed local variabled afaik), type hinting is somehow correlated to OOP in PHP
Lol reread the post. It's for personal use projects that don't make it into prod lol you didn't even read the post and answered exactly as OP complained about originally. YOU are the problem
Don't forget that this is a thought experiment, I'm not claiming it's something that actually should be done in the current PHP ecosystem. Most of the changes listed would probably break most of OSS packages out there. If packages were built from the start in a language that prevented deep inheritance chains, the above could never be an issue to start with. Programming to an interface would be the default way to go, DI and composition would be highly encouraged. In such a world, you'd never have the need to extend to third party class, there would be different ways to achieve the same result.
OP IS TALKING ABOUT PERSONAL COMPUTER WORK THAT CHNAGES FILENAMES OR COMPRESSES LOCAL IMAGES YOU, AMMATURE DEVELOPER WHO DOESNT READ THE INSTRUCTIONS 
Lol respect in a developer environment is earned. Your college degree in project management means shit compared to my work experience working on projects. I get work done, they repeat what they learned in class. You my friend need to learn that being a superior usually means you have no practical experience but have a college degree. So STFU and learn how the world works first, my superiors come to me, not the other way around. Sounds like you're just really low on the developer scale. I make the company run, that's why I get paid the big bucks and they have to show up at 7am while I roll in around 12
Nope
ITT: "developers" who are going to be replaced with offshore teams pretty soon cuz they cant read or lack comprehension skills. Luckily im good at understanding Indian accents from all remote teams I have to work with because it's so hard to find English speakers that can read a paragraph of text. Sorry guys, it's going to suck finding new jobs, especially since I'm in charge of hiring and check everyone's social media and Reddit accounts to see how you think. No one here is getting a job lol
PHP 7.4 isn't even a RC yet, so I think we're getting a little ahead of ourselves adding tutorials for that.. For now, type casting, parameter type hinting and return type declarations are language features, not an OOP features. 
Can’t help it. PHP is in my DNA. Not my fault.
Apparently glibc doesn't support `__STDC_LIB_EXT1__`, so yeah, that means `getenv_s` doesn't exist on our primary platform. Adding a lock would be an option, though I'm sure that comes with it's own problems (I'm thinking especially wrt fork).
I agree that not all data is set that way... But fluent setters only makes sense when you call **lots** of them. For 7+ years, I have never done this. Literally, never, didn't even had a need for that and I work only on complex stuff. Maybe your codebase is not the best.
Reaching to Tree structure would be more of a OO approach - think about $node-&gt;left() in place of procedural $node['left']
Basic use case: instantiate object and set properties values for unit testing. Maybe your codebase isn't tested :p
/r/phphelp See the rules -----&gt;
You need an persistence - it can be based on server side by an lightweight storage. 
&gt;final by default Ah, you don't like unit testing in your projects. That's fine. Do you do codeception tests or just run the code and hope not a lot of bugs come up?
On the plus side for the US: * its not EU * first Amendment * second Amendment * it does not have the sucky weather of London * less annoying posh Londoners bitching about everything * has second best World leader as President * far away from your crazy family members * less taxes for bureaucratic globalists and their puppet masters * chicks have good teeth and nice boob jobs * less Muslims driving vans through the crowds
I did not miss the panel, but to see the choices below the highlighted I first must scroll that panel. I guess that's why I did not notice the related pages. Or I just could be too dumb :-) A suggestion: change "Next" to the title of that next page to see directly what that will be about.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I've written a small Brainfuck interpreter in PHP. It'd be nice if you guys could have a look at my repos and give me feedback about: \- Code Quality: Have I made stuff, one should never do in programming/PHP? \- Unit Tests: My first time using unit tests. I've tried to do a bit TDD. But I'm not sure about the quality of my tests. What could I have done better? Did I miss something? \- Code Architecture: Is there anything that is an Anti Pattern or anything else one shouldn't do? Stuff I'm aware about: \- Missing documentation \- Bad Exceptions. Some feedback in this point would also be nice. Should I stay with the SPL Exceptions and just add messages. Or should I implement my own Exception classes? Thank you in advance :)
If your standups are longer than ten minutes then you are doing it wrong, or your agile teams need to be broken into smaller groups... 
What about sending PR with fix instead of adding comments? That would save developers much work
OK, I get it now. Does F5 count as testing? ;) Just kidding. For those cases when entity must have properties assigned, I put them in constructor. That way I can't make a mistake, I can use entities instead of DTO (check rich-form bundle, it is AWESOME) and for static analyses, I don't have to use nullable return types. &amp;#x200B;
Check this tutorial if you want to learn how to check what version of PHP is your site using? &amp;#x200B; [http://www.server-tutorials.com/cpanel/what-version-of-php-is-my-site-using/](http://www.server-tutorials.com/cpanel/what-version-of-php-is-my-site-using/)
If youre wondering what version the server is running, you should just be able to use phpinfo(); Create a new file called phpinfo.php and in it, put the following. Go to that page and itll give you all PHP information. &lt;?php phpinfo(); ?&gt;
phpinfo() ?
# ATTN! Those of you using laravel 5.8 and PHP 7.3 - You will already know this, but those of you starting with those versions - `php artisan tinker` is broken. That is it will open a new console, you type something and hit enter and it exits. This is a known issue.
Aren't you that guy who gets mad at internals devs when they talk about things that are hard for you to understand?
Events is an *extremely* broad topic. I could write a library that wraps every variable with a fluffy useless function and describe it almost the same.
That's the point. 
OP's lead? Why are you inventing something that no one mentioned?
I've never seen a post on here about code that is single purpose, local script only, and ask for opinions, let alone get ripped to shreds for it. I have seen people post stuff that is in their public repositories, or for (probably) homework, and be told what's wrong with it. I can't see what the problem with that is, because as everyone else has said, they are putting it in the public domain, which is suddenly exactly what you keep railing that your post is not about, because it is no longer solely on a local machine, and it might end up in use by someone else who doesn't know any better. Seriously, if you don't want feedback, don't post in a public place. 
Honestly I'm not sure why people keep talking about prepared statements. To be frank it's easier to use PDO properly than do it wrong. Seems like a lot of folks used this topic to rant about some junior dev they didn't like instead of it's actual point. 
I don't understand how my post could come off that way unless you decided to ignore half of it. Let me provide an example here: On my local machine, I wanted to comb through all the cached image files from a chat client and save the animated .gifs to another folder. I wrote a script that runs through the cache, checks the MIME type, looks for multiple frames, then saves it elsewhere. This script runs once a day via cron. There's no composer.json to ensure the extension I need is installed. The filenames aren't sanitized. I don't catch any exceptions. None of this matters because it will never be redistributed, is always used on sequentially numbered autogenerated files and if something goes wrong it's not a big deal. The script took less than 5 minutes to write and I'll probably never touch it again - but if I had say, been someone who never used imagick before and came to reddit to ask about even while explaining the purpose it I would bet you 90% of the comments would be about adding this, changing that until a 5 minute throw away utility is made a multi hour project for no reason. That's the shit I'm getting at. Not everything you ever write is going to be a highly responsive production REST api that you want to blog about on medium. Sometimes you hang a tennis ball from the garage door instead of installing a $2000 backup sensor even if you own an auto parts store. 
Previous job, the saas platform was provisioned by subdomain, which was used to specify the database to connect to for that instance. 
The OP is. 
Terrible video and terrible idea. 
You have issues with projection. I've never my code on /r/PHP. Or anywhere in a few years to be honest. 
Why creating a 7 minute video to explain one (!) line of apache2 config?
... all this is doing is telling the server to execute any html files as if they were php files. This isn't exactly new or novel, and can be actually really confusing in a development environment having files executing different from standard and not how you would expect. Not to mention there really isn't a reason for it. Why not just name the file .php and be done with it?
Is there a way to make your dependencies unidirectional? E.g. let's imagine you have two holes in first SVG and two pins in second SVG. Bidirectional dependencies appear when you draw this sequence: &amp;#x200B; hole1(SVG1) -&gt; pin1(SVG2) based on hole1 -&gt; pin2(SVG2) -&gt; hole2(SVG1) based on pin2. &amp;#x200B; In this simple example you change the order with the same results, because parts are connected: &amp;#x200B; hole1(SVG1) -&gt; hole2(SVG1) -&gt; pin1(SVG2) based on hole1 -&gt; pin2(SVG2) based on hole2 &amp;#x200B;
Yes, the OP was talking about personal code, but everyone replying to you is replying to *your* comments about not having time to be a professional developer. You were the one who brought that up by making laughable comments about "real professionals". If you don't even have time to properly comment your code, there's no way you have time to properly test it and review it. That screams of poor time management and estimation and ot working on serious projects where correctness matters.
Things may became more complicated if you have more parts, eg to pins like (| and |) from different SVGs are connected to hole from another SVG. For this cases you can create some kind of validator, that will check the integrity
You've yet to reply with any examples of what you're talking about, which is one reason people have been focusing on the substance of your post instead of the problems you think exist. Lots of people have said that they've not read any posts like the ones you describe, so do you have any examples?
This will come handy in future. Thanks for sharing this. Starred on github. 👍
You're dumb as fuck.
Wouldn’t advise this. 
We write all secrets to a PHP file when the server is deployed. As we're using containers, updating the secrets is just a case of bouncing each of the backends in turn. 
The only people here that have focused on the substance of my post have been heavily downvoted. The rest of you seem to have a severe emotional issue with a specific type of developer and chose this post to strawman it instead of discussing the topic, which was extremely clear. In essence, you have decided that I must be talking about something else that I am clearly not, and you need to "read between the lines" to insert something else to argue against - which you then argue against. You're **talking to yourself** and assigning the negative position to me. (Plural "you" here, not you, /u/Tetracyclic specifically) This could be forgiven as my fault if I did not clearly outline two examples in the OP of exactly what I was talking about - and yet you still ignored them.
Yes. I agree with that completely. That's why I wrote this post about local scripts on your own box for your own simple utilities.
&gt;why would other people be involved Because they ask questions in places like this. &gt;why the need for a PSA at all??? Because people like you can't read an OP. You failed so miserably at this one, I hate to think how you'd answer someone looking for help with their hobby script. You might read "personal utility" and comprehend it as "HIPAA compliant API" with this track record.
&gt;it's about educating people who are reading along. You make a really good point there that I didn't consider when ranting about this. The next person reading the help post might be using it for something else and might assume the code used is OK for production.
I'm sorry but if you're coping and pasting stuff from your ~/bin dir into a production environment without evaluating it that's the real problem.
I'm not asking for examples of the kind of code you're talking about, I've understood from the very beginning that your talking about people asking for feedback on personal, local code, as I thought I'd made clear. The point I've been trying to make is that as long as it's done in a constructive manner and they explain that it's not necessary if it's just being used for something quick and dirty, people pointing out how code could be improved and why it might be unsafe in other contexts is a good thing. Reddit threads regularly get picked up on Google searches and people end up incorporating what they find into production code or learning bad habits from it. I'm asking for examples of the _responses_ that you take issue with, because that's what this really comes down to. I and others have obviously missed people "jumping down the throats" of others over this kind of thing, so to better understand your position it would be useful to see some examples of what kind of responses triggered this post.
Final by default is a bad idea in PHP unless you also propose personally rewriting 80% of the packages on Packagist.
Again, I completely agree with you and I think I see where you are coming from. As a part ops guy I love small shell scripts and don't like to see them get turned into something else. Sometimes small and simple is just what you want and PHP is perfect for that (although I really like Python for this too). In such a case, the smaller and simpler the better.
We use Consul with consul template to generate an env based on the service discovery and kv features. 
It was not a good way to approach _any_ community, to be sure. Perhaps my somewhat terse response above could have done with more qualification, but I see that downstream, UnusualBear in now attempting to land an emotional injury on more people. I have no specific view of this poster - they could be an especially nasty individual, or they may just be having a bad day. But it is hard to know when to call out poor behaviour and when to leave it alone.
It sounds like just [&lt;g&gt;](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g) will solve most of your problems. I have a headache, and am finding it hard to English, but basically with it you should: * Draw everything at the origin of the current graphics context. * Scale everything within that graphics context. * Translate the origin of that graphics context to the location where it needs to be. The MDN docs should have all the relevant transforms, but the translate looks like: &lt;g transform="translate(-130 -110)" &gt; &lt;g transform="translate(-130 -110)" &gt;
Please learn to be civil.
&gt;its not EU In a lot of regards, I much prefer the EU to the US :P &gt;first Amendment Not convinced by it honestly. Looks fine on paper, in practice the church is still so close to the government it's nuts. I was also chocked at finding bibles in hotels... &gt;second Amendment By far one of the most crazy things about the US... Sorry but in that regard, you have one of the craziest and most murderous mentality. You are the only developed country with over 10k people dying per year and more mass shooting that all other developed countries grouped together. &gt;less annoying posh Londoners bitching about everything TIL, I thought Parisians were so ahead worldwide in that regard I would have never thought it would come up as an argument :P &gt;has second best World leader as President That's a joke right? You are also gonna tell me Fox News is a respectable news channel while you are it? &gt;far away from your crazy family members There are still a few hours flight from me, I just don't want to be 5-10h flight away from them :D &gt;less taxes for bureaucratic globalists and their puppet masters I don't mind to pay taxes to benefit from a good healthcare and education (which in that regard the US is a third-world country unless you are rich). &gt;chicks have good teeth and nice boob jobs I honestly don't think Europe has _anything_ to be envious about in that regard :) &gt;less Muslims driving vans through the crowds I could care less about muslims tbh. I'm more concerned about fanatics &amp; mass murderers thought :)
It does a [fork-exec](https://en.m.wikipedia.org/wiki/Fork%E2%80%93exec) and runs the calls in parallel. It is multi-threaded.
Desktop link: https://en.wikipedia.org/wiki/Fork%E2%80%93exec *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^247174
**Fork–exec** Fork–exec is a commonly used technique in Unix whereby an executing process spawns a new program. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
&gt;second Amendment &amp;#x200B; Wait... wtf? 2nd amendment is the worst thing you could have. Jim Jefferies explained it well in plenty of arguments: [https://www.youtube.com/watch?v=0rR9IaXH1M0](https://www.youtube.com/watch?v=0rR9IaXH1M0) &amp;#x200B; &gt;has second best World leader as President You are trolling us, right? &amp;#x200B;
First of all you really should not take political advice from comedians and jesters unless they are old and experienced enough to know the truth like George Carlin did. They are there for entertainment purposes. Only cucks would give up the 2A. If you lose arms you end up like the population of Mao, Stalin and Hitler. When you lose the right to bear arms you will soon not be able to defend your opinion. Easy logic. Ask EU about Article 13. Ask UK about opinions and free speech. You get jail time for a tweet in UK. You get jail time for filming in the street. q.e.d. 
Glad you find it useful :) 
Opinions are like assholes. Everybody has one. You have one too. Call me up when you are politically grown up enough to hold a discussion. I don't take pride in beating up a parrot of the mass media on mount stupid that actually thinks he is somehow informed and woke when he never had an original thought and does not know the stats that matter or history and lost when he is not spoon fed globalist propaganda. I say this as someone living in Europe and envious of the US-System. They are the ones ruling the world. The Romans of our time that everybody wants to copy. And Theresa May can't deal. Merkel is weak in leadership. Macron has its yellow vests in the street. Paris has become a stinky shithole. EU does not allow memes. Malmö in Sweden is the European Capital of rape. EU bureaucrats are illegitimate dictators. We have people killed in Nice, Paris, London, Berlin, Barcelona and Stockholm by crazy people that are intolerant of happy people of other religions living in their own countries. What's the answer to that? Merkel-Lego. Not good enough for me. And I cant wait for this communist dream to go down like the USSR did for the same reasons it did. If you can't dream of a place better than the EU then you are not trying hard enough.
I disagree with the semantics of your statement. It’s not unethical to hack together something that you use at your job, for your job IF it is only accessible by you on your machine and is not responsible for doing anything actually important. Taking great lengths to write elegant, bulletproof code that is inaccessible to any end user or any other party, whether for work or personal, makes no difference in a completely closed environment where the code is inherently secure by the pure and simple nature of being inaccessible to others. I’ll close with this: one major problem with the attitude of a few veterans (and a vastly larger portion of arrogant intermediates) within the programming community is their relentless discouragement towards lower-level programmers. I wish everyone learned to code. Even if their code isn’t the greatest. You learn from mistakes and getting your hands dirty. The whole point of programming is to automate tasks that would otherwise be difficult, tedious, or impossible without a program to help. We, as a community, need to encouraging new developers to get their hands dirty, not telling them that they shouldn’t write a single line of code or get a paid job anywhere until they are absolute experts.
Unfortunately there is not a way for me to do that. For example, the DrainGuide.svg component depends on the size of the Playfield.svg trough, and the Playfield.svg drill holes are copied from the drill holes on the DrainGuide.svg component. The machine is full of relationships like that.
Mods really need to clamp down on these shit posts. Calling.... /u/Daleeburg /u/HattoriHanzo /u/frozenfireDocs /u/Colonel-Rosa /u/jtreminioDon't listen to me 
Please delete your account and leave the internet. Thanks. 
The fuckery is palpable. 
It is not an issue, they added this warning in 7.2 for purpose
&gt; # Final by default You guys are so funny, good laugh for lunch break. Alright, i'm going back to real life, you guys have fun!
The best thing php beginners can do to themselves is to avoid wordpress, so they don't end up locked in terrible CMS ecosystem and learn to program.
For the first time in a while I come across a genuine discussion point that doesn't have much literature to go on, instead of a random help post, for which this subreddit is not meant and what happens? This gets downvoted. It's a valid question and something I'm personally interested in as well.
You're totally right, I upvoted.
&gt;has second best World leader as President who's the first in your opinion then? 
Never found it worthwhile to install another extension for minute benefit. The SPL classes just fine.
&gt; This is maybe something like 5-10% or less of the PHP that people write every-day I'm no expert, and appreciate your post, but this must fall into the low 0.XX% of PHP people write and manage on any given day. In any case, great question for the community here at r/PHP. 
Obviously that was just a number I was pulling out of my ass, it totally depends which segment of the industry you're working in and all kinds of other factors determining what kind of code you write. That's also why I said "or less" :P
I don't use it because I don't know what you're talking about. anyone got a good link?
Throwing this an upvote because I want to know more about this topic, but yes, please make an edit to add a link to a description of exactly what "\\Ds" for those of us who are ignorant on the matter.
https://github.com/php-ds/ext-ds
thanks. looks interesting, but can't really think of a good usecase within my current projects where I'd go "oooh, if only I had known about that then". Guess I'll keep it in mind though. Guess nowadays with docker, using optional extensions is a lot less of a hassle than it used to be. should look a bit more for what's available..
Now that is an amazing article! Thank you for taking the time to detail all of that.
https://www.php.net/Ds
https://php.net/Ds Always worth checking https://php.net/&lt;search_term&gt;.
Many thanks! And that's good advice on the search term.
A struct is just a class with a boilerplate constructor to accept arguments, isn't it? If we had structs in PHP, as exemplified in the article, how would they differ from a class, besides being value types, or is that why you want them? 
Who is the man who influenced his country for the better in the last 20 years and converted it from a shithole in default to a world power? If there is a name that comes to your mind, then its him.
Please post in a sub that is relevant. This sub is not a support sub and your questions are not specific to php
I cant ask for help on this sub? Sorry then, what sub would you recommend I post on for this query? &amp;#x200B; Kr 
I asked my senior this a few months ago. Never had a use case in our systems either. 
/r/PHPhelp 
Perhaps /u/rtheunissen would like to pitch in? He wrote the extension.
Sorry about that, but I see others have jumped in.
I don't, because I didn't know they were a thing until very recently, but I have an implementation similar to Map in my code for handling collections of objects and being able to traverse, map, filter, etc using callbacks. I find it very useful to treat my collection as immutable, though, to avoid accidents where the values in the collection are changed between two different function calls without realizing it. There's only been a few cases where I've wanted to mutate the values in the original collection, but I can easily see many cases where changing would have messed up my assumed local logic. The one thing that would very likely get me to reconsider my usage versus theirs is if they could support casting to boolean to determine if the map/set/collection/etc contains a value, then I would be able to treat them exactly as arrays for doing things like `if ($values)`.
Maybe it's because external code (you know, the thing consuming the interface) needs to know if propagation is stopped, but doesn't need a way to stop propagation? Why would you want an interface for something that nothing will ever need to call?
I also thought that relatively few PHP developers use it because most are using PHP for web stuff. I got interested in this extension because I wanted to do more cli apps with longer running processes. I just didn't know if anyone used this extension — or the SPL data structures for that matter — on a regular basis. I suppose if you have a background job sorting tons of data it could be useful. But again, as you say, you can use Redis or anything else you want to manage your data. It would seem to me that where these data structures would be most useful if in doing things such as writing your own queue manager or the like. But again, if you are using Redis or SQS or something like that, I wonder what the advantage would be of rolling your own. I was just curious because it's easy to feel like an imposter and I wasn't sure if like there was an attitude in the community of "what you use an array instead of a Stack?". I guess PHP is not Java :)
&gt;I don't take pride in beating up a parrot of the mass media on mount stupid that actually thinks he is somehow informed and woke when he never had an original thought and does not know the stats that matter or history and lost when he is not spoon fed globalist propaganda If I just took that sentence, I would have thought it applies to you based on your previous answer and the one that follows :) I by no means happy with the current situation in Europe, but at no point, I think the US is really _any_ better. You are calling me a parrot fed up on propaganda, but really so far you just look like one to me. Just for the records, lemme rectify some of your arguments: &gt;EU does not allow memes Frankly if that's the biggest lost of the EU I think we are doing alright :D &gt;Malmö in Sweden is the European Capital of rape You aware of how rape are reported in this country right? If you are being raped 5 times by someone, in any country so far you report a rape against that person: it's one case. In Sweden however you will face not 1 case but 5: one for each rape. From there it's not hard to understand why Sweden's numbers are so high and there is zero evidence it would be _any_ higher than other countries and it has been decreasing _since 2010_. &gt;Nice, Paris, London, Berlin, Barcelona and Stockholm Murder rate by country in 2016: - France: 875 - UK: 791 - Germany: 963 - Spain: 294 - Sweden: 106 Total: _ 3,035_. US in 2016: 17,250, so more than 5 times higher. And we are talking of _murders_, you can check mass murder, terrorist attacks (and please count any white nationalist mass murdering in the US as one because it's nothing else than that), sexual assaults, in _all_ the US is incredibly higher. Source: https://en.wikipedia.org/wiki/List_of_countries_by_intentional_homicide_rate &gt; And I cant wait for this communist dream to go down like the USSR did for the same reasons it did Check again what communism is please. We are _very_ far from it. And if you think the US mentality which is if you don't have a job or have an accident or a chronic illness you die (unless filthy rich) is any better, well let's just disagree to agree :)
Don't know why you felt the need to reply to a 2 month old comment, but anyway... it *is* an issue because several frameworks turn warnings into fatal errors.
&gt;First of all you really should not take political advice from comedians &amp;#x200B; This is logical fallacy; I didn't take opinion from comedian but from person with arguments. Smart person would know the difference. And smart person would listen to arguments before making decision. 2A is idiotic in 21st century. It made sense when government had same shitty rifles as regular folks do. Now, it is just a law for terrorists that like to shoot kids in school. You are the **only** country in the world that has one almost every month. I am in Serbia, and we **never** **ever** had a single school shooting. We don't have metal detectors there, kids are safe. Could that be, I don't know... is because we have gun control? And keep in mind that Serbia is pretty fucked-up place with very low wages and high level of nepotism which can really bring people on the edge! Think please, before you answer. &gt;When you lose the right to bear arms you will soon not be able to defend your opinion &amp;#x200B; Riiiight... That's because government wants me dead for some reason, right? And me, holding my gun 24/7, would still be a match for trained assassin? &amp;#x200B; Dude... you played far too many games. And if you think on lame self-defense reason; buy a fucking door man! They do a pretty good job of keeping people away and don't require you to be next to a gun 24/7. As far as I know; thieves don't announce their arrival. &amp;#x200B; &gt;Ask UK about opinions and free speech. You get jail time for a tweet in UK. You get jail time for filming in the street. I was talking about 2A. Don't change the subject, don't be like orange idiot. Yours 1A allows me to tell you that.
Here's a post on the benefits of using Ds\\ in case anyone like me was wondering... [https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd](https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd)
&gt;Only cucks would give up the 2A. If you lose arms you end up like the population of Mao, Stalin and Hitler. When you lose the right to bear arms you will soon not be able to defend your opinion. Easy logic. The US is the only country so obsessed with guns that they think the solutions to gun violence is more guns. Like they never heard of the concept of escalation of violence. &gt;Ask EU about Article 13. Really? I'm by no means standing in favour of Article 13, but if you to play by how many articles &amp; laws the US fucks up, I'm sorry but that's gonna be a pretty one-sided game because the US has just so many of them it's a wonder they didn't try to write a Guinness record book about it. &gt;Ask UK about opinions and free speech. You get jail time for a tweet in UK. You get jail time for filming in the street. Aren't you confusing with the US like facing lifetime jail for calling out the NSA on illegal mass-surveillance like Snowden did? Or about the fact that there is still death sentences in the US despite it being horribly expansive (a death sentence costs at least _18 times_ as much as a sentence of life without parole would cost).
This post looks like a request to some corporate customer service.
I was doing [Advent of Code 2018](https://adventofcode.com/) and some problems required a bit of "optimisation", so I looked into the \\Ds classes. However, when I found out it was an extension I was like, "Meh, too bad." Proceeded to use the normal SPL classes (which was a first for me too), and they served fine.
nice
PHP's arrays are so damn powerful, you can represent all those structures through it. Using DS just adds complexity to a growing unexperienced developer base. All those data structures I know back from when I did C and C# programming and for a lot of PHP devs, whom "only do backend because they don't like frontend" PHP is a first language and they have never seen nor heard about data structures and array is their holy grail. I've had issues explaining people that Laravel Collections are superior to using raw arrays. 
You might want to post this in r/Wordpress 
I am not telling you that you are a parrot for ad hominem purposes and to lessen your arguments. I want to be constructive and to make you understand that you have a Dunning-Krueger effect and that you got fed psychological perfectly designed propaganda. The only way to step out of mount stupid is to understand how propaganda works. My advise is you go to Wikipedia and search for "propaganda techniques". Then you learn them and then you watch out for all of those techniques in every sentence you read, every sentence you hear and every image that is presented to you. Then you will start to see it everywhere and then you will start to search for opinions that are suppressed, ignored or labeled as crazy. And you become more objective because you become independent from group thinking that is highly influenced by constant propaganda. Your question is. "How can you not have the same 'opinions' and you are not repeating the same sentences a 10 year old would think and say after a week in front of a TV?" And my answer is "Well, I do not trust everything just when it is presented by trustworthy people I must believe. I fact check for myself, research. I need objectivity, need a peer-review and I do not fall anymore so easily for propaganda techniques. I passed that.I know Aschs conformity experiments and I have caution to repeat what everybody says just because it is repeated everywhere without being challenged. I rather not be repeating what everybody says when all the data suggests that truth is different than that. May I just assume that you are not that cautious with what is presented to you as if its gold? Maybe its disappointing to you, but you did not say one thing I never heard. But the disappointing part is that your conclusion of the selected bits of data is also nothing genuine and most importantly also very wrong. You are comparing apples with oranges without php7.2 type hints. There are memes that are planted in your mind by MSM, movies, TV series, social media and so on because it fits a political agenda of certain groups that want to influence the masses in the population. The mass media is there to program the population. If you were somebody wealthy with a political agenda your way to go would be to program people through the mass media. When you think of a priest you think of a pedophile. When you think of 2A you think of kids shooting up schools. Those are memes. Sometimes they are right, sometimes they are grossly exaggerated and used for demonization purposes and scare tactics. Everything that creates a strong emotional reaction can be used to override thinking process and objectivity. Emotional charged kids will defend the new green deal even if they never read it. Emotional charged people think the 2A is the culprit for mass shootings. You ask somebody who is influenced by mass media only and they will tell you that the reason for mass shootings are the weapons and that the white guys are the biggest thread. They don't take into account that their view was distorted because they don't know all the facts. So the only conclusion they can make is based of faulty data, misinformation, disinformation and political driven propaganda. Good luck coming near the truth with that. Hold that thoughts in mind and now listen to my arguments with objectivity. In the US: Most of the murders are gang related. Most of the murders are black vs black. Other than that most people dying from guns committed suicide. A big portion of it. From 20,000 murders each year only below 250 are mass shooting related. Almost all mass shootings happened in gun free zones. Most of the murders were not allowed to have that weapon. Most of those killing incels that went postal were treated with psychotropic medications. Q: Why is it that you though that mass shooting are relative much higher when its just 1%? A: Because they make you think so, because they repeat every incident for months and then there is discussion and there is debate. Everybody is talking about it so it must be a big deal. We have to deal with it immediately, because right now I am emotionally charged and can't take anymore. Please, politician help us. Crisis, Reaction, Solution. You are supposed to react so the solution can be implemented. Q: Why don't you care about the much higher percentage of other murders? Q: Why don't we get to know every gang related murder. Q: Why do kids have psyachiatric problems and can't deal with the real world? Q:Why do mass shootings happen in NZ? Q: Why is Switzerland so safe when they have guns? You do not come close to the big picture, because you don't care. Talk about things you really care and have researched for years and you will have a much higher percentage of people impressed. Here are some other facts you missed. Sweden did never have a rape problem in their statistics before. It wasn't before they let in yearly 6% of the amount of their population as refugees that their rape numbers exploded. It was exactly the time they had let in people from Afghanistan and Iraq in that they had more incidents of rape. It is exactly in the cities where they have they highest population of Muslims where they have a rape problem. The nationality of the rapist was determined by Swedish statistics as mainly from Iraq and Afghanistan. The lefties feminist administration was humiliated of those facts and stopped providing the nationality of the rapists. Well, those facts are a no-brainer for understanding the real problem here. The theory of yours is void. The problem is that you had strong opinionated something you know only very little about and tried to convince somebody who has made his research. That is the definition of the Dunning-Krueger effect. 
&gt;only below 250 Only? Well I guess you should give weapons to everyone because according to you, that number is too small. Thanks, but I would rather live in a country when idiots cannot pull a gun just like that. Idiots are everywhere, but only in USA they can get guns almost for free. Again; I live in Serbia and even after so many wars, you still can't buy gun illegally unless you have lots of money. And if you do, you don't rob people with it. Listen to Jim, his arguments are solid.
if I needed to make an app that had to deal with data such that I'd need really large arrays, I would definitely look at using these instead. arrays gobble up memory very quickly. that said, with the advent of generators, the likelihood of needing to create massive arrays is much lower than it used to be, thankfully.
I believe he thinks that USA is the only country in the world with free speech. Oh man... we insult our president on **daily** basis (google: vucicu pederu), he knows that, gets pissed... but can't do anything. But we don't have 1A; hmmm.... that's strange, right? ;) What do you think /user/fb777 ? Should we stop and wait for 1A to be implemented here? ;) &amp;#x200B;
[removed]
Sure, Next time I will keep this in my mind.
That's 100% true
Again the 2A was designed of the founding fathers to combat with a militia a corrupt, despotic dictatorship like they endured during the rule of the king. That is still its purpose. Do you have a better solution for that? In Brussels a maniac went rampage stole weapons from police women and killed them. Then other police men killed him with guns. Show different things. * 1. The advantage you have with a gun * 2. Bad guy can get guns when they want. * 3. Guns in the hands of the good guys is the solution. * 4. It happens everywhere. The logic that when you remove weapons all your problems go away is flawed, because weapons exist and weapons are the way to dominate other people. So this will happen ad infinitum until the end of humanity. You try to regulate weapons you get Detroit, Chicago or NY where most of the killings happen. They one of the most regulated areas. When you think that works what's next. Do we prohibit pointy things? Why not. Much more people get killed by knifes than of weapons. Do we incarcerate medical doctors? Why not? They are responsible for 400000 deaths each year, because they fucked up. You are telling me you are not concerned about that but very concerned that in 2016 120 people died of mass murder in a country of 350 Million people. Well, little guy I have bad news for you in this universe people die all the time. You can not and will not inhibit every death, but you can focus on problems that matter and try to fix them first before you lose the big picture. Sometimes its hard when emotions are involved, but real leaders have to take the appropriate measures and consider the big picture instead to give in to the ones that cry the loudest.
honestly... Its up to you. I personally often write 5 minutes scripts that are ment to be run once, just becouse doing X by hand would take me more than given 5 minutes (for example few days ago I had around 500 files to rename, and it was "file\_name\_randomChars" and I wanted to get rid of randomChars part. &amp;#x200B; of course I could follow all practices, prepare proper background for that etcera. But I would miss the point of doing it \*\*faster\*\* than by hand. By hand I can do around 20-30 files per minute, which is +- 15-20 minutes of work without script. So what's the point of doing one-time thing "properly" when "proper" method absolutely miss the point of even doing it. &amp;#x200B; And I would care about very, veery few things in (what I call "temp script"): \- it's in special "tempscripts" directory \- camleCase \- its faster to make script than do by hand
yeah, we have one person who is really just beginner and learning php and he bearly knows what the freak \_\_construct is, buuuut when asked "how to db" I just anwsered "use PDO" and he done binds etc properly at first shot, but his script was crashing becouse he was sending malformed header ("Location : index.php")... So I honestly have no idea how one can screw that up, even when beginers naturally do it properly...
&gt;The only way to step out of mount stupid is to understand how propaganda works. My advise is you go to Wikipedia and search for "propaganda techniques". Then you learn them and then you watch out for all of those techniques in every sentence you read, every sentence you hear and every image that is presented to you. Then you will start to see it everywhere and then you will start to search for opinions that are suppressed, ignored or labeled as crazy. And you become more objective because you become independent from group thinking that is highly influenced by constant propaganda. So far I agree with your statement. But I think there is a deep different in what our conclusions are :) &gt;But the disappointing part is that your conclusion of the selected bits of data is also nothing genuine and most importantly also very wrong I'm not saying the numbers I came with are 100% accurate and trustable and in general you should always check your sources. However if you look into it: there is nothing deep in those. A murder is reported to the police and some organisms are in charged of collecting those stats. You can either believe that all those organisms are 100% corrupted and making up numbers of believe that they are fairly accurate. &gt;There are memes that are planted in your mind by MSM, movies, TV series, social media and so on because it fits a political agenda of certain groups that want to influence the masses in the population. The mass media is there to program the population Just for the record: the mass meme usage of over the last 3 years has mainly been pro white-nationalism/right-wing extremism/pro-gun which is everything I stand against. &gt;When you think of a priest you think of a pedophile. Err no... While pedophilia is certainly a big issue among priest, I don't do this kind of systemic associations as they are quite dangerous. &gt;Emotional charged people think the 2A is the culprit for mass shootings Well look here: we don't _think_, we _know_. That's the crazy part: there is enough _common sense_ and _historic precedents_ to point out that in a context of high gun violence, that it will only get worse when adding more guns. The propaganda here is to try to affirm otherwise and convince that saying "thoughts and prayers" is good enough. &gt;From 20,000 murders each year only below 250 are mass shooting related. 2016: 451 2017: 437 Sources: https://www.gunviolencearchive.org/reports/mass-shooting Fore sure it's a minor part of the total number of murders, it's still nonetheless incredibly high and much higher than any European country. &gt;Almost all mass shootings happened in gun free zones. It doesn't matter when guns are at the country level relatively easy to get. &gt;Why is it that you though that mass shooting are relative much higher when its just 1%? Sorry that's just _horribly_ high related. Besides the number of casualties, you need to look at the sheer number of mass shootings, it's _insane_: 382 in 2016 and 346 in 2017. &gt;Q: Why don't you care about the much higher percentage of other murders? I didn't say I don't care: I clearly stated for me the US feel far from safe, the high number of murder clearly reflects that IMO. Now why the focus on mass shooting? _Because it's easy to solve but the only god damn thing done so far is adding more guns, making them easier to access and sending thoughts and prayers_. I'll also pass on how the event is covered: if the person had been black or a muslim, you can bet it would make 100x more noise with "terrorism" everywhere. &gt;Q: Why don't we get to know every gang related murder. I don't have a very high opinion about the US medias tbh, but at least in Europe they are covered :) &gt;Q: Why do kids have psyachiatric problems and can't deal with the real world? Why is healthcare so inaccessible in that country? Why is it so easy for them to have access to a gun? &gt;Q:Why do mass shootings happen in NZ? Gun allowed + radicalisation and complacency towards blatant racism and white nationalism. &gt;Q: Why is Switzerland so safe when they have guns? Because they don't have a history of gun violence like the US? They also did for sure a couple of dirty things thorough history but they certainly never ever had a slave/racism/drug issues nearly as bad as in the US. Also you can live decently there event after loosing your job like in most European countries. &gt;Sweden did never have a rape problem in their statistics before The number of reported rapes in Sweden increased by 34 percent in the decade between 2008 and 2017. Between 2005 and 2011 a steady increase was in part due to changes in sexual assault laws meaning more crimes previously classified as sexual exploitation were classified as rape. After 2011 the rate varied between a low of 5,830 and a high of 6,700 in 2014 before reaching 7,230 in 2017. Source: https://www.thelocal.se/20180118/reported-rapes-in-sweden-up-by-10-percent &gt;Well, those facts are a no-brainer for understanding the real problem here. The theory of yours is void. The problem is that you had strong opinionated something you know only very little about and tried to convince somebody who has made his research. That is the definition of the Dunning-Krueger effect. So far that's what I can tell about and I provided sources which are very easy to verify. 
&gt;Listen to Jim, his arguments are solid. Totally agree. It's supposed to only be a fun comedy show, but somehow he managed to expose how ridiculous the situation is with very sound arguments and in a very funny way.
I like Eloquent: [https://laravel.com/docs/5.0/eloquent](https://laravel.com/docs/5.0/eloquent) But that's surely not the only one.
I'm reading a lot of discussion about the performance benefits here, but performance was not the primary motivator behind the extension. Arrays are powerful, can't argue against that - in fact it is difficult to beat them performance-wise even with specialized structures. However, they do not communicate the structure and intent of their data. We have O(n) helper functions like `is_assoc` which does something similar to what the json extension does to distinguish between objects and arrays. There is also the issue of empty arrays being ambiguous when it comes to json encoding. (This is just a small example). If I give you a map, you know it is associative. If it's a deque, you know that the intention is to shift/unshift. You don't have to use keys with a dummy value to build a set. It's the semantic value that comes with using specialized structures that really makes a difference when you start avoiding arrays as the default. I personally use them in every project regardless of the scale or intention because I find them easier to reason with, and often highlights bugs/bad code before it turns into a runtime error where an array wasn't keyed by an ID when it should have been, or wasn't sorted etc etc. We had a bug where we unset some keys in an array and mongo used it as an object in a whereIn query, even though the intent was a list-list argument. There are many, many subtle cases where the ambiguity of arrays come back to bite you. I also believe that using and understanding data structures makes you a better engineer / programmer because it requires that you think about your data and what your intention is. The performance goal was simply to be at least as good as arrays so that using the extension would not be a compromise, ie. no need to trade performance for a nice API (which is what all PHP collection implementations have to do, unavoidably). 
That's the best resource at this stage. ^
[Tom Butler's Hello World MVC in PHP](https://r.je/mvc-in-php) turned some lights on for me back in the day. Read it, and replicate his examples one at a time.
Web stuff does not mean that performance and good practice goes out the window. There are some large applications that run on PHP. if you can halve the memory for every time you use an array like a list, for example, you can make a pretty good case. PHP is not Java but it is alone in the corner without specialised data structures, even amongst other "web" languages. We should also not stifle PHP to the point where using it for non-web based tasks is unacceptable. It's a general purpose programming language and time/memory/semantics matter just as much as in any other language. 
You completely ignored what I told you, just parrot the same busted arguments. And why you mention other countries and change the subject? It is what orange idiot does. Listen to Jim, he explained **everything**. Then, and only then... come back. Because there is no point in me writing his arguments which you will again ignore. Again; listen to argument, not the person. I know because once I was idiot thinking everyone should have a gun for same parroted reasons. But at least I was smart enough to change my opinion when confronted with explanation why that is wrong. And fuck that nonsense about corrupt government. You will magically kill orange idiot or trained soldiers? Man... you must be really good in Counter-strike if you think it is so easy. \--- &amp;#x200B; Please, with sugar on top, fucking read what I wrote or watch the video.
 $conn=mysqli\_connect('localhost','root','','db'); if(!$conn){die('db error');}; $result=mysqli\_query($conn,' select count(\*) as x from users '); $row=mysqli\_fetch\_assoc($result); echo $row\['x'\]; &amp;#x200B; results : 22222222222222222222222222222222222222222222222222222222222222222... &amp;#x200B; The result keep on repeat and repeat until theres no end, is this a bug? 
Agreed.
we need more information. What are you trying to print out from the database? 
That is a perfect explanation, thank you. I already find huge benefits from parameter types. This is really expanding on that logic and like you said, help to reason well about the data. I hadn’t thought of that aspect. Thanks!
 if($result-&gt;num_rows){ while($row = $result-&gt;fetch_assoc()){ $rows[] = $row; } } return $rows; &amp;#x200B;
&gt; Cleaned up default PHP file template – no more “Created by PhpStorm”. There is a god after all.
It will become even more valuable when we apply Generics someday. :D
Debugging twig templates and the new string juggling stuff are the highlights for me. Jetbrains never ceases to deliver.
I am predisposed to like [Atlas](http://atlasphp.io) as the project lead, but of course there are others who prefer it as well.
The intention is not the replace arrays, and in my opinion Laravel Collections are a clear indicator that we're lacking a standard solution for this. PHP as a first language is great, and those who are new to programming can use arrays without being forced to also learn about data structures (in the same way a language like Java would). When you want to learn more, or get more out of your application, you can start thinking about the structure and intent of your data, and become more experienced that way.
Unfortunately the PHP convention is that "objects are always true". Using `if ($values-&gt;isEmpty())` removes that ambiguity anyway, otherwise anyone who comes across the condition would need to stop and think "wait... are we testing for empty or null?"
I'm really lost trying to understand deques. Does anyone have an example of a programming problem they've solved using a deque that they'd like to share?
Eloquent. Without any doubt!
I feel like you don’t want to acknowledge criticism of your post, so you make crappy comments like this
Can’t get much simpler or lightweight than that
Nice share, I didn't know Atlas, and so far, its one of most debloated one Ive seen.
Have to be honest, I like the new [styling options](https://blog.jetbrains.com/phpstorm/2019/02/phpstorm-2019-1-eap-191-5701-19/#new_styling_options). But debugging Twig templates looks great, too.
Sure thing. Have you ever used `array_unshift` or `array_shift`? Any use case that involves them probably calls for a Deque. A simple example at the top of my head is to transfer values between sorted sequences: `$b-&gt;unshift($a-&gt;pop())` without the need to move the entire sequence in O(n) like you would need to for arrays. I can already hear someone asking "yeah but when would I ever need to do that and why does it matter?". I do not have an answer for that, because I don't have a complete view of all possible use-cases that might arise. The intention is to provide a _capability_ so that you can achieve whatever data transformation you require. Some structures would be used very frequently, others very rarely, but they all aim to provide a capability that others do not.
http://php-decimal.io is a good one. ^^
&gt;We have O(n) helper functions like is\_assoc which does something similar to what the json extension does to distinguish between objects and arrays. There is also the issue of empty arrays being ambiguous when it comes to json encoding. Many serialisation formats have different data structures for ordered lists vs key-value pairs. For example, in my MessagePack implementation, I also have an [is\_assoc](https://github.com/rybakit/msgpack.php/blob/811ce7bec4fa2a5de6ce5a3b0b497cd772d68e47/src/Packer.php#L92-L94)\-like helper, which is obviously very inefficient. For empty arrays/maps distinguishing there is a bunch of workarounds like `FORCE_ARRAY`/`FORCE_MAP` flags and [wrappers](https://github.com/rybakit/msgpack.php/blob/811ce7bec4fa2a5de6ce5a3b0b497cd772d68e47/src/Type/Map.php). All these hacks can be removed as soon as we have advanced data structures in the core.
RedBeanPHP (https://redbeanphp.com)
I think I'm understanding it better now. The complexity of the operation to get the value from the beginning or end of the deque is reduced because it has pointers to the head and tail, is that it?
I wish
I don't see the lib using pthreads, how does it handle multi-threading? Or the expectation is that forks will be arranged in multi threads? Isn't a pillar of multi-threading the resource sharing? How the forks shares resources? Isn't for each fork allocated an entire new memory space? (that is why they are heavy to spawn, tho the fact of being a syscall to kernel through rings).
Thanks a lot!
to be fair, they dont have a post body, but I would imagine it should be ok to ask for recs in this type of fashion? This isnt a "please write my cart for me" but most likely just looking for recs for a cart lib.
netbeans zindabaad!
Correct, also for inserting at either end. The first value is not necessarily at the start of the allocation. A vector-like structure would need to move all other values forward or back to maintain that invariant, but a deque does not. 
I found this useful, the author is still adding to the content too: [developer.hyvor.com/tutorials/php/oop-intro](https://developer.hyvor.com/tutorials/php/oop-intro) See OP here: [r/PHP/i\_wrote\_a\_tutorial\_on\_objectoriented\_programming/](https://www.reddit.com/r/PHP/comments/b5pnoi/i_wrote_a_tutorial_on_objectoriented_programming/) I found this video tutorial very good too: [YouTube OOP PHP Bitfumes Webnologies](https://www.youtube.com/playlist?list=PLe30vg_FG4OSEHH6bRF8FrA7wmoAMUZLv). These are the [notes I made](https://drive.google.com/file/d/14HCKaS5xs5uTzKga9ylIvS-yAwmZaGE6/view?usp=sharing), these are notes and not verbatim of the tutorial, you will need to watch the videos for them to make sense, but may help with a type along.
The .phpstorm.meta.php really demonstrates how much PHP needs advanced type hints (things like function signatures) and enums.
If you REALLY are in a hurry, I get you. a hack is one way to go. Possibly the right way. I wrote a lot of crappy scripts to do idiotic things at home. They do their job. I have a few regrets when it's time to put my hands on them again to tweak a few things, but that's life. There's no such thing as futureproof. But I'd never write crappy scripts like that at work, even if it's just internal tooling... unless it's a throwaway script to fix an outage or something like that. Because you never know how things evolve after they are off your hands. Good devs will be annoyed, bad devs will keep the bugs and will think your stuff as the way to write things, and spread the cancer. Today you write your hacky script. Tomorrow, still in a hurry, you add stuff to it. Then you leave a company, somebody else comes in and wraps it into a larger piece of software. Then he leaves, and a year later management has an issue that can be covered by this internal suite of tools, and somebody says "I think we had something to do this", and they start selling it and integrating it with some other software. 3 years down the line, a bug in your stupid script that everybody knew was a hack but "it works, let's not spend time refactoring legacy code", causes the software to display the wrong thing or pass the wrong input, and some guy ends up without a limb. This shit happens. I have seen it happen. Damn, work long enough in the field and you'll hear all sorts of horror stories... that could have been avoided or at least mitigated by just following good practices. Anyway, at the end of the day, the effort of doing things properly is a matter of exercise and judgement. Let me make an example: if you asked me a dozen of years ago if it was necessary to use source control on a personal project, I'd have said no, it's overkill and it's easier to do without until you need to collaborate with multiple people, just do a backup copy of whatever you are doing when you think it's necessary. This was because I wasn't comfortable with the tools. Nowadays it's second nature to me, so it's not a decision to make. Am I writing a 3 lines bash script? Fine, no need to init a repo, I will probably delete the script after I am done. For everything else there's git. And I don't have to think about it, it's like obvious, even by working alone it has all sorts of advantages. The same thing applies to all these apparently overkill good practices, once you have enough experience you just use them and don't think them as a massive overhead but as a help. The other thing is, when asking for help on the internet, you never know the full context of whoever reads. It's better to give a more exhaustive solution than a bad hack. If people are going to blindly copy paste stuff, it's better if they copy decent code.
maybe the business will be ok after paying all the fines in the world, but tell that to the person that got hacked because of your crappy security, the guy that lost a limb due to a "bug" in the heavy machinery software, the guy that had the wrong surgery done because the doctor read it on the buggy healthcare software, or the relatives of the people dead after a plane crashed because of some undocumented software changes. Tech debt might be fine from a financial perspective, it might not be from an ethical one. We as engineers should be at least a bit responsible for this kind of crap, we can't just blame the management.
I'm doing something similar but in JavaScript (using Maker.js with a PHP API which I highly recommend). I struggled with this for a while, where everything depends on everything else, like if you mutate one object a bunch of other objects have to change as well. It felt like every object needed to know the state of every other object, since they were drawing essentially connected objects. What I settled on was a layered approach, where the renderers would sit at the bottom of the stack and be responsible for the SVG/DXF/etc ouput, driven by a messaging/co-ordination layer, and at the top the controller that structured the parameterized input. 
I have used \Ds extensively in several projects, particularly ones that deal with large data sets, or that need very efficient data management. There aren't many projects that actually need that, but I have worked on a few and it's been very helpful as a container for that kind of data.
Fascinating. This looks like a slightly less featured version of [Fermat](https://github.com/JordanRL/Fermat), which when I created it was the only library that actually handled this kind of thing. The developer of Decimal seems to be more minded towards performance than I am though, would love to collaborate, as I'm trying to finish up the last of the sequences, series, and collections tools so that I can support imaginary numbers and release version 2.0.0
They changed the darcula theme. I liked how it use to be. What's the easiest way to get the old one back?
Let's collaborate. I have a fully completed and tested v2.0 of ext-decimal that includes rational number support, but it I have not yet released or announced it. The branch is current. 
Let's collaborate. I have a fully featured and tested v2.0 of ext-decimal that includes rational number support, but it I have not yet released or announced it. The branch is current. 
Oh! You develop Decimal? Sure! I'd love to collaborate.
I'm an EU citizen. It was the best city I could be doing my job at without needing a visa, so I moved to London. Then Brexit happened, so I guess in the future people might chose other european capitals. My plan B is Stockholm but there are other competitive options. As of now, London still is the best for software devs, because of language barrier, salary, market and community size, working public services, taxes (british people moan about their taxes but they have it good), free museums, diversity of people. London real pain is housing: price and quality both suck. But with a mid-level dev salary you are already well off (£40k/year is enough to live on your own rather than a shared flat; if you are a couple, you are set until you have kids and can live in a nice flat in zone 2). Moving to the US would have meant dealing with immigration bureaucracy, which I've heard being a bit of a nightmare, and the different system and culture that america has which frankly I would not be looking forward to, and I'd be far away from my family rather than just a couple-hours flight. Plus, having a VISA makes it harder to change workplace, or just ask for a raise. If things go wrong you lose your residence. I don't have that problem here. And I wonder how it works as an immigrant if I wanted to create a company in the US in order to be a contractor, can I sponsor myself?
Super interesting. Although my bottleneck and maybe for the majority of web projects is the database and not php itself. When did you find yourself in a position where you had to think of a data structure to hold 50 million records? Usually we paginate and limit our queries and end up dealing with a few thousands records at worst, not really big enough to make a significant difference on the data structure... I see this Ds as a game changer though for big data, maybe it will open the door for doing data science shit with php... 
[removed]
Since the new update, multiline selection for me is now middle mouse click + drag. How can I add back alt + drag? I can't find the right option
check Idiorm https://github.com/j4mie/idiorm, A lightweight nearly-zero-configuration object-relational mapper and fluent query builder for PHP5 and above.
You are right in that a few thousands records could be considered the common case, but what if you are serving 1000 requests per second, or even more than that? The idea is not to make your slow app fast all of a sudden, but to reduce the resources you are using overall. This can save $ at scale. Most projects won't be at a scale where that makes a blip on the radar though, which is why the "use this for performance" argument does not carry all the way through. The performance part of the case for Ds is that it is no worse than arrays in the worst case. 
Ah, ok, I see what we're talking about here. I was meaning "multi-threaded" in the looser term of being able to utilize multiple CPU threads concurrently, but yes it does a fork-exec to accomplish that, which starts a new php child process for each task. This is not a fork though, it is a fresh new php process, and doesn't have any of the memory of the parent process. The data is shared by passing the serialized data to the new php process. Outside of that it does not share memory. It's not multiple threads in a single process like pthreads. You might want to check out https://github.com/krakjoe/parallel (by one of the PHP devs), which uses runs on PHP-ZTS.
The second part of the PSR-14 blog series discusses StoppableEventInterface, and why it has only an isPropagationStopped() method. Later installments will have even more examples of where not requiring stopPropagation() is a good thing: &amp;#x200B; [https://steemit.com/php/@crell/psr-14-all-about-events](https://steemit.com/php/@crell/psr-14-all-about-events)
&gt; Using DS just adds complexity to a growing unexperienced developer base. array is incredibly complex. The DS data structures are each simpler.
I'm not saying its how things should be. I'm just saying that most places aren't thinking of it like that unless they are forced to by some other entity. (or if it impacts their bottom line)
Good catch. It's under "Create Rectangular Selection on Mouse Drag" in the Keymap settings.
SPL classes are insanity. As evidence I submit this: https://www.php.net/manual/en/splheap.recoverfromcorruption.php.
Hmm, it seems like it's now conflicting with "Add or Remove Caret". The alt key used to do both of these actions at the same time in the previous version. I don't think there is a way to keep the same behavior as it won't allow duplicated key binds
It's not conflicting. When it asks you **Remove** of **Leave** "Add or Remove Caret" choose the **Leave** option. Notice that this shortcut is for "Mouse Drag". Unless there was some use-case I wasn't aware of before, the functionality should be the same.
I literally only use them for Advent of Code and other games. Never in the real world. 
Oh you are right, thanks!
Nope! We try our best to keep the sub clean of posts like these.
Why is that insane? If an exception is thrown during comparison for a heap, what should the result be? If you crash a car for driving too fast, it's not a flaw with the car, but user error.
I'd LOVE to have enums! I few weeks back I was bitten by a very nasty bug which would have been easily preventable with proper enums
&gt;it does a fork-exec to accomplish that, which starts a new php child process for each task. This is not a fork though, it is a fresh new php process, and doesn't have any of the memory of the parent process. &amp;#x200B; From the link you posted yourself: &amp;#x200B; &gt;After calling fork(), the created child process is an **exact copy of the parent** \[...\] &amp;#x200B; &gt;When a process forks, **a complete copy** of the executing program is made **into the new process**. &amp;#x200B; If your program uses 2MB, a fork will use \~2MB as well, its almost like 2 programs running side-by-side, almost because of features like CoW, but still, it doesn't scale very well, added the fact of the cost of a syscall, processes in the lib should be used wisely, not arbitrarily like you can do with Erlang "processes", Goroutines, Akka or Swoole Coroutines. Also, I'm not sure that process forks are automatically distributed between CPU cores (so you can be really parallel, not only concurrent), I should read more about OSes schedulers.
I agree with this. By being able to do almost everything, you unavoidably introduce complexity. 
yeah its quite awesome, I am actually thinking about writing an ORM with Chris Pitt's PreProcess syntax. The short closure feature will make it possible to implement fluent API for model mapping, similar to Entity Framework's. 
I bet the constructor phpDoc still says “Constructor.”
You're missing the exec of the fork-exec. The parent php process using `proc_open` does fork itself, but then starts a new child process and quickly exits. Because of the copy-on-write with the fork and since nearly no changes in memory occur during this short period there is nearly no additional overhead to this fork. The child process created is a new bootstrapped PHP process that doesn't share any memory with it's forked parent. This is the normal way of starting child processes in Unix-like systems. And yes, it definitely utilizes all available CPU threads since each process can be put on any available CPU thread. Testing some basic cpu-heavy loads, the traditional single process PHP finished in 112 seconds while the same tasks run on this library finished in 21 seconds on my 8-core (with lots of background tasks running too), running on all cores.
Redbean would be cool, if not for their refusal to use Composer. &gt; Composer is not the preferred way to install RedBeanPHP and never will be. Using package management systems for development can be dangerous because people can inject malicious dependencies or remove dependencies. 
Oh, thanks for the clarification. I thought it was the same thing. Just saw that after \`exec()\` the original program data is lost.
Get used to it and complain again when they change _this_ version. 
&gt;blog.jetbrains.com/phpsto... I was in that situation myself not too far back! Stumbled on this, never looked back: [https://github.com/spatie/enum](https://github.com/spatie/enum)
Because zipped source code downloaded from the author has never been compromised
Wait, what did they change about it?
Ha. I knew i couldn't be the only one that got confused by that change https://twitter.com/PascalLandau/status/1111275927345025025?s=19 :)
Is it just me or has the speed of opening a project increased dramatically?
I mean sure, but most web apps can be written in SQL queries and posting results in JSON. In those cases, these data structures give very little meaning to the overall process.
&gt; The education system is screwed and insanely expansive If you make good money, you can't find a better education in the world. &gt; The healthcare system is a mess and insanely expansive If you make good money, you can't find better healthcare in the world. &gt; The relationship of Americans with food is... not the best You don't have to over indulge. But there is a huge variety of great cuisine here. &gt; Public transports are pretty much non-existent in the US and I hate driving Depends on where you live.
Same in pycharm update 
&gt; most web apps can be written in SQL queries and posting results in JSON There are so many applications with complex logic (think financial apps, reporting tools, aggregation systems) that have no choice but to do a lot of the processing and data transformations in PHP. 
Easiest and simplest? Definitely Eloquent.
Eloquent can also be used outside of Laravel, see https://github.com/illuminate/database
It's not a good idea to instantiate state in constructor. One of the reasons is nullable values. Rich form bundle is using reflection at runtime. That's simply a no go.
not hotdog
Just released a new version **0.4.0** with some bugfixes and a lot of new features. Give it a try :) [https://github.com/icanhazstring/composer-unused/releases/tag/0.4.0](https://github.com/icanhazstring/composer-unused/releases/tag/0.4.0) 
Speaking of `dead-code`, you might [put this into CI](https://github.com/rectorphp/rector/blob/master/config/level/dead-code/dead-code.yaml) to watch your code for you
UPDATE: I managed to solve this. Part of my inspiration for the solution came from comments below, and I got a little bit of additional inspiration from looking at the Builder pattern. To recap, I have a PHP CLI script that generates SVG files for cutting various components of a scale model pinball machine. Each component is made up of different SVG shapes, whose size and location are dependent on other parts. I had a rudimentary system in place for enforcing dependencies among SVG files. In other words, to force the trough to be drawn before the drain guard, since the latter is calculated based on the size of the former. The problem is that the dependencies were turning out to be way more granular. They were not at the SVG file level, but at the individual shape level. I ended up solving it by splitting everything apart into two separate object types: Components and Canvases. The program execution now makes two passes. First it builds the components, and then it assembles them onto canvases. Components are individual shapes, or groups of shapes. My base Component class: * assembles an array of SVG shapes and adds them to a buffer using a setter method. All shapes are built within a coordinate space that is local to the component. * provides a way for components to declare dependencies, forcing them to be built in a particular order. * provides a way for a component to expose properties to other components, and to read the properties of other components that have already been built. * provides getter/setter methods that allow the component to expose named anchor points such as "topleft". Once all components have been built, all Canvas classes are instantiated and the assemble() method is called on them. There are no dependencies needed for Canvases, so they can be run in any order. For each Canvas, here's what happens when the assemble() method is called. * Retrieves each SVG shape that is a part of the SVG file to be output. * Calculates where to anchor it within the canvas (ex: Directly to the left of the shooter tip) * Retrieves a named anchor point from the component (ex: "topright") * Calls a `transform()` method to map the coordinates from the SVG shape into the canvas's coordinate space, thus anchoring the shape to a particular location in the canvas. * Outputs the SVG file. So far it's working out really well. Whenever I change a parameter, shapes adjust themselves exactly how I wanted them to. There are probably more sophisticated ways to do this, but for my needs this is working out perfectly.
Maker.js looks really neat. I ended up solving my problem. I posted an explanation of my solution in another comment under this post.
For those use-cases SQL is the best tool. Last 5 years I have done only finance (over 10k transactions/s), reporting and aggregation (hundreds of thousands devices with years of many 5 minute metrics) and Postgres was the place to solve everything in. With more data, easier, faster and safer was handling in SQL. The best way to use PHP in those cases was to put data into query. Regardless of that, after going through the blog post, I have only high praise for this work. It's exactly what I was expecting the SPL Ds to be. Personally I never resorted to using those, but always wanted go put them in the code. Now I never will, as this is so much nicer. Love the decisions, even finaling all classes. Benchmarks are cool, too, though if most uses won't cross n &gt; 3, it could be interesting to know at that scale the differences would be similar.
Your suggestions are very good but what about all the software that doesn't follow those already? This may be ok if it was major version like PHP 8. But for 7.4 or something like that it will just break a lot of systems.
SimpleXMLElement is a container-like exception to that. Ds /could/ be treated the same way if there was consensus it was the right thing to do
\`array\_map()\` is surely the simplest ORM out there.
Redbean is archaic and I wouldn't recommend it. The concept is interesting though.
Not sure if you’re referring to it here, but there’s a bug in how fonts are rendered on Mac in 2019.1: https://youtrack.jetbrains.com/issue/JBR-1174
That's why I said: &amp;#x200B; &gt;For those cases when entity **must** have properties assigned &amp;#x200B; Example: if I know that Product **cannot** be saved w/o assigned Category (one-2-many) and that is must have a name and price, the only valid solution is to have all 3 in constructor. It is logical; I inject dependencies because I know they will never be null. It means that method &amp;#x200B; public function getCategory(): Category {...} &amp;#x200B; will not need to be nullable return type; I know that because I (i.e. rich-form bundle) injected it. My example wasn't about optional values like some attributes or similar, only about dependencies. rich-form bundle will also take care about TypeError exception thrown when you call null on &amp;#x200B; public function setCategory(Category $category) {} &amp;#x200B; &gt;Rich form bundle is using reflection at runtime. That's simply a no go. &amp;#x200B; How so? It is only using reflection on your factory method which is actually done better than I expected (although, not documented at all, I had to check the code). If you are talking about speed; that's just a myth. Ocramius made 100.000 property reflections for third of a second: [http://ocramius.github.io/blog/accessing-private-php-class-members-without-reflection/](http://ocramius.github.io/blog/accessing-private-php-class-members-without-reflection/) &amp;#x200B;
I use it with Doctrine dbal in a project of mine and it works very well 
I currently use Visual Studio code how will phpstorm help me in a way that Visual Studio code can't
I'd upvote this twice if I could.
&gt; For those use-cases SQL is the best tool. Doesn't this require that all your business logic be written in SQL? &gt; Benchmarks are cool, too, though if most uses won't cross n &gt; 3, it could be interesting to know at that scale the differences would be similar. Good call, I'll make sure to do some realistic ones in the next iteration.
I think that even if there was consensus, it goes against the design philosophy we are trying to achieve going forward, which is to *avoid ambiguity as much as possible*. `if (empty($map))` is idiomatic and reads clearly, but I couldn't tell you with confidence what the intention was without knowing how the object casts to bool. Something like `if (count($map) == 0)` or `if ($map-&gt;isEmpty())` is better because there is no doubt about its intent and behavior. I think that if you find yourself relying on boolean equivalents, it should be a sign that your syntax is ambiguous to begin with.
I looked at it once, thinking maybe I could use it like structs like C, but nope.
Saw the update this morning will working and decided to do it right now. Could not open a project. Restarted PHPStorm, restarted my pc, nothing. Had to reinstall to make it work again. Great morning!
Well one is a text editor and the other is a fully featured IDE. Completely different things.
haha don't need to be nervous. I was like when I got into college, around 14 years ago Now, I've written national-scale web apps with Symfony: https://gitlab.com/swsocialweb/lyra-presidential-app https://gitlab.com/sw-social-web/lyra_electoral_app https://gitlab.com/sw-social-web/corvus_app Using standards and everything else.
Have you considered OpenCart? It has almost anything out of the box, and the latest version of it uses Twig for templating, which is a good improvement.
Last time I looked at that software, a couple of years ago, it was complete crap and the attitude of the main developer sucked. I would be very hesitant to put any effort into spinning that up and customizing it for a client.
What kind of reports? Due to client's request, I had to create heavily customized reports (Symfony + Doctrine + Postgres) and display the report using Data tables. Yeah, a dirty solution but the main benefit was that data-tables let you export the entire table to CSV, PDF, or XLS. 
It is better now. Version 3 is a huge improvement over 1.5 and even 2.0 Might just give it a try now, and see if it fits your needs. Otherwise, may I also suggest Magento?
did the fix the infinite indexing 
I'm aware of all of the various packages that exist to create a store. None of them have even close to all of the features needed by this build, which is why I'm looking for suggestions of either a good e-commerce framework or an easily extendable e-commerce package focused on digital assets. Not a package that does everything, like Magento or opencart...
&gt;https://sylius.com/
Thank you so much! 😇
Check out the mall plugin for October CMS. I can highly recommend the plugin as well as the CMS! https://github.com/OFFLINE-GmbH/oc-mall-plugin
I think that an exception during a heap comparison should somehow roll back to its previous state. The user should never have to consider the possibility of corruption. 
That’s awesome! I totally used Yasumi for some contract work a while back.
Thanks! Happy to hear it Yasumi helped you out :)
A tree is an abstract data type. There are many ways to implement a tree, and in some cases, you can use an array as the underlying data structure (for example, a Binary search tree with an array implementation is very efficient). Personally, I use PHP for web backends, web API's, various scripting needs and, on occasion, long running processes. Because of the use cases I mentioned above, I don't find myself using ADT's like linked lists, trees or graphs that much. However there have been exceptions. About a year ago, I had a use case where we had a long running php script that was taking in several hundred data points/second via stdin. There was no need to store the data in a database but we needed to understand the top N biggest numbers at any given time. I used a priority queue (max heap) to keep track and it worked well enough (used ext-ds). I've also used tree's to represent hierarchies, like navigations menus. Where I've used tree's most of all though are interviews. If your interview problem includes an ordered list and you need to find something, it's almost always a binary search tree question. If you need to do something like track the kth largest, or smallest element, it's probably a priority queue question. 
Consider shopify
My eyes are fucking dead. And I would say overall this tutorial does more harm than good, ovesimplifying things to the point of the total unusability.
I actually prefer no composer approach but that's my personal taste
That looks very intresting. Thanks for good share.
Depends on what you do. If you're a WordPress dev who mostly edits some templates and the occasional config file, it won't help you much. If you're knee deep into a huge web application, especially if it's based on a framework, it'll be night and day. The only way to know for sure is give it a spin.
The website is missing a "What is Yasumy" page. Even after reading a few pages, I still don't understand what it is. I guess I don't need it then.
You can disabled these under Settings &gt; Editor &gt; File and Code Templates.
I loved using this when not using and framework.
Thats' pretty cool of you mentioning it, I wrote spatie/enum 😁 We're working on a v2 now btw!
Perhaps you have missed the main page ([https://azuyalabs.github.io/yasumi/](https://azuyalabs.github.io/yasumi/)). It explains in detail what Yasumi is and what it can do. If you have a look at the basic recipe from the Cookbook ([https://azuyalabs.github.io/yasumi/cookbook/basic/](https://azuyalabs.github.io/yasumi/cookbook/basic/)) you can see how you can use it. Cheers! Sacha
Craft Commerce if you’ve got some budget? Might be something in their plugin store, but craft is reasonably easy to extend. 
Chilkat. Back in 2009 their livraries we're \*made\* for mailers. I used it extensively and made a killing off it. On mobile so I'm not googling for the link but I'm pretty sure its chilkatsoft.net/.com
PhpStorm has WordPress support, meaning it can autocomplete WP functions, tell you what parameters functions have, etc. Using PhpStorm for WP is very useful!
Is that still considered an ORM? I would say without Modelling-capabilities like relationships i would say array_map is more a DTO than an ORM.
Laravel Developer
Please explain
&gt;First of all you really should not take political advice from comedians and jesters unless they are old and experienced enough to know the truth like George Carlin did. They are there for entertainment purposes. &amp;#x200B; That was to the point and perfect. I could not add more sense to it, but seeing that you don't get it I must explain in to you are 5 year old. First here is a better example of someone in this debate. The teenager Kyle Kashuv. &amp;#x200B; [https://en.wikipedia.org/wiki/Kyle\_Kashuv](https://en.wikipedia.org/wiki/Kyle_Kashuv) &amp;#x200B; He is young, but smart, survived himself a mass shooting in his school, is a pro 2A advocated, goes to Harvard now and identified that the problem are unstable teenagers that are not well socialized and have to be dealt with. He has quite a lot in common with our topic here, but there are even better examples. &amp;#x200B; Your video of a comedian on the other side is funny and I am sure I saw it before you saw it long time ago and I laughed. You still think that it is particularly witty when it is not. You think that it covers all angles when it is absolutely not. You think that he is serious when he says himself in this video that he is just a comedian with an opinion. So this guy who is not from the US and never endured a mass shooting and did not know personally a mass shooter and never had the freedom to use the 2A or the possibility to lose the 2A is putting a sketch together and he will clearly exaggerate, only name things that sound ridiculous, bank on resentments towards gun tooters and appeal on the "think of the poor children" side. He will dumb down the message so even even his most stupid audience will get what he is saying without being bored by his lecture. He does it all for laughs, remember? So it does not matter when he drops some falsehoods like the feelings of the adversaries that he magically seem to know. Or telling you that gun control works in Oceania when just weeks ago we had a shooting in Oceania. Now, suddenly its get morbid, but also ironic and not funny, because actual people died. Or is it funny that gun control did not work in New Zealand and that his whole argument is void? Remember, I did not want to go this path. I told he is just a jester. And jester don't have liability. The kings allowed jester free speech, they were actually the only ones allowed free speech, because they were funny and nobody took them serious. So they never had any liability. If they wanted to become political commentators and not be laughed at then they would have picked another profession. They know how to make people laugh, but like Celebrities, porn-stars, movie actors, singers, comedians, designers and the Kardashians they have little time to deep dive in politics and scramble through the propaganda, the lies and still have enough knowledge of classified information. &amp;#x200B; So my obstruction is very reasonable. I don't say comedians can't be smart or have valid points they can make. I say they have no liability, no experience, are not serious enough and too much focus on the punch line. You want to make some of his valid points then do it and we can discuss, but I would not recommend to hide behind a jester when you did build up your opinion yet from the ground and can not defend your opinion with real substance. &amp;#x200B; On the militia side you are as wrong as you can be. There is a reason USA would be very, very hard to invade. The USA is a package. It works because all of it components. You take some of its components away and it may crash. The 2A is one of this very essential components, believe it or not. It means the States trust their own population with guns. They trust that out of 350 Million people only some will kill themselves in a criminal away. That's a sacrifice the State is willing to do for the freedoms they allow. If an Administration of the USA says Americans can not be trusted with weapons then the Americans should say that they can not trust that Administration and rightly so, because the Administration is there to serve the people. And Americans are particularly paranoid when somebody wants to take away their defenses. Guys tried that once and then there was this Boston tea party. Since then they are free and they know it has everything to do with their Bill of Rights and also the 2A. Lesson learned. &amp;#x200B; Europeans on the other side had Hitler who confiscated the weapons of Austrians and the French and then he killed 8 Million of his own population. Stalin did it the same, but he killed 60 Million of his own. Since then Europe is not free. There was never freedom of speech since then and in many countries you face jail time for denying the holocaust which is the worst, but it served as precedent to regulate speech and when somebodies feelings are hurt. Now with the EU it is much worse and the freedoms are eroded daily in a boil the frog strategy. The young people do not even notice, but the old people remember times when they had more freedoms. And there is no civil militia in EU. &amp;#x200B; If the whole Uniformed services of the United States would try to kill its own citizens and take over the country they would be crushed. Now you are saying. "Are you stupid they have tanks, the most advanced planes and nuclear bombs." You want to send tanks into the cities to see them burn like Russian tanks in Chechnya. So you are going to carpet bomb the whole place and drop a few MAOB and nuclear bombs for good measure on your own country? &amp;#x200B; No, you can't. Its a big place with lots of inhabitants with millions of weapons and big parts of the population is trained militia, served in Uniformed Services and then there is also the police. First the Army would be demoralized to shoot at their own family members and a lot would desert and change sides. The best survival strategy for the Army then would be to start a civil war. If its the Administration against all its civil population they lose. Simply because even a towel head with AK-47 can make them die when they try to get him in his own places in that mountain. It's not gonna happen. US had a hard time in Afghanistan, Iraq, Syrian and Vietnam because of that. Killing with a drone is easy, but its hard to remove people from their own homes. That is the reason the US is scared of it own people. And that is a good thing. I see my CS:Source and CandyCrush taught me well. /s &amp;#x200B; &amp;#x200B; &amp;#x200B;
**Kyle Kashuv** Kyle Kashuv is an activist and survivor of the Stoneman Douglas High School shooting. Following the shooting, Kashuv received media coverage for his views on gun rights, prompted by two former White House aides and a conservative blogger who urged him to promote his message. He advocated for the STOP School Violence Act and criticized author and journalist Kurt Eichenwald for his communication toward him. He has met with President Donald Trump, Supreme Court Justice Clarence Thomas, and other politicians. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
It's a good enough mapper, and certainly better than modifying your data structures to fit your DB structure.
&gt; So this guy who is not from the US and never endured a mass shooting and did not know personally a mass shooter and never had the freedom to use the 2A or the possibility to lose the 2A is putting a sketch together and he will clearly exaggerate So I asked you to watch a video and you clearly didn't. And you call me 5 year old? I call you idiot and a liar! About militia; trained soldier will easily eliminate 50-100 civilians in a close-combat far fight. Look at some paintball games where just 1 real soldier, with no backup team, kills that number of opponents. In real war, they will have body armors, night goggles and powerful sniper rifles with people who knows how to use them. Your video-game experience is irrelevant; when people start to die, panic will take control faster than army. And because in paintball games no one dies, the proportion can probably scale to 300:1. Chopers, planes, drones, tanks... Yeah... they would use them if needed. If government starts the war on its people, they would use remote attacks and not close-combat. It is fucking war, pilots would have less remorse than someone from close distance. But sure... untrained militia will defeat them with their guns and rifles. We can all imagine FB777 with your fancy rocket launcher shooting at fighter-jet; hey, it can be done in video games, surely it can be done in reality, right? Go listen to orange idiot , Kardashians, conspiracy theories... That's your level. 
Sylius is a framework - it is never going to be "support out of the box" type of thing. But it is easy to modify it to do what you need it too and support it long term. &amp;#x200B; "The problem is that she has a lot of unique business needs, so no matter what we use, I need to be able to expand it easily to add new features. I really liked Sylius, but I'm not sure it's the best fit for this" - this is what Sylius has been built for.
Ah, it might help you a lot, then. Make sure you install the Laravel plugin, and take a peek at a tutorial or two - an IDE is by definition a large and complex beast, and it'd be a shame if you'd miss out on some life-changing functionality.
Woa, your view is even more tweaked than I thought. &gt;So this guy who is not from the US and never endured a mass shooting and did not know personally a mass shooter and never had the freedom to use the 2A or the possibility to lose the 2A You really don't need to be from the US, experience 2A and have the possibility to lose 2A to have a solid opinion on the subject and comment on it. Also for the record: most countries _allows_ people to carry guns. It's just that it's not as easy as going to wallmart in the right state with a bit of cash. You know like, _sensible_ gun control laws. &gt;Or telling you that gun control works in Oceania when just weeks ago we had a shooting in Oceania Nope. There was a mass shooting in NZ which did _not_ have gun control, but decided to implement it directly following the event instead of sending thoughts and prayers like the US. Also you are tweaking our words: at no point we are saying tighter gun control will completely remove mass shooting. We are however saying it will most definitely reduce greatly the number of occurrences and casualties. &gt;There is a reason USA would be very, very hard to invade I'm pretty sure the fact that you are spending more than 50% of your whole budget (54% in 2015 - source: https://www.nationalpriorities.org/campaigns/military-spending-united-states/) has a lot more to do than an untrained civil militia. We are no longer in WW1 or WW2, wars don't go with a militia anymore but smaller and more elite and well equipped trooped. &gt;Europeans on the other side had Hitler who confiscated the weapons of Austrians and the French You really think that changed anything? I invite you to take a really good look at this chart: https://en.wikipedia.org/wiki/Estimated_number_of_civilian_guns_per_capita_by_country. France has 19.6 firearms per person, Austria 30 (higher than Switzerland). So no don't worry we got our share of Europeans with their guns: they are just much stricter on the usage and control. &gt;There was never freedom of speech since then and in many countries you face jail time for denying the holocaust which is the worst You are convoluting two things here: - There _is_ freedom of speech. It doesn't however mean you can say the fuck you want, and denying the holocaust which _did fucking happen_ for fucks sake, is not being paranoid, dubious, but retarded and denying a crime against humanity which killed _17 million_ people. - It's not because you have 1A that you are country of "freedom of speech". Cf. Chelsea Manning, Edward Snowden, J. Assange. Tell me again how you are not going to jail if you are a whistleblower. The reason why the US looks like the most retarted country ever with their 2A is because you fail to see: - you have an insane number of mass shootings (numbers already provided in another reply) - you have an insane number of death/injury/accident gun-related (numbers already provided in another reply) - you have an insane number of guns (120 firearms for 100 person): &gt;"Americans made up 4 percent of the world's population but owned about 46 percent of the entire global stock of 857 million civilian firearms."[5] U.S civilians own 393 million guns. That is 3 times as many guns as the armed forces of the Russian Federation (30.3 million), China (27.5 million), North Korea (8.4 million), Ukraine (6.6 million), United States (4.5 million), India (3.9 million), Vietnam (3.8 million), Iran (3.3 million), South Korea (2.7 million), Pakistan (2.3 million), and all the other countries (39.7 million) combined.[6] American civilians own more guns "than those held by civilians in the other top 25 countries combined." Source: https://en.wikipedia.org/wiki/Gun_ownership - you have insanely stupid gun control laws (i.e. almost no laws, and you are working on to make it even more accessible) - you blindly shout 2A and right to overthrow the government as an excuse where the reality is money: the NRA just want money, money and money and whenever there is a bill gun-control related, no matter how sensible that bill is, the NRA will just poor millions on congressman to prevent the bill to pass. By you should take your guns and overthrow the NRA and those cheap congressman heh?
Cool answer! Thank you!
Hey there, I have answered because I was looking for informations about the PHP 7.3 stability :) &amp;#x200B; So the framework are not compatible with this PHP version. The PHP team did the change for the purpose. And all code which shows warnings needs to be fixed in order to work with this version :) &amp;#x200B; Cheers
Oops, you did not read what I wrote. Try again.
Link does not work :( 
&gt;&gt; Or telling you that gun control works in Oceania when just weeks ago we had a shooting in Oceania &gt; Nope. There was a mass shooting in NZ "Oh, Mr. Geography Teacher, you are telling me NZ and Australia are not a part of Oceania. Fuck, all the time I was wrong and was stupid. Thank you for teaching me the smart things." - Go watch some comedians on Youtube, kid. You are wasting my precious time at this point. I triggered you and I smarter than you which is obviously not very hard. You will get over it and some day you will sleep well again. Post me me on r/Iamreallysmart to prove my point that you can't take a defeat. 
The frameworks are perfectly compatible with the PHP version. Warnings or notices are escalated on older PHP versions too. The problem is, warning are just that, warnings. In plain PHP you can upgrade and look at your logs for warnings then fix them. (Obviously you’d do your own testing first but you may not catch everything.) But you can’t do that with certain frameworks (eg Laravel). It’s not a failing in the framework - in general it’s good that they halt on warnings because they could cause bigger issues. Anyway my original comment was just to give a heads up.
In addition to this /u/Special_Kev, Sylius added support for [skipping shipping](https://docs.sylius.com/en/1.4/cookbook/shop/checkout.html) specifically to help support downloadable products. It shouldn't be too complex to add support for generating download links to Sylius itself as it is extremely extensible, but it was considered out of the scope of the core extension as there are so many different ways to implement downloadable or virtual products.
I’ve forgotten about it doing that. I changed my global template years ago and kept the settings by copying them between installations
Right, I get that (That it's a framework). But I also don't want to fight it every step of the way. I've never worked with it, so I'm just doing my diligence to make sure it's the best solution for our needs.
Never had to fight against it, but you do need Symfony experience or willing to learn a lot - this is a very well designed piece of software that wants you to understand why things are done the way they are. I find a joy to work with it and I have never hit a roadblock.
Alright, I'll take a deep dive with it over the weekend. I do have Symfony experience, pre-flex days. We've been using Laravel on most projects lately, just due to the nature of the projects. Hopefully it's easy to pick up. Thanks
Please stop spamming this garbage. 
Just understand it's a big highly extensible system. It is not going to be a "pick up over the weekend". It is an investment. Join the Slack server we have - you gonna need it because you gonna have questions :)
No, I meant install it over the weekend, implement some simple modification, see how long it takes sort of thing... I'll definitely jump on Slack once I get into it.
Edited my comment - see an update.
Yeah there is plenty of budget for this. I've never used Craft / Craft Commerce. Will take a look at it and see how it looks.
How is he spamming though? Aside from him adding his partner affiliate code there's nothing wrong with letting people know that humble bundle has a nice web-book-thing going on.
I did. He covered the "not from USA" and "mass shootings outside of USA" arguments. That makes you a liar. Go oil your rocket launcher, you can never be sure when the corrupt government might come for you.
Most likely, event sourcing is kind of the "next big thing" these days again it appears. Therefore having an interface that all implementations would follow would make it easier for people to adopt to the different implementations.
Results: ## Adding JIT to PHP 8.0 50 votes (96%) in favour, 2 votes (4%) against. Majority for of 48. ## Adding JIT to PHP 7.4 as a beta feature 18 votes (33%) in favour, 36 votes (66%) against. Majority against of 18. 
I'm missing the fundamentals to understand the benefits of this. Are you talking about value objects? If so, isn't your stance against using complex array structure just advocating OOP? If that's the case, then why not just use classes with decent interfaces instead of value objects?
The best way to learn is to do it yourself. Technology is moving far too quick to learn off a book.
VOs and DTOs are the same thing, I don't tend to use them myself but if used correctly I'd say they have a decent interface
It depends how do you treet warnings. I am used to write a code which does not have any warnings, notices or deprecation warnings. If it has, something is wrong and should be fixed. It can't go to production. So in my opinion, the framework itself needs to be fixed to support new behaviour of the language :) When we upgraded our stack to 7.2 we had those warnings but we fixed them all. It was very easy to spot them using tests :)
Does this mean PHP 8.0 will be comparable to Java in performance? (asking as a noob)
Event sourcing is not a solution to a general problem. It should not be applied to things it is not meant to solve. This seems to be a general trend that most developers have. These patterns are tools; use them like tools. You don't try to try to drive a screw with a hammer. 
Sorry, we had to make a hotfix-release, so the link is n/a. Here we go with a new one: [https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-/update/59969](https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-/update/59969)
The absolute performance gains are TBD in real-world applications, although there should be at least some meaningful bump, especially when combined with preloading. JIT looks great, although personally, until I see how it performs on my own applications, I'm remain more excited about preloading.
I don't understand why anyone would vote No to this.
The argument was that in light of its complexity, the performance gains would be insufficient to offset the increased development costs of working with JIT for those internals developers whom were unfamiliar with DynASM.
That's completely understandable but we now live in a world where performance is no longer just critical to a specific set of applications, but a website's SEO ranking is directly affected by it. &gt; "Fast website or we don't like you" - Google, probably. Whatever the case, I'm glad to see it coming. I would've loved to see it in 7.4 but hey, 8.0 is fine with me!
From what I have read, JIT compilation is unlikely to have a significant enough impact on the performance of most websites to make an appreciable difference to search engine rankings, especially given the nature of PHP's process-per-request model. It should, however, provide a healthy boost to long-running, CPU-intensive processes.
&gt; Theres always going to be customers with exceptions and money to pay for those exceptions, and then you have to live with them. I've worked on a system where some customers required functionality that others didn't, and it was simply developed as mostly generic plugins that could be enabled from the company facing backend as required and configured per client in a database.
This is what I was going for: https://www.tomasvotruba.cz/blog/2019/03/28/how-to-mock-final-classes-in-phpunit/ **You can mock final classes** and keep your code solid in every simple way.
Does this handle type hinting? For example what if one property should be assigned a specific type of object? I don't want someone passing in a string on accident. 
I'd disagree with /u/judd48, there is a difference between a DTO and a VO. A value object is an (typically) immutable object with no identity of its own other than the value it stores. That is, two VOs with the same value are considered identical. A VO often contains some form of logic to validate the value being stored. A DTO on the other hand is a dumb data store without any business logic, used for transferring data between the different layers of an application. You might store several value objects within a DTO if you need to be confident the data is valid.
Is Canada not supported? That massive list of countries and Canada isn’t on there. Too bad. 
This could allow for some performance bumps with Swoole and the like, though.
Whats JIT? Just-in-time compilation?
Yes
Absolutely, I'm very interested to see some real world benchmarks on the various async frameworks. However I feel like we'd still only be seeing a minor resource usage reduction, rather than a significant speed up. That is, a single server will be able to handle more requests-per-second, but each individual request won't be dramatically faster. Even with an async framework, your average application is still mostly going to be throttled by external IO rather than speed at which it can process the PHP itself. But that is just guesswork at this stage. 
How does this package compare to https://github.com/spatie/data-transfer-object ?
&gt; although there should be at least some meaningful bump Although I am hopeful that will eventually happen, it's not guaranteed at all. Even for code that you would have thought was going to be CPU limited, it turns out to have little (though definitely appreciated) effect due to it actually being quite hard for code to be CPU limited: https://beberlei.de/2019/03/23/playing_with_the_php_jit.html What's more likely to happen is that people will be able to write new code that is explicitly designed to take work sympathetically with the JIT. 
Probably not. Also, a JIT probably won't be super beneficial for most PHP applications because the process lifetime is so short. JIT's are more beneficial for long running processes. In fact, using a JIT for short process lifetime can actually be detrimental because cold starts can take significantly longer. I haven't looked into the details on the PHP implementation yet. The Java JVM uses some cool tricks to mitigate the disadvantages of a JIT. The JIT makes an application better over time; it determines the flow of the application and is able to optimize certain things while it is running.
I think value semantics? 
[They already allow for some async IO](https://www.swoole.co.uk/docs/modules/swoole-async-mysql-client) so it might be fun to see if additional performance boost can be obtained where it is CPU bound (with a heavy framework use, it's not negligible).
&gt;VOs and DTOs are the same thing They are not. Traditionally a DTO is a VO but not vice-versa.
This was a major step in getting JavaScript more performant. I'm glad to see PHP going the same direction.
Sorry that wasn't clear, that was what I meant, it's already cutting down on the IO overhead, so while the reduction in processor use will probably improve the number of requests per second that can be processed by a single machine when operating at scale, each individual request probably won't see a dramatic improvement. For example (and very roughly) if you can process 1000RPS, a 10% improvement means a single machine can handle another 100 users every second, but if each request is being returned in 100ms, the end user isn't likely to notice the 10ms improvement in response time.
Canada is being worked on by another contributor. It is an Open Source project so anybody can volunteer and contribute :)
Good article. you might wanna add a bit about versioning of it though.
Which part of NZ _did not_ have gun control laws did you not get? I'm triggered at gun-lover freak idiots that put all of us in dangers. I also guess it's because you are so smart that you can't give a single argument with any sort of data and source as well right mister smartass? Go back to 4chan with your friends. Cheers.
&gt; Which part of NZ did not have gun control laws did you not get? The part where it says you don't need licenses. Germans need licenses. Belgians need licenses. US-Americans have the right to bear arms by their 2A. Potato Potato. Apple &amp; oranges. You get the drift.
Noted. Will update about versioning too.
Nice work. Actually I wanted to open a PR and contribute for a long time. There are still many countries missing. But never found the time so far, sorry. :(
So happy to hear folks discussing the value of DTOs in PHP. I look forward to checking out this lib with an upcoming API.
I have read somewhere that this JIT will work together with Opcache, so the analysis of one request will not be lost on the next request // not on my desk now so I won't search the link
Thanks! I know still many countries to do. No worries, everybody contributes in their spare time. There isn’t any deadline :)
I rephrased it but whatever. Also I suppose you still can't get over the fact that there is barely a mass shooting every decade for most countries but somehow the US has more than _one every fucking day_.
Everyone is saying that this has little impact because of "request lifecycle", but how is this affected when php is running as FPM? Does that code remain cached upon further requests?
It's part of opcache, so you would imagine so. I often put a few million requests through each php process before it cycles, so I'm quite confident I'll see at least some benefit. 
Nothing springs to mind... But given your other comments I doubt it was Obama you had in mind.
The trouble is PHP doesn't work the same way as Javascript, so you're unlikely to see all that much performance improvement with conventional PHP web apps.
Trading complexity for little real world web performance... I suspect lots of bugs in php8. Are the people voting the programmers that have to maintain the code? So JIT changes PHP to machine code, while opcode is parsed php that still runs in a interpreter? 
The people voting are not all strictly active internals developers, but they have made large contributions in the past. If my knowledge it correct, it would be more appropriate to say that PHP is parsed into Opcode, which is then processed by JIT into machine code. JIT can be disabled, and the opcode will still run in the VM. 
This is not necessarily true to the full extend, I have tested this here with a redis server written with react-php, and that is completly async I/O. The jit improves performance in the range of 5-20% only, because looking at a profiler you see that with async I/O most of the work is still spent in networking: &amp;#x200B; [https://beberlei.de/2019/03/23/playing\_with\_the\_php\_jit.html](https://beberlei.de/2019/03/23/playing_with_the_php_jit.html) &amp;#x200B; I assume the same applies to Swoole
No, Obama can't ride bare-chested on east Siberian brown bears. It can't be him.
Wait, you mean that a trump fan actually likes Putin? But what about the commies? 🤔 I'm confused! Not least by the lack of PHP in this thread... 
Each I/O bound issue will probably need to be tackled separately (per remote provider), but it looks promising that CPU bound issues could be improved with introducing JIT. Even if it's not a silver bullet, every bit counts.
"[fixed in 7.4+]"(http://git.php.net/?p=php-src.git;a=commitdiff;h=072eb6dd77b079a6f90ca5b155f9b0add1b5f2d4) While this will allow this code: &lt;?php $parallel = new \parallel\Runtime(); $seconds = 10; $parallel-&gt;run(function($seconds){ $start = time(); while (time() &lt; ($start + $seconds)) { \putenv("TEST=" . mt_rand(1,100)); } }, [$seconds]); $start = time(); while (time() &lt; ($start + $seconds)) { var_dump(\getenv("TEST")); } echo "You have survived an ordeal, rest now ...\n"; ?&gt; to run without fault, and while it allows us to call putenv/getenv "safe", other problems exist within the CRT that mean we can't call it safe without calling it "safe" :) As is mentioned in the linked blog, there are other standard functions that read environ, including but not limited too: strftime, mktime, localtime, setlocale (writes!), and even malloc. So we can't really call it safe, but we can provide as much safety as is reasonable, and I'm considering whether we need to go further than this in 7.4+ ...
Let's sum up what we have found out so far, before we discuss new findings and made up figures. And please let's be logical, because we are programmers. &amp;#x200B; We surely can agree that 400,000 deaths are far more than 250 deaths and that every death has to be prevented when possible. You said it is silly to prohibit medicals doctors to practice their profession so we can stop them killing 400,000 people each year. I assume you also do not want to prohibit cupboards in households that cause thousands of lives each year when people are crushed under them. I assume you take the greater good, reason and urgency into account before you ask for legislation to prevent those issues. So why, I must ask, do you find it in this context reasonable and urgent to prevent 60-250 deaths max and why do you find it unreasonable when I am explaining the greater good to you (freedom) of having a 2A. We established already that when you are not in a gang and not a black living in a ghetto then your probability of getting killed in the USA is 0.00007142857 % max. Just to make it very clear what we are talking about here. &amp;#x200B; I know perfectly that well that Australian comedian checked all marks on generalization of gun tooting, stupid, hamburger eating Amerifats, but do you really think that guy that will have difficulties reading the Bill of Rights without stumbling is smarter than all the founding fathers, all Americans, all legislators and all the generations in the last two centuries that profited from the 2A when he is picking the low hanging fruit and suggest gun control? It turns out the Amerifats don't allow criminals to have guns, they have back ground checks when you want to buy a gun and you have to be a citizen. Not that stupid after all and perhaps not hostage of the NRA. &amp;#x200B; The hard truth is full gun control was already tried and if it would work and prevent mass shooting forever they certainly would do it and then there is no discussion anymore anywhere. But the number say very clearly every State and every City in the USA with that prohibits weapons is worse of. When the Texans have weapons it turns out the criminals run away and go to more liberal places like California because it seems that they prefer to be alive. World wide the Americans are not the worse and if you consider the drugs and the criminal gangs because of the cash flow in that country then it seems a miracle that only so much people are killed and so much people in Mexico, Honduras, Brazil and El Salvador when there are strict gun controls there. &amp;#x200B; Considering that the USA had its peek in gun violence in 1992 and the rates are falling since then this tells you that they are dealing with their issues. When drug dealers and gangs are the issue then you deal with that. When you have an epidemic of unstable people that want to kill other people then you address that. Taking guns away as solution is like hide in bunkers and never go outside because you don't feel safe outside in the US anymore because you can't take a risk of 0.00007142857 %. &amp;#x200B; What is the purpose of telling other people how to they have to deal with weapons then? Do you want to feel good and believe liberal politicians that gun control works and risk the freedoms that you have, but you don't care about them, so fuck all people with other opinions? Then you take that offer. People with experience know that gun control is a lie, told by liars who bank on scare tactics (think about the little children), but in reality never will prevent any killings, because people will find ways to kill people (rocks, guns, knifes, vans, lorries, planes or whatever) and they know that the only thing they for sure will regulate is their freedoms. I don't find it strange at all that smart Americans say no, but no thanks on that suggestion. They saw Detroit and they know gun control does not work there. They also know the hell known as Comiefornia. In NZ it did not prevent the killings and in Honduras in Brazil people are still dying by guns so what was again the solution for people not been killed by guns, because I did not hear any that work yet. But I know the 2A worked well for the USA so far. &amp;#x200B; &amp;#x200B;
Here is my take. **Nationalists:** people who care for their own country and not so much for rivaling countries, believe mainly in Capitalism and are not fans of Marxism and Globalism. E.g. Trump, Putin, Viktor Orbán, Bolsonaro, Matteo Salvini. **Communists** People who convinced their population that they will install a Marxist Utopia, but never did and never wanted to. Statists. Gun grabbers. Central, non-functional, decision-making of everything in their peoples life.No liberties, no food and no money. E.g.: Lenin, Stalin, Mao, Erich Honecker, Nicolás Maduro, Bernie Sanders. **Fascists**: Economical Socialists. Hate Capitalism and are family members of Communists, but they hate them too. E.g. Mussolini, Hitler. **Globalists**: People who pose as Democrats, but in reality they like Saul Alinsky and Communism, but they also know that is not very popular and so they join the biggest globalist institutions, because they are convinced that it is similar and have sold their souls to the devil and the wealthiest families of this planet. E.g. Bush, Clinton, Obama, EU, NATO, UN, CFR, EUFR, Trilateral Commission, Club of Rome, Rockefeller, George Soros, Brezinski, Henry Kissinger &amp; the Rothschilds.
If you really think PHP is going to die because a limited number of companies are wanting their *entire* codebase in, what is, without doubt, one of the most frustratingly hard to debug programming environments that exists, then you're probably in the wrong subreddit.
Before you downvote this, it's a sincerely legitimate question. I love PHP and I want to keep coding PHP forever. PHP is always getting better, there is no reason it should fade away. The progress is clearly visible. Yet, people are increasingly moving away from it even when it's the best tool for the job. So honestly, what are your thoughts on this? Also, what do you see happening with regards to PHP related projects/employment in the marketplace? 
I'm trying to frustratingly debug your comment LOL. You must be the one who downvoted me. Perhaps you can clarify what you said. 
It might be a legitimate question, but it gets asked in here ad nauseam. About 80% of the web runs on PHP. When you're that popular, there's only one way for your usage share to go, and it's down. But the web's getting bigger all the time, so while the percentage of people on the web using it can go down, the absolute number can still be going up.
Ah, I see you just edited and added a youtube link. Thanks lol... that's more specifically about DBs though :/
Good points. At the same time it just feels like it's much harder nowadays to find work that's PHP-centric. Also, apologies pulling an ad nauseam. 
I'd take [Marco Pivetta's advice](https://ocramius.github.io/blog/fluent-interfaces-are-evil/) and avoid them. 
Where are you and where are you looking? I'm in the UK and there's loads of PHP work here.
We have something on an unwritten rule on r/php that anything that goes along the lines of "is PHP dying?" immediately gets downvoted because at best it doesn't add anything that hasn't already been asked and answered a thousand times before, and at worst it's just trolling. But in summary: PHP will survive and continue to advance. MEAN is unlikely to offer any meaningful opposition anytime soon (pun totally intended).
Well, maybe it should be a written rule then, cos just downvoting people like that is just MEAN! (yeah, my pun is intended too lol). Also my question wasn't about "Is PHP dying" per se ... for the record... I was asking primarily about decline of PHP development jobs in the marketplace. 
In North America, and I am looking primarily in Vancouver/San Francisco. 
You've well described the problem thank you. To me it seems the mysql8 authentication is only supported from php7.4 onwards: [https://github.com/php/php-src/commit/4f06e67ad2201390ed35a9ea6288a00c0b04782b#commitcomment-32356655](https://github.com/php/php-src/commit/4f06e67ad2201390ed35a9ea6288a00c0b04782b#commitcomment-32356655)
I've not seen a great deal of evidence of a reduction in the number of openings for PHP developers, at least in this part of the world. What I have seen is an increase in the number of openings for full stack developers who can program PHP. You'll find plenty of jobs for things like wordpress and PHP-based CMS. However, enterprise level PHP jobs $100,000+ tend to get headhunted. 
That’s easy to answer actually. Most legacy applications are written by BAD php developers. I’m talking 2,000+ line procedural files with nested if statements. I’m talking lots of bad php code out there. Those projects/developers give php a bad wrap. The truth is, if you code php like it’s java, it’s an amazing language. I great combination of lose and strict 
I sincerely think that the market is different there, because I over here in North America people not only seem to be moving way from PHP, they seriously insult it which is very annoying. Saying that it's can no longer be considered a serious platform for most projects nowadays... which I totally disagree with. Just do some digging around if you are curious, you will see what I mean. 
People who are busy saying that PHP isn't a serious platform, either have an agenda to push (e.g. they learnt a different skill) or they are ignorant to the concerns of software architecture. The people who are involved with commercial / enterprise PHP don't typically feel the need to shout about it, as they're usually too busy making vast amounts of money.
Thank you for looking into this. I suppose I can just go and force mysql to use the legacy authentication for now. I wonder if I should submit a bug report for the documentation. The PDO docs still say it's available from 7.2.4. https://www.php.net/manual/en/ref.pdo-mysql.php Without that patch, it's just not possible.
It indeed requires having business logic in SQL. For aggregations and reporting, that is a god-sent. It's much easier to write complex query in PHP than to process hundreds of millions of data points in various ways. As for financial stuff, you need to work with persitent states. And you have to be incredibly careful not to corrupt those states. And if you need to write careful queries, you will implement some business into them anyway. Might as well add the real work too, which makes those queries actually smaller and safe.
Maybe you're not looking in the right places to find work? You could try going to [a local meetup](https://www.meetup.com/Vancouver-PHP/) and see if anyone can point you towards people who are hiring or recruiters looking for PHP talent?
About 80% of websites run on PHP, that is a very different thing from 80% of the web, and is why that 80% does not correalate into the equivilent number of jobs. 
Ooh goodie, we've not dealt with this question for at least a week `;-)` 
There are still plenty of PHP jobs. However, what I am seeing more often now is: - Front-end only jobs in something like Angular, but also VueJS etc. - NodeJS jobs Those two are obviously on the rise. Whether PHP survives or not doesn't matter to me. I'm not married to it. I'll code in whatever or move into a devops role.
As someone who has never used Yii, would someone care to explain some of the highlights of this framework? Just curious.
Well, I'm not necessarily a maintainer, but I do contribute to PHP. I am one of those two "no" votes. I voted against the RFC precisely because I don't think the complexity of it is worth it.
&gt; for at least a week It has popped up regularly for as long as I can remember and the answer is always the same: php 4 (and in part php pre-5.3) did have many issues. After php 7, there's no reason.
&gt; java is harder to work with than php True, not only for devs but admins as well. I'd never again install a java application in production if have any say.
Nice, for those who haven't done this before I would also just read through well written libraries and see how the author does them down to how their github is setup and what all those icons are. Anything by spatie is generally a good read. For example, https://github.com/spatie/array-to-xml, is small and easy to digest.
Might wanna tell people that they don't need to publish on packagist to use it in a project, simply add the repo path in your composer.json file and pull in the package like normal.
Seems kind of pointless, just learn to code properly. Introduces needless indirection. JSON objects already accomplish all the benefits. The immutable aspect could be useful in other settings but just annoying for API interaction
I don't know how you are using PHP that it can even possibly go under Java in performance, but it shouldn't. Java's performance of same logic is trash compared to PHP 7 on our benchmarks
Using FPM, this will allow greatly reduced processing from the interpreter. We've already seen how hiphop was able to use JIT to drastically increase performance on PHP
Did you have all these bookmarked somewhere? LOL
Thanks for the read... also please never, ever call it GR8 again.
There is none
Quick question: does the composer package/polyfill inherit some of the perf benefits of the extension, or is it strictly used for the semantic value with the tradeoff of perf/memory overhead on top of arrays?
craft cms is based on Yii and it’s pretty awesome. 
Haven’t ever heard of that. I might have to check it out. I’ve been using October cms
I love this comment thread.
They used java on gmail, also google plus was based on java applets. Google have many services.
It doesn't inherit any of the performance benefits, and is actually way worse in many cases where we are forced to use an array to achieve a result that it was not designed for. It exists entirely as compatibility insurance and will almost definitely not be maintained in future major versions. What is your environment like? 
https://github.com/phpexpertsinc/MoneyType is my example of a Value Object. It is meant to store currencies in a finite, non-float, precise form, using (ideally) bcmath and/or gmp, and falling back to storing them as strings, and multiplying 10^x by the desired minimal-precision, then dividing back by the same and storing as a string again (internally), when neither mechanism is available.
I don't know .. Does a VO actually -have- to be immutable? Like, my MoneyType VO is definitely mutable. I thought the primary characteristic was -idempotent-, given the exact same inputs, two VOs, while differing in memory space, would produce identical outputs.
In the planned version 2.0, yes. How? Via reflection :-/ And it'll be optional and by default turned off.
That's a bummer to hear about. Oh well, I guess I can play around with it when I find some free time. &gt; What is your environment like? Shared hosting :/
Spatie has two serious design decisions which make it very difficutl to keep technical debt at bay with either immature, inexperienced or just unprofessional developers: As explained in this post's description: 1. Spatie the DTOs can be treated virtually identically with arrays, except if a non-set array element is accessed, it *BLOWS* up in terribly hard to figure out ways (in October 2018, I spent weeks figuring out that the 500 errors in the payment system was due to this). 2. Spatie DTOs are very mutable, and thus, all of the problems of using plain public variables are a problem. What's worse is becuase it also enforces types, lazy / immature devs can and WILL mix types without a care in the world, leading to blow ups. 3. Because this is allowed as an ARRAY access, it is *VERY HARD* to search for *every instance* of where a Spatie DTO is accessed as an array, incorrectly, because, frankly, static analysis like `phpstan` just simply can't "see" normal array access. It is a pain in the ass to debug as a system architect, and a young team can find their project unfixably broken, which is when I was called back in at great expense to rectify the situation. I view these as deep structural design flaws in Spatie and other PHP DTOs I see, thus this one was created in the course of about 6 hours.
You have never been the team lead of an immature and/or inexperienced team, or you would not have these thoughts. You probably haven't used DTOs and seen how they make your code more robust.
The question still stands, and I've never heard it answered despite being a PHP developer since 1998: Exactly how many of these 50 Yea votes and 2 Nay votes do actually program complex web apps in PHP on a day to day basis? I'm guessing 5.
Brilliant write up, thanks alot!
We need to fork PHP now. We need a new corporate stewart who will fucking own the language fork and PROMOTE IT EvERYWHERE! Come on :-/ Zend Corp did such a piss poor job of evangelism that they conceded the fight to NodeJS, C$ and others and got bought out by RogueWave who then just got bought by Perforce. 
I read that entire article and it never once explained how this black magic works.
I had the misfortune of working on a Craft website in 2016, would not recommend. October CMS is a breath of fresh air in comparison.
Bad, unprofessional programmers who never bothered to learn in the last 10 years and now have huge egos and say "I AM A SENIOR ENGINEER!!!" while, in 2019, never having heard of composer, used PhpStorm, and don't know a single design pattern. Who write 8,000 line classes with 1,250 line constructors. And shrug off responsibility as quick as they can. Have never written or even bothered to read a unit test. Insist on being coddled when told they can't get hired anywhere else with their patent lack of skills and unpro behavior.
Not the guy, but by now I know them by heart.... That's how many timess I've seen those threads
I'm sorry, did you have a particular point or were you just having a rant against people who you've really no idea about?
what company are you working for where you have to declare final? in code reviews id you dont like it just say ‘no’.
Typically you want VOs to be immutable, especially in languages that pass objects by reference. At the very least I would say VOs should be treated as being immutable even if the implementation is mutable, to avoid subtle bugs in complex code. For what it's worth, immutability is also a characteristic defined in the DDD book and [Martin Fowler's description of them](https://martinfowler.com/bliki/ValueObject.html). [There's a good explanation of it on the Cunningham and Cunningham wiki as well. ](http://wiki.c2.com/?ValueObjectsShouldBeImmutable)
I agree. There is a chance that it'll be supported but we won't know until more if the changes are in place. One of the main issues is overriding equality, which can not be done in the polyfill. 
How many li's does it take to make a listacle?
I haven't dealt with final classes in PHP yet, why wouldn't normal mocking work?
Can someone ELI5 JIT for me?
https://blog.krakjoe.ninja/2019/03/php-gr8.html
I think I felt you cringe
If I’m reading the [source](https://github.com/dg/bypass-finals/blob/master/src/BypassFinals.php) correctly, it seems to indirectly override `require` to hack the autoloader, “loading” your source code from a stream which contains the original class definition with the `final` keyword stripped. Pretty wild. I’ve done some pretty crazy stuff with PHP but had no idea you could natively hack streams like this. 
It was corny, but in my opinion a GR8 title
I too found this annoying. Looking at the only class in its src/ folder; it seems to use the file stream wrapper, and retokenizes your script, omitting any instances of the `final` keyword. 
I guess it could depend on your style guide. We leave it up to the individual dev at the company I work for. For my personal style however, I will declare `final` and `private` by default, and if I **really** need to, I'll move up to `protected` or `public` depending on the kind of interface/API that is required for the code. 
... it was a little gr8ing
Oh you're in for a good time. WordPress is not really that hard. It just requires a lot of time browsing the codex, there are some "good practice" guide lines you can follow. The best plugin in is avance custom fields. Combined with page templates cuts development time a lot. 
Anyone else want to describe the code for us https://github.com/ambionics/magento-exploits/blob/master/magento-sqli.py From what I can tell it sends a request to /catalog/product_frontend_action/synchronize with one of the query parameters being sql injection. I am not sure how it does this from there, but somehow its able to grab an active session id. Anyone else care to take a stab at it?
Because mocking regularly is done by extending a class. Which is impossible when it’s declared `final`.
I've never heard of DTOs. The closest comparison I can come to my mind is the Adapter pattern. How are these different from the Adapter pattern? Or am I far off?
My two cents; if a class has actual functionality it should have an interface, because I am not interested in the implementation. Which is the whole point of mocking.And the implementation can - or should, for the more strict developer - be final. Yes, you’ll have twice the amount of files, but it increases the maintainability of your application in my opinion. If the class does nothing more than contain data no interface is needed, but mocking isn’t either. 
wow this really exist ?
private is fine bit i dont think ove ever declared final.
Current maintainer of the package here. Thanks for sharing! I'm glad others have found it through this :)
Come on. I don’t know either of you nor do I have a dog in this fight, but your response is basically saying, “it’s impossible for someone to experience what I’ve experienced and come to a different conclusion than my own”. Someone disagrees with you - that’s no cause for you to start making denigrating assumptions about their level of experience. 
Here is a good description of the vulnerability: https://www.ambionics.io/blog/magento-sqli
If you know PHP, you just need to unlearn any good practices and boom, done, you're a Wordpress developer now.
I guess I'll probably be able to use phpml with PHP8 without crashing thanks to the JIT.
Just mock the dependencies and create an instance of the class. There solved. No hack needed. 
Very informative writeup, thank you.
From the Externals.io thread, I don't think that this was supported when the RFC was announced a month ago, but they were going to try and integrated it closer with Opcache by the PHP 8 release. I could be wildly wrong on that. It's discussed in the first few posts of the RFC discussion, IIRC.
Good point! The package that is used in the post is here: https://github.com/dg/bypass-finals It's 3rd party package, so I don't know how exactly works, but I think it removes the "T_FINAL" token in some stream. Here is the most important line: https://github.com/dg/bypass-finals/blob/8f0f7ab7a17a6b5c188dde1cf5edc6ceb06c70c1/src/BypassFinals.php#L217
I consult legacy applications, that suffer from missing `final` keyword. It's no surprise to see 6 classes inherited classes in the row, being container/controller/database/repository in one file. I recommend the "why" `final` post here on reddit: https://www.reddit.com/r/PHP/comments/ajdgx6/when_to_declare_classes_final
Doubtful, Java JIT has had years and years of developement, plus money thrown at it. The more realisitic scenario is big gains for maths heavy things and minor gains for things like web frameworks (go see the problems Ruby are having with their JIT they are developing and getting Rails to benefit from it). And of course the issue with the maths heavy stuff is that PHP is pretty much unused in that regard (things like machnine learning), so even if the JIT makes PHP better in that area, that doesn't magically create an ecosystem or create adoption other than by people who are too lacking to use different languages / obsessed with PHP. 
That's what often happens. In the end, the code has 1 class, 1 tests and 10 mocks in the dependency tree. Some people even re-create the whole injection container manually instead of just using it. I'd rather refactor 1 class and 1 tests.
IMO you will end with better tests, you should not mock the test subject
You hire people to do it for you. However, chances are you're just asking to promote that website so: reported for spam :)
You can always just stick to PHP 5.6
Wooooo, I'm pumped
\- Fastest from popular full-stack ones with almost no caching. Lazy loading is used extensively. \- Strong ActiveRecord implementation. \- Code generation. \- Useful layer of widgets, data providers and grids (good for building admin panels rapidly). \- Every method is documented in phpdoc. \- Code is simple. You can read most methods and understand what happens because sequence of actions is clear and there are not that many layers. \- Good i18n layer based on intl/ICU. \- Good security layer reviewed by experts. \- Long release cycles (both good and bad). \- Open community. &amp;#x200B; That's about version 2. It has its cons, of course, such as not using current PSRs. There is version 3 in development that aims to keep good parts of version 2 updating the foundation on which it's all built with PSRs, proper DI etc.
Nope, I used the search facility. I commend the feature to anyone who wishes to ask this question again `:-p`. 
could you explain the difference between preloading and running `opcache_compile_file()` on all files?
Interesting, thank you 
I talk about the dependencies, not the subject
A sson as they are offered at $15, they are worth exactly that, so there is no price reduction at all.
Wait a minute. You're telling me that one of the bestest features of HackLang, Collections, has been in PHP 7 for... apparently years, and I had no idea until this post?! FML! 
I agree that for most situations, JIT will not bring extra speed so it might not be worth. &amp;#x200B; But what about Swoole or similar solutions?
While php has gotten much better, there are still some long standing issues that still exist, so I wouldn't say no reason. The inconsistent order of parameters in string and array functions is still there, which has been something people have complained about for ages. With an IDE, it's less of an issue, but it still creates hardships for beginners and schools that might not be using an IDE right away.
I have experience in maintaining an application that uses this type of architecture, I wasn’t around when it was developed but a team I joined was in charge of maintaining it and adding new minor functionality. The architecture was basically we had 1 controlling DB with now around 500 tenant databases. This is all built on top of a custom internal framework (not a fan), with extremely limited db migration functionality. Perhaps this would be different if building from scratch nowadays with so much choice in frameworks and ORM tools, but this system has been a nightmare to maintain, its extremely hard to migrate the databases when we need to make small schema changes, it has made backup/recovery more complicated. An example of this is, we had a small bug go out that caused some data issues with a single table, after the code fix was rolled out we needed to fix the data, we basically needed to restore just a single table on all the databases. Our backups are daily snapshots of each dB into S3. To restore each tenant db we needed to restore its latest snapshot to a new dB server, pull the handful of rows needed out of it and restore those rows into the live db. Now imagine having to do this for 100 affected tenant databases. With a traditional single db this could have been a 10 minute fix, instead of a whole day gone. Either that or we need a lot of budget from our client to put in place a much more complicated backup/restore procedure. My opinion on it is, the money that can be saved in development by implementing this type of architecture to separate data of different instances can easily be lost further down the line by the over complication of what should be day to day tasks, like backup/restore, schema migration, db credential rotation/storage, on boarding new devs, performance monitoring, etc.
Yes.
OP (Paige359) is a spammer's sockpuppet account and is using a redirection link to mask their referral spam. Here's the real URL: https://www.humblebundle.com/books/web-programming-oreilly-books Examples of the spammer's other accounts: [Pablo157](/user/Pablo157), [Palmer167](/user/Palmer167). 
I like some of your ideas. Doesn't building these dtos from arrays carry some of the same concerns? Wouldn't it be better to explicitly provide the properties through the constructor? Or perhaps a factory method that maps from a model?
How do you create these JSON objects? I don't quite understand how a JSON object is a replacement for a DTO. The DTO is what would be used to serialize the JSON response..
I've recently started learning C and how to write PHP extensions. I'm not very far along but I think I have the basics of C down. What can I with regard to the learning curve associated with the JIT compiler?
There are basically two types of extension: - that which interfaces with a third party - that which interfaces with PHP (Zend) For the first kind of extension, examples may be PCRE, Date, SOAP, and JSON: Nothing has changed with regard to the JIT, there is no reason to expect it will. For the second kind, examples may be XDebug, xhprof, blackfire, and tideways: Things are very much less clear. In the worst case they will have to disable the JIT to operate as they did, and for a profiler that's questionably practical. For XDebug, I convinced Dmitry to allow the JIT to generate the instrumentation statements upon which it relies, however, it may still need a considerable amount of work to make it JIT compatible. At any rate, these more complex cases have a little more than a year to figure it all out ...
I think "Fig 1. A chap performing the Detroit JIT" was worse.
Perhaps the page you linked needs a “what is Yasumi” paragraph. Unfortunately I spent my time replying and have moved on, so I guess I’ll never know what it is for.
&gt; PHP is actually quite fast, it's the fastest interpreted language in the world. I think with PHP7+ that claim is intuitively close to truth in my head. Do we have hard data on it, though?
&gt;Don't get me wrong, I understand the benefits of using a framework. Based on the points you're making, I am confident you do not understand the benefits of using a framework.
&gt; However, this in fact opens the door on things such as machine learning, 3d rendering, 2d (gui) rendering, and data analysis, to name just a few. I admire the aspirations, but JIT alone can't help PHP get into 3D rendering and machine learning. Because for those you also need pedal-to-the-metal access to memory (for ex. byte arrays etc.) and hardware (like GPU). We'd need a whole new standard library and set of features to make PHP into something that's good for these purposes.
Hello, I have a form with the name="categories\[\] The php script : &amp;#x200B; `if (isset($_POST['categories']))` `{` `$categories = $_POST['categories'];` `foreach($categories as $value)` `{` `echo $value.'&lt;br&gt;';` `}` `}` The values displayed are fine. &amp;#x200B; If I select 1,3,5 it returns this values. But I wanna add this values in a database in the format 1,3,5. I can't add a varible in the foreach as I know ? How can I do what I want ? Thank you &amp;#x200B; &amp;#x200B; &amp;#x200B;
I’m not exactly sure of your question, but to retrieve the vale of an array item, you provide either the index or the key name in square brackets: `$myValue = $myArray[0]` Or `$myValue = $myArray[‘key_name’]`
&gt; Because for those you also need pedal-to-the-metal access to memory A JIT *can* give you that ... it doesn't, currently ... but it can provide it like no other compiler strategy or VM optimization reasonably can ... &gt; and hardware The thing that stops me personally from exposing OpenGL or any GPU related stuff, is that today, PHP may well be the bottleneck in such code, as you know, not everything happens on the GPU in an application with 3d rendering ... that concern will evaporate, maybe not with the first version of the JIT, but eventually it will. &gt; We'd need a whole new standard library and set of features to make PHP into something that's good for these purposes. I don't agree that we need a whole new standard library, but you're right about needing new features, and the thing the JIT does is open the door on those features, it means that they start to make actual sense. We could write any of those features today, but they wouldn't really be usable.
This is a perfect question for /r/phphelp... But try checking docs for implode(). 
If you want to save it as the comma separated list, instead of looping over the array just join the vales with a comma ```$dbval = implode(',',$categories);``` ps. Dont for get to sanitize/validate the form input before inserting it
&gt;$dbval = implode(',',$categories); It works fine thx :)
I thought I missed a couple days and it was April 1st or something. 
&gt;inconsistent order of parameters in string &gt; lack of typed arrays or generics I don't believe those are reasons not to use php in schools. I can understand why python is used as an introduction to general programming and not php, php is very much a web programming language and practically not used anywhere else. However for web programming I don't see js as any more consistent than php, yet it's widely taught. php has developed to be a very nice, efficient and fast language for web development. And with frameworks like phalcon you'd be hard pressed to find a framework in any language that's faster and still enjoy the relative consistency the plethora of js frameworks so sorely lack.
Here is a version I forgot to upload that switches some things around to use prepared statements rather than mysqli &amp;#x200B; [https://github.com/RobCod/Stoyez-Chat-PHP/tree/V1.1/Stoyez-Chat-V1.1](https://github.com/RobCod/Stoyez-Chat-PHP/tree/V1.1/Stoyez-Chat-V1.1)
I can’t click that link, paste it in the comments brah
Thanks for the suggestion. I’ll revisit that section. Not sure I understand your last comment. Have you read the paragraph on the homepage?
I posted an updated version that I forgot to upload, its v1.1 also posted above
I think the list of things you can improve is "everything" :-) this is not meant to be an insult, it's only an observation that you've fallen into to bad habits you need to stomp out quickly. The first step is to take what you've written, and re-write it, but this time aim to make it only 10% of the size. Each script contains its own session handling, and database connection logic, this is a big no-no because not only does it introduce a heck of a lot of code copy-pasta, but if you find a problem with some of it, you've got to change it on every page... So start off by making a class which has all of your support functions in it, like creating a database connection, and setting up the session. Then let's look at other code repeating, like admin.php, you have what is effectively the same code repeated 4 times, once for each level, and all it does is update a level... why not make things a lot easier for yourself by writing a function which takes a nickname and updates its level? Then you only have to call the function, and you've just saved yourself an entire page of code. Security wise, never rely on filtering on input, always filter and encode on output. There's many places where you're just writing out raw data from the database, without escaping it, thinking that because you checked at signup, it will protect you. Never rely on this. Always escape output unless you're 100% certain its intended to be HTML (such as if you're deliberately writing HTML strings). Be sensible with your typing, also in admin, you're casting row values to strings, to compare as strings using ==, this is considered really bad practice. Always cast to the most restrictive datatype you can, and always use the identical operator === (which checks type as well as value) in 99% of cases ($online_status = (int)$row['status']). You're obviously just starting off, so please don't let this feedback dissuade you. I think the best thing you could do is look to one of the most popular frameworks, Symfony, Laravel, and learn to use those. They provide a lot of supporting infrastructure that will at least somewhat help build up better habits. 
thank you I'll work on that
so what your saying about input sanitation is sanitize it on output only or sanitize it on input and output?
Validation on input, escaping on output. Validation means that the data conforms to some particular standards and expectations that you have set. Examples are that it only uses &lt;x&gt; set of characters, is between &lt;a&gt; and &lt;b&gt; length, or if it's a number, it's between in a particular range, such as 1 to 100. Escaping is something completely different, escaping is "Take this data, and no matter what it is, make sure that it cannot represent anything except a simple value in the language I am including it in". Escaping depends on where you're using the value. For example, in SQL, if we use a variable that the user supplies (or even that we supply) such as "SELECT * FROM users WHERE name='$name'", then if $name somehow ends up as "' OR '1'='1" then all of a sudden that variable you expected to be a value is now changing the actual execution of the SQL: ```sql SELECT * FROM users WHERE name='' OR '1'='1' ``` When you're writing to HTML, it's equally important. Let's say somehow manages to register with the (admittedly long) name: &lt;script type="text/javscript"&gt;echo("Hello!")&lt;/script&gt; Now you query that from your database, and you put it straight into your HTML without escaping it. Your web browser has no idea that it's meant to be a value, it sees the script tag and goes "I must run this!" and does... an attacker can now have all the visitors to your site running code the attacker controls. Escaping basically means "Tell the language that any characters in this string which indicate that this is anything other than a value, should be ignored". For SQL that means putting a \ before single quotes (which are used to denote the start and end of a string), in effect saying "treat the following single quote as an *actual* single quote, rather than the end of a string"). In SQL it means that control characters such as " and &lt; &gt; are converted to hexadecimal or encoded versions such as "&lt;" becomes "&amp;lt;" because when a web browser sees &amp;lt; it doesn't treat it like it has any special meaning, it's just a literal less than symbol. 
F
There is only Americans to tell people 2A is a blessing whilst the US have more gun related violence than _all other developed countries of the world combined_. But hey, after all I guess it's one way like another to prevent the population to overgrow. Maybe you should review more the discussions made so far because except repeating yourself and avoiding the arguments we made, you did not make much there.
I have all the usernames escaped on input though, I have to do it again to read it out??
I wouldn't be surprised if JavaScript was currently faster. There's been a lot of effort in optimizing it over the last several years too. But compared to Python, Ruby, Perl, etc - PHP currently outpaces them in any benchmark I've seen.
Yes. Whenever you output it. Security in layers, you don't care about what was allow when you accepted the data, you care about what is allowed at the time you output it. Let's say someone finds a way to SQL inject your code and updates the database and changes someones name so it now includes javascript. Because you don't escape it on output, the next time you load a page, the attacker is going to be able to run code they control in your web browser. Is this what you want? 
Hi Guys, facing an error when uploading a file from postman, I am trying to upload a audio file from postman but a complete audio file is not saving to server. Only a 13kb to 26kb file are uploading. &amp;#x200B; Here is my request POST [http://septic-tracker.com/webservice/upload\_audio\_job.php](http://septic-tracker.com/webservice/upload_audio_job.php) Header Content-Type : application/x-www-form-urlencoded body file (key of input field) &amp;#x200B; &gt;&lt;?php if(move\\\_uploaded\\\_file($\\\_FILES\\\["file"\\\]\\\["tmp\\\_name"\\\], 'images/'.$\\\_FILES\\\["file"\\\]\\\["name"\\\] )) { echo "success"; }else{ echo 'error'; } ?&gt; &amp;#x200B; Response : success &amp;#x200B; But a complete file is not showing to folder on server, only 13kb file is showing. Is there any issue with request header.
That just sounds like a handful of laziness to me.
And this is why people hate php
JS is faster absolutely. But it's JIT, so it's not in the category we're talking about (I understand these categories become a bit meaningless the deeper you dig into the code, but still). :-)
It's a fun thought exercise, nothing more! Have you seen any patterns in the wild that would make people hate PHP more or less?
I see what your saying and I’m not trying to be negative. I’m looking at this code and there is NOTHING fun or clever about it. 
F
My thoughts exactly. Magic and software don't mix
You, my friend, need to throw this into a framework of some kind.
I think the WitchCraft example (which laravel also uses heavily) is pretty neat.
Yii also uses the same kind of getter and setter magic. It's super useful for ORM models. You can still define your own getters and setters, so it doesn't force you to use the magic.
Why though? Why use native properties, which have inherent special meaning? &amp;#x200B; I don't see why the first is far worse than the second, while being far more clear. &amp;#x200B; `print $obj-&gt;get('id');` `$obj-&gt;set('id',2);` &amp;#x200B; vs &amp;#x200B; `print $obj-&gt;id;` `$obj-&gt;id=2;` &amp;#x200B; They're effectively the same, while the second is far more clear/
Javascript is a bit different because it's the only client side web language (until WebAssembly progresses), so it basically has to be taught. From a learning perspective, it's fairly easy to understand JS since it's more object oriented rather than split between OO and procedural: JS: Length of an array: arr.Length, Length of a string: str.Length, , trim a string: str.trim(), do a string replacement str.replace(..) PHP Length of an array: count(arr), Length of a string: strlen(str), trim a string: trim(str), do a string replacement: str\_replace(str). It's far less of a consistent API so it's hard to make assumptions. Three different styles of prefixes for string functions: no prefix, str, str\_, different names for the same functionality on different data types. I love PHP, but I can see why people still have issues with it.
Yeah, I totally agree
Yeah. Actually I do meetups quite a bit, but I will try broadening out a bit. I have plenty of work at the moment actually... My biggest concern I guess is about the future... 
Having twice the amount of files for no reason doesn't make it more maintainable. Also you can consider that you don't want to mock the class to mock its functionality but to just spy on the calls. In which case you can have one "traditional" test where you use the final class directly and with which you test the functionality, ok so far; And another test where you are just interested on checking the number of calls, not the outcome/behaviour.
Magic methods make code unintuitive to debug and read (especially for people new to a project) and are just not great for performance. It might make the developer feel clever but usually it just muddies the water and they end up having so much logic, to disambiguate intent, that its net loss for the product and its maintenance.
Coming from someone who extends and maintains an old ORM that had a serious hard on for 'clever' magic method use. I've seen the impacts over the course of 5 years 
TBH the argument order is a really stupid thing to get hung on, no serious developer would think much of it if at all. All languages have gotchas and true, php has had more than its fair share. But almost all of the serious ones have been cleaned out. As for consistency in the backend, js is used on the server: nodejs. IMO if we're talking about inconsistency - and frankly an outright mess - nodejs ecosystem is it. In comparison php is a very well managed environment with good, well maintained frameworks.
I love it :) !
/r/phphelp. Also, check the max upload size, max post body size in your php ini
Quality shit post there mate.
Wow, XSS all over the shop. At least you're using PDO. Still getting a down vote though.
The part on inheritance should include info about the covariance of return types and contravarancr of parameters. 
Anybody got some quick bullet points on what makes it better than Guzzle?
ilikethisalot.jpg 
we all know but why not just delete it every time?
You use these facilities to set up a framework and then you use the framework consistently with these facilities and it's not that big a deal. It's a problem when the framework isn't built on it.
1. much simpler API and much better DX (no boilerplate, no complicated code) ``` $response = $client-&gt;request('GET', 'https://google.com'); $response-&gt;getContent(); ``` 2. async by default and using the same simple API ``` // Client::request does not wait and give the contorl immediatly to the script $response1 = $client-&gt;request('GET', 'https://google.com'); $response2 = $client-&gt;request('GET', 'https://reddit.com'); // getContent for the content of $response1, but $response2 is also being received in parallel $response1-&gt;getContent(); ``` 3. HTTP2 compatible, including same connection assets (it creates an internal memory cache for the received assets so that when you request them, they are loaded from memory) and Server Push (it provides an "onProgress" callback option) 4. better handling of streams, both as a body and as a response (as a response, it creates a generator with the chunks): ``` // As a request $response = $client-&gt;request('POST', 'https://google.com', [ 'body' =&gt; fopen(__DIR__.'/input.txt'), ]); // As a response $response = $client-&gt;request('GET', 'http://releases.ubuntu.com/18.04.2/ubuntu-18.04.2-desktop-amd64.iso'); // This creates an iterable generator for the response(s) and allows to iterate over received chunks $stream = $client-&gt;stream($response); foreach ($stream as $chunk) { // You received the response chunk by chunk here } ``` 5. works with PSR-18 if you want to, but based on its own Symfony contract if you don't
&gt;but $response2 is also being received in parallel Is that actually in parallel or just async?
The point of this is not to use one.
But it seems to me you could benefit from learning some good design patterns from a framework. I'm not saying that in a bad way, I just think it'd be a good learning experience doing it that way.
Your code is very procedural, which leads me to believe you've not used a framework yet.
It is truly cruddy. BTW - We should be calling it DAVE (Delete Add View Edit).
Probably the `\ArrayAccess` magic methods: ``` public function &amp; offsetGet($index) ``` For some reason the `&amp;` is required here for a common operation. 
&gt; Having twice the amount of files for no reason doesn't make it more maintainable. Correct, but that is also not what I said. I think having an interface on a class (that actually does something instead of being a value object) will improve the maintainability of code. And I think that justifies the additional files. &gt; Also you can consider that you don't want to mock the class to mock its functionality but to just spy on the calls. In which case you can have one "traditional" test where you use the final class directly and with which you test the functionality, ok so far; And another test where you are just interested on checking the number of calls, not the outcome/behaviour. Again correct. That is usually called mocking a class :) It is up to you to just mock the outcome or also specify expectations on calls being made. And you will still have the issue described in the article if that class does not have an interface and is made `final`, right? In my opinion the library from the article fixes an issue in a very convoluted way where simply adding an interface would still give you all the benefits of making an implementation final and allow one to use standard mocking. 
F
Files should be multipart/form-data
Oh... My... Now I have to replace the guzzle out of everything with this!!! This looks awesome!
Hi Titouan. I'm sorry but I really don't get it. Actually everyone I've discussed it with IRL do not get it at all. 1/ I've seen "DX" being thrown around but I haven't seen any example. Symfony is definitely not a reference in DX, I don't see any reason to trust this statement. The example you've shown is exactly the same with Guzzle. 2/ Guzzle does this as well, and has been for some time. 3/ HTTP 2 is the only actual feature this client has. Seeing how low the interest [seems to be up to now](https://github.com/guzzle/guzzle/issues/1249) I'm really sad to see standards thrown away just for this (this could be done in Guzzle, and probably will eventually). But anyway I have to grant you this point. 4/ How is it better than Guzzle? Guzzle and PSR-7 use streams as well. 5/ Guzzle will implement PSR-18 (the PSR was only accepted in November, things take time). There are already adapters with HTTPplug as well. I feel this component will unfortunately confuse everyone as we finally got past the Guzzle 3-4-5 debacle years ago, and we finally have a good de-facto standard (Guzzle) and a brand new PSR-18 standard, and we are back to square one with this component that moves away from PSR-7 and PSR-18. I think this is a good move for the Symfony project at the expense of the community.
I'm using \_\_get() and \_\_call() in proxy objects that see if they have the defined properties. If not a static call is made to all proxy objects of the same kind to hydrate themselves from the database in one fell swoop. Also a favorite of mine is the \_\_callStatic() use for a magic factory kind of thing where I do something like FACTORY::FOO(...params) to instantiate a class of name FOO with ...params. the FACTORY class is equipped with appropriate docblocks to keep the IDE happy. I use this to instantiate different validator rules in my form builder.
JIT has the potential to be a huge boon to my samsara/fermat library. There are currently no other implementations of arbitrary precision trig functions that I'm aware of, and ext-stats was abandoned. I don't have the time to learn zend enough to write an extension so I'm implementing it all in user space, but it's a library that will be very CPU limited. Honestly, once I have support for complex numbers, basic geometry, and matrix math, it'll probably be the only PHP library for several different kinds of math. I'm interested to benchmark PHP 8 with my library. 
I'm curious why you feel there should only be one library for a given problem.
Why are we suddenly talking about developed countries now? Are those the ones the perfected gun control? Are those the ones that have a large border in the south with a large influx of criminals and drugs the plague the country? Are those the countries with a black gang violence problem? Or is it just convenient that Greece has a murder rate of 1.7 and white USA a rate of 2.5 per 100,000 and you want to blame the difference on guns and the 2A? Is it convenient that only USA has the highest black population of all the developed countries? And is it convenient that black America has a murder rate of 19.6 per 100,000? We established, that the USA has the most weapons and firearms per capita worldwide. We know USA is the only country with a 2A world wide. I know USA is not even top 30 in murder rate in the American continent. And smaller countries like Brazil, Mexico and Venezuela have more nominal deaths per year than the much bigger population of USA. But somehow you want to compare USA with Canada when only the USA has a border to Latin America and every dreamer of those violence ridden countries from the South has the ambition to enter the USA. Get your facts right and come back later when you processed the data.
FIEO
I’m just finishing a project with Guzzle. But I stick with LTS so it wouldn’t matter anyway. Maybe in the next update I’ll look at switching.
PHP: The Bad Parts: Chapter 1: Magic Methods
`__invoke()`-able controller actions? But that's mostly where I personally draw the line. Being part of a team that sometimes has to maintain legacy code base, where the (unrefactored) code _thrives_ with magic... The "magic" part is not so fun anymore, most of the time ;-) 
When `offsetGet`, `__get`, or in fact any method returns an array and caller attempts to modify it, like this: ``` $object['offset']['a'] = 5; $object-&gt;getArray()[] = 5; // more obvious here ``` Without reference symbol in declaration, new array (well technically maybe not, but not important) is returned and your assignment operates on it, which means it in fact doesn't affect the original underlying array. This results in indirect modification warning. So, if you want consumer being able to modify your exposed array (and this isn't always wanted, that's why it's up to you to decide), you have to return it by reference.
Any slides talking about it?
My quick bullet points would be that Symfony HttpClient: - provides a full abstraction of the HTTP transport (Guzzle leaks the underlying drivers everywhere, which increases coupling a lot) - provides one single abstraction for both synchronous and asynchronous multiplexed requests/responses (other existing clients typically provide two separate APIs, splitting and locking their users in one world or another) - will follow Symfony's maintainance processes and their proven track record: BC promise, LTS, etc. - and many small technical details that might matter in practice. What the component doesn't provide (yet) is a middleware/plugin system: decoration works quite well for now and I don't know if another internal API oriented towards extensibility would provide significant benefit over it. Future (contributions) will tell.
Hi, to me it seems that saying DX is better, means not that much. Guzzle for most of the things you have pointed out uses the same syntax. Your Example 1: ``` $response = $client-&gt;request('GET', 'https://google.com'); $response-&gt;getContent(); ``` Same with Guzzle: ``` $response = $client-&gt;request('GET', 'https://google.com'); $response-&gt;getBody(); ``` Your Example 2: ``` $response1 = $client-&gt;request('GET', 'https://google.com'); $response2 = $client-&gt;request('GET', 'https://reddit.com'); $response1-&gt;getContent(); ``` Same with Guzzle: ``` $response1 = $client-&gt;requestAsync('GET', 'https://google.com'); $response2 = $client-&gt;requestAsync('GET', 'https://reddit.com'); $response1-&gt;getContent(); ``` In this case you have to opt-in with guzzle, but I'm pretty sure that symfony has a way to opt-out from the async mode. Ok, HTTP/2 is new. As @manpoli sad, it makes me sad to see so much effort to write the same tool as guzzle. The only reason I see for this new component is the non-interest in implementing PSR-7, so it is just a client that uses the symfony Request/Response object to do that job. PSR-7 created so much interoperability between projects, while recently Symfony seems interested to grow only their own garden.
[nette/utils](https://github.com/nette/utils) provides a trait, which translates property access to accessor methods. For instance, when you access `$object-&gt;property`, it internally calls `getProperty()` method and throws `MemberAccessException` exception when there's no such method (or public property). Since certain version, `@property type $property` in class documentation comment is required, which is a good thing, because auto-magic property with no intelli-sense support is useless. I like this for model classes, DTO and stuff like that. It's possible to create quite nice API with read-only, write-only or virtual properties (there are even widely supported annotations for that, e.g. `@property-read`). I know lot of people hate this and I underestand why. This is something I like about C#, where properties (not to be confused with fields, which are more like PHP properties) are part of public API. For some reason, I'm not comfortable with getters and setters on data classes, I'm just not compatible with accessing class members using methods. I like when methods actually do something (change state), not just return a value which seems more like a workaround for me. Mentioned package also provides a way for doing simple event handlers, but I don't use it, since that's quite a magic and IDE don't underestand it.
Difficult to say. Zend has been bought by Rogue Wave and will no longer fund development of php. And it's not clear of Dimitrij will continue to work on php past version 8. Maybe community will step up and make things work. Although I'm not as optimistic, because php doesn't have such gravitas as javascript, academic support as Python or to offer something new and effective to solve problems like Rust. However I'm not too skeptical either. It remains to be seen. Why php might be somewhat in decline when compared to earlier days is that it no longer offers anything what can't be achieved with other languages: 1) Shared hosting is being pushed out by cloud hosting. 2) php emedding in html doesn't matter anymore. Javascript front ends are the standard now and everyone and their dog have multiple of templating libraries available anyway. 3) WordPress is simply outdated platform at this point and static site generators and webflow are getting traction. 4) It's sync and async type of execution is quite clunky. Multi-threaded applications are down right impossible at this point. 5) And it still slowly leaks memory in any longer processes, to the point that nothing really can be done about it, other than restarting the process. So what php has what other languages do not? Nothing what would stand out really at this point. I do expect PHP to stand strong, simply due to the inertia rich web ecosystem provides to it. But I don't expect any kind of growth anymore. And bigger companies will probably won't give it a second though either if they aren't already invested in it since the time of old.
&gt;I think having an interface on a class will improve the maintainability of code. It does more than that though: it adds a layer of abstraction and opens up an extension point which might not be desirable. I'm not saying it's a wrong thing to do at all, but it can be overkill e.g. for a part of your library that you don't want to open up or for an non-public application (as for which there is no public API exposed to a third-party) in which you have more control and do not have to worry as much about BC.
As I showed, it's not just argument order, it's prefixes, mixes of procedural and object oriented code, inconsistent naming, etc. You said there was no reason to dislike PHP7, but I pointed out a very simple thing that leads to a number of people not liking PHP. In most modern languages, you have a much more consistent standard library, and it is a valid concern because that is always complained about by people who don't like PHP. NodeJS is not a language, it's an environment for running JS on servers, and a young one compared to PHP, I really don't see why you'd compare that to PHP and say PHP has no room for complaint because it's better than NodeJS. PHP5 and PHP7 brought a lot of improvements, but there's still a lot that could be better with PHP and until people listen to the most consistent valid criticism, there's still going to be a lot of people who dislike PHP.
&gt; it's not just argument order, it's prefixes, mixes of procedural and object oriented code, I switch back and forth between 3-4 languages every single day, I couldn't care less about such things. It really doesn't matter to developers, you shouldn't worry about it either. &gt;PHP has no room for complaint Never said that. What I'm saying is that there's no reason for the hate. php is a language like so many other languages. It has its strengths and weaknesses, it has its share of gotchas (every language has that) and, of course, there's lots of room for improvement. There are good reasons to not use php for some things and good reasons to use it for other things. What I'm specifically saying in relation to your comments is that what you focus on is largely irrelevant to developers. I haven't had this kind of discussion with anyone i worked with in over a decade as far as I can remember.
Both would get the job done. I use it mostly for calculated properties and relations. For example: public function getMovieTitle() { return $this-&gt;movie-&gt;title; } echo $watchList-&gt;movieTitle; Or private $firstname; public function setName($name) { $this-&gt;firstname = ucfirst(strtolower($name)); } public function getName($name) { return $this-&gt;firstname; } $this-&gt;name = 'SPoNGeBoB'; In the last example, the real property is "firstname" and might match a table column name. If you don't want to use "firstname" in your code, you can now use "name" as if it was the property/column name. Less code, no database changes and the model does the heavy lifting without having to worry in the controller or view if it is a native property or not. It makes the views look a lot cleaner.
Stay with Laravel.
Thanks I hate it. 
There is no "PHP OOP" there is just OOP. The only thing that differs is tooling. Oh and. Composition over inheritance. Always. [https://www.youtube.com/watch?v=v9ejT8FO-7I](https://www.youtube.com/watch?v=v9ejT8FO-7I) &amp;#x200B;
Or better, use a template engine, like twig
Fabian made it clear that he felt PSR-7 was an attempt to create an unnecessary interface pushed by specific projects. This is no surprise, at all. This is just how open source works. It’s not always pretty and things like this can cause compatibility issues, but it is what it is.
1/ nobody asked trusting anyone; you'd better try for yourself; instead of looking for opinions, forge yours based on facts 2/ not correct: Guzzle uses a separate API for async, based on callbacks/promises. 3/ because you don't see its usefulness, we should not build a tool that provides full support for HTTP/2? Or maybe: because no existing tools provide HTTP/2 support in PHP, very little is known about it's usefulness? Golang proved you wrong already here: concurrently accessing several microservices in h2 is just not easy enough in PHP for now. 4/ PSR 7 streaming are not multiplexing. 5/ fine: PSR 18 allows several implementations to exist. The rest of your comment is mostly ideological. I'm happy to have contributed some diversity of choice and to not live in a world where there is only one authorized way of doing things.
You forgot to call -&gt;getContents() on -&gt;getBody(). That kinda proves the point Titouan made ;)
There is a keynote by Fabian where he talks a bit about it - though I cant find it at the moment. Also, it doesnt look like everything he talked about is in this component... yet. He mentioned that he's idea was also to include notifications when a email has been read etc.
I only have anecdotal evidence, but I had a PHP script that runs on a huge data payload that takes a long time. Running it on the PHP 5.6 and 7.3 (or maybe it was 7.2, I forget) was like a night and day difference. It must have run at least 10x faster on 7. 
eloquent, by chance?
Alas, no. It's called Solar
I'll humbly submit my own post: [https://kevinsmith.io/whats-so-great-about-oop](https://kevinsmith.io/whats-so-great-about-oop) with its followup [https://kevinsmith.io/if-you-think-of-coding-as-the-manipulation-of-data-youre-going-to-have-a-hard-time-writing-object-oriented-code](https://kevinsmith.io/if-you-think-of-coding-as-the-manipulation-of-data-youre-going-to-have-a-hard-time-writing-object-oriented-code)
Those are in the abstract classes tutorial. But, I'll include them in the inheritance tutorial. Thank you very much!
Thanks for replying 
Hey, your posts are great. Although I am familiar with the content in there. But for a beginner, it will be really useful. You have answered some important questions for beginners. Great work 👍
Thanks!
That seemed to be fixed for me a few versions ago - though I can't pinpoint when. Months ago.
This... &amp;#x200B; [https://github.com/barryvdh/laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper) &amp;#x200B;
I tried the newest version the other day, 2018.3.5, will have to play with the 2019 version. 
not seeing any docs on installation &amp; useage
Gtfo
Because `$obj-&gt;id` exposes the implementation details. Sure, it's just a property now, but that might change later. Maybe you want to add some range checks, so that id must be 10 digits long. Maybe the class gets more complex, so it's now $obj-&gt;data-&gt;id. With `$obj-&gt;get/set`, you just change the one or two methods, but with `$obj-&gt;id`, there's no method to change, so you have to change all the calling code instead. It's also possible to implement get without set that way.
Not really true. The value returned by getContents implementats __toString so no need to anything if you need just to print the output. Plus being a stream, it can do much more 
&gt; [pdo quote adds ' at the beginning and at the end, remove them for standard behavior](https://github.com/ezSQL/ezsql/blob/master/lib/Database/ez_pdo.php#L223) This is a huge step back and the source of innumerable SQL injections. The whole PHP community undertaking an enormous and painful effort to get rid of that escaping nonsense, the whole database extension has been ditched from the language because of this. And you are pulling us back, promoting this outdated and dangerous practice. Seriously? This method is a direct consequence of the notorious delusion shared by PHP folks for decades, thinking that whatever [escaping protects them from SQL injections](https://phpdelusions.net/top#escaping), by doing some magical "cleaning". **There is no usable "cleaning" function ever possible**. That's why **prepared statements** are taking over. While PDO::quote() does it right, making sure that no value processed by this function will ever be harmful (albeit not always usable but that's the entire damned point, as once it's not, this method shouldn't have been used at all), you are disarming this guardian, letting the injection again. And it looks lie a betrayal. The lib at whole looks like a collection of hacks and patches. query() method takes 150 lines of spaghetti code with string functions, regular expressions and even its own connection code! Come on. It might have been a good thing a decade ago but please, don't pull it into the brave new future. I know you might have hundreds projects based on it but really, it's time to start refactoring them.
Mahler hasn't written a new symphony since 1909.
Because __toString doesn't allow throwing exception, using it means having no way to detect e.g. a timeout or any other transport error. In the best case you'll get corrupted data. Not really comparable.
I'm sorry that this may sound hurtful to you because you are working on this. That is not my intention. I am trying to discuss the component itself and not the people or the intentions behind it. And I'm trying to convey the questions and confusion that I've heard with literally everyone I've discussed it with (if it weren't for that I wouldn't be saying all this). Having more options is not bad per se, but Symfony has such an impact on the community that a new HTTP client cannot be ignored. And it confuses people, and it splits the community even more. New code is not bad per se, especially when it comes with such technical quality obviously. But it is impossible to ignore the impact on the community. This is my opinion that Symfony has a responsibility towards the community (bland "with great power…" statement). Maybe I'm wrong.
I agree with you. And I am just bringing up the debate ;) I hear many people discontent with this but if nobody brings it up, nothing will change.
Why? Isn't swift mailer already a Symfony package?
No worries, same for my comments btw: nothing personal! The responsibility of Symfony is high because of its reach I agree. On this side, preserving the status quo before innovation wouldn't be very responsible to me: the rest of the world move quite fast and ignores our PHP politics. We'd better do great tech and deprecate the legacy before it kill us (that's a very generic statement that applies to any technology to me, that's why I love the deprecation policy we have in Symfony).
https://speakerdeck.com/fabpot/mailer
SwiftMailer is getting elderly and has known design issues.
It's just merged, 2 months remaining before release. We have time :)
Make PHP GR8 again?
That is how the class was originally written to handle it, and it does offer prepare statement usage now. I don't use PDO wrappers at all.
I'm all for templating engines but it's not always necessary, and it's good to know how to format html and php output yourself.
Repost: https://old.reddit.com/r/PHP/comments/b757kw/on_what_is_coming_to_php_8_php_gr8/
He's just trying to circumvent the :"Please do not frequently submit links to your own content, exclusively. It's likely to get spam-filtered." rule. He mostly spams his own youtube tutorials on this subreddit (same on webdev, programming, python...).
Agreed on the idea that you should know how to format html and php, but the xss prevention that you get with a template engine makes it hard for me to go back
Sorry didn't realise this was a re-post. Someone shared the article with me and I thought it would be good to share with the community.
WP thing. It’s used for translation.
&gt; Unless you have been living under a rock, or are from the past (in which case, welcome), you will be aware that a JIT is coming to PHP 8: This is rather insulting. Not everyone follows PHP internals. Many PHP developers find out what is in the new PHP versions at conferences, which is why every conference has a talk about the next PHP version. I personally think that's ok, for most people they just need to be able to write PHP code to do a job and their employers won't be happy if they spend hours a month reading internal news. What is especially insulting is that in the next sentence you say it finished that day. Overall, it's a good read. 
It's a WordPress function used for translation: https://codex.wordpress.org/I18n_for_WordPress_Developers
Laravel uses the same method name as Wordpress does, and for more or less the same thing. It's basically a method that says "Check the current user's locale and echo the string that has this specific name, making sure we do all the escaping and so on along the way."
This has been kicking around for a while. It's not really a book - it's a dump of the old StackOverflow documentation project before they shut it down. Accuracy will be questionable. Large parts of it are (sometimes literally) copy-pasted from the official manual. None of it will have been updated since the project shut down.
Ah, so like Drupal's t()
 function __() { echo 'No im just a totally normally function'; } So yea, its just a function - nothing special, but NORMALLY used for translation, wordpress and magento uses it as this, but you can do what ever you actually want with it.
It's based on gettext, an internationalization system for programs. In C it's often aliased to `_`. That's why WordPress uses its internationalization like this. While `__()` itself doesn't print, `_e()` does print the return value of `__()`
&gt; This is rather insulting Can you please apologise on my behalf to people from the past, and explain that it was a jovial introduction, not any kind of judgement or insult. In case not clear, that's another joke ... I'm sorry you feel insulted, but that was not at all my intention ... it was a joke, I greeted people from the past :) Take it as it was intended, please ...
I could help you with the extension/zend side of things if you have the rest figured out. 
You said either you're living under a rock or from the past if you don't know something. This is nothing to do with people from the past. The fact you think it's about people from the past kind of highlights the point, you started off your post saying your readers will know something and if they don't you imply there is something wrong.
By "from the past", I *literally* meant "just arrived by time machine", and should have used those words so it was clearly a joke ...
Dude, the insult comes from stating that someone should know something otherwise they're living under a rock. It implies that something is so obvious everyone should know it. I know what you meant. I also know what it means. You've been living and breathing PHP internals for so long and been reading about JIT for so long that you've forgotten that not everyone follows or even pays attention to PHP Internals. For you, JIT being in PHP is "Yea, of course, we've been talking about it for months" whereas the average PHP developer working at a digital agency with a spouse and kids who doesn't have time for internals is "What's JIT?" which you actually know since that's the point of your post. Basically, you wrote a blog post explaining JIT out of the goodness of your heart but started it off with "but of course you know this because you don't live under a rock" . 
&gt; otherwise they're living under a rock &gt; but of course you know this because you don't live under a rock Nobody lives under a rock, nobody just stepped out of a time machine ... You say you know what I meant, and I've been explicit about what I meant, but insist that you're insulted ... I don't and probably can't understand, sorry. I think we won't agree about how best to use words, or where there is insult to be found in those I used, but I'm sorry that I offended you, it really was not my intention ... and I'll surely remember this conversation when blogging in future ...
Not a WP thing, a gettext thing. Works very well in conjunction with POedit. 
The OP is asking about `__() `, the `gettext()` alias is `_()`.
I see. Didn’t notice the longer line; on my phone. 
No problem, easy mistake. :)
I've not said I'm insulted, I am saying it is insulting. I've even described who it's insulting too. People who have no time to keep up with PHP Internals. To know something is insulting doesn't mean you are insulted. For example "English are assholes" is insulting, it doesn't insult me because I'm Scottish but I still know it's insulting to people who are English. Just like I know saying "You know this unless you've been living under a rock" is insulting to people who don't know that thing.
It's used for translating your site manually into other languages.^1 &gt; I think it acts like an echo right? Let's say your site has been translated from its default language--English--into French. When a visitor views the English version of this particular page, then `__()` will simply act like an echo, as you say, and echo that string to the page. With a WordPress site, the advantage of wrapping the text in `__()` is that in return, that text will now be easily translatable into another language (in the WordPress back-end). After wrapping the text in `__()`, you would then be able to add the French translation of that particular string to the WordPress back-end. After that, every page on your French site would then echo *that French translation*, instead of the original English string. Hope that makes sense. That last part is typically done with translation plugins (e.g. WPML, Polylang, etc). But you can do it manually too with PHP code of your own. ___ ^1 As opposed to a plugin/function that will automatically translate (via Google translations) the text on the page.
&gt; the max upload siz I checked and max upload size is = 64M VIdeo and images of more than 5Mb are uploding successfullt only the issue is with MP3 files. MP3 files are not uploading I am using multipart/form-data
The design of this website gave my eyes cancer
I've added the link to a description of "black magic" to the post. And highlighted it. Thank you for feedback!
I suggest starting here: https://codex.wordpress.org/Theme_Development Basically the functions are defined across thousands of files in wp-admin and wp-includes. In general, you don't look directly at any of those files. Instead use the WordPress documentation.
Just yesterday we had this: [https://www.reddit.com/r/PHP/comments/b7f06x/php\_crud\_from\_beginner\_read\_all\_insert\_edit\_delete/](https://www.reddit.com/r/PHP/comments/b7f06x/php_crud_from_beginner_read_all_insert_edit_delete/) And today, we have this. The DB class uses "real\_escape\_string" with mysqli...
You can search [https://developer.wordpress.org/reference/](https://developer.wordpress.org/reference/) for every function and hook and find the code that is underneath it. 
In addition to djm406\_'s advice, I would also recommend getting an IDE or editor that can help you find the definitions for functions. I think all modern editors have that specific feature (VS Code, Sublime Text, Atom).
Let's make a project like the ones we used to do ten years ago.
If you're at absolute beginner stage on PHP and PHP CMSs, but experienced with development, I'd strongly recommend looking at [OctoberCMS](https://octobercms.com/) instead. October is built on Laravel - which is the most popular framework for PHP so much of what you learn is transferable and the code is a lot cleaner than WordPress. WordPress does it's own thing and of course has a massive ecosystem, but in modern development terms is far behind October I deploy WordPress myself for clients and it certainly has it place - great for getting a website up and running quickly - and October is a minnow by comparison. But you'll have a lot more fun and potential with October. [https://leaderinternet.com/blog/october-cms-vs-wordpress](https://leaderinternet.com/blog/october-cms-vs-wordpress) &amp;#x200B;
Another down vote. Really need to stop this crap.
Thanks, that’s what another commenter said as well. Coming from visual studio and c# and being able to go directly to a method definition my hitting f12, I find that incredibly inconvenient way to navigate code. I appreciate the help!
Or Blade And if you don't want to use Laravel, then you could install it as standalone [https://github.com/EFTEC/BladeOne](https://github.com/EFTEC/BladeOne) :-3 I prefer Blade because the short learning curve and because it's similar to C# Razor. It also allows native code (but it is not aimed for every situation). &amp;#x200B; &amp;#x200B;
Ahem. MongoDB is not aimed to an interactive interface because its considerably slow than regular sql. MongoDB shines when you want to retrieve a complex structure (called document) such as an invoice (including the detail) but it's bad for user interaction, queries (list all invoices) and data analysis ( sum of all invoices for the period 2018-2019). &amp;#x200B; And now, there is not such thing as rapid adoption of MEAN, it is just marketing stunt. The market move really slowly to see any difference. For example, PHP 5.6 is still alive. &amp;#x200B;
&gt;Why are we suddenly talking about developed countries now? Whenever I compared the US I compared it to a developed country. I think is more reasonable than comparing it a country in a middle of development, a country under-developed or a country at war. Just to be able to compare what is comparable, sounds reasonable so far don't you think? &gt;Are those the ones that perfected gun control? "perfected" is a very big word here. But at the very least: they either all have a non fanatical gun culture and/or more sensible gun controls than the US (and it goes without saying, less gun-related crimes and violence). &gt;Are those the ones that have a large border in the South with a large influx of criminals and drugs the plague the country? I'm sure any European right-wing party will take great pleasure about talking of the "invasion" of immigrants and drug dealer coming from Africa and the Middle East to the South of Europe, or even Australia for that matter. Heck if you are talking to your Trump friend Farage even the UK is being "invaded". &gt;Are those the countries with a black gang violence problem? The US has a very good record of perpetuating discrimination against minorities and skin-colored people and racism. Besides being plagued by racism, the US police &amp; justice system are incredibly unfair toward them which can only blow up the stats. It's as far as I know a very well documented issue if you can bother to try to pay attention. &gt;Or is it just convenient that Greece has a murder rate of 1.7 and white USA a rate of 2.5 per 100,000 Numbers again without any date or source... - Crime rate in Greece in 2016: 0.75 - Crime rate in the US in 2016: 5.35 The only European countries recorded to have a higher crime rate that year were Ukraine and Russia... Source: https://en.wikipedia.org/wiki/List_of_countries_by_intentional_homicide_rate &gt;and you want to blame the difference on guns and the 2A? Oh no. We never said it's only 2A, we are however _all_ (as, any non American) agreeing 2A and the lack of sensible gun control laws is a major part of _gun-related violence_. &gt;Is it convenient that only USA has the highest black population of all the developed countries? How convenient is it to blame it on black people I wonder? &gt;I know USA is not even top 30 in murder rate in the American continent Oh right, because it's entirely right to compare a developed country's violence/crime level with under-developed countries including some being at war? I mean your _whole_ argumentation doesn't make any sense, completely avoids all our points made from the very beginning and at no point you ever bothered to provide any sort of source for the numbers you gave - which at several occasion I corrected because they were wrong. So yes: get your facts right and come back later when you can have a reasonable discussion about facts instead of blindly throwing off unreasonable opinions.
The PHP world is splitted in two: PHP 5.x and 7.x And there are a few frameworks/discipline/markets: Wordpres/Laravel/Symphony/native php. &amp;#x200B; While, the Javascript market is a mess: * ES5 vs ES6 (Or ES2015), it play with different rules and the market is totally biased to ES5 (or ES6 using transpiler). * Then, there are frameworks: Angulas, VueJS or React. They work and act differently, with different rules and languages. See below: * And there are 3 languages: BabelJS (ES6 or some sort, VueJS and React uses it), TypeScript (angular), CoffeScript and ES5 (aka, old fashion javascript). * And there are two ways to program: server side and client side (aka JQuery). * And I am discarding completelly Node.JS (it is used but you could program straight into Node.JS) &amp;#x200B;
Let’s all make a crud app and post them here
And it's a great start, but not production ready yet. Using a framework means many of the 'core' components such as database querying, session management, authentication, validation, routing, etc are already done for you and to a high standard, so you can just focus on coding your business logic. Saves time, and you'll learn a lot and become a better coder by using it.
ah! gochya. looking forward to it
&gt; uses PHP CodeIgniter and is focused on processing credit cards Yikes. I bet you're going to find some gems in there.
VS Code works well with PHP and will allow you to jump to function and method definitions easily. Also PHPStorm (My preference for PHP dev work). But really, you should be using the Wordpress docs to figure out how to tap into these various functions - Not jumping to them / editing them directly.
Visual Studio Code doesn't have the context of "application", so it doesn't understand that exists a class called MyClass on a different file. While PHP has it, so if you write $obj=new MyClass(); then PHPStorm could suggest you to add the import automatically of if the class doesn't exist then it marks as a warning/error. &amp;#x200B;
Everywhere. They’re just...&lt;sigh /&gt;...everywhere.
Well full on blog projects are useful. But now, it's cruddy CRUDs and TODOs.
Another name to gettext() function built into php used in i18n or translation
You should get yourself a good IDE such as phpstorm that will let you click on a function straight to it's definition. *Disclaimer i've no idea of phpstorm actually works well with WordPress 
Run
Switch to laravel. 
I did read the docs and am ignoring the PDO part, so can you please explain what in the name of all that is holy is this: public static function clean($string) { $patterns = array( // strip out: '@&lt;script[^&gt;]*?&gt;.*?&lt;/script&gt;@si', // Strip out javascript '@&lt;[\/\!]*?[^&lt;&gt;]*?&gt;@si', // HTML tags '@&lt;style[^&gt;]*?&gt;.*?&lt;/style&gt;@siU', // Strip style tags properly '@&lt;![\s\S]*?--[ \t\n\r]*&gt;@' // Strip multi-line comments ); $string = \preg_replace($patterns, '', $string); $string = \trim($string); $string = \stripslashes($string); return \htmlentities($string); } Not only is it brittle to the point of being dangerous. It's also unclear when (in what context) somebody would ever would want to use that function. The fact that it is actually being used in the project itself doesn't give me a warm fuzzy feeling.
Your best bet is to convince your boss to use Laravel. Use this: [https://guerric.co.uk/convince-your-boss/](https://guerric.co.uk/convince-your-boss/) &amp;#x200B; If that fails, use this: [https://codeigniter.com/user\_guide/](https://codeigniter.com/user_guide/)
Underscore is valid character of function name in PHP, so `__()` is a valid and normal function in PHP. 
That is for cleaning input before outputting, nothing to do with actual databased, which it states. Or do you even do that? Two different things.
Thanks. Were a consulting company so I'm tasked to first code review the client and then either stick w php or recommend moving to .net or something else. Moving elsewhere would be easy but I'd still like to see what's up in php land. Sounds like laravel makes codeignitor irrelevant and the way to go for any php web apps, that correct?
Laravel is decent, but it's highly opinionated and makes way too many assumptions. If the application you're making aligns well with Laravel then it can be a pleasant experience. If you have to do a lot of unconventional stuff, it's really annoying to work with. Symfony on the other hand is the big daddy framework in PHP. No opinions, no assumptions, and doesn't get in your way.
Hi everyone, I have an EC2 instance running my application, but for some reason the session disappears when I reload the page. &amp;#x200B; This is my index.php file: &lt;?php session\_start(); &amp;#x200B; $\_SESSION\['test'\] = 'asdsadasdasd'; echo '&lt;pre&gt;'; print\_r($\_SESSION); &amp;#x200B; I open that, and the I open this test.php file: &lt;?php session\_start(); &amp;#x200B; echo '&lt;pre&gt;'; print\_r($\_SESSION); &amp;#x200B; The session array is always empty, I can see the session files being created on the server though. Can anyone point me to a direction?
Whats is the session config? Where do you store it? Is there enough storage free? If you use other then file storage, wotk the connection and so on... &amp;#x200B; Habe a look in your error log! &amp;#x200B; Without any further Information nobody can help you more... 
I updated my comment with the session config (I didn't change anything except for the lifetime, so it's whatever's php's default). By default they're store at " /var/lib/php/session", I tried changing it as well, in both cases the session files get created and there is nothing on the error\_log Yes, there is plenty of storage free.
Laravel offends a lot of purists, but at the end of the day it's a fantastic way to skip the BS and boilerplate and get to the part your clients will actually care about - the business logic.
Please post this in /r/phphelp instead
Don’t forget about https://laracasts.com
This: https://wiki.php.net/rfc/preload While JIT will improve cpu related functionality, preload aims to reduce the bootstrap time of our applications (register the autoloader, start your kernel, perform some runtime changes, etc.) And I agree, preload should get us more excited about. 
Use codeigniter.com and go through documentation. First thing you need to do is upgrade the codeigniter version to the latest as there are some security issues which are constantly patched. Codeigniter is very easy to use and understand unlike laravel which is highly opinionated. I have been using codeigniter since version 1 and it is the easiest framework out there. With composer support you can use any php package out there. And remember that any framework you use is made by using php itself so you can write normal php code also. 
There's also _e(arg) that echos the translation
Are you getting a new cookie on every load? And try this. http://php.net/manual/en/function.session-write-close.php
How many days do you still have? Do you already have prior knowledge in PHP programming before? If you already have prior knowledge in PHP and still have ample time to study through it, then I would suggest that you better proceed to Laravel. I've been using codeigniter before and now I'm using Laravel. There are a lot more things you can do with Laravel. :D Thanks me later. haha
Code Igniter is old and is expected to get a major update soon. It is designed for less experienced programmers. Laravel is well maintained and constantly upgraded. The learning curve for new programmers is steeper, but for more advanced programmers, it is significantly more powerful and useful. One example of Laravel's superiority is the fact that it uses CLI whereas CI does not.
This function is defined by &lt;a herf="https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/"&gt;wordpress&lt;/a&gt;.
I got a lot of enjoyment out of examining the code from this horror movie. - Not knowing what bools work: return $delete?true:false; - No use of prepared queries - XSS maggot den by string concatenating queries - No separation of concerns literally checking server vars and composing json while listing database items 
Used for internationalization
Yes it does :)
And a Magento thing
Do you use load balancer or direct ip connection to ec2? We use load balancer and efs on our ec2 instances and we store our sessions is dynamodb.
And a CakePHP thing.
Doesn't mean its insecure necessarily just because its an old framework.
This is terrible advice. You're telling him to rewrite just for the fuck of it?
This is the best advice in here. Ignore the Laravel fan boys and do whats best for the business/project.
This is defined function by [wordpress](https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/) for easily language translation of any wordpress theme and plugin.
And a Laravel thing. 
I don't think anyone has an issue with CodeIgniter *just* because it's old.
Php ecosystem matured so now only two frameworks remain relevant. That's Laravel and Symfony. Laravel is equivalent of Ruby on rails in php. Symfony is port of Java Spring to php.
Thanks! This was very helpful and what I was looking for.
Please like and subscribe, and make sure to check our Patreon link.
sorry bro, you're clearly wrong here. *goes back to my time machine*
And a symfony1 thing. [https://symfony.com/legacy/doc/gentle-introduction/1\_4/en/13-I18n-and-L10n#chapter\_13\_sub\_handling\_complex\_translation\_needs](https://symfony.com/legacy/doc/gentle-introduction/1_4/en/13-I18n-and-L10n#chapter_13_sub_handling_complex_translation_needs)
I can understand "DDoS rivals" but the rest says "just your regular mental breakdown".
Fuck me cant trust anyone these days..
What?
Who are you? And how did you get into my phone’s Reddit?
I am Yu
I'm looking something like if($error instanceof \_\_\_\_\_\_\_\_) what kind exceptions can be very good for the error handler class to have : like FileNotFoundExceptions CustomExceptions . etc... 
From their alpha and beta releases, its not very major. Just some psr adoption and bug fixes. its a \_major\_ release because these changes are breaking but its still the same old crappy framework
Taking into account that in the PHP world there isn't a way to scaffold a simple crud with relations in any framework in a standard way without writing tons of lines of code. And I mean out of the box with the framework. I know there are other non official options, but in my opinion not desirable yet because those are aimed to work without git, database config only.
This is also called pattern matching in other languages, such as Erlang. This feature is one of those you quickly get used to.
Yup, that's a Tuesday for WordPress. I'll never touch that shit again and if a recruiter ask me if I have any experience in it, I'll say no. This is a pain in the ass and a security vulnerability.
Also April's fool!
Pattern matching involves pattern matching on values not just keys, and it comes with branches (success, fail, options), and destructuring for each case. This is just single-case destructuring, and it explodes if you don't have the relevant keys. I'm basically saying you're underselling pattern matching.
We need more context. It seems that your assumption is that there should be some obligatory exceptions that every class ought to have. As, I am afraid, not everyone is to share that assumption, you have to provide your reasoning and as much as possible background information overall. It will make this post a discussion and therefore a valid post in this sub. 
It's in parallel, handled by cURL and stream\_select if I remember correctly. Data is downloaded entirely in the background.
What's today's date again?
Tbh, you can never be sure when it comes to Wordpress
I wouldn’t trust a dev who had to ask for tutorials with my credit card details god damn
Are you a grade-schooler? Maybe you can't understand my comment. I first asked if he still has time to study. If none, he can continue on studying codeigniter.. &amp;#x200B; FYI, my current colleague was once a C# developer and now he's our Laravel developer.. :D :D 
So, people hate PHP because you can do metaprogramming and you can abuse it? Why hate PHP and not the idiot who used it that way? It's like saying "People hate C because there's this guy who wrote a coroutine that I can't read and I disagree how he handled the project, therefore it's C to blame and not the programmer".
Nope. Also: [https://wordfence.com/blog/2019/03/peculiar-php-present-in-popular-pipdig-power-pack-plugin/](https://wordfence.com/blog/2019/03/peculiar-php-present-in-popular-pipdig-power-pack-plugin/)
I would have expected some backwards compatibility to at least allow PHP 7.0 projects. Sadly that is not the case. Tools like these are used in both legacy and current projects, I wonder if you really needed to exclude PHP 7.0 or it just never came up? And yes, I am aware that 7.0 is EOL.
Published 29 March...
Thanks, you are right, but here simple example Erlang code, (implicit) with keys: #node{parent=Parent, root=Root} = Node 
This is a 3rd party hosted plugin, it doesn't appear the plugin is in the repo.
This isn't WordPress, it's a 3rd party hosted plugin.
Hello Matthieu :) ! I'm answering this message and your others in the same place because it's easier to follow this way. Nicolas answered your arguments about Guzzle, I'm answering here more on a general level. My main concern about your answer is actually why you felt it was important to post it. This message aims at understanding this, and I may ask questions that are difficult to answer. Please don't take it personally or think I'm being aggressive: that's definitely not my intent :) ! I really would like to understand your position. If anyone else than Symfony created a HTTP client, I would argue you wouldn't have answered with the same level of questioning. It's great, because as you said in your next messages it means Symfony has a reach and people expect high quality packages coming from it. But it's also a shame, because it tends to demotivate people trying to innovate. When everyone is asking you to justify every single action you do, you tend to stop because you're tired, especially if you do it for free. One of the key points you made in your answer was that Guzzle did support all the things the HTTP client provides. But I feel there is a misunderstanding there: Guzzle is not PSR-18. It implements PSR-18, but many of the things it does are actually outside of the interfaces PSR-18 provides. This means that when you use Guzzle, you are actually tied to a specific implementation. This does not seem to me like an increase in compatibility. On the other end, the Symfony HTTP client provides a standalone Contract that can be used independently and that defines precisely *all* the behaviors I detailed in my answer: parallel, HTTP2, chunks and streams, etc. The contract itself is more detailed and provide a better abstraction to allow for alternative implementations. As PSR-18 is not suggesting anything related to HTTP2 or async, how would Symfony build a full-featured HTTP client, while keeping it abstract and based on PSR-18? It's actually not possible (it blocks innovation). In your answer, I think what matters to you is not really Guzzle vs Symfony HTTP client. Instead, it's more about understanding why Symfony created something outside of the "classical way of doing things". If I'm right, this is interesting and I have a few questions for you (and I'm really interested by your answer, it's not rhetorical questions :) !): * On which basis do you think PSR-18 would be a reference? PSR are defined as recommendations, there are not standards. However, I may be wrong but I feel like you talk about them like standards. I would be interested in knowing why :) . * I think the credibility of an organization like the FIG should arise from its members and/or usage statistics. As the FIG now lacks large members (neither Wordpress, Symfony or Laravel are in, and Drupal is not represented anymore), would you have statistics about the actual compatibility introduced by PSR-18 that would give a clear incentive for Symfony to use such recommendation? * Following the same principles that lead you to question the Symfony HTTP client, if over time the client becomes more used than Guzzle and PSR-18 clients, and provides a better abstraction through the contract (which is already the case), would you consider replacing PSR-18 with the Symfony contract for HTTP client in your code? If not, why?
A 3rd party hosted plugin for a theme that have access to your framework's admin database. The sanity of the WordPress ecosystem is showing.
You can say a lot of the same shit about php. It let's you do stupid shit, sound familiar 😉 WP contribute and work around it is a dumpster fire, but you can do good wp work as a dev who scouts this shit lol.
Of course bad devs will be bad devs. We just know where to find them.
Ding ding. This is the correct answer. The gnu gettext() function shorthand: __ is used in other languages too and mixes perfectly with underscore.js of course.
Feel free to mix it with gnu gettext' __() and underscore.js
It was a symfony thing, but no more: [https://symfony.com/doc/current/translation.html](https://symfony.com/doc/current/translation.html)
\&gt; You can say a lot of the same shit about php. It let's you do stupid shit &amp;#x200B; Except PHP in itself doesn't allow you to do anything. Wordpress is a complete, production ready, platform that is so popular that regular people without coding experience ducktape pieces together in an orchestra reminding me of the worst horror show ever. Wordpress is complete crap and have no respect for any of it's users. &amp;#x200B; Saying that PHP is the "same shit" is like blaming the hardware for running the program, it makes no sense.
Good practice for any kind of error handling is to be as useful of a person dealing with error as possible. **What?** A file? A result of query? A cache result? "FileNotFound"; "QueryResultNotFound"; "CacheResultNotFound"; **Where?** In folder A? In a $PATH dirs? On requested URL? In a folder A and default location X? Such detailed information should be part of message accompanying the exception. &amp;#x200B; What helps us understand error handling/recovery code when there are multiple possible errors. Where helps us identify possible remedy or even validate that the code does what we think it is doing. &amp;#x200B; \*Exception in exception class name is totally superfluous. "FileNotFound" vs "FileNotFoundException" means the same, so whats the gain? Names should be judged strictly based on efficiency.
This is what you get with Wordpress's "we give you nothing useful out of the box, so here are a billion plugins that take on all that responsibility instead" attitude. Security issues like this are literally *baked into the WP development lifecycle by design*. 
I care about it, but i don't expect that I also share full list of PHP frameworks on my blog with pros and cons. [https://www.tactionsoftware.com/best-php-framework/](https://www.tactionsoftware.com/best-php-framework/)
Except here's the problem: 1. Clients and managers insist on WP because they think it will save them money, since a bunch of shit is already done for you (lies, but whatever....) 2. That "bunch of shit that's already done for you" is how you get bullshit like this installed. 3. The only way to actually avoid bullshit like this is to roll your own plugins and customizations so that you are in control of your own code. 4. But if you're rolling your own plugins, you're no longer benefiting from a "bunch of shit that's already done for you" 5. AND to make things worse, you're writing code in an **grotesquely** obtuse and outdated "framework" (if you can even call it that). Simple things are cumbersome and time consuming to do in WP. At the very least if you're doing raw PHP development, and choose not to install anything through composer, you're at least in plain old PHP and it's not actively fighting you like WordPress's awful abstractions are. But at the very least, popular composer libraries tend to be far higher quality than your typical WP plugin.
Wow you are actually responding. I have a question then. Do you realize that 80% of your pros and cons are **entirely uinterchangeable** between all frameworks? The whole list is just a stupid set of random features **equally fucking applicable** to every other framework. Now call it a useful comparison.
https://phptherightway.com/
Learn how to Google. Not only it will help you to get the answer for this very question but also will provide an enormous amount of help during the process of the actual learning. 
Are you referring to something like this? https://symfony.com/blog/new-and-improved-generators-for-makerbundle The `make:crud` command will scaffold CRUD controller actions, forms, and templates. All you need to do is configure and entity, which isnt tons of lines of code. And before the maker bundle, there was the sensio generator bundle, which did virtually the same thing
Should keep context in mind. April Fool's pranks are usually meant to be funny. There's nothing funny about this. And if it weren't true, there'd be nothing funny about getting people to believe it. Best not to confuse the issue by alleging prank.
Nice.. I been looking for something like this . 
I have found here similar problem, you can get the solution [here.](https://stackdev.io/question/11/how-to-move-logging-from-php-fpm-to-nginx)
Are you trying to imply that it's a failure on Wordpress' part that it's *not* a kitchen sink solution and offers plugin support for missing functionality? There are many reasons for WordPress being a shithouse codebase but that is not one of them. This is an "I installed a 3rdparty plugin without vetting it" issue.
Uuuhhhh, if you install Laravel plugin with Composer, it will have access to all your data too. Same with node modules, ruby gems and python packages.
And my axe!
I'm curious about your "vetting" statement. What is the point of developing in WP and using plugins to save time if you just have to spend a week or more going through a plugin's source code to vet it anyway? Unless your idea of "vetting" is just looking at a CVE list to see if that plugin appears on it, because that's not a guarantee it's safe.
empty($array) ?
I think [here](https://www.w3docs.com/snippets/php/how-to-check-whether-an-array-is-empty-in-php.html) you can get your answer.
Sounds ace. Where can I get it?
Yes. If (count($arr) &gt; 0)
Might throw error if not an array since php7. Dont remember.
My #1 tip for beginners is learn how to break down your problem effectively into small steps. If you can break down your problem into smaller steps, you can google how to do each step individually and then reuse that knowledge later. Let's take the ability to have a guest book on your site, just a simple way for people to leave a message on your site. Posting a mesage * You need a form in HTML * You need to capture the values of the form when submitted * You need to make sure the values are safe for your database to store * You need to store your values Reading existing messages * You need to get a list of messages from the databases * You need to loop over them to output them in HTML Once you do a few projects, you find that a lot of problems can be solved with a small subset of skills, and then you can start to improve on those skills. Find better ways to read/write to the database, find better ways to organize your code, find better ways to handle data validation. But if you ever come across something that you just don't know how to do, you can start by breaking down what you need to achieve at each step so you can identify what it is you don't know and google them more effectively
H A C K E R S
The framework isn't really a great design, which leads the applications you make with it to therefore not be a great design. Plus for some reason it attracts lots of newbs, which only enables them to write really bad code. I've worked on a good deal of existing CI apps and they've *all* been piles of shit, with no exceptions. One of them had a database full of plain text credit card data, with loads of SQL injection vulnerabilities. 
To better improve their funding .. I suggest they put up a learning center like Laravel did with Laracast . 
`if (!$array)` ? in case you meant "if an array contains only empy-like values", then `if (!array_filter($array))`
the op didn't ask "if an array not exists or empty". Though they could have meant so. You never can tell.
wtf you guys answer each other questions? 2 minutes after they were posted. With a link to your own resources?
Are you looking for [https://www.php.net/manual/de/spl.exceptions.php](https://www.php.net/manual/de/spl.exceptions.php) ?
wtf you guys [answer each other's questions](https://www.reddit.com/r/PHP/comments/b81hc2/is_there_any_way_to_check_if_an_array_is_empty_in/ejvafxx/)? 2 minutes after they were posted. With a link to your own resources?
if (is\_array($arr) &amp;&amp; count($arr) &gt; 0)
How else do you think spammers get points/karma?
Why do you think is_array($arr) is a good idea? 
This isn't a baked in security issue or anything related to WordPress at all. You could replace WordPress with any framework/cms, and do what they did.
Newer versions of php can throw an error on count if it's not an array.
This is 3rd party code, not at the repo. Just like if you clone/download 3rd party code for any framework/cms, which could have such issues built into them.
Yeah. And that's the whole bleedin' point, isn't it?
This one is so pathetic
Maybe you dont want the error? Jesus so testy.
A Wordpress site? With malicious code you say? :shocked_face:
May be *you* want to suppress a helpful error message but the question is why would you pull this shitty practice here? 
How is it shitty practice? In dev sure go for it. In production no. Just no
&gt; it makes no sense. People have been spouting that shit since the PHP4 days, when it could have been seen as a valid criticism. Today, though, it's just nonsense. You can write shitty code full of security holes *in any language*. But, you know, blaming PHP for their own incompetence is what the cool kids do these days.
&gt; What is the point of developing in WP and using plugins to save time if you just have to spend a week or more going through a plugin or theme's source code (and dependencies) to vet it anyway? Ehh. I hate Wordpress as much as the next sane developer, but you're stretching it a bit here. Do you blindly trust third-party code in Laravel or Symfony? Because you shouldn't. If you used third-party code that ultimately comprised your client's site, you should take some responsibility there.
You're not the first person I meet who does not understand error reporting. *It is for help*. No matter which mode it is, you want to know the actual issue that caused a problem. Besides. Do you *really* have two versions of code, one for dev and another for prod?
People really need to learn how to write/express themselves. I still don't understand the problem here... &amp;#x200B; Also, /r/PHPhelp.
Yes, yes I do. When a release is scheduled we remove most error reporting and put everything together. The only error reporting that remains is that which 1) points to errors in a way the dev team knows which section of code is at fault. 2) doesnt expose sensitive information to casual script kiddies on a customers network. If we left in error reporting for everything we'd get a clusterfuck on the error log when something did break. But hey you do you. I'm dealing with software that makes 10s of thousands of calls to scripts an hour on the low end. On the high, make that 100s of thousands. If an error repeats and theres an underlying error elsewhere I might have to dig thru 100k + records to find it. More error log stuff even worse.
fyi we are _all_ from the past.
plugin not site.
There's another post covering much of the same information here: * https://www.wordfence.com/blog/2019/03/peculiar-php-present-in-popular-pipdig-power-pack-plugin/ This was posted almost simultaneously as Jem's post. Follow up from Jem with some less technical information: * https://www.jemjabella.co.uk/2019/pipdig-your-questions-answered/ ... and a response from Pipdig: * https://www.pipdig.co/blog/sad-times/ Not very convincing, if you ask me.
[their response](https://www.pipdig.co/blog/sad-times/)
Is this an April Fools Joke?
The scope of my assumption was too wide on my previous comment. Yes definitely something like that. I've found this one for Laravel... [https://github.com/InfyOmLabs/laravel-generator](https://github.com/InfyOmLabs/laravel-generator) But at least when I was trying out it wasn't work. It's not as simple as that command. I'm going to look into what you pointed to see if I can reuse it for Laravel. Thanks.
Saying WordPress is “complete crap” is like blaming the program for the users inexperience. It makes no sense. 
&gt;Fuck me can’t trust anyone these days.. Chill out. This is news because it's rare. Someone got aids but people still fuckin. 
Wordpress is aimed towards the inexperienced users that want a "ready-to-go" solution, so I think it makes perfect sense.
That's insane. Well if you have so much extra manpower to comb your code back and forth... Still that's your specific situation and use it to answer a casual question on Reddit is a bit of stretch. Despite your opinion PHP *is* moving towards strict typing, because in general it's better to have an error than to suppress it 
Once again - you dont know my situation. I deal with highly sensitive information within the Criminal Justice system. I cant have any error kick out ANYTHING that breaks the classification of that kind of information.
Once again - Yes, I don't. Neither you do the situation for the OP, do you? Why would you suggest your edge case solution to a stranger instead of a generalized one? 
This account is a shill for u/w3docs.
Because in the end - it's better for end users to never see an error. If the error stops the code from running thats a bigger flaw than suppressing an error and handling it 
You'd have to make some adjustments because the templates are geared for a symfony app, but they are customizable 
Who talks about end users? They don't see any errors regardless of what we are talking about here. This matter is absolutely irrelevant to this discussion. 
Pretty much. That’s how it is unfortunately 
I once looked into some pirated WP plugins on a torrent website - no surprise that I found heavily obfuscated malicious code in them. The worst part was that the seeders were actually the admins of the torrent site - who promptly banned me when I reported it.
I just say I don't have experience with PHP. Afterall, PHP can get access to your DB. 
Glad that it helped you.
Yes reading code is the best way to learn code.
And I wouldn't grant any right on the core database to a theme plugin. Use another database, another user and make the security right. Grant reading right on the core database if you want statistics, but the rest is to be quarantined.
You can take my 10 days free email course on PHP - https://bootsity.com/courses 
I was going to say that this could easily be a rogue employee as it would be nuts for a company to do this.....but as apparently some of the bad behaviour has been removed, but not all of it, and the company is still not admitting having done anything wrong, that's a bad sign.
Actually pattern matching can work on any structure that expose some public data. It can support sums and products. Guarantee exhaustiveness and a bunch of other good features.
This looks a lot like code I would have written when I first got started. Nothing wrong with that. The next progression from here is to begin using classes for your logic.
As far as I know, Laracast is not part of the Laravel itself and is handled by separate people. Thanks you for idea anyway, that is something to consider.
If you've got the time, it would be a useful thing to do setting up a benchmark similar to the one made by https://en.reddit.com/user/beberlei https://beberlei.de/2019/03/23/playing_with_the_php_jit.html and sharing the results with either Dmitri or internals. Having real world use-cases to measure the performance gains would allow for better feedback on what works and what doesn't work for the JIT.
I will do what I can. I'm currently in the process of transitioning the whole library to work with ext-decimal (optionally), so the library is itself in a very unstable state. Because math libraries, particularly ones that are actually implemented the way people might use them, are nice for benchmarking, I'll probably create a composer project for benchmarking this library.
I'm currently working on integrating ext-decimal as we discussed. :) I might be able to merge the f-decimal branch (which hasn't been pushed yet) by the end of the week. I'm taking the opportunity to also clean up some of data handling inefficiencies, but I'm not going too crazy for a first pass. Also, since I want the library to be fairly useable on a vanilla PHP installation as well, I'm making Decimal the default if it's installed, but leaving bcmath as a fallback. A good example of a calculation that takes a long time is this one: public function arctan($precision = null, $round = true) { $precision = $precision ?? $this-&gt;getPrecision(); $one = Numbers::makeOne($precision + 2); $oldBase = $this-&gt;convertForModification(); $z = Numbers::makeOrDont(Numbers::IMMUTABLE, $this, $precision + 2); if ($z-&gt;isEqual(1)) { $answer = Numbers::makePi($precision + 2)-&gt;divide(4, $precision + 2); } elseif ($z-&gt;isEqual(-1)) { $answer = Numbers::makePi($precision + 2)-&gt;divide(4, $precision +2)-&gt;multiply(-1); } else { if ($z-&gt;abs()-&gt;isGreaterThan(1)) { $rangeAdjust = Numbers::makePi($precision + 2)-&gt;divide(2, $precision + 2); if ($z-&gt;isNegative()) { $rangeAdjust = $rangeAdjust-&gt;multiply(-1); } $z = $one-&gt;divide($z, $precision + 2); } $answer = SeriesProvider::maclaurinSeries( $z, function ($n) { return SequenceProvider::nthPowerNegativeOne($n); }, function ($n) { return SequenceProvider::nthOddNumber($n); }, function ($n) { return SequenceProvider::nthOddNumber($n); }, 0, $precision + 1 ); if (isset($rangeAdjust)) { $answer = $rangeAdjust-&gt;subtract($answer); } } if ($round) { $answer = $answer-&gt;roundToPrecision($precision); } else { $answer = $answer-&gt;truncateToPrecision($precision); } return $this-&gt;setValue($answer)-&gt;convertFromModification($oldBase); } With this `maclaurinSeries()` function: public static function maclaurinSeries( NumberInterface $input, // x value in series callable $numerator, // a function determining what the sign (+/-) is at the nth term callable $exponent, // a function determining the exponent of x at the nth term callable $denominator, // a function determining the denominator at the nth term $startTermAt = 0, $precision = 10) { $sum = Numbers::makeZero(100); $value = Numbers::make(Numbers::IMMUTABLE, $input-&gt;getValue()); $continue = true; $termNumber = $startTermAt; $adjustmentOfZero = 0; $currentPrecision = 0; while ($continue) { $term = Numbers::makeOne(100); try { $term = $term-&gt;multiply($value-&gt;pow($exponent($termNumber))) -&gt;divide($denominator($termNumber), 100) -&gt;multiply($numerator($termNumber)); } catch (IntegrityConstraint $constraint) { return $sum-&gt;truncateToPrecision($currentPrecision+1); } /** @var ImmutableNumber $term */ if ($term-&gt;numberOfLeadingZeros() &gt;= $precision) { $continue = false; } $currentPrecision = $term-&gt;numberOfLeadingZeros(); if ($term-&gt;isEqual(0)) { $adjustmentOfZero++; } else { $adjustmentOfZero = 0; } if ($adjustmentOfZero &gt; 5) { $continue = false; } $sum = $sum-&gt;add($term); $termNumber++; } return $sum-&gt;roundToPrecision($precision); } For values very close to 1 and -1, this series takes a LONG time to converge.
You're welcome to submit a PR :-/ I tried this.
I do scrapping by using cURL and DOMDocument class. With cURL, you can send appropriate headers to website that don't allow cross origin (use network tab in dev tool in browser to mimic request) and receive html in variable. With DOMDocument class, you can work on html to extract required data.
&gt; &gt; “The code comment tells us this is “checking the CDN (content delivery network) cache”. It’s not. This is performing a GET request on a file (id39dqm3c0_license_h.txt) sat on pipdigz.co.uk, which yesterday morning returned ‘http://kotrynabassdesign.com/wp-admin/admin-ajax.php’ in the response body.” &gt;We’re now looking into why this function is returning this url. However it seems to suggest that some of the “Author URLs” have been set to ‘kotrynabassdesign.com’. We don’t currently know why this is the case, or whether the site owner has intentionally changed this. The response should hit our site’s wp-admin/admin-ajax.php file under normal circumstances. On the surface it could mean that some pipdig themes have been renamed to other authors. We will be looking further into this issue and provide more information as it comes up. We can confirm that it won’t cause any issues for sites using pipdig themes, even if the author name/URL has been changed. If this is true doesn't it suggest that Kotryna Bass could be stealing/modifying and reselling Pipdig's themes?
Not a good Idea, Stock Data is very valuable, you will have Lawyers on your back sooner or later. But there are some Content Provider which give partial Data for free... If you need more ask them for pricing details... &amp;#x200B; P.S. I have worked for a Firm which made Stock data Sites for Banks and so on, one of the layers there said once, that the Datagrabbers pay 10 of us Programmers, for a Year, after the Lawsuit was over!
Good to know. but this is very a personal project for my portfolio. Don't plan on launching it publicly. But which type of sites/providers give partial data for free. I just see web scraping websites that just ask for details but I have no idea how it works
Ok ima look into this but in your opinion is this complicated? extracting stock data for a project for my portfolio. do these 2 work together or are they 2 different ways to extract the data. DOMDocument need cURL?
Before outputting where / how? In what context? As said: it is really brittle and *will* leave people very much vulnerable.
Aye and we're living on a rock as well.
I guess you really don't do any programming. Look up xss, cross site scripting. 
Nope. It's not complicated. Before going for extracting stock data, try scrapping homepage of any simple website. Even your own website will work. To your next question, cURL and DOMDocument are entirely different thing. With cURL, you'll obtain html from url. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $html = curl_exec(); This will get you html of $url. Try searching for more curl example to send POST data and obtain html. Now like in JavaScript we select an id in DOM and get it's value, we can load this $html into DOMDocument class and perform operation. You'll get the references online. 
&gt; If this is true doesn't it suggest that Kotryna Bass could be stealing/modifying and reselling Pipdig's themes? Yes, that would be my take on it.
Any more info on your trial? Any reason why you ended up using arrays? As someone who is exploring a better way to handle DTOs in PHP as well, I'd be interested in hearing your experiences. In my experience, arrays in the constructors have resulted in runtime errors for us when we add or remove fields to a related business object. I run into the same problem when using Eloquent, since Eloquent just accepts a data array in the constructor/create methods which limits static analysis.
Srsly?
Almost got me.
Instead of starting personal attacks you might consider there are actual issues with your code instead. And you will keep making the same mistakes over and over again if you refuse to understand that.