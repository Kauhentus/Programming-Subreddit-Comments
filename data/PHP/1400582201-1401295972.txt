superelegant =) function getPaths(array $array, $prefix = '') { $paths = []; foreach ($array as $key =&gt; $element) { if (is_array($element)) { $paths += getPaths($element, $prefix.'/'.$key); continue; } $paths[$prefix.'/'.$element] = $element; } return $paths; }
I wrote an article for NetTuts a while back called [Vagrant: What, Why and How](http://code.tutsplus.com/tutorials/vagrant-what-why-and-how--net-26500) Some of the examples are using old syntax now, but the rest is the same. You don't need it, but at some point you might want it. If XAMP/MAMP/WAMP is working for you then keep on trucking for now, ignore the fanboys who suggest it has to be used for everything all the time.
I always ask people about deprecated functions in PHP. It does a few things. It gives context to their knowledge. They were usually deprecated for security or language philosophy reasons so there is a good and interesting discussion behind them. They may have required reworking of code. As a recent graduate you may not know all of that history. However something of this type that shows not just syntactic memory of a language but understanding of the language's nuances is a good thing.
That is awesome. I was looking for something like this. Love Laravel.
Just a comment re: AngularJS We've had the front-end team trying to sell management on Angular for about a month now. Up until recently, I was supporting him, as I'd only heard about it as "the way to do things" (front-end is currently not my role). I took the time last week to fully learn what it is, why you would use it, and sample applications. I was stunned at how unsuitable it is for our system. A simple paragraph on their homepage that explained why you would need it (without being pure wank) would've saved ALL of us the headache.
I've been a web developer for 20 years. I've used every major OS and I've used every major dev language at some point. I've used grep twice for anything that an IDE or windows search couldn't handle. What exactly are you using grep for in a development capacity? Are you aware that every decent IDE like phped has really powerful search built in that kicks the shit out of command line tools for everything but the most esoteric regex searches?
it's uglifier for php =)
I had a similar story happen to me. I was on the train home and the client f-ed something and ended up terminaling in and fixing it from my phone. On windows there are several terminal options for you, I prefer putty. I also due the delopyments from the repository. I really enjoy tortisesvn/git on the windows platform and since WebMatrix, I have had many rocking hours in development for my personal and work projects. I understand that it's a "Microsoft product" but it's free, manages multiple versions of php seemlessly and I just reccomended it to anyone who does work with php on windows.
I'll write code and annotate as best to support my IDE, but I won't change my code so it supports it. PHP is a dynamic language, I would rather like to make use of that. :P
You can use the dynamic parts in ways that make more sense. There is little benefit in reducing 3 method calls to an array, a loop and dynamic invocation.
Mind going into more detail about what made it unsuitable? I've never tried Angular either, so I'm curious. 
[Daniel Lowrey](https://github.com/rdlowrey) - Web Sockets / HTTP / Auryn [Pieter Hordijk](https://github.com/PeeHaa) - oAuth / PitchBlade / Beer [Chris Wright](https://github.com/DaveRandom) - LibDNS - xDressing 
Would be nice if you also mentioned their mmost important projects. Since they all have a lot of repos on github
Updated.
will try to contact them =)
&gt; but still i would not recommend a beginner programmer to build his/her projects from scratch, its going to fail hard. [Failure Is Always An Option](https://www.youtube.com/watch?v=a1tPbfu-fLY) In fact, I'll argue you learn far more from failures than you do from successes. So, who cares if it fails hard? We need to fail so we can learn how to succeed...
Basically: you do not want to run production on Windows, and therefore you do not want to do development on Windows. Webservers, file systems, databases, PHP itself are all native to *nix environments, and under Windows have subtle and awkward differences: behaviour of some APIs, case sensitivity, package defaults, and so on. These, when unaccounted for, easily lead to major disasters. Even when you're working solo, Vagrant helps here by creating a [typically] Linux virtual machine in which you execute your development code, even though you can still edit it with your familiar Windows tools: in essence, you develop in an environment that is very close to production. For team projects, Vagrant adds *quick setup* and *consistency*: it allows another developer to replicate the 'official' development environment with minimum effort. If done correctly, this can guarantee, for example, that all versions of PHP, MySQL and libraries are identical across all developers. For large projects, Vagrant, when combined with configuration management tools such as puppet, can be a milestone towards automated deployment. For example, I have a project that runs on 5 servers and 8 separate codebases. If I want a fresh copy to experiment with, I need to undergo a configuration hell. Enter Vagrant + Puppet, which spits out a freshly created, fully configured VM with the installed and configured product where I can experiment; then, when the changes are done, the same Puppet configuration deploys them to production, which is a highly isolated, mission critical environment.
Vagrant is basically a wrapper for a VM provider, like Virtualbox. It allows yo to automate the heavy lifting related to provisioning a new vm, like installing Apache, php, and more. Sure you could do that by hand, or you could just leave it to vagrant and go get a cup of coffee while your new dev environment spins up.
Sure. Our system is an old system that's been through 5 years of iterations. It's a hybrid CMS/Search engine. The templating system is an old version of Smarty. Basically, duct tape and prayer keep this thing running. The way Angular sees the server is merely as a source of data (ideally RESTful). The application logic with regards to interactivity, routing, etc is managed by Angular. See [this](https://i.imgur.com/hkmguzk.png). This architecture helps you build apps for different platforms using a single, agnostic data source. Our system is quite tightly tied to the templates at this point, and the server is far from RESTful. We have a "traditional" MVC pattern (somewhat), so the idea that Angular would manage something like routing just doesn't mesh well. Loading Angular on top of the site would be a hindrance more than anything else. Here's a [good introduction](http://campus.codeschool.com/courses/shaping-up-with-angular-js/level/1/section/1/video/1).
I'm currently working on an open source issue management application, which is around 40% complete, so not sure if that is something you'd be interested in
Hey man, just wanted to say your article is what got me into Vagrant a year ago. Now I don't even bother with local server setups; just Vagrant (+ [Puphpet](https://puphpet.com/)) and go. It's a great workflow; way better than monkeying with a local setup and multiple projects. 
Thank you @rossriley. Anyway I am just thinking if we create and access all object via container (May be injecting container via constructor or property by default) then we can make the framework more decoupled though it may look similar to service locator pattern. But not sure will it be causing performance issue because Container will hold number of objects? What is your thoughts on this ? Thanks
I find the perspective of a lot of newly minted php developers disconcerting. The idea that you should focus on assembling existing components and learning frameworks over learning the actual language, or writing something from scratch has led to me working with people who talk big game but know precious little about software engineering, and absolutely wilt at the prospect of completing the most menial tasks by hand. It's sad, actually. 
Might be a cool idea =) especially if we get some more cms devs to join
This site isn't complete but it gives you some ideas: http://programmerinterview.com/index.php/php-questions/php-introduction
I'm glad it helped! I actually still use MAMP and php -S now and then (when I can) but I jump around on little bits and bobs so much it makes sense for me. That article was way too USE THIS FOR EVERYTHING and that has bitten me in the arse a few times since. :)
You should try using SMTPSecure of 'tls' and Port of 587 for gmail. Also make sure your username includes the '@gmail.com' part of the string.
I work on a Mac, and I can get my local environment close enough to Production without Vagrant. I think to extend on your explanation. The real power of Vagrant comes from being able to share your virtual machines. If you have a team of developers moving around on different projects, you can get a teammate up and running in very little time. They don't have to spend a ton of time configuring their local environment for this new project.
This is really more of an explanation of the value of developing on virtual machine, in general. Vagrant, in particular, makes it possible to quickly and easily create such a VM. And quickly RE-create the same VM if/when you inevitably bork it. Plus, since you can define HOW the VM is build (Vagrantfile + Puppet manifest), it's also trivial to share (and version control) with other team members so you all can run the exact same dev environment. Vagrant : VM :: Grunt : JS/CSS Vagrant : VM :: Make : Native executables ...define it once (vagrantfile, gruntfile, makefile, etc), run it quickly over and over, whenever you need to. It's a massive time saver.
Hey, nice video. It's always very interesting to see your work being used by someone else, and also very unnerving :) I'm watching the video and am about halfway through it now, but I wanted to pause and add some running commentary: * PuPHPet - you're struggling how to pronounce it, and this is my fault. I thought it was funny but I think I should probably start acting a bit more professionally. It's "officially" pronounced "puff-et". Like Warren Buffet. * Nginx - it's pronounced "engine-x". * Not sure that /u/utotwel may have been referring to in regards to SSL, but Apache has had SSL support for a little bit now. Nginx SSL support is still forthcoming! * I updated the help text on the synced folders for Rackspace, Digital Ocean and AWS: So, Path your files are stored on host machine changed to Path your hosts' files are uploaded to on guest machine * I have been jonesing to create a more streamlined process for getting all the required tools on your host machine... Virtualbox, Vagrant, Cygwin if you're on Windows, etc... but this is way outside of the scope of PuPHPet and maybe impossible to do correctly. My dream would be to have a single download or script to run to set up ones' environment, we'll see how this goes. edit 1: I *highly* recommend not installing phpmyadmin on a public-facing server. I consider pma to be a sub-optimal project, and installing it on a public-facing server is A Bad Idea. That said, I know you're just running this as a test. Use Sequel Pro or MySQL Administrator instead! edit 2: Noooooooo you're editing your apache configs manually don't do that. You should edit the `puphpet/config.yaml` and edit the entry you have there for your existing vhost. The default vhost shouldn't be used, and I'll add an option for disabling it into the GUI. Once you edit the yaml file, just run `$ vagrant provision` - never edit the files manually!
Yeah, seems to me that you'd want to build your whole application with Angular in mind rather than just layer it in there. Not sure why your front-end team was trying to push that so hard. It's an excellent framework, but to paraphrase the great Prof. Oak: There's a time and place for everything!
Thanks =) And thanks for all the hard work that went into PuPHPet, really love the amount of options given and that it actually works out of the box. Sorry for butchering project pronounciation, a lot of people over here pronounce puphpet and nginx like I do, so that's where I picked up the habbit =) 
it gives you the exact same enviroment in development and production, same tools, same base software, etc.
Thanks for this link -- I'll add it to the ADR narrative. It's nice to see that others have had this on their minds before now. Do you, /u/davedevelopment, have any writings on your use of Action classes?
noticed that, awesome!
Can you install beanstalkd? Redis? hhvm? Once you start delving into more complex configurations your options run out.
I just wanted to deploy something as fast as possible, but yeah, I wouldn't edit stuff manually on a real setup. Actually might be a good idea for you to record a video on how to use puphpet explaining stuff like 'vagrant provision', etc =)
More clear FAQ and instructions are on my to-do. Not sure how I feel about recording a video. You spent a few minutes figuring out how the Apache configs are set up. On CentOS they would have been in different locations. On Nginx is completely different. Those 5 minutes or so can be reduced to 10 seconds. I realize that if you're not familiar with Vagrant and the details on the puphpet setup that this may not be very obvious, though.
Second this, That would be very handy.
&gt; Nginx SSL support is still forthcoming! I what regards? I've got a working nginx SSL config that scores better than our live apache SSL config.. :) 
In regards of me adding the stuff to the puphpet gui
Logical. The phrasing had me confused as to if you were on about SSL in nginx itself! :)
It can be, but Vagrant's real strength is in developer environments. You can completely destroy your environment, and with a single command (and however long of waiting), you can completely rebuild your environment from scratch.
This isn't exactly repeating anything as they are all different functions. There is nothing particularly scalable about it. Adding a new function call isn't harder than adding an element to that array. If you were going to allow more providers to be passed into the function, *then* you could rewrite it like the above. But in both cases you still need to do more work. There is no point making something "scalable" unless you need to scale it. And it's certainly not more readable than just having the functions in plain code.
&gt; Would you tell the same thing to a civil engineering or a constructor? It's ok to fail, you're going to learn but a lot of people it's going to get damaged. I went to school for engineering (Mechanical Engineering). And yes, that is exactly what they taught. You obviously use judgement as to when to push the boundaries (in small, non-critical, non-safety sensitive areas). You do the research to understand what you're doing (and that research can and will fail). The big difference is that there are professional journals and talks about those failures. So that everyone can learn from a failure, not just the single person. And I'm not saying to fail unconstrained. I'm talking about failing early and often. When you're implementing something, you should be willing to say very early that "hey, this isn't working. Let's stop and re-analyze". And that absolutely happens in engineering. They don't keep building the bridge saying "I think this will be ok". They stop and re-assess and fix the problem. That's still a failure. It's just a small, localized one. And a good one. And that's not touching on the difference in education between software and engineering. The difference in techniques and scientific understanding of the process is staggering.
To expand on this, it's also a great way to keep your team's development environments in sync. Use Vagrant to manage the OS, PHP version, installed development tools, and the like, so everyone is developing against the same environment. We use it for our team's development systems at work, even to the point where vagrant manages user accounts and environments on each others development systems. I love that if a coworker needs help with something that I'll be able to log into their system with my own credentials and that I'll have my .vimrc and .screenrc waiting for me when I get there. It's saved a lot of time and trouble at work. It's also made tools installation a lot simpler. The powers that be at work decided we want to use php-cs-fixer. Instead of having an admin install that on everyone's systems or leaving it up to the developer to do it we put it in Vagrant, and it's all there for everyone in the same place. We write packaged software for distribution, so we can't sync our development and production environments, but it's a great way to keep the team's systems the same.
so let's say that you get hired to build software in a language that is new to you (happens a lot here). Do you use a framework or build the thing from scratch?
My #1 tip: It's OK to admit that you don't know something. Now, don't just say "I don't know" to every question. Take some time and think it through. But if you don't know, admit to it. Then (and this is the important part), follow up with exactly how you would solve it. Would you go to Google? Would you pull up a docs page? Would you check out StackOverflow? Every question should have a different resource that you can use (or at least a different method of attacking said resource). Nobody will ever expect you to know everything. But you better dam well know how to find it out...
Yes, you can all of the above. We have used Vagrant with Chef. Chef does all the configuration. Vagrant just creates the VM.
Sorry, I should have been more clear: &gt; I work on a Mac, and I can get my local environment close enough to Production without Vagrant. You can't install beanstalkd, redis, HHVM on OSX is what I was (badly) trying to get at.
This is excellent advice. I interviewed for a .NET position a couple years ago with very limited .NET experience. I didn't know the answer to most of the questions, but at least thought out-loud how I would go about solving the problem, even if it wasn't in .NET. I got hired regardless, so it shows that employers are focused more on your understanding of programming concepts more than your raw memory of a language. In terms of PHP, don't stress about remembering function names, argument order, etc., but instead make sure you understand *how PHP works* (i.e., it's an interpreted language, has OOP constructs, etc.). Anyone can memorize function names, but it takes a deeper understanding of your language to write code that's worth a damn.
I can remember how it's spelt, I just say "Puppet -- but the PHP kind". :)
&gt;Like Warren Buffet. Don't you mean Warren Buphpet? 
It's worth also mentioning, if you've got the horsepower and licenses, you can now use Vagrant with Windows guests. http://www.vagrantup.com/blog/feature-preview-vagrant-1-6-windows.html 1.6.2 is the latest version.
Because you prefer to work in Windows? Why force people to use Linux just because it's a better server architecture? I have tried and not enjoyed Linux enough to recommend it for a desktop, and while I'm a mac user personally I see no reason people can't just use whatever platform they are most comfortable with and run their server in a VM. And for what it's worth even if Linux was my daily driver for desktop I would still run a vm for developing. 
I have been in this situation a couple times, and I say scratch, absolutely. A framework is a layer of abstraction. It will abstract you away from what the real problem is if you don't have an inherent understanding of the language to begin with. Beginners shouldn't be using frameworks. That creates things like "Drupal Developers" or "Wordpress Programmers" instead of actual PHP developers.
I think you're approaching this in the right way but with the wrong subject. I'd go as far as saying drop Laravel as the focal point of the presentation. The holy grail of development is creating functional, SOLID, reusable components. This is basically what you outlined in the 7 points you listed. You might want to consider... 1) Setup a Satis server (see composer docs, it's easy) 2) Try to identify some very common issue that your developers always deal with and create a package that solves it 3) Demonstrate using Laravel how to install the package and build some kind of front facing experience around it 4) Demonstrate forking the package (as in for a "custom" requirement), modifying it, and publishing it back to Satis That type of demonstration maps more clearly to your concerns than frameworks or Laravel.
This post is somewhat FUD. Angular is actually an a-la-carte system. Use the parts you need, don't use the parts you don't need. It is suitable for apps that are not SPA's. * You *don't* have to use the routing, or the resource(REST) system, or the remote templating. * You can use it to create dynamic data-bound forms/widgets/etc that are seeded from data in the page. * You can access JSON data from non-restful endpoints with the $http provider. e.g. &lt;script&gt; var pageData = &lt;?php echo json_encode($pageData); ?&gt;; function MyController($scope, $http) { $scope.user = pageData.user; $scope.blogPosts = pageData.blogPost; $scope.comments = pageData.comments; $scope.newComment = {}; $scope.addComment = function() { $http.post('/comments/add', $scope.comment) .success(function(response)) { $scope.comments.push($scope.comment); $scope.comment = {}; } } } &lt;/script&gt; 
I would LOVE this if it could tidy up Apache config files. I have searching for online and IDE reformatters. Nothing. Please!!!
Was the trademark dispute with the Lithium forum people?
The sheer amount of legal red tape and standards you'd need to follow from this are far beyond your scope of knowledge if you're asking questions like this.
You're absolutely right. I simplified my explanation not to disparage angular but to illustrate that one should use the framework more as a basis and not simply as a layer (as you would jquery for example) 
Thanks to both of you. This is the general outlook I had on it but is nice to hear it from others!
Another thing for me too check out! Thank you for your input
I'll have a good read of this tonight. Thank you!
This is really important! A friend of mine is a really smart guy (and a pretty good dev) but he can't get a job because he can't resist the urge to criticize everything. During interviews, he'll question their choice of production environment or build tools or other choices. This can be done constructively but I don't think he takes that approach :) It costs him interview after interview. In the end, they're not looking for a genius know it all (unless you apply to Google). They want someone that can get shit done and work with a team.
You are right, it will be hard, but not imposible. Payment gateway legal disclousers are a good place to start my research. Better put on my reading glasses and get a magnifying glass. :-) If you have any advice, I would be glad to listen. 
This is completely false. 
Everything I read about Angular makes me want to keep the fuck away from it. 
Yes really. If you haven't learned how to use common resources like [Google](https://www.google.com/search?q=server+side+storing+money&amp;oq=server+side+storing+money&amp;aqs=chrome..69i57.8288j0j7&amp;sourceid=chrome&amp;es_sm=93&amp;ie=UTF-8#q=storing+payments+on+server+%22php%22&amp;safe=off) or [Stack Exchange](http://stackoverflow.com/search?q=php+store+payments) to find the myriad questions along the same vein already asked, you are not experienced enough to even begin planning something like this. Furthermore, the fact that you just asked "What is the best way to do this" rather than showing any thought you've put into it to begin with reeks of an inexperienced developer. I see from your comment history that you're just asking people how you can clone paypal, and even insanely asking someone to tell you how to brute force gmail passwords. Trust me, as a developer with over a decade in the industry, *you are years from ready for a project like this*. This isn't something you can just crap out with little instruction. There's no get rich quick scheme. If this is something you really want to pursue, be prepared to dedicate yourself to learning and experimenting for a long time. If you already have rudimentary PHP knowledge, I suggest you start somewhere like an [ecommerce tutorial](https://www.google.com/search?q=php+ecommerce+basics&amp;oq=php+ecommerce+basics&amp;aqs=chrome..69i57.2560j0j4&amp;sourceid=chrome&amp;es_sm=93&amp;ie=UTF-8). Otherwise [start here](http://devzone.zend.com/6/php-101-php-for-the-absolute-beginner/).
Thanks for the advice. I will check it out.
It's a great framework, but you really need to go into it with a game plan in order to make the most of it 
You're welcome.
Hm, most job interviews want to see a portfolio of your past projects. Do you have any code snippets/full projects running? Make sure you have the source code readily available.
No writing I'm afraid.
I certainly do, thanks for the advice :)
I'd argue that this is considerably less readable. It would be fine if there were dozens of these providers or they were coming from another source, but as it stands, this has no added value. Scalable, sure, but it adds a dependency on the naming convention as well, which I don't care for either. Not keen on dynamic method names.
I quite liked codeacademy. Although that was for JavaScript... But if their php course is as good as that then that could be a good place to start.
Thanks! Are there any specific tutorials you could point me towards? Based on preliminary research I think I eventually plan on using Laravel. 
Thanks, I'll check them out.
Learn the language first, not a framework or a CMS. Below is a *basic* outline of what you'll need to know. Use this as a guide to help you find the information you need. Sorry for not posting any actual resources, but you can consider this a basic syllabus. **Basics** Like anything. Walk before you run. There is a LOT to the "basics" of any language, but these four are where you will derive most value out of PHP. Practice these things until you can do them in your sleep. 1. The syntax (variables, arrays, if/else, loops, objects, interfaces etc) 2. Doing stuff with $_GET and $_POST variables, and generally understanding how a request &amp; response in PHP works. 3. How to perform SQL queries with PDO (don't bother learning mysql_, as it's deprecated. Also recommend avoiding mysqli_, as its a dated procedural way to code) 4. How to work with sessions &amp; cookies **Security** Key security concepts to understand when building a PHP application. This is NOT a complete list, but it accounts for most of the vulnerability points an application can make. This is after the basics because it's that important - knowing this stuff is simply not optional. 1. Cross Site Request Forgery protection (CSRF) 2. Filtering input to prevent malicious code execution 3. Filtering input and using PDO prepared statements to stop SQL injection 4. Escaping output to mitigate Cross Site Scripting vulnerabilities (XSS) 5. How to hash and store passwords (php 5.5 made this a lot easier) 6. How to safely upload images &amp; files 7. Configuring your environment for maximum error checking **Object Oriented Design** Once you're comfortable with the basics &amp; security, you should start thinking in terms of objects, and read up on/practice the following concepts. Like the above, do these until they're second nature. 1. S.O.L.I.D. principles - S is the most important. 2. Programming to an interface 3. Favoring composition over inheritance 4. Dependency injection 5. Namespaces 6. Exceptions (not technically part of OO Design, but it's a bit too advanced **Application Architecture** This refers to how you would structure an application from top to bottom. 1. MVC pattern (and in general, layered architecture) 2. Basic understanding of what is meant by a domain and Domain Driven Design (this is a big topic, but you should at least understand the basics) 3. Using an Inversion of Control container for managing dependency injection (start with Pimple, then checkout Laravel's IoC) 4. Autoloading &amp; using composer to manage external libraries and dependencies 5. Various design patterns 6. Unit testing **Frameworks** Knowing all of the above will help you take greater advantage of (and better appreciate) frameworks. It's easy to do a very bad job using a good framework if you don't quite understand the sections above. Frameworks aren't magic bullets - they require prior knowledge to be used effectively. There are many frameworks to choose from. The most popular full featured frameworks are Laravel and Symfony, but you should dabble in a wide variety of them to get a sense for how they solve common problems. There are many more nooks and crannies in PHP than what I've outlined above, but that should be enough to get you started. The key to all of the above is practice and tinkering. Edit: thanks for the gold kind developer!
My pleasure! If you're looking for text-based tutorials, there's countless ones. Just do a simple Google search, but remember to keep my earlier tip in mind. Stay away from anything pre-2010. If you're looking for video tutorials, I have a few good sources for you: * [phpacademy](http://youtube.com/phpacademy) which I've produced content for myself, so I know it's reliable. * [Laracasts for Laravel tutorials](http://laracasts.com) * I'm also working on my own, but it won't be ready for a while. You can view the YouTube channel [here](http://youtube.com/coderscollege) if you and the site [here](http://coderscollege.org) (hope this doesn't count as advertising). As a side-note, [thenewboston](http://youtube.com/thenewboston) is often considered as a good teacher (which there is no denying, he is), but I'd probably stay away from his PHP tutorials. For the most part, they're ok, but a lot of his tutorials contain bad practices such as `mysql_*`, session security issues, XSS vulnerabilities etc. Once you have a good idea of what you're doing and know how to combat these issues, they should be fine though. Good luck! If you ever need help with anything, don't hesitate to shoot me a PM. I'd be delighted to help :)
I am a fan of taking on an easy project and slowly adding complexity to it over time. Start with a web form and insert something into a database and then display the results. Learn what you need to accomplish the goal at hand. Taking courses are good, but anything beyond the very basics (loops, logic, variables, functions, objects, etc) will probably go in one ear and out the other until you really need to use it. With your basic application, you can slowly add in features as you find something you want to add. Before you know it, you will have a bunch of spaghetti code with horrendously large objects and it will be a mess, but you will have an amazing grasp on the core concepts of the language. Then ditch it and move on, or rewrite it using OOP, Composer, ps4 autoloading, routing, an ORM wrapper for your database, external APIs, and even throw in a framework for good measure. This is honestly how I learned. I developed my own mini-CRM and website backend for a friend's company that was like 5-6 individual PHP scripts. I added all the features they requested. After a year or so, I looked back and was blown away at how horrible my code was. I rewrote it, re-themed it, and added more features. A year or so later, I looked back again, and was disgusted again by my code and reworked it entirely, overhauling the database, utilizing Zend and several other packages. I look at it now and am sorely tempted to rewrite it again, but it is a monster application now and I have a lot of other projects going on. So it works, but I don't like it, and even after I rewrite it, I probably won't ever think it is good enough.
Great comment! Session fixation/hijacking are also major security concerns which shouldn't be taken lightly.
Hey thanks a lot for those links - I took a brief look and they'll be really useful for my learning. PHPAcademy has a lot, and I mean a lot of playlists - I'm unsure as to where to start - would it be this one? https://www.youtube.com/playlist?list=PLfdtiltiRHWFD41D_LDomY1Fb-O9MtFqq Yea I learnt a few things from thenewboston, but apparently has a track record for starting tutorial series and not finishing them - he also has apparently just disappeared. Your channel looks interesting based on the art lol, I'll look into it later. Thanks a lot! Will do if I have any questions :)
Yup, that'd be a great place to start. Thanks, and no problem! :)
Thanks! I'll keep all this in mind when trying to learn PHP. Really appreciate this response.
If you have it on a hundred sites it's 10cents/site. If you only use it on 1/1,000,000th of a site your costs go through the roof ($100k/site). 
&gt; It's "officially" pronounced "puff-et". Like Warren Buffet. Like ElePHPant?
Wordpress is a really bad way to learn PHP. You will develop some bad habits doing that. How to start learning depends on your experience in programming. It looks like you have mostly a design background. If you have never written any code before I'd start from scratch. Learn the basics, then objects, then work work in a framework.
I don't advocate that anyone build stuff from scratch. Far from it: the framework gives us many things that every application needs, like user auth, routing, and error handling. Abstracting these things away is beneficial to our productivity. And yet, paradoxically it's this abstraction that results in un-rounded developers. Consider this example: my wife is a civil engineer. She just took an exam for a professional engineering license, and she was required to take a book that had tons of charts, conversions and reference tables in it. Many of these things are done automatically by computers. Why? Because the examiners want to know that she has the foundation of understanding, even if she never does a calculation that way again. Same thing here: I want PHP developers to understand the language, so that they can have the foundation. Learning the framework alone doesn't offer any kind of foundation.
Ah sessions… There is so much to be said about these, but my first and best tip is this. When a user logs in (or anytime there is secure data involved)… check the plaintext password against the username’s hash in the DB and then start the session with a something like: session_start(); $_SESSION['loggedin'] = true; Some people actually store the password or username in the session. Don’t do this.
This is a really good place to start. There are so many tutorials that are dated or just bad (or both) that it can be tough to get started. http://www.phptherightway.com We've incorporated this as part of our developer on boarding. It's kept up to date, gives a good overview of things. It goes through basics to more advanced concepts, then touches on popular tools and frameworks. You can also get it in book format. Good luck!
&gt;Some people actually store the [...] username in the session. Don’t do this. There's nothing wrong with storing the username in the session. The user record is quite often stored in the session after authentication for fast access. 
&gt;how to work with sessions securely Allow me to cut and paste from a previous response of mine on this topic: &gt;The methods an attacker can obtain a session are: &gt;* via [session fixation](http://en.wikipedia.org/wiki/Session_fixation) (which shouldn't be a problem if you regenerate the session upon signing in). &gt;* via session sidejacking, which means sniffing network packets to retrieve the session cookie. Unprotected public Wi-Fis would be particularly vulnerable. (The "identity" thing I spoke of ealier would help slightly, but it's not a perfect solution. If the attacker is on the same network and sending the same kind of data, reporting the same IP and user agent, the attacker would probably be successful in impersonating you. HTTPS helps tremendously, since it encrypts the communication between you and the server). &gt;* by physically accessing your computer and retrieving the session. &gt;* By stealing the session via [XSS](http://en.wikipedia.org/wiki/Cross-site_scripting) (which should be remedied by setting cookies to HttpOnly, as suggested earlier). And the things referenced: &gt;You can store away an "identity" in the session data for you to match against upon each request. Examples of an identity could be storing the IP, or the user agent string (or a combination of both). If the identity does not match, you prompt for a password and add the new identity to the session upon authentication. and &gt;you might want to have a look at [Secure and HttpOnly](http://en.wikipedia.org/wiki/HTTP_cookie#Secure_and_HttpOnly). ---- &gt;how to "pass" session handling to another handler like memcached You can use the provided memcached session handler: http://www.php.net/manual/en/memcached.sessions.php Or you could write your own if you want to know how it's done: http://www.php.net/manual/en/class.sessionhandlerinterface.php http://www.php.net/manual/en/function.session-set-save-handler.php 
What you're saying applies to pretty much any Single Page Application frameworks. The idea is to send pretty much everything to the client on first load and then use only APIs/JSON endpoints to supply data. It's not Angular thats the problem, it's just that any SPA framework isn't suitable for you. Also if your backend is already using an MVC model (but done well) then converting it to use an SPA framework should actually be pretty easy (you'd basically just encode most of the Model output as JSON and transfer most of the View and Controller work to the client side framework).
Did you try wrapping the DotNet calls in a try catch block, if there is an exception being thrown, it may give some clues?
&gt; All of your posts looks like an advertisement. Why do you you say that? I mean the only advertising bits on the page are: &gt; "Get the book today" * 4 &gt; "Get your FREE 30 page Developing SOLID Applications guide! - subscribe now" * 1 &gt; "Send me free weekly tips" * 1 &gt; "Get the free solid guide" * 1 &gt;"About Brandon Savage" * 1 I mean really - at least 40% of the page is taken up with actual content, and you're complaining about advertising? /snark. 
Please try to enjoy yourself when programming. Money is not a good motivator and does not make for a good programmer. I say this because I have co-workers that are unpassionate about their work and never seek to understand why things are the way they are; it really hurts their ability and makes me sad when I have to clean up their mess. As long as you strive to learn and do better every day, you'll do fine.
to start doing it and reading about it and repeating that for 10,000 hours
This is what I did at 15 or so and what I thought of when I read the thread title. That said, per my experience, this doesn't seem like the best way to learn. Love the comments in this thread though, solid guidance.
This is what I did, and ended up working for 6 years as a PHP coder. It wasn't easy or smart-- I dropped out of college (I was studying hardware anyway). I got the job because I was qualified for another aspect of the job, not coding. Then over the course of a year I proved myself as a coder and they made me that full time. I was pretty lucky. If you're not in school for it though, I really think the best way is to find a thing you want to do and do it. Mine was a simple web game. Roguelikes are awesome for learning coding too. It has to be something where you really want to see your own finished product, otherwise you'll just stop at some point.
for Windows: I ssh into an ubuntu server vm on virtualbox for Mac: homebrew for everything This has worked well for me so far.
You must not know many programmers - almost every web dev I know uses Macs exclusively. To expand, I live and work in the Toronto tech scene - I attend events at all kinds of startups, and they're all filled with nothing but Macs. The only place I could see Windows being a more prominent dev OS is companies or individuals who work with large corporations, making desktop software.
Jesus. I've only done about 1/10th of the site I plan to use it on. It's going to cost me $100. :(
Just run the carconnect.php directly in your web browser and see what the output is. Run it multiple times by hitting refresh. 
Former Gentoo'er here. Comparing Gentoo and Ubuntu is like comparing a box full of possibly-compatible car parts to an assembled, running Volkswagen. I loved Gentoo because it taught me a lot of Linux, administration, build tools, etc. I used to do stage one installs _for fun_. But it is not a system that I would use in a setting that expects productivity, because it is fiddley _by design_. Ubuntu is ready to go out of the box, comes with sane defaults, and I can't remember ever upgrading/updating and getting "stuck". I don't actively use it for development, but if Mac was no longer an option, I'd use Ubuntu in a heartbeat.
Build stuff.
ok, stop there. You are going to get confused. Let me help you: - for small web sites there is absolutely no need or benefit to using OOP. Procedural PHP code to output html back to the web server works fine. - for larger systems, the argument of OOP vs Procedural code was lost in the 90s. Everyone now uses OOP (Java, .NET and LAMP). This is not about PHP or any specific language. We C programmers had to move to C++ and then Java. The Microsoft classic ASP and Visual Basic programmers moved to .NET. The old school web developers using PHP version 4 or Perl or cgi-bin code have move to PHP version 5 or Python or Ruby. We all went to OOP, because it was proved to be "better". - for larger web apps using LAMP and specifically PHP, you should use OOP as supported in PHP version 5 and above. All procedural stuff from PHP 4 can be forgotten (kind of) and you can pour scorn on any system still not using OOP (such as wordpress). So stop thinking why (aka the purpose) and start thinking how. 
No. Never store a plaintext password anywhere. End of story. Edit: sorry, just saw you mentioned username only.
Code Academy is a good start.
Props to the original [forge](http://i.imgur.com/KNcgVwG.jpg) before the name was jacked 
Learning/reading everything "at once" without actually writing code makes the process quite complex (and boring) and might burn you out fast. IMO you should try to make a basic guestbook first with Add/View/Edit/Delete (a.k.a. CRUD) functionality. You'll feel good once you made one and that should fire you up to learn more.
What do you use instead of mysql and mysqli? 
Start by building a simple guestbook application then a dynamic website with loggin and passwords that are secure.
Agree about sharing. Vagrant Share is magic as far as I am concerned.
Glad my answer was of some help.
So the guy you paid screwed you over, and you want the guy who saves the project to work for free? 
Not sure why you think only PHP5+ supports OOP. CodeIgniter for example is an OO framework written for PHP4.
No, I'm to busy for that. Good luck though. 
&gt;for larger systems, the argument of OOP vs Procedural code was lost in the 90s. I'm starting an internship where my boss wants to write a huge network system in Pearl without OOP, and without any kind of unit testing. I'm hoping I can change his mind. Probably not though. 
Thing is Perl was a real contender to PHP about 10 years ago and a lot of Perl programmers will swear it is by far the better language. Just do what your boss says and enjoy the benefit of his experience. As an intern you are not responsible for the consequences of his choices. 
Arguably PHP4 had OOP constructs but they were not as complete or functional as they are in PHP5. It seems a lot of CodeIgniter developers are leaving for Laravel although it was hot stuff back in the day (as in very popular).
Ha, they're paying me well and it's a great company. I'll program in Assembly if that's what they want. EDIT: //simple grammar mistake, damn interns. 
Those aren't dev runs, they're UAT/staging/CI servers. You don't develop without debug. You can dress it up how ever you want, but the simple fact is when you are developing you are not using anything like an exact replica of prod. 
Of course I'm going to do that, but I'm not exactly to concerned. It's a summer internship. I'm going to work my ass off and learn as much as possible. The happier I make my boss, the more I'll make on my next internship. That's my top priority right now. 
Perl and PHP have remarkably little in common these days. They kind of look passingly similar in some ways. Perl is a remarkable language for shell scripting, but anyone who uses it to build a large app in procedural Perl needs a punch in the face. 
While in situations where I do need to install lots of services I use vagrant. It is false that you can't install what you listed on OS X. brew install redis brew install hhvm #requires extra tap https://github.com/mcuadros/homebrew-hhvm brew install beanstalk
Hi there. It seems you're sad. I can't tell if you're messing around or you're serious, but if you need someone to talk to, my master is always available for a chat. Either way, I hope you feel better soon! Have a hug! (っ'з')っ ^^Created ^^by ^^/u/laptopdude90 ^^V2.7
For filtering input, I'd specifically like to mention this: http://www.php.net/manual/en/function.filter-input.php
Creepy overbearing bot is creepy and overbearing. 
This is part of learning though, right ? You can be two sorts of programmer here ... * Write the thing they asked for ... * *Be assertive*, use your knowledge of the subject and reasoning skills to change minds, come up with a new specification that is realistic, makes sense, and can be completed in your summer internship ... I know what I'd do, I know what I think is a much better use of time, I know who I would want on my team ...
This is my dad on Facebook. 
It's late, but I'll try to make sense :) It sounds like you're possibly a little too excited about events. If you're creating a Project, which has an owner, it sounds like "owner" is just a property of Project, and whatever unit of code is creating that Project ought to just set the Owner itself. Put another way, the action of a user creating an Project is different than the action of an admin creating a project. In the former, the project is owned by whomever is performing the action. In the latter, "owner" is input to the action. Trying to shoe-horn this stuff into an event system is a recipe for code that is very hard to reason about. IMO, events/listeners are good for scenarios where's you have orthogonal concerns. The obvious examples are things like logging and metrics. Things get more interesting when you want something that looks like a "plugin" ecosystem. And finally, you have some cases where events save your bacon in a transaction-heavy sort of app. So, there are a lot of places where you want the loose-coupling of events. But that doesn't make them a panacea. They are a very sharp double-edged blade. All that said, a couple of tips: * Don't use the instance of \Doctrine\Common\EventManager attached to the EM unless you're doing EntityManager/UoW-related stuff. You can still re-use the class in higher-level code (it's not a bad event manager), just use your own application-level instance that only relies on Doctrine\Common, and knows nothing about in Doctrine\ORM. Or use whatever Symfony has, or steal the EventManager from ZF2, or whatever. * Don't be afraid to emit the same event in multiple places. It seems from your question that you're maybe afraid of this. If you want to know when an individual task is "displayed to the user", then fire some DisplayTask event whenever that happens. Don't get over DRY and try to shove it into $project-&gt;getTasks(). As you noted, just because you're getting tasks doesn't mean you're displaying them! 
I would not tie any generic Doctrine events to any specific domain logic. As you say, the "post-create" event is going to be triggered by background tasks and you'll never know the context in which this event could be triggered. It looks like you're dispatching events in your own ProjectEvents namespace which seems like the right thing to do, so keep doing that. If you have admins editing other people's entities then I'd also explicitly inject both of those in to the events. Again, you have to assume that your events have no idea about the application context: $this-&gt;dispatch(ProjectEvents::USER_PRE_CREATE, $event = new ResourceEvent($project, $owner, $modifyingUser)); Your view-count logic will have to be handled explicitly too and set only to fire in the front-end controller. I see nothing wrong with that: $this-&gt;dispatch(ProjectEvents::VIEW_PROJECT, $event = new ResourceEvent($project, $viewer)); I've also spent a lot of time trying to create applications that write themselves but it always bites you when you stop being explicit in favour of saving yourself a few LOC :) In my own projects these days I use a very simple paradigm. No events, just simple {foo,bar,baz}Manager classes that handle all the logic relating to their various things. At least I know when and where those classes are instantiated and called.
Anything that would throw an exception that you want special logic for
Back to the original request: Here is the 2 use cases for 90% of the PHP out there: Traditional PHP - receive a request from webserver to output html code - process the request - output html back to the webserver to send to the browser Single Page Apps (modern PHP) - receive a request from webserver to output JSON response - process the request - output JSON string back to the webserver to send to the browser Focussing on modern PHP here is some example pseudo code to deal with a JSON request: - read config file, set error log, set class autoloader - authenticate sender (using a CSRF token) - extract request type from $_POST - get session info for current state - initiate object with business logic for this request - call method to deal with this request which returns json response string - free all memory and resources - echo json response string to web server. Now I could just call a function to process the request instead of initiating an object and calling its method, but the latter gives me some advantages especially relating to code organisation, code re-use and testing. Note an object is just an instance of a class, so a class describes what the object is. Now a class is really an encapsulation for a set of related functions and variables. Inside a class a function is called a method and a variable is called an attribute. Using a class definition I can store all logic for a specific business function together. For example, I can have an OrderProcessing class that has methods to retrieve a set of orders, to create an order, to update an order, to delete an order or to retrieve a specific order. The methods could also validate sales tax, apply discount matrix codes and calculate discounts/shipping based on user information and do any number of other logic related to order processing. My code might look like this: $orderObj = new OrderProcessing(); $json_string = $orderObj-&gt;getOrderList(); unset($orderObj); echo $json_string; die; A class can extend another class and inherit all of its methods and attributes so I can build a modular system. So I can have a PaypalPayment class which actually extended the Payment class and had additional attributes and methods related only to Paypal. Likewise I can have a CCPayment class that extended the Payment class and had additional attributes and methods related only to credit cards. Both the CCPayment class and PayPalPayment class also have full access to all the methods defined in the Payment class they extended. So common methods are defined in the Payment class such as markOrderAsPaid(). Likewise PaymentClass may extend BaseClass so common methods used by all classes are defined in BaseClass such as logging, parsing strings or validation etc. A class is self-contained with its attributes and methods clearly defined so i can test all of a single class's methods very easily. I can even add the test methods in the class definition. For example, the PaypalPayment class is the only place I will find any logic related to Paypal and all variables/attributes related to Paypal are in this class definition and defined as private to this class so they cannot be overwritten or corrupted elsewhere. There are many more advantages to OOP which you can google for "OOP vs Procedural". I have skipped lots of detail here such as SOLID principles, public/private/protected, namespaces, traits, singleton patterns etc. and a whole bunch of new jargon and techniques for you to learn. Also fyi, the nature of PHP means OOP programming is a little different to what it would be with c++ because we hand over half the process to the web browser and each time we get a request it is completely new and we have to use sessions to tie requests together. Most of PHP objects dont deal with events or blocking I/O too much (such as waiting for mouse presses or serial comms or PIO) because that is all done in the browser. Therefore in PHP, arguably the biggest advantage of OOP is in code organisation, code re-use and ease of testing. 
Install PHP on Linux, slap a #!/usr/bin/php on top of a .php file and start interacting with local data and APIs and echoing results into the command line. The frontend and server stuff would slow you down.
Anything which can trigger exceptional circumstances that you wish to handle. An example when it comes to databases would be transactional queries: $db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $db-&gt;beginTransaction(); try { $db-&gt;query(....); $db-&gt;query(....); $db-&gt;query(....); $db-&gt;commit(); } catch (\PDOException $e) { $db-&gt;rollBack(); }
It's probably just an issue with a few PHP/MBstring extension versions where this undesirable behaviour was present, so the _strlen function is added in order to ensure 100% compatibility.
&gt; In my own projects these days I use a very simple paradigm. No events, just simple {foo,bar,baz}Manager classes that handle all the logic relating to their various things. At least I know when and where those classes are instantiated and called. I agree. I've been writing various {Foo}Lifecycle type classes to handle transactional things. The Lifecycle classes are the big event-emitters, and peripheral modules listen for those and take care of their own concerns. So far, that's worked very nicely.
To expand on this: don't be shy to ask for additional details on a question. I've had interviewers that were intentionally vague with their questions just to see if I would try to bullshit through an explanation or if I would try to logically find the edge cases of what was asked of me.
I would say that there are two approaches, either you learn enough PHP to get by and do a bit of coding, or you learn PHP to actually know PHP. I know a lot of people that do PHP, quite successfully I might add, without actually understanding anything. They have taught the *how* but not the *why*. If you are interested in the *how* go for codecademy to get an initial feel of the language. After that read through PHP the right way and you should have enough meat on the bones to pick a framework if you desire. If one the other hand you are interested in the *why* I cannot really help you since that is not what PHP is primarily good at. 
Those are more system tools than development ones, though.
grab a php book for beginners. you'll learn in a more structured way - this is important when you are starting. after the book, go to phptherightway website
There's a time to do what you're asked and there's a time to be assertive. Given his position, I think he's smart enough to know it's not the time to be assertive. We all need bumps in the road like this to truly understand why you must be assertive later in your career. Writing a network in procedural Perl will be a good lesson for him.
Completely disagree that phptherightway is a good place to *start*. It does not teach you anything about the core language; you need to be fairly well-versed in PHP to even make sense of that site.
Somewhat relevant [Error Handling](http://blog.ircmaxell.com/2011/08/error-handling-in-php.html)
Some of them are, but many of them aren't. Them being system tools don't really matter, they do aid development. Some (like grep and tail) directly, some help in other ways. Tail is a great example really, I always have some terminal(s) open with tail tailing logs while working so I can keep an eye on any problems in changes I'm making. Anyway, I never did really properly reply, composer is a PHP script, and git is a tool that's not part of the OS so falls out out the bounds of what I was originally talking about. I don't have any sort of problem with people using Windows for development of PHP, it's their prerogative, but I just find it a little bit comical that most people who do that tend to spend some amount of time making it have some of the functionality that Linux has out of the box; because it's great for development.
Just use promises, waaait a minute where am I?
Wait, casting happens in a loosely typed language? Shut the front door!
Well, if you don't understand the rules of the language you are using, it is your problem, not the language's problem. So, to clear it up: &lt;?php //$a = 'string'; $b = 0; $d = (($c = true) and false); $a = (string) 'string'; $b = (int) 0; $c = (bool) true; $d = (bool) false; &gt; `$a == true` This statement evaluates to `true` because you are using the equal operator which checks for equality **after type juggling**. Any non-empty string when converted to a (bool) is `true` &gt; $b == false `(int) 0` is equal to `(bool) false`. This is true in many languages, not just PHP. (C, C++) &gt; $a == $b When presented with a comparison which requires type juggling, PHP will always favor string to int conversion if one of the operands is a int. Therefore, `$a` (which value is `(string) 'string'`) will be converted to `(int) 0` since no valid number exists and `(int) 0 == (int) 0` which evaluates to true. &gt; 33 != 033 `033` is an octal literal (which also exists in many other languages such as C, C++ and Java). So `033` is really `27`. Therefore `(int) 33 != (int) 27` evaluates to `true`. [Octal literal in Java](http://ideone.com/sZuxFO) &gt; 33 == '033' When type juggling from string, octals are not taken into account, [as per the documentation](http://www.php.net/manual/en/language.types.string.php#language.types.string.conversion). `(int) 33 == (int) 33` is `true`. &gt; ((0.7 + 0.1) != 0.8) These are `floats` and this statement evaluates to true in any language where those literals are treated as doubles. (C#, C, C++, Javascript, the list goes on). Learn your [IEEE 754 standard](http://grouper.ieee.org/groups/754/). Using the IEEE 754 standard, `0.7 + 0.1` actually evaluates to `0.7999...`. [Same behavior in C#](http://ideone.com/gYujV2). [Same behavior in Java](http://ideone.com/UerRm6) &gt; (((0.7 + 0.1) != 0.8)&amp;&amp; $c) `((0.7 + 0.1) != 0.8)` evaluates to `true` as seen above. `$c` is true, therefore `true == true` is `true`. --- So, other than the weird type juggling occurring (however totally on spec) with `$a == $b`, all the other situations are stuff that also occurs in other languages and are just the result of you not understanding the rules of the language. 
Running npm directly in windows is fine. The issue I mentioned only happen when you try to install via npm on a folder shared from windows. So npm is not able to identify it as windows filesystem, because it is running in a linux environment (virtual machine's). When you run npm on windows directly, it is able to identify the filesystem as that of windows and works accordingly. Install node via the .msi file from node.js site. Once you install it you will have npm and node in your path. 
Try catch is used to handle certain exceptions (e.g. errors) that may be triggered by a block of code without altering the logical flow of the program. 
Pet peave of mine, seeing an explicit rollback in a catch block where the try block is queries. MySQL will automatically roll back when there is a query error. [Manual](http://dev.mysql.com/doc/refman/5.5/en/commit.html): &gt; Rolling back can be a slow operation that may occur implicitly without the user having explicitly asked for it (for example, when an error occurs). You should only need to call `$db-&gt;rollback()` if your business logic says you need to. 
My pet peeve is the phrase "business logic". What if it's not for business?
Do we know how Richard is now? My google fu didn't show anything past his own blog posts.
No worries about that. My main career goal is to always have a job that I enjoy and am passionate about. So far I am succeeding in that. Definitely not money motivated, but I am currently feeling like I am not learning as much as I could be and a job change may be coming up - can't hurt to also aim towards more money. My current job I took a pay cut for - I wanted the experience, which my old job was no longer providing.
could you elaborate on your manager classes? If you're doing a lot of your domain logic in those types of classes, it seems like the manager's dependencies could get out of hand quickly. 
Yeah I had this problem when setting up nginx with unix sockets and I figured sockets would be smarter, but they are a massive pain in the arse. Permissions and ownership for the socket can be tricky, and I noticed that at scale (100 test "users" messing with our API) they would start to randomly drop off. I know it sounds like passing a request through a file would be quicker than maing another HTTP request but... I found it to be a trivial difference in speed with a massive boost to concurrent users. It was about a year ago and I've forgotten everything since, thats just there as some anecdotal advice.
Interesting that you found it to be a trivial difference. I guess I will continue using TCP then, because honestly going through a problem every time I have to make an update or the server receives mass traffic (I read other testimonies saying that at around 200 users the server stopped responding well) is not worth the gains. Thank you
&gt; for larger web apps using LAMP and specifically PHP, you should use OOP as supported in PHP version 5**.3** and above. PHP lacked support for namespaces before 5.3. Any self-respecting PHP developer should be using at least PHP 5.3. 
This happened to me a week or two ago. Tried to see if it was permissions and everything seemed okay but end result was tcp...
&gt; Could someone either give an example or a link to examples of real-world applications of an object-oriented structure? The short answer is no. The reason examples tend to be abstract is that actual concrete examples are really large. That's kind of the point. Concepts like OOP and related ideas (Frameworks, ORMs, MVC, etc) only really come into their own as you scale up. For a single or few entity types in a simple page, the benefit is minimal or not visible at all. The analogy I like to use to compare procedural vs object code is imagine you want to make cars. More particularly, you want to build a robot to make cars. The procedural way is to do exactly that. Make a robot that welds stuff onto a chassis, adds wheels, tires, engine, etc. As you can imagine, the stuff the robot has to do is going to be very complicated. It can be done. You will get a large and complex robot, doing a large and complicated thing. The OOP way is to look at each task the robot needs to do, and make a series of smaller robots to do it. A robot for putting wheels on, a robot for doors, the alternator robot. At a glance it's much more complicated, there are *so many robots*. But the benefits become quickly clear, especially if things go wrong or change. Every couple of cars, the door gets put on backwards. In the OOP factory, you go right over to the DoorBot. In the procedural bot you have to go through tons of electrics and hydraulics to even get to the right bit. Similarly, in the OOP factory, adding a Coupe style to the line means a minor change to DoorBot and BodyBot. The other systems don't care. This principle is called "Separation of Concerns". The basic response comes down to this: &gt; However, I still haven't wrapped my head around the purpose of object oriented design in a PHP page. When there's "a page" there isn't. But if you're looking at complex systems with lots of different actions, then there is huge benefit to OOP.
Do you experience something different now, for example in terms of performance?
I can't help but be disappointed that it's not open source in some form, as it could be a great tool for seeing how Firebird can be used in a common context. 
A simple case where try/catch is usually needed, is when working with libraries or code someone else has written. That way, if the author's code throws exceptions (due to errors on my part or the end user), I can manage those potential issues in my code. Please, try to avoid programming by throwing errors. It's unfortunately very easy for programmers to start using try/catch/finally as weird if/else statements to drive application execution. tl;dr: Wrap stuff which is likely to toss errors, but use typical validation on results to control application flow.
I noticed the problem with high loads while using sockets, lots of connections would get dropped. So I think it's better to stay with TCP connections for busy applications/sites.
The mbstring extension contains an anti-feature that allows you to "overload" the normal string functions with their mbstring equivalents. And if you're wondering: Yes, this feature is about as stupid as it sounds. I assume that it'll be deprecated sometime "soon".
502 Bad Gateway could mean anything, you'll want to look closer at the PHP, FPM, and nginx log files for specific errors
&gt; the other two could go through and leave you with a screwed up database. In this case, the exception indicating the error would be thrown, and hence the other 2 would not actually be ran. Problem solved. &gt; but if you want to use that database connection again you're going to have to cancel the transaction. MySQL will do that for you automatically **on error**. If you want to cancel because of business logic, then you need to explicitly do that. try { $db-&gt;beginTransaction(); $db-&gt;query("query1"); $db-&gt;query("query2"); $db-&gt;query("query3"); $db-&gt;commit(); } catch (PDOException $e) {} $db-&gt;query("query4"); Query4 will **always** be run in a separate transaction from 1, 2 and 3. Even if 1, 2 or 3 fails. MySQL makes that promise for you.
This is a good overall course for PHP: http://phpbridge.org/intro-to-php/ edit: covers OOP, namespacing, etc
&gt; Also recommend avoiding mysqli, as its a dated procedural way to code MySQLi has a perfectly capable object API. The reason most recommend using PDO instead, is that MySQLi's prepared statement API is a mess of references and bad design decisions. It has nothing to do with procedural or not.
Yes, but since he's trying to talk to PHP (on that machine) from Nginx (from that machine) that's perfectly fine.
I'm not sure you are correct about that, because that does not seem to be the case for me. I just tried this with a script I have for deleting a user. It deletes a user from many tables inside a transaction in a try/catch block, and if it catches a PDOException, it calls an explicit rollback. I have a test case that inserts a non-existent table into the table list, causing a mysql error, and an exception. I commented out the explicit rollback, then checking my test cases that tested whether the deletion had rolled back. Removing the explicit rollback broke the test case. Even though a commit had not called, the error did not seem to trigger an automatic rollback, and, when looking for the data reusing the same connection, it seemed to be missing. When I tried to use a separate connection, the test locked up altogether. It may be relevant that (for my test cases only) have innodb_flush_log_at_trx_commit = 2.
&gt; MySQL makes that promise for you. But I don't see where **PDO** makes that promise for you (unless your exception causes the script to terminate), and as far as I'm aware no other database will automatically end a transaction block on error and process the rest of the queries within the block (being that the promise transactions make is "all or none" not "well, some of these looked ok"). My pet peeve: people using PDO and still tying themselves to a single database.
Did not see Symfony2 in article. I suppose everything is okay there.
Well... It's not just here, and it's more than a buzzword when used correctly. To be fair I'm not sure it *was* used correctly in this instance. (Further, I'd be careful even taking his advice about not using rollback(), but I'm not confident about that opinion) I've understood the term to mean the real-world implications (rules, processes, workflows) that affect your application. For example if you are setting up a hotel reservation system you would need to ensure that no room has two bookings at the same time. You also need to ensure the room is ready for the guest to use. So, it's the logic pertaining to the business (read: real-world activities) of your application, as opposed to the logic that handles things like running queries, establishing connections, and generally doing the things that make that business logic possible.
Some tips: - Check the logs for php-fpm/nginx - Nginx prefixes sockets with `unix:/path` in the config - Make sure the directory for the socket exists (Ubuntu shipped with /var/run/php-fpm/*.sock for a little while, but /var/run/php-fpm didn't exist). - Try setting the socket owner (in php-fpm) to the same as the webserver user (nginx). I've read that sockets are slightly faster than TCP, but it's not worth losing sleep over.
He comes across a little too aggressive but he's not wrong. You really should point out any shortcomings in any plan you get. It's your job. If they just wanted a code jockey they could outsource it and get exactly what they ask for. However, you do have to pick your battles. Express and document your objections. Provide specific details and solution. If you are still told to do shitty thing it's not because you didn't provide a better option. Making a big fight or rolling over are both not in your best interest.
http://stackoverflow.com/questions/23443398/nginx-error-connect-to-php5-fpm-sock-failed-13-permission-denied
I had to go through this just yesterday. I managed to fix it by going into /etc/php5/fpm/pool.d/www.conf, uncommenting listen.mode and setting it as 0666. [Here's the StackOverflow I found useful](http://stackoverflow.com/questions/23443398/nginx-error-connect-to-php5-fpm-sock-failed-13-permission-denied).
Doctrine is also vulnerable to the same issue, as they do not do any form of identifier escaping whatsoever. In fact, they argue against it as part of their best practices: &gt; Identifier quoting is a workaround for using reserved words that often causes problems in edge cases. Do not use identifier quoting and avoid using reserved words as table or column names. https://doctrine-orm.readthedocs.org/en/latest/reference/best-practices.html?highlight=identifier This is not likely to be remedied either, for reasons explained here: http://www.doctrine-project.org/2014/02/21/security_in_doctrine.html Doctrine is also the default ORM for Symfony, for those curious if this affects that framework.
I wrote a post looking at the difference between OpenCart and Magento on a pretty basic level, and I ultimately think between those two and really you can throw WooCommerce into the mix, choosing comes down to what the store owner is looking for. WooCommerce is the most convenient if you're a WordPress user and the transition is fairly easy with the background knowledge you should already have. In my post about Magento/OpenCart, I ultimately said smaller businesses that don’t need the level of customizability or the advanced features of Magento, OpenCart is probably the better choice. It is lightweight, fast, easy to install and more than capable of supporting a moderately sized product lineup and user base. For larger businesses and enterprise online retailers, Magento’s configurability and advanced features make it the superior platform. If you want to see my whole post, you can check it out here. http://www.wiredtree.com/blog/opencart-vs-magento-which-ecommerce-platform-is-right-for-you/
&gt; My pet peeve: people using PDO and still tying themselves to a single database. My pet peeve: people who think that using PDO makes their code portable across multiple databases. The API is the same. That's it. The rest of the code and logic and SQL needs to be changed specifically for each RDBMS. Sure, the functionality I'm describing is MySQL specific, but I said that from the first post. So...
As indicated [in the manual](http://dev.mysql.com/doc/refman/5.1/en/innodb-error-handling.html), the rollback occurs when innodb encounters an error. A non-existant table is not an error that innodb can handle, as it occurs higher in the engine. However, non-existant tables is an error that you should literally *never* throw anyway. So relying on that behavior there is a problem. Instead, the errors you're likely to see with this sort of thing (constraint violation, deadlock, etc) *do* cause a rollback implicitly.
&gt;MySQL will automatically roll back when there is a query error. I see nothing indicating that the database OP spoke of is MySQL. 
It might help to give a framework a try. My experience has been the more I work with MVC/OO the more I understand it. Yeah. Earth shattering realization. Laravel might be good. It's fairly small but would show you some basic concepts of OO and MVC. Actually, I can give you decent example. I'm currently working on a project. At one level we have a some high-level classes. Lets work with vehicles for the example. We have classes for: * Trucks * Sedans * Hatchbacks * Coupes They contain base level functionality that most vehicles of that type will have. Then, we create classes that **extend** the base class. * Ford Trucks extends Trucks * Ford Sedans extend Sedans * Ford Hatchbacks extend Hatchbacks You can overload (overwrite) the methods that are in the parent class to add custom functionality that only pertains to Ford Sedans, for example.
Not all errors. As the manual says, a duplicate key error or a row too long error rolls back just a statement, not the entire transaction. I'd rather handle both the errors i'm likely to see and those I'm less likely to see. It seems to me that the explicit rollback is, at worst, harmless, and may in fact be beneficial in cases where you hit errors of a type you do not expect. If you don't do the explicit rollback, you don't know the state of the database after the catch--depending on the type of error, the statement might have rolled back, or the whole transaction. Better to call rollback, and know for sure.
This is correct
Just FYI, Wordpress is a web application made with PHP. Picture Wordpress as a house, as PHP as the materials used to build said house.
[Evan Priestley](https://github.com/epriestley) main developer for [Phabricator](http://phabricator.org/). Which might not look like a lot but check out the php behind it's main components: https://github.com/facebook/libphutil https://github.com/facebook/arcanist https://github.com/facebook/phabricator
Have had this argument with you before, it's all in how you use them. Service location is something you *do*. If you want to use Pimple as a service locator, you can. But just because you CAN use it as a service locator, doesn't mean it *is* a service locator.
Do some more research. You may even be able to find something closer to your intended goal to reduce upfront work. The first thing you should do is probably write down a list of functionality you want the website to be able to perform. Then research different tools (Wordpress, Concrete5, etc..) and determine which you think would best fit your intended goal and go from there.
Don't set the mode to 0666... that gives everyone with shell access to your system the ability to trigger execution as the www-data (or equivalent) user. Get ownership/groups right then set the socket to 0600.
Just wondering, but is there any significant difference performance wise in using TCP vs unix?
Also remember that sockets are bound to sysctl limitations. In /etc/sysctl.conf you will find settings that limit how many concurrent connections a single socket can have.
I agree wholeheartedly, but if best practices were followed universally the world would be a much happier place. It would not surprise me if that vast majority of developers were unaware that simply using PDO did not immediately solve all of their problems with SQL injection. Anything that touches an SQL string from the outside should be treated as a potential vulnerability and untrusted.
Well it does if you only accept user supplied values and use prepared statements.
Even then one can exploit misconfigured character encoding settings on the connection to pass arbitrary SQL through prepared values: http://stackoverflow.com/a/12202218
That is DailyWTF worthy.
On Ubuntu 14.04 sockets are giving me an issue and I recently figured out that sometimes errors will jack the service and restarting php fixes it and then when I run the webpage again I'll see that there was a fatal error. This must be some kind of nasty bug but I'm still figuring it out.
Based on the OP's question I don't think he's ready to be making architectual decisions, and considering it's a summer internship, it's cheaper than outsourcing. I also don't think it's rolling over. It's more about understanding the terrain before being assertive. You don't even know if you're in over your head or not at the beginning stage, which OP is at. That being said, procedural code is not an invalid approach and neither is writing unit tests afterwards. If the boss feels that there is not enough time for the intern to complete the task if unit testing is included, then he may rather want him to get the project done while they have them. Who knows what the reasons are, the boss may have the intern working on a prototype.
Aren't you verifying that your code works with caching enabled, debugging off, and profiling disabled *before* you push your code up to CI/staging/UAT? That'd be a hella waste of cycles to hand that off and have it fail because of aggressive caching you could have checked with a test run in your local env. Sounds familiar (http://blog.codinghorror.com/the-works-on-my-machine-certification-program/)... It's not 'dressing it up', its drawing a clear line between environment and resources. We have abstracted away the actual resources(memory/disk/network) from the environment(OS/libraries/dependencies/variables), so now, the only differences between dev and prod is how much memory/cpu/disk/network you feed the VM's/containers that run on them. Everything else is identical. Yes, you can configure your dev environment to have debugging enabled, but you can just as easily shut that off and have an environment that is environmentally identical in every way shape and form to what lives on production. Is it an exact replica? No, but you manage to eliminate almost all of the 'works on my machine' issues that are so common as to be a meme. So, next time some date/time stamp issue happens because your dev environment's timezone is set to your local time and the server is set to UTC, or somebody has upgraded curl on prod, but never used the php version of it until now, just remember that those issues are a solved problem.
If you want any kind of real search and don't want to hack the crap out of WordPress, you should be building a custom application. Also, if you are asking this question you may not be equipped to create this solution by yourself.
What sorcery is this??
I do this, too. It is easier to build on top on because it promotes loose coupling. Disabling or adding auxiliary cost little to no headaches.
http://i.imgur.com/GRHqGC4.png
Redis is persistent. Memcached is not. That means, something goes wrong with your memcached server, and you lose all cache. You'll have to warm them up again. I think it was the cause for a few reddit outage. Redis has more than just strings (lists, sets, sorted sets, etc.). Redis can be used like memcached. Memcached can't be used like Redis (because memcached doesn't have the other types of data) I think memcached is a little bit faster than Redis - but a lot of people will tell you otherwise. Honestly, the speed difference is pretty little, and I'll take it any day for the persistence. Redis Cluster is in beta. I personally never tried it but will try it pretty soon. My vote goes for Redis. 
We were hit with this recently. We didn't have speed issues, but we did run out of available inodes and were unable to create any more files on disk until we cleaned the directory.
Two errors that won't trigger the rollback automatically: * Having strict mode enabled and trying to insert a string with a non-utf8 char in it, into a UTF8 column. That insert will error, but won't trigger an automatica rollback. * Sending an oversize string larger than max_allowed_packet will not hit the server, and so won't rollback the transaction. I think there are other cases as well, e.g. invalid foreign keys, dropped packets, unique constraint violations, which are all errors, but don't trigger a rollback. Always manually calling the rollback is definitely safer.
This is a straight-up developer problem; not a framework (or db vendor) problem. As far as I'm concerned, those that opted to update their docs to be more explicit about not using user input in these places did the only right thing here. I mean, why would you ever expose *db identifiers* directly to an end user? That's just a horrible idea for all kinds of reasons, even disregarding potential SQL injection.
You're probably missing the Windows SDK.
I don't have experience with memcache, but redis is just an awesome tool, in and of itself. 
It *is* a framework problem, in that they are providing a query builder which lies about its interface. It tells you that everything will be safe, since you're not building the SQL, but the builder is. That's the contract. That's why (one reason at least) you use a builder instead of writing it yourself. It's an education and a contract problem. If a method is unsafe, the framework/library should either enforce it (white-list) or make the user understand that it's not safe. But to say it's completely a developer problem is only a narrow view of what's happening.
Hey everyone, Thanks for the overwhelming level of responses. I've decided to go ahead by learning using the PHPAcademy and CodeAcademy courses on PHP. Once I've gotten the core fundamentals down I plan to work on a few small projects as well as some wordpress work. Then learn a framework and then continue to learn form there. One thing I wanted to ask was - it is often said that by teaching others what you learn, your own understanding and knowledge improves. Do you think it is a bad idea for me to make youtube tutorial videos on what I learn? So eg. say I learn variables, to make a video where I explain and teach this myself? Thanks everyone!
That's a very narrow view of the problem; considering these frameworks are supposed to make the developers' jobs easier, they will often make assumptions that lead to security holes because the framework promotes that it is inherently secure. If more developers understood the full ramifications of SQL queries they wouldn't likely utilize a ORM that abstracted it away in the first place.
He's got Visual Studio though, it includes the SDK.
Is PDO::quote() an issue in regard to this? https://php.net/manual/en/pdo.quote.php
Generally i much prefer Redis. I find it more flexible and it has a very shallow learning curve. We benchmarked it for our website cache and found it faster. I must admit though I never really looked into memcache that much, so I'm a little bias. I've once used Redis across 4 servers, with 8 instances running (2 on each). 4 masters 4 slaves. I can't remember how much memory this cluster had exactly, but it was in the hundreds of Gb. Sharding was done in the client side. We had 40 million products, and the idea was to publish our data straight into the cache. I left just before it went live but from what I understand it worked well. We use Redis again at my current job, mostly as a job queue. We don't need it yet, but when we do we'll use it for the website cache too. I'm quite exciting for the clustering support maturing so I can have a play. 
A couple years ago I compiled a custom build on Win7 for PHP 5.4 using [this guide](http://bobobobo.wordpress.com/2008/05/27/how-to-compile-php/), there were only a few minor hiccups and I was able to do everything in about 30 mins. Maybe that will help, though I'm worried the build process may have changed too much since then.
Keep in mind, Redis persistence does not guarantee you will have all the data that was in memory at the time of an unexpected shut down. Better than nothing, absolutely, but I've seen some people confuse it with the durability of a database. I don't want the OP to have to learn that the hard way :-) Some good info on the topic: (http://oldblog.antirez.com/post/redis-persistence-demystified.html) (http://www.slideshare.net/eugef/redis-persistence-in-practice-1) That being said, most of the time I'd go with Redis. Having used in Memcached for about 4 years before switching to Redis about a year ago, the immediate difference is the ability to have built data structures, configurable persistence to eliminate (or minimize) cache warming, and lot of options to fine tune it. Memcached is a fantastic product that is very simple. If you just need very simple key/value storage and cache warming is not a big deal, Memcached may be easier for you to get set up and running.
Another note from my experience of switching memcached to Redis. Redis was so useful with all the structures available, we started storing a lot more stuff in it and expanded the memory in the cache servers because of that. We were filling it up so quick, it became a problem! Ha, guess the software was just too useful. The hardware changes were absolutely worth it, so no-harm-no-foul in the long run.
Honestly, I'm not even sure you would need that cluster for that job.... The redis stuff can handle a TON before needing to think about clustering...
But the site does not teach any actual PHP. &gt; The site starts with how to install php OK, good. A new user needs to get the tools together. &gt; introduces you to coding standards How can a coding standard possibly be useful if you don't know any code? &gt; explains functional and OO programming Again, useless unless you've actually learnt the basics. Where is the bit that tells you what a variable is, or how to actually write a function? At this point in the document there has not been a single letter of PHP code. Sorry but if you think someone can learn PHP from scratch using this site you are utterly deluded. 
Symfony2 doesn't have a database component...
C:\Program Files (x86)\Microsoft SDKs\Windows ive got these directories: v7.0A, v7.1A, v8.0, v8.0A, v8.1, v8.1A 
For a really good start-to-finish tutorial, I'd recommend http://phpbridge.org/ which was put together by the wonderful ladies of http://phpwomen.org/
Did you install the deps package? Try the writeup I did a while back - http://www.sitepoint.com/compiling-php-from-source-on-windows/
Glad to hear it. Being *also* motivated by money isn't necessarily bad. And there's plenty of that in the programming business. Not sure about all the different sub-fields, but web development is definitely in very high demand.
I remember by thinking "Puff-pet" even though it isn't pronounced that way.
It wasn't for throughput, it was because we needed more space in RAM than one server could provide. Our one instance now is very busy, but keeps up alright. 
I would love to go through this but its a long discussion and again, I emphasize, nothing to do with PHP. Its a 90s argument - Why is OOP better than Procedural? - and OOP won the argument. Now OOP is the norm. Your best thing to do is to research this argument and read a bunch of the articles about it. As OOP won the day I would suggest you pay more attention to the "OOP is better because...." than the "Procedural is just as good because..." items. Heres me helping you with this research: http://lmgtfy.com/?q=OOP%20vs%20procedural http://lmgtfy.com/?q=why%20is%20OOP%20better%20than%20procedural 
It is typically used with Doctrine, and much of it's documentation is geared towards using Doctrine with Symfony.
Daniel Lowrey is also responsible for the new (and very cool) PHP 5.6 TLS/SSL updates: https://wiki.php.net/rfc/tls-peer-verification https://wiki.php.net/rfc/improved-tls-defaults
I tried your tutorial, but I am stuck on nmake as I get an error. I wasnt able to run the setenv command due to not having it. C:\php-dev\php-5.4.28-src&gt;nmake Microsoft (R) Program Maintenance Utility Version 10.00.30319.01 Copyright (C) Microsoft Corporation. All rights reserved. Recreating build dirs bison.exe --output=Zend/zend_ini_parser.c -v -d -p ini_ Zend/zend_ini_pa rser.y c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\BIN\bison.exe: cannot ope n file `c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC/share/bison/m4sug ar/m4sugar.m4': No such file or directory NMAKE : fatal error U1077: '"c:\Program Files (x86)\Microsoft Visual Studio 10.0 \VC\BIN\bison.exe"' : return code '0x1' Stop. C:\php-dev\php-5.4.28-src&gt;
Posting on here as well as on the blog, as I'm interested in what you folks think. -- I feel like my blog post was linked to out of context in that article. &gt; Starting with a framework leaves you tribal. Not really. Only ever using one framework and ignoring all other frameworks, never using them and refusing to work with them leaves you in the "tribal war" state my blog post was talking about. Just before it you said: &gt; I can see the appeal. And yet, I believe that being framework specific is a serious disadvantage to any professional developer. In the long run sure, being tied to only one thing forever doesn't work out so well, but not for a beginner. For a beginner it can offer a serious head-start for them to hit their goals, without overloading them with a huge amount of information. They might need that information eventually, but night right at away and not all at once. Furthermore, they might not even actually care. I've said before: &gt; “Beginners should not use frameworks” is idealistic tripe. Not everyone wants to be a world class programmer, some just wanna ship. :) https://twitter.com/philsturgeon/status/422829649652383745 There is no single rule. It depends on the person, their skills and their interests and what sort of thing they're building. This article also seems to assume that the main reason somebody would have for changing a framework is popularity and not... you know... it's specific strengths, weaknesses and target demographic.
I guess when you say "learn php" you mean "learn programming," then yes I agree. It is possible for someone to want to learn a language and already know how to program somewhat - for instance, someone with an education where classes were taught primarily in java or c++ may wish to learn php. If you understand basic programming concepts and need to learn php, you can totally learn php from this site and the things it links to. I don't think we disagree, I think we just had different assumptions about what the requisite resource is supposed to do. Php the right way is a great place to learn php, but not the best place to start leaning how to code in general.
I don't mean to be an arse here but if you can't solve something the employer considers "standard stuff" on your own then you're probably not ready for the job yet. Keep on studying! Here is a starting point http://www.codeofaninja.com/2013/05/crud-with-php-jquery.html
Overengineering at its finest.
The PHP-FIG definitely started the new PHP revolution if you ask me!
Redis for persistence, which is nice for sessions.
ah, fair enough :) I was used to the AWS 17GB instances.... didnt think about space
We have been mainly using Memcached but are looking into using Redis for the persistence. 
Frameworks should never, *ever* advertise themselves as "inherently secure", because it's false in 100% of cases. Security has always been, and always will be a collaboration between a developer and her tools. Also, the premise that developers use ORMs to offset their inferiority with SQL is complete nonsense. ORMs increase productivity and maintainability. I know two different SQL vendor dialects inside and out, and I still use ORMs every day.
&gt; or make the user understand that it's not safe. You're actually agreeing with me here. It's the framework's responsibility to make known to the developer how it functions, what's safe and what isn't, etc. That's why I think Cake and CI made the right decision by updating their docs instead of trying to idiot-proof their code. Of course it's the framework's problem that their docs didn't make it known that this was unsafe. I didn't mean to imply otherwise.
I never said it was inferior to utilize an ORM, as I do so readily in my own projects. I meant it more in that a lot of ORM libraries include a query building facility that abstracts away the creation of the underlying SQL, and in my experience a lot of junior developers fail to understand the type of SQL the ORM generates and its performance/security ramifications. This can be particularly bad when it comes to subqueries and complex joins where they try to shoehorn an ActiveRecord style ORM to do things a few lines of plain SQL could do. I should have expounded more clearly on that, my apologies.
A lot of smart people did a lot of smart things. Without composer I don't think many people would be using PSR-0 and they'd all still be building CodeIgniter Sparks, Fuel Cells, Laravel Bundles, Zend Modules, etc and we'd all be ignoring each other and fighting each other like we were before. :)
Lol these boxes where something like 256Gb RAM each. As I said, I was storing a lot of data. 
Seems more like a complete lack of engineering...
Well, on that we agree then. However, just as with the N+1 problem, this is still the developer's fault *provided that the framework documents the behavior properly*. Updating the docs like CI/Cake did was the right thing to do. If developers fall victim to it with adequate documentation warning them of this, that's completely on them.
Where can i go to and learn how to use and apply redis to projects?
holy crap 0.o
A little bit of performance gain, apparently
I pretty strongly agree with the comments here. Programming is the art of figuring shit out, so... figure it out. Unlike a vast majority of problems, there is a mountain of writing on all the topics you're asking about. The problem with your question is that you don't need a starting point to start working on this program; you need a starting point for web coding. * get and install a web server on your coding machine. Apache is probably the most / best documented. * get and install PHP * create your web root directory * populate it with code There are lots of folks that'll tell you that you should use this framework or that. I pretty much disagree at this point in your coding experience. Start with raw PHP and learn the (many) caveats of PHP and the entire constellation of computer science quandaries that swirl around coding fir the web. I do, however, suggest UI frameworks, though. They'll allow you to focus on the meat, while having a professional looking presentation. Zurb's Foundation is nice. Flat UI is also smexy. Hope this helped. (Later, you can worry about Vagrant, composer, laravel, et al.)
memcache &gt; redis for everything i have tested so far, not by far or anything, but significantly especialy if you use IgBinary i tested it with 2-10 instances on different servers in the same local network, never tested it with a single instance. i have read quite some benchmarks who contradict this experience, and also some who support ist, so IF you have the time, you should test it yourself or use a wrapper class to bundle whatever you want to do and hide redis or memcache behind it so you can change it at any time. from my point of view though there is no reason not to use redis if you have a benefit of its persistence.
Framework Interoperability Group.. probably just a coincidence.
I'm pretty sure this option is viable if you're not expecting an error. Otherwise you shouldn't use it for all of those reasons.
Less and less so. There are a few holdouts, but most folks are at least playing ball these days instead of just bitching about which one made the "bestest thingy evar".
Are you using the Windows SDK command-prompt?
Any clue about Propel?
Here you go: Steps - install XAMPP or MAMP so you have a dev environment - run phpmyadmin and setup your database with a table for the list items - learn from this: http://mlitzinger.com/tutorials/simple-to-do-list/ - change the mysql_xxx calls to pdo_xxx equivalent That should help. 
&gt; I don't mean to be an arse here but if.... I don't mean to be an arse here but I feel if.... FTFY Learnt from years of counselling. You can't be an arse for feeling some way. Its just your feelings after all. :-) 
"A car or a porsche, which one is more suitable to driving places?"
The thing you want to try and the thing you want to catch!
You should set it to 0600 (since both nginx and fpm are usually running as the same user), but 0660 will work with 95% of the distros out there. There should never be a need for the permissions to be set to 0666.
just sha1 the epoch with miliseconds and be done with it, it baffles me how some people want to make things way harder than they are
I usually abstract table fields away from database fields, so that the table field specifies an orderBy clause that will logically return results ordered the way the user expects it (though with the default being one database field). In that way, the user-supplied sort field becomes an array index to the properties, and an invalid field is simply ignored. 
That birthday problem.
Nicely put.
Whilst this is all kinds of wrong, if I was to "fix" it without any changes to ZendServer: * Maybe put this directory onto a RAM drive/tmpfs * Run a task cron/at to clean out files older than X number of hours/days. Still, it's an awesome #facepalm
&gt; Its not there to alleviate developers from testing at all. This is why internet discussions are shit. Who the hell ever suggested that? &gt;Its not a matter of tuning it to the environment, its a matter of surfacing the bugs that you will encounter when you move code from one environment to a very similar, yet slightly different environment. Very similar yet slightly different are just arbitrary concepts. PHP 5.3.3 is very similar yet slightly different from php 5.3.4. You're argument is lacking backbone. &gt;When I write a api consumer that then populates a worker queue, which then interacts with some other piece of software, I can replicate that whole thing locally. But ... why??? This is integration testing, it doesn't belong at the dev level. The more complicated you make your dev environment the more difficult you make it to debug. Is it your code that's causing the issue? Or perhaps the message queueing, which is something you wouldn't expect every developer to know their way around. If you discover a problem in prod/staging/uat then you can bring the component into dev to debug, but otherwise, it's vastly easier to work on small components than the entire system at once.
mmm I don't know. I think that any person that is going to develop a career in software development sooner or later is going to figure out the correct path. I started web development like 3 year ago and using a framework. In a couple of months I knew that I needed to learn the foundations of the language. That was with php. Happen the same with rails, built a few apps using rails without knowing ruby and the apps still are functional. But later I wanted to build more sophisticated things for own projects (like the typical own mini-mvc) and of course I notice that I needed to learn ruby more deeply. My point is that any professional software developer is going to find the right path eventually, that is why I don't like to see senior programmers babysitting their communities all the time, and fighting each other for what is correct or not. As if we the new developers were stupid and couldn't found a definition of a pattern in a book or figure out by ourselves that it's always good to learn the foundations. Sorry if my english sucks.
When you write or die, you are expecting an error.
But in the case of Laravel, it kind of looks like a bug. The whole point of defining protected fields in the `$guarded` property is that they cannot be set through mass assignment/input. Yet it is possible for you to submit a `$_POST` key that bypasses this protection mechanism (at least that's what I got out of the example for Laravel). Thus the bug should be addressed. In general, it's better practice to whitelist than to blacklist, so in that sense, the lazy use of `$guarded` instead of `$fillable` is indeed a developer problem. But `$guarded` should in fact do what it says its supposed to do. That said, I don't know if there is a difference between shoving `$_POST` into a model, vs `Input::all()`. I would hope that `Input::all()` does some basic key scrubbing to encode or strip out quotes or other characters that have absolutely no business inside of a key string. If it does, then there's no need to protect dumb developers from bad ideas like using `$_POST` directly. Will have to dig into the Input class to see what kind of scrubbing is going on.
you will see it yourself if you use it, like what i did recently basically since dual boot is overkill for me, I want unix environtment in my win OS for development and production test, using vagrant as desktopless virtual machine
try/catch is also a useful place to put error logging. Often in projects I'll wrap any database writes in try catch statements and if the catch is hit, write the error details and any relevant data to a log table to help you debug any issues which may arise. Same applies for anything else you're worried may fail and want insight into why and how frequently its happening. Only problem with this is if the catch is hit because the database has fallen over, you wont get your log table write. However, if your database has completely fallen over, then not writing that to a log is the least of your worries ;)
There hasn't been any discussion about it in the mailing list in the last months, so you can probably consider it as "frozen". And I don't expect it to come back soon since there's a lot going on right now with the 64 bit thing and phpng. However who knows: they are starting to discuss what's going to be in PHP6, so maybe someone will bring that up and it will continue where it left off.
&gt;138 bugs that were fixed between 5.3.4 and 5.3.3 What I mean by no substance is that I hear this, but I never actually see it being a problem in the real world. I've been running 5.3.3 in prod for the last few years and whatever random version my OS installs on dev (up to 5.5.something) and I've only come across 2 or 3 issues the entire time. Do you have some evidence, or case studies that show locking down every dev onto a VM instance saves any time or effort? &gt;is actually reducing the overall complexity of the system How can you say adding every component needed in a prod environment to dev reduces complexity? Integration testing is about testing interoperability between individual components in a system, why would you need the whole system to just develop one component? &gt;I would equally expect them to get data from a REST interface I think you miss the point, you're talking about setting up an actual MQ system in your dev environment. It's not interfacing with the API, it's the complexity added by introducing another functional component that may break or introduce errors. &gt; If they have the whole infrastructure in their dev environments, they could even run a simian army container and have it trash services at random Why on earth would you make infrastructure testing part of your web application development??? The simian tools are designed to test the actual production environment. Using them to test dev would be of no use at all.
One thing noone mentioned: [Memcached will evict non-expired items.](https://code.google.com/p/memcached/wiki/NewUserInternals#How_the_LRU_Decides_What_to_Evict) That alone is reason enough never to use memcached for things you dont want to get lost. like sessions. 
Without too much knowledge about the internals, it seems like they have problems working in parallel sometimes. Why should a feature block others? They surely have a bunch of developers, not everyone should focus at one or two things at a time. About PHP6, will 5.7 be considered? Or they plan to jump to 6?
What about with Postgres or Sqlite? 
Also see this SO question: http://stackoverflow.com/questions/23601622/if-redis-is-already-a-part-of-the-stack-why-is-memcached-still-used-alongside-r/23603300#comment36370232_23603300
Goto #php.pecl on EFNet, ping weltling or Pierre
&gt; injection vulnerabilities for identifiers, which is not what PDO::quote() is used for It's also not what prepared queries are for, most dbs cannot prepare eg `WHERE ?=?` in a meaningful way. For instance, PostgreSQL will insert a literal string of the identifer, rather than the identifier eg `WHERE 'id'=32`. `SORT BY 'id' ASC` is valid SQL, but useless.
I'm sure Nikic will be able to answer himself, but my understanding is that: * There is a large amount of work to be done to make sure all existing php internal functions match their documentation. e.g. If some uses the function `file_put_contents' ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )` and they want to pass in 'context' as a named parameter, but internally the function refers to that parameter as 'file_context' then the named_param wouldn't match, and so the call would fail, or worse just not work correctly. * The feature may cause backwards compatibility for people, which ought to be thought about carefully, rather than being rushed through in a short amount of time. Because of the above two, no-one felt like trying to cram it into PHP5.6 which would have involved doing months of work in a few weeks to get it into the first alpha. And because the next version of PHP won't be released for a while, there is no need to try to get the RFC through until PHP5.6 has shipped. I hope that it's available in PHP 5.7 as it is very, _very_ useful when trying to maintain code that has default parameters in the functions, as well as being much nicer way to build up parameters than through `call_user_func_params`. At the same time I can see that if it does cause large backwards incompatibilities for existing projects, then it would be more appropriate for the next PHP major version. 
Sha1 is a really fast hashing algo and collisions are pratically impossible
Exactly, PDO doesn't do anything with identifiers at all, since most database libraries don't provide a mechanism to escape identifiers according to their specific format.
&gt; It's the framework's responsibility to make known to the developer how it functions, what's safe and what isn't, etc. Considering the query builder should already know the schema, it could (and should) be white-listing to known fields (at least). *that* is **not** a documentation issue. And I think the majority of these issues could be boiled down to that. Failure to white-list. They have the information. But for some reason don't use it...
I don't think anyone is an idiot for not using a particular framework. Laravel is nice because its easy to pick up and was developed by someone that came from .NET and didn't carry any previous PHP baggage I was drawn to it because I thought the documentation was good and it had an enthusiastic user base. 
Are you using a framework of any kind? Frameworks in general speed up development by providing simple and concise ways of coding otherwise menial and sometimes complex tasks. They're also well tested against best security practices, PSR standards, and general code quality. Laravel is certainly the new hotness in PHP frameworks as it's both incredibly easy to get started with, but powerful and flexible enough to write enterprise scale applications in. My favourite thing about Laravel is the expressive syntax that humanizes a lot of the code your writing, making it both easy to write, and understand at a glance. I don't want to write an essay on Laravel, as you can see all its benefits on the official site, and it's been discussed numerous times in this subreddit as well, but at the end of the day, you should be using a framework of some kind, unless your PHP scripts are extremely simple in nature. There are other good options like Symfony, Zend, Kohana, etc. Laravel just happens to be my favourite. 
IMHO, is not different about any other php framework around or gonna give you any less or more. The thing with Laravel is popularity drived by good branding, all start some time ago when Nettuts former editor and some developers prise the framework so high and wrote some nice tutorials about, in that time all most every posts on Nettus where related to Laravel and only Laravel, there where others thing like Dayle Ress book and his free tutorials about it. All end up in a chain reaction where developers from different hue were talking about how good Laravel was, how easy and fast was to develop something with, did it sound familiar? Cough...Ruby on Rails...cough. Finally one of the thing that really help Laravel to take off was the introduction of their so called "Facades" which made some controversy in the PHP community, even now some developers in this sub-reddit are still talking about with no end and that only help the framework to gain more notoriety. In conclusion Laravel is a good framework as any other but is the one that people are talking about.
I've only used memcached myself but am going to put Redis on the list after reading this thread since it sounds like better solution. My code always has a fallback to whatever persistent storage the original value came from if the key does not exist in memcached. We primarily use it for caching API results. You can store all sorts of things in memcached, but you will need to serialize the objects (JSON, base64 encoded, etc) before you store them. Some libraries will do this for you. IIRC, memcached has a max size limit of 1MB for storing values. This may be an issue if you're trying to cache very large objects.
&gt; #php.pecl weltling helped me!
This is also especially infuriating when a third-party library meant to be re-used uses die() instead of exceptions.
Stick with TCP. TCP can queue, unix sockets cannot.
Enclose it in quotes. You're searching for user '00001-29', not user 1 - 29. Any time you're searching for a string and not a number, enclose it in quotes.
Yes, this is about it - before this can land we need to update argument information for all functions and ensure that parameter parsing can always handle "out of order" arguments. That will need a lot of time, which I do not currently have. The current plan is to start working on this again in time for PHP 6 :) Btw, I also added a small update to https://wiki.php.net/rfc/named_params#state_of_this_rfc regarding the discussion results for the "Open questions".
I'm looking for a free search script that allows me to generate billions of $$ via ads. Please help. /irony
The real viable option is setting up a 500 error page for your app that can explain to the user something went wrong and steps they can take to get around it. Links to other pages, support email, contact form, etc. If you're not expecting an error, you don't know what data mysql_error() will output. Never blindly show error messages to users.
I am sure you could get close with Wordpress and some plugins. Probably could get close with any cms and whatever relevant addon provides upload functionality. Your problem will come with validating the map files. As you are looking for a 'script' I presume you have no programming experience. The main thing you should be looking for is something to lock down uploads to just maps for a specific game. You may need to pay someone to investigate the file format and create a validatir.
So? Being an arse is our right and privilege!
Note to creator: It would be nice to see a list of items/topics covered in the video. It's pretty long to watch without *some* idea of whether or not I want to watch.
It's the other way around. Memcached will expire the oldest session and save the new one when you try to save a new session and are out of memory. When we tried to use Reddit for sessions, it would simply fail with an out of memory error. The nicely automatically expiring old, out of date sessions is a feature.
He made the post, saved the permalink, and edited the post (see the * beside the post age?) to include the permalink. Relevant: http://i.imgur.com/zoBoRPT.png
You are right, but only in a very certain scenario. You assume a) no data other than sessions is stored and b) memory is sufficient to store all non expired session. &gt; items/chunks are not actively reclaimed/expired. Memached does not have a background thread that explicitly expires items, reclaiming used chunks for new items. When a slab needs a chunk and there are no more pages, Memcache will look at the queue tail for items to evict. Memcache will make a best effort to evict expired items (items you've explicitly set to expire after some time). In scenario 1, item 2, an expired item, is evicted. However, in scenario 2, item 1, which has not yet expired, will be evicted, even though item 4 would seem like the better candidate. But since item 4 is not near the tail, Memcached stops looking and just expires item 1. (http://work.tinou.com/2011/04/memcached-for-dummies.html) 
check ircmaxell's blog if you haven't http://blog.ircmaxell.com/
&gt; [...] the query builder should already know the schema [...] For those that know the schema, I would agree. I don't know all of the affected frameworks well enough to say whether that's actually the case, but I wasn't able to find any kind of schema cache in CI's DBAL; only a query cache (maybe I missed it, though). This would also nix any possibility of *intentional* SQL injection through the same interface that didn't actually do proper SQL parsing. I know that several libraries I've seen in the past allowed this for complex expressions that weren't practical to model through the class interface (vendor-specific geospatial syntax comes to mind).
http://en.wikipedia.org/wiki/Anti-pattern =)
Hey kenman, wanted to drop a note about this behavior you're seeing. Beginning with the end, this is obviously not the expected behavior and what you're seeing is some sort of an error situation, rather than the normal mode of operations. The trigger for the problem that you're seeing is that the files in question are supposed to be deleted almost immediately after they're processed, but for some reason they're either not being processed at all or somehow failing to be deleted. It could be the statistics daemon being down, it could be some awkward permissions issue, or it could be some other bug. Rest assured that we haven't implemented any sort of 'intelligent' (or unintelligent) way of creating temporary files. We're using a standard one (QTemporaryFile); It's just that this implementation appears to be extremely inefficient as the filename space (which is quite limited) gets close to exhaustion. Traversing that many files is quite costly as you've suggested. We'll potentially look into using another implementation and/or filing a bug on QTemporaryFile - but again, this whole situation is edge case where for some reason files are not being deleted almost instantly after they're created. If they were properly deleted - you'd see zero temporary files associated with PID 4300. Another couple of things I'd like to point out - except for this missing deletion bug (which we absolutely need to get to the bottom of and fix) - the way we implemented cross-process communications is actually very efficient. It actually doesn't create a file per request, but rather, a file per process every minute; Everything in between happens in memory. We have the stats module enabled on huge websites with extreme loads and the performance hit it poses is negligible (barring this deletion bug). Last but not least - I would greatly appreciate it if it was possible to work with you to analyze what the root cause actually is - i.e. why are files not being deleted. If you're up for it, please email me at zeev@zend.com and we'll figure it out together. Thanks! 
so what was the solution?
Broken down you need to: * Figure out what your list is going to be, my suggestion would be to do something like an employee directory with name, position, title, phone, email. * Create your database table, you could programmatically create the database and table but I would just use phpmyadmin to create a database and table to store your data, also go ahead and use phpmyadmin to insert 1 or 2 records to get you started. * Retreive data, write a php script that connects to the database and fetches all rows, output those rows to an html table. * Insert data, create an html form mimicing the fields in your table and when submitted sanitize and validate that data then insert it into the database. * Delete data, put a hyperlink next to each row in your html table, when clicked have it delete that row in the database. * Update data, put another hyperlink next to each row in your html table, when clicked have it populate the HTML form you used to insert a row and use changes submitted via that form to update the data in your database. You now have a very basic php CRUD application. The next step is to research the jquery AJAX method and rewrite all of you database inserts, updates and deletes to be encapsulated in an AJAX request. Once you have that working make it pretty with css. Pretty much any information beyond this is having someone do it all for you.
true but hashing creates consistent file names and have some privacy on providing the files to external clients
thank you i appreciate it 
I cannot think of any reason for this to be useful, except as a replacement for __toString(); Then again, I don't use closures all that much if at all in my code so I may be blind to the subject. Otherwise, I'd much prefer the verbose $obect-&gt;doSomething(); Magic just isn't worth it sometimes. Give me easier to read any day. My fingers could use the exercise.
I mean... you don't have to think of a reason, the linked article explains the reason.
Well the reasoning in my post is that it gives us a central way to execute an objects primary action.
The example is very silly and uses a very bad approach to a particularly useless example, especially considering that the object that the author designed represents an operation, and the operands should likely be parameters of `__invoke()`. The use-case for `__invoke()` still stands, though. Good object oriented programming in the service layer is basically functional programming: - constructor injection - immutable state - SRP - uniform interfaces - value objects passed across services Bringing these concepts to an extreme leads to single-method, final, immutable objects. While separating every single operation in its own object is often an overkill, it sometimes makes our code much more readable and explicit. Having something like following (pseudo-code): // look ma: no weird interfaces! echo $createOutput($serialize($service($controller($buildRequest($_REQUEST))))); Is much simpler and expressive than hiding every operation in a layer of indirection where multiple methods have to be called to achieve what we want, and it also is easier to debug. The API also gets more uniform and simpler to document, as the common interface becomes `callable`, which is perfectly fine as well. Reducing the number of parameters being accepted by the `__invoke` to `1` is also a plus, but not really required. This doesn't mean that everyone should be using `callable` for everything, but the simplicity that comes from using it is incredible. You may want to look [8 lines of code](http://www.infoq.com/presentations/8-lines-code-refactoring), which explains all these thoughts of mine in a much better way.
Obviously, what am I missing?
This very well explains the argument of my post! My example was silly but I thought it was at least very understandable to everyone.
I may just be old and set in my ways. I do agree that the smaller the object the easier it is to understand, but there has to be a line for how small those objects go before the complexity of the app becomes unbearable. Magic for a corner case usage that php script kiddies will just end up exploiting in the wrong syntactical fashion just sounds like something for me to avoid, and another reason why so many people end up hating php. Just my opinion, and I ain't trying to stop anyone else from using it. 
9:15: Magic is bad 18:35: Every piece of magic you put in your software is something I need to learn. ... The less magic you have, the more effective I'm going to be.
Interesting article, it made me realize I might not be using that pattern enough, thanks. I just want to point out that you might have single-method interfaces like, for example, the dispatcher: interface Dispatcher { public function dispatch($request); } The reason you don't want to name that method `__invoke()` is that even though there is only one method in the interface, nothing says there is only one in the class implementing it. If most interface used `__invoke()`, then you couldn't implement several interfaces in one class :/ You could argue though that the Single Responsibility Principle says that each class should do one thing, but it's not always the case. Anyway, keep that in mind.
There's really nothing magic in `__invoke` :-)
Without implementing `JsonSerializable` and returning `$this-&gt;data` in `jsonSerialize()`, the objects would all be serialized as `{"dontCurrAboutThisForJSON":"dontCURR"}`. My apologies if this functionality is exceedingly obvious, but I had never seen this before and thought it was cool.
Trello is my goto app for todo. It's amazing, and is flexible enough to be used for anything. It sounds like you don't need a fully brown issue tracking / project management software, so I think Trello will be a great step up from Excel.
Assembla, Trello, email and whoever has the most panicked look. You can see it in their eyes. But seriously, you'll like Trello. Make a new card for each 'thing' to do, maybe make two boards for dev and admin. You can choose columns as you like, typically todo, doing, done - although that feels a bit redundant when you can archive cards. Turn on the card-aging powerup to remind you to do the things you've been putting off :)
Yeah... so, you cover all of this? &gt; Accidental complexity: Introducing unnecessary complexity into a solution &gt; Action at a distance: Unexpected interaction between widely separated parts of a system &gt; Blind faith: Lack of checking of (a) the correctness of a bug fix or (b) the result of a subroutine &gt; Boat anchor: Retaining a part of a system that no longer has any use &gt; Busy waiting: Consuming CPU while waiting for something to happen, usually by repeated checking instead of messaging &gt; Caching failure: Forgetting to reset an error flag when an error has been corrected &gt; Cargo cult programming: Using patterns and methods without understanding why &gt; Coding by exception: Adding new code to handle each special case as it is recognized &gt; Design pattern: The use of patterns has itself been called an anti-pattern, a sign that a system is not employing enough abstraction.[4] &gt; Error hiding: Catching an error message before it can be shown to the user and either showing nothing or showing a meaningless message. Also can refer to erasing the Stack trace during exception handling, which can hamper debugging. &gt; Hard code: Embedding assumptions about the environment of a system in its implementation &gt; Lava flow: Retaining undesirable (redundant or low-quality) code because removing it is too expensive or has unpredictable consequences[5][6] &gt; Loop-switch sequence: Encoding a set of sequential steps using a switch within a loop statement &gt; Magic numbers: Including unexplained numbers in algorithms &gt; Magic strings: Including literal strings in code, for comparisons, as event types etc. &gt; Repeating yourself: Writing code which contains repetitive patterns and substrings over again; avoid with once and only once (abstraction principle) &gt; Shotgun surgery: Developer adds features to an application codebase which span a multiplicity of implementors or implementations in a single change. &gt; Soft code: Storing business logic in configuration files rather than source code[7] &gt; Spaghetti code: Programs whose structure is barely comprehensible, especially because of misuse of code structures &gt; Lasagna code: Programs whose structure consists of too many layers I doubt it.
This makes me think of this python video: [Stop writing classes](https://www.youtube.com/watch?v=o9pEzgHorH0). It very much applies to any other OOPish scripting language as well, though. If you have a single function call with default arguments, why overcomplicate that into a class?
I use the installable/downloadable MyTinyTodoList. http://www.mytinytodo.net/
This is my project. I've spent countless hours working on it for a very long time and today I finally released 2.0. I know I'm very much playing a niche field, so it probably doesn't interest a big chunk of this audience... But I'm feeling a bit proud and wanted to share. Happy to take your criticisms, ideas and questions, and I would love to know what I can do to make this interesting to you as well.
It let's you define what the JSON looks like when you use it in `json_encode`. You can make it encode only one attribute, whitelist/blacklist other attributes, etc.
We use [Sprintly](https://sprint.ly) as a team. Personally I've used anything from Trello, to a notepad, to Asana. Each has their upside/downside.
That's very interesting Phil - might have to siege that myself to test - see if I can break it. Haven't seen any issues with sockets with heavy sites myself (Nginx/PHP-FPM).
 $values = array_values($oldArray); $newArray = array_combine($values, $values); 
You need a front page that explains what the product is and what it can do for the person reading it. If they have no clue (like me) then the post explaining improvements means nothing. 
thanks for all your hard work evert! SabreDAV is at the core of one of my projects (http://emr.ge). Looking forward to trying version 2!
I guess this is an artifact of the old google code page, where it always just had the latest post. This is a very good point.
Awesome! I'll check it out :)
I feel like the only point worth making in this article is from the title. Not that I don't think you should "know the language," but rather I think "knowing the language" is rather trivial compared to knowing appropriate php application patterns. Learning how a framework, any framework, handles the request/response lifecycle, database interaction, session handling, logging, etc, is much more valuable than learning the full php api. Without elaborating further, if I wrote a similar article its title would be "it doesn't matter which framework you learn, just learn one." 
If you have learned computer science，just browse the php document then code
Trello is a good choice as it's collaborative between the team. Even moving to Google Sheets might be a worth improvement over Excel - sometimes a spreadsheet is good enough :) 
&gt; Single Responsibility Principle says that each class should do one thing.. Doing one thing does not necessarily mean having only one method. In the authors example and object that add can very well have methods that accept the values to add as part of its interface without violating the single responsibility.
I guess I was naïve in my thinking about docker, I had assumed you don't have to worry about distros but your packages are specific to Ubuntu.
I don't like this. It remove a vital piece of information from a function call and reduces the readability with no real advantage. From the authors example it would be something like, $add() vs $adder-&gt;add(). See how in the first instance we have to depend on the name of the variable to infer what is being done. But when you use a method, it is more clear what the object or method is supposed to do. It also gives use a clue regarding what object we are dealing with. Giving up all that for what? For saving a few keystrokes? Also, how do you define interface to an adder? using __invoke() method? No people, please don't do this. &gt;Aura.Dispatcher using it beautifully. Well, that adds one more reason why I would like to stay away from it... 
Well specific to Debian/Ubuntu as the purpose of these is to build deb (Debian) packages. But the same process could be applied for rpm's/etc. if desired. A Docker image always has to be based on an OS target - e.g. I could make a Docker Redis instance image, would still base it off an OS for the image (e.g. Ubuntu) but the host machine could be anything (Ubuntu/CentOS/Linux-anything - even OSX/Windows is possible now) much like how VMs work.
If you want headers only, do a HEAD request instead of GET with the option "CURLOPT_NOBODY"
You misunderstood my point. It's not about having several methods, but implementing several interfaces (that use `__invoke()`). Example: interface Factory { public function __invoke($params); } interface Invoker { public function __invoke($function, $params); } I can't implement them both on the same class. But you could argue that a class that is *both* a Factory and an Invoker violates SRP. (&lt;-- this was my point)
Why would I want a class with an only one non-pronounceable method when I can have a more-terse closure instead?
Glad to hear it! I used Blitz.io and had a piss-around with Bees with Machine Guns. 
I totally agree with this. I sort of get what this could do but I think by adding examples on how this this project can be used onto the home page, would probably add a lot of value and might even bring new user who didn't even know they needed something like this in the first place. Good luck with your project. I'm going to look closer into this when I have some time. 
&gt; How much time did those issues take? Practically none, in the scheme of things. The last one even helped fix a bug **before** it showed up in production. &gt;but I can point to the ever growing popularity of this type of solution. Its not just a new toy the kids are playing with Unfortunately it is. Justin Beiber is popular, that doesn't make him particularly good at anything. You're swinging wildly between vagrant being a tool to make sure your php env is identical to prod and a tool to let you run an entire infrastructure on your dev box. It's kind of hard to discuss when you respond to a different interpretation of what I'm actually saying, so I'll just say this and leave it there: Vagrant is a great tool. It's fantastic for installing software/servers quickly without needing to interfere with your actual machine. It's fantastic for writing a "recipe" of what needs to be done to get your code up and running. But that's about it. If you want to actually configure and manage infrastructure you will use puppet/chef/ansible properly. If you want your developers on a strict setup then you will use those tools to deploy a dev environment, perhaps a shared server, or perhaps a bunch of VM's. And you will never replace decent documentation with a vagrant script. Even if you are completely wrong about everything (and I'm not saying you are), it's still so great to see developers that think about this stuff. Most of the guys I come across are barely able to differentiate between git and svn let alone grasp something like config management. E: Just to clarify: I think you're overestimating the importance of having identical prod/dev envs, I'd rather put effort into code that runs anywhere and automated testing to pick up edge cases. I also think you're trying to pack UAT/Integration/etc all into dev, and they don't belong there. They have very different purposes.
I'm a very happy user of __invoke() in a little thing we've wrapped around PDO for database access. Using the result of an arbitrary query like this is fun: $db = Database::getDatabase(); foreach($db("select something, else from somewhere where foo = ?", $bar) as $result) { print_r($result); } The prepared statements are cached, so multiple invocations with the same query cause only one statement to be prepared. __invoke() returns something implementing Iterator. Yes. I could have used a different method name, but the $db("query") pattern looks nice and querying is the central feature of that database object, so it really felt right to use __invoke()
In our company we used Redmine, moved away to a more "agile" project management tool called Target Process, but I think it's time to move away from this one too, it's too bloated. But maybe it'll work for you, try it.
:+1: for trello, I pop everything in there
Not since Windows 7, you need to edit a regkey. Or did that changed?
Question: Why not use Nginx with PHP-FCGI instead of FPM?
Php-fpm is the fast cgi of php. Are you thinking of mod_fcgi vs mod_fastcgi for Apache? 
Phabricator if you want free, Jira if you want hosted. 
Webdav from any "legit" source, sabre / PHP isn´t a "ms compliant" standart: http://tommynation.com/mount-owncloud-network-drive-windows-7-webdav/ Which uses sabre as far as I remember.
This is a beautifully summarized example of what I believe a best use case. I would also say that calling __invoke or any of PHP "magic-method" should be with no side-effects as it is pain in the ass to debug later on.
this is so bad... could posts like these please stop? that topic has been covered more than enough and it has been covered better.
I think it is only magic as long as it alters the behavior. The invoke adds a new behavior - therefore the only magic is the double underscore in front of it's name. I mean: everybody will know what to look for when $object() is written in code. But magic stuff like $object-&gt;dynamicProperty is indeed dangerous.
Public properties? &amp;#3232;_&amp;#3232;
Because a class can carry state, whereas a closure can't.
FPM stands for FastCGI Process Manager. It's a deamon that runs multiple fcgi processes and can be controlled like any other regular server. 
It is actually the microsoft client that misbehaves, sabredav is quite good and 'legit'. The problem is that microsoft only provides good out of the box support for its own authentication system, and does not work as well for servers that use HTTP Basic / Digest auth.
I know that´s why I used " "
I share an office with a graphic designer and another developer. We have two whiteboards that show all current projects/feature requests. There's something amazingly satisfying about tangibly erasing something. 
It was a bit hard to detect sarcasm there :)
 It's great unless part of your team like to work remotely.
I've thought long and hard about using this on objects, and came to the conclusion that it's very rarely a good idea. I would much rather have something else care about serializing my objects. I've gone with the JMSSerializer, which seems solid and does the job. The reason I don't like my object's being responsible for knowing what to serialize is the lack of flexibility. If I have two actions that both serve JSON representations of a user (`/user/fetch/:id` and `/user/list`), I want to display two different representations of that user. This isn't possible with `\JsonSerializable`, but is possible with a semi-sophisticated serializer. I can display a more in-depth representation of the `User` object in the fetch route, and a more simplistic representation in the list route. I also think it breaks SRP having your object knowledgable enough so that it knows how to represent itself as JSON.
It's not **the** permanent working solution... what you posted about is the symptom of nginx and php-fpm failing to connect with each other, which could have any number of underlying causes beyond the one that happened to work in your case, this time. Inspecting log files to find the actual error is still the best place to start for anyone running into this symptom instead of blindly expanding file permissions. FWIW, in my experience TCP sockets are definitely the way to go. There is slight overhead to them, but that overhead pretty efficiently adds scalability and robustness.
Thanks for your answer. Yes, I have changed my mind since I posted the comment. TCP it is
I'm expecting someone else to throw up a bunch of good oop links/tutorials/etc. If I could suggest just one thing is to start small and through trial and error. Just replace one wee small part of your app at a time. Be it a benchmark component or.. wrapping your sql controls.. or input processing. Pick one part that can live all on its own. Also be willing to start over after learning new syntax/patterns/etc. Sometimes rewriting the same thing a few times can really make some clean and clever code. Since you can remove hacks made during the first attempt to fix overlooked parts. Start small and repeat. Stay small. A few weeks later you'll find everything has grown as you start cleaning and adding more and more. The smaller it is the easier to debug and importantly, the easier it is to understand the oop nature of your code, and how it can be improved/cleaned/split up/etc
It's a little frightening how few frameworks (and ORM libraries for that matter) out there integrate the concept of whitelisting and blacklisting certain columns or other information. I believe Laravel and CakePHP were one of the few that do. I agree, thought, that education is paramount in this situation. IMHO, I'd put it over the issue of a contract as, if done effectively, would provide more insight into whatever contract the framework provides. Also, while it's not really a SQL injection bug per se, not having this whitelist/blacklist can also lead to problems like Rails had with mass assignment...especially in APIs and PUT/POST.
That's true. For the couple of people out of the office, we use lucid chart. 
A thread from a couple of days back will be useful for you. http://www.reddit.com/r/PHP/comments/26352v/object_oriented_design_in_php_how_to_do_it_and_why/
Use composer, add the framework as a dependency.
&gt; public function __invoke() { I'm guessing that's a bug -- shouldn't the params `$a` and `$b` be listed?
I don't think the 2 techniques are mutually exclusive when implementing. Also, are you sure you're not mixing concerns -- the model is simply the model data, while it should be the responsibility of the view layer to take that model and represent it. The model shouldn't have any knowledge of whether it's being used on `/user/fetch/:id` or `/user/list`, that's for the controller to know and the view to handle.
If you're using Laravel, you'd basically start by cloning [this](https://github.com/laravel/laravel) and then your controllers would be in app/controllers. When you run composer update, it will put your dependencies in vendor/ If anything, the dependency should be laravel/framework and not laravel/laravel
Thats not where your business logic (controllers, models, etc..) will reside. In the case of Laravel, when you execute the command: composer create-project laravel/laravel --prefer-dist What happens is Composer downloads laravel/laravel which is actually the skeleton application for the framework. This is designed to not change between versions. The included composer.json file has the laravel/framework as a dependency, which results in Composer then downloading the actual framework plus dependencies into the vendor directory. You'll notice that the skeleton application for Laravel includes: app/ bootstrap/ public/ The app folder is where your business logic will go. When you eventually want to upgrade Laravel, you simply execute: composer update and the latest version will be downloaded.
Here are instructions for how to do it with symfony: http://symfony.com/doc/current/cookbook/workflow/new_project_git.html
And keep in mind the SOLID principles as best you can. You probably won't at first because it is all brand new, but even just the single responsibility rule would be awesome to try and follow. Basically each object you create should do only one thing. Meaning you have a form that puts stuff in a database, then one object for validation, one object for database, one object for displaying the form, on object for taking input and sanitizing it, etc. This will keep your objects small and manageable and you will be able to figure out where stuff is breaking along the way easier.
http://code.tutsplus.com/tutorials/object-oriented-php-for-beginners--net-12762
I love Trello, my only gripe is trying to be more specific, either my boards are all over the place with Bugs / Features / Support / Issues or I have multiple boards for each that are almost empty.
That's precisely my point, I may be being a bit anal about it but I don't want my model telling the rest of the application how it should be represented as JSON. I want a dedicated service for doing that, something that is easy to change (via configuration files preferably). I use the serializer from the controller ([example here](https://github.com/tickit-project/tickit/blob/master/src/Tickit/Bundle/UserBundle/Controller/ApiController.php#L134)) and can add specific groups if I choose to do so, allowing a different representation of the same object in different places.
These two resources allowed me to slingshot into the OOP world two years ago: [**PHP Objects, Patterns, and Practice** by Matt Zandstra] (http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1430260319) &lt;- This fucking book! Read It! &amp; [**Foundations of Programming: Object-Oriented Design** - Lynda.com] (http://www.lynda.com/Programming-tutorials/Foundations-of-Programming-Object-Oriented-Design/96949-2.html) 
var_dump($booking) and you'll see why, its not set in $booking. How/why that is, im not sure.. its happening outside of this code snippet. You're returning some crazy data, thats for sure. a single result (essentially) built from random data of $details. FetchAll returns a multidomentional array (var_dump($results) to see what i mean) Also, why the intermediate array? Why not use PDO's associative array mode? $stmt-&gt;execute(); return $stmt-&gt;fetchall(PDO::FETCH_ASSOC); then loop the results in your view like so: foreach(getOpenBookings($user) as $result) { echo "&lt;tr&gt; &lt;td&gt;{$result['Booking.id']}&lt;/td&gt; &lt;td&gt;{$result['Car.name']}&lt;/td&gt; &lt;td&gt;...etc...&lt;/td&gt; &lt;/tr&gt;"; } (This is obviously very rough code, to get the point across) E: What i mean by fetchAll() returns a multidimentional array is, $details[0] = first row of the resultset, $details[1] = second row of the resultset.. etc
My guess it that your query returns 3 rows in the scenario you are running. Your $details var is really an array of result rows. Your code should be looping over the result set, something like: $ret = array() ; $rows = $stmt-&gt;fetchAll() ; foreach($rows as $details) { unset($results) ; $results['id'] = $details[0] ; $results['name'] = $details[1] ; $results['date'] = $details[2] ; $results['start'] = $details[3] ; $results['end'] = $details[4] ; $ret[] = $results ; } 
You can choose between 2 modes of persistence (or both), AOF and RDB. AOF is pretty safe. http://redis.io/topics/persistence &gt; The general indication is that you should use both persistence methods if you want a degree of data safety comparable to what PostgreSQL can provide you. If you care a lot about your data, but still can live with a few minutes of data lose in case of disasters, you can simply use RDB alone. There are many users using AOF alone, but we discourage it since to have an RDB snapshot from time to time is a great idea for doing database backups, for faster restarts, and in the event of bugs in the AOF engine. 
So we definitely think differently, I prefer consistent models that don't change depending on context. Rather, I prefer the view to hold whatever knowledge is necessary to present a model, while the model just exposes what it knows about itself; what I mean by that is, and circling back to the original topic: given the use-case of a `user` model, you're most certainly going to have a `password` (or `hash`, etc.) property. As far as I'm concerned, the view should _never_ receive this property. Yes, it's a part of the model, but not something the view should have knowledge of. If your views receive JSON, then blacklisting that property via `jsonSerialize()` is going to accomplish that goal of ensuring that it'll never end up in your view. Correct me if I'm wrong, but it sounds to me like your views could receive a radically different `user` depending on where they're used? Because it sounds like you're saying that you want to customize the model depending on context, which doesn't sound kosher to me. And just to clarify, I'm not saying `jsonSerialize()` should contain any application logic; rather, it's merely to scope the "server" properties apart from the "client" properties, which could be for security (as earlier), performance, etc. edit: just wanted to add that I'm not trying to say that your way is "wrong" or that mine is "right", though I do like the discussion
Thanks for the reply I have managed to solve the problem reading some problems on stackoverflow but I will try to implement your methods. As for the "intermediate array" I'm still learning everything about PHP and databases so I was doing it in a way that was taught to me.
thank you solved it :)
&gt; It can lose you a good deal of data, but you shouldn't use it as a primary store anyway. http://redis.io/topics/persistence If you choose AOF + RDB, it's pretty solid.. but yeah, I wouldn't use it as a primary store.
I'd recommend running your code through PHP Mess Detector, PHP Code Sniffer, and some other linters and refactor based on their recommendations. [scrutinizer-ci](http://www.scrutinizer-ci.com) is a great way to continuously test quality of your code and offers specific tips for refactoring. On occasion it also gives you patches you can apply directly.
I'm surprised nobody mentioned Asana. Is really good at keeping your project tasks organised and its free version gives you a lot of freedom.
I think you are going to be told this is not the correct sub to ask this question. It also seems you need to make a search for http://lmgtfy.com/?q=apache+enable+php+windows I bet you need to enable PHP in the Apache config file.
I haven't seen anybody else recommend this yet, but the way I learned OOP PHP is by using a framework. I looked at both ZendFramework2 and Symfony, and decided on Symfony, since it seemed to have better documentation. Sitting down and making an app work with Symfony game me a pretty good understanding of what I was doing with regards to OOP. Go through and look at one or more of these tutorials and get a feel for it, then throw together a tinker server and install a framework on it. Play around with it and see what you can learn. 
*Sometimes.* If you're working on medium to large scale web applications, the code should be object oriented.
This isn't anti-copy. Users can still select and copy text, their selection just isn't highlighted.
As always, here is a link to [php the right way](http://www.phptherightway.com/)
This article told us absolutely nothing about developing a plugin - not about how plugins work, nor about how they can be integrated with wordpress, nothing. It might as well be titled "how to add add some arbitrary CSS to your wordpress site".
ZF2's view helpers are good examples of this use-cases as well: https://github.com/zendframework/Component_ZendView/tree/master/Helper It allows you to do something like: $this-&gt;foo()-&gt;setBar($bar); to configure, and do: $this-&gt;foo() to perform the final behavior (i.e., render something to HTML)
The heading is "How to develop a first WP plugin". It just came to my mind to do something with css. Thanks for the tip.
Hi, you might have more luck in /r/phphelp than here - this subreddit is for more general PHP discussion.
Serious question - what would you describe as medium in this context?
There's not really any set rules, it's just personal judgement. I'd say a basic CMS is medium.
Thanks, I'll test it when I'm back at work on Monday.
I just made the switch as well, with both php and python. I should have done that way earlier. Good luck with your switch!
In most cases it is a bad idea to store files in the database itself. Normally you are better off just storing a path or similar that points to the file. What files are you trying to store in the database?
Thanks for the tip on CodeIgniter. I have been using it for the two past hours and already starting to get a grip of it and basic understanding. I understand that it's outdated, so what would you prefer on a production server? Do people normally use frameworks on prod servers on a professional level?
In the case of frameworks like Laravel, there are actually two repositories and only one is installable via Composer. laravel/laravel laravel/framework The first is essentially a recommended but kinda required folder structure, which each upgrade will have new config files, lines to delete, update, replace, etc. They try and keep it down but there are always a few bits. This is the same for a few other frameworks. It's not ideal, but you can just use `git add remote laravel git://whatever` and pull from master to get the changes. Then composer update the rest and you're sorted. 
That's a compelling point and now I can thank you for sending me on the eternal errand of refactoring all my code, again.
This might help http://stackoverflow.com/questions/4377573/how-to-link-1-git-repository-to-some-other-repositories
I use Pinboard.in (a bookmarking service) as my list of references and reading, and if there's even a remotely related URL, I put stuff there, with a note. Otherwise I use a text file in my dropbox folder. I loosely follow the todo.txt conventions but I don't actually use the program because sometimes I like to break convention and add notes and whatnot. I've written my own parser to read and display the list in the browser at least 3 times, and each time never used it as much as just editing it in sublime text.
I don't get docker. It's like chroot on steroids? How does it help when you want to run solaris and rhel in prod and work on an ubuntu box? &gt;not just PHP, the whole environment - webserver/os/php/database One db I work against is half a TB and I need to be able to modify it in dev and quickly resync to prod often. These pieces just don't fit into a docker container or a vagrant up command. &gt;Apparently, on FreeBSD, php 5.2.17 is not at all compatible with Curl 7.31 Your problem is running 5.2 in the first place. The solution isn't to spec dev to match an obsolete environment, it's to upgrade prod. You can't? Cool, use vagrant to downgrade dev, but don't run around telling everyone it's the way forward. &gt;I am trying to pack those into dev, and they traditionally didn't belong there because we never had the ability to do any of that in dev. They don't belong there because they don't belong there. System/Integration testing is testing components work together, testing load, testing third party services, etc. When I'm building a REST API that will be a component in the system I really don't give a shit if the email servers are routing correctly. I really don't give a shit whether we need 8 web servers or 800. What I care about is that my application can receive an HTTP request, handle it correctly and return an appropriate HTTP response. Maybe my app needs to send an email, but I only care that it generates one and tries to talk to some mail service, whether the mail service actually works is an entirely different problem domain.
Well what are you getting right now? It looks like if you have an empty set you have the script exit which means it stops running before it gets to your second div
So exit; quits all php on the page? How can I prevent this? 
Read some docs about PHP classes and objects, and then play around with them a little bit with some sample code to get the feel for how to define classes and create objects. And then stop, and get a framework like Laravel and continue learning from there. You could try to write OOP PHP apps from scratch, but you'll just be re-inventing the wheel trying to come up with ways to represent database objects and making it all work with some kind of template system. And it takes most people a long long time to learn the best techniques, and most people do everything wrong on their first few attempts to use OOP with PHP websites. But something like Laravel gives you literally a "framework" and an outline that guides you towards the best techniques from the start and makes everything a lot easier to manage. The learning curve is a little steep (you'll be very overwhelmed at first), but it's the best way to learn the best ways to use OOP programming from the start. The [Laracast](https://laracasts.com/) videos are unbelievably good, and will teach you Laravel along with the best possible programming practices at the same time.
When you put an exit in it completely stops the script from executing from that point. Die is an alias for exit as well so either of those commands do the same thing. So since your second div was after that exit it did not get run
I got burned out and quit trying to do large projects in PHP 3 years ago, so...
Hell no don't delete it. If it were in the wrong place the mods will let you know. That's why we have mods. 
I wouldn't use invoke in this case either. Just add use($index) to the closure!
I like wrike, it's great for teams with diverse projects
Are any of us safe?!
Yes...they should be. I wrote that from memory... not a copy/paste.
there are a lot of questions here. first., Stripe handles PCI compliance. they create a customer token that is will only work with your stripe account. also, [Stripe connect](https://stripe.com/connect) can handle the payment model that you speak of. its pretty sweet. the legal side with you getting in trouble comes down to the contract that you have in place when you start the project, as well as your own "E&amp;O" insurance. "errors and omissions" 
Yeah others have covered it. Nginx/PHP-FPM is the combination you want, Nginx talks to backend systems over Fast CGI.
I really like that example though, because I've written compare functions before with state, but had to rely on ugly local static vars, which is just slightly better than creating class members or closure vars... this seems to encapsulate the problem better.
A tutorial is a tutorial. No matter how it's written. At least how I think 
Not really PHP specific, but it took me *way* too long to get into using a good Versioning System.
Not really wish I knew two years ago, but would be available two years ago: [password_hash()](http://www.php.net/manual/en/function.password-hash.php) and [password_verify()](http://www.php.net/manual/en/function.password-verify.php). I love the idea of PHP figuring out the best way (at that moment) to hash a password instead of just using MD5.
What system do you currently use?
Performance and optimizations are not things that are done afterwards, it should be an integral part of development. 
The html outputs in order with the code as if you echo'ed it out. As exit stops the script, all output also stops.
&gt; in *this* case Anyway agreed
This was a great tutorial.
We actually pay to use [Springloops](http://www.springloops.io/) which integrates a versioning and deployment system. But generally SVN and GIT are good.
What you really ought to be doing is evaluating the form and doing all that jazz BEFORE you begin to output the HTML. You put any messages in an array (commonly referred to as 'flash' notifications). Then when dumping your html header, you have a chunk of code that dumps any flash notifications. Also, do yourself a favor and stop using the mysqli functions and use the class. This way you can build utility functions. A small example of what I mean: //(I wrote this here, and its untested it may have syntax errors, no promises) class db extends mysqli { public function connect($host, $user, $pass, $db) { //note the use of "parent" not "$this". Since this function overrides the mysqli one, this is how we //call mysqli's connect() parent::connect($host, $user, $pass, $db); if ($this-&gt;connect_errno) { throw new Exception("Failed to connect to MySQL: $this-&gt;connect_error"); } } public function query($sql) { $result = $this-&gt;query($sql); if (!$result) { throw new Exception("Query Error: $this-&gt;error&lt;br&gt;$sql"); //note that just dumping the sql on error is a BAD policy for production use. Once you have a dev\prod setup in place, log it elsewhere. This just makes the learning easier. } return $result; } public function escape($str) { return $this-&gt;real_escape_string($str); } public function escapeq($str) { return "'".$this-&gt;real_escape_string($str)."'"; } } You would use this class pretty much like the functions. But a lot less typing: $db = new db; $db-&gt;connect("Localhost", "user", "pass", "PHPTest"); $name = $db-&gt;escapeq($_POST['name']); //remember that escapeq adds quotes for you. $Calif = $db-&gt;escapeq($_POST['Calif']); $db-&gt;query("INSERT INTO Estudiantes (Nombre, Calif) VALUES ($name, $Calif)"); See how much less code each line is now? Other things your class could do for you is a function that takes a query and returns a single row, and one that returns a single value from a row. If you have any trouble making this work, reply back, I'll help you figure it out. Edit:// Also, here are some utility functions for you. function get_post_int($key, $default=0) { return isset($_POST[$key]) ? intval($_POST[$key]) : $default; } function get_get_int($key, $default=0) { return isset($_GET[$key]) ? intval($_GET[$key]) : $default; } function get_request_int($key, $default=0) { return isset($_REQUEST[$key]) ? intval($_REQUEST[$key]) : $default; } function get_post_float($key, $default=0) { return isset($_POST[$key]) ? floatval($_POST[$key]) : $default; } function get_get_float($key, $default=0) { return isset($_GET[$key]) ? floatval($_GET[$key]) : $default; } function get_request_float($key, $default=0) { return isset($_REQUEST[$key]) ? floatval($_REQUEST[$key]) : $default; } function get_post_str($key, $default='') { return isset($_POST[$key]) ? $_POST[$key] : $default; } function get_get_str($key, $default='') { return isset($_GET[$key]) ? $_GET[$key] : $default; } function get_request_str($key, $default='') { return isset($_REQUEST[$key]) ? $_REQUEST[$key] : $default; } function get_post_bool($key, $default=false) { return isset($_POST[$key]) ? !empty($_POST[$key]) : $default; } function get_get_bool($key, $default=false) { return isset($_GET[$key]) ? !empty($_GET[$key]) : $default; } function get_request_bool($key, $default=false) { return isset($_REQUEST[$key]) ? !empty($_REQUEST[$key]) : $default; } The problem with accessing the get\post\request variables directly is that A) You can't be a 100% sure they are there and should always do an isset(). And B) Half the time you have to cast them as a particular type. With this, this: $Calif = isset($_POST['Calif']) ? $_POST['Calif'] : 0; $Calif = intval($Calif); $Calif = $db-&gt;escapeq($Calif); Becomes: $Calif = $db-&gt;escapeq(get_post_int('Calif')); And if you want a default value in the case that its missing: $Calif = $db-&gt;escapeq(get_post_int('Calif'), 5); Also, the bool functions are for form checkboxes, when they are unchecked, no value is sent in the post\get data but when they are, the value is sent. Edit Edit:// Also, I noticed you compare $Calif against numbers without casting it as an int or float. This is bad because shit like ("10dfasdf" &gt; 9) can be true. 
love your reply with a practical example.. im breaking into OOP too. I feel a lot of OOP resources online start with concepts that might be too complicated for beginners ( or dummies like me ). a simple practical example like your's can make a world of difference in explaining the concept . Thank you.
&gt;It's like chroot on steroids? Yeah, its kinda like chroot with AUFS, with a versioncontrollish interface. But it defines a definite api for how the container and os interact, making your entire application portable. Google just announced support for it (https://developers.google.com/compute/docs/containers) Not to mention that they have been using containers for years, and open sourced their version of docker: https://github.com/google/lmctfy &gt;How does it help when you want to run solaris and rhel in prod and work on an ubuntu box? Solaris? you're sol. its linux only. rhel - you run docker on your ubuntu box, and run all your app stuff inside a rhel container that uses lxc to interact with your kernel. Kinda like running a vm with rhel on it, but not anywhere near as slow or resource intensive. &gt; Your problem is running 5.2 in the first place. Not speccing dev to matching an obsolete environment - *upgrading* dev first to verify changes to the environment go through the same change management procedure that code goes through. 5.2 was the bees knees 3 years ago. &gt; whether the mail service actually works is an entirely different problem domain Not if your application completely shits the bed because it cant sent mail. You make it sound like you've managed to achieve some holy grail where there are no leaky abstractions and your code never has to worry about the environment it executes in. &gt; I need to be able to modify it in dev and quickly resync to prod often. Wait, what? I dont think anybody would file that under best practices...
As koryteg has said about the Legal trouble. Was there a bug in the back-end that allowed a user to set the prices sent to Stripe's checkout page? Was it your fault? Did your contract with the client cover you from these bugs, or are you responsible for all bugs, repairs, and coverage? Having built something VERY similar to this - I made sure no potential 'screw' ups could be blamed on me, and instead, the contract had wording based around me doing my absolute best, and the company making considerable efforts to test and also make sure to prepare before their idea went public.
git
&gt; you run docker on your ubuntu box, and run all your app stuff inside a rhel container This is where I'm confused. Docker provides application containers, but an OS isn't an application?? &gt;Solaris? you're sol. its linux only This is my whole point. You can't do it, so just own that and deal with it properly. You will never be able to replicate prod in your dev machine. &gt;Not speccing dev ... Sure, but you need to do the upgrading. If you have php 5.2 (5.3 was released half a decade ago!!!) then you have fucked up. Just because vagrant can help you there doesn't mean it should be used everywhere. If your dev box was up to date you would pick up these bugs. &gt;Wait, what? I dont think anybody would file that under best practices... Can you elaborate? Every dev has their own instance to use, to test we resync those instances to production so we have accurate shema/data. &gt;Not if your application completely shits the bed because it cant sent mail. What if your application only shits itself when the network causes the mail server to shit itself, now you need to somehow replicate the network in dev. Just isolate the pieces, mock what you have to.
Nothing like optimising code that will get deleted after management decides they don't need it. 
Honestly, I wouldn't even write out 2 lines over and over again, or even 1 if it was somewhat lengthy or complicated.
Composer.
Whoever downvoted you is a fool.
Frameworks 
I know it exists but never used it... what is this thing exactly? is it a installer?
GAH. Just save it in the database, that way when your users loose their password or forget it they you can just email it back to them. (oh and you can laugh at their hilarious passwords. (seriously they are far more funny then reading some crypt string). 
Should ask this over in /r/laravel, or at the very least /r/PHPhelp 
i hope this is a joke
it kind of existed as PEAR, but, no where as good.
Cool story bro
this looks cool.... 
It is a dependency manager. You create a composer.json file with a line for each package, see install section [here] (https://github.com/h2s/reddit-api-client) and then run &gt;php composer.phar update in the directory. Composer will download the specified version and make a folder called vendor with the code repo in it and a file called autoload.php. Just require that file in your code/framework DI and every time you need to update, remove or add a dependency you do it in the JSON file and run that command again.
I know ;)
Mercurial
git
I just upvoted it because I assumed it was.
Absolutely untrue. "Having a clue" is what's done during development. Optimization is premature before you have metrics.
Of course it is :-/
Seems like having a clue is what he was getting at. 
Background Worker for mailing, pdf and reports generation, backup, log processing etc. - it's not that hard! 
Have you guys actually tried Mercurial? If yes, why did you find it inferior to git? I have tried 4 or 5 times to switch to git, because of it is more 'popular', you know. Every time I end up saying 'Fuck this, Fuck 'popular', I ll just use Mercurial'. My biggest problem with git is that it only allows you to peep into the history dag through small windows which git calls as branches. And why are they even called as 'Branches' when they are actually pointers to commits? There you have the totally brain dead, git way of naming concepts, commands and options. Some people seems to be unaffected by, or don't-mind-getting-used-to-because-they-are-not-aware-of-the-alternatives or even enjoy the cognitive conflicts that you have to go through while learning git. I ,for one, does not so I am sticking with Mercurial. From what I have seen from /r/programming Mercurial is gaining popularity real fast. Another good thing about mercurial is how helpful the developers are. You can actually go to the irc room and you will be talking with a core developer who will actually try really hard to understand your problem and guide you to solutions. And another thing is, it is really easy to work in Mercurial's code. I, a php programmer with no pervious python experience, was actually able to fix a bug in like 3 hours or so. So that is another good thing.
There's alternative to standard RDBMS. Instead of trying to hack complicated queries, leverage these other technology made specifically for that. - Elasticsearch for searches. Want to search in the title and description, but put more weight if a result is found in the title? ES + Logstash = Awesome centralized loggings. Almost every site now has autocomplete. ES excels at this! - Redis for caching and more. Very useful to keep counts, instead of always doing a count(1), just increment a key in Redis. Pub/Sub is also the shiznit. Memcached is a relic of the past. - Neo4j for graphs db. "Users who liked this also liked.." recommendations kind of questions. This also triggered a change in philosophy. I'm not scared to add a new language/framework/technology to the project if it does the job better. Need websockets? Use Node for that, don't try to hack your way with ReactPHP, etc..
Not really that obvious... Some people dont know
For me it is the handling of modrewrite in PHP. So I just rewrite everything which isn't an actual existing folder or file to index.php and then use PHP and regular expressions to do the task (or in my case, I use a framework for that url rewriting). Now I don't have to figure out the strange syntax of apaches mod_rewrite and as a bonus my applications are easily portable to nginx.
Are you Sheldon? You never seem to get the jokes.
Why? Files should be stored in a file system. :)
More info?
Im really interested in learning redis, do you have any resource you recommend for it? and if its related to php of course it would be better
More info on this? I wasn't aware you could do this
Wait...what?! How is PEAR better than Composer?
I've found Slim to be a good example for this: https://github.com/codeguy/Slim/blob/master/.htaccess http://docs.slimframework.com/#Routing-Overview Example routes // Products $app-&gt;any('/products/', 'listingsController:listing') -&gt;name('products'); $app-&gt;any('/products/:reference', 'listingsController:details') -&gt;name('product-details'); 
The [documentation](http://redis.io/documentation) is all you need. 20 minutes of reading and you'll understand the goal and problems that redis can solve. This one guides you on how to make a twitter clone with crude codes -&gt; http://redis.io/topics/twitter-clone The best way to learn about it: read the docs, apply to an existing project. 
This comment really sums up the attitude of the entire PHP community. Good luck with the future.
Because sometimes files are critical to maintain referential integrity of the content. However, in that scenario, you also want a filesystem cache and not fetch the BLOB every time you need it.
So after a quick research I found that the two more populars PHP clients for Redis are phpredis (C extension) and Predis (written in PHP, the one Laravel uses). In your experience, what's the best choice? Is the performance difference between phpredis and predis considerable? I ask because since I'm on Windows, and from my quick search I could find no information about phpredis and Windows, I would be inclined to use Predis.
In the good old days you could still have achieved this: usort($nestedArray, [new ArrayComparer('x'), 'compare']); The only overhead is having to tell the callback which method name to run
I know the post said only two years, but I had to rewrite 80% of a medium sized PHP project because the tables were so horribly designed that they could not be optimized. We payed a lot of money to MySQL and they had a few guys look at our tables. They didn't know what to say.
Popular async queues with good PHP support are beanstalkd (small, fast, simple), and RabbitMQ (very fully featured, complex, easy to use and also easy to misuse). 
And what if the framework isn't installable with composer?
Fair enough.
Both are great. Personally I use Mercurial because it was really easy to get started. It's like arguing about text editors. They all edit text and it ends up being mostly about personal preference and your workflow.
Memcache is still excellent if you need properly atomic key value storage. Redis cannot do that. 
I use this in .htaccess: RewriteEngine on # if a directory or a file exists, use it directly RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d # otherwise forward it to index.php RewriteRule . index.php And either you have a framework (I use [yii](http://yiiframework.com)) where you have a cool syntax for this (for example in yii: 'update_&lt;id:[0-9]+&gt;' =&gt; array('page/page/update'),) Or you use your own regular expressions/string matching like this: $requestUrl = substr($_SERVER['REQUEST_URI'], strlen($baseUrl)); if ($requestUrl = '/individualPage') { displayIndividualPage(); } else { display404(); } with regex it would go like this: if (preg_match('/edit\/([a-z]+)/', $requestUrl, $matches)) displayEdit($matches[1]); Of course the second variant is very individual and should be done only in super small projects or for educational purposes :)
Php resque and if you use symfony bcc resque. 
oh, I agree 110%.. but some people insist on doing it their own way.. and that path leads to storing passwords in plaintext.. ;) 
You (the site, the client) always need to be PCI compliant, Stripe (or any other payment gateway) does not release you from that obligation. Stripe puts you in the "PCI A" category, or "PCI A-EP" under the 3.0 standard that will go into effect in 2015. See http://www.pcicomplianceguide.org/ and http://www.pcicomplianceguide.org/new-more-a-first-look-at-the-pci-dss-3-0-saqs/ 
http://redis.io/commands/incr It's atomic. 
I can't help you if you're using Windows mate, sorry. 
I doubt they downvoted because they think md5 is great. Most likely that it was a redundant comment (OP already said md5 was bad).
The complication is that HTTP_X_FORWARDED_FOR is reported data from the client, and thus can be easily faked. Also it might report an internal IP like 10.41.0.23 which doesn't tell you much. REMOTE_ADDR is reported from the network stack and isn't fakable, tho it could be a bot running on someone's hacked desktop PC or a Tor exit node so it might not tell you much. Basically, depends on what your need case is ...
You use HTTP_X_FORWARDED_FOR when REMOTE_ADDR is set to an address you trust (ie.: internal IP address of the proxy server sitting in front of your app, etc). Also, REMOTE_ADDR IS fakeable. It is harder, but entirely durable to spoof an IP (ARP spoofing is one method)
Don't you have professional indemnity insurance? I would say that's essential if you're dealing with ecommerce.
Didn't look at it too much, but took a quick glance. Very nice. Clean, simple, and readable. Keep it up!
Read on ARP spoofing.
Thanks for the look in, cheers matey.
I was thinking I'd try that next - creating a MySQLMessageStore implementation and using tables to store all the data. Good suggestion on redis, I've been meaning to learn it for ages and this shall give me a means to!
Cheers for the feedback - my preferred coding style is actually very close to PSR-2, the only difference being that I always put the brackets on the next line for control structures. I might make the change and see if I like it... EDIT: Just seen your other comments - I'm writing tests right now (as well as a little refactoring) so the dir will be used soon, and as for the magic methods, I understand that they can be confusing when reading the code and to IDE's as you say, but I just put it in as a little bit of syntactical sugar. What's the general consensus on things like this?
Thanks for the feedback! It's up on packagist if anyone does want to use this.
I'm new to this sub: why got this answer downvoted?
Keep the magic methods, if you don't over use them it will be fine.
I use [Asana](http://asana.com) and I love it.
So far, I try to work on the two pieces in chunks. Several hours in the dependency, commit, update the consumer project. Work in there for a while. Rinse, repeat. Being a library, the dependency tends to be something that's easy to cover top to bottom in unit tests. Those stand in for the test, find broken bit, fix, test cycle that is normal in building something.
If the code is symlinked to the vendor folder, but present in the composer.json as a dependancy the classes for your package won't be in the generated classmap - otherwise I can't see why this wouldn't work. The being said, even if your classmaps are correctly generated &amp; the symlink is correctly configured wouldn't the code still be present in search results?
For some editors you can turn off following symlinks. I think I'll try do it again, because it'd be my preferred solution.
That's a fair point about being able to test things instead of just trying them out in the project. The thing is; the project I'm currently writing is more for my learning than anything, and I'm still exploring a lot of things without knowing how I want them to act altogether, making it difficult to realistically and efficiently test anything.
Hi, I don't have any kind of insurance. I don't even know if that insurance thing is in my country. I guess I'll do some research.
Consider this: If your code is meant to be reusable outside of this project, then the objects and their relations should exist as independent truths of any consuming code. So, stop thinking in terms of building a shippable application and jump down the rabbit hole of OO design. Your objects will eventually take on the only form that they are able to take on and still properly represent their respective concepts.
Ok, so increment is atomic, what about the standard key\value store?
I absolutely agree with what you're saying. In fact, one of the components I am using in this project I have developed entirely independently. It's unit tested and all that, and when I've tried it in this project it does work as I wanted it to. The only thing is, that project was something I had already messed around with before and used concepts I'm familiar with. Perhaps I do just need to try it like you say, maybe it would promote better code and force me to write unit tests. There's nothing bad about that, that's for sure. I just wanted this project to be something quick to experiment with.
Do this: * Check out your project and do a composer update to get the dependency in the vendor directory. * Delete the directory for the dependency in the vendor directory. * Go into the vendor directory and do `git clone` for the dependency at the appropriate place where it should be. * Profit. Composer understands and reads git repos. So long as the dependency's git repo satisfies the projects requirements, doing composer update with the above setup will not cause the git cloned directory to be deleted or otherwise modified. I actually haven't checked what happens if you do a composer update and the git cloned directory doesn't meet the projects requirements - feel free to let me know what happens. btw I use [SourceTree](http://www.sourcetreeapp.com/) for committing, pushing, pulling and most other git related activities. I use a naming scheme of `$depdendency-working-in-$project` for the dependencies that are being worked on in other projects folders. This is nice, as when I open SourceTree and type `$dependency` into the search box, it shows me all the places where this is currently being worked on, and the status of all of them in one go. Also I gave a talk recently at [PHP SW UK](https://docs.google.com/a/basereality.com/presentation/d/1G-xrmlGWKmLSuigRhr274IHf-wfzJ7chnyFnBFs_upY/edit?usp=sharing) - here are my slides. There are other things that people really ought to be aware of in there. 
&gt; Because sometimes files are critical to maintain referential integrity of the content. I'm not entirely sure what you mean here. I know files should be removed when records are removed, but thats easily solvable with a bazillion different solutions that don't involve shoving a file into the DB. When I asked why, I literally was asking why. That answer doesn't really make a lot of sense to me. The you talk about caches, which throws me. If you want files to be available with referencial integrety, then storing a cache of that item is IDENTICAL to storing that in the filesystem. When you remove a db record that cache is still there until you purge the cache of the file in the filesystem, which is identical to just... removing the file from the filesystem. You sound like you're recreating saving and deleting files when you could just save and delete files. 
Yeah, I'm not a TDD evangelist. I just find them to be a useful way to test out the otherwise abstract behavior or a library, rather than creating some throwaway code to dump behavior to the console. I mean, that's practically writing unit tests anyway, and other people like to see tests on a library. The big thing that I wanted to impress was in thinking about the library's problem domain entirely independently of your current project's context. Some of the current project's mentality will leak in, I'm sure, and you'll miss some features that may seem obvious later. I've found that using a library across a few different projects tends to give it the beating that it needs to address a meaningful variety of use cases and to establish the true independence of the code from any particular use. Good on you for trying to write this out as a separate thing in the first place! It costs a bit more in terms of time *now*, but saves you time over the long haul. That said, I have found that if the concepts are fuzzy enough, it's just worth baking the code directly into the project a few times, until the concepts begin to clarify. When writing project-specific code, you can make all manner of assumptions and short-cuts. When writing a separate library, there's so much pressure to keep the code clean and general. That generality part can be the hardest.
That doesn't work anymore?
If you do a ````composer update```` and the source has modified files, composer will ask what to do (overwrite, diff the files or skip)
* https://mail.google.com/tasks/canvas?pli=1 * https://keep.google.com/ * https://github.com/blog/1841-nested-task-lists
It doesn't if you've done the git clone, it only does that if you've modified files from a directory that composer created for you from a composer update i.e. a directory that composer thinks it is managing. It understands that it is not meant to manage directories that are themselves git repos, and so it doesn't hassle you about modifying the contents of them.
In a model where BLOBs are stored in the filesystem and only a reference is stored in the database, there is no way to create a backup which guaranties total referential integrity between the database backup and the fs backup other than shutting all editing before your backup. If they are in the database, a backup is guaranteed to be integral as it comes from one source. However, it does require some proper architectural design in order to do it properly. Ie.: Store only original files in the database. Transformed files (thumbnails) are to be stored on filesystem only as they can be recreated. Keep fs copies of files as reads are expensive. This however, allows for easier replication and restoring in case something goes wrong.
I've requested access to the slides with: `w****t.e****t@gmail.com`, hopefully that should be enough for you to be able to tell it's me. I use Linux (Ubuntu specifically) for development, and it seems SourceTree is not available for Linux users from what I can tell. It looks very helpful too that app. I have worked in a similar manner to this, whereby I just used the folders composer downloads (because they still work as git repos). I'll give your method a shot and see if there are any differences (i.e. if as you've said it won't delete the changes etc). Thanks. :)
Oops, the slides were meant to be public readable - they are now. &gt;it seems SourceTree is not available for Linux users from what I can tell. That's a shame. Although it is good being able to do most git from a command line, having an GUI application that shows me all of the places where I'm working on a project/library, the status of all of those different locations, and all of the branches that are being developed is a set of information that I don't think I could understand from a command line.
Had a quick skim over the slides, they seem very useful. I'll have to have a look at Satis soon. Thanks! :)
A minor point. You define your class variables as being private. This is fine for some variables (singleton instance) and you do provide accessor methods, but I'd suggest using protected variables to make for easier extension.
In looking at the code, certain methods appear to be returning too many different types of results ([example](https://github.com/iosystems/iOSystemsPromotionsBundle/blob/master/Promotion/Picker/PromotionPickerInterface.php), [example](https://github.com/iosystems/iOSystemsPromotionsBundle/blob/master/Promotion/PercentagePromotionInterface.php)) When you have methods that have a variety of return values, it makes it hard to adhere to Liskov Substitution Principle - which states that the output signature of all sibling and child implementations of the same method must match, so that they can be used interchangeably. That doesn't mean multiple return types are necessarily a violation of LSP, it just means it's harder to make all of your implementations properly substitutable. I would consider finding ways to limit the return types as much as possible - ideally just a SINGLE return type. That way all concrete implementations are guaranteed to work interchangeably. It also makes client code that uses them a lot simpler and more straight forward. General rule of thumb: whenever you use a return type of `mixed` in your doc blocks, it's two hints: 1. The method has too many responsibilities, since it's returning too many *different types* of information 2. That your code is likely going to be fragile and/or hard for client code to consume reliably. Other than that, it looks like you're on the right track so far. &gt; Side note: one thing I can't get is, for example, how to handle a contract violation (subclass implementing an interface and not returning the correct type in a method). Am I responsible for this? Depends. Will their subclass/implementation be used by your code? If so, then you should be checking for violations and throwing exceptions. If they are making subclasses / implementations to be used by their own code, there's nothing you can do about it. Maybe someday PHP (not Hack) will support return types that are enforced by interfaces, but until then, there's only so much you can do.
Ahh, I see. So every time a system gets updated, people get the new configs and "vagrant up" again?
Pretty much. It makes deploying to live very simple, too. There are services that let you deploy your vagrant config onto most popular cloud providers (Amazon, DigitalOcean Rackspace, etc). Since the developers are live server are running off the same config, it minimizes the occurrences of "it worked on my machine"
Any online demo? I love github, but I get a bit weary of having to check out the repo and set it up, just to see if its any use
Borland used to have a bad habit of declaring almost all of their non-public methods and vars as private, instead of protected. It drove me crazy. 
http://stackoverflow.com/questions/1197417/why-are-plain-text-passwords-bad-and-how-do-i-convince-my-boss-that-his-treasur
One thing you might be able to do (not sure if there are age restrictions) to start generating money right away is to take on some freelance projects. There are lots of good freelance sites out there with tons of work. [Elance](http://elance.com) is a good one, [Freelancer](http://freelancer.com) is another. Best of luck.
Thank you! I had a look at some freelance sites, but a lot of them have age restrictions. Will this be a big problem? Also, a [blog post popped up on here regarding Freelancer](https://medium.com/building-things-on-the-internet/3a2af69cf977) a couple of weeks back, so I'll have to be cautious of that one.
That is literally the weakest how-to I've ever read, on anything.
Arbitrary.
Thanks. I read this some time ago, while I was looking for recent posts on the topic. Still, there are no efforts/projects developed using the structured/procedural approach. edit: replaced procedural with structured/procedural.
Procedural? No, by far and large pure procedural has fallen way out of fashion due to its inability to be tested well and inflexibility as compared to OOP programming within PHP (the lack of function autoloading is certainly a big blow as well). You will find event-oriented projects like [ReactPHP](http://reactphp.org/) that will *feel* less OOP in PHP.
but doesn't the procedural/structured style tend to be more testable since all your dependencies need to be passed along as arguments? you pass around and transform or return data structures, and try to not keep any state within your functions/routines? or if global state is affected, aren't they easily verifiable?
Worth checking out Zend Framework 2 also.
I thought HTTP_X_FORWARDED_FOR was also used by Proxy servers on the wider Internet to; eg, an ISP might have a proxy server for their customers, and that might set that header? But fair point, if it's set by your own reverse-proxy server you can trust it. And yes, REMOTE_ADDR is fakable but due to the TCP handshake you couldn’t do it by just editing headers, it would involve some pretty serious network hacking to. So as said it depends on the use case - for most people I would have said it's not worth worrying about, if your against someone who can do this you've got a lot more problems quite frankly. 
There's two ways to do this, and this probably depends on how far along you are in development. If you're just getting started then symlinking vendor/project to somewhere will work. Once you actually want to work with a package but maybe don't want to work off packagist for the delay etc then you can add to your composer.json: "repositories": [ { "type": "vcs","url": "/path/to/local/project.git"} ] That way your package is updated from your local git repo rather than asking packagist. The plus of this is it's really fast. As soon as you commit to the package and then run composer update on the main project, you'll instantly get the latest version.
Consider https://github.com/Overv/Open.GL This is how it looks like live: http://open.gl When all you have is a hammer, etc.
Making all your properties protected isn't as good an idea as it first seems, actually. The more internal implementation details you expose to 3rd parties, the bigger deal refactoring your code becomes, as you no longer have an interface to hide behind, and backwards-compatibility breaks become more likely/necessary. Instead, I'd suggest exposing only what is reasonably useful, and hiding it behind a protected/public API. That way you can refactor the implementation however you see fit, and only have to worry about maintaining the interface.
I'm not saying everything should be protected. But if you wish to extend one or more classes and cannot access properties directly inside your child class, it seriously impedes what you can do. And an interface is meant to provide known end points so that the module can be swapped out by something else providing identical end points. It's not meant to hinder extensibility. If you choose to extend a class, the onus is on the extending developer to endure everything is backwards compatible.
It does, I was just pointing out it's only slightly longer than your example
Try Satis. https://github.com/composer/satis/blob/master/README.md
Sorry to hear about your position OP, and kudos to you for trying to pitch in at such a young age. Your list of skills you've learned is impressive and more than enough to land a well paying internship/job IMO (here in Silicon Valley, I don't know how UK works). I must admit I don't know much about the freelancing world other than a small unsuccessful attempt through a popular freelancing site at about your age. My hunch is that on these freelancing sites you will be outbid by Indian firms or other places where cost of living isn't so high so a lower pay is still acceptable. Someone correct me if I'm wrong. I think the way to escape the 3rd world outbid is by marketing yourself as a high quality, professional developer rather than the cheapest option, but that's more of a long term engagement and requires an extensive portfolio, etc. IMO you will have the best luck following u/jarofgreen's comment and finding a local software engineering job, your skills are more than enough to land a base level software developer job (and possibly more depending on the company), and it should provide cash flow quickly.
You're flat out wrong. It has nothing to do with an elitist attitude. I'd have a hard time believing there's even a controversy here because I don't think any experienced programmer would agree with the sentiment.
It's fairly common around the Laravel community thanks to the project itself being quite thick with terms: &gt; php artisan tinker What is that? A debugging console. Third parties do things like this: &gt; php artisan stapler:fasten users avatar Urf. FuelPHP used to do a bit of the same in the early days (We had Oil, and Cells came along, and... oh god I'm sorry). We removed most of it over time because it was _really_ dumb. Frank and I both agreed on killing that off as soon as possible, but not everyone seems to.
Sounds like you know what you're talking about, so I just hope you are using small images and dont expect too many million records. If you use enough caching you could even set up CDN Pull-Zones to really avoid the performance hits here. Shoving it in bytea would mostly likely work.
OOP is very popular, but there is always more than one way to skin a cat. Procedural code is often really handy for pure-speed stuff. I often write procedural code for mind-numbingly simple things like backgorund worker tasks. I don't need to make 12 classes just to say "Download this image, resize it and upload it somewhere." OOP is always easier to test, but procedural code is not impossible if you use any sort of container.
Good point - I keep having to remind myself to use protected rather than private (I forget its even an option) - will put that on the refactor list!
Haha, yeah you're right on that, I tend to write comments just for the sake of it sometimes - those could definitely be removed.
Why you don't delare private constructor? 
I'd say it's a touch over-engineered for something so simple, but it's a solid effort.
I've only had a quick glance through the files, but it looks really good. Strong use of coding to an interface, clean and readable code, and looks pretty SOLID.
My rule of thumb is, if I'm going to re-use this code, put it in a class. If not then it might not be worth the hassle.
Yeah, this is a great idea if you want to try to compete with incompetent $3/hour programmers from india undercutting you at every turn.
That's just retarded.
Meh, there is sometimes an element of that, but I managed to find projects where I was compensated a great deal more fairly. A lot of employers on there don't want the $3/hr types. I wouldn't recommend it as your primary source of income, but for extra cash when young, it was good for me. *shrugs*
Thanks for the advice, s_panky! I've had a look on there and bid on a basic social network. The budget was $1600 and I bid $1200, 20 days. An Indian guy bid $400, 4 days. Kinda annoyed me, but I'll keep looking. Do you have any advice you could offer regarding freelancer.com?
You can test procedural functions as well, it's just not the same like OOP. In general, i dislike the "bigotry" of people who advocate pure OOP, but than use a big load of static methods in their code for the sake of having them in a class. If you need a function, you need a function. And that's totally okay. Good coders use their tools where they are appropriate, so in general: i support your approach to that.
I recall speaking with the Cake leads waaay back when and making the comment "Enough with 'bake' already. We're engineers, not pastry chefs."
Learn everything about the major ecommerce solutions, for example magnto and os commerce... Install the systems on your local machine. Add some fake products and go through the whole ordering process. People will want you to be able to customize the shop. So learn how to do it. If you don't have any ecommerce system experience maybe try to write a plugin for one of the shop systems. check also all the major payment processors and read a little bit about the APIs. 
Yeah I've had that exact conversation with a few of the cake team. They're over it.
I'd disagree. I would say `generate` is a bit more obvious than `bake`.
Bad procedural code does not mean procedural code is bad. 
Code lingo is a violation of rubber duck debugging. http://en.m.wikipedia.org/wiki/Rubber_duck_debugging
While this is absolutely true in a small scale, it become increasingly unworkable when an API grows. For example "bake" can be work when the only thing you're creating are models or controllers. But what if you want to do some kind of autoloading automation, or create a new installation through CLI? The term "bake" could just as well refer to one of those. You're obligating the developer to make his own mind-mapping between the terms on no basis. This is a clear example of lingo not being specific enough. It leaves lots and lots of room for interpretation, which doesn't aid the developer in his or her journey.
I think this was an extremely good call! There's no need to map the terms of one domain to another. All it does is create another step for a developer to take.
Yes, static methods are just (namespaced) functions. But due to PHP's autoloading they're just handier. 
that should work fine, do you have a particular problem or pain point?
For OOP, naming things becomes easier when you focus on the methods a function exposes (i.e. an interface). If you focus on what something can do instead of what something is, you would end up with something like a CacheInterface with a cache method instead of a Hulk Cache Object with a smash method.
&gt; We're engineers, not pastry chefs We would like to call ourselves as engineers...FTFY
My non-linux friends tend to use PHPMyAdmin or [MySQLDumper](http://www.mysqldumper.net/) when running a LAMP stack.
What you have is good.
~~I would prefer an alias for such things or commands. Ideally a function should return some thing. But this should work.~~ EDIT: Stupid me.
org-mode emacs anyone?
I think it's stupid to convolute things unnecessarily, but at the same time I don't like people telling me to do something just for superficial reasons. The code doesn't care about what it's called, the person does. This is a personal problem, not a code problem. Personally I think that if i saw $toilet-&gt;flush($turd) I would think it's hilarious.
Download: http://atom.someguy123.com
1. pretty much your entire login code is entirely commented out with `/* ... */` 2. you can't output anything and redirect at the same time. If you're using output buffering the browser will redirect to the new location because the header will be sent before the echo, and the "Welcome" will not be displayed. If you're not using output buffering, then PHP will give a warning that headers have already been sent to the browser and your `location` header will be ignored. If you want to show a message then redirect, you'll need to output a page with either an onload javascript that waits a couple of seconds then loads a different page or a `&lt;meta http-equiv="refresh" content="3;someurl.html"&gt;` tag in `head`. 3. You are checking for someone giving either username with either password. someone could login with "admin" and "pass2". 4. Overall, it looks like you are using security by obscurity and hoping that Google does not index `access.html` and link people straight to that page.
It's not for superficial reasons. It's a quality thing. The "code" doesn't read or maintain software - people do. Make it easier for people to use your work.
Variables are case-sensitive. Use $_POST instead. Not that I encourage you to make a login page like this, but that's a totally different discussion. At minimum, at least hash the password and compare the hash so your password is not plaintext in the code.
If your tables are InnoDB and you don't want the entire site to become unresponsive while you're running mysqldump, make sure you add the --single-transaction flag to the dump command.
Yeah... But WordPress is a giant heap of shit. So it's not a very good example.
Does someone know how to move the location of the database so when you destroy the box, it's not lost?
There are more than a few programmers who write objects that only work like giant flat files of metho ds. There is not nearly as much truly OO code in the wild and lots and lots and lots of namespacing, containerizing and file management behavior calling itself OO. Its hard to rationalize that since they clearly lack the understanding of the difference that they are making truly informed decisions about one vs the other.
I'm reasonably sure that's not how "*Atom*" is pronounced.
Models?
[I can certainly tell the developer came from a Java background.](http://i.imgur.com/NakO4CT.png)
Actually, I think that [THIS](https://github.com/irestful/ConcreteMultipleHashMapQueueMessageRetrieverCriterias/blob/master/ConcreteMultipleHashMapQueueMessageRetrieverCriterias/Infrastructure/Adapters/ConcreteMultipleHashMapQueueMessageRetrieverCriteriaAdapter.php) may be my favorite.
I am only reporting what I said at the time.
I have a bash script which does the following: * Dumps the database to yy_mm_dd_hhmm_dbname.sql * Compresses it using tar * Uploads it to Amazon S3 folder using s3cmd (Python app) I also have a crontab bash script which deletes files on Amazon S3 that are older than 30 days.
Database storage location can be specified in the Mysql configuration file..
&gt; How is it that there are no frameworks designed around this paradigm? Try [Silex](http://silex.sensiolabs.org/) if that's what you want. No Controller classes necessary; just throw all your shit in anonymous functions, all in one big ass file. Hint: This gets very unwieldy if you're not careful.
Whats hard about developing in Windows? I'm developing in Gentoo and Slackware at home (Geany as editor) and use Windows at work and on my netbook. I never faced any issues in any of those environments. What problems did you face?
I put my 20 line scripts in classes too now. I use a static void main method on a uniquely named class. Why? It helps the IDE. IDEs get confused if you throw everything at the root level; it's global. What if something else accidentally includes my script? All that shit will be ran. If I need some helper methods for my script, I can be sure they won't leak out my script by making them private.
I use PHPMyAdmin in general. I just thought maybe there are another ways to do this on Linux. Because of I'm a Windows user, Linux seems very exotic to me :)
&gt; Compresses it using tar tar does not compress.
This is quite useful info! I'll start to work with a large database in the coming few days!
Why? as a non native english speaker that's how I'd pronounced it... *... goes to Google Translate ...* :O
Well sorry ))
Are you using that script just for development or is that part of an actual production system too?
Just for development, my personal backup. Web hosting company provides weekly backup. I backup the data via cpanel also.
&gt; Personally I think that if i saw $toilet-&gt;flush($turd) I would think it's hilarious. That's not lingo. That's actually explicit and makes sense, assuming your code is flushing a turd down the toilet. Your crapper code is not necessarily crap the way you've written it. If your flush method signature was instead "bombsAway($turd)" that would be crap. EDIT: Or if it were "hideMyShame($turd)".
I have tried editing it and moving the files and folders from the previous location to the new one with old permissions and I get the permission error in MySQL's error log. Nothing seems to be helping.
This was posted elsewhere and I thought it was good https://gist.github.com/Hamz-a/0b7d2e552812640dd8ef
He pronounces "*Atom*" as if he were saying "*eh Tim*", whereas it's pronounced "*ah Tom*" or "*Adam*".
I'm fine with it, at least if you leave it to the non-serious "production" versions. If it's something that you're just using on your own, have at it. If you're distributing, make a serious and a humorous version. 
yeah i kinda agree, Magento isnt something you pick up quickly or easily and even picking it up with years of experience still drove me nuts 
There was me thinking -c was compress all this time. Oops. ;-)
Haha sure, that's why it's so popular, so upvoted and full of good comments. What exactly is your problem, loser ? If you don't have the minimum intellect to follow, then don't comment.
Thanks for the links and I see your point and can see the benefits for maintainability and backwards compatibility. However, this then assumes that the original developer will have considered and provided an end point for every which way that any future developer may wish to extend their code. Do you think that's reasonable or even achievable?
FWIW, GNU tar can [automatically figure out](http://www.gnu.org/software/tar/manual/html_node/gzip.html) whether it's a .tgz, .tbz2 or .tar.xz file.
Laravel's Blade templating engine uses Blade::sharpen()
You're right. Id misunderstood its purpose
I've heard that, hence the scary part. I don't find it that bad though. I've been away from the PHP world for three years and this ended up falling in my lap. It's kind of cute and simple. I keep hearing everyone trash WP but haven't seen a detailed technical write up about why it's so awful. Not that I've looked for one mins you..
That's exactly why you should stay away from that shit. 1) You're going to find retards who think they can have a Facebook built for 2fiddy. 2) You're going to find retards who think they can build a Facebook for 1fiddy. You want a Facebook? I want 200k and a year.
&gt; but haven't seen a detailed technical write up about why it's so awful. Mostly because it was written a long time ago and hasn't matured beyond that point. It's still using PHP4 era code. - The architecture is such that often times you have to hack up core components in order to customize it. This is prevalent in *a lot* of older PHP forums and CMS's. - You're basically required to use a set of cookie-cutter plugins in order to achieve common functionality and security. Out of the box, security is pretty shit. These plugins have been around a long time, yet they are still not part of the core. - Code is sprawled out all over the place, so it's hard to just jump in to do something without doing a whole bunch of stack tracing. Things just aren't really in a logical place. Not really a technical write up, just some things off the top of my head WordPress is popular enough to warrant a complete re-do from scratch, in my opinion. I don't know why that hasn't happened yet. I think they could make a really decent product if they tried a little harder.
You know what you should not be doing? Paying attention to job requirements. If you more or less feel competent in most of what they're asking, and if the primary language will be PHP (or whatever your strong language is), then apply for the job. If they question it, tell them you're confident you will acquire the knowledge. It's rare that a job description perfectly matches your knowledge base. That's how you get experience. A job is ALSO a learning experience.
That's a neat idea actually. I like the idea of including the autoload. Just, I don't like tying the project down the folder structure of my machine and making that part of the project, even if it is during development :/
Laravel people
That is precisely why I said "make the path to the unstable version of your child project _configurable_", meaning you have to enter it into an unversioned config file so it wouldn't be tied to your project.
Sorry, thought I was clear there: the author is clearly a beginner. I was at least hoping for someone who wouldn't advise a lower version of PHP simply b/c they're uncomfortable with Apache config files.
No, absolutely not. But, the good news is that we don't have to. This is where I agree with Fabien: &gt; And it's not like we cannot change our mind if needed. Changing a private method to protected is simple and won't break any code. But before doing that, you need to understand what the developer is trying to achieve and if you cannot find a better way to resolve his problem without opening the API too much. Since we can't possibly foresee *all possible* intents and uses of our classes ahead of time, we should endeavor to make them reasonably extensible for the cases that make sense to us, and be open to change if a use-case arises that can't be more elegantly handled with the existing API.
Ahaa, yes, that makes sense. I'll probably give this a shot. :)
Dear me, taking a complete guess... is this a factory method?
And then you'll simply stumble upon something like the function *wp_magic_quotes()* and be confused for a good part of your existence.
Go to sleep kid, it's late for you. I'll never understand people like you. No knowledge, no self-reflection, completely useless. If you cannot add useful stuff, then be quiet. This tutorial adds useful infos to the official setup (which is horrible and imcomplete) and gives a perfect start into a development setup. Probably the only working setup tutorial on the web. Loser!
My new alias. Much thanks. 
How often do you find future-you hating past-you.
The fuck is this? ... The fuck is this?
i have to agree with u
i never wrapped my head around background task..do u have any example project that involve background task that i can take a look?
rarely if ever because most, if not all, of the lingo'd version doesn't make it to actual work. They remain in gists.
I called a function that shifted datetimes to the user's local timezone "activateFluxCapacitor()" Does that count?
Looks good for the most part, but I'd change users.php and posts.php and remove the isLoggedIn and SignIn Ultimately your user model and the model for your users table should be two separate things. Think of it like this, each model should be responsible for just one thing. The model for a user row should not be managing the database. So you'd have a usersTable and a usersRow model be two different things Also, signIn shouldn't be part of the users model. That should be it's own authentication kind of model. Again, for single responsibility design. The table model should be responsible just for managing the table, the user model should be responsible just for the row, and an authentication model should be responsible for checking if people are logged in and storing authentication. They shouldn't mix
Works great, thanks for the link.
A flux capacitor is the main component used for time travel, not for something as menial as working out what time it is in France right now. You should feel bad once for using lingo, and feel bad a second time for using it badly. :)
If I saw a library where the API included `$hulk-&gt;smash()`, I would find the address of the asshole who wrote it, and.... ...mail them a copy of Clean Code.
I'm pretty amazed that anyone would ever think this could be a good idea. 
This is why. http://milesj.me/blog/read/wordpress-is-bad-mmmk If you don't think that WP codebase is terrible, than you don't have a good understanding of SOLID.
What I had in mind was something more like: &lt;?php // create an app context $app = application_context(); // attach some actions attach_action($app, 'GET /signup', 'signup_form'); attach_action($app, 'POST /signup', 'signup_action'); // serve the app serve($app); // sample action implementation function signup_action($context) { // do some stuff, return stuff, etc. }
Did you look at the silex homepage? It's almost identical to what you just posted. &lt;?php require_once __DIR__.'/../vendor/autoload.php'; $app = new Silex\Application(); $app-&gt;get('/hello/{name}', function($name) use($app) { return 'Hello '.$app-&gt;escape($name); }); $app-&gt;run(); You can, of course, replace the closure with a named function if you prefer.
If you think you can write some code that moves you through time by unnatural means, i don't think you have to worry about the fact that you used code lingo.... you'd be rich having written said code
I see. Thanks for the project! The timing for this showing up is just great :)
Hey, I have purchased it, but I warn you, if you will bail on this one, I will hunt you down. /joke Now seriously, I hope this turns well and I have a new handy book I can sometimes open and look at basic. Wishing only the best.
I'm trying to learn better ways of doing this as much as much as the next person so perhaps I was a bit quick to say that I had a solution. It's just a way of doing things. I'm working on a project that is going to have multiple subdomain sites and let's say that projects were to be created and edited. This is what my "manager" class would look like: class ProjectManager { public function __construct(Site $site) {} public function create($data, User $creatorUser) {} public function update($id, $data, User $updaterUser) {} } So I construct the manager with an instance of the site the user is on and pass any other required dependencies to the method I'm using. I'm still working on it. If this requires emails and cache busting (which it inevitably will) perhaps I'll need to choose between using events or injecting more dependencies in the constructor.
Ah, I don't know anything about Co. Durham I'm afraid. You may find events nearby on http://lanyrd.com/ or http://www.meetup.com/ or just Google. Best of luck!
Oh, suddenly thought, assuming your going to college to do something programming then the college will probably have a careers person. They are usually meant for the end of your course but there's no reason you can't contact them right now.
Good point. Cold call all the tech firms that you think you could vaguely do work for and push it. Just be honest; my first job after uni I bullshitted the Python part but later they said "we could tell, but it was obvious you would learn it quickly so it was fine".
Safest bet would be to pick one here: https://www.google.com/fonts They're all open source and usable for both private and commercial use.
That is good news. But then the extending developer is dependent on the orinial developer opening up the API if something isn't possible, or failing that, modifying the original source themselves. I can see your point of view, but I'm not sure that I'm sold on it.
One thing I will say is just make sure you don't recode something that already exists. Github is full of great projects that more likely than not does already what your code does, or otherwise bits and blobs of your code have already been done. Have a look before you start extracting code. See if you can use existing solutions. It will help a lot.
Holy moly. So many repositories.
pdo_mysql by default uses emulated prepare statements for legacy reasons, and changing it would be a performance loss for most apps (it is a rare that php apps reuse prepared statements, where the native method would be faster, and for single use queries the latency added by the additional network roundtrip can be noticable) and could break existing code (as the native prepares are more restrictive (you cant bind table names in from or order by clause, etc.) so changing the default is unlikely in a minor php version.
Didn't realize it was disabled... thanks. Just changed the font as well. Arial is so common I just assumed it was open...
Yes. I plan on publishing the correspondence at some point.
How.... to use?
Why did you name it Go :( There is already golang.
Ass you me!!!!!!!!!!!!!!!!!!!
Maybe he just really likes [energy drinks](http://avondwinkeldebrug.nl/image/cache/data/13483-500x500.jpg)? :-)
Heh There's but one function that I implemented on a User object: hasGodComplex() Basically userlevel check. 
In case it's unclear, he was asking which ones you cover, not which ones exist.
Haha! Don't worry, I'll give it everything I got. Thank you very much!
Which is why you use the PDO-&gt;prepare(). Then it will use a prepared statement for any database that supports them.
If you view source, you'll see all of the php code. You'll see it because PHP is not correctly installed so the webserver is just serving the file without it being executed by PHP.
You really need to expunge the Arial.ttf from the repository history, not just commit a removal. In a project using revision control, deleting the file generally doesn't make it inaccessible. You might find [this article](https://help.github.com/articles/remove-sensitive-data) helpful. You should be aware that this will break compatibility with the repos that are forked from yours.
What a lovely "community" you have here. s/mysql_/mysqli_/g
From the README: &gt; To create your own project, type ``composer create-project hassankhan/ultron-skeleton &lt;path&gt;``. &gt; To work on Ultron, clone the project, then type vagrant up in the terminal at the project root. You should now be able to access the project at ``http://10.0.5.5``.
&gt; (just $2!) That's an invalid variable name. :)
[There is one correct way to do this](http://git-scm.com/book/en/Git-Tools-Submodules).
as I mentioned, the mysql pdo driver will emulate prepares by default: https://bugs.php.net/bug.php?id=54638 if you don't belive me, check out the sourcecode: http://lxr.php.net/xref/PHP_5_4/ext/pdo_mysql/mysql_driver.c#590 you can disable this behavior with $pdo-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
Like you see in the article, the iRESTful project is quite big. I'll be creating new articles explaining how things works in our framework. I also created a sub-reddit (that I need to customize the css style sheet). If you want to follow the progress, you can subscribe here: /r/irestful Let me know what you liked/disliked in the article and videos. My mother language is french, so hopefully my accent isn't too bad for your ears. Thanks for reading/watching!
This. Open your php.ini file and change short-tags to On. Restart apache. Your page should render correctly.
This sucks.
Alrighty, I bought it. Look forward to seeing it evolve.
If you are planing to have this PHP code only on your server, do this, if you want to be able to port it to any other server, you might not want to do this. 
This is definitely not a technical restriction. People that use the framework will be able to implement multiple interfaces without any problem. In the core of the application, we simply don't do it for the reason explained above. But people still can work the way they want to. In other words, this is a design decision, not a technical one.
It's not that much work to do a find and replace across a directory of files. 
Oh right, was wondering why someone would ask such a question. The skeleton project has a examples inside, there's a .SQL file with an example DB schema too. If you'd like more information, let me know :)
Thank you very much Sir! Appreciate it.
This approach leads to generic interfaces that don't mean anything, and code that defines contracts for things *it doesn't even use*. And that's a code smell. You could say that this necessitates that a class be broken up into multiple classes, but then you end up with another code smell - way too many classes (e.g. `Shape`, `ShapeAreaGenerator`, `ShapeCenterPointCalculator`, and so on). There's nothing wrong with a class implementing multiple interfaces.
Clean are you serious? That thing is a mess.
I assume you are talking about the second approach where one interface extends 2 others? You are right by saying that this might create such problems. This is why we normally separate our classes in very specific classes that implements only 1 interface, then use composition if we need an object that contains multiple objects, where each object is of a class that implements a different interface. We believe that a class should be as small as possible, and as specific as possible. Also, keep in mind that our software is separated following the domain driven design principles. We use interfaces to modelize our domain objects. For this reason, it makes sense that a class only implements 1 interface. 
Edit Note: We should all make the extra effort to keep our PHP versions up to date. I actually prefer people don't use short-tags, but preference is preference.
 &lt;?php ${2} = 'or IS it?';
But PHP 5.4+ has only short echo syntax (&lt;?=) enabled by default. It doesn't apply to short tags which are disabled by default.
Ah right my bad. Will edit.
&gt;Are you suggesting he rewrite the code base to remove all short tags instead of just change a configuration option? No but yes. Is it hard to modify a certain tag in a project? If yes then, I dont know may be you need to go back at drawing board. Its just find and replace all in a folder, if you use IDE it should be easy and if you are on Linux then its a just a command. OP is on Ubuntu. EDIT: The original point, if I wanted my PHP code to be portable I would not want short tags in my code. That's it.
That's a lot of nonsense just to call a factory method and wrap exceptions. 
One thing you might want to stay *aware* of while fleshing out this ADR stuff is the "functional decomposition" anti-pattern (http://sourcemaking.com/antipatterns/functional-decomposition). I noticed it a few weeks ago when seeing "Responder" classes with one method: "respond". Those may not have been the exact class / method names. Can't remember now, but something similar to that. Typically, having a class like "Responder" and a method like "respond" or something similar to that is a symptom of this anti-pattern. Usually, the "Responder" class is not necessary at all and the code can be put on the "Response" itself. Anyways, just something to keep in mind and look out for. I swear I read a Fowler article that discussed something like this several years ago but I can't remember it now... it reminds me a little bit of Anemic Domain (http://www.martinfowler.com/bliki/AnemicDomainModel.html) but I don't think that is the exact article.
I like how you challenge what you/we know. That's something we should all do more often. Regarding that particular article, I don't really have anything constructive to add. However you're the kind of person that might find an interest on that idea I tried to implement here: https://github.com/mnapoli/MniPagesBundle It's a "Component based architecture" that moves away from classical controllers and views. Yet it's not incompatible with MVC. As you can see I did a Symfony bundle (for no particular reason except it was possible) but that means it's 100% compatible with the classic controller pattern. Have you ever met/used this kind of architecture? I've seen very little PHP implementations of that, yet I find the architecture very attractive, because very simple to use and very efficient for the developer.
I'm starting to feel that a middleware stack is the correct place to inject and build your http response for most web applications, regardless of whether you're doing MVC, ADR or anything else. How the body of that response gets compiled is something else altogether, that's the real magic and could be application specific. I get the gist of your argument and agree but if anything I'd say just call things what they are. I would hope that a "template" or "view" is generally understood to be something you compile to a string and stick in the response body. What part of your app should be responsible for that is debatable, I don't think the controller is the worst place to put it but worth exploring options, like you've indicated. To say that a View is actually a Response though seems kind of silly. Just call it a Response.
What is the problem that we are trying to solve? What solid advantage do we get if we consider response as view? Aren't response headers set by the framework code anyway? Are you saying we should not issue redirect headers from controllers. I don't really get the point.
&gt; I like how you challenge what you/we know. I appreciate that, sir, and I thank you. &gt; https://github.com/mnapoli/MniPagesBundle Thanks for pointing it out; I have saved it for later review. &gt; Have you ever met/used this kind of architecture? I have seen different parts of ADR in different places, but I have never seen it written up as a thing in itself. That's the main reason I think of it as a tentative offering at this point; patterns generally pre-exist their descriptions, so part of what I'm doing is inviting commentary on existing experiences. For myself, I only started really thinking about it in depth when I wrote the [Legacy](https://leanpub.com/mlaphp) book, and how to separate the response logic in legacy apps, so that's one implementation of a Responder type of system. As far as the Action portion goes, we can see it in place with things like [Slim](http://slimframework.com) and other micro-frameworks, as well as more traditionally object-oriented work from guys like [Stephan Hochdörfer](http://blog.bitexpert.de/blog/controller-classes-vs.-action-classes). Let me know if that answers your questions or not.
Because there is no point.
&gt;but an OS isn't an application?? In a container context it is. Basically you're separating the linux kernel from all the crap the comes on a distribution. &gt;You will never be able to replicate prod in your dev machine. Well, you certainly can if you have linux in production. &gt; Sure, but you need to do the upgrading. No, you dont, thats not how the workflow works. The admins upgrade the puppet manifests that vagrant uses. Then your dev environment becomes 5.3. Then you test to make sure that 5.3 works. And if the Giant open source CMS hasn't yet moved on to 5.3, or at least the version of it that you're using doesn't support it because it *also* came out half a decade ago, and you're in the middle of upgrading to the new version, but its really a complete rebuild of the site, then yeah, you let the old version run on 5.2 for a while until you can launch your latest and greatest on 5.4+ etc. &gt;Can you elaborate? Every dev has their own instance to use, to test we resync those instances to production so we have accurate shema/data. I though you were saying you made changes to the schema/data *in dev* and migrated those schema changes back to production. If you're needing actual schema changes or data manipulation, the typical way is writing code that, when deployed, executes the changes. That way it goes through the whole testing process. &gt; What if your application only shits itself when the network causes the mail server to shit itself, now you need to somehow replicate the network in dev. Thats exactly what a docker/container system does. The 'mail server' is just a container that is reachable from other containers in the same docker instance over an internal network. If your application cant handle a nonexistent network to the mailserver, you can re-create those circumstances in dev by severing the pseudo network, and then make your application handle that fault gracefully. 
Haha. Agree.
&gt;I like how you challenge what you/we know. Challenge what, exactly? This is old stuff, he's just thrown a new label on concepts which already exist. 
Might be a bit of a noob question, but how do I install this. I don't get the brief explanation on GitHub since I've never worked with composer before...
Yeah this may be old stuff but it's still interesting to think outside the box sometimes. Even if that leads nowhere. Anyway I'm sure he's not pretending he's inventing something new (who really "invents" anything those days?), but thinking never killed anyone. It's refreshing to see some posts like that in the middle of "I wrote a super light validation library that validates integers and emails!" kind of links we get every week.
Here is a good article on how to setup composer for the first time http://code.tutsplus.com/tutorials/easy-package-management-with-composer--net-25530
&gt; Do not use a template system for the response body and a Controller for the response headers. Why not?
Go back to /r/lolphp you [troll](http://www.reddit.com/r/PHP/comments/26c5n9/what_is_the_one_thing_related_to_the_language/chpntss?context=3). This dick wad is just spamming links in different web subreddits for karma. If you think I should be nice to a spammer you can get fucked yourself.
I like the status flag approach. I suppose another approach would be to have another URL for archived articles. You could DELETE an article, move it to the archived list, and return a link under a 303 Status Code. That would take care of a soft delete. I'm not sure about the best way to re-publish something afterwards though.
I don't see how this is thinking outside of the box when this is already a fairly established practise already. Look at MVP and MVVM. I also don't find this content refreshing at all. Not when [the last few submissions by OP has been about the same thing](http://www.reddit.com/user/pmjones/submitted/).
What are subjects are you going to be covering? I've seen REST, models and views talked about a lot on /r/php but I really don't know what they are. Will those subjects be covered?
Cool idea! There's something like it (Nomad PHP) but it costs money.
ZF2's MVC implementation ends execution if you return a response from the controller's action. If you return an array or a view model it will automagically compile a response for you. So even if you think of your view as the response I think people will implement short-cuts like the one in ZF, you know, for DRY reasons. Of course this might lock you in on a specific framework but in order to be sold on this concept I would need to see a concrete implementation. I would like to be able to take domain models and responses and move them to a better/easier/whatever framework but my guess is that, if you can achieve something like that, you don't really need a framework (you would be left only with a router, a request object and some actions that do very little).
I would definitely join something like this if it was live and there were actually a variance in topics. If it turned into something like a laravel usergroup, devs like myself who don't/won't use laravel probably won't be interested. More power to ya!
Cool idea
Cool.
Great idea, but videos from talks would be public afterall?
Hi I was wondering if you would do something on sessions, salts (for password entry) or best practices etc.... Thanks
Consider it done!
Yup. The entrance filter is just so that we don't get trolls in the chatroom =)
Oh yeah I understand the benefit of a 410 over a 404, it was just that piece of misinformation holding me back from using them. I like to have human and machine readable information in the error response, and it turns out I can. Winner. :)
A presentation per month sounds reasonable. I'd be very interested but I need to find something interesting to talk about. Doing that on a weekly basis would be difficult.
&gt; This tutorial adds useful infos to the official setup (which is horrible and imcomplete) So..you're saying the documentation should choose a linux distro for you, tell you how to set it up, teach you how to install apache, php, etc., configure it and only then proceed to tell you how to install laravel? Yeah, that makes sense.. /s Look, it's great that you're learning stuff, but do you think that writing _another_ how to on installing a framework (there are thousands of them already) is really the best use of your time?
I would imagine that if we get 12 users that would cover 3 presentations a week which is pretty cool. 
True, I meant weekly would be difficult for individuals to do. Any PHP related topics are fair game? I have a few approaches in one of my open source apps that are worth screencasting.
&gt;What is the problem that we are trying to solve? The problem of not enough traffic to a site by the look of it. This appears to be nothing more than clickbait.
I guess as far as it's at least marginally interesting it should be ok )))
Note that MVP has been retired, and MVVM is more suited for a desktop environment. ADR, such as it is, represents more of a refinement to MVC specifically for the web. There's more about that, along with other pattern comparisons, in [the longer offering](https://github.com/pmjones/mvc-refinement).
Read the article, Snowflake, and find out.
&gt; if you can achieve something like that, you don't really need a framework (you would be left only with a router, a request object and some actions that do very little). Some might consider that a consummation devoutly to be desired. ;-)
I think one a month may be a bit much. Being part of the SDPHP user group, i do one about every 3 months, and with enough members, we have 2-4 a month. Requiring one a month for members may introduce too many talks lol
Agreed. I think talks would have to go through a moderation process. Make sure we haven't done the same talk recently, or same theme... Also want to make sure theres an interest
To be honest, I really wanted /u/philsturgeon to have a look, it uses his library [Fractal](http://fractal.thephpleague.com/), and I think I've put it to good use, but I'd like his opinion.
Cool, after two years there is finally a good reason to start using google+ :D
Regarding verbs vs nouns in pattern descriptions, I will note only that existing pattern names appear to be almost exclusively nouns.
Whenever I start off with procedural code, I very quickly regret how often I have to pass variables around to use them in various functions, vs calling `$this-&gt;property` in just the method I need it. I have enough snippets in Vim that writing classes is no more time consuming than writing procedural code, so I actually find writing procedural code harder than quickly designing objects in my head, and writing classes to represent them.
cool thanks!
I would totally pick this up if it showed from start to end how to set up an SQL database, this is just something that I can never find a good solid learning foundation on. Also, how to create databases, maybe give an example with something like GoDaddy or something? I'd know a few others willing to buy this too. PM me if you decide you want to do this :)
&gt; The only thing that has been retired is Martin Fowler's use of the term. He's instead opted to split his description of it into two patterns And I say exactly that in the longer offering. You may wish to read it before declaring "fooey."
&gt; I've seen REST, models and views talked about a lot on /r/php[1] but I really don't know what they are. Here's a head start for you. http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340
If you can find a good way to introduce design patterns and topics related to them like interfaces and abstract classes you'll gain some serious traction! It took me way too long to learn some (relatively) simple concepts because there is a serious lack of good tutorials out there.
I think I understand. If I had a site where users could register, the /register page would load via GET and when the user clicks "register", jquery or whatever does a PUT to /register with the form data as the body of the request? [Edit] 'jquery', not 'qjuery'
You have the right idea, but if you're adding/registering (creating new content) it would be POST. PUT is used for editing/changing something. EX: user changes their email address or updates their profile you'd use PUT. POST is used for adding a new user or if a user makes a new post on a forum. Check out that link and try to make the API they have. It's very thorough and should clear up any confusion. 
Ahh I see. So what about a login form? When a user clicks 'login', would that be a PUT or a POST? I would think a POST because you're adding a new session record.
Fair enough; I invite you to read and comment on the longer offering as well. Considerate, civil commentary only, please.
I guess if I took this approach to have /articles and say /archived-articles/ and a delete to /articles/id would create a resource in /archived-articles, I guess the "undo" operation would be to POST that resource with the identifier included back to /articles
That would be POST. PUT is pretty much exclusively for updating/editing content. I'm sure there are exceptions, but I haven't encountered any. Ok, now to slightly confuse you again! Browsers don't actually support PUT or DELETE requests. So what you do is set a variable (hidden input, really) and name it method with a value of POST, PUT, DELETE or GET. Then you use that variable instead to decide how to handle it. Examples of the extreme basics. I'll use a value called 'method' to determine how to handle the data. Create a hidden form input named what you want but set to the value that you'll be performing. //on the form create a hidden input (thanks for mentioning /u/mrterryh) //notice it is a hidden input NAMED "_method" and you're not actually setting method of the form &lt;input type="hidden" name="_method" value="PUT"&gt; //page that receives the request if($_POST["_method"] === "PUT"){ //because you're "updating" something, you should expect to see an ID as part of the data that was "PUT" here } if($_POST["_method"] === "POST"){ //since this is a new request, there should be no ID's sent } This is how frameworks like CakePHP and Larval handle different types of requests. http://laravel.com/docs/html#opening-a-form
That's the part that got me when I was learning about the HTTP methods. I remember sitting there at my computer fiddling with the `method` attribute in a form, trying to change it to `PUT` or `PATCH`.
Nope, unless the method is `GET`, the method attribute will always be equal to `POST`. To determine the *real* method, you'd create a hidden input like this: &lt;input type="hidden" name="_method" value="PUT"&gt; Then upon form submission, you'd perform the checks that /u/Administrator demonstrated above. The reason for this is because browsers only support `GET` and `POST`, so we have to do it all server side.
Good call, I should have specifically mentioned creating a hidden input! I updated my post in case anyone else reads it.
http://paul-m-jones.org/archives/281
How can we return a 410 if we don't know if the resource has been deleted? Once it's deleted, it's gone. No trace of it. There's nothing to check to see if it was deleted, or never existed in the first place. Unless perhaps you're keeping a separate delete log. Is that what you're suggesting?
what's hoa? why is the manual only in french?
You're going to encourage people to break the Interface Segregation Principle. You're going to make individual marker interfaces that do not add any abstraction value. This is not OOP.
410 and 404 are similar. The thing is gone, right? Well, the HTTP Status Code 410 Definition says, "If the server does not know, or has no facility to determine, whether or not the condition is permanent, the status code 404 (Not Found) SHOULD be used instead." For example, if you keep deleted objects around for a specified amount of time before cleaning up your database, you could use 410. 
Waste of time, they already exist. 
Certainly is okay. Sent you a PM.
Right, I totally get that. I'm not really into the whole overseas thing. Our clients are too big and the opportunity pretty massive. I'm looking for domestic (US/UK/Canada) partners. HIPAA is a beast that I take responsibility for. That's part of my role. For others (if they read), yes, we are aware of the issues with HIPAA. The bottom line is that HIPAA is mostly impossible to meet in all of its entirety, but there are many steps that can be taken to build compliance to the bulk of its regulations. There are many (obviously) healthcare apps out there which portend to be HIPAA compliant; so, at least we know its doable to the extent that fires aren't raging at every turn. Thanks for your reply. If you want to talk, I'm open to everyone! Also, this isn't some fruity idea / we're on the path / no going back.
Well at least you're aware of the complications that it adds. :) Good luck.
thx again for the engagement. will be in touch with you tomorrow / heading for a date with my ergometer for the night.
Thx, mate, I really (truly) appreciate it! I'm going to need it, no doubt.
Thx, appreciated. We don't have the deep pockets yet but are in the right position for those who are motivated. If you know anyone, please consider forwarding on a note. we own several key domains within the health space and have specific interest (ultimately) in distance and telemedicine / basically, we have connections with major institutions and a ready-made market... Again thx for chatting
Nomad PHP is similar and worth checking out. Let me know how the group goes and I can help promote it in Austin. 
Not sure if it is OK (I'm guessing it may not be) but you could definitely try /r/forhire . Plenty of PHP developers there.
Thx / appreciated. Will try that as well
This post is... not very accurate. It's really not worth your time unless you are really bored and want to hear gloom and doom about the supposed end of the core PHP project.
All good points, appreciate your taking the time to share your experience. $50 to $55 is not a major jump, nor is committing to a decent-sized nut based on our current cashflow. I haven't built a team like this before. So, I'm green at this aspect. Essentially, the play is that I have access to nearly every major US healthcare institution at a C-suite level / and connections with many leading US vendors. I know what needs to be developed / and we've got an engine going today that needs to go to the next level. A code project (series of projects) will need to prove increase in revenues and/or viability that will translate from a 20-50k project to a 200-1mm project for an early stage round. We're currently making between and 1 and 10mm / sorry don't want to give it away / and needing to take this next step without necessarily bringing a team inhouse yet. been on reddit for too many years / thought I'd give it a shot here! great advice expected and received...
I've approved this post. Just a note, not as a moderator but as a developer with heavy HIPAA experience: $50/hour won't get you much. You mentioned taking care of all the HIPAA regulations but unless you're a developer you won't actually know what all is going on in the backend to be sure. $50/hour for a *team* of developers is much less realistic, and I can tell you that you are probably setting yourself up for a big fall later on. I know you you're probably in early startup stages, but if you can spring for it, hire a full-time senior lead developer to wrangle all the other developers and make sure your company isn't responsible for accidentally/negligently leaking patient's PII... and getting fined out of existence in the process. Such a developer is in high demand and will run you upwards of $100k. Good luck.
You made a PHP user to follow rather than creating a community to join? 
* discussuins * ward of the lazy * membbers &gt; What do you think guys? The first talk should be on the importance of literacy.
I think that's beacuse the design patterns we know are largely an OOD thing. There's a quote somewhere about most of the Gof patterns not been needed in LISP as the language provides better alternatives.
Hoa is a set of PHP libraries. Please, refer to the website (in english): http://hoa-project.net/. The documentation has been originally written in french, but some chapters have already been translated. The other are following. Any help is welcome :-).
Actually, grammar issues come from me using my phone to write this. Sorry
Wow ... that's a terrible article ... NG exists because the experiments conducted by Zend in introducing a JIT failed in the real world because of the way the engine is currently designed, mostly because we allocate everything all the time. The NG patch changes the norm, so that we no longer by default allocate zvals, this increases performance and allowed for much tidier API's. ... NG does **NOT** include a JIT. &gt; Facebook-related ownership aside, HHVM pushed the devs in the right direction – both by introducing HOW such upgrades can be done, and by threatening the existence of the entire language Nonsense, please stop writing about things you don't understand, and or can't be bothered to properly research, please.
What MVC are you using? Most MVC's have a built in Authentication model, this shouldn't be part of the user model. Your views look good, but the not-signed-in.php and signed-in.php are layouts or parent views which your other extend or use as a parent. A controllers should never be verbs, always nouns, it controls an "entities" actions. Eg: You would have a user controller with the actions login and a post controller with the actions new and edit. Further keep to it, the MVC pattern is awesome!
I 100% agree. The trouble is people treasure familiarity so being locked-in to a framework gives a certain comfort with regard to solving some problems. Are you using ZF2 and have problems with the validation library? You go to google and ask "zf2 validation ...". Not having a framework means you have to pick your own. That requires more time invested and some risk management. It will pay off in the end but that's another story.
You can contact serj@dqteam.com and and ask him if he wants to make it open source 
Nope, I really don't do this. In fact, I encourage the use of the interface segregation principle. I encourage developers to divise their interfaces, therefore their classes as much as possible. An interface should only focus on 1 type of activity, and a method should focus on only 1 activity. **EDIT** Let's take the solution Robert Fowler had at xerox, which made him invent the Interface Segregation Principle: &gt; The solution suggested by Martin utilized what is called the Interface Segregation Principle today. Applied to the Xerox software, an interface layer between the Job class and its clients was added using the Dependency Inversion Principle. Instead of having one large Job class, a Staple Job interface or a Print Job interface was created that would be used by the Staple or Print classes, respectively, calling methods of the Job class. Therefore, one interface was created for each job type, which were all implemented by the Job class. [source](http://en.wikipedia.org/wiki/Interface_segregation_principle#Origin) If I were him, I still would have created 1 interface per job type. However, I would also have created a Job interface that would extends the job type interfaces. Then, each job type class would implement their own interface and the ConcreteJob class would implement the Job interface. The only difference is that we modelize our whole domain using interfaces, then we create our concrete classes that use those interaces, and of course, inject our dependencies using a Dependency Injection software to avoid coupling.
* Use [password_compat](https://github.com/ircmaxell/password_compat) (also from ircmaxell) * Get a better host
As long as you running higher than 5.3.7, use https://github.com/ircmaxell/password_compat, it is a drop in replacement for the 5.5 functions.
Removing from the API and removing from the DB are kinda different actions. They don't both have to happen at the exact same time. You can play around with things like [Laravel Soft Delete](http://laravel.com/docs/eloquent#soft-deleting) so that even when the API hard-deletes something (makes it unavailable to the rest of the API), it's still lurking in the database for a little while and can be set up to return 410. Then make a cron job that clears stuff out after a week and that'll go back 404. Without the Laravel ORM then yeah, a list of recent deletes could go into Redis or something. That's _if_ you care about 410. It's optional like I said. :)
&gt; I'm using Rackspace to host my server Is it a fully managed server? Throw in a ticket, request to be upgraded to php 5.5 and make them do it. Is it just a hosted server? Which OS? If it's not managed by rackspace, you'll need to update it.
Why don't you use [crypt](http://ca3.php.net/manual/en/function.crypt.php) ? If you use a proper salt, everything should work perfectly well. On top of that, [password_hash](http://ca3.php.net/manual/en/function.password-hash.php) is compatible with crypt, so when you'll move to php 5.5, you'll be able to change your code to use password_hash without modifying your data.
Is this Rackspace Cloud Sites? If not, just do this: sudo apt-get install python-software-properties sudo add-apt-repository ppa:ondrej/php5 sudo apt-get update sudo apt-get install php5 php5 -v This will install a fresh PHP 5.5 But, you may not need 5.5 at all. Lithium's Password class is rather nice: http://li3.me/docs/lithium/security/Password. (Source: https://github.com/UnionOfRAD/lithium/blob/master/security/Password.php) Edited per chrisguitarguy's comments.
My first talk will be on why people shouldn't use Laravel, if that counts as a Laravel talk?
&gt;Basically you're separating the linux kernel from all the crap the comes on a distribution. Interesting, I should do more research into Docker, isn't the kernel part of the distro though? E.g. you would hope your LTS version of Ubuntu wasn't using a bleeding edge kernel build? &gt;Well, you certainly can if you have linux in production Agree to disagree, you can get close at best. &gt;No, you dont, thats not how the workflow works. If you're supporting a bunch of different third party apps that you can't control, I can certainly see the benefit. This is one of the downsides to OSS - millions of projects, hundreds of maintainers. &gt;you can re-create those circumstances in dev by severing the pseudo network Again, agree to disagree. I believe maintaining that full stack in development is detrimental in most cases. If you treat all the components as black boxes that interact you can just mock out what you need to and write tests to ensure your component behaves appropriately. On the other hand, if you have real systems that interact then everything becomes a lot more difficult to manage and debug: email didn't send? is it the mail server, the network, the code, the dns, the spam filter, etc? vs mail didn't send? it's the code!
Regarding your second point: /r/webhosting 
Another alternative: https://gist.github.com/marcoarment/1053158 it's a bit more dated than password_compact but it should still do a solid job.
I think this is a great idea and especially so if you are able to record the talks and release them for free. A few people have mentioned [NomadPHP](http://nomadphp.com) Nomad is GREAT if you don't have a User Group in your area. It's also great to **supplement** your existing UG. If you **don't already** have a UG in your town / city / igloo then guess what? **You are the UG leader** If you need help getting started let me know. You can reach me at Joe at NomadPHP [dot] com. NomadPHP is **not** a replacement for going to your local UG. NomadPHP costs money for a couple of reasons: Speakers get paid. FuzeMeeting (the online conference service) costs money. NomadPHP has started doing Lightning Talks before the primary US event. These talks are recorded and released for free. As a matter of fact, they have both just been posted as I was typing this reply. [Selenium Testing](https://www.youtube.com/watch?v=LIzyhP-YGyY) and [What RabbitMQ can do for you](https://www.youtube.com/watch?v=4lDSwfrfM-I) TL;DR Start communities, need help? get at me, NomadPHP is awesome (I'm a bit biased)
&gt; sudo apt-get install python-software-properties That should be first in your list of commands. It's what installs `add-apt-repository`.
But it wont be the same without company sponsored beer.
I am a mirror. You be nice, you get nice in return.
Here's a breakdown that I did [on StackOverflow](http://stackoverflow.com/a/17073604/338665). The post goes into more detail, and references, but here's the breakdown that I did (in rough order of recommendation): 1. [5.5's password_hash](http://php.net/password) - 5.5.0+ 2. [5.5's password_hash compatibility library](https://github.com/ircmaxell/password_compat) - 5.3.7+ 3. [Zend\Crypt](http://framework.zend.com/manual/2.0/en/modules/zend.crypt.password.html) 5.3.2+ 4. [PasswordLib](https://github.com/ircmaxell/PHP-PasswordLib) 5.3.2+ (but supports many other algorithms as well) 5. [PHPASS](http://cvsweb.openwall.com/cgi/cvsweb.cgi/projects/phpass/PasswordHash.php?rev=1.8;content-type=text%2Fplain) 3.0+ (yes, PHP 3.0+, but not bcrypt until 5.3.2+, and some 5.2 installs) 
I think the main issue with this article is that it was based off of that awful awful pile of bollocks over on PHPClasses: http://www.phpclasses.org/blog/post/234-PHPNG-Dramatic-Speedup-Features-Coming-in-PHP-6-Release.html If you take anything that blog says as true, likely, fact, etc then you're really gonna have a bad time. 
My only critique would be that it is a bundle. Right away you "lock" it's usage into Symfony2. I think this should be a "library" with a lightweight bundle available to integrate into Symfony2.
This is something I have struggled with as well. What I have done is develop the library within the project, even committing library code to the project repo. Once the library is in a state that I would consider stable, I extract the library. I just do a copy/paste so I do not get any VCS history but you could probably do some kind of subtree split with git to get the history as well. Once the library is separated, I include it with composer and do any other changes in the vendor dir.
To be fair, this is present in Laravel 3, not 4.
Digging through that, I'm going to have to say no. Plenty of issues there. Will likely take some time to report them, but architecturally, there are significant issues (including plenty of duplication). Also, the [Hashing Package](https://github.com/cartalyst/sentry/tree/master/src/Cartalyst/Sentry/Hashing) is full of some fun stuff. And by fun, I mean fun like a hole in the head :-)
Rackspace has nice chat support - whenever I contact them with some other question I also ask 'hey what about PHP v5.5?' .. their response is always 'hmmm haven't heard anything about upgrading to that yet' .. I'll try to get a formal ticket opened ..
Yes I'm using Rackspace Cloud Sites - it comes already set-up with MySQL / PHP etc .. I switched to them a while back when my own server suddenly got popular following some tech blog coverage and I needed to quickly switch to a hosted platform ..
Or you can use [phpass](http://www.openwall.com/phpass/)
You can certainly call them what you want, but I don't think "flashers" is a very common term for this type of UI element. Usually, it's a _[notification](http://plugins.jquery.com/tag/notification/)_, _[alert](http://getbootstrap.com/2.3.2/javascript.html#alerts) ([2](http://getbootstrap.com/2.3.2/components.html#alerts))_, or even _growl_, etc. I honestly though that a "flash message package" meant some .swf that you created for banner ads. 
How is that site still going? Even disregarding the blog it is, and always has been, a complete mess of a website.
I can't do that to the managed servers and still have them managed by Rackspace. The company I work for outsources all our production machines to RS managed boxes. I agree with your point, but unless there is dedicated budget for someone to manage it small agencies are somewhat stuck with distro packages.
And that's why we can't have nice things. The distros do what they want (forking software packages). The hosts don't want to actually do their job, but instead want to offload it to the distro. And the people deploying the sites don't want to take responsibility either.
Very interesting thread!! Thanks for following up :) I understand I might be better off just saving the files in a non-public folder. But in the end, all I wanted to achieve is "test-driving" PostgreSQL. I might revisit how/where I store my files if my application becomes more useful than anticipated.
Which OS are they running your server on? If it's CentOS, point them at the [Webtatic PHP 5.5 packages](http://webtatic.com/packages/php55/). These allow people to deploy the latest-and-greatest PHP versions. They also have no extra requirements (unlike the Ubuntu ones that want to also upgrade your MySQL and Apache..)
Obnoxious: annoying or objectionable due to being a showoff or attracting undue attention to oneself: an obnoxious little brat. Also, since you mention being nice, you might want to remember that the next time you command someone, to read YOUR article.
Well, both "Sha256" and "Whirlpool" are both horribly insecure. Allowing them to be still used on new applications is... Well... negligent. Bcrypt is decent, but default cost is low (1/4th the runtime of PHP's conservative default) and it doesn't use a strong enough random salt. And the native one which uses password_hash (good) has a lot of superfluous code about fallbacks (which could - and should - be handled in a wrapper, or outside of that class). As far as duplication: pushing the auth logic into the repository is weird, and requires all of the auth logic to be duplicated. 
You should take a look at [Guzzle](http://guzzle.readthedocs.org/en/latest/), it's really awesome for consuming APIs
shameless promotion follows: the May issue of php[architect] magazine has an article on using [Guzzle to create API clients](http://www.phparch.com/magazine/2014-2/may/)
I get what you're saying but the term most developers have adopted for these kind of messages is actually a "flash message" because the message is being "flashed" to the session for one page load and then it's forgotten. The flash terminology was used in both codeigniter and laravel, and I think it's pretty common. Naming wasn't really thought on for long either way as this is purely for practice
I don't really know about documentation, but since my first language was Basic (and later Pascal), I've always taken this to be the norm.
You omitted an important clause in the documentation: &gt;***If you compare a number with a string or the comparison involves numerical strings***, then each string is converted to a number and the comparison performed numerically. 'a' &lt; 'b' isn't either of those things (they're both strings, and there are no numerical strings), so there's no conversion. Additionally, in the table below that, string vs string fits the first criteria, the result of which is listed as "numerical or lexical comparison". This has been the case for as long as I'm aware, even if it's not terribly explicit in the documentation. And indeed, you can do a string comparison of dates like that, if they're in the right order. It often makes more sense to deal in timestamps for speed, plus it just makes more sense to compare integers for that kind of use. The fact that it works for strings is a quirk of how strings are sorted - a useful and dependable quirk, but a quirk nonetheless. The reason it works is because characters are compared individually based on the value of their character code, which conveniently also happens to be in alphabetical order, with all caps coming first - 'A' &lt; 'a', and 'a' &lt; 'b' but 'a' &gt; 'B' - and numbers before that. You can see some side effects of this if you look at an [ASCII table](https://en.wikipedia.org/wiki/Ascii#ASCII_printable_code_chart): '[' &lt; 'a', but '{' &gt; 'a'. I'm not sure how that extends to unicode, but I would assume it just sorts by their UTF8 character codes.
That's an interesting find. That does seem to at least hint at it, but it really isn't clear. That same table on row 4 which also covers comparing strings to strings says it will "translate strings and resources to numbers, usual math". So maybe it first tries to convert the strings to numbers, and if the comparison is still equal (or maybe if the number conversion fails?) then it secondarily tries to compare them alphabetically? If this is really what's going on, most PHP programmers have absolutely no idea about this (just judging from answers to questions here, on StackOverflow, and in the PHP documentation comments). Edit: From cincodenada's comment, he does point out that there is a clause below the table that says the numerical comparison is done "if you compare a number with a string or the comparison involves numerical strings". The documentation should really follow that with a sentence that says the comparison is done alphabetically if the strings are not strictly numerical. 
&gt; You are the UG leader If you need help getting started let me know. This is my main reason for not being a fan of Nomad. As someone that's been running a usergroup for the past 5 years I see it as halting the potential seed of local usergroups. I know there are places that don't have a local usergroup and would benefit from one but there's no one to start them so they see Nomad and then don't bother because their need is met. The other reason being that it costs money. I don't know how other user groups do it but no user groups in my area PHP or otherwise charge for attendance. I get paying for premium guests but that's just against my philosophy
&gt; "Sha256" and "Whirlpool" Just tell him to whip em out. They're in there for compatibility, but they can go easily enough. Your password_hash API is supported as a hasher for those that have it / want it. &gt; As far as duplication: pushing the auth logic into the repository is weird, and requires all of the auth logic to be duplicated. Like what? The repository stuff is so this package can integrate out of the box with a shitload of existing frameworks. It's impressively functional and has been for a long time. This is v3 you're looking at and v1 and v2 have been excellent, but if you've spotted something I havent (I'm not a v3 user) then lemme know.
&gt; If you compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison performed numerically. Good point. I think what is missing is a follow-up sentence that says that if they aren't numeric, then the comparison is done as a case-sensitive alphabetic comparison. Not only that, but the strings have to be *strictly* numeric it seems, or else it will fall back to a string comparison. So '20' &lt; '2' is compared as numbers and is false. And intval('20foo') is 20 because of how PHP converts a string to a number in that case. But yet '20foo' &lt; '2foo' is true because they are compared alphabetically because the strings aren't *strictly* numeric. And 20 &lt; '2foo' is false because in that case PHP is ok with converting the '2foo' to an integer because the 20 is an integer. All very interesting.
Annoying is in the eye of the annoyed. ;-)
Yeah, "numerical" is different than "parseable to an int with intval()". They're just completely separate codepaths. Going through your examples: the first and last examples both fall under the first clause (there's at least one numerical string or number involved), so they're converted to numbers, but with the middle one they're both just strings. All this is (I believe) intended to make things work as you'd expect in a loosely-typed language like PHP: compare numberish things as numbers, compare strings as text. But when you get into weird corner cases where there's not clear expected behavior, you get weird stuff like this. In any case, it's always best to be explicit when you're depending on things - use intval() when you're expecting integers, maybe use strcmp() if you're comparing strings that might be numberish.
Yeah, wanted to wisecrack "since C". 
Debian can use the DotDeb.org repo too.
Flash message makes perfect sense to me
You can also increment and decrement them with ++ and --
You need to provide source for $doctor-&gt;get_all_locations(), we can't look at the math used to reach the end results unless we write it up our self's.
If you're going to use `crypt()` directly (not using a library), be intimately aware with [common issues implementing it](http://blog.ircmaxell.com/2012/12/seven-ways-to-screw-up-bcrypt.html)...
Not everything, just the programs that allowed for the user account the PHP or Apache process runs on. If it's root, then... well...
Very good advice!
&gt; Why not use the public, private/protected modifiers to expose only the required interface instead of creating separate interface definitions. We already use different scope in our classes. Obviously all our methods are public in the interfaces. Maybe I didn't understand your question properly? &gt; I think it is generally considered not a worthwhile to create interface definitions for things that don't have/need multiple implementations. Each interface can be used by multiple classes. Let's say we want to modify the behavior of a class, we can simply create a new class that implement the same interface, change the behavior and instantiate that new class instead of the old one in the dependency injection declaration file. So, let's say you want to change the cache in memcached instead of in files, you can do it very quickly without altering the core code base.
The project is heavily separated so that each part can be taken and added in another software, easily. Now a days, we use package managers to manage dependencies. What's the problem with having the code separated? Would you prefer to work in a code base of 2k+ classes, all mixed up in 1 huge repository? I worked that way in the past and it was a nightmare to manage, specially when we wanted to abstract 1 sub-software into another project.
Usually, before I save anything to the database (and before it gets to the DAO layer), I would upload the file and store it somewhere, either on the local file system or a remote storage (like S3). I would then set the files new path as an attribute on the data set before saving.
&gt; Meh. I'm not saying it on a holy high horse of "thout-shall-not-copy-paste". I'm saying it as a security auditor. Who had real problems trying to understand what was going on, because of duplication and muddy abstractions. And anytime there's duplication of security sensitive code, that's a **massive** problem in my book...
I think the better thing to point out is that it's _designed_ to consume HTTP APIs. It's so good at it that the AWS SDK doesn't even really provide their own libraries for accessing their API, they just write thin specifications sitting on top of Guzzle and distribute that as their SDK. That should read as a resounding endorsement for most people looking into using the library.
A good chunk of the WP codebase is smoothing out idiosyncracies between PHP versions and configurations. One of their goals is to make it work anywhere and to allow users to upgrade from the earliest versions to the new hotness with no hassle. 
- http://www.php.net/manual/en/language.operators.comparison.php - http://www.php.net/manual/en/types.comparisons.php
Just for the sake of conversation: is the file required in the first place for whatever you're trying to accomplish? For example, if I want to sign up for a site/service, uploading an avatar is not usually part of that initial process. Uploading a file, even small ones, only to throw a validation error and force the upload again (if you haven't created something to handle exactly this scenario) is bad user experience.
Awesome, thanks again!
Let me know when you need an editor. :)
Very good point. Thanks for bringing that up. I am still planning the system out in my head at this point, so it's easy to overlook these types of scenarios!
You're not understanding - Put this code into a nice formatted version - codepin.io, pastebin, etc... Hell, even use the code tag on Reddit.
That would actually work in C as well assuming `l` was a `char`
I like this, if only because I'm tired of hearing MVC purists get butt hurt whenever someone uses the term in the context of modern web frameworks, which is "incorrect". I hope to add more to this discussion sometime soon when I'm less busy. Thanks for giving me something interesting to read. :)
There's a reasonable degree of separation between components of a framework. I have a very hard time believing that 500 repositories is reasonable, especially given that a framework like Symfony can come in well under 60 (half of which are subtree splits). I mean, you have an entire repository devoted to [a ten line stub class](https://github.com/irestful/ConcreteDependencyInjectionObjectPlaceHolders/blob/master/ConcreteDependencyInjectionObjectPlaceHolders/Infrastructure/Objects/ConcreteDependencyInjectionObjectPlaceHolder.php). Claiming that each component can be used independently is bogus. How many of those repositories have less than a ten dependencies? [ConcreteApis](https://github.com/irestful/ConcreteAPIs) has a dozen, and the first dependency listed - [ConcreteIRESTful](https://github.com/irestful/concreteirestful) has **twenty three**.
&gt; Cent/RHEL 6 can get 5.5 (and stay managed by rackspace) via the IUS Repo. I'd sooner use [Remi Collet's repo](http://rpms.famillecollet.com/) - he's the PHP maintainer for Fedora, and he goes out of his way [build as much of PECL as humanly possible](http://blog.famillecollet.com/pages/PECL-extensions-RPM-status).
&gt; I'm tired of hearing MVC purists get butt hurt whenever someone uses the term in the context of modern web frameworks, which is "incorrect" That is an additional benefit. ;-)
I would implement this through an Application Service. For example: $userData = $this-&gt;input-&gt;post(); $avatar = $this-&gt;input-&gt;files('avatar'); $user = $this-&gt;userService-&gt;createUser($userData); //throws an exception on failure $this-&gt;imageService-&gt;attachAvatarToUser($user, $avatar); //throws an exception on failure $this-&gt;userService-&gt;update($user); The image service class would be responsible for taking an uploaded file, validating it, and associating it with an existing user. This would include resizing the image, saving it as a specified format, moving it, etc.
&gt; So it appears the View and the Model in MVVM are relatively closely tied, whereas in ADR they are not. No, that's not true. The view model is a representation of the data which is view-agnostic. It has nothing to do with the business-side of things. 
Get a list of all the file names, sort them by filemtime() and delete the oldest ones? Unless old cache files are used very often, then you'd have to start tracking how many hits each file gets in order to find the useless ones.
[**+Queekusme**](https://plus.google.com/109472633236419955362) [_2014-05-27T21:25:34.078Z_](https://plus.google.com/109472633236419955362/posts/BQzECB5bY3F) &gt; &gt;I'm sorry but your arguments are all contradictory... what you say is bad is actually a benefit such as it being global. &gt; &gt;This really is a poor description 
what is the cost when a .cache file doesn't exist?
The bit before that table also says this, emphasis mine: &gt;comparison is done according to the following table **(in order)** Which implies that you read down the table, and the first row that applies is how PHP will treat them. So for string vs string, the fourth row will never apply, because that matches the first row. Something like string vs resource or number vs string, on the other hand, falls through to row four.
Glad to see a proper explanation of what PHPNG is. This will hopefully combat some of the misinformation on SitePoint and PHPClasses.
&gt; There's a reasonable degree of separation between components of a framework. I have a very hard time believing that 500 repositories is reasonable, especially given that a framework like Symfony can come in well under 60 (half of which are subtree splits). Symfony doesn't separate as much as we do, but I believe this is a problem. If someone wants to use their [UrlMatcher](https://github.com/symfony/Routing/tree/master/Matcher), you would need to use the full [Routing](https://github.com/symfony/Routing) system, even if there is a ton of things in there that you don't need. I'm not saying that their design is bad. I'm saying that I prefer to separate more, so that people can cherry pick what they want in their project. Of course, if the project they use is in a higher level, they will also download a lot of dependencies, but obviously they will need them. This is the case with the [ConcreteAPI](ConcreteAPI) and [ConcreteIRESTful](https://github.com/irestful/concreteirestful) repositories. A good example of this is the [ConcreteDependencyInjectionCompilerApplications](https://github.com/irestful/ConcreteDependencyInjectionCompilerApplications). This is an application that compiles dependency injection json files into serialized objects. This is an application in itself that we use in iRESTful, but could be used in any project. (I'm currently writing a post on it and why we built our own DI application.) Also, anyone could replace its [ConcreteFileDiskDependencyInjectionServices](https://github.com/irestful/ConcreteFileDiskDependencyInjectionServices) dependency, which writes the serialized object on disk, by a dependency that writes them in memcached. This could be a good way to compile once, and use the compiled objects from multiple web servers, under a load balancer. &gt; I mean, you have an entire repository devoted to a ten line stub class. That is a placeholder class (used in unit tests mostly) that is used by almost every concrete class repositories. Obviously, it had to be in its own repository to not duplicate the code everywhere. &gt; Claiming that each component can be used independently is bogus. How many of those repositories have less than a ten dependencies? ConcreteApis has a dozen, and the first dependency listed - ConcreteIRESTful has twenty three. Yes, and each of them are small. If you want to replace a class in one of these dependencies, you just have to modify the composer.json to replace the class and change the dependencyinjection.json file and your new class will be used instead of the old one. It is exactly what I claimed. Could you please tell me why it is a problem to use a lot of repositories to separate the project in multiple smaller projects, to make it easier to manage and re-use in the long term? Saying that others are not doing it is not a good reason. 
That's interesting, I'm curious to see how a JIT implementation of PHP would work.
i suggest not to limit yourself with PHP, and find a web agency that trains young people in the ways of the Web if you want to keep on PHP.. there are plenty other languages you could use.
Yes I did read it. They are 3 years behind HHVM, and it's really stupid that they don't just work with the HHVM team to bring the existing JIT there up to speed and working in PHP core, rather than trying to reinvent the wheel. We're at a delicate crossroads right now and they're actively deciding to build their own JIT rather than pull in the existing work from the community. They're ensuring that the two projects fork and never interoperate by doing this. http://www.sitepoint.com/php-fights-hhvm-zephir-phpng/
Managing custom compiled releases takes a lot of work that the vast majority of people don't have the time to do properly. While some distros may get some things wrong, they are good about fixing the important bugs, which is sufficient for most. While being able to custom compile is a important skill to have, knowing what you are getting yourself into and where you can best spend your time is a even better one. 
Thanks for the input, the code sample is much appreciated and really helps to clarify. Sounds like I am nearing the right track...
Noticed the only comment regarding HHVM was massively down voted. Can someone please explain how PHPNG and HHVM are different? I haven't used HHVM so I have no idea if it's a drastic shift or not. Also, if someone could comment on the current state of HHVM that would be awesome. Thanks :)
Lithium is most certainly not dead. There's some great plans for the future.
The reason for this is because they want to improve the core PHP language *first*, to bring it more in line with how computers work to gain much needed performance increases, and *after* that they'll work on creating a JIT compiler for it. In other words, PHP Next Generation is ***NOT*** about bringing JIT to PHP. It's about improving PHP as a language so that the language can be more efficiently moved to a JIT-based architecture.
I'll copy/paste [my response][1] to them: [1]: http://www.reddit.com/r/PHP/comments/26n16i/php_next_generation/chsuzwn &gt; The reason for this is because they want to improve the core PHP language *first*, to bring it more in line with how computers work to gain much needed performance increases, and *after* that they'll work on creating a JIT compiler for it. &gt; &gt; In other words, PHP Next Generation is ***NOT*** about bringing JIT to PHP. It's about improving PHP as a language so that the language can be more efficiently moved to a JIT-based architecture.
joomla hands down ;)
Haha, damage control
I don't think you're connecting the dots. All of the work they are talking about doing is already done... It doesn't take a lot of brains to divine that, there is already a JIT compiler for PHP, so there is also already the underlying changes to internal APIs needed to support this. It's just that nobody from the PHP core team was involved in doing it, so now they're going to slowly scaffold in some kinda-support for a JIT architecture and ignore the fact that someone else has already done it, and along the way they're going to allow the projects to diverge. Facebook announcing Hack was an affront to PHP's current path, for sure, but there was still a possibility for these two teams to work together until this announcement.
This is a plea to reason that we not jump on the "PHP is always awesome" bandwagon. I'm the one that got massively downovted below. Can someone explain to me how this is better than just trying to upstream HHVMs work? It seems like there is a massive amount of wasted effort here.
Nonono, they're not talking about underlying changes to the APIs. They're talking about changing the language itself. Which means, **breaking compatibility with existing PHP software**. Similar to what Python did with Python 3. Not just the background ways the PHP API works. But the APIs themselves that web developers use.
&gt; This branch does not include JIT capabilities, but rather seeks to solve those problems that prohibit ... a JIT capable executor achieving optimal performance by ... cleaning up some core API's. Unless I'm mistaken, a 'core API' is the set of APIs that make the language what it is; the most frequently used parts of the language. I might be wrong about that though.
&gt;Am I missing a nuance here? Yes, you are. There are two different model layers. One is the traditional model layer which you are referring to (the "M" part of "MVVM"), and the other are view models (the "VM" part of "MVVM"). The view model is specifically for representing data in the view. Rather than assigning the data directly to the view itself, you assign it to the view model which is then passed to different renderers via content negotiation. This means that our data can be exposed in several different formats such as HTML, XML, JSON etc. without you having to produce any extra code for those cases. Typically in MVC people rather sloppily assign data to the view which are presentation-specific, such as exposing variables which are only of use for a HTML view, but not a JSON view. MVVM forces you to think about your views differently and properly design your data as if it had been exposed through a web API. This approach leads to views that are less coupled to the rest of your code base which also means that your views are more easily replaced. 
&gt; During this research, the realization was made that in order to achieve optimal performance from PHP, some internal API's should be changed. They're talking about the same APIs here.
Hm, fair enough. Granted, HHVM is a complete rewrite from scratch, and PHP probably wants to avoid that.
Really really had to say "This is the best for X" when X is such a broad topic.
If it's simple then a microframework like Silex can be good. Sometimes you only need a small amount of scaffolding to keep things tidy. Less code is usually better. Having said that Apigility does look really cool but I wonder if it's been established long enough (and has settled down enough) for me to trust it for a business critical application.
Shows you how old PHP is lol. (not a bad thing thou)
Lots of languages that are popular are even older. Age doesn't matter in the slightest.
&gt; Can someone explain to me how this is better than just trying to upstream HHVMs work? HHVM is an entirely different thing to PHP; it is *not* a fork of PHP, it is a re-implementation from the ground up. It simply does not make sense to talk about sharing implementation details between projects, they are very different animals.
Can't tell if this is genius or madness or both. Mostly because the example is so littered with enterprise Java-esque ridiculously\verbose\class\names\with\zero\meaning that it's nearly impossible to consume.
Right, unless I misunderstood what they meant you can perfectly import several configuration files in [PHP-DI](http://php-di.org) too (these files could come from sub-packages or wherever). And if you wanted only to use JSON with a subset of the features, you could perfectly implement an alternative [`DefinitionSource`](https://github.com/mnapoli/PHP-DI/blob/master/src/DI/Definition/Source/DefinitionSource.php). And Symfony obviously does that too because that's how bundles work. Does the container implement [container-interop](https://github.com/container-interop/container-interop)?
I'm aware of the two separate elements. However, the pattern originator specifically says the Model (not the ViewModel) in the part that I quoted. He goes on to talk about the ViewModel in a later paragraph. So, again, how is it that the View is *not* bound directly to the Model in simple examples, as described by the pattern originator?
&gt; Do they have a declaration file parser, or do you need to setup all the dependency configurations in PHP code? All their examples shows php code only. "We" (I'm the project lead) use PHP code, but as /u/mnapoli says below, it'd probably be easier to write a JSON converter for that than an entire DI mechanism. And yes, it supports setters as well as constructors. The is partly because Aura.Di also supports configuration for interfaces and traits, so that they can have DI definitions attached to them; then when any class implements or uses them, the class inherits those configs.
It matters when you want to change the "ground structure" of it. The older it is the harder it gets. That is a total normal thing. 
ahhhhhhh!
He's not saying that the model is tightly coupled with the view, not at all. He's speaking of data binding, which is a concept which is applied in the desktop-context. Desktop programming has two-way data binding, that is, the view model has properties which can notify listeners that they have been changed. So, if the business logic performs changes to a property of the view model, those changes can be propagated to the view via events. Likewise, if you perform changes on the view-side of things, those changes can be propagated back to the business logic and update the relevant parts. This is handled via [INotifyPropertyChanged](http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx) in WPF. 
Again? 
Ah so -- "is data bound" being the key phrase, which I misread. Thanks for that. I'm going to have other questions as I flesh out that part, and you are the only one who has taken the time to discuss the MVVM portion. Would you care to correspond by email instead of here?
I get the feeling that separating every single "Controller::action" (to use MVC terminology) into a separate Action class and a Responder class is violating the [MIMC](http://www.principles-wiki.net/principles:more_is_more_complex) principle. I understand that controllers can often times get too complex, but at that point then it seems reasonable to break up the controller into [multiple classes](http://www.principles-wiki.net/principles:add_more_classes). However, proposing two classes per route as a principle behind ADR is excessive, in my opinion. I don't like the trade off. I would rather deal with complex controllers when it gets to that stage (it isn't hard to break it up) than to inevitably have way too many Action / Response classes as a preemptive strategy to avoid complex controllers. Furthermore, what is the strategy to deal with a situation where you have way to many Action and Response classes?
I'm not sure if the front page of php.net was the right place to make that post. Say, a developer blog would have been a better fit IMHO. At least to me, "When we aren't looking for pictures of kittens on the internet..." isn't inspiring confidence ;) 
I suppose that's true.
&gt; I get the feeling that separating every single "Controller::action" (to use MVC terminology) into a separate Action class and a Responder class is violating the MIMC[1] principle. Actually this seems quite fine. Seperating these concerns follows the [Single Responsibility Principle](http://www.principles-wiki.net/principles:single_responsibility_principle) and reduces complexity for each. &gt;Furthermore, what is the strategy to deal with a situation where you have way to many Action and Response classes? Usually you should have just the right amount of Actions and Responses. One for any usecase. If you feel you have too many in a sense of that it the sheer amount, you might have to rethink your domain modelling and break it up into seperate domains. 
There's currently a discussion on the php-devel list about removing this news item due to issues with its content and style. ~~(Apprently when originally, briefly, discussed on IRC it was believed this was going to be a personal blog post, rather than a php.net news item)~~ As it's already hit the internet, you'll be able to find a historical record of it in [version control](http://git.php.net/?p=web/php.git;a=history;f=archive/entries/2014-05-27-1.xml) You can find the discussion thread on the [gmane list mirror](http://news.gmane.org/gmane.comp.php.devel) - [direct link to thread](http://news.gmane.org/find-root.php?message_id=CAH%2dPCH54%2bqGf7CzY1Q5r28ck5Fkv0vxQ6%5fCj4%5fy1R1mHHezc7w%40mail.gmail.com) Edit: I stand corrected
&gt; I was under the impression that the Action and Response classes are not part of the domain layer. Not in this example, correct. But imho this example is pretty bad in terms of domain design. Usually you would want to split your domain's capabilities too (SRP!), i.e. with 'Actions' working as Value/Parameter-Objects and corresponding handlers for each usecase. And maybe implementing proper CQRS. :) EDIT: from the commentary: &gt; Ambiguous Domain &gt;Domain covers a lot: not just the business domain, but environment and application state as well. It might be better to call this a Model, but that too is somewhat ambiguous. &gt;Additionally, it may be that the Action should pass a Presentation Model to the Responder instead of Domain data. But then, maybe the Domain service layer used by the Action returns a Presentation Model that encapsulates application state. 
&gt; Not in this example, correct. But imho this example is pretty bad in terms of domain design. I don't believe an example of domain design was given. &gt; Usually you would want to split your domain's capabilities too (SRP!) I don't disagree. I still fail to see how this means having to split up every route action into a class to avoid violating SRP. Based on the Ambiguous Domain definition, an Action (and responder for that matter) are not part of the domain. They deal with the domain layer, but they are not part of the domain themselves. Actions and Responders are part of the presentation layer, not the domain nor the application layer. 
Huh, you lost me. Care to elaborate?
&gt; It's about improving PHP as a language No, it's about improving the interpreter, because the interpreter, as it stands, sucks.
Decouple. One way to do it is with a mapper layer between domain and persistence objects. http://en.wikipedia.org/wiki/Data_mapper_pattern
&gt; Can someone please explain how PHPNG and HHVM are different? I haven't used HHVM so I have no idea if it's a drastic shift or not. This is the reason a post like this is necessary. Because the average person doesn't realize that the average blog talking about these things is so god-aweful that you can't deduce what's happening. That's why this sort of thing is needed from the project. So, to answer your question: HHVM is a rewrite. From the ground up. Using literally none of PHP's Engine's code (it does share a port of some of the standard library and core extensions). It's in a different language (multiple actually). It's in a different style. It uses different design principles. It uses different licenses. Really, the only thing that HHVM and PHP have in common, is syntax and behavior (and a few contributors). PHP on the other hand, is a continuous project that's evolved since 1995. It's had 2 major engine rewrites (PHP -&gt; Zend Engine 1 (PHP4) -&gt; Zend Engine 2 (PHP5)). It's iteratively improved, while trying to maintain BC. Now, one of the most important things to consider is extensions. Both HHVM and PHP have extension mechanisms to write hooks to lower level code (PECL for PHP, and a C++ layer for HHVM). Both work differently, but both work. There's a HUGE amount of code out there in PECL extensions, it's one of the reasons PHP is popular with large sites. For PHP to just "adopt" HHVM's engine, would basically be akin to throwing away the PHP project itself. Every extension would need to be rewritten (not even ported, rewritten). Every tool chain would need to be rewritten. And a large portion of users of PHP would be stuck without a version they can use. HHVM targets only *nix and Windows. But PHP also targets embedded platforms and other systems. Heck, some WiFi routers and traffic camera systems run PHP. There's been a TON of FUD out there about HHVM. Almost all of it spread by well-intending bloggers who really just have no idea about either project. Some want to try to seem like they know what they are talking about. Others just want to ride the fad for more traffic. But the majority of posts discussing HHVM are pure FUD. There is more at play than just raw performance numbers (no matter what some people may think). Yes, HHVM is fast, but there are [a number of issues](http://blog.ircmaxell.com/2014/03/an-opinion-on-future-of-php.html) that it faces, that the community *must* realize. And no, a **JIT** compiler is not the end-all-be-all of runtimes. PYPY (2007) is awesome, but it still represents a tiny fraction of python runtimes. Why? Hell, the PHPNG proof-of-concept makes up a significant portion of the difference between PHP and HHVM. And that's just with memory management tweaks. 
&gt; Say, a developer blog would have been a better fit IMHO. Some backstory: That was the original intent. Then one of the admins for the infrastructure said that "if you make 2 posts, we'll make you a blog". So this was post 1. Was the front page the best place for it? Perhaps, perhaps not. But the point was that it got information out. We could sit down a bike shed until the cows came home. We can backseat drive until we're blue in the face. But the point is Joe saw a need, took an initiative, and did it. That should be commended. If for nothing else than he contributed.
Go home iRestful, you're drunk.
Yep I see the underlying info in the post was a needed clarification. I just personally would liked to see, how would you say, a bit more "professional" tone on the post. Something to better fit on the front page of php.net.
&gt; I use a static **void** main method on a uniquely named class. How do you specify the return type in PHP?
&gt; Apprently when originally, briefly, discussed on IRC it was believed this was going to be a personal blog post, rather than a php.net news item Yet more FUD. When it was being discussed, those who were discussing it knew it wasn't for a personal blog post. That was just someone who wasn't involved making a guess. Totally not true.
Remi's repo is great, I use it on my non-managed boxen. But with Rackspace managed servers, they won't support Remi. They'll only support IUS and EPEL.
I'll take that ... I'm no blogger and don't usually deal with humans, ask anyone. This was meant to be the start of us talking to the world, a reliable source of information for the blogosphere and users, so I made a joke about kittens and used inspirational language ... and am shot down for making jokes and being opinionated. So anyway, don't really know how to write, but am aware of the facts well enough to communicate them to anyone, I'm not sure we'll get to continue with this project, the idea of a blog, I hope we are and I'll continue to explain stuff and hopefully get better at it .... Incidentally, I find it hard to believe there is an internals developer that has never actually looked for a kitten on the internet, so it's worth mentioning that there's a very high chance that even the joke had some factual validity .... I thank you, for the sensible input ...
Purchased and hope that this will be a good reference for me to use. The biggest thing for me that I need to learn is how to set up the file system architecture. Things like htaccess and such I just can't get a grasp on it. Right now I just place my and php scripts in folders for ajax or pages to call which I'm sure is the most insecure way to do it.
Well PHP internals is discussing whether to remove the post or edit it because some find it too opinionated or whatever :/ (http://www.serverphorums.com/read.php?7,944577,944776#msg-944776) (and you know that already but others should know too)
value objects have an existing definition and it's not what you came up with. I'd change the name, no need to confuse things.
 public function evalString($code, $withPhpTags = true, $errorHanlder = null) { ob_start(); if ($errorHanlder) { set_error_handler($errorHanlder); } $this-&gt;evalCode = $code; if ($withPhpTags === true) { $data = eval('?&gt;' . $this-&gt;evalCode . '&lt;?php '); } else { $data = eval($this-&gt;evalCode); } if ($errorHanlder) { restore_error_handler(); } $this-&gt;evalCode = null; if ($data !== null) { echo $data; } return ob_get_clean(); } noooooooooooooooooooooooooooooooooooooooo
Sure, if you'd like. I'm also available over skype if you prefer that line of communication. Let me know which one you want and I'll PM you the details. 
&gt; $errorHanlder wut The entire snippet makes my skin crawl.
Thank you! I'll try to make sure to cover as much of that as possible. :)
you should really s/language/engine . All changes to php script behavior are considered bugs. Haven't dug into extensions' diffs for phpng, though.
`$this-&gt;userService` sounds like a bit of an anti-pattern ;)
If injecting application services into a controller is wrong, I don't wanna be right! (In all seriousness, a command object is a more sustainable solution, but I'm still learning and haven't had the chance to use CQRS in a real-world project yet)
There are plenty of [StatsD php client libraries](https://packagist.org/search/?q=statsd) already out there. I also recommend watching [this video presentation](https://www.youtube.com/watch?v=parmTnIr3gE) from PHP UK.
I hope we all get the relevance of this post http://www.reddit.com/r/PHP/comments/26n16i/php_next_generation/
I wish I could visit you right now and hand you all the cookies I can find in my house. Thank you for the awesome explanation.
Hey that's pretty cool!
&gt; I can't concur since I'm developing using dynamic languages for the past 10 years and I only encountered type issues a couple of times during this whole period. The author lost me at that point. Type issues are endemic to good OO and type hinting is one way to avoid them. Either the author hasn't worked on complex systems or is being obtuse. In addition, type hinting is one of the most powerful methods of creating self-documented reusable code.
What tool did you use for UML diagrams?
Stopped reading when I got to: &gt; The fact that PHP only supports single inheritance can be problematic
If you have a simple script with a couple classes, I might let your argument go. But type-hinting makes it **significantly** easier to maintain larger bodies of code with multiple developers and prevent one person from being the go-to knowledge base/owner of an application. That's *kinda* the driving force behind something called "open source" if you've heard of it. Posts like this are what are giving PHP a bad name and give people the ability to claim that PHP isn't an enterprise-level language.
&gt; But, I can still count the number of times I've run into a type-related bug on two fingers over all the years I've been here. That really makes you wonder if the reason you ran into so few type-related bugs is that the enforcement and self-documentation aspects prevented the majority of them from getting into the code in the first place.
I already covered this by [writing this comment](http://www.reddit.com/r/irestful/comments/26ethz/the_first_alpha_version_of_irestful/chsgnvd).
I went home, I'm better now!
Thanks for the advice! I already have hosting, but thank you very much for the offer :) I've had a look around and found a couple. One was hiring CodeIgniter devs and I looked at some of the other one's code and it was... horrible, to say the least. I know I'm not exactly an amazing dev myself, but they were using all procedural programming, `mysql_*` functions, sessions without any precautions and I even found multiple XSS vulnerabilities. I don't really want to be involved in something like that – does that make me too fussy?
PHP is one of the fastest interpreted languages out there. Any scripting language that's faster than PHP uses JIT; the rest are slower.
&gt; PYPY (2007) is awesome, but it still represents a tiny fraction of python runtimes. Why? Because it serves a tiny niche: people who need Python-only code to run fast on a tiny handful of platforms and CPUs, and can't port it to a better language for the job. HHVM exists for the same reason, but in a business context. It's a lifeboat, not the ship's engine.
WTF?
How does this not just lead to extremely complex Domains, and way too many Actions/Responders? 95% of your application will be in the Domain using this. It also appears that it could result very easily in the Domain being tightly coupled to the database.