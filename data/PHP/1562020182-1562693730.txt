Wow, I appreciate this article. I always thought that when you'd override serialization like this that you would get a pure JSON string. I was always confused as to how PHP would know which class to unserialize into. The example at the end clarified to me that it's just the class' contents that are overridden. That makes a lot more sense. I always avoided the Serializable interface for that reason. /u/nikic would it make sense to add a second example to https://www.php.net/manual/en/class.serializable.php similar to described in the article (using json_encode possibly)? I think it's a bit non-obvious how it behaves in the existing example because it uses `serialize()` inside `serialize()`. Takes some mental gymnastics to understand.
I'm pro-framework-less development so yes, we don't need a new framework.
Why? (Honestly curious)
Wut
I did too. After 3 years I'm almost fully recovered, the panic attacks are almost gone
Because I live in a place where $80 is a lot of money, like a week worth of food money. I already use a cuestionable license key and I would like to not worry everytime I open phpstorm praying for the key to work
I'm a hobbyist, I use Atom. It works great. I don't think I could justify the $200 price tag to program just for fun.
Symfony has param converters. You could write a simple converter to deserialize JSON into a DTO and then run validation on the object. You could then have a controller that looks nearly identical to the Spring Boot example you listed.
Laracasts is probably the best - he tends to live in the "practical world" as opposed to many others who get bogged down in silly trivial theoretical points. Although, he probably falls a bit short when you start considering larger application structure (you could learn a lot of this on day 1 when you join a big company, to be fair).
i'm about to start a MVC PHP course on udemy by John Doe Traversy Media i'd like to get some feedback on this one thanks!
what do you think about John Doe traversy Media ?
I don't know, I've only been programming for a couple of years but it seems to me nobody has time for best practices, only bug fixes and features.
John Morris
Laracasts is for learning Laravel, which is a (great) PHP framework -- but it's quite a bit different from plain old "PHP training". If you want to learn Laravel, Laracasts is the best.
Why bother learning anything else you kids today with your need to be well-rounded back in my day we had one tool it was a stick and we were glad to have it
Well truth be told I'm a fan of vanilla everything. Frameworks have never been my favourite. Which if why my favourite teacher if all time is Derek Banas on YouTube. Give me a fast 1 hour tut and send me on my way... Learn by doing.
Well, then I'm sorry for you. There's a lot more out there, especially if you work in long term projects, where quality pays a lot down the road.
My mom didn‚Äôt let me buy one.
You had a stick? We'll look at Mr rich here. I had nothing, I had to imagine a stick!
üçåüçåüçåüçåüçåüçåüçåüçå
Thank you for explaining it to me . Yeah I get the idea.
Is 10 bucks enough?
I think codecourse if a great site honestly! :)
It's what you make when you want to make something yourself but you don't have an idea for a product. So you make the tools. For example when I came back to PHP after a while away and 7 was out, I made a micro framework to try out all the new features. Sure I didn't post it here, nor am I using it for anything critical, but it isn't hard to see why people share it. Feedback is important for learning and praise is something most of us seek.
`array_all` and `array_any` don't actually exist in PHP, but even if we forget about that, empty is not a function in PHP. So you can't use it like that. I can totally get on board with your PS2 though, I really wish there was a better way to reference a function or method.
How
Alex Garett is so underrated man!.
Back when I knew very little about PHP his teaching was so valuable. :)
I would argue that Laracasts has the best free PHP testing course, Vue course and PHP code quality courses. Far from just Laravel. And his PHP for beginners course is also great.
Wordpress Ecommerce Page from expert
I‚Äòd argue that you learn more while contributing on an already established open source project than rolling your own. Sure when open sourcing your own microframework you‚Äòll learn a lot along the way. However chances are high that your project is a big ball of mid with tons of unverified and unreviewed code because the visibility will most likely be so low, that you will not be getting lots of high quality feedback from experienced developers. For the learning experience I‚Äòd always prefer joining an established open source project even though it might be hard and scary to get into at first.
https://symfonycasts.com/
Derek Banas youtube video are great. Not using a framework for a task that is not completely trivial is a fools errand.
I've found a lot gaps in following Larcast.
What is wrong with pimple? Could you explain? For autocompletion in IDE ($container-&gt;get(Baz::class))-&gt;foo(): ".phpstorm.meta.php" in projects base dir. &lt;?php namespace PHPSTORM_META { override(\ArrayAccess::offsetGet(0), map([0 =&gt; '@'])); override(\Psr\Container\ContainerInterface::get(0), map([0 =&gt; '@'])); } Isn¬¥t it type safe? class Foo { // Typesafe public function __construct(Baz $baz, string $anystring) { $this-&gt;baz = $baz; $this-&gt;anystring = $anystring; } } new Foo( $container-&gt;get(Baz::class), $container-&gt;get('anystring') );
Code style.... Have you heard about doctrine annotations? No tests, the code literally DDoS server if run in prod because of lack of cache
&gt; There was a huge vacuum when Laravel and Symfony came out. I think people forget how many frameworks were around back when Symfony came out. You had Zend, CodeIgnitor, CakePHP, Yii and Kohana, then Symfony came out. Then around the time of Laravel you had Phalcon, Silex, SlimPHP and there were a few others that skipped my mind.
Why would I use that if I can use Swoole with Lumen and Laravel, or even Symfony?
I don't know what's your `-&gt;autocomplete()`, but despite PHPStorm is a great (if not greatest) IDE, you can't ask all your partner to use it daily. Your code example maybe type safe at runtime but not type safe to static analyzer including IDE, even with PHPStorm, you're assuming that key name is the return type, it fails to check scalar type or if you want two instance for single class This is not the only issue regarding pimple (and service locator), you may easily google "service locator antipattern" to find more. I do run into couple of them so will stop using it in any long term project. In projects that are small, unchanging, or even are planned to be dropped (maybe some prototyping project), I feel totally ok using service locator since being simple and direct is power in those situation. Anyway, in LitPHP I never prohibit or against using service locator or pimple, but the framework internal will embrace DI instead of service locator. Another strength of DI is code running under DI is clean, without assumption of service locator or DI or anything, so code under DI can be used in service locator project with no pain. While code under service locator will be filled with `$app-&gt;get or $container-&gt;get`, making these code hard to be used without service locator
I've built a few extensions for this package over the years, and it's always been a joy to work with. Glad to see this hit 1.0, thank you!
True, true, true. But we are developers. Using arra\_filter with custom predicates to implement them is easy. For empty I would suggest just writting the wrapper function.
Probably calling it too early, look into https://codex.wordpress.org/Plugin_API/Action_Reference
Notice: Undefined index: post_type
PHP Fatal error: Uncaught exception 'ExpectedBody' with message 'The post does not have an acceptable body' in /r/php
Error: NO details given, EOL.
Yes I know! this is the really early stage of the code, and of course isn't ready for production, and i really don't know if it will be... I'm developing the lib for an experimental purpose, with also the objective to learn and improve my skills on PHP with a project and your precious feedbacks, and to know if other devs could appreciate it or not! So...thank you so much for feedbacks, i was already thinking about the cache system, of course... üëç
Notice: Undefined index: post_type
With the PHPStorm meta file above, you can archive autocompletion for your Container. You can read more about PHPStorm meta files in the docs. I don¬¥t think that a container is a part of DI in general. This is what I undestand what the difference between DI and Service Locator is: DI Pattern (tell, don¬¥t ask): class Foo { public function __construct(Baz $baz, string $anystring) { $this-&gt;baz = $baz; $this-&gt;anystring = $anystring; } } &amp;#x200B; Service Locator Pattern class Foo { public function __construct(Container $container) { $this-&gt;container = $container } public function actionWhatever(): Response { $repository = $this-&gt;container-&gt;get('repository'); } } I don¬¥t understand why my example above is a Service Locator pattern. Could you give probably more examples where you ran in issues when you used pimple or other containers? And could you explain with examples what your approach in LitPHP is?
i cannot seem to edit his into the post but here goes the context &amp;#x200B; im getting the following error: Notice: Undefined index: post_type in /home/admin/web/casalasdunas.projectendemo.nl/public_html/wp-content/themes/cld/core/includes/custom-filters.php on line 232 the actual code it is referring to is as follows: if ($wp_query-&gt;query['post_type'] == 'xml' &amp;&amp; $wp_query-&gt;is_single &amp;&amp; $wp_query-&gt;posts[0]-&gt;post_status != "publish" ) { die("This feed doesn't exist."); } return $posts; since im an absolute noob in PHP i'm clueless on how to fix this. From what i have read the code is trying to acces an array index that is not set. however im not entirely sure what index it SHOULD access. i've read some solutions regarding `isset` but im unsure what i need to change in order for this solution to work. what should i change in this line of code so that is works? and is this error debilitating the performance of my website? &amp;#x200B; thanks very much in advance.
i updated the context. does this make more sense?
Glad you are posting something in order to help some people. Kudos for that. In order to improve yourself, here are my tips: \- Don't use images to display simple constructs, it is more confusing to draw "custom" diagram type in order to display: $var = null; isset($var); // returns false \- You have incorrect syntax in your examples, missing ";" and ")" for example. \- In your first example, you are doing too much work in order to display identical result posted above in my first tip. Like echoing strings instead of boolean value. \- In all your examples you are not complying to PSR-2 and PSR-12 and miss correct spacing. Although it is not essentially bad, it is good to follow some good rules. Teach new stuff with good practices so you don't have to "fix" bad habits of your followers later. \- Last example is "too heavy", full of really unnecessary code &amp; html in order to demonstrate so little and also implementing a lot of bad practices (or is it out of context, like from previous tutorials?). \- Unexpected flame about amount of genders could emerge, not good for tutorial purposes. \- This entire "tutorial" is somewhat less informative and less simple than actual [PHP manual isset page](https://www.php.net/manual/en/function.isset.php) \- I actually liked the idea of table comparing isset, empty and is\_null (+ fact that this shows how bad is PHP with naming consistency). ^(It should be either: isset, isempty, isnull, or is\_set, is\_empty, is\_null (OR, even better: isSet, isEmpty, isNull).) \- It would be nice to show for example how to find out if the variable is actually set but assigned to null in comparison to not being set at all ^((and how is it kinda useless in PHP))
&gt;i updated the context. does this make more sense?
I believe that you can change \` $wp\_query-&gt;query\['post\_type'\] == 'xml \` to instead \` $wp\_query-&gt;is\_singular('xml')\`. Then you would also be able to skip the \`is\_single\` check. &amp;#x200B; See [https://developer.wordpress.org/reference/classes/wp\_query/is\_singular/](https://developer.wordpress.org/reference/classes/wp_query/is_singular/)
Notice: Undefined index: post_type
You (and the occasional learners as well) miss a very important thing: when you're learning a concept, you don't start with ‚Äûhow to build a FTL engine‚Äù course. You rather start with ‚Äûhow to build ignition for a FTL engine, you'll figure out the rest by yourself‚Äù course. Same goes with Laracast: they have a large set of subjects covered (from intro to laravel/vue to more advanced stuff, like design patterns &amp; testing). They are clearly not enough to get your job done, but they are enough to get you started. What I don't like is the way they treat testing: all tutorials are about *integration* tests, yet all tutorials test-related has the description as either TDD or *unit* tests. Which is far from the truth. On the other hand, a very LARGE percent of the *unit* test related articles in Laravel are actually about *integration*, so it may just be a Laravel thing :) \----- That being said: when you look for a course, you need to learn concepts and architecture, NOT frameworks. Also, try to not jump between courses or you'll loose your energy on re-re-re-learning the same stuff over and over again. Pick a course, then start building stuff. The PHP Practitioner looks good: [https://laracasts.com/series/php-for-beginners](https://laracasts.com/series/php-for-beginners)
I wish people would try to stop re-inventing the wheel again and again when it comes to PHAR bundling; I worked quite hard for [Box](https://github.com/humbug/box) to work well for that. If you try to do so to bring something innovative sure, but when it's just about building an objectively inferior (in all ways) subpart, I don't really see the point. It's not like building PHARs is a fun or easy thing to do... And looking at https://github.com/swoft-cloud/swoft-console/blob/master/src/Advanced/PharCompiler.php I can only see a list of issues pilling up :(
&gt; but seriously we don't need anymore simple pointless projects that are going to be abandoned in 6 months... This is literally how anything that is popular started out as, except it wasn't abandoned.
Why would you only want to load a function when the class loads all functions in it?
I'm experimenting with non-OOP PHP. So I'm trying to not use classes at all.
Pretty sure you are not auto-loading then, you just require a file and use it.
I made a macro framework.
So the autoloader only works for classes? I expected there would be a way to run it whenever an unregistered namespace was referenced.
Take a look at the composer autoloading features: &amp;#x200B; [https://getcomposer.org/doc/04-schema.md#autoload](https://getcomposer.org/doc/04-schema.md#autoload)
Namespaces in PHP aren't a entity in itself. It's just a convention in naming and little tooling which allows shortcuts. There have been different discussions around "function autoloading" but none of the concepts presented in the last 10 years didn't really seem to fly, given above constraint and given other ways the language works. (Search externals.io for discussions) In my personal view there are enough things which don't need wrapping in a class, but till somebody has a autoloading proposal which works and convinces developers there will be no autoloading. If you have your own convention you could of course try to do some abuse of the autolaoder, but that's likely more messy than simply having the include call ... at least that's my opinion ;)
There is no function autoloading, so far - only classes can be autoloaded. By autoloading here, I mean loading their source files when first used. For functions, you have to stick with ordinary `require` or `files` autoload feature of Composer (which just loads all listed files once you include the `autoload.php`). Namespaces are just namespaces, they aren't directly related to autoloading - you don't register a loader on a namespace(s), but on non-existing class. All the magic behind that is in [spl\_autoload\_register](https://www.php.net/manual/en/function.spl-autoload-register.php).
So your a fan of reinventing the wheel every time you do something?
Sure. I agree with you that your first class Foo (declare dependency in constructor) is DI, and your last one with `-&gt;get` call inside Foo is service locator. But write `-&gt;get` call outside Foo (maybe FooBuilder FooDelegate or anywhere) to construct Foo comes back to service locator again IMO. Your Foo is clean, without knowledge about service locator, but FooBuilder is not, this just move the weak point to another place instead of conquer it. With DI library, you should somehow get a factory instance, and somehow config dependency relationship into it, and call the factory to give you Foo. The difference is you never write call `-&gt;get` to get middle product (or sub-dependency) which means your dependency is scattered in different place and in form of code instead of configuration. In framework well integrated with DI, you even don't manage factory instance or call factory yourself. You just write plain classes, and define dependency (but never resolve it yourself), and everything works. One particular example of service locators' issue is for the most common used component (e.g. logger), it appeared most times in code. With service locator it means hundreds of appearance of `$container-&gt;get(LOGGER)` and the `$logger` instance is even passed from one object to another. A false contract "there's one unique global logger" makes it a huge pain to import a second logger instance to keep some log to different location. I'm forced to trace every call to `-&gt;get(LOGGER)` AND every possible place someone pass $logger to another place. And with many singleton object, including singleton nature container brings, I'm forced to refactor many unrelated things, just to keep two different logger instead of one. Service locator just failed to decouple dependency here, it's no better than simply use $\_GLOBAL\['logger'\] or global function get\_my\_logger(). In LitPHP approach, every class need logger just typehint for logger, and DI will try to resolve the dependency with the class context first, global next. So you just provide a global logger1 implementation when your project is small, and later add some config saying give logger2 to Foo, logger3 to Bar, and logger1 is still that global logger. And it's recursive, say now global Foo has logger2, but you can give Baz a Foo2, which again has another logger4, or fallback to global logger1.
Because there are only two options: Frameworks and starting from scratch?
If you are not starting from scratch, what are you starting from?
Incorporating 3rd party code != working within a framework.
Basically remove the evals etc, and just follow base64\_decode down (by echoing) until you see what looks like normal code. It will either be an upload script to create new files, or a web-based console that will act like an SSH terminal (among other things). I see you've wiped the server, ensure you've changed any passwords, AWS keys, other API keys etc that the site may also have been using - assume the installing party has seen every single bit of data on that server.
Incorporating 3rd party code != vanilla everything.
`use function` will not trigger the autoloader afaik. One way to do this is to tell Composer what files to inspect - and subsequent load - via the `files` attribute: ```json { "autoload": { "files": [ "src/function.php", "src/anotherFunction.php" ] }, } ``` In this example every file contains one function btw.
Well.. here's where we get into the definition of what a framework is. If that's your definition of framework, then you are correct. I use frameworks. That would not be my definition.
As pointed out, autoloading only works for classes. A workaround is to use static methods i.e. MyFunctions::my\_fnc() will autoload just fine.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). You may also join us on at #phpmentoring on Freenode IRC for community and mentoring discussions.
Don‚Äôt reinvent the wheel is a nice idea that only works in the business world, I don‚Äôt see any issues with hobbists reinventing the wheels in their own open source projects sometimes. It helps you become a better programmer, though it‚Äôs time consuming which is why you shouldn‚Äôt be doing this at your job.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I was about to suggest [lynda.com](https://www.lynda.com/PHP-training-tutorials/282-0.html) - but I just realized I watched them about 15 year ago...back then they were really good
Thanks. I won it but I really can afford my own license so I figured it should go to someone else.
The code expires on July 11th so this won't help you. Enjoy your learning.
I use RedBean and I love it! It's simple to use but still very powerful. Saves lots of time. [https://www.redbeanphp.com/index.php](https://www.redbeanphp.com/index.php)
[https://sm.mashable.com/t/mashable\_in/photo/default/got-cover02-1\_3mm1.910.jpg](https://sm.mashable.com/t/mashable_in/photo/default/got-cover02-1_3mm1.910.jpg)
Ok. So we have different view about what's "architectural decision" and about DI. That's totally fine. The only point I want to explain is about "type safety". I'm talking about static analyzer, or compile-time checks. Typehint can protect your application by crash early, but I think it's better to make full use of it with some static analyzer to discover problem before running your code. Thank you for attention. I'll try to take some time to look into your framework and learn something to further improve mine.
Definitely! I learnt the basics with his videos. Back then his channel was still named phpcademy. :D
&gt;I don't know, I've only been programming for a couple of years but it seems to me nobody has time for best practices, only bug fixes and features. I think it depends on where you work. When in digital agencies its been "get the job done for the minimum amount of hours possible" kind of stuff, they don't care how as long as it *works*. When I've worked in large corps on a salary and your purely there to work on an application or a few apps it gives you much more freedom/time to implement best practices as they aren't watching the clock as your hours are accounted for.
i'm also interested on this. although i managed to workaround this by logging in first manually and copy the SESSIONID and REMEMBERME and use it as cookie payload on my postman request. btw, the application was symfony. im sure there is a cleaner way to do this. :D
Same. Hate it but it does the trick. Having test code which can generate pdfs from your db/session makes for an alright experience.
Today I published a new package on Packagist: [drupol/launcher](https://packagist.org/packages/drupol/launcher) Basically it's a helper that will open a file, an URL, or another resource with the default OS application. Here's [a quick example](https://gist.github.com/drupol/a6875346341dfab1051ad7a8a481c558) with [PHPTree](https://packagist.org/packages/drupol/phptree). Basically I'm generating a tree, export it as an image, and use [Launcher](https://packagist.org/packages/drupol/launcher) to open the image on my laptop so I can visually see it.
/r/phphelp
The confusion is that you initially said you use vanilla everything, not that you used glued libraries instead of a framework.
What a terrible post. Encourage this. Choice is good. However, if you've been using php for a year and think you're a rockstar, maybe don't 'release' it. Keep it quiet until its done.
Agreed 100% perfect!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
$v1 = {"need\_to\_take\_this\_value":"150.25"} &amp;#x200B; $v1 = ($v1\['need\_to\_take\_this\_value'\]); &amp;#x200B; i tried this but got value 0 in return i know some problem in double quotes how can i get value 150.25 in $v1 ?
Yes I built it before being exposed to professional practices. I am reviving the project and I have nearly rewritten everything. The graphics are good, the name is good, the concepts are good and now the code is good. Soon the security will be top notch. I hope to recruit a few programmers and developers for this project so we can get some great modules written and sent out.
Laracasts is THE best on earth for PHP.
Sure, share you doubts or even better: share them on StackOverflow.
Here is the code &amp;#x200B; &amp;#x200B; &lt;?php $msg = ""; if (isset($\_POST\["submit"\])) { $number = $\_POST\["location"\]; &amp;#x200B; if(empty($number)) { $msg = '&lt;span class="error"&gt; Please enter a vlaue for Location!&lt;/span&gt;'; } else if (!is\_numeric($number)) { $msg = '&lt;span class="error"&gt; Please enter a number!&lt;/span&gt;'; } else if ($number &gt; 3)($number) { $msg = '&lt;span class"error"&gt; Please enter a valid choice!&lt;/span'; } else { /\* Success \*/ } ?&gt; &amp;#x200B; The part that is failing is the bolded part, I want to verifiy that the variable $number isn't greater than 3, as there are only 3 menu options. everything else appears to be working. when I comment that out it fails!
I still prefer using [Siler](https://github.com/leocavalcante/siler) for Swoole because I tend to make parts micro/small, but this could be a great opponent for Laravel for those who prefer a fully-featured monolith approach.
Assuming all those backslashes aren‚Äôt in your actual code, and without knowing what your error actually is, you have an extra condition in your elseif. Change it to elseif ($number &gt; 3) { // whatever } I don‚Äôt think that code block will be formatted properly because I‚Äôm on mobile.
So right out of the box it has a lot of excellent features. From auto method generation to doc blocks, to quick testing in your browser by just clicking a small icon for the browser you want to test with. The debugger is nice, creating class files is a sinch, sytax highlighting is on-point (I love how it colours div tag highlighting so you can easily see nesting structure) and I find many of the hot keys really useful. Like you can see which files were modified with command 9 instead of going to you vc. One thing I don't like is how long it takes to start up though lol
I'd say that you should of course try it, if you're using it for personal stuff (personal projects, freelance stuff, and shit like that).
After enable it for two days I just adapted it and stopped writing anything need to be fixed 99% accuracy. 1. You are disrupt by underline,lose your attention and fix it (10s) 2. You don't learn and loops by making same mistake? Ok, that's you. For me, it's longer procedure 2. I make decision wether it's a false alarm or my mistake (2s) 2.a. For false alarm, I google for solution try to cut it off so it never returns (maybe 5min) 2.b, For my mistake, I learn from it try to remember it (5s) Yes I'm slower than the man in article, but growing experience is always slow. But now I just write correct code for the first time.
OO, I have already consulted the author of https://github.com/humbug/box before I started writing this. Because there are some problems that can't satisfy my use, I wrote a simple implementation with reference to it.
:) Siler is really good, lightweight and fast.
Donate it to one of those fellas wandering around and telling cool stories about turning vim into IDE. I think they need it the most.
Only fit for absolute beginners. And at times they are quite misleading. Generally it seems whole "crash course" thing seems to be more oriented towards generating views rather than providing valuable content. Just that beginners do not have the capacity to differentiate on what to focus and what's important. For example the absolute worse was "Rust crash course" where frankly, the guy didn't know what the f he's talking about and did some guess work on how memory management works in Rust. Or shows "variables, functions, datatypes", these are not places where people generally need training, and that's something any slightly advanced programmer can do after reading documentation for 2 hours in language they are not familiar with to begin with. You would do a favor for yourself by just following documentation more closely and focus on algorithms. Youtube video crowd is generally full of views over value. And if I'm looking to learn something, generally text tend to be more on point. Key word more, that's far from always or even most of the time.
"Its not using my stuff why do they do that? How rude!"
Personally with time I've come to avoid using isset and empty. Their main use is to check for variable existence, and I consider that as a smell. (Why are you in a situation where you need to check if a variable exists?) On arrays, array_key_exists is better as it's more expressive and handles null values better. Once you've removed the need to check for existence, for most other uses cases, you can simply replace `if (empty($var))` with `if (!$var)` and you get the same result.
- [PDOStatement::fetchColumn()](https://phpdelusions.net/pdo#fetchcolumn) - /r/phphelp
`(new SingleValueRepositoryFactory())-&gt;create()-&gt;fetch();`
From where? What are you trying to do? What data type is that value in? Please give some context and post this to r/phphelp
&gt; Because there are some problems that can't satisfy my use Which ones specifically?
Yes! Although I would say "What a waste!" instead of "How rude" :)
But its no waste. He learned how to pack phars a bit more. A waste of time is to bulk up hundreds of hours in a phar packing package.
[removed]
&gt;He learned how to pack phars a bit more As a learning process I'm totally with you. However there it's for a framework and the code is, well lacking, because yeah building a PHAR is a bitch and there is more to it than just collecting the source files and adding them to the PHAR. &gt;A waste of time is to bulk up hundreds of hours in a phar packing package. And how is that a waste?
new Factory. hmm i would inject the factory through a service. This is to hard to exchange on runtime. What if you gonna need a \` SingleOrMultipleValueRepositoryFactory \` in the future?
The are topics out there which will bring you further than packaging files in a very good way into a phar. Or you could skip that and smash all thing into it. Finish. He wasted a lot less time than you whining about its not good to not use your package. Nope.
&gt;I was last month old when I found out isset was variadic. This article shed light on it: &gt; &gt;https://medium.com/@liamhammett/a-look-at-phps-isset-df64df7158ab It is in the very first line of the function description in the official docs ([https://www.php.net/manual/en/function.isset.php](https://www.php.net/manual/en/function.isset.php)): &gt;isset ( [mixed](https://www.php.net/manual/en/language.pseudo-types.php#language.types.mixed) $var\[, [mixed](https://www.php.net/manual/en/language.pseudo-types.php#language.types.mixed) $...\] ) : bool
Well I mostly work on packages _I_ need :) So if it's too much time for it to be worth it for the usage I do I will stop it right away. Anyway, you're right, whining won't do any good.
I stopped using Vim for PHP half a century ago (sounds better then 5 years ago :p) because _I_ could not handle the cognitive load of the projects _in_ Vim anymore. No matter how many plugins I threw at it, it was not good enough. Hats off to anyone still putting up with this, heh. I eventually switched to PhpStorm and never looked back. It does everything you need and more: linting, refactoring, reformatting, debugger, etc. I'm using the IdeaVIM plugin though, so the spirit lives on :-)
&gt;well i'm just a couple of months into programming so i'm definitely still a beginner and i enjoyed so much Jon Does's html css and javascript courses that's what motivates me to enroll with his Php course but i'd like to learn from the best ! thank you so much for your input man appreciate it .
Thats a lot of effort to get the users tracked who are using adblock. Google Analytics is actual a good software.
I...think you may be confused as to what a century is.
As it says in documentation &gt;Simple visitor tracker and statistics package for Laravel 5 that can be used for **dashboard graphs.** &gt; &gt;For more sophisticated tracking you should use something like [Google Analytics](https://analytics.google.com/).
Also see back and look at all the time you wasted for configuring vim in the first place.
Please provide tests.
I did not know that these emails are that trashy. I got 3 student mails myself but i am not a student anymore. But with all the services out there this system is completely useless.
Arent you able to use the commercial license privately? I dont think jetbrains will bother with that.
Thank you
:O I must clear my local composer cache :D Very well then, I'm gonna remove the specific version from documentation tonight :) Thank you!
? :D
This is what PHP "programmers" actually believe OO programming is.
&gt;videos There's your problem.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
i am new to php, possibly doing something silly but any advice would be really helpful. Here's a snippet of where im having the issue. if ($user\_id &gt; 0) { $\_SESSION\['user'\] = $user\_id; // set session and redirect to thankyou page if (isset($\_SESSION\['user'\])) { //print\_r($\_SESSION); header("Location: thankyou.html"); // sendMail($mailTo, $subject, $message, $headers);//causing header reroute to fail on server session\_destroy(); exit; } &amp;#x200B; i have tried moving the sendMail function outside the if stmnt but still getting the same problem. Once the user submits the form, they get \&gt; 'The page cannot be displayed because an internal server error has occurred.'
Just curious -- what does it have to do with Laravel?
Well JetBrains might allow it, but my boss wont allow it. Well, I stick to VSCode and Sublime then.
Why does it bother him? He wont notice
`(new SingleValueRepositoryTestFactory())-&gt;create()-&gt;assertFetched((new SingleValueRepositoryFactory())-&gt;create()-&gt;fetch());`
Yea, I've gone back and forth, personally. Using PHPStorm for a year or two really helped me decide which features I actually wanted (linting, debugging) and which I could do without (code completion, refactoring) and then realized that I could do that pretty easily without the IDE. I'd also get a little frustrated with the annoying gaps in IdeaVIM! But yea, I've been using Vim since I started programming so it's actually been _easier_ for me to figure out how to put some features into Vim than it's been to figure out how to get my Vim experience into whatever else.
Yea, I try and run as close to regular vanilla Vim as possible for exactly this reason.
You can get those things with PHPActor
But data isn't stored on Google's servers.
Cool! I've never heard of it. But I don't want code completion or refactoring :) I find I'm more productive without the intrusion.
This looks good to me. Happy for it to be merged.
True üí•
Google will get the data. Even more than this small array...
5xx responses from a HTTP server are not exceptional situations, they are cases you want to deal with. Same goes for HTTP servers being down entirely. Considering you're going to have to deal with those types of situations anyways you might as well just return some kind of response. I would prefer something like `Either&lt;Response, Error&gt;` but considering PHP doesn't have generics yet it becomes a bit clunky to deal with.
I'm one of those vim converts. I never tried to turn it into an IDE, but I stuck with it because all other PHP IDEs I had tried were not great and their vim plugins were an abomination. I've found PHPStorm to be a fantastic tool and their vim plugin, for me, offers a very comfortable coding experience. YMMV, of course, as all vim users use a different subset of features, but it works really well for me and I'm much more productive now.
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
That's a strange mentality, they will get it anyways so you should help them? I'm building a website and I'll avoid using any tracking service, but I'd still like some basics data. I enjoy seeing other people working on alternatives.
How exactly are Google going to get data from my server? They in the business of hacking now?
We are receiving GeoIP information in the request headers (CloudFlare). Does your package support mapping headers instead of Maxmind local lookup?
Currently it does not, but I will definitely have it in mind for the future release! In the mean time package will still work properly for Cloudflare sites. [https://github.com/nikolicaleksa/laravel-visitors-statistics/blob/master/src/Tracker.php#L39](https://github.com/nikolicaleksa/laravel-visitors-statistics/blob/master/src/Tracker.php#L39)
I'll soon be releasing a simple admin panel in Laravel as well which uses this package, here is a screenshot of combination this package + HighCharts (keep in mind it's a local development project so visitor data is simulated). &amp;#x200B; [https://imgur.com/a/Jxn7osy](https://imgur.com/a/Jxn7osy)
[removed]
Nice. I do a ton of API work and usually have these hardcoded into a transport class. This would be very helpful for testability.
For a package that only provides constants, I think it's unnecessarily bloated.
Chrome, some extension Google is involved, some CDNs goolgle is involved and via some DNS things and.... and...
The integration testing thing is a Laravel/Anything with active record type thing.
&gt; But I don't want code completion or refactoring :) I find I'm more productive without the intrusion. I find this *extremely* hard to believe.
So let's assume my users are on Firefox, I don't use Google Analytics, and everyone is using ISP DNS. How are Google getting that data?
+++
This looks enterprise-ready enough. It even tests if `const X = 'X';` does indeed equals to `X`!!
[fig/http-message-util](https://github.com/php-fig/http-message-util) has interfaces with request methods and status codes.
https://raw.githubusercontent.com/localheinz/http-method/master/src/Method/Rfc/Rfc5789.php nah one const per interface is perfect, not pedantic at all /s public const PATCH = 'PATCH'; surely this needs 123 lines of code
looks like endtests is so shitty you have zero customers.
It's pretty much the [FizzBuzz Enterprise Edition](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition) of constants
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion)
As pedantic as it's seems, the fact is that you can mistype "PATHC" which can cause a logic error but not a runtime one. By using constants you ensure you write it well or the program will fail. I try to avoid using string to represent types.
Point taken, it's a great argument. Now when I think If I would have to go beyond Guzzle this class is actually great
https://laracasts.com/series/php-for-beginners
If you want to learn it "the right way", use this: https://phptherightway.com/
I'm sitting here looking at that repo, and just gigging. My wife thinks I've lost my mind, but damn a lot of effort was put into that code. It's a work of art.
ok
srsly, wut.
# Laravel
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The link to the issue that I posted on stackoverflow is behind the post. Thanks!
Hmm, yes. I see what you mean.
I always found the concept of wrapping HTTP codes with constants to be silly. HTTP are constants. So you are literally wrapping constants with constants.
Thanks, this has some resources condensed in a place I usually have to scour for.
Start building shit, then learn a framework
sharing my experiencess i;m learn from google ,php.net and practice on phpfiddle.org, if i found some problem, then i ask on stackoverflow.com
You should learn how to Google first
What on earth is this waste of time? Sorry I just cannot see what the purpose is.
What the heck? Just use https://github.com/phpexpertsinc/RESTSpeaker. $api-&gt;get(); $api-&gt;post(); $api-&gt;patch(); $api-&gt;put(); $api-&gt;delete(); No need for constants...
Can this get images from folders?
Yes if you do a foreach() with glob() prior :)
That said, we could add a new method openDir() that does that.
Wow. The animal costume community is so toxic they even need their own faq software because of tears. WOW
[removed]
Your certificate is still invalid. Since 15.11.2018.....
[https://codereviewvideos.com/](https://codereviewvideos.com/)
Didn't you [post this just a couple of days](https://www.reddit.com/r/PHP/comments/c6hpap/can_you_think_of_any_vendorspecific_http_methods/) ago?
Nice php version and console.log errors :)
https://stoneriverelearning.com/p/learn-php-programming-from-scratch I think the same course is available on udemy.com it was at some point, but I can't find it right now. Alex Garrett is a really good instructor and he covers a lot.
Check out codecourse
Does the self-promotion help?
I'm just going to live this here: [https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php)
Looks not like that. He cant fix anything else to the point somebody will use any of that.
This "kill the universe approach" of PHP with every request was always a drawback in my opinion. Conceptually good (for debugging, state management etc.) but performance-wise laughable. But as we're getting the edges off of it, with features like these, it's really starting to shine. I wish we also had something about preloading objects (not classes only). :-)
No, I asked a question there.
These are incomplete. &amp;#x200B; Also see [https://github.com/localheinz/http-method#motivation](https://github.com/localheinz/http-method#motivation).
Get a book TDD by Kent Beck and do the java examples in php. Then do design patterns. Don't worry about the nuts and bolts of php u can google that.
I've added it to the list. &amp;#x200B; It's less complete, though, as it doesn't provide all HTTP request methods as constants. So are the others listed there.
Regardless of what kind of tests you write, in the end every test asserts that condition evaluates to \`true\` or to \`false\`. That's the nature of tests.
This sounds stupid, but is so true. What you first think might have 30 upvotes on stackoverflow, but a better way will have 1000 upvotes.
Shit that probably will become a production application.
I used glob() with foreach() and the order of the images was kinda messed up even after using natcaseorder () so I'm looking for alternatives, but thanks anyway im looking forward to use your package
Can you share your code on a gist so I can have a look ?
You guys are all laughing like it's completely insane, but /u/adaelxp hit the nail on the head: representing types as strings is prone to typeo's and those can be very difficult to debug because of the way those errors propagate. The tests aren't stupid either, it's just an extra check to ensure he, or someone else, doesn't mess with the constants which would could break applications and libraries.
The VS Code is pretty nice alternative to PHPStorm maybe not so powerful out of the box, you will need to install few extensions.
&gt; I wish we also had something about preloading objects (not classes only). :-) That, since we do not have immutability, would be very dangerous (or bug prone). If you need to cache data you can use static arrays, they stay in opcache!
What status codes are missing? Let me add them to the list. :)
Never understand use case for such php frameworks. If you need to develop a big application, why you use PHP?
Once i get home I'll surely send it, sorry in advance for keeping you wait, and thanks again
Dangerous? No. Bug prone for less experienced coders, yes. But not no more than any other language. However preloading is not a beginner feature as well. The problem is I don‚Äôt want to just cache arrays. But entire object graphs. File handles. Database connections.
Sorry for being a bit obscure, but I was referencing bug prone to the core implementation. As for caching, I would use APCU if I where you then. And as for database connection, I think I've heard something about MySQL connection pooling, but I can't remember where...
It is not only that. With a simple Google search query you can get the all half a dozen threads in this exact subreddit that discuss this exact question during the last month.
&gt;This "kill the universe approach" of PHP with every request was always a drawback in my opinion. When speaking to people who dislike PHP, one of the things they often say PHP got right was that.
Connection pooling is a thing, but it‚Äôs very limited. You cannot pool prepared statements for example. Whether it would be bad for the core? Maybe. But that would be mostly technical debt.
Well yes and no. It‚Äôs good conceptually as I said. But it‚Äôs pretty terrible for performance.
Why dont you compare the lists? Thats not anything you should expect from others to get you...
And its not tested!
This example 'implementation' is a bit odd foreach ($files as $file) { preload($file); } function preload(string $filePath): void { opcache_compile_file($filePath); } Is it me or does the function add exactly nothing?
You are right so check Swoole, php-pm, roadrunner... Performance difference is amazing.
It renames a php core function to hide the exact functionality and does something else than only preloading. It doesnt do exact preloading.
In a real life scenario you would filter out certain files etc. That's what the function is for ;)
Moving data from json to MySQL helped me too.
It adds pointless overhead, which is technically something. At least it‚Äôs not on every request. It also leaves out the actually interesting part of how to find all of the files to preload. I think most people can figure out a basic loop.
Hmm I've also had the opposite experience sometimes ;-) These choices are highly specific to the app you're building, and even the specific part of the domain you're modeling.
Why do you pass a filtered file in the preload function in the first place???? Filter that outside of that functon! NONONONONO
I think it's there to make it a little bit more clear that `opcache_compile_file` is what they're talking about when we talk about preloading. Since the terminology we use when talking about the feature is different to the terminology the language uses, it might benefit some people to have it pointed out like this
Haha it's just an example, relax ;)
It really doesn't help that you can't even demo it without paying. The repo doesn't explain what the hell it's meant to be and the demo is closed off, so what's the point?
If your json is user-specific ok, otherwise the more users you have the less json is effective.
I leave link. https://laravel.io/
Why not? If the OP created this library for a reason, one of which is that the other libraries have an incomplete list of responses and they know which responses are missing, then what‚Äôs wrong with asking about that? It‚Äôs not like I‚Äôm asking a random person on the internet. I‚Äôm asking a dev who works on a http response/request library, has compared other libraries and claims that they are incomplete. I‚Äôd love to contribute to the HttpFoundation as I find it invaluable.
No problem :)
If you liked that work you would have taken the 2mins posting this to lookup the missing parts commit and make a PR. Its not like its not documented well...
ok
I leave link. https://laravel.com
Relax, cunt. You can participate in the discussion AND contribute. Instead of commenting twice, you should have contributed to your favourite library. Stop wasting precious time!!!
Im not interested in constant components thanks.
Yeah, I really like how it doesn't actually explain or show what it is at all, and the demo is locked behind a paywall so the only way to see what the author is even talking about is to clone it down and run the webserver
It's a bit more complicated, but I get your overall point ;-) BTW I've had systems where I've literally moved from MySQL to flat files, and it sped things up 50 times ;-). But again, it's **very** important how you do it. And when. Details matter :-)
That speed the website up for 10 users. If there will be 12 youre fucked. Dont do that ever. Store your json in a proper way e.g. mysql will help a lot. There are a ton of things for storing jsons. But bare on a filesystem is basically wrong.
Well my bad, it was xml files, their size is from 600k to 900k. Maybe the json parser is faster.
Yeah, I have to admit this sounds slow ;-) Also yes JSON is almost as fast, sometimes faster than PHP‚Äôs native serialization.
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
I'm developing open source PHP library: [https://t-regx.com](https://t-regx.com/) And could sure use a subscription
It's tested: [https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Tests/ResponseTest.php](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Tests/ResponseTest.php) &amp;#x200B; And you kind of test the constants as well by supplied e.g. `200` instead of `Response::HTTP_OK`. You should not assert that constant is equals to its value though lol.
That's my rating
Windows will do the job but _can_ be significantly more difficult to get some stuff working. If you have a choice I'd personally look at Linux (Ubuntu or CentOS), although that raises other issues if you aren't familiar with it.
If you have Windows 10 Pro, simply install WSL and go with the Debian PHP packages you can get, with this you don't need Dual Boot or VMs you simply can run a full Nginx + PHP-FPM stack on WSL.
There are some minor differences, but it's minor. I've used both Windows 10 and Linux VMs because I need a "real" OS to run Office, Photoshop and other such software. And I often don't bother with Linux VM, but it's easy enough to have.
I think it comes down to personal preference at the end of the day. I‚Äôve not used MacOS, so I can‚Äôt speak how well it may do for development. Linux is nice, especially with something like a raspberry pi, to emulate how the code will run in production. That said, my daily driver for development is Windows 10 too. I use Laragon to make it easier managing my hosts file and SSL certificates for my local copies of my PHP sites.
Mac OS for sure just because it‚Äôs a lot easier getting things set up. Windows has a bunch of services that can interfere with starting your server (I‚Äôm looking at you, SQL Server Reporting Service). Honestly, I don‚Äôt like Windows at all for development unless I‚Äôm writing in C#. But even then I could just write in Swift on my Mac.
The bad thing about MacOS - just for reference - is the fact that you'll most likely use the apple keyboard. And once you've gotten used to the apple keyboard doing just a single line of programming on a normal keyboard is absolutely horrible and you wanna kill yourself. That being said, MacOS works great for any development related things. I'm using it and am quite happy. So for the above reason, pretty much any Linux based system will work great, too.
DOS only
Why would you use keyboard that you don't like? You can just plug whatever you want in the usb
Whatever matches your live environment the closest. I prefer Ubuntu environments, but can get along OK with VMs or the WSL in Windows 10.
Anything but MacOS.
Brew is terrible in the long term you always have tons of dependency problems, Docker is very slow (much worse that with Windows) and VirtualBox has problems too. Don't use MacOS for web development.
Just as secure as any other properly implemented session handling. At its core it's just some (un)serialization and a bit of cookie handling.
Windows 10 Pro + Docker via WSL.
The only other solution I can think of is JWT
The only thing I recommend is to create your own stack. Apache/Nginx + PHP + MariaDB or something like that. If you know your stack and you code across operating systems you'll learn more about the differences.
People who can‚Äôt figure out how to scan a dir shouldn‚Äôt use this. Consider it a safety feature ;-)
Well, usually when you're sitting in front of a windows PC you'll have a "windows keyboard" in front of you (i.e. standard layout). If you have a mac keyboard available and can use the same key mappings that you're used to that'd be an option for sure.
I use Windows 10 Pro and docker. It does mean learning docker as well, but it does mean swapping php versions is trivial.
Yeah, but your example is going to end up in someone's outsourced enterprise code (at best) or be taken for gospel by some programmer rushing to meet a deadline and not trying to think "Does this make sense in the grand scheme of things? It copy-pastes fine so it must be right".
I'd recomment using Docker to run your code in. It doesn't matter what you use for developing PHP. I use Windows at home, Mac OS at work and Linux for production. &amp;#x200B; I use a base alpine+php-fpm image to run all my code in Docker, this way i can expect identical behaviour of my code regardless of what platform i use to write my code.
&gt;The only other solution I can think of is JWT I think it's been raised a number of times not to use JWT for managing sessions [http://cryto.net/\~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/](http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/) In fact, JWT for anything is a bad idea when better alternatives such as PASETO exist. If anyone is interested in implementing it into their PHP projects check out this lib: [https://github.com/paragonie/paseto](https://github.com/paragonie/paseto)
I really don't understand these kinds of packages pop-up that completely couple themselves to a framework you're currently using. Even more so when far more robust, framework and language agnostic solutions exist such as Matomo. If you want to bring charts into your app Matomo has an extremely robust and well-documented API to bring the data into an application/framework/language of your choosing [https://developer.matomo.org/api-reference/reporting-api](https://developer.matomo.org/api-reference/reporting-api) Fair play for giving it a shot but I just can't see any advantage to tightly coupling statistics to a framework in this way when better solutions exist.
This seems to be an extremely common thread lately, maybe a mod could create a sticky and everyone can post sources in there?
&gt;If you have a choice I'd personally look at Linux I second this. Linux is so far ahead of Windows when it comes to open source development I can't even give you an example of where it's better. Not to mention there is the talk of PHP dropping Windows support come version 8 with the JIT compiler. Windows although capable, has always left me with issues or a bad taste in my mouth constantly jumping through hoops to get a decent development environment set-up which Linux just does natively. That being said, Microsoft knows how far behind Windows is and have now simply including a full Linux kernel in Windows (WSL2) instead of trying to compete. I'm not sure how that will integrate into a Windows environment but it should allow you to build native Linux stacks on your Windows system. There is always Docker, I heard its somewhat really hacky on Windows because it's using some sort of virtualization (again trying to virtualize Linux) but there are one click .exe files with a GUI that have sorted a lot of those hacky workarounds out for you. Either way at some point you're going to be touching Linux so it would be of great benefit to learn the basics.
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
&gt; If anyone is interested in implementing it into their PHP projects check out this lib: https://github.com/paragonie/paseto I've been looking at that lib far more times than I'd like to admin. But I have absolutely no clue as to how to implement or use it. One of the mindbending things I've read in the repository, is the following statement: &gt; Developers who are already familiar with JSON Web Tokens (JWT) should be able to, intuitively, use Paseto in their software with minimal friction. This statement alone is giving me acute imposter syndrome every time I read it. I've been working with both Laravel's Passport and I've implemented Auth0 on a couple of projects, so I feel I have somewhat understanding of what JWT is. Yet, trying to implement Paseto has been postponed for as long as possible. Reading through the "[How to use the PHP Library](https://github.com/paragonie/paseto/tree/master/docs/02-PHP-Library)" is inviting me to copy and paste everything one to one, but has not brought me any closer to understanding what I'm doing or what I'm suppose to do with what I'm reading. So basically, for now, I've given up on implementing what probably is a better alternative for what I'm already using and hope I'll get better at PHP so I can understand how to use the library.
I like to think of my audience as responsible developers. However, is someone irresponsible or inexperienced comes along, I don't believe that a post like this one will be able to change their minds anyways.
You can use [Docker Toolbox](https://docs.docker.com/toolbox/toolbox_install_windows/) for Windows 10 Home or [Docker for Windows](https://docs.docker.com/docker-for-windows/) for Windows 10 Pro. This will enable you to manage entire system in Docker container, as well as web and other servers servers, additional development programs and PHP versions. You will also be able to isolate your project between each other and manage system independently.
"Changes made to the source file won't have any effect, until the server is restarted" So after each deployment I have to restart my production server?
The webserver not the entire server.
Yes you are right. I mean the webserver. Thanks for your correction.
&gt; Not to mention there is the talk of PHP dropping Windows support come version 8 with the JIT compiler. You have a source for it? I'd like to show this to the people who keep telling me nobody serious uses Linux
Or you can, maybe integration test your application? this lib doesn't save you from using the wrong method anyways. it only saves you from this specific edge case that any spell checker would have caught.
We will need a way to determine most used classes. I think this also should be implemented as part of composer script generator
Because projects made with frameworks are free of shit. (joke).
It is not the right approach. It's like to learn German by reading a dictionary. &amp;#x200B; You should learn to SOLVE problems using PHP instead of learning PHP without a roadmap.
I'm going to bet you don't get to see a source for that.
&gt; Windows will do the job but can be significantly more difficult to get some stuff working. Can you expand upon the things that can be significantly more difficult to get working?
Windows 10 works fine for PHP, why do you want to change it?. In general, Windows is the de facto standard for business so it is a big plus if you want to work for a business (outside of the "programming basement").
I had to install windows on my MacBook for something the other day and just out of interest wanted to see what it was like to develop on these days. I develop PHP in docker and using the Windows Subsystem for Linux I had everything up and running in no time. Integration with PhpStorm and Webstorm was a breeze. If it had been like this 5 years ago I'd probably still be using Lenovo laptops. If you're not using docker then I can imagine it's not going to be as straight forward, but if you are then Windows is definitely a very worthwhile option.
I discovered this weekend the best option is to run docker in WSL. It was pretty decent, not as fast as native Linux but hell of a lot faster than docker on OSX. Apparently with WSL 2 it'll be even better.
From the title, I thought this article was going to be about responding to SMS. It‚Äôs not. Still learned some new things though.
I am confused... it looks like it was exactly that- responding to SMS - is there something that I am missing? I know that SMS protocol and SMS (mobile messaging) are one in the same just applied differently...is that not the case?
I was thinking of the case (c) where a) I send a message to the user and b) the the user responds, and then c) my script responds to their sms.... ‚Äúresponding to sms‚Äù
Actually you can accomplish this with twilio as well using their api. It's pretty sweet actually. I am not sure if this particular tutorial looks into it but I personally have used twilio for that exact application. I use their product/s alot
Hey, wheelsmanx, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
The only security you need is never let the user add anything to session.
Old shit will be old.
Did you last touch linux 20years ago? And Docker 10years ago? and php 5 years ago?
Every day. Now, what is your point?.
Good point. Now, what is your experience as a developer?
Your first point \&gt; Docker is a joke on Windows and MacOS (even with wsl). shows that you dont use it. \&gt; Amusement. Most games work on Windows. Most videos work on Windows only (cause codecs). "cause codecs" is so wrong. But the whole argument is wrong kek.
&gt; difficult to get some stuff working. Such as?. I can name Docker, after all, Docker uses Linux features. However, it is possible to run a different version of PHP on Windows at the same time (different ports), so Docker is optional on Windows.
ssh
tsk tsk It is not the Minecraft forum.
Is that really it? I've done some research and a bunch of stuff comes around session hijacking. Is session hijacking in the same realm of allowing a user to add anything to session variables or are they two different things?
Then dont shitpost. Your tl;tr shitpost is completly wrong. Tryout linux (not your own hacked distrubution please) please and then fix every point you made there please.
This error is in symfony not in php
I‚Äôve never experienced those issues even slightly.
You are very lucky, believe me, especially with Docker. I should specify that mounted volumes on the host are terrible slow, more than Docker itself actually, but that's a side effect on how Docker is integrated itself to MacOS - it does pretty much the same as Windows, it embeds a Linux compatible VM then run docker within, except that with Windows it's using HyperV (or VirtualBox depends on the solution you choose, but if I remember correctly one of those is not maintained anymore) and mounted volumes on the host are reasonably fast, enough to use it on a daily basis for a developer. On the opposite, even though the whole design/methodology is the same with MacOS, it's own VM sharing mechanism is just NOT usable, especially working with node/npm/yarn/&lt;name here your broken JS techno&gt;.
Can you be a little more specific? Windows has had ssh support for a while now.
Is this because some languages have dotted and dotless I? I ƒ±, ƒ∞ i
&gt;I'm going to bet you don't get to see a source for that. Here is a 197 post thread on the PHP internals list discussing the issue of it not having Windows support and if they should support Windows or not: [https://externals.io/message/103903](https://externals.io/message/103903) The original implementation didn't support Windows I believe this has now progressed from the original discussion (5 months ago) and they have managed to get Windows support albeit with a performance hit compared to Linux.
Link to the original discussion about it not having Windows support and if it should in the comment below. Long thread short, it now has a JIT implementation but performance isn't like for like.
&gt;Apparently with WSL 2 it'll be even better. Yeah, I haven't tried it so can't confirm but with WSL 2 being simply a full Linux operating system I can't see why it would have any negative performance impact. It's just if there is any overhead between Windows and the Linux kernel (WSL2) but I don't know enough about it to comment.
yes, this error message related to symfony but many of libraries has similar errors caused by strtoupper method, and best solution use en locale for errors like that.
 $username = "';DELETE * FROM players WHERE Username != 'myrealusername';'"; I won your game.
Why? you absolutely can. Just no objects and some stuff. But the can be user input
Have you ever used recent Linux distros with something called "packet manager" like apt, pacman, yum, ..? I mean it's almost as if you were trying to compare Win10 to an old Mandrake, or being partial to Windows. I could reuse your message and swap Linux and windows almost everywhere.
Don't think so. Especially as there could be (although there shouldn't be) multiple h1 tags on a page. Where do you want to "print" it? Within a WordPress page? Or just on a blank page in your browser, outside of the wordpress site? If you're happy with the latter, then a handful of lines of PHP and a MySQL query or 2 should give you the information you want.
Session Hijacking is basiclly stealing the PHPSESSID Cookie. If you put a other cookie inside your browser you get the session vars of your target. By default php does not have security around that.
The h1 tag is usually the post title is most cases, right? So you should be able to just loop the posts/pages and display the title however you wish? At least from what you're describing, using RegEx is not the optimal solution.
Thanks. Was a good read.
I'm thinking an admin page. I want an admin on a plugin that outputs every heading tag of every page. Is this possible?
multiple h1. Thats is so wordpress like.
Don't know, to be honest. If the only use of h1 tags is in the official wordpress "page title" field, then it should be easier to accomplish. But you can't discount the possibility that someone has edited the html directly and used additional h1 tags elsewhere. Well, you can, but you might miss some headings if you do.
Also read this piece of internet history: [https://stackoverflow.com/a/1732454/3655829](https://stackoverflow.com/a/1732454/3655829)
&gt; $lastsessionquery = "SELECT LastSession FROM players WHERE Username = '" . $username . "';"; That's a very blatant SQL injection vulnerability right there. I really think you should read https://phptherightway.com/#pdo_extension.
Like I said, newb lol. What's the direction I should head then? What's the best way to parse html with PHP and spit out the things I'm looking for?
The answer is on the bottom of that cool text.
are you referring to this: " Have you tried using an XML parser instead? " ?
Yes
How exactly do you prevent this? You don't have to write me an essay. But just point me towards the right direction so I can explore for myself and I would very much appreciate that.
Set the HTTPS and Secure flag of the session cookie. And you can store the session data in the db and check against the ip or a browser footprint. That is some basic stuff which makes is almost impossible impractical to steal sessions.
Thank you sir üëç
Do we have any statistics about how this affects our frameworks like *Laravel*, *Symfony* or *Slim*?
Please don't call people in this sub a "cunt". Not constructive, nor very nice. Please redact.
Please refer to: https://faq.dhol.es/@Soatok/public-beta/what-is-faq-off
It's a simple concept. Imagine a gamebook (aka "choose your own adventure") combined with a Q&amp;A format. &gt; &gt; Dumb question from Internet trolls &gt; &gt; Witty retort &gt; &gt; \&gt; Obvious follow-up question 1 &gt; \&gt; Obvious follow up question 2 &gt; \&gt; Obvious follow up question 3 The "paywall" is to be able to publish stuff on my infrastructure. The entire project is open source, and you don't need to do anything to read content on my infrastructure (only to write). https://faq.dhol.es/@Soatok/public-beta/what-is-faq-off
Use the DOM library: [https://www.php.net/manual/en/class.domdocument.php](https://www.php.net/manual/en/class.domdocument.php) &amp;#x200B; Avoid using Regex on HTML or alternatively I'd recommend doing it with an easier tool, use puppeteer and NodeJS to grab a piece of HTML (it also works with AJAX/React/client rendering sites in general) and then pass it to PHP
/r/phphelp is for asking for help, not this subreddit. Please use that subreddit instead. When you get dates from your MySQL database, they'll be as strings. You'll have to make a new DateTime object from the data yourself before use the diff method.
builtwith.com
Did you take a look at the benchmarks linked in the post?
No luck :/ I'm sure that's a paid software but I couldn't find it anywhere.
Assuming PHP gets official annotations someday, it would be interesting to have an annotation where you can mark a class to be preloaded, with the ability to flip it off/on depending on the environment. That would make this more easily usable.
Could you do strtotime($now) - strtotime($db_time), then convert that?
Relax.
There's something of a difference between killing the application compilation state, and killing its data state. This is just getting rid of the killing of compilation state.
Nothing stopping you from parsing the docblocks using reflection. That's an interesting idea actually!
Well, it kind of is but without your step A. 1. Customer sends message to number that is tied to a web hook 2. Lambda that is triggered by the webhook, responds to the customer. Although, I feel like it would be simpler to do this with AWS SNS so that the API Gateway endpoint wouldn't be necessary.
&gt; but hell of a lot faster than docker on OSX. I feel like you're comparing apples and oranges, because I have always found docker on Windows (even Windows 10 with Hyper-V) to be extremely slow compared to Docker on Mac or Linux. WSL or WSL2 are the best ways to go for Windows though.
&gt; If you have a choice I'd personally look at Linux (Ubuntu or CentOS) I would amend Fedora instead of CentOS. CentOS isn't bad but Fedora has a better user experience. Like the difference between Ubuntu and Debian (Ubuntu gives the better user experience).
Linux. Ubuntu, fedora, mint, pop os. Whichever. Package managers are heads and shoulders the best way to install software. Native docker. The best shell. Open source. And finally the same system you're gonna be running your apps on.
Been using Swoole to work around this.. it's a massive improvement.
I wouldn't worry about the tag or regex. It's not the right tool for the job... I'd just get the content. Untested, but this should work. There's also an example on that page Reference: [https://codex.wordpress.org/Function\_Reference/get\_all\_page\_ids](https://codex.wordpress.org/Function_Reference/get_all_page_ids) [https://developer.wordpress.org/reference/functions/get\_the\_title/](https://developer.wordpress.org/reference/functions/get_the_title/) &amp;#x200B; `$page_ids=get_all_page_ids();` `foreach($page_ids as $id) {` `echo '&lt;p&gt;'.get_the_title($id).'&lt;/p&gt;';` `}`
This does work, but my main goal is to output all heading tags for every page. So this would work for the wp title area in the post, though sometimes we filter that out and handcode the H1. Thinking DOM stuff now, but not very familiar with XML parsing methods yet.
Gotcha. I thought (it's been a while) that the H1 tag was the same as the post title. My bad.
It is yes, you are correct. Sometimes though, i'll filter that out and hand code it. I just want to, somehow, the string between any html tag I choose from every page. It's turning into quite the coding challenge. lol
You're misinterpreting it. There was never any option of dropping Windows support. What that thread refers to is JIT compilation, which originally required a Linux kernel but has now been made to work across all platforms. In fact, Nikita Popov whom is one of the main internals developers explicitly stated that Windows support is an absolute must.
Try [regex101.com](https://regex101.com). It's great for testing strings. If you only have one H1 tag, though, you can probably do something like this, though the other caveats listed are definitely something to watch for. It depends on how clean (or not clean) your believe your data to be. `&lt;h1&gt;([\w\s\-\.]+)&lt;\/h1&gt;` or `&lt;h1&gt;([\w\W]+)` &amp;#x200B; And remember that you can use `!` as a "not" to see if there's anything that doesn't match, which helps with data validation. &amp;#x200B; Good luck!
&gt; Nothing stopping you from parsing the docblocks using reflection No, and that's commonly used by Symfony (for example), but would be too hacky for an official feature. There's a [recent RFC](https://wiki.php.net/rfc/annotations_v2) for official annotations, which I think is a resubmission of an earlier proposal. I'm all for having official annotations, and "loading policy" pragmas was be a good use case.
&gt;That speed the website up for 10 users. If there will be 12 youre fucked. Dont do that ever. This depends entirely on the system, what it's doing and how it's being used. If you are storing data that doesn't need to be queried and is infrequently written, modern SSDs and OS file caching are generally going to be faster and more efficient than RDBMSs. Of course most of the time you don't need that speed and you are more concerned about efficiency of insertion, querying and data structure, but sometimes pure read speed is the only thing that matters. In any case, static file sites can happily serve tens of thousands of requests a second on cheap hardware, so your initial point about scaling is baseless. Scaling writes, on the other hand...
You keep talking about incomplete, but as I told you last time: every implementation of this is going to end up being incomplete as you can make up your own verbs whenever you want. For whatever reason you keep thinking your library is complete. There is no such thing... &amp;#x200B; I am +1 on your library as I see the benefit of it although IMO is over engineered and NIH, but you cannot call your library complete as there simply is not just such a thing.
That's utter bullshit. You are confusing one single / a couple at most posts about JIT support in specific (not PHP support). Which has been rightfully been killed. (guess what it was suddenly perfectly possibly within a sane timeframe). Do not spread FUD please...
First I shall summon the elder gods: /u/sarcizewski as they may be able to help you in more detail. Is there somethong specific you're stuck on? At its most basic, at one end you are using the Builder object to create a token, which contains any number of "claims", which are just arbitrary data in a keyed array. You provide the Builder with a Paseto version (currently 2), a key (simplest option is a symmetric key which you would typically set in your environment) and an expiry date for the token. The Builder returns a token which can be used as a string and passed to the client. On a later request when the client passes this token back you can use the Parser, supplied with the same key as before, to verify the signature and decrypt the token to retrieve the "claims", which would commonly be strings indicating an action the bearer of the token (the user) can perform, but that part is entirely up to you. You can specify rules on the Parser that the token must adhere to, such as not being expired (important) Note: I've not actually used Paseto anywhere, only read about it a year or so ago and am just reading through that readme again, so it's possible I've got something wrong. Your best bet would just be to pull the library into a bare bones PHP script and generate some tokens, then read them out again in a separate script.
Does anyone have any experience using this in a production app?
I would recommend ProxySQL for connection pooling - can also cache results transparently, if one needs that, and can give you stats which queries were executed how many times and how long they took.
Databases are just an abstraction over the filesystem. There's nothing inherintly good about a database
Hello Sir, I really love your vis.Great job. I'm trying to reuse your Google's autocomplete vis but this time by pushing my own data. But I didn't achieve. Can you please give me some line of thought ?
I'd say docker for Windows and docker for Mac are as slow as each other. I use a Mac and one symfony project we have will timeout the first time you run it after a change whilst it builds the cache. Some of my developers installed virtual box instead, sync their code to that and run docker there. Honestly I find docker on Mac so painfully slow compared to native Linux.
Yeah I actually wanted to try WSL2 as I'd read how good it would be, but found you needed to be on the fast track beta program for Windows upgrades and didn't really want to deal with any instability from that. I almost didn't bother but then installed WSL1 just to experiment and was blown away how it compares to using Windows for development 5 years ago. If WSL2 is as good they promise I might find myself moving back to Windows. If only they could improve the speed of docker on OSX I'd be happy.
Laravel
Thx, would you say this is the best scaffolding tool https://github.com/InfyOmLabs/laravel-generator ?
Such systems are almost always custom build.
I read these articles and get excited, cause well, performance optimizations are fun. Then I remember, in practice, I'd get way more benefit from finding a slow performing query and fixing it, or moving an entire query into redis. Still, I'm excited to see PHP gain more performance.
Traditionally most would have said CakePHP. At least in its early years, it was largely influenced by Rails workflow.
CakePHP is basically a clone of RoR to PHP
Laravel is not like Rails, like how cake is similar; however, Laravel is the best PHP tool hands down. Cake is also good as well.
Hey, guys, here's a little wheel I built today It's pretty basic and it might help &amp;#x200B; Probably the best in the old world PHP geo library [https://github.com/wujunze/php-geo](https://github.com/wujunze/php-geo) Encapsulates a developer-friendly API Abstract the driver layer can be switched flexibly Core module unit test coverage Use PHP strict types Perfect CI code quality analysis Continuous integration code style check Use data from 2,600 counties and districts nationwide to do the test I can go down to 1m
Totally gonna check it out üëçüèª
Get up and going fast for what sort of project? The beginning is always the easiest part. If boilerplate is a significant part of the project, then you're probably using the wrong tool or you're over engineering something simple. Maybe a CMS would cover you. I feel frameworks are legacy and that modern PHP is to construct your tool set using Composer packages. Pick the best tools available for the components you need.
I feel like Laravel take a lot of ideas from Rails til version 3. From there, it was a completely different thing. Following an unopinionated way of doing things.
You can start from this free udemy course - 16+ hours of PHP training - [http://php.link/udemy-php-basics](http://php.link/udemy-php-basics)
Where do you get the data and how often it's updated?
actually it is, php has changed but it is almost backwards compatible. there is no php 6, but php 7 instead.
I stupidly paid a high price for this book not thinking to check the age. I can't get my money back and I can't spring for another php book quite yet. I'm a poor college student. Is there an online resource that doesn't suck for learning php past a few simple scripts? &amp;#x200B; Perhaps someone could recommend another book that won't break the bank? I was pretty stoked to get started but now I'm pretty bummed. PHP is currently on version 7, so I imagine there's probably a lot that changed from version 5 and 6. but that's what i'm here to find out. can anyone tell me if a book that was designed for php 5 and 6 will still be relevant if im running php 7 on my machine?
Probably not. The basics are definitely still the same, but PHP 4 is over 15 years old and didn't allow the use of objects iirc. So if the book suggests you could use php4 it probably means it will be entirely procedural code,and it won't touch important parts of the ecosystem like composer. Also the way we work with PHP has changed quote a bit in those 15 years. So I'd really recommend that you get a more up to date resource. PS: PHP6 never existed. PPS: You should ask these questions on /r/phphelp rather than r/php
Don't waste your time with that book, PHP has moved on so much since 4 Yes there are loads of online tutorials Start here https://phptherightway.com/
sorry, I searched PHP and phphelp wasn't in the results :( but thanks for the referral though I will check it out :)
So, what does it do? You might want to add a bit of documentation on what it does and how it works. (Apologies if there is documentation, but couldn‚Äôt find it on mobile)
I'm looking at the book right now and I shit you not, it says,and I quote, "Because so many people still use PHP 4 or 5, we avoid any PHP 4, 5, or 6 specific code wherever possible. We suggest you use PHP 5 or 6 while learning the concepts in this book." So, unless the whole "PHP 6 never existed" is some sort of PHP 1337 h4xx0r inside joke, then this book is jacked in more ways than one.
thanks so much for the resource. looks to be promising :)
https://books.goalkicker.com/PHPBook/ This book is free and is a pretty reliable source. PHP 5 is very out of date so do not use it. Also no book for PHP6 will be relevant because it was never released/doesn't exist.
The majority of actual production sites, at least those I see, are still using late PHP 5.x, it's fine, I doubt many shared web hosts would be defaulting to PHP 7.x yet.
Php 6 was supposed to be php with full Unicode support. It was scrapped and because of a lot of the existing documentation mentioning php6 the php devs decided to skip 6 and go straight to 7 as it had a different focus
Haha no, PHP 6 was supposed to come after PHP 5... But it was never released because reasons (mostly it was supposed to be use Unicode internally and it turned out to be a mess), so it was cancelled and when they released a new version much later it was called PHP7 because it was very different from the planned PHP6. Some books just assumed PHP6 would be released eventually and mentioned it.
Ah, PHP 6...my favorite version...
One of the best. Other is Symfony. Both have a slightly different focus.
It‚Äôs very good, and is probably the best resource to get you started. As an aside: textbooks for a specific programming language are almost never worth it. They tend to be out of date by the time they go to print. Algorithms, design structures, design patterns, fundamental concepts, etc all make for great textbooks because the content can be understood and applied in a general sense. Most languages will have free online resources far superior to even a 2-year-old textbook
I have read some of the Head Start books and honestly I wouldn‚Äôt be upset. They are actually really great books for beginners. It holds your hand while actually teaching you how to do things instead of just telling you to copy some code and this is how you do it. I would hang onto it and use it to supplement your learning. It‚Äôs possible you may still run into PHP5 code, and it will still teach you the basics of PHP pretty well. I would use PHP The Right Way in conjunction with Head Start and maybe as you start to get past the basics you can use the examples in Head Start but write or refactor the examples in a more modern way.
Consider OS for your desktop environment and OS for php server separately. I just won't recommend linux as desktop environment, or windows as server environment. It means you should choose windows or osx for your desktop, and choose osx native, or linux (on bare metal/docker/VM/WSL) for your php application. Any combination of them works well for me.
How did it go? :)
Fuck off bot. You are derailing the discussion by putting the focus on petty typos instead of people's comments. Can't some admin ban this bot?
PHP the right way
Can you please explain what Is the library doing? There Is zero documentation...
Thank you for sharing
Laravel? Unopinionated? What have you been smoking?
You need that abstraction to scale that up.... Thats why there are a ton of old databases. Because they needed that 40 years ago.... Omg did anybody here made an application for more than 10 concurrent users? You will get huge problems.
you deliver static json files to the client in a separated request?
That's correct. But in a Docker environment, for example, that would be implicit, so you wouldn't have any downside.
Full-proof? r/engrish
Who thought those super-super smooth scrolling plugins are any good
Its just a rule of thumb. If you are not sure it belongs to session, it probably does not. If you think it belongs to session, it still probably does not. Is there a slightest notion of the thing being private? then it definitely does not belong to session. Only very few things should go into session...
Almost everything in the article is covered by using any popular framework: Symfony, Laravel, Cake...
No, none of the systems I manage use flat file in that manner. I've worked indirectly on projects that serve it to a frontend client after the fact. Generally I'd use Redis for this kind of keyed retrieval because of its reliability and complex data structure support, I was just pointing out that as far as reads go, there's no particular scaling issues with flat file if it's suitable for the project.
Just use rails then! Pick a framework that is tailored to PHP, its way of working and its ecosystem: Symfony, Laravel or even Zend Framework. Alternatively, you can compose your own set of features using composer and some micro framework (Zend Expressive, Lumen, Symfony Flex).
Please explain
Thank you for your Suggestions. In the future, I will improve the document and give the demo Other drivers will then be implemented and Redis drivers are now satisfied with the usage scenario
Try the usual suspects, in case they've not changed their admin login urls. /wp-admin /administrator/ (joomla) ?q=user/login (drupal) Beyond that, and that it runs from an nginx server, I can't even say that it's on PHP (nothing seems to be disclosed in the headers etc)
I remember the phrase 'Rails Inspired' back in the early days of Cake.
The package is backed by tests: https://github.com/stancl/tenancy/tree/1.x/tests. I use it in an app that's not yet in production but is in a late stage of development.
Oh nice. That's was not on my radar. But that's a point.
private? why? Almost all data in the session should be private and not accessible for the user.
If you need to do this in a plugin you'd do better looking through the functions available for wordpress: [get_posts](https://codex.wordpress.org/Template_Tags/get_posts) will return you a list of [WP_Post](https://codex.wordpress.org/Class_Reference/WP_Post) objects which you can then just get the title from `$post-&gt;post_title` or if people have been putting titles in the content instead, search through that.
Why shouldnt this be inside a framework? It would be shit if its not secure....
&gt;That's utter bullshit. You are confusing one single / a couple at most posts about JIT support in specific (not PHP support). I specifically said PHP8 with JIT.
Its not even "smooth". Its super fast scrolling
&gt;What that thread refers to is JIT compilation I know. I specifically said PHP8 with JIT.
Thanks for editing your post. I believe the problem is you said "talk of dropping Windows support with PHP 8" and one cannot drop what one does not yet have, so most people will interpret your post as saying they were discussing not supporting Window at all after adding JIT.
Use the OS that has the best environment that best supports the tools you need to use for development.
No PDO ? WTF ?
&gt; mysql\_real\_escape\_string What year is this?
&gt;I believe the problem is you said "talk of dropping Windows support with PHP 8" and one cannot drop what one does not yet have, so most people will interpret your post as saying they were discussing not supporting Window at all after adding JIT. I thought I made it clear by saying "there is the talk of PHP dropping Windows support come version 8 with the JIT compiler" but I can understand if people didn't read the JIT part they would assume I meant Windows support altogether, I should have been clearer. For the record, I never implied or meant to imply PHP8 would drop Windows support altogether I was strictly talking in terms of the JIT based on my reading at the time of the original RFC.
My Magento 2 experience cost me a client project as things went wrong and deadline was overshot multiple times. I have finally started working with StoreHippo which is a more gelled together experience.
... because the framework is already doing all that?
So do you have a clue or what? &gt; you absolutely can or &gt; Almost all data in the session should be private and not accessible for the user. Make your mind up and dont answer back. if you allow the user to input to the session you have a world of trouble.
The Docker image of PHP 7.4 is compiled with \`--with-pear\` : [https://github.com/docker-library/php/pull/851](https://github.com/docker-library/php/pull/851)
The session is stored on the server and inaccessible to the end user, there's no harm in storing data that the user should not be able to see within it. In addition, the session can safely be used to, for example, pass user input to the next request to repopulate fields in the event that the input has failed validation on the server. Certainly don't do something silly like executing arbitrary data the user has been able to store in the session, just treat it like any other data store where user input can be held and don't trust the input. The user cannot modify or access the session without the developer creating an interface for them to do so.
Are you looking at them academically or for a professional project? The two languages are fairly different beasts, so don't necessarily overlap as easily. Meaning PHP frameworks don't necessarily benefit from copying The Rails Way(tm). Not to mention that Rails had been much larger than its original MVC inception, with integrated frameworks for websockets (ActionCable), worker framewok (ActiveJob), mail framework (ActionMailer), CDN storage (ActiveStorage), and some other significant bits i'm certain I'm missing. So, are you simply looking to play with MVC using PHP, or are you in need of a stack comparable in functionality?
Docker for Mac is notoriously slow because it was developed for Linux kernel features that the MacOS kernel doesn't have, namely cgroups, which makes filesystem access _extremely_ slow. Try to spin up Drupal, or a large Symfony project, or even a large NodeJS project and you'll find that running `composer` or `npm/yarn` is going to be very slow compared to Linux.
&gt; Honestly I find docker on Mac so painfully slow compared to native Linux. It is, for technical reasons that can't easily be solved (`cgroups` support in the Linux kernel that docker relies on). It's abysmally slow, unfortunately. :(
Native PHP. But rather than doing any visual html/css design work yourself, use some ready-made templates and just adapt them to be populated via PHP. There are some great dashboard templates around, and very cheap ($20 or so). Template Monster is a handy site for such things. Keep the template as a separate file on the server, but replace all the built-in values with placeholders such as \[\[monthly\_sales\]\]. Makes it easy to allow different users to choose different templates if they wish.
The question of choosing a particular framework is extremely overestimated. **For a properly designed application to change a framework is a matter of a couple day's work.** Given your business logic is properly written in the Model, to rewrite some thin Controllers is a no-brainer, could be done automatically. So. Take whatever you like than then proceed with the actual code. You'll be able to change it in the future
That means not i implement a whole UI for accessing the whole session. omg
Because the framework does it you dont have to know any security related topics? Ohhh boy...
\&gt; toward native PHP for the preprocessing You can't go wrong with Symfony 4. The framework is now pretty much a micro service. It's almost the same as creating an index.php file. It just scales way better. You just add extra bundles everytime you have a specific requirement. And this way you just follow best practices for any other developer to pick up your work. Something obvious you will need from day one are: \- Use Doctrine DBAL (at the very minimum, but Doctrine has much more power for later) \- Use PHPUnit to unit tests all your code \- Command to create helpers for your data analytics business logic \- Guzzle (I think Symfony has a better HttpClient now) to call your BI API
I recommend modern frameworks with code generators that can do alot of boiler plate things like generate models from DB table. And doing all the other api things. [h](http://docs.apiato.io/features/code-generator/)ttps://apiato.io
Hey, gieter, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Doesn't sound like a complex application. I'd say laravel because you can get a local env up and running in minutes with homestead. Not sure what you mean by preprocessing, but if you need some CLI tooling that's also available. Data layer is probably simple enough where eloquent will be a sufficient ORM. Laravel has many vendor packages available, if you later need to add user auth, SSO, ACL. I don't know if you plan to have some admin backend, but for any "management" of financial/sales data it's good to have auditing (i.e. keep logs of who changed what and when). There are packages available for that as well. All in all laravel has a small learning curve and is easy to get started with. If you will not need a lot of UI's or comfortable with front-end frameworks like Vue or react then you might also consider Lumen. If for some reason you don't like laravel, second choice would be symfony.
Awesome component without an explanation what it does. Nice job. I wont try it out.
Also this package brings its own caching infrastructure with it. Even with a ton of drivers.
Sandi Metz has a lot of good talks about unit testing. I also really like [https://gnugat.github.io/2016/06/15/mars-rover-introduction.html](https://gnugat.github.io/2016/06/15/mars-rover-introduction.html)
8/10 bananas? I guess that's good? :D
Tests?
There are subtle differences on Docker Desktop For Windows, like : \- how it manages DNS, even the "host.docker.internal" doamin only exists in Docker VM (Windows &amp; Mac), not under Linux \- Filesystem replication is slow: when you do "composer install" or "npm install" it will propagate to the host very slowly (and read operations too, each PHP request will not be fast). &amp;#x200B; But it still can do the job for development, I get used to it (I'm using Mutagen to have bidirectionnal file replication without Docker performance issues). Like other said, Windows 10 is still great for development, but WSL is mandatory to do development efficiently.
While you have a point on the performance impact regarding docker on Windows and OSX, i personally don't really consider that an issue in my case. While filesystem replication has a (slightly imo) delay i don't really notice a delay when i'm actually writing code and testing it in Docker. I'm looking forward to WSL 2 and the changes it brings to developing with Docker.
Tests are here: [https://github.com/jkk/honeysql/tree/master/test/honeysql](https://github.com/jkk/honeysql/tree/master/test/honeysql) Additionally all honeySQL samples from the readme are run as unit tests with [midje-readme](https://github.com/boxed/midje-readme)
Depending of the application. I have a lot of Symfony based application, and some of them take 10, even 15 second to load (with opcache enabled, a ton of CPU &amp; RAM of course). Since they announced WSL 2, I'm waiting only THIS feature to be released. Chop chop Microsoft !
What kind of feedback are you after? I'm looking at everything from my own perspective and first thing that pops to mind is - why would I use that library? What does it help me with? What do I gain?
I think what I want to write is something that answers two questions: 1: What advantages does this library bring (the sell?) 2: How to use it for N I did have a readme revision that was geared up more towards the advantages of the library that revision might help to better explain it for the context of this thread: https://github.com/slifin/beeline-php/tree/020989092c6f65d1d5ad2fc7e2898398ecf6127d but I want to start fresh with other people's input (which is why it's baron now) I can answer both questions better if I know what users find most interesting about it and what their N use case is so I can create examples around it
It looks to be very well thought out! I‚Äôll probably give it a try.
What is the purpose of that binary? Wouldnt this be hell slow?
Thanks for linking to paywalled material.
That binary runs this code: https://github.com/slifin/beeline/blob/master/src/beeline/core.clj I can provide instructions if you want to self compile, I have a dockerfile for linux It takes your data structures and passes them to Clojure's idiomatic query builder and then returns SQL ```time ./darwin-beeline "{\":select\": [1]}" ["SELECT ?",1] 0.01 real 0.00 user 0.00 sys``` If you find a performance hole, I'll happily look at it, Graalvm has got 13% faster in real time since I compiled those binaries: https://jaxenter.com/graalvm-19-1-release-159701.html
im just no fan of mixing languages like this. I cant imagine that this string manipulation is faster in a binary. Also you loose all ability to cache internal stuff?!
So turn readable and straight forward SQL into LISP character soup? :P
Speaking on performance... what about Swoole ahead .NET on TechEmpower benchmarks, it still makes PeachPie relevant (in a performance perspective)?
To me, the big bang approach is disregarded way too easily and the arguments used against it may be selling points for another. As with just about anything, it depends if something will be effective for you and there's no one size fits all approach. To me it reads as if the author is pretty biased one way and only disregards another approach to promote the one prominent in the article. I know computer science is not all science, but when trying to educate, a bit more scientific approach would help the reader make form a more informed opinion than a hyped up one.
What need do we have for ANSI compliant SQL? Are you targeting some transfer protocol it should be safe for? I'm missing some additional selling in the selling points ;-)
Is this just a bridge for a Clojure project? Then you right Clojure as PHP strings? What is the point? Isn't better to write the SQL DSL using plain PHP so IDEs and static analyzers (PHPStan, Phan, Psaml) can helps us out even more? Or, isn't better to extract SQL (that is already a awesome declarative language) code into .sql files then IDEs can highlight, complete and DBAs can work on them separately? Didn't get the point of this project, sorry.
dude, nice. thanks for the share.
Yeah you probably right, but let me introduce you to mine: [https://github.com/peakphp/framework](https://github.com/peakphp/framework) XD
you should
being unopiniated may be relative. At least it's easy to see the effort from the community and the core-team trying to make Laravel keep growing as unopinionated as possible.
so basicaly ``` class MyClass implements JsonSerializable { use YPDJsonSerializer; /** ypd::jsonSerialize */ private $a; /** ypd jsonSerialize */ private $b; } ``` versus ``` class MyClass implements JsonSerializable { private $a; private $b; public function jsonSerialize() { return [ 'a' =&gt; $this-&gt;a, 'b' =&gt; $this-&gt;b, ]; } } ``` i don't know. i have to learn new meta syntax, i am restrained by the capability of that meta language versus full capability of PHP language. extra overhead for parsing annotations. no for me... sry
If you have problems with verbosity of PSR7 (or actualy anything), you can simply wrap it in something less verbose, that maybe doesnt offer that much functionality, but it fits your need. you will still depend on that "very generic interface" (though indirectly) while not having to deal with its verbosity.
Have you ever tried to just turn the guzzle exceptions off? it's as easy as passing `'http_errors' =&gt; false` in the $options to the Client constructor or any call to request(). Or alternatively not passing the default handler to the constructor which contains the exception throwing middleware by default.
I mostly want the scaffolding that rails has, all the other stuff was not special to rails only
In that sense, generators, which are responsible for scaffolding in Rails, aren't special to rails either.
I'm used to it now and it's no big deal, but they messed up big time with request and response bodies. I understand why the stream concept, but payloads so big they need to be streamed is a very niche use case for stuff typically done with php. You have to end up resorting to custom implementation tooling (like guzzle's stream\_for) if you don't want to go insane with boilerplate, but that kind of defeats the point of using a generic interface in the first place.
Well, honestly, I dont understand the need for stream_for function. You usualy know what you have and you can choose appropriate stream implementation by yourself (an inmemory string stream for short bodies and a filestream for long bodies, or so). Then whoever is resposible to read/render the body, can decide how to do it based on the size of the stream (read all at once if its small enough, read piece by piece if its too large, or whatever suits the case).
&gt;even after I set the option to not throw exceptions
\&gt; so I think keeping it framework agnostic is probably best for me at this point. Unless you're familiar with PHP very well, this is I would say the wrong choice. Frameworks (sometimes) give you a very guided track on how to accomplish something. If doing it ad-hoc was the way, why are you rewriting what is already ad-hoc? Probably because it's a terrible mess. Don't do that a second time. &amp;#x200B; If it's just blog content you can go Wordpress (probably a decent choice if its a client job and not a corporate job) or OctoberCMS (built on Laravel.) If it's a lot more complex then Laravel or Symfony.
I actually came into this from a .Net environment so I'm jumping into PHP with dev experience just not in PHP. It's quite a bit more important than a blog post as it deals with patient data. The existing project is a mess of what I think is spaghetti code with the huge strings of HTML. I think the person who wrote it was just old school so I thought at least breaking it out into an MVC architecture would be a great start at least. If you recommend starting with an existing framework I'm all ears. I just don't know where to start with PHP frameworks at this point. Is there any concensus or best practices in the PHP community regarding the available frameworks out there?
For frameworks it's pretty much between Laravel and Symfony. Laravel has a lot more tutorials and guides, is much more specific in how you do things and has a lot of magic going on behind the scenes. Symfony is more like a lot of packages that work together and has less magic. &amp;#x200B; There are others but nowhere near the adoption of those 2.
Frameworks make your life easier, not harder. If Laravel is too difficult at this stage, at least go with Codeigniter. You can separate your HTML content into files in the view folder, create a controller method and corresponding route for each of the pages, and load the HTML views in each as needed. Take one night to learn the basics of CI and you'll be able to start converting this site to it immediately. &amp;#x200B; Do try Laravel, at least, if you can manage it, it's preferred by more developers than Codeigniter. But Codeigniter is still a great gateway to frameworks for beginner developers, and the latest version addresses most, if not all of the problems most people had with earlier versions.
Laravel or symphony are the two main frameworks. For your use case I would suggest looking at symphony because you can just use the components of it without the whole thing, which is great when you are refactoring.
Yes I've used frameworks in a different environment, I guess I feel like coming from Microsoft .Net to PHP and Linux the training wheels are off and I'm responsible for more moving parts. My logic was to pull the PHP logic out and reuse it then as I became more familiar with things start looking at frameworks. I was just thinking the code is written, I just need to organize it.
If you are a seasoned coder go for Symfony, I assure you won't regret it in the long run. Laravel has lots of facades everywhere and doesn't make much sense. Also prefer data mapper over active record, so i wouldn't choose anything but Doctrine.
Thank you, one thing I was wanting to look in to was an ORM - so Doctrine and Symfony pair up well together it looks like. I'll take a closer look at that then. I'd heard of CakePHP, Laravel and Symfony but never more familiar with them other than the fact that they were frameworks for PHP. I'd not heard of Doctrine though so I appreciate the recommendation.
You could think about symfony as library rather than a framework as its components are loosely coupled. In your case, with good planning you could start replacing piece by piece with the right symfony components until all legacy code is gone.
You can make you own slimmed down framework using Symfony components but I "feel" like you shouldn't use a full heavy framework. Silex use to be a go to for a skinny framework but they stopped working on it. They say to move to Symfony 4 but I can't comment on that version of Symfony. Maybe take a look at Slim Framework. The only reason to use a framework would be to pass it on to other developers easier because they are familiar with the framework. Sometimes just organizing and naming things (variables, namespace, classes ...) correctly will help a lot and you don't have to change the architecture,
As a seasoned coder, depending on the size of the project, you might also want to check out Slim, as a micro framework. This gives you a minimalist structure to create your MVC app while giving you the freedom to DIY. Slim and Lumen are the two most popular micro frameworks, Lumen being the Laravel offering. Laravel and Symphony are the main PHP Frameworks, with Laravel being better for rapid deployment from scratch with a ton of magic and helper tools elegantly organised, while Symphony is better for tailored customisable projects if you know what you're doing. Laravel also has some of the best tutorials in the world through Laracasts. Check out the Integrated package by Jeffrey Way, which allows you to do easy acceptance testing which might be useful if you're short of unit tests. In Laravel it is implemented by Dusk
Lord Laravel, google all the things why Laravel but just let me tell you 1 thing people who dont like php are working on laravel because of rapid development and clean artitecture.
Look into https://www.amazon.com/Modernizing-Legacy-Applications-Paul-Jones/dp/131210063X - it's a book that does exactly what you want to do on an old codebase. Excellently written, easily digestible and teaches you MVC without locking you into a framework. Still up to date too.
If you want to avoid a framework, then I suggest you pick at least the next 3 libraries: * template * persistence (database) * route if you want a fancy router (it is optional really).
That's another thing to consider isn't it? This is a very important project dealing with patient data, I would almost rather be dependent on a few libraries than a heavily modified framework that would require a lot of work to retool if something were to happen to it.
Oh my. I thought this was about [server side includes](https://en.wikipedia.org/wiki/Server_Side_Includes) at first, and I was wondering what decade I was in.
**Server Side Includes** Server Side Includes (SSI) is a simple interpreted server-side scripting language used almost exclusively for the web. It is most useful for including the contents of one or more files into a web page on a web server, using its #include directive. This could commonly be a common piece of code throughout a site, such as a page header, a page footer and a navigation menu. SSI also contains control directives for conditional features and directives for calling external programs. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Thank you. This was the type of answer I was looking for. I understand the question was a bit of a "philosophical" question, but i think it's one that many devs come across at some point. This isn't my first time, but it's one of the times I really struggled on the approach and being that I've, unfortunately, not had the opportunity to work on a dev team I was just reaching out to the only semblance of the PHP community I know.
Well, you must be doing it wrong. That option works correctly. I never had problems to get rid of guzzle exceptions for high status codes...
And btw, if there is an option, that you think does not work as it should, you go complain about this on reddit? no, you go report it to the developers, maybe even fix it and send a PR. Did you?
Never said that.
This is very usefull!
&gt;Almost everything in the article is covered by using any popular framework: Symfony, Laravel, Cake... And or what was this comment?
You should consider, what you really want to do with the existing project. You might want to think of writing it again from scratch, using some framework you make some research first on which will suit u best. Although using a framework should be a prefered way, it will be quite hard to start using one, while having the bulk of your application still work the old way. If you want to keep the project alive while continuously improving its internals, then you should probably move step by step, dont try to do too much in one step. if your views are coupled with the logic, your first step might be to just separate the logic from the view part, even keep them in the same file, just move all the logic to the top, and move all the echos to the bottom. You will start seeing common pieces of code popping up in the logic, you can then move these common pieces to classes. You should also try to cover as much of your code with tests. For the legacy code it will probably only be possible to create some high level tests that test the entire requests/respnses above the PHP scope. But as you separate little pieces you will start covering them with tests too and you will become more and more confident when refactoring the old code. At some point, your model view and controler will be separate enough to be able to plug your framework agnostic classes to a framework. So to sum up, either way you should try to end up with a framework, whether you continuously upgrade your current code, or write the application from scratch. Both ways will take a lot of time and effort. Keeping the current one alive, unfortunately will bring all of its imperfections with it. Writing from scratch will lead to quite a long period when you are implementing new version without any release or feedback, while having to maintain the old code as well. On other hand, you will get the chance to make some better decision in i.e. the database structure and so on..
Best safeguarding of PHP application is writing it on a framework, so you don't have to invent all over again how to cover (not only) security issues that have been covered better way. It is not explained how it is handled and implemented already in common frameworks, it is like third part of tutorial "PHP for beginners".
._. i feel very sorry for you
Same.
This is discussed since 30 years and every outcome is refactoring &gt; making it all fresh. Everytime.
The past is the future. I do not get the reason behind this, encouraging the use of EOL software is not a good idea.
The reason is that some people were interested enough to put in the time. Free software developed in an open culture tend to implement features people want. There are companies out there making security patches for older PHP versions. Some people just run old versions.
That‚Äôs just a sign of rotting infrastructure. If you can‚Äôt run a supported version of PHP in the days of micro services and Docker, someone should be made responsible.
Agreed
mmtuts - https://www.youtube.com/user/TheCharmefis In my opinion, it is the best PHP teacher i found in Youtube.
There's no reason to provide backwards compatibility. There's a reason PHP has newer versions and didn't decide to stop at 7.0. I don't understand why people refuse to upgrade or even attempt to start doing so.
Hypothetical scenario - you're a fledgling web developer starting to branch out in to some freelance work. Your dads friend's business wants some frontend changes doing to his rarely touched website. 8 hours work, $200. Fair enough. Do you care that php 5.6 is out of support?
This [article](https://symfony.com/doc/current/introduction/from_flat_php_to_symfony.html) might help with the transition. Don't be alarmed that it is on the Symfony site. Most of it is framework agnostic.
Given that there is an understanding that since the '60s we are experiencing a software crisis, I don't think we should stop revisiting the subject of improving on our methods of delivering suitable software in such a way it isn't outdated upon or before delivery. Don't settle for IPv5.
Yeah we rework all the things every year again because there is something new and some new said so. If youre happy with the big bang go make your own stuff but trying to discard all the work the devs put into something is often the wrong choice. Very often.
You pretty much dont need a good plan at that phase. Just go with it. If you got somewhat structure in your code you find yourself in the refactoring heaven where everything is just pretty easy and fast to do.
That scenario clashes 100% with the existence of homestead.
It is, but apparently it makes business sense to let it rot.
How?
There are 2 schools, those that encourage the bad software to break, and those who want to make it run no matter what. I know admins who won'y install a
Laragon. Enough said.
Thanks for saying, /u/bitfalls :-) FWIW, you can get a digital copy at &lt;https://leanpub.com/mlaphp&gt;.
I would recommen slim framework, slimframework.com
&gt; I don't understand why people refuse to upgrade or even attempt to start doing so. Budgets and priorities of orgs that aren't engineering-driven? Maybe someone taking over upgrading a project built in 5.6 would prefer to move the project into Homestead before upgrading? One of the PHP community's major strengths IMO has always been the focus on maximizing backwards compatiblity and *smooth upgrade paths*. Not every organization that depends on some online software can afford to pay someone to read blogs about new node modules all day
You wouldn‚Äôt even be able to decently replicate such an antiquated environment on Homestead. Maybe if you start from scratch, maybe.
Thank you, I'm reading the first article now. This will come in handy I think.
Ive been coding for years and I spent alot of $ on different courses etc that where not up to standard so I thought I'd ask here mate cheers anyway lol
Yeah, understandable, but then they come crying around the internet saying "pHp iS a bAdLy dEsiGneD lAnGuAGe". They should gtfo with their opinions. So better invest today into upgrading rather than blame a language later because your unofficial patches screwed you over.
My biggest complaint to a lot of these approaches is: "Monolith BAD. I will now show you how to replace bad monolith with these 15 different services precariously wired together. As you can see my new model has added more points that need to be made fault tolerant, more redundancy cost, more complexity, higher experience/knowledge investment, higher hiring cost, and uses the latest and greatest technological tools that will be considered outdated in 6-12 months. BUT, we are not micro-server serverless buzzworthy, and you will probably be job hopping by the time the pain of upgrading/maintaining this nasty ball of yarn comes around so it's all good."
This isn't really true at all. Homestead optionally supports Apache which is the most common server still running PHP 5.6. We do a fair amount of work modernising legacy applications and migrating them PHP 7. Getting things running on Debian stable or Ubuntu isn't usually difficult. It's very common that we take on projects that are currently being hosted by companies using CloudLinux, who continue to patch PHP versions back to PHP 4, though fortunately I haven't had to deal with anything that old in a decade or so. They're usually running modern versions of Apache and MySQL alongside an EOL version of PHP. Our general workflow is to get the application running in a VM on the versions it's using in production, build an integration test suite (running from PHP 7.3), then when we know we have it running and passing tests upgrade everything and start refactoring until we're passing again (with a combination of the excellent Rector and manual work). This Homestead change isn't useful to us, but given the Ubuntu PPA is continuing to support 5.6 while it's still receiving unofficial patches, I don't think it's a huge deal as it takes no work for them to maintain and isn't a default, but may make someone's life easier.
Can try this as well for PHP Training http://php.link/udemy-php-basics More free courses at phptraining.com
Whilst I kind of get it, legacy apps and all, couldn‚Äôt you just use the older version of homestead that does support 7/5.6?
I wouldn't recommend using the IMAP extension functions directly, but instead use a wrapper which will make accessing your mail much simpler: &amp;#x200B; [https://packagist.org/packages/ddeboer/imap](https://packagist.org/packages/ddeboer/imap) &amp;#x200B; There are examples on this page for how to connect, how to iterate over mailboxes, how to iterate over messages in a mailbox and how to read individual messages. If you are looking to only get the plain text version of a message you'll need to use the \`getBodyText\` method.
Bad call
If your queries are simple enough that you can place them in .sql files then I would encourage you to do so This "competes" in the space of Zend DB, Drupal query builder etc where building dynamic queries at run time is important, IDEs do not autocomplete for those projects as they do not for this
Changes are ok. But no new software. Stick to the old homestead version and youre good.
The only characters with special meaning are : and # They transform into keywords and tagged literals respectively, both Clojure specific I think rather than general to Lisps No parenthesis :( :P
&gt; as it deals with patient data. Whether you go with a framework or not, *do not* run your own auth/encryption/security. In my experience, Laravel is really easy for "getting something done", and has default auth support, and is MVC.
If you need to run PHP 5.6 for whatever reason, it would be better to be running the latest version of Homestead than using one with many other packages that are no longer updated and also saves needing to run multiple environments if you only need to work with a single 5.6 application or are in the process of migrating it to PHP 7. The Sury PHP PPA is [maintaining support for 5.6](https://www.patreon.com/posts/php-5-6-and-php-25226448) until [Microsoft stop providing security patches for it](https://github.com/Microsoft/php-src). Given that Homestead supporting it doesn't add any additional maintenance burden and it's not a default or encouraged, it doesn't seem problematic to support it?
Sure I agree, but this isn't about racing query builders (though I'm happy to see results on that) this is about introducing something that doesn't exist in the PHP ecosystem, data orientated libraries: [https://www.youtube.com/watch?v=vK1DazRK\_a0](https://www.youtube.com/watch?v=vK1DazRK_a0)
&gt; There are even companies out there making security patches for older PHP versions. Yeah, the build of 5.6 that is included in Homestead is maintained by [Microsoft](https://github.com/Microsoft/php-src) and continues to receive security patches. Nobody should be building new software against it, but having the option to switch between 5.6 and 7 in Homestead could be useful for people migrating legacy applications and doesn't incur any additional maintenance burden onto Homestead, as it's already included in the Sury PPA.
I do freelance work for a non-profit that can‚Äôt afford to pay to rewrite a fairly complex system built on top of the PEAR MDB2 library. There‚Äôs no one to ‚Äúmake responsible‚Äù. The developers are long gone, and so is the committee who chose them. It‚Äôs fine for you to be a purist I guess, but these people have a website they‚Äôre stuck with for the foreseeable future, and it would be nice if they had access to security updates.
&gt; Budgets and priorities of orgs that aren't engineering-driven? Yeah, I‚Äôm amazed how hard it is for some people to understand that there are organizations that just want a fucking website.
I would recommend to look into the strangler pattern https://martinfowler.com/bliki/StranglerFigApplication.html
Because people who work with PHP are not the people making the decisions. Our two biggest platforms run on Laravel 4.2 and PHP, 5.6,I've been asking for some time to migrate to Laravel 5.1 and PHP 7.0 for years now, and everytime the answer is "Yeah sure, it's just not the priority right now but we'll definitely set some time to do it soon", but Sprint after sprint the only tasks we get is adding new features that are "more important". So yeah, I know I should just quit my job and find a company that actually gives a shit, but even if I do the guy that comes after me will have to deal with PHP5.6 and he'll be glad he can use homestead.
&gt; we are micro-server serverless buzzworthy, and you will probably be job hopping by the time the pain of upgrading/maintaining this nasty ball of yarn comes around The ostensible *purpose* is to enable scale, and enable it independently for different components. The idea is that your successors would have a boring time since all of the fun architecture work is already done.
&gt;[https://blackfire.io/](https://blackfire.io/) this helps a lot.
You should calculate the price of having their platform exploited. In my experience it helps when people see maintenance, or lack thereof, has a price too
I actually have a usecase for this. Network Solutions (the 4th largest domain registrar in the world) only supports up to PHP 7.0 with their shared hosting. We have a client that, for some arcane reasons, needs their Laravel app hosted on shared hosting rather than a VPS or PaaS like Heroku. Because every other client we work with uses 7.3+, I want to keep all my tooling up to date, but still need the ability to test code on 7.0 on my local machine before doing a deploy for this client. It sucks, but I am sure there are a lot of other devs in the same situation.
Sensitive are we? There are some exceptions that are correctly exempt from that option. So that option is working correctly. Complaining on reddit? I suppose I am but if my complaint is for something more along the lines of a personal preference/pet-peeve like a library being exception happy then I think the library is doing pretty damn well.
Which is an issue with the industry. But probably an unfixable one. People often don't see and understand the long term commitment when doing such a project. Especially the decision makers for non-technical organisations and they then go to a friend who knows a little bit about this web stuff and then move on ...
Think of it like any other preventative measure. Backups, for example. A good backup system will cost $xyz/mo, and the cost of not having backups and losing everything is $abc. The cost of upgrading will be some amount. The cost of a security issue being exploited that could have been avoided if we were up to date is this amount. Put into those terms the bean counters tend to find the time. And if not, get the refusal in writing so when (not if) shit hits the fan, they can‚Äôt point fingers.
I have autocompletion in doctrine query builder in my ide (phpstorm)
I've always been a tab-man anyway, but the post makes a compelling argument I hadn't yet seen. Browsers really need to switch to 4 as the default tab-width over 8. That's never made sense to me.
100% agree with tabs. It's the correct character for the job. Space is for space. Tab is for tab. Why on earth would space be for both space and tab, when there is an actual designated character for tab. Makes absolutely no sense. That would be like using a 0 character for capital O. And then building a text editor that automatically replaces your capital O's with 0's when you type them. It's ludicrous. When you use tabs, your tab widths are configurable. Can't do that with spaces without changing the width of a space, which changes the width of both spaces and tabs because you used the same character for both purposes. So stupid.
This is interesting, especially since PSR2 standards emphasize spaces over tabs.
I use spaces because of PSR-2. But I like tabs more for this job.
Using spaces instead of tabs is like using "100% vegan car tires". You could write a book about why it's so good, but after all it's just ultimate bullshit. For many years of learning programming I didn't even hear about the idea. If some tools are lacking some basic features you improve the tools or switch to some other, but instead these spacetab-faggots are preaching us all to degrade our skills and despite good practices and common sense do something that is basically wrong. The above example to start using '0' (zero) instead of capital 'O' says it all.
tabs are sexy anyway
"123456" isn't valid JSON so [json_decode](https://www.php.net/manual/en/function.json-decode.php) should return NULL.
You're wrong. "123456" is perfectly valid JSON. There's no requirement for it to be an object or array, even though that's how data us usually packaged (what with you typically wanting more than 1 value).
&gt;json\_decode("123456"); Seems curious: it's a string, not a number. So with the same logic, json\_decode("azert") should be valid too?
json_decode always accept a string, it is about what is in the string. number is valid json type, a string is valid json type, difference is, in json you write number just as it is, but you write string in quotes. ``` json_decode("1234"); //valid json_decode('"xyz"'); //valid json_decode('xyz'); //invalid json_decode("xyz"); //invalid ```
The argument you're passing to json_decode is a string because it's encased in quotes, but those quotes are only a PHP language construct and don't exist by the time it actually gets parsed as JSON. If you did json_decode("\"123456\"") then it would decode as a string.
Nice answer, thanks, that's perfectly clear now. I didn't know that "1234" was valid (we learn each day) Some validators accept it but others don't. So they should.
Thing of it this way... anything which is valid as an object value, must also be fully valid JSON. ``` { "hello": 12345 } ``` means that ... ``` 12345 ``` By itself must be valid.
In this day and age this shouldn't be an issue. IDE users could define: * what 1 level of indentation really is in source code * what 1 level of indentation looks like on the screen With that it would be easy to let a document indented with 4 spaces per level appear as if it was intended with 8 spaces (or 1). Then the only problem left is that the source code is _consistent_. Completely disregarding what it actually looks like (because you can let it look like anything with your IDE). The point of consistency would be to prevent unnecessary git diff markers.
Smart tabs... smart tabs...
those double double quotes are not going to work the way you think. It's actualy syntax error on php level.
Some early JSON specifications required that the root-level entity be an array or object. This restriction was later relaxed. This is why some old parser implementations will reject this.
What makes PSR godlike? I hated that line in the psr as it was released. They didnt even bother to discuss.
Huh, what happened there. They were escaped when I posted it.
I couldn't care less, every modern IDE will switch spaces to tabs and tabs to spaces
You do realize that the tab character predates coding? In books, maybe you have seen one in a museum, paragraphs are identified by a prefix of spaces before their first sentence. A tab if you will. (Sarcasm for humor)
This is generally a really bad idea. Authenticate between the two sites using JWT. If you don't control the second site, you probably shouldn't be trying to log people into it in the first place.
I agree. It seems really out of place and doesn't truly impact code style IMO.
Psr is broken in so many ways... Thats one of the worst standards to follow.
The code should be committed with tabs or spaces, for obvious reasons. The IDE should handle the rest.
The poor chap probably has never even heard of JWT before. None of the guys in my office ever had. And they have an average of 15 years experience with PHP.
Excuse me, /u/Irythros: In 2019, would you, actually, start a new non-library project without any framework? If not, we can and should authoritatively state that only for actual libraries and any non-trivial project, frameworks should always be used.
That's ass backwards. Worse case, your customers' patient info is going to be exposed. If only we had proper laws to punitively punish reckless developers.
Hypothetical scenario - you're a fledgling home mechanic starting to branch out in to some freelance work. Your dads friend's business wants some engine tuneups to their old backup work truck/pickup. 8 hours work, $200. Fair enough. Do you care about using an engine part with a recall notice on it? His car blows up and he's stuck on the highway thanks to your repairs. He'd have a right to sue you for negligence causing damage to his business. Or with your example, his website blows up and he: a) exposes his customer database, leading to serious grievances which could result in lawsuits (for which he, or his business insurance company, would come after you for) b) or if it's "just an information" website; the website goes down, he notices a massive drop in business and sues you for lost business. You, as a professional - whether you're some fly-by-night asshole pretending to be a web developer because you think it's 'easy money from home', or a professional who actually bothers to learn their trade, need to have a base level of pride about your work, at least to prevent lawsuits. But we're talking about Laravel so it's likely not just informational. That aside, your example is terrible because it's extremely specific - a tiny $200 budget for front-end work. You do realise you're in the PHP subreddit? I mean, I won't lie, I was appalled enough at the shallowness of this reply that I had a quick look through your comments. In some other thread you admit you have no in-depth knowledge about anything in web dev, constantly Google everything, and think that everyone is the same as you in this regard. Guess what - they're not. I feel rant/tangent about Reddit and how posts like yours with 13 upvotes at the time of writing make you seem like an authority or correct just because you've written something that sounds like it makes sense, when it doesn't. You can see I'm salty. I'll even tell you why. It's because PHP has a bad rap. And it's people like this guy who are holding us back. We have gotten so much better in PHP7 and it would require only a few subtle changes to the language to completely drop people unwilling to learn OO and slightly advanced concepts out of the business. /rant
If the part with a recall notice was already in the car you‚Äôd better believe I‚Äôm leaving it in there
So you literally ignore the part that is a danger to their life/business? Ok... Please go get a different job.
I‚Äôll tell them about it but if they‚Äôre not paying me to fix it I‚Äôm not fixing it. I‚Äôm not a babysitter I‚Äôm providing a service.
&gt; Do you care that php 5.6 is out of support? So... you do care (or rather, the hypothetical freelancer). And you should. If you don't care that their website could go down because of your own negligence (or lack of caring) then you'd be in hot water, which was my point. But in reality - you're right - the hypothetical freelancer _doesn't care_. *And that's the big fucking problem you're missing.* Enabling these people is not good for anyone - for the image of PHP devs or PHP, for the business, or for that asshole freelancer.
That‚Äôs not completely true. There have been extensive discussions about - amongst others - this rule. Eventually the decision was made to use spaces.
So what are you proposing is the best course of action for our hypothetical freelancer?
Yeah, you have auto complete for DQL not SQL, so when you try and do things that break https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch, DQL won't support that: https://github.com/doctrine/orm/issues/5657#issuecomment-181228313 https://i.imgur.com/IoxRxXj.png
**Object-relational impedance mismatch** The object-relational impedance mismatch is a set of conceptual and technical difficulties that are often encountered when a relational database management system (RDBMS) is being served by an application program (or multiple application programs) written in an object-oriented programming language or style, particularly because objects or class definitions must be mapped to database tables defined by a relational schema. The term object-relational impedance mismatch is derived from the electrical engineering term impedance matching. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
In an ironic twist, because we can easily convert spaces to tabs programmatically, then the differences between tabs and spaces is the same as the argument of which is better.
In which ways?
From what I understand, it's a decision based on a [survey](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md#a1-survey-data) of FIG members. It's basically a *democratic* decision based on taking wildly different projects into account. Many of which don't exist anymore and including two named "n/a" (seriously, check the raw survey data) So‚Ä¶ yeah.
Tabs for indentation. Spaces for alignment.
Please, if we have this argument, let's all agree to use Elastic Tabs from now on. Regular tabs solve the problem only partially.
Because you can align stuff with spaces.
This isn't exposed to the public, only a small group has access to it and it is all contained in a secure area. It already has a login system and session management but I'm new to this project and haven't looked into how that was implemented yet. My goal is to move it in the right direction and make sure everything is brought up to standards. Nothing has been ruled out as far as frameworks, I've literally gotten so far as to copy the code in to a new folder.
Consistency and symetry is non existent in psr. E.g. they fail to adhere to a single way of placing the curly brackes ('{'); on a new line some times and some times not, most other standards get this right. That's inconsistency. Psr wants you to not close the php open tag, which is super lazy and ugly: when you open something, close it, whether it being a toilet door, a trash can, a html tag or a php tag - that's asymetry. They want you to type the long open tag (&lt;?php) for no reason, this gets very ugly in template files. Why not be lazy here as with the php close tag? Again: inconsistent. They argue that short open tags isn't on by default, which is a valid point, but i still have yet to see a major hosting provider that has it disabled. And i could go on and on...
That's a great way to clutter up your project's commit history, not to mention create inconsistencies. Also, these people are dealing with enough. There's no reason to make their life or job even more difficult.
Yes, but most people don't seem to stop and think does this component actually need to scale independently and its it worth the added complexity/overhead in having it do so? &gt; The idea is that your successors would have a boring time since all of the fun architecture work is already done. You're successor isn't going to have a boring time because there are going to be 10 other projects to work on. Plus, now they have to keep up with and maintain all of the extra moving parts introduced with whatever monstrosity that was "fun" to architect.
That‚Äôs some ableist bullshit right there. Enjoy old age. I hope your eyesight doesn‚Äôt go
Me eyesight is bad for long time, this is why I wrote this comment...
Not that short opening tag discussion again. The php devs closed that issue :1)
This is *exactly* the reason why I have always used and advocated for tabs. They allow everyone to configure their width to their preference. Using spaces to "hardcode" how wide indentation is is like using bgcolor instead of CSS. It would be like if the theme your IDE used was part of the source code instead of configured by each developer. Imagine how annoyed you'd be if a light theme were set in the source code itself, "for consistency across environments." Tabs are objectively the best character for indentation. It's almost as if they were designed for it.
are you ok m8?
&gt;indentation &gt;alignment there is no real difference between the two, it's a tool for purely visual purposes. lexer doesn't care unless you're writing python
my thoughts are that people who spend their time seriously debating the merits of spaces vs. tabs probably have nothing better to do than beat a dead horse. probably unemployed too. also people who get their panties tied up in a knot over things that literally do not matter probably are more worried about how sexy their code looks rather than how it functions.
I can‚Äôt tell if this is all sarcasm or just the museum part. Isn‚Äôt that just a margin?
&gt;there is no real difference between the two, it's a tool for purely visual purposes. Um, yeah. Isn't that the point of this tabs-vs-spaces discussion? &gt;lexer doesn't care unless you're writing python This seems irrelevant to the discussion. I've never know that to be a concern when arguing for one or the other.
It‚Äôs the thing that after the first paragraph, next paragraphs are indented. To demonstrate, I‚Äômma make this a long sentence and the next paragraph, has a small indent on its first line. You can make your browser windows smaller, if this paragraph doesn‚Äôt stretch multiple lines. This convention comes from a time where each paragraph was preceded by a paragraph symbol or pilcrow, ¬∂. That symbol was eventually simply not printed, but the preceding empty space was kept. Nowadays, on the web, you see often a vertical space between two paragraphs, with each paragraph starting flush with the margin. Reddit also does this, so I‚Äôve used special markup to show how it should look like. Some word processors have also used this style, but a nicely typeset book still uses the blank space in front of a paragraph.
spaces: `n` characters tabs: `1` character
Ahhhh I remember now. Neat stuff. But it does seem a moot point in the context of programming.
&gt; "123456" isn't valid JSON [It certainly is.](https://www.json.org/) Any individual value is valid JSON, not just those wrapped in an object or array.
PSR tells you to use spaces. For me that's the end of discussion.
Did you ever heard of an invalid SSL certificate?
I'm not sure what your source is, but I believe the "TAB" key on a keyboard originates from the typewriter, and is short for "TABULATION". When you pressed the TAB key on a typewriter, the "print head" would move along to the next "tab stop". These tab stops could be set by the user to any arbitrary location along the print head's left-right traversal of the page. (print head is not the right word: in a typewriter, it's the paper that moves left-right, there is no print head as such, but it seems easier to describe this way) This allowed the user to easily format output in table form by setting the tab stops to the locations where they wanted each column to start.
I press TAB to put space ( Õ°¬∞ Õú ñ Õ°¬∞)
&gt;E.g. they fail to adhere to a single way of placing the curly brackes ('{'); on a new line some times and some times not, most other standards get this right. It's fairly simple, classes and functions should have braces on a new line, control structures should have braces on the same line. This is the same as all the major coding styles in C (K&amp;R, Linux, BSD) and was already in use by many PHP libraries and frameworks because it was the same in the PEAR standard. &gt;Psr wants you to not close the php open tag, which is super lazy and ugly: when you open something, close it, whether it being a toilet door, a trash can, a html tag or a php tag - that's asymetry. This is to stop unwanted whitespace being inserted when including or requiring files. [From the PHP manual. ](http://php.net/basic-syntax.instruction-separation) &gt;They want you to type the long open tag (&lt;?php) for no reason, this gets very ugly in template files. In template files you would generally be using the `&lt;?=` tag, which is explicitly allowed. As you say, the short open tag (`&lt;?`) can (and often is) disabled on PHP installations, which is why the PSR standards, intended primarily for libraries and frameworks, says it shouldn't be used, because it may mean your library won't work everywhere and potentially cause code to leak.
I should clarify. Indentation and alignment are 2 different concepts. Tab is the correct character for indentation. Space is the correct character for spacing and alignment. Nobody uses the tab key for doing alignment, they use the space bar. Likewise, you shouldn‚Äôt use the space bar for doing indentation. Now if you want to do alignment across multiple indentation levels that won‚Äôt work, but that‚Äôs kind of a weird edge case where I would question why you are trying to do that.
Just because they're both a tool for visual purposes doesn't make them the same. There are different kinds of visual purposes you know. Indentation is for creating a visual hierarchy. Alignment is for creating a visual unity.
I only use spaces. 4 spaces in php and HTML and two in js and css.
We can also easily convert zero to capital O. Doesn't mean we should start using zero instead of capital O. If all you care about is getting a circular character onto your screen, then fine use whichever character you like. But the capital O is meant for words, not zero.
I do what I want
The very last example could be cleaner but good read. It shows the people here whats their favorite framework is doing under the hood because nobody is learning that anymore.
Or you could just write a *proper* data mapping class. public class UserAPITransformer { public function fromApiToUser($data): User { return new User($data['username'], $data['bio']); } public function fromUserToApi(User $user): array { return [ 'username' =&gt; $user-&gt;getUsername(), 'bio' =&gt; $user-&gt;getBio(); } } IMO the problem with the approach of using annotations to automatically map objects (apart from the performance of reflections over large quantities of data), is that it breaks single responsibility and breaks the encapsulation of a proper Anti-Corruption Layer. One of the main purposes of creating a data mapper for your API is creating an anti corruption layer to decouple your domain code away from third party API's. Your domain code, the core of your service, shouldn't have to change to because the third party API changed. Your domain shouldn't even **know** about the structure of the third party code. I do get the appeal of doing it this way by having annotations and automatically populating them through reflection. It's nice, simple, and you don't have to write much code once it's set up. But the truth is that writing a manual data mapper class that acts as an actual anti-corruption layer honestly doesn't take much work. Usually less than 10 minutes per class, tests included. You're not really saving that much time by skipping it
&gt; What makes PSR godlike? Community consensus. There was an obvious need for a community standard so when one finally came around everyone adopted it. I may not like spaces over tabs personally, but having a single standard that most of the community agrees on seems like a better choice than not following it
&gt;Not only is PHP 5.6 at EOL but it is also at the end of it's security release cycle. If a major vulnerability is exposed (and there are already several conditional ones) enjoy being under fire as the person who last touched the code when their website goes down or worse. The version of 5.6 in the Sury repos, which Homestead uses, is still being [officially maintained by Microsoft](https://github.com/microsoft/php-src). It was going to be removed from the repos, but was kept after they took over responsibility for maintaining it. It obviously shouldn't be used for new development, but obody is suggesting that and it's not a default in Homestead. The only real result of this is making it easier for developers to migrate code still running n PHP 5.6 to PHP 7, as Homestead is a development environment with a lot of warnings not to use it in production.
Yes, that's my point. The argument is basically irrelevant if someone has a preference since it's now just a matter of processing power and time to convert as needed. You want tabs because the user can define it to appear indented 4 and the next guy 8. Which means you are taking \t and doing with it as you want. Tabs, spaces, it's all the same and this kind of argument over which is better is
Unless you indent with one space ;)
Bruh
bruh üòúüòúüòéüòéüòùü§§
Use a damned IDE that lets you define both your tab size, visual size, and output code. Will solve every single one of these problems for every engineer that wants to either be special or accessible - use the right tools configured for the right job.
Yeah, that‚Äôs my take. There‚Äôs a few parts of PSR-2 in particular that I strongly disagree with (spaces vs tabs was originally one of them) but I stick with it regardless for the sake of consistency.
Aaah another example of annotations controlled algorithm, no thanks...
There is too much magic to my taste. Everything could be done with a dedicated mapper class, and it will be more clean and straightforward.
Seems this thread, or perhaps sub or OP, has become a perilous place to give good advice. I'm seeing downvotes for recommending best practices. I don't care, as far as my own karma goes, but the net effect may ultimately be that people with experience and good advice will simply ignore and move on rather than share their knowledge.
Well, like it or not, that's the most popular ORMs on Java, C# and PHP. I personally don't like it, but I'm not surprised the tutorial goes that way.
No, they are not. Don‚Äôt mix tabs with spaces, it sucks and becomes messy after a while.
Annotations are pretty much optional for an ORM, they are just the source of mapping configuration (same as XML, etc). This article read annotations at runtime which creates a magic layer and affect the performance.
I know it is the way it is. And I don't like it either. How fast things are going to change is in stars, but I dont think it will be any sooner with people sharing more articles that make it seem like a good way to go. If you wanted to bring discussion why this concept is NOT good then you should have stated it. This way it just seems that you approve annotations driven algorithms and as such you encourage others to use it. And thats why your post got a downvote from me, sry...
&gt; This way it just seems that you approve annotations driven algorithms and as such you encourage others to use it. And thats why your post got a downvote from me, sry... That's not how downvotes are supposed to work, but don't worry, you're in a good company here on Reddit. On top of that I didn't say I approve annotations. I said the exact opposite. SMH
Yes they are optional, and I'm not a fan of annotations at all. But the article is writing a tutorial on how the mainstream ORMs are written. If it didn't do what Doctrine does, people would've complained "that's not what Doctrine does". Damned if you do, damned if you don't.
I'm talking about the very first post. "How to write a Data Mapper with PHP" sais you disapprove annotations? Dont think so... Only a fraction of people will read your nested comment saying that you disapprove with everything you just attempted to share with other people... And i know this is getting off topic, but can you explain me how downvotes are meant to work? I thought downvotes will make your post be delivered to less ppl because it drops down the list and thats exactly what I want.
This argument always seemed a little off to me. For people using spaces to indent, they enforce a specific tab width (e.g. 4 spaces). So you could instead use tabs but enforce a specific width in all environments. Then you can align everything with tabs too and you don‚Äôt get the usual problems.
But what happens when you press left/right arrow keys? Or click somewhere within the space - does it always go to the nearest ‚Äòtab stop‚Äô?
heck, git has transparent line-ending conversions baked in where you can have your working copy in CRLF line endings but your commits will have LF in them. Why can't there also be settings like this for tabs/spaces?
I've been up voting almost every comment, other than the one below suggesting I should be punished. I've gotten some helpful advice and have been looking at Symfony. I wasn't sure why my post was down voted initially - it seems a lot of posts are that way. I just assumed there might be a bit of that stack overflow arrogance around here...
&gt; Only a fraction of people will read your nested comment saying that you disapprove with everything you just attempted to share with other people... What are you even talking about? The person you're arguing with (for no reason I might add) and the author of the post are two different people.
Annotations that are consumed by a widely used library that works pretty well? Probably okay. Annotations that are consumed by code I'm also writing and would have to debug myself when it inevitable break? Far less okay.
You're not describing a problem of annotations here, but a problem of depending on an unpopular dependency. The risk is obviously higher no matter if it uses annotations or not. But OP's article is not a "library". It's just a tutorial. You're not supposed to analyze the risks of non-existent library made out of a tutorial here.
Yeah i think so
All one needs to remember. :)
I think you're right, the development world has a lot of toxicity, in general. That's a big reason why I've never posted a question, or at least not that I can recall. Either the question I have has been asked and answered, and so is findable, or I break it down into smaller problems that have been answered, or that I can figure out. Which brings me perhaps to some solid advice: you'll get opinions in favor of and against every approach. Try what you think works best for you - nobody else knows all the context that should be considered in your case. Succeed, or learn from failure, progress and move on.
In my attempts at an ORM i made something i have not seen before, maybe for good reason. The `Update(Member $member)` method is expecting a member. All i do is after `json_decode` if it contains an array in the same position as the expected param of the method being called, i do a cast from array to whatever data class type. So in practice i have something like: public function Update(Member $proposedMember) { //$proposedMember is automatically casted for me from array to Member //authorization... $member = $memberRepo-&gt;GetWith[Member:ID = $proposedMember-&gt;ID]; $member-&gt;Username = $proposedMember-&gt;Username; return $memberRepo-&gt;Update($member); }
That‚Äôs never happened to me in any editor/IDE
&lt;cough&gt;much legacy code out there in corporate land&lt;/cough&gt;. And often small companies, or products running just fine on older versions. That‚Äôs the world I experience, anyway.
First really good argument I‚Äôve heard in the discussion to be honest
Using Python. Spaces are mandatory. But is it really matter? IDE makes it same anyway. Just don‚Äôt mix them up.
Recommending Symfony over Laravel with those arguments to someone who is new to frameworks is the worse kind of advice I‚Äôve ever read. Symfony vs. Laravel is highly debatable, but in the beginner-friendly section, Laravel takes it all the way. Laravel‚Äôs facades make a lot more sense to someone who is just beginning with frameworks and DM vs AR is irrelevant for a beginner.
Looks pretty. I don't really see the need for it though when stuff like Datagrip exists.
Well, as you said, it looks pretty. And it‚Äôs free.
But most importantly it‚Äôs meant to be a really easy and intuitive tool to use.
yawn
Yeah I use datagrip daily w/ me owning the jetbrains toolbox. Looks cool though, would be a good replacement for phpmyadmin, but might not be able to compete w/ http://adminer.org which is fairly good for what it wants to accomplish. Me personally I wouldn't recommend using web based database managers, seems too much of a security risk.
What are Elastic Tabs? I've never heard of them, and I've been in the game since the mid-90s.
Look at Mr Neat over here with his aligned arrays.
Spaces for alignment is completely thrown out the window if you use tabs for indentation. If you want alignment, use spaces. If you're a heathen and don't care about alignment, use tabs.
I think you're misunderstanding me. Tab indented space aligned Tab indented thingamajig space aligned whatsit
I've always been curious about what DataGrip brings that isn't in PHPStorm.
I'd say, the second one is plain PHP with a composer installation. Plain PHP alteady contains lots of framework features. Direct access to query and form parameters. Access to the plain http body if you don't use form parameters. A simple json api. A usable hash library. ...
I dont remember when last time I pressed tab. IDE handles this things. Question should be, why there is no auto-intend feature in *X* IDE.
I don't think so as CI still includes a ton of features out of the box. Something like [slim](http://www.slimframework.com/) I would argue is closer to flask(at least in my experience).
CodeIgniter 3 is not a minimal base, it's a full featured framework (although it's very outdated) for an example of a minimal base framework on PHP there is [Slim Framework](https://www.slimframework.com/) or [Symfony 4](https://symfony.com) (only version 4 fits the description of being "lego blocks", previous versions had a lot of features by default)
Its stupid to talk about tabs vs spaces in general. Tab is used mostly in abstract and space has factual usage.
Question: What exactly is the goal of this?
Majestic plural is so underrated
i find it interesting to browse github for lesser known frameworks, though i have only read their [readme.md](https://readme.md), never tried one
``` namespace Wujunze\PhpGeo\Tests; class TestCase extends \PHPUnit\Framework\TestCase { public function testOne() { $this-&gt;assertTrue(true); } } ``` One of the most solid unit tests I've ever seen in my life.
It's not that simple, annotations do couple you the library but not directly and not in every case. It can be easily shown: You can write a domain layer using plain PHP classes and unit test it without any external ORM\* (i.e. abstract UoW and Repositories). Having or not having annotations would not affect the domain logic, meaning, so you can /in theory/ keep it in a separate repository and develop independently. On another end integration tests will fail if any of annotation is missing since ORM would not be able to operate. It does not make annotations better though. While ORM configuration is located separately from the actual persistence layer and you can't maintain it that easily. \*Most of ORM will still lock you into specific collection type.
Laravel is to Lumen, Django is to Flask, Rails is to Sinatra. Full framework to micro-framework.
&gt; It's not that simple, annotations do couple you the library but not directly and not in every case. "Not directly" doesn't matter. It's the same excuse I hear about about using DI containers like global service registries: "well you don't fetch singletons out of a registry *directly*, you do it by supplying arguments in your constructor". The syntax doesn't matter. The conceptual relationships in your code is what matters. Architecture analysis is a lot about seeing the "soft forces" in your code. Things like you mentioned: Doctrine gently nudges you into designing your entities in a certain way, using certain collections, patterns. The annotations are also quite crucial to the app. The class may work, but the app wouldn't if you strip the annotations. So everything goes together.
Not st all. Laravel and codeigniter are comparable to Django. They are full featured frameworks. Flask is comparable to Slim
First of all, I am not arguing anyone, I merely explained why I downvoted the post, because I believe a downvote or even upvote has no value for the author without explanation, what I consider good/bad about it. Secondly, it doesnt matter that they are two different persons. The author of this post shared a link to something he disapproves of, but he didnt state it in the post, making it seem like he is sharing it to spread the idea and promote the concept. I would have downvote the target article as well but im not going to sign up to that site to be able to do that.
Aah wait, there's yet a third person involved, now i get you. I didnt notice. But honestly, you should ask him why he got himself involved, not me... From the very beginning I thought I was talking to the author of the link post, my bad... But anyway what I said I stand for. And what I should have said to LogicUpgrade was why he even cares, as I wasnt refering to him.
Hey, slepicoid, just a quick heads-up: **refering** is actually spelled **referring**. You can remember it by **two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
delete
This us **not** data mapper pattern.
I do not claim it is a pattern. It`s just a way to write a data mapper.
Hello, folks! &amp;#x200B; I'm sharing a tool that I created while debugging a JSON API in PHP. It allows you to debug PHP by logging data without messing up your output. It really helps in situations where you cant \`echo\` or \`var\_dump\` - in my case, a JSON API. Even if you can debug that way, using this is much easier because you can see the logs where your front-end JavaScript logs are, thanks to the Chrome extension counterpart. &amp;#x200B; I use it daily and I hope you find it useful too.
[Standard JS](https://standardjs.com) made me use 2 spaces. I was using 4 and the jump to 2 was a bit strange, but I actually like it better. However, once I joined my friends in a design studio and started working on projects with them, they said they can't see 2 spaces on their large Apple screens. On the other hand, I use a smaller screen and larger text, so I needed 2. We decided to switch to tabs for this reason only. So yeah, tabs are for accessibility, spaces are for GitHub swag, in my opinion.
I believe it's more important to use sth like json-schema or grpc (protobuf) or any other technology to maintain the request/response schema, and use or write some script to auto generate those mapper / annotation / model class or whatever. So there's only a single source of truth. If you write everything and still to change a field you need to change three or four different place, that's probably not the best solution. In practice if it's an external source without structured schema definition provided, I will start from write validate and map logics by hand but keep those messy codes isolated from our business logic so one day someone may be easier to refactor it
A more minimal framework is [Level-2](https://github.com/Level-2)... Specifically, I use Transphporm, and after experimenting with a very boilerplate heavy explicit DI container, am looking at re-experimenting with Dice.
Why would someone use this for debugging instead of XDebug?
There are already better tools for the job- xdebug and monolog. from description it seems the only reason why this exists is because you had problems with sublime and xdebug. Well have you considered not using text editor as IDE? phpstorm and VS code exists, both are great IDEs and will handle xdebug spectacularly well.
Laravel and Django are both full-featured web frameworks, you got that part right. Flask is more lightweight and minimal, also correct. But CodeIgniter? Well, CI is what happens when you want to build a full-featured web framework, but you're stuck in the 90s and you don't know what the fuck you're doing.
Basically true for me except CI for the example. I want to add that there's a third way that add even more conventions or common logics to framework so maybe 60% common feature (user, authentication, contents, and relationships between them) can be done with almost no code, says Django Admin, Laravel Admin, Joomla/Drupal/Wordpress, or anything called itself CMF. It's a problem of who makes decisions, and how possible a decision is forced to change and the cost to change that. Micro-frameworks avoid to make decisions in order to keep themself adaptive. CMFs or those huge frameworks (you are right if you want to argue Wordpress is application instead of framework), by contrast, make many decisions to liberate developers from routine works so they focus to uncommon business logics.
Flask is to Django what Lumen is to Laravel.
I tried Xdebug and: \- it was tougher to set up \- it slowed down each PHP request \_with seconds\_ \- its Sublime Text plugin wasn't working, so I couldn't use it in my text editor \- it has breakpoints and all, but I couldn't use it for simple logging Besides, you can stream the logs directly to your browser in real time and each log appears in that tab's console, which is pretty handy.
I‚Äôd recommend you learn how to use XDebug, the few additional seconds of overhead per request will pay off substantially vs manually logging things.
Nope, I set up Xdebug, actually. It doesn't do the same thing. It's a \_debugger\_ and what I've made is a \_logger\_. With Xdebug, you can set up breakpoints and inspect stuff. With Relog, you can log stuff while avoiding the usage of \`echo\` and \`var\_dump\`, which may mess up your page. As an added bonus, the logs an appear in your browser console, making things much easier.
Looks like a worse [php-debugbar](https://github.com/maximebf/php-debugbar) written in NodeJS for no reason
I read through its docs and learned how to use it. But those seconds pile up, especially if you use a CMS that does a whole bunch of things beneath your code. I had to enable/disable it every time I had to debug something, which was annoying. And also, if you don't use an IDE, you're fucked, which I was. I guess this is just a great solution for Sublime Text users, then.
Not quite. php-debugbar is a \_dependency for your project\_. Relog is not. When you set it up in your \`php.ini\`, you can use it anywhere, on demand, without messing up your codebase. Also, and more importantly, you can use it for arbitrary files too. You can hook it up with Apache's \`access.log\` or \`error.log\` so you can debug .htaccess more easily. It would stream the logs directly to your browser. That's the reason it was written in Node.js - so you can use it outside of PHP.
What do you mean by ‚Äúmessing up your codebase‚Äù?
why would you care if dump and die messes up your page? at that point you are only interested in data you are dumping, everything else is meaningless and could be on fire and no one would care. and for that matter, you could just put breakpoint with xdebug and not use echo or var\_dump at all, you would have you page output completely intact. I don't know how browser console makes anything easier? typically people use tools like postman and insomnia for developing API, they have consoles like regular web browsers, at least they are not meant for same reason. so having output in console makes everything worse not better. and Monolog- the most popular php logging library already has ability to output logs in files, sockets, inboxes, databases, web services. It is widely used in most popular frameworks and considered as industry standard.
Sounds like a tool coming from Laravel trademark holder(s)?
CI3 is not a minimal framework it's a full featured outdated framework. And django is way behind the level of laravel. Laravel is an overegineered stuff that is hyped by you know who... In today's php, PSR is the future so either use expressive framework or create you're own using middleware and pair it with swoole. So the equivalent of flask is the php middleware...
&gt;Not quite. php-debugbar is a dependency for your project. Relog is not. When you set it up in your php.ini, you can use it anywhere, on demand, without messing up your codebase. `composer require --dev` is designed for this while altering php.ini is a worse solution IMHO. It's magical, hard to manage, badly scoped. &gt;Also, and more importantly, you can use it for arbitrary files too. You can hook it up with Apache's access.log or error.log so you can debug .htaccess more easily. It would stream the logs directly to your browser. That's the reason it was written in Node.js - so you can use it outside of PHP. So if you are talking about streaming remote log, there're countless solutions widely ranged from heavy full stack solutions like ELK/EFK stack to simple linux one-liners. &gt;Also, it formats arrays so you can use Chrome's UI to expand them and see the values colored. It can log objects too, serializing them and handling circular references. So you reply me before even check what php-debugbar can do.
probably "I don't know how to use dev dependencies"
I mean that it doesn't add doesn't add unnecessary dependencies to your project. You can immediately use it when you need it, the same way you can `console.log()` in the front-end without having to download the console as a dependency...
How to over-engineer your simple website. Just admit it to yourself: you're only generating HTML. If you need perfs, buy a bigger server.
I don't think this sub is a place for promoting the business... At least, this is what I see this site, as a company 'ad'. Maybe try on subs for this?
Why not just use JMS serializer? [https://jmsyst.com/libs/serializer](https://jmsyst.com/libs/serializer)
You need to alter php.ini in order to use Xdebug too? I haven't seen ELK/EFK before. And I'm not talking about remote log streaming. I'm talking about local streaming for debugging during development. No, I checked php-debugbar. And from what appears [in its screenshot](https://camo.githubusercontent.com/c0771cf72001176e705acc53157f1d5a810f8e7b/68747470733a2f2f7261772e6769746875622e636f6d2f6d6178696d6562662f7068702d64656275676261722f6d61737465722f646f63732f73637265656e73686f742e706e67) the array is in plaintext. You can't expand it and see individual values.
yea, it adds unnecessary global system dependency which you have to configure on global level.
Perhaps I should use Monolog to write to files, then. However, each log is encoded in JSON and has other metadata attached to it that I need in order to output it in the browser console. I should check if Monolog would be better. I care about dump messing the page because that JSON response is used by a CMS. If the response is badly formatted, everything in the CMS breaks not due to an actual error, but to invalid formatting.
And again, as with php-debugbar, Monolog is a dependency that you add to your project. Relog is more of a small utility that you use for yourself when you need to debug something quickly without having to donwload and setup anything beforehand.
You have to edit php.ini how the f that does not count as you have to set it up?
And? You have nothing to configure, you simply include it, and you do that only once. It's a small script that sits silently until you use `relog()` in your code. And it's not a global dependency because it isn't a dependency in the first place. Your project does not depend on that code in any way.
It depends on relog being installed globally, if that is not definition of dependency, I don't know what is.
Xdebug is an php extension, which can never work without php.ini (and I never talked about it in this thread), while php-debugger is php library. It will be way better to just instruct user to include your loaders\php\index.php manually, or (even better) just split it to use composer to declare the dependency Running server and client on same machine during development does not change a remote solution to local, you still have an agent or collector (php part), a server (node part), and extensions in chrome as client, it's a typical remote solution for debugging / log collecting You can click around a live demo in home page of php-debugbar. It's far more rich and customizable since it rendered in web instead of chrome devtool (OK I forget to complain about requiring that chrome extensions) You have that many rooms to improve, if you continue saying no to every comment, you and your project can never be better.
I didn't see you wrote _system_ dependency. I meant that unlike other solutions, it's not a **project** dependency. That's my whole point. Of course you have to install it globally on your system. But why is that a problem? It's your development machine after all. Also you have nothing to configure. You simply install it with npm, include the PHP script in `php.ini` and run `relog` in your shell. That's literally all there is to it. Did you read the project README? I think you misunderstand the whole point of the project.
Datagrip is baked into php storm, basically the same way webstorm is baked into phpstorm
because its about learn how that works. its not a library.
why project dependencies are so bad? I mean if it is so useful tool, you would make it available for all team members as development dependency, don't you? yes I read producthunt and readme, hence I'm puzzled why this exists when there are much better tools for the job. It's great you are able to create something like this, but it is a lot worse implementation of already widely used tools and practices.
Then why are you using a word that already has a different meaning?
By saying it's not remote, I meant it's not designed for streaming logs to different _machines_. That's what "remote" means to me. Otherwise, yes, it uses a server. One main point of difference is that, as you said, the debugbar is rendered in the page. Logs from relog appear in the browser console where one usually expects logs to appear. Your page's styles can affect the debugbar, which could suck. You can't use the debugbar to stream `access.log` or `error.log` to your browser tab _in real time as you browse the site_. You can't stream the logs to your shell terminal. You can't log from PHP scripts run via the PHP CLI too because there's no browser to render them. I'm not saying "no" to every comment. I'm very open to constructive criticism, actually. What I'm doing is trying to communicate the idea and use-cases of my project, which nobody seems to understand. People keep comparing it to other solutions that do different things or in different ways. My aim with this project is to unify the ways you log from front-end and back-end. A PHP version of JavaScript's `console`, if you will.
I used FPDF a few months ago in my project, after appending a few features it's really a great tool if you're looking for a simple solution
why do you even care what happens with FE on your local environment? better- why are you not using api clients or connecting to api endpoint directly ignoring frontend "cms" part entirely? all this seems like a huge effort to not do things like every other sane person would do them.
Dude, those are different two things. I use "data mapper" term because of this is a simple way for mapping data to an object.
Providing the tool for other team members is a good point, but what if they prefer different tools? For me personally, project dependencies are problematic because I have to switch to multiple projects daily and it would be hard to monitor which project has which tool and _if_ it has a debug tool at all. With relog, I know I could just type `relog()` anywhere, even in third party code that doesn't use any tool at all. It doesn't exist to replace other tools because it works differently and it's meant for different use cases. I doesn't provide a ton of functionality and features like debugbar or Xdebug. It provides small functionality at a small cost. You can use relog for quick debugging and if you need something more advanced - sure, feel free to add debugbar in your project. You can also think of relog not as a logging tool, but as an alternative to debugging with `echo`/`var_dump` if you will. It's much easier to read the data if it's neatly formatted in the browser console, versus in the page as plaintext.
###NO. THANKS HOW ARR YOU
You literally have to add one line in your `php.ini` **only once**. Other solutions need you to download dependencies **for each project** in which you want to log. Doesn't that make any difference? By "not having to setup anything" I meant that you don't have to set up anything on a per-project basis. Once you have relog ready, you can use it anywhere, on demand, immediately. That's valuable when you switch between projects a lot.
that only works if you don't use modern tools like docker (which you probably don't, since you don't use monolog, debugbar or xdebug) and every single project uses same everything.
I care about that because I have no choice. I'm developing a plugin for that CMS and I can't isolate it from the CMS itself. My code is executed by and for the CMS. Since mocking the entire CMS functionality would be brainless, it would be much easier to simply not mess up the response. Besides, even if I decide to mess up the response, I need to check whatever is dumped in the Network tab of DevTools, which is annoying on its own and not as useful because the data is not formatted. If you have a console meant for viewing logs, wouldn't every other sane person want them printed there?
my chrome shows formatted json response data in network tab when in preview tab. browsers console is meant for viewing javascript logs.
Well, not every project uses Docker and that's exactly my whole point. This is meant for _different use cases_. It tries to fill in a gap left by other tools, not to replace them.
I still can't find the gap where it would fit.
&gt;I read these articles and get excited, cause well, performance optimizations are fun. Then I remember, in practice, I'd get way more benefit from finding a slow performing query and fixing it; or moving an entire query into redis. This is true! However, that slow query you fix or that query you add caching to will only improve the page(s) that the queries are on. Preloading will affect *every* page in your project, so it's a super easy quick win to possible 10%+ performance increase. &amp;#x200B; If that 10% is worth the effort is up to you, but that'd currently chop 10ms off of our 99% percentile response times, so I'd be happy to spend the effort to get it!
Smells like low-effort blogspam
&gt;why people hate it Mostly because of its history and that during years it was mostly promoting bad practices due to the lack of industrial frameworks and tools. &gt;this small percentage like it, is it just a really neiche language? What ? I don't remember Nietzsche promoting it. &gt;It‚Äôs hard to see, is it like c++ we‚Äôre it‚Äôs hard but rewarding PHP is easy, and has nothing to do with C++ complexity. It's not comparable, at any level, not even the use cases. &gt;I would like to know Just try, but if you're not doing web development, it won't be very rewarding.
You're either a teenager or a Javascript developer - either way, this is a troll post, right?
&gt; PHP is not popular *Scratches head* I think you meme'd yourself. It's extremely popular.
&gt; I don‚Äôt see a reason to learn it but that‚Äôs we‚Äôre you come and tell my why. Why don't you learn English first?
Learn don't it.
It really depends on your use case. Do not learn PHP: - If you want to get a high paying job and more career opportunities. PHP dev jobs are in decline and the payment is usually lower then other backend languages (Instead learn Nodejs, Ruby or Go) - If this is your first backend/scripting language (even though its one of the easiest, I would not start with it. Pick Nodejs better) Learn php: - If you want to learn a new language - If you want to build some personal project - If you want to work at a company that already uses PHP &gt; and this small percentage like it I dont think its a small percentage. Lot of older devs that started working around early 2000s still work with PHP, because the language is progressing a lot. Its still not the best per se, but its way better than its predecessors v4 and v5.
PHP is crazy easy to install and learn the basics, and would generally be my language of choice if I were for example to give a programming class to 6th-graders. It has a reputation for being able to do a lot of things moderately well, and nothing superbly well. But since PHP7, there's been major boosts to the execution speed, enough from what I hear to lay a lot of previous criticism to rest. It also used to be very unopinionated (which, it still is) which contributed to its bad rep because unopinionated things statistically have a higher chance of being misused. But nowadays each version brings with it more chances to make your own platform stricter, so if that's what you're looking for, it's not really a problem anymore. Somebody may be better able than I am to tell you how PHP today can be used for extremely large projects ; I don't have a lot of knowledge there. But for small-to-mid projects (as in, platforms that attract fewer than hundreds of thousands of views a day), the language and its related platform are quick to set up ; it has a bad rep but enough people still like it that you shouldn't want for help for long ; performances at these scales is, to my knowledge, comparable to any other language and their platform. I can find no reason to outright refuse learning it. It all comes down to taste. I personally love PHP's syntax, even despite the hated inconsistencies. But you should try it out and see how it feels to you. You honestly don't have much to lose.
Yeah and that only works for the person who created it. If I have my tab width at 7 spaces and need to further align three more spaces, we're now at 10 spaces. If someone else views the code with a tab width of 4 spaces, there is now an alignment of 7 spaces, so it won't be aligned for them. Maybe they go ahead and add the remaining 3 spaces to fix it, and then you'll have 13 spaces on your end, making it wrong again.
Wow thanks for the tips
Try a framework line Symfony or Laravel. It's really good. Lots of good practices. PHP is good it can or at least did support Facebook. It's always been fast to create something with, it had bad practices especially early on. But like every language bad practices exists, it's just here they were on the web so it has been noticed
Thanks for the tips
I hear things about it that make it sound not good and not popular that‚Äôs all I don‚Äôt know much about it and now I can see it‚Äôs a lot more popular.
Just like any language, its what you make of it. If there aren't any jobs around for php developers then there is less value for you. I use it daily at my job so it is very valuable to me. Have you ever heard of Wordpress? A google search suggests 34% of all websites are made with wordpress. Wordpress is made with PHP, and most theme efforts will require some PHP knowledge. CakePHP is my favorite framework for more complex backends. Its got a really deep object relational model and lots of great documentation.
The built in tools are fine for when you're working on a database at the same time you're coding. But if you just want to connect to some database, like say the production one, it'd be weird to do that through phpstorm.
I couldn't care less about whether or not you like PHP, or decide to use it, or not. &amp;#x200B; I love PHP because it is extremely practical and multi-paradigm (code how you want to code), and with PHP 7, I really can't complain about performance. PHP can also run on anything. It also has a massive community around it. I also like that it has been around the block for a long while.
This is where coding standards get too strict IMO. I prefer Option 1, but if you spend time to defect Option 2, you're wasting everyone's time. Both are readable and neither adds significant cognitive time to understand.
PHP gets shit by people who never used it or tried it for 5 minutes 10 years ago. C++ has different use cases, can't really compare it. As for popularity its extremely popular, no idea who told you it's a niece language. The learning curve is very low compared to ruby, java, cs etc. That's also why you see a lot of shit tutorials and code in general. In the end it depends on the programmer whether the code is good or not.
Option 1, this way both single line and chained methods start the same way. Additionally if you have multi-line parameters all variations look similar enough to not create additional cognitive friction.
People told me php was bad I wrong now I see it is good I have seen jokes about it on r/programming humor. I hadn‚Äôt heard much good. I see now that it‚Äôs something I should learn. I see it‚Äôs popular and I fucked up in my wording I still wonder why I called I niche (probably because it‚Äôs 10:30pm in aus Rn and I‚Äôm tired a shit) just thanks to you and everyone else in the comments for giving me advice on it.
In this particular case it makes no sense to comment out the first method call, but generally speaking, having each statement on its own like makes it easier *to comment it out* or have a tidy diff in case of additional/removal. From this practical point of view I would choose (2)
Ale you need to know od that they should not exists
All code is aligned. Prose paragraphs are indented, but we don't write code paragraphs (usually).
Take into consideration the following: * Neither [PSR-2](https://www.php-fig.org/psr/psr-2/) nor [PSR-12](https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md) does not deal with this. * [PEAR says](https://pear.php.net/manual/en/standards.funcalls.php#standards.funcalls.splitfunccall) "calls **may** be split onto several lines" * As I remember Zend also had something in their "Coding Standard" but I can not find it From my side I prefer the first on but i do not use it consistently. \`\`\`php $object-&gt;var-&gt;method(); // I keep this in one line $object-&gt;method1()-&gt;method2(); // If the method names are small and maximum two method is chained I keep them in one line \`\`\` My opinion is that PSR does not deal with this for a reason.
All code is aligned. Code is (usually) not tabular data.
Skimming through it revealed thst you are indeed correct.
&gt;If I have my tab width at 7 spaces and need to further align three more spaces, we're now at 10 spaces. If someone else views the code with a tab width of 4 spaces, there is now an alignment of 7 spaces, so it won't be aligned for them. This is not how tabs work. I suggest you try it for yourself. Remember, use actual tabs for indentation, not "4 spaces = a tab".
Tabs for tabular data. Spaces for alignment. All code is aligned.
My opinion is option 3 - dont use chaining. It makes it hell to debug.
Traits? They should not exist? Are you serious?
I agree that this discussion leans towards nitpicking, but in the end consistency is all that matters in my opinion, so if we can decide on one style and everybody follows it, that's great. And possibly have tooling to automate fixing :)
I use both depending on the line length. If it's short enough then I put the first method call on the same line as the variable.
yeah my spelling is completely fucked.
A counter argument to that would be that commented out code is dead code and should be removed, so it \_should\_ not matter as the comment would not reach the PR stage. Hence it would be useful for development only, and in my opinion while developing you can do whatever you want (as long as the final product is valid)!
&amp;#x200B; This is an edit before I wrote it was so badly it made me look like an internet troll so if there are comments that roasted me you know why. Also sorry for spelling or grammar errors is 10:44pm in Australia and I'm tired.
If you make a request and obtain a HTTP code answer (regardless of whether it indicates the client and server did the correct thing or not), Guzzle did its job and shouldn't throw an exception. It shouldn't assume for the client and server that it's time to enter an error state.
Don't go to programming humor for education, I have seen so much posts there that are just blatantly wrong and get thousands of up votes.
Sorry, I don't see it as a counter argument. First, development involves either numerous commits and code reviews so I don't see why a dev code shouln't follow the coding standard. Second, a tidy and readable **diff** is a life safer if you are doing a code review / browse through commits, so this approach helps with production code as well.
For those arguing that it depends on the length of method names, I think I heavily disagree with that. In my opinion having coding style rules depend on length makes for a brittle approach. What happens if you change a method name and suddenly a line break has to be added. Renaming things should not have side effects: &amp;#x200B; $array = \[ 'aaaa' =&gt; 1, 'b' =&gt; 1, \]; &amp;#x200B; $shortName = 1; $veryLongVariableName = 2; $object-&gt;method() \-&gt;anotherMethod(); These to me are wrong, because (example 1) if I add an array key which is longer than \`aaaa\` it will force me to reindent the whole assignment, same with example 2, and with example 3 renaming \`$object\` will mean having to reindent method calls in the following lines. &amp;#x200B; That's why to me if you have more than one method call, you should have a line break, regardless of what line length setting you're using :)
e.g. $array = [ # 'one', 'two', 'three', ]; is a generally agreed upon format. I don't see why this approach couldn't be extended to the method chaining.
Create a new project called ‚Äúdatabases‚Äù and remove files tab and pull databases tab to the left - you just created datagrip :)
Good points
The biggest problem with PHP is that it is interpreted and not compiled but as testing getting more and more popular is it getting to be less of a problem as it was before. It used to have a bad reputation and people still loves to brag about it but most of the time those people those not follow the evolution of the language (in PHP 5 object orientation was rewritten, PHP 7 added a lot of speed and PHP FIG added a lot of standardisation) and of its frameworks (Symfony added a lot of great libraries). The language barrier is quite low so you can start programming in PHP in minutes (depending on the operating system you use). Personally I use PHP for Rapid Application Development (RAD) as you can make a deployable and functioning application much faster than some other languages. (Python and Ruby also a good choice but I know PHP much better.)
You are mistaken. Let's say you have the string `1234567890`. 10 characters. Let's say you want to line up under the `8` character. With a tab-width of 4 spaces, you would need 4 additional space characters to get to 8. If you then increase the tab-width to 8 spaces, your spaces will effectively be indented an additional 4 places, and it will no longer be aligned. &gt; No, you're at 4 characters: 1 tab + 3 spaces. Yes, you're at 4 *characters*, but visually there is a difference between a tab-width of 4 + 3 spaces, and a tab-width of 8 + 3 spaces. If two different programmers with different tab-widths are both trying to align the same piece of code, it's going to cause big problems.
FPDF is good I also like to use dompdf as well for HTML to pdf
&gt;Let's say you have the string 1234567890. 10 characters. Let's say you want to line up under the 8 character. Then you uses spaces, because that's alignment. Done.
You shouldn't learn it. Do something better with your time like starting a passive income business.
No need to be a dick, not everyone's first language is English.
It's a pseudo example. If you care about alignment, use spaces and not tabs. Simple as that. You can't have both.
Meh. I pay for the Jetbrains toolbox, so I just use whichever tool is more relevant.
Better to avoid to use them. It's attempt to introduce multiple inherited classes, but to be honest, if you use them, it's sign to review your design. Everything can be done without using traits
Programmers are more emotional and illogical than their reputation advertises (due to the nature of their job). So, they exercise a certain reactivity when it comes to programming language debates. Learn php. It‚Äôs easy and designed for the web. It is quickly deployable. And follow the right way to configure your setup / coding practice so things are secure from the onset.
Everything can be done without Object Oriented Programming, but does this mean that we should not be using classes? Traits definitely help in examples mentioned in the video, so why not use them and avoid code duplication and make our life a little bit easier?!
His is.
Why learn a language that is used on 80% of the web? Sounds like someone has been talking to too many Python newbies.
Huh.
OP - did you post this because you built it? And/or are you recommending it? How does it compare against alternatives that have been discussed countless times to date? I've primarily used wkhtmltopdf and it was a struggle so I've always had my eye on alternatives but given how much time I invested into wkhtmltopdf the switching cost is high.
The only people still shitting on PHP are either old and bad developers or people that don't use it and listen to the old and bad developers.
Given your confusion, I can only assume you're using tabs incorrectly. Here's a visual example of why my suggest just works: tabstop = 2: [https://i.imgur.com/KqI8YCi.png](https://i.imgur.com/KqI8YCi.png) tabstop = 4: [https://i.imgur.com/3IV7J1S.png](https://i.imgur.com/3IV7J1S.png) tabstop = 7: [https://i.imgur.com/Q5cwpEc.png](https://i.imgur.com/Q5cwpEc.png)
I would say the main difference is in small details. For example when I press the short cut for Open Class in PHP it will look for classes while in DataGrip it will look for tables. Also DataGrip has a nicer support to version control "console" files.
Ever heard of single responsibility principle? The fact you need a trait means you are already extending some other class. That class has its responsibility, your child class brings second responsibility. And the trait is bringing third one. Its not about yes or no OOP. Its about good or bad practices.
I'll second this. r/programminghumor seems to be disproportionately younger devs / student devs.
Yes, I'm working on it. We are currently using `wkhtmltopdf` on our production applications for generating tons of reports, but various problems are starting to get annoying (custom fonts not working, generating pdf times out randomly, and the fact that development seems have stopped). I like [browsershot](https://github.com/spatie/browsershot), but I hate that it needs node/puppeteer to work properly, that is what drove me to make this package.
In many cases, I would have chosen option 2. But in this specific case, option 1 reads better, because you are "creating" the builder, and then enhancing it in the following lines. That said: I avoid using fluent interfaces whenever possible, because the resulting code is difficult to debug.
What about traits in Entities and Unit tests?
I‚Äôm just a creature of habit :)
It should be clear which class/trait is responsible for what. Let's say that we have active record model and validation trait. If validation of the form does not work you will check it inside ValidationTrait, not searching inside class which has many other methods except validation. If I understood correctly you think that using traits is bad practice. Is Laravel written with bad practices that it has so many traits? [https://laravel.com/api/5.6/traits.html](https://laravel.com/api/5.6/traits.html)
Creating framework is kinda different than app. But still no for traits. Want OOP - go with classes
Some good folks explained it back in 2013: [https://beberlei.de/2013/04/12/traits\_are\_static\_access.html](https://beberlei.de/2013/04/12/traits_are_static_access.html) &amp;#x200B; Effectively, you can replace any trait with a static method, so yes, avoid them, and design pure static collaborators (functions).
In entities, they cause a massive amount of headache. A fix in a trait can break so many downstream consumers due to the stateful design of PHP traits. &amp;#x200B; In unit tests: use static collaborators, or inject (or instantiate, in PHPUnit) dependencies. This will make the test code also much simpler to follow, since you won't be jumping around in the inheritance tree when debugging.
wkhtmltopdf has stopped in favor of the chrome headless development. Its not needed anymore
Get the results using PDO: [https://www.w3schools.com/php/php\_mysql\_prepared\_statements.asp](https://www.w3schools.com/php/php_mysql_prepared_statements.asp) Loop through them with foreach: [https://www.php.net/manual/en/control-structures.foreach.php](https://www.php.net/manual/en/control-structures.foreach.php)
Active record is antipattern on its own, but thats another story. There is nothing you cant solve with composition instead of trait. And it will give you more flexibility. In the specific example you named, I dont see reason for every record to have a reference to whatever is needed for the validation. This is example of what should be handled by external validation service. You would pass all records to the validator to validate them. Not have every record contain validator so it can validate itself anytime. This is no trait vs. class problem. This is like paper trying to stamp itself (thats just the first real world analogy that comes to my mind). Paper is paper and stamp is stamp, you need someone to use the stamp on the paper. Same with records/entities and validation rules, you need records and you need rules and then theres a validator to check one against the other. As for laravel, I dont know that framework much, but if they use a lot of traits, then yes it is a bad practice. But dont worry theres something wrong with practicaly every framework, dont be naive...
Can you give me an example where trait solves a problem that can't be solved otherwise. Preferably if that problem is not something that comes from bad design.
Option 2 because all the chained calls are aligned.
No arguments there, but if I was digging into performance optimizations I would clearly go for the biggest baddest fish in the biggest pond I could find, not an isolated rarely run query.
I'm not saying that it can't be solved otherwise. There are probably not many things in programming that can be solved in only one way. There are a few things I've contemplated using that come to my mind right now: &amp;#x200B; [http://atlantic18.github.io/DoctrineExtensions/doc/blameable.html#traits](http://atlantic18.github.io/DoctrineExtensions/doc/blameable.html#traits) [https://github.com/hautelook/AliceBundle/blob/master/src/PhpUnit/ReloadDatabaseTrait.php](https://github.com/hautelook/AliceBundle/blob/master/src/PhpUnit/ReloadDatabaseTrait.php)
Please idk much about php but I know it‚Äôs much bigger than what people say.
I know people like to save some writing. And so they started to do things like using code annotations to control program flow and hide functions in traits (because traits are cool right?) and other things. But they ignore or dont realize the drawbacks that come with it. I am grown on C and I tend to think about how things work inside and I care about performance and flexibility. I don't care if I have to write some more characters or split a file in two...
the issue is Vagrant boxes get stale over time. And Homestead moves forward pretty quickly. We publish base box updates at least once every 2 months and often faster than that.
Yeah what I wrote made it sound like a troll post I‚Äôm shit with words.
If there's no reason why the comment about it? Some people are stuck on older versions and as long as it's easy‚Ñ¢ to provide older versions, the project should.
Looks like mixins in JavaScript
These examples are just completely pointless and wrong... Flying helicopter and "plain". Superheroes lifting the hammer is even worse. What this has to do with any real-world usage of traits?
That‚Äôs because their isn‚Äôt a gap. If he keeps pushing the ‚Äúit doesn‚Äôt mess up your HTML‚Äù angle there‚Äôs clockwork to remedy that which has a much better feature set. He also seems to think that anyone is going to want to add a system dependency, that‚Äôs the equivalent of a PHP extension, to add a non-psr-compliant logging tool to the stack. Good luck when someone forgets to remove their high effort log call.
Excuse me for "plain". Have you checked the full video? There were other examples also.
While code is usually not tabular data, when you are doing multiple levels of indentation to create a hierarchy of information that is a kind of table. Tables aren‚Äôt always just a grid of rows and columns.
It's precisely this kind of "analysis" that hurts more than it helps. Making subtle value judgements about what's universally appropriate from scratch, as opposed to what's useful in practice, is not surprising.
No, he's flagrantly violating their trademark. It also has much more secure, and better, solutions like adminer. The creator created a "solution" to a "problem" that has been solved so long and so well that it's just another commodity. In short, they wasted their time.
I just read the url and decided not to click because my traits have nothing to do with static access lol. Really nothing. Not at all.
Very nice :)
&gt; In entities, they cause a massive amount of headache. A fix in a trait can break so many downstream consumers due to the stateful design of PHP traits. Then youre using traits wrong.
The people dont see the drawbacks which arent there if you use it right.
I don't have any goal I just do reverse engineering of a site which is using the same concept... I just need to learn how they work...
I also wrote something about Traits: https://not-a-number.io/2018/how-to-use-the-php-traits
Thanks for sharing it.
You know that symfony has this is the core components? :)
I'd say that usage of traits is wrong in the vastest majority of scenarios. So far, I've only seen one possible use-case, which is in re-implementing iterators (due to bloated `Iterator` API): easily replaced by implementing `IteratorAggregate`, or by using `Generator`. Since the tests will need to be repeated anyway on each class, saving keystrokes is not as important as it seems when first inspecting the `trait` keyword in this language.
They are effectively composition of static methods into `private` class scope, with by-ref property access. You can take a `trait` like following: ``` trait Counter { private function increment(int $count) : int { return $count + 1; } } ``` And replace it any time with ``` final class Counter { private final function __construct() {} public static function increment(int $count) : int { return $count + 1; } } ``` If you use them with state (which is quite terrible, even with tiny traits): ``` trait Counter { private int $count = 0; private function increment() : void { $this-&gt;count += 1; } } ``` You can translate it with: ``` final class Counter { private final function __construct() {} public static function increment(int &amp; $count) : void { $count += 1; } } ``` That is arguably a mess, but that's effectively what the trait is doing (just in a more obfuscated and "at first glance nice" way). Use the pure function version (same as above): ``` final class Counter { private final function __construct() {} public static function increment(int $count) : int { return $count + 1; } } ``` In practice, all traits can be replaced with functions that work much better, and in less obscure ways. But hey, if that doesn't help with the argument, all I got is a bunch of personal empirical knowledge about the fact that **removing** traits simplifies a codebase. I value functional purity a lot, and the `trait` keyword in this language is very much not helping on that front.
Can you add support for Firefox?
You need to install Node.js to use it. And installing additional Node.js is probably more messing than installing pure PHP dependency. And why do you need Node.js if you want to use it with Apache? You can also run PHP without Apache.
Symfony is splitted into components since version 2. Flex is supported since 3.3 and the standard way for new projects since 4.0
When you decide that $this creates a dependency, which is of course the whole purpose of introducing a trait into a codebase, your methods all end up as static. Of course someone then follows that it's useless, because they already gutted the feature.
When you decide that $this creates a dependency, which is of course the whole purpose of introducing a trait into a codebase, your methods all end up as static. Of course someone then follows that it's useless, because they already gutted the feature. &amp;#x200B; \&gt; all I got is a bunch of personal empirical knowledge about the fact that **removing** traits simplifies a codebase &amp;#x200B; That's not relevant. Simplification is a nice to have. Stability and maintainability are not black and white, but minimizing risk (like when we had to add doctrine as a store to a bunch of entity classes that were using a different store), it was optimal.
In the localStorage but this is a r/javascript thing. Go away with you Clientside! This is a serverside only sub! (Expect php will go clientside in the next 30 years)
&gt;So far, I've only seen one possible use-case &amp;#x200B; There is one more: trait IdTrait { /** * @ORM\Id * @ORM\Column(type="uuid", unique=true) */ protected $id; public function getId(): Uuid { return $this-&gt;id; } } The only real usage would be for repeatable columns in entities, like ID.
You did not use a single class construct in your examples. Whats if you gonna use $this?
I have one good trait in use for that here :D be aware. You can replace it but that has some refactoring behind it. Its a `trait Media` (for a model) inside it there are getters/setters and some better getters for the same database columns everywhere. YES SAME COLOUMS WE DIE /o\\. But its not simplifying the codebase if we gonna refactor this hell now. The trait is simple as fuck.
I am posting once again. Please, no derogatory or overly critical posts because this project is still in development. &amp;#x200B; We are recruiting from Reddit /r/PHPHelp and /r/PHP for programmers for a Content Management System named Cerberus. This is a very old project that I postponed and just restarted development for. I wrote all of the code for this up until Version: 4, Build: 0.6. I just finished updating the code to work on the latest PHP version by using PDO statements (not released in alpha yet). This is alpha stage software so there are probably still vulnerabilities in the code. There is a long list of things to do in the To-Do list. This project is meant to be open source and freely available for non-commercial use. I aim aiming for quality, easily maintainable code and expand-ability. I came up with some great ideas and concepts. I created a system of variable naming to keep it consistent and clean. Once we move it out of alpha and into beta and then a stable release we will charge $5 monthly fee for a commercial license. Right now the project has 2 programmers, myself and my friend. Progress is slow for this project currently because of time constraints in both of our lives. I am still working on making better concept videos and lectures about how it works. The next one will go into great detail. The next version will be 100% point and click, drag and drop. I would like to make use of OAuth and other modules in PHP. Source Code disclosure is actually a feature of the system to encourage secure, viewable code from the browser. &amp;#x200B; Architectural Concepts for Cerberus: [https://www.youtube.com/watch?v=LaTCJjwZcrE](https://www.youtube.com/watch?v=LaTCJjwZcrE) Manual Installation Video Demonstration: [https://www.youtube.com/watch?v=icSvLhErLdg](https://www.youtube.com/watch?v=icSvLhErLdg) GitHub: [https://github.com/TinkeSoftware/](https://github.com/TinkeSoftware/) &amp;&amp; [https://github.com/TinkeSoftware/CerberusCMS](https://github.com/TinkeSoftware/CerberusCMS) SourceForge: [https://sourceforge.net/projects/cerberuscms/](https://sourceforge.net/projects/cerberuscms/) &amp;#x200B; &amp;#x200B; About Cerberus: Cerberus Content Management System is a Monolithic and Modular Content Management System that is written in 100% Pure PHP code with 100% Pure HTML output, and it supports multiple Database Management Systems. Versions are always thoroughly tested for errors before official release, and upon release will be free of error and will always pass validation checks for Hypertext Markup Language ( HTML ), Robots Protocol, Real Simple Syndication ( RSS ), Cascading Style Sheet ( CSS ), Post-Hypertext Preprocessor Versions ( PHP ) and each of the SQL Database Management Systems. &amp;#x200B; Cerberus Content Management System source code is completely handwritten by the author(s) whose names are credited in each release. Approximately 20,000 lines of easy-to-read and well documented Lines-of-Code powers the Cerberus Content Management System Core Releases. &amp;#x200B; The CerberusCMS project is focused on data security and ease of use, therefore we have decided to make very little use of JavaScript in the PurePHP Releases. Since JavaScript is incredibly vulnerable we have decided to keep JavaScript use at a very basic minimum. Currently you will only find a few lines of JavaScript code in the PurePHP Releases, one line at the bottom of the Cerberus.php file to auto-close the webpage for inactive sessions, another line for the insertion of BB codes into forms and one more line to print the News and Article entries. &amp;#x200B; The still-secure, but easy-to-use releases feature extensive use of JavaScript, JQuery and AJAX for the best drag-and-drop user experience. &amp;#x200B; Cerberus Content Management System Releases follow authentic Frisian / Frysk words for elements. &amp;#x200B; Cerberus Content Management System, Version: 4, Build: 0.6, Code Name: Wyn, has been debugged and tested to be 100% functional and secure on the latest Apache, HTML, PHP and MySQL versions, which at the time of this release is: Apache Version: 2.4.38 - 2019, HTML Version: 5.1 - 2019, PHP Version: 7.4 - 2019 and MySQL Version: 8.0.15 - 2019.
Do you really think this is going anywhere? Please look at some tutorials how software is made. Your software runs ok and it was a lot of work i see that but that is now how software is written these days. I dont want to say it but its shit. Real shit.
What have you written ? Can we all see something you wrote ? Look bud, this project is a work in progress. Even Arch-Linux was shit in the early days. Your responses tell me you're just a troll or an Online Persona Management account holder attempting to ruin this project. Please don't comment on my threads anymore.
Look at that: [https://symfony.com/doc/current/introduction/from\_flat\_php\_to\_symfony.html](https://symfony.com/doc/current/introduction/from_flat_php_to_symfony.html) &amp;#x200B; And then read that: [https://phptherightway.com/](https://phptherightway.com/)
phptherightway.com seems like a good resource.
This thing has some fascinating coding styles at the very least. * None, of the files, end with .php * Indentation is consistent but somehow still all over the place * Mountains of procedural code. * HTML is &lt;CENTER&gt;&lt;FORM&gt;Like This&lt;INPUT TYPE=SUBMIT&gt;&lt;/FORM&gt;&lt;CENTER&gt; And drumroll please: &gt; $DB-&gt;query("UPDATE {$\_ACCESS\_DATABASE\_PREFIX}\_members SET member\_password='$\_Module\_Change\_Password\_POST\_UPDATE\_PASSWORD\_HASHED' WHERE member\_username='$\_GLOBAL\_USERNAME'")
I like how easy it looks how you navigated through the codez. It must have to do with that &lt;HEAVY&gt;&lt;COMMENTING/&gt;&lt;/HEAVY&gt;
I have seen this argument several times (and I respect the development team) but I still don't get it. Using your stateful counter trait I can do: class SomeClass { use CounterTrait; } $someClass = new SomeClass(); $someClass-&gt;increment(); I honestly don't understand how this could be done with a simple static function.
&gt; The Data Mapper is a layer of software that separates the in-memory objects from the database. Isn't that exactly what the blog post described?
Apologies if I‚Äôm asking a noob question: is this package providing the multitenancy pattern for Laravel?
Yes, it's a package that implements the multi-database model of multi-tenancy for Laravel applications in a way that doesn't require the application's code itself to be modified for tenancy, unlike the other solutions.
It's weird. Looking at all this so hard makes me feel like it's made with Dreamweaver or some such. It's at least too verbose for me to read on mobile
`&lt;center&gt;` its obsolete https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center
Nah. I didn't use anything except my own fingers to write this.
yes, symfony has been split unto components from a long time now, but when I said the it was "lego blocks" it's because it starts with a minimal requirements and you add what you need later, which is what OP was asking Symfony3, even when using flex, has more packages installed by default than Symfony4, that's what I meant
Just looking at the css and it looks really dated. Have you looked into modern css style guides like http://getbem.com/introduction/ And that not even getting into sass as a preprocess for better element/component separation. Plus the compiled version could have all the comments removed making this a smaller size. Also the index.php files that are preventing access to dirs could be done in apache with .htaccess or better yet only have public files in your web dir. Check out laravel for this kind of structure. When you say 100% pure html... why are you generating it in php files? And the CAPS on element tags just seems so far out of date. The last time i saw that was first year college and it was already out of date then. I also came across a youtube video on how to manual install. First step was uploading via ftp... this is notoriously a dated way to deploy a project. Why not `git clone http://myrepo` Anyway, I hope you get your product off the ground but it seems like it has a low of modernizing to do before people will pay monthly for it.
Ok here are my 2 cents. All projects (especially pet projects) have to start somewhere. In most cases is easier to get your idea working and visible up front (sometimes at the cost of good programming, sometimes as the cost of the frontend, or backend, sometimes the UI). While I'm sure this project is lacking somewhere it is a personal project that could use some guidance (and help) from the community. So I'm game I'll give you help. Hit me up on GitHub or DM me on Reddit.
Yes it needs to be modernized.
Awesome!
This is like building a rocket to get across town. Just use monolog: https://github.com/Seldaek/monolog Make it write to a local file on the dev machine. SSH into dev machine and run tail -f /your/log/file.log Way simpler. No need for NodeJS nonsense. Don't like monolog? Fine. Use https://www.php.net/manual/en/function.syslog.php Then tail -f the syslog. ez
/r/PHPhelp/
Come to our Discord Server: https://discord.gg/gQK2yMM
&gt; Effectively, you can replace any trait with a static method You can't have encapsulated state within static scope, You can't call instance method from static scope... It's simply not true, unless you struggle enough to produce transformation which makes no other sense than show equivalent code. I can transform OOP into procedural, but it's not enought to claim that OOP is hidden procedural ingnoring all the consequences of such statement. Traits are just statically imported partial class implementations and (uncontrolled) coupling is the only true disadvantage. You can overuse it to catastrophic proportions importing same traits to unrelated classes or throughout layered scopes. Framework or library suggesting direct use of one of its traits should be automatically blacklisted.
Statements are being updated to PDO. The modules do not have a file extension deliberately to give the browser the ability to read the source. 'Procedural' code is being used as a kind of hard-coded base release. Indentation is very consistent. It's my coding style. This code doesn't reflect my current skillset. It's just old code from 2008.
You don't need to be embarrassed by it. At least you have a system and some standard of quality, there's plenty of legacy code that I maintain that is considerably worse. Some of it was written very recently. That said, I don't see a USP and I don't see enough quality to justify putting more investment into that codebase. You would be better off starting from scratch.
No way I'm starting from scratch. It would only take a week to update most of the statements with the amount of time I have working on it about 1 hour per day.
It's not just the statements, it's the architecture and it's the practices and it's the fact that you're asking people to give up their time and compete in the already oversaturated CMS market. Not to mention you want to compete with paid products. I'm sorry, it doesn't add up.
Gotta start somewhere. I agree it is saturated now, but if there was one to beat them all on every level: quality code, quality front end, highly secure, highly expansible.. well then... It would be worth doing that, especially if the commercial user base reached high levels at $5 per monthly cycle.
Well best of luck to you.
Thanks.
Very nice, but why Chrome instead of https://github.com/GoogleChrome/puppeteer ?
I have to chime in anytime someone says "xdebug is hard/slow and that's why I don't use it" because I've heard it so many times from developers who are in that area between var_dump() and a debugger which may sound like overkill. I work on a huge PHP app (Drupal 7 - tons of modules/libraries, very heavy) and xdebug makes it maybe ~100ms slower. virtually unnoticeable outside of performance profiling. I have it enabled all the time. we have a distributed dev environment using docker so it's not even possible to disable it. but depending on how you configure it, it could result in delays, like if you had profiling enabled on every request instead of using triggers. for that there's a few browser extensions that will let you toggle debugging, profiling, and tracing (usually called "xdebug helper" or something). re: it being hard, sometimes development is hard. do we not develop things because they are hard? no, we do it anyway because the end result is something better than the easy way. as said here already even if there was a few second overhead you are still way better off investing the time configuring xdebug and switching to an IDE that supports it no benefit in adding logging calls when you can break in the stack and see everything vs. having to add relog() everywhere I want to check a variable. plus kinda dangerous unless you have a check in place to prevent having a fatal relog() call go to production
I use [puphpteer](https://github.com/nesk/puphpeteer) for that and I couldn't be happier. It's a two php project. Php uses rialto which calls node which calls headless chrome. I works surprisingly well.
[removed]
Such a useful tool.
You're correct that it can't. But this argument boils down to more about stateful vs stateless programming than traits at this point. I don't like using traits because I've found they make the codebase harder to reason about, and you need extremely disciplined rules about how to use them if you don't want to pull your hair out, but I think the examples put forth here are conflating the value of stateful vs stateless design with usage of traits. If a class needs to track state, it should be an instance, and therefore should not be tracking state statically. Conceptually the concept of state and static is extremely problematic for me. State requires an instance. Period. If you don't follow this rule, or you mix static methods with instance methods, may God have mercy on your soul. Statelessness however, lends itself to function purity, which means static is fine (arguably, even preferred). But none of this really has to do with traits per se. Thus I would say the argument about traits should be more to do with whether or not you think they are a good solution for code splitting and code behavior composition. I would contend they are *not*, but that's a different argument than what this thread is discussing.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [Swoft 2.0.3 major update - launching elegant microservices governance](https://www.reddit.com/r/PHP2019/comments/cavku0/swoft_203_major_update_launching_elegant/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
True, but I think the must useful part is being able to stream the logs to the browser, which would be hard without any extra help. It's useful because you don't need to leave the browser console, speeding up development, especially when you're working on parts of an app where you constantly switch between front-end and back-end.
How about a NameTrait for things that have name? And a DescriptionTrait for things that have description? When Will people realize that a property And a getter for it, does not need reduce repeating...
I agree with what you say. For me, though, Xdebug slowed down things a lot. The CMS panel I was developing a plugin for had a great amount of AJAX requests and perhaps that's the reason. Even if the delay is 100ms, it piles up. Since I use that CMS for a lot of projects, having to turn on/off Xdebug constantly would be a pain. If I get into a more messy situation, I'll probably look better into Xdebug and even set up an IDE. My point with this project is not to replace Xdebug, but to give something to people "in that area between var_dump() and a debugger." Also, switching to an/another IDE could be a tough pill to swallow. I like my development workflow as is. Not all my projects involve PHP, so switching just for Xdebug... I don't know. The alternative is using an IDE for PHP + whatever else you prefer, which is not ideal either. For huge enterprise apps, of course - install an IDE, add Xdebug, throw everything you can. With Relog, my aim is to give something less advanced for less advanced use cases.
This tool does a good job for me and helps me with development. It provided things that I needed and that no other tool seemed to provide easily. My logic was that if it helps me, it could probably help someone else too. I'm not trying to make this thing the new PHP standard. I'm merely giving a less advanced alternative for less advanced users. If you don't see a use case for this tool, cool, feel free not to use it. Maybe people with different backgrounds, workflows or preferences can find it useful.
If there's great demand, I can add, yes.
The Node.js part is for reading the files and starting a WebSocket server to transmit them over. Yes, you could probably create that functionality with PHP too, but I can't. I felt more comfortable with Node, I knew how to do it with Node, so I did it with Node. Besides, you probably have Node installed anyways for bundling your front-end assets. For this reason, I thought that using Node might not be such a bad choice.
At my company we use Loggly for this. You send all your logs to Loggly and use the website to view the logs. You can also use Splunk. You spent a lot of hours building your solution but there's already services that to this for you. Like I said you built a rocket ship to go across town.
No, what he is describing is an ORM.
FTL, it's at the end of the article (didn't realize at first and google "php swoft" hasn't really picked it up for me): - https://github.com/swoft-cloud/swoft - https://en.swoft.org/ Seems to support MySQL/Redis but not PostgreSQL unfortunately.
Please add it. Extension code can probably be the same because both browsers support WebExtensions so you just need to publish it.
Have a look at typo3. You wont get near that quality without a big big big team. \&gt;quality code, quality front end, highly secure, highly expansible. typo3 has exact this.
Can you start by creating a README with some actual information? I would like to know: - how to install - how to configure - how to extend There are a number of text files. If you convert those to Markdown GitHub will show a number of these formatted. I'm always willing to help others, but this is like handing a box of sticks and ask for a chair to be made :)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [Shipping entire PHP package with another parts for commercial solution?](https://www.reddit.com/r/PHP2019/comments/cay0ye/shipping_entire_php_package_with_another_parts/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [New features coming in PHP 7.4](https://www.reddit.com/r/PHP2019/comments/cay0yn/new_features_coming_in_php_74/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
You should look into your distribution format if you can declare PHP as a dependency, including it as a binary seems like a very bad idea, what if the customer already has it on one machine? What if it needs to be updated? From the license point of view, yes you can, see https://www.php.net/license/distrib-guidelines-code.php
Lot's of good things in this PHP 7.4!
Java software does the same - they ship a JRE which they use if it's not installed on the machine. It works.
Customer wouldn't have PHP installed, that is guaranteed as it's aimed at very specific customers in very controlled environments, their environments require minimum modifications hence the reason I wanted to ship it with PHP package.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [7 Tips to Write Flawless Issue Reports on Github](https://www.reddit.com/r/PHP2019/comments/cayide/7_tips_to_write_flawless_issue_reports_on_github/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
He doesn't mention [preloading](https://stitcher.io/blog/preloading-in-php-74).
Problem is that there is much more ways to use traits wrong, then there are to use it right. It needs some serious thinking before you blindly use a trait. I'm not saying things are black or white. Thats never so simple. But honestly I never needed traits. Everytime I was thinking about it, I realized that there is something wrong somewhere up the stream, that was causing me to think of solving a problem with trait. When I fix the design, the need for trait is gone. Sure I use traits written by other people, when they're not giving me much choice. But personaly I won't write traits as I never see the need to do so... It doesnt hurt to be pedantic in theory, then ofc in practice one does never hold perfectly to all of their ideals. But you just have to set it high, so that when you go under the line, you are still doing it pretty good.
He is being just that :)
The author is weird as fuck. He's OK with all these (in my opinion) excessive and somewhat confusing new operators, but he has a problem with underscores in numbers. I mean, surely that's the *least* controversial of the lot.
I agree with the author. All the other new features bring the language closer to conventions used by other languages, the number underscore doesn't.
&gt; All the other new features bring the language closer to conventions used by other languages, the number underscore doesn't. I mean, Java has it, Python has it, Ruby has it, Kotlin has it, Swift has it, C\# has it. Do I need to go on?
Can't wait for typed properies
Thanks but I still don't understand why traits are considered static. To me traits are just a tool for building classes. They themselves do not do anything. They don't track state (static or otherwise). In the CounterTrait example. SomeClass ends up with a regular $counter state. Absolutely nothing static going on. To me at least: class SomeClass { private $counter = 0; public function increment() { $this-&gt;counter++; } } // And class SomeClass { use CounterTrait; } results in identical classes/instances. No static involved from a developer's perspective. Conceptually, to me, using a trait is pretty much the same as using a macro which gets expanded.
Is this GDPR compliant?
But why have it in the first place? I rarely come across huge meaningless constants, usually big numbers are made up from something, so simply do the calculation, instead of hardcoding huge meaningless constants. These calculations are optimized away by any half decent compiler anyway so there is no downside. E.g MyVar = (2^24)-1 Makes much more sense than: MyVar = 16_777_215
How is this relevant to GDRP?
Selling your visitors information, smells like tracking cookies.
Used C# for several years at a large company. No one uses that notation. People wrote a comment next to the constant with the commas. But end of the day it's pretty minor. The "excessive" operators will make for more succinct code. With basically everything being a property bag in php, a lot of those operators let you do things that are otherwise ugly as hell to write. Off the top of my head I can list about 3 dozen instances in the last week I'd have liked to use the null assignment, spread, or an arrow function in something I was writing.
&gt; But why have it in the first place? Why not? Does it affect performance, or development time, or runtime resource usage? No. It's an optional thing for developers who do happen to work with large integer literals and want a little more readability. You can completely ignore it and it'll be like it's not even there.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php2019] [A list of Open Source projects that accept recurring money support?](https://www.reddit.com/r/PHP2019/comments/cb05f5/a_list_of_open_source_projects_that_accept/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
&gt; The "excessive" operators will make for more succinct code Succinct code is great, I just think this particular choice of operators is particularly ugly to be honest.
&gt; But why have it in the first place? Why the fuck this is a question at all? This is Open Source, as long as there is someone willing to spend their own time for the implementation, there are no BC-breaks and there is a consensus among maintainers for making it in, why on the earth there could be a question "why have it"? If you don't like it, just don't use it. but I can't get this attitude, "I don't need it so it shouldn't be in the language even though it doesn't affect me in any way" The worst case of gatekeeping.
I'm not sure how this sells visitor info. It displays a list of images supplied by a 3rd party that require labeling. You are not sending any PII to the service. Sure it may have tracking, but I don't know if it does. But almost everything does anyway.
I can't see anything relevant to GDPR here (e.g. privileged or personal information, and storage and processing thereof), nor can I see anything that looks like a tracking cookie (it's a one time interaction?) What information are we selling? That they clicked on some correct images, or typed some correct words? People have latched onto GDPR as An Important Thing, and seem to want to apply it to every situation, without actually understanding it, and I wish they'd stop.
Impressive comment. Just because there is no BC break, and some one will code it, it's all of a sudden a good thing? Ever heard of feature creep and what it does to projects? Ever worked on a project suffering FC? I didn't think so. Lets go ahead and remove E_STRICT and E_WARNING from php then, i bet thousands will like it, and there is no BC break. Less errors, no break, all good right?
&gt; Ever heard of feature creep and what it does to projects? OH NO, ANYTHING BUT A FEW UNDERSCORES! THIS WILL SURELY BE THE END OF PHP!
There are obvious BC breaks as the code that previously caused errors letting devs to fix them will stop doing that but I get your point about FC. That's why there is a voting process (even given there are no hordes of people willing to implement new features waiting outside). So your gatekiping is off the track.
&gt;I rarely come across huge meaningless constants, usually big numbers are made up from something This depends entirely on the kind of code you're working with. In lots of fields there are important magic numbers that come from the domain itself, i.e. the business the application is for, rather than technical requirements and those usually aren't neatly expressed as calculations. In those cases being able to clearly express the number in a way that can be quickly scanned and understand (and highlight silly bugs) is a benefit overall, which is why do many languages implement this feature. In my own work I've seen this most commonly in financial systems, imaging software and rendering pipelines.
&gt;People wrote a comment next to the constant with the commas. But end of the day it's pretty minor. Which is an objectively worse solution, comments should explain why something is, not what it is as it makes bugs like the following harder to spot and in large codebases comments rot faster than code. `public const RENDER_FREQUENCY = 8973000000 // 897,300,000` vs `public const RENDER_FREQUENCY = 897_300_0000`
Step 1, reconsider doing this. Step 2, update your CV. More seriously - why is this being done? Migrating an existing application from one technology to another one has a huge cost without a clear benefit to whoever it paying for it. Migrating it from a pure PHP app to be a PHP backend, and a Vue/React/JQuery frontend would be significantly less work, and give a nice new look to an application.
This is not a subreddit where you can ask for help, but anyway you can start reading this: [http://www.catb.org/\~esr/faqs/smart-questions.html#intro](http://www.catb.org/~esr/faqs/smart-questions.html#intro) TLDR: If you don't provide the project's context, a github repo with the latest code and your current status research detailed, how do you pretend that a random stranger does your job for you?
Well, the answer is that it's GDPR compliant then. I was just curious
Many times I've heard people complaining about xdebug. It's too complicated, it's too slow, etc.. But when they finaly set it up and started to use it, var\_dump no more! The problem is that you are trying to make difference between logging and debugging, but honestly logging means to save information to be investigated later (or often, never :))). You are calling it logging but you use it for debugging.
I came across https://tidelift.com/subscription/pkg/packagist-phpseclib-phpseclib recently. You pay them and they pay the maintainers of open source projects. So like phpoffice/phpexcel would get $132.15 if they were using tidelift: https://tidelift.com/lifter/search/packagist/phpoffice%2Fphpexcel Guzzle would get $417: https://tidelift.com/lifter/search/packagist/guzzlehttp%2Fguzzle Quoting https://techcrunch.com/2019/01/07/open-source-monetization-startup-tidelift-raises-25m-series-b/, "_Among the well-known open-source projects covered under the Tidelift Subscription today are Apache Struts, Vue.js, Gulp, Carbon, Jekyll, Beautiful Soup, and Mongoose_"
&gt;Migrating it from a pure PHP app to be a PHP backend, and a Vue/React/JQuery frontend Sorry I wasn't clear on the question. I am trying to do migrate like you mentioned above. Front end is Angular, backend is PHP. I dont know anything about PHP just started understanding about that. I have searched in Google, couldn't find much information. I came here that I might get any suggestions on this.
GDPR adjacent, at best. How can you comply with something that has no bearing on what you're doing? That's like saying that your development business complies with international fishing laws. \^\_\^
Are you all using the pgSQL database?
Big php \~\~5.3 app to a php 7.x API + Angular (5 or 6). &amp;#x200B; Used strangler pattern. Only skeleton auth + menu + iframes to old system modules where implemented for first version. (Not deployed - just for validation of approach). Each module in its own iframe allowed us to reimplement gradually.
I think, Danack implied that Angular may not be the best choice in 2019 ;) &amp;#x200B; PHP for API is not controversial choice. Maybe, just maybe old app is good enough to reuse business logic / domain models, etc. and just provide API on top of them.
Sorry for the inadequate input. My current project is in pure PHP and I am trying to migrate the pure PHP (command pattern) to Angular frontend and PHP backend. I just need some kind of input to start my research. Currently I am reading about command pattern.
What are you recruiting for? Develop new features or overhaul the existing software? Next, what are you aiming for ... a state of the art enterprise CMS? At this point, isnt it better to start over or pick a different (read: better) existing tool.
Oh I didnt completely read the framework choice. Thanks for pointing out. Hmm yeah , providing API on top of them also good idea !! Let me explore that area also. Thanks for your input.
I do; left MySQL behind for good years ago.
You might want to look at https://tidelift.com/ - instead of paying projects individually, you pay a single fee to them, and then they pass it on to the projects you use, by analysing what open source projects are in your stack. (yeah, yeah, they take a cut - but as an open source developer I wish their idea takes off, and it becomes a standard practice.)
&gt;Used strangler pattern. Only skeleton auth + menu + iframes to old system modules where implemented for first version. (Not deployed - just for validation of approach). Thanks again. Never thought about changing the PHP version. I dont know how much time it will take also. Let me know look in strangler pattern and PHP version change also.
Note to self: never try to convince the CEO of a plan without having a reasonable idea of how to implement said plan.
My Javascript "addition operator" package complies fully with international cricket pitch regulations.
For a long time I didn't like the arrow operator in JavaScript because it was hard to read and a bit confusing (especially chaining them), but I got used to it. But seeing PHP's version of it is even more confusing.
Thank you. It looks interesting but unfortunately we are a small company and the budget is way below their pricing. We'd definitely consider them in the future.
Thank you, it looks promising. At the moment we cannot afford it, may be in the future.
Note to your self: never try to patronize someone without considering the whole context ;) Patreon mentioned above has much a lower bar, so the budget is like 1/10 of what tidelift is asking. Let alone Tidelift is a *paid service* to solve a particular problem, which is another story and another consideration.
It's identical, but with `fn` at the beginning. While it probably wouldn't be used if it wasn't a technical requirement, if anything it will make it easier to identify where an arrow function begins while scanning code¬∞ `fn($x) =&gt; fn($y) =&gt; $x * $y + $z;` `$x =&gt; $y =&gt; $x * $y + $z;`
For individual PHP projects https://opencollective.com/search?q=php seems to be provide a better search engine then patreon. patreon has projects that opencollective doesn't, like xdebug, doctrine, phpseclib, etc, but opencollective's search appears to be better.
I doubt that :D
There is an ulimited way to use classes and extending wrong. We still use classes the right way.
It does seem absurd that their minimum buy-in is $18,000 a year, it seems like a far lower starting amount would be just as feasible for them and far more likely to see uptake by the community. But I may be missing something.
I run an API that provides data extracted from a game and in that contains many big numbers from IDs to map positions, these are in the multi thousands and I often need to know a range of ids to know what type of data it is, having underscores will be a huge benefit to my code readability
We could start over. Enterprise level would be great.
I take it as like an alternative to hiring a new dev whose sole responsibility is to maintain a widely used in the company but abandoned library. Instead they offer to "hire" the library authors. Indeed it makes sense for the teams of 25+ as it can save a lot of time otherwise spent for transition to another lib.
To be fair to them, I had missed how much work they do, or aim to do on your behalf. Perhaps it would be worth them having a lower tier aimed solely at providing support to the developers with no expected return as they have the payment infrastructure in place already.
Same, although I really, reallllly wish we could define instance types.
If youre gonna extending / using the code of part 1 with your codebase (extends usw) this will be gpl as well.
Same here.
There is already a readme with installation notes. You can GIT the repository or upload it via FTP then use the Install.php script to install the system. I made a quick and dirty install video that is linked in the description.
That's why I am recruiting.
I don't think so- why should angular be a not-so-good choice in 2019?
This might help: * https://www.google.com.mt/search?q=site%3Apatreon.com+%22php%22+%22develop%22
They might skip 9 and go straight to 10. If Microsoft can do it so can php.
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
Hehe I kinda expected this argument. Difference is that classes are the fundmental concept of OOP thats why we use it. Traits are just very edge feature of OOP. You can do OOP without traits, but not without classes. In most cases traits help you invent workaround solutions to problems coming from bad design that is already complicated to fix otherwise and in that sense, they are useful. But if you have good design, you will not find yourself in need of trait, at least I never did. I won't speak for others... And you shouldn't too (whoever you were referring by "we").
Do you pay? The typo project has some payd devs. Also i wanna try that you dont lure in fresh php devs into your software. They will learn really bad stuff instead how its done right.
Like they implemented classes in js? Its not needed for oop and makes the stuff hell complicated with a lot of sideeffects
Dont do that. Just follow the contribution guides of that project you are working on. :)
Spambot. Fuck off with your spam subreddit.
This is a free project, so no, it doesn't pay. We don't want fresh PHP devs. Go somewhere else with your anger and angst, please, just go away. Thanks. Go sit on some other thread, troll.
A link to a repository that contains a pdf file is *not* the same as readme :) What *I* would like to see in a readme: - what is this - how do I install it - how do I use it Just look at the readme of Monolog; in one glance you get an idea of the code: https://github.com/Seldaek/monolog So, what are you looking for? Are you looking for people that will submit PRs?
&gt;dev.to/razgan... I don't see any ads or anything being sold and so the author/OP doesn't appear to have anything to gain. Don't be petty.
``` interface SimpleLoggerInterface { public function log($level, $message, $context); } interface LoggerInterface extends SimpleLoggerInterface { // you all know this part } class Logger implements LoggerInterface { private $logger; public function __construct(SimpleLoggerInterface $logger) { $this-&gt;logger = $logger; } public function alert($message, $context) { $this-&gt;logger-&gt;log('alert', $message, $context); } // and all the other level specific methods. public function log($level, $message, $context) { $this-&gt;logger-&gt;log($level, $message, $context); } } ``` some other file, other package, other author: ``` class MyLogger implements SimpleLogger { public function log($level, $message, $context) { // whatever } } class MyService { private $logger; public function __construct(Psr\LoggerInterface $logger) { $this-&gt;logger = $logger; } } $simplelLogger = new MyLogger(); $logger = new Psr\Logger($simpleLogger); new MyService($logger); ``` Did I really need a trait? Did I duplicate some code?
Shit, I‚Äôll update my unit tests
&gt; Thanks but I still don't understand why traits are considered static As I said, I think the argument being put forth is conflating static/stateless/stateful design, with traits. Basically two separate arguments being rolled into one, confusing the issue. Traits are not inherently static.
I meant PSR-1 and PSR-2 but it won't let me edit the title :(
It's supposed to be an interop standard. That means when you want A to talk to B and they're not already compatible, you can use the PSR to bridge them together, so next time when A talks to C, you can reuse the same solution. That's it. It's not a personal preference. It's not a convention. It's not supposed to be mandatory. And people are not supposed to peak over your shoulder and say "WHy iSn'T ThIS usInG PSR-7?!?!" But they will. Ignore them.
No not fresh dev will see this good. You try to enforce your style even more because you think we are evil.
Pretty big difference... Well since I wrote and answer for PSR-7: ------------------------ It's supposed to be an interop standard. That means when you want A to talk to B and they're not already compatible, you can use the PSR to bridge them together, so next time when A talks to C, you can reuse the same solution. That's it. It's not a personal preference. It's not a convention. It's not supposed to be mandatory. And people are not supposed to peak over your shoulder and say "WHy iSn'T ThIS usInG PSR-7?!?!" But they will. ------------------------ As for PSR-1 and PSR-2. Keep in mind these rules were designed based on the most common PHP core formatting found on GitHub. That makes them very significant about "how most people write and expect to see PHP code look out there". You don't have to go for 100% compliance. But my recommendation is: use it as a starting point, then tweak with clear purpose and intent, not just because. For example, I follow almost all of PSR-1 and -2 but I don't put class/method opening brackets on a new line. Those PSRs were introduced before closures and inline classes existed, and those parts of the spec show a little age. Keeping all brace formatting consistent makes more sense (so I always keep it on the same line).
**Suppose you are the author of a PHP framework.** Say your framework wants to make handling HTTP requests and responses easier for other developers. Some of your frameworks components might work with HTTP requests and responses, some aren't your own but packages from library authors. Examples: \- A factory, which creates requests objects from `$_GET`, `$_POST`, etc \- Middleware that gets called one after another and passes on reqest / response objects \- Request handlers which take request objects, do something and then return response objects \- Clients which send requests somewhere being given request objects and returning response objects In this case you'll most likely want the request / response objects to adhere to a common interface. **Suppose you are the author of a PHP library which handles any of the above.** In this case you'll want to make sure that your library can be integrated easily into whatever framework or custom solution. **Suppose you are developer using the PHP framework and library from above.** In this case you'll want to have those two working together without much setup. You definitely don't want to create mappers to convert between one requets/response object to another. &amp;#x200B; PSR-7 is a standard/convention/preference, whatever you'd like to call it. It doesn't really matter. What does matter however is that PSR-7 is one possible solution to prevent (or at least reduce) the problems above. All of the above authors have a common set of interfaces to type hint against, with well defined behaviour. &amp;#x200B; If you haven't already you should also take a look at [PSR-15](https://www.php-fig.org/psr/psr-15/), [PSR-17](https://www.php-fig.org/psr/psr-17/) and [PSR-18](https://www.php-fig.org/psr/psr-18/) to see how they relate. &amp;#x200B; Fun fact: having a common set of interfaces also means that people can write [packages adhering to these](https://packagist.org/providers/psr/http-message) as well as [implementations](https://packagist.org/providers/psr/http-message-implementation) that can be used.
That's XOR
I call it logging because it's logging. I use the logs for debugging, yes, but they help you in a different way compared to a debugger. I think it's a matter of preference - what you like and what helps you the most. I'm using logs for debugging in JavaScript as well, and Chrome has a good built-in debugger which I've used. Although I'll set up Xdebug these days for real and try to use it again, just to see if it really doesn't work for me.