you need to encode your post request to have the same encoding as an html form. here is what a normal form tag looks like with a file upload: &lt;form action="whatever.php" method="post" enctype="multipart/form-data"&gt; &lt;input type="file" name="my_file" /&gt; ... The enctype is very important. On the php end, you can use the FILES superglobal to see if your image made it eg $filename = (isset($_FILES['my_file'])) ? $_FILES['my_file']['name'] : 'try again'; echo "&lt;p&gt;{$filename}&lt;/p&gt;"; Here's a [link](http://www.php.net/manual/en/features.file-upload.post-method.php) to php.net, where it outlines the most common methods being used. The key is to emulate a normal form submission with your flash code.
&gt; I'm a **novice PHP developer**. &gt; I do code **for a living** The problem.
I don't know. I mean he can be a C/C++ master but want to develop websites in a fast way? Problem will be "I'm a novice programmer and I code for a living".
That line, as you've written it anyway, doesn't contain any illegal XML. "line 328" in this context is the line of your PHP script, not the line of the XML file, perhaps you got the wrong line? Try xmllint to see if you get a better idea of what the error is. Also, if its not a valid XML file, its not a valid XML file (so there is no concept of skipping "records" since there are yet no "records" to skip). While you can hack things up to fix errors like this, your introducing fragility into the system, one of the things XML was designed to prevent.
What you are seeing is a symptom of another problem. You've got a big ass file there. You sure you're not running into some other limitation? Probably a memory limit if it's barfing at the same point in the same file over and over. Though on a re-read it sounds like this happens with other files as well? If you set up a test file with just that Oconnor element, does it crash then? I would guess that it's not. Divide and conquer. Figure out a way to break of the file into smaller chunks for processing. Need help? My services can be bought with bourbon.
lol, I hate to break it to you, but either you are a zealot or a troll, the distinction is no longer perceptible. Now you may have a different definition of persuasion, or perhaps this is some novel approach I've never seen. However insulting someone (refering to your original reply to the OP) is hardly a common way of persuasion. Now believe it or not, I used to be quite strongly in the free software camp as well, but quite frankly, it's people like you who showed me that the FSF way is simply childish and not worth it. A better way of brining the points across is by acceptance, understanding and leading by example. Yes, in the early days there was perhaps a need for a loud cry against closed source proprietary software, but those days are over and it's organisations like the apache foundation and the mozilla foundation that are making the difference now, by leading the way, becoming stake holders and opening discussion. Not by shouting really loud that everyone is doing it wrong, but by showing how to do it right and excelling at it.
who starts like that? i use php since 12 years and are involved with the language itself and everytime someone calls me a php coder i feel offended.
[Oil](http://fuelphp.com/docs/packages/oil/intro.html) is one, big advantage.
I insulted no-one. I don't accept infringements on my freedom by any government, and I don't accept them any more from companies. I don't accept companies that pander to people, making even stringent believers in freedom think that freedom is not as important as it is. There are certain things that cannot be solved by pretty graphics and good marketing. Freedom is among them. I find freedom to be rather un-childish--do you find it to be immature for a specific reason, or are you simply insulting *me*?
Fuel is _not_ a Kohana fork. It's written from the ground up, taking ideas and best practices from CodeIgniter, Kohana and Rails. http://net.tutsplus.com/tutorials/php/getting-started-with-the-fuel-php-framework/comment-page-1/#comment-374532
Well, IMHO is not. Personally, if you want to generate something, then you are doing it wrong. Better way is to use inheritance - you reuse more code and situation when you have some global changes on hundred files and you have to use sed won't occur as often. In example: http://fuelphp.com/docs/packages/oil/generate.html you generate some actions with titles and setting views. But you can do that in abstract controller where you assigned your view by the controller and action name, and create title same way (btw - you will have easier task with this to also generate breadcrumbs). So for me this is not an advantage, because you don't have to use that, writing some template controller by your own (with using inheritance properly) won't take you much time - it's even harmful because is tempting just to generate another controller instead of think more and create flexible abstract controller, resulting in the long way of much code almost copied from each other.
right now, i guess you would pick CI or kohana because there are tons of libs vs. newer frameworks like fuel, doo, lithium, the slim framework skeleton who offer only a base structure.
I've been keeping half an eye on the Fuel development for a while, mainly via tweets from some of its more prominent developers. From what I gather, they've taken what they class as "the best bits" from KohanaPHP and CodeIgniter and then tried to add some of the magic from Rails after one of the developers tried to get into RoR and struggled. I nearly tried Fuel, I probably should have done (I'm a Kohana developer) but instead I got into Ruby and played around with Rails and Padrino instead. I have found that Ruby is quite a steep learning curve although it'll probably be worth it in the long run. However, what I've found since beginning Ruby development as well as learning Objective-C is that I now write much tidier PHP and structure my code to a much better standard. TL;DR My advice would be to learn (even if it's only the basics) of some other programming languages such as Ruby/Obj-C/C# and learn how to be a better Kohana developer.
I suggest python. After that, your indentation in PHP will be perfect ;)
Ruby's preferred "double-space" indent always caught me out. Too used to hitting tab. Although whitespace doesn't break Ruby obviously. I feel that I should look into Python. It's either that or C# once I've finished my hellish foray into Java for Android development :(
well that cant be good. -downloads the a team-
opensource it because your using an awesome opensource framework to code it in. show some love! besides, if you decide to distrubte it, you cant exactly close source php easily
Well, someone screwed up.
hahaha. brilliant. I dont mind a copy of the A-Team.. YOINK. 
Big find? Well, [not really](http://php.net/mirroring.php). Third-party mirrors, official or not, are still just that: mirrors. They're ultimately controlled by the kind person who volunteered. In fact, PHP makes this pretty damn clear by listing the mirror provider on the mirror selection page. Calling it a "a not-so-hidden secret on [PHP's] website" is pretty misleading. It's properly PT Pasifik Satelit Nusantara's not-so-hidden secret. Also suspicious: notice there's not a single mention of the word "mirror" in that article. If the author weren't trying to sensationalize he'd at least mention how the content got there.
Frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks. Frameworks frameworks frameworks frameworks. Frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks frameworks.
but that would mean less pageviews!
Actually hosted by http://www.pesat.net.id/ but anyway, that's actually really PHP's site and all their fault...
Exactly right, and [it's already being dealt with](http://news.php.net/php.webmaster/12075). That's an infuriating article: PHP is copping the blame for something that (a) isn't PHP's fault, and (b) could have been dealt with easily via a quick e-mail, rather than an over-sensationalised piece of hack pseudo-journalism.
/fork
I'd recommend you read up on how relational databases work a little bit more. It looks like you understand a portion, but not completely. For example, you pull first and last name and address from the client and master tables, but never pull any data from the items table. Also, I'm not sure that I understand why you have the master table in the first place. It seems like you are replicating a lot of the same information in the client table.
Back in the days it was * full utf-8 support * FK constraints (real ones) * triggers, procedures * one DB system and just one * more reliable nowadays it is mostly the same things. I have had a PostgreSQL db running on a web server for 6 years and in this time upgrade from 7.4 to 8.1 and never had a single problem. The fact that I can write complex functions and offload work to the DB, that FK really work. Besides the fact that the command line is way better. 
There ain't many "best practices" to take from either framework. Only the bad ones : activerecord , abuse of global state , mis-implementation of MVC , procedural code ( in form of static methods ) and messed up object graphs. 
So, what's a good framework in your opinion?
Kohana dev here, I know he mentioned 3 frameworks but from kohana's end, i'm not sure what bad practices fit our framework. Kohana ORM isn't a required piece to use, and doesn't try and be the PHP version of activerecord, it is it's own fully functional ORM library. Kohana doesn't abuse the global state with any variables, and allows you to access all super globals as you normally would. We implement HMVC, and given PHP isn't a fully object oriented language, like every other MVC framework, we follow the front controller pattern. Static methods in a class is not procedural code. Also, the latest kohana supports 5.2, so that said, we use classes as a way to namespace functions, it also goes well with our auto loader. I'm not sure why you think that implies procedural code. I'm also not even sure what you mean by object graphs, maybe you can clarify?
Yes setup a test xml with &lt;lastname&gt;OConnor&lt;/lastname&gt; The goofy character is between the O &amp; C. Test fails on that character. Script bombs out at 328 which is the PHP script not the XML file. Edit: Oh the test file was 20k and failed. 
Reddit didn't accept the goofy character between the O &amp; C. Yeah I know it's not a valid XML file and I've asked the source to fix these errors but they still go on.
May have finally sussed where I went wrong with this, will rewrite as appropriate. Ultimately the flock was being called from within a shell_exec command which called another php script in the background (yes I know this is slightly horrible but it is there to solve a requirement) hence this would have caused the lock to be run in multiple different threads which is likely to be what was causing the issue.
Assuming its just a one-off, do some hackishness to replace the weird char with something valid-xml preg_replace or whatever. Fragility cavets above apply.
The first version of Typo3 was released a long time ago and the developers have done a good job of keeping up backwards compatibility, unfortunately this has led to a rather large sprawling codebase, I recently upgraded an old typo3 installation (about 2005) to use the latest code with very little work. Flow3 finally seems to be their chance to start over.
[http://www.php.net/manual/en/function.str-split.php](http://www.php.net/manual/en/function.str-split.php) Then loop through the resulting array, and pass each element to: [http://us2.php.net/manual/en/function.ord.php](http://us2.php.net/manual/en/function.ord.php) You're going to find a weird character in there that doesn't render visibly on your machine.
Let me know what character it was: [http://www.asciitable.com/](http://www.asciitable.com/)
Stay classy, PHP.
Agreed. You're pretty close, but pulling a little more info out will help a bit. Remember, it hardly makes things any slower or more difficult to have more tables, but it will make queries, searches, and joins, significantly easier, and the data more easy to manage.
See [Database normalization](http://en.wikipedia.org/wiki/Database_normalization).
A loss-making dying medium who's hacks will join the ranks of the permanently unemployed during our lifetime, insulting the intelligence of the only people who they expect to pay them for this crap. It's not worth getting upset about.
I don't know of any apart from the previous Kohana website: http://dev.kohanaframework.org/projects/kohana2/repository/show/branches/website/ The [Kohana 2.3.4 documentation](http://docs.kohanaphp.com//contents) is still online too.
&gt; I don't know of any apart from the previous Kohana website: This is pretty much the exact sort of thing I was looking for. A websites code base in it's entirety - my only regret is that I can only give you one upvote. Thank you very much.
You should be able to send to &lt;anything&gt;@example.com and get a successful sent return code.
Send to your Gmail account. Make sure you add your sender as a contact so your mail won't get bounced to Spam. Seriously though, do you think your testing even shows up on Google's radar? Can you picture their NOC? &gt; HOOOOLYYY SHIT! &gt; What is it Johnson? &gt; The Colonel is striking again! This time 1000 emails! *Come on man...* And if you really fear their wrath... Create your own email account on your own domain and send to that. I assume this is all just for formatting and not for testing deliverability. That is another issue that you'll have fun playing with.
I've done this before with text messaging. I set up a PHP script in about 2 minutes that sent 100 text messages to my phone. Since most (if not all) carriers also count incoming messages toward your limit (if you have one, which I don't) I would imagine that this is a very easy (and not-totally-legal) way of pissing someone off.
Email wrapper that logs emails to a virtual box instead of sending them. Paypal has this setup for their API testing environment and it's actually pretty sweet.
I send from my server like normal, but I write my code so that I can override it: $send_to = ($in_dev_mode) ? 'me@me.com' : $send_to; If you're talking about testing your email templates (for proper HTML generation or whatever) then I just set up a test script dedicated to that and echo the HTML just like you were talking about. Right the test script in a way that allows you to literally copy and paste the template from one another.
I forgot to mention it in my first post (added it now), but I need to be able to read the email templates for my front-end tests. A good example would be going through a registration process and having the test check all the email verification business. All automated of course. I need to see how difficult it is to read email from GMail account. Thanks for the laughs :P
example.com is a reserved domain name right? Is there something built into the email spec that gives you a successful sent return code when sending to example.com?
A good idea to comment out: //mail($email,$sub,$body); and put in: echo "poop"; Good idea before you do something that can not be undone. Like sending 100 text messages to your phone. It's nice to have a clue as to how much poop will come out.
The pattern I usually find myself making is creating an email handler object. On construct you pass in the context (environment, config, usernames, whatever): // Construct an email handler based off environment $myEmailHandler = new EmailHandler($context, $currentuser); // Example 1 $email = new Email($to, $from, $subject, $body); // Example 2 $email-&gt;to-&gt;add(new EmailAddress("Steve R", "stever@example.com")); $email-&gt;from = new EmailAddress("PostMaster", "test@test.com"); $email-&gt;subject = "Test Email"; $email-&gt;body = "body"; // Send message $myEmailHandler-&gt;send($email) The email handler, defines the "send" behavior to do whatever. It could strip the to/from/cc/bccs and send to the email address of current test user; It could save the email as a .msg file; Or print it to screen. I don't know if this answers your question or is too generic/too objecty? -- You don't necessarily need to create emailRecipient objects or anything fancy like that... but an object to handle the behavior and server connections has been extremely useful and flexible in my practice.
I did it on purpose, but yes.
If nothing else create a custom function to wrap the Mail() function. -- Also a personal recommendation is to keep sending/testing email AS email, and simply send it to yourself with stripped recipients. It'll help you when testing things like attachments, line-breaks, encoding, etc.
ive heard of relational databases, but never looked into them too much, i will do. the master table is just for multi user login so that people can log in and manage clients/items. thanks for the tip :)
I'm using FPDF as well with good results. Easy to use and implement.
Yes, example.com was reserved specifically for testing. Mail servers are supposed to handle it properly. 
That depends. Are you testing the class that sends the email, or are you testing that a request to send an email was made? It looks like you may be interpreting "testing" in a different way than I would. If you're testing only that a request to send was made, you mock the object and assert that it received the expected inputs. If you are testing the class, then you need to decide what part of the class you're testing. If it's just template construction, then assert that the compiled template contains what you expect it to. Proper tests should never actually send email anywhere.
Setup your own mail server for testing.
Well .. i listed the issues that Fuel has. &gt; Kohana doesn't abuse the global state with any variables, and allows you to access all super globals as you normally would. And FYI, singletons and static registries ARE manifestations of global state. And, iirc, Kohana uses singletons. &gt; We implement HMVC, and given PHP isn't a fully object oriented language, like every other MVC framework, we follow the front controller pattern. As for (H)MVC , the main difference between it and (H)MVP is the flow of informations. In MVP structure Controller (actually - Presenter) collects information from Model and passes it to View ( or more ofter - to template ). In web MVC (actually Model2 MVC) structure the Controller binds Model to the View and changes the state of both of them. Then the view request data it need from Model and renders the template(s). In classical (smalltalk) MVC the direction of interaction between Model and View is reversed : the observer pattern is implemented and Model pushes data to the View. &gt; Static methods in a class is not procedural code. Also, the latest kohana supports 5.2, so that said, we use classes as a way to namespace functions, it also goes well with our auto loader. I'm not sure why you think that implies procedural code. Because that's what static methods inside class are : namespaces procedural code, where static variables act as replacement for globals. &gt; I'm also not even sure what you mean by object graphs, maybe you can clarify? That is aimed at how often `new` operator appears in `__construct()` or other methods ( you are violating LoD ). ---- To be honest , i think that Kohana is the lesser evil of the three listed above.
I applied for this position when it was new, went through the interview via Skype, and was assured that I would be informed in a few days of the decision. I never heard back. I take it this position was filled?
&gt; It could save the email as a .msg file. That's perfect, I don't know why I didn't think of that. I can now ignore the email and have it saved out into a directory where I can later read it in my front-end tests. I use Swiftmailer and had a look to see if it could do this and it does! It's [not documented on the website](http://swiftmailer.org/docs/sending.html#transport-types), but it's there in the code. There's a lot of other [undocumented transports](https://github.com/swiftmailer/swiftmailer/tree/master/lib/classes/Swift/Transport) too, one should check it out: * EsmtpTransport * FailoverTransport * LoadBalancedTransport * MailTransport * NullTransport * SendmailTransport * SpoolTransport * StreamBuffer I found out what I need is the Null transport (I originally decided on the File Spool, but this more suitable). All I need to do is log the messages using a database [reporter](http://github.com/swiftmailer/swiftmailer/blob/master/lib/classes/Swift/Plugins/ReporterPlugin.php) and then just create a page to access the sent messages from. I think I'm set for the night. Thanks Steve. 
There are no "good" framework in php-land right now. If threatened, i would go with Symfony2, but even that has flaws ( at least not as major as Sf 1.x ). But you would be better off researching different frameworks and trying to make one on your own. Then, even if you fail, you will have some understanding about things too look for in frameworks.
which would be to not resolve the server since no server exists, yes? that seems like proper handling, not mimicing a real server and returning an invalid response. again just asking for clarification because i've never heard of this.
Output to a temporary file, then have the test run immediately after on that file.
&gt;And FYI, singletons and static registries ARE manifestations of global state. And, iirc, Kohana uses singletons. We've actually done away with those, mainly because they conflict with HMVC. If you have a singleton that is specific to a request(basically all of them) then it will break on that subrequest, which should act like a whole new independent request. We were guilty of this in past versions, but that is behind us now. &gt;As for (H)MVC , the main difference between it and (H)MVP is the flow of informations. In MVP structure Controller (actually - Presenter) collects information from Model and passes it to View ( or more ofter - to template ). &gt;In web MVC (actually Model2 MVC) structure the Controller binds Model to the View and changes the state of both of them. Then the view request data it need from Model and renders the template(s). Kohana allows both your examples. The controller invokes a view and model, and the view can easily query and read from the model directly if it is desired. &gt;In classical (smalltalk) MVC the direction of interaction between Model and View is reversed : the observer pattern is implemented and Model pushes data to the View. Interesting, maybe it's ignorance, but I see that being hard to translate to web based languages, given the view won't ever be updated, but rendered near the end of the request. I see it being pretty difficult having the model push details to the view in time for some later event in execution where the view is rendered with all model data. &gt;Because that's what static methods inside class are : namespaces procedural code, where static variables act as replacement for globals. Maybe our definitions are different here, I see procedural code as repetitive and non encapsulated code. Yes static classes are namespaced functions, we agree, but it's encapsulated and easily reusable code, which to me doesn't really meet my personal definition of procedural. &gt;That is aimed at how often new operator appears in __construct() or other methods ( you are violating LoD ). ahh yes, with the exception of a few edge cases(exposing request and response objects to the controller) we don't really have any special object construction happening in other class constructors. Though I know code igniter is incredibly guilty of that one. &gt;To be honest , i think that Kohana is the lesser evil of the three listed above. Thanks for that, good to hear your input! P.S. Sorry you got downvoted, I could tell by your thought out reply here you know what you're talking about.
The whole point was that it was foreseen that testing would need to be done and having a designated "fake" domain such as example.com would allow testing without disrupting actual sites or created unwanted traffic. I believe the email specs called for mail servers to treat email sent to @example.com as valid and return a successful code while just eating the email. Since it's just one domain name, it's not a big deal to throw a few lines of code in to handle it. Of course, not everyone follows specs and standards. *cough* Microsoft *cough*
Kind of an aside, but what's the process you take to email a text to a phone? I know that you can do it if you know the carrier, but sites like Google can text you without knowing your carrier.
Yeah, I've always wondered the same thing. [Asterisk](http://www.asterisk.org/) might be able to do it, but I have no idea. I think those 5 or 6 digit numbers are somehow related to the whole thing. If you find out, let me know. EDIT: I was exactly correct when I said 5 or 6 digits. [Wikipedia](http://en.wikipedia.org/wiki/Short_code) EDIT 2: [Interesting.](http://en.wikipedia.org/wiki/SMS_gateway) [Also interesting.](http://en.wikipedia.org/wiki/Signaling_System_7)
I'm not sure how the people in this subreddit feel about suggesting python, but I'd suggest you try the [SMTP server](http://docs.python.org/library/smtpd.html#smtpserver-objects) in the python standard library - It's stand alone and easy to setup... I've used it a couple of times for this kind of thing, by setting it up to listen on my local machine, and have it send every email to me, or insert the message body in a database table, or whatever else you might want to do with the captured email.
I have a local SMTP (postfix) and IMAP (dovecot) server on my development computer. In my postfix config, I have a rule that discards all mail not sent to my @businessname.com address, and which BCCs that address on every email. It works great. I get an exact, bcc copy of every email in my mail application instantly and can see exactly how it looks in a mail client - and i can be 99% sure everything will work just the same in production. I used a set of instructions like this to set it up: http://thedrupalblog.com/configure-your-development-server-deliver-all-mail-locally
You're welcome. Thanks for the links by the way.
[explode](http://php.net/manual/en/function.explode.php) is what you're looking for. This function and a foreach loop should be everything you need.
I assumed he meant for "Cert" testing, rather than development test cases. Your answers are solid for the latter though.
I've been trying that route. As you can see at the end if this post. But I've realized that sometimes the data comes to me missing a section, so my code won't work. For example, the UNTIL option isn't always in the 4th spot. This code I have is MESSY and hard to follow, I wanted to rewrite it cleaner and with less code. $daterepeat = 0; $datefullstring = explode(":", $node-&gt;field_date[$daterepeat][rrule]); list($datefreq, $dateinterval, $datedate, $dateuntil, $dateweekstarts) = explode(";", $datefullstring[1]); $datefreq = explode("=", $datefreq); if($datefreq[1] == "WEEKLY") : $datefreq[1] = "weeks" ; $datefreq[2] = "Weekly" ; endif; if($datefreq[1] == "MONTHLY") : $datefreq[1] = "months" ; $datefreq[2] = "Monthly" ;endif; if($datefreq[1] == "DAILY") : $datefreq[1] = "days" ; $datefreq[2] = "Daily" ;endif; if($datefreq[1] == "YEARLY") : $datefreq[1] = "years" ; $datefreq[2] = "Yearly" ;endif; $dateinterval = explode("=", $dateinterval); $datedate = explode("=", $datedate); $dateuntil1 = explode("=", $dateuntil); $dateuntil2 = explode("T", $dateuntil1[1]); $dateuntil3 = $dateuntil2[0]; if($datedate[1] == "SU"): $dayoftheweek = "Sunday"; elseif($datedate[1] == "MO"): $dayoftheweek = "Monday"; elseif($datedate[1] == "TU"): $dayoftheweek = "Tuesday"; elseif($datedate[1] == "WE"): $dayoftheweek = "Wednesday"; elseif($datedate[1] == "TH"): $dayoftheweek = "Thursday"; elseif($datedate[1] == "FR"): $dayoftheweek = "Friday"; elseif($datedate[1] == "SA"): $dayoftheweek = "Saturday"; endif; $dateuntil = explode("=", $dateuntil); $dateweekstarts = explode("=", $dateweekstarts); 
Awesome. Thanks again. Congrats on the team lead position! I am using your tips now to make it look and function better.
Easy :) &lt;?php $input = 'RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20111004T135959Z;WKST=SU EXDATE:20110808T000000,20110809T000000,20110815T000000,20110816T000000,20110822T000000,20110823T000000,20110829T000000,20110830T000000'; $output = array(); foreach(explode(' ', $input) as $piece) { list($key, $tmp1) = explode(':', $piece, 2); if($key == 'EXDATE') { $output[$key] = explode(',', $tmp1); } else { foreach(explode(';', $tmp1) as $tmp3) { list($k, $v) = explode('=', $tmp3); $output[$key][$k] = $v; } } } var_dump($output); The result looks like this: array(2) { ["RRULE"]=&gt; array(4) { ["FREQ"]=&gt; string(5) "DAILY" ["INTERVAL"]=&gt; string(1) "1" ["UNTIL"]=&gt; string(16) "20111004T135959Z" ["WKST"]=&gt; string(2) "SU" } ["EXDATE"]=&gt; array(8) { [0]=&gt; string(15) "20110808T000000" [1]=&gt; string(15) "20110809T000000" [2]=&gt; string(15) "20110815T000000" [3]=&gt; string(15) "20110816T000000" [4]=&gt; string(15) "20110822T000000" [5]=&gt; string(15) "20110823T000000" [6]=&gt; string(15) "20110829T000000" [7]=&gt; string(15) "20110830T000000" } } Greetings from Hamburg / Germany - rojaro -
There we go! Let me get that working in on my site. I'll report back either way. Thanks! EDIT: Wait, how would I call array(2) ["RRULE"]["FREQ"] so I could echo it, or assign it to a variable itself? Would it be $output["RRULE"]["FREQ"] ?
 &lt;?php $str = "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20111004T135959Z;WKST=SU EXDATE:20110808T000000,20110809T000000,20110815T000000,20110816T000000,20110822T000000,20110823T000000,20110829T000000,20110830T000000"; $str = str_replace(' EXDATE:', ';EXDATE=', $str); $str = str_replace('RRULE:', '', $str); $str2 = explode(';', $str); $my_data = array(); foreach($str2 as $s) { $s2 = explode('=', $s); $my_data[$s2[0]] = $s2[1]; } print_r($my_data); outputs: Array ( [FREQ] =&gt; DAILY [INTERVAL] =&gt; 1 [UNTIL] =&gt; 20111004T135959Z [WKST] =&gt; SU [EXDATE] =&gt; 20110808T000000,20110809T000000,20110815T000000,20110816T000000,20110822T000000,20110823T000000,20110829T000000,20110830T000000 ) *Edit* You can easily do another check for commas in a var and an explode if you need to separate out those dates too. 
When doing testing I use the send-to address "`chiper@localhost`", chiper being my local username. The message gets dropped into my local mail store (`/var/mail/chiper`). You can then see the message arrive by tailing that file in an open terminal window, or using a local mail client like mutt. I've looked into trying to setup a local imap server to let me see these in OSX's email client, but I'm not much of a sysadmin and the instructions I've found are over my head. I also have a generic emailing class -- extended from phpmailer -- that allows me to override all outgoing mail by declaring a single constant in my site configuration.
function explodeData($data) { $regex = "/([a-xA-Z]+)\:/"; $parts = preg_split($regex, $data, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE); $arr = array(); for ($i = 0; $i &lt; sizeof($parts); $i+=2) { $arr[$parts[$i]] = array(); $data = explode(";", $parts[$i + 1]); if (sizeof($data) &gt; 1) { foreach($data as $key=&gt;$value) { list($k, $v) = explode("=", $value); $arr[$parts[$i]][$k] = $v; } } else { $arr[$parts[$i]] = explode(",", $parts[$i + 1]); } } return $arr; } 
or if you want variables: &lt;?php $str = "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20111004T135959Z;WKST=SU EXDATE:20110808T000000,20110809T000000,20110815T000000,20110816T000000,20110822T000000,20110823T000000,20110829T000000,20110830T000000"; $str = str_replace('RRULE:', '', $str); $str2 = explode(';', $str); $my_data = array(); foreach($str2 as $s) { $s2 = explode('=', $s); $$s2[0] = $s2[1]; } echo " FREQ == $FREQ INTERVAL == $INTERVAL UNTIL == $UNTIL WKST == $WKST "; Outputs: FREQ == DAILY INTERVAL == 1 UNTIL == 20111004T135959Z WKST == SU EXDATE == 20110808T000000,20110809T000000,20110815T000000,20110816T000000,20110822T000000,20110823T000000,20110829T000000,20110830T000000 
Fakemail http://www.lastcraft.com/fakemail.php Set your php.ini to output to that and you'll get individual emails which can be run through unit tests.
OK, well using foreach loops will help you here. Looking at the data I think this is close to what you want: $data = "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20111004T135959Z;WKST=SU EXDATE:20110808T000000,20110809T000000,20110815T000000,20110816T000000,20110822T000000,20110823T000000,20110829T000000,20110830T000000"; $arr = array(); foreach(explode(' ', $data) as $datum) { list($head, $vals) = explode(':', $datum); if(strstr($vals, ';')) { $arr[$head] = array(); foreach(explode(';', $vals) as $kv) { list($k, $v) = explode('=', $kv); $arr[$head][$k] = $v; } } else { $arr[$head] = explode(',', $vals); } } print_r($arr); 
Yup! 
Cue a bazillion vulnerabilities that will now be even easier to exploit!
I second this. On my local development, I essentially just use a local sendmail config to do something similar (always local delivery) and then my user is a catch-all account, so everything gets dumped in there. Then I add my account to my favorite mail client and I'm good to go. The best part is I don't even have to wait for it to come. :)
I love this, so many replies and so many different ways to do it. Thanks to everyone here. I love learning the best way to code something. 
Thanks! I have actually used this code for the simple reason that it's the easiest for me to comprehend. I didn't use your second code, but will probably convert to it. Thanks Josh!
Dang. Good research. I particularly like the SMS gateway article - it's so easy to send texts from online!
What I've done on my most recent project is maintain a global config setting that marks if the site is the development version or not. I put together a small api of sorts that I use in various points in the application to send various notifications. All of my mailed notifications go through this api only which in turn does any templating/formatting/addressing and uses Mail/Mail_Mime pear packages to send out the mail. That api checks if the site is DEV or not and if it is, it overwrites the recipients to be my personal email. Hasn't failed me yet.
If you don't feel like running a mail server you can just dump the data into an HTML file and dump it into a folder. If you wanna keep everything organize I'd name them as such: DATE_TIME_SUBJECT.html, where DATE is YYYY-MM-DD, ensuring that you can always use your os's folder navigator to sort by the creation time.
Hey thanks for the xmllint tip. Paired with UltraEdit I was able to fix the bad characters... and there were only 3 of them... yes 3 bad characters in a 97gig file today! Anyhow... love the power of Reddit. Asked on twitter got crickets for a week.
Thanks for that. I didn't understand the diff before.
[Mailinator](http://www.mailinator.com/) comes in handy sometimes
wait. you have a 97gb XML file? And the people at work make fun of my XML! Hot damn, I need to try harder. Happy to help :)
Not sure if this is what you need, but I find the [Test Mail Server Tool](http://www.toolheap.com/test-mail-server-tool/) a really simple and painless way to make sure my emails are formatted how I want them.
I dual-boot Ubuntu on my Macbook, and develop php in Linux. I wouldn't have it any other way. The latest Unity interface/taskbar is just like OSX, which is great, if that matters to you. I boot OSX when I just want to browse the web and play with some audio.
most phones have an accesible address. Like mine is (digits of phonenumber)@tmomail.net.
maybe try something like this: customer[id, first_name, last_name, .. ] invoice[id, customer_id, amount, is_paid] product[id, sku, price] invoice_product[id, invoice_id, product_id, qty] 
Logical arguments are great, but in some of the other communities I have modded I have run into personal attacks which are not acceptable.
 &gt; Maybe our definitions are different here, I see procedural code as repetitive and non encapsulated code. Yes static classes are namespaced functions, we agree, but it's encapsulated and easily reusable code, which to me doesn't really meet my personal definition of procedural. You can very definitely have procedural code that's encapsulated and reusable - many C applications can hold this up. The point is that there's not much difference between $properties = array( 'foo' =&gt; 12, 'bar' =&gt; 15, ); function doStuff($v) { global $properties; return $properties[$v] + 20; } doStuff('foo'); and class MyClass { static $properties = array( 'foo' =&gt; 12, 'bar' =&gt; 15, ); function doStuff($v) { return self::$properties[$v] + 20; } } MyClass::doStuff('foo'); If you instantiate a MyClass object, you open up the possibility of being able to change $properties just within the context of that object without affecting the global state, which is what happens if you change MyClass::$properties. 
&gt; Interesting, maybe it's ignorance, but I see that being hard to translate to web based languages, given the view won't ever be updated, but rendered near the end of the request. That is why Model2 was created in first place. Classical MVC doesn't play well in web context, only in some rare cases, usually related to Comet or functionality provided by browser plugins. &gt; ahh yes, with the exception of a few edge cases(exposing request and response objects to the controller) we don't really have any special object construction happening in other class constructors. Well .. the main problem with this is quite similar to the one cause by static classes : tight coupling. There is no good way to replace `Route` class to use different patterns or improve `Cookie` class, because the framework core is tied to the *names* of the class. There isn't really a good way to extend functionality. Yes , i am aware of the `class Route extends Kohana_Route{}` trick , but it is more of an ugly hack, because framework's folder should be off limits for modification .. ya know .. the whole `Open/closed principle`. As for static classes not being procedural code .. emm .. i think the absence of object counts are pretty good indication that it is not OOP.
Alternative solution: Put your email in a database and then have a script parse the database to send email. This way you never worry about accidentally firing off hundreds of test emails to real people. 
Yes, releasing source code makes you exploitable... 
If your development environment is Windows, you can use [`smtp4dev`](http://smtp4dev.codeplex.com/). Simply set `smtp` in `php.ini` to `localhost` after installing.
&gt; Since most (if not all) carriers also count incoming messages Only in good ol' USA.
Not in and of it self, but writing bad software does.
So what's bad here? Care to give us your professional opinion?
Should start using Perl &amp; COBOL. More job security. :)
CRUD works well if majority of web application view logic is on client side.
You're assuming the problem is with the API. The problem is what people will do with it.
You can use MockSmtp on mac. http://mocksmtpapp.com/
Isn't that the problem with everything? Edit: its FOSS now, does it matter who wrote it?
Their code looks fairly solid and all OOP. But, the API does tend to rely heavily on globally scoped methods, which IMO isn't very good practice.
This is something I've actually worked extensively on solving and it's not quite as easy as this article claims it to be. In fact, there are quite a few too many draw backs to this method to any site that isn't largely static or updated very rarely. * Whenever anything is updated the entire cache is invalidated and each item needs to be fetched again. This means you'll have some page loads being slow and others being fast. If you have a very dynamic website you will hardly ever even see a cached version. * You can't cache things forever, primarily because when anything is updated the entire version namespace is invalidated. This means that if you have a site that isn't updated at all in a long time then the cache is still invalidated by the TTL and has to be updated. Of course, if you decide to cache forever and the version namespace is incremented then... * You never know when your cache is full. Since the method of updating the cache isn't to invalidate keys but rather to just fill it with new keys, you will have a lot of stale data. This data will eventually have to get evicted from the cache. This means you don't reliably know when you need to upgrade your cache memory. All that said. Version namespacing your cache is better than not caching at all and it's usually also better than having a lot of stale data as active keys. If you want to do proper cache invalidation in case you have a highly dynamic site then it's still possible, but it requires a lot more work, there's a reason for this famous quote: http://martinfowler.com/bliki/TwoHardThings.html That said, it's not impossible, I personally think I solved it rather well. (I submitted blog posts on this previously and you can find them under my profile)
In symfony I have multiple application environments I can run, I when I fire up the test environment (even on production) the emails will be sent to the developers email instead.
what does it do that Eclipse 3.7 w/ PDT v3 does not? Or has the world migrated from vim vs emacs to eclipse vs netbeans? :P
Source: http://news.ycombinator.com/item?id=2944900
I THINK: * Mozilla Socorro * Gallery V3 both big projects.
The UI is nicely designed, it feels like a "coherent" product, it has integrated mercurial support that just works (the netbeans team use hg to develop netbeans so unsurprisingly it has good support). It accurately highlights files with mixed languages. It has excellent code completion (a god send because Drupal's API is a bit of a fuckwit at times). It is very stable (not a single crash in 10 months of usage). It's just a nice product. Note: I am not downplaying Eclipse, I used it at Uni for Java and it was fine IDE but I just prefer Netbeans.
oh, believe me, I'm just not interested in having an IDE war. The main reason I asked, was because if you're going to fight with your toolchain instead of getting work done, and this guy seemed to have issues with Netbeans and Xdebug, then why not swap out Netbeans for Eclipse, unless there was something in Netbeans that Eclipse does not do and is important. 
I think it's because there is always a "switching cost" in terms of time while you get familiar with a new way of working, so if figuring out how to make XDebug work is less than the switching cost then it makes sense to not switch however if you are continually fighting your process/software/system then it makes sense to switch. I used to develop for Delphi on Windows, now I do everything on Linux (apart from some C# stuff I do just to keep abreast of the Windows world) because I got sick of fighting with Windows.
right, I get that. But if your switching cost is as expensive as five pages of blog, then I think the hour or two it takes to figure out a similarly featured (as far as I'm aware) IDE might have been the more prudent choice :P Stubbornness is a mental cancer. 
&gt; Yes , i am aware of the class Route extends Kohana_Route{} trick , but it is more of an ugly hack, because framework's folder should be off limits for modification .. ya know .. the whole Open/closed principle. It's no ugly hack, well maybe, but due to the Cascading File System used by Kohana you don't need to extend the classes directly in the frameworks folder. You can extend it within your application folder, or within modules (components).
I can appreciate switching cost, but my basic knowledge of Netbeans seems to indicate that switching from Netbeans to Eclipse is not like switching from English to French. This guy has five pages of "my tools don't work the way I want them to work", so I suspect that time was wasted. 
What kind of improvements did you find?
Most editors will allow you to replace the tab key with soft tabs and edit the amount of spaces you want to use.
Eiw. That is all...
Not a problem so long as he has a good guiding hand.
Don't use NetBeans but I'll have to play around with this. I wonder how deep does it go. It looks good as it is, but it would be fuckin' A if it could do prefills as: $this-&gt;someMethod($a-&gt;getName(), $b-&gt;getNumber());
PHP Objects, Patterns and Practice Covers a lot of ground.
Thanks! :D
I own a copy of [PHP5 CMS Framework Development](http://www.amazon.com/PHP-CMS-Framework-Development-management/dp/1847193579) and wrote a review of it [here](http://query7.com/book-review-php5-cms-framework-development) (there are also a [couple](http://davidwalsh.name/php5-cms-framework-development) of [other](http://developers.slashdot.org/story/08/10/15/1458210/PHP5-CMS-Framework-Development) reviews floating online). I should emphasis that you shouldn't try to emulate the structure of the framework created in that book. For example it doesn't use Zend_Style_Class_Names which was the standard at the time (you should use namespaces) and almost every component of the framework is a singleton (which is bad, depending on who you talk to). That being said the chapters on database abstraction, internationalization and access control are pretty good. If you want to buy a book that covers each issue/feature a framework needs to address, I recommend this one. It sets out **one way** of structuring a framework. After reading it you should compare it's structure to other frameworks (Kohana, Symfony2, Yii) and then pick and choose what you like/dislike.
Stuff that Kohana has that is the same as Fuel: – Database Class – Template / Views Stuff that Fuel has that Kohana doesn’t: – Command Line Tasks – Code Generation – Migrations – Full REST controller (ours does a LOT more) – Format control – Interactive Debugging – Namespace support – Package Management Also: http://stackoverflow.com/questions/4771526/fuel-codeigniter-or-kohana-3 And: http://stackoverflow.com/questions/5559549/kohana-vs-codeigniter-year-2011 Me and shadowhand have a bit of a disagreement in the last link, but on the whole the vibe between the development teams of Kohana, Fuel and even Larvel are all great. We are all very much of the opinion that everyone should use whatever makes you faster. There is no room for being a fanboy and nobody needs to "pick one and stick to it".
We don't use a singleton anywhere in the system. We use the multiton and factory patterns to generate and track multiple instances of libraries, which are handled via a simple static interface. Access to a "default" instance is available in most libraries to make simple Session::get('foo') work over $session = new Session; $session-&gt;get('foo'); $session-&gt;save() but both are available. Here is another comment where I explain the static/multiton/factory stuff with session as a use case. http://net.tutsplus.com/tutorials/php/getting-started-with-the-fuel-php-framework/comment-page-1/#comment-374709 You need to read up a little more about it before shouting about how much we suck. There are a lot of smart people who would strongly disagree with you.
When is yours coming out? I'd like to see how you approach things. People who see no good options often make interesting and very different products!
OIL is very powerful and will only get more powerful in the future. Yes some things like generating views may not be the best thing but for things like migrations, running tasks, downloading packages (which will get even better in a few weeks), and a bunch of other things its great. Also you can override those default views that are generated and make it so oil generates template in your own format pretty easily.
Ohh, no thanks! Code generation is awesome, mainly because it does the first 60% of your app for you. Whenever you make a new "thing" it needs a table, add, edit, delete, basic index, some validation, etc. You can make oil do this for you then customise it from there, meaning that its got you started off in the right direction. You can then hack, edit and change things around without wondering if your abstract controller can deal with it. When you try to over-unify systems you often just end up with a convoluted mess (often, not always, im sure your apps work just as you want them). Generating is a bit odd, and I used to agree with you before I started doing a lot of work with Rails and now I love it. To call FuelPHP wrong on generation is essentially calling Rails wrong, and they've got a fair few +1's from the web community so far.
* Multiple interfaces can be used on a single class, but you can only extend a class once * Abstract classes can be more than just function definitions - it's a regular class, you just can't use it without extending it. Abstract classes are good when you have a base object that has children which will need to implement their own versions of some functions. The parent (abstract) can define all of the shared functions, and the children inherit all of those automatically. An interface requires you to code every one of those functions (or inherit them from another class).
&gt;Abstract classes can be more than just function definitions - it's a regular class, you just can't use it without extending it. Same requirements go with interfaces... you can't "instantiate" interfaces just as you can't instantiate abstract classes. You can define properties in abstract classes but not in interfaces, at least with PHP. &gt;Abstract classes are good when you have a base object that has children which will need to implement their own versions of some functions. The parent (abstract) can define all of the shared functions, and the children inherit all of those automatically. An interface requires you to code every one of those functions (or inherit them from another class). Implementing an interface requires you to code to every function defined in the interface, just as extending an abstract function requires you to implement any functions declared as abstract.
Yeah...? You just repeated what I said. An abstract class can have properties, fully defined methods... it is a regular class, you just can't use it without extending it an implementing the abstract functions. As a class, it can extend other classes, implement interfaces, etc. An interface is just a template - nothing more. It defines the outline of some functions. 
If you are nervous about posting an issue hop on IRC (#fuelphp on freenode) and give us a shout. We will walk you through anything you have questions about and if something really is broken help you file an issue/pull request. Welcome to the community!
how is it not flexible?
I agree with all of these points. So if you have discovered the answer to a question you were stuck on, that should be a documentation pull request. Do what you can to make it more obvious so the next guy doesn't get stuck. Ask questions in the forums. You'd be surprised by the percentage of the community who is supportive. The guys that have been around since the start all have a good vibe about the project and genuinely want to help. That means for every 1 relatively experienced developer who wants to be a condescending shite there are 2 or 3 ready to tell him to shut up and be useful.
I think Windows provides a better desktop and everything else flows from that: smoother IDEs, better GUI file management, etc. That being said, I wouldn't publicly serve PHP from anything other than Linux. Each OS has it's strengths. 
The two features have completely divergent use-cases, once you think about it. **Interfaces establish a contract** - If class Foo implements interface IBar, then all that's happening is that client code knows for sure that Foo implements whatever IBar says it has to. The interface provides **zero implementation**. **Abstract classes provide implementation, enabling polymorphism** if Foo extends an abstract class Bar, Foo inherits all of Bar's functionality. Baz can extend Bar too, and then Foo and Baz will share some common implementation details (those defined by Bar). As you note, PHP doesn't have multiple inheritance. If you go around using abstract classes in place of interfaces, you're likely to run into trouble when you later decide you need to refactor your code and actually need an abstract base class. One way to think about it, in order to keep things straight: * Inheriting from an abstract class means **Foo is a variety of Bar** * Foo implementing Bar means **Foo acts like a Bar** 
There is no good book out there, for a simple reason : writing frameworks is not a science. There is a lot of "personal taste" that goes into writing your own framework. These are some personal rules i learned from writing quite a few frameworks : * Do not do it just for the sake of writing a framework, have a project line up, it helps a lot. * Do not implement feature because you think you'll need them. (which is why it's good to write a framework when you have a project line up, much easier to define what you actually need) * Do not use/implement design patterns or practices because you heard it was cool. Really think through your choices, it will dictate a lot the architecture of your framework. * Write Unit Test from day 1. (and if you like it, i don't, do Test Driven Development) * KISS . Always try to keep everything down to the minimum (Do not create useless interfaces, or chain function calls that could fit in one function). * Depending on the scope, do not use a templating engine, and if you do, look into Blitz, it's really the best. * Refactor frequently. * Document everything correctly. (At least the docblock, no need for spec docs if you are not doing this at an enterprise level, schema scribbled on paper are perfectly fine) * Get it out there (Github or Bitbucket), and get your friends to use it. You'll get a lot of really valuable feedback. * On the same note, try to find an experienced "mentor", who can do code review session with you (even if it's somebody on the other side of the planet, internet is your ally). * No matter what, you will not get it right the first - or even the second - time. But that's part of the process. I developed 5 full frameworks, and countless prototypes before i was satisfied with the result (over the course of 3years). * Let it sleep. Write a first prototype, sit on it for a week or two, review it. Repeat until you get satisfied. * Have a philosophy. Mine for example : "Everything should be made as simple as possible, but not simpler." (quote from Albert Einstein) And that would be pretty much it. Again this is my take on it. I know quite a few people that despise my framework (coworkers even), i'm ok with it. And even me, i haven't really touched it in a month, and i want already to change couple of things. Hope i was helpful. 
&gt;As you note, PHP doesn't have multiple inheritance. If you go around using abstract classes in place of interfaces, you're likely to run into trouble when you later decide you need to refactor your code and actually need an abstract base class. I understand the interface and abstract class concepts, I just haven't seen a practical scenario where a concrete class extends an abstract class and implements a IInterface while another concrete class simply implements IInterface. To me, it just seems like interfaces are a basic feature to workaround the limitation of single inheritance of classes in PHP. While classes can implement multiple interfaces, the functions defined in the interfaces are limited to public functions.
I am in the process of reading this book now, and I cannot recommend it enough: http://www.amazon.com/Real-World-Developing-High-Quality-Frameworks-Applications/dp/0470872497 Sebastian Bergmann is the leading authority on quality assurance in PHP projects, and the ensemble of high profile, experienced members of the PHP community that he put together for real world case studies is really impressive.
Sweet, thank you very much. No messing about now ... ಠ_ಠ
Have they fixed the issue where if an app has a recursive symlink Netbeans will go into an infinite loop trying to scan the project? The worst part about that one is that their excuse is that it's a java problem, yet Eclipse works just fine (other than the fact that it's Eclipse, which sucks). Netbeans was my favorite PHP IDE until this bug cropped up and it happens that the framework I use daily requires a recursive symlink.
It should be noted that it's considered polymorphism whether it's via an abstract class or inheritance.
I think Symfony2 already does this (it uses swiftmailer)... I'm about to find out, because the next section of my current project is about sending mail. There's an email tab in the profiler, we'll see what it does.
http://www.hardened-php.net/suhosin/ -&lt;check this
said HEX 0X25
Interfaces and abstract classes are standard mechanics that exist in most OOP languages, and they behave almost exactly the same in each. So this isn't a case of a PHP limitation. There just isn't as much of a benefit to using them in PHP, since it's loosely typed.
 A completely contrived example, but I hope you get the point abstract class Page implements Publishable { public function publish() { $this-&gt;createVersion(); $this-&gt;updateStatus(); $this-&gt;allowPublicAccess(); } abstract public function getTitle(); } class HomePage extends Page { public function getTitle() { return 'Homepage'; } } class GalleryPage extends Page { public function getTitle() { return 'Gallery'; } } class Image implements Publishable { public function publish() { $this-&gt;copyFileToS3Bucket(); $this-&gt;notifyCacheThingy(); } } class Publisher { public function addToQueue(Publishable $item) { $this-&gt;items[] = $item; } public function work() { foreach ($this-&gt;items as $item) { $item-&gt;publish(); } } } // now, in some code somewhere else at another time. $page = new HomePage(); $page-&gt;setContent("whatever"); $image = new Image(); $image-&gt;setFile("/some/path.jpg"); $publisher-&gt;addToQueue($page); $publisher-&gt;addToQueue($image); // //... // $publisher-&gt;work();
One practical use for interfaces: markers. It's an interface that has no methods, but used for identification. Example: [IRequiresSessionState](http://msdn.microsoft.com/en-us/library/system.web.sessionstate.irequiressessionstate.aspx) Another practical example, is if you want to have several abstract classes that have similar behavior. Contrived example: interface IWorkflow { function nextStep(); function previousStep(); } abstract class LinearWorkflowBase implements IWorkflow {...} abstract class BranchingWorkflowBase implements IWorkflow {...} class ForwardWorkflow extends LinearWorkflowBase {...} class ReverseWorkflow extends LinearWorkflowBase {...} class SimpleBranchWorkflow extends BranchingWorkflowBase {...} class ComplicatedBranchWorkflow extends BranchingWorkflowBase {...} One way I like to approach it is this: * I start with an interface, when I'm not sure what the implementations will look like yet. * I implement it on a few classes. * If it turns out the implementation is mostly the same on every class, I upgrade the interface to an abstract (if the class structure permits). * There's no point in beginning with an abstract, if every implementation will differ. Another thing to consider, is who will be working with the code. For example, if you are using abstract classes only, your team members may not know which methods they need to override. Finally, you should realize that you don't even need abstract classes if you don't want to. It's all a matter of standards, convention, discipline, and which design patterns your team is most comfortable with. The benefits of using interfaces/abstracts in PHP is definitely not as pronounced as it is in other OOP languages.
Personally I prefer to have migrated code as sql code - sometimes happens that you have some sql function/procedure etc. I have to cover code only to MySQL and PostgreSQL so it's fine for me. I didn't met anyone who had big business application and the need of migrate his application from Linux server to Windows server (to use MSSQL). If client wanted application running on Windows, there was a need also to get application and database reworked for those applications and databases that client already had. So having migration code in PHP wouldn't help at all. For running tasks - maybe I didn't understood it well - but what's the difference between oil tasks and cron jobs/console test/unittest? Downloading packages - you need special downloader for additional libraries? Don't joke me.
pardon my ignorance, but what framework is it? and why does it need a recursive symlink?
I don't understand you. If I have abstract Controller with abstract Model that takes the all CRUD, list, pagination actions, all I need to do is just to write own methods if I want to create something more complicated. But if you want to create even basic CRUD, list and pagination, how does them look like if you can generate 60% of code by code generation? Where is the concept of DRY here, if you will have 3 different Controllers that have 60% of exactly the same code? If you have abstract controller you can just extend it, so you also don't have to wonder if abstract controller can deal with it. I don't want to try over-unify systems. But I think, that if we are talking about such big system that you don't want to have abstract controller (or other layers) too big, then this big system won't get benefit from generating some templates. Most bad thing about generating code is that it's not easy to change it when client wants something "easy", but what you haven't predicted, and suddenly almost all your controllers should act differently. You can change all files (because you generated all of them and don't have different layers), or find some ugly work-around. It's easy to see some examples with Zend Framework - it's fast to develop at start, but after some time, when the application will get bigger, making changes can be really a "pain in the ass". As I know, Oil code generation is not as good as Rails 3 code generation, so let's don't compare those two. The topic is about PHP frameworks, and comment about why Oil can be an advantage over not having Oil.
fuel and kohana have a lot of static methods :D
&gt; what framework is it? I'd guess it's a home-brew bunch of turd &gt; why does it need a recursive symlink? It doesn't but jaitsu either can't fix the bug, or isn't allowed to fix it.
I believe there are some addons to be installed that handle some of this for you but afaik most people code this all by hand. Codeigniter Sparks is a new way of installing addons in to your installation, but there doesn't seem to be anything for CRUD.
The PHP auto completion goodness is the only reason I use NetBeans. Best IDE for it that I can find.
FWIW, I've used rapyd with a reasonable amount of success with CI1.7.2, but it required quite a bit of hacking and it doesnt integrate easily. The advantages are awesome tho 
I'm pointing out why Oil can be help by drawing comparisons between the closest utility that is available, whichever language that may be in. I understand fully what you are getting at with abstraction, really, I have done it plenty of times in the past and it does work. However, the ability to "make changes" is more than just adding in extra methods. Sometimes things need to work a bit differently and I like the flexibility to do things entirely differently. The larger the application the more I would be worried about abstraction. I change one thing and it trickles down to 50 controllers? AGH! It's a personal choice. Oil is for some and Abstraction is for others. Fuel will help you work with both of those nicely. You can even define your own templates for oil so it can generate any kind of code you want. Rails doesn't do that - so let's not write Oil off as "not as good" without some examples.
I've had that problem happen with Zend Studio which is based on Eclipse. Just saying.
If your form submits to form1.php then you need to put the code that Google show under the title "Server Side (How to test if the user entered the right answer)" in there. Basically form1.php is the "receiver" of the form and verifies the extra fields that the recaptcha has inserted into your form. Does this make sense? Shout back if not!
I lurk Reddit in general, but this subreddit in particular. I'm really happy to see it growing and congrats to the new mods. :) NO TOUCHING! ಠ_ಠ
Um... models? Seriously though, I feel like CRUD is one of the things that draws the line between a CMS and a framework. A CMS always has this built-in, and a framework lets you handle it yourself. CI is a framework, so when I use it it's because I want to handle the CRUD portions myself. You might want to look into some lightweight CMS systems instead if you're having problems building your own models. 
Who said I'm having problems? :) I'm merely wondering there's a module/plugin which makes CRUD less cumbersome.
Sorry for not asking the question, but I just had to throw it out there: don't use CI. ~~It's laden with all kinds of nasty PHP 4-era code and is holding you back from understanding real PHP5 OO development. At least use Kohana, if you want to stick to the more simple frameworks.~~ (Edit: looks like the new 2.* series has PHP 5.1.6 as a min-requirement. That's still ancient and unsupported, but at least it means they've probably cleaned up their codebase quite a bit since I was last in there.) IMHO, Zend Framework and Symphony are the best choices out there right now. [This guy](http://zfdatagrid.com/) has a really really awesome grid thing that can do crud operations for you using ZF.
It definitely doesn't happen with versions of Eclipse from the last year or so. I've been using Komodo, which is ok, but not as good as Netbeans.
&gt; CRUD is one of the things that draws the line between a CMS and a framework I don't think this is necessarily true if you have a robust framework, commit to maintaining a thin controller, and take advantage of view helpers. I mean, you're right most frameworks don't have CRUD stuff *built in*, but there are plenty of ways to implement the pattern in a reusable way. Take this, for example: public function indexAction() { $grid = Bvb_Grid::factory('Table'); $grid-&gt;setSource(new Bvb_Grid_Source_Zend_Table(new Model_Users())); $this-&gt;view-&gt;grid = $grid; } Using Zend Framework and the Bvb_Grid extension, this is all that's needed in the controller to create a table. Add a couple flags and now it can perform CRUD operations. Personally, I'd love to see this kind of thing integrated directly into a framework, but you're right, it's probably straying a bit from framework to library (Which is OK I guess, if you're trying to maintain both a library and a framework as Zend has done).
It's home-brew, but highly specialized and scalable. Definitely not something any existing framework does particularly well. If we were writing standard web apps we could get away with an existing framework. The symlink is required for a third party integration point and is something we added several months ago. We could probably code around the issue with some trickery, but a symlink solves it perfectly and I'm a fan of using existing tools whenever possible. It doesn't make sense to spend time fixing what amounts to an IDE bug when so few team members use the affected IDE.
No, it wouldn't replace any of that. The only thing that is added to the page is in these lines: &lt;?php require_once('recaptchalib.php'); $publickey = "your_public_key"; // you got this from the signup page echo recaptcha_get_html($publickey); ?&gt; This prints the CAPTCHA to the page.
If you don't have a lot of experience with frameworks, don't know what do look for, and don't have firm grasp on design patterns, why are you writing a framework?
So you are one of the people who thinks that a static registry is somehow different from singletons. Could you explain to me what is the difference you perceive ?
I don't need to, Wikipedia does a pretty good job: http://en.wikipedia.org/wiki/Multiton_pattern
And for a little more reading: http://fuelphp.com/blog/2011/05/why-did-you-do-that
1. Migrations support native SQL as well as using the Query Builder or DBUtil classes. You can manipulate your XML files in there with PHP file functions if you want. Remember this is all just PHP. 2. Cron jobs are for schedules tasks, tests are unit tests. Maybe you could read up a little bit on some of these terms. 3. You can download them from GitHub the same as anything else. The command line just makes it quicker than google, download, unzip, copy, paste, check.
Great example, but the Publishable interface can be replaced by doing: abstract class Publishable { abstract function publish(); } abstract class Page extends Publishable { function publish() { } abstract function getTitle(); } class Image extends Publishable { function publish() { } }
Congrats guys! And sorry in advance for any headaches I may create for you :p
I've thrown together a few tables and its so far so good. I'm probably not doing things the most efficient way but its working. I've been running into an issue and maybe you can clarify. Let's say that I have a table with a list of documents. Each document has a column for Name and Category. My usual way for displaying data is to use a WHILE loop to display whats was queried. Is there a way to split the query into multiple loops so I can echo the resulted data into groups? For instance I can use the DISTINCT tag to pull the unique Category names and use those as headings for an &lt;ol&gt; consisting the Names under it? 
A lot of information about frameworks is very confusing. If you simply learn about MVC (Model View Controller) and Active Record you'll probably be able to pick up on any framework.
If I'm honest I was drunk when I made that comment, that was my Symfony fanboy coming out.. I've read a bit about FuelPHP now and it does indeed seem pretty flexible.
Until you decide that Page and Image need to extend something like ActiveRecord. Or maybe Page extends EditableRichTextEntity, and Image does not. Or maybe Image extends File. (EDIT: two more examples)
Some of our devs use: 10 minute email - http://10minutemail.com/10MinuteMail/index.html Not used it myself, but sounds like an easy enough solution instead of running your own mail server.
http://phpadvent.org
In your HTML page (front end), you define the &lt;form&gt; with the location of where you want the data to be posted. The page you're posting to is going to contain your captcha verification code (and whatever other code is needed.) &lt;form method="post" action="add_comment.php"&gt; &lt;!-- Here is some example data we're submitting --&gt; &lt;textarea name="comment"&gt;This is some content for the comment box that is on the example.&lt;/textarea&gt; &lt;!-- Now to include the reCAPTCHA fields --&gt; &lt;!-- This is the ONLY PHP code that you need to add to make reCAPTCHA display in HTML --&gt; &lt;?php // The path to the reCAPTCHA library. require_once('recaptchalib.php'); // The public key you're given from reCAPTCHA. $publickey = 'your_public_key'; // Echo a function that is defined in recaptchalib.php. // It will contain the reCAPTCHA image and text field. echo recaptcha_get_html($publickey); ?&gt; &lt;!-- Now give them a submit button so they can post the comment. --&gt; &lt;input type="submit" value="submit" /&gt; &lt;/form&gt; The code is submitted and sent to add_comment.php file. &lt;?php require_once('recaptchalib.php'); $privatekey = 'your_private_key'; // Use a defined command from recaptchalib.php to check // if the two post fields match properly for the remote IP. $resp = recaptcha_check_answer( $privatekey, $_SERVER['REMOTE_ADDR'], $_POST['recaptcha_challenge_field'], $_POST['recaptcha_response_field']); // Test if the response is 0 or FALSE (some sort of false flag). if(!$resp-&gt;is_valid) { // The response was invalid. die ("The reCAPTCHA wasn't entered correctly. Go back and try it again." . "(reCAPTCHA said: " . $resp-&gt;error . ")"); } else { // Submit the comment to the database. // Of course, this is an unsafe practice for mysql queries. mysql_query(sprintf("INSERT INTO `comments` (`comment`) VALUES ('%s');", $_POST['comment'])); }
It's a case of disambiguation, not performance. If you have multiple conditions like if ($condition1 || $condition2 &amp;&amp; $condition3) Use the extra parens so we know whether it's if (($condition1 || $condition2) &amp;&amp; $condition3) or if ($condition1 || ($condition2 &amp;&amp; $condition3)) ---- There's really no "cons" to using the extra parens, a pro could be that you don't have to change as many characters if you want to add to the condition
its a very useful function when you aren't dealing with data right out of a db. the number of times it has given me the correct result after giving it completely random "date formats" amazes me.
Ahh, yes I should probably have used that as an example too. I know there's a difference, I use it regularly, and there's no questions as to why you should/should not use extra parentheses in this kind of logic.
Yep, PHP being such a high-level language definitely has it's advantages. This function saved me a lot of time, too.
yes, but there are some caveats. strtotime($ch) !== false; // where ch is any single character except 'j'. strtotime("j") === false; it's to do with timezones - it take `strtotime('a');` to mean "now in timezone A". but there is no timezone J so that gives you false. It's still a very handy function, but you can't rely on it for date validation. 
Prefer single parans except when they make the control less ambiguous. Shawncplus's example is a good one, also cases where ((somecondition) || (someothercondition)) even if the rules of order would enforce the correct grouping.
Could you further explain? I'm not sure I understand your comment :)
I always add a function that wraps strtotime and date together so you can use the date formatting on MySQL datetimes without needing to extract it as a timestamp. 
So I have this code: &lt;form method="post" action="gdform1.php"&gt; &lt;?php require_once('recaptchalib.php'); $publickey = "public key here"; echo recaptcha_get_html($publickey); &lt;input type="submit" value="Submit Reservation"&gt; &lt;input type="reset" value="Clear Form"&gt;&lt;/p&gt; &lt;/div&gt; &lt;/form&gt; But no captcha appears, nor does any Submit Reservation button anymore. The Submit Reservation button does, though. Do I need to host this before it will appear?
We used yii for 3 types of projects; - Really small: just 3 type of page displays of a google map + admin backend - Medium small: An interface to show designs to customers + admin - Quite large: A full blown application for calculating house prices (immo) It did the job for us and did not have a steep learning curve. I have to say my collegue did the hard work and explained me in a half day :). We will probably keep using this framework. Having the same framework for your entire team is offcourse a big advantage ;)
Only places I use extra parens are with inline boolean comparison/function values as in returns and ternaries. return (empty($butt)); echo (empty($butt)) ? 'no poop' : 'poop'; I guess I do it as some kind of reminder to myself that things are still going on. I dunno; it's a habit I picked up at school writing shitty C++.
One of my favorites that I actually recently discovered is [extract](http://www.php.net/manual/en/function.extract.php). Using this function, you can pass an array of named params to a function, and the function can use those like they're local variables.
(($a + $b &gt; $c) || ($d + $e &lt; $f)) it would evaluate just fine without the extra parenthesis around each condition, but they serve to clarify.
true. extract is pretty cool. especially if you are working on a templating system
good to know. thanks!
As timdev pointed out, that won't work because you're now tying both Page and Image to extending a class that they otherwise don't need to. 
I would actually warn against the use of extract in 99.9% of cases. You're arbitrarily introducing unknown variables (or overriding existing variables). I had to instruct a developer working under me to never, ever use extract unless you're building a templating system and the input is very controlled.
Parentheses are used in this way to override natural [operator precedence](http://php.net/manual/en/language.operators.precedence.php). Having said that, what is the issue here? Why would you use redundant parentheses as in your latter example, forcing the language interpreter to go one extra unnecessary nesting level while it's parsing? Edit:spelling 
Congrats guys!
Magic, got it.
Yeah that function is a stupid idea. can always do list($derp, $herp) = explode(',', 'herpler,derpler');
It's Wikipedia, and there's no lock. If you don't like it, fix it.
Upvote for using herp and derp in a function explanation. It should replace foo and bar, which still make 0 sense to me when I read stuff that uses them.
1. If only you could somehow edit it yourself. 2. It mentions it in the history section. 
strtotime is a bit old fashioned. Try the DateTime constructor, it supports all the things strtotime does. DateTime objects stores dates internally in a more interoperable manner than an integer. and the date arithmetic methods make code easier to understand. It also makes working with timezones easier. Plus you can create a DateTime object out of any format with createFromFormat method.
What type of trouble do you expect to be up to?!
What is the worst case scenario here?
Haha, hopefully none!
I only use it set operator precedence.
`strtotime()` should never have been a built-in function. While the usefulness is obvious, it would have made more sense in userland. The accepted string variations and date formats are hardly documented, and there were bajillion of bugs. The failures and deviations between PHP versions make me shy away from using it for distributed code. (Would be less of a problem if implemented with ordinary php code, where you could inspect, fix, and always distribute the latest revision.)
 // POST index.php // Request body: _SESSION[auth]=true&amp;_SESSION[role]=admin if (!empty($_POST)) { extract($_POST); // this has now overwritten protected $_SESSION vars } Beyond that, it's simply bad practice to have variables in the local space that you can't directly account for.
And you know, it actually would be - **if** the DB connection was initiated with `SET NAMES 'ascii'` et al.
php's DateTime class is a lot nicer for parsing because it can be in any arbitrary format and all you have to do is use [createFromFormat](http://php.net/manual/en/datetime.createfromformat.php).
 extract($_POST, EXTR_SKIP); It really isn't a problem to avoid that issue easily, but I agree that extract() should be avoided in this context.
after using php for 12 years i used this function the first time a month ago to parse a js date string... now i feel weird.
I am zend certified. I can't say if it helped me get jobs, i never asked my employers, but it can't hurt(other than your bank account). I did it because i like tests, and i thought it would be a nice way to force myself to learn PHP. Definitely go zend if you decide to get one.
oh god
I recently needed to do a calendar, and I was trying to avoid the usual javascript-driven* "date selection" popups you normally see. I find them clunky, and a real pain in the ass if going back or forward, say 6 months. Just to be lazy I used a plain text box instead, with strtotime. I figured I would replace it later, but honestly, I LOVE it. If strtotime chokes on a date, or gets the date wrong, the user gets a crystal clear warning (or can obviously see the wrong date). As a result I can set time spans, say Oct 31, 2006 through Nov 7, 2010 as quickly as I typed that- WAY faster than those dumb pop-ups. I'm sure I'll add them eventually, but I'm totally keeping this strtotime option. * just another reason why widespready HTML5 adoption will be so very sweet
I'm ZendPHP certified (not Zend Framework though), and also a Zend instructor. Here's my two cents: It doesn't *hurt*, but I think certain types of employers put weight on certifications and others don't. It's not an easy thing for me to determine ahead of time, but I've had a couple local employers in the area tell me that they've looked at certification similar to how they look at other 'extracurricular' related work - it indicates an extra level of commitment to the craft. *Certification* goes a little beyond that, because you've actually passed a test created by some industry-known names designed to test a deeper knowledge of the language than the average person picks up in day to day work. How do I know that? Because I've known some people who were reasonably functional in PHP - were paid by employers to do it for a few years - who didn't pass the test. It's certainly weeding out a degree of people who otherwise might say "sure, I do PHP". To the extent that an employer would want to ensure a certain level of competence, they'd look for certification. I do see more of a willingness to use the PHP certification as a criteria in 2011 than I did in 2006/2007. It won't get you a job, but it will probably help you get a foot in the door with all other things being equal against other candidates. For me personally it hasn't helped, but I'm typically dealing with clients and projects where my reputation precedes me to some extent, and the notion of certification is less important. I'd been working with PHP for 9 years before certification was even available, and have been working with PHP for 16 years now, along with a whole host of other tech. Let me know if you've got more questions. 
I have one still -- what resource(s) did you find most helpful studying for the exam?
Mostly experience :) The test is broken up in to 10 sections, and I took some practice exams from phparch in 2008. I had some weak areas in regex and filehandling (streams stuff, mainly) and some XML issues. I boned up using the study guide from Ben Ramsey (and some other co-authors, I just can't recall their names) which helped. I teach the certification prep course for Zend. Some people get a lot out of it because of the small group feel, and they get to ask a lot of questions and we go off on a lot of tangents (well, I do), but it's also rather expensive I think for many people (it seems often that an employer's paying for students in that class). 
Fair enough -- I'm in the position that if I pass the test, my employer will pay for it, but they won't pay for any of the courses, study guides, etc. Unfortunately, a lot of my experience is learning something once it's necessary for my job; I've been able to get a general idea on what my weak areas are from the Zend Study Guide, though, so I guess I'll start with that. Thanks!
In all my years of programming, I've never seen useless double-parentheses recommended and that's not just for PHP but C, C++, Java, C#, etc. There's just no reason to do it. 
Your example doesn't work There is no `useSigns()` or `getSolution()` functions Also, this doesn't really *show oop*, it's missing 90% of the things that make OOP...OOP
Using EXTR_SKIP will avoid that. But yet, I only use that in an "include" style function (for templating).
It's completely off-topic but new design of php.net looks like it got out of from a PowerPoint template.
Oops, that example was using older operator names. I meant to write in the description that this was a super simple class. It is not meant to be a complex class explaining every bit of OOP.
Lets look at [OPCodes](http://php.net/manual/en/internals2.opcodes.list.php). Keeping in mind here that '+' has a higher [operator precedence](http://php.net/manual/en/language.operators.precedence.php) than '=='. if ((1+1) == (1+1)) { } is the same as: 0 ADD 1,1 (one plus one) 1 ADD 1,1 (one plus one) 2 IS_EQUAL ~0,~1 (compare the result of op 0, and op 1) 3 JMPZ ~2, -&gt;5 (if result of op 2 is zero, jump to op 5) 4 JMP -&gt;5 (jump to op 5) 5 RETURN (exit) That's a total of 6 OPCodes. Remove the unrequired parenthesis and surprise! You're still rocking the same 6 OPCodes. Smart compilers optimize, php is no exception. You may have a very minor amount of overhead at runtime, but add an opcode cache and that almost entirely goes away. Anyone who tells you that using extra parenthesis for readability is somehow slowing down your code a lot is full of it.
I dunno. I would love to see a real-world exploit (that doesn't involve directly extracting $_GET or $_POST, or executing code based on unfiltered GET or POST data, which I would never do anyway).
Both of the examples provided to me directly use GET or POST data. I would never do that anyway; all my input is filtered. That has nothing to do with extract()
Perhaps you could point out where it mentions it as a legitimate option that isn't legitimate.
Ok. I'm also saying that it's borderline retarded to introduce unknown variables into the local scope, but sure, do what you want. I would highly suggest reading the comments on the [actual doc page](http://php.net/manual/en/function.extract.php#allnotes) or read [this article](http://josephscott.org/archives/2009/02/i-dont-like-phps-extract-function/). 
1. Still often you need to have some code that you cannot translate between MySQL and PostgreSQL. Some SQL functions look different in one and another, and you can't use PHP so easy to migrate them in that way that Fuel uses migration - as far as I know. 2. I know what the terms means. I asked why should I use tasks? When I already have different tools that are good enough, so why bother learning other tools that won't help me more in my job? About cronjobs - you can run cron on task or just on some controller - I don't see the difference what I will get when I will use task option that Fuel gives me in cronjob. 3. I believe it can make things like that quicker - but as 2) - why learn another tool (that will be as I believe more advanced in the future)? Especially if you don't have to download new libraries each day, rather using something like a "packages" of current system?
It's not a built-in function. It's a function in ext/date, which is a wholly different matter. As for the date format, it is [very well-documented](http://php.net/manual/en/datetime.formats.php). As for bugs, it only has [20 open bugs](https://bugs.php.net/search.php?search_for=strtotime&amp;boolean=0&amp;limit=30&amp;order_by=&amp;direction=DESC&amp;cmd=display&amp;status=Open&amp;bug_type=All&amp;php_os=&amp;phpver=&amp;cve_id=&amp;assign=&amp;author_email=&amp;bug_age=0&amp;bug_updated=0). And to that end, most of the bugs are regarding edge cases or subtleties of behaviour. The differences in behaviour of this function between various PHP versions is well-documented in the manual's function changelog. If you're concerned about knowing the exact behaviour for a version, you can easily inspect the source code for the function [here](http://svn.php.net/viewvc/php/php-src/trunk/ext/date/php_date.c?view=markup#l1386), or more specifically [here](http://svn.php.net/viewvc/php/php-src/trunk/ext/date/lib/parse_date.re?revision=312297&amp;view=markup#l1760) (the timelib).
It's a neverending discussion. For some people the simplicity and quality of documentation of CI far outweighs being able to code in pure OO. You just wouldn't use Zend or Symphony for a 10 page site with a little CMS to make blog posts.
Please stop writing PHP4.
It is a _really bad idea_ to just randomly trust it to get the right answer without first seeing if it supports a given format. For example, 1-2-2001 is completely ambiguous and the parser has no way to know if you're giving it M-D-YYYY or D-M-YYYY so it only supports one of the two formats. If you haven't done so, you really should read about [what formats it supports](http://php.net/manual/en/datetime.formats.php) instead of throwing random things at it and just being surprised if it works.
you can use wildcards in glob http://php.net/manual/en/function.glob.php
Two ways I can think of: - Get a directory listing and loop through the files searching - Issue a file system command
Thanks that should do the trick!
Don't quote me on this but I think one of my colleagues arguments were that the statement: if ($a &amp;&amp; $b + 3) Would evaluate like this in PHP: if ($a &amp;&amp; ($b + 3)) But like this in C or C++ which he used to program in: if (($a &amp;&amp; $b) + 3) And that's why he uses the extra parentheses.
&gt;Why would you use redundant parentheses as in your latter example, forcing the language interpreter to go one extra unnecessary nesting level while it's parsing? You have to ask them :) Readability was the answer I got.
Thank you. Is it possible to have simple code and look at the OPCode result like the one you posted? &gt;You may have a very minor amount of overhead at runtime, but add an opcode cache and that almost entirely goes away. If I understand you correct you might have overhead when using the additional parentheses? We use APC, but I'd rather use it for other operations than extra parentheses in control statements.
DevNullSMTP in the same category http://www.aboutmyip.com/AboutMyXApp/DevNullSmtp.jsp
Good luck! About 80% of the people I know that take it pass on the first try, and most of the studied for a while for it, and have been doing PHP for several years. It's not an impossible sort of test, but you'll definitely find a few "edge case" questions that will test stuff you may never have used. While I'd like to tell you more, I can't comment on any specific questions. However, I'm not breaking any confidences by telling you you'll probably have a question or two that use closures, so be familiar with those. :)
Expecting languages to have 1-to-1 analogues to each other will usually get you a much more cumbersome script.
How 'herp' and 'derp' makes any more sense than 'foo' and 'bar' is completely and utterly beyond me... They're both just examples.
Sometimes it's helpful just as syntactic sugar. Which would be the cases were all the variables you're extracting are known.
Looks exactly the same to me? :S
There have been more than enough of them, to the point that about the time everyone was switching to PHP5, php.net had a security warning regarding this on their news page.
Readability? Ask them if ((((((foo || bar)))))) is even MORE readable.
1. Put any code you like in a migration, it will work fine. SQL is fine. 2. Tasks are controllers for the command line. Controllers could be executed by anyone, tasks cannot. 3. If you dont want to use packages then don't, just download a ZIP. It's there as an option if you want it (which a lot of people do based on our feedback.
You can use regex to do this. [preg_match](http://php.net/manual/en/function.preg-match.php)
Yes, it is. You can get the extension (it's called the vulcan logic disassembler) to do it from [here](http://derickrethans.nl/projects.html). If you don't feel like installing an extension, you can also go [here](http://codepad.viper-7.com). Pasting code in to this pastebin will give you output, and an OPCode dump.
Found amongst some production code at work a while back: extract($_GET); extract($_POST); :(
Except if you read it, it's not wrong. He just read it wrong.
It's just a multi page form, except you keep using the same form and it's pre-filled. After the CSV import store an array with the data into a PHP Session. Create an integer $_GET variable which increase every submit and use it as an array index to loop trough the session's array. To create the PDF you could use: http://code.google.com/p/dompdf/ The though part about multipage forms is when users start using the browser back button...
You will need a status column (use the enum datatype). It starts as "needs review", then "reviewed once", then "reviewed twice". (You will of course give it better names.) Do your query: ..... WHERE status = 'needs review' LIMIT 1 This will give you one row that has not yet been reviewed. And you do this each time they view the page till there are no rows. Printing a PDF from php is not easy but not impossible either. Start here: http://www.php.net/pdf
Still waiting to see this: $allTheVariables = get_defined_vars(); foreach ($allTheVariables AS $variable =&gt; $value) { if (is_array($value)) { extract($value) } }
 function wildcard_match($pattern, $string) { $re = str_replace(array('\*', '\?'), array('.*','.'), preg_quote($pattern)); return preg_match("/$re/i", $string); }
I &lt;3 glob
I see no value in it. It's a lot cleaner to simply refer to the variables as members of the array. The `extract` function reminds me of late 90s web development. It's a shit function. It has a partner called `compact` that's really useful, though.
Those are different from your examples in the OP. Using parentheses to make the order of operations explicit is ok in my book. However, I do believe that PHP and C evaluate their operators in the same order (except for the ternary operator). PHP is written and designed by C programmers. 
You could use it to pull objects out of a SQL database where the columns were defined.
Me too, call it "d"
User contributed [rglob](http://www.php.net/manual/en/function.glob.php#87221) is very useful too
If you've copied verbatim, then you need he closing ?&gt; tag to start with. And ensure the recaptchlib.php file is in the same directory as your form1.php and the html file. 
But for the sake of making code readable doing something like what the OP stated: if (($condition1 || $condition2)) { Seems like the wrong way about it. It would be more clear to state: if (($condition1) || ($condition2)) { e.g. if (($panda == 'bear') || ($koala == 'bear')) { The above is more legible than both: if ($panda == 'bear' || $koala == 'bear') { if (($panda == 'bear' || $koala == 'bear')) { 
That's because .Net is retarded and for some reason thinks that web apps should work like desktop apps. In PHP you would get the list of the folder, sort it, then search for the right key in the list. You could build a function that takes partial names or wildcards then use that over and over again. Forget everything you know about .Net if you want to be good at PHP. They are very different animals.
I loved "you use php, you don't care (that this is slow)" ;)
What benefit do you really get out of this?
I feel like this should be a patch in CakePHP's core where they actually form the array with the results
You can pull dynamically generated variables that have only been defined by the database? Not much I don't think. 
Thanks for your help, the button appeared, but no captcha, even with them all in the right folders. Here is abbreviated look at the html code: &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt; &lt;HTML&gt; &lt;HEAD&gt; STUFF IN HERE &lt;STYLE&gt; BODY STUFF IN HERE &lt;/STYLE&gt; &lt;/HEAD&gt; DESIGN STUFF &lt;!-- CONTENT --&gt; &lt;TD&gt;&lt;H2&gt;&lt;CENTER&gt;&lt;B&gt;Reservation&lt;/B&gt;&lt;/CENTER&gt;&lt;/H2&gt; &lt;form action="WEBSITE/form1.php" method="post"&gt; &lt;input type="hidden" name="10 Subject" value="reservation form" /&gt; &lt;INPUT TYPE="hidden" NAME="Email" value="emailaddress@web.com"&gt; &lt;P&gt;&lt;PRE&gt; FORM STUFF HERE &lt;div align="center"&gt; &lt;form method="post" action="form1.php"&gt; &lt;?php require_once('recaptchalib.php'); $publickey = "PUBLIC KEY HERE"; echo recaptcha_get_html($publickey); ?&gt; &lt;input type="submit" value="Submit Reservation"&gt; &lt;input type="reset" value="Clear Form"&gt;&lt;/p&gt; &lt;/div&gt; &lt;/form&gt; MORE DESIGN STUFF &lt;/body&gt; &lt;/html&gt;
That's right around the point when I stopped reading.
Don't ask. It's my crazy little mind.
Well, it *was* the last line of text. Seriously though, if you sacrifice convenience and readability (I offer both) for performance, *why the heck are you using PHP*?
Right... I passed the cert test a few days ago, there was also a lot of streams, SPL, advanced OO, configuration and security stuff which caught me off guard so watch out for that too. Also, learn operator precedence well, some of it is counter-intuitive: $x = 1; echo 'foo '.$x+1.' bar'; // echoes '1 bar'
First of all, a general tip, on large form pages I tend to add a keep-alive mechanism to keep the session from timing out. Because nothing is more frustrating for someone doing data entry then having spent 30 minutes making sure some form is filled in correctly to get an error on submit because the session time expired. You can either do this globally by extending the default [session timeout](http://php.net/manual/en/function.set-time-limit.php) or by adding a bit of javascript to your page that requests a keep alive page every 10 minutes to make sure the session keeps alive on specific pages. The second option takes a little bit more work, but can be the better option depending on various variables. For a internal data procession system as I think you are describing the former should be fine though. As for your actual question I could type out my thoughts but they would be similar to what [asr](http://www.reddit.com/r/PHP/comments/k2h2f/learning_php_setting_up_a_session_for_csv_import/c2h0k0q) already wrote, just do your inserting before showing any forms and keep track which records have been handled via a status column. Also if you have limited knowledge of these things, then indeed dompdf is probably the easiest thing out there to use. Just as a warning though, always make extra sure the HTML you give it is 100% valid, it will cause problems if it isn't which can be hard to debug. As a general best practice always add a creation date and mutation date to such records so you know when it was inserted and when it was handled. When bugs happen such data can help with debugging the problem or determine the scope of data corruption. Also a best practice, make 1 function to insert a record, and 1 function to update a record, and never ever not use those. Let those functions set the creation date field and mutation date field. Then make those functions robust so they will never ever work with data that shouldn't exist. That way, a lot of things can go wrong in the application but the chance that they will affect the database is small. 
Without actual code samples... who knows. How did you run them "in parallel"? Just launch two processes by hand? They run parallel, but they launch serially... so the second one to launch could have an impact on the first, throwing off timing.
Try using a profiler, e.g. XHGUI.
"It depends". If it's large enough, you don't want any framework. But it depends on your definition of large.
That's exactly why I use cake (and PHP for that matter). I don't really love either of them.
Yeah, streams and SPL and configuration. I don't remember a *lot* of SPL stuff in my exam, but I think there were a couple of questions assuming you knew about built-in interfaces and such. PHP 5.3 has some new configuration options - like the .user.ini file - read up on that. 
I love cake's documentation, comparatively. I hope whatever they're doing for 2.0 will be as good as the book...
[preg_match_all()](http://www.php.net/manual/en/function.preg-match-all.php) is my favorite function. i mostly do website data scraping so i use it almost as much as an echo statement
Most of the time i don't use a framework, but if i really, really need to i'll use code igniter. its well documented.
heck, even the 7 years i have been developing php i have had to jack around with mod_rewrite. Its not even that complicated, so even if they are having issues winging it, they have never touched it. 
massive amounts of business's use IIS/php/mod_rewrite
Since this entire thread got out of control with theoretical arguments. I threw as many different types of load tests that I could think of. Every test I did had this slightly SLOWER than mod_php without APC. This was just pure running of code, which in the real world is what this is all about. But it's only a couple of ms slower.. Something not worth worrying about, especially when all the perks it brings.. Like access to java objects from within php code, and i was | | this close getting Thread() working (if anyone can, let me know) 
Check the source to see if anything is outputted. From what I've read from the google page this should be working fine. I'm on my phone so Ican't explore further I'm afraid. Also check that your error reporting is on (if you're not sure how to check, try echoing an undeclared variable).
Thanks for this. I need to read up on the new classes available in v5 - do you have any good resources?
You will be better off avoiding ORM and using a PDO prepared statements.
I know your asking for answers and i think others will point you in the right direction i just I hope you charge them extra for scope changes. Don't take it on the chin.
I agree with all of this (except unit testing, I just test things, why use some artificial script ffor using your classes if the only way they're exposed is to a HTML interface) and I would add: write every single line of code with the future in mind. Is that hack going to stop you from expanding in the future? Is your form processing class way too focused on one generic type of form? Write it again.
You could do the review flagging with an extra MYSQL column, or in PHP using session, or by adding an extra column to the CSV itself. I'd prefer "For instance, you could try..." to "You will need".
If you are the only one to use your framework, sure, but if you have other devs using it, Unit Test is not something you should overlook. I've seen too may libraries or such break because they was no Unit Test validating all use cases.
I'm still a pretty new developer in the grand scheme of things so advice and criticism would be great if anyone spots anything that they would have done differently. It's bloody nerve-wracking showing code to you lot by the way, but hopefully the worst-case scenario is that I learn a bunch of stuff.
http://us.php.net/manual/en/class.mysqli-stmt.php I believe using prepared statements is the most recent and effective way of escaping database queries.
Thanks for this! Can't believe it didn't already exist.
It may be because it'd be pretty easy to do the consuming part in PHP already, and most people tend to be consumers rather than producers or contributors. $json = json_decode(file_get_contents("http://www.reddit.com/r/php/.json")); foreach($json as $entry) { ... That said, good luck on your project :) I know there's more than just consuming from JSON...
I wish I could upvote that more than once! if ((foo &amp;&amp; bar)) { might be slightly more useful if there's a tendency to override the condition by injecting a 1 || if (1||(foo &amp;&amp; bar)) { on a regular basis. Do your colleagues tend to do that? 
I'll check it out and may be commit back some stuff. Great initiative. I have a client on my own that i use for a mobile app i use to browse Reddit (allow me to browse Reddit like a slideshow, never have to click on anything).
[Don't parse HTML with regex,](http://c2.com/cgi/wiki?ParsingHtmlWithRegex) [Look into DOMXPath](http://php.net/manual/en/class.domxpath.php) and [XPath](http://www.w3schools.com/xpath/default.asp) 
Sweet. Thanks :)
Awesome! Can't wait to see more. I tried a reddit voting api in php a while ago and didnt have much luck. Wish you all the best tho, you got alot farther than I did. Keep it up!
Use an autoloader so you don't have to require files in your classes. [http://groups.google.com/group/php-standards/web/psr-0-final-proposal](http://groups.google.com/group/php-standards/web/psr-0-final-proposal)
Haha, that link! I love showing that link to people, PSR-0 is one of my favourite things about PHP in recent years. I'm a *massive* fan of PSR-0 ([evidence](https://github.com/henry-smith/Tree/blob/master/Framework/Autoloader.php)), and if there were some built-in PHP PSR-0 autoload function I'd be all over that shit. In this case, though, I reasoned that there were only ever going to be very few classes, and very few files to load. That being the case, it seemed to make more sense to write a bunch of require statements than to include an autoloader. $ grep -R "require_once" . | wc -l 36 That's 36 lines of require_once statements. I can either add a bunch of code implementing PSR-0, plus automated tests of that code, or introduce a dependency on some 3rd party library, or just keep those 36 lines of relatively efficient code that handle the dependencies just fine. Edit: does this sound sensible? If there are arguments against this point of view I'd love to hear them because it'll only help me push the PSR-0 agenda myself. (also, if you checkout the namespaces and class names, you'll see I've named everything so as to be compatible with PSR-0 solely in the hope that the language itself adopts the standard eventually)
o.o thanks for the tip!
Yeah true, admittedly the reason I got started on this is because I saw /r/botcirclejerk and wanted to write a bot for it. You have to login to post or vote, and to stay logged in you have to be able to store and send a cookie, so it was like if you need a bit of library code why not go a little further and just wrap the whole thing!
What's wrong with [ImageMagick](http://php.net/manual/en/book.imagick.php)?
That *is* simple. You should try the command-line version of imagemagick for some real complexity:)
I should say that I am just learning, and this is an ongoing "improvement" project. They are letting me take time to learn, paying me to do it (along with other IT related stuff like sever maintenance, backups, etc), and we are doing it in phases. This is actually phase 2 that I am working on now. I learn so much better when solving real-world problems. And your help is much appreciated!
I googled it and looked at your link, but still not sure what PSR-0 is.
Upvote for using namespaces! I've been using Zend Framework for a long time now and am getting very bored with typing things like Zend_Application_Resource_ResourceAbstract.
Namespace
Thank you for docblocks. 
you have some really interesting code there.
i fckin love drupal
Yeah, me too! You might like this [multi-reddit](http://www.reddit.com/r/php+drupal+seo+html+css) then.
I just forked your repo and am making the modifications necessary to make your code PSR-0 compliant. Then you can just package along a pre-existing autoloader for those who aren't already using one. For an example, take a look at how I usually do my libs at https://github.com/shawndellysse/Csv. You'll see that I'm using Symfony 2's autoloader, as it is one of the most feature-complete ones I've seen.
Don't try to edit the CSV file contents then add the records to the database once that's done. The best way to do it is just to import the CSV into the database first, then list/open the DB records for editing individually. You can add a column to the DB table to denote whether or not the record has been reviewed. Alternately, you could have a table for imported data and a table for processed data and move records from one to the other after processing - but just adding the status column is probably easier and sufficient. As for creating the PDF file, if you can run the software, wkhtmltopdf is the easiest way to go. It will depend on your hosting environment, but even if you can't install it, there are pre-compiled binaries for a lot of platforms, so you may still be able to execute it.
Wow, I've never seen that link before. Thanks for that! This is what I did for an autoloader a while ago. Before PHP 5.3, so no namespaces or anything. Stuck this in a includes/core.php and include that in the main entry points. define('BASEDIR', __DIR__); set_include_path(BASEDIR . PATH_SEPARATOR . get_include_path()); function autoload($className) { /* We're using the built-in autoloader as it's faster than a PHP implementation. * Replace underscores with slashes to use a directory structure (FeedSources_Twitter -&gt; includes/FeedSources/Twitter.php) */ $filename = strtolower(str_replace('_', '/', $className)); return spl_autoload($filename); } spl_autoload_register('autoload'); Having a standard for autoloading is a great idea, I'll have to update old autoloaders when I get the chance to :P
See hiii's link: http://groups.google.com/group/php-standards/web/psr-0-final-proposal Essentially: a common way of converting a class name to a file name for autoloaders.
More information https://wiki.php.net/rfc/horizontalreuse
From a quick look, `Account::getLinks()` doesn't actually return anything. Also, not quite sure why you're using ArrayAccess instead of simple magic getters/setters, but that's personal preference of course. :)
This mostly looks like functions inside a class. I could see that this could become nicely object orientated... Have a subreddit class, user class (to retrieve other user's details), bot (to act as a reddit account) class, etc...
Something I've often wondered: how do magic getters and setters handle isset() checks? I use a few isset checks here and there to make sure some methods still return sensible answers even when they haven't been given any data yet.
Sure, but I mean instead of `$this['something']`, you could simply do `$this-&gt;something` if you use `__get()` and `__set()`
Most of the packages wrote in the past 5 years could have been done with 20% less code if we had traits earlier. This will prevent a lot of duplicate code and/or unnecessarily complex class-hierarchies or compositions.
So, basically, Scala's traits, but the keyword is "use" instead of "with". Way to go PHP! Traits are awesome.
Not sure what you're talking about actually. You sure you're looking at the right code?! :)
To be honest, I prefer a class structure like &lt;basedir&gt;/src/&lt;namespace&gt;/&lt;ClassName&gt; and get away with this lowercase underscores Zend crap ... then I use this to autoload define( 'BASEDIR', __DIR__ ); define( 'EXTENSION', '.php' ); function __autoload ( $class ){ $path = BASEDIR . str_replace( '\\', '/', $class ) . EXTENSION; if ( file_exists( $path ) ){ require_once ( $path ); } else { echo 'Cannot load: ', $path; exit(); } } This will load all the following \ns1\MyClass1 \ns1\ns2\MyClass2 from &lt;basedir&gt;/src/ns1/MyClass1.php &lt;basedir&gt;/src/ns1/ns2/MyClass2.php there's no need for PATH_SEPARATORS, both linux and windows handle '/' just fine
I'm working my way through this book right now. I've liked it so far.
The syntax for private scope is: class MyClass { private $auth; function __construct() { global $auth; $this-&gt;auth = $auth; } } And auth will be private. You can also look into the "protected" scope keyword. There was a post earlier about PHP 5.4's "Traits" which may be of help to you as well, you should look into that. Traits are a way of importing classes without having to inherit from that class, which is probably what you want to be doing here.
They look awesome, but personally I'll be waiting a while before switching to 5.4. In the mean time I've been using Yii's behavior functionality a lot, which is quite similar to traits. http://www.yiiframework.com/doc/guide/1.1/en/basics.component#component-behavior
Thanks for your help! I'll look into them more!
Use static vaiables or a singleton pattern. 
Ah, excellent, the documentation is done. The countdown has now started to the first article that does little more than re-explaining the docs. 
Now when you refer to "singleton" do you mean the Traits that bkanber mentioned? and you can make an object variable static like that without causing any problems?
Why use 'global' at all? function __construct($db, $info, $auth) { $this-&gt;auth = $auth; $this-&gt;db = $db; $this-&gt;siteinfo = $info; } ??? 
Those don't work when you are dealing with bad/old HTML, which is always the case for me :-(
 &lt;screams&gt;Why not just allow multiple-inheritance?!&lt;/screams&gt;
This is better. Traits + Interfaces gives you the same thing as multiple-inheritance but with far more control.
It's called [AOP (Aspect-oriented programming)](http://en.wikipedia.org/wiki/Aspect-oriented_programming)
It's stigmatized. Interfaces and traits are academic workarounds to eschew MI. While traits obviously also provide some expliciteness advantages, this is mostly an optimization for edge cases. Also of course, PHP is not Python, and you have to take into account that the more stale object model would not allow for the ease of use as in other languages. (It would probably end up being more like in C++.) http://c2.com/cgi/wiki?MultipleInheritanceIsNotEvil
how exactly singleton differs from global variable ?
You should look into [dependency](http://www.potstuck.com/2009/01/08/php-dependency-injection/) [injection](http://components.symfony-project.org/dependency-injection/trunk/book/01-Dependency-Injection). Basically, you avoid globals as much as possible and get the possibility of easily switching out your dependency classes. Usuaully several dependencies are put in a container class to be managable. It could be something like this: class foo { private $db; private $auth; function __construct($dependencies = NULL) { if (is_null($dependencies)) { $dependencies = dependencyContainer::getInstance(); } $this-&gt;db = $dependencies-&gt;getDb(); $this-&gt;auth = $dependencies-&gt;getAuth(); } } If you don't provide a dependency container object, the class defaults to a regular one. For testing pruposes, or if you have multiple databases, you can easily switch out the container object. I hope that this makes sense. Check out the links above and check Stack Overflow too. They discuss dependency injections quite a lot there.
You don't need traits to implement a singleton pattern. They just makes the process easier by removing the need to have duplicate code in every singleton class. The singleton pattern and other basic patterns are described in the [PHP manual](http://php.net/manual/en/language.oop5.patterns.php).
This is the right way to do it. What you're doing will work but it's not best practice and anyone else picking up your code will be scratching their head for a minute. Just make the authorisation properties private.
its either bad unicode or http chunked encoding (assuming you are reading from a http connection). its very common for people to cut n paste and the apostrophe in o'connor may not be in the same unicode you are set up for. i use simplexml and curl for 100-500meg xml files and those are the two problems i've seen in the last 4-5 years.
&gt;but with far more control explain
With multiple inheritance, you inherit both the type and implementation from more than one base class. With interfaces, you "inherit" a type but not the implementation and with traits you "inherit" the implementation but not the type. Multiple-inheritance combines two concepts together that can actually be thought of as separate. 
Yikes, I'm afraid those things are above my skill level :/
A global variable can be overwritten by any code in the app. In the PHP &lt; 5 days it was made worse by register_globals either being turned on by default (PHP &lt; 4.2) or enabled because some old/bad code required it, allowing globals to be set from somewhere outside the code completely. Singletons get a bad wrap because they're a wrapper around what are, essentially, global variables. But they're not *as bad* as globals because instantiation and instance variables are controlled internally. Calling MySingleton::instance() will always return the "real" instance of MySingleton, unlike $myObject which can be overwritten. Not even register_globals, the big black spot on PHP's reputation years ago, can touch that.
What's even stranger is when I see functions with 4-6 parameters, then the first line of the parameter GLOBALs another 8 global vars. Ugh... BTW, @rolldeep, I'm assuming you meant that my way I pointed out is the 'right' way, and not that you were saying someone would scratch their head at my code :)
Hah, I actually found out about Traits while trying to figure out the best way to do horizontal composition in PHP. It's funny because I ended up reading four or five blog posts about Traits before actually stumbling upon the actual documentation linked here!
Do yourself a favor and code for DI from the start. Testing your code is so much easier when you can hook in custom objects, as is working in a non-standard (i.e. development) environment.
I don't think that prepare statement is doing what you think is, unless there is an alternate syntax that I am unaware of. From my understanding to actually prepare variables you need to put a place holder into your prepare statement and call bind param to actually bind the param, by doing that you are protecting against any injection. For example: $sql = "SELECT id FROM blah WHERE name LIKE :searchTerm"; $query = $pdo-&gt;prepare($sql); $query-&gt;bindParam(':searchTerm', '%'.$searchterm.'%'); $query-&gt;execute(); What you are doing is just inserting $searchterm directly into the query which is not protecting against anything. Essentially the same as doing $query ="SELECT id FROM blah WHERE name LIKE '%$searchterm%'"; $pdo-&gt;query($query); Preparing the statement protects against injection because the query and the data are sent separately and your database engine is expecting only specific data for your "placeholders". Edit: formatting, added more info 
Would you considering teaching Zend on reddit? You could get your own subreddit and have weeky (or whatever) lessons. I would definitely be interested, as would many here I'm sure.
Oh I use bindParam(), I just forgot it here. Do I have to sanitize the search term if I use it like that?
if you do $id = 10; $sql = "SELECT * FROM mytable WHERE id=:id"; $query = $pdo-&gt;prepare($sql); $query-&gt;bindParam(':id',$id); $query-&gt;execute(); you should be okay, no injection will get through.
If you are using it in bindParam() no pdo will take care of that for you.
He's doing a "LIKE".
PDO prepared statements will prevent SQL injections and you should **also** sanitize yout user input, as you very probably don't really want all kinds of input on your fields. User input is very wild.
Yes. No. As for the quoted code, you're not using prepared statements properly. You must pass the variables as a separate parameter, not merely inject it into the SQL string yourself.
Putting $variables into your prepared statement string won't make them sanitized. They need to be using the named parameters (`WHERE name LIKE '%:searchterm%'`) or positional parameters (`WHERE name LIKE '%?%'`).
You should **validate** user input, but you don't want to sanitize it if you are passing it into a PDO prepared statement. For instance, if you're expecting an e-mail address, use filter_var() to make sure it is one. But don't use mysql_real_escape_string() on something you're passing as a parameter to PDO, because you\'ll end up with backslashes in your data.
yup, guess I got confused between sanitize and validate. 
What is the reason to hide it in private prop if it's already available from global scope?
I believe the most helpful part about a prepare statement is that they only allow one statement to pass through. A lot of sql injections include a "1=1; &lt; malicious sql here&gt; --" method. A prepared statement will prevent the malicious part from coming through. Not a definitive answer just meant to be a contribution to the discussion....
Have you seen how Zend Framework makes use of plugins and helpers? These are essentially traits (with more cruft) and as phpnode says below, Yii's behavior functionality is similar. 
What difference does that make?
Press Ctrl+U to check the html source that the page outputs. If you try echo $random; while $random has not been assigned a value, PHP should give an error which should show up on your page. If the error doesn't show, then error_reporting may be switched off.
Check out the lynda.com PHP Beyond the basics instruction videos. 
Lorna Jane did a series for Think Vitamin: http://www.lornajane.net/resource/object-oriented-php-articles
[Check out this one, perhaps?](http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/) I find that Nettuts+ usually have pretty decent tutorials.
You can easily DOS a server by repeatedly passing in a string with a lot of wildcards.
You are confusing "*prepared statements*" with "*bound parameters*" here. Also the security aspect would be just a by-product actually.
Check out [SourceMaking](http://sourcemaking.com/). Not aimed at any programming language, but does show PHP examples in some places. 
Just to add, you can also pass the parameters in the execute call: SELECT * FROM bla WHERE foo=? ... $statement-&gt;execute( array("bar") ) OR SELECT * FROM bla WHERE foo=:bacon . . . $statement-&gt;execute( array('bacon' =&gt; 'bar') ); 
phpacademy's youtube channel did it for me when I want to learn exactly the same thing. The videos numbered around 190-200 are all on OOP. good luck
FYI, if you want to start making use of the OO features in PHP5, and are going cakePHP, then be sure to not pick the 1.x branch since they have chosen not to move beyond PHP 5.2, and stay compatible with PHP4 (which as you should know, has been deprecated for a while now). Their site says there's a RC version of 2.0 out though, which I assume will be sporting all the OO goodness from 5.3 and beyond. Frankly, I personally wouldn't go for cakePHP at all, especially because of your previous experience with CI, a framework like kohana seems more logical. But what do I know, it's a free world, and I don't want to start any framework wars. -edit- Also, if you want to step up your game, and haven't already done so I would advise you to get into the community; On freenode there's #phpc, and just about everywhere in the world there's a PHP user groups that get together semi-regular. Also of course conferences if you can spare the expense, zendcon/tek for US, PHPNW/PHPlondon in the UK. DPC in NL, phpbenelux conference in belgium, IPC in germany, etc...
This book helped me a lot: http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804
Thanks for the info. I'm going Cake cause of a new job opportunity, they're using it there. After 4 years of only CI dev it's time for something new.
I had many "aha" moments while reading this book. Excellent resource.
Ah in that case choosing cakePHP makes a lot of sense :P Just as some more ramblings, Remember that even though a lot of OO guides will focus on simple class structures. In most frameworks you are already working within a pre-existing class structure based on MVC. Be sure to leverage that and not work independently alongside it. What I mean by that is to stay within the separation of Model View and Controller, and not create all inclusive classes next to it, if you do, you would end up with a mixed bag where sometimes things are split between MVC and sometimes a single class or structure of classes will do everything. Which creates confusing code to work with. Also very important is to make it a second nature to refactor your code often. After you've created some new functionality and have verified that it works; Refactor it. Just go over each line of code and ask yourself if it is simple enough to understand, if you see methods with more then 15 lines of code, take a good look and ask yourself if you couldn't split that up into smaller methods that call each other. Do note, I have nothing AGAINST methods that are 15 lines or code, or even 30 lines of code, because sometimes that just makes more sense. But it should be a conscious decision. It's certainly possible to become overzealous in refactoring and create a method spaghetti monster where it becomes unclear what is going on. This will not only create easier to understand code, but later when inevitably the spec changes and functionality has to be rewritten or expanded, you will find that it is easier to do because you don't have to change a 50-80 line monster method that does everything, but you can just create a wrapper class that changes one or two small methods. While refactoring it at THAT TIME is of course possible, it will often take more time because you will have to refamiliarise yourself with the code. 
I think it's a problem with PHPers who have started with PHP as their first language and built up from there without the background and strict requirements of another OO language. Aye, your way is better IMO.
They are **not** traits as implemented. They are mixins. Yet another case of PHP ignoring industry naming conventions and going with their own. A Mixin is a set of functionality with state that can be multiply inherited into a class. A Trait is a Mixin without state. So all Traits are Mixins, but most Mixins are not Traits. What PHP has implemented has state, and therefore is a Mixin. The original RFC disavowed state, so it was for Traits. But somewhere between the RFC and implementation state crept in. So it's not actually a Trait, even though that's the keyword that it uses. See the RFC: https://wiki.php.net/rfc/horizontalreuse Note that it says traits should be stateless. Seriously, why can't we use consistent terminology??? And for the record, [I am hesitent about the *abuses* that will be done with traits](http://blog.ircmaxell.com/2011/07/are-traits-new-eval.html)...
I had a general idea of how to do OO programming, but this really helped me finally get it. It's been a few years since I've read it though, but at the time I felt like it took my php usage to a higher level.
One difference is that traits are a strictly compile-time construct (well, parse time, but not runtime). Basically, using a trait inside of a class makes that functionality as if it was hard-coded into that class (because that's what the compiler does, at least in principle). So there's no runtime component. To the engine, it looks just like any other class. With multiple inheritance, you have all sorts of runtime issues, like resolving of ancestor methods and the rules involved there. With multiple inheritance, how to do resolve parent::method() when that method exists on 2 parents? (sure it can be done, but it needs to happen at runtime, which has some interesting quirks). With traits, that problem no longer exists since there is only one inhertiance tree. Any class that implements a trait will look just like a class without a trait (but with the same functionality) at runtime. This is why traits are not typeable, there is no difference between using a trait and copying and pasting into the class (to the runtime anyway). So you get the benefits of multiple-inheritance (horizontal reuse) without the difficulties (hard to understand ancestor structures, difficulty in resolving parental calls, etc). 
PDO adds quotations, so you need to put the `%`s around the value for `bindValue`/`bindParam`.
I would actually follow Java's OOP tutorial: http://download.oracle.com/javase/tutorial/java/index.html A) If you don't know Java, well it's not a terrible thing to learn. There's lots of stuff written in Java, and it's multi-platform. B) It's got pretty solid OOP practices, where PHP by default doesn't. PHP, IMO, allows you to stray from best practices way easier than you'd want to when learning what to do. C) I found that tutorial clear and concise, and well explained. And you know that your not picking up any bad practices from someone accidentally.
CakePHP 2.0 actually decided to support PHP 5.2... might start to hurt them, not sure. But then again, a LOT of hosts still only run 5.2. They might support 5.3 later... maybe. See http://www.slideshare.net/predominant/cakephp-20-itll-rock-your-world for info.
I like the idea of throwing exceptions that aren't the generic \Exception. It's especially nice when handling multiple different types of exceptions, or when unit testing; you can do stuff in PHPUnit like: /** * * @expectedException InvalidArgumentException */ to make sure your exception is thrown if you try to do something naughty ..but I have a hard time understanding when to use different types of exceptions in the real world. It seems like these exceptions make a lot more sense when you're dealing with lower level languages.. InvalidArgumentException is very common.. but like, when am I going to use an OverflowException or DomainException in PHP? You just don't have those types of problems every day in a higher level language. I know I could define my own subset of exceptions, but I don't feel as though I'm at the point of needing that for most of the medium-sized projects I work on every day.
I commonly just make my own type of exception (myException, or something similar). This way you don't need to classify into 20 types of sub-exceptions. You can simply define the type of exception in your class, and even create a default execution filter to handle the different types of exceptions to return better messages.
No. PHP is a "hyper-text **pre**processor" meaning that when the client requests a PHP document, the server runs it through a PHP parser that executes the directives and then either echos/prints the output or you can just embed PHP inside HTML code and that HTML code is treated as output and is flushed to the client. What that means is that you should never see PHP code on the client side as it is never sent. It gets evaluated and then only the output (if any) is sent to the client. That being said, you want to minimize access to source files with passwords in them but we're talking access to the server itself as opposed to access to web resources served up by apache or whatever web server you're using. A lot of what I just said is probably not worded technically correct and really only pertains to your specific scenario but I hope that answers your question. Any other PHPers feel free to correct anything I've said where needed.
Not unless someone had direct access to the file itself (like via FTP) or your server not being conf'd right and downloads the PHP file instead of displaying it to the user on the web. Other than that, it should be fine. The end-user can not see the PHP. Just try it :)... create a simple file called dbInfo.php &lt;?php $dbHost = 'localhost'; $dbUser = 'SomeUser'; $dbPass = 'SomePass'; $dbName = 'Database'; ?&gt; If you go to as example, www.your-server.com/dbInfo.php... you should see a blank page, no PHP will be shown if your server is configured right.
As long as the server that is hosting the page has PHP installed, the page has the .php extension and the syntax is correct, you should have no problems. 
It's **NEVER** a good idea to have database passwords stored under the web root. Require() those database connection values from a file that is above the web root. One messed up config value in apache and you are dumping your raw php code for the world to see. You'd be surprised how often that has happened.
All the settings for WordPress itself are in built without requiring extra code. Have you turned them on? Also did you create an .htaccess file?
Is this where the "includes" function comes in? How would i reference a php file that is not in the webroot?
Oh, sorry, I wrote my post as soon as I'd woken up and it doesn't seem very clear. This isn't for WordPress, I want to write my own blog script that utilises a similar permalink method.
gotcha, thanks!
However, should your server have a hiccup, it will feed that out as plain text. Never store that kind of stuff under a web accessible folder. For example, most host provides a webroot and a home directory (I'll use cPanel as an example) You achieve the same thing by creating a structure like this (placing your code in a file called dbConnect.php in the root directory): home/username |- dbConnect.php |- public_html |- dbInfo.php Then if you use this code in dbInfo.php &lt;?php require_once('../dbConnect.php'); ?&gt; If the server barfs and starts feeding php as plaintext (it happens) the most that gets exposed is the name of your connection file. This happened to facebook in 2007, for almost 4 hours their servers were feeding index.php as plain text.
The basic idea is to have a php script that accepts the date and slug as input, and matches the parameters to a unique 'post'. You could use mod_rewrite with a simple script to match the script parameters. You could also use an MVC framework to define a route to a controller action. I've made a blog using ZF before, and I had a PageController with multiple routes eg /page/:year/:month/:day/:slug /:slug/page 
Say you have a file, "database.php," that is in your web root. You then have a folder called "includes" with a file named "dbinfo.php" in it. In your database.php file you could include it in a few ways include('includes/dbinfo.php'); include_once('includes/dbinfo.php'); require('includes/dbinfo.php'); require_once('includes/dbinfo.php'); Include will attempt to include the file, and pop out a warning + return false if it isn't successful. Include_once has the same behavior, except it will not give a fatal error for including the same file twice (assuming you are declaring functions in that file) because, as the _once implies, it's including it exactly once. Require and require_once act almost exactly the same, with the big difference that instead of issuing a warning if the file fails to include, it will halt the script completely. Edit: Also, when you are including things within PHP scripts, it is in terms of the filesystem. So if you're doing this from, say, /var/www/database.php, you could use: include('../includes/dbinfo.php'); To access /var/includes/dbinfo.php
Wrong - servers have problems occasionally, one misconfiguration and your PHP gets served as plain text. *NEVER* store credentials in a folder accessible from web root.
Okay, so before I made this post I didn't know they were called "slug URLs" (how, I don't know.) but my flatmate corrected me and pointed me to this [post](http://cubiq.org/the-perfect-php-clean-url-generator) on making a clean URL. I guess my next question is in regards to storing the blog posts. I have a simple database design in 3rd normal form, each entity has it's own table, there are umpteen join tables. For each new blog post, shall I just have a "slug" field in the table to store the URL, as well as a "title" field? (This seems to make sense to me, but I want to get this script right the first time) Thanks for your help 
Oh i see. Put a column in the table for posts called 'uri' or something like that and put your desired uri here for example /example-post then in your .htaccess put this &lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php?/$1 [L] &lt;/IfModule&gt; index.php should be the file that deals with the blog code. Try going to a random uri that doesn't exist such as www.yoursite.com/blah-blah and it should redirect to your blog without showing a 404 Then select a post from your blog table based on the $_SERVER['REQUEST_URI'] variable. Something like this $SQL="select * from posts where uri=". mysql_real_escape_string ($_SERVER['REQUEST_URI']); Before you go live you should escape the $_SERVER['REQUEST_URI'] variable or you'll open yourself up to SQL injections etc. Sidenote: this is the reason people choose an off the shelf solution like Wordpress because they've thought of all the hard stuff for you.
Yes, you will need a slug as well as a title to avoid collision. You may also want to mark the slug field as a unique key in the db schema. The post you linked to looks like a good slug generator method. One last tip is that you'll basically need _something_ in the url to denote which script/action it is for eg 'post' or 'page' .. Procedural CMS' like WordPress are able to have just the slug in the url, but it's not as easy with a routable framework like most of the MVC frameworks, or even drupal.
Thanks! I was also reading about securing these php files, what kind of user permissions should I be using on them? 
Permissions? [Tight. Like a man's anus.](http://i.imgur.com/gUyNS.jpg) SFW Not loose like a wizard's sleeve.
I got borked like this once. *once*
The subclasses all encompass very generic types of exceptions. If you don't understand them by just their names then what you probably need is to take a basic programming course, as that would basically be the explanation you're asking for. 
This is not an ideal solution, since using server[request_uri] will pass in a string that can have multiple route parameters and slashes. The goal is to have a single field specified with no slashes ie the 'slug'. This solution would definitely have conflicts sooner or later.
It's not obvious, but, using standard debugging techniques, you could dump variables to a log file, and go from there eg function log_me($str) { $logStr = time().': '. $str . "\n"; $fullPath = '../log.txt'; $fh = fopen($fullPath, 'a'); fwrite($fh, $str); fclose($fh); } 
Jani Hartikainen wrote a blog post about this a few months ago. I think he did a pretty decent job of describing them; it is certainly enough information to use them more often in your own code: http://codeutopia.net/blog/2011/05/06/how-to-use-built-in-spl-exception-classes-for-better-error-handling/
While it's nice that you provided some materials in your post, the OP specifically stated he was looking for PHP5 OO materials and that he is currently employed as a PHP dev. I cannot possibly imagine he's going to switch to Java any time soon.
Can you send a sample of the csv? A small one, you can change the data to dummy values (except for the troublesome ones). You are using a very basic parsing strategy, and depending on the format of the csv you are gonna get bad results. * You are reading in chunks of 4096, fgets stops at linebreaks but if you have a line with more than that, you'll have missing data. * You're separating the columns with an explode ',' but you could have ',' within the column and some editors export the data with "" Finally, double check the encoding. If the file's in UTF8 the data might truncated if the 4096 limit is reached. And I've always found Windows to be pretty unreliable when it comes to character encoding. More info?
I'm just having a hard time telling the big difference between traits and abstract classes...
You could replace the last 3 lines with file_put_contents($fullPath, $str, FILE_APPEND); Also, I think you meant to write $logStr to the file instead of $str.
Not a bad link, but it doesn't agree with the official docs on the difference between [OutOfBoundsException](http://ca.php.net/manual/en/class.outofboundsexception.php) and [OutOfRangeException](http://ca.php.net/manual/en/class.outofrangeexception.php).
I wasn't suggesting he switch to Java. I was suggesting that learning Java's OOP is a good way to learn OOP in general, and it's generally not too hard to find out how x (php in this case) language implements it once you know all the general concepts.
If the OP is already familiar with OO then by all means start looking at some PHP specific resources. However, many of the PHP resources I found, seemed to be lacking when it came to explaining the basics of the OO approach. It wasn't until I took a Java class that the whole OO thing started to click. That being said, to each their own.
Oh, okay :) thank you. I'm using my own lightweight framework, just trying to get a lot of experience in before my next year of University. So, I've decided to go with a 'slug' field in my table, that is unique, in order to store the URL. What's a good solution to this problem, person A posts a topic on XX/YY/ZZZZ, and person B also posts a topic on that same day, both with names that get sanitised to the same thing. (This could technically happen, however rare the circumstance, because I'm allowing several authors per "blog" in my system) I assume a simple solution is to just append "-1..n" to the slug if one already exists in the table, correct?
Been a month. No remorse, you doucheclown.
I gotcha. It seemed to me he was saying he was aware of OO techniques but just not in PHP.
Just to add to the existing discussion: If you use a [front controller](http://en.wikipedia.org/wiki/Front_Controller_pattern), it's pretty easy to store your .php files wherever you want. Since the controller handles all requests, your web tree can look something like this: /www/example.com/htdocs/index.php /www/example.com/app/Controller.php `htdocs/index.php` can be the *only* thing inside htdocs (the web server's document root), and it simply exists to load the contents of `app/Controller.php` via `include`.
sounds good. yes, appending a simple value to the slug would work fine. It might be ideal to generate the slug automatically, and allow the author to edit it. A 'row exists' validator would help finish the required functionality also. Btw, ZF has a nice validator api that's already been battle-tested. The nice thing about ZF is you can use it as a 3rd party library in addition to your own framework, or you can build an app with it.
if you preprocess with html tidy, does it screw it up too much? if not, consider going that route.
Though it doesn't directly answer your question, you can use the following three functions to deal with CSV without attempting to write your own parser: [fgetcsv](http://au2.php.net/manual/en/function.fgetcsv.php) [fputcsv](http://au2.php.net/manual/en/function.fputcsv.php) [str_getcsv](http://au2.php.net/manual/en/function.str-getcsv.php)
Utf8
It's simple, you cant do this: abstract class blah { public function herp() { } } abstract class blarrrg { public function derp() { } } class arrrrrrrrrrrrrggggggggggggg extends blah, blarrrg { public function __construct() { $this-&gt;herp(); $this-&gt;derp(); } } because you can't inherit multiple classes. But with traits you could do this: trait blah { public function herp() { } } trait blarrrg { public function derp() { } } class arrrrrrrrrrrrrggggggggggggg { use blah; use blarrg; public function __construct() { $this-&gt;herp(); $this-&gt;derp(); } } 
It gives some very concrete examples; none of that "a car object has 4 wheel objects". Who the fuck codes a car?
book2.cakephp.org/en This is the best place to learn about cake. (this is the book for cake 2)
I'm almost certain it's a UTF-8 issue, and PHP's poor handling of it. One or more of the functions used is probably the culprit. If you give an example line from the csv file, we may be able to help.
Of course! Some [google fu](http://www.google.co.uk/search?hl=cy&amp;q=inurl%3Adb+filetype%3Ainc+"&lt;%3Fphp") can get you all kinds of things. Here are a few files I found, I don't know if they're production or not but you can see what I mean. [http://dcmp.bc.edu/symposia/db.inc](http://dcmp.bc.edu/symposia/db.inc) [http://www.ezsitebuilder.com/php/db.inc](http://www.ezsitebuilder.com/php/db.inc) [http://transrail-bch.by/test/pages/ru/db.inc](http://transrail-bch.by/test/pages/ru/db.inc) 
Happened to tumblr aswell, if I remember correctly, because a developer forgot to open the php tag properly. Their index.php was a mess, filled with load-balancing routines and API keys.
I added a sample of the CSV. Thanks. 
I added a CSV sample
I added the function addDataset which can be used manually in the system besides of importing CSV's and it works fine with accents which is why i doubt it is inviolved. I added it anyway. Thanks. 
Check your database connection is using UTF8 (like SET NAMES UTF8) Also check your database tables are in UTF8 because you can potentially open the connection in UTF8 but if the table is the default (latin sweden for mysql I believe) then it will mess up everything. Also you can force PHP to use UTF8 on all internal string functions with mb_internal_encoding("UTF-8"); Good luck.
Thanks. Pastebin is good for large chunks too.
It seems like he's right... when reading both of those descriptions then his blog, I came to the same conclusion he did. What is the difference between those two?
I've had a look and the first item of your array is passed to the $name variable, which is then passed to addDataSet which just writes it to the DB. If you're correct that addDataSet handles UTF-8 correctly, then I'm unsure of what's causing the problem. Ensure that your DB is set up to accept UTF-8, and that the files themselves have been encoded as UTF-8 without the BOM. Apart from that I'm unsure how to help. You could try writing $name to a debug script (or plain `echo`ing out) to see if that may help. EDIT: also, [what he said](http://www.reddit.com/r/PHP/comments/k5lw8/this_function_is_cutting_words_from_the_accent/c2huial).
This is good, many thanks! 
Hm... id I do something wrong here to get downvotes?
I have charted this out and yeah.... that's what I am going to do. Many thanks!
Thanks. Are you saying you managed to solve it? As i said this is in wordpress so the code of addDataset modified looks like in a sample line of insertion: $wpdb-&gt;query("SET NAMES 'utf8'"); $wpdb-&gt;query( $wpdb-&gt;prepare( "INSERT INTO {$wpdb-&gt;projectmanager_dataset} (name, cat_ids, project_id, user_id) VALUES ('%s', '%s', '%d', '%d')", $name, maybe_serialize($cat_ids), $project_id, $user_id ) ); Is that how i am supposed to use it? I guess not, because it isn't working yet. 
Abstract classes provide the ability to define abstraction type and functionality. It could be simulated using *both* an interface and a trait. It's non-instantiable, so it's only for defining common functionality. There are two fundamental concepts at play. One is typing by contract (interfaces), and the other is code-reuse (traits). Both can be multiply inherited (so a single class can implement several contracts and at the same time pull in code from many sources. By decoupling them, you're making the inheritance tree decoupled from the functionality tree. So inheritance is left for what it was actually designed for (typing) and not needed for contracts and code reuse... Abstract classes combine the functionality offered both traits and interfaces into a single-inheritance shortcut. But it also combines and tightly couples their uses (providing implementation decoupled from type, and vise versa). So you wind up with a tightly coupled shortcut without any significant gain short of a few typed characters...
Thank you! I'll look in to that. One final question to you if I may please. I seem to be doing an awful lot of error catching with MySQL functions. I've created a stored procedure for every database query thus far, (generalising as much as possible). How much error catching is necessary? Is it best practice to always use "or handle_errors_here" after each mysqli function? Or should I only worry about it with mysqli_query? Thanks.
Wait. Maybe it's not neccesary anymore. I seem to have fixed it checking the encoding of the CSV file. I may not have been using UTF-8
There is a magic __isset() as well.
You do realize that this record is gonna break your import, right? "Guadalajara, Jal." You're exploding (separating the values and dumping them on the array) using ',' and that record has it too. So bascially you have 2 problems: 1) Encoding 2) The CSV parsing For the encoding make sure you're using utf8 everywhere, in the mysql table, setting on the mysql connection, everywhere. You can't try to force feed the set names using wpdb-&gt;query (it's only making inserts) so make sure you get into mysql and make sure you're using utf8 on the connection as well. You can do it the dirrrrty way and try to pass the input through utf8_encode() or utf8_decode and see if any of those work. For the csv import it's either using regexps to import it or fetch a nice library.
Yup. Usually happens when you try a lot of things. Then you can't know if it was just that last thing or that last thing combined with the other thing you tried before but wasn't necessary to change back because it was good anyway. 
Note to those attempting to install it. When you log in for the first time, you'll see the chat output on the bottom and the command line on the top of the page. Commands all begin with a forward slash (/) and everything else is sent to the chat as a message. Every part of the site except the command line is shown in an aspect. Below the command line is a button that, when clicked, reveals a list of aspect sets. These are groups of aspects made visible for you. Although the initial aspect sets are plain: null means no aspects on, chat means just the chat output (/chat) and who is on (/who), and content means only the content management aspects. Also, for each aspect there is a command that will make it visible, and two ways of minimizing. Clicking the x will hide it completely, and clicking the bar along the top will minimize it to the bar only. Aspects behave much like 'windows' do. Users, aspects, and commands are all sorted into access levels. Documents are organized in a tree structure with each node being able to behave like a document or directory. (ie: Each page can contain content or sub-pages or both). Some documents on the site (those under Code level) contain actual code that is used to run the site. This means that admins have the ability to modify its behavior by editing those documents. Any user that registers from the front page is set to access level 4 (the lowest). This means they can't access some documents, aspects, and commands. Truly useful is the simcom javascript function, which can be used to replace command-line interface actions with a user mouse-clicking on links. For example setting an onClick to simcom('hi') will result in a user sending 'hi' to the chat as if they had typed it into the command line, when they click on that link. Similarly, a simcom('/chat') will hide the chat aspect for the user who clicked on it. Bots have a little place in the CMS to keep their modes (or *states*) and commands. So adding a command is as easy as navigating to Code-&gt;Bots-&gt;Cortana-&gt;default then adding a document under there, setting the title to the command keyword and the content of the document to the code that gets evaluated when the command is triggered. Each bot can focus on one user at a time and must be activated to respond. If a bot state contains a command with keyword 'override' the bot will execute it while active regardless of the content of the focus user's message.
The web server worker may not have write permissions on the db file. http://stackoverflow.com/questions/4477051/minimum-permissions-needed-to-allow-php-pdo-apache-access-to-sqlite-database-in http://stackoverflow.com/questions/2039218/why-can-i-use-select-but-not-insert-on-a-sqlite-database-in-php
I would say it is pretty horrible. - use of global variables where they have no place - mixing the HTML with JS and CSS in single file - attaching JS events in html tags - doing calculations in constructor - too many responsibilities in each class - sql injections - echo'ing/print'ing html - using wildcard in SQL queries even when you need a single column - high cyclomatic complexity for methods , and they are looong - huge amoung of parameters in each constructor - SQL queries mixing with logic in almost every class etc. I would recommend to remove it. AND YOU USE **eval()**.
Ouch, thanks, yeah programming is hard for me! Treat this like some Neanderthal was unfrozen and made a website. A curiousity! Can you point me to the SQL injections?
I think I have already addressed this... ls at least shows that I just gave the database file a blanket rw for all users. Is there a way that I can check this in PHP to make sure that it is seeing the same permissions that I am seeing when I investigate from the command line?
Almost every SQL line in your code. While you are using `prepare()` method , most of them ain't used properly. You really should read something about prepared statements. Because you are doing it WRONG !
Make sure that the httpd can write to the DIRECTORY and not only the file. *edit: also, not sure about SQLite but that syntax looks wrong - shouldn't it be DELETE FROM `tablename` ( no * ), or just TRUNCATE `tablename`
Can you pick one that is incorrect and show me how to write it properly? [Here](http://php.net/manual/en/pdo.prepared-statements.php) is what I'm going by.. &gt; Example #3 Fetching data using prepared statements &gt; This example fetches data based on a key value supplied by a form. The user input is automatically quoted, so there is no risk of a SQL injection attack. &lt;?php $stmt = $dbh-&gt;prepare("SELECT * FROM REGISTRY where name = ?"); if ($stmt-&gt;execute(array($_GET['name']))) { while ($row = $stmt-&gt;fetch()) { print_r($row); } } ?&gt; Some of my SQL statements may not be of that form, but that is where they will all end up once I finish housekeeping the ugly code parts. Also, there are some places where I'm confident that the public won't have access. ie: Within the classes, I'm not defending against SQL injections because they are defended by the login system /user access system. 
Upvotes for finding the obvious answer to my problem that I didn't know about. Thanks a ton. Also... all my files (php, python and database) were all in the same folder. Can you point me to some reading or an explanation as to why I had to give write permissions on the folder as well?
I'm not much of a SQLite user, so can't help you there but I've had that problem in the past ;) My guess would be that SQLite creates some temp files while performing operations on the DB (maybe while you're working on transactions it uses the temp until you commit?). *edit: yup, [that looks to be the reason for it](http://www.sqlite.org/lockingv3.html) - SQLite is creating a rollback jurnal (file with the name of the DB with -jurnal added)
This is plain stupid, if `$id = "1' OR '1'='1"` the `$sql` will be equal something like `"SELECT * FROM chats WHERE id='1' OR '1'='1"` so none of other methods will do anything to prevent this. $sql = "SELECT * FROM chats WHERE id='$id'"; $sth = $dbh-&gt;prepare($sql); $result = $sth-&gt;execute(array($id)); https://github.com/ambiversive/asg-core/blob/master/classes/core/chat.php#L23 .. and there are multiple similar lines
Hmm yes that doesn't make sense. That is a typo. I seem to be under the impression that sometimes you don't have to defend against SQL injections because you trust the origin of the variable. Is this false? I think you might be judging harshly the appearances of the code and failing to see the truly useful features and functionality. If anything it's amazing it does as many of the things it does correctly with such sub-par programming.
Yes. You must *always* defend against SQL injection.
Hm, it's tough to explain compile-time vs. runtime in the context of PHP, since it's not really a compiled language. It has absolutely nothing to do with numeric vs. string indexes though. As a very rough guide for this particular case, an OutOfBoundsException would mean something like "This key doesn't exist right now. Did you forget to initialize something?", while OutOfRangeException would mean something more like "This key doesn't even make sense! It could never do anything valid under any conditions.". Now that I think of it, I'm not sure when it'd make sense to generate a compile-time error from PHP code. Maybe a module could throw an OutOfRangeException that actual PHP code could catch.
&gt;because you can't inherit multiple classes. There's my beef right there. If you could inherit multiple classes, problem solved. :P
 /classes/core/user.php lines 98 + 103 $user_id = $this-&gt;id; $colsql = "select column_name from information_schema.columns where table_name='$pref_table' AND table_schema='improvis_simp'"; /classes/core/document.php lines 17 + 20, 35 + 44 $id = $this-&gt;id; $sql = "SELECT * FROM $table WHERE id='$id'"; lines 35 + 44 function outputSelectList($select_name, $access){ $sql = "SELECT * FROM $table WHERE parent_id='$id'"; Don't ever assume that it's safe database input just because it's a class attribute or function argument (especially the latter). One day you'll write new code using those classes and forget which methods escape database input themselves and which don't. Escape *everything*, no matter what, and at the last possible moment before sending it to the database. Edit: Oops, little tired right now and messed up the third example. I meant Document::initialize() not Document::outputSelect()!
The problem is you're not using prepared statements properly. In a prepared statement, you use a placeholder, not a variable. So your query looks something like: // NOTE: the '?' is the placeholder! $stmt = $dbh-&gt;prepare('SELECT * FROM mytable WHERE mycolumn = ?"; // Then execute it, adding in variables in order. One per placeholder. $stmt-&gt;exec(array($my_value)); so, to rewrite one of your sections, you do this: $sql = "SELECT * FROM chats WHERE id='$id'"; $sth = $dbh-&gt;prepare($sql); $result = $sth-&gt;execute(array($id)); when it should be this: $sql = "SELECT * FROM chats WHERE id=?"; $sth = $dbh-&gt;prepare($sql); $result = $sth-&gt;execute(array($id)); 
Yes, thank you. I did that in a few places by mistake, not all. 
No worries. I just wanted to ensure that you knew that using prepared statements was in fact the right thing to do, but the example I saw was a little flawed. There are some edge cases where placeholders do not work, and you have to be more careful. For example, when you have a LIMIT clause you can't use placeholders in the number(s) that are used by LIMIT, but you still may need to include user input. In those cases you have to be especially careful to validate the input. You might find [this page](http://wiki.hashphp.org/Validation) useful as a primer for basic validation and SQL injection.
Thanks, reading that doc now.
created_by needs to be ` created_by `, also put $ticketUser in single quotes **edit:** the ` ticks denote formatting data for reddit so they don't show up, but the created_by column name needs to be surrounded by them, or at least should be
I'd just like to point out that COOKIES are still user supplied data. Please learn about [sql injections](http://wiki.hashphp.org/Validation).
I'm aware. But thank you for the information!
This worked wonderfully. Thank you! Figured it was probably something simple, but you saved me from beating the shit out of my desk.
single quotes around $ticketUser. You're generally supposed to wrap your table and column names with ticks (`) but that won't break it, because you can leave them off. The fact that you can leave them off is what's breaking your query. It sees a word, not wrapped in ticks and it thinks it's supposed to be a column.
I was planning on taking the test next month at ZendCon. I've only started learning PHP in March of this year, but I took a practice exam and got about half of it right. @mgkimsal, you should totally have a Zend subreddit to prepare people for the exam, if you fancy the idea. I know I'd use it :) Thanks for all the info, this thread really helps!
it's also editable. You can edit your own cookies, put someone else's username in there, and get whatever info that is about their ticket. Consider storing a hashed version of their username and password, and query based on that.
Check out the correct way to do this, [Reflection](http://php.net/reflection). $class = new ReflectionClass($someclassnameOrObject); $methods = $class-&gt;getMethods(); The tokenizer extension is pretty cool — there's just a better way to do *this*.
In addition to what has already been said, please consider using PDO as opposed to the mysql functions. It's as simple as: $myPDO = new PDO('mysql:host=localhost;dbname=mydbname','username,'password'); $res = $myPDO-&gt;query("SELECT * FROM mytable WHERE poopy='$farty'"); foreach ($res as $row) print_r($row) Plus if you ever switch to something not MySQL, it's a painless transition! Edit: And as others below have pointed out, always always always make sure you're doing something to filter for SQL injections, whether it be your own custom function or a built-in one. Do not trust user input, even if it should always be from someone who doesn't want to break the system. All it takes is one compromised password or account or injected query and it's good bye database.
You really should read [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) book and watch the the related videos : - [Clean Code I: Arguments](http://vimeo.com/13439458) - [Clean Code III: Functions](http://vimeo.com/13702091)
this is the best advice so far, really. upboat
very welcome sir! glad to be of help. That's how it goes somtimes, I still make mistakes like this sometimes after ~6 years of writing PHP / mysql :)
Pretty harsh, but i kinda have to agree with this guy
Technically the ` aren't required, you only use them if you happened to give a column a reserved name or included spaces, dashes, etc.
Like the advice (rule?) says: never trust user input.
I agree, it's very nice know what you'll be looking at.
Nice use of Twitter Bootstrap. I'm using CodeIgniter/Twitter Bootstrap for a project and it is making development a breeze. Have you tried doing dropdown menus on the nav bar though? I'm having a hard time with those for some reason.
mm, thanks I shall ponder over this and play with it.
In my experience: '$strings' must be quoted $numbers do not have to be quoted \`$anything\` can be surrounded by backticks. Also, if you are using the mysql extension, please escape any input that you get with mysql_real_ecape_string before putting it into the database. Or use PDO.
Depending on what $farty is, that code would be as vulnerable to SQL injections as the OP's. 
Not to be a negative nancy, but you're not doing it right. While PDO is awesome and can be used to make your SQL easier and much more secure, this line of code: $myPDO-&gt;query("SELECT * FROM mytable WHERE poopy='$farty'"); Is no more secure or easier to use than it's `mysql_query` counterpart. The variable `$farty` is easily attacked through SQL injection. Your better bet would be to use PDO to prepare statements.
Every time a new SQL guy comes in I have to spend a few minutes explaining to them how these mostly superfluous backticks may take a small amount of time, but they will save you hours later.
I wasn't using it as a solution to SQL injections, I was using it as a solution to portability. Familiarity with MySQL functions means that using PDO's `query` is a snap. `prepare` and `execute` take a little getting used to, and the only intent I had was to inform the OP that PDO would be a better choice since MySQL functions are (or eventually will be) deprecated anyway.
I wasn't addressing the issue of SQL injections, I was addressing the issue of MySQL functions being deprecated and portability in general.
Because most php functions are just compiled c functions with a script interpreter putting it all together. In reality it's fast enough to run Wikipedia and Facebook just fine.
It's not too often you would _need_ to use stored procedures in a php/mysql application. It's much more common to use stored procedures in the oracle/postgres world. I actually can't say I've every used stored procedures with php/mysql. I have with oracle/postgres using perl.. Anyways, as far as your error logic, you shouldn't need much more than: $result = mysqli_query($link, $query) if (mysqli_num_rows($result) &gt; 0) { .. } I've been using MVC frameworks and ORM's for the last few years, so I don't mess with that type of stuff anymore. My model logic usually looks something like: $foos = FooQuery::create()-&gt;filterByField1(123)-&gt;filterByField2('abc')-&gt;find(); if ($foos-&gt;count()) { foreach($foos as $foo) { $field3 = $foo-&gt;getField3(); $field4 = $foo-&gt;getField4(); .... } }
Good point. Just wanted to be that guy that has to pull a Mortal Kombat ["Toasty!"](http://www.youtube.com/watch?v=QFVoeKFh2Ug) about PDO prepared statements.
although this is true, I think it's always better to teach / suggest best practice first, and then let people discover short cuts/ bad habits later. Yes you are totally right though
Agreed, but the issue of SQL injection is so important we should always promote awareness of it by using parameterized queries (or escaped).
Definitely, just making sure it was understood that the purpose was just to provide an example as close as possible to the MySQL extension functions :V
http://pimple.sensiolabs.org/ is my new best friend :)
&gt; I wasn't using it as a solution to SQL injections, I was using it as a solution to portability. Chances you switch database platforms is near 0. Chances all your SQL queries will work when you switch platforms is also near 0. However, chances that SQL injection will ruin your day is very high. 
There is one condition where the tokenizer makes sense to use instead of reflection, and it's in the case where you do not want to actually run (compile, not call) the code in the class, yet still get this information. To make that clear, with Reflection, it's an actual class (or object) that you could actually run as part of your code, as opposed to a string (be it in memory, or from a file) of PHP code.
Jesus fucking christ, I didn't know that my suggesting he should use PDO would amount to me saying not to filter input. So, regardless of the probability of porting code to a different database, you still think he should be using an extension that will soon be deprecated and offers less flexibility than PDO?
 $newArr = array(); foreach ($mixedArray as $key =&gt; $subArr) { foreach ($subArr as $idx =&gt; $val) { $newArr[$idx][$key] = $val; } }
imo you're going to replace some mundane work in raw php with other mundane work in &lt;frameworkX&gt;. I've found the learning curve with symfony2 to be relatively high, and haven't gotten past it enough to know if it's really "worth it" or not. the promise looks good - it seems to be one of the few frameworks out there with a healthy plugin ecosystem. Have you looked at lithium? I'm not a user of it, but it might float your boat (or 'redbean' as another one to investigate). 
Thank you SO much! Could you tell me what to Google that explains in detail what the $var1 as $var2 =&gt; $var3 portion does? I've been using foreach loops, but that is the part I was missing.
Does this help? foreach($arr as $val)... vs foreach($arr as $key =&gt; $val)...
Depending on how that's getting built up though I'd throw in some sanity checking to watch out for weirdness like $newArr = array(); $expectedSize=-1; foreach ($mixedArray as $key =&gt; $subArr) { $currentSize=count($subArr); if($expectedSize&lt;0){ //initialize the first time thru $expectedSize=$currentSize; } if($expectedSize!=$currentSize){ throw new Exception("Inconsistent ranges attempting to be merged"); } $expectedSize=$currentSize; foreach ($subArr as $idx =&gt; $val) { $newArr[$idx][$key] = $val; } } 
http://php.net/foreach "$arr as $key =&gt; $val" is the whole purpose of foreach. If you have: $arr = array( 0 =&gt; 'val0', 1 =&gt; 'val1', 'foo' =&gt; 'bar' ); then foreach ($arr as $key =&gt; $val) { echo "$key: $val\n"; } would print 0: val0 1: val1 foo: bar It splits the key and the value for each item in the array, one by one. If the value in the array is itself another array, as it is in your case, you can do a foreach on that as well, like in my example.
I'm not sure I see what you're trying to accomplish. Even if one of the sub-arrays is smaller (or larger, or has different indexes, or..) than the others, that doesn't mean it's any less valid. It just means that the new items may have differing sets of properties. PS: ohmyfuckinggodusesomespaces.
if such is the case, the solution is to limit searches per minute
You could be right, really depends on expectations of the dataset I can only guess on. The example seemed to make it look like there should be a color size and shape for every new collection he wants. PS: ohmyfuckinggoditscalledadifferentcodingstyleandyesilikeminebetterthanyours
You posted shit code. Seriously. Your example is *terrible* and the OP would learn no lessons using it. What's the point of using API (a) or API (b) if you make the *same* mistake both times. PDO is no advantage at all if you don't use it correctly. *Filtering* is really not the recommended way to go. You should be escaping everything or using parameterized queries every time. 
sounds like you need cakephp
`foreach ($foo as $bar =&gt; $baz)` Run a `for` loop over `each` element in the array `$foo[]`, with the key for that element being put in `$bar` and the element data put in `$baz`. So for, say, a list, you go `foreach ($list as $index =&gt; $item)` and get, in the loop, an `$index` var with the index you're on (either a number or whatever index it's using) and an `$item` var with the contents of `$list[$index]`. It reminds me of the `for $foo in $bar` syntax of other languages where in the loop you get the contents (`$foo`) of `$bar[]` at whatever index the `for` is on at the time.
[Linode](http://www.linode.com/index.cfm)
I've been reading the Lithium docs for the past 3 hours since you posted this comment and so far I'm very pleased with what I'm seeing. I'm going to give this significant consideration. Thank you very much for the suggestion.
Yeah, go for some straight out functional programming. Don't need to waste tons of overhead with arrays and such. The code's a bit more, but will run faster, and have lover overhead than what you've got. &lt;?php for($page = 1; $page &lt;= 11; $page++){ echo pagination(11,$page)."\n"; } function pagination($total_pages,$current_page){ if($current_page &gt; 5){ $start=$current_page-4; } $end = $start + 8; if($end &gt; $total_pages){ $start += ($total_pages - $end); $end = $total_pages; } $r = ""; for($i = $start; $i &lt;= $end; $i++){ if($i == $current_page){ $r .= "[".str_pad("$i",2)."]"; } else { $r .= " ".str_pad("$i",2)." "; } } return $r; } output: [1 ] 2 3 4 5 6 7 8 9 1 [2 ] 3 4 5 6 7 8 9 1 2 [3 ] 4 5 6 7 8 9 1 2 3 [4 ] 5 6 7 8 9 1 2 3 4 [5 ] 6 7 8 9 2 3 4 5 [6 ] 7 8 9 10 3 4 5 6 [7 ] 8 9 10 11 3 4 5 6 7 [8 ] 9 10 11 3 4 5 6 7 8 [9 ] 10 11 3 4 5 6 7 8 9 [10] 11 3 4 5 6 7 8 9 10 [11] edit: my code OCD makes me want to clean this up (more than I have). It's still rather "dirty"...
I'm not really worried about speed. Mine runs plenty fast. I'd much rather have a few arrays than a few loops. I always avoid loops when i can.
Nice, clean code. However, I am slightly skeptical of the `words()` method. `/(\w+)/` would match "words" like 'abc_123' whereas `/([a-z+])/i` (as per Peter Norvig's implementation) would match 'abc' only.
Awesome stuff. I'll be watching this. :)
Learn something new every day
Hi, The below solution constructs a similar array structure as provided by you. &lt;?php echo "&lt;pre&gt;"; $current_page=6; $num_of_page_req = 8; $total_pages=11; echo "current page " . $current_page; $start_page=$current_page-4; $end_page=$start_page+$num_of_page_req; if( $start_page &lt;1 ){$start_page=1;$end_page=$start_page+$num_of_page_req;} if( $end_page &gt; $total_pages){$end_page=$total_pages;$start_page=$end_page - $num_of_page_req;} if( $total_pages &lt; $num_of_page_req ){$start_page=1;$end_page=$total_pages;} $page_array = range( $start_page, $end_page ); print_r( $page_array); ?&gt;
Well, there are 4 states that your pagination can be in: 1. Entire set of pages are visible 2. Need to shift your visible window forward to start at page 1 3. Need to shift your visible window backward to end at the last page 4. Window is somewhere in the middle of the pages and is fine as-is You can detect all 4 of those cases without initially generating your $page\_array range, and I think it becomes a bit more clear, in my opinion. Obviously, there is extra code in here for my outputting and setup but I think it's a bit more readable by someone not familiar with the code: $num_pages=20; //total number of pages available $view_size=4; //how many pages are visible before and after the current page $cur_page=1; //currently visible page for($cur_page=1;$cur_page&lt;=$num_pages;++$cur_page) { //check if all of the pages are going to be visible if($num_pages&lt;=($view_size*2+1)) { $pages=range(1,$view_size*2+1); } //check if the visible pages would extend past the beginning of the pages //this can actually just be combined as an OR with the first condition above, i put it here on its own for clarity elseif(($cur_page-$view_size)&lt;1) { $pages=range(1,$view_size*2+1); } //check if the visible pages would extend past the end of the pages elseif(($cur_page+$view_size)&gt;$num_pages) { $pages=range($num_pages-$view_size*2-1,$num_pages); } //otherwise, visible pages are somewhere in the middle else { $pages=range($cur_page-$view_size,$cur_page+$view_size); } foreach($pages as $page) { if($page==$cur_page) print("&lt;b&gt;$page&lt;/b&gt; "); else print("$page "); } print("&lt;br&gt;"); } Slightly more verbose, but "prettiness" of code is a subjective thing. I'd probably do a few more things for clarity, like maybe declare a variable to hold ($view\_size*2+1) to better convey what exactly that means and so you don't have to re-type it all over the place. In my opinion, writing understandable code should be the top priority if you're planning on having to look at it again in a year and figure out what the heck you were thinking at the time. edit: Also, this might just be my preference, but I usually like to put first/last page links that are always available to quickly jump to the beginning/end of the pages.
would it not solve if we place a .htaccess file in the include folder? i.e www |- testappln |- include |- .htaccess
So? If this specific piece of code gives you scaling issues (for 99.9% of all websites it won't), just move it into a custom PHP extension, written in C++. It's not that hard. I played around whit that back in 2003:ish. Or better yet, implement a complete custom CakePHP dbosource as an extension that eliminates *all* the CakePHP database overhead. If you actually need the performance, this is not a feature you need to cut.
Functional? His is more functional than yours? Perhaps you mean procedural.
I'm all for concise solutions, hopefully this one is both understandable and appealing :) . &lt;?php $page = 3; // your current page $min = 1; //inclusive $max = 11; //inclusive $range = 4; // left/right range (total of x items shown iff $min - $max &gt;= x) $lowerBound = max($page - $range, $min); $upperBound = min($page + $range, $max); $res = range($upperBound === $max ? max($max - (2 * $range), $min) : $lowerBound ,$lowerBound === $min ? min($min + (2 * $range), $max) : $upperBound); print_r($res); This approach also ensures at most ($min-$max)+1 items are shown, so it is also correct when the amount of available pages ($max) is still small. edit: Changed some values to match example 
one more way: $current_page = 5; $pages = 12; $max_links = 9; if ($current_page &lt; 5 || $pages &lt; $max_links) $start_page = 1; elseif ($current_page &gt; $pages - ($max_links/2)) $start_page = $pages - $max_links + 1; else $start_page = ceil($current_page - ($max_links/2)); for ($i=0; ($i&lt;$pages &amp;&amp; $i&lt;$max_links); $i++) { $page_num = $i + $start_page; if ($page_num == $current_page) echo "[$page_num] "; else echo "$page_num "; }
I looked into your memory problem. Quite thoroughly, actually - spent like 2 hours on it. Bad news: I got it down to 203 Mb (around 50 Mb less than your limit), but everything else I've tried did not have any effect whatsoever. And I tried a lot of things (serializing it and then reading it back, serializing it as a CSV and reading it back with 'explode(",", file_get_contents($path))', pre-allocating an array of the right size [to prevent memory fragmentation], reading every line in at once, not reading every line in at once, yeah...) Anyway, eventually, I [found the reason](http://www.pankaj-k.net/weblog/2008/03/did_you_know_that_each_integer.html): arrays in PHP are hugely wasteful when storing large amounts of data. Each entry takes up around 100 bytes to begin with, excluding any data. When reading in the 'big.txt' file, it ends up with more than 1 million array entries, so the minimum memory requirements are at least 100 Megabytes. You can test this yourself by running the following code $x = array_pad(array(), 1000000, ""); echo number_format(memory_get_peak_usage()/1024/1024, 1) . " Mb"; That's an array with empty strings, one million of em. On my machine it uses about 100.2 Mb of memory. Anyway, all that aside, my most optimal code so far is this: private function load_dict( $path ) { if( !file_exists( $path ) || !is_readable( $path ) ) throw new Exception("cannot read {$path}"); $result = array(); $file = fopen($path, 'r'); while (!feof($file)) { $words = $this-&gt;words(fgets($file)); // $words = explode(' ', trim(strtolower(fgets($file)))); // &lt;&lt; uses 25 Mb less, similar results foreach ($words as $w) { if (strlen($w = trim($w))&gt;0) { $result[] = $w; } } } fclose($file); return $result; } With the 'explode' alternative, it uses 203.8 Mb of memory at peak - almost 50 Mb below your own reported limit. If you want to bring the memory usage down to 'acceptable' levels, say around 16 or 32 Mb, you are going to have to end up with significantly less array entries, somehow. Probably needs a rethinking of the problem and a restructuring of the architecture. Good luck! And keep us posted! I would be interested to see if it's possible to bring down that memory consumption. Just send me a PM if you don't want to re-post ;-)
Here is a fairly short solution: $pages = range($current_page - 4, $current_page + 4); $correction = $pages[0] &lt; 1 ? (-$pages[0] + 1) : (end($pages) &gt; $total_pages ? - end($pages) + $total_pages : 0); $pages = array_map(function($v) use ($correction) {return $v + $correction;}, $pages); Wrapped in a function with a sample output generator: function pages($current_page, $total_pages) { $pages = range($current_page - 4, $current_page + 4); $correction = $pages[0] &lt; 1 ? (-$pages[0] + 1) : (end($pages) &gt; $total_pages ? - end($pages) + $total_pages : 0); $pages = array_map(function($v) use ($correction) {return $v + $correction;}, $pages); return $pages; } $total_pages = 11; for ($current_page = 1; $current_page &lt;= $total_pages; $current_page++ ) { echo '&lt;pre&gt;'.implode(' ', array_map( function($v) use ($current_page) { $v = str_pad($v, 2, ' ', STR_PAD_LEFT); if ($v == $current_page) { $v = "&lt;strong&gt;$v&lt;/strong&gt;"; } return $v; }, pages($current_page, $total_pages) ) )."&lt;/pre&gt;\n"; } 
If you want I can send you my pager class - it generates pages like 1 .. 5 6 7 8 ... 11
I haven't actually looked at what the code is doing proper, but it seems (at least from the examples) that the spellchecker requires the first letter of the word to be correct. If this is the case then you could split the dictionary into sub files depending on the stating letter a.txt, b.txt, and then load the correct lookup file depending on the first letter of the word being checked. That's not a great solution though, a better one would be to store the dictionary in memory such as APC or Memcache.
Okay, thanks a lot :) Was just checking. I appreciate your assistance, it's been really helpful! Have an upvote!
If you were coming straight from `mysql_query`, which would you be more familiar with and likely to try out? $res = $myPDO-&gt;query("SELECT * FROM mytable WHERE poopy='$farty'"); Or $hnd = $myPDO-&gt;prepare("SELECT * FROM mytable WHERE poopy=?"); $hnd-&gt;execute(array($farty)); $res = $hnd-&gt;fetchAll(); I wasn't posting about PDO and bullshitting with poopy and farty because it was amazing code, I was posting because that particular use is very close to the `mysql_query` syntax, and OP could do research on PDO himself (if he even bothers to try it). Yes, it's terrible code - because it's an example to show how simple it is to switch to PDO.
Or simply sanitize the wildcards out of the string rather than blindly laying your troubles at the altar of bound parameters, as so many of the cargo cult programmers here are wont to do.
Some of the answers you're getting here seem really overly-complicated. This is just off the top of my head but I'm pretty sure it works - and it's a hell of a lot more legible. $position = 6; $min = 1; $max = 11; $range = 4; $start_page = max($position - $range,$min); $end_page = min($start_page + ($range*2),$max); $start_page = max($end_page - ($range*2),$min); $page_range = range($start_page,$end_page); 
Breakthrough! I've managed to get the running time *and* the memory usage down. The memory usage is now at 14.3 Mb, down from over 200 Mb. Wtf? yes, really. Here's the code that I changed: public function __construct( $dict_path, $force=false ) { $this-&gt;alphabet = str_split( $this-&gt;alphabet ); $path_serialized = $dict_path . ".freq"; if (file_exists($path_serialized) &amp;&amp; !$force) { $this-&gt;freq = unserialize(file_get_contents($path_serialized)); return; } $words = $this-&gt;load_dict( $dict_path ); $this-&gt;freq = $this-&gt;train( $words ); if (is_writable($path_serialized)) { file_put_contents($path_serialized, serialize($this-&gt;freq)); } } Basically, I cache the results of the training. So, the first time you run this it will use &gt;200 Mb of memory, but for any subsequent requests the memory usage drops about twenty-fold. It almost feels like cheating (and it basically is), but you're welcome ;-)
I'm a zend guy, personally. Once you know how to use zf, it's awesome and you can do cool stuff really fast. That said, it takes quite awhile to really feel comfortable with it, even if you have some basic understanding of how MVC frameworks work in php. I'd say a good way of narrowing it down would be to consider only those frameworks that require &gt;= php 5.3. I am a bit frustrated with zf right now with their inability to ship zf2 within a reasonable amount of time. either way zf is a fantastic library, php 5.3 or not it's worth keeping around whether or not you're using their framework.
 foreach ($array as $key =&gt; $val) { // here, $val === $array[$key] } 
Now read what you've just said and apologise.
I'm not bothered about reddit gold, but this is based off the solution I usually use - possibly not what you want but I think it generates the nicest kind of pagination for resources with many pages. The pagination is in the form (user is visiting page 11 of 30): first | prev | 1 | 2 | 3 | ... | 10 | 11 | 12 | ... | 28 | 29 | 30 | next | last Links to the current page will be inactive and it will drop the elispsis if &lt;= 9 pages exist for the given resource. function paginate($curPage, $noPages, $urlPrefix) { $buffer = '&lt;div class="pagination"&gt;'; // Generate the 'first' button. if($curPage == 1) { $buffer .= '&lt;span class="pagination_first pagination_inactive"&gt;first&lt;/span&gt;'; } else { $buffer .= '&lt;a href="' . $urlPrefix . '" class="pagination_first"&gt;first&lt;/a&gt;'; } // Generate 'previous' button if(($curPage - 1) &lt; 1) { $buffer .= '&lt;span class="pagination_prev pagination_inactive"&gt;previous&lt;/span&gt;'; } else if(($curPage - 1) &gt; 1) { $buffer .= '&lt;a href="' . $urlPrefix . ($curPage - 1) . '/" class="pagination_prev"&gt;previous&lt;/a&gt;'; } else { $buffer .= '&lt;a href="' . $urlPrefix . '" class="pagination_prev"&gt;previous&lt;/a&gt;'; } // Generate 'next' button if(($curPage + 1) &gt; $noPages) { $buffer .= '&lt;span class="pagination_next pagination_inactive"&gt;next&lt;/span&gt;'; } else { $buffer .= '&lt;a href="' . $urlPrefix . ($curPage+1) . '/" class="pagination_next"&gt;next&lt;/a&gt;'; } // Generate 'last' button if($curPage == $noPages || $noPages == 0) { $buffer .= '&lt;span class="pagination_last pagination_inactive"&gt;last&lt;/span&gt;'; } else { $buffer .= '&lt;a href="' . $urlPrefix . $noPages . '/" class="pagination_last"&gt;last&lt;/a&gt;'; } // Generate list of numbered links $buffer .= '&lt;ul&gt;'; if($noPages &gt; 12) { // Display first 3 links $buffer .= generateNumericLinks(1, 3, $curPage, $urlPrefix); // Display middle 3 links (&amp; ellipsi contigous with first 3) if($curPage &lt;= 5) { $buffer .= generateNumericLinks(4, 6, $curPage, $urlPrefix); $buffer .= '&lt;li&gt;...&lt;/li&gt;'; } // Display the ellipsis &amp; middle 3 links with last 3 else if($curPage &gt;= $noPages - 4) { $buffer .= '&lt;li&gt;...&lt;/li&gt;'; $buffer .= generateNumericLinks($noPages - 5, $noPages - 3, $curPage, $urlPrefix); } else { $buffer .= '&lt;li&gt;...&lt;/li&gt;'; $buffer .= generateNumericLinks($curPage - 1, $curPage + 1, $curPage, $urlPrefix); $buffer .= '&lt;li&gt;...&lt;/li&gt;'; } // Display last 3 links $buffer .= generateNumericLinks($noPages - 2, $noPages, $curPage, $urlPrefix); } else if($noPages == 0) { $buffer .= '&lt;li&gt;...&lt;/li&gt;'; } else { $buffer .= generateNumericLinks(1, $noPages, $curPage, $urlPrefix); } $buffer .= '&lt;/ul&gt;'; $buffer .= '&lt;/div&gt;'; return $buffer; } function generateNumericLinks($start, $end, $curPage, $urlPrefix) { $buffer = null; for($i = $start; $i &lt;= $end; $i++) { $buffer .= '&lt;li&gt;'; if($i == $curPage) { $buffer .= '&lt;span class="pagination_current"&gt;' . $i . '&lt;/span&gt;'; } else if($i == 1) { $buffer .= '&lt;a href="' . $urlPrefix . '"&gt;' . $i . '&lt;/a&gt;'; } else { $buffer .= '&lt;a href="' . $urlPrefix . $i . '/"&gt;' . $i . '&lt;/a&gt;'; } $buffer .= '&lt;/li&gt;'; } return $buffer; }
Pick one and ignore the rest. Right now I would recommend Kohana or Fuel.
I've looked into Zend and read some of the documentation. My main concern with it beyond not being &gt;= 5.3 is that it looks like a bit of a pain to set up on shared hosting (at least, the instructions on setting it up on my web host are fairly long). It probably is something I should learn at some point, just because of how widespread it is, and I presume it wouldn't hurt to eventually be familiar with multiple frameworks.
Better than nothing but still is web accessible. Of course with proper monitoring etc, there are easy ways to catch it when it happens. I would recommend using include or require from a non-web accessible folder whenever you can. The more moving parts you add, the more likely to have something screw up and expose your code.
If you need to cycle them, the easiest thing to do is just have a column in your database "last_displayed_time", order by that and retrieve the ad that was displayed the longest time ago. Update that column to now() every time an ad gets displayed. If you're cycling them on a per-user basis, there's no way to do it without tracking the users and that pretty much means using cookies.
Is there any way other than using the database to track this? I don't think so without cookies, but I thought I'd ask. I'm using a CMS for this (Drupal) and don't want to modify the database by adding new tables for the ads if I don't have to. 
So you want to store data... without storing data? You can store the information somewhere else, but you are going to have to keep track of what ads were displayed when *somewhere*. I think the database is probably the easiest place to put that information.
Ok, if the database is the only way, I may have to do that. What about a simple .txt file on the server, could PHP modify that file, moving a link from the top line, to the bottom on every page load?
That would work, but be incredibly inefficient and prone to race conditions when two page loads need to modify the file at once. Doing it in the database takes care of all of those sorts of considerations! Trust me, it'll be the easiest way to get it done.
You may be right. Thanks for all the help. I just found out it may need to be cycled when the ad is clicked on, rather than just on page load, so I might have to research javascript onclick functions. If it is cycled on page load though, I'll create a new database table.
Whats wrong with a random advert, over a number of pages loads they should be near enough even?
I have a phone call in an hour or so where I'll get the exact details on what I need. The problem with random is that it could skip an ad and never display it. I know given enough time, it should display, but that doesn't mean it will.
I use [ApiGen](http://apigen.org/).
$20 is cheap from my perspective.
Just an aesthetic note: You should make the boxes that hold the page numbers a fixed width, because when you get into the double digits, the box sizes increase. I think this would make it more seamless.
you are awesome. i really struggled with how best to load the data in so that it wouldn't take so much memory (assuming always that i was doing something incredibly stupid). the closest thing i'd thought of was to read the big.txt file maybe 500Kb at a time, shove those words into the frequency array, and then move on to the next chunk. this would still use the same amount of resources in aggregate, i guess, but would at least reduce peak usage.
yea, i was leaning toward implementing some sort of chunking, whether it's actually splitting the dictionary file or doing it virtually during the read phase. all for the goal of reducing peak usage.
thanks! i love how self-contained the whole thing is, and i'm grateful to peter norvig for his article
I've come into contact with way too many developers that weren't aware you could edit cookies in a browser.
i've put this into my local copy, but i had to make one change to get it to work: `is_writable( dirname( $path_serialized ) ) )` instead of `is_writable( $path_serialized ) )` when the file didn't exist yet, `is_writable` was always returning false. after this, though, the subsequent memory usage is 1.5% of what it was. woo!
&gt;Plus if you ever switch to something not MySQL, it's a painless transition! I've heard of this as a "good reason" to do things, but I've never even heard of someone switching databases. And, I doubt that it would be "painless." I work in both Oracle and MySQL, and I can tell you, very few of the queries would run. You'd have to rewrite most of them. For example: mysql: SELECT * FROM table LIMIT 100 Oracle SELECT * FROM table WHERE numrow &lt;= 100 Distinct, group by, and tons of built in functions would make it not work. Also, auto increment is way different in Oracle. I have to imagine there are subtle differences across all databases that would make it not "painless" 
https://github.com/rgantt/spelling-suggester/commit/12ad3a86d85340b16a3ea4a5ca78e36622ce7343
I actually had this as an interview question. This is what I eventually came up with and was the answer he was looking for.
You could possibly look into using localStorage for modern HTML5 enabled browsers. I'm not going to detail the exact method but it will allow you to store persistent data on the client side. Whenever they visit a page with the ad system you could update the localStorage with the updated links or mark them as read or whatever you need to do with them.
"Switching to PDO" has become part of the cargo cult around here -- seem like nobody even knows why they should use it! Sometimes it's better to be using mysqli. 
This wont work: Say the current page is the last page: $position = 11; $min = 1; $max = 11; $range = 4; $start_page = max($position - $range,$min); $start_page = max( 11 - 4, 1 ); $start_page = 7; This will start the pagination at 7, when it should start at 3
A couple microseconds is not going to matter, id much rather have it more readable than shave a couple microseconds.
Well, that's a pretty good idea. Actually, now I've come to think of it, you can do the training and the loading at the same time. The only thing the training does is count how many times each word occurs. Not that hard to combine with some clever code. I've tried it, and it reduces the memory usage even further. Now at 9.6 Mb :-) That's about as small as we're going to go probably, given that the dictionary file itself is around 6.5 Mb. It is a bit slower than the one with the cached file though, because it has to do the calculation and the parsing. On the other hand, you don't need to write a temporary file. Hmm. Choices. Anyway, here's the code: public function __construct( $dict_path ) { $this-&gt;alphabet = str_split( $this-&gt;alphabet ); $this-&gt;load_dict($dict_path); } private function load_dict($path) { if( !file_exists( $path ) || !is_readable( $path ) ) throw new Exception("cannot read {$path}"); $result = array(); $file = fopen($path, 'r'); while (!feof($file)) { $words = $this-&gt;words(fgets($file)); foreach ($words as $w) { if (strlen($w = trim($w))&gt;0) { $this-&gt;freq[$w]++; } } } return $result; } For the ultimate win, you can combine the two approaches. That way, it will only use 9.6 Mb while running the first calculation, but be fast and use even less memory on each consecutive run: public function __construct( $dict_path, $force=false ) { $this-&gt;alphabet = str_split( $this-&gt;alphabet ); $path_serialized = $dict_path . ".freq"; if (file_exists($path_serialized) &amp;&amp; !$force) { $this-&gt;freq = unserialize(file_get_contents($path_serialized)); return; } $this-&gt;load_dict($dict_path); if ( is_writable( dirname( $path_serialized ) ) ) { file_put_contents($path_serialized, serialize($this-&gt;freq)); } } Anyway... off you go! [edit: bug, and saw that you already mentioned me in the commit. Thanks!]
Check out [PHPDox](https://github.com/theseer/phpdox). It's fairly new and has a lot better performance than PHPDoc
Mind you that you need to multiply $range by 2, so it'll be $start_page = max(11 - 8, 1); // 3 His code checks out (and already has my vote too, btw).
This is the best solution so far, thanks. Much better than my code that uses array_reverse =)
You missed the second assignment to $start_page: $position = 11; $min = 1; $max = 11; $range = 4; $start_page = max(11 - 4,1); // 7 $end_page = min(7 + (4*2),11); // 11 $start_page = max(11 - (4*2),1); // 3 The start page would == 3. 
Yeah it sets $start_page twice for this very reason. :) A bit counter-intuitive..?
Useful to know! Although I'm self-employed so fingers crossed I won't be going to any interviews any time soon.
I don't know who downvoted you but this solution is what i was looking for. I knew it was out there! Thanks =) -- I actually found out sync0pate's code works, his is a bit more concise
this is verrrry complicated
Are you just doing this for fun? Because if not I honestly have no idea why you even bother with something like that. You don't have to reinvent the wheel. There are frameworks which take care of all these sorts of things. Just one suggestion: [CGridView](http://www.yiiframework.com/doc/api/1.1/CGridView) in Yii
You are correct, i dont know how i missed that line when i copied it. thanks.
no, i like it. somehow it disappeared from my code when i tried it out.
So you're worried about injection attempts and think PDO's `prepare` and `execute` are a good way to avoid injection, while rejecting the notion of filtering input, but think that there are times one should be using mysqli? Are you arguing for the sake of arguing?
I've seen lots of companies switch from MySQL to PostgreSQL, or Oracle, or SQL Server, and have their applications completely crap out mainly because of the functions used to query. Yes, queries would need to be rewritten, but that's sort of a given and nearly unavoidable unless you already have different vendor-specific queries set. However, it's a matter of rewriting all querying functions plus all queries, or just all queries. One is slightly less painless than the other.
you have a github account?
I dont want to download a library for a couple lines of code. 4 lines to be exact.
i sent you your prize =)
thanks for pointing this out. i'm going to write some tests to get to the bottom of this; i struggled with the best approach for splitting words. `explode()` seemed too rudimentary, but i guess that's pretty close to what i'm actually doing.
It is certainly more complicated that most of the offered solutions, but it was written a general-purpose solution to the task of generating minimalist, semantic and user-friendly pagination with hooks for CSS styling to suit a given site's needs.
4 lines that took how much of your time already?
If you don't want to use cookies or database, the only other option I can come up with is caching the last displayed ad in memory. So, APC, memcached or xcache depending on what you have available (if any of them are available at all). This is not what these caching mechanisms are intended for though (and definitely overkill if you don't use caching for anything else).
mysqli has [prepare](http://php.net/manual/en/mysqli.prepare.php) and [execute](http://php.net/manual/en/mysqli-stmt.execute.php) functions. In fact, PDO doesn't use the native prepare/execute for MySQL and emulates them internally using quoting -- so if you want actual prepare behavior (necessary in some situations) then you're better off using mysqli. 
ZF2 will use 5.3 features, although I don't see failure to use namespaces as a huge problem right now. The bit about setting ZF up on a shared host always confused me, though. Just drop it into your library folder and set your include path. If your host doesn't support .htaccess files or mod_rewrite, you'll have problems with most any modern MVC framework.
I use vpslatch.net. The plans aren't cheap but I talked to the sales rep on the chat and he gave me a recurring %25 off
Ignore pretty much everything I've said, I'm tired and frustrated and shouldn't be talking about PHP in the first place.
Ah! no problem. Thanks very much for the prize!
I don't, actually. I'm still using SVN.. :-O. All my source code hosting is on a VPS I use for all kind of things.
Took me 3 minutes to write 6 lines of code that worked fine. I just came here thinking it would be a fun activity for people that liked to code, to help me improve it.
so if for($page = 1; $page &lt;= 11; $page++){ echo pagination(11,$page)."\n"; } function pagination($total_pages,$current_page){ if($current_page &gt; 5){ $start=$current_page-4; } $end = $start + 8; if($end &gt; $total_pages){ $start += ($total_pages - $end); $end = $total_pages; } $r = ""; for($i = $start; $i &lt;= $end; $i++){ if($i == $current_page){ $r .= "[".str_pad("$i",2)."]"; } else { $r .= " ".str_pad("$i",2)." "; } } return $r; } is faster than $start_page = max($position - $range,$min); $end_page = min($start_page + ($range*2),$max); $start_page = max($end_page - ($range*2),$min); $page_range = range($start_page,$end_page); i should use it?
this has been completed thanks =)
all that is done in my view. I just need an array of pages. &lt;div class="pagination"&gt; &lt;ul&gt; &lt;li class="prev&lt;?php if( !$vars-&gt;prev_page ): ?&gt; disabled&lt;?php endif; ?&gt;"&gt;&lt;a href="&lt;?php if( !$vars-&gt;prev_page ): ?&gt;#&lt;?php else: ?&gt;&lt;?php e( sprintf( '%s/%s/page/%s%s', URL_ROOT, $vars-&gt;controller, $vars-&gt;prev_page, $vars-&gt;controller == 'search' ? '?'.$_SERVER['QUERY_STRING'] : '' ) ) ?&gt;&lt;?php endif; ?&gt;"&gt;&amp;larr; Previous&lt;/a&gt;&lt;/li&gt; &lt;?php foreach( $vars-&gt;page_array as $page ): ?&gt; &lt;li&lt;?php if( $vars-&gt;page_number == $page ): ?&gt; class="active"&lt;?php endif; ?&gt;&gt;&lt;a href="&lt;?php e( sprintf( '%s/%s/page/%s%s', URL_ROOT, $vars-&gt;controller, $page, $vars-&gt;controller == 'search' ? '?'.$_SERVER['QUERY_STRING'] : '' ) ) ?&gt;" class="page"&gt;&lt;?php echo $page ?&gt;&lt;/a&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;li class="next&lt;?php if( !$vars-&gt;next_page ): ?&gt; disabled&lt;?php endif; ?&gt;"&gt;&lt;a href="&lt;?php if( !$vars-&gt;next_page ): ?&gt;#&lt;?php else: ?&gt;&lt;?php e( sprintf( '%s/%s/page/%s%s', URL_ROOT, $vars-&gt;controller, $vars-&gt;next_page, $vars-&gt;controller == 'search' ? '?'.$_SERVER['QUERY_STRING'] : '' ) ) ?&gt;&lt;?php endif; ?&gt;"&gt;Next &amp;rarr;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 
As I said: &gt; Are you just doing this for fun? Because if not
you could try asmallorange.com; hosting is $20 a year and if you get a domain through them, it's only an extra $10.
You'd need to specify which RDBMS you're using, but I think the answer is *no* on all of them, so it likely doesn't matter. "You just inserted it, why would I need to give it back to you?" Just select it out using the returned last_insert_id if there's something you don't have (auto-generated timestamp, etc.)
Thanks. See my update. I know how to get the id, I just was trying to avoid an additional query every time an insert or update is made.
Well then... wow. No offence, but I think the code I posted is significantly more understandable and maintainable than your view code, granted if this is throw-away code maintainability may not be your priority but it seems like a minefield for the person who has to pick up this code a couple of years down the road. When there is that much logic required to build a string surely the sane thing to do is build the string in PHP and echo it out to the browser rather than have the logic inline with your markup - particularly when the logic and markup is munged together in lines of code several screen-widths wide.
nearlyfreespeech.net, charges by storage/transfer. It's a couple pennies per month if you just want to ssh in and write php pages and so on.
Don't worry about optimization or speed. PHP is usually plenty fast, and the pagination code will never be a bottleneck. Write whatever is easiest to read and maintain. 
Yeah - what use case is there that you don't already have the data you just inserted on hand? Just out of curiosity.
http://www.w3schools.com/php/php_sessions.asp 
I'd recommend stop using defaults and instead hard-code those defaults into the code. Then you will have all the columns of the row you just created. This is what I do but I have an ORM handling all the details.
Thanks man! :) Yah, its really making life easier. I dread making new CSS layouts. I haven't tried the drop down menus yet. I'll get back to ya when I do. Was about to add one today for the Blog link in my top nav. 
Conclusion: Massive amounts of businesses are retarded.
&gt; My main concern with it beyond not being &gt;= 5.3 is that it looks like a bit of a pain to set up on shared hosting Most providers should be upgrading to 5.3 now that the php5.2 branch is officially unsupported. If you don't have it already, unfortunately you've got a shitty hosting provider :-/
So that now you have to maintain the defaults in multiple places? 
[INSERT...ON DUPLICATE KEY UPDATE](http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html) sounds like what you need.
Perhaps I phrased that poorly. &gt; My main concern with it **beyond not being &gt;= 5.3** is that it looks like a bit of a pain to set up on shared hosting I want a 5.3 framework—my personal host supports 5.3 and most of the ones I work with do in some way as well.
I don't put any defaults in the database itself -- everything is specified in the ORM. Therefore defaults in only one place.
SELECT @@IDENTITY in MSSQL will return the key of the last affected row. http://msdn.microsoft.com/en-us/library/ms187342.aspx
looks like mysql's version is: SELECT LAST_INSERT_ID(); http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_last-insert-id
I don't really know the point of querying a db if you don't know the column names, but you could do something like this: SELECT * FROM [Table] ORDER BY id desc LIMIT 1 edit: I think I may have misread your statement about the columns, but either way, that query will return the highest ID you have, which *should* be your last insert if you're auto-incrementing in a normal scenario.
Just read the database schema and cache it to grab the default values for each table.
What exactly are you trying to do? I have never yet ran into a situation where you would need to insert or update a row and then immediately return it. To answer your question, I'm not sure there is such a functionality. You'll probably just have to do a separate select, but I really am curious as to exactly what purpose you would ever need to do this for.
I just wanted to point out that paging where a database is the source can often be sped up quite a lot if you disregard the number of pages in a set entirely. What I tend to do is keep track of what position I'm in only, instead of having the database count the total number of results on every request. I'll render additional page navigation even if those pages don't exist. If for whatever reason you wind up out of range (no results), you can do a count and put them on the right page. So if you have 25 results at 5 per page, and you're clicking through the pages in order: instead of: count (25 results), select (5 results) count (25 results), select (5 results) count (25 results), select (5 results) count (25 results), select (5 results) count (25 results), select (5 results) you have: select (5 results) select (5 results) select (5 results) select (5 results) select (5 results) select (no results), count (25 results), select (5 results from last page) 
Not entirely sure about this, but it looks like you're using POST method and trying to retrieve variables through GET. Can you add another variable to "request.data" in your flash? 
Yupyup. Wrote this at 3am :P
If I'm understanding you correctly ... in MySQL, you should just have an "updated" column in each row, set to timestamp with an autoupdate. Then you can just select the last (max) row whenever you need it.
I like this one much better than mine! Sexy :)
Exactly
This is very dependent on the amount of traffic. If you write to a file too many times per second, it will be unable to write/read to it. just a thought: what about a modules of the time()? echo $link_array[time()%40];
It is accepted as good practice by 99.999% of coders that separating logic/presentation is a good idea. Yours is all mixed up. Gauranteed 99% of the people in /r/PHP would agree with me. 
Ah, understood. Anyways, just for fun in case you're curious and I happen to be really familiar with it, here's how you'd setup a project in ZF from the command line: wget http://framework.zend.com/releases/ZendFramework-1.11.10/ZendFramework-1.11.10.tar.gz tar -xzf ZendFramework-1.11.10.tar.gz alias zf=/path/to/ZendFramework-1.11.10/bin/zf.php zf create project myproj zf enable layout zf configure db-adapter "adapter=MySQLi&amp;dbname=zend&amp;username=root&amp;password=12&amp;charset=utf8" And you're done. Like I said, zend is really cool, but since it's an entire library as well as a framework, it has already taken them far too long to finish the jump from 5.2 =&gt; 5.3. From as far as I can tell, the end still isn't even in sight. At this point, they might as well hold off and wait until 5.4 comes out so they can take advantage of traits, imho. Good frameworks that aren't libraries (symphony comes to mind) have the luxury of having a vastly smaller codebase, making refactoring less than a colossal task.
something that uses default values for the row, or NOW() or perhaps there is a trigger when inserting.
RACE CONDITION!
There's not but just put a last_updated column on the table you're pulling data from then "SELECT * FROM XXXX WHERE 1 ORDER BY last_updated LIMIT 1". Voila.
I don't believe any database engines support this, so even if you could find a client that would return the inserted row, behind the scenes it would be doing the query itself. If you need to get the inserted row, it would be best to just perform the query. If you are going to do multiple insert/select, you may want to create a prepared statement to lower the cost of parsing the SQL.
You're right that separation of concerns for your logic and presentation is one of the core tenets of programming best practices, I would expect that any programmer would agree with that statement; there is, however, more than one approach that we we can take as developers to achieve the same goal. For what it's worth I agree that having inline PHP embedded in HTML is appropriate for many scenarios but there are situations where the logic required to translate a given data-structure into the markup for a web page exceeds the amount of markup generated by the code; when this is the case I would say the best technique is to use PHP to generate HTML and simply echo it out from within whatever templating system you're using.
Ah, that makes sense.
Sessions require cookies.
Yeah. My cousin and I are creating a website where you create mobile marketing campaigns, and we are using it for the backend. You can create an account for free to see how we are utilizing it. It's a little rough around the edges, but it works. http://www.mobileinfobox.com
If you enjoy the literate programming style then [Docco](http://jashkenas.github.com/docco/) and it's friends (I use rocco, the ruby port) are quite neat to play around with and has a nice looking output; definitely in a different realm to doc generators like doxygen.
If cookies are no good- perhaps track by IP address in MySQL? 
 foreach (range(1,100) as $num) { if ($num % 3 == 0) { echo 'Fizz'; } if ($num % 5 == 0) { echo 'Buzz'; } if ($num % 3 &amp;&amp; $num % 5) { echo $num; } echo "\n"; }
Get the last insert ID then query that row?
Awesome, that is better.
love how we get berried with no reason why. Cake will do everything this guy wants, and it has a huge doc base (in print even) and a good user following. But, obviously its irrelevant now that Lithium has been released.
I hadn't seen anybody post this yet so... $start = array( 'color' =&gt; array('red', 'blue'), 'size' =&gt; array('large', 'small'), 'shape' =&gt; array('round', 'square'), ); $newArray = array(); function split_array( $item, $key, $newArray ) { $newArray[$key][] = $item; } array_walk_recursive( $start, 'split_array', &amp;$newArray ); --- var_dump: array(2) { [0]=&gt; array(3) { [0]=&gt; string(3) "red" [1]=&gt; string(5) "large" [2]=&gt; string(5) "round" } [1]=&gt; array(3) { [0]=&gt; string(4) "blue" [1]=&gt; string(5) "small" [2]=&gt; string(6) "square" } }
My eyes!
How to not get hired in a single line of code: print join("\n",array_map(function($n){return(($n%3==0)?'Fizz':'').(($n%5==0)?'Buzz':'')?:$n;},range(1,100)));
We have that on our interview test, which I help mark. It's not a measure of skill so much as a measure of competence. You'd be amazed at some of the crap I've seen submitted as answers (I wish I remembered them so I could show you). That just makes it a different kind of interesting though. How does the industry manage to survive when so many "programmers" can't solve a rudimentary programming problem?
The way I see it, it depends if you want: - 1 Each individual visitor page load to cycle through each ad. - 2 Page load by ANY visitor to cycle through each ad. If you want to do 1, then you have to use cookies. There is no real way around it. If you want to do 2, then you can record which you're up to on the server somewhere. Could be a text file, or a database. Doing #2 is almost the same as just serving random ads, except of course you want to ensure each is served an equal amount of times.
Interesting. Is my solution decent, or would it score low points in an interview?
Good! Hopefully the addition of git and a mirror on github (like proposed) will breath new life into php and get some of the major qualms with it resolved.
No surprise there. If only Linus or someone with a bigger cult following would have made `bzr` :( I'm fine with using `git`, but this translates into more time if I have to train someone to use it. Bazaar in 5 minutes was for real.
"1 for bazaar" was that you?! :)
Nope :( I believe the vote was restricted to a whitelist of developers.
haven't tried lithium. wow downvotes for suggesting a framework? &lt;shrugs&gt;
I can see why yours would be a better option with words like "2Pac" or "PS3", however. What I would do is train the system on alphabetic AND alphanumeric terms. That way, both "Pac" and "2Pac" and "PS" and "PS3" are acceptable terms. Since it's purely probabilistic, it shouldn't matter.
I would've given you full marks for that. If any of your competition had answered one of the more elegant things in the comments, they would've had a slight edge over you, but when I see that on the test I think "Hey, this guy doesn't suck, he's already on my shortlist". Seriously, I think about 90% of our applicants would fail a first-year CS exam. It's awful! Edit: Actually, I would've docked you a point for putting &lt;strong&gt; around FizzBuzz only.
[php](https://github.com/php) is already on github. Get with the times ;-)
its not official. its just something github setup to mirror the php source. you cant submit pulls or anything like that to my knowledge
Well, it looks like some of the PHP developers set this up. The official github mirrors are located here: https://github.com/mirrors From HackerNews: &gt; Rasmus gave a talk yesterday and I asked if they were switching to github. He said they'd likely switch to git (it's now happening, apparently), but not github because it can't do ACLs and the PHP project has thousands of people who need commit access to various places. _[Source](http://news.ycombinator.com/item?id=2971801)_
One less trite complaint from haters.
&gt;Chances you switch database platforms is near 0. Hmmm, if you switch from mysql to postgres, if you didn't do anything crazy like `STRAIGHT_JOIN` or whatever, you should be able to switch pretty painlessly...
&gt;Sometimes it's better to be using mysqli. Bah, don't encourage stupidity, they might start escaping with `addslashes()` or something...
&gt;PDO doesn't use the native prepare/execute for MySQL and emulates them internally using quoting Wrong.
I actually had added (before posting) varying exclamation points to fizz and buzz, then gave fizzbuzz the strong treatment for added excitement. In an interview I wouldn't bother with formatting at all, haha. Thanks for the response! I would likely fail a first year CS exam as well, but then, my job title is 'creative designer' so it doesn't really matter... Yet. Hopefully soon.
Yeah, ACLs are a huge deal for the PHP project. It could probably be made to work by separating the PHP project into several repositories, and they may do that anyways, but being able to manage who has push access to what, in a very simple way, is integral.
It was just restricted to those who had SVN karma; that is, it was restricted to those for whom it actually mattered.
Whenever I do database design, I always do: id created_at updated_at This allows me to get the last updated record easier. Aren't you doing something similar?
[No.](https://bugs.php.net/bug.php?id=54638) It's commonly documented around the web. There is actually a reason for it: in most versions of MySQL, prepared statements bypass the query cache so it's disabled by default in PDO.
Both mysqli and PDO use the exactly same mysqlnd driver. Both support prepared queries and proper escaping. PDO is just an abstraction and mysqli is the low-level interface. You probably get better performance using mysqli and you certainly get more control. There's nothing stupid about it. 
...and you don't use LIMIT or CONCAT. Those are two examples I found in mere seconds of googling; there are probably countless more ways that you can't imagine that queries which run in MySQL won't work properly in Postgres. That will be way more work to fix than the 15 minutes it might take to search and replace for database API functions (assuming the calls have not been abstracted in any way). 
What happens when two people create a record at the same time?
it's not trite. cvs is plain difficult to work with as a developer. Mercurial would have been just as good for most of us. I myself prefer git, but all the current crop of dvcs is better than cvs/svn.
A new row? Considering the IDs are unique and updated_at is down the second (Y-m-d H:i:s isn't it), if your application is getting thousands of rows inserted a second and you need to fetch the latest record, won't you kill your DB that way anyway?
I think it's too soon for an established framework to switch up to a version that most people who use php can't use (due to shared hosting). PHP 5.3 hosting is still harder than it should be to find. So glad i took a personal stand against working on code to be deployed on shared hosting. I cant deny though that without those shared hosting accounts that i wouldn't have all the amazing code that is out there to work with. So.. if it takes older stuff sticking around awhile to keep up with, i'll take that trade.
 &lt;?for(;$i&lt;100;)echo++$i%3?$i%5?$i:"":Fizz,$i%5?"":Buzz," "; 
You can certainly have two records added within the same second (computers are fast) without thousands of records being inserted. It just takes two people adding a record at the same time. Furthermore, someone could add a record in another second before the query to fetch the last record is run, meaning that you get back a different record ID than the record you just inserted. Getting the last ID using `SELECT LAST_INSERT_ID()` or the equivalent solves these problems. The last insert ID is a per connection value so it won't be overwritten by other people adding records in other connections. 
You might want to take a look at silex, a micro framework built on top of many symfony2 components. I myself have never built a fully symfony2 app yet. I've only used some major components distributed with the "Standard Edition" (but from git). Doctrine, DI container, classloader, event dispatcher, yaml parser and soon the routing component. Symfony2 is very similiar to ZendFramework in that way, you don't have to use the whole thing. In fact each of the components is available from a separate git repository via subtree split and then mirrored.
I'm working on one with Ryan Parman (another of the main developers from SimplePie) called Vanity: http://vanitydoc.org/ It's still a work in progress, but it certainly works. Let me know if you have any feedback regarding it.
If you did I would probably download it... :D
With `filter_var()`, `FILTER_VALIDATE_EMAIL` is probably broken. If you really need to know an address is valid, you should probably just send it some mail.
"The UID is either stored in a cookie or is propagated in the URL." 
Yep, Linode owns. I've got a couple of VPSes with em.
burstnet is $5 a month. You get what you pay for though. Otherwise use shared hosting.
Thanks for the compliment and yeah, I'd go for sync0pate's code too ;). Good luck with your app!
Try out some of the puzzles at http://codegolf.stackexchange.com
For reference, "num%x==0 &amp;&amp; num%y==0" is equivalent to "num%(x*y)==0" if x and y are prime (otherwise you can pull out the unique factors and multiply those). Some of the other suggestions make that particular check obsolete, though. 
Hosting aint the issue, but the Zend community loosing their best developers to Symfony 2 is.
It's not like Zend are doing this development in secret ;) here's the nabble mail list and lots of ZF2 talk: http://zend-framework-community.634137.n4.nabble.com/ The ZF2 module thread is interesting: http://zend-framework-community.634137.n4.nabble.com/ZF2-MVC-Prototype-td3792474.html Dive in and offer up some demo code :)
Change this: $sql = $db-&gt;prepare("SELECT password, salt FROM users WHERE username = '$username';"); $sql-&gt;execute(); To this: $sql = $db-&gt;prepare("SELECT password, salt FROM users WHERE username = ?;"); $sql-&gt;execute(array($username)); PDO::prepare() won't help at all if you dump user supplied data into the query. By using placeholders, you render the query virtually immune to injections. Passing an array to PDOStatement::execute() is a shortcut for binding the values manually. You'll lose the option to define what data type the value should be, like you can do with BindValue()'s third parameter, but that's not a great loss. Pass an associative array to use named keys: $sql = $db-&gt;prepare("SELECT password, salt FROM users WHERE username = :usernameWillBePutHere;"); $sql-&gt;execute(array(":usernameWillBePutHere" =&gt; $username)); A colon in front of the identifier is convention, but not a requirement.
Will that still work with `$userData = $sql-&gt;fetch(PDO::FETCH_ASSOC);` on line 37?
*its
I currently use Symfony2 but I sometimes miss Zend Framework (but not Zend_Form's decorators oooh no). I don't think ZF2 needs to be rushed but Traits and 5.4 is a bit too new to be put in a major framework I guess.
Except PHP are using SVN, which isn't as painful as CVS. Things like branching are still horrible in SVN though, Git makes them significantly easier.
Thank you! Glad someone picked that up! =P
Don't put user-supplied data into an SQL string *ever*. Just keep that at the front of you mind when developing queries and find ways to adhere to that rule. That will avoid one of the most common (it is frightening how often I see it, even in applications from big companies that charge big bucks for development) newbie security issues.
hi, my python version : def print_range(middle): my_range = sorted(range(1,12), key=lambda n: abs(middle-n)) my_range = sorted(my_range[:9]) for e in my_range: if e==middle: print '[%d]' % e, else: print e,
Legacy Code, my good friend, Legacy Code.
Please write 'Race Condition' one million times on the black board;)
&gt;Is this PDO login system secure? No. 1. Use [parameter bindings](http://php.net/manual/en/pdo.prepared-statements.php) for external data. 2. Use [bcrypt](http://codahale.com/how-to-safely-store-a-password/) to store the password. 3. Switch to HTTPS.
&gt; too soon for an established framework to switch up to a version that most people who use php can't use (due to shared hosting) I don't think you're going to find many of the devs over at Zend agree with you on that. They've always been cutting edge, requiring PHP 5.2 when almost all hosts were still 5.1. Besides, for those who don't have 5.3, they can always use the 1.x series. That's very stable, full featured, and will likely be around for a long time. The type of people who use Zend Framework have long since switched to 5.3.
OP here, couldn't remember my pw earlier. 1 So like this? $sql = $db-&gt;prepare("SELECT password, salt FROM users WHERE username = :username"); $sql-&gt;bindParam(':username', $username); $sql-&gt;execute(); 2 &amp; 3 How much of an overkill would this be for a simple crud system for a nonprofit organization? I'll check them out for future projects though. How's the rest of the code though? Like the session validation?
but the first is much clearer code and more resilient to change; eg if I change the requirement from 5 and 3 to 5 and 25 it breaks.
Good point. For a little added challenge, try making it so that it can accept *n* arbitrary number/string pairs and still work.
I use [DocBlox](http://www.docblox-project.org).
TLS (HTTPS) is a requirement. All data transmitted in the open should be considered compromised. Go visit the nearest wireless-enabled coffee shop with [Firesheep](http://codebutler.com/firesheep) on your laptop. You will be shocked. Some [cowboy sites](http://www.reddit.com) don't use HTTPS. If you choose to go this route, make sure your users know **not to reuse their password on other sites**. If only a few well-known users need to login you can use a self-signed SSL certificate or one of the many cheap or free CAs. I wouldn't be as worried about not using bcrypt. HTTPS protects you against random attacks (someone listening on a public network), while bcrypt protects against attacks specifically aimed at your organization (someone has a copy of your database and is trying to brute-force it). For small targets this is not as much of a problem. Still, if you're running PHP 5.3 (and you should be) there's no reason not to use bcrypt via [phpass](http://www.openwall.com/phpass/). I certainly would.
You're thinking about it too hard. Sure, you can optimize it, but no one cares. FizzBuzz exists to demonstrate the incompetence of a lot of programmers. As far as resources for interview preparation, I'd look at: [http://www.careercup.com](http://www.careercup.com) [http://www.amazon.com/dp/1466208686/ref=as_li_ss_til?tag=care01-20&amp;camp=213381&amp;creative=390973&amp;linkCode=as4&amp;creativeASIN=1466208686&amp;adid=0KH248567N6DK6RKQCCH&amp;](http://www.amazon.com/dp/1466208686/ref=as_li_ss_til?tag=care01-20&amp;camp=213381&amp;creative=390973&amp;linkCode=as4&amp;creativeASIN=1466208686&amp;adid=0KH248567N6DK6RKQCCH&amp;) [http://www.amazon.com/Programming-Interviews-Exposed-Secrets-Programmer/dp/047012167X/ref=pd_sim_b_1](http://www.amazon.com/Programming-Interviews-Exposed-Secrets-Programmer/dp/047012167X/ref=pd_sim_b_1) 
Not to mention what happens when you need to access that same DB from another separate application (possibly using a tool or a different language)? Keep data logic where it belongs. In the database... 
Do you use this service? It sounds interesting
I liked Silex, but for the life of me I just couldn't get dependency injection to work...
The database is a limited place to put data logic -- many of my defaults are application constants. It's better to simply enforce the convention that all inserts should be complete and not rely on any defaults. Many databases make that possible (although I'm not sure that's possible with MySQL). Besides, if you put defaults in the database and you don't duplicate your defaults you end up with the exact situation the OP has -- you can't create complete application entities without querying them from the database. That, in my opinion, is a pretty critical problem.
Well you have only two choices: a) query back the row you just inserted -- this is pretty practical. Performance issues are likely pretty minimal and likely not worth the effort to solve or b) double up and put the default values in the application code -- this is also pretty practical because database default values generally don't change. 
Have you tried $db-&gt;close(); I used SQLite for a couple projects in the past and I encountered an issue like this before. Everything would appear fine when running the program except when I closed it, the DB changes weren't committed. It was because SQLite waits until the handle is closed to actually save the data (kind of like snapshot isolation). Let me know if that works.
The [OWASP Top 10](https://www.owasp.org/index.php/Top_10_2010-Main) might help you.
The object is to properly prepare/validate the data, not avoid using it.
Thanks, didn't know about self-signed certificates. But what about bypassing the login and viewing admin only content on my site, are there any weaknesses in my code for those kinds of threats? Mainly concerned about the session stuff here, the code seems so simple :p
IMO it's much harder to solve a problem when put under pressure in an interview. In general, I throw questions like this out to see how their problem solving process works without the benefit of google, and how well they handle pressure.
I thought PDO::prepare() escaped special characters, what's the advantage of using parameter bindings here? What's the proper way to prepare/validate user supplied data?
This infraction is only made worse since I know the difference. :(
The variables you inject in to a prepared statement do not get escaped unless they are bound. Validation is going to take many forms, and it depends on what you're expecting from the user. For example, if you're expecting a whole number, make sure it's a whole number.
Definitely not exceptions. User input errors are handled by validation code that triggers an appropriate display on the page. However, my low-level validation does trigger exceptions but if bad data gets that far it's a programming error and handled as such.
I didn't think it needed to escape characters, because it just goes into the database in a different way. Instead of an SQL query with a quote character marking where a string starts and ends, it is simply passed to the database separately, and the database is told, "hey, this is a string". Escaping of strings is only needed if you mix the string data with the SQL. PDO can help you avoid this happening in the first place.
Sure, but we are starting with the assumption that the OP wants to make use of the features of PDO, what with PDO featuring heavily in the title and first post, so why not go about using it the right way to avoid some costly mistakes? I would still argue, simply don't put user-supplied strings into SQL. Avoid it completely using PDO data binding and there is no string escaping (or lack of it) to worry about.
Yeah, I really like it for what it is. I get essentially "shared" hosting on a BSD cluster with ssh access. For developing small sites (php, wordpress, drupal) I just edit directly on the server with vim. I've paid about $20 this year to host 7 sites, not counting domain registration costs. Another good option would be the Amazon AWS [free tier](http://aws.amazon.com/free/), which gets you a baby Linux server for a year. It's closer to a VPS as far as what you need to learn/know for administration though.
I do this by throwing exceptions and catching ones that extend something like "CustomerError" assuming anything else is a system error: try { } catch (CustomerError $e) { echo "Unable to login because ", $e-&gt;getMessage(), "\n"; } catch (Exception $e) { // safely log error echo "Sorry, we are having system difficulties"; }
yeah, that's another thing with OP's solution; the strings 'fizz' and 'buzz' are stored twice. That's not DRY.
I don't usually grade this question for maintainability. If I were to do so, however, the first suggestion would be to kill the magic numbers. 3 and 5 don't mean anything without context, and they're repeated twice each. Following that would be pulling the string literals "Fizz" and "Buzz" into their own constants.
I do have a vps right now, but I feel that im paying too much. I use it to host a few sites, and some general automation. I pay about $20 a month for this. When you say BSD cluster, does this mean it will be a linux server? or no? sorry if this is a stupid question
I just got an account with this service and put in like $15. It is pretty cool. Very mininal, no installing of packages or anything.. but it gets the job done.
Pulling fizz and buzz into constants would be one way of doing it. However, what if instead of echoing different strings, we were doing something more complicated? I'm pretty tired right now and I haven't tested this code, but I'd prefer something more like this: foreach (range(1,100) as $num) { $isDivBy3 = $num % 3 == 0; $isDivBy5 = $num % 5 == 0; if( $isDivBy3 || $isDivBy5 ) { if( $isDivBy3 ) { echo 'Fizz'; } if( $isDivBy5 ) { echo 'Buzz'; } } else { echo $num; } echo '&lt;br /&gt;'; } This way we only have to replace the 'fizz' logic, and the 'fizzbuzz' logic also gets updated. If instead of a one-line echo, it was ten or twenty lines, it would be not good to copy the 'fizz' and 'buzz' sections for the 'fizzbuzz' section. Good point about magic numbers too. If I was feeling better I'd fix that too.
I think we're in agreement. It just read like you could somehow construct the queries without ever using the user supplied data, which is impossible. I appreciate your clarification.
You could use a caching mechanism so you don't have to save the amount of pages every time. So you could do something like: count (25 results, store in cache), select (5 results) select (5 results) select (5 results) select (5 results) select (5 results), count (26 results now, store in cache and render additional pagination) select (5 results), count (26 results, end)
May as well throw mine into the mix: http://www.elefantcms.com/ Elefant also has a simple CMS on top of the framework (saves recreating user logins and basic page editing every time), but was designed with minimalism in mind as a programmer (less typing = win). There's a bunch of documentation on Github, and people are starting to migrate to it from my old software community (the Sitellite CMS project) because it's a natural replacement for them. My rationale for writing a new one was that Symfony, Cake, etc. are just too verbose. They feel like Java, where I've been falling in love with using CoffeeScript and Python lately. Here, I tried to play on PHP's strengths by hiding away as much "frameworkiness" as possible. Been getting really positive feedback so far, and would love yours too! Some additional links: Comparison with Symfony2: https://github.com/jbroadway/elefant/wiki/Elefant-compared-to-Symfony2 Using Elefant with other frameworks: https://github.com/jbroadway/elefant/wiki/Elefant-with-other-frameworks An Assetic plugin for compiling/optimizing CSS/JS: https://github.com/jbroadway/assetic 
Yep, that could work. You'd have to be careful to invalidate the cache when changing the table. If immediate updates are not critical, you could cache the results of the select as well.
I like using exceptions for validation as it enables you to explicitly define a field validation function. For example: /** * @param string * @throws InputException * @return boolean */ function username($input) { if (empty($input)) { throw new InputException("Input can't be empty"); } if (!preg_match(/* logic here*/)) { throw new InputException("{$something} is an invalid character"); } return true; } Put all your input field validation methods in a class, iterate through each method/field, storing any/all exceptions messages into a container. If the error count is &gt; 0, display each error messages out to the user. This allows for clear API documentation and unit testing. Instead of returning true you could opt to return the sanitized version (that's another topic of discussion, many say to separate validation from sanitization).
so from what i've gathered, [my](http://pastebin.com/i2fNVaws) database class (used as a handle for other classes) should be somewhat secure? 
&gt; You'd have to be careful to invalidate the cache when changing the table. Well, not really. Say "there are approximately N results", re-count if a page ever returns 0 results, and re-count on the last page. It's not really necessary to invalidate the cache, as it's not really critical data if done right, and you double-check it on what it reports as the last page - just set it to have an expiry of 5 minutes or so.
I use Exceptions for validation all the time. It's *almost* perfect, with the only drawback being that you can't really show multiple errors.
We could take it to a hilarious general case. First create a map of integers to strings. I guess in PHP you refer to this more commonly as an associative array. From there, you could do something like... for each num in range { for each key, value in mapIntToStrings { if ( ! (num % key) ) { ret += value } } echo ret + '&lt;br /&gt;' } Now to do FizzBuzz you could pass it something like: { 3: 'Fizz', 5: 'Buzz' } If you need to order the results, you could add another layer of indirection with a sorted array of integers. :)
It is situation dependent of course. There are going to be times when what you're outlining is a perfect solution. From my perspective, it can cause user confusion a la "I added record X, but it's not there". Records not showing up when checked may prompt the user to want to add it more than once.
aaa shiiiet! serrrrved!!!
When it comes to PHP, you can use an exception or an error message equally. I usually defer to an exception at the model level but with a validation layer between. That way you have two levels of sanitation - one for sanity checking and one for data integrity.
Use a binary variable and flip each digit for each test condition. When you've tested all the conditions, either throw or an exception with all the errors indicated or continue.
Well I'd likely just use an array. Most developers don't know how to do that.
 if (isset($_POST['newUser'])) { $errors = array() if (empty($_POST['username'])) { $errors[] = 'A username is required'; } else if (strlen(trim($_POST['username'])) &lt; 3 ) { $errors[] = 'The username must be longer than 2 characters'; } if ($_POST['password1'] != $_POST['password2']) { $errors[] = 'The passwords don't match. Please try again.' } if ($errors) { MessageManager::addErrors($errors); } else { //Make new user here } }
&gt; Some cowboy sites don't use HTTPS What about [https://pay.reddit.com/](https://pay.reddit.com/)?
`bcrypt()`, neat. Haven't had to worry about password storage in a while, but I'm writing that one down.
Yep, I do it pretty similar to this. Exceptions are too close to fatal for me to go that route.
The right approach is to just not store code in a db, ever. The logic is fundamentally flawed any way, a db stores data, not logic. It might store data which logic on your server uses to determine what to do, but it never stores the logic itself.
What are you trying to do? If you explain to me the problem you are trying to solve with this, I can tell you the right way to solve this.
Ah, ERP. Good luck.
What if the whole purpose was to have features that utilized the db for the code itself, such as CMS-editing, user control, and revisioning?
I wrote a content management system that is able to edit itself and store parts of itself within itself. It works great but makes heavy use of eval. 
&gt;So like this? A better way would be: $stmt = $pdo-&gt;prepare("SELECT password FROM users WHERE username = ?"); $stmt-&gt;execute(array($username)); There's no reason to name the parameter since you only have a single one. If you want to use named variables anyway, you could just pass an associative array to the execute method rather than an indexed one. &gt;How much of an overkill would this be for a simple crud system for a nonprofit organization? It's not overkill at all. Bcrypt is not a general purpose hashing function, like the one you are using. It is a proper adaptive password hashing algorithm. It is designed to handle passwords safely. You can actually adapt the work factor of the hash, making it slower, despite processors doubling in speed every 18 months. You also don't need a separate field for a salt, as the salt is built in to the bcrypt hash. By not using HTTPS, you are placing your users in danger of having their credentials stolen every time they use an insecure network enabling a man-in-the-middle attack. Any wifi network will broadcast the credentials out in the open if you don't take proper actions to encrypt it. Besides, switching to HTTPS mode is a simple enough thing to do. &gt;How's the rest of the code though? It's alright. It already protects against [session fixations](http://shiflett.org/articles/session-fixation), so that's a plus. Personally, if I were you, I'd put more effort in separating the logic from the presentation. You might want to have a look at PHP Savant or Zend_View, to name a couple. 
Why don't you just write it out to a file and then include the file and let it execute?
In my own ORM, I set internal error codes for input that doesn't validate, and then I check them when I need to. I don't throw exceptions for such low level errors, because it breaks my method chaining and catching them all is more trouble than its worth. I only throw exceptions for major errors, like trying to load a record that doesn't exist.
Yep, started considering that last night. Have no idea if /how it would work. On the surface it seems like it has more steps involved. Would we expect that to be more or less efficient than evals? Read from db-&gt;write to file-&gt;include file-&gt;file gets evaluated Read from db-&gt;evaluate 
Just so you know, there's no actual bcrypt function. You need to use [crypt()](http://php.net/crypt) with a CRYPT_BLOWFISH salt. Read the documentation carefully, as, if you do not provide a properly formatted salt (which is also used to identify what hash type to use), it will fall back on standard DES, which isn't particularly secure. 
I take it your goal is to develop the slowest CMS in the universe.
This is why I set internal error codes in my ORM class. You can set all data and get back a nice array of error codes when you want to.
To add what ensiferous said, what you describe also needlessly complicates your application for maintenance, makes debugging harder and creates a possible new vector of attack against it. A possible way that creates a safe/saner approach is by creating a domain specific language that your application can interpret and execute. So for instance, you could have a snippet in the database like &lt;widget&gt; &lt;type&gt;image&lt;/type&gt; &lt;params&gt; &lt;src&gt;./img/example.png&lt;/src&gt; &lt;/params&gt; &lt;/widget&gt; Then in your project you could have a collection of objects or function that the application can call based on the type of above snippet. So for instance class widget_image extends widget { public function __construct($params) { $this-&gt;src = $params['src']; } public function run() { echo '&lt;img src="'.$this-&gt;src.'" /&gt; } } This is of course just a silly example, but it demonstrates the point I think. Doing it in such a way gives you cleaner code and control over what gets executed.
Oh come on. Don't ask for help here and then get defensive. What is the specific problem that you're trying to solve by storing parts of the app in its database? You can engineer the ability for users to customize the app without storing parts of the code in the database. Look, I'm not trying to argue with you or call you dumb. I know we're all proud of the things we build, however, there are so many things wrong with storing parts of the app itself inside its own database. The foremost being maintainability. The best developers write software that is maintainable by someone else, usually by creating an API for the product as they go. Secondly, execution speed has to suffer greatly from this. PHP is a script, sure, but one thing that PHP apps don't *usually* have to do is get parts of themselves from their own databases before they can interpret themselves. Another reason this is bad is that your app is now tightly coupled to your database controller components (if, that is, you built controllers) and horribly dependent on the specific database you're using. Software should be written in a decoupled, modular way that is written toward supertypes instead of implementations. There are many other reasons why this is a silly idea. I'm not saying you're dumb. I'm just saying that I'm an experienced developer and I can help you solve what you're trying to solve by doing this.
An exception container sounds like a good solution, except that you'd have to have a bunch of exceptions of your own. Throwing the same exception for every input error doesn't really work for me.
Where am I being defensive? I'm the first to admit to being a shitty programmer! There is something about having a definition of 'content' expansive enough to include code that is, imho, useful, because then the definition of content management can expand to include code management. When I edit a document in the CMS that contains some part the code my modification is both logged as content modification, revision-ed, and organized neatly in a cms tree hierarchy. The changes are also reflected immediately in the final render of the site.
Maybe you're not. Just give me an example of this pattern that you're using and what it is solving.
None of those features require logic in the database, just data. I can't really give a good alternative since I can't even imagine what kind of logic would go in the database in those cases, could you give an example?
What if instead of testing by divisibility, we wanted to ask the user via Ajax, and instead of strings, we needed to fetch and parse XML feeds? We'll just have to face it, the only ideal solution is a turing-complete scripting language implemented in PHP.
So the CMS I'm working on has all 'content' stored in a tree-structured table called 'documents' and each of these has a 'parent' document and title/content fields. So each document can behave like a directory or document or both. There is a root document called 'Code' under which I have documents that pertain to some functionality of the site. Like Code-&gt;Styles-&gt;default style contains the CSS for the default style. And Code-&gt;Aspect code-&gt;Who contains the code that is to be evaluated for the 'who is logged in' aspect. Because I have the code within the CMS, each time I edit those documents I get a new revision, and I get to specify user access control on those documents (to collaborate for example). And when I edit those documents other users are informed via the chat. Etc. I get the benefits of the code when editing parts of the code.
What if someone edits a document to include php that drops the database, for example? If I understand you right, you're making a CMS that allows users to insert php that is then run by the server on that very page, right?
Or, even, just have a Widget class with a corresponding Widget model that holds the values it needs in the database.
Not everyone, only those users with high enough access level.
What if one of those users gets mad at someone for something. The lesson is to **NEVER EVER** under any circumstances **EVER** trust user input. It should be filtered and properly escaped so that you don't run into problems with [XSS](http://en.wikipedia.org/wiki/Cross-site_scripting) or DB attacks.
Which you shouldn't do, because user input failing validation/authentication is not exceptional. An exceptional use case would be if you were contacting an authentication server and it was unavailable for whatever reason.
... and how would one do that?
&gt; What if [a trusted person] [betrays your trust] That's a human problem not a code problem. If you're going to bring somebody onto the development team, ie: give them code-level access, then they can always fuck you up if they want to, whether the code is accessed via a CMS or SSH...
Do what?
**There aren't any alternatives. You either use eval() and wait till someone FUBARs the server or you pick a new framework/system that supports your requirements.**
I see, you're using your CMS as a sort of [revision control system](http://en.wikipedia.org/wiki/Revision_control) for the CMS source code. That's clever. Most developers have learned to avoid this kind of clever like the plague. In answer to your question: Based on what you are doing you can either eval or write to a file and include it. Both are pretty much equivalent. Those are the only ways to execute PHP code stored in the database. There is no alternative that won't make it "cumbersome and incorrect" to most developers. 
Writing files might be more efficient than evals if you use the file system as a cache. For example, if you write files when you edit the code (rather than read the code from the DB on every request) that will be much more efficient. 
It's probably better in this case to save the CMS 'code' parts as a template that gets stored as an actual file, and then data that fills out the template in the DB. Your CMS sounds similar to something I've been building, where I have unlimited 'post' types created by grouping form elements together, and that's the approach I took. I added a templates folder to my MVC framework where these pieces get stored, and these files get scanned when necessary(and then cached) and are connected via db relationships.
Array in an exception. I haven't messed around with exceptions so not sure if you can just pass them array like normal but given your statement: &gt;Most developers don't know how to do that. I figured there must be a trick to it.
The user access control could be easily solved by just normalizing the database, each revision has an id already and access control could be done on that id in a separate table, that way the logic could be contained in a normal file and just handle authentication based on the data in the db. And while it's not really relevant, it sounds like you're not caring about performance at all and that this will be really slow.
Look up how template design patterns are implemented. What you are basically wanting to do is create your own templating system(or integrate a 3rd party one like smarty), which should remove the need to use evals. Then you can create special markup for any type of templating needs you have. For my purposes I built a system I call streams/channels that lets me load data similar to 'the loop' in WordPress
I mean most developers would struggle with using integers as bitmaps. You can't pass an array when you throw an exception. You could serialize it and pass it as a string though.
He's looking for a template pattern, but he's not quite asking right and you seem to be looking to troll/validate yourself as an expert rather than understand/help. Cheers.
I guess I'm trying to address the larger problem of online-community self-management. I'd like code that lets some trusted subset of the community have direct access to construct any imaginable functionality. I know that the traditional way to do this would be to have a development team that keeps track of revisions with a standard repository like Git, and having carefully unit tested changes merged with the production box by whoever is in charge. It's not just about the CMS editing the CMS code, it is about the CMS code being so 'easily expandable' it encourages frequent additions/improvements by those community members with the ability / desire / access. 
Ah, well should the need ever arise that may be handy. Thanks.
Hi ruko, yeah I'm the guy with visions bigger than abilities, so sue me!
Yes, thanks. That is what I should do.
Java throws ParseExceptions in similar scenarios. It works for me, I'm not telling you to do it. Exceptions to me aren't just one rigid error handling mechanism. Most of the time if you follow the code without using an exception here it will contain many checks ala Win32 HRESULT era. I prefer to bubble my errors.
Many CMS's support plugins that can add and extend the functionality of the core without actually changing it. I think that might be what you are looking for. Building a flexible plugin system is pretty difficult though. 
10 minute time limit. Whiteboard only. No references. Final Destination.
&gt; Don't ask for help here and then get defensive I didn't detect defensiveness in his tone
Writing your own CMS is a great way to learn PHP (that's what I did too). However, beyond that it's generally a bad idea to try to reinvent the wheel for this kind of thing, and for code that will be used in a production environment I'd strongly recommend checking out an existing (open-source) CMS package such as [Wordpress](http://Wordpress.org). It's well-tested, matured and is widely used and liked. A good bet would be to look through the Wordpress source code (or pick apart a plugin) to pick up some coding tips. Also, it's very versatile: it's not just for blogs, and could probably be harnessed for whatever cms-y project you're building. Anyhow, good luck!
&gt;...and you don't use LIMIT http://www.postgresql.org/docs/8.1/static/queries-limit.html 
This is a pretty generic architectural top-down language question. What's with the downvotes? If you don't agree then don't upvote. http://www.reddit.com/r/PHP/comments/k1pk5/one_of_my_favorite_php_functions/ So posting a link to a single built in PHP function: Good http://www.reddit.com/r/PHP/comments/k85yo/php_chose_git_as_its_next_distributed_version/ Posting a link to change effecting only 0.01% of users: Good Having engaging discussions about architecture: downvote. I now understand 
Let me know if you have any questions and I can probably help you out. Are you working in a framework? If so, which one?
Werd. Can't wait till I get to a stable point in the projects I'm working on so I can start looking into ZF2 and possibly offering up some code. :&gt;
 $fp = fopen("dbcode.php", "w"); fwrite($fp, $code); fclose($fp); echo exec("php -f dbcode.php"); _Obviously not recommended._
If it's AJAX I usually will compile all the errors into an array where each error is attached to a specific field so that when the reply comes I can highlight all the errored fields with javascript. Usually though I only return the first error without specifying the field.
Different syntax. It's `LIMIT 1, 2` in MySQL and `LIMIT 10 OFFSET 2` in Postgres. MySQL does support the Postgres syntax but I've never seen it used. How many times do you have to be wrong before you stop questioning me? :)
I was earnestly asking him for an example and what problem he's trying to solve with it. Originally his comment only said "I'm not being defensive." He edited his comment afterwards explaining a bit more, and making it look like I ignored his explanation. I posted another reply to his comment above asking him another question. Cheers.
He edited his comment. He probably wasn't being defensive, and I probably misread his tone, but his comment was more terse before. I probably just misread his tone, though.
It's actually running [FreeBSD](http://en.wikipedia.org/wiki/FreeBSD) instead of Linux, but has a similar feel. A little more old skool, but old skool is not bad for servers.
If you find that you need something different, you can move a site between "realms" with different versions. http://example5.nfshost.com/
C M S E P T I O N. Or if you prefer, yo dawg, etc.
ZF has controller helpers, plugins, view helpers etc which all allow horizontal code reuse, so traits are kinda in there already albeit in a clunky way. 
It's all my own code, I know, I know...
Exceptions are great for this sort of thing. They are for an exceptional circumstance when your user puts in something they are not supposed to. "Exceptional" is relative. https://github.com/radiosilence/core/blob/master/core/validation.php
Bullshit, they're just a way of controlling the flow of code. "Exceptional" is relative to the situation. In a situation of handling input, input that is wrong is considered exceptional.
I tell them to stop being stupid and enter the proper information. [rimshot](http://instantrimshot.com/)
&lt;not-the-answer-you-are-looking-for&gt; [assert(\)](http://php.net/manual/en/function.assert.php) eval()s strings, if you are looking for something more cumbersome and incorrect. &lt;/not-the-answer-you-are-looking-for&gt; 
Why don't you think it is ideal? Should your page have multiple `$messageManagers`? Would they be managed by a `$messageManagerManager`? Why would you write and modify - potentially thousands of lines of code- when writing only one or two would do?
I'm kind of curious about that too. Let me clone that directory and mess around with the code a bit.
That doesn't sound right to me. Why are you advocating writing many lines of code when writing one line of code also solves the problem? What does it mean to have multiple "message managers"? Do you have more than one status area of your web page? Does one message manager write to the left side of the screen and the other write to the right? Or are you confusing having multiple "message managers" with having pluggable message managers? Singletons/global state are a tool; they are neither good nor bad. Either the programmer is capable of using the tool, or they are not.
Spend a weekend with a bunch of awesome developers in a castle in Ireland. What could be better than that? Oh, and you get to hang out with some really awesome people: Last year we had a lot of great people including Werner Vogels (Amazon CTO), Tom Preston-Werner (Github CTO), and Matthew Inman (The Oatmeal). This year will be even more "star studded". Did I mention that it is in a freaking castle?! This is a great opportunity to have a kick-ass time in a beautiful country with some truly amazing people.
Yess!! i just saw your push! Thanks man! I'm going to go try out the merge. 
Awesomes. :)
Seems it worked as if I had commit rights.
Is that the same as this? $stmt = $pdo-&gt;prepare("SELECT password FROM users WHERE username = ?"); $stmt-&gt;bindParam(1, $username); Well you've convinced me to use https and bcrypt :)
The description in the manual already answers this: http://www.php.net/manual/en/pdostatement.execute.php &gt;Execute the prepared statement. If the prepared statement included parameter markers, you must either: &gt;* call PDOStatement::bindParam() to bind PHP variables to the parameter markers: bound variables pass their value as input and receive the output value, if any, of their associated parameter markers &gt;* or pass an array of input-only parameter values 
I think he was saying to write it to a file as an alternative to storing it in the DB.
Your webhost should be providing you with a stats page that has all of this information along with tons of other nice data. If they don't, switch hosts.
I generally use a validation class that generates and displays an error page if any validations fail. No exceptions, it just runs through the validations and adds errors to an array as it encounters failed validations and then outputs the errors if the array is empty when it's done.
God, I hate the car examples. When I first encountered those I felt like I immediately understood it and thought "this is so cool, I'm going to use OOP everywhere!" and then because the car examples had no real world programming applications (outside of, perhaps, a simulation of a car), I couldn't think of practical uses for it. I have, of course, since gotten over that, but it took a while.
This seems to implement all the ugliness and special magic that I hate in several other languages.
I just recently used Zend's library which seems to cover all Google apps under the sun. The syntax looks similar to it, does anyone of any differences?
If you don't need root access, you could do with shared hosting. Take a look at: * [SpeedySparrow](http://speedysparrow.com) * [MDDHosting](http://mddhosting.com)
Thanks for the advise! I just put the code up onto Github https://github.com/mpick/codeigniter_Bloggy
Thanks for the advise, the code is up and available now https://github.com/mpick/codeigniter_Bloggy
Thanks for the advise, I just put the code up onto Github. https://github.com/mpick/codeigniter_Bloggy
:D I just put the code up onto Github https://github.com/mpick/codeigniter_Bloggy
Very cool! I'll play around with it this weekend. The only thing I know how to do on Github is download the code, but if I can figure out how it all works, I'd love to add features to the blog.
I recall the Google Checkout API including the ability to set/change/suggest a gift message. Perhaps you can handle these questions ahead of time and use the API bits and pieces to pass along the gift message during the handoff.
From what he said: &gt;The gift message is the only thing doable in Google Checkout. The problem lies in the rest of the fields they're looking to include.
From what I said: &gt; I recall the Google Checkout API including the ability to set/change/suggest a gift message. [Here's the part in the XML API for passing a pre-determined Gift Message to Google Checkout](http://code.google.com/apis/checkout/developer/Google_Checkout_XML_API_Gift_Messaging.html). The OP can simply prompt for *all* of the information up-front, *before* passing the user off to Google Checkout with as much information as it needs.
not sure if you're watching this on github at all, but i found a somewhat nasty error today; turns out that my argmax implementation was being fed a bogus frequency, meaning that it wasn't returning things based on their actual probability. corrected!
http://dev.mysql.com/doc/refman/5.0/en/select.html &gt;`[LIMIT {[offset,] row_count | row_count OFFSET offset}]` That's your fault for using the alternative syntax in mysql. The proper ANSI compliant way of limiting is the same for mysql and postgres. &gt;How many times do you have to be wrong before you stop questioning me? Before you accuse me of being wrong, you should know what you're talking about first.
&gt; That's your fault for using the alternative syntax in mysql. That's not the *alternative* syntax for MySQL -- that *is* MySQL's syntax for it. The `OFFSET` syntax is *merely* for compatibility with Postgres and SQLite and is relatively new. It is *not* the ANSI standard. The ISO/ANSI compliant way of limiting is [`FETCH FIRST n ROWS ONLY`](http://en.wikipedia.org/wiki/Select_%28SQL%29#FETCH_FIRST_clause). That syntax is useless for paging so everyone uses a non-standard syntax. Given my record so far, you should probably do a little more research before you think I'm wrong about something. You're already 0 for 5 in this conversation. Why do you argue with me on everything I say? 
I usually follow this process: git add * git commit -a git pull It'll ask you to check the files. Check the respective files and make the appropriate changes. git commit -a git push
The issues regarding singletons/global state doesn't apply as much to PHP because every single request gives you a fresh global state. There are no application-wide globals, they're all request specific. 
Identify links by numbers; link 1 = 1, link 2 = 2 etc. if (empty($show) || $show&gt;$max-number-of-links){ $show = 1; } check what value $show has, then show link that is identified by that number. $show = ++$show; Could this work?
Sounds like you are trying to re-implement a VCS, if so, why not use one? PHP has an SVN extension: http://ca3.php.net/manual/en/book.svn.php
awesome, i may download it and try it out, seems pretty lightweight and clean
I'm not trying. It already works. In our system we could even make a git/svn check in / check out. But that's not really why I asked. I'm more or less trying to gauge whether or not others have seen a similar system.
Ah, fair play! Makes more sense when you say that :)
Well like he says, if you insert you should know what you just inserted. More to the point though, a RDBMS doesn't look at the data when it updates, (well not beyond matching the where clause). and if you think about it, it makes no sense for it to do so. It would be a waste of time. Now if you want this you should perhaps look into the entity/data mapper design pattern. Basically instead of directly interfacing with the DB to get your data, you have objects modeled after your data which you use to interact with, and mapper objects you use to fill those entities from the DB and save those entities to the DB. This way you can do spiffy stuff like $userEntity = userMapper::loadEntity($userId); $userEntity-&gt;name = 'Henk'; var_dump($userEntity-&gt;getChanges) // array('name' =&gt; 'Henk') userMapper::saveEntity($userEntity); var_dump($userEntity-&gt;getChanges) // array() echo $userEntity-&gt;date_mutation; // Print's new date that the userMapper set. Latter you could also add lazy loading and relation proxies and stuff like that, but they also make the code more complex so it's a trade off.
I've seen a few systems with versioning implemented to some degree or other; but all of them were built on top of a framework (or from scratch) without a VFS/versioning. &gt; What would be your ultimate framework? If you're fantasizing about the perfect framework, well just throw in every feature imaginable. If you're asking "which framework is best", then see these comments which I agree with: * [http://www.reddit.com/r/PHP/comments/jinax/will_anyone_volunteer_to_author_the_first_draft/c2cfi1t](http://www.reddit.com/r/PHP/comments/jinax/will_anyone_volunteer_to_author_the_first_draft/c2cfi1t) * [http://www.reddit.com/r/PHP/comments/jinax/will_anyone_volunteer_to_author_the_first_draft/c2cmpqt](http://www.reddit.com/r/PHP/comments/jinax/will_anyone_volunteer_to_author_the_first_draft/c2cmpqt)
Great! please do! and thanks for the lightweight and clean comment! I feel the same way. :)
If you are going to go to all that trouble, I would recommend moving to a new database.
That second comment was quite excellent. In terms of what I'm asking for when I say what framework I kinda meant what features. Not specific ones but generic system ones. For example, everyone wants ActiveRecord, but if it's only for MySQL it's kinda of a deal breaker for many.
This is what I was suggesting.
I dunno, I've been using the Zend library for the Youtube Client PHP API for a while now, and it does just about everything you could hope to do on youtube.com... so I'm not exactly sure what the advantage is here.
We do have an orm layer. It uses DB defaults a lot so I don't know what I put in sometimes 
We're working to move defaults into the orm but that never seems important to the business folk so it's not the highest priority:(
Dude... you're arguing that it's not easy to switch from mysql to another db (such a PG), meanwhile, every single thing I've stated has been accurate.... What's your problem?
Asking someone to make something custom is asking too much. With 800 at 50/hr, a person could potentially install magento and a theme (~16 hours). 
It's part of a framework I'm trying to build, but the code is really ugly, and I'm sure there are better ways to do things. I'd love any suggestions that will make me a better programmer, be as harsh as possible. Cheers!
Using exceptions for flow control is a terrible idea and there are a scary amount of people advocating it here.
Not so much criticism as a first impression. Code looks clean, good comment ratio. Good Job. To me that is more important then how clever or efficient the code is. Clean code I can easily read and fix, dirty code, not so much. on line 25, you use a str_replace to escape the forward slash, there's a actually a function for that [preg_quote](http://php.net/manual/en/function.preg-quote.php). The method grabURI assumes we are running a webserver, you might want to add a bit off code to make it also work for CLI, you can do that with by checking if PHP_SAPI === 'cli'. Even if you don't. Consider setting the URI via a separate method or as an attribute, it will make unit testing easier. Your list of valid characters for a URI might be limited, you should check if a uri can't also contain other stuff. (not horribly sure of this, and I'm lazy and couldn't find the answer with a single google) Instead of the Load:error()'s you might want to throw exceptions instead, you can then catch and log them and show the 404 anyway. It makes debugging easier. Overall, looks fairly default, in a way it's a bit limited because you are restricted to the "/&lt;controller&gt;/&lt;action&gt;/" type setup, but that's the most common anyway, so meh. And creating something more clever then that brings a whole lot more code with it.
I'm not impressed...I would have expected better quality from Google. It's 2011, PSR-0 was defined in 2009 and other autoloading methodologies have existed for years. Files are manually required, multiple classes in one file, unit tests don't cover the entire library.
IME, Magento requires far too much lever-switching to be useful in such a small amount of time. 
Cheers for the tips, I didn't know about preg_quote, changing that now. What did you mean by "setting the URI via a separate method or as an attribute", I don't really understand. Thanks! 
I'll agree with you there. It's an option.
Singletons are a problem for testing but global state isn't. For example, if you have a global connection accessible from, for example, `Database::getConnection()` that's still easily testable if you have a corresponding `Database::setConnection($connection)` that can be used to provide a mock. In your tests, you just setup and tear down the global environment accordingly. 
&gt; meanwhile, every single thing I've stated has been accurate.... Dude, I've proven you wrong at every opportunity and even provided appropriate citations. Not one of your replies to anything I've said has been accurate. Now your just being purposely obtuse.
it's about the line "$URI = $_SERVER["REQUEST_URI"];" $_SERVER is an outside source, so the "neat" approach is to put it outside of your logic handling methods. Something simple like: protected getRequestURI() { return $_SERVER["REQUEST_URI"]; } That way when the router gets extended you can easily override getRequestURI if you want to handle that in a different way without also having to reimplement the grabURI logic. Also when creating a unit test for it, you might not be able to set $_SERVER variables. (not certain, perhaps you can) Anyway, it's hardly a deal breaker.
&gt; What did you mean by "setting the URI via a separate method or as an attribute" I'm guessing this means rather than using grabURI to get the current page, pass the URI in via the constructor. That way if you want to test with PHPUnit you can pass in fake uri's to check things work. Example: // Current way $routing = new Router(); // New way $routing = new Router($_SERVER["REQUEST_URI"]); // Testing something $routing = new Router('/app/action/'); It's not a big change, but will make testing much easier. **Edit** Looks like esnoeijs was 50 seconds faster than me :)
Oh, gotcha. Another question, what's a unit test? And thanks for all the help, I really do appreciate it :)
Cheers, I guess this is what unit testing is, I'll look into it :)
A unit test is separate code that calls your methods and tests them to see if they function as they should. After a while you can collect a whole lot of them and run them periodically to see if anything you changed broke something. There is also a development method called TDD (Test Driven Development) where you actually start your project by writing unit tests and build your functionality afterwards. The benefit is that you get instant feedback if your code is good, and because while your write tests you are thinking of corner cases your interface and code will be solid. Isn't used that much in the professional webdev world though, because it takes some upfront time. (massive discussions can be had over this btw.) For PHP the defacto unit test library is [phpunit](http://www.phpunit.de/manual/3.6/en/automating-tests.html) by sebastian bergmann. You might also want to read the [wikipedia article about unit testing](http://en.wikipedia.org/wiki/Unit_testing), it gives some good examples and use cases and such. Also a sideway topic which you might not have heard about yet, is continues integration. These are suites that you can hook your project into and they will run analytical tools like phpunit so you can get a indication of how healthy your project is and how it's growing and such. They can be a pita to set up though. most popular for PHP are [phpUndercontrol](http://phpundercontrol.org/) and [Jenkins](http://jenkins-ci.org/).
http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl &gt; This violates the PrincipleOfLeastAstonishment. This makes it harder for programmers to read. There are existing control structures whose sole purpose is to handle these types of operations. Be kind to the developers who follow you and use a standard approach rather than being creative. http://www.sturmnet.org/blog/2005/03/29/exceptions-flow &gt; An exception is meant as an instrument to signal that your application's flow has been broken. That's the one most important feature of the exception handling subsystem: it works across all boundaries of application flow. It's neither designed nor very useful for any situation where the state of the application is known. &gt; Rule of thumb: if you expect that an error may occur in any specific line of code, and you are going to implement alternate handling for that particular case, don't use an exception. That's not an unexpected application state and shouldn't be handled with an exception. http://blogs.perl.org/users/ovid/2010/02/exceptions-as-flow-control.html &gt; exceptions should be reserved for code where, in theory, if nothing went wrong, they could be completely removed without affecting the program's correctness http://schlitt.info/opensource/blog/0724_python_good_bad_evil_03_flow_control_exceptions.html &gt; Using exceptions for flow control makes your code as un-maintainable as using goto. Tracing the control flow of your code gets hard. You can never see, where the result of an exception might be caught and vice versa, you don't know where a caught exception might be actually thrown. http://google.com/search?q=exceptions+flow+control
Had a quick look, depending on how your framework is meant to behave, this is quite limiting: if( !preg_match('/[^a-zA-Z0-9]/', $URI) ) What if you want dashes or underscores etc in your URI? Also I would avoid using slang such as grabURI, getURI would be the standard. However I would presume this would get me the URI class var, so perhaps a less confusing name. Additionally there seems to be a bit of logic mixed between your constructor and the grabURI function. You should probably look at refactoring that together. Other posters have mentioned using preg_quote, the other option a lot of people forget is reg. expressions don't have to be delimited by slashes.
I can't say I'm all for the huge indents and braces under the line, but that's all personal preference so meh. Other than that I recommend removing the ?&gt; at the end. It won't break anything, but it could potentially save you a hassle later on down the road. It's increibly easy to accidentally have whitespace after that in your code, and it can cause all kinds of problems with your site that aren't obvious at all.
your approach is probably cleaner though, so 50 seconds well spent :P
Wow, awesome reply, I wish I could upvote you more than once. Thanks a tonne!
I dabbled with unit testing, but didn't start using it seriously until recently, and it has made a huge difference. Like everything in programming, some people love it and some hate it, but it basically boils down to this: I'm an idiot. I make mistakes when I code, and unit testing let's me know about it before anything gets deployed.
Ah, fair point, my regex knowledge ends there though, how would I create a better regular expression for this? Cheers, and I'm changing grabURI to getURI now, that does make more sense
Pastebin seems to add a lot of indentation to my code :s And thanks!
&gt; I'm an idiot. I make mistakes when I code Sounds like you're describing me :P I'll definitely take a look at it, cheers 
I always use Glue for this task: https://bitbucket.org/jtopjian/gluephp/src/1d28a390517e/glue.php Not saying you shouldn't use your own code or anything... Just an FYI, maybe you could learn a little from it, it's way less code than your implementation. 
I use Git on a daily basis with my team of devs. I'm actually oushing Git to make sure it's default here at our ofices. It's simply awesome. Let me know if you need a couple of pointers, I'm not a guru but I do manage our repo here so I've met with lots of misshaps :P Merges and branching are quite painless, the merge conflicts are usually easy to solve. The last ugly issue we had was caused by an octopus merge caused by one of our flash developers. He wasn't using git pull, he likes to fetch and merge manually (at least that's what he tought), so instead of *git pull origin* {branch} he did *git fetch origin* and *git merge origin {branch}* (note the space between origin and {branch}. It caused it to merge origin default (master) with local {branch} (where he was standing, I guess it could've been worse if he wasn't standing in the branch he was trying merge) into local {branch}. The correct would've been *git merge origin/{branch}*. Anyway, I'm really happy with git, it's reasonably easy to use but the docs could be better. Also for the mergetools available the one I think is the best: vimdiff
I'm hoping I can avoid this because I think it will take too much customization to make Magento work for what I need.
Honestly, you're probably SOL. I've never taken on an eCommerce job for less than 6k and I couldn't imagine trying to produce something of any real quality for 800.
What problem does the regular expression try to solve? that is the thing I don't get.
Ever seen the PHP Adwords API code? It's fucking awful.
For most of the work I do (freelance, on assorted shared hosts that come with MySQL by default anyway), MySQLi works great. At some point I'll get around to learning PDO just because it seems to be the way PHP is (and its users in general are) going, but right now, it makes more sense to stick with what I know even if MySQLI::real_escape_string() is enough of a pain in the ass to constantly use that I sometimes find myself subclassing it just to add an esc() alias.
Thanks. I'm working on a project that was always a solo operation and now we're a team of 4. The Senior dev on the project isn't comfortable/familiar with Git so I'm trying to help him out by learning it more myself. He told me today that he doesn't understand how to make the Server be the master and get the code merged to it. I sent him a link to this youtube tutorial, I found it last night and its really well done, http://www.youtube.com/watch?v=hv4hwgQO9xI . Any other suggestions for him with getting the Server up and running? 
You do not have to use / as a regular expression delimiter; the delimiter can be any non-alphanumeric non-backslash non-whitespace character: "/http:\/\/reddit.com\/r\/(\w+)\/?" becomes: "~http://reddit.com/r/(\w+)/?~" I find that it makes the expression much easier to read. Please see the php manual section about [delimiters](http://www.php.net/manual/en/regexp.reference.delimiters.php) for more information. You could also consider using named captures in a regular expression to match your controller / action, rather than manually tearing the string apart. Something like: "~/$appName/(?&lt;controller&gt;[^/]+)/(?&lt;action&gt;[^/]+)/?~" will allow you pull the controller and action out using one function. Using named captures also makes it very clear what the expression is doing. Please see the php manual section about [preg_match](http://www.php.net/manual/en/function.preg-match.php) for how it passes captures back to you, and see [this](http://www.regular-expressions.info/named.html) for information about named captures. Your regular expression for determining if $_SERVER["REQUEST_URI"] is valid is pretty terrible, and is redundant; you are validating the request when you attempt to pull out the controller and action. Additionally, you are not allowing valid characters such as _ or -. I commend you for wanting to validate user input, however, as you should never in a billion years trust user input. I think, though, that what you actually want to do here is sanitize the input. Instead of manually trying to sanitize this information, you should probably use the built-in filters in php. You can guarantee that a passed user string will only contain valid characters using something like: filter_input(INPUT_SERVER, "REQUEST_URI", FILTER_SANITIZE_URL); This will strip tags and other unsavory characters, but will NOT ensure that the string is a valid request. That is what preg_match and a nice regex are for. Like the others before me I highly recommend passing your URL to an instance of the Router class and then parsing it. This way you can more easily test the class functionality. I notice that you are calling static methods on the Load and Config class. Static methods suck; they are hard to test, and they add a ton of line noise. I recommend only using them for custom object constructors. Instead of a Load class, why not write an autoloader and then register it using spl_autoload_register. Please see the php manual section on [autoloading](http://www.php.net/autoload) for more information. Alternatively you could instantiate a Loader object, and then pass it to the Router, either during the processing or during construction. This is called [dependency injection](http://en.wikipedia.org/wiki/Dependency_injection), and makes testing super easy. Anyhow, this is all just like, my opinion, man. 
I agree there are a few PHP4 era nastyisms still lurking around... Just at a glance, I'd like to see: * [PSR-0](http://groups.google.com/group/php-standards/web/psr-0-final-proposal?pli=1). There really is no reason to have require_once statements riddled throughout the library. It's inefficient and just bad in general. Use an autoloader. * Find some other way of doing this that doesn't involve globals: Bad: global $apiClient; global $apiConfig; I'd suggest having an ini / xml / something file with configuration options. See [Zend_Config](http://framework.zend.com/manual/en/zend.config.html) for a guidline. Good: $config = new Google\Api\Config('/path/to/config.ini'); Google\Registry::set('config', $config); * What's with all the apiClassName stuff? Using namespaces and / or PSR-0 as mentioned earlier should force out those weird-isms.. I'd expect a structure that makes a little more sense like: Google\API\Gmail\Class\Name or Google_API_Gmail_Class_Name if you aren't using namespaces (which it really would make sense to do here). * Make PHP 5.3 a minimum requirement. Let's keep raising the bar.
There should be no call to `exit` in your code. An exceptional situation occurred? You throw a meaningful exception. Your object is a glorified function, what's the use for it to be an object when it doesn't work like an object. Suggested way by giving a code sample: $route = new Route(); $dispatcher = new Dispatcher(); $dispatcher-&gt;dispatch($route-&gt;getMatchedController()); What you have is a deeply nested interaction between the Router and a dispatcher, while both do different things. If you indeed separate the two you could even add methods like these to these object $route-&gt;getCurrentRoute(); $dispatcher-&gt;dispatch(); // callable later as to do an internal forward on the context $route-&gt;generateUrl('controller_name'); I couldn't give you all the details to all that would be doable otherwise, I think there is just too much debatable about this and that you still need to read code from other frameworks. Edit: after rereading this it might sound as an arrogant response, it is not :)
Yeah, does seem like they're reinventing the wheel here.. That said, I'd like to see Google maintaining their own API library rather than Zend. Really, they should either offer to maintain it, or simply fork it and let Zend drop support for it once Google seems to have a stable library.
On first look I would change this line: $URI = $_SERVER["REQUEST_URI"]; Make it a class field or any other way you can supply the value yourself from outside the class (like passing it to the constructor). This way you can later implement actAs() function that will make your request act as a different request.
Is this what ORM does (properly I assume)? Honestly I don't even know if this code is novel or a travesty. 
Hi Chirag. I may have been a little harsh with my criticism. I forget people write code, not the entity that is Google. Let me be a little more constructive in my criticism. [PSR-0](http://groups.google.com/group/php-standards/web/psr-0-final-proposal) is an architectural standard for PHP5.3 defined, and accepted, by the community. PSR-0 binds folder structure to namespace/class structure thus enabling for auto-loading. This means inside an application one will never need to manage their filesystem resources with the programming resources. Additionally, only resources that are required will be loaded. 1 class per file. Libraries that are PSR-0 compliant can be dropped into anyones framework/application and the developer can hit the ground running with it. Once this standard is followed, Unit Testing becomes easier. PHPUnit embraces the PSR-0 standard as well. 1 file, 1 unit test mapped to 1 class. Every test is autoloaded, the code becomes simplified and easier to understand. Linking a Unit Test to a class via a @covers unlocks another feature of PHPUnit: coverage. A user can generate an HTML site showing what % (down to the line) of code you're covering with your unit tests, ensuring the code is perfect top to bottom. These issues are all architectural issues which can pretty easily be cleaned up. The choice of design patterns is very well thought out and is the standard of quality I would expect from Google.
For simple unit testing, I've found [SimpleTest](http://www.simpletest.org/) to be quite nice as well. To make a test, all you have to do is create a file, include simpletest and the class you're testing, make a test class that extends UnitTestCase, and then write your tests in that class's functions and run the file to test. I can get it set up and running in a new project in about a minute, and so far it does all the testing I need for standalone, non-framework types of projects (those tend to have their own testing solutions anyway). Having not used other PHP unit testing solutions, however, I don't know how they compare to this. I picked this because it looked like the easiest to start using.
Not really. An ORM is a lot more than generating a class. Some ORMs will do something similar to what you're doing in that they will cache a table structure to disk so it doesn't have to load it from the database each time. Some will even generate skeleton models for you so you don't have to do them by hand. An ORM is about more than just creating objects, it's about taking related data and (as the name suggests) mapping the data to classes that contain code which allows you to manipulate the data easily. In essence, an ORM creates a translation layer between your database tables and a set of classes meant to represent those tables. The [wikipedia article](http://en.wikipedia.org/wiki/Object-Relational_Mapping) has a slightly more comprehensive description you may find useful. You can also have a look at [Doctrine](http://www.doctrine-project.org/) or [Propel](http://www.propelorm.org/) as examples of popular PHP ORMs.
Ok. First you could read something like [Pro Git Book](http://progit.org/book/). Second, git is distributed, that means you all have all the repo and there's no difference between your repo and ANY other. When starting all you have is the master branch on your repo. You can push it to any remote repo, in your case will be github. In your regular work, you're all starting to work and let's assume you haven't started branching yet. You change some files, you commit the you push. Any other guy over there does the same. You made some more changes and you decide to push again, but you're getting a message saying you can't. So pull the changes from the server and unless you were touching the same files on the same lines, you get an automatic merge. Now you you can push and everything is good. Later you may find that you need to start branching. Maybe because you don't want the guys stepping on each other so much or because you've found some resource online saying that your master should be the production branch, where you store your stable code. Check how to create branches and merge them (not particularly difficult, because you're still keeping it simple). Now it's time to put the stuff on the server and see if it works, you could use ftp but since you decided to do things right, use a good scm and stuff, you're accessing it via ssh and installed git on the server. Now all you have to do is make a pull from master every time you have a stable release. A good branching model: [http://nvie.com/posts/a-successful-git-branching-model/](http://nvie.com/posts/a-successful-git-branching-model/) Tl;dr: you're default branch is master, github is a remote repository and you push into it, you can set up git in your server and pull from there, [Pro Git Book](http://progit.org/book/)
&gt; Is this what ORM does Sortof.. Your class is really a class that generates classes which use the table data gateway pattern (or something close to it) &gt; I don't even know if this code is novel or a travesty. It's a little of both. Whenever you've got programs writing programs for you, you know you're on to something, even if you're going about it all the wrong way. The problem here is you don't need code generation for this. Everything should be subclassed here. You only really need this: class MyTable extends DbTable { protected $_name = 'mytable'; } It's hardly worth it to even bother writing a code generation script for that, unless you happen to already have a code generation tool. DbTable should look something like this: abstract class DbTable { static protected $_cols; public function __construct($id,$dbh) { if (!isset(self::$_cols)) { // depending on how your db adapter works self::$_cols = $dbh-&gt;fetchAll("DESCRIBE TABLE " . $this-&gt;_table); // etc } } // insert() update() remove() methods } If you want a more well defined structure, take a look at Doctrine ORM. It already has all the nasty work of code generation for Entities done for you: doctrine orm:generate-entities Just so you know, with Doctrine, you really should only use this command once when you're starting to use Doctrine for a project with existing tables.. from there on, if you run this command, it'll overwrite your Entities which you may have modified to define certain relationships between tables.
preg_replace() returns an array if the subject parameter is an array, or a string otherwise. If matches are found, the new subject will be returned, otherwise subject will be returned unchanged or NULL if an error occurred. Is $theData an array?
REQUEST_URI may not be valid for sites behind a reverse proxy, sites not hosted on Apache, etc. Just something to consider. 
MySQLi has [prepared statements]( http://php.net/manual/en/mysqli.prepare.php) as well, so you don't have to escape all parameters manually. 
From what I can tell with my experimentation in PDO, its implementation of prepared statements is much cleaner, so I figure if I'm going to start using prepared statements I might as well just use PDO.
This ones supposed to be great http://www.tectite.com/
Sometimes the database you have to use/support is out of your control. But you're basically right--it's the perfect time to consider your options.
Look into RedBeanPHP. It does something similar to what you're doing albeit more involved. It doesn't rely on generating class code though. It uses the magic functions in PHP like __get and __set
A few things to note, some of which didn't seem to have been mentioned yet. - Why is the Router an Application? Does not make obvious semantic sense; on the contrary, sounds very wrong. - The constructor does work that can go wrong. Actually, it seems all the relevant work is done within the constructor; use of the class apparently consists of `new Router();` and nothing else. That's a code smell right there. - You're accessing superglobals and static methods all over. You could be injecting those dependencies eg. as constructor parameters instead. - grabURI() halts the whole script execution if something goes wrong. No error message, no nothing, just exit. That's not what you want. - process() has 4 levels of indentation and does a lot of switching while essentially delegating to your static methods, again. - There are a lot of comments that basically explain things that would be most aptly communicated by programming more expressively. That means separating your work into methods with descriptive enough names, for instance. - It's not a Router, it's like a very minimalistic FrontController, Router and Dispatcher in one. - There are no tests, and it's hard to make testable without reimplementation. I'm sorry to say but this work would definitely not be of passable quality in a code review. Please don't be discouraged; it's hard to get to the stage where you're doing things properly in PHP, because there's little good educational material and the scene as a whole does not encourage best practices. It just means you'll have to work harder to succeed.
[Swiftmailer](http://swiftmailer.org/) is the best email library out there. CSRF tokens seem to stop spam quite well. Essentially what you do is generate a token on the server side, store it in the session and put this into the form. You then check this during your post validation. It shouldn't work as well as it should, but I guess spam bots don't support cookies or sessions. You end up with a nice clean form (no CAPTCHAs) and it stops 95% of spam.
Make a form before you send the user off to google checkout that takes this data and just use google for the gifts?
Why is this not some kind of abstract base class?
&gt; everyone wants ActiveRecord Just thought I'd throw this out there.. many projects these days, including Doctrine2, have abandoned ActiveRecord in favor of DataMapper.
No, $show wont persist between requests. You'd have to use $_SESSION['show'] after calling session_start();
Yup, plus Google's API pretty much supports things that nobody is asking for. 
Damn How about $_GET and have javascript change the url?
Yo, I was able to get the dropdowns working.. You're going to need to use Jquery and toggleClass('open'). Also, make sure you're using the latest version of their CSS. As of today, it is 1.2.0 http://twitter.github.com/bootstrap/assets/css/bootstrap-1.2.0.css. I was previously using version 1.1.0 and it did not have any mention of the dropdown elements in the CSS file.
I found this once upon a time. uses Pear and GMail. http://stackoverflow.com/questions/712392/send-email-using-gmail-smtp-server-from-php-page 
It's what some classes of ORM do. I'm sure you can see it'd be much nicer, abstraction-wise, to not have to rely on code generation. Just think how messy it gets with things like version control systems, and different versions of whatever is doing the generation. So, some ORMs make you extend some sort of Model and implement various methods that return information about the database mapping. Even that's not too nice: it sure would be great if the user could extend whatever class they liked (and some model classes ought to naturally extend other model classes). So, finally, some ORMs just give you a manager instance to pass (whatever model) objects into. So, because pretty much every ORM takes a slightly different strategy, you can't really say your code is "what they do". More like, your code is a simple version of one of the most naive ways to do it. Some terms people use for the above: * Active record * Table data gateway * Data access object * Entity manager
Simple, naive.. ambitarded?
If I look back at recent projects to see how many objects were best described using a single table (rather than a combination of tables and relationships), I get, um, zero. I guess this could be useful for really simple stuff, but in larger projects I think it's rare for this to work unless for some reason you've completely denormalized everything.
It could work, but it wont be pretty and could create maintainability problems later on.
Does this do what you want? Or am I missing something? echo preg_replace('/&lt;p&gt;(.*?)&lt;p&gt;(.*?)&lt;p&gt;/s', '&lt;p style="float:left;"&gt;\1&lt;p&gt;\2&lt;p&gt;', $theData);
I don't think anyone is advocating an approach like that. Even if your application is backed by a completely denormalized key-value database, you're going to have relationships between keys.
I've had success with Paypal and passing custom information. You can collect key value pairs which are passed to paypal and included in the order details. And if you know HTML and can construct a form, you can do it without too much trouble.
Are you on another planet? I can easily write mysql queries that are fully compatible with postgres. I've already shown this to be true, you said you can't use `LIMIT` in mysql the same way other engines can, i showed you that you can.... and that somehow turns in to you proving me wrong? wtf are you smoking?
Thanks a tonne mate! I didn't want to use static methods, but for some reason, when I go $load = new Load(); in the Application class, it's not inherited in the child classes. Maybe I just don't understand inheritance yet :S Thanks a bunch for all this, I'll definitely be fixing it up.
&gt; Ultimate Framework: -Models with ORM enabled ActiveRecord with DB agnostic PDO implementation (yaml is not necessary imo) -Views that are template engine agnostic. -Controllers that can either be 'simple' or passed to a class. -Tools: Model maker, table maker, user editor, what else? I had to cringe at that so bad. It might be great for internal projects but I it smells like another Wordpress in the making with 2 second load times. ActiveRecord takes the slowest part of your system and makes it slower, especially when it has to be DB agnostic - which is essentially sacrificing speed because you couldn't be bothered to plan out your application and thus choose the best DB. View that are template engine agnostic? Really? So not only do you want to add a template layer ontop of PHP, you want to add a new one to the bunch that speaks all the other template languages? I really don't know, this sounds like something that a Java developer implemented and now want to have in PHP as well. My ultimate framework would be quite simple. Setup URI routing, plugin architecture and provide plugins and then otherwise get out of my way. Spend as little time as possible doing stuff so that my baseline execution speed isn't half a second already.
Found quite a lot of material on it here http://www.sitepoint.com/forums/php-application-design-147/datamapper-vs-activerecord-655080.html But it's odd because a lot of implementation look exactly like ActiveRecord. So what's the actual difference? Some libraries look as if someone discovered "DataMapper" but it does the same thing as ActiveRecord in their implementation of it without the changes that make DataMapper different from AR. Is this a fair observation?
Interesting, but I'm still kinda confused, what would the dispatcher do exactly?
Thanks, Do you have any material where I can read up on FrontControllers, Routers and Dispatchers? I'm not quite sure what the differences are between the two.
The longer they make your checkout process the more conversions they will lose. Present them with facts like this to keep their expectations in line.... or check odesk.
I actually thought it was r/php's consensus that PDO is the future in terms of database driver implementations. In the system that we have we have a DB class that is a MySQL driver and an ActiveRecord class that uses the DB class. If DB was rewritten in another DB language in theory it should work just fine. In terms of template agnosticism. I'm making an assumption that all templates system have a template file and a data array I can pass to it. If this is the case I can add a third variable that is simply $templateEngineType or something like that. The URI routing issue is actually solved by having a VFS. I don't really like having maps everywhere. Mind you I have a large social network that has a mapping file that goes below the fold but I've come to know a specific code pattern as much cleaner. Here's an example http://emr.ge/manual/controllers#3 
&gt; I can easily write mysql queries that are fully compatible with postgres. You forgot about my other example: string concatenation. I'm sure that there are other examples too. But even that doesn't matter, you're *presupposing* that someone is going to convert from MySQL to Postgres before they even do it. That isn't even close to reality. Instead, you're for more likely to have an existing code base with hundreds of queries written without concern for compatibility with other database engines. There is virtually no chance that simply changing your database connection string in PDO in a real project is going to work. And so far we're only talking about MySQL to Postgres but what about SQL Server, Oracle, and SQLite? What about going the other way? Even if you're right and switching is *pretty* painless, it's still much more work than switching database APIs. 
&gt; I actually thought it was r/php's consensus that PDO is the future in terms of database driver implementations. It usually is. But there's a huge different between using PDO and being database agnostic. Being database agnostic means you have to work around all the weaknesses of all the databases, while you cannot rely on any of the unique features since not all of the databases will have them. Using PDO with a single database driver is probably fine, and not slow since it doesn't force an ORM on you. &gt; In terms of template agnosticism. I'm making an assumption that all templates system have a template file and a data array I can pass to it. If this is the case I can add a third variable that is simply $templateEngineType or something like that. I don't see how this will allow you to be agnostic. You will have to implement a template class which understand the calls made against it and which can parse the different dialects used for loops and such. &gt; Here's an example http://emr.ge/manual/controllers#3 This really only shows routing once it's hit the controller, can't really say I'm a fan of the static class but it seems simple enough otherwise. I definitely agree that I do not like having URI to controller mapping files, routing should be consistent and just looking at the URI should tell you which controller is being loaded, not having to go look inside a mapping file.
nnooooooooO!!!!