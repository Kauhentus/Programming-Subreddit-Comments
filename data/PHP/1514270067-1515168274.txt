No offence, but your post and your comments are missing "30 years agile PHP experience required".
Htaccess files are (to my knowledge) only to allow web developers to easily modify web server settings without reloading the web server. Everything you do in htaccess you can do in /etc/httpd.conf or wherevere your apache config file lives. Htaccess is loaded per request, config on web server start. Or to answer more succintly: You copy your .htaccess directives into your Apache config files.
Ahh, excellent. i thought it might be something like that. 
I got one better mate, "7 years of PHP 7". But, I know what you mean. Nah, I wrote some of the buzzwords 'cause I need them. What I am looking for, is recreating the minimum feature sets of Sugar CE (Suite) but, using the latest paradigms. I am looking at introducing realtime push notifications, distributed task queuing through RabbitMQ and strategies for economic scaling. Also, this is not a corporate advert, rather a call to OSS devs, to start a GitHub project.
Badoo (who initially wrote PHP-FPM) is using Nginx on the thousands servers running their dating / social network site (which is within Alexa Top 500) for nearly ten years. So you can tell that it has been enough stress tested for both performance and security. You could also check the nginx usage statistics and find out that this setup is an industry standard for many years already, so you can tell your question and fears are a bit outdated. 
But where's the single point of failure in container clusters networking model (CNI) ?
Yes but the 20% performance gain is bullshit if you can't scale.
If I remember well, OpenLiteSpeed does cache the 'htaccess' file to enhance performance. After all those years, Apache still don't do that? (Curious about it)
At https://opentechcalendar.co.uk/ we list tech events for 5 years or so. We have a massive Open Data focus - our data is reused in many places. When a lot of people hear about the project they go "oh, you can just import feeds". While we do a lot of that, it turns out most user groups are pretty bad at providing machine readable feeds that they look after and update. To be honest some user groups are pretty bad at updating their own websites, let alone provide a feed. So I guess my plea to anyone involved with a user group (running or just regular attendee) is please make sure your group provides a Open Data feed (pref in iCal/iCS format) and please make sure it is kept up to date!!!! Don't just add one recurring event and think "job done" (Every year I have to contact the group that just set up a recurring event for the "4th monday of the month" and ask "Are you really going to have an event on Christmas Day?")! Your regular attendees can import it straight into their personal calendars and projects like mine/OP's can take your events and spread the word. 
How does scalar provide possibilities for the future? 
That's good to hear, I use Apache in production and I disable AllowOverride for security reasons - I didn't even think it might actually result in an actual speedup. I heard that mod_php is faster than PHP CGI though, which is faster?
Never heard of it before. Are you saying that you can add/edit/delete an .htaccess file, and it takes at least a few minutes to notice and change behavior?
CGI is old and I'm not sure if it's still supported today. FCGI vs mod_php, I doubt if mod_php can work faster. If you only use Apache for PHP requests (static assets are served by. CDN), mod_php might be useful. However, note that you have to use prefork MPM if you want to use mod_php. Http/2 doesn't work with prefork, so you are losing a lot of front end performance by using mod_php : https://http2.pro/doc/Apache
I work for an agency which manages lots of legacy projects. All the old stuff runs on apache. All the new stuff runs on nginx and php-fpm with docker. The first thing we do when we have to pick up an old project to do more work on is migrate it over to docker. Never gives us any real problems.
Do you have a resource where I can learn about optimizing PHP 7.0 and Apache 2 on Ubuntu 16.04 with Cloudflare on the front end? I'd love to learn more about opitimizing but I'm not sure at what point this becomes pointless micro-optimization.
Exactly my point. Sometimes these RFC's makes me wonder.
It's bullshit only if you know for a fact you need to scale in *that* way. Because there are other options: - You don't, actually, need to scale beyond one machine (which kind of fits most of my small-to-medium business projects). Machines are fast as hell these days, especially if you use the resources wisely, rather than brute-forcing through problems. - Your architecture is "horizontal" in terms of PHP+Redis, as in, you add PHP+Redis machines, where every PHP instance is paired with a local Redis instance, and the machines communicate via a higher-level application protocol, instead of relying on clustered Redis. So you know, different needs, different solutions.
Hmm https://i.imgur.com/13KyjiR.png ¯\_(ツ)_/¯
I dont take any notice of the "dabaits" they all bicker over which is fastest when either framework fastest response is about 100ms. When my framework with a full app built on it responds in 10ms.
Caddy uses more ram/cpu and handles less requests than nginx. It is targeted at beginners, which the OP does not sound like if he already is using mod_event and phpfpm and dealing with PCI compliance. nginx is trivial to setup for phpfpm/PCI compliance for non-beginners Finally, you have to pay to use caddy in commercial applications $25/month per instance. &gt; For example, if you have 2 instances of Caddy in production and 3 web developers using Caddy locally to build your website, that's 5 instances. If you are a small to medium time site, the cost of caddy can easily be more than your server costs. 
[removed]
The best way is to do: FallbackResource /index.php Inside your apache config and let the PHP app handle the routing for you.
 ...on mobile That was the whole point. Merry christmas 
This is a thing?! I'm going to give this a try. Thanks. 
Yeah, you are right. The bottom type is the empty/null set and null is just null. It has a scale of one where the one thing is null. I guess our void is what comes closest to the bottom type. Oh well, a string is actually also not scalar, a char would be. Simply because it does not go along a single scale. I guess that we then just have to live with the special definition of scalar in PHP, after all it is properly defined in the manual.
If vim is configurable, tell me how to make cursor in vim stop following current viewport.
&gt; nor does it promote anemic design. So, what it used for? Give me real use cases. I really don't understand usecases when I need `scalar` typehint or `Convertible` interface.
I am not sure to understand what you mean. Can you explain a bit?
If you scroll down the page, you will see cursor is at top of the screen. AFAIK no way to disable that.
&gt; “I run a small hosting provider with more or less 1535 customers and I use Ansible to automate some operations to be run on all servers,” wrote Marco Marsala. “Last night I accidentally ran, on all servers, a Bash script with a rm -rf {foo}/{bar} with those variables undefined due to a bug in the code above this line.” 
&gt;Finally, you have to pay to use caddy in commercial applications $25/month per instance. No, you're misinformed. You only need to pay if you're using a precompiled binary. If you build it yourself (or run it in docker which is the same as building yourself) then you can use it commercially. It's a dual licensed project. I'm not saying it's a fit for everyone, but I think it's still worth taking a look at to simplify setup of a lot of web server features (http2, auto TLS, cipher config, etc)
You can't... but you're using Vim the wrong way if that causes and issue.
Scroll with ctrl-e &amp; ctrl-y to hold the current cursor position.
it is currently tied to the viewport, but you can re-center the screen using zz, or set the scrolloff option, or use marks or use c-o/c-i to jump back to last/next edit, or use the c-y/c-e commands to manually reposition so the cursor position in the viewport isn't really a hassle since you can always put it where you want it and get back to where you were before
I have config dozens of servers with letencypt's bot and there was not a single error on nginx setups. Today I had to install a certificate on an Apache configuration and due to unknown errors, it took me 1 hour for manual install. I still manage this server with Apache due to compabillity, everything else is on nginx. To be honest, Apache sucks in terms of configuration. 
and if you're trying to look at something in the same file, but edit somewhere else, just split the window
I went to http://packagist.org and typed "ebay" and found this https://github.com/davidtsadler/ebay-sdk-php
Just a simple wrapper class I made for MySQLi that's mostly a CRUD wrapper with very concise methods for insert, update, delete, select, transactions and closing the connection. I'd love to add some more MySQLi specific features (which is why I chose that over PDO), however. In fact, I was planning on adding async MySQL, but realized that you can't do it with prepared statements oddly enough. I'd love to hear some honest feedback about it. I know that I'm slightly reinventing the wheel, but I wanted to focus on making to sure to not break up the SQL queries in any way. I'd be happy to make a PDO version of this as well.
Thanks, looking forward to tinker with it next. 
Ya, of course most people use something like Amazon ec2, Microsoft Azure, etc. But I prefer .htaccess, since it's easier to version control it. I suppose not entirely necessary, since I rarely make changes to it. But still, I view that as an advantage.
Some feedback 1. Methods are not that concise, actually your code is quite WET, with several certain rows repeated in the every function. Come on, make a protected method for them. 2. `if(!$this-&gt;typeRequired)` looks inconvenient. What if I want some queries with and some without types? Why not simply test whether types are actualy set? 3. [Private mysqli isntance](https://phpdelusions.net/pdo/common_mistakes#protected). 4. all these return types look ugly. I would create separate methods for the every return type. 5. If you want to compete with PDO, why not to add several methods to mimic some useful [fetch modes](https://phpdelusions.net/pdo/fetch_modes#best) 6. Transactions are not always just a bunch of queries to be run in bulk. Sometimes you need to do some intermediate calculations. I would rather call this method `bulk()` as it always makes sense to run multiple queries in a transaction. Whereas for transactions I woul use native mysqli methods 
Are you 100% sure? https://caddyserver.com/products/licenses It sounds like if you are using caddy's source code in your own open source code it is free. But if you are using it for commercial purposes you are required to have a license &gt; **Is an active subscription required for commercial use?** &gt; Yes. We require a current subscription while you are using, distributing or maintaining Caddy in a commercial context, **even if you are no longer downloading it from this site**. This ensures that we can serve all our customers reliably. My bold highlighting is what is confusing.
That's for businesses. It's 89 Euros a year for individual customers.
7. update and delete are actually the same. why not to just call one from another to reduce that code duplication? 8. throw in insert and you will see that actually you need just a generic query() method to run all this stuff, with insert_id taken from the connection. 9. What if I need to run CREATE TABLE query? 10. See my [PDO wrapper's example page](https://phpdelusions.net/pdo/pdo_wrapper#samples): it can be run in one take, as a whole script, not as separate snippets (and it shows that CREATE TABLE is possible) 11. different return types from insert() is a HELL. that's a tradeoff for a "dead simple" wrapper, where "simple" stands for the "simple (or rather) lazy in its creation it but lacks any usability in the every day *use*".
Come on, you don't need a PDO version for this because PDO has a WAY better architecture and you will just spoil it with your wrapper. All you need for PDO is a generic query function, that's all. Everything else already exists in PDO and in a much better form
You can always version control your central apache config ;)
1. I meant concise from the user's point of view. I believe you're referring to insert/update/delete. I know exactly what you mean, and I was going to make those methods DRYer, as they are all essentially the same. But I figured it's such a short amount of code, it really doesn't matter. But I do agree that you're technically correct. I'd be glad to change this. 2. Thought about this too, but didn't understand why someone would do this. I'll strongly consider this. 3.While it's a really good idea, I'm a little torn about it, since my goal is to abstract away from using other MySQLi functions in the class. I would prefer to just add it feature by feature and add my own method. But I definitely see the huge upside of what you're saying. I'll take this into consideration. 4. I'm a bit confused by what you mean by this. For instance, in a select function, wouldn't you just want it to return your array or object? What else would you need? 5. I like this suggestion. I currently only showed how to fetch a column, but I'd be glad to add more of PDO's fetch modes. 6. That's true, I'll try to think of a good way to account for this as well. Thank you so much for your suggestions. They are greatly appreciated. 
Your methods are not really CRUD. What you have here is just a single piece of code duplicated in the several functions. I would call CRUD a completely different approach that works based on some considerations and writes primitive queries for you, like Book::delete($id); when calling a database wrapper's query() method with `"DELETE FROM _CLASSNAME_ WHERE _ID_FIELD_ = ?"` under the hood. 
Hello, here is a basic MVC patern project, but not sure it respects all the good practices: https://github.com/sewelseb/MVC-patern
in (4) I mean that $row = $db-&gt;assoc("SELECT * FROM t WHERE id=?", [$id]); is better than $row = $db-&gt;query("SELECT * FROM t WHERE id=?", [$id], "singleRowAssoc"); in terms of code completion, usability and overall usability. though personally I'd prefer PDO way $row = $db-&gt;query("SELECT * FROM t WHERE id=?", [$id])-&gt;fetch(); BTW, calling your instance $mysqli is another pitfall. 
No comments or doc blocks. Hard to read code with no real standards. 
I view better as highly subjective and an apple-to-oranges comparison really. If you compare my examples to a PDO version, you'll see that you'll be saving a lot of lines of code. I think I accounted for most use cases, but of course I'd be happy to add more. Obviously a wrapper like mine would be less versatile. Here's an example showing the differences with selecting an associative array. The difference with transactions is preposterous. ``` $stmt = $pdo-&gt;prepare("SELECT * FROM myTable WHERE id &lt;= ?"); $stmt-&gt;execute([5]); $arr = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC:); if(!$arr) exit('No rows'); $stmt = null; print_r($arr); Simple MySQLi: $arr = $mysqli-&gt;select("SELECT * FROM myTable WHERE id &lt;= ?", [5], 'assoc'); if(!$arr) exit('No rows'); print_r($arr); ``` Of course you don't necessarily need `$stmt = null`, but if you're planning on using PDO's way of doing a pseudo-close for the database with `$pdo = null`, you must close your statements as well.
What are talking about? The docs are extremely clear and I even showed a bunch of examples &gt; and by your examples, this class requires more code to use then the standard mysqli class No it doesn't. It's actually not even close. I'd be happy to prove you wrong. Then again, it's unclear if you're just a troll, because you're the same clown who wrote [this comment](https://www.reddit.com/r/PHP/comments/7d6hnn/mysqli_prepared_statements_to_prevent_sql/dpw5mmb/) claiming I plagiarized my article
http://pinba.org/ is pretty good, but it is quite difficult to install. https://github.com/intaro/pinboard is a good add-on to pinba to realy do monitoring (pinba is more for exploration in performances since it is based on UDP and only keeps the latest data, 15 min by default i think)
I can actually make make both ways be possible. Maybe the former being syntactic sugar for the latter. &gt; BTW, calling your instance $mysqli is another pitfall I can change the name pretty easily. Would you mine clarifying the issue? Just that it's confusing for a reader or do you mean that it could interfere in some way? 
Ya, it's really a pseudo-CRUD wrap. &gt; when calling a database wrapper's query() method with "DELETE FROM _TABLE_NAME_ WHERE _ID_FIELD_ = ?" under the hood. This actually goes against my philosophy of keeping the SQL queries intact, so I'll have to politely disagree with this suggestion.
Actually he is right about he code style, it looks very 2000x-ish, nobody writes like that nowadays. Doc blocks stand for the online annotations,, google for the phpdoc. Spacing makes a frugal look ascwell.
I'm honestly curious about the lack of empty lines. A little whitespace and some docblocks would go a long way here for readability. 
These things aren't isolated. Even if an attacker can only upload to your uploaded images directory (which lets say only allows .jpg uploads) for example, if they can make the .jpg file extension executable and therefore get RCE. Or they could send a particular file with a `application/javascript` mime and bypass even a well done CSP. The point of "low impact" attacks usually isn't that specific attack, but that it gives an opportunity to escalate to higher impact attacks. These things happen all the time on badly secured joomla/wordpress sites, I've personally cleaned at least 20 sites where the initial hole was a .htaccess uploaded into a image directory via a bad plugin.
Like I said in my comment, I'd happy to add PHPDoc, but not sure how entirely necessary it is for something so short like this. Also, my docs are very clear in the readme, but it would be no problem at all to add proper documentation and comments. &gt; it looks very 2000x-ish, nobody writes like that nowadays Please elaborate what you mean by this. I don't really see what's wrong with my code.
That's just my style, but doesn't matter to me either way. I'll add PHPDocs, like I said in a different comment. I just didn't realize it would be necessary for such a tiny class less that's less than 100 lines and is very well documented in the readme. But like I said, I'll take this suggestion. Thanks. 
Yes, 100% sure. I'm involved in the project's maintenance. They're really just licensing use of the build server because that's the largest cost for them. See this section: &gt;If I build Caddy from source, which license applies? &gt;The source code is Apache 2.0 licensed. It requires that you give attribution and state changes. Building from source does not give you permission to white-label Caddy in your own work. You will also have to manage Caddy plugins on your own. The section you quoted is more about the subscription being active, i.e. if you downloaded a licensed version, you need to also keep an active license until you no longer use that build. That's part of the commercial license and not part of the source code license which is more permissive
Why do people work so hard to make an IDE out of a barebones editor, when IDEs exist?
Like I said, a generic query-and-params function is the only thing that PDO lacks. One generic query function is not like a whole class with several functions of repetitive code and inconsistent usage. Hope it is clear now. 
There's nothing "wrong" with the style, it's consistent with itself which shows a good attention to detail. There are standard style guides now though that are very widely adopted: - http://www.php-fig.org/psr/psr-1/ - http://www.php-fig.org/psr/psr-2/ They didn't match up my own style much either, I really liked tabs and inlining `if`s, but the benefits of using the standard styles are worth it: - Don't waste time thinking about formatting, there's a right way to follow - Most formally published PHP libraries follow the standards, and it's nice to get used to one style and see it everywhere -- that helps your brain get better at pattern recognition - Automated format checkers are easy to configure to enforce consistent formatting (VSCode + PHPCS is awesome) - It's easy to enforce consistency in contributions - When you copy code from examples / other places its more likely to not need reformatting - They're pretty thoughtfully constructed around preventing common accidents from the experience of people who have spent a lot of time maintaining PHP projects with a lot of contributors You can use the `phpcs` command line tool to do 99% of the work reformatting your code to PSR standards
+1 to just having two query wrappers: - `query($sql)` for SELECTs that provide convenient interfaces for reading results - `write($sql)` / `command($sql)` / `nonQuery($sql)` for everything else, which all have affected_rows and maybe insert_id as their result
nothing work. how we can add a user group? backend link return internal server error. and more...
I'd agree there's still some value in wrapping PDO, but he has a good point in that you should just focus on building on PDO and forget about `mysqli` Cut yours down to ```php $arr = $myPod-&gt;queryAssoc('SELECT * FROM myTable WHERE ID &lt; ?', 5); ``` You can use the new spread operator of `func_get_args` to just accept the rest of the args after the query as params and not need to wrap it in an array
This is the only reasonable answer. Vim is a text editor and not an IDE. Throwing 10,000 plugins at it and calling it an IDE is just stupid wrong and completely opposite to the Vim mentality.
With PDO it's much better, you just return PDOStatement and from it you can have anything else - fetch of any sort or num rows or anything else. So you actually need just one function for all. 
Single quotes?
Not my project. I added myself a while back and just stumbled upon it again recently and noticed my state was still empty so I decided to promote it on Reddit again. Didn't realize it was broken.
fixed
Merry Christmas!!
Yeah, don't know if it's exactly that but they feature it.
Thanks a lot! I have started working on another template for now, but if I fail at that one, I'll try yours instead.
Some people like working on a remote machine, and carry a lightweight, not-very-powerful (heck, webstorm is slow even on my i7, 16gb ram, 1tb ssd) laptop with them.
As a New Year's resolution, how about we add the week to the title of the PHP Weekly Discussion(Month)? Better yet, just rename it it to the Monthly discussion since there is seldom much traffic. And yes I know this issue has been raised before.
EH, but it needs to be obvious to people when there's new comments, so I disagree. They should sort it by new however.
PhpStorm works flawlessly on my late 2011 MBP 8GB RAM, except when it's indexing heavy vendor folder... Consider checking your install and maybe checking your system / plugins that you use. 
 &lt;?='You too!'?&gt;
/u/MaxGhost is right about the licensing. It's open source, but you got to build it yourself if you want to use commercially. It's an uncommon pattern.
The short answer to this is because VIM is an entirely different editing experience than other editors (non-modal editors). Sure, there's a steep learning curve to VIM, but after you get used to it, honestly it's great. VIM emulation in most other editors simply isn't that great. Sure, IntelliJ has a VIM emulator, but some stuff is just different. When you get used to all of the things VIM provides, having any of it be different just sucks. A lot of people do use VIM mode in PHP Storm, which is a total possibility. However, the more tied into VIM you are, the less you'll be able to use VIM emulation.
Matt did an awesome job with the server at first, and I have even made non-code contributions towards the project and wrote a configuration example too, IIRC. I suppose the project required a lot of time from the author and expenses hiked to maintain servers and whatnot. Caddy isn't really faster than nginx. Not even Apache with certian configuration. The only edge Caddy has is the easy configuration. TLS certificates are obtained and installed automatically, and has sane cipher suits with HTTP/2 enabled. I personally don't use Caddy because it's not that hard to enable HTTP/2 in servers ([Apache](https://http2.pro/doc/Apache), [nginx](https://http2.pro/doc/Nginx)), and Apache will soon has a module to do the same Caddy is doing with LetsEncrypt certificates. Cipher suits are easy to control and are hardly changed once setup. Mozilla's list is fine for me. 
vim can be more lightweight and supports multiple languages.
There's no toxicity at all here. I'm pointing out a literal **fact** that Vim is a text editor and not an IDE... Why everyone wants to always cry about that is mind-blowing to me.
&gt; These things aren't isolated. Even if an attacker can only upload to your uploaded images directory (which lets say only allows .jpg uploads) for example, they can make the .jpg file extension executable via .htaccess and therefore get RCE. Sure but if they're able to modify/upload an .htaccess, they're probably able to modify your PHP scripts as well. It's not immediately obvious to me what attack vector is opened up here by allowing `.htaccess` files. Sure they could do what you're saying but it would be missing the more fundamental issue that an untrusted part was able to modify files on your server. If your script allows arbitrary file names to be specified, what's to stop them from just dropping in their own version of `login.php` ? Or a script that runs some sort of `sed` or `echo` command against the aforementioned `login.php`? Meaning the hole only gets fixed when you stop trusting everyone on the internet at which point `.htaccess` becomes a non-issue.
TIL and that is about as good as you're going to get. Routing is largely an application issue anyways so having the app do it makes more sense then building it into the web server config that someone else probably manages.
I'm confused. Why are people, in 2017, still writing SQL-CRUD wrappers in PHP? Don't 7,403,102 of these already exist, some of which are very good. ie: https://github.com/ThingEngineer/PHP-MySQLi-Database-Class 
https://www.elephpant.com/ this would be nice
1. I was thinking the same, but felt the code was so short already, it wouldn't make a huge difference. But you're correct that it's a bit WET. I also wasn't certain if I'd be doing any differences for each method. In fact, I was even considering making just one method for insert/update/delete. I'll likely do this. 2. 3. You actually technically can if you don't pass in a parameter to to the select method, but I didn't do it the more efficient non-prepared statements way. On a side note, I'm actually against the philosophy of creating a table in PHP over using a GUI like Sequel Pro. But you still can do it. I suppose I could add the non-prepared statements way too. 4. 5. I agree with this and it's something I've been going back-and-forth with. Consistency is definitely preferred, so I'll make that change
Thanks for the advice and detailed comment. I see what you're saying. Since this is a public repo is would make more sense to stick to the common style guides. My thoughts regarding this are the same about JS Linters and JavaScript styling. I generally stick with it, but there are certain things I like to do my own way if I'm the only one coding it. In both languages, inline or implicit `if`s are always discouraged, but I sometimes like just doing it in one line. In the end, I see your point, especially since once it's on a public GitHub repo, it's not just my project anymore, so it would be a good idea to stick to common styling. Thanks again. 
Interesting idea, and some of the things you said were things I considered
https://www.humblebundle.com/books/be-a-coder-books Referral free link.
I'm confused that you don't understand that this is an ORM, while mine is just a simple wrapper class.
Shit yeah! That sounds excellent. How would index.php in this case retrieve the clean url? Would u be able to use $_SERVER?
It's the greatest example of cooking vim for PHP. I used to do it myself a year ago, and found that even commenting code with mixed markup of HTML and PHP is a big task that was not solved (in my opinion, maybe I should google better). So I decided that it's better to use phpstorm + ideavim... hmm, maybe after this post I should give vim another chance
&gt; Always wanted to make a PHP IDE out of Vim? no.
It's not lightweight if you have to throw a ton of addons to it to make it an IDE.
Yes you can, if you're not using a framework to do this then I'd recommend at minimum you include symfony/http-foundation and then you can create a request object with a call to `$request = Request::createFromGlobals()` after that you can ask the request object what the current uri is.
You are making an amateur mistake, so don't get frustrated. Your first attempt here at a query builder isn't bad; however it is pointless in PHP today. There is just so much wasted code sitting around the internet causing noise because people don't take 5 minutes to google and see if someone has already built the project in mind. Most ORMs have builders. See Laravel's DB builder as an example. What you are offering is nothing remotely helpful to what is already out in the PHP community. You can call it a "wrapper" if you want, but if you took what you are doing, it's the start of a query builder (of which there are MANY) -- yes, that class I linked is an ORM, but fundamentally the ORM's have builders used to build queries. In fact, there is a good one right there in that library as well. So why not "build your own dead simple one" ?? -- Because there is a 99% chance no one will use it, and in the 1% change that some poor soul pulls in your code, depends on it, and then decides to pull out of it in 1-2 years, they are stuck with something that has zero community support, zero tests, zero anything new. So if you are still confused: ORM's and query builders are two different things. But most ORM's have a query builder (which is what you are attempted to do) -- that is far better, far more tested, and far more documented. 
It assumes that all user-defined types are objects. That's not a good assumption to make even though right now it is true. What if we had `enum`s that aren't objects? What about a named type like `type num = int | float`? It's unnecessarily restrictive for future additions. When we add general covariance and contravariance then we can support `object`.
I mean, I'm just playing around to see what's the lightest weight machine I can code on comfortably, and I use PhpStorm in my day job. That being said, I've had a machine running with nice highlighting, psr-2 linting, alright Auto completion, file tree and xdebug integration where the total memory usage has been &lt; 80mb. OS included. It's not something I'd use in my day to day yet, but it's to see what can be done
&gt; I'd recommend at minimum you include symfony/http-foundation and then you can create a request object Interesting, why do you suggest this? I don't use frameworks if I can help it. 
We can go even smaller! Put the following into a file called `hello.php`: Hello world Run it with `php hello.php`
You're right, what an amateur mistake for me to make a wrapper that took me less than hour to make in in my preferred format. I already conceded both in the comments and in my readme very early on that I'm slightly reinventing the wheel (obviously I've seen other wrappers or ORMs, like Laravel's Eloquent and the one you posted with similarities). That class has some support for keeping the SQL queries intact, but it's quite limited and obviously not its focus. And my way of doing transactions is far more concise too. I honestly couldn't care any less if people are using it or not. I made it public for anyone who wants to use it, but it's mainly for me. I personally like how set everything up and will make me more productive with a very lightweight wrapper. &gt; that is far better, far more tested, and far more documented I tested it out, and it's so short it wouldn't be difficult at all to figure out problems with it even by just simply reading the code. I'd love for you elaborate on "far more documented", when I gave tons of useful examples along with good documentation. 
"All his plugins are worse trying" - typo i think.
I still think they screwed up by making it &lt;?php declare(strict_types=1); instead of &lt;?php declare(strict_types=1);
Why do you think that Enumerations aren't objects?
Then the 20% performance factor is only for small-to-mid (I would argue against mid) projects. Which doesn't represent such a huge gain considering. Aside from scaling, by not clustering Redis you do not ensure availability at all times and there could be downtime, causing disruption to your business as well.
In retrospect, what I wrote sounds like I was being an ass. That was not my intent, so I apologize. That being said, I still think that these codebases like this sitting out on the web continue to create noise, because it's really just not good practice to use stuff like this in real production applications. There is a reason that the code you wrote doesn't exist in the better libraries. (actually several reasons). As a community, we should be constantly pushing for coverage, proper docs, and trying not to reinvent the wheel. Imagine the benefit if you had just updated or did a PR for existing libraries where they need help. Anyway, sorry if I came across as an ass.
Because VIM is very very fast and great with keyboard's shortcut. So, if you know use it properly, it is damn fast. 
&gt; Sure they could do what you're saying but it would be missing the more fundamental issue that an untrusted party was able to modify files on your server. Any web application that allows you to upload images (say a profile picture for example) usually requires you to allow that in some fashion. I'm just saying that many systems do it the wrong way and allow the client to choose the filename and expose the resulting upload in bad ways. This gets a lot worse when using a webserver that determines what to execute based on files in the same (user-manipulated) folder. I'm not saying that this is a inherit security vulun in apache, but with the default config combined with some of the most popular CMS'es it is. This issue would not be there if not for `.htaccess`. People will write bad code that looks like swiss cheese anyway, but let's at least make the defaults better.
No worries, dude. This is Reddit after all, I'm used to it. What I'm not used to is apologizing for it, so thank you for that. You do bring up some excellent points though. I just wanted to make a class to make me more productive. Since I will be using this, I will maintain it even if I'm the only one to. I just figured since it would be fairly easy, I could make a wrapper class that's most useful to me, even though I'm not creating anything special or new.
Well assuming your application is instantiated via something like... $app = new MyApp(); then you can inject that app with the symfony/http request $request = Request::createFromGlobals(); $app = new MyApp($request); Then in your app you can ask the request object what the uri was by calling `$uri = $request-&gt;getUri()` The benefit of this is you can in test environments or any other occasions necessary spin up a version of your app without depending on the globals. $request = Request::create('/path/to/any/uri'); $app = new MyApp($request);
I have 15 plugins or so (including some “light IDE” stuff), and it still consumes next to no resources and remains fast. I think that qualifies as “lightweight”. As a bonus, it’s installed everywhere and I can have it fully configured in about eight seconds with a `git clone`
You are drinking too much “scaling” kool aid. I didn’t say “don’t plan to scale” I said small to medium business projects just don’t need to scale beyond one machine to handle the required scale. Planning to scale when you don’t need it is just as stupid as not planning to scale when you do need it. But keep telling me how stupid it is, as if it will somehow cancel my 20 years of successful and cost-effective projects in the industry. 
Oh I see, I'm not an app developer. I just build websites using PHP, often stuff to do with databases, often on an intranet. Thanks for your help!
Always assume you might be missing something, and that the way things are done might be done for a good reason. The authors will be less defensive and more apt to reveal their *well reasoned decisions to accept technical debt* (shameful hacks). Then you say “I wonder if something more X would be more clean/testable, mind if I try that on this next feature instead of copying this pattern?”
I put the same app on a basic apache server and on a basic nginx/php7 server. The apache one started slowing down at 5,000 concurrent users and went offline at 7,500 (give or take). The nginx one handled a peak up to 10,000 without issue. I'm a noob at maintaining servers and configuring either nginx or apache but that huge change in load impressed me.
You *sort of* can't do that, because what if the `.htaccess` changes between one request and the next? You could do something like use `inotify` on Linux to try and watch for changes in relevant `.htaccess` files, but to quote the man pages: &gt; With careful programming, an application can use inotify to efficiently monitor and cache the state of a set of filesystem objects. However, robust applications should allow for the fact that bugs in the monitoring logic or races of the kind described below may leave the cache inconsistent with the filesystem state. It is probably wise to do some consistency checking, and rebuild the cache when inconsistencies are detected. so you're looking at a lot of work if you want to try and implement and verify the correctness of such a thing. Much, *much* easier to just specify that the user needs to ask the server to reload config as-needed (and considering that the draws of shared hosting are really watered down in a world of $5/mo VPSes that are much easier to admister than they once were.
&gt;For example, in apache every request spawns a entirely new process, while in nginx it just creates a new thread. Apache hasn't been limited to one-process-per-request in a long time. https://httpd.apache.org/docs/2.4/mod/worker.html &gt;while in nginx it just creates a new thread. Actually nginx and it's big hype for its speed had to do with avoding the thread-per-request model and doing an event-based system with unblocking sockets/interactions. https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/
Not sure why nobody mentioned https://spacevim.org. 
A lot of people only want a subset of the normal IDE features, and in some cases I know people that do a lot of work over multiple different languages/systems and trying to wrangle one IDE for each is far more annoying that trying to work out relevant plugins for each in something like vim or emacs.
The binary + all config + all runtime data and cache data clocks in at &lt; 40MB and it peaks at maybe a few hundred MBs of RAM. That's when working on multiple files with a good few plugins for intelligent autocompletion, linting, a fuzzy file finder and similar. It takes maybe 200ms at worst for it to do a cold-start and be ready for input.
I don't mean lightweight in file/memory size.
I'm not suggesting we copy these languages but in C, C++, C#, Hack/HHVM, and probably more enums do not have object-like capabilities. On the flip side there are languages where they are object-like. My point is that getting variance with `object` has limited value but drastically constraints our future. That's not worth it.
So in what sense then? UI bloat? The overwhelming majority of my screen is the text I'm editing. Startup time? As already said: it's *At worst* a small fraction of a second - a barely noticeable delay. I can't really imagine what metric you can think of that makes n/vi/m not lightweight compared to even the smallest of IDEs. There are plenty of valid criticism, but how is its weight one of them?
All the bloated config in public/index.php why not handle it in clean related config files in a config directory outside of public for example?
A legitimate point. Having seen many of the laracasts.com videos, that guy seriously loves sublime and the numerous plugins that turn it into a pretty good editor.
Your way of doing things is outdated and not preferred
Yikes
&gt; Any web application that allows you to upload images (say a profile picture for example) usually requires you to allow that in some fashion. Not really, I mean [this](https://www.tutorialspoint.com/php/php_file_uploading.htm) is a basic upload form. The upload gets saved to a temporary directory with a random file name and the original filename is saved to `$_FILES` and can be sanitized however you want. That's partially how websites enforce certain image types, by policing the file extension. At no point does the user supplied file name _have_ to be what the resulting file is called. You can write PHP to do it like that (such as with what I linked) but you can easily see where you can police uploads using pretty much any criteria you want before they make it into that upload directory. &gt; I'm just saying that many systems do it the wrong way and allow the client to choose the file/pathname and expose the resulting upload in bad ways. Which is fair but that's why I was saying blaming `.htaccess` is like blaming HTTP or `sed`. Those aren't the issue, if this is happening it's because you're trusting unsanitized user input to begin with. That's still going to be a security risk and getting rid of `.htaccess` just means whatever they end up doing won't have to do with `.htaccess` specifically. &gt; People will write bad code that looks like swiss cheese anyway, but let's at least make the defaults better. I'm just saying that for your example the real issue is that the developer is using unsanitized user input. In your example, the `.htaccess` doesn't introduce any new insecurity, it can just incidentally be part of what they leverage to get a payload out. At that point the `.htaccess` isn't any more dangerous than the `login.php`, `index.php`, `myscripts.js` or whatever else they're also going to be able to overwrite to do whatever they want. I mean, I guess you could say it gives them a non-obvious place to hide their exploit code, but at that point it's more about there being multiple source of "truth" which has security drawbacks like that. So even then it's not really `.htaccess` per se as opposed to the general idea that single sources of truth can be secured.
Is there an easy way to setup private packages?
Wrong. With plugins you turn VIM into an IDE. Sure bare-bones VIM is just an editor - but using its features and building upon them you can make it as powerful or more so than any IDE off the shelf. "The pervasive Unix philosophy of "everything is a text stream" enables developers who favor command-line oriented tools to use editors with support for many of the standard Unix and GNU build tools, building an IDE with programs like Emacs[7][8][9] or Vim." https://en.wikipedia.org/wiki/Integrated_development_environment sprinkle in some tmux and you'll be coding circles around your typical "IDE" user.
**Integrated development environment** An Integrated Development Environment (IDE) is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools and a debugger. Most modern IDEs have intelligent code completion. Some IDEs, such as [NetBeans] and Eclipse, contain a compiler, interpreter, or both; others, such as SharpDevelop and Lazarus, do not. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Yeah you can either use vcs repositories feature or the path repository. Path means that the git repo needs to be at the same relative path for everyone at your company, but it makes for fast file copies when running composer install. On the other hand, vcs is flexible, but slow because it needs to look at all the tags in your repo (that's just how composer is implemented right now).
You can set up a satis server that houses all of your packages. That way you only need to manage one repository and one ssh key. It's how I handle private dependencies for my company. Satis is very easy to set up with a static config. Going beyond that using bitbuckets API should be something you invest time into after you decide if this solution solves your problem.
From what I know, docblocks are also used by IDEs such as PhpStorm to make it's magic. Will decluttering it affect such IDEs?
Not just IDEs also affects readers and documentation tools in my opinion. I wouldn't call them visual noise. Yeah I know it's a string, it's already hinted in the code but somehow my brain sees them differently. I mean, I don't read code like how I read docblock, and vice versa. I believe it affects my understanding. It's hard to tell in English but I see docblocks as a reading guide, not just another shape of the code. Also, I use full namespace in docblocks, it helps a lot, especially with the classes that share the same name but different namespaces. Maybe no extra value but also no harm in my opinion.
Those doc blocks don't suffer from "duplicates" they suffer from insufficient specification. A parameter tag exist to write what the parameter stands for. When your "doc blocks" have no "docs" in them, it makes the excercise mostly pointless. Also there's another way to "declutter" code and that's to have *only* doc block type annotations and not use the PHP ones which still suffer from some deficiencies (lack of unions, generics etc.) that doc blocks support (through the IDEs that support them). Buuut, this second advice is something that's not popular in the PHP community, so I expect to get some bashing for it (despite everyone loves the exact same thing in TypeScript, where annotations have no runtime effect).
Calling Vim anything other than a text editor is an __absolutely indefensible statement__. For one, either you have Vim, or you don't. No matter the number of plugins you have. So using terms like "bare-bones Vim" amount to bullshit. Secondly, using any amount of plugins doesn't automagically "turn" Vim into anything it isn't already--the vast majority of plugins out there do nothing but enhance the core functionality of Vim or act as wrappers to more-easily do something Vim already does. There are actually very few plugins (vs critical mass) which bring something _completely new_ to Vim. So for your argument to hinge on "Oh, well it's Vim but I have so many plugins now that it's no longer Vim" is beyond stupid. Thirdly, citing a Wikipedia article to make your point is like shitting in your hand and rubbing it all over your face to prove that everyone else is crazy.
Actually it's you who make "true scotch" argument here. "True IDEs are IDEs" "But VIM and this and that offer same functionality" "NO. NO. NO!!! TRUE ide would also have X" "But VIM have this plugin here..." "NO. NO. NO!!! TRUE ide would have it built in" Sorry. Couldn't help myself. It's such a prime target at parody. Also if we are all developers - engineers here we all know builtin vs plugin is all about power vs separation trade off. Can we stop insisting one is always better then the other then?
You seam to come from special need OS. Sorry you had to endure that. Have an Linux instead! Use it's awesome package managers. Plenty of VIM packages. You do get barebone VIM, neo VIM, gui VIM, and lot's of other FLAVOURS of VIM ;) (No seriously. Even if you live in OS whith .msi installers grab some good package manager, with good support for FLOSS software)
This is literally __the opposite__ of what I'm saying. I'm saying Scotch is Scotch and Whiskey is Whiskey. Anyone saying Vim is an IDE is saying "Whiskey made in Scotland might as well be Scotch." Good lord.
I can't possibly understand what you're trying to accomplish with this. I've most likely been using Vim and GNU/Linux since before you were born... That might be why I understand the difference between text editor and IDE...
Can we have your measurement's please? You seam to imply that some IDE is faster then authors set up. Please share your methodology and data with us.
Is whole project indexed? Including PHP standard stuff? Otherwise it's apples to oranges comparison. Unless of course codebase is so f***** up that IDE whole project indexing starts to be a problem. (Had one such project. On a bad day PHP Storm would hang trying to index it all :( )
`git clone`
No you're being senseless and now you are personally attacking my opinion. Every serious online business needs to plan to scale. I've seen business suffer from this because they thought single machine is fine and powerful just like you. Also it's irresponsible and stupid of you to now talk about DIFFERENT type of services. If the article is judging containers for a specific use case and services that don't scale then it should be written. But it's NOT. You are sending this argument to specific little services who don't need to scale. My answer to that? Don't use containers at all. &gt; But what about downtime OMG! Some services tolerate their own downtime. Others tolerate downtime of other services they use. Third type of services switch or can be switched to fallbacks. Fourth type may need the redundancy and planning for better guaranteed uptime. To plan everything as the fourth type is an irresponsible waste of your client’s money and time, very much like pulling a scam on a single mom looking for a car to take her kids from school and shop groceries, only for you to sell her a high-end Ferrari. First of all, there is no such categorization of services. Services that tolerate downtime? What? You mean distributed services that tolerate network issues? How does a service "tolerate" downtime, then the service is down and is not servicing users at all lol. Of course GENIUS, if the requirements don't state that it must always be up then obviously you don't need to do this, but that's for small projects dude. And also there is no service type that can be switched to fallbacks. That's called a subtype of HA and is called failover. I'm curious what's the biggest business that your worked for that didn't need to scale? 20 years of succesful projects you must have some big ones that DONT scale.
Yeah. Once improved app that had extra 30 seconds of first page load due to duplicate php call in html that was "commented out". What IDE are you using?
I would rather go with Private Packagist over satis. It's relatively cheap and you won't have to maintain it. Like 1-2 day of Satis config + maintenance from time to time is already more than 2y of subscription for Private Packagist.
I can see you're one of these anticontainer guys. Questionable results? According to you. I have yet to find isolation of different processes in containers questionable in terms of performance. The speed of development using containers outweigh the performance costs introduced by them. Anyone who has tried them and used them properly does attest this, only nonheavy users talk shit and spill lies left and right (as in this thread, a lot of misinformed statements about how containers work).
Sorry. I'm not native english speaker. I was referring to person from Scotland, not drink from there. Specifically I was referencing logical fallacy, where somebody dismiss arguments to contrary by arbitrarily changing definitions. ("Not true X would do Y." repeated for any argument contrary to X).
It will not. This just removes duplicate information from the DocBlock if you are using type hints. If you have a function signature like this function test(string $a, int $b){} You already know that $a is a string, and $b is an integer. You do not need to write this information again in the Doc Block because there.
&gt; You just made an argument that no true IDE would be a bundle of plugins and (good) text editor. Right? No, the _only_ thing I've said in this thread since the beginning is a verifiable fact that Vim is a text editor and not an IDE. Calling it one is a fallacy in every way. It's not developed to be a specific, or even general purpose IDE. It's developed __specifically__ to edit text. Period. Over the years many people have _used it as an IDE_, but that doesn't make it one by design. Which is pretty damn important to consider.
&gt;Strong typing: Go is a strongly typed language and, while I did not like the fact that I had to explicitly state the type of the returned values every time, in the end I found it more convenient as I could catch problems before they arose. I thing author mixes multiple definitions here: 1) "Strongly" do not have agreed upon definition in literature. I'm assuming it means lack of implicit type conversions (e.g. "012 eggs" wont be integer or a string or floating point value as in PHP) 2) Explicit type declarations have nothing to do with Go being "explicity/strongly typed" or "statically typed" language. Simply there is no type inference built into Go language. 3) "Catching problems before they arise" looks like benefit of static typing. Again not to be confused with 1) and 2) ;) Some of above can be had in PHP with strict declarations and PHP Stan for static analysis. Still "012 eggs" can be two different numbers, but that's PHP for you ;)
If it's suitecrm then what's the difference? It's it job posting or are you looking for floss contributors?
I am looking for foss contributors to start a new project. If you are interested in the difference, I am going to send out a PM to the interested parties shortly, I can include you as well.
* What tech stack are we talking about? * What statistics you are optimizing? * What hardware do you have? * What architecture?
&gt; Over the years many people have used it as an IDE, but that doesn't make it one by design. Which is pretty damn important to consider. Still no true Scotch. "Not true IDE would start as mere text editor". As I understand your argument you insist there is some unnamed quality that distinguish "VIM + plugins" and "IDE" even if they can provide same functionality. Please name it.
I fully agree that it has limited value as long as real objects have no variance at all. I'm not sure if it limits us. I believe that all types should become objects in the future to ensure that we have a single type system.
I think that this tutorial is counter example of inheritance. If too many functions have to be overriden in subclass, then it sugest that inheritance was not good tool in the first place (maybe interface, composition or traits would be better?) Second problem I see here is that those functions **do not** return anything. In PHP function return value only if it ends by `return` keyword. Otherwise it have no value. 'echo' merely prints provided value to standard output.
I agree. Here is a detailed Java docblock (from JDK) for comparison. /** * Compares this string to the specified object. The result is {@code * true} if and only if the argument is not {@code null} and is a {@code * String} object that represents the same sequence of characters as this * object. * * @param anObject * The object to compare this {@code String} against * * @return {@code true} if the given object represents a {@code String} * equivalent to this string, {@code false} otherwise * * @see #compareTo(String) * @see #equalsIgnoreCase(String) */ public boolean equals(Object anObject) { /* */ } 
I mean, I know it's apples to oranges, that's why I didn't compare it to PhpStorm or say it's as good as an IDE. Just that it was the minimum amount required to be comfortable programming. But yeah, it did index the project, but it was also a small project
It did index, but it was a small project. Just a simple ish library I'd written before. That being said, I never really compared it to anything, saying it was as good as PhpStorm or comparable to an IDE. Just that it was an incredibly micro development environment that I was comfortable using 
There is VIM plugin for PHPStorm if I remember correctly...
https://plugins.jetbrains.com/plugin/164-ideavim
Very nice advice. Thank you!
It's good if your container is on the same server...
Benchmarking is hard. Three common pitfalls are: * Testing different functionality (e.g. speed of racing car and time of digging hole by bucket digger) * Doing different stupid things in different cases (e.g. testing one framework A with buffered output vs framework B with buffering turned off in time to first byte of replay metric) * Stating conclusions totally unconnected to collected data (e.g. framework A is faster because it renders blank pages faster) There is nothing wrong with testing with two different tools that can be used to achieve same goal. It's the details, that can invalidate claims though.
+1 for pointing out importance of "context" and "trade off"
Really good advice here. I just started mapping out my informal goals and realised why it's taking so long to progress. I have too many goals that are not SMART, or even close to it. Yeah, I'd like to get better at Java, and now I do want to learn PHP while also taking my basic math proficiency to include analysis. But it's hard to keep track of how far I've come and at what pace I can afford to progress at any given goal. I'm writing down my goals and break them down into something specific from now on. 
If you think this debate is "pro-containers" vs. "anti-containers" I'm afraid nothing insightful will come out of it. I'm absolute not one of the "anticontainer guys". I just use them when, and in ways that bring concrete benefits to concrete projects, not as some requirement for religious enlightenment.
I can't tell if you're not understanding because you're not a native English speaker or what--but I'm not arguing that Vim isn't an IDE because of X reason. It doesn't need to be argued. It's a __literal fact__. It's developed to be a text editor. It __is__ a text editor. Throwing a bunch of plugins at it doesn't change that. You're simply __simulating__ what an IDE does. That doesn't __change__ what Vim is. The same can be said if Microsoft Notepad was extensible--and you loaded up custom plugins to simulate the functionality of an IDE. It's still Microsoft Notepad which is specifically designed as a text editor... It doesn't magically become an IDE because you threw plugins at it to simulate that functionality.
Oh really? Who's the guy who starts calling me 'drinking scaling koolaid' and then bragging about 20 years of experience? Who are you to say that I don't use containers in a way that brings concrete benefits? A lot of statements that you do with nothing to back up except saying that you have 20 years experience. Shame!
You're replying to the wrong comment. 
Now I think it's you who missuse words here. "doesn't magically become" imply that action or property disscussed about make no difference or is of no value. Adding boatload of plugins **do** make a difference. It make VIM + plugins equal in power to some IDE functionality. Given diverse enough functionality of those pugins and we get **equivalent** power. Yes. VIM stays VIM. Whole compilation? Becomes IDE. No magic involved. Addition of plugins is meaningful.
No I'm not. You call for 'insightful' debates but yet you're the first one who calls others "shoddy engineering", and "I HAVE 20 YEARS OF EXP BOW DOWN TO WHAT I SAY". Nobody cares of your years of experience if you can't argue your point. Also you're right that there are no limits of abstractions, but them becoming 'best practice' is most definitely not a bad thing. Who the hell said I don't apply thought to my solutions? Are you stupid smh? Do you make up stuff in every argument you post? Change your nickname dude lol
Jesus. I'm gonna try one last time. Because you're seriously __fundamentally__ misunderstanding what's going on here. &gt; Addition of plugins is meaningful. Not once, have I ever said it wasn't. I'm saying that if you put a horse saddle on a bear, and ride it like a horse, it doesn't stop being a bear. In literally the __exact same way__ if you add a bunch of plugins to Vim to simulate an IDE, it doesn't stop being a text editor... Calling Vim an IDE is _fundamentally wrong_. It's a _text editor_ no matter how much you extend it. This is _why_ I originally posted in this thread to begin with. If you still can't understand this super simple concept then don't even bother replying. I'm not going to waste my time on this anymore.
Besides the obvious optimizations in the engine because the types are known? Automatic boxing and unboxing like Java has it for its primitives. We already have `iterable`, hence, everything that is not covered by `scalar` is already covered. `null` is special anyways and always requires special handling, so that is covered too. 
&gt; easy way to setup private packages? https://packagist.com/
A good use-case for `scalar` is for instance the (unfortunately named) `Hashable::hash` method in the [PHP DS extension](https://github.com/php-ds/extension). It currently requires a `scalar` to be returned to calculate the distribution in the hash table that is used internally. (Note that the author said that he plans to change that and allow `mixed` in the future, see [issue #90](https://github.com/php-ds/extension/issues/90).) As I replied to someone else. `scalar` is the only thing that is missing to have a common parent for primitives, besides the fact that they are primitive. We already have `null` which is totally stand-alone and we have `iterable` and `object` that covers the rest. (Nobody cares about `resource` since we want to get rid of it.) With it in-place we are capable of addressing all current base types and continue with automated boxing and unboxing. The idea for `Convertible` is actually a direct rip-off from [Rust's `std::convert` module](https://doc.rust-lang.org/std/convert/index.html). The only thing that is currently holding me back in providing a full writeup of the feature is the fact that its real power would only come into play with union + intersection types and generics. Let's assume we have that and we would want to provide a `Path` abstraction. (The following is very rough as I'm writing this down only to reply to you; there might be errors in logic or syntax, please be gracious to me.) interface ConvertibleFrom&lt;T&gt; { function from(T $t): static; } interface ConvertibleInto&lt;T=self&gt; { function into(): T; } /// Represents a filesystem path. class Path implements ConvertibleFrom&lt;String&gt;, ConvertibleInto, ConvertibleInto&lt;String&gt; { function from(String $string): static { return static::parse($string); } // Ideally we can make these self conversions NOOP. function into(): Path { return $this; } function into(): String { return $this-&gt;inner; } } Now let's say we have a `File` abstraction as well and want to be able to construct new instances from strings as well as paths. class File { function __construct(Path $path) {} } $file = new File('/etc/passwd'); This would work because the required type `Path` implements `ConvertibleFrom&lt;String&gt;` an is thus automatically converted for us. Note that the whole thing works with less magic in Rust because in Rust you can extend other types with functionality at any point in time. However, in Rust you would also write it differently and the conversion must be done manually. As I said, this is the rough idea of the whole thing and definitely something that is very powerful based on my experience with the same pattern from Rust. Most interesting about it is that it will allow us to bridge the gap between primites and objects in the future. namespace php\lang; class String implements ConvertibleFrom&lt;string&gt;, ConvertibleInto&lt;string&gt; { /*...*/ } There are many problems to solve to get there (e.g. name collissions as is obvious from the code above) but it's definitely possible.
Hmm. Do you know that every IDE have text editor bundled? And that text editor was designed to be specifically a text editor, and it didn't stop being editor because it's bundled with extras (like rest of IDE). VIM is text editor, VIM + appropriate plugins can be IDE.
Where are you seeing this? Link?
/u/the_alias_of_andrea is correct and we (including PHP, as always) were wrong. Null is not the empty set, the bottom type is. PHP does not have a bottom type (at least not a visible one). Null is usually a direct child of the top type with a single value, null. (The top type is the supertype of all types or in other words the set that contains all other sets.) A function that truly has no return value is not constructable in PHP, however, it is in other languages that have a sound type system, e.g. Rust: fn never_return() -&gt; ! { ::std::process::exit(0); } This function never returns and makes this clear to the caller by annotating its return value with the special bottom type identifier `!`. Note that `string` is actually also not scalar, a `char` would be. A scalar must have a single scale but a string has multiple scales (the scales of the individual chars plus the scale that makes up the length of the string).
Because at some point we might want to have a sound type system that is coherent and all, no?
Everyone would end up defining those handy aliases, why not provide them right away?
wouldn't that just be ignored by the php parser and rendered as html? does it count as php?
I built one a couple years ago for a now defunct project. The way I designed it, authentication was managed by api platform, which used redis on the backend. React native would authenticate against api and be provided a token that would then be used against socket server. Socket server used the same redis backend. 
Becoming a better IT-Guy is my everyday resolution, esspecially in a world where the Internet expands faster and wider than the universe, it's important to get as much information and knowledge as possible. It's always fascinating to learn new things and it proofs me always again how special the IT is and why I love it. 
https://www.jetbrains.com/phpstorm/buy/#edition=personal
thanks for the heads up, do you have source of the project maybe i could look into the code. It would be great help
 The famous question: what is an object? Why should all things be objects?
Well, to be fair I've started a new project using Doctrine ORM and it is a complication over Eloquent, but I do like the simple objects once it eventually gets setup. Also, if you're not using Symfony the tools for making Doctrine ORM easier to get going with ([skipper](https://www.skipper18.com/) and [PHP Annotations Plugin] (https://plugins.jetbrains.com/plugin/7320-php-annotations)) won't work because they use the @ORM (Doctrine\ORM\Mapping) namespace which is apparently only for use within Symfony.
A good example is when I started with Lumen which doesn't have most things enabled or even included.. about halfway through the project I realized I was adding so much that I just migrated over to Laravel.
Nice! Thank you for that. I can't believe I never found that. I might consider actually getting a subscription myself.
Unfortunately its not a public repo. 
&gt;... stopgap between Sugar's end and moving over to Dynamics) Microsoft Dynamics? Are you using the ERM?
&gt; Constructor injection is an anti pattern, breaking SOLID and constructor injection is anti composition. The I in SOLID is inversion of control which references Dependency Injection which is done through the constructor....
oh No problem.
I agree with this. I typically explain it as if you your object/class can be new'd up/instantiated in an invalid/unusable state and requires a setter to be used to place it in a valid state then you should remove the setter and place the parameter in the constructor. Otherwise, you should be doing your due-diligence and checking the state of the object any and everywhere you are using it. This has the added benefit of showing you potential code-smells, such as too many dependencies in your object.. meaning it's doing too much. General rule of thumb - not strict and rigid - use best judgement.
asdf
The company I work for once bought skipper licenses in it's early days, very very annoying times.
To be honest I haven't found a piece of software for building a database schema that beats pen and paper, but I would use this tool, if I could, to make building the entities with their annotations faster/easier.
When I was starting they brought in a senior dev who had experience with entity framework, fox pro, TDD and things like that, so he wanted to implement all those things with us only with php, doctrine and so on. The guy was used to do everything by GUIs, so we bought skipper, and he would start designing the database with lots of inheretances in skipper, but when he hidratate the database, it would sometimes work, sometimes it wouldn't, I saw him a couple of times designing everything from scratch (he had everything wrote down on paper) Anyhow, he end up getting fired (company financial problems) and we never saw the DB he was designing.
&gt; no? Why is `scalar` make type system coherent? becase there is `object`? object is pretty much stranghforward since "every object is object" Scalars from the other hand are different thing.
&gt; why not provide them right away? because you don't really know what could be useful and also why would you add more reserved keywords?
You're confusing underlying implementation details with the language semantics. It doesn't matter how null is implemented underneath. What matters is what it means. The same applies for strings. A string may be an array of chars, but this distinction is relevant only to the underlying C implementation, not PHP. PHP has no char primitive. The primitive is string, and it does *not* consist of any smaller individually addressable primitives. If you do this: $a = $b[1]; On an array, $a is assigned a reference to the item at index 1 of $b. But on a string, $a is assigned a *string, which is a copy* of the substring consisting of the character at index 1 of $b. So /u/the_alias_of_andrea is absolutely not correct, but if you feel that `is_scalar(null) === true` is a useful, pragmatic result, then... damn. 
Sounds like a fun project. Makes me wonder what led to it's demise.
If its a custom variable i control in my code for sanity, storage or routine, i declare it. If its pulled from a session, get or post, I check if it exists. I guess the first part mainly comes from VB in my earlier days. 
The better way to do this is to define the variable in all cases. That requires you to have a "default" value for the variable, though.
https://github.com/kocuj/di It is container for design pattern Dependency Injection in PHP 7. I know there are a more DI containers available, but I tried to make it simple and available for PHP 7, because not all libraries are for this version of PHP. It is also available by Composer as "kocuj/di".
best practice says do not rely on auto-vivification , that is to say always explicitly delcare any vars even if you just setting them to null, odds are if you are doing this your code prob should be re-factored anyway. that said you can always use a test to check for definedness, just remember empty() vs isset vs is_null() all treat a lack of "definedness" differently, and may return inconsistent results. be sure to consult [this chart](https://i.stack.imgur.com/OqxUF.png) to make sure you are using the correct test function for what you are expecting. 
Market fit wasn't there. Unfortunately. Niche app in a very competitive market. 
Personally I always work under the assumption that all variables I'm working with, are declared (this even includes declaring a `$matches` array to be passed later to preg_match). I only use isset when dealing with object properties and array elements.
Is there a way to tell php that a function/method expects a return value? interface Base { public function process() : any; } interface Base { public function process() : mixed; } Edit: Looks like someone created an RFC for this already https://wiki.php.net/rfc/mixed-typehint
I wonder why they left out the condition of the variable not being declared from that chart..? &gt; odds are if you are doing this your code prob should be re-factored anyway. I'm also interested in what you have to say about this. Making me feel like it's bad that I do this kind of stuff in a lot of my code (creating a variable to act as a flag to check against in case a condition changes the flag's value).
I prefer to keep the doc blocks even if they duplicate some information. To me, they help a lot in making code breathe, much like whitespace in design. I also really don't like to have documentation for some bits only, to me that makes code look messy. In the end, most doc blocks I add are arguably unnecessary. But to me, they are the opposite of visual debt (hate that term), they're there to help code be more readable.
This question was framed horribly out of context, the problem I was dealing with the variable was actually an array, but the array variable was only being created if there were values to add to it. When I wrote the original code, I think I was trying to save on the garbage being created if I wasn't going to add values to the array.
I use isset when processing incoming data from outside a system, but do test for array keys sometimes. Normally all class properties are declared so initialized with NULL value. BTW, the normal way to compare for me is ===, not ==.
In that case I would define the empty array so the variable exists and represents the correct value.
Are you sure this is a RESTful API, I miss the definitions of the MIME types of the information the API exchanges. Or does Lumen generate them from the models? I have no experience with Lumen. Is there a way to expose the API method signatures as HTTP requests and responses?
It doesn't hold the cursor position on the line I put it on. I want it to stay on line I put it originally on when I scroll away, as is natural in all other editors.
It is a hassle since in VIM because of this unconfigurable behaviour, I need to always press a key before starting to scroll and after I am finished scrolling - to return to place I put the cursor on originally. This is something I don't need to do in other editors.
/r/phphelp
&gt;I'm also interested in what you have to say about this. Making me feel like it's bad that I do this &gt;kind of stuff in a lot of my code (creating a variable to act as a flag to check against in case a &gt;condition changes the flag's value). I would need a bit more context to understand exactly what you mean, there is nothing inherently wrong with using a flag to represent a more complex if-condition, but generally you only want to do that if the condition is being repeated a bunch of times. I would refactor the above code as such: $variable = ($condition == TRUE) ? "some value" : null; if($variable === $condition_text) { some_other_process($whatever, $variable); } However depending on the context my gut feeling says there is probably a much cleaner way to refactor it, generally something like this. $flag = ('a' === 'a' ); if ($flag) { do_something(); } make sense?
I always keep the setting in PhpStorm on that I see warnings when phpdoc mismatches the actual definition. As such, this change could increase the warnings, even tho they are duplicated (because it will report when only a few arguments are documented, but not all; but it won't report if none is present in the phpdoc). It's tricky. I would prefer: only remove all type hints if a) they match exactly what's specified and b) they don't contain an further textual description. And yes: if the actual type declarations can be fully expressed and the method allows it, I won't write a phpdoc at all (good method and variable names FTW 🎉).
that creates even more problems because you could potentially run into problems attempting to use an undefined value against array functions best to do this: $myArr = (some_condition) ? [1,2,3,4] : []; 
A method should be atomic, there is simply no good reason to return "mixed" that is good as not specifying any return type at all. The :? operator is bad enough. If you absolutely must for historical or expediency reasons specify a "mixed" return type, just use a phpdoc @return tag specify mixed and leave the return type blank. BUT I WILL STRONGLY SUGGEST that a "mixed" return type is absolutely a "refactor smell" basically it is a huge indication you are doing things wrong and need to rethink your code. Warmest Regards!
[Her's a good intro](http://symfony.com/doc/current/routing.html). The concept is called "routing", or more generically, a "front controller" if you want to look it up in literature.
php contributors trying hard to snatch defeat from the jaws of victory with these post-7.0 releases
I am very confused are you writing it in PHP or node.js? If PHP I am interested, have 18yrs perl/php exp, sr level....some react/redux exp
do you have some sort of senior dev or team lead? does "the boss" have no technical expertise? this should be pretty obvious case for refactoring ,no convincing needed. i would just appeal to the team lead that its garbage and should be rewritten. if you co worker cant understand why after reading an article or two on DI/IOC then he is incompetent
this guy gets it!
Please quit now, this is terrible management. By not allowing any framework, they're forcing you to recreate every single framework there is outside, and hindering you from learning common design patterns and why those frameworks were created in the first place. This is just a symptom of bad management, but this bad management is seriously hindering your career like others said. Switch jobs now.
Oh, thanks, but I think I wasn't clear. It was the `FallbackResource` directive that looked good. Most PHP frameworks have a bunch of `.htaccess` directives that check if the file being referenced exists, then if the directory exists (with, hopefully, a default script in that directory), and then if it can't find those, passes the path to `index.php`/ I'm assuming all those checks can be replaced by a single `FallbackResource` reference, something I've never seen before.
Ya lost me at: "When I discovered Vim some month ago..."
Times like these is when I wish union types existed.
Skipper is a good example of why there is a debate. They support Doctrine/Symfony, Zend, and even CakePHP!! But no Laravel. Why on earth would they support CakePHP but not laravel? Its really obvious that the developers are in the Symfony camp and just don't like laravel. People fight for their frameworks popularity so when a nice tool is built their framework is supported. Market share is a legit benefit for many reasons.
By definition no one who says "RESTful" has a clue what REST is.
Very nice *advert. Thank you
&gt; There is no claim the one needs containers to provision infrastructure. Duh. He is responding to this absurd claim. &gt; Not leveraging containers gives up a large amount of time and effort. 
&gt; &gt; Or at least your remarks are quite incorrectly placed. &gt; Maybe try to explain why you think in a certain way next time. Because you're replying to one comment, and most of your references literally are to another comment...
You say they support Doctrine - but from what I've seen they don't support Doctrine "out of the box" - they support Symfony Doctrine.
But when I open a file a vim and scroll the window down with ctrl-e and scroll up with ctrl-y the cursor does remain on the exact same line and character position. http://vimdoc.sourceforge.net/htmldoc/scroll.html
Fox Pro.. that's almost a detriment (a varchar(8) gets prefixed with 4 spaces if the record is only 4 characters).. either way.. my typical workflow - depending on the software - is draw out a database which usually helps define a workflow.. 
Is the short hand preferred over being verbose for performance reasons? I'm still learning, and currently prefer verbose code for maintainability purposes. If you're up to it, I'd appreciate feedback on this code I recently wrote to determine the number of holidays between two epoch dates. // count holidays to ignore in count_working_days function holidays_in_date_range($start, $end) { $holidays_observed = array(); $holidays_in_date_range = 0; // create array of observed holidays $holidays_contextual = array( 'January 1', // New Years 'July 4', // Independence 'December 25', // Christmas 'last monday of may', // Memorial 'first monday of september', // Labor 'fourth thursday of november', // Thanksgiving ); // if there is more than 1 year between start and end while($end - $start &gt; 31536000) { $holidays_in_date_range += 6; $start = $start + 31536000; } // account for holidays that fall on a weekend foreach($holidays_contextual as $hday) { // Push new years to next year if start date is in December // I know this is crumby code // it worked for what I needed but I know it should be better if($hday == 'January 1') { $month_number = (int) date("m", strtotime($start)); if($month_number == 12) { $hday = 'January 1 ' . date("Y", strtotime("next year", $start)); } } $holiday = strtotime($hday, $start); $day_week = date("l", $holiday); // check if holiday is on a weekend if(substr($day_week, 0, 1) == 'S') { // If holiday is on Saturday, the holiday is observed on Friday if(substr($day_week, 0, 1) == 'Sa') { $holidays_observed[] = strtotime("-1 day", $holiday); } // If holiday is on Sunday, the holiday is observed on Monday else { $holidays_observed[] = strtotime("+1 day", $holiday); } } else { $holidays_observed[] = $holiday; } } foreach($holidays_observed as $holidaytime){ if(($start &lt;= $holidaytime) &amp;&amp; ($holidaytime &lt;= $end)) { // subtract one day to account for holiday ++$holidays_in_date_range; } } return $holidays_in_date_range; }
Hey all... newbie here... what's the best way to test out and practice writing PHP code? Should I just buy some cheap web hosting (~$3/mo)? Thanks.
&gt; Not leveraging ~~containers~~ provisioning software gives up a large amount of time and effort. FTFY so that you finally understand
PHP Stan supports them in its type checker.
Your PC is enough. If you have php scripts that output text, you can run then in console `php -f path/to/file`, for scripts that output html/js php have built in web server, for API you can use postman or any other client. gl &amp; hf
Care to enlighten us?
Yes: go back to work.
My work has a policy against open source, put in place by the primary developer. We all write PHP, and mySQL, and it runs on Apache. I've handed in my notice, but only after repeatedly experiencing their lack of care when I tried to advise. 
It's not like laravel is built on top of symfony. It is built on top of symfony components. There is still the symfony standard edition or new called "flex". So its more like both cars are built with the same wheels.
&gt; I didn't "call for insightful debate", I just saw the silly labels you slap on me ("anticontainer guy", "not wise", etc.) and I foresaw one won't be had here with you, and here we go. Point proven. Wow, everything you stated I wrote after you started derailing the debate to namecalling. Are you now using this in your defense? lol &gt; I argued it well enough. If you arrogantly believe you're able to determine the right scale and architecture for a project just from being told "a medium project" without being given any specs, needs and requirements, you literally have no clue what you're talking about. &gt; Engineering is about details. When there aren't any details and you appear absolutely certain what the right and wrong solutions are for this undefined project, I can definitely tell you're far junior to me. You may not like it, but that's precisely what's happening. Juniors love thinking that silver bullets and over-generalizations will take them to excellence. Over time you'll witness countless cyclical fads come and go and you'll learn a thing or two. But wasn't it you who made all this mistake? I'm sorry to disappoint you I have 10 years experience in scalable architectures and I have met excellent engineers who agree with me. This whole 'you need to know requirements' is A JUNIOR GAME ITSELF. Businesses that need great engineers do need to scale. Please tell me ONE serious online business that tolerates downtime. I asked that questions before and you couldn't answer it. Instead because you couldn't argue your point you started namecalling. My questions again is, in your vast amount of years and experience, what was the biggest architecture you made that didn't need scaling? Please answer this before calling others juniors ;) you might end up being the one. 
I said there is no claim that one needs containers to provision infrastructure. &gt; Not leveraging containers gives up a large amount of time and effort. ^ This doesn't claim that you need containers to provision infrastructure, wtf? It claims it's faster if you use containers.
Please tell me how they are juniors: https://medium.com/s-c-a-l-e/google-systems-guru-explains-why-containers-are-the-future-of-computing-87922af2cf95 Go back to hosting Wordpress projects thinking they are medium sized xD.
Once again, I've nothing against container, genius. I use Docker every day. You're trying really hard to reduce my position to something simple and dumb your mind can comprehend, I get it.
As you have done since your first reply. Don't be angry that you receive what you give. Nice try.
&gt; My questions again is, in your vast amount of years and experience, what was the biggest architecture you made that didn't need scaling? Research the LMAX Disruptor technology. At its core, it processes millions of transactions a second on a single machine (and in a single THREAD on that machine), using 1-2 other machines only as hot spares during a hardware failure. Technological solutions have an amazing variety which you've yet to learn about, kid.
I'm aware of LMAX but clearly you're doing failover, which is a form of HA. How do containers prevent you from utilizing this architecture? Please explain.
[removed]
The most pathetic spam I've ever seen here
Did I say they prevent me from utilizing this architecture? What exactly is wrong with your reading comprehension? Also what is your logic. Do everything with containers, just because you can? Well isn't this the "wise" thinking you told me about! /s
I don't feel anger, I only feel slight second-hand embarrassment about your naive replies.
What is an object is quite philosophical and has no single answer, but we don't need to answer that here. Why everything should be an object is a better question. Having a single type system for everything makes code simpler. Note only PHP code but also our internal C code. It removes special casing and allows the addition of features in a simple coherent way. The split type system as we have it creates more problems than it solves.
&gt; Apple, the most valuable company on the planet, still has to put down its entire online store for an hour or two, when they significantly change their inventory after press events. This is not a marketing trick, it's an actual limitation of their Web Objects platform not many know about. So you said it yourself. It's a limitation. &gt; To think everything significant has "zero-downtime" is the most childish and laughable notion to hear from someone claiming "10 years of experience in scalable architectures". Any scalable architecture is basically designed to tolerate partial downtime, or even full datacenter downtime at times. Because nothing can be zero downtime. At some point, someone somewhere around the world can trip over a cable and ruin your zero downtime. I did not say that at all. I actually told you about network tolerance as well but it seems you aren't the best to argue with. Next thing you'll say Russia is going to cut cables so we shouldn't care about HA and scaling anymore. &gt; Uptime isn't magic. It's a balance of risks vs. costs. "Zero-downtime"... Hahaha. Kiddo... If you honestly are so naive to guarantee me zero-downtime, I'll put it in your contract and sue you into a hole when your zero-downtime set-up fails. Nothing has zero downtime, Mr. Wizard. Uptime and zero-downtime are two different things. Zero downtime refers to deployments (go complain to Kubernetes community if you think this term is wrong' you'll be the one laughed at :D). Impressive that an old experienced engineer mistakes this.
That's what I felt when you said '20 years'. As if I haven't met engineers with more experience than that lol. some people are so single minded that only them have done certain things and nobody else has or ever will.
&gt; By investing in PHP web development services not only makes the website reliable and safe but also highly cost-effective with an amazing user interface. What PHP has to do with user interface on websites?
No problem man, I got myself the personal one even though I'm self employed. Why would I spent double the amount ? :P It looks like they give 50% to start-ups so I might do that.
&gt; So you said it yourself. It's a limitation. That's what you took out from my example to comment on? Do you have some sort of disability? &gt; Uptime and zero-downtime are two different things. Zero downtime refers to deployments (go complain to Kubernetes community if you think this term is wrong' you'll be the one laughed at :D). They're not different things, genius. "Zero-downtime" doesn't refer to deployments. "Zero-downtime deployments" refers to deployments. Your use of terminology is typical cargo-cult bullshit. You just surf superficially on top of what you hear from forums and blog posts with zero clue what you're talking about.
Thanks for the great advice, but to whatever extent you be better your boss will still scold you.
Man you're stupid as hell and it shows, you just can't keep a logical argument and start attacking opinions. I meant zero downtime the way I said it, not you not anyone else not any forum. I don't visit forums, I read documentation, books and best of all I don't listen to people pretending they are some superduper-unknown-engineer but then make noob statements about containers. I'm done with you, reported and blocked. Learn to respect people and maybe they start respecting your opinion. You are an example of an anger filled engineer because he cannot handle different opinions. It is stuck in your head that you are right and there's no way around it, thus you have to resort to namecalling for the entire discussion.
No problem. I understand that my post has been very confusing to start with. However, I am looking forward to a PHP application that would have secondary components in the form of Node (for WebRTC), RabbitMQ for queueing and some others. But, to reiterate, the application is going to be in PHP. Hope that helps. If you are interested, I would send you a PM detailing the project further.
Is this a good place to plug my own ORM? 🤔
&gt;My contention with ORMs is that, if you need to know SQL, just use SQL That's where he is wrong in my opinion. That's like saying "If you need to know how the query planner works [to get performant queries], just write your own database". No, I will not do that. I know SQL and I know what makes a query performant. This knowledge helps me finding performance problems in ORM calls and optimizing those (or falling back to SQL, when it's not possible to express the query with ORM calls appropriately). But there is no way this will make me write all those pesky, simple CRUD queries and their respective object translations, that are the vast majority, by hand.
Maybe - usually fires back spectacularly though :-P
I did learn SQL and for 90% of the database functionality I have to do, an ORM yields code that is easier to read. The easier code is to read, the easier it is to debug. 
Looks like you missed a '/' char in-between 'php7' and 'phpdbg.dll'. The message says it all....
When you googled the error message, what did you find?
I dont remember, it was like 4 years ago when doctrine had releases with hundreds of bug fixes.
This. OP sometimes Error messages lead you astray but be sure before anything else to read through it slowly. Skimming something like that can be dangerous in a field where a missing semicolon can break your entire application. ;)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[removed]
what is the right way to know a post views count ? do i set a counter column that adds +1 every time a get request to the post ?
How so? If you are writing simple joins in sql which translates well to an orm you should have no problem following the sql. When writing more complex queries orm frameworks fall apart which means most developers will write sql. So with good comments and documentation it’s still more beneficial to use sql. 
ORM means object relational mapping. Building SQL `SELECT` queries is definitely not the main advantage of an ORM. Rather it's the mapping. With readonly models it's easy to map from SQL results (arrays) to PHP objects, with all the other entities it quickly becomes a nightmare.
I have used them all. After many tools i find pythons sqlalchemy the best. Its rock solid and the unit of work pattern is a blessing.
If we stick to PHP, then ORMs here provide tooling (sometimes) and robust cache solutions. However even moder MariaDB sql runs loops around PHP ORMs. It's not as direct comparision as people would like it to be.
Here's a PDO wrapper: https://github.com/ellisgl/GeekLab-GLPDO2 (Still need to finish the tests). Down vote in 3. 2. 1.
Article do not meantion PHP, so I assume it's general discussion. Two points from article are solvable: a) Identity. Easy. Generate your own identity values. Helps with more complex domains too, as object no longer are tied to db. b) Composability of transactions. Hard but solvable, will powerful enough static type system (or more specifically type checker who can prove that we compose transactions correctly). Haskell/Scala have some nice implementations there. Queries and transactions can be correctly nested, functionality can be limited to context of transactions, and instead of passing transaction/context to queries, queries can be plugged into transactions, and final compositions can be runnable. For php specific gripe, I would point out that all php ORMs choose common feature set over powerfulness. So no matter how powerful our db is, or how much optimizations we could easily implement, ORMs wont allow us that (but instead we have to drop to plain old SQL).
PHP have 2 different algorithms of coercing strings starting with digits. They interpret leading zero differently. PHP officially require ZERO missing characters to break and burn ;)
Just out of curiosity, why did you decide to make a tutorial with symfony 3.3.* and not Symfony Flex (4) ?
yeah go ahead and PM me, what are you considering for a base symfony?
Up for discussion, but given to my vices, I would stick to Slim, no ORM..
is this the correct code LoadModule php7_module "C:/PHP/php7phpdbg" Addhandler applications/x-httpd-php .php PHPIniDir C:/PHP
I feel like i am making this a lot more complicated than it is.
and i don't have any file called php7_apache2_4 which most of the people online seem to be using, is it downloadable file?
Is this really faster/better than using prepared statements?
After 18 years in this job my first instinct is do not reinvent the wheel , I would use [https://github.com/azuyalabs/yasumi](this library) and the code above would simplify to this: function holidays_in_date_range($start, $end) { $holidays = Yasumi\Yasumi::create('US', $year); return $holidays-&gt;between(new DateTime($start), new DateTime($end))-&gt;count(); } If you needed to add custom ones, or change the logic of how the holidays were calculated (eg. push the observance to friday if they fall on a weekend) you could simply extend the US holidays provider class (Yasumi\Provider\USA) to do whatever logic you needed. Hope this helps Warmest Regards 
I'm guessing it is about the same as or a bit slower than using prepared statements directly. The library is using prepared statment underneath, so you are using prepared statements with a wrapper. If performance is a big concern, your application benchmarks should tell you exactly how much this library is a liability to you :) If it is better is completely subjective. I really dig it for some use-cases, others not so much :) If I basically just want a function to map to a sql statement, this is awesome.
Does it handle schema migrations?
A PDO wrapper is far from an ORM
Why did u delete your post?! Some people are beyond help!
Well i use alembic, its created by the same author (mike bayer) who originally built sqlalchemy. 
&gt; won't work because they use the @ORM (Doctrine\ORM\Mapping) namespace which is apparently only for use within Symfony This is incorrect. Doctrine annotations reader (ironically Symfony has nothing to do with that, they just use doctrine's implementation) has ability to use imports and to ignore them (legacy). Make sure this is enabled: http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html#php-imports
This is not relevant to PHP. Please try a community specialised in helping with GIT issues. If you need help with PHP, please post to the phphelp subreddit.
Don't know what the question is but my answer is middleware or decorator.
Your script runs as www-data, you need to change user to yours.
Hi Zomg, it's just "does this (anti)pattern have an existing name"? - Because I can't find a description that maps onto it exactly.
Thanks for the heads up. I spent a few hours searching over the weekend and just gave up (probably should've going through the source).. I'll give it a shot and see if it works - I'd really like to make use of at least the PHP Annotations plugin.
Well, it is just heavy abuse of inheritance. No need to give it a specific name.
That it is. But I through it out there to be "funny".
How do you get an explain for an orm query?
I assume that each "subclass" is totally self contained, and you use inheritance only to tightly couple chain of handlers? You are right, there won't be a good name for it. If you look closely it's chain of responsibility but instead composing instances you "compose" classes by inheritance hierarchy. There is no other difference, right? So what's the benefit? Especially compared to chain of responsibility. As programmer taking over that code I would constantly wonder why hierarchy look the way it do, weater I can add X, or even where the hell I can add it.
Git is a pain to run through a PHP script but here is the major highlights: The git config needs to be set for the user running the php (ie. sudo -u xx git config user.name "GIT USERNAME" etc). An ENV['SSH_AUTH_SOCK'] needs to be set to forward keys (for git@github.com type links, when you are logged in and running a script to do git based stuff) OR (and this would apply more to you) you need a key for the user or a service key for a php script that runs without user logged in.
The benefit I found to it at the time I started using it, was that child assets could be reliably queried from the parent class. In many cases the parent assets were determined based on the query string, for example: http://www.mysite.com/sites/1/calendars/13/ Because the chain effectively started from the bottom (lets say site -&gt; calendars -&gt; booking) in the 'Calendars' controller template, it would already have the "Site #1" loaded, and the domain handlers that actually represent the site would have a "getCalendar(int $calendar_id): ?Calendar" function. So the "Site" domain object could be asked for a particular calendar, and impose whatever restrictions it wanted on it, for example perhaps some calendars could be accessed across all sites, and some could only be accessed on one. The alternative would be finding the calendar, then loading the site it was associated with, and then checking if that site belonged to, or was available to, that site at the point of use, which would either a) move those checks up point-of-use, or b) require a second call to validate that the calendar in question was allowed as part of the site. class CalendarTmpl extends SiteTpl { public function onLoad(Request $request) { parent::onLoad($request); /* the calendar controller template can only load what the site allows it to */ $calendar_id = $request-&gt;query-&gt;getInt('_calendar_id', 0); if (($calendar = $this-&gt;getSite()-&gt;lookupCalendar($calendar_id)) === null) { throw new NotFoundException('...'); } /* do something with calendar, the "SiteTpl" has already taken care of * checking that the Site is in the correct state, and we have access to it */ } } class CalendarTmpl extends SiteTpl { public function onLoad(Request $request) { parent::onLoad($request); $calendar_id = $request-&gt;query-&gt;getInt('_calendar_id', 0); /* first look up the calendar */ if (($calendar = $this-&gt;app()-&gt;lookupCalendar($calendar_id)) === null) { throw new NotFoundException('Calendar cannot be found'); } else if (($site = $this-&gt;app()-&gt;lookupSite($calendar-&gt;site_id)) === null) { throw new NotFoundException('Calendar parent cannot be found. Lrn2refIntegrity'); } /* something now has to be called to setup the site, check permissions etc */ if ($site-&gt;isUserAllowed($this-&gt;app()-&gt;getUser()) === false) { throw new AccessDeniedException('You do not have access to this site'); } } } 
for a typical web ap i cannot see the point of not using doctrine it is performant enough for most apps and what you gain in performance is not nearly what you lose in maintainability and clarity
You have it generate the query it would run, and add "explain" to it.
Makes sense. Never been able to get linq to do that for me though. 
What PHP has taught me: just learn C!
This is like reading a guide on why not to use knives because "I stabbed myself". An ORM gives you the rope, how you use it is up to you. Rtfm. 
&gt; a client may be providing you with lots of data that they want attached to reports based on various business logic. Furthermore, you don't have much insight into this data; &gt; This may be fine when Foo has five attributes, but becomes a data fire hose when it has a hundred. I wonder if OP considered [Entity–attribute–value model](https://en.m.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model) for designing this instead of a wide table.
Non-Mobile link: https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^132444
Damn right it does; Doctrine ain't no perfect thang.
What you should have learned. - Some things are great for ORMs - Some things are not Example: - Persisting some data to the DB -&gt; Great use for an ORM - Not using an ORM to do a complicated query across multiple tables and/or databases. 
In my experience ORMs are great until you start hitting complex queries and large data sets. I've found myself in the position of having the raw SQL crafted and ready to go but fighting against the ORM far to many times. I'll keep using them for simple projects, but for anything that has the remote possibility of becoming complex I'll stick with raw SQL or a query builder mixed with SQL. 
Totally agree. 
What legacy php code has taught me: just use a framework
The most important thing to already know what scenarios a given ORM sucks at :P
Pretty much -- ORMs don't substitute for SQL knowledge, they substitute for time and error-checking.
I tend to agree, even the most advanced ORMs don't cover advanced SQL. They force you to do things that the database can do in application code instead, or to write *some* code that uses the ORM, and some that uses raw SQL queries when you want to do something more complex that the ORM doesn't support. For example a query including a subquery and multiple `CASE` statements.
I feel like it's the new in "thing" for psuedodevelopers that have never actually touched a database and relied solely on ORMs for all interaction to discover that SQL is a thing and decide ORMs are bad because SQL can be written. I see articles like this a few times a month and it's getting to be a trend. No, ORMs aren't bad or hard to use or in the way - you just tried to use them to do everything when you should have learned SQL first.
Using an ORM just so you don't have to learn SQL (as the title suggests) implies a misguided approach to begin with. I agree, learn SQL, but do it so you understand what your ORM is doing and leverage the aspect that allows you to articulate your schema in classes and operate on their objects logically in the context of the application you're writing. This, vs flowing in and out of context between PHP and SQL, like old school PHP tags in the middle of HTML. I know SQL well, I am very particular about my db schema, and I feel very in control using an ORM. They do what you tell them to.
How is this different from the the current ability to install multiple versions and link them selectively?
You are right but this being a CRM, requires heavy usage of EAV tables where ORM's suck. But, like I said, it is up for discussion.
Basically, with vanilla Homebrew you'll run into problems all over the place as soon as you actually have multiple versions installed. It will break when: - Upgrading a PHP version that's not linked (including when you use `brew upgrade` with no arguments to upgrade everything) - Installing an extension for a PHP version that's not linked - Installing another PHP version while a different one is still linked And probably other scenarios too. There's an in-depth discussion here: https://github.com/Homebrew/homebrew-php/issues/3236 Plus there are a few quality of life things that `brew-php` provides, like having a single simple command for unlinking and linking in one step (e.g. `brew php link php72`). I use `brew-php` in the automated scripts I use to provision a new development machine. You can see [the difference it made](https://github.com/ezzatron/dotfiles/commit/271fb90186643825e65fed4ffa8f58ed85b3a244?diff=split) is pretty significant.
Satis is very nice and simple to setup it only getś a bit slow if it contains many repositories especially if they are a bit large.
You can also use phpbrew (not related to homebrew) https://github.com/phpbrew/phpbrew
I see how it helps you. Can't say I've ever had an issue with how it works out the box, but I'm sure it's useful for folks who have. 
[removed]
For example when you need a where clause to be conditional and that where clause depends on a join, it's much easier to use a query builder instead of raw sql so you can group both in a condition instead of concatenating stuff everywhere. It's even easier and more readable to build a scope in an ORM. Also for simple projects using Active Record ORMs you often don't have to write any queries at all. That said, I don't think ORMs are an alternative to writing SQL, they're just tools that helps you write some SQL easier, but I think using an ORM without a good understanding of SQL is a very bad idea, and you don't have to use the ORM for everything, most of them provide a way to make raw queries because there are times you need to write some SQL yourself.
The main reason I use an ORM is to write less SQL. I really do not want to write get SELECT * FROM table where id = X or UPDATE / INSERT in table and several other common operations for every single entity in my system.
Usual mistake: mix should be to use them where operations are within a "worst case scenario of a few hundred records to be operated upon", and to not use them for anything else (OLAP)
The question text is quite confused, but overall you won't get to run `schema:validate` and get reproducible builds unless you do stuff the way the DBAL expects them to be done. Any customization you add to the schema will cause a possible `ALTER TABLE` statement requested by Doctrine DBAL, and that will make `schema:validate` fail. The ORM schema tool is designed for scaffolding, not for fine-tuning. If you want to go with fine-grained customizations, I strongly suggest using http://sqitch.org/, a proper RDBMS (NOT MYSQL!!! You want something with transactional DDL) and careful DB-level tests as part of migration verification steps. 
1. You can create a custom DBAL type. See http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/cookbook/custom-mapping-types.html 2. Quote the table or column name in the mapping configuration. E.g: @ORM\Column(name="`from`")
Check the user permissions, dig into the library and find out where it's looking for the config directory, as well - I found the apache home directory to be /var/www, rather than /home/www-data when I was doing something similar (though I was using https://github.com/cpliakas/git-wrapper) 
I did try that at some point, but I had some issues getting it working (can't recall exactly). It's also significantly slower to compile your own, especially if your processor is weak. If I ever have a need for a really custom PHP build I would definitely check it out again though.
Just adding a reference to [quoting reserved keywords](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/basic-mapping.html#quoting-reserved-words) in the ORM docs. We don't quote everything by default due to case sensitivity issues in cross-DB operations.
Thank you for the answer. I managed to find the same answer for 2 before reading your reply and it works this way. I will try to create a custom DBAL type to also fix 1.
That's generally a goal with middle-ware/chain of responsibility/decorators. Next execution unit in sequence can work on results of previous one. It's desirable property. Question that need to be answered is this: What value does inheritance add? What constrains or weak points it's introducing?
Fair enough, thanks for answering. Please don't think I was being difficult for no good reason. I'm just not completely sure of the benefits but that's probably more down to my lack of understanding.
I did have an issue for installing it at some point but I find that it works way better especially if you need some extensions for a version but not for another.
I'd argue ORM are not a good fit for most php use cases: you have a script setup, doing things alone then killed. What use is there to map database records to objects? They don't live long and are not modified a lot. With something like a server or a desktop application where you get objects living for hours and seeing a lot of modifications you want an easy way to record those edits and propagate them to any object referencing them. Now ORM make more sense.
Are you suggesting to use the right tool for the job???
Hello, could you please also give us the logs associated with the error (probably printed in a logs file). My intuition would be to go to check the php.ini file and check the line memory_limit.
&gt; [Fri Dec 29 12:46:42 2017] [-:error] [pid 22177] [client XXX] [host XXX] PHP Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 85 bytes) in X.php on line 46 True, thanks. Is there a way to workaround this? It's set to 128 MB and apparently I can't change this.
You can first check the php.ini file you are using (with phpinfo for example). What is the error message you get when you try to modifie it? You can also change that value of memory_limit directly in your php code: "ini_set(‘memory_limit’,’500M’);"
Tried that already, it doesn't change anything. Also checked the providers documentation, I cannot change it above 128M on this contract. Trying out this solution currently: https://stackoverflow.com/questions/5249279/file-get-contents-php-fatal-error-allowed-memory-exhausted
When does it happens? Before or after json_decode? Also for the love of all you hold dear, never use '@'.
 $decoded_data = json_decode($data, true); is the line in question; @ removed, thanks.
Here is streaming json parser for php: https://github.com/salsify/jsonstreamingparser Use it to read enough data to perform single/batch of inserts, then read some more data to perform single/batch of inserts, then read .... Memory usage should be constant this way.
So streaming parsing is the thing you look for.
I tried that one - could you point me in a direction how to implement that? I tried to basically copy https://github.com/salsify/jsonstreamingparser/blob/master/example/example.php but I basically never used any foreign PHP plugin than FPDF. require 'JsonStreamingParser/Listener.php'; $listener = new \JsonStreamingParser\Listener\InMemoryListener(); $stream = fopen($url, 'r'); try { $parser = new \JsonStreamingParser\Parser($stream, $listener); $parser-&gt;parse(); fclose($stream); } catch (Exception $e) { fclose($stream); throw $e; } var_dump($listener-&gt;getJson()); This results in PHP Fatal error: Class 'JsonStreamingParser\\Listener\\InMemoryListener' not found in file.php on line 51 with line 51 being $listener = new \JsonStreamingParser\Listener\InMemoryListener();
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [salsify/jsonstreamingparser/.../**example.php** (master → 0b6403c)](https://github.com/salsify/jsonstreamingparser/blob/0b6403c8a2b1fc4c5af77b5c0174c11bd958a9d2/example/example.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply drwmg2f.)^.
Read a different configuration file for each environment. The environment can be set a number of ways, like in the entry point or with environment variables.
On one site I serve files from different directories, one per environment (staging, www etc.). I then use 'basename(dirname(dirname(__FILE__)))' to find the directory which contains the site and have a switch statement to set each per-site constant based on that. Another option would be to do something similar but base it on the hostname (e.g. localhost vs example.org).
You do know what this error means, right?
Are you trying to use the same docker container for both "regular running" (e.g. over HTTP) and also command-line unit testing? I'd rather approach that as having two different application-configuration sets (INI files, whatever) and using `php -d 
Use environment variables. Can be read in PHP using $_ENV['variable']. Can be set in docker-compose file (which can also take environment variables from host. In production you set different variables. The benefit of environment variables is that they can be read by just about anything.
1. /r/phphelp 2. like other said already, it makes no sense to post (or google into) the code, you need the error message to get the clue. 3. ini_set('memory_limit', '1G');
Thanks folks. Sounds like the unit test environment just needs to be treated as a different environment completely. Makes perfect sense! If that's the case, I can just manage that via environment variables. Thank you!
Can you post code? (on pastebin or something like it?)
As you can see in the error, it's not getting to the "END" portion of your procedure. When it sees the semi-colon (;) it is thinking that is the end of the query and thus the error happens. Try something like this: DELIMITER ;; CREATE PROCEDURE test (IN ees varchar(50),IN pere varchar(50)) BEGIN insert into asd (ees,pere) values (kana,mees); END ;; DELIMITER ; 
Thanks, I found out how to manipulate the InMemoryListener.php to my likes so it bulk inserts directly whilst iterating over the array.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
oh thanks man this working now I can finish my job :)
You can lead a horse to water but you can't make it drink! Watching you try to explain this had me on the floor ahaha!
&gt; I was liking the docs for MessageBird but you can only send to 50 recipients at a time. Then just call the function multiple times maybe? :-)
Twilio API does this pretty cleanly https://www.twilio.com/docs/quickstart/php/sms#overview
I've found the other main benefit is that it allows almost late-binding calls down the class hierarchy. If a child would want to pass information to a parent, it would either have to know it at the start, and pass it through the chain with say, an associative array, or it would have to do something like: First the parent would have to traverse to the deepest child, and then it would have to pass a recursive message back in the opposite direction, until it found one which wanted to change it (or itself) and then return that call. The class hierarchy guarantees that you always get the deepest child returning the value.
Methamphetamine? Desomorphine?
asdf
Divide by 50 and queue!
But you write something that isn't significantly different in your ORM. It's not quicker and easier to write, it's just different. Also, you have to learn it on a per ORM basis instead of a per DB basis. There is a higher chance of using a different ORM per project than DB.
Nexmo has a good API https://www.nexmo.com/products/sms And a library https://github.com/Nexmo/nexmo-php
Taking a step back for a sec here, running **unit tests** absolutely should not require a database. That's an extremely clear indication that the tests are not being mocked well. There should be effort put into place to remove that dependency, it does not scale well and makes all kinds of CI down the line extremely difficult. For the problem at hand, however, I believe that phpunit (if that's your particular poison) has some kind of init file that can setup a bunch of pre-test things; one of those being you have a chance to `ini_set()` whatever you want.
Divide by 50 and conquer!
Second Twilio. Rock solid and stable. Pretty cheap too. 
They are not unit tests, maybe integration, but definitely not unit. Maybe OP got it wrong since he's not a developer. anyways, assuming those are integration and there's a good reason to spin up a container for tests, it should be an independent container configured with required services for those tests. No reason to mix 2 functionalities in the same container (since they are so cheap to spin, which is a major advantage of using them in the first place)
Overall this is well written however I was a bit confused when it diverted into installing and configuring an oauth2 bundle. Usually these sorts of articles just use the in memory approach or maybe the FOSUserBundle for managing users. Then I realized that the site hosting the tutorial was in fact an oauth2 server site. So basically a bit of advertising. Which is fine. I think more apps should use oauth2 and avoid the possibility of user password's being leaked. Not really sure of integrating the DotEnv stuff into 3.3 is such a good idea. Bit of a hack. 
It is possible to organize SMS by threads? Like a whatsapp conversation 
... No Of course not... why would we do something logical.
no. thats not what sms is.
Hey Marco, your link seems to be broken
I remember how hard it was to learn everything I needed to know on my own when I first started out. It'd be wonderful if there was a platform that allowed learners to find mentors in their area and for the mentors to receive proper compensation for their services. So I've decided to start a project to solve the problem: www.teamtulia.com. Let me know if you think this is something that could be beneficial for you. I really want to do something good for this awesome community. Thanks!
&gt; Pretty cheap too. Depends on your volume - its very expensive if you send 100k+ a month.
Use the HTTP middleware and put one responsibility per middleware. Here you have an idea of what PSR have for this subject: https://github.com/http-interop/http-middleware
hmm I'm not talking about UI 
At 100k a month, I'd assume everything is expensive. 
Which one? Sqitch.org seems to be online...
Not SMS exactly but WhatsAPP. A couple of years ago I dabbled in its unofficial API. You might be able to get it working. It is a fun API to try. 
I work with symfony, in docker. We deploy with an app environment variable which determines which run configuration in run (dev, test, prod). We also use it in our startup scripts to run unit/functional tests and exit.
It's a more than fair question! Never use a library if you don't see the benefit :) The author of the library I'm basically copying has a really good explanation of why it might make sense: https://github.com/krisajenkins/yesql#rationale
 SELECT * FROM texts WHERE phone=? ORDER BY date DESC
Depends. Twilio is great but at high volumes its one of the most expensive providers. I know the place I work for were using it, and got their per message price down to 10% of what Twilio were charging. Thats like going from 4 cents per message down to $0.0016 per message Thats $4k down to $160. Not an insignificant saving really.
So these will be secure against pirates? Or will they still go phar phar phar? ^^I ^^regret ^^nothing
I'm not sure what PHP version you are using, but that works as intended. Perhaps you are speeding errors. See my example code: https://3v4l.org/aG7n9
https://www.startutorial.com/articles/view/5-new-features-in-php-7-that-you-should-have-a-look-at#sec2
To a certain extend. The case where it is not enough is when you are using a PHAR for a SAAS where your PHAR execute uncontrolled code, for example a service like SensioLabs Insight (https://insight.sensiolabs.com/) which test if your application boots among other things. In that specific case, a signed PHAR is not enough as explained in https://blog.sucuri.net/2017/07/code-injection-in-phar-signed-php-archives.html. But in that scenario, this can only be fixed at the infrastructural level e.g. using one shot isolated containers.
You might be interested in guarding against this with a tool like [phpcs](https://github.com/squizlabs/PHP_CodeSniffer).
Plivo is cheaper than Twilio in my country. Check it out for your location. https://www.plivo.com
There’s a comma included in the link. (only reddit mobile app.)
Building a social network is a large task, especially if you haven't done any programming before. Better start with small problems first.
just to be clear, declare(strict_types=1) only works on a file basis. So you have to put it in each file where you want to enforce types. For instance, if you have two files, A.php and B.php and only B.php has the declare in it. Calling functions from A.php which are in B.php are not strictly typed. However, calling functions from B.php which are in A.php are type safe.
AFAIK laravel comes with a nexmo interface out of the box
No it is not possible to do what you are asking. If I am understanding you right you want PHP to throw an error if the programmer has used a function which does not utilize type hinting. Unfortunately (or fortunately depending how you look at it), even strict mode does not FORCE a developer to utilize type hints in his or her code. All strict mode does is complain if you have used a type hint in a function declaration yet later try using a different type when calling the method. That is all strict mode does. What you are looking for, perhaps is a [static analyzer tool](https://github.com/exakat/php-static-analysis-tools) which can inspect php applications for certain type of code practices. Or, as others have said, you can use reflection to create your own.
interesting , i wonder how you sign up as a mentor? I have been doing this almost 19 years now. When I got my first senior dev job for a big company (discovery channel) i called the person who mentored me and got me my first internship job to say thanks. He told me if i wanted to say thanks I should help someone else the same way.. If anyone is interested i am always open to do code reviews or help anyone out just PM me, like i said i have 15 yrs experience with PHP almost 19 in LAMP (perl)
If the Phar is readable, it can be reproduced and used anywhere, just like any other file. If the Phar is not readable, it's not usable. Any encryption scheme would necessarily have to make the contents readable to be used, at which point a malicious user could make a copy. Nothing could ever really prevent it from going phar phar phar. The signature is used to verify that the file is unaltered. It doesn't do anything to obscure the contents of the Phar. From reading OP's article and [the article he linked to](https://blog.sucuri.net/2017/07/code-injection-in-phar-signed-php-archives.html) about subverting signatures, it sounds as if the Phar signing mechanism is basically useless. You would have to build in some mechanism in the deployment process to verify that the signature is valid and signed with the key that you expect. i.e. `wget` the phar, `gpg --verify` the phar, and then swap it into place if the signature is valid.
everything has trade offs, hand code all your SQL you will be doing a lot of house keeping and the app will be hard to maintain, anyone who has been around for a while does not fondly remember the days of thousands of hand coded SQL statement libraries. For most CRUD ops a ORM will do fine and for other things you can usually get around the ORM to the underlying PDO driver. plus these days there are so many choices for DB storage that arent even rdbms that you can just take your pick , something like doctrine which can handle ORM/ODM is a nice middle ground. 
I think that many people who don't think they need their cookies encrypted actually do. If the cookie is only ever meant to be read by the server, then encrypting it precludes there being any use to stealing the cookie. As the fine folks at Cloudflare point out, [modern crypto isn't really all that expensive.](https://blog.cloudflare.com/how-expensive-is-crypto-anyway/) Better secure by default than leaking information that could turn out to be valuable.
has zephir finally been update to work with php7? if so i am very excited!!! i love zephir but they were way behind in php7 support last i looked. hope to get back to using it ssooon!
my biggest reason for not using phalcon is active record :( no idea why people think its a good idea
symfony encourages best practices, and that frustrates many younger devs and people who just want a working website and dont care much about long term maintainability. laravel encourages some pretty horrible practices, though it is getting better it is still a chore to do things "the right way(tm)" but i have been told you can get up and running faster. the problem is i work with a lot of devs who are junior level or "grew up" on laravel and now have horrendous practices that are extremely hard to break them of. especially because laravel puts in a lot of road blocks to doing things the right way. you almost have to go out of your way to do it. PHP core is generally going in the right direction with stricter typing and much less push of "PHP Magic" feat ures. where as laravel never saw "PHP Magic" that it didnt like. I think its really pushing many devs in the wrong direction. 
Also, if you want static typing, PHP is the wrong tool for the job.
yes doctrine is more complex but it is also a mapper pattern meaning that your business objects (domain objects) are decoupled from your database code, so it allows you to have conceptual differences between your business objects and your DB schema. Eloquent to my horror actually ties up your entire application deeply with the DB schema design. G-d forbid you might want to change a column name in the DB eventually, you have to change it a million places in your application. Worse yet, because it uses "PHP Magic" your IDE probably wont help you much finding these refactor points furthermore there is shit loads of "magical" shit (__get(), and __call() proxies etc..) in just about every piece of eloquent. it makes the API of the orm confusing as hell and agai, your IDE cant really help much. yes Doctrine2 is a little confusing at first, but no once you get the hang on if it, especially if you have ever had to change a DB col name you will be really thankful for the mapper pattern. also testing is much easier with doctrine. i have seen many applications of laravel that have actually introduced repository pattern because its hard to test using the active record pattern that it uses.
Ummm... a significant chunk of the last few major releases of PHP has been focused on fixed types, and, if memory serves, part of the internal optimisations includes detecting types and replacing variant opcodes with type specific versions. 
Not possible to do at runtime, but definitely possible to do via static anaylsis. [Psalm](https://github.com/vimeo/psalm)* has an `UntypedParam` issue that is emitted when it can't find a type for the given parameter. * I made it, shameless plug and all that.
You can use [assert](http://php.net/manual/en/function.assert.php) `public function testFunction($a){ assert(is_string($a)); echo $a; }` if $a is anything but a string, it will throw an error. 
Check his username and then post history ;) 
&gt; Environment variables really won't work since those are set when httpd/php initially starts. Can you elaborate more on why this wouldn't work? With docker I use environment variables passed in from the docker-compose.yml env file which passes to the apache config's SetEnv into the php and that works fine for me from one environment to the other. 
Dude, don't get me wrong. I know Eloquent is full of magic on the scale of the Harry Pottery universe, but in terms of fast-tracking an idea to reality - it does exactly what you need. Let's also be real in the idea that when there is a hot-spot in your application you don't make your "orm/active-record" call "more efficient" - you drop to raw SQL and PHP. But if I'm being real I'm really bitching about the work/learning curve of Doctrive vs Eloquent. The reality is that there is a reasonably steep curve on both if you decide to be an infidel and go the "no framework" approach and try to use either. The overhead for Doctrine is higher, but I'm still in development and can see the benefits of a POPO for entities.
Thanks, I revisited the litespeed webserver documentation and cannot see the references to .htaccess cache, indeed the open source version seems to *handle* Apache mod_rewrite rules but inside their own config.
I have had the exact same sluggish experience with PHPStorm and IDEA as /u/crazyfreak316, on a Xeon 1275v5 workstation with SSD drives and 16G RAM. The little waits and sluggishness simply breaks my flow when programming and I just can't help focusing on that instead of the task at hand and becoming annoyed. But don't take *my* word for this being a normal user experience: https://google.com?q=phpstorm|webstorm|idea%202017%20slow|sluggish%20site:jetbrains.com The crazy part here is that I don't perceive vim as sluggish when I edit code on my RaspberryPi 2 via SSH. At least that's my vim experience on a system with a dog slow 900MHz ARM processor, 1G RAM @450MHz and a DOG SLOW MicroSD card as disk where all screen updates have to be sent over a congested wireless network with considerable packet loss. So maybe it's not that crazy a thought after all, to upgrade a snappy text editor to something more IDE-like instead of trying to get a big beast of an IDE to perform as well as a snappy text editor?
`assert` is generally [turned off in production systems](http://php.net/manual/en/ini.core.php#ini.zend.assertions), though
Perfect! This is what I'm planning on doing. Thank you.
Yep, I was mistaken. Spoke with some of the devs. They are integration tests! Sorry for the confusion.
PHP and it depends on how much time you put in to study and write code. I suggest starting with Team Treehouse. 
&gt; social network: Php7 or node js ? ... lol. Neither.
why?
What a great reply, you fucking joke
&gt; how much time to learn php7 http://www.norvig.com/21-days.html &gt; What best for build website, social network: Php7 or node js ? Those are both suitable choices. Others include (but are not limited to) Python, Ruby, Java, and C#. Honestly, most programming languages are fine for the task. The real challenges are language-agnostic, like obtaining users.
Well, OPs never programmed before, so I doubt he's building a social network any time soon. I'd say this entire post is a fucking joke.
As I said, most people only use a session cookie, which it's absolutely worthless to encrypt. If your session handler actually stores state in session cookies, that must absolutely be signed and encrypted, but that would be on the session handler side, not on the raw cookie handling side. If you want cookies *separate from session storage*, both of which are enabled by default on Laravel, then most likely you need client-side access, and therefore no encryption. Otherwise the use case makes no sense.
Symfony dev here, since that seems to be familiar. We have integration tests running alongside our unit tests. I hate that they are bundled together (hey choir). Anyways, they are both ran with phpunit, but every time we have a failed test, it's in integration with some service issue, or order of operations with the database or redis. I've only run the environment in test mode with database/external services, twice in the last three years. Why? Tracking down a rather nasty to find bug that was causing a segfault. Same issue both times and ended up changing how we approached the problem instead of the way we were. Honestly should have done a write up of how and why for my benefit. Tldr; not common to need a running test environment with all dependencies. With docker, we have a docker compose process (thanks makefiles) that spins up a database with fixture data (thanks docker mounts) to run tests on dev machines up through build server and test/latest CI deployment. If you are looking at CI as a whole, consider how data/props are set up throughout your process.
Thank you! Good advice. Definitely thinking about the big picture here.
&gt; how much time to learn php7 About 5 minutes to learn how to do a hello world. Might take a bit longer (order of years) to become a good programmer who is fluent in whatever language you're talking about. &gt; What best for build website, social network: Php7 or node js ? Probably whatever the company you're working at is using. If you're trying to build your own from scratch, then presumably you'll already know quite a few languages well by the time you're actually building something worthy of production. Presumably you'll have various components written in various languages.
I believe this package has been promoted already in the last couple of weeks, without any major change to elicit repetition. Please refrain from shameless package promotion and keep library promotion to the therefore listed weekly posts.
Please don't visit that page if you suffer from epileptic seizures. Those animated images woke me right up.
After reading comments from fellow Redditters and giving your post another read, I see I misunderstood your question. Static analysis combined with forced checks through CI should be the way to go for you :) 
Completely fair. A small list of providers based on load size would be useful in this (and really every) situation; and using Notifiables with Laravel in this case allows for pretty easily switching between said providers, so it's best to know before hand a growth plan.
Using regular expressions to parse HTML is really undesirable for a multitude of reasons. Yol should use a DOM parser instead.
There is an existing PHP mentoring project: https://php-mentoring.org/
If you are looking for the classic data types. Look for Type Declaration in http://php.net/manual/en/functions.arguments.php But it's a php 7 feature. php5 only does OO Self and arrays. 
php 7 does it. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
A simple select/update column could do the trick or using a unique table to keep track of unique views (based on ip) if that's your goal.
it is my goal but would saving visitor ip a good idea ?
only real way to keep track of 'unique' users.
nice
I regret of saying bad things about Codes of conduct . These are necessary everywhere. To avoid unappropriated behavior from morons. 
Sure, but this thread shows that while you can kinda get it to work, if it's important enough to you that you want to *force* it, you'll be much better off using a language where it is actually forced already, and has played a part in the design of the language, libraries, and runtime environment since the beginning.
Thought it was going to be the comic about skub.
Never heard of Hoa before. I gather its a library of things. What else?
///1
&gt;it sounds as if the built-in Phar signing mechanism is basically useless I think it's reasonably good. Maybe it could be better, but as you can see in my comment above I think the case where this mechanism is not enough is also a case where you have to be bring more security at the infrastructural level
If the signature can be removed, the phar altered, and a fraudulent signature appended, it ceases to give any assurances that a signature is supposed to give. Given that possibility, what value remains to the built-in phar signature?
That's a set of PHP libraries yes. It is know to be well structured, easy to use and efficient. Some popular libraries are hoa/ruler (https://github.com/hoaproject/Rulerl, hoa/console (https://github.com/hoaproject/Console) or hoa/websocket (https://github.com/hoaproject/Websocket). Its community is engaged in PHP internals, or in other projects, like atoum (https://github.com/atoum/atoum). What do you need to know?
&gt; start hitting complex queries Yes! &gt; large data sets Eh. This may not necessarily be the ORM or the ORM exclusively. &gt; that has the remote possibility of becoming complex I'll stick with raw SQL or a query builder mixed with SQL. You can't always see that and ORMs make it easier to build it out faster. Use it for the CRUD and when you hit the complex queries, use complex SQL. Sometimes a query builder can help but you're still using the ORM.
It can but only in the case where your PHAR execute code. So there is two cases: - you are executing it on your code, so yes you can corrupt the PHAR... you can also blow up your computer 1000 different ways - you are executing someone else code In the later case, there is a risk, however it doesn't matter if you are using a PHAR or not... In any case you have no idea what that code can do. So if that's a big of a deal, e.g. if you are managing a service like SensioLabs Insight, there is only one way: isolate that analysis so that even if the attacker can get access to the machine it's gonna be a limited access and won't be able to do much and trash the whole container at the end of the analysis.
I just want to say, my wife and I really like that logo. It uses all brackets in a very simple layout and spells out the name. It's just great. Bravo. 
It's fucking nothing.
The idea of going back to writing paragraphs worth of SQL is not something I can stomach. For 97% of the queries I write the ORM can write efficient SQL. It's easier to read as well. For the remaining 3% of complex queries I will write em old school. Also the ORM is immune to typos and I have found most errors in my SQL are typos. On the negative side, using ORMs has dulled my SQL skills. But I have done all those complex things in the past so I can relearn when necessary. If I was teaching a SQL class geared towards developers I would probably spend the first half of the class writing raw queries via PDO and the last half using an ORM.
PSR bla bla bla billshit. In my eyes to write down the rule „use spaces for indention“ is just stupid. Do whatever you like deploy a .editorconfig and the fuss is gone. The rest is... well, it’s just a case of taste neither runs „better“ or „faster“. Just don‘t edit lines which you don‘t need to keep the changes in the VCS as small as possible. Same with if (this === true) or if ( this === true )... endless... sometimes i think this discussion is more religion than rational.
Wow that logo is very cool :D I agree
It is a quite awesome set of libraries that solve problems that are generally out of range for the average PHP developer. 
I find it nice that there is a server implementation of that protocol but I'm not going to use it. From the same reason I'm not processing the uploads with php for the past 10 years. Having the whole php runtime up and busy with uploads sucks. Something else with smaller memory footprint should be dealing with this. e.g nginx with upload module or the original tusd deamon written in go
erm &gt; md5($_POST['password']) NO!!! Never ever use MD5 for passwords Use PHPs password functions: http://php.net/manual/en/function.password-verify.php and http://php.net/manual/en/function.password-hash.php 
If my client ignores the location header I will see the admin dashboard.
gurusiksha is the best php training center in Kanpur. register now for a free webinar on our website. gurusiksha have vertex mentors team for training students as per company placements requirement. join gurusiksha for software training and take 100% guaranteed Microsoft certification.
&gt; `$db_con = new PDO('mysql:host=localhost;dbname=loginsystem', 'root', '');` Root without a password? LOL &gt; `$statement-&gt;execute(array(':email' =&gt; $_POST['email'],'password'=&gt; md5($_POST['password'])));` What /u/maca134 said. [Learn how to do it right in any language](https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016). 
I could create a whole list of reasons why you're wrong, notwithstanding the fake stats controversy, and the fact that his "[ambitious roadmap defined by the community](https://github.com/hoaproject/Central/milestone/1)" is literally all just himself, but it wouldn't be worth my time. For whatever reason you're now in cahoots with him, I don't care, but it reflects poorly on you.
Essentially you would replace anywhere the tutorial talks about inserting into the database with file_get_contents/file_put_contents but if this is for anything besides a learning exercise I'd recommend using the database instead. There are lots of painful problems that a database will solve for you.
/r/phphelp
I also saw some php scripts running in crontab for the root user 😱
As other people have said, you can use static analysis to check for it. If you're using GitHub, you can then set up Travis to automatically run that over every PR that's made. You can then set up GitHub to now allow merges in to certain branches if Travis comes back with a failure
TheObviousChoice()
`notSoObviousChoice()`
I have a lot of experience using MySQL in combination with php, it's easy to get the hang of. Not the most efficient out there though 
There is no such. PDO has made using different database types a lot easy by abstracting all access to the same interface. Do your research and use a DBMS that suits your use case. 
`use_snake_case_for_functions()`
Ok thanks
Not the most efficient? That is highly dependent on what you use it for.
Thanks
It needs to query from large sets of data
no() 
Postgres is a way better alternative. Try it. 
Use PSR-1 http://www.php-fig.org/psr/psr-1/ Method names MUST be declared in camelCase.
MaybeNot()
I’m not asking about methods, but functions. Notice difference?
Though PSR1/2 state that method names should be camelCased, I don't think they mention regular functions. For them, I personally use snake_case, which is the most used convention for core functions. So if it's a method, it's `doSomething()`, if it's a function it's `do_something()`.
PostgreSQL. It's free, works perfectly and actually supports most of the SQL standard. You will never go wrong with it.
Yes. Most core PHP functions use snake case, and those that don't are usually from the old days, with new ones being implemented using this convention.
MySQL/MariaDB is the most popular one. But PostgreSQL is more efficient in some cases.
MySQL may be the most used database (doesn't mean best, but definitely more help out there if you have questions). I've used MySQL, PostgreSQL, MS SQL, Informix, and even DynamoDB and SimpleDB (both NoSQL) with PHP. They all work fine. It really depends on the type of application you're building.
Query by what? Query by a given ID? Full Text Search? How much Data? It really depends on what you are planning. I have large document counts within my MySQL Database, but (good) full Text Search is pita, slow. So I sync the relevant Tables with elastic Search or algolia. Fast and better results. For the Most common use cases (User Database, relational Data, ...) Without the need of high scalability (beyond master/slave + load balancing) MySQL or another relational dbms is just fine. If you really have Terabyte of Data... Check out Cassandra.
Articles like this are why PHP has a bad reputation.
this_is_a_function() thisIsAMethod() Just follow conventions. 
mongodb 
While I love Postres for its features and its IMHO better design, MySQL has better performance for read-heavy loads, which makes it more suitable for most generic web applications performance-wise.
I didn't aim to argue with you at first, but as a team lead, I cannot accept you to insult a hundred of contributors, and hundreds of thousands of working hours for free. That's not because someone is good at writing draft for RFC that it is the only author of everything. You can see many comments from different authors. We have regular meetings where we discuss a lot about the RFC. Discussions happen also on IRC and IRL. You know, this is how projects work. The numbers are real. I won't argue with that. Either you trust people, or you trust nobody. Cheating lead to nothing useful for us. We gain no money. We have our sponsors for events and talks, period. The only interesting point with numbers is that it illustrates a tendency/trend. The number of downloads for 2017 is the same number of downloads from 2013 to 2016 accumulated. The popularity is increasing, and this is an excellent result. You should be happy that an open source project works, especially for a "lib-oriented" project (which is typically the kind of project that is hard to grow). If a project promoting good code quality, sane ecosystem, efficient algorithms etc. is working, why is it bad? In addition, Hoa is a bridge between the research world and the industry (https://hoa-project.net/En/Literature.html#Research). Advanced algorithms designed by researchers are used by PHP developers on a daily basis. This was a challenge, and a risk. It works. This is another argument that makes Hoa attractive. Period. Now, my turn. What do you bring to PHP, and especially to the PHP ecosystem and its users, their businesses, and their daily works? I don't want to be mean, but I don't accept this kind of behavior regarding open source efforts.
Thanks! It has been designed by BrandBrothers as a pro bono, https://www.brandbrothers.fr/en/hoa_typographie_identite/.
Wow.
&gt; MySQL has better performance for read-heavy loads Only if you use MyISAM, which comes with its own downsides
Which one? Psr1 none about func
It needs to be relational, but otherwise, pretty much no requirements other than that I need to be able to use it with PDO in PHP
Just got back to the php world again this year, haven't heard of Hoa before. So essentially if I wanted to pull in a mailing library, database library, into a small project, Hoa would be great for this? As everything independent?
Hoa seems to be a light weight version of https://thephpleague.com/ . I mean, the packages do different things, but in terms of popularity, thephpleague seems to have the edge. &gt; We have our sponsors for events and talks, period. This confuses me. So I guess ya'll had a Hoa Apex event in 2013: https://hoa-project.net/En/Event/Hoaapex13.html Hoa libs collectively had 4,318,000 downloads in 2017, which, as you said, is more than the (at least) four years before combined. So how many downloads did Hoa have in 2013? I'm guessing less than a million. Maybe even less than half a million. There are lots of PHP projects with more downloads than that so how does Hoa have enough sponsors to host a conference with such a paltry number of downloads that ya'll had to have had in 2013? &gt; In addition, Hoa is a bridge between the research world and the industry (https://hoa-project.net/En/Literature.html#Research). That doesn't actually impress me that much. You can find LaTeX generated PDF's done by grad students from just a few years ago giving overviews of how RSA works. RSA. An algorithm that's discussed in probably half the Computer Science textbooks in existence. An algorithm that's been around for almost 40 years now. And people are still pawning off overviews of how it works as new research. The way it looks to me with your PDFs is... a few Hoa developers are going to grad school together. They can choose to do "research" on a broad variety of topics and they've arbitrarily decided to write about the pet project they develop in their free time. Don't get me wrong - 8 million collective downloads is nothing to scoff at. It's an undeniable accomplishment. But some of the other arguments you present for the allure of Hoa seem overstated.
Zephir was updated to work with PHP7 for Phalcon 3.2. Yea, Its now also php7.3 ready, we are doing nightly builds everytime a php7.3 build is available. 
You can enable and disable spesific parts of the framework by editing your php.conf or when you start the framework, instead of building `Phalcon\Di\Default` you can build your services or overwriting the factory Di services with a specific service config.
 &gt; That doesn't actually impress me that much. Go build something impressive then, rather than trying to push down someone that is already trying (and succeeding IMO) to build something impressive.
Exactly :-).
In 2013, Hoa has been downloaded 10k times, see https://hoa-project.net/En/About.html#Story. Yes we have sponsors :-). I don't know why other projects don't have ones, or maybe they don't need such event :-). The community aspect is really important for us. Hoa Apex is a "moving" event, we move to meet the community. About the research, this is not about some random students. The 3 articles have been published in important conferences and have been published in notorious books. A journal and a PhD thesis have been published too. This is pretty serious. It's not only reinventing thinks: Real contributions/innovations have been brought. You can read them :-).
I acknowledged that the project has achieved undeniable accomplishments. Quoting my last post: &gt; Don't get me wrong - 8 million collective downloads is nothing to scoff at. It's an undeniable accomplishment. But some of the other arguments you present for the allure of Hoa seem overstated. But that said, achieving success in one area doesn't mean you should go around claiming success in other's. Consider Laravel, for example. It's success in the PHP world is very impressive. It's undeniably impressive. But if Taylor Otwell then went on to claim that Laravel had saved him a $2.00 once because a cashier recognized his name and decided not to charge him for a particular item because of fanboyism... I wouldn't really care. There are *real* accomplishments and there are manufactured accomplishments. That I'm "knocking" what I perceive to be a manufactured accomplishment DOES NOT in ANY WAY undermine the REAL accomplishments this library has had.
This post has no direct value, explicitly for the PHP community. You should try posting this to a more generic community ;-)
&gt; In 2013, Hoa has been downloaded 10k times, see https://hoa-project.net/En/About.html#Story. &gt; &gt; Yes we have sponsors :-). I don't know why other projects don't have ones, or maybe they don't need such event :-). The community aspect is really important for us. Hoa Apex is a "moving" event, we move to meet the community. Interesting. I think that's actually really impressive, being able to have a conference with only 10k downloads. But even despite that, Hoa has come a far way for sure. Congrats!
Thanks for the advice, do you have a suggestion for which ...?
Thanks, likewise.
Sorry, I only subscribe to this subreddit. I do believe there are some as broad as everything about programming or everything about web development. You'll get a much better reach from posting to such an audience :)
Thanks! And to be honest, the fact sponsors decide to support us has always been a mystery for me. This is also a community support, someone knowing someone etc. I'm glad we can do that.
I agree with what you said about Hoa. I'm concerned by the: &gt; achieving success in one area doesn't mean you should go around claiming success in other's. As far as I know, I never claimed such things, or if it happened, it's likely to be unfortunate, and sorry for that. Can you provide some highlights so that I can fix that please?
r/webdev
Here's a sneak peek of /r/webdev using the [top posts](https://np.reddit.com/r/webdev/top/?sort=top&amp;t=year) of the year! \#1: [Have you ever felt this??](https://i.redd.it/apcs1kvrpy4z.jpg) | [283 comments](https://np.reddit.com/r/webdev/comments/6iklbl/have_you_ever_felt_this/) \#2: [The FCC is killing Net Neutrality - Help spread the word in your own websites](https://np.reddit.com/r/webdev/comments/7emfo5/the_fcc_is_killing_net_neutrality_help_spread_the/) \#3: [An animated loading icon I made for my side project mydevportfol.io. Supposed to convey that the app is coding the user a website. Happy with how it turned out, feedback appreciated though.](https://i.redd.it/qftx8zcngnjz.gif) | [200 comments](https://np.reddit.com/r/webdev/comments/6xsl3l/an_animated_loading_icon_i_made_for_my_side/) ---- ^^I'm ^^one ^^years ^^old ^^today! ^^:D ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
MVC is one of the most common Design Patterns used in PHP development frameworks. I think the MVC that you mean, Iltar, is a .NET thing.
&gt; used convention for core functions. function names are currently case insensitive. So you could consider `strToUpper()` and `subStr`. Maybe that's why snake case is so popular for functions. But I personally use snake case.
Thank you, another guy tipped me off about /r/webdev though :)
I wouldn't have known about libsodium, or that it was going to be integrated into PHP 7.2. It's probably the feature I was looking forward to most. If you're doing any encryption/decryption, use it! mcrypt has been deprecated. Thanks to /u/sarciszewski !
It used to be like that, but I think the mods got tired of it.
tbh most redditors (esp. on programming related subreddits) have a prisoner mentality that's going to stop posts like this from getting off the ground. Nobody wants to admit they didn't know something. I'll admit that I became aware of Hack and HHVM because of /r/php though.
It's probably better that you didn't know of them before. Back when Wikipedia migrated to hhvm, you might have been tempted to switch too. And that seems like a pretty bad idea nowadays. 
Why's that? Legitimately asking
things I didn't know existed: humbug, swoole, EasyCodingStandard, hoa/ruler, php-translation, paragonie/csp-builder Env in php is messy. Lot of bugs regarding that have been found in symfony components recently [phpdbg is not designed for IDE](https://www.reddit.com/r/PHP/comments/5zmis5/is_phpdbg_dead/dezvk43/) [symfony dispatcher supplies its own instance to listener, as a last argument](https://github.com/symfony/symfony/blob/170ab6340de84396d316fafe91b284465b4452ec/src/Symfony/Component/EventDispatcher/EventDispatcher.php#L212) guzzle &gt; httplug hoa/ruler &gt; symfony/expression-language yohang/finite is the only state machine library in PHP using objects for state instead of string. [I needed such thing](https://github.com/symfony/symfony/issues/23257). Unfortunately yohang/finite not maintained :( [symfony stores PR comments in GIT](http://symfony.com/doc/current/contributing/code/git.html#pull-requests), nifty some neat articles: [How to properly manage translations](https://jolicode.com/blog/how-to-properly-manage-translations-in-symfony) [API stuff](https://philsturgeon.uk/api/2017/12/18/rest-confusion-explained/), even more of such stuff in his other articles on that blog
That Mockery works very well with Laravel, and that I can mock API service classes really easily with them! Has been making my testing life so much better. 
Thats good to know. I started with Laravel APIs and this will help.
They implemented extensions to the language that were eventually implemented in PHP 7. However, PHP 7 has a different way of doing things than they do, not all of the Hack/HHVM features made it over, etc. Basically, PHP 7 went in a different direction, making Hack no longer a superset of PHP, but rather an incompatible fork.
Redditors love to throw shit at php as much as they love puns, reposting and rick and morty
A reply with links. Thanks mate
PHP natively has function names using snake_cases(), such as array_flip() So if I were to name functions, I'd follow that convention.
&gt; &gt; yohang/finite is the only state machine library in PHP using objects for state instead of string. I needed such thing. Unfortunately yohang/finite not maintained :( even if its not maintained, it is quite stable enough for my usage, use it regularly for document flow manager
Root problem is in slight differences between getenv()/putenv(), $_ENV and $_SERVER https://github.com/symfony/symfony/pull/25523 https://github.com/symfony/symfony/pull/25162 https://github.com/symfony/symfony/pull/24686 https://github.com/symfony/symfony/pull/24113 https://github.com/symfony/symfony/pull/23949 https://github.com/symfony/symfony/pull/23899
Also many packages have dropped support for HHVM.
There are some nice features in symfony workflow component, which yohang one will never receive though. On the other hand, symfony is stuck with string forever due to BC policy. So there is a void for me on a market :-\
Why do you waste your life on StackOverflow? Better yet, why do you split wasting your time equally between Reddit and StackOverflow and writing about it on a defunct website?
Thank you for the reminder. The site works all right on desktop, but yeah there is problem with navigation on a mobile. Should have it fixed soon. As of the waste of time, such a question from a redditor smells like a recursion ;)
Sorry new to reddit :/
tl;dr - Laravel's leading php frameworks, Symfony is still solid, Phalcon's still cool because it's fast and different because it's a C extension and the rest of the frameworks aren't worth discussing in a Frameworks Preview for 2018 article. If I wrote this article I'd actually talk about the frameworks leading into 2018, what they're plans are, upcoming features, new blood, etc... THEN end it with the micro-services section. Things worth talking about: - CakePHP 4 in 2018 - Zend and the direction they are taking Expressive &amp; what's happening with Zend Framework in 2018. - Yii2, regardless of how I feel about it's configuration setup, it's still being developed and pushing out updates consistently. So what's happening with Yii in 2018? Talk about New Blood, while still new and don't offer too many unique features outside of configuration and code organization it's still worth mentioning that solid frameworks are still being developed despite there being healthy frameworks already made: - [Spiral](https://github.com/spiral/spiral) - [Opulence](https://github.com/opulencephp/Opulence)
A delusion in a post about delusions! &gt; **HTTP_X_FORWARDED_FOR, HTTP_X_CLIENT_IP etc. to get the "real" IP** &gt; Just read that old story from Anthony Ferrara and never ever use anything other than REMOTE_ADDR. &gt; TL;DR: everything beside REMOTE_ADDR is just an HTTP header that can be easily spoofed by anyone. The actual quote from Ferrara is &gt; Never rely upon X-Forwarded-For for anything **with respect to security.** Sometimes you need the IP (for logging/reporting/region lookup analytics/etc, not security) and when you are behind a load balancer, like AWS ELB, unless you want to record the IP of the load balancer you need to use X-Forwarded-For
&gt; OWASP up to this day lists [escaping user input] as one of its recommendations, let alone hordes of PHP users reciting this sermon on a daily basis. Whereas you can tell from the above, it's a complete rubbish [...] &gt; As we learned above, escaping has nothing to do with safety or injections. What we need is a prepared statement, not "escaping" for the data (and a white list for the everything else) The existence of prepared statements doesn't mean escaping has nothing to do with safety or injections. It just means that prepared statements are a better way to use SQL databases. Escaping and different contexts are a real trap for beginning PHP programmers, here you are saying it is "a complete rubbish" and I would like to take this opportunity to express my complete and utter disagreement with that notion. Properly escaping JavaScript literals, HTML attributes, HTML elements, XPath queries, XML, and anything else you can think of is absolutely essential for developing PHP applications safely. I know you're a long time poster of this sub and you should know better than to give unsafe advice like this.
Oh, indeed. Thank you for the heads up again. It turns out, though, that I don't really get your comment then, about a dead site. 
Thank you for the clarification. Would it be better if I make it clear that it's only escaping in the connection with SQL injection (and specifically mysql-provided escaping routine) should never be used in the context of security, but only as a syntax-related measure? 
Thank you. I corrected the definition, adding both a note on the security and a case when you are behind a trusted proxy which conveys an outside IP in a predefined variable. 
You should consider adding hash tags to your points so we can link directly to a particular item. Sometimes having to link to a page and then reading down is too much for some developers.
Disclaimer: Hoa Is not a Framework, if you attend to compare with Laravel (as I can read in other comments) or any others it's an error. Hoa is a set of consistent library self-sufficient, that can help you to resolve real issue. Hoa\Ruler permit you to parse business rules within a context through a query language that mix operator and closure. Hoa\Compiler with its own language PP make easy to create an AST by defining the Token and Lexeme. Hoa\Heap to empower Heap implementation with more than just integer as SplHead is limited. Hoa\Options to handle properly the optional value (null / mixed) variables. Hoa\Kitab which is truly an innovation in PHP World, not only powerful documentation but also turned to compile examples extracted from comments to be automatically tested. And lot more... You like, you dislike it's up to you. But never disrespect the community behind, even if the majority has been written by the same person. But hey, it's a fact for a lot of OSS, and for that I thanks Hywan a lot and all awesome persons involved. 
Actually there are hashtags, but only in the table of contents. Indeed it would be better to add to the actual sections as well. I will check if markdown engine I am using can do it out of the box.
Many libraries dropped support for HHVM due to inadequate PHP 7 support (most things are fixed now, unfortunately too late). Furthermore HHVM announced that at least in the longer-term they will drop support for PHP and focus on only Hack.
It's high time we all escaped from this `*_real_escape_string` madness. Prepared statements or bust. https://www.youtube.com/watch?v=_p73PZIDQuA &gt; The above list is highly subjective, compiled from what I see every day n Stack Overflow. Typo. Assuming "on".
Escaping still has place. Prepared statements have lot of limitations. For example, how do you prevent user wildcard hijacking in LIKE queries?
Well, I would rather count this one towards the list :) Honestly, I don't understand how would one "hijack" a LIKE query. The very purpose of the LIKE query is a **wildcard search**. Means you are intentionally let a user to search your database. So, if a "hacker" will do exactly that, why would you call it "hijacking"? Got any real life example that can demonstrate such a threat?
Do people call these hash tags now?!
&gt;You should consider adding hash tags to your points so we can link directly to a particular item. Those are "named anchors" in the page, or "fragments" in the URL. Get off mah lawn ya dang Twitter kids :p
You still need escaping for LIKE though, simply if you want correct results for your query, so a query like "do not" . But I wouldn't call it a security measure. To clarify - I have nothing against escaping per se. Of course it has a lot of use. I am just trying to break the bond between "escaping" and protection from SQL injection. But when it is used on purpose, to create a syntactically correct data literal, or course it is exactly what you want. 
Random example I searched for you http://www.josho.org/blog/blog/2015/04/02/sql-wildcards/. Please search for other examples by yourself. Also notice I mentioned LIKE as an example. There is ton of limitations of prepared statements.
shouldn't it be &gt; Is essentially a grammar tautology that reads as if (isset($var) &amp;&amp; isset($var) &amp;&amp; $var) 
Thank you for the correction. By the way, I remember having an argument with you or someone else from Paragon IE about escaping LIKE wildcards. I am still keep to the opinion that if one is allowed a wildcard search, then they will find anything they want, no matter whether wildcards are escaped or not. But I would like to change my mind if I see a well established example.
Oh yes. I hate my eyes. Thanks a ton!
i tried many other providers, my problem is that the rate of undelivered SMS was so much higher with nearly all other providers, it boiled down to 1 or 2 others being on the same level of delivery % as twilio, and among them the price doesnt deviate that much. but feel free to suggest a different provider if you really have one that is that cheap and still stable.
I don't see the benefits over using free software like Postman, or where a custom solution for e2e tests wouldn't solve what's missing beyond that point. Does OP perhaps see how I'm wrong about that?
This does not handle undefined vars.
I know. In most cases you really don't want to handle undefined vars though. My understanding was OP was using that code everywhere, not only when variable could be undefined.
Octothorpe.
cool tip with that nginx config addition!
No. 
Generally using fetch all is a bad advice. Sometimes result sets are quite big, fetch and row count from the mysql api are objectively better in that case. If it's about querying only the count fetch column is better.
Yes comments like that definitely aren’t a waste of *your* life. Personally I’ve learned lots from asking and answering questions on Stack Overflow. 
&gt; So what's happening with Yii in 2018? Don’t worry, they’ll post every patch update in r/PHP ;)
&gt; Mysql(i)_real_escape_string prevents SQL injection &gt; I'd say that up to this day most PHP folks still believe in this nonsense, all thanks to a stupid note from the PHP manual: "This function must always (with few exceptions) be used to make data safe". "To make data safe", my foot! In reality this function has absolutely nothing to do with whatever safety or injections, merely escaping special characters in SQL string literals, making them immune to SQL injection as a side effect What is this incompetent drivel... Interpolation has one specific weakness, and that is when: - The client issues a charset/collation change through a direct SQL query, rather than using the driver-supplied APIs. - This causes the driver and the server to be out of sync regarding the charset being used. - *If and only if* the old and current charset encode special characters differently (ex. Shift-JIS vs. Unicode) and the charset was changed in the above incorrect way, an injection opportunity arises. Now, in the vast majority of cases, people either don't switch charsets on the fly for SQL (opting to select a charset in their connection settings, which is correct), or they switch between compatible charsets (compatible re. special chars) like ISO-8859 and UTF-8. So, in the vast majority of cases, interpolation is 100% safe, unless you go out of your way to shoot yourself in the foot. To claim interpolation makes values safe to injection "only as a side effect" is especially ridiculous, considering prepared statements are the very feature which is used for security as a "side effect" (it's primary initial purpose being performance optimizations and nothing else). Replacing one type of ignorance with another type of ignorance is not insight in my book. It's about time we start talking about these technologies like adults.
Speak for yourself
It doesn't matter why are they using LIKE. Argument was that prepared statements are all you need and you don't ever need to escape input in your queries if you use it. If I don't escape these characters, I can't prevent user to utilize wildcards. I might want to allow him to search only in the beginning of string, by doing `$query.'%' and he can happilly bypass that just by submitting '%query', so previous becomes '%query%'. Plus of course if I don't escape, search doesn't work as expected with those special chars. User expects `%` would match `%`, not whatever.
Not entirely sure that means what you think it means. If you're saying that it's only true that _I'm_ afraid to admit they didn't know something why does my comment end with me telling people something I didn't know and why am I responding to replies with clarifying questions?
I'm wondering what the person who downvoted a sticky thread was expecting to happen.
&gt; Extensive use of the number of rows returned by a SELECT query wow do people really do that? back when I learned SQL on college (about 8 years ago) my professor taught us how to use `count()` in our queries, so that's always been my go-to when I need to, you know, count the rows on a database table &gt; error_reporting(0) Aparently, a lot of people just do not read the manual on php.net, I know it's not the best source for some things but it's the official page of the language, back when I programmed on PHP for the first time (on 2014) I read the manual back and forth, it was really useful
Escaping wildcard characters for LIKE is a different issue to escaping for SQL injection which is what we’re talking about. Does the ‘real escape string’ function escape wildcards for LIKEs?
https://insomnia.rest/
Bad link to https://phpdelusions.net/articles/error/reporting
Shouldn't it be `LIKE %?%`?
Yep, I have a reverse proxy running and it would be silly to log the IP of my server each time.
What you said here is applicable to string literals, not arbitrary "data". That's the difference that makes all the difference. It is said in the article, if you care to read. The question here is not whether escaping is safe for strings. The question is whether escaping protects from SQL injection. 
Yeah, I don't get that argument. In the full article ( https://phpdelusions.net/delusion/mysql_real_escape_string ) author also mentions PDO::quote as a "right way". I'm pretty sure it's basically the same, only it also adds ' before and after string: https://github.com/php/php-src/blob/9e709e2fa02b85d0d10c864d6c996e3368e977ce/ext/pdo_mysql/mysql_driver.c#L327 I get that binding parameters is a good habit to have, but you can do a perfectly safe website without PDO.
1. In the web development, generally you fetch a resultset that fits a web page, so it's not an issue. 2. In the web development, you are supposed to use templates, and therefore bound to store the resultset in the array before starting the output. 3. Pease read the article. When the resultset is really big, then row count from mysql API is *unavailable at all*.
No, no, that's exactly what I was looking for. Thank you!
Most of time people are using the row count in order to see whether their query returned any data. It made sense for the last century's PHP, when you were starting the output right during the fetch process. But such a practice is a big no-no nowadays, you are supposed to collect all the data first, and therefore can use the data itself for the purpose.
Thank you, fixed!
Yes, you are correct. It seems that I yet to find the right wording, in order to convey the message that I am not against escaping *per se* but only against taking it as a blunt magic protection measure that makes whatever arbitrary data "safe". And in this regard I insist on the phrasing that is currently used: when you are escaping strings, then you should be doing that for sake of the correct SQL syntax. Having protection only as a side effect.
Had to go with the clickbaity domain eh?
I'd recommend https://www.manning.com/books/php-in-action I'd suggest not necessarily jumping into Laravel right away. Try to gain a bit of experience with pure PHP and stumble into some of the problems that frameworks like Symfony and Laravel try to solve before dicing into one of the frameworks.
I don't think it's clickbaity. Not sure if it's a good name at all. I am not a native speaker and suck with naming things in general.
Cake intends on adding some nice middleware features with version 4. Support for Cake 2 likely ends this year.
Postman is awesome, but geez is it slow and hogs memory. Mainly because its built on https://electronjs.org/ which is cool, but these types of frameworks have a ways to go on performance #2cents
The type that can't take hints, so probably was expecting anything...
Well I can't argue that.
&gt; TL;DR: everything beside REMOTE_ADDR is just an HTTP header that can be easily spoofed by anyone. Yes! This is so irritating! I have that in [my answer on IP addresses in PHP](https://stackoverflow.com/a/3003233/238978) (my most upvoted answer ever), so at least Stack Overflow have a good resource about it. But that does not stop people from answering with functions that ignores this advice. People keep posting answers like these: if (!empty($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; } else { $ip = $_SERVER['REMOTE_ADDR']; } and they get upvoted! To be fair, they also get downvoted and a fair share of these answers have been deleted. But the ones not deleted stay on positive votes, despite comments telling why they are wrong.
https://laracasts.com/ It is simply the greatest resources available for Laravel. But it also has generic "PHP" and "programming" content to.
&gt; Support for Cake 2 likely ends this year. Cake2's support will extend for 1 year upon the release of 4.0, so you'll still have Cake2 support going into 2019 at this rate.
I think that's because people feel smart when sharing stuff like that, like they know something special that is not know to common folks. It makes them feel superior.
The CodeIgniter website is probably the best bet. If you use PHP Storm, there's an auto-complete hints file that you can add in: https://github.com/nicolas-goudry/CI-PHPStorm-Code-Completion
If you do google searches for Laravel instead of Laveral i think you will find plenty of useful information. 
Any particular reason you want to use Code Igniter?
I was wondering too, that framework died years ago.. 
I would suggest to use Docker, since you're already using linux, where it's purely native. You will have a lot less overhead, and a lot less wasted Gb on your HDD.
why its a no no? who claims that and why? it's bullshit, outputting right away is much more resource friendly. btw prepared statements at least in past used same function for escaping as said real escape string.. with same bugs. 
&gt; What you said here is applicable to string literals, not arbitrary "data". That's the difference that makes all the difference. The question here is not whether escaping is safe for strings. The question is whether escaping protects from SQL injection. What you said so far makes no sense. &gt; &gt; Interpolation is directly intended to safely render values into a query &gt; See, you are making the exact mistake here that I am talking about. Escaping is not for the arbitrary "values" but for strings only. The various DB drivers support interpolation for non-strings, so that's not accurate. Even in the case where you interpolate, say, floats as strings, i.e. `"1.1974E10"` this is permissible in the SQL standard, and as long as the string literal is valid, which escaping ensures, then there's no possibility for injection, aside from the REGEX/LIKE injection types, which should be taken care of separately (and same with binding). &gt; You must understand that I am not arguing that proper escaping is safe for strings. I am trying to break a long-time delusion that escaping prevents injections by means of some magic. Most people understand that escaping values is about preventing injections through the values, not some fuzzy general notion of injection prevention. So this "delusion" you're talking about... it seems like a straw man. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Every good practice says so. Check any recent source and see for yourself. 
Your ideas are **extremely*" dangerous. &gt; It's not for strings only, it's for values. I have no idea what you are talking escaping for, but this statement if yours is outright wrong. The only purpose of mysql-provided escaping function is to escape special characters in string literals. When used for anything else it would be essentially useless and therefore open to every SQL injection. 
Can't agree here, if we are both talking about db -&gt; iterate+output VS db -&gt; iterate+collect all -&gt; iterate again -&gt; output topic. Its same with (big)files, process row by row instead of collecting all data and then iterating(=memory rape). 
I've never seen that Github repo before. That was a good read.
What can be asserted without evidence can be dismissed without evidence
Well, does this one count? http://www.phptherightway.com/#templating
I talked about Yii 2.1 a little. The new version is almost ready, but it added PHP 7 support as well as better implementation of PSR standards, and so far that's about it... At least according to their roadmap. Cakephp 4 is kind of the same. A bit of clean up, and requiring PHP 7.1+... Nothing to write home about. There are many smaller frameworks and of course custom ones made for internal use. But the only on that catches my eye is Phalcon because of its architecture. 
Actually, this framework is still being supported.
Funny definition of dead. It's a lightweight, simple and supported framework - it might not be as new and shiny as Laravel et al, but it does the job fine (and there's plenty of legacy work that still uses it)
Yeah I read up on MVC
Seconded. I had a wrapper for the API established in under a half hour.
Not my decision, or even a decision taken by the company (it came down from group level, to all units/companies)
Highly recommend this article: [Back to Basics: Why Unit Testing is Hard](https://simpleprogrammer.com/2010/12/12/back-to-basics-why-unit-testing-is-hard/)
Yes, and people from Bangladesh, India and Pakistan are still developing with it, that framework is trending in that area in Google Trends so will keep living until people stop hiring indian developers at 3USD/hr 
That last article (disadvantages of SPAs) is either a few years out of date or very misinformed. The author makes a lot of points like missing native browser functionality (like history states and remembering scroll position) that most JS routers can handle with a few lines of code. He also makes points about hurting SEO, but all major search engines now load client-side JS on their crawlers to address this. Points about script load times have also been made moot with the help of Webpack. Case in point, the article's summary cites Twitter having "reverted to traditional architectures because of these issues", yet earlier last year they launched their React-based SPA site optimized for [&lt;3s app load times for 3G connections](https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3).
I discovered that the subreddit quality is very low compared to other languages, I believe discussion posts for psr, some laravel vs symfony related, or classic anonymous developer asking for help to choice a frameworks, is what maintain the subreddit alive, besides 2 or 3 post are uploaded to /r/php by day. 
Similar message, indeed! 
I'm running on lesser hardware at my company workstation and have no issues at all with performance. Have you checked max file descriptor settings? You may not have it cranked up high enough. For the topic at hand though I agree. People should use whatever they want as long as it doesn't affect productivity or quality. How anyone takes that's on them.
Could you look at a very early version of something like CodeIgniter or another MVC framework?
I have worked on many projects wich switch databases usually for scaling reasons, or end up with a hybrid system that uses a combo of SQL/No-SQL but the point of separating the business objects from the database technology has little to do with the idea of switching technologies, but that its rare that *conceptually* your business/domain objects actually map cleanly on to database rows. Usually you need to roll up the results of a few tables into a domain object to make sense of it. Ideally your application should model your business (domain) in the computer. However most of the time especially with less experience developers they tend to try and map business domain on to a database schema the best they can, and then the models just map to whatever that schema is. Which in the end gives you a generally wonky model of the business in your application. I am sorry if this is not clear, check out some info on "domain driven design" to get a better understanding of what i am talking about and why you should separate your DB schema from your busniess objects. Also my biggest problem with eloquent is that it not just marries the DB tables to your app, but it actually marries the fucking *COLUMN NAMES* so it becomes a massive chore just to change a column name or split something off into multiple columns where it should be like a 1 line change instead it becomes a huge refactor.
&gt; like history states and remembering scroll position Really? They can detect when you go back to your SPA page while you are on **3rd party** page, therefore restore content and scroll position from cache? How? Besides, he doesn't say these things are not possible, just that they have to be reimplemented, while you get these things for free in non SPA app. Re SEO: This says otherwise https://medium.com/@gajus/pre-rendering-spa-for-seo-and-improved-perceived-page-loading-speed-47075aa16d24. &gt; Points about script load times have also been made moot with the help of Webpack. Can you elaborate? Every SPA I have seen has large initial page load time.
wonderful site i love it!
i can see a case for putting those in the reverse order depending on what you are exactly looking for. the example of an empty array comes to mind....
Testing is **very** easy in laravel. You get end to end testing provided for you out of the box. I'm not sure how much easier things can get! &gt; because of the wacky way its DI works Can you elaborate on this? 
Out of curiosity are you using something else instead of Postman now? 
it is generally philosophical differences. Symfony uses the diametric opposite design philosophy of laravel. Symfony escheews php magic, everything is very explicit and done "by the book" requiring a decent amount of configuration to be done to get it running. Laravel does everything via php magic and eschews what would commonly be considered "best practices" by most of the SWE world
&gt; I have a feeling that you have some terms messed up in your mind. For example you are calling escaping an interpolation. I've nothing "messed up in my mind". You escape special characters. You interpolate values. Escaping special characters is part of the value interpolation process. I didn't invent those terms, this is standard terminology the SQL community uses. 
I am not sure why a CRM would require heavy use of EAV tables, I have written many CRM and not relied on it. That said if you have EAV tables you can mitigate the problem of EAV/ORM impedence by using views or simply using a nosql and doctrine's ODM
Before we continue, let's settle the terminology. - here is the definition of the [string literal](https://dev.mysql.com/doc/refman/5.7/en/string-literals.html) that I am using. - here is the definition of the [escaping routine provided by mysql](https://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string.html) that I am using. May be you'd chance to find someone who would like to discuss whatever "interpolation" and "values" but it's not me. Please re-evaluate my article keeping in mind these definitions and leave your comment accordingly. I'd love to discuss it. Sorry, but I don't see the point in discussing my article using the terminology that is not used in it. 
All my comments absolutely stand. This is utter non-sense: &gt; In reality this [escaping] function has absolutely nothing to do with whatever safety or injections Whether you understand the standard terminology I use or not is irrelevant to the fact your article spews bullshit.
nevre heard back from you on this ,still need help?
I suggest you to take the trouble of actually reading the links I provided above. If you will be able to find any mention of the "SQL injection" or "safety" on the official manual page related to "this [escaping] function", I'd love to change my mind. Otherwise, I am afraid you would have to change yours.
I might have previously read/understood wrong, but... If I have a container(say for php 5.5) with projects A &amp; B and I set up/switch to a different container coz project C needs php 5.6+, is project B no longer "online"? 
Docker containers are based off layered images. You can have one image shared with all of your PHP 5.5 websites and a second image shared with all of your PHP 5.6 websites, etc. All running simultaneously (as long as there aren't any port conflicts). It scales really really well too, a lot better than VM's. If two containers share the same exact image then the only duplication is the processes physically running, the filesystems the processes see are shared and only the changes the application makes to the files it sees are saved. What's more, if all the images are minor permutations on the same image from the same person then each version of the image will likely only contain the stuff that specifically makes it 5.6 or that makes it 7.1 or whatever. Meaning you can have 50-100 images stored and available to run containers from without using much space as long as they share a lot of the same layers. It's perfectly possible to just build and run the images yourself but Docker-based development actually has pre-made solutions available. For example, Lando and docksal. I'd look into getting yourself setup on those so that what you end up with can be recognizable to someone other than yourself. The only solution I have any amount of experience with is docksal though Lando apparently has its fans as well.
I don't know. I'm just wondering why you feel you need this? So many years, and a couple of my projects are in the "hundreds of services" phase, and DI is by far the smallest concern in those projects, where all the DI is done "manually", and no specific container libraries and frameworks. Sometimes the solution to a complex problem is mindbogglingly simple, and once resolved, it unties a giant knot of complexity formed in opposition to it. I perceive these complicated DI containers as such knots of complexity, formed by someone's idea of how they should do DI. Something is definitely fucky here, and I can never quite understand why people feel they need for these containers. For example, take this feature list: &gt; A container builder allowing to compile/serialize your service definitions. Why serialize definitions? &gt; Container files featuring a meta language to define your services. Why meta language? &gt; Composer integration, allowing you to import default service definitions from your dependencies. This seems 180 to DI's goals. Dependencies should have no "default" definitions. But even then you need no Composer integration to have a default for anything, do you? &gt; Lazy service providers for big and dynamic class graphs. Why have lazy services, instead of passing a context/factory object to lazily fetch the service? 
Indeed, that seems like him. Thanks!
&gt; The type that can't take hints So pre-PHP5 then?
fixed that typo, thanks.
But why is it not PSR compatible?
Good article, but there are a quite a few grammatical errors.
&gt; Why serialize definitions? I like to eliminate runtime overhead whenever possible, even when I know it won't really impact the performance of a real application. But with a personal project with no timeframe, I can try to optimise the hell out of it. &gt; Why meta language? I can see why people prefer keeping things simple. I've been working a lot with the symfony container and yaml for the service definitions but I was never too happy with it. It works and does the job very well but I thought there could be a more elegant way. I have always been very interested in writing parsers and I saw that as the perfect opportunity. I've been using this meta language now for a few projects and I like it a lot. I'm obviously not objective here and I can definitely understand that not everybody will like it. &gt; This seems 180 to DI's goals. Dependencies should have no "default" definitions. But even then you need no Composer integration to have a default for anything, do you? I agree. &gt; Why have lazy services, instead of passing a context/factory object to lazily fetch the service? It allows resolving services from another container and still be able to use methods like `available` to check what services are available. I'm aware that this is an over-engineered solution for a pretty simple problem but I like to build such things. Thank you very much for having a look and your feedback. 
No, not in my opinion. 
...before release 
I learned about Gorean sex cults. (Thanks Drupal!)
Great. Excuse my ignorance on your proficiency but try creating a to-do list in code igniter. You may to investigate it's helper libraries like Form validation, etc. 
It's always nice to see a fresh perspective on this topic. Not sure I'm on-board with the meta-language, but it is interesting to think about. I do wonder if you have done any benchmarking in support of "... after a short warmup the compiled container is blazing fast ". Also, not sure if I agree that not implementing PSR-11 could be seen as a Pro... hard to see a down-side to that one. Nice work, I plan on looking more closely when I have a little more time. Thanks for sharing.
Ive used both recently. I'd still go with laravel but code igniter is plenty capable. 
Õ.o
[Source](https://www.reddit.com/r/PHP/comments/6n8gsy/at_least_the_php_community_is_not_as_toxic_as_the/)
If you have the option, I advise you to use Symfony 4 instead. It uses a micro kernel (i.e. it’s lighter than its predecessors) and is Flex compatible for automatic handling of bundle integrations. CodeIgniter is not even in the same league as modern frameworks like Symfony and Laravel. It doesn’t use Composer. It can’t even run on PHP 7. It’s basically dead, despite a new version being technically in the works (it was taken on by The University of British Columbia after the original owners gave up on it).
I like the idea of PHAR, and I'm glad it's expanding as it has more potential. I'd like to see Composer download each dependency as a PHAR so you might have a hundred files instead of 10,000. (NPM would be in even greater need of something like that.)
If it's a quick and simple request, I just use cURL , otherwise unfortunately I'm still using Postman but someone else in this thread just linked to https://insomnia.rest/ which looks promising and I think I'm about to switch to it. 
This is a great project and I'm sad I've never really heard of it before. It's easy to get lost in Framework vs Framework when you just need a few libraries for a small project and not 5 kitchen sinks that need to support legacy and backwards compatibility. 
&gt;I'm sad [Here's a picture/gif of a cat,](http://random.cat/i/MyTsd.jpg) hopefully it'll cheer you up :). ___ I am a bot. use !unsubscribetosadcat for me to ignore you.
Just curious because I've worked with their RMS (POS) and GP (Great Plains - accounting system) and there are supposed to work together.. most of my time was spent figuring out why RMS (a bought product not originally developed by MS) wouldn't properly integrate.
Man, you are right, but again it feels academic. Most of this has to do with my limited experience on large-scale systems and I recognize this. As far as separating your business objects from your database - I get it. It makes the domain language more straight forward if you create business objects that later translate to persistence.. as long as you pay proper homage to the normalization. I think we're in a weird space right now - wherein RDBMS doesn't truly fit the landscape of current applications, and a lot of people are trying things to fit the current landscape, but in the end we're back at relational. The situation you describe is one that makes a good fight for repositories, so that you only update your repositories to take advantage of NoSQL vs SQL or if you're being a purist you just create a new repository that implements your interface and inject that into the proper objects. Those of us who like to try a lot of things/create greenfield projects should just recognize the benefit of fast-tracking ideas. Back to the original gripe - starting a project with doctrine requires so much setup that you get bored with the monotony of all the annotations (if you are like me and decide to go no-framework - typically a mistake - but still I don't see myself using XML or YAML over Annotations). Anyway I feel like I'm rambling at this point. Thank you for the discussion and discourse. 
Facades everywhere.
I'll be grateful if you highlight some. I am not a native English speaker, and sometimes just can't see them :(
You question the authority of the resource or the reasoning provided?
Oh. Thank you for the heads up. This horrible text repeats all that nonsense I am talking about. Looks like it was written in some ancient times and was abandoned since. I will take means of making it corrected. Thanks again.
You 10 hours ago: &gt; If you will be able to find any mention of the "SQL injection" or "safety" on the official manual page related to "this [escaping] function", I'd love to change my mind. You now: &gt; This horrible text repeats all that nonsense I am talking about. Looks like it was written in some ancient times and was abandoned since. You liar... :)
Facades have nothing to do with the way Laravel's DI works. On top of that, Facades are actually quite testable, so much so that I would argue that they're easier to test than swapping out container bindings during test time.
The problem with Laravel's "Facades" is that their use is not apparent outside a component. So instead of going to one place and identifying all dependencies to initialize or mock for a given test, you have to do one or both of those: - Go through all the source, looking for references to Facades to initialize. - Run the test and fix it on the go as it tries to use Facades and crashes in the middle of the test. But Laravel's Facades don't hurt tests as much as they hurt your architecture, as they're basically singletons in disguise. You can't have two components refer to the same Facade and receive two different objects. You also can't forbid a component from reaching out and calling a Facade. This makes dependency management next to impossible in a large application - dependencies form from and to components in an invisible, spaghetti way and code reuse is severely harmed.
Actually, Taylor cleverly (I assume, anyway) leaves the testing terms out of the equation: the docs don't mention anything directly other than maybe unit tests. He calls end point tests HTTP or Feature tests, and Dusk tests instead of "end to end tests". Now, I'm big on avoiding the whole "OMG NO YOU GOT THE NAME WRONG" argument, but I'm not sure how a full browser test is *not* and end to end test, but again, I've always avoided this argument because it's a stupid one to have. The argument should be about why you should test rather than what to call them.
I'm fully aware of the pros and cons of using Facades, and this isn't the discussion I was looking to have. I'm not following how Facades have anything to do with how DI works in Laravel (other than that Facades are resolved through the IOC Container), and was asking for elaboration on that.
&gt; Testing is very easy in laravel. Isolated tests are not so easy in laravel. At least it not straightforward.
I think the question is why do you limit the discussion of testability just to DI. Facades affect tests, so they're part of the equation. As for how DI and Facades are connected, you answered your own question.
I'm not big on "name" arguments either, but the person you were replying to was talking about unit tests, and you responded with "with Laravel you get end-to-end testing out of the box". So one way or another the response didn't fit, and hence me pointing it out.
Please scroll to the top of this chain for context. I'm not limiting the discussion of testability to DI, I was responding to /u/ScottBaiosPenis. He stated this: &gt; in fact laravel seems to encourage writing untestable/difficult to test code because of the wacky way its DI works. At least if you are talking about unit testing. And I sought clarification. I'm trying to keep this thread on target here, but it seems to keep straying :/
My reply which you mention was a direct counter to his statement: &gt; also i would disagree "Testing is easy in laravel" I do see why this was confusing, though.
I'm aware of the common idea of isolated testing, but I was seeking /u/fesor's definition or elaboration of what they feel isolation is, specifically in comparison to the example I gave about testing a `User` model. While we're talking about it - If I create `SomeFoo.php` class inside the `app` directory, I can directly test that class with Laravel's default `phpunit.xml` configuration just as I could any other project that uses phpunit. &gt; You can't ensure your component works independently of the app This is answered with bit above, I believe.
That's really true :-)!
Isolated means that there are limited amount of things that could cause failure of test. This is what makes tests valuable. I don't want half of my test suite to be broken from one small change (especially If this change is something that should be done). I want specific test cases fail so I could quickly find case of failure. So we are making our tests not only isolated from infrastructure, but also reducing impact on testing from dependencies, using stubs. &gt; I can make (don't persist) or create (persist) a user a few different ways In case of Eloquent I could, for example, use Row Data Gateway pattern to make separate object model which will use Eloquent models as data model. It would contain all behaviour (and state). Then I could implement some kind of persistence ignorance, using repository pattern and unit of work. But this isn't something that common in Laravel community. As from what I see many developers like to put business logic into traits, life cycle event of persistence model and so on. Or mostly just make some kind of transactional scripts, which eventually will have too many dependencies to test something in isolation. Basically speaking, we are talking about reducing coupling of your code. This will allow you to have isolated tests. You could see it in other way. Isolated tests, tests which easy to maintain are indication of low coupling.
&gt; Defaults are very powerful, as they become they end up everywhere Good lord is that the truth! &gt; but if you're creating an adapter only so you have that one thing to autowire - that's a problem I create an adapter to make swapping out implementations easier to deal with. I can create a new adapter, bind it to the container, and be done with it. That's pretty much *the* use case of DI *and* adapters. &gt; Why can't you have two instances, or three, or more? And we're back to the problem of autowiring falling apart under such scenario Does autowiring by default mean singleton? If so, I wasn't aware of that. I'm also not sure if Laravel's autowiring means singleton - I'd have to dig into that. &gt; "DI" in general is just a common sense technique of supplying dependencies to dependents. It's as bad or good as the person using it I'm aware, I was seeking clarification since you lazily said DI rather than Laravel's DI :) Laravel will let you bind things as a new instance every time or as a singleton. How Facades fit into this, I'm pretty sure that you can configure the facade to work each of those ways as well. If I'm mislead on this, it might be time to fire up a REPL :)
I wasn't involved in the migration either, I'm afraid :) I was just doing hacky PHP stuff to get the sales reports out of the DB!
I don't think that Laravel's service locators are hard to test. This just adds more boilerplate but I could live with it. Especially since there are tons of tutorials on how to mock/stub dependencies using this service locators. The problem stats when we need more complicated business rules for eloquent models. This becomes not so obvious on how to decouple business logic from persistence logic. And for this kind of stuff I could find only crapy tutorials like "let's put all query methods to some repository". This articles doesn't show how to handle write operations within aggregate and could lead to overenginired solutions without any profit from testability point of view.
&gt; Isolated means that there are limited amount of things that could cause failure of test. Great, we're on the same page! Can you tell me how this is not an isolated test? $user = new User(['foo_attribute' =&gt; 'bar']); // Let's assume that someBarMethod() depends on foo_attribute $this-&gt;assertTrue($user-&gt;someBarMethod()); This is about as straight forward as it gets. I can also create a new instance of the `User` these ways: $user = User::make([]); $user = User::create([]); $user = factory(User::class)-&gt;make(); $user = factory(User::class)-&gt;create(); Directly instantiating and using the `make` method don't persist to the database, whereas `create` does, and the `make`/`create` behavior is true both when using statically or with `factory()`. What am I missing here on how this is not in isolation?
&gt; I don't think that Laravel's service locators are hard to test. What service locators? Facades? &gt; This just adds more boilerplate but I could live with it. Can you provide an example? &gt; The problem starts when we need more complicated business rules for eloquent models I am going to make an argument here that this is likely due to putting too much into the model, which is no fault of Laravel if developers are lazy. I will admit, though, it's hard to determine where to put behavior. But hey, that's what tests are for! Put it somewhere, anywhere! As long as you test whatever feature uses that method, you'll be able to refactory without prejudice :) &gt; This becomes not so obvious on how to decouple business logic from persistence logic Active Record, according to Martin Fowler, is a Row Data Gateway with business logic. So in this sense, it's actually okay to couple business logic with persistence logic. AR vs Data Mapper is not an argument I care to have, though (primarily as it's out of scope of this discussion). 
Let's use some objects which has dependencies. For example we have `Card` and `OrderLine` objects. In my example `Card` should apply discount if total order price is more than some amount: public function testCardApplies5PercentDiscountIfTotalPriceIsGreaterThan500() { $orderItem1 = $this-&gt;prophesize(OrderLine::class); $orderItem2-&gt;price()-&gt;willReturn(400); $orderItem2 = $this-&gt;prophesize(OrderLine::class); $orderItem1-&gt;price()-&gt;willReturn(200); $card = new Card([$orderItem1-&gt;reveal(), $orderItem2-&gt;reveal()]); $this-&gt;assertEquals(600, $order-&gt;totalPriceWithoutDiscount()); $this-&gt;assertEquals(570, $order-&gt;totalPrice()); $this-&gt;assertEquals(5, $order-&gt;discount()); } 
That sounds like an interesting idea, but I'm not sure this would result in a big improvement. Sure the download would be faster, but you then end up with a lot of PHARs to include which is not necessarily more performant. I think Symfony ditched a dumped bootstrap file because when upgrading to 7.0, it turns out you're better off with a lot of small files than one big file (for the web at least). But for sure it would be awesome if PHARs could be managed directly by Composer 
I'm actually not a fan of testing like this. I'd rather just have real instances of `OrderLine`. Mocking is really easy to get out of sync and directly couples you to an implementation. If you change `price()` to `subTotal()` then you have to change all of your tests. I try to limit my mocking/faking to avoid hitting 3rd party services. 
&gt; Does autowiring by default mean singleton? It does de facto, because how would you autowire otherwise? You autowire by type. This means you "automatically wire" the typehint to the single instance of that type - that's a singleton, basically. Architecturally speaking, when you autowire, this: __construct(FooBar $fb) Is equivalent to this: FooBar::getInstance() Now, some containers allow the concept of "qualifier" annotations, or they read the name of the parameter to further differentiate which instance is requested. But this just adds complexity and doesn't resolve the problem: one instance is still autowired to some global identifier, be it just "type" or "type+qualifier" or "type+paramname". &gt; Laravel will let you bind things as a new instance every time or as a singleton. A new instance every time has very limited application. The hard middle is having *few preconfigured instances* and knowing *which to wire where*. Let's say you have 3 databases. One is for the public website, one is for the internal inventory system, one is for archived reports. There's some interplay between those three, so you see, for example, the public site tap into the inventory, and the admin panel taps into all three. But they're all instanced of PDO (let's say...). Now what? How do you autowire the correct PDO instance for every object that needs it? Even worse, how do you autowire something like this: __construct(PDO $publicWeb, PDO $inventory, PDO $reports) You can't autowire it. And because you can't, and autowiring seems so "useful" initially, you may be tempted to start messing with your architecture around, so you don't have three instanced of PDO to work with. Say you may start doing things like: class InventoryPDO extends PDO {} Or you may start writing adapters or start adding layers of abstractions just to differentiate those three, even in case you don't need it. Note I'm not saying we should exposing PDO everywhere, but it's a type you and I know, hence a good example.
&gt; What service locators? Facades? You could call it facades if you like. &gt; Can you provide an example? If you are saying that "facades already provide you mockery objects in test suite" - yes, this is true. But there is not only components which comes our of the box. Anyway, this is trivial problem. &gt; putting too much into the model What is "too much"? If I ignore persistence logic, my models will still be valid from SRP point of view. &gt; As long as you test whatever feature uses that method, you'll be able to refactory without prejudice :) Unless you will have such amount of coupling so any refactoring will break most of the tests and this will lead to large rewrite rather than refactoring. Tests are client code for your code. It purpose is to show your all effects that your code cause to client code. Tests are good for detecting coupling. This is most valuable part of isolated testing. This allows you to make small mistakes (anyway, something that seems to be OK today, tomorrow with new requirements could be not so OK), but you still need do think how to decompose your business logic. You need understanding of what is coupling and cohesion and how to maintain it's levels so your code will be easy to change. The problem is not tests or "where to put logic". The problem is how to decompose logic and eliminate as much dependencies as possible. Concepts like "whole value" could help with it, but using it in Laravel is not straightforward (but still possible). &gt; AR vs Data Mapper is not an argument I care to have You sad that "Active Record, according to Martin Fowler, is a Row Data Gateway with business logic" which basically means that you could remove business logic into separate entities and return to row data gateway pattern. I didn't sad anything about data mapper pattern. 
Having this kind of exceptions for isolated testing only says that you can't test your buisness logic in isolation. Anyway, here us some useful links on this topic: - [Integrated tests are a scum](http://blog.thecodewhisperer.com/permalink/integrated-tests-are-a-scam) - [Beyond Mock Objects](http://blog.thecodewhisperer.com/permalink/beyond-mock-objects) - [Beyond SOLID: The Dependency Elimination Principle](http://qualityisspeed.blogspot.com.by/2014/09/beyond-solid-dependency-elimination.html)
&gt; any refactoring will break most of the tests and this will lead to large rewrite rather than refactoring This was a failure on my part. When I said "test whatever feature uses that method" - I meant some sort of endpoint test. [Growing Object Oriented Software Guided By Tests](https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;qid=1514970485&amp;sr=8-1&amp;keywords=growing+object+oriented+software) (not an affiliate link) talks about "Outside In Tests" - letting acceptance tests (which hit your endpoint) drive out the unit tests. I've found I'm a pretty big fan of this approach. &gt; You need understanding of what is coupling and cohesion and how to maintain it's levels so your code will be easy to change This includes coupling in your tests ;)
&gt; I meant some sort of endpoint test. Acceptance testing is very important, but this is different topic. From same book there are diagram about internal and external quality of software. Isolated tests are about internal quality, and acceptance are about external (from user perspective). And we indeed need both to find balance between this too. But with acceptance tests we are facing combinatoric complexity of your test cases. Most of the time you will want only to test that feature exists (positive scenario), but not all pre/post conditions and invariants of the system. &gt; This includes coupling in your tests ;) That's why it is very important to understand difference between mocks and stubs and how it affects coupling.
&gt; Acceptance testing is very important, but this is different topic Not really, I was trying to clear up that you can refactor at will if you have such test. &gt; That's why it is very important to understand difference between mocks and stubs and how it affects coupling. Again, I don't like to mock unless it's involving a 3rd party. Real collaborators ftw when possible. Example: There's an internal JSON API we consume, I have a set of integration tests where I actually hit a server, but I have the exact same set of tests that uses mocked responses. I'm okay with that.
All of this, btw, is largely irrelevant. How does Laravel prevent you from writing the code snippet above? 
&gt; Doesn't this completely depend on how the Container is setup? The idea behind autowiring is you don't manually "set it up". If you autowire, it autowires. If you manually set up what dependencies go to every individual object, then you're not autowiring. &gt; Are you suggesting that because autowiring doesn't work in all situations, it should be avoided entirely? I'm suggesting that the presence of autowiring distorts the way the application is initially set up, and then when exceptions occur, that autowiring can't handle correctly, there's less friction to keep distorting your architecture, rather than to stop relying on autowiring. If I can use an analogy, autowiring is like doing drugs. It's fun initially, then it stops being fun, but you're dependent, so you keep taking it and finding ways to buy more. Autowiring: not even once. 
&gt; so you get real collaborators But this will be integrated tests, no any isolation. &gt; You're listening for a method to be called and telling it what to return. but I don't care will it be called or not. &gt; If you renamed price() to subTotal(), you now have to change your tests. If I rename `OrderLine` to something else I still need to change my tests any way. &gt; IMO you're allowed to change one or the other at any given time, but certainly not both. Please tell me how I then could rename any method in my code? It could be used in tests (not in mocks, just in assert). This will require all client code to also change (and also tests).
&gt; The idea behind autowiring is you don't manually "set it up". I meant how the container is setup as in how the container works. Such as - isn't it up to the container if it returns the same instance vs a new instance? &gt; there's less friction to keep distorting your architecture, rather than to stop relying on autowiring. So, it's possible to do autowiring when convenient, and don't when it's not, but you're lobbying against it because it is easy to make bad decisions?
&gt; if you have such test. This tests woudn't garantie that your code still works. So no, I can't refactor anything just because I have acceptance tests. They have much less coverage of logic that isolated tests. But still I make use of both. &gt; Again, I don't like to mock unless it's involving a 3rd party. You don't wan't to mock 3rd party code. Unless 3rd party is your colleague or you week ago. &gt; Real collaborators ftw when possible So, again, we are now talking about integrated tests, not isolated one.
I've seen systems using entity based ORM backed things to query one "object" at a time, and then putting the result into Redis, and then on larger "queries", pull everything from Redis and filter the results in memory in PHP My hot tip is, learn SQL don't use Redis to cover up bad architecture design, if you are in anyway "querying" Redis either by filtering after the retrieval or by using scans than you have used a no SQL solution to a SQL problem. If your site performs terribly after a cache clear on Redis and the data in Redis is generated locally not remotely, then Redis is hiding a poorly performing site The first step to learning SQL is to learn all the normalisation forms, I advise following them blindly: https://support.microsoft.com/en-gb/help/283878/description-of-the-database-normalization-basics The second step to learning SQL is to index your fields, and profile your SQL with a profiler: https://www.jetprofiler.com/, learn to use the EXPLAIN keyword and EXPLAIN EXTENDED Do not use NoSQL until you understand SQL enough to know what NoSQL really means, and then don't use NoSQL
&gt; I like to eliminate runtime overhead whenever possible Then you could consider compiling it, so it will be even stored in opcache reducing all possible overheads.
Probably people are careful because ternary operator associativity is different than in other languages, see http://phpsadness.com/sad/30
Also because, depending on the code style guideline of course, it makes the code more readable: parenthesis do remove ambiguities in the order of operations, and makes it, sometime of course, more understandable for the common developer.
I do echo ($this == 'that')? 'foo' : 'bar' ; Not because I was taught that way or believe it to be correct, I just think it looks easier to understand. It breaks the check from the result.
Fair point. I do agree with it being more readable.
Why don't you ask *them*?
Unfortunately some of the developers I am out of contact due to a new contract. I did say that I asked one of the developers and they thought not surrounding a ternary operator with () would result in a syntax error. I presume that there is a reason for him believing this. I was hoping somebody on this subreddit would have a *useful* insight. 
While i don't believe this, I do prefer it this way. To me, it removed ambiguity and looks nicer. I kind of relate it to how I would write something in mathematics, where you would group the operations you want done first in brackets. To me, I'd consider ($name === 'PHP' ? 'Got it!' : 'Keep Searching') to be a single variable, maybe named `$nameIsPhp`, So if I'm going to expand it in to a ternary, I'd want to have it in a bracket. But that's just me.
&gt; Then you could consider compiling it, so it will be even stored in opcache reducing all possible overheads. Thats exactly what it does. https://www.reddit.com/r/PHP/comments/7nn048/working_on_a_di_container_and_looking_for/ds2xwjq/ 
After a few minutes going through the site, I still could not tell what it was. I ended up assuming it was a framework till reading this thread that its libraries. Unless they purposely want to keep new visitors in the dark, they should indicate what it is on the home and about pages.
That's not what is asked here. See the other answer.
This. That these folks do is a cargo cult programming. They've seen once that braces help with echo and a ternary and follow this pattern ever since. And all this stuff is because of operator precedence.
lol "cargo cult" programming. Yeah, that's what i was thinking. I was really surprised that no one had pointed out the obvious reason. But to be fair I'm an expert because of all the bug chasing I have to do when a client decides to let one of their junior devs take a crack at "enhancing" something I've written. Don't worry, I bill the shit out of them and remind them it's cheaper to just have me do the work in the first place. I spent a day last week cleaning up an "enhancement" by a guy who didn't understand arrays so he just had about 20 variable in a list statement to receive an array from a function. I couldn't believe what I was seeing.
It's not necessarily cargo culting. For example, I have a habit of curly bracketing all variables inside magic quote strings, whether they need it or not. E.g. echo "You {$are} a {$wizard-&gt;Harry}!"; The reasoning being, I'm never going to go wrong adding them out of muscle memory, but if I ever forget them when they are needed it get really ugly. Same case with ternaries. You'll never be wrong wrapping it all in parentheses, but you can be VERY wrong if you forgot to do so.
&gt; They have much less coverage I guess this is where we differ. I have fairly comparable coverage with my "acceptance tests" as I do my unit tests. You should have at least majority coverage with your acceptance tests via the happy path cases. &gt; You don't wan't to mock 3rd party code. You misquoted me pretty hard there. I directly mentioned an internal API I consume in relation to what I mock. In other words, it's a 3rd party service, not 3rd party code. &gt; So, again, we are now talking about integrated tests, not isolated one Kind of, that's quite a nitpick. My point still stands - with you mocking every little thing so heavily, it's going to be more time consuming for you to test, and more fragile. I will repeat that in the example you gave you will have to update each of the lines with `price()-&gt;willReturn()` just because you are taking a hard stance on "OMG THIS MUST BE TESTED BY ITSELF!" I am personally not a fan of that. At any rate, the above is literally irrelevant to how well Laravel does or does not let you test things in isolation. Can you tell me why the snippet you wrote does not work in Laravel?
&gt; Alternative is to care what state my dependencies will have. Don't seems like good alternative As stated above, Laravel's Model Factories make this a cakewalk to change, though. Much better alternative imo than scanning every test looking for `OrderLine` and changing it. If you use factory states over changing the attributes directly in the test case, this gets really easy - you check one place for the change and done. &gt; What If you rename attribute and CompanyTest needs some custom state of user to be used? You still need to change it. Answered with the previous &gt; Relying on the same state of your collaborators across all test cases Also answered with the previous - see Model Factories and states. &gt; I had the same point of view on mocks ...[etc] If this is the case, why did you provide such a fragile basic example? Something is amiss, here.
Your ending question: &gt; So, it's possible to do autowiring when convenient, and don't when it's not, but you're lobbying against it because it is easy to make bad decisions? That's not exactly my opinion. My opinion is autowiring always tilts the scales towards "singletonism" and it always results in too many dependencies used from too many places. The effect is invisible initially, but very visible over time, as the cumulative decisions that autowiring encourages results in a very different architecture (or rather, lack thereof) in your application. It's like this: if every driver had utmost discipline and knowledge, we wouldn't need traffic police, traffic lights and road markings. Things would just happen properly through everyone's strict adherence to the spirit of best driving practices. But in reality drivers lack knowledge, or get distracted, or some outright don't give a damn. And this is why we need some restrictions and policies in place. Autowiring is like an unmarked road. Everyone gets everything they ask for and they get some "global default" version of it. The result? An inevitable mess. Maybe it's less the case if you work alone on a single project and you can keep it in your memory all the time. You know what goes where etc. But if you work on multiple projects? If you work in a team? Autowiring is a slow trainwreck happening before your eyes. 
heh, you linked to the article anthony wrote that I showed you in the previous thread ;)
&gt; akewalk to change, though. for attribute renaming? I think no. &gt; scanning every test looking for OrderLine and changing it. in case of renaming - my IDE does most of the work. &gt; If you use factory states I don't have any need for this. &gt; If this is the case, why did you provide such a fragile basic example? It's not fragile. It isolated.
&gt; is largely irrelevant We started from "what is isolated tests" and then you are saying that "real collaborators as much as possible" which is basically "i prefer integrated tests". So no, I don't think that this is irrelevant. This just shows that "isolated tests are not something that Laravel encourage you to do". It doesn't prevent you from doing anything, just requires you to know how to do that (and sometime this could be a bit tricky).
&gt; You should have at least majority coverage with your acceptance tests via the happy path cases. 100% code coverage doesn't mean that we tested everything. Code coverage is mostly to find untested code, not to guaranty that your code are fully tested. It's not. &gt; it's a 3rd party service, not 3rd party code. Are you controlling contracts of this "3rd party service"? &gt; with you mocking every little thing so heavily, it's going to be more time consuming for you to test, and more fragile. If you don't know how to use mocks and reduce dependencies property, this doesn't makes my tests fragile ;)
When using the ternary operator as part of a larger expression I usually surround it with parentheses. I find this improves the overall readability of the expression and avoids non-intuitive issues that can arise with operator precedence and associativity. When using it to perform a simple variable assignment or to set a function argument, however, I omit the parentheses.
Well, clearly they don't need to be, but if it's a choice between parenthesizing and memorizing operator precedence and associativity... Point: `$a ? $x : $b ? $y : $z` is equivalent to `($a ? $x : $b) ? $y : $z` rather than `$a ? $x : ($b ? $y : $z)`. If I read an expression like that, I'd rather see the intended meaning made explicit with parentheses, even if they are redundant.
How does someone just not get arrays :| 
why did you feel you have to point that?
I don't feel like I needed to do anything, but I decided to anyways as it surprised me. Plus I'm glad they linked it because it was a good read. lol why do you care so much about why people post anything anywhere?
&gt; === Master, do you really need to use === ? I believe == is just fine as there are no integer values named "PHP" 
My understanding of ORM's (at least of datamapping ORM's like Hibernate/Doctrine) is that they're great for new systems where databases don't already exist (or if they exist, they aren't complicated and don't have a lot of embedded logic like stored procedures, etc...).
Not sure what the motive is here… ad revenue? I didn't see any ads. Gathering email addresses?
I debunked all this confusion for everyone. https://philsturgeon.uk/api/2017/12/18/rest-confusion-explained/
I just wanted to subscribe :( https://files.slack.com/files-tmb/T39U3FUKV-F8MK3HA3V-9d4690604b/screenshot_from_2018-01-03_19-45-21_480.png
Maybe it's just about having fun. 
Anonymously. At someone else's expense. And maybe, through some shady organization that paid a designer and a domain name just for that, but could not get the content right (broken indention, syntax, no syntactic coloration), or the only non-parodic part of the website (subscription). Yeah really fun and courageous.
This. Mixing ecosystems usually tends to be become a mess. There are tools however that help bridge the gap like symfony encore and laravel mix. Also if you use typescript, I believe there is a `.ts` model generator based on DC2 entities somewhere
If you just want to render react components on a page, (rather than having single page React application), what we do is just: * render any arbitrary data into a window level javascript object called `dataLayer` that is embedded into the HTML of the page. * bind the React components to the elements on the page that have the appropriate classes, with a small function that extracts the needed props from the dataLayer object, and passes them in. * head down to the Winchester until this all blows over. &gt; SSR is also a good benefit. If you're going that far, you probably need to say what you want to retain from the PHP side, as by that point. 
Have you considered turning down the contract based on your lack of suitability for a project this complex? If you're going to forge ahead though, you're going to need more than just a crash course; read OWASP and find (and read!) some solid books on building secure PHP sites (Google will help here, I'm sure there will be something that tickles your fancy) 
I not an option :)
Okay, could You please give a simple example with code say I need a form with inputs and email validation on one input and not empty validation on another (validation done by react), only props needed
Damn right! And it looks like most of the effort was put in the design / admin sys rather than in the actual content. So either it's a full-stack programmer/designer/admin sys whose *forte* isn't programmation, or this is the work of several persons. Not sure which.
project is probably far out of your depth. first you need to identify what type of regulatory framework you are working under. if you are dealing with money there is most likely some sort of legally required regulatory compliance and that will dictate many things about your application. A good example of this would be PCI compliance which is the regime for sites that accept credit card payments.
There is no reason not to use `===` if you do not actually want type coercion.
A+++++ would LOL again
I'm working with CI everyday at work. Your correct, the advantages are that it's a lightweight MVC. But in Modern webdev there's just a whole lot of features that don't exist. (No good error reporting or custom logging abilities). No ORM, unsupported with PHP7 and namespaces etc. I would not recommend CI to anybody working on PHP professionally. 
SPA architecture is not the holy grail, and in many cases serving rendered HTML content is required by the business. Search engine optimization (not all crawlers execute modern js frameworks), meta tags (microformats, og tags, etc), weird or legecy browsers, preceived performance (page can render before the JS downloads, parses and executes), etc. OTOH integrating a private node API serving pre-rendered react components is fairly easy in any decent PHP framework. We actually did it in a couple of hours for a commercial project -- including caching, error reporting and fallbacks. It was basically just stitching together a twig extension, guzzle client and a cache bucket with an express server. You can have both SSR and a frontend app based on a backend API working seamlessly together. 
Well, that's gonna be a fun conversation with IT. https://imgur.com/a/noTIa
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/0NblQ7c.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ds56398) 
This is not funny and very cringey.
Do they actually come and talk to you about these? 
Not that I've seen. I was just being "funny."
This just in: Smug Laravel fanboy acts snobby about parody site mocking smug, snobby Laravel fanboys. Will the world not have justice? Find out more after these messages.
A domain name is like €10 or less a year. If you're a developer with any exposure to front-end work you can make up a design like this in an hour or two of your free time.
Well if they plan to do more of them, might be worth the initial hassle I guess, since the theme might be reused.
Looks like the original creator is a WordPress guy.
Thanks You emilio 
ahh cmon..."LaraElite doesn't throw exceptions - it throws complements" is funny AF
Oh... another blog.
Is the other kind of application that you can built with php?
What?
#IS THE OTHER KIND OF APPLICATION THAT YOU CAN BUILT WITH PHP?
Thanks for editing your post.
same. ugh.
#3 is the expected behavior but being a paranoid programmer I'd have assigned genius or moron separately and then joined it in the echo. It's why verbosity often makes sense.
its been probably 10years since ive dealt with PCI but the app i worked on was for a level 1 merchant, and we used Perl CPAN modules which is very similar to composer (package management system) , i do not remember that being any kind of issue . perhaps things changed since then or the way the rules were interpreted? but i dont remember it being raised as a potential problem
i have worked on sox, hipaa and pci-dss and best practices will cover a lot of common ground (hipaa is prety much all about best practices) you MUST understand the specifics of the regieme and the penalties can be huge. i remember hipaa penalties ranged into the millions of dollars per incident potentially. its just not worth screwing around with if you dont know what you are doing!
i found this EXTREMELY funny, though Cake is an indefensibly bad framework too!
would learn the basics from PHP w/out a frame work but if you decide to use one i would suggest learning symfony NOT laravel as it will be more familiar from a java background and laravel encourages tons of bad practices. my 2c
PHP. Just like in Java, you learn the language before starting to use Spring, Axon, etc 
So the reason I started with laravel was that I found this good resource called Laracast and I'm just going through it. How could I learn Symfony though?
laracast is a mixed bag, a lot of bad advice mixed in with good advice. i would get a proper book on symfony if you need that much help. lots of tutorials and docs on the symfony website tho https://symfony.com/doc/current/index.html
Hahah that’s a good one. Such a nail biter!
Probably to ruffle feathers. Based on your post it seems to have worked. 
Sounds about right. The funny thing about parody is if you do it wrong, it comes off as jealously.
There's a simple form in a lightning talk I gave about react: http://docs.basereality.com/ReactJsIntro/#/12 The JSX is in http://docs.basereality.com/ReactJsIntro/simple_form.jsx . However, somewhat amusingly, I appear to have direct linking to Javascript files redirected on that file, so you'll need to grab it from your developer tools... However......why are you asking for this? It's just basic React........are you really asking if there is something that can tie into all of the frameworks you asked about, without needing to implement the react side?
Yeah you really it the nail on the head with "Laravel fanboy"! Everyone knows I'm a big Laravel fan, right? Right?
It's not the best idea to jump to Laravel at the beginning adventure with php. I think the best option for you is a starting from scratch, making some exercise with syntax (loops, arrays, classes etc). If you know syntax of PHP check out this http://www.phptherightway.com - there is everything what you need to start. :) 
Anything dealing with money is best to go third party.
Make sure you post an update with the URL to the site when you're done. I'll give you a free security check.
The best way to learn PHP is to start *using* it. Laravel is PHP. The best way to learn PHP is to start using Laravel.
Although I agree with you, it seems that OP is not a seasoned Java developer (i.e: "I know OOP and basic stuff like variables loops ifs etc but in plain Java"). If OP came from a Java EE/Spring background I would certainly recommend Symfony as well. However, in this particular instance I would recommend Laravel instead since it's easier to get up and running with due to it's simplicity and monolithic approach (i.e. web framework and application basically being the same thing). Having said that though, OP, don't get infatuated with Laravel (as so many devs seem to be doing). Laravel is pretty much a comedy of errors. Use it to get your feet wet and move on. 
&gt; OP, don't get infatuated with Laravel ugh... so far I love it so much its so easy
great advice, it is a bloody nightmare, i avoid it too if i can..
&gt; Laravel is PHP. Thank G-d that is not true. as /u/pan069 says else said its a "comedy of errors", basically taking "phpsadness" stuff and cranking it up to 11. shame because php7 + symfony gives you actually a pretty great platform for web apps that is not as heavy as something like java but provides enough structure to write extensible , maintainable , clean and well tested code even with a decent size team, its also reasonably preformant. 
I love Laravel, but this is funny as sh** !!
Hey man, I'm very new to web dev and I really love it and going to continue to do it because once I leave school I want to be more employable. So since you seem to have knowledge when it comes to I'm going to ask you. Could I stay in laravel for a little and then transition to symfony or should I just drop laravel RIGHT this second and learn symphony. Also I'm using laracast to learn laravel is ther a similar site like this to learn symfony?
&gt; Search engine optimization (not all crawlers execute modern js frameworks), meta tags (microformats, og tags, etc), weird or legecy browsers, preceived performance (page can render before the JS downloads, parses and executes), etc. Read up on isomorphic web apps. None on the issues you just presented exist in 2018.
Oh come now, no need to go bashing other frameworks.
Well, I think that was exactly what I was proposing, but without putting a name to it. :) my argument was against SPA + API (only) architecture. 
I could almost understand name dropping the guy who made Laravel, but not Jeffrey Way. That makes no damn sense. He covers a bunch of things besides Laravel and all his videos are damn good.
They definitely exist. I recommend working with a recruiter. They'll send interviews your way really quickly
&gt; Thank G-d that is not true. It's not written in Klingon.
Payment Gateway Developer here. PCI is no joke! For one, as someone else mentioned, we don't use third party modules due to the lack of control over the source. Once you get over the technical challenges though, you still need to work out the business relationships to go through certification with the banks and backend platform providers. This is definitely an expensive and time consuming endeavour.
I started working with the V8 extension in a project that the client required react to be server side rendered. We ended up using Ruby on Rails, because there is a package that works perfectly with it. Trying to make V8 work was mess.
Sure you can, but you'll have a much better experience with a natively statically typed language.
Notepad++ and copy folder is how I roll.
I might remove my balls so I don't get distracted by sex
Ok but I am going to extend Exception with a Compliment class from now on.
https://www.stripe.com/ Don't build the payments part yourself. Use a trusted. I just implemented Stripe's PHP SDK and it was super duper easy. Braintree is another one I looked at but ultimately went with Stripe because of the documentation. Fees were basically equivalent for my use case.
To put this in incredibly blunt terms (that others in this thread have alluded to), if you are working in one of the major regulatory frameworks and don't have a corporate entity to shield you from liability (which it sounds like you might not...?), you could be personally liable for regulatory issues in your code if you sell it. If you make a single mistake, you will probably need bankruptcy protection. Is the amount you're going to be paid for this project worth that level of risk?
But the best part? "Complements" are not the same as "Compliments". Clearly a sign of a lower-class education...probably a boot-camp dev. &lt;/s&gt;
So far we don't know for sure, but with a great level of confidence after reading bunch of sources and papers itself that spectre is language agnostic. What it means it will be possible to use PHP or JS to exploit these holes. Will it be hard? Sure. Is it impossible? Probably not.
This is not a one person endeavor. This is not a project to learn on. These projects are well funded and their engineering resources reflect that. These projects have many specialized senior engineers. I'm making the above assumptions by the general information seeking request out out to Reddit. I assume a project dealing with banking would be properly staffed and this conversation would have been taking place internally. If my assumptions are wrong, there is always Stripe, Stripe Connect, and SAML to connect a lot of financial services. These are not without important security considerations, but they are not as hardcore as what your original post and resulting responses implied. 
I grinned, but y'all need to lighten up a bit and stop taking everything so seriously.
&gt; The interface ask for a nullable return type, the implementation states that only int can be returned. This shouldn't be allowed. An interface should describe exactly what an implementation can and can't do, without any ambiguity. No, the behavior shown is perfectly logical and legal. 1. The interface says "Anything implementing this method must return `int` **OR** `null`. 2. The implementation says: "I will always return `int` values." There is no conflict between those two statements. &gt; I am speechless on this behavior. Why allowing an implementation not to fulfill entirely the contract of an interface? Because in your code you **already narrowed the restriction**. Your implementing class already "volunteered" to be even stricter, and returning `null` breaks that narrower set of rules.
&gt; doesn't mean that we tested everything Of course not. I can write 1 test that shows 100% coverage, and write a single useless assertion. I'm really tired of this argument that people make against code coverage. &gt; Are you controlling contracts of this "3rd party service"? I even gave you an example of one of these. We consume a 3rd party API. Since we consume it, we create the request that goes to the API, so yes, we're in direct control of this thing. &gt; this doesn't makes my tests fragile What I do and don't know about mocks doesn't change the fact that your headstrong approach to "must test it in isolation" makes your test fragile since you are making out the collaborators (that imo don't need to be mocked). &gt; where will you call save? Call save on what, exactly? As for handling complex relations, we should probably stick to actual examples. If we do, I'm not even going to entertain completely contrived examples, either.
&gt; We started from "what is isolated tests" and then you are saying that "real collaborators as much as possible" which is basically "i prefer integrated tests". We actually started from a statement about Laravel making testing in isolation difficult - albeit not from you (or you might have also said it, but I'm too lazy to look up in the context chain. I just got out of a 16 hour drive).
I agree with you generally about the nullable indicator , i think it was mainly included to deal with problems from doctrine and other libraries that are generally well formed but rely on silly practice of returnig sometihng or nothing here and there. I remember we had some major problem with doctrine under certain weird edge cases before its introduction. It should not be used as a general rule yeah
&gt; for attribute renaming? I think no. Think all you want, but I already told you how simple that is. &gt; in case of renaming - my IDE does most of the work PHP Storm? If so, does it actually know when you mock stuff out that when you change a method on a class to look for mocks of that class, too? If this is also true, I'm honestly impressed by that. However, this behavior could still be done a multitude of ways such as ctags or grep/ag/ripgrep/etc, but I don't consider those methods very safe in this case. &gt; I don't have any need for this Think of model factories like a smart phone. You didn't need it until you had it ;) &gt; It's not fragile. It isolated. You have a unit that you are testing which **shouldn't** need to be aware of another unit. Yet it is. You are more than happy trading implementation details in a test. If you changed that implementation, that test now fails. Tests that depend on implementation details are fragile. We will argue that point all day long, you aren't likely to convince me otherwise.
i cannot off the top of my head think of a static typed language that is a nice drop in replacement for php,what are u thinking?
I think I might just need to get bitten by this in order for it to really sink in. Your database example, while makes sense, hasn't actually happened to me yet, and Laravel provides other ways of passing alternate connections for that situation.
Shouldn't it be "compliments"?
I guess the concern would be that unless you review and penetration test all of the third party code you use, you’ll never know whether it is secure. Likewise, you’d need to lock to a specific version so that updates are automatically used when you update or redeploy your app (unless you check everything every time).
i went back and looked at the docs, it is sort of a grey area so long as you are applying security patches it seems like 3rd party modules are okay....section 5 is kinda vague on the subject tho
 symfony expression lang is really a mess under the hood i gave it to my rockstar guy when we needed a DSL and i said tell me what you think about it? he just rewrote the entire thing from scratch because it was terrible....wish i knew about ruler at that time. but our ended up being better actually much more extensible
&gt; Everything is OK because there are no conflicts. MyClass isn't doing anything outside the boundaries that MyInterface established. That's arguable. Liskov Substitution Principle states that the replacement of a subtype of the contract should not affect the correctness of the task being performed (aka the behaviour). When you forget about the concrete types and program to the interfaces (`MyInterface`), you expect that a null should be possible to be returned. However, that's not the case, as the concrete type breaks this contract by throwing a fatal error when returning null from that level. That's wrong.
You're reading the LSP incorrectly. It states that if you substitute a subtype *instance* where the parent *type* is expected, the subtype *instance* should behave within the constrains of the parent *type*. In this case LSP is not violated, because an object of MyClass returns an int, and the expected contract says "returns int or null". Therefore returning int is within the constraints of the parent type. The key point here is that LSP is about *object instances* behaving within the constraints of their *supertypes*. It's not about subtypes having to be identical to their supertypes. Let's use an example. You go to McDonald's and you say "give me Coke or Coke Zero". Maybe they have only Coke, maybe they have only Coke Zero, they don't have to have *both*. As long as they give you *one* of these, they abide by your request to provide one *or* the other. LSP is followed.
&gt; When you forget about the concrete types and program to the interfaces (`MyInterface`), you expect that a null should be possible to be returned. The *consumer* has to be prepared to handle null or a range of integers, but that doesn't mean the *producer* is must have a scenario where each are provided. Similarly, a function that returns integers is not guaranteed to provide *all* integers. 
For what it’s worth, being PCI compliant absolutely does not forbid you from using third party code - although your employers policies that they’ve adopted to adhere to it may. But PCI is certainly a huge pain in the ass that extends well beyond your codebase. I’d like to say it’s worthwhile, but the number of breaches of compliant companies suggest otherwise (unfortunately, most of passing the audit is justifying your policies, not necessarily having and following good ones)
Composer packages are fine in a PCI environment, as long as you have proper procedures around updates and deployment. Adding new packages is a bit more of a process than a typical code review, but even that isn’t necessarily horrible. Structuring your code so as little of it goes near sensitive data as possible helps a lot with this kind of thing. 
It would be, if the example code was correct. `catch (new Complement $c)`?!?
Is Ignition GO similar to CI Bonfire? Does it comes with modules, admin panel and all the CRUD builder from Bonfire? Because, i've used Bonfire and it's a great application starter, but the main problem is that it haven't been updated from a while and it's so old.
No, HHVM didn't announced such thing. They are waiting for contributors to submit bugs related to PHP support. Read it here: https://hhvm.com/blog/2017/11/17/hhvm-3-23.html
There's no matter what you'll choose cause you should remember that framework is only tool to makes business requirements alive. If your business expects only webpage with database and few forms Laravel seems good but if you build some bigger you should use Symfony. (It's not golden rule) Check differences between Symfony and Laravel and I think it will be the best way to choose one. 
That makes sense. Thanks for this.
I see what you mean. Thanks!
Doctrine (or any kind of DB/repository lib) is the perfect example here. By convention, a Doctrine repository method `find*()`will have a nullable return, because we don't know in advance if the query that we are requesting will match something on the DB o not.
The announcement is at https://hhvm.com/blog/2017/09/18/the-future-of-hhvm.html.
Yeah, this is the way to go if at all possible. Paypal have a similar system. You offload everything dealing with the actual money by telling a certified third party what to do. It is not clear by OPs question what the scope would be, though. They did ask about "dealing with clients' money". They did not ask about "having a payment provider deal with clients' money on our behalf".
If client code expects either null or real deal, and will always get read deal then everything works correctly. So LSP is not broken. That is every usage of interface could be change to use concrete implementation directly and it would still work! (Because null checks are valid even for non-nullary data)
Partially true :) **Upcoming Changes** Ironically, they mean better PHP7 compatibility in the short term.
The way nullary types are implemented in PHP, make them pointless: https://3v4l.org/KrSFY "Nullary" type thus do not prevent runtime null exceptions :(
Can't answer your question but you could install mysql?
Wait till you start to see content of "error_log" for some of your users, and you can't recreate *any* condition where error logs would be sent on *your* machines. ;)
Mysql's a bit big for me 256 mb than the traditional xampp. 
I imagine, really
didn't realize there's a subreddit for this @johnmanx10 
Still can't understand why apart from mocking, test also include assertions against interactions between object and it's (mocked) dependencies. In complex interactions it would help fence lines of code that are probable culprits, but if it's just few one time calls, what's the benefit? Shouldn't that be treated as "private" implementation detail? Or even be code smell that one object is refusing to delegate some behavior to correct dependency? (Say, container that insist on counting length but getting columns out of a row.)
Yes, React as just a view. Requirements...
asdf
Not sure what you were expecting...all PHP type checks result in runtime errors, and (with the exception of verifying interface/inheritance compatibility) occur when the specific method/variable is accessed. If you want to verify type safety (including null checks) ahead of time, use a static analyser. E.g. phpstan gives: `Calling method printStuff() on possibly null value of type A|null.`
I'm mostly complaining about "lost opportunity". Yes. Stan is awesome, and I should probably change a job to Haskell or something ;)
I believe you can use Ubuntu cli in the windows 10 developer mode, so there you can easily install php7, mysql, apache, etc.
Does anyone else think that Domain Driven Development (and bounded contexts) should be moving us away from the idea that there are markets for specific languages? Theoretically you should choose the best language for each context, and who has just one bounded context in their app these days?
I wish I had found a mentor when I started learning Python, or when I decided to become a developer. I've got four university courses under my belt, conditional admission to a graduate program, and I've been working as a developer for nearly 2 year. Still no mentor. I need career advice as much or more than programming advice these days. People with valuable, relatable experience to share seem rare.
Looking at the script you use you can either: A) delete the C:\php directory B) Remove C:\php from your environment path. You may find this useful if you've never changed your environment path before https://superuser.com/questions/949560/how-do-i-set-system-environment-variables-in-windows-10 On another note. chocolatey https://chocolatey.org/install is a good package manage on Windows. It might help if you want to try some software and uninstall it. And yes it does have php and mysql 
Syntax is one thing - just because the syntax is similar doesn't mean you grasp the culture of the language and best practices, have experience with the commonly used packages (frameworks, unit testing, deployment, etc.). Any developer can surely _learn_ a new language, especially if the syntax is similar to what they're already accustomed to, but that will most definitely take longer than having someone specialized in a particular language or set of tools. I'm sure a carpenter could learn to be a plumber or an electrician, but it would most often be better to simply hire someone who already knows it.
To those who just download it, a [1.6.1 version](https://github.com/composer/composer/releases/tag/1.6.1) was released shortly after that.
Thanks :)
What's the purpose of disk encryption if the key is readable ln the very same disk?
Hi PHPers! There used to be a place called Stack Overflow Documentation which had pretty cool PHP documentation, however Stack Overflow Documentation was shut down, I found the useful as a quick refresher; so being CC-BY-SA content I downloaded the content and produced this PHP programming notes PDF to share If there are any negative (or positive :)) issues with the PHP book please let me know, any feedback results in me being able to improve and create a better PHP book for you
If the IT admin can take the hard drive out, it can be copied. If the IT admin can log in to the machine, it can be copied. The "key" and all other files should not be accessible directly, otherwise it's easy to rip out the authentication checks. If a human can read the source, you have lost control already. Another idea I had a memory of a php compiler from facebook or php asp.net thing (I think called peach) which makes an executable, if you have an exe then source alteration is extremely difficult. 
&gt; Other than that the application i will be giving to them is in high enough demand that it will be targeted for piracy. Mostly the IT guy will be involved. According to my experience this will be common enough that i cannot pursue a lawsuit against 20 IT guys from different companies. No, what you can and should do is talk to a lawyer about the adding a clause concerning the liability of piracy to the contract that covers your service agreements to provide said software, and then sue *the companies* if they let you down. You don't need to sue individuals.
ORMs are really essential when you want to pass around "pending" database inserts or updates. Try to do that without an ORM and you'll find yourself basically writing an ORM I've seen two general approaches to ORMs: - those that try to "own" your database and entirely abstract SQL out of the application - those that are just a tool for drafting and generating queries that can coexist alongside use of lower-level query builders and raw SQL just fine Personally I can't stand the former and love the latter, but I had to brew my own to get what I want, all the popular PHP ones seem to skew towards the brick-wall model.
Let me be more precise. Let's say that class A depend on OperationsHistory. What would be a good reason to not only mock OperationsHistory for unit tests of A, but also to test each interaction between A and OperationsHistory? Shouldn't it be enough to check if A can properly finish some action if given mocked OperationsHistory?
http://www.ioncube.com/ gives a rough protection, it can be decompiled if you know how, but its a good easy bread &amp; butter encryption
Don't use your time on Symfony Framework. Is a dead end. Most of the jobs for Symfony are for 1.4 or 2.3 versions. Which is maintaining legacy software. 
Can you provide some links to job offers to develop NEW projects with symfony? 
&gt; Shouldn't it be enough to check if A can properly finish some action if given mocked OperationsHistory? We need to test side effects of A, and for this reason we use mocks. If you use method on your mock object wich could receive any argument and just returns some fixed value - then we don't test interaction. We just provide some predefined state for our test. The goal of our tests for `A` is to define `A`'s behaviour (and test it). So we only check interactions that effects `A`'s behaviour. For example `OperationHistory` could throw an exception, but `A` can't do anything with it. So we wouldn't have test case in A suite which will throw an exception from mocked method. Another note is that if your tests is too couplied with implementation, this could be a signal to stop and think how to decouple this module. One possible way is to move out all logic into separate modules and live just coordination object, which will be covered by acceptance tests.
throw custom exception as alternative to null return, though it could be argued this is a misuse of exceptions to me that reads better than a null check since you will probably. have some kind of exception case inside the null check anyway, i come from Perl so TMTOWTDI
Is there any tool that can replace undescored classes to namespaced classes and produce working code? Eg: My_Foo_Class -&gt; \My\Foo\Class 
i wasnt saying it is inherently wrong to return null, my point is the strict return type broke legacy code, so the :? operator was introduced afaik as a fix for that, philosophically it seems like they expected you to throw an exception instead of null return (otherwise why did it only show up in 7.1). personally that is my preference, but my team really loathed adding the hasXXX() accessory, so we took advantage of the :? in our models only
great explanation!
PM me if you want any career advice, im willing to share i worked my way up from intern in 1999 to jr dev, sr dev, team lead then project lead ,worked at many diff size companies and teams. i can at least give u my 2c.
Do you happen to use a VCS?
&gt; MercadoAleman 1 point 21 minutes ago Can you provide some links to job offers to develop NEW projects with symfony? I'm not going to bother arguing with you, you won't listen to reason, fail to cite sources, and generally make things up as you go. You are able to carry on conversation in other threads, but any time someone mentions a certain framework, you cant help but shitpost all over the comment section, and it is really annoying. I'm just asking that you grow up and learn what it means to be professional.
Hi AllenJB83, Thanks for your message; I do see your concerns PHP has had a comments at the bottom of the manual sections (as you already know; no doubt) which has really improved the quality of the manual compared to documentation for other languages I do plan on cleaning the PHP Notes document, there is a lot of time required to clean up some of the missing and badly formatted content; and furthermore some of the sections are incomplete; so these will need to be cleaned up or pruned from the PDF; this is a first draft I wanted to get out; I will improve the book in my spare time I still predict that there is a few interesting PHP tricks and tips that can be more clearly expressed and documented in such a book
So you didn't found any job offer for NEW projects then? 
I'm a remote developer for a larger team, though I do commute to another city once a week to put in some face time. Hiring a developer to work remotely versus in an office should be no different. Hire someone competent that will deliver what you want. There are a lot of posers out there though. That is not a problem unique to remote workers, but could arguably be more prevalent amongst applicants for PHP jobs. Recommendations: * Daily "scrum" via Skype to get status reports and maintain accountability * Internal Wiki. Be clear about your expectations by documenting internal processes and code style. * Git. Bonus points for committing project code style settings to the repository. If you really want to be militant, [don't let any commits come in that fail a PHP CodeSniffer test](https://github.com/s0enke/git-hooks/tree/master/phpcs-pre-commit). * Slack * Jira (or similar ticket-tracking system) * Team and one-on-one code review processes 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [s0enke/git-hooks/.../**phpcs-pre-commit** (master → 7e6266c)](https://github.com/s0enke/git-hooks/tree/7e6266cafc89ca817d9976eb17869a255088e348/phpcs-pre-commit) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ds6qeig.)
&gt; MercadoAleman 1 point 4 minutes ago So you didn't found any job offer for NEW projects then? Apparently I ask too much. I'm done here.
We use GIT and Bamboo (we're an atlassian shop)
We do weekly scrums but I guess I could change it to daily. Wiki we have with standards but I'm pretty easy going for some stuff. I guess I could make it more stringent. Git we use and have a phplint git hook already. Like this codesniffer (thanks for the link). Slack is something I don't use (yet) and will read up on it. Do you guys do code review for Senior devs also? I pay more for seniors to have less hand holding. 
forget about PHP but honestly most software can be copied if you are clever enough. i saw two schemes which seemed to work relatively well over about 25yrs in computers where i cracked and pirated many many packages. 1) Autodesk many years ago shipped autocad with a dongle, they put a critical algorithm needed to render 3d images on a chip in the dongle. you could pirate autocad and crack it but the models would not render without the dongle. 2) there was a program called CDR-WIN back in the early days of cd burners that was so fucking frustrating to crack it was one of the few apps I actually bought in those days. The registration system was deceptively easy to crack, like most software you had a conditional jump instruction in the code that either jumped to "sorry wrong serial" or "thanks for registering" and so you would make a hex patch that made that jump unconditonal the problem was in many many places thru the code it would checksum itself and if the checksum failed it would introduce random errors into the CD burning process so every Nth disc would be a coaster. I have no idea how many checks were in there, but it must have been LOTS and each point release changed their locations. I remember there used to be dozens of cracks for it that would be like "cdrwin.crack.real.final.zip", cdrwin.crack.real.final.working.zip, cdrwin.crack.no.seriously.THIS.one.really.works.zip, etc.. i think in the end most people just ponied up 20 bucks for the real verison
Other posters have addressed the issues with the ternary having low precedence and the readability issues. As for the syntax error part, that's easily disproven. `php -a` followed by `echo 'foo' === 'PHP' ? 'Got it!' : 'Keep searching';` And I don't recall any historical reason for this. Ternary operators haven't changed in forever, except to add the short-cut version.
I peeked into one section and saw bad code including security vuln. No thanks.
I tend to agree with your definition of non-western developers. The few times I outsourced I was very disappointed in the lack of communication. I always got the everything is great and on schedule until it wasn't. &amp;nbsp; I am in the east cost of North America so I tend to want to keep it at least in the same timezone. How do you weed out the pretenders from the ones that are competent without wasting a month of training on them? I need to expand my horizons for my dev team but I'm worried I'm opening a can of worms that will eventually implode on me. How do I hire the "right" people? That's my big issue I guess. I've come to terms that I need to consider remote workers, what I need now is to figure out how to assess remote workers? I like brainstorming on issues with people, it lets me see how they think and if their minds are more geared analytically or creatively. I have a hard time doing that over skype, body language is lost. I guess my main issue is in this new world how do you identify talent. I can tell after 20 minute interview if the person will pass or fail the technical exam. I can tell after looking at his exam code (and his demeanor as he presents his code) if he'll fit or not, if he'll blossom or hate my environment. All that will be lost and I'd need a new toolset, how do you determine if the developer is the right one?
I'm a Senior dev. My team leader is in total control of the release branch, so he will at least get a glance at everything coming in. Honestly, I think I have higher standards than him though :-D
everyone had to do a code review, sr dev had his code reviewed by another sr dev, and jrs had their code review my seniors. some of the guys i hired were truly brilliant i done this 19 years and they ran circles around me with only 5 yrs exp. one guy, i could do this for a million years and never hope to reach his level, YET he sitll made mistakes from time to time.
hey its the 64,000$ question, if i knew the answer i would open a recruiting consultancy and write another line of code again! all i can say is how i do it, first no remote dev gets hired without having worked on a remote team for less than a year. they must have a track record of remote experience been burned too much on that one. second, i do all my hiring based on code tests or code samples. i give them a project that takes a few hours. if its up to snuff the interview is basically a formality to make sure you can speak english well enough and dont seem like a bullshitter. hiring is hard you will get some bullshitters but i find the code usually is a good gague of someone level one more thing, i always hire enthusiastic people even if they are a bit junior level. we had one guy who we asked him on the interivew about dependency injection and he did not really know much about it. we brought him back in again and he immediately explained everytyhing about DI, after the first interview he went home and made a careful study of it. That was enough to hire him on. usually these types who are very very excited to learn (and brave enough to admit what they do NOT know) are the best and often yu can get them for a great value price wise. 
We're a bit more *loosey goosey* with our deployment. Something I've wanted to change for a long time but business prefers a fast reactionary team with bugs than a slower more secure team. These are things I plan on changing though, our company has just outgrown that startup feel and needs to start being more methodical. How did you find your company? Did they find you or you applied to a local posting of theirs? I don't even know how to go about finding remote developers
&gt; philosophically it seems like they expected you to throw an exception instead of null return (otherwise why did it only show up in 7.1) Same reason why `void` showed up later on: bikeshedding and pointless bickering. But all is good when it ends good. I think the approach your team (and anyone's) should take is to use typehints only when they fit the API you want to design. If it doesn't, because the bikeshedding and bickering is still ongoing on the internals mailing list, it's better to skip the typehint entirely and use PHPDoc hints and manual checks, if need be. PHP will always be a language in progress and there will always be undercooked features for less than wise reasons. But our APIs shouldn't suffer for it. 
&gt; To be fair, most projects don't need to worry about connecting to multiple databases. I don't know, in most of my projects I do connect to multiple databases. In fact, my business logic sometimes opens several connections to the same database. Needs vary, especially based on project size, complexity, modularity, etc. Say even in my most basic sites I tend to use MySQL for domain state, and several SQLite files for file cache, and that's already multiple connections in terms of PDO. 
You do your interviews on skype? Tests and stuff I can easily send them a package with a howto and have them code away and send back. It's the lack of body language that I will miss. For example, when I ask a technical question there are those that will ask me questions in an attempt to better understand what I'm looking for and those that are asking in an attempt to buy time and see if I give them a clue at what I want to hear. I would rather a simple I don't know and too few candidates feel comfortable in answering that. I know exactly what you mean about eager learners, those are the guys I look for also
Ask your client why they want it to be built with Pimcore, a cms which you have no knowledge with. If they still want it, remember to quote them the hours you use for learning it.
My past two jobs were through recruiters. I'm a self-taught senior dev with 20+ years of experience and two degrees from art school which I don't apply to actually creating graphics nowadays, so it has been a challenge to find representation that really understands what I bring to the table. The overly-corporate (.Net) staffing firms don't "get" me, and the guys running keyword searches in India certainly don't either. That said, I'd still suggest building a good relationship with a staffing firm that you can learn to trust. It would cost more than direct hires, but would take some of the pressure off in the long run if you plan on screening for multiple positions.
&gt; all I know is you have been harassing me since /u/dmc2000 or something like that tagged me in their reddit extended edition or wherever as something. I really hope you are really done :D Ok, I lied and have no self control. Harassing you would be following you around and everywhere you post. Calling out your bullshit is not harassment. Are you ever not the victim? And now look what we’ve done. We’ve gone and made a huge shit stain in the comments section of someone that actually cared enough to try and share content with the community. I hate that you make me look this petty and pathetic. 
That's a given. Frankly I don't need advice on how to communicate with clients and scope projects. I am perfectly capable of learning the CMS and billing for it, I want to know if there are any red flags with Pimcore that would make me want to avoid the project altogether.
like i said, our approach was to use strict return type everywhere except models with nullable field, repositories throw NoRecordFound exceptions instead of null return, this seemed to satisfy everyone
my opinion is code review is often (usually??) wasted time. especially if you have poor unit test coverage the time would be better spent writing test. most people seem to use code review in place of testing OR as a way to catch bad design decisions. ideally design should be worked out up front among the team . if you have already had a design review and tests a code review can help catch bonehead coding mistakes and edge cases but generally i do not find them productive in most workplaces , in fact they are usually counter productive. the best thing to come out of code review is generally finding new ways of doing something that you never thought of 
skype or telephone. i get what you mean about the questions they ask, i am not good at reading people's intentions beyond what they actually say , but i really dont ask question with a specific right answer generally i will ask about some problem we are having or something we are working on ...eg. "how would you solve this problem" or "how would you design XXX" ..."what do you think is the right amount of unit test coverage"...i am just trying to gauge their thought processes how they work through a solution, if it makes sense or not, if they have done a similar problem in the past also it serves another purpose, even if the interview is a no, its possible they could offer insight or a good solution to the problem and thus it would not be a complete waste of time
most people have said the answers i would give so i will try not to repeat...but you can add "ditto " to almost everything others have said ...plus these * while facades are mockable technically you are bound to any problems within laravel's implementation of the mock system (eg. sometimes they dont have a mock for every method call, we use 5.1 in which \DB::commit() and numerous other methods cannot be mocked) * auto wiring makes it hard to use interfaces properly , also you cant delegate DI to a custom factory afaik , though this last point is not strictly speaking a testing problem * you cannot inject scalar types or arrays which leads to over injection (injecting an entire config object) or simply eschewing any use of config files at all in exchange for using DB or redis to store config data there are all kinds of problems with the DI system specifically app() and facades which allow hidden dependencies. It hides complexity and in our app we have TONS of circular dependency chains simply because the DI allows it. constructor injection would generally prevent it. while not DI specific i also found these problems in testing: * commands are EXTREMELY difficult to test ,nearly impossible i have to implement a huge amount of code to inject command line parameters into my command tests. * eloquent models are difficult to mock because of their enormous reliance on "magic" and deep inheritance trees over composition. Commands also have this problem, i find many things in laravel could be mocked much easier if they did not rely so heavily on inheritence and php magic. Basically to use a mock in place of a eloquent model you will have to add accessors at most, or at least change your calls to __get() and __set() to getAttribute()/setAttribute() because mocked calls to magic functions are at best inconsistent since the mock framework also uses them and mocking magic methods can sometimes break the mock framework. also because its active record good fucking luck injecting those eloquent mocks....most laravel sites just suggest adding repositories if you need to have unit tests LOL just as a pet peeve, why the fuck even use them, the magic methods just call getAttribute() anyway, so all you are doing is adding a bunch of fucking overhead for NO gain....but thats another topic the subject is exhausting to me, our system has 0% tests and i am trying to implement them from the ground up. I have done this many times before on symfony and zend but i have found laravel the most frustrating experience in terms of implementing tests. also their docs are HORRIBLE
I think we need to be careful with the "everybody's projects are just line mine" type line of thinking. I imagine most apps are very basic CRUD, if I had to guess.
facades are part of dependency management! not sure how you see it as unrelated. 
Disclosure: I work for Basilicom, a Pimcore Gold Partner. We implement about a hundred different sized Pimcore based projects a year. Pimcore is not a CMS. It is neither Wordpress nor Drupal. There are not hundreds of "News Plugin" variants. If you think of layers, it provides more functionality than pure Symfony - especially a powerful generic backend UI for manipulating complex data structures. Expect to implement more "basic" stuff on your own (Just "skinning" plugins like you do with Wordpress is not enough), especially regarding your custom frontend. The benefit is, this is much easier and faster than implementing all from scratch with just Symfony and bundles, but more flexible than any of the CMSs out there with pre-made Plugins. Plus: Usually, developers love Pimcore. It gets out of the way and does not "force" you to do things a certain way and/or learn concepts like Typoscript with Typo3. If there is anything else you want to ask, just go ahead. If you are into instructional videos, this Udemy course might helpt to understand the core concepts, allthough it is still based on the old Pimcore 4.x series based on Zend Framework instead of Symfony: https://www.udemy.com/enterprise-cms-applied-implement-a-website-with-pimcore/
symfony uses config files, not autowiring
&gt; while facades are mockable ... Fair point, but out of curiosity, why are you trying to mock the DB facade, anyway? That feels weird to me, especially that's a vendor file. &gt; constructor injection would generally prevent it Laravel certainly allows for this, though! &gt; commands are EXTREMELY difficult to test ,nearly impossible i have to implement a huge amount of code to inject command line parameters into my command tests. Curious as to why. I'm able to test commands just fine. Granted, all of my commands just delegate out to some other object, generally, so I often just mock what the command delegates out to and make sure the right methods get called with the right data. This is a pretty fragile test in terms of implementation details, but I'm okay with it since the thing it calls is tested. &gt; eloquent models are difficult to mock They sure are, and you shouldn't even modify their constructors. Eloquent magic sure can get annoying, but Model Factories takes care of this. I don't even mock it, I just use the model factory and enjoy life :P &gt; most laravel sites just suggest adding repositories if you need to have unit tests LOL I'm guessing these sites don't know about model factories :P &gt; why the fuck even use them, the magic methods I'll agree to this - the abundant use of magic methods can get pretty frustrating. &gt; our system has 0% tests and i am trying to implement them from the ground up Did you read the complete article? Same situation! &gt; docs are HORRIBLE I'm finding this hard to believe. Of the 3 (symfony, zend, laravel), Zend Framework has the worst documentation out of all of them. I'm honestly surprised you find it hard to get running with tests in Laravel. I'd be more than happy to pair up with you sometime and help you see how easy testing is in Laravel. It's honestly one of the best things about the framework.
Symfony does support autowiring, I thought?
Not trying to be pedantic here, but dependency **injection** and dependency **management** are different things. I understand that using facades hides your dependencies, but that's a different talk than "laravel's weird DI"
Thanks so much for the info! We build our WordPress sites from scratch. No skinning existing themes, no child themes, and very few plugins. Essentially we just use WordPress as the platform and build out all the templates from scratch. I'm not a fan of WordPress by any means, but for simple marketing websites this works very well. I'm totally comfortable with working in Symfony, but a bit concerned that you say Pimcore does not provide CMS functionality. Does this mean we would have to build out even the most basic of features, such as the blog functionality? Additionally, from the docs I can see that there is an admin back end. Would that not qualify it as a basic CMS? Do you still have to build out the admin back end as well? Thank you for your help! 
lol sorry about your job situation. Maybe you'll find some laravel work instead.
 if ($form-&gt;isValid()) { I don't think that's valid iirc, you should get an error at least from flex stating to call `$form-&gt;isSubmitted()` before `isValid`. Correct me if I'm wrong. Edit: Looks like this is maybe an old version of symfony, noticed the AppBundle in the image near the bottom.
I'm about the same skillset as you- I bailed on NYC for unrelated reasons but it's certainly an adventure. Keep your head up and you'll be moving up in no time!
Docker secrets
Uh, the article you linked specifically explains one very good way to do it. I think it's important to distinguish between true environment variables, like those this article is talking about, and configuration parameters stored in a .env file. You don't actually source a .env file to set those variables prior to launching PHP. PHP reads and parses the .env file itself, inside the container. I'm not sure if Docker itself does it the same way. I believe it may set the environment in the container prior to running the app, but I could be wrong. If that's the case, then it's only environment variables used by the Dockerfile itself or the app you're running that you need to worry about.
&gt; PHP reads and parses the .env file itself, inside the container. Yes and no. It is intended that .env is readable and sourceable and symfony i.e. can work with both.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Honestly I don't get the buzz about .env. It is moving credentials from code to plain text or environment variables. At least in code there are somewhat mature systems aware of the problems that this info can go into the wrong channels. With environment variables you start from zero plus you need to keep any code in check that can access it. Code is still the best option, at least in php, imho. If you want to get secrets for production environments out of the hands of devs and out of the repo your deploy pipeline should add the proper configs. I haven't cared at all for now about "vault" approaches, that is because it isn't necessary for the vast majority. Small or medium teams/companies often have full access to everything anyways (except environments with some serious security concerns). PS: One good reason I see for non-code solutions is that you could deploy new credentials quickly without deploying new code. Also it is out of the deploy pipeline, which might be dev driven. So the docker isn't so bad.
Try Randstad Technologies. They got me my first job when I moved to NYC
Kohana, that's a name I haven't heard about in years. Might've been the ~~first~~second framework I ever used when people started to tell me codeigniter was an anti pattern😊
I built something similar that's opaque to the application and supports remote layers. It's kind of grossly implemented as an event-sourced tree in MySQL right now: https://github.com/JarvusInnovations/emergence The general mechanics of it have worked out pretty well though for letting application instances contain overrides or additional assets to apply to the application tree without forking or adding complexity in the code I want to reimplement it entirely in git with a plaintext declarative format, so the layering is done at change-time rather than run-time and is essentially just an advanced merge strategy. Here's a prototype I started tinkering with a while back: https://github.com/JarvusInnovations/git-holobranch I'm going to call it "git projector", so the concept will be that you work in a source branch which includes definitions for one or more "projections". Then git projector can transform your source branch into a runnable branch with the layers all merged in.
I'm working in HIPAA these days - dealt with PCI as someone who didn't store CC data, but transmitted from compliant devices to gateways.. this means that my requirements were quite slim compared to a company that actually handles the transaction. How close is PCI to HIPAA.. we just went through a 2 hour consultant audit for HIPAA and - in short - there should be a tested plan, procedure, and policy (covering technical, administrative, and physical) for pretty much everything.
I only just built an entire HR system for a client that wanted the latest version, I have 2 more that want API backend from SF 4 if possible and another potential finance gig in 3.4
Any significant changes?
I think that is also the reason why CakePHP rebuild their entire ORM in 3 and above to execute queries only when the data is being used (e.g. by iterating the query-object). I refactored a few projects to CakePHP 3.4 and it seems it is way more efficient than before. 
Yes I said that, but it's out of an honest opinion based off most apps I see built, not just the ones I work on. I'm quite active in laravel, larachat slack, and even keep an eye on laravel related SO. Most apps people are building with laravel are fairly simple, at least for awhile, anyway. &gt; This isn't exactly flattering about the state of our community Yeah, I feel ya there. Our community still has a lot to learn - but I do feel things have been going up the past few years, not down.
The biggest 2 questions are "who do you work with?" and "where do you operate?" Different countries have different regulations. In europe you got european as well as national regulations. Banks and other Financial Institutes usually have their own rules about software that interacts with them. If you just move that money and take your cut, you can usually get away with knowing what the banks or API-providers you use want from you, since they already know what the individual laws want. If you want to act like a bank, in a way of actively storing clients money, you better talk to a specialised lawyer before opening up shop. Financial Law is a bitch on her own... 
Interesting concept. In 2017 you want to implement this as some sort of plugin for FlySystem
Try becoming capable at using Google then and read the 100s of blogs on these exact issues. If you are going to take an attitude you can politely fuck off, this isn't a help aubreddit. You made an active choice to be a dick there. You could have ignored the comment or many other things that were not abrasive for little reason.
Imho, in your case, physical protection in form of a server at their facility that operates in their own intranet, that only you have access to, should do the trick. You can't copy code that you cannot access. All they get is the client-side output that can help them mimic your behaviour and style, but not steal functions. When it comes down to the "lawsuit against 20 IT guys", that's not necessary if you have a contract with the client, making them liable to damages if your intellectual property is illegally used through their company. Let them bother with the law-suit against 20 IT Guys, after they paid you for damages caused. You only have to be bothered with the one client you sold your services to. But imho, code obfuscation is just security-by-obscurity, that causes you extra work, your system performance and does not bring a lot of extra security. Imho, if you can't afford the lawsuit to protect your intellectual rights, you can't afford the extra working-hours to obfuscate your code. Do smart infrastructure instead. 
Background: worked for many years at a company requiring full PCI-DSS Level 1 (highest level), as a gateway that handled and stored full card numbers (heavily encrypted, obviously) and interfaced with numerous banks. I'm not familiar enough with HIPAA regs to state anything too confidently. I get the impression it's both stricter and has a broader scope than PCI. Fines seem to be a lot more common and severe in the health space than in payments, which I suspect is due to it being a government regulation rather than one decided on and enforced by the private sector. However getting blacklisted from having a merchant account isn't exactly good for business either. My experience working with our auditors amounted to explaining our policies and detailing the crypto processes where in-scope data could exist. A significant amount of this boils down to checkboxes: a lot of the PCI regs amount to "run a firewall", "don't use default passwords", and other really basic stuff. The crypto parts are very vaguely worded^1 so that part of the audit was largely a matter of convincing your auditor that what you're doing will hold up. Our auditors were technical, so it was more than just hand-wavey BS. Also of note, I had to run queries in real time to prove that data which was supposed to be purged in a timely manner actually got cleaned out. ^1 I haven't worked at the company in over 3 years and if memory serves, PCI-DSS 3.0 hadn't become a requirement by the time I left. I'm sure plenty has changed. The big one was that using cloud providers became feasible, and I think some algorithms have actually been blacklisted.
Wow man...I wasn't trying to be a dick. I speak directly. Sorry it came off that way. Just thought maybe my original question wasn't clear.
To be honest our consultant isn't as technical as I would like - one question related to the level of encryption we were using.. and even then it was "canned" so no discussion could be had - lots of questions about using encryption but not what the encryption was. The only recommendation I'm currently aware of had to do with us not testing our disaster recovery plan - beyond checking back ups - but standing up a backup server in a new location making our EHR available. One conception I have is that PCI (at the level you were referring too) requires logs of people moving in and out of the server room (data center) - HIPAA does not currently. However, HIPAA, wants us to chain our desktops to the wall and/or encrypt all desktops. HIPAA focuses a lot on end-points but PCI seems to focus on the central data movement.
I would agree with that statement from what I’ve seen. Lots of audit trails on machines that went near sensitive data, but a relatively high degree of freedom elsewhere. 
Devs of all experience levels are still human and make mistakes
&gt;Fixed bug #64938 (libxml_disable_entity_loader setting is shared between requests). Finally!
Bugfixes all around.
&gt; The main thing is to hire people who have worked as remote developers If everyone did that then the number of remote developers in the world will never be greater than it is now.
Depends on the framework, but most of them have a pretty good way of keeping the validation errors in an array. You have two main options, first option is you can just render all the errors together at the top of your form, or you could render the error for each input below each of them. You just check your errors array if there's an error for each one. It's really just as simple as that. You just re-render the same form with the errors added in instead of redirecting to somewhere else if your controller decides that validation failed.
Your question may be more appropriate in [/r/phphelp](https://www.reddit.com/r/phphelp). Usage of the 303 redirect is your friend here, it redirects while replacing the history location in the browser: header('Location: https://www.example.com/register?error=first_name', true, 303); The client can reload the resulting page to their heart's content and it won't show the "verify form submission" browser warning. edit: clarification, type-o
When I was little, I dreamt of a moment in time when I would be getting career-relevant info from someone like cuntkicker420.
You really only have a few options here... 1. Use sessions to grab the form data and then redirect 2. Redirect and stick the form data into query strings 3. Use AJAX
I’ve been working remotely for the same company in the last 4years! Never been to the office before, my first time was last month and I stayed there for a week! I think communication is the key! We have (scrum) daily meetings and a slack room for every project where we can interact with each other. By doing daily meetings you can follow the team progress and track any blockers that they have.
Are there any new features, or has php become maintenance-only mode ?
Bug fixes. PHP loosely follows semver, so all 7.2.x versions, 7.3.x versions, and so on will always be bug fixes. If you want to learn about what is coming in next version, see the RFCs.
&gt; Fixed bug #75384 (PHP seems incompatible with OneDrive files on demand). Now the fix is only about 4 lines extra, but being Windows, I'm sure it's not the only one in there. Does the PHP engine binary (Zend) for Windows have a different code base than Linux, or is this shared but not noticeable due to the low impact?
You can check CMS module easily with this demo page https://pimcore.com/en/try The best WYSIWYG I have ever seen :) 
It's shared, with a lot of #ifdef
"side effects" and now it make sense, some interactions wont be part of "output" of A, so have to be asserted separatly
4. Pass data from form as POST to validation url, if validation url fails, it returns new form page that is also filled in with errors and data previously inserted.
&gt; no new "major" features are being added to the language https://wiki.php.net/rfc#php_71 https://wiki.php.net/rfc#php_72 
In addition to what /u/ayeshrajans already mentioned, nullable types were added to 7.1. I definitely consider that a major feature. It also doesn't make sense to compare major (7.0) and minor releases (7.1, 7.2 etc.): * Minor releases should be backwards compatible. * Adding more features to each release would considerably slow down the release cycle which is rarely a good idea.
You should use Zend Guard - http://www.zend.com/en/products/zend-guard or IonCube - http://www.ioncube.com/
About Slack, it’s actually extremely easy to start using it: just register a new organization in it (it’s free as long as you don’t want to pay for some extra stuff) and send email invites to all your team members. Unless you already use some chat application where everyone hangs out, Slack is a very low-effort thing to get going with and relatively high-value at the same time.
it is based on symfony 3.3 IIRC from part 1.... It is a new series but already outdated...
Take a look at the Demo-Site: All that (Frontend) functionality is provided and could rather easily integrated in your own project. A full featured Blog-Engine (with RSS, etc, like Wordpress) is not. If you need to build a Blog-centric site, fast, then Wordpress *might* be the better choice. If you want more freedom and/or extend Wordpress a lot, use Pimcore. Usually, you do not need to code/tweak the Pimcore backend / UI - Everything is included. Again, take a look at the Demo: https://pimcore.com/en/try (Use the Experience Manager Demo)
on post validate and save each value as a session variable, e.g. if($_SERVER['REQUEST_METHOD']=='POST') { if(!empty($_POST['first_name'])) $_SESSION['temp_data']['first_name'] = $_POST['first_name']; ... // redirect to self to avoid back button issues. header("Location: ".$_SERVER['REQUEST_URI'],TRUE,301); } In your html form populate each field with the saved values: &lt;input name="first_name" value=&lt;?=isset($_SESSION['temp_data']['first_name'])?$_SESSION['temp_data']['first_name']:'';?&gt;" /&gt;
I've been working remote for something nearing 2 years now. I'm doing this in a team where at least 2 of us work remotely all the time and some of our team only at certain moments. One of us is 7 time zones away and sometimes someone goes 6 time zones in the opposite direction. Still, we feel very connected as a team and get the hard work out, with ever increasing quality. There are a few key things I'd like to share about that. * We have thought out a policy for every kind of meeting we have and what to do when connectivity issues prevent us from having or finishing the meeting. This is documented in our company WIKI for reference. * We use a SCRUM sprint of 2 weeks, which comes with a daily stand up of 15 minutes, we do collectively by Google Hangouts * Our calendars are well synced and we can look into calendars of team mates at all times * All calendar entries are represented by a video call in Google Hangouts * As part of SCRUM we have backlog refinements through video calls. The video calls allow us to share screens and have multiple people actively working at the refinement * We end the sprint with a day full of meetings. First starting with a demo for our stakeholders, which we prepare the day before (separate meeting) and record through Google Hangouts on Air. This means we have an archive of demonstration videos by default. We resume with a retrospective of the last 2 weeks, followed by a small backlog refinement and sprint planning. * Besides these fixed moments of video calls, we regularly take it upon ourselves to do peer programming through Google Hangouts, being able to share the screen and have someone look up literature and documentation, which can be shared. * We are always available through Slack, VOIP and Mail. Besides those, we do ad hoc Google Hangouts calls when needed The above clearly shows how virtual presence can be solved with ease. Setting up a Hangouts call is as simple as typing a name for a call and then sharing the link you are redirected to through Slack or what have you. To ensure the quality of our work, our definition of done holds the following. This goes for all our stories. It is just a brief summary: * All items of work satisfy their predefined acceptance criteria * All items of work have comprehensive documentation * All items of work, where possible, are tested by QA * All items of work have undergone peer review (pull requests or document reviews) * All code has been 100% covered through unit tests and complemented by other forms of testing where applicable * All items of work have been demonstrated * All items of work have been integrated to the level defined in the acceptance criteria On top of the definition of done, we have developed comprehensive coding standards, on top of PSR standards, and set up mess detection and static analysis. We use an in-house built composer package as dev requirement, that installs all necessary tooling, the coding standards, configuration for our IDE and even the configuration files for our continuous integration environment. It also installs a pre-commit hook that runs GrumPHP, it configured through that package. A more comprehensive test will run in our CI environment, which must pass before any of our pull requests are accepted. Pull requests must be accepted by 2 reviewers and the pull request author is not allowed to merge themselves. On top of all this, the retrospective allows us a two week interval in which the team reflects on what went wrong, what went well and what must be improved. Any noted improvements are written down as "Action items" and often times result in a story on our backlog. In order to know how long we spent on a given story, we track time on that same story and have to meet a certain quota by the end of the week. This is mostly because we want to be able to bill precisely to our clients, but also to keep being able to measure where we can improve efficiency, on our non-billables. On a personal level, one of my team members goes to a co-working space every day to have a place to focus on work. I myself work from home each day, as that is what works best for me. We all ensure we are available at the same time as our other co-workers. I myself even like to change before and after I go to work, just to separate work from family time. Something that can really make or break your remote calls is a good audio setup. For the co-workers that are in the office, we have good quality head sets with microphones that only pick up their voice. This enables them to sit beside each other without overlapping in a video call. Once a month we have a general meeting with the whole company. To allow interaction with the whole company, a conference microphone is placed in the middle of the room, which allows us to hear everyone voicing an opinion. We are present through Google Hangouts and can switch between the presentation and a video camera pointed at our co-workers. They can also see us and we are connected through speakers, so we can interject when we need to. All of the above has been a product of carefully preparing and refining. We make sure to come to the office every so often. For me living on the other end of the country, that is every 2 months a whole day and for our co-worker on the other end of the globe, that is a week every year. I hope this was insightful for you and feel free to get in touch for follow up questions. 
The post still shows the same misleading benchmark as before. :-(
You meant tip 6. Yes composer.lock should NOT be ignored from the git repository.
That's probably browser cache, people who never loaded the post will not see it. A normal refresh should fix it.
 &gt; Everything is OK because there are no conflicts. MyClass isn't doing anything outside the boundaries that MyInterface established. True, but it's not doing everything *inside* the same boundaries neither. It can lead to confusions and problems. &gt; That code errors because MyClass has already narrowed the contract. It "volunteered" to be even stricter, and returning null breaks its new, narrower promise. The interface should do the contract, the implementations shouldn't narrow or modify whatsoever the same contract. To me the problem is: you are not sure what class will narrow the contract and what class will not. If you need to act upon the null return value and some class never return it, it might be a problem difficult to debug. You will have to go through all implementations (which should be a detail nobody cares) and see what narrow the contract and what don't. And what about the future implementations? &gt; That said, there are some valid use-cases for nullable return types, especially when it comes to scalar values. For example getAge() could return null to indicate "don't know". Sure `getAge()` can return null if you "don't know". But then you will be very likely to act on this specific result. Why not acting directly in `getAge()`? Like throwing an exception / returning a default age / return an error string and whatnot. By acting on the `null` result of `getAge()` afterward you make the code less straightforward, more confusing. 
Works now! :-)
The difference mainly comes from Amp reusing workers. The smaller difference without concurrency limit is probably due to Amp having to autoload everything again in the workers, while your package can simply reuse what's there.
He's right, instead of $_POST['search'] you should use something like: $stripSearch = strip_tags($_POST['search']); and also $search = filter_var($strippedSearch, FILTER_SANITIZE_STRING);
This is quite old actually. https://bugs.php.net/bug.php?id=64938 &gt; Submitted: 2013-05-28 13:43 UTC
The bundled libzip is being phased out, PHP 7.3 will force you to use a system libzip. I wouldn't expect any updates to the bundled library, unless they are security-related.
Article goes from buzzwords to coaching to important techniques to techniques for very, very messy code to more confidence busting. Long-ish but I like it.
Can you elaborate as to why it's so wrong and dangerous? The article specifically mentions why there's a difference between checking in `composer.lock` and being specific about the versions of libraries you use. I'm just curious where you're coming from.
I wouldn't call it dangerous, but that's a great way to get a conflict when requiring something new. Updating all the deps shouldn't be a problem since we have semver exactly for that. 
Could you elaborate on how it's dangerous? It feels like a bit too much hassle to me, but I it's far-fetched to call it dangerous IMO. 
Port conflicts only matter when one would like to map those ports from containers to host ports. Docker assign unique IPs to running containers on local network, so it's entirely possible to use those IP's to reach correct containers from web browser.
A bit too many attempts to be funny and too little technical advice. Not the best article on the topic imo. 
Tip: #8, how factual is this tip?
#8 is correct.
hmm, then why isn't this just the default functionality of composer to save time? Seems strange if that's the case.
Looks painful to do with Symfony, how many members have your team?
I hope it's not too late for this or awkard but: *How do you sell your clients Bolt instead of Wordpress *How do you compare Wordpress to Bolt *What are some good extensions that you are essential to bolt *How much time do you take to develop a website *Any Good tips to someone learning bolt.
On the other hand it's a great way to not get unexpected changes in library code you directly depend on. 
BC, unexpected diffs?
How do you read those files? Do you store your parameters.yml in symfony with docker secrets or extra files?
In general it's often a good idea to format all larger lists (arrays) that way - sort them, have one item per line, use trailing commas, and *don't* put the opening and closing paren (brace, whatever) on the same line as the first/last item. That way, only the changed lines ever have to change, you minimize git conflicts, it's even visually searchable and you can often simply *see* any duplicates, most editors can sort it automatically, ... it just takes some getting used to :) (well, and the trailing comma thing doesn't usually work in JSON).
I don’t know about this package but Kohana is officially dead: http://kohanaframework.org Though given the last commit to that repo was 3 years ago, I’d say it was dead too. 
Yup, major banks have API's also. The first question to ask would be what bank or financial institution the client is working with or do they want to work with.
You should clean up before publishing the document the first time. What will happen now is most people will download and use the "broken" version and never come back for the corrected version. An alternative would've been to publish as HTML / Markdown / some other "live" format that people can bookmark and will always see the latest version of instead of a downloadable PDF.
Slightly OT but there is a fork to keep kohana up to date with modern PHP that seems alive https://github.com/koseven/koseven
well..I don't agree What if I call that page from Postman and I send the "search" parameter using POST with an XSS code inside? That's how hackers insert backdoors in unpatched wordpress/drupal/magento.. modules
We use skype which the entire team hates but the business ppl are on it. It would be an uphill battle to get them all to migrate to a different tool. We tried that with hipchat and it failed cause business ppl felt like it was too techy
Right, I was just listing out a potential conflict. That they're mostly separated (and thus can run at the same time) unless they all have to share a common area (like the available ports on the host system).
Hello there :). I will soon start looking for the new gig (around March). I am working exclusively remote for 3+ years (last 3 years for an American company, which is something like a coders mine, a semi-freelance type of contract). Do you still search/have a need for new developers? 
Much of it we planned in a couple of weeks, but the complete package has been something we fine tuned and developed over the past two years. We recently open sourced the composer package mediact/testing-suite which is the dev requirement I mentioned. You can find it on packagist.
One nifty trick I discovered recently is [autoload-dev](https://getcomposer.org/doc/04-schema.md#autoload-dev): &gt;This section allows to define autoload rules for development purposes. # &gt;Classes needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency. # &gt;Therefore, it is a good idea to rely on a dedicated path for your unit tests and to add it within the autoload-dev section.
Exactly. You should maybe lock down to minor, but never to patch.
What if a dependency has a security-critical problem which is patched in a higher patch version?