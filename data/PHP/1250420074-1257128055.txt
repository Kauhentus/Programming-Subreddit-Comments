Several thousand is nothing. Several million is where you start to blow buffers.
Yes, forach() makes of copy of each element as you loop through it. *Except* that a real copy is not actually made until you modify the element. Now, whether this happens if you modify the underlying array that you are looping over, I don't know - could be worth comparing it in your tests against putting $value = 'foo' into the loop.
But it's great for sanitizing variables...
 switch (true) { case $bool1 &amp;&amp; $bool2: //... break; case $bool1 &amp;&amp; $bool3: //... break; case $var1 == 'fu' &amp;&amp; $var2 == 'bar': //... break; //... }
I discovered that you can toggle between chunks by using this: //*/ $var = 1; /*/ $var = 2; //*/ where removing the first slash will use the second block
&gt;PHP is faster with variables inside strings than doing '" .$var ."'. Personally I'd have added ` before and after all table/field names too. That's plain wrong on so many levels. PHP is rarely the bottleneck when it comes to data-access--the SQL/Database are the usual culprits. You're alleged performance gain, which I highly doubt is a gain worth mentioning, causes two very serious problems: 1) Security: Your SQL is just scary--you need to be able to guarantee your data is sanitized. Promising/assuring someone you sanitized it elsewhere doesn't cut it. 2) Optimization: Your SQL can't be cached effectively by the database--I'm thinking Oracle here. Separate the SQL-that-remains-the-same across different calls from the variables and the DB has a chance to cache it. Conclusion: Use DB bind variables. You know the fastest way from the 14th floor is the jump out the window; taking the stairs might be wiser though. 
For me: ClassName, methodName, property_name, functionName, $variable_name, CONSTANT_NAME. For my files I use all lower case filename.use.type. I.E: template.class.php, init.inc.php, setup.sh.php, main.tpl.html. Where I work we use .phtml for files accessed directly over http, and .php for anything else.
It's worth noting that variables and key names are case sensitive in PHP :-)
This is why I use .inc.php. &gt; Everything's a friggin' include What about files accessed directly over http? .inc.php seems to make sense for files not accessed directly that don't contain a class. Like a config file. 
Yep- the place I work has an in-house templating framework that uses this... before that I had never seen it before. Then again, before that, I hadnt really done much in PHP, so thats no surprise.
If you have to use &amp;&amp;, you really shouldn't use case, imo. It's just abusing the notation. You're writing an if/then/else, use an if/then/else. In other words, I think your code is really ugly there. For the simple uses, where one value is needed, case _may_ be clearer to you if you used to be a C programmer. But 90% of the time, long case statements are written by bad programmers who don't realize that it would be better to use some dynamic extendable structure. (Either polymorphism, or some kind of mapping table.)
&gt; it's massively inefficient. If that's MASSIVE, and the bottleneck in your code or even measurable, then so is my penis.
For one person projects, yes. For when you have a web designer, you really do want the straitjacket of a template engine, so that they are forced to use what you provide to the view in a clean way. Otherwise you just end up with a tangled web of shit code, unless the web designer is also a good programmer (rare). But I kind of like the Zend-like style where you only use the PHP alternate control structures in views: &lt;? foreach ($this-&gt;a as $b) : ?&gt; &lt;? if ($b-&gt;condition) : ?&gt; (some HTML) &lt;? else : ?&gt; (some alternate HTML) &lt;? endif ?&gt; &lt;? endforeach ?&gt; Yes I realize that many people discourage the short form &lt;? and insist on &lt;?php, but it doesn't really bother me, and the alternate control structure reminds me that I'm using it as a template engine only. (It's almost a different language.)
&gt; One class per file. Period, no exceptions. This *does* seem to be the de facto standard. I used to adhere to it, but I've laxed on that over time. The reason being that it doesn't leave room for other things than classes. Eg. global functions and procedural code. I also find that having a class per file somewhat restricts me during refactoring, where I'll often move classes around, rename etc. Keeping closely related classes in a single file is much more manageable. &gt; If the class contains capitals, so does the filename. Again, you're probably more standard than me on this point. The problem I have with this is that class names are case insensitive in PHP, but file names are not. To make matters worse, file names *are* case insensitive on Windows, so developers who use that may not realise their mistakes.
You can also cast (or [juggle](http://us3.php.net/manual/en/language.types.type-juggling.php) as PHP refers to it) an array to stdClass. It is nice when you'd prefer stdClass and are provided an array or the other way around. $var = array( 'text' =&gt; 'text', 'textTwo' =&gt; 'text2', 'int' =&gt; 0, 'time' =&gt; time(), 'wHaTeVeRyOuLiKe' =&gt; 'see?', ); echo $var['text'] . '&lt;br/&gt;'; $var = (object)$var; // var is now an instance of stdClass echo $var-&gt;text . '&lt;br/&gt;'; $var = (array)$var; // back to an array again echo $var['text'] . '&lt;br/&gt;'; 
Thank you for calling my skills rare ;) As you are probably aware; when include() is called from the context of a function, it inherits the variable scope of that function -which makes it a lot harder for any web designer to fuck things up by assigning new values to variables which are still in use (requires keeping away from $_GET, $_POST, $_SERVER too). I would personally call that a pretty clean view. I'm all for using the alternate control structures in templates too. I even prefer the ASP-style syntax under those specific circumstances: &lt;% foreach( $this-&gt;a as $b ): %&gt; &lt;% if( $b-&gt;condition ): %&gt; (some HTML) &lt;% else: %&gt; (some alternate HTML) &lt;% endif %&gt; &lt;% endforeach %&gt; but that's just a matter of taste and requires access to php.ini on the server...
yeah I agree, `switch(true)` is a total abuse, it's very ugly. I've seen this type of code a few times, and I really don't understand why it's supposed to be better.
well, [550 times slower](http://www.phpbench.com/) is pretty massive by my book, whatever the scale involved.
Sure, for all those times you write a for loop with nothing in it. If it has something inside the loop which compares in runtime to the count($arr), then it becomes simply incremental. (And when don't you?)
[ASP tags](http://us2.php.net/manual/en/ini.core.php#ini.asp-tags) **do not** require access to the server. They are listed as [PERDIR](http://ie.php.net/manual/en/configuration.changes.modes.php), so you can set them in an .htaccess file if you so choose.
well, like: for($i=0 ; $i&lt;$c ; $i++) { echo 'record '.$i.': '.$arr[$i].'&lt;br /&gt;'; } Or almost any other time I'm doing a for loop... no?
Sorry, but my applications have to work in a corporate environment where access controls are managed by the Active Directory, and that pretty much means being forced to use IIS.
 // populate array $arr = array(); for($i=0; $i&lt;1000; $i++) { $arr[] = "Entry number $i"; } $start = microtime(true); for($i=0 ; $i&lt;count($arr) ; $i++) { echo 'record '.$i.': '.$arr[$i].'&lt;br /&gt;'; } $elapsed = microtime(true) - $start; echo "Elapsed : $elapsed"; On my machine, ten trials: Elapsed : 0.0008699893951416, 0.00086808204650879, 0.00093698501586914, 0.0011160373687744, 0.0013041496276855, 0.0011980533599854, 00087094306945801, 0.0011351108551025, 0.00087594985961914, 0.0014660358428955 Same code, only with for($i=0, $c=count($arr); $i&lt;$c ; $i++) { Elapsed: 0.00074601173400879, 0.00086092948913574, 0.0008699893951416, 0.0010130405426025, 0.0008540153503418, 0.00086188316345215, 0.0009911060333252, 0.00086808204650879, 0.00086712837219238, 0.00092792510986328 Yes, faster by 10-30% or so. I'm not sold. That's the simplest case, a one line loop body. For anything else, the performance of the for control structure is going to be much smaller as a percentage. In PHP I'm already giving up a factor of 50 or so over using some other language like Java or C#. If a task requires micro-optimizing of control structures in a way that introduces extra variables (and places to go wrong), then I state that PHP is the wrong language and environment for you to be using.
print in landscape using legal paper ;)
Also called Method Chaining. http://en.wikipedia.org/wiki/Method_chaining
What annoys me is when developers don't stick with stdClass or arrays for certain sets of data (like DB results). I've worked on some projects where sometimes the data will be stdClass, and sometimes it will be an array.
Mine: function this_function_here() {} $var_name; class class_name_class {} // I always have _class on the end. CONST_NAME_HERE /includes/php/ validation.php system.php
ok, fair enough.
yeah, I'm in favour of all lowercase filenames, all the time.
hmm, I'd be in favour of putting config files outside the web root.
Wow I've never once looked into output buffering. Thank you for this.
I'm less concerned about micro-optimizations than I am about cleaner, more readable, sane code. Seeing $foo = 'this ' . $var . ' and that ' . $foobar . ' blah blah foo monkey pants'; That is harder to read / process compared to: $foo = "this $var and that $foobar blah blah foo monkey pants"; same goes for the use of multi-line output blocks in PHP, etc... I'm not looking to squeeze out a few extra processor cycles... I'm looking to make maintainable, good code... and if it's more efficient too, that's awesome.
Is your work's web server set up to process .php files as PHP so that people can't view the source if they know the filenames? I hope so. :)
Hmm I tend to do. /**/ code here /**/ Then I only have to add get rid of one character to comment it. /** fuck off code /**/ Plus IMHO it looks a little bit prettier.
hey that *is* much prettier :0)
I think trav meant associative arrays. i.e., $dollars['firstOneEarnedCodingInPHP']. I'd argue that PHP's associative arrays are the most defining part of the language. I'm curious though about stdClass. *Are* there any benefits over using associative arrays?
That's an awesome name for that "operator." I can just imagine someone complaining that the goes to operator is failing them with $i = 0; while ($i --&gt; 5) { code(); } 
I use xdebug (PHP plug-in module) and Eclipse PDT. Nothing beats having a *real* IDE that lets you step through your PHP code--even remotely--setting breakpoints and examining variables. No more dumpvar() or print_r(). I used to write all my PHP in Vim. I still use Vim sometimes, especially when I need to transform some text using regexes, but I've sort of come full circle and gave in to using GUIs again. You **can** however get a Vim module/plugin/whatever to use with xdebug!
Awesome, I've been thinking about many ways to do that but none as optimal (besides #if 0/#else/#endif, but that only works in C{,++}). My respects.
So you blame PHP for not standardizing well then you go ahead and code completely out of the standard of the language itself? function function_name() {} $var_name; class class_name {} CONST_NAME I have not done anything like `ObjectName {}` since Visual Basic.
Good to know, even though I have never used ereg_* because I came to PHP from Perl.
&gt; Function names may only contain alphanumeric characters. Underscores are not permitted. so your example isn't valid according to [Zend's naming conventions](http://framework.zend.com/manual/en/coding-standard.naming-conventions.html), so what "standard of the language" are you refering to? edit: also, your var\_name and class\_name are invalid according to the above spec, so your code is actually less compliant than mine, whose only transgression is the lack of continuity in var_name/varName ObjectName is perfectly valid according to that spec. even according to PHP's [outdated](http://cvs.php.net/viewvc.cgi/php-src/CODING_STANDARDS?view=co "this file was added at a very late stage of the development of PHP v3.0 .... we are now well into the version 4 releases") official [coding standard](http://cvs.php.net/viewvc.cgi/php-src/CODING_STANDARDS?view=co), (which is for people making changes to the PHP engine itself) you're wrong: &gt; Each word in the class name should start with a capital letter, without underscore delimiters
Zend FRAMEWORK, I don't use. I assume they said that so you don't redefine anything.
Yeah I know that's for Zend Framework, but I'm having trouble finding an official PHP recommended naming convention like the one you alluded to. Can you throw me a link to the one you're using?
http://php.net , I follow their lead.
But they're inconsistent.... Also: $myclass = new MyClass(); ([source](http://uk3.php.net/manual/en/function.class-exists.php))
From my experience with PHP `function_name()` is more common than `functionName()` or `FunctionName()`, thus I use `function_name()`.
It certainly is :-)
Reading the definition I think technically you're slightly more correct. It appears people define Method Chaining as purely returning a reference to the current object where as a Fluent Interface is a slight extension of Method Chaining (where the focus in a Fluent Interface is readability, semantic code etc).
Awesome. I recently started learning php from an old O'reilly book I got at the library and was disappointed that it didn't support anonymous functions. I'll have to upgrade my php to 5.3 now!
Better late than never, I guess. I remember wanting them about a decade ago, having discovered how useful they could be in Ruby. I'll certainly appreciate them a hell of a lot more than interfaces and abstract classes.
[Kohana](http://www.kohanaphp.com), a fork of CodeIgniter for &gt;5.2, does include an auth module. That module, incidentally, is a good introduction to Kohana's ORM, which is a huge step up from CodeIgniter's database library.
I use eclipse with PDT... it has syntax checking that catches a lot of my mistakes. http://www.eclipse.org/pdt/ Along with subclipse, it's the nicest platform I've found that's free. You can also do aptana (based on Eclipse), but it's free version doesn't have sftp support (30 day limit) - I believe it has syntax checking as well although I haven't looked at it in a year or so. http://aptana.com/
How about: cat superclass.php mysubclass.php | phplint You could put that in a "controller-lint" script that would pass the controller base class php file for you.
PHP Version 5.2.6-3ubuntu4.1 to be exact :)
&gt;Zend Framework is realy good I'd say the Zend Component Library is pretty good, but the MVC is too complex. I hate how the components try to inject Zend_Translate everywhere. I have nothing but disdain for Zend_Forms that layer decorators on top of each other like a Russian Doll so it's impossible to have fine gain control over how the elements are placed on a page without having 50 thousand files. What I particularly not like is all the mixing of inheritance and composition, so it's impossible in a few moments to figure out what methods are available.
&gt; all of the modern MVC PHP frameworks (cake, code igniter, zend, etc) and all of them focus on creating CRUD applications based around a database. Are there any PHP frameworks that make it easy to integrate SOAP based services into the MVC pattern when you don't have a local database? Any of the frameworks you mentioned will do. Under an MVC architecture, the Model is separated from the controllers and the view. Just because framework xyz allows you to query a database doesn't mean you have to. Here, a made up example: &lt;?php class Model_User { protected $_id; protected $_firstName; protected $_lastName; protected $_email; public static function load($id) { // Loads a record from whatever datasource. // Probably best is this double dispatches // to some sort of Data Access Object. } public function findActive() {...} public function save() {...} // Some Business methods. public function getFullName() { return trim($this-&gt;getFirstName() . ' ' . $this-&gt;getLastName()); } // Setters/Getters public function getId() {...} public function setId($value) {...} public function getFirstName() {...} public function setFirstName($value) {...} public function getLastName() {...} public function setLastName($value) {...} public function getEmail() {...} public function setEmail($value) {...} } ?&gt;
function_name, ClassName. Same as the other 9000 functions. http://uk3.php.net/quickref.php The example you used &gt; (strip_tags vs stripslashes for example) is valid, you must understand those functions were implemented long ago when there wasn't much of a standard. Changing them is not really an option since countless websites might break. as for $myclass = new MyClass(); Variable names aren't that important. Since the scope of any single variable is usually not very big*, they're easy to find it again. *Note: excluding things like \Namespace, CONSTANTS or -&gt;objectProperties, since those too have a standard.
For you initial requirement; &gt; Does anyone know of a decent static analysis tool to catch typos? Yup... $ php -l somescript.php No syntax errors detected in somescript.php That's the in-built "lint" PHP provides for running on the command line. It doesn't follow includes - each script needs checking individually but it's easy to combine with something like find
What - exactly - is it that you want? Undefined local variables will raise a run time error, so they should be easy to catch; Just write a unit test, that runs your code, and it'll show up. Because of php's dynamic nature, there is a limit to what can be reasoned about a program in static time, which means that you can never get as good tools as for eg. Java.
You can use MacFUSE in order to mount other computers' drives over SSH. I use it every day for web development, doing remote debugging with Eclipse PDT. I'm trying out Aptana, too, after reading about it (thanks for mentioning it).
I'm on linux, so I use sshfs for that ;)
Yes, that's what I want (undefined local vars). I guess I'll just have to create some unit tests. It'll probably be better for me in the long run too *sigh*. edit: python has pyflakes which I often used. It was great for catching the simple errors.
Yes, I mentioned that in the submission. I already bound php -l to :make in vim. I want something like Python's pyflakes: checks syntax and warns about simple errors.
great article re: sphinx &amp; lucene i love the comment at the end &gt;is it work with joomla?
WOW, great quality screenshots and amazing trick with the right click button! Your site is spam. Here is the original story for anybody that cares: http://pcquest.ciol.com/content/handson/2009/109080101.asp
Me too, when I'm on Linux. It's much easier to get installed and working on Ubuntu... I had found a few different supposed Mac ports and they were all busted. There's a working Windows port, too, I tried out one time. I used Linux exclusively on the desktop for two years, but now I usually just use it on servers. I bought a MacBook early this year so I could do iPhone development, and Ubuntu is still not up to snuff on it, sadly. But as I've been doing, I'll try again with each release and see. The thing I miss most from Linux, oddly enough, is Zim. I like writing notes in wiki format (rather than using WYSIWYG editors). **Edit:** Also, I still miss Gnome Terminal a bit, but I was able to install the GNU tools (and GNU find) via MacPorts, and swap in some config files from Linux, making the Mac Terminal usable... It's almost like a hybrid GNU/OS X system now. :P
i can't wait to start using gotos to comment out code goto a; while(){//some crap that i don't want anymore} a: 
&gt;Expected result: &gt;The world will end. &gt; &gt;Actual result: &gt;The world ended. Does this necessarily make it a bug? It __did__ achieve the expected result.
Why's that easier than: /* while(){//some crat that i don't want anymore} */ ?
Because his version has an obvious syntax error that will prevent the script from running at all.
A tip in the PHP manual entry for preg_split() recommends you use [explode()](http://us2.php.net/manual/en/function.explode.php) for cases where you don't need regular expressions. If you're not worried about catching every single whitespace character explode() should technically yield better results.
That's why it would be better in most cases to have the bulk of your code (classes etc.) above the document root.
Just to let you know, documentation examples are always supposed to follow the PEAR standards - although there nothing in there about naming conventions for classes. Personally I use the same for you (except no underscores in variables/properties) but I really wouldn't get too hung up on it.
thanks, I didn't know that. Yeah I don't get too hung up about it (usually!), I just wondered what other people did :D
!! I never thought of that, thanks!
actually the reason is more subtle, i mostly code in an MVC, and so the real problem is when i want to comment things out int he view where i have mixed php short tags and html so it's really something like &lt;?foreach($vars as $var){?&gt; &lt;div&gt;&lt;?=$var['Model']['field']?&gt;&lt;/div&gt; &lt;?}?&gt; so if i want to comment something like that out, what i had been doing was wrapping it in a &lt;?if(false){?&gt;[..snip..]&lt;?}?&gt;
Alternatively, add another / before /*
How is &lt;?goto a;?&gt;[..snip..]&lt;?a:?&gt; any better than &lt;?if(false){?&gt;[..snip..]&lt;?}?&gt; ? I can think of several reasons that the goto method sucks ass.
well the original post was sarcasm if anything it's so much worse, especially in object oriented programming, if i have duplicate labels serving as comments i'd be pretty worried to see where that goto takes me
Technically, the best type of correct.
Not a complete Auth solution. But I did some work looking for the best way to create a salted hash, and after some discussion on Reddit [came up with this.](http://www.aaronbassett.com/2009/making-a-perfect-hash/)
Thanks for this.
So what is the benefit of ZS, that warrants the price? I've been doing all my work in vim (old school represent) and when a package has a price like that, I need to know what it brings to the table...
Yes, don't touch a hot stove and when asking for advice specify exactly what kind you're looking for.
I like to use a token/hash for the session/cookies, for example: md5(salt + ip + user_agent + nick) If the an attacker tries to login from a different ip or browser/user_agent after stealing/copying cookies, it doesn't work.
You're going to want to use something other than md5. Thomas Ptacek's blog entry on [secure password schemes](http://web.archive.org/web/20071210193633/http://www.matasano.com/log/958/enough-with-the-rainbow-tables-what-you-need-to-know-about-secure-password-schemes/) is an excellent start. Here's a [password class](http://code.google.com/p/mortar/source/browse/trunk/system/classes/Password.class.php) I put together as well.
IPs change, you risk locking out genuine users.
SSL is the only thing I see missing from your plan. That isn't a PHP issue though.
I'd allow last octet of IP to change. Dynamic IPs and proxy farms are usually within same subnet. 
You could regenerate the salted password hash on every successful login (or even on every page load - if you don't mind the overhead), this way if an attacker gets a hold of a password hash it will only last for 1 login / pageview.
This is the one of the most secure PHP based logins I have seen.. It uses Zend Framework though.. I hope this gives you some more ideas http://www.zimuel.it/blog/?p=86
Thank you, topics I hadnt come across: &gt;With this hidden value, the token, inserted into a form we are sure that the POST data comes from our page and not from others. 
Twitter does it, for instance
Here's an excellent read: [Chris Shiflett's Blog](http://shiflett.org/)
&gt; their IP is recorded which one? `$_SERVER['HTTP_FORWARDED_FOR']` or `$_SERVER['REMOTE_ADDR']` or `$_SERVER['HTTP_CLIENT_IP']` or `$_SERVER['HTTP_VIA']` or `$_SERVER['HTTP_FROM']` or `$_SERVER['HTTP_FORWARDED']`? :D
1. Use SSL for at least the login (or if applicable the whole site and use the ini setting session.cookie_secure to prevent the session id cookie from being transmitted over a non-secure connection) 2. Regenerate the session ID after login to prevent session fixation attacks 3. Use bcrypt for your password hashing, MD5 is too fast (http://www.securityfocus.com/blogs/262) 4. Only allow logins via POST to prevent malicious sites from hitting the login page via GET 3 times and locking out a user 5. Don't use the $_REQUEST superglobal since it is vulnerable to request value fixation via cookies
The only way you could regenerate the password hash on every page load is to have the original password in plaintext in the session or database. This is bad, don't do it. Regenerating the password hash on each login does nothing. As soon as an attacker gets a single version of the hashed password they can crack it. Changing the salt doesn't change the password, so as soon as they crack one salt, they are all set. Instead of doing either of these things, use a password hashing algorithm that is slow. The standard is bcrypt. http://www.securityfocus.com/blogs/262
Here is a working link to Thomas Ptacek's blog: http://www.securityfocus.com/blogs/262 Bcrypt is available via the http://php.net/crypt function depending on your OS in PHP 5.2 and under. PHP 5.3 contains a native bcrypt implementation fallback, so it is always available.
CSRF tokens are only useful on a login system if the user is liable to type their password into some other site. If this is the case, they will suffer a phishing attack very quickly and the attacker won't bother to send the password to your site, they'll just record it. CSRF tokens should be used in conjunction with only allowing constructive/destructive actions via the HTTP POST method on all other parts of a site behind a login.
This is not one of the most secure login systems because it only uses md5 instead of bcrypt. CSRF tokens are useless in a login system. If someone enters their password into another site, the attacker will just take the password instead of sending it to your site. Simply requiring the user POST to (instead of GET) the login page is all that is needed. The one good thing this article recommends is regenerating the session id after a successful login to prevent session fixation.
His site was down when I put the link up, hence the web archive link.
How does sha1 stack up against bcrpyt, I've used mcrypt before for sessionless captchas, but never heard of bcrypt, I assume its a one way encryption like sha1 and md5?
For #2, use session\_regenerate\_id() if you didn't realize. Do this on every single page load to minimize XSS stealing of session ID's. You can also bind a session to an IP, but this has drawbacks for NAT and also for load balanced networks that jump between multiple IPs per request. For #3, For any password hash algorithm, still use very large and random password salt - google it if you don't know how. For #4, you should also only lock out users for specific IP's or for large numbers of login requests in general. Make SURE you also look into preventing XSS and SQL Injection... these are how your site can end up hosting malware. 
*Don't* regenerate on every single request. It will cause user to lose session completely if requests are executed in parallel (when cookies return to user out of order). To protect against XSS use `Http_Only` cookies and secure HTML templates (that escape all variables by default). 
There isn't any way to perform automated POST actions across domains in modern browsers, so it won't add any protection. The key is to ensure it only accepts POST and not GET. With GET, JS could be used to create img elements on the fly with the login URL as the src attribute.
That makes sense, I just found that the archive.org is broken (for me).
A really good read about password hashing is http://www.securityfocus.com/blogs/262. In short, bcrypt is better because it is slower, and can be made even slower as computers get faster. And yes, it is a (one-way) hash function. PHP supports it on compatible OSes in PHP &lt;= 5.2 and all OSes in PHP 5.3. See http://php.net/crypt for details.
Good points (except for regenerating the session ids on every request, see prnl's comment). Preventing XSS and SQL injection are paramount. Otherwise attackers can insert whatever code they want into your site. For people who are interested, I have a fairly extensive PHP security page I wrote up for an open source project I run. It gives an overview all of the general security concerns when building sites with PHP. http://flourishlib.com/docs/Security
I agree, regenerating the session id on every request is overkill. Definitely do it right after a user logs in or changes permission levels.
httponly isn't quite ready to depend on.... still too many work arounds on too many browsers... but it's still a great feature to use and I do see your point about re-generating on every page request. http://www.owasp.org/index.php/HTTPOnly#Browsers_Supporting_HTTPOnly
But that only works once, not repeatedly, because the user gets redirected to the form action URL.
&gt; Use bcrypt for your password hashing, MD5 is too fast Speed doesn't have anything to do with it.
Ah, I guess it depends on sessions or something, as it worked for me yesterday but not now. Thanks for the better link.
So, I can only login from home, but not from work. Brilliantly user friendly.
No. It allows you IP to change whilst you are in session.
You could use and ldap server that has extensible password policy for the guts....then just wrap it in ui.
how does bcrypt compare with mcrypt?
Yes, actually speed has everything to do with it. The speed at which the algorithm runs affects the speed at which your password can be cracked. You can read about it at http://www.securityfocus.com/blogs/262.
Bcrypt is a blowfish-based hashing algorithm that includes an expensive key setup, which was picked on purpose to make the algorithm take longer. Mcrypt is a Unix library (and corresponding PHP extension) for performing encryption and decryption of data. Bcrypt is available via the http://php.net/crypt function on certain OSes in PHP &lt;= 5.2 and all OSes in PHP 5.3. Mcrypt is available as a PHP extension - http://php.net/mcrypt.
&gt; Changing them is not really an option since countless websites might break. so, create `strip_slashes` in the next version, mark `stripslashes` as deprecated and then in a few more versions time it can be removed, just like register globals has been, and HTTP\_GET\_VARS and all the other legacy stuff.
&gt; 9000 functions 5405 actually, and a *lot* of them don't follow the function\_name format &gt; Phar &gt;PharData &gt;PharException &gt;PharFileInfo &gt;addcslashes &gt;addslashes &gt;appenditerator &gt;arrayaccess &gt;arrayiterator &gt;arrayobject &gt;ascii2ebcdic &gt;bin2hex &gt;bindtextdomain &gt;bumpValue &gt;cachingiterator &gt;checkdate &gt;checkdnsrr &gt;clearstatcache &gt;closedir &gt;closelog &gt;com\_isenum &gt;crack\_closedict &gt;crack\_getlastmessage &gt;crack\_opendict &gt;curl\_getinfo &gt;curl\_setopt &gt;curl\_setopt\_array &gt;dateinterval &gt;dateperiod &gt;datetime &gt;datetimezone &gt;dbplus\_freealllocks &gt;dbplus\_freelock &gt;dbplus\_freerlocks &gt;dbplus\_getlock &gt;dbplus\_getunique &gt;dbplus\_setindex &gt;dbplus\_setindexbynumber &gt;dbplus\_undoprepare &gt;dbplus\_unlockrel &gt;dbplus\_xlockrel &gt;dbplus\_xunlockrel &gt;dcgettext &gt;dcngettext &gt;decbin &gt;dechex &gt;decoct &gt;deg2rad &gt;dgettext &gt;directoryiterator &gt;diskfreespace &gt;dngettext &gt;domainexception &gt;domcharacterdata &gt;domdocumentfragment &gt;domdocumenttype &gt;domentityreference &gt;domimplementation and that's just *some* examples, can't be bothered to go through the whole list and that's before we start wondering if it should be `x2y` or `xy`. Compare `decbin` and `deg2rad` or even better `dechex` and `bin2hex`. It wouldn't take much to provide a uniformly named set of functions and make the old ones aliases for a few versions until everyone caught up.
How about throwing the &lt;form&gt; into a iframe so it can be reloaded?
If your going through a list, dont forget to remove ClassNames, &gt;Phar &gt;PharData &gt;PharException &gt;PharFileInfo &gt;appenditerator &gt;arrayaccess &gt;arrayiterator &gt;arrayobject &gt;cachingiterator &gt;dateinterval &gt;dateperiod &gt;datetime &gt;datetimezone &gt;directoryiterator &gt;domainexception &gt;domcharacterdata &gt;domdocumentfragment &gt;domdocumenttype &gt;domentityreference &gt;domimplementation 
I agree with that for many functions. Aliases should be provided for more consistancy. But, again in your example, magic_quotes are being deprecated. Once gone, there will be no need for add/stripslashes
ok, I found 40 in the first 500 that didn't conform to the function_name convention and that weren't classnames. There's 5405 functions in total, so extrapolating, we could reasonably expect around 400 functions in total to be named non-compliantly. That's still 7% of functions inconsistently named.
well, that's just a curiosity of the example I chose, there are plenty of other examples that do not feature functions that are soon to be without use. You can't be claiming that all the inconsistencies are tolerated because the affected functions are soon to be useless, because that's just wrong. So I wonder why you mentioned that curiosity..
&gt;...claiming that all the inconsistencies are tolerated because the affected functions are soon to be useless, because that's just wrong. That is wrong; which is why I didn't say that. Clearly not all functions are bound for obsolescence. Look, I'm not defending PHP's flaws, just trying to point out that its becoming more and more consistent, and that the convention is now funciton_name. I am not even claiming that you MUST conform to this. Zend vs Pear - they are both good. As long as you are consistent within each project/work-place it doesn't cause problems.
&gt; its becoming more and more consistent, and that the convention is now funciton_name. yes, agreed.
Whether you are a PHP novice or an experienced developer; tools that you use have direct impact on your productivity. W3Avenue has compiled a list of really useful extensions &amp; tools for PHP developers that will help you speed up development and significantly improve overall quality of your code.
I've never used Zend, but I'm a big fan of Komodo. These editors bring in features like code completion and automatic formatting. As a CS graduate who spend plenty of time in Kate and GEdit writing C programs (yeah, I know, I'm not hardcore), the biggest advantage for me between a standard text editor like gedit and a more complex one like Komodo was the code completion feature. Instead of having to dive through man pages, the function pops up as soon as you start typing (you can just guess the function name if you're completely lost). I think that if you're experienced in a language and you understand it, there's no reason to spend money on an editor. 
No clue, I won a copy of Zend Studio about a year ago in a PHP innovation competition. I downloaded it and tried using it a few times, it has a few really nice features (sounds odd, but I love the amazing customisability of the code beautifier) but in the end I prefer using phpDesigner - it runs faster on my PC and is more appropriate to my typical project work. If you really want you can buy my license if you want for a fraction of the price. (This isn't meant as explicit advertisement, I'm just trying to do the man a favour.)
&gt;What does ZendStudio bring to the plate (other than being made by Zend) that makes it worth the cost? That is a terrific question, and at $399 for 1 year, an important question to ask before settling on an IDE. A question that may help refine your answer a little more is "What does Zend Studio bring that my current setup doesn't offer?". If that does not shed any light, consider Zend Studio vs the other **free** options such as [PDT](http://www.eclipse.org/pdt/) or [NetBeans](http://www.netbeans.org/downloads/index.html). I have nothing but great things to say about NetBeans 6.7.1. I work in mostly PHP and JavaScript and their code completion and function lookup for both is extraordinary. I work a lot with MODx CMS/F and NetBeans lets me point to the MODx class libraries for autocomplete on those classes as well as the built in PHP functions. This also works with other frameworks such as CakePHP, CodeIgniter, and ZendFramework (which ZF integration is one of Zend Studio's big selling points). Before you make a decision, I think it would be a disservice to yourself to not at least evaluate NetBeans 6.7.x.
Zend Studio has some nice features, but it's expensive, the UI is pretty chunky, and if you have a development server you don't need most of the extra features. That said if your code is running in an environment with all the Zend bells and whistles you might gain something from using Zend Studio, otherwise just stick to Dreamweaver (8, anything and everything CS1/2/3/4 is just horrible).
I personally dislike dreamweaver, and stick more to vi/gedit for work these days. When required (by client demands) to use Dreamweaver, I end up just dropping everything out of the way and using it like an expensive text editor.
Couldn't agree more. Netbeans is far superior to Zend Studio. Can't beat the price either.
with a bit of hacking vim can do most of that, and at least you get a working editor, not some half-assed notepad clone...
I actually like GEdit for doing small to medium things, with plugins it makes it pretty easy to get it to do what you want.
I have stopped using Zend Studio. I was perfectly satisfied with 5.0 which worked flawlessly under windows and linux. I was a lot less satisfied when it became a slow and buggy Eclipse plugin. And now that it has changed to a yearly renewable license I have stopped using it and switched to Eclipse + PDT
I recently switched from ZendStudio 5.0 to Netbeans and I'm not looking back either. It's faster, the code completion seems better, the code formatter is more customizable and handles indentation of unwrapped single line if statements, the svn support is excellent and I can finally have more than one project open at a time. 
I also have to throw in my support for NetBeans. I also have liked DreamWeaver in the past too, but it's expensive. However, I do sometimes find NetBeans to be a little slow and occasionally it just "goes away" POOF! My machine is no wimp either ... 8 processors, 16GB ram, RHEL 5. (I didn't spec the machine, it's provided by the employer, but I ain't complaining either) That said, It's faster and more stable than Eclipse + PDT was on the same box. I guess it's the Java penalty I'm paying.
I used Zend Studio up to (and including) Zend 5.5. I was never a big fan of eclipse (although I hadn't tried it for PHP at that point) and it was fairly cheap (well, not cheap, but certainly not what it is now). When Zend abandoned their entire product in favor of developing what amounts to a plugin for Eclipse, I was very skeptical about it. I tried it out (they offered me a free update to ZS6) but decided against it. When 7 came out I was planning on upgrading, since PHP 5.3 support is important for me and Zend was not going to be updating the 5.5 line with support (great timing on their part with a new release too, just in time to drop support and fuck over their old customers), but when I saw how much they were charging to rent the program for a year (with no option to buy) I decided getting ripped off wasn't on my todo list. Zend has made a big mistake in this one, I think. Most of the people who used ZS did so because they don't like eclipse, and they just blew that one out of the water. Since they dropped support updates for the old Zend Studio they've forced people into making a choice to either upgrade to something they're not going to like at more than twice the original cost (again, just to rent) or pick something open source. That, plus the fact that Zend is making an active choice in not supporting php5.3 in the older line or ZS (or open sourcing it so someone else can), is really going to hurt their reputation in the eyes of developers.
I've found Eclipse to be painful, so my experience is entirely limited to Zend Studio 5.x I like the debugger, and the straightforward setup of server connections, projects, etc. I hate the (un)reponsiveness, the display quirks, and the file management bugs. These, however, seem to be present in Eclipse, as well; hence my non-upgrade to Zend Studio for Eclipse. Previously I used vim, and for some things, I still do, but the debugger combined with the other normal IDE features make it fairly attractive. There is certainly a great deal to be desired, but I just haven't found anything I like better. (Not for lack of trying; I'm open to suggestion though. I've heard many people who love TextMate, but I've never really been able to put it through its paces.)
Not sure as to what program you were insulting here, but [Komodo](http://docs.activestate.com/komodo/5.1/vikeybind.html) and [GEdit](https://launchpad.net/vigedit) both have Vi key-binding support.
This topic just recently came up at my office, since we're due for a Zend license upgrade and one of their sales staff called us to peddle the benefits of ZendStudio 7. None of us make use of the Zend debug toolbar, and nearly every plugin we use is published freely for standard Eclipse. The only practical benefit I've noticed is its code handling: * Admirably keeps track of variables (often by parsing PHPdoc comments) to provide intelligent completion where possible. * Code formatting profiles are very configurable and extremely helpful for enforcing standards on a large team. * Great syntax awareness helps catch bugs and outright errors while still in the editor. I've also be playing with the free PHP Eclipse plugin (from the recent Galileo release) and it's clear that Zend does a better job of parsing PHP syntax in the editor. It's a notch below in all of the three bullet points above, but I'd be hard-pressed to say that Zend is worth $400/year as a result. I told my boss the same, and I think we'll be sticking with our outdated copies of ZendStudio 6.1 for a good while longer. After reading this thread, though, I have a growing desire to take NetBeans for a spin.
fyi, ASP tags will be removed in PHP6 [reference](http://www.ibm.com/developerworks/opensource/library/os-php-future/)
I personally use Aptana for all my PHP/Javascript needs - it is absolutely fantastic. I you haven't tried it yet it is well worth a go. It is completely free. http://aptana.com/php
Too bad. Thanks for the info anyway...
If you're using XDebug on Win32 [WinCacheGrind](http://sourceforge.net/projects/wincachegrind/) is awesome.
I just send HTTP/1.0 request so they reply is never chunked. :)
lol summery
I've been looking at a number of Firebug plugins this afternoon, and while I initially considered using [FirePHP](http://www.firephp.org), which sets custom HTTP response headers to pass logging info to Firebug, I soon came across [FireSymfony](http://www.firesymfony.org/). I gather that it works in much the same way, but it preserves all the functionality of Symfony's existing web debug toolbar. I anticipate this will make debugging of AJAX actions much easier, since the standard toolbar tends to interfere with JSON responses.
Then perhaps you should head on over to the python subreddit.
I've only been contracting for a year or two, but people like my work. I was told from the beginning to charge $40/hr, so I've stuck between 30-40 (and that includes mysql, xhtml/css, js, etc work)
Calculate you current hourly rate based on your salary and double it.
Charge more, my friend. For new clients start at $55. I am going to check back on you in a year, you should be at $65/hr by then.
and to collect his 5% consulting fee
$65 to $75 an hour is right about on par. To make sure I'm able to maintain that hourly rate, I typically start by handing my clients a range in price on their projects. (i.e. GUI Design + App Development + Testing = $2,600 to $7,200) You'll notice the latter figure is just under 3x the former, which I explain as *"to anticipate for tweaks / scope creep / excessive data entry / training / etc."* - One might assume this would scare clients off, but the 4/5 clients I meet &amp; contract with in a month typically appreciate the honesty. It's also an easy &amp; effective way of telling them up front *"Hey buddy, you can't tweak endlessly. Let's make decisions &amp; stick to them."* Prior to going about things this way, I sold myself *"by the pound,"* giving projects a firm bid and offering to do whatever the client needed. I didn't reel in nearly as many contracts, and more than a few times whittled my hourly cost down to less than $20/hour because of client tweaks.
That's a good idea. As a contractor you have to pay all the taxes on your income yourself, so that's about right. (But then there's the lack of benefits, too... ugh.)
I'm a senior-level PHP developer (about 8 year's experience). I typically charge in the range of $65 - $75 / hr. I DO NOT flat-rate bid jobs. I give estimates and make clear that's exactly what they are. I bill by the hour, so don't suck me into a lot of meetings. :) Invoices are submitted bi-weekely, and I typically expect a 30-day turn around for payment. For my current contract (I'm actually sub-contracting through an agency at the moment) I'm actually being paid a salary with benefits.
strtoupper($string); kthxbai
Roughly equivalent experience and I charge $75-100/hr USD depending on how busy I am and how much I want the job, but I also live in a rural area and I have to assume rates are higher in Toronto.
If you're new to contracting and the work is relatively basic (as in you don't have to think to hard) I'd pick a lower rate; say 1.5 times what you were getting paid as an employee. I'd invoice monthly and bill in 15 minutes intervals. Sounds to me like you're well liked in the job you are leaving and that you'll have a lot of flexibility of when you get to work. Keeping this relationship strong and being affordable is worth it (especially if you can make a higher per diem during the day and moonlight part time on this gig). Who knows what the future will bring, but one thing is for sure: it's always nice to have a job/contract you can fall back on should things go south. A word of advice: If you do start consulting and allow yourself to be pimped out by agencies, do not under any condition become an employee for said consulting company. edit: the rates people are saying are not unreasonable. With 10 years experience (assuming you kept learning during that time) I'd look at a $450-$800 per diem depending on geographic and the markets. 
Edit 2: You'll have to charge him GST if you're going to earn over 30k, which means you'll have to get incorporated or get a sole proprietorship (I have both). Become a sole proprietor first (a business of one), since you're taxes are simple--you can deduct everything someone who is incorporated can.
Whether the employer takes the taxes off your check or you get it all and have to give it to the government later, doesn't make any difference (actually you get to make interest on the tax dollars before you submit them). If you calculate your rate based on your current salary, base it on the pre-tax amount.
You get to sleep with the client when neither of you is in a relationship?
Stolen From: http://www.tizag.com/phpT/phpcookies.php
&gt; Cookies have been the most popular concept of internet. yeah, pretty much.
here you have: http://tympanus.net/codrops/2009/09/03/php-login-system-reloaded/
Great discovery... :-) I have given the link in blog as reference from tizag check it out
You submit everything from that crappy site. Everything is stolen as well. Just take 1 line of one of your articles and google it, for example. http://webnesbay.com/673/powerful-web-services-with-php-and-soap/ is http://www.builderau.com.au/program/php/print.htm?TYPE=story&amp;AT=339288552-339028448t-320002008c
Hello crath, I have already mentioned in my blog at the bottom of the page as source from builder.au. I dont know if you are new to internet please go bottom of the blog you can find the above link what you have specified
I'd say consider implementing Facebook connect long before OpenID, Facebook connect is starting to become far more mainstream, and Facebook did a good job with it.
The point is, your website is just copied content from other sites. Pointless.
Interesting point about you getting to keep it for interest for longer. Though you do need to do quarterly estimated tax payments of some sort, if you're making (or expecting to?) make above a certain amount as a contractor. My point though is that if you were getting $20 per hour as an employee, then hell-to-the-no should you take $20 per hour as a contractor.
This is something that I've been wanting to do for quite some time now. I may not seem like the best solution to a problem, but figure that you have a core object that stays pretty much the same and you need it to act differently for different situations. What got me interested in the idea is my JavaScript usage and seeing how easy and useful it is to prototype methods to existing objects. 
Eventually, the government will ask a contractor to make quarterly tax installments, but one can usually get away with yearly payments for a year or two. Even when one is forced to make quarterly payments, one still gets to keep the income/GST tax for a few months (whatever that's worth). It's worth noting that the government will ask a consultant to make quarterly payments after one files ones yearly tax return, so after writing them a lump-sum tax cheque, one gets another bill for 1/4 that amount a month or two later. This can hurt if one is not prepared. Your point is well made. There is absolutely no point assuming the risks in consulting if one gets paid the same as an employee. Depending on the gig, if I made $20 as an employee I'd be charging $35-$66 as a consultant.
I am a big fan of the Zend Coding guidelines: http://framework.zend.com/manual/en/coding-standard.html Zend Framework standardizes on a class naming convention whereby the names of the classes directly map to the directories in which they are stored, with slashes replaced by underscores. So, if you have a file: /mystore/cashregister/calculator.php The class would be: class MyStore\_CashRegister\_Calculator This makes autoloading extremely simple: function __autoload($className) $file = str_replace('_', '/', $className) . '.php'; $paths = explode(PATH_SEPARATOR, get_include_path()); foreach ($paths as $path) { if (is_readable($path . '/' . $file)) { include_once $file; return; } } } 
e Text Editor
lol @ 'cables, and shit'
None linkjacked: [Derivante : PHP Content Rating / Confidence](http://www.derivante.com/2009/09/01/php-content-rating-confidence/)
Sorry, but no. That is a horrible way to "write" code (I can hardly even call it that). The author has a lack of proper syntax (personal interjection): if ($value === true) { foreach($value['name'] as $name) { do_something($name); } } else { do_something_else(); } You really should include the {'s and }'s around ANY statement that normally requires them, it's horrible practice to not include them. Maintainers, debuggers, and other developers may not understand that only the line below gets executed they may think that the block under that statement is executed. Those are two *very* different things. Plus are you that lazy to write the code above?
If the ability to include or not include {'s and }'s is available, then where does it state that it is not *proper syntax*? If a developer of a specific language (maintainer, debugger, or other developer) does not know common knowledge programming techniques such as that above, then they shouldn't be programming in that specific language. if($value === true) { foreach($value["name"] AS $name) do_something($name); } else do_something_else(); Now, I can understand the confusion had there been a lack of *indentation*, but otherwise, there's nothing wrong with my example. (Nothing wrong with yours either, just sayin'.)
I've been taught to *always* include the braces, it just makes the entire coding system smoother. When you're rushing to a deadline the last thing you want is some minute detail to fail.
See, all my teachers have taught me the example I outlined above. Now, they've pointed out a couple reasons (yours being one of them) for *always* including the braces, but they expressed the importance of indentation for overall code readability, and indentation is probably a better visual indication of code blocks, than looking for the closing }. Because face it, you have to agree that even with }'s for one line blocks of code, without indentation, having them really doesn't make any difference.
Yes, it's a very small difference that is often overlooked but it can make a large difference. Also with the cost of storage/processing so cheap it doesn't bog a system down anymore to have the extra {'s. Yes, I do have to agree that the {'s don't matter a hell of a lot but it's just how I learned. (Personal preference/ignorance)
Just a note, reading your blog with my 1900px wide monitor is painful. A suggestion is, color syntaxing your php code in your blog entries.
Yea, I though wordpress.com had more plugin support than nothing. Ill be improving the overall quality over the next few weeks.
It's not improper, but I am going to have to agree with the parent, it's a lot easier to maintain when you include them. Same reason I use $GLOBALS instead of the global keyword, you know that variable being used is a global and you don't have to remember to add and remove global definitions. Sure it's more typing, but its a lot more maintainable.
How would you like to be a mod?
http://pastie.org/610597 I did something similar for my girlfriend a little while ago. She wanted to re-size a bunch of pictures and thumbnail them also so I wrote the above script for her. It overwrites the images however so be sure to copy the images you want the script to re-size/thumbnail to a folder and have the script go though this new folder of **copies**.
whats wrong with `error_reporting(E_ALL | E_STRICT)`?
I agree, although I hope in your case `$value` isn't boolean `true`, otherwise that `foreach` is going to throw an error at you :) Since the article is talking about conditionals and iteration in the template side of PHP, I think it'd make even more sense to use `if`/`endif` and `foreach`/`endforeach`. I gave up using braces when PHP is alongside HTML years ago and haven't looked back since. Consider: &lt;?php if (!empty($things)): ?&gt; &lt;ul&gt; &lt;?php foreach ($things as $thing): ?&gt; &lt;li&gt;&lt;?php echo $thing; ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; &lt;?php else: ?&gt; Nothing. &lt;?php endif; ?&gt; Yes, it's a lot more verbose and PHP-mythologists might cringe and hypothesize that opening/closing `&lt;?php ?&gt;` tags so many times is inefficient, but this prevents me from asking "wtf is this brace closing?" and it indents very nicely alongside HTML tags.
And that couldn't go in the OP for what reason? Don't we call this blogspam?
I always include the braces, except when i can fit the whole thing on one line. Then I think it is clear enough that there's no other block getting executed. if($value === true) { foreach($value["name"] AS $name) do_something($name); } else do_something_else(); }
Interesting idea, but I favor readability over conciseness. I also strongly believe PHP itself is the only template engine needed. 
tl;dr [strtoupper](http://php.net/strtoupper), [strtolower](http://php.net/strtolower), [ucfirst](http://php.net/ucfirst) and [ucwords](http://php.net/ucwords)
PHP itself does work best by itself for very small projects developed by a single person. In future articles I'll show how Tierra Templates' Django inspired template inheritance system makes working on larger projects a much nicer experience.
If you like vi/vim then try Netbeans with jvi plugin. Normally I edit in vim but when it comes to debugging I fire up NetBeans. jvi plugin has the best vim emulation I have seen so far. 
That's not recursion. That's just cyclic references. A points B, and something in B points to A.
I've recently been doing a great deal of work with Images in PHP. I've found that the Imagick library is awesome. I use it almost completely instead of GD (though my CAPTCHA code still uses GD)
Is this a joke? The spelling is so bad it's got to be... Why is this shit on reddit?
don't look now, but his span's are showing.. (fail first code block)
I'll have to try out the GD alternative, ImageMagick as emand suggested. Unfortunately ImageMagick is not available on many shared hosting websites. Keep in mind resizing and watermarking can be done in real-time/on demand also. It's much slower for visitors viewing the images, but the benefit is that the image size altered at anytime in the php code. 
I would.
I came here to say that. It could've fit in the OP...
I think the idea of maintenance being easier *with* {}'s is being confused with something else. I feel indentation is far more important than {}'s. I've ran into code far too many times that included {}'s but no indentation, and maintaining the code was harder than code without {}'s and proper indentation. I agree with you on the $GLOBALS instead of the global keyword.
Entire site is a fail. I see nothing at all.
There are a lot of PHP frameworks out there. It would be beneficial to potential users if they tried to highlight some focuses, strengths and features of their implementation. Some developers release code as open source since the effort to write it has already been exerted, however I'm talking more about those who take the time to write decent documentation and promote the project. Obviously there needs to be more substance than “writing less code” or “making programming fun again.” It would be great if they talked about the architectural patterns that were used throughout the code, supported databases, the ORM implementation, configuration methodology, security, etc. This could allow for evaluation without having to read through lots of documentation or even implementing a small site with it.
I am going to try out codeigniter... and if that sucks, maybe ill try this. I have a funny feeling CI isnt going to suck though
try kohana
Wish I understood how to use a framework like this to write apps. I have been using http://xataface.com/ which is pretty cool, but not exactly the same thing.
It's really not hard at all to start writing apps on a platform like this. Just read a couple of tutorials to get your head round it. edit: To elaborate a bit, approach it with having something in mind that you'd like to build, like a simple blog or a task manager app. Have a plan, as opposed to just dipping in and out every now and again fiddling with nonsense code. You'll learn more that way.
I just downloaded Kohana, I'm going to give it a try.
I second that. While looking into frameworks, I started with CodeIgniter and switched to Kohana a few weeks later. CodeIgniter seemed very suffocating to me but Kohana does not.
Indentation is definitely important as well and I would indent as well as use {}'s.
Ya, that comparison was just a dummy. I've never liked the "#endif" stuff, mostly it comes from my use with C++ and it's use before the main() function is called/used. I've just always like to include everything in "one" block. if ($cond === true) { $value = do_something(); switch($value) { case 12: do_something_else(false); break; case -12: do_something_else(true); break; default: do_something_else(null); break; } }
I tried that for a sample script (one time use) and I ended up with strings that wrapped over several lines. Sure it's good for simple things but for those I would use something like this. $value = rand(0,1); ($value == 0) ? do_something() : do_something_else(); To me doing that is a totally different syntax so it doesn't bother me.
I'm not sure if there is a premade package for it, but you can just download the source, build it, and then use checkinstall to create a package you can use.
Thanks. Do you know how this will influence my existing installation (php, apache etc)?
http://www.dotdeb.org/2009/07/03/php-5-3-0-final-preview-packages-available-for-debian-lenny/ Should work (works on karmic)
What are you coming form, should be smooth if your not doing anything too exotic.
I've been using symfony for years. This is the first PHP Framework that looks like it is even worth considering over it. Look at the documentation for the Views 5.3.3 shows that they have specific control and purpose over their implementation and 5.3.4 shows that they are good guys too. I will be testing a project with this, but I have high hopes after spending 10 minutes with their docs.
Agreed, I guess I don't see the advantage to this vs a more widely used framework such as Cake or Zend
5.3.3 shows that they don't subscribe to the general consensus that short tags could be dangerous and are not future-proof. Shit, why not suggest that the user use &lt;%= %&gt;? &lt;?php echo ?&gt; is just fine. If a server doesnt have short tags enabled, guess who is dealt the task of mass find/replace?
I am so glad you actually DIDNT READ THE WHOLE THING. This is the sad thing about being so opinionated. Read it. &gt;The short tags are much nicer but are sometimes avoided for portability. In environments where the short_open_tag feature has been disabled, they can't normally be used. &gt; &gt;**The framework includes a special feature that overcomes this limitation. Short tags can be used all the time, regardless of the state of short_open_tag in the PHP environment. Short tags are preferred and should always be used.** This is why I said "specific control and purpose over their implementation". I have not used shorttags for the same reasons you have specified but it seems as if what they say is true and even with short_open_tag disabled, in their framework you can use it. So it is non-standard but they have created the environment to support their stylistic choice - This points me to thinking they have done many other things purposefully and efficiently.
Yep, it takes a more OOP-compliant approach to some things, while still being fairly similar to its CodeIgniter roots on the surface. (And it takes advantage of PHP5 better, instead of wasting resources on PHP4 support.) My biggest complaint is that I had some issues with the included database class. It doesn't support nested queries (last I checked) and I couldn't perform a JOIN with the basic $db-&gt;query() method; I had to use the Query Builder methods instead.
You're right, I glossed over it. I'll take a look at the code to see how they address this. Sounds expensive though
I was giving Kohana a try a few days ago but I really couldn't get past the fact that it didn't come with a CRUD generator. It looks like there is at least one available ([crudscaffold](http://projects.nathanbentley.com/projects/show/crudscaffold))—have you used it or can you recommend any other Kohana tools? (Or suggest other reasons I might be inspired to give Kohana another look?)
A good rule of thumb is to take your salary per year you would make as an employee and divide by 1000 and make that your hourly rate. That takes care of overhead, marketing, unbilled time and vacations.
I haven't found a tutorial that teaches about frameworks like this. Most tutorials are for completely different type frameworks. If you have any suggestions I'd give em a try.
Try the [CakePHP blog tutorial](http://book.cakephp.org/view/219/Blog). It will give you a nice intro to that particular framework (which I use).
Well, it's about damn time. Someone *finally* created an MVC-based PHP application framework with rails-inspired active record ORM. Edit: /sarcasm
Yeah, I'm not really stoked on any of the database classes included with frameworks I've tried (CodeIgniter, Kohana, CakePHP). 
ummmm, cakePHP has been around for a few years now.
see edit
I haven't taken the time to write an article about an introduction to OO programming in PHP, however I think it would be good to point out some parts of the article that should be taken with a grain of salt. The article starts off with an incorrect statement that OO programming was first adapted by video game designers. The Wikipedia page about OO has some history if you are interested: http://en.wikipedia.org/wiki/Object-oriented_programming. The articles goes on to use confusing terminology saying that private members can't be accessed via instances (objects), however that isn't really the case. Private members can be accessed via instances as long as that is done in instance or static methods of the class. The examples of various Animal classes switch from a private $_color to a public one, whereas the final Animal class should really use a protected $_color to allow access in the child classes without allowing access outside of the classes. Stylistically the code examples aren't the best guides for the language. The article mixes PHP 4 var style public members with explicit PHP 5 public and private members. The method names don't use the common lowerCamelCase() convention, but instead user UpperCamelCase, which is normally reserved for classes. Class members are further indicated by a leading _, which was a PHP 4 convention for private or protected members before member visibility was available.
Try symfony with the Doctrine ORM. Symfony has a huge learning curve but Doctrine is one of the best ORM's I have used. The Mad_Model ORM with Maintainable looks suitable and comperable with ActiveRecord and definitely worth a try. IMHO.
With a good ORM you shouldn't have to do any manual JOINS. If you fully detail your model it should do auto-object lookups for any HasOne, HasMany, or MTM and eliminate any joins needed.
Most frameworks include layers of expensive things. I would like to know if it is unjustifiably expensive, though my initial guess (been too busy to download and check) is that they override system settings. The 5.3.4 Array information seems more expensive, or is that just a syntax I haven't seen before in PHP.
Cake is a far-less-than-elegant framework. PHP4 is holding them back for sure.
great. here i was planning on using this article to brush up on oop skills in php and thought this article was exactly what i had been waiting for. now i dont wanna use it because i feel it will teach me incorrect concepts and my oop practices in php will be based on flawed concepts.
wbond, thanks for taking the time to read my post. Some of the points you bring up are vary valid, however I want to note that this article was not intended to teach Standardization or Good Practice. I do encurage everyone to learn about these things once you have the concept of OOP Down. The 'UpperCamelCase' as you call it is called 'Pascal' case, and is a standard across multiple programming languages. I choose to use that standard over PHP's camel case standard because I prefer it better, especially when as a programmer I deal in multiple languages. Your statement about private members in itself is very confusing. The idea is to teach people about encapsulation, a VERY important part of OOP. I would encourage anyone to take wbond's comments with a grain of salt as well. Remember, this article is for beginners. There is a reason why I left Abstract and Static classes as well as Polymorphism out of this article. Same goes for the $_ naming convention. You will also see a lot of $f_ and $m_. Remember the important thing about standards is that everyone on your team adopts the same standards, whatever they may be. Again thank you for your constructive criticism, but I will have to politely disagree with your assessments. Just a note. The proper way of handling the $_color field in our Animal class would be to encapsulate it and make it protected. Thankfully this will be brought up when we talk about polymorphism. Should be some pretty good stuff. Thanks everyone who is taking the time to read this! Keep Learning!
i agree, memcahce is in the future of php.
LOL @ "Object Oriented Programming is a technique adapted first mainly by video game designers and then later picked up by traditional software designers" I guess there was a rich and vibrant video game industry in the 1970's, and we all know they were using high-level languages and not writing their stuff in assembler... (sarcasm)
The first OOP langagues were SIMULA I in 1962 and Simula 67 in 1967. In the 50's and early 60's two fine people by the names of Ole-Johan Dahl and Kristen Nygaard from Norway were researching a tool that provided descriptive information for people, but that also could be read by the computer by running it through a compiler. The result was OOP. OOP was picked up by many large organizations such as XEROX and Department of Defense. Personal computers at this time were still far far away. In the mid 70's Steve Wozniak a freind of Steve Jobs, founder of Apple, came out with a break-through for video game enthusiast. This was the first time a game was ran on a computer through software! Just like Ole-Johan Dahl and Kristen Nygaard from Norway in the 60's, game developers quickly needed a way to tie descriptive info for people and process code for computers by running it through a compiler generating machine code! OOP was their answer. in 1980's with the creation of c++ other software developers quickly joined them. Now that we all know the history of OOP lets concentrate on learning how to use it correctly and give some folks a chance who "don't" already know how, to learn it. P.S. Sarcasm is only funny when you have your facts right. Live, Learn, Share. 
Bookmarked just in case... 
if that's a deal breaker for you, then stick with a framework that includes it. from my understanding, scaffold is never intended for production use and populating data manually and building out forms for maintaining data as its intended to be isn't that difficult is it?
I've had 5.3 (built from source) running on Intrepid since the night it was released. It's just my dev machine so I blew away my previous PHP versions and it shouldn't effect Apache at all though there are some configuration caveats to be aware of like enabling mysqlnd but if you google around you'll see quite a few blogs cover them.
So this is a feature that I have been wanting in PHP ever since I learned C#. I decided the best way to have my request heard would be to submit it as a feature request to bugs.php.net. What do you guys think of it?
I think if you read the article, with the above points in mind you should be ok. Reading another article or two wouldn't hurt either, including the PHP.net documentation of OOP in PHP5.
I agree with most points, but the lower and upper camel case is more of a style choice for the programmer. PHP does not see any difference between THIS() and this() or ThIs(), so you can call methods of any class with whichever convention you prefer, and your code style will be uniform. I personally prefer the UpperCamelCase() convention, as it is the one used in C#, and I don't like to vary my conventions too much across languages. I also do not believe a distinction is needed between class names and class members, as they should most certainly never be confused in syntax.
Hi wshell, thanks for writing the article. Both wbond and yourself have good points. I think that what wbond was trying to point out is that you are teaching a beginner something that is non-standard. I think the appropriate thing to do (when writing the article) would be to explicitly state that you are not following the PHP standard, then give what the PHP standard is, and the reasons you are not following it. With that information added, I don't think anyone would have a problem with it. &gt; Remember the important thing about standards is that everyone on your team adopts the same standards, whatever they may be. This is true, but only to some degree. If the language uses a totally different coding convention then it does not make sense to go against it, it will only cause problems and messy code. For example, PHP names\_functions\_like\_this(), so NamingFunctionsLikeThis() would not make sense, and would make your code confusing. As far as coding conventions for private members or methods go, you never see the private parts of any classes but your own, so any coding convention is fine as long as you are consistent in your other classes. And as far as lowerCamelCase() or UpperCamelCase() goes, either one is also fine, because PHP will let you call any method either way. Therefore as long as you write every method call the same way, you are keeping one convention and there should be no confusion.
That is not the same thing at all, and if you read the feature request, you would realize that, because I specifically talk about it. What I am suggesting is a syntax to basically implement \_\_get and \_\_set on a per-property basis, instead of routing those calls through the same two magic functions for all properties. It is a totally different concept all together.
What I am suggesting is a syntax to basically implement \_\_call and \_\_get on a per-property basis, instead of routing those calls through the same two magic functions for all properties. It is a totally different concept all together. Please go back and read through the feature request, as it specifically talks about this.
I am not going to be able to up or downvote this. While I think your post was great, I do not like that you put it on your blog instead of making a self post. I just joined /r/php today though, and I will try to help get this subreddit moving. :)
That was kind of rude... While any seasoned PHP developer knows these methods by heart, it is valuable information for beginners who may instead try to use complicated jumbles of string functions and switch statements to get the same results.
Great article. This is one of the features I often miss when using other programming languages that don't support it.
"I also do not believe a distinction is needed between class names and class members, as they should most certainly never be confused in syntax." This is the best point I have heard yet. Thank you for your remarks. Your comment below about writing for beginners in a the language standard is a good point and will be considered for future posts. 
The point of my feature suggestion was not to make nicer syntax outside of the class, but rather inside of the class. My feature suggestion acknowledges that the same syntax can be achieved using \_\_get() and \_\_set(), but no where near the same syntax can be achieved internally in the class. Your example suffers from many faults, including separated get/set functions, absolutely no visibility restraints, possible false positives for get/set methods, the need to implement unneeded functions with unnecessary overhead (\_\_get and \_\_set), and I am sure the list goes on. Some of this could be implemented with either lots of extra code (slower) or extremely ugly hacking. It is just not an acceptable solution.
Up-voted for the sheer intelligence of the submitted feature text, and the replies from LieutenantClone.
Thanks. unfortunately this is sort of a production machine in the sense that I can't afford it not being functional. This seems to be a bit more involved and I'm using postgres not mysql which may add to potential problems. I would really like to switch to 5.3 as the new features are appealing but I'll probably wait.
Agreed, it's a fantastic idea and it would make a lot of things easier.
Thanks. I tried to put as much thought and detail into the feature request as possible, in the hopes it would help it to be taken seriously by the PHP team. I am really not sure how much the PHP developers base their decisions on suggestions from the community, but I figure it is at least worth a try.
Seems to be a good idea. Imagine if all properties were actual objects like some other languages, possibilities would be endless
From the moment I first saw C# I knew I wanted this feature. Thank you for submitting the report, and thank you again for submitting it so fluently.
this reminds me of the special [get/set](http://www.darronschall.com/weblog/2003/11/actionscript-2-why-set-calls-get.cfm) methods in AS2/3. in my opinion, i like the style of the AS version slightly better as it separates get and set logic into 2 distinct methods. i think this is a great idea though. 
also in ruby, you have: def hour; end # triggered by foo.hour def hour=; end # triggered by foo.hour = bar which is a great use of operator overloading. unfortunately we don't have this in PHP yet.
You could try discussing it with the devs on [php.internals](http://news.php.net/php.internals). Most of PHP's concepts are borrowed from other languages (which is a great thing imo) so there's plenty of precedence for this. You might find people want to add a "PHP spin" on it though. I think you really need to show use cases too. This would be *so* useful when making "Model" classes in most MVC frameworks (rather than making some __set/__get hacks to call `getName()`/`setName()`). A frther thing you could do (which you might be asked to do) is make an RFC on the [wiki](http://wiki.php.net). Look at other RFCs there for the usual structure. Don't be afraid to explore other syntactical ways of doing this (I like set/get{} but it doesn't seem very "PHP"). If you do make an RFC let me know and I'll write up an example of how this could be used in models (when compared to ZF's way of doing this). Good luck with this - it looks like a great addition. Edit: Oh and link to this thread, there's some good support here and it should help differ between __get and these per-property blocks.
I've always thought a more strongly typed PHP would be an interesting thing. This could be implemented at userland-level with classes like String and Int (I'd quite like to use an object approach to a functional one) or with an extension. However these things can already be done with a function. str_replace('foo', 'bar', $class-&gt;property); Something to explore though.
Hi, Thanks for all the information. One of the devs has responded to my feature request inviting me to create an RFC on the wiki, as you have, so that is what I am going to do next. I have never wrote an RFC before, but I have read many, so it shouldn't be a very steep learning curve. The developer that responded also mentioned that it was discussed at the last PDM in May ([notes here, #16](http://wiki.php.net/summits/pdmnotesmay09#php_6)). That page doesn't give much information besides an experimental syntax, but I will take it into consideration also. It is encouraging to know they have already brought it up though, so its not just coming out of left field.
Hi, With the C# version, the get/set are two separate methods, it is just that they are also grouped under a property declaration. This is a nice way to keep the object oriented syntax, because it is clear that the two methods are part of the property, where as in the ActionScript syntax, that is not quite as clear, or easy to see on a passing glance.
Make sure to install the jpeg libraries, and compile PHP with them as well. Otherwise GD will just take a shit when trying to do anything with jpegs. :-(
Ya I hate that this does not come installed in the package. It's so stupid.
I was seriously considering creating object based datatypes for PHP awhile back, but I decided against it. The main advantages are as follows: - Methods instead of functions $string-&gt;Replace(...);, etc - Type-hinting which only supports hinting object types, can be used to create strongly typed functions/methods - Easy and automatic translation between more advanced data-types can be created (making ToString() ToInt() ToBool() functions, etc) However there are several gigantic drawbacks to this: - All variables must be instantiated: $test = new String(); - Syntax for regular datatypes can no longer be used (cant do $string-&gt;Replace('test', ...);, but instead $string-&gt;Replace(new String('test'), ...); - People would be too tempted to use PHP as a strongly typed language, which is going against the grain. If they don't like dynamic typing, they need to learn a new language. - A significant amount of extra overhead to handle all the class instances.
Basically, the hard part is building the binaries with all dependencies and whatnot. You can do that part without worrying about breaking anything. Just download the sources and run `./configure` and `make`. Once it's compiled, you can try running the binary from the command line - You still don't need to replace the main installation at this point. If it works as it should, go on and install it on your system. It's just a matter of copying the binaries around and updated a couple of config files (httpd.conf). [This guide](http://www.brandonsavage.net/installing-php-5-3-on-ubuntu/) gives a pretty detailed walk-through.
http://www.php.net/manual/en/language.oop5.overloading.php
go 4 http://cakephp.org/
[cakephp](http://cakephp.org) been using this for a couple years now exclusively. from small sites to fucking huge sites, it is the shit. install it, mess around. if you like things simple and straightforward, then it's the framework for you.
&gt; framework recommendation that is idiot proof idiots are unpredictable. Sometimes asking "what framework should I use?" is similar to "what IDE should I learn?". this sort of thing is covered in stackoverflow quiet extensively. http://stackoverflow.com/search?q=php+framework Look at your code, I recently moved a site to drupal. I like drupal and heard so many good things about it; however, it didn't take too long before I realized it was an overkill. I went back to the drawing board and developed my own cute CMS/framework. I realize there are millions of them out there, but I got more pleasure implementing my own solution. HEll it probably has 1213 security holes in it, who cares, it's mine. The downfall to this, is that the cms "manager" is not as sophisticated to let's say something you get out of cakePHP, drupal, or zend. The other negative is that you don't have a team working 24/7 on fixing bugs for you, such as the zend community. I like cakePHP as well. Personally, I found it difficult to digest their model; however, the book cakePHP projects helped a lot. IF you really want to think outside the box, pick up django using python. Why the hell not. the bottom line is if you're looking to create your own cms/framework, then build upon zend framework since you're familiar with it already
i agree, i love cakePHP. I hated it at first, but man it grew on me, and I can't live without it now
I like [Kohana](http://www.kohanaphp.com). But you really should look at all options and decide on your own. Some other frameworks: CodeIgniter, Symfony, CakePHP.... and a lot more.
Give [Codeigniter](http://codeigniter.com/) a try and check out [these](http://net.tutsplus.com/?s=codeigniter) "from scratch" tutorials for more insight. 
I was always partial to Symfony and CakePHP.
[Kohana](http://www.kohanaphp.com/). It's a fork of CodeIgniter that uses PHP5 and PDO. It's designed to be lightweight with just enough features so that it is idiot proof. It is fairly intuitive to someone used to MVC. Since a new PHP MVC framework comes out every month these days, I think the only ones that will survive in the end will fall in two categories: - All the bells and whistles - Ones that are intuitive and lightweight, yet have just enough worthwhile features Kohana falls in that latter category. I mean, let's say I know Symfony, CakePHP, and Zend. And I have developers who know Kohana and Zend. And we join up with some Indian developers who know CakePHP. You need a framework that's intuitive that everyone can easily identify with and get going. That's where Kohana fills that spot. You can learn it in half a day and get started.
It really depends on what you need the framework to do. and If a total rewrite is worth it. zend isn't bad, neither is codeigniter and cake, I personally use my own framework and ultimately suggest you weight the options of learning a framework while you port code. or just to rewrite the code, making a framework for it. I like frameworks, but I like knowing all the paths of data, and the learning curve for all options is *e^2*.
Okay, I'm sure I'll get downmodded for this, but depending on what you're doing, you may be able to use drupal as a framework. I know this sounds insane to a lot of people, but for your cookie cutter websites, drupal makes a great framework. If you're doing web applications however, you'll probably want cakephp or symfony.
I'd go with symfony. There are few more configuration files than some smaller frameworks but the fact that it uses Propel as it's ORM tool more than makes up for it. It's also very modular, well organized, and a really neat thing is that when you make changes to the models, forms, etc you do it in your own subclasses not the abstract/super classes generated by symfony, so if you need to re-generate something 'cause of changes to the schema symfony will not overwrite your work. What I found seriously lacking in CakePHP is it's weak model layer, it takes way more time trying to do workarounds and fixes than implementing things using symfony. You end up using raw SQL (which is something that an ORM framework is supposed to prevent in the first place), also it's not a true ORM framework the data is stored in multidimensional arrays which gets really messy and leads to a lot more work down the line. If you compare the way things are done in CakePHP to Python's SQLAlchemy, SQLObject, Java's Hibernate or Torque, and PHP's Propel you really start to notice how messy those arrays are compared to using objects. Also the form validation happens in the model layer instead of being completely decoupled like it is in more robust frameworks like Java's Struts or symfony. CodeIgniter is a nice lightweight framework. Although it doesn't have a true ORM tool I like it a lot more than CakePHP. People have also successfully used propel with CI.
I'm not going to downvote you, but why, for the love of all that is good and holy do people think Drupal is a framework? It's not a framework! It's a content management system that happens to have a pretty good module API.
Not unless you live in india or the ukraine.
First off, thanks for not downmodding me just because you don't agree. Second, I think there are a lot of people who use drupal as they would a framework, not just a CMS, therefore they have the impression that drupal can be considered a framework. If you look at this wikipedia page on [web application framework](http://en.wikipedia.org/wiki/Web_application_framework#Features), drupal fits the definitions even though it was removed from the framework listing several months ago, and I agree with that decision. I used to use symfony exclusively, but have since switched to using drupal, not just as a CMS, but as a framework too. I wouldn't put it in the same category as symfony, zend or cakephp, but I still use it as a framework for most of my sites.
I hate cake, even with strawberries. Cake forces people to write *more* code. It also provides little structure. For PHP I prefer my company's custom framework. Nothing out there has the right balance of features and flexibility, although I think Symfony comes close.
As far as I can tell, rentacoder and scriptlancer are both entirely populated by coders who are willing to work for a buck an hour, and clients whose websites will break after six weeks. Screw 'em, I personally don't want a job where my primary leverage for a higher salary is "English is my first language".
&gt; CodeIgniter is a nice lightweight framework. Although it doesn't have a true ORM tool I like it a lot more than CakePHP. People have also successfully used propel with CI. CI's ORM does suck, but it's easy enough to [use Doctrine](http://codeigniter.com/wiki/Using_Doctrine_with_Code_Igniter/). CI with Doctrine is a lot better than Symfony or Cake.
Zend framework tends to be more of a general concept for a framework and you have to build a lot of your own tools, helpers, libraries to be useful. I tend to use [symfony](http://www.symfony-project.org/) currently but someone linked to the [maintainable framework](http://framework.maintainable.com/mvc/1_intro.php) in /r/php the other day and it looks like it could be a bit simpler and have great helpers. Basically find a good system with an ORM you can use. Cakephp gets a lot of votes from people that don't want a learning curve because all you have to do is copy files. Symfony is FAR more robust and CakePHP won't be able to reach those levels until they give up PHP4 support and go for a true object oriented system. Maintainable looks like a great middle ground but hasn't been around long enough to make a definitive statement on it besides "check it out"
cake is my fav. it's not perfect, but it's got a lot of pretty sweet features. in my comparisons it's better than symfony and zend and codeignitor.
I second Kohana. I just worked on a project where we used Kohana. It's a very nice Framework to work with, quick to learn. The docs are generally good, although they sometimes leave something to be desired. 
Living... as Richeh and Ickidwill point, not so much. But for instance I do a lot of wp plugins on scriptlance ands it pays for the beer im drinking right now. making ~$100=200 a month with 3-5 plugins. I can knock them out fairly quick. 
rentacoder and elance are like videogames that pay you money. Bid on the projects, you think you'll have fun doing and learn something from. I've done one or two projects one of the sites (non web devel) and it was a blast
only stumbled across codeigniter two days ago, after playing with cakephp. i have to say i like what i see, and my next app is going to use codeigniter.
So anyone know of a site like these but with more complex projects at higher budgets?
No. You probably want something like http://jobs.smashingmagazine.com/ or http://jobs.freelanceswitch.com/. Real freelance job postings, not $1/hour crap.
I third Kohana. I used it for a project recently, and it was a pleasant experience. My only complaint was a minor quirk with the database class, but it's nothing major.
try http://programmermeetdesigner.com/
I love CodeIgniter. It just makes sense to me, and allows the programmer a good amount of control over convention.
Awww... you forgot: http://www.reddit.com/r/jobs
It's very difficult to make more than $1000/month (because it's hard to win projects); expect an hourly rate of max $10/hour (including RAC fee) for projects that take more than 2 days. So if you live in a country where the rent is $200/month (and contrary to the popular opinion around here, this doesn't make you an idiot, a code monkey), RAC is acceptable. RAC is also ok if you are a student and you want to gain confidence about your skills. Ignore the $1/hour crap, these guys don't know what they are talking about - the lowest rate you can expect is around $5/hour - $200-$250/week.
Object overloading and operator overloading are two **VERY** different things.
Anyone who works for this low should be euthanised, they are ruining the job market (yey unions and socialism).
And now, a word from our sponsors... :-)
So your company's custom framework is the best php framework? better than cake or symfony?? If it's sooooo goood the company should sell it and make a profit. Ofcourse it's good for your crm project that's build on the framework of your company.
It's a bit clumsy having to put everything in one place, but the end result is the same. You can perfectly fine install `__get` and `__set` handlers, that delegates to `getPropertyName` and `setPropertyName`.
The documentation does lack in some areas. However I have found that the Code itself is a very good documentation (phpdoc and well written code makes it easy to understand). Also, the community is really helpful (forum+irc). :)
[Agavi](http://www.agavi.org). A strictly professional, pragmatic production framework that's completely devoid of hacks and ugliness. I can't look at [most] other frameworks seriously after it. Full disclosure: I'm an Agavi nazi and I wrote most of its documentation.
&gt; Cake forces people to write more code. It also provides little structure. Same here. So, [Agavi](http://www.agavi.org). Introduction [here](http://www.ibm.com/developerworks/views/xml/libraryview.jsp?search_by=Introduction+to+MVC+Programming+with+Agavi).
Step right up, step right up, step right up, Everyone's a winner, bargains galore That's right, you too can be the proud owner Of the quality goes in before the name goes on One-tenth of a dollar, one-tenth of a dollar, we got service after sales You need perfume? we got perfume, how 'bout an engagement ring? Something for the little lady, something for the little lady, Something for the little lady, hmm Three for a dollar We got a year-end clearance, we got a white sale And a smoke-damaged furniture, you can drive it away today Act now, act now, and receive as our gift, our gift to you They come in all colors, one size fits all No muss, no fuss, no spills, you're tired of kitchen drudgery Everything must go, going out of business, going out of business Going out of business sale Fifty percent off original retail price, skip the middle man Don't settle for less How do we do it? how do we do it? volume, volume, turn up the volume Now you've heard it advertised, don't hesitate Don't be caught with your drawers down, Don't be caught with your drawers down You can step right up, step right up That's right, it filets, it chops, it dices, slices, Never stops, lasts a lifetime, mows your lawn And it mows your lawn and it picks up the kids from school It gets rid of unwanted facial hair, it gets rid of embarrassing age spots, It delivers a pizza, and it lengthens, and it strengthens And it finds that slipper that's been at large under the chaise lounge for several weeks And it plays a mean Rhythm Master, It makes excuses for unwanted lipstick on your collar And it's only a dollar, step right up, it's only a dollar, step right up 'Cause it forges your signature If not completely satisfied, mail back unused portion of product For complete refund of price of purchase Step right up Please allow thirty days for delivery, don't be fooled by cheap imitations You can live in it, live in it, laugh in it, love in it Swim in it, sleep in it, Live in it, swim in it, laugh in it, love in it Removes embarrassing stains from contour sheets, that's right And it entertains visiting relatives, it turns a sandwich into a banquet Tired of being the life of the party? Change your shorts, change your life, change your life Change into a nine-year-old Hindu boy, get rid of your wife, And it walks your dog, and it doubles on sax Doubles on sax, you can jump back Jack, see you later alligator See you later alligator And it steals your car It gets rid of your gambling debts, it quits smoking It's a friend, and it's a companion, And it's the only product you will ever need Follow these easy assembly instructions it never needs ironing Well it takes weights off hips, bust, thighs, chin, midriff, Gives you dandruff, and it finds you a job, it is a job And it strips the phone company free take ten for five exchange, And it gives you denture breath And you know it's a friend, and it's a companion And it gets rid of your traveler's checks It's new, it's improved, it's old-fashioned Well it takes care of business, never needs winding, Never needs winding, never needs winding Gets rid of blackheads, the heartbreak of psoriasis, Christ, you don't know the meaning of heartbreak, buddy, C'mon, c'mon, c'mon, c'mon 'Cause it's effective, it's defective, it creates household odors, It disinfects, it sanitizes for your protection It gives you an erection, it wins the election Why put up with painful corns any longer? It's a redeemable coupon, no obligation, no salesman will visit your home We got a jackpot, jackpot, jackpot, prizes, prizes, prizes, all work guaranteed How do we do it, how do we do it, how do we do it, how do we do it We need your business, we're going out of business We'll give you the business Get on the business end of our going-out-of-business sale Receive our free brochure, free brochure Read the easy-to-follow assembly instructions, batteries not included Send before midnight tomorrow, terms available, Step right up, step right up, step right up You got it buddy: the large print giveth, and the small print taketh away Step right up, you can step right up, you can step right up C'mon step right up (Get away from me kid, you bother me...) Step right up, step right up, step right up, c'mon, c'mon, c'mon, c'mon, c'mon Step right up, you can step right up, c'mon and step right up, C'mon and step right up (Tom Waits, "Step Right Up")
The thing that I really like about CakePHP is the level of support. The documentation may not be the best, but if you are stuck on something, quickly log onto the IRC channel, ask your question and most of the time one of the core developers answers your question.
I've never had to write raw SQL in Cake before (And I have some very complex, tightly integrated apps). Also, I prefer Cakes use of arrays instead of objects. PHP has some powerfull array manipulation functions, and the Set object in Cake is incredible.
Upvoted! I've used Drupal as a "framework" a few times after having built a single user module. The learning curve was sort of steep, but once the first one is done, it's easy. Drupal provides all the authentication, authorization, templating, ... infrastructure. The hooks to your module are adequate for almost all conceivable uses; what isn't can be coerced. It's almost a no-brainer. 
Really? There's money to be made selling PHP frameworks? Some of the free ones are pretty good, so no one would pay. Ours isn't 10 times better than anything else out there. It's just a little better and it fits our development style. Plus we know it inside and out since we wrote it, so we're more productive.
I've used the [yii framework](http://www.yiiframework.com/) many times and quite like it. Recently I found the [maintainable framework](http://framework.maintainable.com/mvc/1_intro.php) that is modelled very closely to Ruby on Rails, so it looks promising. I especially like the use of PHP magic functions: http://framework.maintainable.com/mvc/3_model.php#c3.7.3
Sounds like you should concentrate on refactoring your codebase, rather than changing infrastructure.
You do not know what you are talking about. mkoga was talking about operator overloading, while you are talking about property overloading. They are most certainly not the same thing. I would like to see you use \_\_get and \_\_set to overload the +, -, *, /, ==, ===, !=, !==, &amp;, |, +=, etc operators.
Excuse me?
uhh... You're excused?
&gt;It also provides little structure. how so? it's a solid MVC foundation. what do you expect in the way of structure? i think a lot of things that n00bs want are left out of cake intentionally so it is more useful for many different types of applications. otherwise it would start to become "just another pre-baked php cms tool". well then i guess it's all about finding the right framework for you, and the type of work you are doing. we do a fuck load of CMS's and we have a solid core built on cake. at this point starting a new site is a breeze and getting a good head start is what it's all about. i agree with you. any novice in any framework will be writing a lot of duplicate code, that is why it is good to understand good OOP and MVC principles before you get into something like this.
How much does that usually translate to, per hour?
Can't believe you were downvoted for Tom Waits. Have a point, even if it's only because Tom is a legend.
trying to get http://www.reddit.com/r/webjobs started up..
Heh, thank you. Much appreciated. Philistines around here, y'know?
plugin may take 2-6 hours... charging $50-100 a plugin.. so around $20/hr maybe.
Very true, but for the most part I choose to use json_encode($data); when talking to javascript
Depending on the complexity of the function its often easier to just dump the single string into a new array and be done with it. if(!is_array($argument)) $argument = array($argument); Then you can leave the rest of the function alone, instead of writing two versions. You can also do it in reverse- if you originally wrote the function to handle strings but want to have it take in an array, you can use the call_user_func_array() function to do so without needing the loop. if(is_array($argument)) return call_user_func_array('function name', $argument); 
you probably mean `array_walk` and don't forget to use the magic variable `__FUNCTION__` &lt;?php function foo($bar) { if (is_array($bar)) { array_walk($bar, __FUNCTION__); return; } echo "-&gt; $bar", PHP_EOL; } foo("bar"); foo(array("bar", "baz", "car")); result in: -&gt; bar -&gt; bar -&gt; baz -&gt; car * edited because I forgot escapes
Both of your cases work with only 1 parameter that needs to be mixxed. if you have just one parameter, jon is right, arrray_walk should be faster than a foreach
given the nature of PHP, this seems like an entirely trivial problem. so youve written a function F that can take an object N or an array of objects N, and the function F attempts to solve the array case by calling F for each of the Ns in the array? i know that `is_array` and `foreach`, or even the mentioned `array_walk`, are life changing discoveries, but why is this news?
Yeah, it's just syntax. But, why not going with common standard syntax?
WTF are you fucking kidding me?
sites like this, and outsourcing in general, are the bane of any respectable craftsman
how did it go? im curious
I suspect you're giving away the blog post topic for next year :) (for mootymoots).
why are people downvoting this site? I just noticed there is another post on reddit about it, with 7 downvotes and only 3 or so upvotes.
yes
That site looks pretty sweet...
Could you tell me exactly what is your problem?
You somehow assume that everyone has $2-3000 to spare for a 5-pages site.
Bug #1: Product costs too much for it's use.
spot on! I rather use geany+tortoiseSVN :)
Zend Framework not Zend Studio. Bug #1: Framework Documentation is out of date and useless.
Yes! In fact, I got it up and running on Ubuntu 9.04. It was easy as pie, if you can follow simple directions: http://www.brandonsavage.net/installing-php-5-3-on-ubuntu/ 
IDK links dead for me now, but yea, was in /r/programming a few days ago i can imagine Rodney Dangerfield wearing a PHP hat saying "I Ain't Get No Respect'
Looks like [his demo doesn't use PHP/MySQL](http://demos.reynoldsftw.com/php-xml-jquery-ajax/thejs.js): &gt; /* change the $.get to "thephp.php" when that is setup */ &gt; $.get("thexml.xml", function(theXML){ I thought it was pretty quick to load...
You should write about it. Will help your own company to understand it better and also teach other folks.
I've been using squirrelmail for 8 years. Turned my 11 and 7 year olds loose on it about a year ago. Both of them figured it out with no problem. My wife is even using it for some things, though she stills does much of her emails through Thunderbird on her desktop, or, more recently, her crackberry.
If I *absolutely had* to use a PHP webmail app, Roundcube wins hands-down. Otherwise, I'm quite happy getting all of my mail through G-Mail, and have turned many of my website clients onto it rather than setting them up with a PHP webmail app. Simply enough, G-Mail's combination of features (themes, filters, labels, POP3/IMAP checking &amp; accessibility, SPAM filtering, etc) is just plain ol' tough to beat. 
I also use squirrel mail and have to say that I am not really a big fan of it. It just seems like in order to do certain things you have to do it really backwards.
Squirrelmail is great when you use it with some of the plug-ins and skins nutsmail.com offers.
My vote also goes towards Roundcube, mainly due to the extra polish. You don't have to put a lot of work reskinning it to make it look professional. Phillip.
While I use gmail for my own business and personal needs. Too many clients threw a fit over the semi-frequent downtime. I have some very reliable mail and web hosting, it's never gone down (knock on wood) so a webmail app is preferred.
I like Horde... it's what I'm used to and it just works.
Mail Bee Lite is ASP.Net. Not PHP. EDIT: OK, so there is a PHP version too.
&gt; nutsmail.com I LOL'd ^^ Will take a look at it no less - I have Squirrelmail as a backup (and PINE as a worst-case-scenario backup) and definitely wouldn't mind expanding it's functionality a bit.
Uh... why use 5.2.x when you can go to 5.3 ?
Look at the side bar they have both php and asp. 
Oh. My mistake.
Safer to upgrade from 5.2.x to 5.2.11 than to 5.3. People should eventually go 5.3, probably, but there's no real rush.
[Horde](http://www.horde.org), [Squirrel](http://squirrelmail.org) and [RoundCube](http://roundcube.net) seem to be the most popular for varying reasons and you should definitely figure out for yourself why you personally hate each and every one of them (like I did) but in the long-run I find RoundCube to be the least aggravating once you've set it up to your liking.
This got moved. [LINK](http://www.phparch.com/main/news/view/8/GOTO_in_PHP_5_3__is_it_Really_That_Evil_)
well after lots of roughing things together, and an obsession with csv and arrays as some form of rudimentary database, codeigniter helped me migrate to databases (active record rocks).
You can try http://www.odesk.com/ . I particularly like the Odesk setup from both a buyer and a seller's perspective. They have hourly and fixed rate jobs. You can have resumes, do tests (I know their TCP/IP one wasn't easy). The worker installers an odesk client (cross platform) on their desktop. This takes the occasional screenshot and measures keystrokes and those are uploaded to a panel for the buyer to view. The worker can pause it and those times aren't recorded. For hourly jobs, the payment is made every Thursday directly debited from the buyers credit card. Another is http://www.elance.com/ . Seems to be things other than development. Writers / Engineers / Architects etc.
From [Section 11.2](http://www.tuxradar.com/practicalphp/11/2/0): &gt; Images are special in PHP in that they are one of the few resources that are not automatically cleaned up when your script ends &gt; You must never forget to call imagedestroy() otherwise your web server will slowly chew up more and more system resources until your server all but locks up. [citation needed]
&gt; &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt; ... &gt; header('Content-Type: application/xml; charset=ISO-8859-1'); hmm ...
I'm not advocating this book - I haven't read it - but there are over 4k functions in PHP. For someone new I can definitely see the advantage of introducing a user on what to use and inform them on what is available - rather than just poking blindly through the documentation. PHP has so many different ways of accomplishing the same goal (just making a database connection for instance - mysql, mysqli, PDO, etc) that it helps to read from a professional the pros and cons that would not be immediately obvious just from the documentation.
The article is using flat geometry. Spherical geometry is somewhat more complex. The flat geometry will have large errors as distance increases and as you approach the poles.
What's wrong with alternatives? Additionally, for me at least, I have been reading this through Opera Mini on my S60 phone. Php.net is much harder to read on the same phone. Just because the Python tutorials exists, does it make www.diveintopython.com obsolete? This is pretty much the same.
He may have gained his information from the comments in the link below, which explains the issue a bit more thoroughly. http://us2.php.net/manual/en/function.imagedestroy.php Are you doing a Phd in PHP or something? Everything needs a citation to prove itself?
It just stroke me as odd that only a particular kind of resource would leak so badly, and I was unable to foresee any particular reason for that. Those comments, at the least the way I read them, are applicable to every kind of resource. Maybe it's because only images can (easily) grow so big in memory that it is an issue. Still, asserting that they are not cleaned up on script termination would be an issue so critical that I couldn't believe it existed. "Got an out-of-memory error while processing an image? now you need to reboot the whole machine." And this is an issue so easy to test... Just create a multi-megabyte image and abort the script. Call the script lots of times and watch memory usage. In fact, I did just that and nothing out of ordinary happened. Maybe this was true on some old php version.
&gt; Are you doing a Phd in PHP or something? Everything needs a citation to prove itself? What the heck does that have to do with anything? If the text makes a controversial claim, I think it's fair to ask for clarification. If this *was* true (Which I'm pretty sure it isn't), it would have big implications.
The oddness for me was that I posted something I thought may be beneficial for users and the only 2 comments were a) What's wrong with php.net and b) [citation needed] and yet the article got a number of upvotes. I guess I looked at it from the perspective that the only comments were that the glass was half-empty. I agree with your comment regarding big implications if it pulled a server down. I run a number of shared servers and I know specifically a number of clients are doing large image manipulation with php and GD library and I have never had an issue, so it's probably bullshit but I have seen worse mistakes in printed books that cost money.
WOW!! Bookmarked!
not a lot of documentation as of yet, but there is a decent tutorial for porting kohana 2.3 code to the new framework [here](http://sam.clark.name/) one thing you might notice is that kohana 3.0 is [BSD licenced](http://dev.kohanaphp.com/projects/kohana3). w00t!
&gt;Kohana v3.x. Kohana3 is a ground up rewrite of the Kohana2 framework. Being under heavy development, it is by no means yet ready for production environments. Kohana3 has entered the Release Candidate development cycle. Currently it is under RC1 status and you can download it from here This major rewrite will require a lot of code changes from devs to get used to it, and seems to be in kind of a larval stage that could yet again change. Bummer, actually, because I like Kohana. I think when the bleeding stops, responses come back, and Kohana 3.1 comes out, hopefully we'll see some stability?
the dev-kids for kohana have been trying to distance themselves from [codeigniter](http://codeigniter.com/). i hated the codeigniter [pseudo BSD licencing](http://www.codeignitor.com/user_guide/license.html) and thus couldn't use CI ( or by association kohana ) for anything but a hobby-type web site. i didn't find the declaration that kohana 3 is in RC1 status, plz post link?
For the meantime there will be 2.4, which requires some rewrites but not as many as 3.x. However it is very unclear whether there will be any updates to the 2.x branch. Including security fixes. As much as I love Kohana, this whole 2.4 vs 3 thing really sucks.
your absolutely right. kohana has totally fell into the open source in-fighting thing that a lot of projects fall prey to. the reason i offer this link is that it is licenced all sane like, and major code revision should (please?) be less drastic from now on.
One of the things I don't understand about Kohana 2.x and 3.x is why we have to create Controller classes. You know, where we do "Class X extends Controller". I mean, why aren't the methods on the Controller class static, and we just call them with a class "Con"? And in that way all I need to do for a page controller is create the folder and file structure, and just start typing code, calling my Model, View, and Controller classes as static classes. Or even if you don't like static classes for some reason, just call them as global objects $Model, $View, and $Con, brought in by a simple bootstrap file. I mean, in MVC they want to make you think you have added efficiencies, but they they add in a step where I have to create a controller subclass and fill it with controller methods, when I could have just eliminated that step entirely.
EDIT: i misread your reply, and so the below rant is rendered meaningless... it remains only for the redditors that hate me for deleting content: if you find yourself making only a bunch of static class methods, i'd suggest rolling your own procedural framework... a lot of PHP developers forget that PHP is a finite-state environment, and all those nifty/complex objects are wiped from the server every time the page is rendered. MVC does not mean that you *have* to use OOP methodology, its just an organizational pattern. if the framework you are building turns into all static class methods, then i say write some well designed procedural code. don't be afraid to throw away the object overhead and cook with gas. i'm still trying to make myself think that kohana 3 is the tits, ditto with [ZF 1.9.3](http://framework.zend.com/), (pause, while i throw up in my mouth a li'l) [maintainable framework](http://framework.maintainable.com/mvc/1_intro.php) [yii](http://www.yiiframework.com/) etc. the fact is, we as developers need to crawl through the code of any framework we try and use, and if its found lacking: roll your own. rinse. repeat. 
You are right! We PHP developers do tend to forget that objects were created back when they would persist in memory. We also had object pools where recently released objects would be reused again without reinstantiation. Too bad we don't get that with PHP, eh? Well, the problem is that it's really about teamwork and having a set of something (classes or procedures) that lets us all sing from the same page. Unfortunately that isn't happening because we're seeing a new PHP framework arrive like every month, and the existing ones are getting rewrites every 2 years into completely different things. It would be interesting to see an MVC framework made up of nothing but functions and no objects. And you are right. I'm writing a framework, and so far I have been doing fine with static classes for the MVC handlers. So yeah, the question does beg itself -- why not switch from `::` to `_`? Case in point: `Model::loadModel()` becomes `Model_loadModel()`. However, then there is also the thought that eventually the Zend core team will find ways to make the interpreter start to cache released objects for faster reuse, or hold an object in shared memory, or hold an object in shared memory across multiple web farm servers. When that happens, boy, OOP will make sense in PHP. But I won't hold my breath.
you are right as well! OOP is great for multiple developers and for unit testing, caching, scaling, etc... but these concepts tend to turn the language into a verbose cluster-fsck of java like code. one of the things that made me stick with PHP besides its obvious flaws (inconsistant naming conventions, wierd type casting code smells, etc ( you know this list ) ) is that it is a *templating* language designed to get a web page designed and deployed with a quickness. if php is gonna turn into java, i'll just switch to coding my frameworks in python. 
If you use nginx, doing it the way you did it with the images shouldn't be a big problem. (since php will send it to nginx and then is done. it does not wait for nginx to send it to the client.) However if you don't use nginx, I have no idea right now. Never thought about it. But I will now and edit if I find one.
i've had this problem, trying to make a 80MB csv file dynamically render for an authenticated client and having the server lock up for a few minutes. probing questions: * are you confy with severely obfuscated file names? * what are the filetypes you are trying to publish? * do you have root? (to possibly make a script to fiddle with .htaccess in a temp directory, etc) * what method are you using to authenticate you users? * is it cool that the file be downloaded only once (then deleted) or does it need to be available to download again? EDITED for bullet-point goodness 
Dos: * lighttpd's `mod-trigger-b4-dl` * `X-Sendfile` in lighttpd or Apache 2 * If above are not an option, create symlink to file (with impossible to guess dir/filename) and redirect to it. `$dir = md5($filename.$key); mkdir($dir); symlink($dir.'/'.$file, '../hidden/'.$file);` Basically make sure that the web server sends the file, because PHP obliterates resuming, caching and wastes a lot of resources for just sending a file. Don'ts: * Do _not_ copy&amp;paste dumb collection of 25 cargo cult HTTP headers followed by `readfile()`, which are all over the comments on php.net. * Do _not_ use `Content-Disposition: …; filename=""`. Use `mod_rewrite` or `index.php/fake_file.xxx` URLs instead. * Do _not_ use cookies for authentication of the final download. Users may want to use 3rd party download managers or other programs with the file. Make sure authentication is in the URL. * If you have problems with IE not saving file or Acrofuckingbat plugin screwing up PDFs, _do not_ serve the same garbage workarounds to all browsers. 
cargo cult?
* I'm okay with obfuscated filenames, that's sort of the first thing that popped into my head and then having rewrite rules to have nicer links lead to them. * The file types will be various file types to to with web development like psds, fonts, archives. * It's a shared server, but I can created and edit files including .htaccess files. * I am using regular username and password post with cookie for authentication. * The files should always be available once logged in.
Thank you very much! The following is exactly what I needed! $file = "test.txt"; header("X-Sendfile: " . $file); header("Content-Type: application/octet-stream"); header("Content-Disposition: inline; filename=" . $file); Since you said not to use cookies for authentication in the case of download managers, I will probably just store the IP of the user once logged in and check it against that.
Thanks
Thanks
&gt; Since you said not to use cookies for authentication in the case of download managers, I will probably just store the IP of the user once logged in and check it against that. Or use a standard http authentication scheme, such as basic or digest.
It's actually invalid, and results in inconsistent behavior between browsers.
Does your server have mod_auth_mysql or something similar installed? http_auth that you can edit usernames/passwords for? Better to use existing solutions than build your own... http_auth and mysql-backed http_auth solutions like mod_auth_mysql do not use cookies for authentication.
So long as the script providing the download does **not** using any kind of output buffering, then the size of the file will not matter. You may need to be put the download script into a folder of its own, with a htaccess file providing options to turn off any gz compression and any other wrapper that may add buffering. I'm assuming you are using php here.
&gt; (with impossible to guess dir/filename) You mean: &gt; (with a temporary throw-away dir/filename)
With authentication in the URL, is there not a good chance that such URLs will be posted somewhere, giving access to people who should not be able to see the file?
To reiterate this, putting a proper filename on the end of the URL means the user can right-click-&gt;save as and will get a properly-named file. It's what I do [on this page](http://www.biffaward.org/downloads) and similarly for the pseudo-streaming of [the videos](http://www.biffaward.org/ccasestudies).
How would you pass authentication, such as basic or digest, through the URL, especially considering most browsers no longer support username:password in their address bar (for security reasons)?
You might be able to mess with htaccess and php and see if you can get them to jiv together. [http://koivi.com/php-http-auth/](http://koivi.com/php-http-auth/) Not sure if that will work like you want it to, but you can check that out.
Ah yeah should of been the "attached" type.
The site already has an auth system setup for other functionality and I would prefer if they didn't have to enter their credentials twice.
This is one of the things that shits me about web frameworks in general. Even the Python ones do it, which just leads to confusion about object lifetimes and again leaves me wondering why I'm grouping these things together and why I'm not just using a module. It feels like Java.
You don't pas it in the url, but in a header. Most http clients (download managers too, I assume) know how to handle a www-authentication. The serer sends a 401 response, with a `WWW-Authenticate` header. The client then sends a new request, with the corresponding `Authorization` header.
No reason why you can't have two systems, and let one fall back to the other. Eg. you irst check if the user is logged in via you existing (I assume, session-based) system. If not, you send a 401 and require authentication via basic or digest. Thus, if the user is already logged in, there will be no login-prompt, but if they aren't, the browser will pop a prompt.
I'm surprised by the lack of good responses - I thought in the past maybe I was missing some great technique but perhaps there isn't one.
I'd love to see a code snippet that does it right, considering everywhere I've seen online seems to break at least one of the above rules I tend to learn best by example (yeah, bad coding practice, i know. but i figure if i learn by doing i won't just be sitting staring blankly at a book)
could you paste a snippet so we can get a general idea? that would be REALLY REALLY appreciated =)
What's wrong with CodeIgnter's license? All you have to do is include license.txt with your software.
i love short tags, but i come from a little known mindset that php is a *templating language*. as someone who has had to disable short tags for a server that didn't support it, is took 2 search/replace queries and 3 minutes of my time... :p
validatesNumericalityOf() ...really? is_numeric() needed a wrapper complete with horrid grammar? (nit picking, overall this framework seems pretty svelt)
there was a reason i hated agavi, but i can't remember it... maybe it was all the xml config files? i'll re-read the specs and get back to you.
how many times have any of us switched databases? ( granted, it does happen every once in a while ) why is writing raw sql bad? its hella quick, easily securable, and there just might be a php universe where absolutely everything on yer server doesn't have to be an object.
they're even better with aptana as it automatically creates classes, completes codes, etc when you make these first
I take the counter view: **PHP Interfaces Suck** and here's why... Unlike Java, where interfaces are resolved as compile time, PHP has to resolve them at _runtime_ repeat **runtime**! From the overhead involved with fetching and parsing every script on each request ( OK - partly mitigated by an opcode cache ), to overhead involved in working out whether class X, which all it's 10 methods of numerous arguments, actually implements interface Y correctly, PHP is doing it on _every HTTP request_... No problem for a static language where 99% can be resolved by the compiler at build time but for PHP, this doesn't just suck, it's stupid. If interfaces actually did something useful at runtime, then there might be a case for them. Something more like Objective C's categories for example, which could equally fulfill the author's real desire; &gt; As a developer, I’ve often wished there was a way to know that an object – any object – had implemented certain methods. ...and it would also solve the problem for those struggling to do [AOP in PHP](http://www.slideshare.net/sebastian_bergmann/the-state-of-aop-for-php) with all kinds of dodgy hacks. But in their current form, PHP interfaces could only appeal to someone developing an IDE for PHP.... _coughZendcough_ ... 
I believe if you're using the PHP daemon in a FastCGI configuration, then the opcode caching warms up on the first run and stays cached until the daemon is restarted.
An opcode cache is going to help reduce the parse overhead but you've still got all the runtime type checking to do, plus more opcodes means more work in itself.
Wonderful, thanks for contributing your time and efforts to the world. I only have one question: where is it? Providing a hyperlink to it would be useful and informative if not expected.
Why another framework? Also.. did you consider adding a link?
mainly because other frameworks did not cut it for me! I hate generated code, mixing php and html, hard to use models... etc, a lot
sorry, I think I have found a bug in reddit
No, that's not a bug. You can only add text to self posts.
I would like to see a description of the framework. Some overview that doesnt require me to access code.google.com on a blog would be nice.
My designers are going to love this... &gt;$p = new Node("&lt;p&gt;&lt;a href='#'&gt;&lt;i&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;"); 
all right, I should write a tutorial, a blog in 20 minutes or something like that... brb
Because you started typing a text post. you cant have text and a url... Also, whats up with this. Looking over the code briefly I see a lot of redundancy as it is. Memcache, Json... your just redoing stuff php already does for you.
that's just to demonstrate class Node, I did my best discouraging mixing php and html
Memcache server is not always available, my implement is going to have multi backends, for moment only memcache server is supported, file system based one (Store class), sqlite and mysql as backends is planned json, class is a little different than native php one
Since you GPL'd the framework, do you now have to open source all your other "serious" projects created on the framework or are you violating your own license?
As the copyright holder he doesn't license the software, he owns all rights to it. Thus he can do whatever he wants.
sorry got tired, so far http://docs.google.com/View?id=dcbb3k7p_5d8kn8hf3
im just saying, why reinvent the wheel, axle, and car
gleapsite is correct, another thing, GPL apply only when you redistribute the code, if you are developing a web application/site, deploying your application only to your servers doesn't violate GPL
Close enough, thx.
I think it's good to make your own framework if you have time, you can learn a lot from the experience and frustration. Good on you!
First, congratulations. A great way to figure out what's important in a framework is to make one yourself. A couple technical suggestions: 1. Don't configure `mysql_connect` anywhere in your script. [I did a long writeup on why](http://people.internetconnection.net/2008/01/a-plea-to-php-developers/), but the short version is that `mysql_connect()` is almost certainly correct, and as soon as someone needs some special configuration, your script needs to support it too. 2. Is there a good reason someone would want two Injeen subclasses in the same script? It seems like the constructor does the url-handling, but if I'm wrong ignore this: Don't do that. Just let the user do a couple defines, and then include the Injeen.php instead of doing it this way. I think I'm mostly interested in knowing more about Model; how does it handle mutations to the schema? Does it look up the schema for each request? Or does it cache it somewhere? (I wish I had time to look at the source closely right now)
I agree, lots of people will criticize, citing the "reinvent the wheel" phrase, but these are the same people that will tell you "if you don't like it, make your own". If you have the time, go for it, its a great learning experience, and it helps you understand why a framework you don't like is the way it is.
Wow ... at first I thought it was a fun post mocking all these frameworks reinventing the wheel, especially when i read the description on google code. Then I downloaded it and to my surprise came real code. Amazing.
Reinvent the wheel is a good thing. It's how we evolve. As long as you add something new to the mix, it wasn't a lost effort.
hey, thank you 1 - thanks for mysql_connect tips, pretty logic 2 - one of things I hate most about php, is namespace! why they did wait so long for this basic language feature Models, I did it that way because I hate generated code, it indeed look at schema but only to know what the table key is, which in most cases is "id", if you configure index.php correctly, it will not need to look at schema at all
Not even the table schema? Does it just `SELECT * FROM ...` to fill out the column names, and put all of them in the update? I'd recommend against this, because errors get triggered sometimes far away from the line that caused them. One solution: cache the scheme once it is known, and assume it won't change for the rest of the session. Then, if a schema-violation occurs at update-time, advise the user to enable a flag that loads all the schemas at startup so that better errors can be generated. (If I misunderstand, I'm sorry about that. I'll try and look closely at it in a few days...)
it won't do anything you did not program it to do, for database-driver application, as developer you should have good overview on schema, example... $person = new DBPerson(); $person-&gt;username = "geocar"; $person-&gt;save(); generated SQL would be INSERT INTO persons (username) VALUES (`geocar`) no pre SELECT or anything, if you don't have username column... well, shit happens, the generated SQLs and errors is always logged (and printed on console), so you can get idea what going on between framework and database
Right, but the error will be on the `-&gt;save()` line, instead of on the `$person-&gt;username` line; for example, let's say someone *accidentally* wrote: $person = new DBPerson(); $person-&gt;usernaem = "geocar"; ... more stuff ... $person-&gt;save(); The error will be generated on `$person-&gt;save()` right? And it'll complain about an SQL error. What I was suggesting, was using getters/setters so that you *could* detect the error at `$person-&gt;usernaem =` and indicate "there is no column ``usernaem''" Obviously, there's a performance hit with checking at that point, so you could use a cache, and simply pre-fill it if a debugging flag is set.
it make sense to have it on development, gonna look into this
I'm sure you're a nice guy, but you don't speak English well enough to have a blog. Your verbs don't agree, you use colons for no apparent reason, and your blog is amateurish and poorly-written. Almost every line is wrong, but these statements are particularly egregious: * the most old technique * It is a good practice to making the checkout in a auxiliary folder * being them on an shared or virtualized server * this is a very different workflow from Java one * going live is a delicate procedure but is the key for show the world your beautiful product A good blog can establish you as an expert in your field. A bad blog has the opposite effect. You would be better off shutting this blog down. It is one of the worst ones I have ever seen.
Did you pull these out of that book? Is that legal?
[Phing](http://phing.info/trac/) is the answer!
Well then nice work :)
cuz its all proprietary... &amp; rightly so, as derek allard &amp; crew keep *codeIgnter's license* tightly coupled with [expression engine](http://expressionengine.com/).
i dig ( ugh, saying that here is like sporting a toothbrush moustache @ a barmitzvah ) thoughts of my species in "traditional tribal societies". it makes me grin. thanks for the 5¢ word :).
so, i'll infer you are sending all requests ( through mod-rewrite or the like ) to a script, that authenticates, writes your response headers, then spits out a file stored below web root? defining file types and sizes can quickly become a bugaboo when writing headers in php. if you can make the above code work to fix yer problem. [won't you tell me how](http://www.youtube.com/watch?v=A58ecFDFPvQ#t=2m25s) 
I have a php file "file.php" where I would do "file.php?name=filename.ext" That php file would validate the name and user and use the X-Sendfile header to make it act the same as if that url pointed to the actual file. I chose to use content-disposition instead of rewrite rules because all major browsers support that header, and it's unlikely the people it's aimed at would be using something else. If the situation arises, I could always add it later, it's just not a priority for me at this time.
What does Expression Engine have to do with it? There is no mention about it in the license. Here's the main snippet from license - "You are permitted to use, copy, modify, and distribute the Software and its documentation, with or without modification, for any purpose". It looks like your only problem with this project is that it's created by company and not community, but I've seen open source community projects with much worse licenses. 
That's the busiest webpage I've seen in a while. 4 Flash ads, 6+ screens worth of ads/links/junk, 2 job ad sections, 7 'related article' or similar sections... and 4 paragraphs of content.
How often is semi-frequent for you?
&gt; and 4 paragraphs of totally useless content that every PHP developer knows. Sorry, I had to.
There's another snippet plug-in that seems a little easier to deal with on configuring. It's called snipmate.
Red Hat Certified Security Specialist (RHCSS) is a security certification that proves advanced skills in using Red Hat Enterprise Linux, SELinux, and Red Hat Directory Server to meet the security requirements of today's enterprise environment. join GRRAS institute for Red Hat Certified Security Specialist (RHCSS) and Red Hat Certified Engineer (RHCE). * GRRAS is the only institute in jaipur(India) which has first network and security specialists. * It’s an admiration to be a part of an institute which has best Linux professionals. * All the GRRAS faculties are technocrats and have much experience of Linux teaching. * GRRAS provides doubt solving sessions which tend to effective training. * We became the renowned leader and did set the benchmark for the IT market in training of Linux since the very beginning of our foundation. * We empower our Linux trainees with unique core competencies for exploiting the untouched jobs in Linux field. Administering Linux 2.6.x (particularly Red Hat). Installation, initial configuration, using the bash command shell, managing files, managing software, and granting rights to users. DNS, FTP, Apache, send mail, Samba, and other services are covered with live training and full dedication. Advantage of the COURSE The Linux Networking &amp; System Administration course provides knowledge and skills for Linux- and/or UNIX- systems administrators who want to build proficiency at configuring common network services and security administration using Linux. This course is updated for building skills on Linux Administration. you can contact for Red Hat Certified Security Specialist (RHCSS) and Red Hat Certified Engineer (RHCE) batches. contact detail-- 219, Himmat Nagar,Behind Kiran Sweets, Gopalpura Turn, Tonk Road, Jaipur(Raj.) Tel: +91-141-3136868, +91- 9887789124, +91-9352767438 Email: info@grras.com website:http://www.grras.com
I think you have to be a bit more specific. What is the 'badge'? Sounds like a composite image. Or is it something else...?
look into [imagemagick](http://www.imagemagick.org/script/api.php#php) It's one of the most amazing things i've ever used with php to handle dynamic images. I've done things like what you're talking about, and made ID cards, dynamic certificates, etc.
Reading an article bashing the ever-awkwarder syntax of php nourishes my soul, somehow. 
Yes, the badge is a composite image of the badge pieces and some text. The final image is flattened into a .png, but we have no way of retrieving that image, so every time an order comes in we have to take the specifications and rebuild the badge.
Thanks for touching on yet another aspect of PHP's fail, especially with lambdas/closures. There are so many! I wrote a similar article (though on a different aspect): http://lucasoman.blogspot.com/2009/08/php-is-dead.html
What you need is a programmer, it would be trivial for a professional, and easy for an amateur.
How do you generate the link for the end-user? You should be able to store the link somewhere and add it as part of the shopping cart item data.
We don't generate a link when the item is sent to the cart. This info is sent to cart. &gt;CUSTOM BADGES, S&amp;W Model : S91D Text B : LIEUTENANT Text C : SAN DIEGO D(Seal) : Florida Seal-Type : Florida Text E : SHERIFF Text G : HON Finish : Two-tone Gold w/ Sil-Ray Enamel : Hard Font : Block Text-color : Black Shape : I use that information to rebuild the badge and send them a confirmation email. I know that when creating a badge the url in the address bar changes with each change, so you can actually take any url from the address bar--paste it into a browser and see the actual badge.
Ok, so it's a javascript badge builder. The server never sees the badge that the user builds. We can assume that some Javascript runs at some point to send the info to the cart. I'm not sure if it's on the Add To Cart button and it pulls info from the current page or if as you're modifying the badge the Add To Cart link is modified on-the-fly. I assume it's something like that. What I would do is add some javascript to the cart button to run some javascript and add window.location to the URL, so when the server-side cart reads the item that was just added it can also add the url. It's hard to say for sure what needs to be done without actually seeing the page, but window.location will get the info you want. If you can figure out how to add that info to the cart along with the info you pasted above, you'll be fine.
Alright man, this sounds like we are getting somewhere. I think I might be able to do something like this. Thank you for the direction.
How is the syntax "wrong"? Couldn't it also be said that it is "clear"? Also: ECMA/Javascript is conspicuously absent as a language of comparison. Newer sugar notwithstanding (features not always supported by The Usual Suspects), function(){} is not all that different from function()use(){}, unless of course we're going to count every character as a badge of increasing Badness. Didn't we stop doing that when text editors improved and storage became affordable? If we wanted byzantine tersity, we'd still be using Perl. PHP's new closure syntax isn't going to surprise anyone, which means nobody is going to surprise me with it.
Upvoted for truthfulness!
Awesome. I like it.
so where's the actual highlighted php code, i can't find any demo
&gt; A little shameless self promotion - It's my blog Everybody posts their own blog - It's to be expected, so nothing to be ashamed about. Now, about the actual entry - You *do* know about [GeSHi](http://qbnz.com/highlighter/), right?
I didn't, but thanks for the heads up! It'll be interesting to see how they've approached it. Pretty much all the code for my blog is done as a learning exercise (and for fun). If I were doing this stuff for a client / to a deadline, I would have researched the existing options and only written one if nothing already existed. Pre-made solutions are great for getting things done, but if I want to have a little fun and learn stuff along the way: nothing beats doing it for myself. That gives me an idea for a blog post; thanks!
It should be there now. I wasn't originally going to do it for a few days, but I got bored implemented it a little after I posted here.
Thank you, sir :-)
i was about to write why not use the internal highlight*-functions but then I read the post. Anyway, you can also just rename your file to .phps and have it served syntax-highlighted through php by almost any not-too-custom compiled install of php. But then again you won't have the level of control your solution offers. Bookmarked.
I don't know the exact format of what you can put in the ini settings, but shouldn't something like this work? Not too sure though. set_ini('highlightwhatever', 'inherit" class="yourclass'); .yourclass { color: #f00 !important; }
It quite possibly would - it wouldn't give me the same level of control though :-)
Indeed it wouldn't :-) Thank you for the bookmark, sir!
Similar functions work if you just build tokenizers for other languages and throw them into the function like (shameless self-promotion just the same): [http://shawnbiddle.com/devblog/archive/big-highlighter-update-0-8-2](http://shawnbiddle.com/devblog/archive/big-highlighter-update-0-8-2)
Although in most cases I would agree, it really depends on the context. Sure now it only takes a string as a value, but what if you were passing an object that has a __toString() function. Later on you planned to extend these objects to support Roman Numerals or fringe cases where numbers in quotes should not be removed. Rather then having to find the 30 locations you used that preg_replace, you can just update the one function.
To narrow the attack surface. Every access to $_GET, $_POST, $_REQUEST, etc positively must be wrapped with a validator function that enforces your expectations on that parameter's content explicitly. If you don't factor out your validation code in simple, easy-to-review and update functions, and try to remember to put consistent regular expressions around all of your parameter access code, you will screw things up sooner or later. 
 * ALL YOUR CONFIGURATIONS ARE BELONG TO LINES ABOVE Nice.
Well.. word on the grapevine is that osCommerce (now osQuantum) is being rebuilt on Kohana PHP framework.. http://forum.kohanaphp.com/comments.php?DiscussionID=2802 This will obviously be to it's benefit, as Kohana is the bee's knees
That *could* make it usable. As it is, it's a testament to the horrible coding practices of 10 years ago, and hasn't been substantially updated. HTML tables, repetitive code, application logic mixed in with display files... it's a nightmare. 
I've used it, I fixed bugs, I cried....well I didn't cry but I swore a lot.... and then I cried.
To play Devil's advocate, the community has picked up the slack where the developer has failed. The Contributions area is thriving. It's just patching a giant mess of old code, but it is still usable. And it does create jobs. The complexity of the code means that if you become familiar with the system, you can charge a pretty high price for your services. And it's really only in the last few years that competition in the open source PHP ecommerce systems has ramped up. So ecommerce was one of your only free solutions for a while. Still, I have only tried to use the system once, a couple years ago, and from the Register Globals requirement, to the lack of a true plugin system, I will probably never try it again.
Maybe I'm utterly spoiled by largely working in the WordPress ecosystem, but comparing OSCommerce's Contributions, to WP's Plugins, it's night and day. Plugins are sortable, have ratings, it's clear when they're being maintained, there isn't a list of defunct old versions to select from... even the *list* of Contributions is awful: a columnized, paginated list of nothing but titles and authors without detailed descriptions. And many of the descriptions read like they were written by kids in grade 6. The level of professionalism and polish is markedly different between the communities. 
OSCommerce is a nightmare. It is a glimpse into the bad old days of PHP web application development. I actually got my current job writing a hack for OSCommerce. They wanted a tool to import Ebay orders from multiple Paypal accounts into a common database, and then export files to make shipments for UPS. It's served its purpose, but man is it ugly. Whenever I've had to modify any of the built in pages, which are mixed PHP and HTML, I spend inordinate amounts of time trying to find my way through multiple nested HTML tables. We have all of our online stores on Magento, and will be moving our "order processing" system to that in the next few months. When OSCommerce is put to rest we're going to have a party.
Oh, yeah, it's not even comparable to WordPress. The last time I checked, there really was no plugin system. There is no API for developers. You don't really install a plugin. You have to manually edit core files to make changes. There is a very high chance of two patches conflicting. What I meant was, the main developer doesn't update the code very often, and the community picks up the slack in that regard. It is pretty active, and they do what they have to do get things to work.
Thanks for mentioning Magneto; I'll check that out next time someone asks me to build a store. 
There are still issues with Magneto- I hate how difficult it is to do some design things (setting up listings the way we wanted was impossible) and its update path isn't too great either. That being said, its leagues ahead of OSCommerce.
It's ugly and crappy and everything else bad, but it does work, and it works pretty well for most people. After all, you get what you pay for.
 $res = Arr::make($nums) -&gt;filter(function($k, $v) { return $v &gt; 15; }) -&gt;map(function($k, $v) { return $v * 2; }); Meh. Doesn't seem fair. If he's going to write his code in this lambda style, go ahead and standardize on your Arr class instead of raw arrays. Secondly, how do you feel about eval()? Try this on for size: $res = $nums-&gt;filter("$v &gt; 15")-&gt;map("$v * 2"); It's pretty close in terms of readability from the Scala example. Now consider whether lambdas and closures are your best approach here. Why are we filtering for numbers over 15? And why do we then double them? I'd happily give up some conciseness here for a little more readability. Wrap it up in a function that describes what you're doing. Once it's inside the function, it doesn't matter too much if the implementation takes one line or three. $res = getAdjustedNums($nums); function getAdjustedNums($nums) { $res = array(); foreach ($nums as $n) if ($n &gt; 15) $res[] = $n * 2; return $res; } 
yes i cried and designed hacks for it too. i remember stumbling through mixed variable names and slamming my head against the desk because i still didn't have the right one. was that sale_price or price_sale i just changed?
And the e-mail subsystem is a bit of a pain. I have a list of five major bugs I need to fix each time in order to get the e-mails to be sent. Raising bugs with Magento is a pain also, as they seem to look at user-generated bugs once every six months if you are lucky. Until they are fixed, I just keep applying my hacks.
If it is being built by the same team, then I still would not go near it. It is the OSC team that has dug its feet in an resisted any attempts in the past to fix the code base, and deleted any posts of people who tried to get teams together to do so. They also held onto their firm belief that templating systems were a waste of time, since it is just as easy to go in and hack at the mix of HTML, PHP and the many, many SQL queries.
There are lots of poeple who did *not* code like this ten years ago, and lots of people who still code like this now. It is testament to the OSC team's practices, and only that.
It never had any competition for many years, though there were many attempts at replacement systems. The trouble with the attempts at ousting OSC is that nobody could ever seem to appreciate the scale of the undertaking. I was involved in projects where the developers just wanted to code, and simply attempted to emulate OSC. It needs a lot of careful planning, especially considering the shear number of different rules and regulations, languages, taxation systems etc. that there are around the world. I never stuck it out in any of those projects, because I could see them just going the same way as OSC.
Free != bad. Exhibit A: Linux Paid != Good Exhibit B: Vista
&gt;Wordpress isn't all that either. Perfect, maybe not. But it's got elegant separation of logic and presentation, it's quite easy to completely reskin the thing, and it's very open ended: plugins are a dream, and altering templates is straightforward. &gt; but real beautiful code can be found in OS projects like Drupal... While Drupal lacks the elegant interface, extensibility, and ease of use of WP.
Gnascher != Made a point. Seriously, cut the Linux vs. Windows shit, and save yourself some dignity. IT DOES NOT APPLY HERE.
IT does apply. The post I was replying to said "you get what you pay for" indicating that somehow quality is linked to price. I presented Exhibit A as an example of a high-quality free product. Example B is an example of an example of a highly priced product with some serious quality issues. That said ... I am both a Windows and a Linux user. I am writing this reply on a RHEL5 box at work. At home I have two XP machines, a Vista Ultimate machine, and a Vista Business laptop. (Not to mention several Centos VM's and a dual-boot Ubuntu on the Vista business laptop) I am not a fanboy ... both platforms have their uses, but in the end I'm glad I never actually paid 'out of pocket' for my winboxes ... they are all employer provided. Edit: spelling, grammar. 
Spun into that context, your comment does apply. However, Linux is not high quality. It's just as bad as Windows when it comes to security and other ridiculous issues. I will leave my original comment un-edited as to not have "cowardice" come into question regarding my formal apology. I apologize!
&gt; indicating that somehow quality is linked to price I think he was getting at that dreaded attitude that puts me off some projects completely: it is free, so you are not allowed to complain, so STFU. People who are constantly reminded of that will not contribute to a project; they will walk.
I agree ... I hate that as well. As a programmer, if I come across something in an open-source project I don't like, I fix it. If the fix is general enough, I submit it back. Sometimes it's accepted, more often I get a "thanks but no thanks". I'm not an active contributor on any project, so I guess their skepticism is warranted. If I come across a lot of things in an open-source project I don't like, I move on and find another solution or roll my own. Personally, I've worked on OSCommerce sites. I don't like OSCommerce, but there aren't a whole lot of good options out there either. Magento looks promising, as does Ubercart. I think these apps are getting ready to turn the corner and become something good.
I didn't build any projects from scratch using it, it was always stuff that I took over from other developers, so I don't know how much of the bad code was their hacks. I remember the global variables driving me crazy. Grepping through every file trying to figure out where they're actually being set. Not sure if that was an OSCommerce thing or just some other developers hack.
yeah and i am in Canada and had to work in an option for french language. um canadian dollars please arg.
I worked on a project many years ago where we were converting huge amounts of data for migration to a new system. The management decided performance of the code was too slow, so they got in an "optimisation consultant". He did the optimisation, and laid out many ground rules for applying to the code, which was duly done. When it came to running the conversion, and finding it did not do exactly what it was meant to do, we hit a problem with the bug fixing: the code was so heavily "optimised" that nobody could fathom how it worked any more. The slightest tweak sent performance into a nose-dive. The conclusion: don't look at performance optimisation as the final work in coding techniques, if you ever want to maintain your code. That is the problem with *not* using a framework - yeah, it is more low-level and therefore "optimum" for speed, but throw another member onto the team to maintain it and you have problems. It's a fine balance though - performance vs abstraction.
It's also important to always benchmark before doing performance-sensitive work, during, and after. It should usually be possible to identify what caused the performance to nose-dive if you're doing periodic benchmarking throughout the project. (And of course it's also important to use benchmarking when applying any "tricks" you find online. For example, lots of folks believe that string concatenation is faster than sprintf. When I compared the two methods of building a query string, sprintf won out.)
I happen to be at Drupal Camp Portland right now, where I've just attended a session about a web app (a widget toolbox host thing) written using Drupal 6 as a framework. I must say: Wow. This web app has a ton of features, and all the users, roles, permissions, etc. features that come with Drupal, and it was written in about 200 hours of work. If you use Drupal as a framework, you need to be pretty intimate with Drupal. It's an *incredibly* powerful system, but only once you learn how to use the big-player contrib modules (views, panels, cck, context, etc.). (Get a couple books on Drupal, watch a bunch of screencasts, etc...)
I'm still a bit fuzzy on using drupal as a framework and not a cms? I kinda want to go with CI. any arguments? thanks
Drupal lets you create new content types without any programming (by using the CCK module and some extra CCK field modules). CCK lets you start from a generic "node" -- one content item (like a blog post or site page) -- and add fields to it. That buys you a lot; you don't *have* to use code to set up most of your model (in MVC terms). Let's say you're making a site like NewEgg. You can make a Computer Part data type that contains a main picture and several extra pictures, a manufacturer, your cost, customer price, etc. No problem. Then you can use the Views module to create a custom view to display your filter. It handles pagination and can show your items (called "nodes" in Drupal) in a list, in a grid, etc. You tell Views how to determine which nodes to show; e.g., show all the "computer part" items. (I'm pretty new with Views but I think there are some views that can display using jQuery plugins, like carousel.) Then you've got user roles and permissions (built into drupal) which you can use to set up who can change what. And the workflow modules can be used to add a "workflow" to a content type, such as for reviews on the NewEgg like site. Maybe when someone writes a review you want it to go into a "needs moderation" state -- not yet published until a moderator steps in. That kind of thing. Yeah, maybe I'll write more tomorrow, but that's just to give a *very* basic idea of a few of the things you can do.
&gt; Drupal lets you create new content types without any programming (by using the CCK module and some extra CCK field modules). Oh, the old dream of programming without programming.
So basically no major websites are built with Kohana? These 10 sites don't really highlight Kohana, do they?
Since most people haven't heard of Kohana, that's not really a surprise now it is? The point of the article was to raise awareness of the framework.
I wouldn't mind Kohana if it weren't for the fact that they say they're going to be converting the platform over to a completely new system from the ground up, and have forever been in the vaporware push for v3.0 but have never arrived there yet. It's starting to sound sort of like Perl 6. Other than that, the Kohana 2.3.4 is a pretty nice system. Lean but yet capable. So, the trouble I have is that I recently wrote a $150K project proposal, but had to turn down Kohana even though I liked it the best because of this v3.0 mess. I mean, I can't recommend anyone build something on Kohana only to have to rip it out and redo it entirely when v3.0 comes out.
Here's how you fetch form variables: `$name = $_POST['name'];` Like duh.
Kohana3 has been available for almost a month now. http://forum.kohanaphp.com/comments.php?DiscussionID=3479&amp;page=1
It does exactly what it says it does, that's the point.
There's nothing wrong with that, it's much better to write a single sanitiseMySQL($in) function and know it's consistent throughout your codebase than have extra lines everywhere doing the same thing. The *real* problem is frameworks. I don't see how writing code that relies on a framework that uses built-in functions anyway makes any sense. You are just adding unnecessary overhead, at what point does adding a 200KB+ folder to your project become easier than spending a few minutes reading examples and syntax galore on the [extensive documentation](http://www.php.net/preg_replace)?
Ah ha, here's a page about the [MIE Toolbox](http://www.levelos.com/blog/2009/10/mie-toolbox-case-drupal-application-framework), which is the web application written with Drupal which was discussed in the drupalcamp session I attended.
You don't use a framework to take advantage of its native function wrappers.
But that's really what you're getting. Look at any framework's source; it's just friendly names for integers and functions with nicer variables calling the same built-in functions you could call yourself. Albeit with more overhead and slower performance.
True, but consider all the advantages: team-written functions for generic stuff like validation, authentication, data modelling etc, written by people far more skilled than most developers, and bug tested by a massive userbase. There's a lot to be gained if you don't have the time or skills to reinvent the wheel.
But incomplete.
It's called a Unicode byte order mark, or BOM, a useful but generally optional component of a Unicode file. Tell your editor to stop adding it by changing the encoding of the file.
Most mixers and pubcrawls will be organized either via twitter (#zendcon) or #phpc on freenode irc ZendCon is famous for its bar nights :) check out those and ask around, you'll get the info quickly
Please refrain from humiliating Amy Winehouse by comparing her to OSCommerce.
Would they be cool with a developer that still uses PHP4? Does anything interesting happen at ZendCon or is just an event where people hang out?
To avoid var_dump() or phpinfo() spilling the beans so easily, you could simply encrypt and base64 encode the passwords, so you'd have to BOTH do that and have access to the php to see what the encryption string was. 
Wow, that's much better than I anticipated :) Thanks!
 /etc/httpd/conf.d/passwords.conf Should already be outside your document root. If it is not, you're doing it wrong. edit: Your clarification cleared up a misunderstanding and it appears you might have a valid point. In the end everything has its downsides and nothing is 100% secure.
Which is why passwords.conf is owned and readable only by root. Unless your apache is running as root (which it isn't), a directory traversal bug won't let you read the password.conf file.
How does it make it less secure? Instead of being world-readable on your system, the passwords are now only accessible on a per-application per-directory level. Say, you have a http://example.com/goodapp and http://example.com/badapp. If badapp gets compromised and allows arbitrary php code execution with apache permissions, there is *no way* for an attacker to see the passwords used by /goodapp.
That's a good point, actually. It does strengthen the system even further. The downside is that it makes password management harder, and application slower as it'd have to decrypt the passwords on each load.
True, but if you're on a shared system you're not really concerned about performance anyway. As for password management, just make sure you use a cipher that doesn't depend on the OS so you get the same output on different systems. At any rate, it's definitely further towards one pole of the security/usability trade off. 
I find http://www.regular-expressions.info is a great guide. Also [The regex coach](http://weitz.de/regex-coach/) works perfectly in combination with the [preg functions](http://uk2.php.net/manual/en/function.preg-match.php)
Upvote for regular-expressions.info but is [RegExr](http://www.gskinner.com/RegExr) is just about the best regular expression tool ever
I've seen people use preg_match("#EXPRESSION#", ...) instead of preg_match("/EXPRESSION/", ...) What are the differences and are there any other variations? I've always used the /EXPRESSION/ method and it works fine.
You can use any character to act as a start/end point. No differences.
I like to use ~. Unlikely to be used in the expression.
It may be ajax. The client makes a request at the beginning, and the server just doesn't close it, being free to add more stuff at any time. There is no timeout on ajax requests. I've user this to implement a (crude) telnet-like session over http. However, there is no way I know of (except using plugins such as java or flash) to do it the other way: keep a connection alive for the client to send further commands to the server. That would be very nifty, to be able to basically simulate a telnet connection with a single request. Browser-based multi-user games would surely get a boost with that technology.
SHAFT.
SHUT YOUR MOUTH!
Hey again, it's not ajax. I remember visiting their website. They had a diagram demonstrating the server displays stuff to the user, rather than the user requesting for things to be displayed.
[PubSubHubBub](http://code.google.com/p/pubsubhubbub/)?
Did they mention javascript anywhere?
Of course there is a difference, it decides which character you'll have to backslash out if it appears in the regex.
May have had a slight mention of javascript that I remember. It mentioned something about the server sending data to the users page and the user page updating. Not like ajax always checking to update, it was some kind of server technology/software.
Reverse AJAX / Comet ?
Well it's a web hook. Thanks guys, I'm looking for it now.
No, the user doesn't request the server for updates, it only makes a single initial request, that is kept open all the time. The server uses this single request to update whenever it wishes to.
An initial request will always be made from the client to the server, this is unavoidable. Once this connection is made and the client is identified by the server, it is possible for a server side script/app to send or push subsequent packets of data. Once the client navigates away from the page and breaks the the connection, the server will not be able to push data to it. Ajax is as useful as a term as cloud. Someone might be calling it soap or someone might be calling it distributed computing.
I wonder why he used array\_search() over in\_array(). in\_array() just returns a boolean, array\_search() returns the matching key, which he doesn't use.
I second that. But maybe someone wants to mention the IP in the message. like: echo "YOUR IP " . $status . " HAS BEEN BANNED."; // header("Location: http://zombo.com"); exit;
Seems a bit silly, surely if the person knew they were banned they could get around it by sending through the header HTTP_X_FORWARDED_FOR with a value 127.0.0.1 (or anything else) and it wouldn't be banned.
True, but he has the IP anyway in order to make the function call.
Right. So it's better using in_array() in this situation.
Also known as a "comet connection" There is a jQuery plugin for it. You could probably do it more effectively with flash though.
Alright, but how can I send a value through the header?
one liner! if ( in_array( $_SERVER['REMOTE_ADDR'], file('ips.txt') ) ) die('blocked'); rant: fucking php and their haystacks/needles. ill never remember them
i find ~~ stands out better too than /
Well, right...I thought that was a given though.
Using PHP to block an IP, is a little late. Generally you want to do this with iptables or some other network level blocking. http://en.wikipedia.org/wiki/Iptables
Using php, you can use: http://php.net/manual/en/function.header.php to fake the header as per: http://www.astahost.com/info.php/Hacker39s-View-Easy-spoofing-Ip-Address_t13807.html Headers are just special sections of a request that are essentially plaintext, just like the (html) doc, in http.
There is no reason why you can't build on 2.x and never upgrade the app to 3.x.
php is a templating engine. no need for the overhead of another class.
Tamper Data in firefox will do it.
It is. 
Its interesting, and I give it points for looking simple. I would rather see something done with classes though, instead of an array like that. Something like: Validator::Validate('username', array('required', 'alpha')); Using arrays the way the SimpleValidator does is just too sandboxy, and you have to constantly reference the documentation to make sure you are doing it properly, putting arguments in the right order, etc. In addition, with a class structure you can add supplementary helper functions. I dunno, call me picky I just don't like the overly sandboxyness of using an array where a class should be used.
Zend form is good. It validates like this (validation rules set in form class). `$myform = new MyForm();` `if($this-&gt;_request-&gt;isPost()){` ` $formdata = $this-&gt;_request-&gt;getPost();` ` if($myform-&gt;isValid($formdata)){` ` //...` ` }` `}`
That looks good. I am developing a Content Management System and framework, and my form class works very similar: $myform = new Form(); $myform-&gt;AddField('username', 'text', 'Username');// Text form field with key 'username' and label 'Username' $myform-&gt;AddValidation('IsRequired');// Adds validation to last added field $myform-&gt;AddValidation('IsLength', 3, 25); // Check if the form is submitted if ($myform-&gt;IsSubmitted()) { // Custom Validation Routine if (!...) { // Custom validation failed $myform-&gt;AddErrorToField('username', 'ERROR_MESSAGE'); } // Check if the form is valid if ($form-&gt;IsValid()) { // Submit to database, etc... } } My class takes care of many details behind the scenes, but it also allows you do those things on your own, for example, adding the custom error message.
Yeah that is nice. All of that can be done with Zend_Form too. I can't even imagine doing validation without this sort of implementation. You might want to check out ZF for ideas.
Thanks for the tip, I will definitely give it a look.
theres the overhead of another layer if you choose a template engine. i use e($adsf) for outputting. very easy and no extra layer.
Just to be clear: I wrote SimpleValidator. Thanks for your comments, I'm glad someone besides me actually even looked at the thing. :-) In SimpleValidator the order of the arguments doesn't matter. Passing everything around as strings does introduce problems of course. Validation methods that take arguments (e.g. maxlength=8) require special handling. The "choices" (e.g. choices=red,blue,green) validation rule can't parse valid choices that have spaces (as it thinks the space is setting up for another rule). Of course, bare spaces should really (imnsho) not be used in the values for a set of choices anyway. My goal was to make the process of validated a keyed array of data as simple as possible, and leave the tough cases either for tools with more weight or for a custom validation method extended onto SimpleValidator. My real goal was to ripped off jQuery Validator as shamelessly as possible. I recently coded up a page that used it for client-side validation and thought that having a similar tool on the PHP side would be handy. I think the best form processing I've seen so far is in Django. But that's much more complex since you use the same system to: define the form, output the form as html, parse the data from the form, and get back "cleaned" input data.
In SimpleValidator's case I wanted to code up class with as simple a setup as possible that takes a keyed array and returns a keyed set of errors. For those quick one-off form pages we all end up coding. The rules syntax mirrors that of jQuery Validate so the validation rule setup doesn't have to be completely redone from one side to the other.
That sounds cool.
it boils down to this....anything you can do with a template language i can do with php, and it will be faster, and more readable to other php developers
definitely going to have to disagree with you on the readable part. more readable for who??? php developers can already read php. they cant necessarily read the template lang you're using unless they learned it. so to php developers php templating is going to be more readable. So that leaves everyone else. Why not have them spend the time to learn php templating? rather than having them learn smarty or tal or fasttemplate or btemplate. my php websites generate 0 errors and validate fine. not sure what youre doing wrong. read these: http://www.sitepoint.com/forums/showpost.php?p=498687&amp;postcount=15 http://www.sitepoint.com/forums/showpost.php?p=499483&amp;postcount=21 http://www.sitepoint.com/forums/showpost.php?p=500720&amp;postcount=29 they make my point a lot better than i do. 
Here's an idea, don't run WP on IIS.
here's another, much easier way: $fullstring = "this is my [tag]house[/tag]"; preg_match('/[tag](.*)[\/tag]/', $fullstring, $parsed); echo $parsed[1]; //result: house Also, for an xml file, you'll probably have more than 1, so you'd use preg\_match\_all in much the same way, except it puts all of the results in an array, rather than just 1.
Here's my list : 1. CakePHP 2. CodeIgniter 3. Yii 4. Zend Framework (Many people consider it a library more than a framework!) Edit: very good article from /programming/: http://www.one2.biz/blog/top-10-php-frameworks/ Edit2: another good link form /programming/: http://www.phpframeworks.com/
Codeigniter
Kohana. Based off CodeIgniter but takes full advantage of php5. [link](http://kohanaphp.com/) Edit - I see a lot of people suggesting CI, which is a great beginners framework, if you're new to php. If not, then Kohana still gets my vote.
If you are a Django guy, you might be interested in Pluf http://pluf.org/ which is a PHP port of Django 0.96 or so. Though if you want something with a community around it and good documentation, you might find Codeigniter a better fit.
wrote a site using zend. now playing with django.... and i agree that zend is more like a library than a framework. be prepared to write way more code with zend compared to django.
If you liked Cherrypy framework, then try using Chelvi framework http://chelvi.sf.net for PHP5. It is simple framework and it is in the initial stage of development. (Note, It does not include model part yet) 
Hosting is a commodity. Code is intricate. Choosing a language based on hosting is like choosing a book to read based on fonts.
[Recess](http://www.recessframework.org/) is built upon a lot of the same principles as Django. Might be worth a look.
What host offers PHP and not CGI languages?
[Agavi](http://www.agavi.org)
CakePHP is my favourite.
Symfony is a good framework, but not well-suited to shared hosting situations. It can be made to be so, but isn't out of the box. You are right that up-front it's fairly complicated, but it gets easier as you come to grips with the main concepts. That said, I've got about 4 mid-size projects built upon CakePHP. While it is not without its warts (I doubt any are wart-free), it really does facilitate rapid development of simple apps. If you design your schema with Cake in mind, you can get a fully functioning CRUD application up in about 15 minutes. Granted this is with a lot of default behavior you might not want/like, but it's a good skeleton for you to then shape into the application want as a final product. Go through their ["build a blog" tutorial](http://book.cakephp.org/view/219/Blog), and you'll see how easy it can be. Also, it's not hard to get Cake "out of the way" if you need to do something that the framework wasn't designed to support ... but if you find yourself going there, it'd be a good time for a sanity check to make sure you *really* need to go that direction. The codebase is mature and stable. The 'official' documentation is enough to get started with, but not great. However, there's a fairly significant amount of additional information usually just a Google search away. One of my primary sources is [Mark Story's blog](http://mark-story.com/).
I second Yii. Have used it for a few projects. Very well thought out and also very fast.
Tsk you guys, `[tag]` matches `t`, `a` and `g`, not `[tag]`. Also you can make a specific match non-greedy by plopping a question mark after the quantifier: preg_match('/' . preg_quote($start, '/') . '(.*?)' . preg_quote($end, '/') . '/', $fullstring, $parsed); Of course for anything non-trivial you'll probably want to be using a proper parser, not a single standalone regexp. It's simple enough to build a tokenizer using `preg_match` thanks to the offset argument, and you can get around `/^../` not working with that using the anchor pattern modifier `/../A`.
I second that.
Zend is designed to stay out of your way until you tell it you need it, so yes it's designed to feel like a library of components. Zend's focus is more towards custom apps as opposed to classic CRUD apps.
Did you escape the backslashes? \\[foo\\] Come on, you should be used to this, PHP makes you do it all the time ;) Works fine if I use preformatted text, even without double escape: \[foo\] \\[foo\\]
I suggest Zend Framework, well maintained codebase, good size community, code is good and the overall library has a lot of utility. I've seen elsewhere that it doesn't support templates, but I think this is mostly incorrect. Zend_Layout is effectively a template engine. Maybe not to the extent that you see in Django, but still. My gripe against ZF (because nothing is a perfect fit), is that documentation is inconsistent and sometimes awful. Sure, there is a lot of it, but some of it doesn't do an effective job. You often have to rely on the documentation plus the API to stitch together how something works. My favourite is when a method takes an associative array as an argument. This fact is documented, but what keys/values are supported are often not described anywhere. I've had to dig into the code on a few occasions. It has a steep learning curve for those new to oop in PHP, however I suspect nearly all of the frameworks listed here are similar in that regard. Let us know which framework you decide on.
I can second this, compared to Django, you'll write a lot more code with Zend. Is this true of most PHP vs. Python frameworks, though? Python is more terse and cleaner than PHP on the whole, from my experience. I've written many sites with ZF and one with Django. 
I'll second that. It's still young but as a Python/Django dev who has been forced back into the land of PHP (uhg) I really liked Recess. It is very well organised and comfortable to use. It is especially well suited for RESTful web services.
Kohana 3.x has nothing in common with CodeIgniter, it's a complete rewrite.
dreamhost is a big one. You can get python to work with them, but it can be really unstable and probably not worth the effort.
I love Django and Kohana is my PHP framework of choice. Not the same as Django, but it is a simple and easy to use lightweight framework. Zend Framework is very powerful, but a bit overkill if your project is a simple one.
I use CakePHP and I love it. It would be a lot more similar to Rails than Django though.
I've had similar problems with ZF documentation.
i know php and i would have to go to the tal page and read documentation on it in order to understand the templates. not so for php. then when someone else uses smarty i have to go learn smarty. both of which just replicate php functionality. we are jsut going to have to agree to disagree =)
try Madeam? http://madeam.com. Small. Fast. Simple. Interoperable with Pear and Zend Framework
I'm a django/java/hibernate person but I decided to take the plunge into PHP, and I checked this subreddit to see if anything could help and lo and behold this thread appears. PHP scares me coming from a python background, but alas I am determined to see what all the fuss is about PHP. There are many more PHP frameworks compared to python frameworks, it makes choosing a framework daunting.
poohneat, hacks is really a misnomer there, given that the PECL module is using the full memcache protocol to record specific information about the content stored. Sounds like a nice usage of what amounts to a limited resource fork
I concur. CodeIgniter is the real deal.
Installing PHP Curl the easiest way.
I would recommend either Zend Optimizer or eaccelerator based on my experience. Performance, with proper settings, will generally at least be a 10-50% increase in speed. [See here](http://itst.net/654-php-on-fire-three-opcode-caches-compared) for an old performance chart, and [here](http://2bits.com/articles/php-op-code-caches-accelerators-a-must-for-a-large-site.html) for a blag article on eaccelerator and how it helped them. A good optimizer/cacher (APC, Xcache included) will not only cache the opcodes but optimize them. This is useful since some opcodes (or more correctly, how PHP parses some things into opcodes) are inherently unoptimized to handle some of the functionality PHP has (for example, double quoted strings and heredocs are multiple instructions per word break as [demonstrated here](http://blog.libssh2.org/index.php?/archives/28-How-long-is-a-piece-of-string.html). [Here's a presentation on opcodes](http://www.zapt.info/PHPOpcodes_Sep2008.odp). Basically there's little reason to forgo having an optimizer. I would also recommend using Memcache, as another notable bottleneck will be sql queries and query performance in general (especially if you or someone you know writes terrible and slow sql queries; not that memcache is a solution to continue to write poor queries, but i think you get the idea). EDIT: Made myself pretty.
Strange timing, I installed APC on my server 2 days ago. I also did a number of other "tweaks". including increasing mysql's query_cache_size value. Can't say what one tweak worked best because I kinda did everything at once, but my server went from an average load of around 7 to around 2. mysqld is still the biggest cpu suck right now. I suppose it's safe to link to some php caching stats: [http://timekiller.org/apc.php](http://timekiller.org/apc.php)
APC isn't the fastest, but is stable.
Xcache is my personal favorite. Worked best for me while using 5.3 release candidates on my test machine when APC would crash frequently.
No matter how much you optimize (or accelerate) your script, DB access will always be *the* bottleneck. If you're querying the database 20 times for each page load, you're doing it wrong. I suggest profiling (intercepting each query before it executes, and keeping track of how long each query takes (% of total queries on page, ms isn't exactly the most helpful)) and trying to de-normalise the DB if you can't find (and remove) any redundant queries. If you're too lazy for that, then you can look into using memcached. The goal being to reduce your trips to the DB while still ensuring the data remains as accurate and up-to-date as reasonably possible.
I've gone back and forth on this for awhile now and have decided to program with some good ol' php. Seems if you use a framework and you need help or someone to take over your project, you knock out more potentials by saying it has to be in this flavor of php.
i was looking into memcached too ... can memcached and opcode caching be deployed at the same time or is it advisable to implement just one of either based on which is the major bottleneck...? 
thanks! APC does seem to have more followers it seems
thanks ... this is really useful! those stats and comparisons help a lot!
Benchmark first. Then attack the bottlenecks, whatever they are. A code cache will help with startup time and generally speed things up, but won't fix a bottleneck. Script inclusion is never a bottleneck. This doesn't mean that code caches aren't a good idea, they are. As mentioned elsewhere, APC is very stable and very maintained. Other choices tend to no longer be maintained. Consider both cached SQL queries and cached objects. Caching objects is harder but can have better performance if you do it right.
yes they can be used at the same time, and there's absolutely no reason not to use an opcode cacher like APC. Memcached and APC can be used in exactly the same way, except APC doesn't scale across multiple servers like memcached, so if you're running one server, I'd recommend APC because in my experience it's faster, since instantiating the memcached object for use seems pretty heavy.
I asked this question on stack overflow http://stackoverflow.com/questions/930877/apc-vs-eaccelerator-vs-xcache
thanks! any good benchmarking tools or methods that you know of?
If you are having problems with DB speed, use transactions. Specifically, use the work of people who know DBs better than you. I would recommend an ORM like doctrine (propel was ok, but I have since switched). You'll see quite a speedup.
I think we're talking about two different things here. memcached is just about caching data in a central, serialized server, easily accessed from multiple hosts. opcode caching is about caching the code in local memory somewhere. You can definitely use both at the same time, but as ihsw and McGlockenshire (and countless others all over the Internet) say, benchmark first. This is crucial. Humans are typically quite bad at identifying bottlenecks. In addition to what ihsw said (DB access will always be the bottleneck), the connection between your server and your customer's computers will pretty much always be the second bottleneck.
xDebug has a built-in profiler. As for MySQL, slow query log is the way to start.
xdebug profiler + something that works like kcachegrind = instant profiling. If you're lazy and have too much time on your hands, microtime() and manual math is your friend.
i also would recommend apc. it's very easy to install. just do it and forget about it. like the others said: benchmark your code. opcode caches might not give you total satisfaction as your bottleneck is most likely somewhere else. having said this: using opcode caches is pretty standard nowadays, you can never optimize too much...
apart from xdebug there's also: http://mirror.facebook.net/facebook/xhprof/doc.html
transactions to improve speed? now that's funny.
APC is great in that you just install it and get an instant measurable boost. It increased our load capacity by about ten times. If you aren't running anything else I would say at least install APC, it will only take you ten minutes. Of course if the problem lies with inefficient database queries, APC won't fix them.
I'm guessing it means fewer commits?
Why?
In a transaction, the database will do read operations to check constraints &amp; such, but batch up all the actual writes until the commit. Generally, the commit is done at the very end of a script, after all the content has been generated &amp; echoed out to the browser. So, user is seeing the fully-rendered page while there's still database updates going on server-side.
If it's not something that can be cached away, it's worth considering a lower level language to fall back to for heavy operations. I'm a Python programmer, so Im not really familiar with what binding are available to lower level languages, but something like C/C++/Java would be a good option. (Hopefully not java)
In the land of Perl, whence come the [regex syntax &amp; semantics](http://perldoc.perl.org/perlre.html) that [PCRE](http://www.pcre.org/) attempts (not always _quite_ successfully) to provide, regexen have their own special quoting syntax and operators. In place of preg_match("/^([a-z]+)\s/", $subject, $matches); you might say my ($match) = $subject =~ m/^([a-z]+)\s/; where m in the regex means "match this", and can be followed by just about any sort of quote delimiter your little heart might want, including balanced delimiters like braces or parens. This probably doesn't impact your PHP code nearly as much, since you're just passing in a string, but like people say, it's got its uses in avoiding excessive backslash escapes. One Perlism that _can_ still be really helpful in PHP is the /x modifier, which lets you insert whitespace and comments. Goes a long way towards making any given pattern legible. Though of course "legible" is all relative.
http://www.mysqlperformanceblog.com/ They have TONS of resources on MySQL optimization, from Slow Query Log tips to InnoDB optimization techniques. Others suggest XDebug for profiling PHP, which is a great suggestion as well.
Seconded.
I came across this little gem last night: tep_string_to_int($string) { return (int)$string; } osCommerce was never hot, not even before the drugs.
PHP Programmierer günstiger als Freelancer
&gt; And it does create jobs. It created mine, which has much to do with why I hate it (osC) so passionately. On the other hand, I generally like the job. I suppose I should be grateful.
In my experience, it's the sort of code that tends to accrue lame hacks even from people who theoretically know better.
Memcached is best when you need shared data that is accessed very often (for example, game session or collaboration session that many players/editors read all the time - memcached would do the trick). Memcached is certainly NOT a replacement for a database, so if you have for example 300000 rows of tax records, memcached is probably not the place to store them. Opcode caching eliminates load/parsing times and makes PHP invocations cheaper. In production, I use APC in "stat off" mode (which means you need to restart the server or the cache every time you make a change in PHP source files, but you save on the expensive stat() calls). You can always deploy both, but most bottlenecks are in IO, particularly the databases.
a.) If you are using mysql, you can't use transactions on myisam, only on innodb. Innodb is generally slower than myisam. b.) if you are using transactions, you are locking the tables (or rows) for a longer time. that means db-writes for other (concurrent users) will be slower. c.) even *if* transactions speed up write processes, i still have to come across a website where the writing of data is the bottleneck.
Who could have foreseen that such a problem might arise in a PHP web project?! Performance... the Final Frontier. These are the voyages of the starship PHP. Its five-year mission: to explore strange new web developers; to seek out new blogs and new vulnerabilities; to boldly go where no man has gone before.
&gt;a.) If you are using mysql, you can't use transactions on myisam, only on innodb. Innodb is generally slower than myisam. Why are you talking about myisam at all? I don't know. &gt;b.) if you are using transactions, you are locking the tables (or rows) for a longer time. that means db-writes for other (concurrent users) will be slower. If you take a look at the overhead for row locking works, grouping queries is more efficient. Most performance gains are in joins, but also some for what MySQL considers, very large tables (250k+ rows). &gt; c.) even if transactions speed up write processes, i still have to come across a website where the writing of data is the bottleneck. As per your previous point, the problem is not just writing, but waiting for read access due to locking. MySQL isn't the only database where transactions are faster.
PHP Programmierer günstiger als Freelancer!
I'm not really familiar with DBISAM but had a Google for you, see the third post on this thread: http://www.elevatesoft.com/newsgrp?action=openmsg&amp;group=14&amp;msg=903&amp;page=6 (Copied below) You can use a ODBC bridge for example: 1. Easysoft ODBC-ODBC Bridge http://www.easysoft.com/products/2002/main.phtml 2. Search freshmeat.net http://freshmeat.net/search/?q=odbc+bridge§ion=projects 3. Search sourceforge.net: for example ODBTP - Open Database Transport Protocol http://sourceforge.net/projects/odbtp/ 4. DBTCP http://www.fastflow.it/dbftp/ 5. ODBCRouter http://odbcrouter.com/ I tried #5 myself. Works but requires some work to install #1 works also (tried by my students), much easier to install. 
Thanks dazzled! I'm going to try Option 1 and 5 and will post the results here for any person with the same query in the future. One would think that releasing a php friendly connector would be par for the course these days when developing databases.
Opcode caching won't help with database slowdowns. You need to look at your queries. Try to figure out which queries are bottlenecking you. If you have any queries with large JOINs or sorting large tables, those would be the first to look at. You also need to figure out how fresh/stale of data you can get away with. If you have a CPU intensive query on a page that you can get away with having say 10 minute old data for, setup a cron job to preform the query and put the results into a temporary table or flat file every 10 minutes. If your tables are getting large (200k+ rows or 50MB+) you may want to shard that data into separate smaller tables. Especially if your queries to the tables are complex (JOINs, sorting, using functions in SELECT, etc). For testing, I recommend copying your MySQL databases to a spare server with query cache off, and try manually preforming the larger queries that your database is doing. Make note of the execution time and make adjustments. Your website should never have any queries that take more than half a second at the very least (personally I don't like anything over a tenth).
PHP does have built in ODBC drivers when running on windows, and virtually every database ever has windows ODBC. My solution for a similar case in the past was to build a small web service running on WAMP on Windows to serve data as JSON out to the caller which ran on the Linux server. It's probably not as fast as using a connector, and it's certainly more work, but hey. 
In addition to opcode caching, APC also has the ability to manipulate a local data store, like memcached. Here's a list of the functions available for this purpose: http://php.net/manual/en/ref.apc.php Your example would be translated to something like: $results = apc_fetch('results', $success); if (!$success) { $results = run_costly_query(); apc_store('results', $results, 86400); //expires after a day } return $results;
Here's some good presentations on how Facebook utilizes APC: http://tekrat.com/talks/
I'm very partial to Codeigniter. Great and correct documentation, very fast and Rasmus thinks it's the best "cause it's least like a framework". I know nothing about Django or Rails but people who do say CI is quite like them, especially the latter. It's very light, easy and doesn't force you to work in a certain way. Highly recommended.
Drupal could be seen as a framework, but it really doesn't belong in the same group as the true frameworks. For simple websites, Drupal probably gets you to the end quicker than a "real" framework. For web apps (crm, data management, or unusual sites) - good luck doing that with Drupal. It's got quite a high learning curve, a few bugs &amp; issues and is bloated and slow.
If you look @ application.ini at this line: includePaths.library = APPLICATION_PATH "/../library" You will see that the includePaths that autoloader uses is your application library. What it does is lets say you have a file in there called Class.php with the following: class Class { ... } You don't have to specify that you want to include ../library/Class.php, the autoloader will look at the class name and try to find the appropriate file with it. Now as you get into directories like, library/stuff/Class.php and in your code you call Stuff_Class.php, the autoloader will if the code isn't already included will try to first load up /stuff/class.php if Stuff_Class.php isn't defined. If you look at the Zend library in your include directory you can see that the naming convention inside of Zend mirrors the directory structure. class Bootstrap extends Zend_Application_Bootstrap_Bootstrap You can expect to find the file that drives this class in /Zend/Application/Bootstrap/Bootstrap.php I hope this helps, if you're having problem maybe push your code out to github and share it so it can be looked at.
Is dbisam for .dbx / dBase database files? If so, I've tried the same thing to little or no avail. If you can, just import the files into a real database. I've used MSSQL 2k before to run nightly imports. 
I take it you're addressing how Autoloader works? Really what i was asking is more about the default paradigm used by Autoloader. All I've really done at this point is 'zf create project', put in my database info into application.ini, and am trying to gain access to a users table in the controller by setting a table up as a model. Here's the code for models/Users.php class Users extends Zend_Db_Table_Abstract { protected $_name = 'users'; } However, when I instantiate it in my indexController with $users = new Users(); I get "Class Users not found" So even though I can see that Autoloader sees my /models directory, it doesn't actually load the class. Here's an excerpt from the autoload object I printed out: [model] =&gt; Array ( [namespace] =&gt; Model [path] =&gt; /project/application/models ) That's why I know it *sees* my models directory, I just don't know how to use it, I guess. I've also tried instantiating Users with Model_Users, thinking that's how the namespace is used, but that didn't work either. EDIT: Let me add that I can get the model to load by starting the action with this: require_once dirname(__FILE__) . '/../models/Users.php'; But given the autoloader, I thought it should be able to do it automagically.
Try this =) http://stackoverflow.com/questions/1262358/use-zendautoloader-for-models Also, I'm using http://www.phpactiverecord.org/ with ZF for my projects which you should check out.
I've thought about implementing an ORM. That one looks *really* easy to get going too (just looking at the quickstart). I guess considering I'm just now linking this project up with a database, now's the time to get it going. Thanks for that suggestion! I'll try this StackOverflow suggestion out, though it looks exactly like something I've already tried once. And from what I showed earlier from my autoload object, it *looks* like it's already done that, but maybe it has to be reiterated.
Just wondering how you use php.activerecord, when you setup the initial config, I assume you're doing so in index.php and just putting the database information directly into the config call? Or are you loading it out of a secondary file somehow?
I agree. I kinda make the distinction as there being web application frameworks and web site frameworks. Definitely has a bit of a steep learning curve though; not as bad as symfony, but more difficult than wordpress imo.
http://www.derivante.com/2009/05/21/php-rapid-application-development-with-zf18-and-ar/
i wanna have what you're having :)
Recommending an ORM for performance reasons doesn't strike me ass the best idea overall. Learning to utilise your database properly (Get acquainted with `explain` for a start) is probably a better approach. There are other reasons why an ORM may be a good idea, but performance is generally not one of them. The transactions-trick is a good one though, but only for situations where you do many writes and most web applications don't.
ORMs aren't just for transactions, so equating recommending an ORM == transaction == performance gain isn't what I have suggested. An ORM that uses transactions will be faster for MySQL, in general. Widely used ORMs have already done the research and work to make database access faster. Given the interest, experience, and metrics that ORM developers (and their userbase) have performed, it's unlikely that you are going to be able to make the same informed choices with a couple hours of tweaking through Explain. The discussion is about speeding up serverside, overall. ORMs don't just exist for the active record pattern.
I also drop task-specific schema changes into my version control. At the end of sprints, we also version the entire schema. Schema's are also caught by database backups (from a replication slave), incidentally.
The version of DBISAM I'm trying to access uses DAT, BLB and IDX files. Got in touch with the developers and they have sent me a ODBC driver so I'm thinking of going mike_sol's route with the WAMP server.
I do database migrations, where changes I make to the schema I log into files caught by my version control system. I used to use [DBDeploy](http://dbdeploy.com/) as [Phing](http://phing.info/) has native integration. It's a great tool. The only reason why I don't use it anymore is I use Doctrine as my ORM and it has its own native migration system. Look into DBDeploy, I have some DBDeploy examples on a [blog entry](http://www.toosweettobesour.com/2008/05/15/automating-the-development-workflow/) I wrote way back that could get you started. **EDIT** There are also other options like [liquibase](http://www.liquibase.org/manual/home) which I can't comment on because I've never tried it, some tell me they like it.
I use Doctrine for DAL and schema management.
Thank you very much, I will look into this! 
Here's a cup of Java. The best part of wakin' up The best part of wakin' up ... is Java in your cup. It's JIT-compiled Mountain grown Good to the Last Drop! Runs as well as it caches Flavor Bud Flavor Spring... Everything You Love About Java. One fiddler you won't have to pay Wake up. It's static final private Eight O'Clock Have it your way. If your way is fast. 
I use Navicat's structure Sync.
Doctrine looks like exactly what I'm looking for! I owe you a beer!
Check [this](http://www.agavi.org) out - if you get the sudden sense of "oh, *that* is what I'm looking for" I am buying myself a beer.
&gt; .. so equating recommending an ORM == transaction == performance gain isn't what I have suggested I don't think I did. At least I didn't intent to. Using transactions for performance gains is completely orthogonal to using an ORM. &gt; Widely used ORMs have already done the research and work to make database access faster. Given the interest, experience, and metrics that ORM developers (and their userbase) have performed, it's unlikely that you are going to be able to make the same informed choices with a couple hours of tweaking through Explain. I disagree. ORM's are abstractions and as such can only optimise towards general cases. Using SQL directly - and actually knowing what you're doing - beats using an abstraction.
If you're on a Mac, http://www.sequelpro.com/ There's simply nothing better for basic DB management Edit: this isn't really good for version control across DBs though
&gt; Using transactions for performance gains is completely orthogonal to using an ORM. Ok? In MySQL they are faster. The source of performance gains don't invalidate them. In fact, I've never known an Oracle installation to do a transaction slower than a straight statement. &gt; ORM's are abstractions and as such can only optimise towards general cases. Using SQL directly - and actually knowing what you're doing - beats using an abstraction. This "common sense" wisdom is generally NOT TRUE. Even a simple select in an ORM like Doctrine or Propel is faster than a straight SQL statement (although with a specialized driver or even the drivers provided by an ORM, you might get a marginal gain by using a straight statement). Again, it's not just the ORM that's providing the speedup with a single trick, but a toolbox that someone in the specialized field, has assembled for you. A widely used ORM will improve performance.
About 7 months ago I was in the same boat as you, and ended up building my own. You're right about it being a pain. [Here's the one](http://code.google.com/p/mortar/source/browse/trunk/system/library/Imap.class.php) I wrote myself for a project (Mortar). Unfortunately the only documentation for it is DocBlocks in the code itself, but its fairly easy to use. Its just about completely stand alone and I've pulled it out of Mortar to use it stand alone a few times. There are a few changes you'll want to make to integrate it into your own project, but thats all documented at the [bottom of the file](http://code.google.com/p/mortar/source/browse/trunk/system/library/Imap.class.php#1177). If you have any questions I'd be glad to help further.
Many thanks! I will have to start playing around with it for a bit, I'll let you know if anything comes up. BTW, very neat and well documented code.
Thanks for posting, amazing app!
&gt; Ok? In MySQL they are faster. The source of performance gains don't invalidate them. In fact, I've never known an Oracle installation to do a transaction slower than a straight statement. You don't understand what I'm saying, do you? I *agree* with you here - transactions *can* improve performance. ORM or not ORM. &gt; Even a simple select in an ORM like Doctrine or Propel is faster than a straight SQL statement ... Care to explain that? &gt; .. but a toolbox that someone in the specialized field, has assembled for you. A database specialist can not optmise towards the needs of a particular application - She needs to target a very wide selection of usecases. If you know something about databases *and* know the particulars of an application, you can optimise to a much more specific usecase. Performance is not some magic fairy dust that you can plug in to your application - It's the product of knowledge applied to a specific situation. &gt; A widely used ORM will improve performance. Only if the user is incompetent.
i used this guys code before: http://php.net/manual/en/function.imap-fetchstructure.php#54438 it seems to work pretty good
Zend Framework has quite few [classes for dealing with mail](http://framework.zend.com/manual/en/zend.mail.read.html). I haven't used them yet, but I would certainly look there next time I need something like this.
&gt; You don't understand what I'm saying, do you? You're right, I didn't understand. &gt;&gt; Even a simple select in an ORM like Doctrine or Propel is faster than a straight SQL statement ... &gt; Care to explain that? It's demonstrable. SQL queries will be faster in both. &gt;&gt; A widely used ORM will improve performance. &gt; Only if the user is incompetent. This is where we disagree. You think the ORM itself adds overhead due to enforcing a pattern (in addition to the raw sql statement). I am saying that view is too narrow when taking into account that script to database interactions are not limited to raw query execution.
&gt; It's demonstrable. SQL queries will be faster in both. Please; demonstrate. &gt; You think the ORM itself adds overhead due to enforcing a pattern (in addition to the raw sql statement). I am saying that view is too narrow when taking into account that script to database interactions are not limited to raw query execution. Not exactly. I'm claiming that ORM abstractions makes it harder - if not impossible - to optimise towards the database. It's a good example of a [leaky abstraction](http://www.joelonsoftware.com/articles/LeakyAbstractions.html).
You could pull something out of any e-mail client - horde, squirrel mail, etc.
I actually tried that myself before breaking down and building my own, its not nearly as easy as it sounds. A lot of them have internal dependencies, and the squirrel mail on in particular is pretty dense as it doesn't use any of the built in imap support (my guess is that when it was originally written less people had the imap extension installed).
Doctrine or Propel both eventually run an SQL statement, however they also build that statement. Whether that statement is run by your ORM or directly, the statement itself is going to take the same time to run. If you're not using an ORM tool to build the statements, then you're lowering overhead. The Doctrine/Propel classes are not going to optimize the statements- they don't know what indexes are, unless you supply them (just like with regular SQL). They are not by any means designed to speed up performance- they are designed to reduce the amount of time a developer spends writing sql. To put it plainly- SQL &lt; ORM STATEMENT Generation + SQL
Again, the SQL statement itself is not the only optimization available. I am a broken record. Per database, this can be a large set or small set. Regardless of DB, the knowledge of available tools and optimizations is not the specialty of most developers. ORM developers are more aware and make better use of information than web developers do as a nature of function. An obvious example...is there any doubt there are performance differences in simple versions of drivers? Why are people talking about performance of raw sql statements?
&gt;&gt; It's demonstrable. SQL queries will be faster in both. &gt; Please; demonstrate. I've fallen into the trap again, of trying to convince rather than educate. So I'll stop with this. I can list off benchmarks without rhyme or reason and have you "wtf" or question to no end, like so: Doctrine 2: 0.0094 seconds // Using Doctrine 2 to insert 20 users for ($i=0; $i&lt;20; ++$i) { $user = new CmsUser; $user-&gt;name = 'Guilherme'; $user-&gt;status = 'Slave'; $user-&gt;username = 'gblanco'; $em-&gt;persist($user); } $s = microtime(true); $em-&gt;flush(); $e = microtime(true); echo ($e - $s) . "&lt;br/&gt;"; mysql_query: 0.0165 seconds $s = microtime(true); for ($i=0; $i&lt;20; ++$i) { mysql_query("INSERT INTO cms_users (name, status, username) VALUES ('Guilherme', 'Slave', 'gblanco')", $link); } $e = microtime(true); echo ($e - $s) . "&lt;br/&gt;"; so I'll allow you the honor of doing what a real engineer would do, run tests yourself. &gt; I'm claiming that ORM abstractions makes it harder - if not impossible to optimise towards the database. The law of leaky abstractions isn't really a law, nor is it well defined. A software abstraction itself has no specific bounds, so it's almost meaningless. Most ORMs aren't just made up of the data abstraction (ORM) but also exploits the behavior of databases (or a specific database) as well as the implementing language. There are also general performance gains from predictive behavior and caching, that may or may not be native to the ORM. You've acknowledged my point, but failed to understand, which is unfortunate. Suggesting an ORM wasn't for your specific benefit anway. I hope others can learn from this discussion. 
&gt; I've fallen into the trap again, of trying to convince rather than educate. Then educate me. Because no matter how hard I try, I can't make sense of what you're saying. Convincing me would be a great first step in that direction. &gt; So I'll stop with this. I can list off benchmarks without rhyme or reason and have you "wtf" or question to no end ... You're damn right I will. Unless you present some facts, of course. &gt; ... some random php code ... That's nice and all, but that's only like 1% of the code you're actually running. Put the testcase somewhere where I can get it and run it. From glancing at it, I'm assuming that `$em` is some kind of unit of work pattern that collects all the inserts and run them together in the end. If I were to insert multiple rows in a database, I would open a transaction, prepare a statement and reuse that, before committing the transaction. I'm pretty sure you'll see some different numbers then. Anyway, you said that a simple SELECT query was going to be faster. This is an INSERT query. &gt; You've acknowledged my point Which one? &gt; .. but failed to understand, which is unfortunate. I would like to understand, but something is preventing me. Maybe I'm dumb. Or maybe you're not good at communicating. &gt; Suggesting an ORM wasn't for your specific benefit anway. There are lots of benefits from ORM's. But this discussion was about performance, and I'm refuting your claim that an ORM is inherently better performing than well crafted SQL. &gt; I hope others can learn from this discussion. I'm not sure what they would learn.
We have development, test and production databases. Test is obviously for testing code that accesses these databases and for testing applications against schema changes. Development is where me make drastic changes to the database schema - after we're done a SQL file is generated for version control. That file is then executed on the test server, and Python migration scripts copy data from the production server into the test server taking the new schema into account, at which time we can test our applications against the new schema. Finally, when we're confident the applications are working correctly, we schedule a short period of downtime (usually takes less than an hour). During this downtime we run our Python scripts one last time to get all of the data from production to test, we then make a backup of the production database (in case, we need to fallback and try again another day) and drop it from the server, we then recreate the production database and mirror test into it. We've found this works best for us since there are so many bits and pieces touching this database. We use "development" for development of the actual database (normalizing, schema changes, etc), "test" for the development of applications, and production is obvious.
I would recommend CodeIgniter but you said you are specifically looking for something to Django (which CodeIgniter nor Kohana are in anyway similar). CakePHP would probably be the most similar and easiest for you to relate to.
Why would anyone use 20 different queries for an insert like that? Yes, ORM can be better than purposely fucking things up, but most people would be smart enough to use the MySQLi libraries and a stmt instead of running raw, individual inserts and a library that has been kept only for backwards compatibility. So I'll give you that point- ORM has potential to be faster and someone who knows next to nothing about how to work with databases. However, when you assume the developer isn't retarded you're going to find completely different numbers. This is pretty simple- * ORM libraries build SQL statements. * Building SQL statements "automatically" has overhead each time its generated. * There is nothing preventing a developer from building those same statements themselves. * When a developer builds a statement, it doesn't require overhead for each script. The statements built by ORM libraries are not magical or special- they can't force MySQL into being faster, for instance. The small tricks they use for speed- such as pooling inserts- is ridiculously easy to do on the programatic level and doesn't require an ORM. ORM does have some downsides when it comes to performance as well. It doesn't have the ability to run an "explain" statement to see where bottlenecks are and adjust the query accordingly, because its essentially blind to the system. That means, especially for complex queries, performance is going to take potential hits against developer created sql. SOURCES- [Avoiding ORM Performance Pitfalls](http://www.realsolve.co.uk/site/tech/orm-performance.php) [The ORM Debate: Experts Weigh In](http://java.dzone.com/news/orm-debate-obsolete-technology) &gt; But in order to use an ORM, you're going to have to live with some sacrifices. You're going to have to sacrifice some performance because again, an ORM is useless without data connectivity. And so the ORM is built on top of the driver. Again you have the ability and the query language - I'll take JPQL for instance. It's an object-based query language. So you can query your objects but when that object model gets down to the wire level, it still has to be translated into a SQL statement before going into the database. And so you have to live with giving up a little bit of your control of your SQL statements in order to use the more ease-of-use features of an ORM model." 
Well Drupal is far from thin. it depends on a few things... such as the life of this project. and projections for whats to come. drupal is nice if you want something quick, powerful, and you arn't going to maintain for the life of the project( IE your selling a website to someone) IMHO
http://www.amazee.com/ is built on Drupal - you might try and reach them via http://twitter.com/Amazee/ for their thoughts on doing something serious with it. That said... &gt; As it looks, the entire model layer is going to be implemented on a different platform and connected to via web services. I'm looking for some articles/blogposts about how to use Drupal as a thin presentation layer, rather than the CMS it is from the outset Don't know Drupal 1st hand but it's said Drupal is "everything in the DB" - I wouldn't expect a good match there. You're probably going to need to choose a "lower level" framework e.g. Symfony or Zend if it's only PHP on the cards.
Why would you use a CMS like Drupal for the presentation layer? Seems like a very odd solution. What it seems you need is something that's essentially an rss/xml parser. Why don't you just use something like XSL transformations to generate whatever xhtml files you need?
Have you tried [fpdi](http://www.setasign.de/products/pdf-php-solutions/fpdi/)? It is made to take existing pdfs and import them into fpdf. From there you should be able to use a form or fpdf's javascript input plugin to add new data.
I remember looking at that and dismissing it after reading that it couldn't do search and replace for text (couldn't find a link on that). It also strips dynamic content (in the about page "What it can't do" section). From my mediocre understanding of PDF, I would need forms and the like to have a semblance of search and replace functionality. In the scenario you provided, how would I know where to put data onto the PDF? Example: I need an image at x=0.5" and y=0.9". With the fpdi imported pdf, how would i know those coords? From the short reading, it doesn't seem like this would be possible. 
No no no no no don't do it you will regret it. I thought it would be a good idea about 1.5 years ago and it's a total PITA.
&gt; You're going to have to sacrifice some performance because again, an ORM is useless without data connectivity. I don't ignore this fact. This has become less important, over time because if there is an assumption that an ORM can consist of more than a data model (connectivity facade) it is logical to include other concepts like caching, transactions, and lazy loading. Of course there is a seemingly unnecessary cost per interaction. This is also true of frameworks, in the space of server processing. To say the cost of an abstraction in a per-case basis scales to a complete loss, is disingenuous, in that there is no accounting for the overwhelming gains described and realized in use. People don't use ORMs because they are slower, but because they are faster, overall. &gt; The small tricks they use for speed- such as pooling inserts- is ridiculously easy to do on the programatic level and doesn't require an ORM. Optimization often seems trivial in retrospect. During real-world development, it's inefficient to add, remove, track and validate such code. Session tracking versus user authentication versus &lt;other&gt;. At almost any stage of development, optimizing how query execution is increasingly unclear, without having a layer dedicated to that task. Most "ORM" packages are specialized for that in this regard. Even if it is not optimal in some cases, it can be changed at a nominal performance cost, at specific bottlenecks. With an ORM you have the benefit of both, without an ORM you have the benefit of what you can do on your own. If there is a performance problem in a webapp that is not using an ORM, I would recommend an ORM.
Kohana 3 is out but the documentation is nonexistent and the extra modules are nowhere to be found. To me it is useless.
I'm using Drupal as a framework for my PHP apps. I settled on it few years ago after tirelessly looking at available PHP frameworks at that time. Unless you really need for speed, Drupal is fine. The menu system act as request dispatcher (route) and there's Form API which quite helpful in my case. You also got auth stuff with user management for free. Using Drupal, I can just go write my functions to handle the request without having to think about how to authenticate or manage my users. But that was 3/4 years ago. Today I rather use Django or Pylons for any web apps I'm going to develop. Drupal still good for CMS though.
Actually, my bad, you are right on that. I use it to fill out pdf forms, but I know where I need to put stuff ahead of time. In a dynamic setting, it really doesn't fit the bill. I don't know there is a php mod that can do that. Xpdf has pdftotext and pdfimages, but that just extracts them and I don't think saves any settings. Python has a module called PDFMiner that I believe does all that you would need. Not that I know if that's an option for you if you can't find a way to do it with php. 
PDFMiner looks fantastic! Looks like I'll be learning python. Thank you so much!