selam 
Its gaining popularity now, so we can expect some new distict features in the near future. :-)
Good thing we all speak Turkish...
Hi again. So, after testing and digging into this, i think the issue come's from the submit pool method. Indeed, the submit is sending a job to the next worker, but it keeps the very same order like worker 1 : jobs 1, 4, 7 worker 2 : jobs 2, 5, 8 worker 3 : jobs 3, 6, 9 No matter what, submit seems to send in this order even if workers 2 and 3 are free when coming to jobs 4 &amp; 7 :(
To be fair, people could'of've'have said the same when Twig came out, and stuck with Smarty forever, if people don't try new things, then we'll never find something better :-)
It's either could **HAVE** or could**'VE**, but never could **OF**. See [Grammar Errors](http://www.grammarerrors.com/grammar/could-of-would-of-should-of/) for more information.
Thats wrong. Twig auto-escapes.
Try /r/phphelp
me god, up where we is living me words canny be fine init :(
&gt; All architectural components communicate via input and output. But, conceptually, there is a difference between "the output we send to the source of our input" and "the output we get from a system we depend on after sending input to that system". Therefor &gt; you can just as successfully argue that an SQL query sent to a database is "the view" is not true. So lets look at the incoming HTTP request and outgoing response in isolation, without bringing databases (or webservices the application we're looking at is consuming) into the picture; they are not relevant. Starting at the request side of things, I would reason that any cookie is a part of the input. It is part of the input, because it is a "thing" that the user has and the application needs to do what the user wants to do. The same goes for the URL. Look at this page we're on right now; the controller needs the id in the URL to know what article it should get the comments for. Any request headers are also a part of the input; for instance the controller can use the accept header to figure out what view it should use, what language the user wants, etc (the cookies are off course also just headers). Where the browser gets these things is not relevant to our application; back when the session id was stored in the URL instead of a cookie, every other aspect of how sessions worked was the same as it is now. Just because the way this data is communicated by the browser does not make it any less or more "input". If we can agree that every aspect of the request is input to the controller (in we can't, the rest of this it moot), lets talk about the view and the response. The way I see things, the view encompasses everything that is needed to "show" the user the result of their request. For a cookie that is set after login, the "result" is not a page saying "hi john, you're logged in now". The "result" of a login request is the fact that for every request after that, the application will know "oh, this is john". Again, where the browser stores these things is not relevant to our application. For a (successful) login request, the view is pretty much always a redirect + a cookie. Saying that the HTTP headers are not part of the view then means saying there is no view for a successful login request, which doesn't make sense, because that means it is impossible to "show" the result to the user.
Looks like it is possible, if you write your own 'sniff'. In [this tutorial](https://pear.php.net/manual/en/package.php.php-codesniffer.coding-standard-tutorial.php) the file is passed to the process() method. 
Twig is objectively better in every way than Smarty - syntax, features, support (keeping up with PHP). This, however, is clearly not and from description does not look up to par with Twig. There is a crapload of stuff Twig has and you actually use in everyday work that it is practically impossible to find a substitute.
Agree, but exploring something new gives an idea about what deficiencies we may have in the current system one uses. So the idea is to basically explore new horizons not enforce them.
Thanks, thats correct, if we never explore new stuff we will never be able to achieve better results.
I would agree if it had something new in it. As far as I can see - there is nothing new or unique about it. Just another run of the mill template engine. It's not bad, it's just why even bother when there is a global standard most people know and that is a true standalone templating engine that is not attached to any framework.
I guess this is what you need to do in Twig to start Autoescaping: {% autoescape %} Everything will be automatically escaped in this block using the HTML strategy {% endautoescape %}
Problem is - there is absolutely nothing new in there. It's just another run of the mill template engine that was born together with Nette framework.
Coding is not a guessing game ;D &gt; When generating HTML from templates, there's always a risk that a variable will include characters that affect the resulting HTML. There are two approaches: manually escaping each variable or automatically escaping everything by default. &gt; Twig supports both, automatic escaping is enabled by default. https://twig.symfony.com/doc/2.x/templates.html 
I would... If there would be something new to explore...?
Much bias here I see. Twig is escaping output by default. If you want a raw output - you use a **|raw** filter.
Thanks for correcting me. Was not aware of it. :-)
So when for some reason the connection is gone, I have no CMS? Wow.... I want full control, also about patching and so on. You can always decide if a patch is necessary or not.
Good to see some phalcon stuff
_cringing at the first paragraph_
[@Rhysbeingsocial's latest tweet](http://i.imgur.com/u9yH4Ov.jpg) [@Rhysbeingsocial on Twitter](https://twitter.com/Rhysbeingsocial) - ^i ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
The last example is right not to work, precisely *because* it violates LSP! You're claiming that Bar implements Fooable, where Fooable guarantees a method test that takes any object of type A. However Bar only provides a subset of that functionality - its test method only accepts objects of type A that are *also* of type B. Any function that type-hinted against Fooable should reasonably expect to be able to call `$obj-&gt;test(new A)` without error. Look up covariance and contravariance for more details. As for why scalar types only give warnings...¯\\\_(ツ)\_/¯ php
Ok thanks for the reply, will do!
[Remi is love; Remi is life](https://rpms.remirepo.net/enterprise/6/)
&gt; I agree that the server never knows there is a user on the other end, or just another piece of software requesting stuff, As far as the server is concerned, it's *always* another piece of software on the other end; *that* is the "user" as far as the server knows. (That other piece of software might have a human running it or not.) This is another highlight, for me anyway, as to how using a GUI pattern to describe over-the-network exchanges is not so great.
Ah right, the first parameter of process() is the file object. Thanks, I thought it only worked on tokens themselves.
I couldn't care less about the extra newline, missing space, etc. What I do care about is the completely useless diff that mixes styling fixes and functional changes that I get to review. A small story: I once worked on a project with two other developers that both had the habit of using the auto-format feature of their IDE. Even though we all used the same basic styling in our code, somehow, one of them had configured a space where the other had configured no space. Initially, this didn't cause any problems, because they weren't changing the same files much. But over time, a bigger and bigger percentage of the changed lines where simply adding or removing a space (and sometimes, the auto-format happened while adding some debug statement that was later removed, meaning the file had no changes other then those damn spaces). Believe me, those code reviews where no efficient. :|
I toned it down, thanks for the feedback. After watching that [Phalcon quick start video](https://www.reddit.com/r/PHP/comments/6u5xbd/phalcon_devtools_quickstart/), I was very surprised that it took less than 10 minutes to get setup. I have often eyed, even admired, Phlacon from afar but stayed away because it looked too complicated. The built-in web server approach was a pleasant surprise. Personally, I use Vagrant with Ngnix to develop for production and worked at places that have used Docker. I'm not trying to imply that you should be using the built-in web server for everything, but for quick prototyping and trying out new frameworks it's very convenient. 
I always try to avoid installing things on my local machine. I prefer to use either vagrant or docker (using docker docker in these past months). It seems there is a lot of docker phalcon related stuff: https://hub.docker.com/r/phalconphp/
Question here. In the case of building a blog, should I use a framework such as Laravel or Wordpress? Or should I build it as an "standalone" application. Because I think using a framework is a little bit overkill for the purpose of a blog, and also I don't want an admin panel. In the case of being the standalone one how would you start to make it, structure it, would you write everything from scratch or use packages? I'm lost in this kind of topic, because I've built websites in php from scratch but just for learning purposes. Also I don't know if this thought is correct but I always tend to think that standalone is faster than framework.
It's not a type-hinting issue so much as a class extending vs. interface implementing issue. See: https://3v4l.org/mKLsi That code doesn't use type hinting at all, it just removed the parameter from test() on the subclass. It still results in only a warning vs. an error. Perhaps someone with deep internals knowledge, like /u/nikic, could chime in on why this is only a warning.
Even the fact that the server is just acting upon request and not doing stuff on its own, still make a micro framework=user interface a half story. The UI part always is there to assure people can understand what the machine did.
&gt; The UI part always is there to assure people can understand what the machine did. This is a conflation of "what the browser renders into the GUI for a person to look at" with "what the client and server send back and forth to each other." They are two different things, and part of what why I'm trying to make the distinction.'
huh, well I'd consider that pretty unexpected behavior. I haven't done more than toy with pthreads, but I'm glad you pointed this out.
Maybe if you put `PHP7 Development`. then it doesn't looks like you're advocating it for a production use case, which is what it looks like. Looks like "Hey guys, you dont need a webserver to run your php7 apps, just use the built in one"
&gt; but some I'll take "some" over "none" -- thanks. ;-)
I believe you have written my reply to Aramaki for me, /u/jorygeerts -- nicely done, and thanks. :-)
Added, thanks.
FYI, i've sorted this out \o/ Dam that was a fuc**** headache ! Here is my code, output below ! As you can see on the output, i got my jobs distribute evenly between workers 1 &amp; 2 while worker 0 is running a long job ! &lt;?php class ChildThread extends Threaded { public $workerId; protected $complete; public function __construct($workerId){ // init some properties $this-&gt;workerId = $workerId; $this-&gt;complete = false; } public function run(){ // do some work echo " STARTING " . $this-&gt;workerId . "\r\n"; if($this-&gt;workerId == 0){ sleep(10); } else { sleep(1); } echo " ENDING " . $this-&gt;workerId . "\r\n"; $this-&gt;complete = true; } public function isComplete() { return $this-&gt;complete; } } $WORKER_COUNT = 3; $workers = array(); for ($i=0; $i&lt;$WORKER_COUNT; $i++) { $worker = new Worker(); $worker-&gt;start(); $workers[] = $worker; } $tasks = array(); //Create 9 jobs for ($i=0; $i &lt; 9; $i++) { $tasks[] = new ChildThread($i); } $cptTasks = 0; //References for running jobs $taskss = array(); while(count($tasks) &gt; 0){ foreach ($workers as $key =&gt; $worker) { if($worker-&gt;isShutdown()){ echo "Shutdowned worker ".$key.", restarting it !"."\r\n"; $worker-&gt;start(); } //If worker is free of charge if($worker-&gt;isWorking() === false ){ //Check if task not null if(isset($tasks[$cptTasks])){ echo ("Stacking job ".$cptTasks." on worker ".$key."\r\n"); $worker-&gt;stack($tasks[$cptTasks]); $taskss[] = $tasks[$cptTasks]; //Clear job from jobs list unset($tasks[$cptTasks]); $cptTasks++; } } } usleep(2000); } //Clear workers foreach ($workers as $key =&gt; $worker) { echo "Shutdown worker : " .$key."\r\n"; $worker-&gt;shutdown(); } ?&gt; Output : &gt; Stacking job 0 on worker 0 &gt; Stacking job 1 on worker 1 &gt; Stacking job 2 on worker 2 &gt; STARTING 1 &gt; STARTING 0 &gt; STARTING 2 &gt; ENDING 1 &gt; ENDING 2 &gt; Stacking job 3 on worker 1 &gt; Stacking job 4 on worker 2 &gt; STARTING 3 &gt; STARTING 4 &gt; ENDING 3 &gt; ENDING 4 &gt; Stacking job 5 on worker 1 &gt; Stacking job 6 on worker 2 &gt; STARTING 5 &gt; STARTING 6 &gt; ENDING 5 &gt; ENDING 6 &gt; Stacking job 7 on worker 1 &gt; Stacking job 8 on worker 2 &gt; STARTING 7 &gt; STARTING 8 &gt; Shutdown worker : 0 &gt; ENDING 8 &gt; ENDING 7 &gt; ENDING 0 &gt; Shutdown worker : 1 &gt; Shutdown worker : 2 
I think jorygeerts has provided the bulk of a reply for me already; I'll address this separately: &gt; We've seen why ADR is worse (session and cookie management turns into a mess). Session management in PHP "turns into a mess" *not* with the introduction of ADR. It "turns into a mess" with the introduction of Request and Response objects; PHP's built-in session management system, especially its cookie reading and sending in relation to sessions, is difficult to intercept and inspect. (Cookie management itself is easier to deal with.)
It seems like I might as well use a command bus in that case. Which is something I should consider, perhaps.
Interesting post. thanks!
Followup: one of the issues I addressed above is solved in PHP 7.2: https://wiki.php.net/rfc/parameter-no-type-variance
Yes, Phalcon is finally catching on!
Looks a lot better :)
&gt; I think jorygeerts has provided the bulk of a reply for me already All /u/jorygeerts did was again argue "it's input, therefore it's view input; it's output, therefore it's view output". I'm afraid this doesn't follow. There's nothing about input/output that mandates the component on the other end is a view. And despite the logical contortions to make cookies a "view" of some kind (pure nonsense by the way), what is missing in both their replies and your reply is **a pragmatic reason for this architecture**. I did ask: don't argue abstract concepts and noble truths, instead give an example that shows ADR is **better in practice**. If no one can provide such an example, then I must conclude ADR was not designed with any in mind, and it's just, pardon the phrase, a bunch mental masturbation on abstract concepts and notions, with no practical purpose at all. If ADR helps you be more "conceptually correct", while it makes a practical mess in the codebase, then the concept is wrong, and you need to go back to the drawing table, because ADR doesn't deserve to exist in its current form. &gt; Session management in PHP "turns into a mess" not with the introduction of ADR. It "turns into a mess" with the introduction of Request and Response objects; Strange, I also have Request and Response objects, but cookies and session management don't turn into a mess. You're very good at blaming someone else for your own design's faults. Well, not very *good*, rather very *persistent* at doing it, I guess. &gt; PHP's built-in session management system, especially its cookie reading and sending in relation to sessions, is difficult to intercept and inspect. (Cookie management itself is easier to deal with.) Absolute false. session_start(['use_only_cookies' =&gt; true, 'use_cookies' =&gt; false']); There we go. Now you set the id, read cookies and write cookies. Also the design flaw of ADR that turns sessions into a mess has nothing to do with *PHP's sessions*. Even if you implement sessions *from scratch*, you still have the same problem of the Action needing to work with sessions and cookies, and then explicitly passing the cookies to the Responder *in every single instance*. You blame the concept of sessions, you blame PHP, you blame PHP's session implementation, you blame Request and Response objects, but truth is it's full of frameworks that use all these, and no, they don't make a mess of sessions and cookies. Only ADR does. It's time to look in the mirror and blame the guy there.
I didn't say "use auto-format with different settings on every machine" so your example is not relevant.
&gt; I would reason that any cookie is a part of the input. As I was exceedingly clear in the comment you're replying to, I'm not arguing *what's input and what's output*. SQL result sets are also input, and you can't wave this away with "let's not talk about databases". That's simply not serious. We will talk about databases, and about models, because if we apply the mental contortions you apply to turn cookies into a "view", then suddenly everything is a view. All the models are views and SQL is a view, everything is a view. Showing something is *input* and showing something is a *view* are two separate things. We've always agreed on the former, and you've failed to demonstrate the latter. &gt; It is part of the input, because it is a "thing" that the user has and the application needs to do what the user wants to do. The user doesn't see or interact with cookies. So that argument is instantly out. &gt; The way I see things, the view encompasses everything that is needed to "show" the user the result of their request. Cookies aren't shown to the user. So that argument is instantly out. &gt; For a (successful) login request, the view is pretty much always a redirect + a cookie. Looks like you don't know the definition of a "view". A view only renders a model. It's **not a model itself, it holds no application state**. Your definition of view is "any outcome from an action, including application state changed". By that definition, any changes resulting from a login, including setting the user id in the session, which may be stored in a database, is a part of the "view". That's obviously non-sense. So you and /u/pmjones need to maybe go read again what a view is, and stop confusing "action outcome" with "view". The view is simply the *display* of the outcome, it's not *the outcome itself*. The outcome of an action is *domain models being queried or changed in some way*. And the view merely displays the query or change. Hence because cookies aren't merely a display of model state defined elsewhere, but they *are the state itself being changed*, they're not a part of a view, they're a part of a model. And I realize this is not as simple as what ADR sells you, but unlike what ADR sells you, this is the truth of what cookies represent between HTTP client and server. And if you ignore this truth, you make a mess of sessions and cookies like ADR does, and then Paul blames it on the entire world, but himself.
When does the documentation for 7.2 go live? Is there a staging site for viewing documentation? The [wiki entry](https://wiki.php.net/todo/php72) doesn't have any information, and I'm looking for information on using the new sodium extension (/u/sarciszewski's guide assumes libsodium, and some of the methods were removed in the transition to PHP core).
Fair points. This is one iteration of the code. They'll be more passes that improve upon some of the things you mentioned.
Yes. I recommend tactician (https://tactician.thephpleague.com) of php league im my post. 
do you basically did your own pool management. I was hoping it wouldn't come to that, but good job making it work.
&gt; I'm not arguing what's input and what's output. And I'm not arguing what's "view input" and "view output." &gt; Showing something is input and showing something is a view are two separate things. I agree. I'm showing something is "input" (a Request) and something is "output" (a Response). The thing that ought to be responsible for producing the output, in the user-interface portions of the system, is (in MVC) the View, or (in ADR) the Responder.
&gt; what is missing in both their replies and your reply is a pragmatic reason for this architecture. The pragmatic reason was stated: *something* has to produce the cookie header that gets sent to the user agent. In webbish MVC, that usually ends up being the Controller, because View systems (typically template systems) are generally recognized as dealing only with the body of a Response (the part that a human user sees in a browser). The Controller is the only other even-slightly-reasonable place to do anything related to headers and cookies. The pragmatic reason, then, is to cleanly separate the building of the Response from "everything else" instead of mixing it between Controller and View. Thus, in ADR, the Responder is what should be setting cookies, and all other headers, and building the body of the Response. &gt; &gt; PHP's built-in session management system, especially its cookie reading and sending in relation to sessions, is difficult to intercept and inspect. (Cookie management itself is easier to deal with.) &gt; &gt; Absolute false. &gt; &gt; `session_start(['use_only_cookies' =&gt; false, 'use_cookies' =&gt; false']);` &gt; &gt; There we go. Now you set the id, read cookies and write cookies. This is almost exactly what I suggest for cookie handling in PSR-7 [here](http://paul-m-jones.com/archives/6310), though there are also the cookie expire and limiter values to consider, along with regenerated IDs. That is also one way of dealing with sessions in ADR, to make sure that Domain work does not emit cookies. At this point I'm not actually sure what you're arguing any more, since I've covered a lot of this already elsewhere.
But why? Who asked for this?
Silence! This is a gift. Accept it with gratitude or indifference. It has no teeth or mouth.
PHPStorm
I'm sure no one has mentioned this but PHPStorm is great
It has WordPress support built in: https://confluence.jetbrains.com/display/PhpStorm/WordPress+Development+using+PhpStorm 
Have used PHPED and it's okay, but it seems really clunky to me and only runs on Windows (I believe). I'd recommend PHPStorm but if you're only *occasionally* editing PHP code, it might not be worth the money. Might be better to get sublime. 
&gt; The pragmatic reason was stated: something has to produce the cookie header that gets sent to the user agent. The Action can do that on the Response object. Problem solved. So, does that make ADR useless now? &gt; The pragmatic reason, then, is to cleanly separate the building of the Response from "everything else" instead of mixing it between Controller and View. That's not a pragmatic reason. We can allow the Action/Controller to set headers, and you've been unable to point out a drawback to that approach. Sigh, looks like we need a refresher on what "pragmatic" means: Pragmatic: dealing with things sensibly and realistically in a way that is based on practical rather than theoretical considerations ------------------------- So, what are the *practical rather than theoretical considerations* here? What does it means "cleanly separate". Why should we? In just about all HTTP systems, including the PHP built-in one, headers are buffered. Means it DOESN'T MATTER WHEN THEY ARE DEFINED, because they're only sent when the body output begins. So, I'm asking again: what pragmatic problems does ADR solve. What does ADR make *better in practice*? &gt; This is almost exactly what I suggest for cookie handling in PSR-7 here, though there are also the cookie expire and limiter values to consider, along with regenerated IDs. OK. - First. If you suggest the same thing and know about these options, why did you lie that PHP sessions don't offer control over cookies? - Second. All these options (cookie expiration, name, options, regenerated id etc.) are accessible for reading, so you can channel them through your own cookie abstraction layer. So **what is the problem with PHP sessions here**? There's no problem at all, the problem is in ADR. Stop blaming your problems on everyone else. &gt; At this point I'm not actually sure what you're arguing any more, since I've covered a lot of this already elsewhere. Jesus, is this the kind of short attention span I'm dealing with here? **YOU** said that sessions are a mess because PHP sessions don't give you control over cookies. That's **FALSE**. Now that we've covered you know about the settings I mentioned and you just lied, what is your excuse for sessions and cookies being a **mess** in ADR? Bottom-line is: - Practically, ADR makes a mess of sessions and cookies, having to explicitly pass cookies from Action to Responder. - Practically, ADR provides no benefits in real-world use cases, it provides only theoretical conceptual "cleanliness" of response generation isolation. So ADR basically has no reason to exist. You've been utterly unable to bring forward a single pragmatic consideration for this design. 
&gt; And I'm not arguing what's "view input" and "view output." Yes you're not arguing. You just stated "the entire response is the view" and have so far failed to provide a single spec of evidence or logic in support of this. &gt; I agree. I'm showing something is "input" (a Request) and something is "output" (a Response). The thing that ought to be responsible for producing the output, in the user-interface portions of the system, is (in MVC) the View, or (in ADR) the Responder. Cookies aren't "user-interface", so then by your own definition they don't belong in the View or Responder.
Thank you everybody. Will look into it.
Wait I don't understand. Can you provide more documentation?
Just historical reasons. For interfaces (and abstract methods in general) signature compatibility is kinda the whole point, and it's a fatal error there. For classes (or rather non-abstract methods) it used to be a strict standards warning and was upgraded to a proper warning by https://wiki.php.net/rfc/reclassify_e_strict. For PHP 8 we should be able to make this a fatal error as well.
Check out the code in the .pre files. Stuff like: public function render($props) { assert($this-&gt;hasValid($props)); { $children, $id } = $props; return ( &lt;li className={"task"}&gt; {$children} &lt;a href={"/remove/{$id}"}&gt;remove&lt;/a&gt; &lt;/li&gt; ); } Runs in PHP. Without Hacklang. Pretty incredible. Someone get this man a Facebook share!
Sadly, I cannot. Mostly because more documentation doesn't exist, but also because I'm unsure what parts you need more documentation on. The preprocessor macros (short closures, associative array destructuring, `{$children}-&gt;map` syntax etc.) are from [preprocess.io](https://preprocess.io). I recently, for the purposes of this new syntax, added the ability to register arbitrary code compilers on top of the ability to register arbitrary macro definitions. That brings us to the new syntax itself - the ReactJS (or JSX rather) syntax. It's handled using a slow and somewhat buggy custom compiler. A compiler which can recognize a fair few contexts where tags (like `&lt;div&gt;` and `&lt;/div&gt;`) are inline with regular PHP syntax. It converts those to a token stream, organizes them into an AST and then rewrites them using userland-defined classes or built-in element renderers (to provide a fairly comprehensive rendering of HTML 4/5 primitives). I connected all these things together, in a Silex 2.0 application, to demonstrate how one might build a trite todo application. It seems that's the common benchmark (at least where ReactJS is from) for view rendering frameworks, these days.
$7 - $8 per month seems pretty affordable
Here is what I understand, you are putting HTML into PHP for server side rendering. While this is better than using echo and print with HTML inside of it, the biggest issue is that this is still all server side rendering. There are no Ajax calls, just a traditional web application with a glorified way to use HTML inside PHP. I am not asking why I am just not seeing the value here besides the subjective fastest compiler and best syntax.
That's because Javascript is the devil. Albeit a devil with syntax I dearly covet. 
In the context of the question "don't roll your own is an appropriate response.People rolling their own is how MD5 gets used.
Guess my password ;-) 9E8DA9BF96F1499718638B2C1BD5EEA8 Unsalted MD5
I understand what react is, I don't understand how this is usable in PHP. Like is this a templating language - is he trying to use this ... library? as a templating language?
&gt; I connected all these things together, in a Silex 2.0 application, to demonstrate how one might build a trite todo application. It seems that's the common benchmark (at least where ReactJS is from) for view rendering frameworks, these days. I would take how you did it, what you learned and document that. As well as the "why" aspect. While I appreciate the effort, Why is this better then using PHP as a backend and React as the front end? &gt; That brings us to the new syntax itself - the ReactJS (or JSX rather) syntax. It's handled using a slow and somewhat buggy custom compiler. So its not production ready and it sounds like this is a new or potentially new, templating package for PHP? Inspired by React JS? This is interesting, don't get me wrong. 
&gt; I would take how you did it, what you learned and document that. As well as the "why" aspect. Should hit Sitepoint next month. I started the whole thing with the intention only to write about building simple compilers to try new syntax, and it just became this monstrosity. &gt; Why is this better then using PHP as a backend and React as the front end? It is not objectively better than setting one's house on fire. Of course, if you militantly hate Javascript (as some are in the habit of doing) then it's not an altogether terrible alternative. I mean it is. But it isn't. There have been a few posts about running JS from PHP (via v8) just to be able to get ReactJS or VueJS to run. This is a thought-experiment (albeit elaborate and grandiose) to that end. &gt; So its not production ready and it sounds like this is a new or potentially new, templating package for PHP? Inspired by React JS? All of this. I don't expect anybody to take it seriously. But I do expect it to teach people a thing or two about their ability to extend the language they love (or make new languages to love) with a tiny toolset and no formal education. The point is _anybody_ can do this. They might need to learn a few tricks and spend a bit of time figuring their way around hacks; but I want every developer to understand that they can implement any syntax they desire. That it's not just for the experts and purveyors of best practices to decide how they code. &gt; This is interesting, don't get me wrong. Thank you, and for asking your questions. :)
I have not used it beyond the example app linked to. But if I did, its purpose would only be for component-based template design. Or as a view engine (as ReactJS folks like to define that).
&gt; but there is a license cost that might put it out of the "cheap" category for some In the context of client work, any client put off by the license cost is probably a client you don't want to work with anyway. This of course assumes that the client rejects a solution that is a better fit for their use case over a couple hundred bucks. Thrifty clients are fine, cheap clients are nightmares that make decisions that contradict their stated goals.
First question you should always ask yourself: "What's my threat model?" That is... who are you protecting yourself against? What methods might they have to try to get my data? Heck, what data might I have that is actually valuable? For most people, this might be something like "Well, I'm worried some script kiddie is going to compromise my database and get passwords and bank account numbers for my customers." You've got to look not only at your stack, but are you on VPS? What about a dedicated server? Are you the only person with passwords to access a control panel? etc. If someone roots your box or has full control to everything it's *possibly* game-over. But there are plenty of methods for keeping data secure even if your code + database are compromised. This involves using an off-site key store or encrypting things in a way that are only unlocked when a user provides a password. You can keep all of your code in a read-only partition and store all uploaded files outside of a place where a parser would know to execute them. If you're worried about someone "walking out" with your server then store everything in an EFS or use DB encryption provided by a vendor. Ultimately, you've got to assess: 1. How much is the data worth? 2. How much is this data worth in the wrong hands? 3. What is my legal liability if the data gets compromised? 4. How much trust am I willing to wager to trade off security for speed/ease of development/functionality/etc? 5. What might be the ramifications of a data breech that I haven't thought of? Payment processors that refuse to do business? 6. How much would it cost me to repair any damage done? EDIT: Ultimately encryption on modern hardware isn't all that slow... so I'd generally say if the question is "should I" the answer will be yes.
&gt; The Action can do that on the Response object. Problem solved. So, does that make ADR useless now? Any portion of any system *can* do anything. Setting-of-cookies can happen, for example, in the logging system. That doesn't make it the "right" place. In ADR, the "right" place is the Responder. Honestly, I no longer have any idea what you're trying to argue for, or against.
&gt; You just stated "the entire response is the view" and have so far failed to provide a single spec of evidence or logic in support of this. Like I said, I think it's obvious: in MVC, the View is what gets presented. From the server, the Response is what gets presented. So the entire Response, not merely the body, is the View (or what the View should be in charge of producing). QED.
&gt; Any portion of any system can do anything. Setting cookies can happen, for example, in the logging system. That doesn't make it the "right" place. In ADR, the "right" place is the Responder. &gt; Honestly, I no longer have any idea what you're trying to argue for, or against. I asked why did you decide it's the "right" place, when it makes session/cookie management verbose, redundant and messy. I asked what's on the positive balance, from a pragmatic PoV. You've delivered nothing, you just keep repeating you don't understand what I'm asking. **I'm asking why should anyone care about ADR, when you can't give any sensible, pragmatic reason why you defined it the way you did.** All you provide is circular reasoning: 1. Cookies are in the Responder, because it's part of the Response. 2. The Responder has all of the Response, because that's how ADR does it. 3. ADR does it this way, because it's clean this way. 4. It's clean this way, because it's all the things from the Response in one Responder. Those are so far your attempts at demonstrating ADR as a superior concept. Absolutely zero benefit for people's apps from anything you said. It's mostly just going in circles and concluding with "ADR does it this way because ADR does it this way". Your inability to defend ADR with anything of substance, combined with ADR's demonstrated weaknesses in handling sessions and cookies, which you blamed on everything under the Sun (but are unique to ADR) makes it a very weak effort, that doesn't deserve anyone's attention. Is it clear now what I'm saying? It's probably still not clear, because it's most convenient for you to be confused right now, as you have nothing sensible to respond with. If you dig deeper, you have no idea why you defined ADR this way yourself. It's a solution to a problem that doesn't exist.
In no particular order: 1. [PhpStorm](https://www.jetbrains.com/phpstorm/) 2. [Sublime Text](https://www.sublimetext.com/) 3. [Visual Studio Code](https://code.visualstudio.com/) 4. [Atom](https://atom.io/) 5. [Brackets](http://brackets.io/)
I'm not sure if the doc team has a timeline for it yet, but typically they generate stubs sometime during the RC cycle (RC1 is in two weeks), then they start fleshing it out. There won't be staging, it'll just start showing up in the manual.
&gt; Like I said, I think it's obvious: in MVC, the View is what gets presented. From the server, the Response is what gets presented. So the entire Response, not merely the body, is the View (or what the View should be in charge of producing). QED. The Response is not what's presented, because Cookies are not presentation, and they're part of the Response. The Response is presentation + something else. So, your statement is incorrect, there's no "QED" and you need to correct yourself to account for what I just said.
&gt; The Response is not what's presented All right -- what, to your understanding, is presented by the server to the user agent?
&gt; All right -- what, to your understanding, is presented by the server to the user agent? The **response entity** is presented. That's a *part of the response*, not *the entire response*. So again, correct your statement, so it accounts for elements like cookies, which are not presentation.
&gt;&gt; Any portion of any system can do anything. Setting cookies can happen, for example, in the logging system. That doesn't make it the "right" place. In ADR, the "right" place is the Responder. &gt;&gt; &gt;&gt; Honestly, I no longer have any idea what you're trying to argue for, or against. &gt; I asked why did you decide it's the "right" place, when it makes session/cookie management verbose, redundant and messy. And I said that ADR is not the culprit, per se, it is more the introduction of Request and Response objects. You didn't like that, and so deflected to claiming it's ADR. At this point, we're going in circles, so I'm happy to give you last word if you want it.
For fairly beginner, I would go with Sublime Text. Supports multiple syntax coloring; so you can switch a programming language on the fly by naming properly the extention. An example is: If I name `index.php` it will automatically highlight PHP syntax. Or, if I have different extension like: `script.js` then it will automatically pickup Javascript syntax. Once you get more experienced with the language, I would definevetely reccomend looking at PHPStorm, dealing with medium/large scale projects.
&gt; And I said that ADR is not the culprit, per se, it is more the introduction of Request and Response objects. You didn't like that, and so deflected to claiming it's ADR. Look, you define ADR, not someone else. So you decide what you introduce and what you don't introduce. I think it's time to grow up and start taking responsibility rather than deflecting blame around like a child does. I also use Request and Response objects in my apps, why don't I have this problem? **Why?** Instead of having to manually pass cookies from controller to view or whatever, I just operate directly with four objects: 1. Request 2. Response 3. Cookies 4. Session The second two are injected with the first two, and everything works out without lots of ceremony and boilerplate. Why is ADR "special". What is broken with it that it can't handle a basic session object without manually passing cookies around? Just say it. It's not the "introduction of Request and Response objects". It's ADR that's flawed, because it separates responsibilities **incorrectly**. &gt; At this point, we're going in circles, so I'm happy to give you last word if you want it. As usual! You can't defend a lick of what you claim, blame everyone else, and then "you're happy to give me the last word". As usual, just utterly useless responses from you. Why are you even trying with ADR, I don't get it? - You can't explain why it exists. - You blame its defects on unrelated parties and circumstances. - You don't want to fix it. - You can't defend its faults. - You can't explain its benefits. It's just there, and you keep yapping about how much better than MVC it is, but you can't explain why.
OK, what is the "response entity" -- the body of the response only, or what?
Seriously? The term comes from the HTTP spec, maybe you should do your research on this. But in short, it's the: 1. entity headers (those are **not all headers, but a specific subset of the response headers**). 2. entity body (i.e. the body), when present Go look it up in the spec, there's even a list of headers considered "entity-headers" (mostly those that start with "content-" but there are some exceptions). Most notably cookies are absolutely not part of the entity, and lots of other control/command headers also aren't. And those non-entity headers *suspiciously* match the set of headers you'd want to set in the Action/Controller, and not in the View/Responder. It's as if it was all laid out for you to read, but you ignored it and decided everyone is doing it wrong, interesting right?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
NordVPN. Cheap and has a bunch of features. Pretty quick servers and lots of them.
&gt; entity headers (those are not all headers, but a specific subset of the response headers). &gt; entity body (i.e. the body), when present So your argument, if I understand correctly, is that the server presents to the user-agent only that subset of headers, and the body, and nothing else?
Can you stop bending my words. I'm shockingly clear. The response is not **just presentation**, so the server is not merely "presenting" the response. This is your tongue-twisting, not what I'm saying. What I'm saying is the response contains a presentation part, and that's the *entity*, and entity only. All other response headers and attributes, are *non-presentation* control/command headers which have a different purpose and should not be piled together with the presentation as a single concern of the "view". They're not part of the view, and the browser is not merely a "view". It fulfills multiple roles, and only the entity-rendering GUI is the view, the cookies aren't a view, but a model. This is why ADR is such a chore with sessions and cookies, because it doesn't recognize the difference between entity and non-entity in the response. Ironically, you are the one who failed to separate concerns correctly, not me, or any of the other people who set their cookies in the controller. And now your ADR suffers for it. Unfortunately there's too much arrogance and hubris on your side to recognize the problem, take a step back and reassess. You're trying to stuff words in my mouth to make me sound stupid, but I know the HTTP spec much better than you, evidently, so it's not going to happen.
&gt; The response is not just presentation ... All other response headers and attributes, are non-presentation control/command headers which have a different purpose and should not be piled together with the presentation as a single concern. So this is where your description falls apart for me. Those headers are going to be *presented* to other systems for them to honor or ignore as they are able (and/or see fit). Those headers might not be "presentation of the entity" but they are very definitely "presentation of the server's output."
&gt; So this is where your description falls apart for me. Those headers are going to be presented to other systems for them to honor or ignore as they are able (and/or see fit). "Presenting" is not a synonym for "sending output", so if you want my description of HTTP basics to not fall apart into a void of confusion, disabuse yourself of tying those entirely separate concepts together. A junior developer can explain what's a "presentation layer", "presentation logic" and "presentation concerns" better than you do here. And it's not just "something that receives server output", Paul... &gt; Those headers might not be "presentation of the entity" but they are very definitely "presentation of the server's output." Deep sigh. Keep pushing, keep trying, I'm sure you understand architecture at least a little better than you're showing in this thread. "Presentation of the server's output"? You might've as well said "model of the server's output" (Model!), or "server's output controlling the browser" (Controller!). If you'll be merely playing "let's inject the term in a sentence by using its dictionary definition and ignore its technical meaning" the Response can be absolutely anything. But it's very, very, *very* cheap, absolutely useless and a waste of your time and mine. Leave your ego aside, and go read the HTTP spec, and keep your mind open. Who knows, something might click eventually.
NetBeans is pretty good.
Thank you for your appreciated reply 
Sounds good. The after is definitely cleaner. Renaming $scp to $scope is a definite improvement as is $id to $owner_id. Moving the logic around to show the simplest criteria that would make it viewable first is a huge improvement. The formatting of the code is closer to PSR-2, which is good.
&gt; a waste of your time and mine It is with regret that I agree with you; continuing this conversation in this way will be a waste of time.
I doubt it's with regret. You keep trying to weasel out of every conversation once it gets down to details. If you think a productive discussion is one where you keep trying to trap the other side into "gotcha" situations, playing stupid by suddenly forgetting what I'm asking about, and using basic word-play as arguments, instead of logic, reason and facts, what's there to be gained? You're not trying to receive feedback, you're not trying to learn or to improve. You're looking for someone to confirm and strengthen your existing biases, either by them praising you, or by them attacking you and you "winning". Well, you can't "win" here, so it's time to weasel out! And after all this writing... **you didn't answer even a single of the questions I asked**. You kept dodging everything by answering with word-play, answering something I didn't ask, or "forgetting" and "being confused" what I'm asking about. That's how piss-poor quality of a discussion this was (and this is not for the first time, there's a pattern). I've given you plenty of things to think about, a big reference to read, and I'm absolutely **sure** that you'll learn nothing, read nothing, and you'll change your opinion not even a little bit. Because that's what discussions with you are like. Absolutely superficial, it's like talking to a piece of wood. But hey, maybe I'll get you to change the name of something sometime... As if someone cares.
In the context of before being bad and after being less bad, my only criticism is renaming the variable from $id to $owner_id introduces the only place in the code that is using underscores instead of camel casing.
I don't think this is something you would want to do in PHP, but you could setup an nginx rtmp server. That might do what you want. Otherwise, id suggest maybe using another existing video streaming service such as https://mixer.com or https://youtube.com/
It's so much stupid that i had to star this!
I'll take it!
Thanks for the feedback. Who would start the process to make it an error for PHP8 exactly?
There's also https://github.com/phplang/xhp + https://github.com/phplang/xhp-lib ffor PHP7, not HHVM/Hack, from /u/SaraMG
Indeed, and I've used xhp in the past. Doesn't support PHP 7+ last time I checked and needs to be installed as an extension (unless also using HHVM) and the syntax is arguably worse. But, it is amazing and I am trying to interview the original creator for the upcoming tutorials...
Yeah probably I want nginx. Thats should be good
Yeah probably I want nginx. Thats should be good
If you just occasionally changing code then why isn't something like notepad acceptable? Installing an entire development environment for changing code "occasionally" isn't very smart in my personal opinion... Even if you were attracted for the simple basis of things like syntax-highlighting you could just grab Notepad2 or Notepad++. Those would probably work perfectly for you.
Somewhere on my TODO list is integrating XHP transpilation into https://github.com/phplang/phack but I don't have it as a high-priority atm. PRs welcome. :)
u r most welcome :)
yes they work. But the advantage of an IDE is that they correct and complete the syntax, right? I use Ultraedit since many years, but for code editing I think there are better solutions. But thanks for your suggestion anyways.
From a security point of view: Based on the comments [here](https://github.com/twigphp/Twig/issues/1736) by the maintainer of Twig, Twig doesn't seem to support **automatic context-aware** escaping. It is possible to automatically apply a pre-defined escaping strategy on a template block using [autoescape](https://twig.symfony.com/doc/2.x/filters/escape.html). However, Twig has afaik not the capability to detect the various contexts (e.g. HTML Element, HTML Attribute, URL, etc.) used within a template block and to automatically apply the appropriate escaping strategy. I would be very interested in the results of a security audit on the context-aware escaping functionality in the Latte template engine since there are some mixed-context situations such as those listed in the [OWASP DOM-based XSS Prevention Cheat Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet) which are not trivial to automatically detect.
Well yes, that's true, but the way you made it sound is you'll be spending 5-10 minutes every so often moving things around. If you're actually going to _write code_ then yea, maybe a DE would be a good thing for you. Check out Sublime, or Atom. Both are free (or have free versions) and are extensible.
Who do I have to bribe to add short arrow functions to PHP? It could be so much cleaner... Seriously, let's start a crowdfunding
They were rolled by cryptographers, subject to a good amount of scrutiny from the cryptography community, and came out of that reasonably unscathed. Even a professional cryptographer needs that peer-review phase.
I get it, just kidding :)
Are you on a private network? Do you know it's private? Is there any possibility that untrusted code runs on it? Memcached is totally unauthenticated, which is nice for speed and horrible for security. I've run random port scans at multiple providers and effectively get plaintext (read) access to their database by making requests to port 11211. You don't need to own the machine running memcached to get data out of it. At the absolute minimum, you need to set up your firewall correctly. But it is way safer to store the data encrypted. And make sure your keys don't leak anything sensitive either, since those are also in plaintext.
[removed]
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/RFeggWr.png ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dlrwuzp) 
Amazing - you put HTML back to PHP just where it belongs. Java and C# guys have been trying to take it away so badly with all those patterns and stuff... 5/7
Thanks for following up with the numbers! I'm glad to see it was a fairly low-cost process and that it's important enough for your team to pay it.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Libsodium is same as PECL extension, its just that now it will be part of PHP Core. Check the [rfc](https://wiki.php.net/rfc/libsodium) specially the reference section for documentation. Edit: Fixed the link to rfc.
Was there supposed to be more to this?
http://i0.kym-cdn.com/photos/images/facebook/000/613/025/b64.jpg
In this particular order: 1. PHPStorm - best, but paid, heavier than a simple text editor but not too heavy 2. Netbeans - heavier, free, but completion almost just as good as PHPStorm, less plugins and gadgets tho 3. Visual Studio Code - easy to install and setup, easy to add plugins, fast, free 4. Sublime Text - used to be my text editor, paid, fast, endless plugins but not evolving recently, cant autocomplete PHP satisfactorily 5. Atom - haven't used it a lot but could not get the plugins to complete PHP in a good way
Yes. There was a link, the first poster even responded to the content of it. I have no idea what happened. 🤔
If it's really a blog use WordPress, that's the only thing WordPress is good at. If it has any logic write it with Laravel or other framework of your choice. Use WordPress where it's good at, but don't ever try to bring order to WordPress, it's a chaos and you have to embrace it ;P
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
you were so preoccupied with whether or not you could, you didn’t stop to think if you should.
I agree that a framework like Laravel is overkill for just a blog. Not because it's gonna run slow, but because it's made for large-scale development or rapid application development, and either way, you'll have to implement a lot of blog-specific stuff. Do you not *want* an admin panel, or do you just not *need* it? Because, no, WordPress isn't the fastest piece of software, but it sure works well for what it does. It's hard to argue with how quickly you can get something up and running. Two other more lightweight options: A microframework like [Slim](https://www.slimframework.com/), or a static site generator like [Sculpin](https://sculpin.io/).
With a few days left (CFP closes on August 20), I'll make the same offer here that I made on Twitter: I'm open to chat privately with anyone from an under-indexed group who wants to talk about submitting to Midwest PHP. Just send me a PM. I've attended, spoken at, and/or helped with the CFP for Midwest PHP for the last 4 years, and I'm happy to answer any questions I can.
Reposting this because the first one didn't work right? I think u/AutoModerator hates me. Anyway.
Op, how is this an improvement over the official documentation? http://symfony.com/doc/master/bundles/FOSUserBundle/index.html
With rice?
Your fallacy is assuming I've read the official documentation. I am very new to Symfony, so I found this tutorial helpful. Skimming your link, it seems like it both makes assumptions about my Symfony knowledge and covers lots of edge cases and options, as documentation usually does (and should). However, if all I want to do is get started with new tech, exhaustive documentation can be overwhelming. I appreciate writing that removes the speed bumps so I can get in and get started. When I need to learn the gritty details, I'll go back to the docs.
if client and server is hardware, they are not aware of any framework. if client and server are software , the client is a browser (from user interface perspective) and the server a webserver. Both unaware of frameworks. UI = User interface. So it is still half a story.
You are my hero!
Switchtrack provides a framework for developing object oriented, RESTful APIs in PHP. It leverages a router that provides a clean interface between your client-side Javascript framework and database resources in your server environment. Put another way, Switchtrack lets you express an API endpoint like http://www.yoursite.com/api/user/20/getdisplayname as a PHP class, where the service name ('user') is the class name, and the endpoint ('getdisplayname') is a method of the class. Switchtrack automatically turns the response data into JSON, which your client side Javascript can then consume. I thought it would be fun to open source Switchtrack so that other developers can build with it and add to it. It's posted on SourceForge and released under the MIT License. Enjoy! 
We have successfully transferred the domain to a new registrar and everything is working fine again.
Actually, that example is where the theory that a centralized system to enforce style is not needed because people can take care of that themselves meets the reality where (some) people then outsource the task of styling to their IDE. So you are correct that you did not say auto-format is the way to go. However, that you didn't explicitly say that is what is not relevant, because it is what happens (at least in some situations) in real life. But, upon reading back, I see this thread started with "When I develop by myself, I don't use such tools, because I already know what style I want.". For a solo project no one else will ever look at, I agree, it is less important to get all the styling perfect.
Indeed, in the end i did it myself cause the pthread Pool don't allow custom worker input It just distribute the jobs evenly, so it was not what i wanted ! I'm so glad i've made it myself ^^
It would be way easier than ReactJS, because there's no state you have to manage and you don't have to update components, you just render them once, no? Well, combined with Aerys, _some_ templates could even be shared between users and not render always, but use a cache.
Yaas! I can't recommend PHPStorm enough. Also install the PHP EA Extended plugin.
Yeah, the render-once thing makes this a lot easier to implement and use than ReactJS. I haven't tried using this with Aerys yet (not sure I will) because it's actually really slow and the output isn't nice like the macros. Will need to do quite a bit better with these before I try...
stupid question: what happened to MySQL 6 and 7??
&gt; It's posted on SourceForge LOL --edit: some constructive feedback-- - You're including class files instead of using Composer autoloading. Why? - No short array syntax :( - No namespace - No PSR code style (this would seriously help you with others adding to it) - `?&gt;` at the end of PHP files is discouraged nowadays - No unit tests
Wow dude it's awesome! I had same idea several weeks ago!
It's definitely worth for the future, but of course needs work. Especially as it allows awesome things like real context-aware escaping.
Thanks :)
**Tools** - Composer - Git (yes, that's not specific to PHP) **Other Things** - How to build [applications without a framework](https://github.com/PatrickLouys/no-framework-tutorial), otherwise you might end up asking _"How to do X in Laravel"_ instead of _"How to do X in PHP"_. - How to use [`password_hash`](http://php.net/manual/en/function.password-hash.php) and other security related tools and APIs.
I didn't Watch the video but why selenium for scraping? That's not what It is for. When you will try to parallelize you'll see why selenium is problematic. Chrome headless or something like phantomjs (I believe this one is not supported anymore but still...) Will suit much better for the job imho.
MySQL 5.6 = MySQL 6 MySQL 5.7 = MySQL 7 
Thank you for pointing out the difference. We are recently working on a project that involves Latte and we should soon find out the context-aware escaping results.
No offence, but your question sounds like &gt; I want to become a doctor. What should I learn? For example, I think aspirin is very important. What else? You are taking software development as a sort of videogame - "OK guys, give me a cheat sheet and I'll roll on!". But programming is a fucking science, just like chemistry or physics. It takes fucking years to learn. And then another several years to master your abilities based on experience. And only then you'll be able to create "big apps"
Why on earth on your public site are you giving people full Mysql connection details to do queries. On what planet did that seem like a great idea?! &gt;$link = mysqli_connect("app.comet-server.ru", "15", "lPXBFPqNg3f661JcegBY0N0dPXqUBdHXqj2cHf04PZgLHxT6z55e20ozojvMRvB8", "CometQL_v1"); mysqli_query ( $link, "INSERT INTO pipes_messages (name, event, message)VALUES('web_MainPageChat', '', '{ \"text\":\"My text\",\"name\":\"My name\"}' );" ); You need to learn how to build an api pretty quickly!
bah why can't developers count
SourceForge! No composer! Having "class" in filenames! Wow, this looks straight out of 2007. I had no idea people were still using SourceForge, it is truly horrible from mobile.
VScode is not a PHP editor. Well if you only work with php code then It's fine but if you work on real web projects that includes html, css and JS in the php files then It's a crappy editor even with php intellicense plugin of Felix becker. There is no support for html/css/js in php files, and Microsoft announced they won't support PHP/html https://github.com/Microsoft/vscode/issues/670#issuecomment-319875197 
Good. The query cache was a pain and sometimes could make performance worse in situations. In fact, for most optimisation guides (You have optimised your MySQL installation, right? You know it's super terrible out of the box, right?), they just tell you to disable the query cache.
SourceForge is dead. You should seriously consider things like: - GitHub - Packagist + Composer - PSR-4 compliance ... if you want people to take your project seriously. I know how that feels, a lot of it is about fashions and trends, but fashions and trends matter. Plus, Composer is much easier to work with compared to manually downloading zip files and copy/pasting them around projects. Check it out. Also, you have some miles to go before this API is RESTful. You practically ignore the HTTP method when mapping to an object method. If one of those object methods affects the domain state, and you allow this to happen through GET, you're not only not RESTful, you're not even compliant with HTTP itself.
Did you see http://phptherightway.com ?
As far as I'm aware, Dusk now uses Chrome headless, so...
0,1,2,3...
Good. We were able to increase our MySQL Performance (Redundant Master/Slave Replication with about 3TB DB size) by over 300% after disabling the query cache. It depends on the use case, but for our use case the query cache wasn't helpful.
It is not credentials from my MySQL server. CppComet API work throughout MySQL protocol but is not MySQL. All queries will be parsed in my C++ code and will not be sent to real MySQL server. This method allows using MySQL clients for differents languages for working with CppComet API. For me was easier ones write server part of MySQL protocol instead of write API for differents languages. For example, Sphinx search use MySQL protocol too for working by SphixQL
PHPStorm is the only editor
00,01,10,11 ...
At work, we just started using the concept of QueryCacheProfiles with doctrine dbal queries to opt in to result caching on the individual query level. It's a really clever implementation actually. All or nothing query caching seems very risky to me since so many things can go wrong.
It takes year to be a web programmer. One tool at the time.
Is it fallacious to assume someone would not read the official documentation? Searching for "Symfony user management" has FOSUserBundle's GitHub repo in the top result, which in turn has a link to the documentation. You seemed to put a lot of effort into getting this post here, but it offers very little.
I think you're correct, up until "half a story." The server offers an interface to the client, yes? I would say that is the "user interface" in this case.
To be fair that's 3rd party documentation for a 3rd party bundle. If you click "edit this page" you'll go to the FOSUserBundle repository, not symfony/symfony-docs.
Don't feel stupid. I've only referred to it has 5.x so I was a little confused too.
Its the official documentation for the FOSUserBundle. OP's link is a tutorial on the FOSUserBundle. There is no Symfony component for handling user management. They have a user provider interface that you can use to connect virtually any user management system to the security component, but that is a different subject.
ohhh I understand what you meant. I assumed you meant official Symfony documentation. I know there isn't an official component but I seem to remember come cookbook entries related to the subject.
I imagine that eventually you'll want to use the class directly and so you'll want to keep the wrapper as small as possible. As to when data should be sanitized, validated, and filtered: I do this as soon as possible after getting it. Having invalid data move through your system is asking for it to be used accidentally without proper cleaning.
utf8mb4 is the default character set for MySQL 8.
Disabling a feature that most of userbase have absolutely no idea how to configure correctly is, on my opinion, a rather good idea. People seem to have mistaken the idea and tried using it to cache "everything" ... which the feature is very unsuitable for.
http://php.net/manual/en/class.datetimeimmutable.php Always have a good knowledge of how the DateTime and DateInterval classes work. Using ints to describe dates or times will give you a million headaches, but using DateTimeImmutable makes everything so much easier.
6 and 7 8 9
**tl;dr** The author declares blankly 3 times "the pattern doesn't fit" (once in the title, twice in the article body) and explains why it doesn't fit exactly 0 times. ----- The description of views by the author is incomplete. They're updated unidirectionally, but they *do* send back user input events, they're not completely passive (of course a passive "readonly" view is possible and doesn't deviate the pattern). In HTTP those events map perfectly to "requests". And so the interaction pattern remains the same. A controller runs, interacts with domain objects, builds a page model, and sends the model to a view to render. Notice I'm not calling the domain objects (aka services etc.) "models". They're models, but not from the MVC triad we're talking about (a common misunderstanding). The model in the triad we're talking about is the one sent to the view (typically as an array tree of data, sometimes objects). The view is rendered in a browser, which sends back events (requests) which are routed to a controller, and we close the loop. I'm guessing Paul is posting this here due to his holy war against MVC and in favor of his own ADR, but this article doesn't say anything about headers and where they belong, which is the only (supposed) distinction here (and ADR doesn't do it optimally).
Global, Varnish, Redis, Memcached... like it's 2007: https://www.slideshare.net/guoqing75/4069180-caching-performance-lessons-from-facebook
Thanks for this.
You didn't read it close enough: &gt; Let our handlers adapt the HTTP interface to the business logic, and the responses out to our presentation layer, even if that’s as simple as filling in values in a template. The headers would belong in the handlers as they are part of the HTTP interface. That is, unless when you said "headers" you meant some other kind of headers.
Makes sense. Thanks.
What would that be? instead of -&gt;, use what? PHP already uses the dot "." for concatenation.
This just in: http://webcache.googleusercontent.com/search?q=cache:https://github.com/microsoft/vscode/issues/32405 OT, and maybe better in a git sub somewhere, yet strangely on topic. 
A nice idea, but here is some constructive criticism: - the permission change is a static value of 0777. That is readable, writable, and executable by everyone and is a terrible security practice. - even if this was changed, the user running the composer install is often not the same user that apache/nginx is running under. So some additional parameters are needed before this is useful to people with other use cases. - I think (personal preference) that two custom exceptions for a script only a few lines long is over engineering. In my experience this could be replaced with a 4 line bash script. But as a project to play with extending composer's build functionalities it is fine. I hope this helps you with your next project!
Thanks ! I really do appreciate your work and use it often at work. Keep it going ;-)
Thanks @capt-dizzy. I got your point. I will fix it
Yeah -&gt; and =&gt; are already being used. There have been RFCs proposed to the internals team about this and I don't think they have gone anywhere. PHP is a warts and all language. If you want to turn it into something concisely and consistently structured your gonna have a bad time.
They're talking about arrow functions ([JavaScript example](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)). So doing this: ($x) =&gt; $x * 2 Instead of this: function($x) { return $x * 2; } Personally I don't find it cleaner at all, the function keyword is clear and gives visual affordance when scanning code. Removing all that is veering towards [Brainfuck](https://en.wikipedia.org/wiki/Brainfuck) territory :p
Well, if I squint, yeah, it can be interpreted that they mean the template deals with the response body only. Then the controller (aka "handler") deals with the rest of the HTTP request and response, including all request and response headers. It's a bit too subtle to claim it's definitive. But the author definitely doesn't describe ADR, either.
Oooh, thank you!
&gt; A controller runs, interacts with domain objects, builds a page model, and sends the model to a view to render. ... The view is rendered in a browser, You're skipping a step here. The controller sends the model to a view to render, but it does not get rendered onto a screen at that point. It renders the model into the Response. That means the view, as far as the server is concerned, is the Response -- the Response is what is being presented to the browser as a reply to the Request. In turn, the Response is what the browser receives; it then uses Response as presented by the server to render something on the screen.
&gt; But the author definitely doesn't describe ADR, either. At no point do I make that claim, either implicitly or explicitly.
I'm not even sure what the use case is. If permissions were set up properly I don't think this should be needed.
Okay, Google. Define subtle. &gt; (especially of a change or distinction) so delicate or precise as to be difficult to analyze or describe. Let me re-quote the exact line: &gt; Let our handlers adapt the HTTP interface to the business logic, and the responses out to our presentation layer, even if that’s as simple as filling in values in a template. HTTP headers are by definition part of the HTTP interface and therefore belong in the handlers. The templates are clearly part of the response body and belong in the presentation layer as they mention it specifically: &gt; even if that’s as simple as filling in values in a template Verdict: not subtle.
`v9.0.0` ? I thought I was in the JS subreddit at first, lol.. Great work though :)
Technically the response body is also "part of the HTTP interface". The entire request and response is part of the HTTP interface. :) If the author wanted to say "headers", they should've said "headers". &gt; Verdict: not subtle. All right, let's have it that way, if you feel strongly about it :)
Yes, you didn't make that claim, I'm also not saying you made it. Just saying the author isn't replacing MVC with an ADR-like concept, as you're the submitter. I inferred context, which may not be there :)
I'm not skipping a step, I'm just not emphasizing it, because it's irrelevant to the big picture. Yes, there's a response that's turned into bytes, that are sent over a series of routers, then it's directed to a machine, which directs it to an application, which parses it and builds a visual representation of it. There are many steps we don't mention, but it's not important. What's important is the story doesn't end with the server rendering a response and beaming it out. That's not the entire application. The application is spread across both *the server and the client*, and this is especially the case when you deliver JavaScript to the browser to run (which practically all modern sites do). You can choose to focus on one component (the server) and one aspect of it (building a stream of bytes to send as a response), but it's just not a useful PoV to have, because when you put on the blinders and just look at that single cog in a machine, you don't understand what the machine does and how it does it. So if you insist on having the blinders on, sure. Maybe there's no browser to you, you're just blindly serving bytes into the ether and you don't care what happens on the other side. This might explain why ADR designates concerns from that frame of mind: - ByteReader (Action) - ByteProcessor (Domain) - ByteWriter (Responder) To me, that's too low-level and "missing the forest for the trees" approach. Most web developers realize the browser is a key piece of the puzzle, and it's an important part of the engine of their application. So like them, I choose to see the whole picture, and it looks quite like classic MVC. In fact, the more JS there is in your site/webapp, the more it looks like classic MVC.
&gt; What's important is the story doesn't end with the server rendering a response and beaming it out. I disagree; as far as the server is concerned, it is done. The server at that point has fulfilled the request with a response; it has no idea if the client is ever going to make another request. &gt; The application is spread across both the server and the client The server-side application exists *only* on the server side. It's definitional. The user-agent sends Requests to it, and gets back Responses from it. If the user-agent *additionally* runs a client-side application, that helps to build those Requests, that *still* does not mean the server-side application exists on the client-side. &gt; I choose to see the whole picture, and it looks quite like classic MVC. And I understand why you do. I just think it's a case of looking through MVC-colored glasses.
&gt; I disagree; as far as the server is concerned, it is done. The server at that point has fulfilled the request; it has no idea if the client is ever going to make another response. Why is it supposed to "have an idea if the client is going to make another response" (edit: I guess you mean request?)? In MVC the controller also has no idea if the view will send another user input event. It's not like there's some expectation what the user would do. &gt; The server-side application exists only on the server side. It's definitional. Yes and red balls are by definition red. Yay? Doesn't mean that thinking about the server in isolation is a valid approach for web sites. It's a valid approach for basic web APIs (i.e. JSON in, JSON out), but that's merely a subset of the kind of web applications you'd be writing, and there the HTTP layer is so thin and basic, it's almost not worth anyone's time to discuss it, because no matter how you write it, it'll work OK. The real fun is with rich web applications and web sites, where client-server interaction and cooperation truly come together to deliver a single, cohesive experience. And then to focus so singularly on the server-side alone is just not useful. I don't separate my web apps in "client" and "server". I separate them in "backend APIs" and "front-end applications". And part of the front-end is on the server. It's a paradigm for a modern age of web applications. It means I have access to the same APIs from my PHP server-side front-end as I have from my JS client-side front-end. What's useful is to have an architecture that brings client and server **closer** instead of setting them **further apart**. That's what a modern web app needs. Does ADR help you in that regard? Nope. So what is it good for? What real-world problem does it solve?
Larevel has "console routes" ([Artisan Console](https://laravel.com/docs/5.4/artisan)), which are pretty fun. They're run like: php artisan my_custom_name:optional_sub_name option1 option2 … optionn
+1 for Laravel's Artisan command system (which uses Symfony Console Component under the hood). Creating commands is super easy. I'd also recommend trying to keep both your controllers and commands thin and use shared Jobs, Events, and your own service classes to share the logic.
Yes thank you! This is exactly the kind of thing I was hoping for. Thanks so much.
Terrific. I've been exploring Laraval for other reasons anyway. This seems like a great way to go.
What? Of course it is. You based your reply on a mistaken assumption/belief. That's literally the definition of a fallacy. Again, the goals of a tutorial and documentation are different. Docs help if you already know what you're looking for. A tutorial is meant for people with no background knowledge, who might not even know they want to attempt the thing in question before the tutorial makes it accessible. It's okay to have more than one piece of writing that explains the same thing. Teaching is essentially just having 5 different ways to communicate the same content. Docs work for you. This tutorial works for me.
Glad I could help! :) Be warned, if Laravel's not your thing, the [next LTS version (5.5)](https://laravel-news.com/category/laravel-5.5) is set to launch soon (ie, the docs were released just days ago). Check the new features and see if you need any of those when you debate the framework. 
Great, now I have to agree with the premise of an article and be really disappointed because it's not actually explained very well. No, MVC doesn't fit the web. If you want to know why, all you have to do is look at the fact that every framework has a different idea of where to put shit between the model and controller. MVC makes things fuzzy in that respect. It's not optimal. Best design pattern to fit the usual web cycle of "request goes in, response comes out"? Hexagonal architecture, probably. Easier to separate the request/response from everything else, especially if you're dealing with different response/request types all the time. But PHP is basically 90% "getting shit done using non-optimal stuff because it's got other advantages" so who cares. It feels like asking how long a piece of string should be. As long as your code works, is secure, and doesn't make other devs' brains explode, you're doing alright regardless of what design pattern you use.
Right when I needed to implement CSV imports/exports! Thanks a lot!
&gt; I didn't Watch the video but why selenium for scraping You can use Dusk with Chrome Headless. I also mention goutte in the video which is a great tool for general scraping. It all depends on *what* your goal is. For example, I needed to grab a CSV reporting from an application requiring a login without an API, so I need the full browser to do that. PhantomJS's primary maintainer also stepped down in light of Chrome headless...
Oh god, idiots advising newbies to chmod 777 are the bane of my existence. I so loath these people. Sites like Stackoverflow are chock-full of this absolutely terrible advice.
It's your opinion and i respect it, but what about $x * 2 is so complex that would confuse you? Arrow functions were proposed for simple expressions like this, it's not a replacement for normal functions.
#1 thing to know about is testing and test/behaviour-driven design. Everything else comes after that.
Honestly it was not a problem for Hacklang, it's only a purist point of view that our compiler should be 99,9% pure where most developers couldn't care less.
#**vim** For just occasionally editing code, you really don't need some giant IDE.
&gt; Please can someone help me out and explain to me what I am doing wrong. * Using client-side cookies for authentication -- you should be using sessions, not cookies. * Storing your user's passwords in plaintext -- hash and verify with the built in password functions. * Looping through your users to find a match -- just do a query to find a matching user and then verify the hash * Posting this question on a non-support forum -- you'll have better success over at r/phphelp
Is this best? Where is the data? 
Thanks for the suggestions. i also have a repository for Switchtrack on Github (though I need to commit the latest version, which I will do later today). Your comments are valid. This project is something I started four years ago, put down for a long while, and then picked back up recently. I think Composer was about a year old when I first started playing with the idea of mapping HTTP calls to classes. The next update will definitely be deployed as a Composer package for ease of installation, and I'll migrate to PSR style code to appease the trendy police (seriously though, you are absolutely on point with that comment) 
+1 for the roasting. See my comments below. 
&gt; what about $x * 2 is so complex that would confuse you? I already explained - the lack of visual accordance. It doesn't look like a function. It adds cognitive load when scanning code. &gt; it's not a replacement for normal functions Plenty of people *do* want that. In JS you can use braces and add multiple statements.
Well, to sanitize and to validate are two different kettles of fish. To sanitize implies the ability to modify the data, where as to validate implies reading it and comparing it against set standards. I'd suggest putting your validation into the domain (god object) class itself, this way you protect yourself against all code paths coming in to that method, including ones that potentially don't go through your wrapper. Sanitization typically will go higher up in the stack, because you'll presumably want to know what the data is, and potentially manipulate it further, prior to handing it off to a domain logic class to do something or another with - it's part of the responsibility of that class to complain bitterly if your data isn't properly sanitized (its validators). The best (IMO) solution is to define your validation rules in a more abstract manner, so they can be included in both the wrapper and the god object itself - that way you can write the validation templates once, and use them in multiple locations, with the benefit of your domain class always having a final line of defence, but your more user-facing components being able to present more detailed feedback. Keep the sanitizing out of your domain class - or you'll end up kicking yourself when your class methods go and change your input data in ways you may not expect, usually in a way that takes hours of stepping through with a debugger to find the reasoning for.
https://www.shibboleth.net
Note that `&lt;keygen&gt;` is deprecated, you can ignore that little bit of the article.
Freek's the man.
Why not ?
Isn't PHP awesome enough to teach students to use it with its frameworks?
Can anyone recommend a good source for Magento 2.0 tutorials? The official stuff is super expensive and there seems to be a lot of scattered stuff out there. Any tips for a Laravel dev who wants to pickup some Magento knowledge?
This is awesome! Thank you so much!
I'm starting making website right now! 
Isn't this more about a *federation* of identity providers, such as universities that all manage their own student identities, and then share services between all those students? It's a layer above SAML and consequently is quite an overkill (in complexity) for many SSO use-cases.
So a story about the query cache was my enemy... Not specifically in MYSQL but in MariaDB. 6 months ago, all of our web servers started failing to respond completely at random for about a minute each time. It was if someone had just hit a pause button on them for a minute. We tried all kinds of different diagnostics, probes, tasks which would analyse logs... Then completely by fluke, I disabled the query cache. Poof. Problem solved! What I eventually realised (as best I could, short of trying to modify the source code) was that the spinlock on the query cache was interacting with our NTP system that corrects for clock drift on our VMs if they were more than a few milliseconds out... leading to MariaDB freezing solid. It took 4 months of trial and error, only to find it via fluke (we were pushing anything up to 2 or 3 thousand queries per second, so the stage-by-stage query log wasn't viable due to storage).
I can't wait for the day when articles stop fucking telling me what I don't know or what I'm doing wrong. Instead of calling me an idiot, how about instead, we title the article "The Best Way To Do X"? Doesn't that have a much better tone to it than, "You're probably incompetent, but I'm a genius."
Well, everything overused can be serious problem. In the first place, dependency injection is about injecting service objects, i.e. objects that provide some functionality and not about objects that are used to store data. You cannot (and should not even try to!) inject everything in parameter, it'd be too hard. But in fact you should avoid creating objects by your own, as it'd be hard to refactor and maintain - in your case you should do some basic `UserFactory` that is used to instantiate `User` objects and instantiating `User` objects in service especially created for instantiating `User` objects is perfectly fine. Then you should inject `UserFactory` to your repository. 
Arrogance driven learning 
I absolutely would read "The Best Way To Do Single Sign On." I absolutely won't read an article that calls me inept. The title makes it sound like the author thinks he's so much smarter than me. I don't need to be offended to read a person's article.
So many typos. 
Hahaha what
Consider the term "dependency injection". The implication is that you are injecting something upon which the service is actually dependent on. In your example, is a repository really dependent on the entity itself? Probably not. What you are actually doing is using the injected entity as a sort of a factory by cloning it. A neat trick perhaps but if you want the repo to use a factory to create your entities then inject a UserFactory and be done with it. However, adding things like factories can be overkill. If the only place you need to create new entities is in the repo then there is not much point in abstracting away just the factory functionality. Kind of a judgement call but unless the factory can be used in more than one place then there is not much point in making one. Which is why you often see code like your first example. And while I have not actually tried doing (clone $this-&gt;user)-&gt;__construct, it seems like you are calling the constructor a second time after the object is created via clone? While that maybe legal I suspect it may cause problems.
Is it possible to support client certificates nowadays?
The reason I would inject the value object is for testing. In your first example you would be testing not just the method but the instantiation and storing of values into another object. You test one thing at a time. with the second one you can mock the value object and then not worry if there's something that, down the road, changes in the value object method.
Well, I don't want to replace normal functions and Morrison Levi's RFC doesn't propose it as well. The RFC also limits this to one expression. 99% of the time you're using it with -&gt;map() or filter(), if you consider this too much cognitive load you will have a hard time with JS/ES6 or Ruby, and to be honest PHP is used by less people each day, even though I don't hate it and would like it to improve, it's been a while since I realized it's not gonna happen. Too many conservative opinions like yours will make sure the language stays the same for the next 10 years until all that's left are legacy shitty projects, yes, i hate to say it, but...COBOL. The absense of syntax sugar like arrow functions won't stop me from writing the same code using long and boring functions that will do $x * 2, they're not necessary you might think. Well, the same code would probably be writen in Java, but people hate Java so much that they created Kotlin, Groovy, jRuby, Scala and all the others, but unlike Java PHP is also considered a bad language, poorly designed, so you have all the ceremony of Java with no benefits. PHP is not a language where enterprise code florishes, no, it's the language where Laravel and Wordpress make astonishing success. It's closer to JavaScript and that's why people will just use JavaScript if PHP gets boring.
Sounds like you're taking Journalism 101 a little bit too personally. The article title isn't directed towards you, it's just a shitty title, it'll be okay &lt;3
[removed]
I don't understand your example here. Did you mean to write `UserEntity` instead of `UserValueObject`? Because you shouldn't need a repository for a value-objects, you should freely create value-objects wherever you need them the same way that you create integers, strings, or booleans. When it comes to creating entities, I think it's perfectly fine to design repositories which call the entity-constructor directly. You only need to inject factories into repositories when your entity gets extra-complicated to create/load. Also, I'm not really comfortable with the idea of cloning entities. It's all too likely to accidentally carry over some state you really don't want to share. 
Sure.
Try VSCode (Visual Studio Code) which is free and customizable editor. You can install extensions for PHP that could check syntax and code style errors (phpcs) and enable autocomplete for methods, autoformat code etc. Yes, PHPStorm is much more advanced IDE but sometimes you don't need all that stuff.
Thank you for the info. Very appreciated 
Such as? 
Search my comment history for Laravel please. No matter how many times I go into this, there's always someone else who doesn't know. It gets tiresome after some time.
Only found some svg bashing, Js bashing, and mvc bashing. You sure are hard to keep happy. 
This description only speaks of your own bias. I've never "bashed" SVG, JS and MVC. The comments regarding those technologies (and pattern) were informative or positive, and I have great respect for all three of these. Also when I said "search my history for Laravel" I didn't mean "browse my recent history".
Hmm, in that case I apologize, I merely skimmed over it.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Isn't a .0 release *always* the first stable release of that version? 
"Writing online articles: You're probably doing it wrong"
nope, CakePHP follows semver https://book.cakephp.org/3.0/en/contributing/backwards-compatibility.html you can have http://semver.org/#spec-item-9
I'm going to have mark_story release 3.6.1 as the first stable release of 3.6 :P
This "you're probably doing it wrong" shtick signals to me the article is for beginners, so I skip it. I tend to research what I do excessively, which has its own drawbacks, but "being wrong" with regards to industry-wide practices is not among them. And that's hardly unique, every good engineer approaches problems this way. So the article is attracting less sophisticated folks, which... well... might be a good business strategy, actually. Only the author knows.
Why don't they teach TCL/Tk?
&gt; Too many conservative opinions like yours will make sure the language stays the same for the next 10 years Stop talking bullshit you know that's not what I'm saying. Get over yourself. 
But it IS directed at me. It's directed at anyone that reads it. That's what "you" means.
Well, I imagine one person created the php hosting website and someone else with a different skillset created the Rails educational content. Who cares?
When you say t doesn't work what is your output? If checkin and checkout are just values retrieved from the db try instantiating new DateTime objects like so: $ci = new DateTime($checkin); $co = new DateTime($checkout); And then use your date_diff($ci,$co)
What framework is that? Doesn't look like standard PHP to me.
Looked at this http://php.net/manual/en/datetime.diff.php yet? 
Date_diff is an alias for DateTime::datediff() Edit: don't feel bad I had to look it up because I felt like a dummy for rolling my own when I wasn't using Carbon lol.
I haven't, I look at a different one forum, I will try this shortly.
And surely $Checkin,$Checkout are in the *proper* format?
I believe I meant `UserEntity` a few articles define each item as the other so I might have mixed them up. Within repo I am returning a class filled with the requested db info ( In this case a user ) so i can organize things a bit ( used to work with arrays ). I was thinking when dependency injecting the entity would be new/clean so any clone would be fine but if misused issues could probably occur. Going down the route of implementing factory within repo and factory will handle setting data within entity and returning. 
Entity will be created in one class but within multiple methods ( findOne, all, etc. ) I have several repo's like this and may move from constructor injection to `setX` methods, seems like Factory may be the way to go. Actually, as a followup what is the best practice when going this route? Should I just dump the array returned by repo into `$entity-&gt;set($data)` and run isset checks then set the data using actual `setName` etc. methods? I could also throw `$data` in constructor and then sent to the entity setter. The project I am currently thinking of/working on is fairly large so setting individually through `__construct($name, $something, $else)` will leave me with a long list of params.
Taking this approach thank you for the feedback.
I'm sorry. The server is unaware about the content it serves to the other side. It could be a client program (a browser) or it could be a machine ( another server even). is 99% of all cases, a UI is used to present to a user via a client program. Your point was that a micro framework is only good for that, where I say: you forgot to mention, that a micro framework is ALSO used in the machine interface these days.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Nice and simple I suppose, but why not just use something like JMeter?
&gt; Kind of a judgement call but unless the factory can be used in more than one place then there is not much point in making one. That's one of the advantages of unit tests (or TDD, if you're inclined): by almost forcing you to re-use your services from the start, you will _have_ to inject the factory. Otherwise you can't mock the User object. I know that you said "reuse" with some other meaning in mind, but unit tests are a perfectly fine place to exercise that reusability from the get-go.
thanks for the reply. from Jmeter's site "The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. " vex is simple and 100% pure PHP application to generate some HTTP requests :) also btw I have added a gif which shows vex is action. 
Good start, it's a bit simple for my usage but still good job! I use https://artillery.io for load testing of my API. At the very least adding ability to pass additional headers and body is a must for this kinda lib.
thanks for encouragement. absolutely agree that ability to pass on additional HTTP headers and request body is a must. I will be adding it soon. 
1. Calm down 2. Code bases has absolutely nothing to do with Mysql database forks and will work with any of them. 3. Whether to choose Oracle Mysql Community server, Percona Server for MySQL, MariDB or any other fork is entirely matter of taste
I thought this was a rant on mysql_* vs PDO, but OP seems to have a big misunderstanding
&gt; Whether to choose Oracle Mysql Community server, Percona Server for MySQL, MariDB or any other fork is entirely matter of taste Or based on careful consideration with rational arguments ;-)
Thanks for the informative and well researched opinion. /s
No. No. No. There's SQL injection in this article and other many horrible things.
I thought the same lol
hihihi
It's spam
PHP code examples on forums are mostly shit. Always read the manual (RTFM) if you're new and/or don't understand why it's (not) working.
You should use a database or a cache for this, not the file system. Also, you can't scroll the code on mobile.
I did't think about it, I will try to submit!
But these are pre release versions, so not stable. 
I used this piece of code for one of my clients, I did not have anything else except FTP access. Also Doing a database query on each request received from a client doesn't seem right. Just checked the code on Mobile version, if you give it a single tap it will be enabled for scrolling and other functions.
Yeah, if you have proper caching in your application it's best to just avoid sending a query at all!
Tried to use MariaDB had problems, I didn't have time to go further into debugging so back to MySQL. I use Postgres and Mongo also.
Then you should at least offer different drivers - doing this with the file system will severely limit the speed of your application since each request locks the file. You really, really shouldn't do this. Databases are made for this, the file system is not. Tapping on the code does work. Why is that so unintuitive? Edit: you should place braces after your if/else/elseif as well to keep with the PSRs.
I've implemented something like this in a very high-volume scenario using APCu cache, it works great. The trick I came up with was to do `floor(time() / $window)` which gives you an addressable "bucket" to key against. Use `apcu_dec` each time there's a hit to decrease the bucket and it returns the new value. If that value is &lt; 0 deny the request. If it returns FALSE there was no bucket, store a new value at the bucket address initialized to `$rate` with TTL set to `$window + 60` Using a database, even an on-disk table, would be far better than writing to a file. Even better would be a memory table. If APCU is available though that's 100% the way to go
Now also with a Go back-end ;)
Not sure why its like that, I will try a different code insert plugin, the current one is - crayon syntax highlighter. Thanks for the tip on braces, I will update the code. Also, this code is in production as of now, so I will take your suggestions and update it to use MySQL. Although if I can get access to the aws server wouldn't it be better to do it in apache or nginx ?
Hey man, it's just a title. I meant it's not directed toward you personally, if you are really that upset about it send him a message, but I still think you're being too emotional about it. 
Yeah, doing it outside of PHP would be better, but it is unlikely to really matter with any small to medium site :) don't get me wrong, even in its current state this is a good thing!
Thank you for the info, although as I mentioned I had only FTP access to the client's application when I used this piece. But I will surely try to work on your suggestions to use APCu. Whats a memory table though ?
In MySQL there's a `MEMORY` engine for tables where the schema is stored on disk but the data in memory. The data gets lost each time you restart MySQL, but it's great for something quick and ephemeral like this
Thanks for the insight, that might be one of the reason why this hasn't created any issues so far, because it is currently throttling a getOrders resource which receives around ~4k requests per day.
I understand it's "just a title." Would you read an article with just the title of "You're a fucking idiot piece of trash, and I'm better than you"? The point of writing an article is to speak to the reader. Creating an offensive title is stupid and a ridiculous fad for the past 5ish years that I'm sick of.
Laravel is easiest to learn thanks to excellent documentation and Laracasts. It follows [PHP PSR Standards](http://www.php-fig.org/psr/).
I recommand Laravel. It's eazy to use and very good documentation.
well, the disadvantage of this implementation is that you have to turn off modules because nginx is thread-safe and PHP out-of-the-box isn't and takes extra skills to build. But there are heaps else wrong. IPC is limited to ~~your PC~~ a machine. Past that point, you need to accept that you'll need to contact other servers you can defer to (because PHP will need more instances than Nginx). Saying an IPC based module is a bad design for a distributed system isn't the same as saying that fpm is the ideal transport mechanism. It just acknowledges at some point this will be distributed and at that point, we'll probably use a known protocol. Of course, if you're deploying LAMP stacks with mod_php on single machines, then you basically might as well do this*. \* I really would rather not do work than work on single-machine LAMP projects. I Call it building pyramids. They might look good, but they have no value or utility. &gt; If it's one machine proving a concept, even if it lives on one machine right now, docker compose it so that each node is scripted. You probably only need to volume mount official PHP, Nginx, SQL images.
Definetly would recommend Laravel. It's sleek, good documentated, and has a huge community. If Laravel feels overkill for your application, you can also use Lumen, a micro framework based on Laravel.
I would totally read that article, but that's just me, I don't take offense to things not specifically directed towards me. Yeah, you're sick of it, you have that right, just like you have the right to complain, but where is that going to get you? As I said in my initial comment, it'll be okay, it's not directed towards you personally, move on and be happy &lt;3
What type of projects do you work on and what other languages are you familiar with? Most frameworks aren't one size fits all and depending on what type of systems you have would change what you should pick.
Symfony is really good if you want to stay in control of your application. Laravel is good for beginners but it's honestly too much black magic for me. 
Symfony, Laravel, or Zend Expressive Learn one really well, then do a project with one of the others, you'll learn the most from seeing the differences
[removed]
I recommend Laravel - but mainly due to Laracasts.com - that will allow you to really get the most out of it. 
I wouldn't mind taking it on. Even if some one doesn't - don't delete it. Keep it open :D 
actually there are not that many frameworks in PHP these days , at least if you compare with JS ecosystem. any how since you have mentioned that you are quite good with OOP, I would recommend Symfony , mainly because they encourage good practices ( mostly ) . 
Sure, I won't delete it. I've installed it and it still works, although with Laravel 5.2. A first step would be probably to upgrade to the latest version of Laravel...
Faster than what...? Provided the bot can "read" all documents, isolate their keywords and is able to access a big enough database to produce an index, the answer is yes.
who are they ? 
I recommend Symfony and Laravel.
Why use this over `ab`?
&gt; You probably only need to volume mount official PHP, Nginx, SQL images. Pretty sure you're going to need nginx to talk to FPM and PHP to talk to MySQL.
as of now, one would not use this over ab. but as this is written in PHP , there is a good chance that developers working exclusively on PHP will find it easy to extend / modify this. Also with some refactoring , this can be embedded into existing PHP applications . 
This is the right idea. I did Laravel for my first frameworked application, and the docs/community/laracasts made it as painless as it could've been. It is, however, highly opinionated. Laravel is cool with Facades, and there's a lot of magical boxes from which cool shit springs, and after you get comfortable with the architecture it starts to pester you how those things are working. Ultimately, Laravel is a compromise. It holds a dev's hand well to get get the benefits of rapid prototyping apps. For devs with limited experience in oop, Laravel will improve their understanding and skills. You'll use it for several projects and then start doing deployments where you use the framework to build the app, then strip away every bit of code not being used, then you'll start to form some opinions of your own, and you'll move on to other frameworks, and rolling your own.
Possibly in CI servers?
Interesting. Is it faster than nginx with PHP-FPM?
It would have to be to have any added value. But I highly doubt that it's significantly faster. If it works a lot like mod_php then it may actually be slower when there are many concurrent PHP requests. Having said that, I base that on my own gut feeling and not much else. Someone would have to make a few Docker containers and Siege them or something.
True story I run my PHP applications under Tomcat in production. Only way I could do it sadly.
Ah, I wondered under which circumstances nginx was faster. The only sites I’ve tested them against each other are very low-volume. 
I know it will be ok, and I'm not offended, but I'm not going to placate someone who thinks it's ok to call me inept. It's not about me moving on and being happy. It's about the fact that people feel like they can't title articles with an incentive to read it without being offensive. Tell me what the article is about; don't tell me what I am doing wrong. That doesn't give me incentive to read it. In real life, if someone I didn't know walked up to me and said, "I have never seen your code, but it's garbage. Check out my code to learn how to fix it," I would probably punch that guy. I don't know why common courtesy all-of-a-sudden doesn't matter in the context of an article title.
I'm working on this one https://github.com/fastpress/framework ... I'm building a site with it, I should push the changes probably, but if someone is interested we can work with it 
Yes it would, I might submit a PR for that this week if no one beats me to it 
Hi, I only had time to check the slides, but I have a tip for evolving this presentation: after the basic definition, and before the code examples, I think more time should be spent explaining *why, when and where* functional programming brings benefits to your software, and when it's simply crossing into a cargo cult that makes your code slower to run, harder to read and maintain. Without explaining the pros AND cons of an approach, it can't be applied in a reasonable way, where the programmer can make critical decisions which part of a solution should be functional, and which is better off using imperative features. There's a lot of hype for functional programming right now, and if we don't adopt a balanced, mature point of view about it, it's a recipe for thousands "Why functional programming sucks and I stopped using it" blog posts a few years from now. Your example of currying strikes me as a symptom of "style over function", things people copy from functional programming without properly considering pros/cons. There's no point in currying functions in PHP. We can always do partial application (and in much more flexible ways) by defining a function calling another function, only when and where we need it, not as a general transformation of all functions. 
I'll vote for Yii 2, it does so much work for you that once you try it you won't be looking elsewhere. Laravel is just a CodeIgniter with good marketing from what i can see. Symfony seems cool too, but the learning curve seems to be just too high.
&gt; I really would rather not do work than work on single-machine LAMP projects Databases need to live elsewhere.....but I don't see that much benefit in scaling nginx boxes separately from the PHP backend.
A lot of this is true, and I don't disagree with the position, but this is a story written by a single person who has been the sole developer at this "web agency" until recently when he brought in a second person. While nicely articulated, this isn't a compelling case study for why this approach is actually successful at any real scale. Two people can easily agree. Even four or five can. Where I work there are over 700 people writing PHP. Agreement among them is **not** the default.
Nice.
It tickles me that I find myself agreeing with you almost exactly as often as I disagree with you on this sub. In this case, I agree wholeheartedly. Functional programming can be an immensely powerful tool for elegantly solving problems, and as with most other immensely powerful tools it's quite easy to end up rocking backwards and forward wondering where it all went wrong. I've seen a lot about the *how* of FP in the past few years, but alarmingly little of the *why*. Many simple examples of slightly ugly code made terser, and admittedly often more readable, but few robust dives into how to apply the concepts sanely in the context of complex systems and the drawbacks of such an approach.
But... But why?
My heart goes out to you and yours.
No docker-compose (which you'd likely use for single-machine deploy) handles internal networking allowing them to talk. Thanks for misrepresenting what I was saying though. It's nice to know there's at least one...
I don't even know what that would look like. Surely tomcat is under some other Java Server?
At the point PHP and Nginx share a box, the server doesn't get enough traffic for the client to have the budget to hire me (unless they have heaps more for me to do). So I wouldn't work on it. As an aside. Nginx is capable of serving a lot more requests than PHP if you offload it to its own box, so PHP isn't contending for resources. TBH I can see very little reason to run PHP web-app outside of a single-core VPS. Maybe you use threading or some other obscure things I don't to squeeze all the juices.
I didn't write the wrapper, though I'm fairly sure it calls PHP-cli. It actually works great.
This can only run under 5x from the looks of the GitHub, so it's unlikely to beat a PHP7-fpm. It's also limited to the modules you can work with in PHP. The second problem is that regardless of being faster, it would force you to put both on the same server, so Nginx cannot do what it was designed to do and both PHP and Nginx will limit each other. You'd be better off just using Apache mod_php since it's core to PHP AFAIK and Apache isn't designed to run out of the box like Nginx (not saying it can't be tuned to, but if I can install something that's faster and not worry about getting into weeds until needed, I won't bother). I only know Apache 2.2 and haven't bothered with 2.4 branches because php-fpm solves any problems I've had. If you want to maintain a team where for some reason they need to know two technologies primarily used to route requests and handle disparate rewrites, rules, even SSL well you must have heaps of time and effort I just couldn't muster the effort to maintain. 
Please ask when you're in work next how it passes $_POST, $_GET &amp; $_SERVER data most frameworks work with on some level. I've only seen this done once before, TBH I Hate $_POST and $_GET and would prefer a late-load approach to gathering request data, so I'm always interested in alternative approaches, like those used by https://amphp.org/
As you gain more experience, the likelyhood you'd agree with me will start approaching 100%. ;-)
My work didn't write it. Here it is: http://php-java-bridge.sourceforge.net/pjb/ No php cli, but if you want to check out how it works it should all be there. I use post all the time with oauth and it works just fine. Even errors propagate, though wrapped in a java exception. Sadly they only run tomcat in production, I wanted to use PHP. They let me do this. I'm changing it all over to serverless node soon though.
I bet it's using something like [this](http://php-java-bridge.sourceforge.net/doc/how_it_works.php). 
If going to `phpbot.org` then scrolling and typing `array_map` then clicking an action button and waiting for another http load is faster then going to `php.net/array_map` then yes. 
Will it be named `spork`? It is a fork of spark, after all. 
As others have mentioned, laravel and Symfony both have insanely big communities and great documentation which helps you a ton, both will teach you the cores of a framework (MVC, dependency injection, etc) and then you could possibly look at tougher one like Phalcon. I think the main thing is to learn what frameworks do and understand their components. Enjoy your coding :)
If there was a reason for this project to exist, it's to call it Spork. Thanks.
This is the error i am getting. Fatal error: Call to a member function format() on boolean in C:\xampp\htdocs\formtools\global\code\submissions.php(1168) : eval()'d code on line 1 I am thinking this is cause by time format.
I was pointing out that they need to be configured. I'm sure that there are plenty of Git repos out there that do this, but I've found it non-trivial personally. It's not like you can just have three FROM lines in Dockerfiles, and then a yaml with three services and three volumes and you're done, which is what you seemed, and still seem to be saying.
Oh neat, I could see access_by_php and rewrite_by_php being possibly useful for creative/complex filtering logic or something, especially if someone already a php codebase providing that complex functionality for ready re-use. I'm imagining the standard ngx_http_access and ngx_http_rewrite module's would be faster though, and they are pretty flexible as-is. For others wondering why, probably the main reason this would ever be a thing is well described in [this SO question](https://stackoverflow.com/a/2712959/1347604) about Apache's mod_php versus CGI. Also see [OP's other comment detailing this and more](https://www.reddit.com/r/PHP/comments/6uw616/what_the_hell_someone_made_a_mod_php_for_nginx/dlwf28t/) 
&gt; This can only run under 5x from the looks of the GitHub The author has another, separate repo of this project for PHP 7 support: https://github.com/rryqszq4/ngx_php7
Thanks for this valuable feedback, I really appreciate it and I agree. This talk admittedly was mostly about the "whats", ie. definitions, not the "whys". My goal was that people without any FP exposure would, after the talk, have some basic context and understanding of terms like pure functions, lambdas, higher-order functions, currying, composition, functional pipeline, etc... and thus the ability to comprehend better what they are reading about in FP land. Or in other words a basic FP vocabulary to give them a head start. The language for this talk was pretty much irrelevant but as it was a PHP meetup I used PHP partly to prove that all these concepts can be built given we have the necessary basic building blocks like first class functions and closures. For me when I first started to read up on FP it took me a while to understand these concepts and how they relate to each other and I hope that some people out there would find this talk clearing up the fog a bit.
Have you ever heard of a little thing called latency? What about footprint? Threading is not obscure with FPM. A single NGINX server that pipes requests to FPM pools will increase the latency of the application. You are not seeing much difference because your volume is tiny, also, unique visitors is not a proper unit of measurement in this context. 
There is very little overhead between Nginx and FPM on the same system. Unless there are using some tacky optimizations, the latency introduced by the wrapper will always be greater. 
http://graphql.org/
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Yeah same link as OP posted... so it's not exactly as described
vim
which hasn't been updated in some months, and looks nowhere near as much work... It's a bad idea and having a largely unmaintained 7.x doesn't make it better
PHPStorm or Sublime Text.
Dream weaver is best for static pages / HTML. Try php storm if a student as you get it for free, or sublime text which is free
Psht, I'm probably long past the point of that. I'm not the one downvoting you by the way, this is just an angry sub.
To offer an alternative to phpstorm, could take a look at Netbeans as well.
Is there a simple standalone upload form for the lock file?
Tell me more about you work?! 700 php coders in one place? What manner of place is this?
just pushed an update which includes this ability. 
None of The above. Depends on the size of your prodject. If it is smal go for atom or sublime. If it is larger try netbeans first, because it is free. I used netbeans for 5-7 years. It is awsome, but slow. But If you want to use some money, phpstorm is like netbeans but smoother.
The "someone" who created this works for Sohu.com, the 17th largest site in the world. I *suspect* it's worth at least investigating for them. At that scale, CDN offload is massively important and well maintained to ensure that origin load is _mostly_ *only* dynamic content - which means that's ALL nginx is needed to do and so the scaling of PHP is all that matters and the latency of sockets and FCGI might in fact be worth removing. Lastly ~2M uniques a year? That's ~0.06 requests per second… or if my math is right, 1 request every ~15 seconds. Pretty sure I could hum modem noise through a phone line quicker than that. Please be less combative in your writing and quit claiming authority and expertise you clearly don't have. Source: work for the worlds largest CDN and previously did PHP on large scale infrastructure at (then) the worlds most profitable PaaS and biggest single IaaS user.
Its called syntax learning and codeacademy.com is great source for something like that! cheers
I used Sublime Text but now I use Visual Studio Code and it's pretty good.
Currently not - but why don't you commit your .lock file? (https://getcomposer.org/doc/01-basic-usage.md#commit-your-composer-lock-file-to-version-control)
Neither. Sublime Text or PHPStorm. Or VIM if you want to. 
Awesome :) will have a look at running it against our API.
Just to add `get_all_headers()` 
Does it annoy anyone else that new versions of libaries requred PHP 7, despite the fact 5.6 is not officially end of life until December 2018?
Great sense of humor, this sub :D
are there guidelines for writing guidelines? :D
I would go with Sublime or PhpStorm. Maybe start with Sublime and hop over to PhpStorm when you feel like the toolset of Sublime is getting too small. PhpStorm costs around ten bucks a month if you're not eligible for a free version (e.g. open source or student license). Not sure if Sublime had any costs. Other "lighter" options might be Atom or Visual Studio Code. All in all the editor/IDE is just a tool and you can create apps just fine with something like barebones Vim or Notepad++ too, just a bit more "manual" work.
I should have mentioned it in my original post, but I do think this is a very good explanation of how FP works at a basic level. I might be biased by already having a good knowledge of it, but it was easy to follow the slides alone without any commentary and you built on each concept well. I'd just love to see more discussion of the when and why's, and I have fifty other things I'd like to write about first (and still never will).
[Laravel Spork: Gold Edition](https://community.activision.com/legacyfs/online/18184_yellowspork.jpg)
Active support for PHP5.6 ended in january. Even for a small library like CSV it means that you need to test your code against a bunch of PHP version. By including only actively supported version it reduces the maintenance burden while keeping pace with PHP development. So IMHO it's a tradeoff between security, feature and maintenance.
what I tend to do is add the php.net search engine to google with the keyword "php", thus typing "php array_map" will generally take you to php.net/array_map
Logo. http://tonyrusso.me/projects/thumbs/thumb-spork.png
PHPStorm is by far the best tool in the community. It's normal version costs a bit, but they have EAP (beta) releases that you can run for free. [Grab it here](https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program) and start going :)
This needs to be a thing
Same. Also tried Percona, had issues (inconstant, blatantly wrong query results), so switched back to MySQL.
For PHPStorm, you can use the latest [beta release (EAP)](https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program) for free. If you've used Visual Studio with C# before, /u/marksus1, you'll find PHPStorm's code intelligence to be almost as good (as good as you can make it with a non-static language, really). I switched from Sublime Text to Visual Studio Code (Microsoft's "lightweight" code editor) and the PHP extensions for it are very good, if you're looking for a more lightweight editor.
I'd give VS Code a try. It is suprisingly good. I use it here and there with extensions IntelliJ IDEA Keybindings, PHP Code Format and PHP Intellisense. Not bad at all.
Look at the [*Return Values*](http://php.net/manual/en/datetime.diff.php#refsect1-datetime.diff-returnvalues) section of the manual page for `date_diff()`: &gt; The DateInterval object representing the difference between the two dates or FALSE on failure. So at least one of your two input dates is invalid, `$checkin` and/or `$checkout`.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
PHP
Sticky Notes is my preferred IDE.
We use it in quite a few projects at work, I haven't used it myself but the guys that have speak quite highly of it. 
PHPStorm is a great IDE, or Eclipse PDT if you can't afford PHPStorm. The license on phpstorm just closes the editor after half an hour, nothing prevents you from reopening it, so it's actually fine for small jobs
&gt; egration with phpstorm and maybe other IDEs You want to apply these in a docker environment or just in general?
In general i already know how to do it, and managed to make it work when integrating vagrant with PHPStorm. My problems are really making it work when integrating Docker and PHPStorm.
&gt; nginx is thread-safe and PHP out-of-the-box isn't I'm not sure that's correct? The Zend Engine supports thread safety…
(not sure why people are down-voting you so hard....) &gt; At the point PHP and Nginx share a box, Hmm. Depends why they're sharing a box, doesn't it? Having the load distributed across those webnodes by either something like the amazon load balancer, or by a separate nginx load-balancer that is completely decoupled from the webnodes is a nice pattern for me. I am perfectly fine with having some 'wasted' resources on each PHP box, by having nginx also running there and doing not very much, except to make each of the nodes to be self-contained. &gt; As I can get that to top out at ~ 2 million unique visitors per year, IDC. Oh, the site I'm working on now is designed to do that in 3 hours... 
I wouldn’t bet on it. Apache’s mod_php can be faster than PHP-FPM on nginx. 
Don't think it's about commiting the lock file, rather they don't want you seeing anything else especially if it's a private repo. This would be more interesting as a commandline script or composer plugin personally.
pricing ?
Private repo support would be nice.
It's free :)
https://github.com/fzaninotto/Faker
`ab` is awesome, and it would be more ..awesomer if it didn't support only HTTP/1.0
echo mt_rand(23, 27).'-08-2017';
But faker does not provide that for me
Isn't `dateTimeBetween` what you are after?
Private repos are already supported
But only on GitHub?
This is cool! It would be nice if you could trigger a PR with the updated dependency. The CI server would run the tests and mark the dependency update as safe or not. Just like [Greenkeeper](https://greenkeeper.io/) does for node
Php Storm, Sublime or Netbeans.
Yes. We're currently supporting only GitHub repos.
I have used it on a small-scale website search (indexing around 3500 pages of content, 1000+ word articles) and it handled that fine. A friend of mine gave it ago on his boxing statistics website and he said it was slow and unusable on the scale he was running it at and would start seeing performance issues for anything past 250,000 records. I can't say for sure if it was the way he implemented it or the server wasn't up to the task but he switched to Elastic Search and had no issues at all. For larger scale search I've always used Sphinx (http://sphinxsearch.com) and to be honest I wouldn't use anything else for a clients websites (where budget allows) as I havn't found anything that can match its speed.
Use all 3 on a regular basis + VIM in work. Definitely look at the above 3.
&gt; Whether to choose Oracle Mysql Community server, Percona Server for MySQL, MariDB or any other fork is entirely matter of taste It's not a matter of taste, it's a matter of licensing. Anyone who chooses MySQL for a greenfield project after Oracle slid in license changes under the radar needs their heads testing.
Not convinced by this but that might just be my work flow. I use devdocs.io but my work consists of PHP, Python and GO. Add in front end work with various JS frameworks and HTML/CSS devdocs is a "tab saver" and super handy being able to search them all in one place.
date("F j, Y",rand(strtotime("August 23, 2017"),strtotime("August 30,2017"))); should do the trick. 
Imo, [Brackets](http://brackets.io/) is also quite nice. (Adobe Systems under Creative Commons) with tons of plugins. "[Emmet](https://emmet.io/download/)" Plugin is awesome. It has intelligent auto-complete for CSS. something like "btlr 10px" will auto-complete to "border-top-left-radius: 10px" and stuff like that... It's pretty intuitive and since I've tried it, I haven't written CSS without it. (Also exists for the 3 you mentioned and others btw)
Personally, Laravel is the most agreeable framework for me, but in general, looking at the largest of them on your own and trying to understand how they are different is the only real way for you to know which one you should use. All of them work. All of them do what they are supposed to do and all of them have their very specific issues. Symphony and Laravel both have huge communities and you will get a ton of support while trying to get something done, but they are also quite huge and therefor take some time to get into properly. But still, understanding how they are similar and how they are different will be of great value for you as a developer. 
Right, I started off with Symfony. Going to mess with it a little while and then try something else if I'm not happy! Thanks guys!
Yep, started off with Symfony now.
Well that's a bummer.
If you need help check out #symfony on Freenode or the documentation on the website, the cookbook has great examples for use cases and the documentation is top notch. 
Technically, a professional driver in a prius could be faster than an average joe in a race car. Most of the benchmarks compare out of the box configurations that are far from optimal. 
Hmm, plausible. But then if people tend to *run* these configurations, maybe it is fair. I’ve compared Apache vs nginx on my own server and found Apache slightly faster, but I don’t know nginx very well, so could only follow recommended setups for it. 
You might want to put the links to the Slides and the code into the Youtube-Description also. Thx. 
&gt; `php.net/array_map` Didn't realize that worked. I thought it was just `php.net/manual/en/function.__func_name__.php`. Neat
This seems very strange to me. Why not have this available as a standalone binary/script?
The thing you're probably missing, though, is he has a block capital name which imparts at least some authority you don't have with your all-lower-case name.
I get the feeling we are actually saying the same thing. Stick with me: - When a browser talks to the server, it uses HTTP request/response to do so. - When a machine talks to the server, it uses HTTP request/response to do so. So request/response is the user interface both for the browser and the machine. The browser is the user as far as the server is concerned; the machine is the user as far as the server is concerned. Am I missing something in your distinctions?
&gt;&gt; The server-side application exists only on the server side. It's definitional. &gt; &gt;Yes and red balls are by definition red. &gt; &gt; Yay? Yay! Because red balls are red, and yellow ones are yellow. But a red ball &amp; a yellow ball do not make an orange ball ... &gt; I don't separate my web apps in "client" and "server". I separate them in "backend APIs" and "front-end applications". ... and eliminating the distinction between client and server does not make them into a single application. Maybe this is where you &amp; I have different approaches. I think recognizing/honoring/keeping-foremost-in-mind the boundary between server and client is of great importance. It is to be accepted and worked with as-it-is, not as-if-it-was-something-else.
What changes are you referring to? MySQL Community is still GPL, there hasn't been any license changes in that regard. Enterprise license hasn't changed much either, but some of the terms were changed and simplified to actually make it cheaper to run on modern multi-core systems.
Quoted from the sidebar: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). 
I don't use magneto so I can't comment on how good the article is. I will say I wish you had published the whole title so I didn't have to click on it to find out wtf a block is and why I need to override it :)
Trait has nothing to do with typing, it's more like copy/pasting code. Even if you use traits, interfaces remain mandatory to achieve proper typing.
How are you running it?
Magento 2 dev here, overriding blocks is pretty straight forward, and is illustrated well here. The main concept to take away is the xml preference block, when magento 2 compiles di, each time the class Magento\Contact\Block\ContactForm is used your custom class will take precedent. 
Through a web browser
&gt; We often call micro-frameworks "HTTP frameworks" I've been thinking about this and I think "HTTP user-interface framework" might be more fair. That name could also help to distinguish from "console user-interface framework".
You need to specify the interpreter not the script. The script is an argument to interpreter. Likely to be php-fpm but depends on how your stack is setup.
That's not requests per second that's unique visitors. Gratz to you if whoever you are working for is getting 2 million unique visitors in 3 hours (I assume Facebook or Twitter, maybe Reddit during an AMA) Just checked: your figures are more popular than any single retail website in the UK experiences that I know of. I've checked major supermarkets, fashion e-tail, the highest I could find was Argos at ~200k per day (68,985,000) a year with probably 100x budget I get &gt; argos.co.uk receives about 189000 unique visitors per day Edit2: I know social media and sites that don't sell anything get heaps of visitors 5th largest economy in the world doesn't have a single retail or e-tail site pushing the volume you do https://fullfact.org/economy/uk-worlds-5th-or-9th-largest-economy/ as I say gratz
Your script will probably run as the www-data user through the web browser. If your script is a cli script, you could run it as root by `sudo awesomeRootUsingScript.php` Assuming that you are an approved sudoer. 
Check your phpinfo. From my experience, you have to setup a php-zts. I know centos and ubuntu community server installs don't come with zts ***Edit*** As the comment to /u/the_alias_of_andrea I left has been edited out somehow Response to [next comment](https://www.reddit.com/r/PHP/comments/6uw616/what_the_hell_someone_made_a_mod_php_for_nginx/dlxr1l4/) &gt; If you want to go help the distro's release thread-safe PHP binaries for 5.x, 7.x, or make core compile with --enable-maintainer-zts on as the default, go for it. I've just commented on the situation ***as it is currently for non-core-contribs pulling the source or getting a binary.*** They could pull docker @ 7.1-zts-alpine if it's that important but you're then talking about a niche of people, and it's one I've advocated for growing here.
&gt; Lastly ~2M uniques a year? That's ~0.06 requests per second… or if my math is right, 1 request every ~15 seconds. Pretty sure I could hum modem noise through a phone line quicker than that. Unique visitors. Not requests. The requests is quite a bit higher as you might imagine being so knowledgeable (I'm surprised you missed out the word ***unique***). Btw for anyone thinking of estimating load. Don't take total (((((requests / weeks of year) / days in week) / hours in day) / minutes in hour) / seconds in minute) those are some magic, ***useless*** numbers. They won't help if 1,000 people smash into your site per minute on sale day. It's pointless mathematics and I'm really surprised who it's come from given that they work with a rather large entity.
https://render.fineartamerica.com/images/rendered/medium/greeting-card/images-medium-5/bread-trolleybus-boriss-mogilins.jpg Reads as: This way, using unsophisticated tools, you can transform a loaf of black (or white) bread into a trolleybus... But why?
Damn okay, and I assume by giving the interpreter root permissions then so will every .php file on the server?
Yes I'm an approved sudoer but unfortunately it's not a CLI script. It has a web interface (html, css, javascript) and uses $_POST variables to complete server tasks.
I guess the moderators don't agree with my question :( Thanks all for the help anyway
&gt; I am perfectly fine with having some 'wasted' resources on each PHP box, by having nginx also running there and doing not very much, except to make each of the nodes to be self-contained. You're also not talking about symmetric load, are you? Seems to me you might be running each of those nginx as a separate app, service or micro-service which is then normal. I'm not looking to say you only need two seams. The load balancer being nginx or anything else then doesn't count at the point of one codebase in PHP. You have Nginx back-ending to multiple PHP on separate machines/networks (maybe some other things for apps). When it gets big enough that you do care about " 'wasted' resources" you'll likely separate again. The initial question I'm pretty sure this all spun from was "why do I have a problem with single box work" and quite honestly it's because anyone asking for that can't afford my business rates, or is asking me to artificially suppress them, or do bad work. All three of those things are a no for me.
Is it fair to say that the earth is flat because some people tend to believe that? We are discussing the performance aspect of something in a scientific setting. In your case, you would be okay with either implementation. 
This isn’t a *belief* thing, it’s measured performance. The fuck?
Do you have anything better to do? 
Thats a good question. Well, the reason is that: - you need another dependency (which has to be maintained + supported) - you have to configure it (at least give some api-key to identify the project) - if you add a custom "post install script" you have some weird behaviour if you just test some dependency upgrades locally (for example: multiple people are upgrading at the same time on a local environment) 
http://i.imgur.com/juUPTcA.jpg 
all php array function shown in this table.
Same. Tried it once, had errors and shit, never used it again.
&gt; I think recognizing/honoring/keeping-foremost-in-mind the boundary between server and client is of great importance. It is to be accepted and worked with as-it-is, not as-if-it-was-something-else. I realize communication is hard and you probably can't understand what I'm telling you before we meet face to face and I draw a bunch of stuff on a whiteboard, but I do get the strong feeling you could understand if you weren't *trying so hard to misunderstand me* so you can go all righteous, telling me how important client/server distinction is. I *never said* the client/server boundary isn't of importance. It's a boundary that places some restrictions on what you can and can't do. What I'm saying is that many years ago I realized client/server is not the same as backend/frontend. Client/server is not the same as backend/frontend. ------------------------------------------------------- I was initially confused they're the same, but over the years I figured out this is just one of those more subtle moments you have to learn to separate as a professional in order to write better apps. - Your backend is your domain logic, your services. It's where the action truly happens. It's where the data is truly held and transformed, where business rules are enforced. It's a boundary of trust. The backend is trusted. Nothing outside the backend (i.e. including the front-end) is trusted. - Your frontend is the "app" part, the "web site" part, the MVC part, the GUI part. And some of this is on the server, some of it is on the client. They're architecturally in the same place, so they should interact smoothly. They get their data from the backend by interacting with it, and to interact with it they must authenticate as a specific user with specific privileges (unless the specific data is 100% public). Architecturally the significant separation is backend/frontend, not client/server. And client/server is just a channel with a (relatively speaking) narrow bottleneck on bandwidth and latency, that's all that it is. That's what it **should** be so you can be flexible and mix client and server effortlessly as a modern web app requires, without constantly hitting obstacles. Backend/frontend is an architectural boundary. Client/server is a bandwidth boundary. ------------------------------------------------------------------------------------------------ I trust my PHP server frontend just as much as I trust my client-side JS frontend. Which is not at all. The trust is in the backend. That's where the authentication, validation and operations happen. The frontend is simply the console with buttons, sliders and lamps put before the user to interact with the backend. Once you understand this separation, lots of complexity fades away, lots of things that looked hard or took effort to do become easy and natural to do. Part of your front-end has always been on the server, and you *know it*, or you wouldn't be talking about UI, GUI, views and "presentation" in PHP. That's all front-end concerns. Ignoring the client and thinking just server is a way to think about less, but it's not a way to end with superior results. So if you're confused by thinking about the whole picture, thinking about the server in isolation is a valid crutch to use, but for those who don't need the crutch, it's not the most valid or best approach to writing web apps. It's certainly not architecturally superior. It's just a way for those who can't handle more to get by.
It's built in to the engine, it's up to the packagers and the integrating SAPI to decide whether to use it. If an nginx mod wants thread-safe PHP, it would get it. What's in the default packages on major Linux distributions is irrelevant, that's not PHP for nginx.
&gt; Architecturally the significant separation is backend/frontend, not client/server. (/me shakes head) Backend/frontend may be *a* significant separation, but it is not *the* significant separation, and maybe not even the *foremost* one. &gt; Part of your front-end has always been on the server *One* of the front-ends has always been on the server. That is the front-end of the HTTP response-receiving request-delivering server-side application. I don't get why you're writing walls of text dedicated to denying that simple straightforward obvious truth.
&gt; I trust my PHP server frontend just as much as I trust my client-side JS frontend. Which is not at all. The trust is in the backend. This is an interesting sentence. Are you saying that what you call your backend services are not written in PHP, and not delivered by a web server?
If you want to go help the distro's release thread-safe PHP binaries for 5.x, 7.x, or make core compile with `--enable-maintainer-zts` on as the default, go for it. I've just commented on the situation as it is currently for non-core-contribs pulling the source or getting a binary. They could pull docker @ `7.1-zts-alpine` if it's that important but you're then talking about a niche of people, and it's one I've advocated for growing here.
&gt; This is an interesting sentence. Are you saying that what you call your backend services are not written in PHP, and not delivered by a web server? Read that interesting sentence again. Am I saying that? I'm not saying it. It's kind of irrelevant what you write the back-end in. That's what a good architecture allows: it allows you to decide this on a case-by-case basis depending on your needs. So sure, *sometimes* parts of the backend won't be written in PHP. PHP isn't fit for everything. But the resulting backend APIs are exposed to PHP, just as they are exposed to JS on the client-side. So there's at least a PHP "wrapper" for the service in there and it works like any other PHP object works. *It doesn't matter* how the services are written.
Using postgresql on a new project. The UI tools for postgresql SUCK!!! For MySQL I can use heidisql which is free and (with wine) works on linux, and you have a few others. What I am using for postgresql is pgadmin and it's horrible!! (but free)
&gt; (/me shakes head) Backend/frontend may be a significant separation, but it is not the significant separation, and maybe not even the foremost one. Yeah? Fine. Make that point. Show me how it's the "foremost one". Substantiate your argument Because I'm afraid "shaking head" is not a substitute for making a valid argument. I explained why modern apps need to fluently mix server-side and client-side front-end logic and how the unification of access to the back-end APIs makes the creation of such apps easy, simple and flexible. And you're just typing "/me shakes head" with zero explanation, as usual. &gt; One of the front-ends has always been on the server. That is the front-end of the HTTP response-receiving request-delivering server-side application. I don't get why you're writing walls of text dedicated to denying that simple straightforward obvious truth. I'm writing "walls of text" (which you're obviously not reading) because that's how an intelligent conversation and debate happens. We put forwards facts and reasons and make our point. I keep making my point, you keep ignoring them and failing at making yours. It's like talking to a brick. &gt; denying that simple straightforward obvious truth. Just listen to yourself speak... You're making a point of *faith*. You believe in truth that *feels* "obvious" and it needs no explanation. That's an argument from incredulity, argument of basically religious nature. "I strongly believe this in my gut, I can't accept anything else, therefore you must also unconditionally accept what I believe, or you're wrong". It's kind of unfortunate to see such **poor reasoning** come from a programmer, but everyone is susceptible to getting stuck and inflexible on some kind of nonsense idea. The difference between sciences and religion is that sciences are based on reason and facts, and religion is based on unsubstantiated faith. You've demonstrated unshakeable faith in your concept of how this works. You've provided no reasons, no facts. While religion may seem "self-obvious and the essence of truth" to the religious, to the scientific-minded and engineering-minded *everything can be debated and explained*. Without explaining and demonstrating your point, it's not a valid point, as far is our industry is concerned. You're only going to catch a few young fish looking for silver bullets, but not anyone with a working head on their shoulders. I know why I do what I do: I can explain every little bit of it. And you've never addressed what I explain, you just ignore it. All you have is "I don't understand these walls of text" and "/me shakes head". If you think shoving your head in the sand is the path to higher knowledge, I have bad news for you.
&gt; you can start from creating correct structure. this structure fits only for small projects (which maybe wont get any profit from CQRS/ES). Feature-based structure will be much more better. class UserRepository extends AggregateRepository implements BaseUserRepository Instead of aliasing `UserRepository` you could name your class `ProophUserRepository` for example. public function save(User $user): void Save your repositories from `save` $user = User::registerWithData( You could use builders to reduce number of arguments and make your code a bit readable. $obj-&gt;recordThat(UserRegistered::occur($id, [ 'email' =&gt; $email, 'password' =&gt; $password ])); Is password already hashed here? How would you, for example, send notification that user already registered? p.s. I don't think that user registration is good example to try event sourcing. Simple ecommerce system will be much better.
Using the demo search of TV shows, and the results are pretty bad. Try typing out "game of thrones". It finds it after "game of", but then loses it at "game of t" and doesn't return to the results until "game of thron". It is also apparently case sensitive because typing out "Game of Thrones" in title case gets you no relevant results at all at any point.
I agree. The title sounds like "How to Dance Potato" if you don't know what block is. 
What the hell is CQRS+ES? &gt; In this tutorial I assume that you know the theory about CQRS+ES, you don’t need any explanation why and when it’s better solution than CRUD. If you are looking for this kind of information, please get back to Google. You couldn't have posted this as the *first* paragraph instead of making me skim your article getting more and more confused? Okay, fine, I'll LMGTFMyself... * CQRS: Command Query Responsibility Segregation * ES: Event sourcing &gt; # What is CQRS? &gt; In his book "Object Oriented Software Construction," Betrand Meyer introduced the term "Command Query Separation" to describe the principle that an object's methods should be either commands or queries. A query returns data and does not alter the state of the object; a command changes the state of an object but does not return any data. The benefit is that you have a better understanding what does, and what does not, change the state in your system. CQRS takes this principle a step further to define a simple pattern. &gt; &gt; "CQRS is simply the creation of two objects where there was previously only one. The separation occurs based upon whether the methods are a command or a query (the same definition that is used by Meyer in Command and Query Separation: a command is any method that mutates state and a query is any method that returns a value)." &gt; &gt; Source: [MSDN](https://msdn.microsoft.com/en-us/library/jj591573.aspx) &gt; # What is event sourcing? &gt; Event sourcing is a way of persisting your application's state by storing the history that determines the current state of your application. For example, a conference management system needs to track the number of completed bookings for a conference so it can check whether there are still seats available when someone tries to make a new booking. The system could store the total number of bookings for a conference in two ways: &gt; &gt; * It could store the total number of bookings for a particular conference and adjust this number whenever someone makes or cancels a booking. You can think of the number of bookings as being an integer value stored in a specific column of a table that has a row for each conference in the system. &gt; * It could store all the booking and cancellation events for each conference and then calculate the current number of bookings by replaying the events associated with the conference for which you wanted to check the current total number of bookings. &gt; &gt; Source: [MSDN](https://msdn.microsoft.com/en-us/library/jj591559.aspx#sec1) Okay, I get the gist of it now. &gt; you don’t need any explanation why and when it’s better solution than CRUD. If I search `CQRS+ES vs CRUD`, most of the results concur with /u/fesor's comment - CQRS+ES may not be worth the complexity and increased costs for smaller projects. Why do *you* think CQRS+ES is better than CRUD?
&gt;&gt; This is an interesting sentence. Are you saying that what you call your backend services are not written in PHP, and not delivered by a web server? &gt; &gt; Read that interesting sentence again. Am I saying that? I'm not saying it. I didn't say you were, or weren't. I asked a straightforward question. I'd appreciate a straightforward answer: are you saying that, or not? &gt; It's kind of irrelevant what you write the back-end in. Maybe; but in the context of this discussion, what are you writing what you call your backend in?
&gt; Substantiate your argument Maybe you should start by substantiating yours. References and links might be a good start; they worked to convince me that "pipeline" was a poor name, they are likely to work here too. &gt;&gt; denying that simple straightforward obvious truth. &gt; &gt; Just listen to yourself speak... You're making a point of faith. Like I said earlier, it's "simple straightforward obvious truth" because it's definitional. You then tried to deflect to ... red balls? And now you began descending to psychologizing and personal attacks instead of sticking to technical talk. Maybe you should come back when you can be a little less personal, and a little more professional. 
&gt; &gt; &gt; ...Are you saying that what you call your backend services are not written in PHP... &gt; &gt; Read that interesting sentence again. Am I saying that? I'm not saying it. &gt; I didn't say you were, or weren't. I'd appreciate a straightforward answer: are you saying that, or not? Are you OK, Paul? &gt; Maybe; but in the context of this discussion, what are you writing what you call your backend in? I answered that in detail in the previous comment. Are you OK, Paul?
Php search engine is awesome, but I need a different default search in my browser. Sure I could switch, but that is more typing when I forget to switch the search engine. 
FWIW I think actual event-sourcing is usually overkill. You can get a lot of the benefit for less complexity just by using CQRS plus vanilla events that complement your mutable data in a less-authoritative way. The "current state must be entirely reconstructible from all past events ever" requirement introduces big issues with being able to "replay" a FooEvent from 5 years ago that had very different meaning versus today's FooEvent. 
&gt; Maybe you should start by substantiating yours. It's in the "walls of text" you dismissed and shook your head at. You're quite arrogant, but I've learned my lesson. &gt; Like I said earlier, it's "simple straightforward obvious truth" because it's definitional. "A client/server application is implemented on both the client and server". That's also definitional. "A frontend can span the client and server side." That also is. So now what? None of these definitions, neither yours nor mine, by themselves demonstrate any "obvious truths". Is this the depth of your thought here? Writing definitions and declaring "QED"? Kind of childish. &gt; And now you began descending to psychologizing and personal attacks instead of sticking to technical talk. Describing what I said as a "personal attack" is basically your placing a "guilty" verdict on your own behavior. I have to say what you're doing, in attempt to trigger some sort of self-awareness on your side. I'm writing long technical arguments, you respond with "I'm shaking my head", and "I don't need to prove anything, I'm obviously right and the holder of obvious truth". How am I supposed to engage here? The only thing I can do it point our your demonstrated incompetence to have a debate on the topic. As I've told you many times, if you have nothing to say except "my truth is obvious", just don't waste your and my time pretending as if you have something of substance to provide to a conversation. I've had *substantially* more intelligent conversations about architecture with people who have been into programming for less than 3 years. There's obviously some sort of impediment here. I've never seen you support any of the things you push on people. You merely "define" them, and expect people to bite. Well the less sophisticates ones do. The rest are just laughing at you.
&gt; I answered that in detail in the previous comment. Now you're prevaricating. What you said was ... &gt; It's kind of irrelevant what you write the back-end in. ... It doesn't matter how the services are written. That's not an answer to the question; it's a statement that you don't like the question. We won't be able to continue until you answer simple questions forthrightly, instead of avoiding them. 
&gt; "A client/server application is implemented on both the client and server". That's also definitional. This is incorrect. A client/server application is two things: an application deployed on a server, and a separate application deployed on a client. Even Wikipedia (the lowest of the low) says as much &lt;https://en.wikipedia.org/wiki/Client%E2%80%93server_model&gt; &gt; A server host runs one or more server programs which share their resources with clients. A client does not share any of its resources, but requests a server's content or service function. Clients therefore initiate communication sessions with servers which await incoming requests. Examples of computer applications that use the client–server model are Email, network printing, and the World Wide Web. Now, if you want to argue the semantics of a "program" vs an "application" (which you have failed to distinguish between thus far) I'm game, but at that point you're pretty deep in the weeds. In fairness, I'm willing to read the resources you can link to that support your point of view.
**Client–server model** The client–server model is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients. Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs which share their resources with clients. A client does not share any of its resources, but requests a server's content or service function. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
&gt; That's not an answer to the question; it's a statement that you don't like the question. Are you seriously OK Paul? What the hell, I said **this**: *"That's what a good architecture allows: it allows you to decide this on a case-by-case basis depending on your needs. So sure, sometimes parts of the backend won't be written in PHP. PHP isn't fit for everything. But the resulting backend APIs are exposed to PHP..."* You're not asking me about a *specific application*, of course I can't answer definitively "always PHP or never PHP" for services, because I decide this differently for different services in different applications. This is software 101 here, what **the hell** would be I "not liking" about the question? I answered your question as accurately as I can given it's a very general question, not pertaining to any specific use case. So: - Sometimes they're written in PHP - Sometimes they're not written in PHP I'm not a "silver bullet" guy, I'm not a "single trick pony" guy, I don't do the same thing every single time. I have some range. I guess that's confusing you, isn't it? &gt; We won't be able to continue until you answer simple questions forthrightly, instead of avoiding them. Are. You. OK. Paul?
&gt; You're not asking me about a specific application I am asking you, specifically, what you, specifically, write your backends in. What. Do. You. Write. Them. In.
I write them in PHP, Java, Rust, Go, C, C++, Python, Node.JS and others. Is this what you wanted to know?
Thank you for a simple answer to a simple question.
Now, as to the "frontend/backend" stuff, specifically in relation to PHP, do your PHP-based backends expose an HTTP interface, or is it some other sort of interface?
A simple answer to a simple question? You, sir, need to learn to ask questions. Here's your simple question: &gt; Are you saying that what you call your backend services are not written in PHP, and not delivered by a web server? Since some are PHP, some aren't, some are web server, some aren't, the only valid answer to your "simple question" was: **sometimes yes, sometimes no**, and that is **what I answered**. So next time you want to ask: &gt; Can you give me a list of languages you write your backend services in? Don't ask: &gt; Are you saying that what you call your backend services are not written in PHP, and not delivered by a web server? You botched your question.
Been using smarty 3 with php 7 lately. Not a problem.
Thank you for confirming that your answer was "I don't like the question."
Sometimes HTTP, sometimes TCP/UDP/Unix pipes/process streams with other protocols (like Thrift, Protobuf, or just a simple JSON back and forth, etc).
All right, then: for the HTTP-based backend services, do the users of those services use HTTP requests and HTTP responses to work with them?
I answered the question as it was, and subsequently it turned out you've garbled the question, and blamed me for answering your question as you stated it, instead of how you imagined it in your head. 
So this entire time you've been driving this to your "win an argument through word-play", is it? What kind of an idiotic question is this? If it's HTTP-based, then obviously it's HTTP request/response-based. Which is entirely superfluous, as I've switched interfaces from non-HTTP to HTTP and back to non-HTTP. Or I have services that provide both at the same time. HTTP is not important in any way here. Look. I regret highly ever engaging with you. There's no substance or real conversation happening here. Just a full-on display of your communication deficiencies. This conversation serves no purpose anymore. Provide me with your "gotcha" point if you will, and F off.
I have no "gotcha" other than to point out that this is all I've said all along: the user-interface in an HTTP environment is the request and response. As far as "F-ing off" -- after you! EDIT: &gt; This conversation serves no purpose anymore. By the way, HAL, I do appreciate the reference. :-) 
&gt; I have no "gotcha" other than to point out that this is all I've said all along: the user-interface in an HTTP environment is the request and response. So there's the gotcha! Theeeeeere you go, good boy. What an amazing point! It's because you've defined "HTTP response" as "UI", get it? Haha, you've shown me. This means I actually have UI logic straight in the middle of my backend! Which... ~~makes totally no sense whatsoever~~ is a great point and I'm humbled by realizing this!
I wouldn't recommend doing this unless you're absolutely confident the PHP script is safe to run as root, but you could use [setuid](https://en.wikipedia.org/wiki/Setuid) to allow a script to execute as its owner (e.g. if root owned /a.sh, when www-data executes /a.sh, it would be executed as if root had executed the script).
**Setuid** setuid and setgid (short for "set user ID upon execution" and "set group ID upon execution", respectively) are Unix access rights flags that allow users to run an executable with the permissions of the executable's owner or group respectively and to change behaviour in directories. They are often used to allow users on a computer system to run programs with temporarily elevated privileges in order to perform a specific task. While the assumed user id or group id privileges provided are not always elevated, at a minimum they are specific. setuid and setgid are needed for tasks that require higher privileges than those which common users have, such as changing their login password. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.26
&gt; This means I actually have UI logic straight in the middle of my backend! At this point in the conversation, I'm not comfortable talking about your backend. "Open the pod bay door please" indeed. ;-)
Yes, ES can be a tricky beast. I recommend this talk for people not too experienced with it: https://www.youtube.com/watch?v=8NuHNtwjync
Reportedly this works in FastCGI too now.
Don't worry I know you have no insights about my backend, especially when your entire point was that I should think of my backend API as "UI" when I use HTTP, and when I don't use HTTP I guess it's up in the air. Because Paul asserted definitions, and he defined things thus, end of story.
I love the idea about Unit tests. But how does one actually go about writing unit testable code ? Currently my code is just not organized well enough to be testable. No matter what approach I use - OOP, prodcedural, frameworks etc , am unable create reuseable components, even for simple use cases. Just to be clear my question is not about unit testing, but about learning how to create modular/reuseable components. Is there any guide or book or something for learning this ? Edit: Should add, Programming for years now, so not looking for basic foo::bar examples, but advanced stuff. 
If it only works on that small a scale, why not just use MySQL or Postgres full text indexing? That works fine for relatively small scale search.
This article was pathetic. Pretty sure it's some garbage Indian clickbait site aiming to sell adverts. *All* developers need to be trained in security best practices, regardless of which language they happen to use most. 
[PHP Security Cheat Sheet](https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet)
I think you're talking about client-server, which you are right about. But client-server has nothing to do with user interfacing. The server just sends a bunch of characters and the client (a browser) in your story makes it presentable to its user. Where I only say, that your writing covers half the story. But you already got that point but refuse to acknowledge that your thinking was a tiny bit too narrow. Nothing wrong with the thing you wrote, you only forgot a part.
PHP has just one use - websites. It's also kind of schizophrenic. Python is a consistent and general purpose language, students can focus on one thing with it: learning coding.
Your code looks like mine 3 years ago. And it's not good. Nope, it's not.
Ouch, this really shouldn't happen anymore. &gt; //@ Thanks to - http://phpsec.org function generateHash($plainText, $salt = null) { if ($salt === null) { $salt = substr(md5(uniqid(rand(), true)), 0, 25); } else { $salt = substr($salt, 0, 25); } return $salt . sha1($salt . $plainText); }
That's exactly the point, its beginner level code thats easy to understand, the goal is to learn from it, not use it for production? 
But it's where many people start or worse. Please read through the site. It's meant as a learning tool, is it possible you are thinking this was a production framework? Perhaps I did a poor job of explaining on the site itself. The goal here is to present a site that any beginner can reason about that illustrates many common issues faced by developers today? If you are experienced, try to remember when even understanding how the user ID associated with anything was a struggle. Working through this code, understanding what it does and going through the process of bringing it up to snuff will in my opinion give you a pre built crash course and could be for some an excellent way to learn without starting from scratch which most beginners can't do in my experience? Or if it just sucks, sorry... It has been really valuable to me when I was learning. 
I mean there is absolutely no way anyone should start learning from such password hashing legacy. When teaching, I'd like to emphasize that it is crucial to teach the right way from the beginning, or else the same mistakes will continue to live and live.
&gt; The "current state must be entirely reconstructible from all past events ever" requirement introduces big issues with being able to "replay" a FooEvent from 5 years ago that had very different meaning versus today's FooEvent. This strikes me as what the blockchain tech is doing. Can we apply the blockchain tech in this context? A chain of states that can be verified/reconstructed from any given point in time.
Learn to apply Dependency Injection Check this blog series https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/ you will have a fairly decent idea on what makes code testable once you go through them ( first post is just an intro ) also have a look at the Testing part of https://qafoo.com/book If you are into books, do check out this excellent book by Matthias Noback ( paid ) https://leanpub.com/principles-of-package-design 
It's a fair point of view to have but I don't agree. Seeing what actually happens and learning to get to the best place possible is a rough process. I think much of the reason people don't actually understand this stuff is because they never have to work through why. Why do I want to store my connection info out of root? It makes sense when you think about it but on most shared hosts you can't do that so what is the reality I have to face. Why do we hash and how is something still hashed but considered inferior is an excellent example to make but it certainly isn't the only way, I agree there can be many approaches. 
maybe you want to read http://tnt.studio/blog/solving-the-search-problem-with-laravel-and-tntsearch
&gt;This strikes me as what the blockchain tech is doing. Can we apply the blockchain tech in this context? The basic approach of chaining hashed/HMAC values has been around for decades, and you could maybe incorporate it to help detect tampering with the event-history of an object. However, I don't see as much use for the newer "secret sauce" behind crypto-currencies. The benefits and tradeoffs don't really match up. It'd be like using Tor between your internal webservices when all you really want can be done through HTTPS.
The thing about security is that if people start learning incorrect information from the start, most of the people will think it's okay and will never learn otherwise. Because why change if something is working? The best example for this is you, you probably learnt it ages ago and now passing this false information around, disagreeing that it's bad. Without even thinking what consequences it will bring. We are not saying that all code in this project is bad (I did not even look at it), but things like this could be easily replaced in 3 seconds with something more modern and most importantly secure.
Who not teach the built in php functions for password hashing straight away? It's not harder to learn the right way to do it.
Why not just use password_hash and password_verify? Learning is all well and good, but the one thing you should learn about security and password hashing is Never Do It Yourself. This is perpetuating bad practice - unless you're specifically saying somewhere "Hey, you can do it like this, but in a production environment... you need to do it like this (which by the way is quicker, easier and more secure)"
Maybe consider updating the code to use PHP's build-in password_hash (it's even simpler that way!) and if you want to offer some "deeper" learning material for those who are interested, you could link to, say these materials: * http://seclists.org/bugtraq/1995/Apr/143 (especially the second to last paragraph) * http://www.openwall.com/articles/PHP-Users-Passwords * http://timoh6.github.io/2013/11/26/Aggressive-password-stretching.html (article written by me) * https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016
Do not give the web server user root or full sudo permissions. Ever. I cannot stress this enough, no matter how much you lock it down, you're still adding a layer of risk to your application - not just through the code that's running the exec() commands, but potentially any files that are uploaded to the server by users. All it takes is for you to miss sanitising one upload form, or call to the exec()'s, and some bugger gets full access to your server. What you can do, is set up your web-server-user (www-data or similar) so that it has limited sudo access to specific commands only, this is harder to manage through source control, and adds an extra dollop of work to your sys-admins, but it's a much safer way to approach it.
&gt; Threading is not obscure with FPM Show me the numbers of people using FPM, and the number of people using threads with PHP, then the overall numbers for use of PHP from a reputable source. Otherwise I'll go by what mosts hosts, distro's and the php-core source offers as default, along with my experience, which involves to some degree being in charge of what is installed on servers. This isn't my first day with PHP, I've been using it since 3.x, and while I might not core contrib, or push out wonder of the world projects, I've got a fair idea what goes on to the point I'm rarely surprised by anything that comes up with PHP. My opinion is not designed to attack anyone (unless you've already sent me some snarky retard comment or misrepresented what I've said). &gt; A single NGINX server that pipes requests to FPM pools will increase the latency of the application. So on a point I've not contested. I've stated rather specifically stated &gt; ***IPC is limited to your PC***. Past that point, you need to ***accept that you'll need to contact other servers you can defer to (because PHP will need more instances than Nginx)***. I've never said FPM with one backend would be faster. What I've said is that all apps that use more than one server (because they have a non-trivial visitor count implied), have to use the network. I've also stated &gt; Saying an IPC based module ***is a bad design for a distributed system*** isn't the same as saying that fpm is the ideal transport mechanism. It just acknowledges at some point this will be distributed and at that point, ***we'll probably use a known protocol.*** I was super-specific about this, so that trolls didn't try to assert that I'd said FPM and network com were faster than IPC. I've been very open about not talking about LAMP single boxes. Why people keep on about them is beyond my willingness to understand, it's tangential. I've received a note from a mod asking me not to be combative, but looking at the majority of dogpiling drooling crap including from at least three that should know better than to be engaging in such what-if dreaming; even going as far as to misrepresent what I've actually posted, I'm pretty fed up with crap like this. &gt; You are not seeing much difference because your volume is tiny Honestly, GFYS, it's ranked by alexa within the top million websites, and there are a lot of websites. You're definition of "volume is tiny" is skewed, not representative of any metrics I have access to. You're just baiting and I can't be bothered. &gt; unique visitors is not a proper unit of measurement in this context. Unique visitors is one of the most important metrics as it's one of the control points (is my content relevant to individual users). I don't know who appointed you god of what is and isn't an important metric, but raw requests isn't an important metric for PHP to me. For one thing, you shouldn't be hitting PHP for raw requests. CDN's use them to make it look like they are performing some magic. It helps them to communicate business value and why their costs are associated. I still don't see the point in saying "We handle 2 million requests in 3 hours", it conveys nothing. I've seen a lot of others quoting throughput on their apps in terms of raw requests, which is a lot more obscure. I wasn't boasting (I've actually deleted that comment in-case it's seen as boasting), it's a statement of the type of business I like to help. Intended to help frame where I'm coming from, where my comments are directed. Not so small they can't afford my help, not so large they are focusing on wonder of the world projects which I wouldn't want to work on. If you work on "wonder of the world" projects, a simple top level comment "we work for Facebook and for us this makes sense" wouldn't provoke a combative response at all. Look at top level comments, not this nest of nonsense. I'd likely upvote like I did the Java guy. I might even ask questions. It doesn't affect me or most of the people using PHP what facebook or some obscure entity is doing. We shouldn't be copying them blindly, because they are a unicorn and very few of us are at, or want to be at their scale, it's a waste of our efforts doing what they do. I'm not going to respond to you past this point, hopefully you'll go away
We all wrote code like this at some point, I wrote it 10 years ago. But the thing is, I had noone to learn from, there was not as much information at the time. Heck, I did not even have a computer back then. However these days there are so many good tutorials, so many good learning resources that projects like this should not be something people are learning from. 
I wasn't planning on giving the "web server user root or full sudo permissions". Instead I want to give a single hidden &amp; locked away .php file sudo permissions
Last time I checked, Laravel was free, and LaraCasts were too? I fail to see the point in this? I can see why you'd want to do it, for yourself, however - to teach others PHP and building a member site, I'll always point someone to the Laravel source, or Symfony (if they're slightly more advanced)
There were a number of reasons why I went with a 3rd party search rather than the built-in one. * The full-text search is pretty dumb when it comes to creating a search engine like system. Matching against a LIKE query leads to unexpected results if say a spelling mistake is made or even if the user inputs words in a different order to what they appear in a document. * The ability to create a FuzzySearch with TNT is perfect for a document search site. * Part of me wanted to try something new. The first 2 problems can be solved with a few functions like similar_text, looping the input string and matching individual words and then scoring the returned results in a merged response. The problems with this are A. The budget simply didn't allow for this kind of engineering/time B. I'm no way near as smart as the TNT guys when it comes to understanding and handerling search. 
&gt; I was pointing out that they need to be configured. I'm sure that there are plenty of Git repos out there that do this, but I've found it non-trivial personally. Perhaps the docs or a pluralsight course would help. There are some great resources for Docker. This is a tangent to if it's a good idea to use docker though, which seems to be some point you've chosen to raise with me, who knows docker to a pretty solid level and is saying it's both mature enough and provides enough benefits to be a replacement for a server-setup you really can't describe without some alternative DSC tooling. If that alternative provides consistency I'm going to be all for it, so before you say ansible, chef, yeah they are also good (IMHO more complex). &gt; It's not like you can just have three FROM lines in Dockerfiles, and then a yaml with three services and three volumes and you're done, which is what you seemed, and still seem to be saying. Like a lot of people arguing with me here, you're inferring things I haven't said and assumed bad faith. I've said it's better to use docker-compose if it lives on one machine. What is inferred is that is at least your infra is codified. This means you'll be following practices that will save everyone time going forward. If that is not your skill-set, I've good news. Websites don't work off of one person skill-set, including mine. Maybe persuade your employer to spring for budget and time for you to learn, and maybe just accept someone else will do that. You may become a user of that system, you may or may not know about it. There is no need for every dev to maintain docker images. At the point you find yourself adding things to them, you're codifying what is needed for the application, and you'll need to maintain that. From my perspective it's all about limiting the magical crap people do, then either don't write down, or gets lost, or remains uncommunicated that gives headaches to everyone else, so that low-level implementors can get on with their job, without having to waste a day or an hour trawling for info. Docker caters really nicely to that, and as a side-effect means at the point you need to get off that one machine you are not editing application code, your docker images remain relatively the same, so you're saving time. You specifically saving time, is not my concern. You're not my client, I don't work for you, so that is why I've been wondering WTH every time you comment tangentially to this particular comment thread.
I totally understand what you are saying but I don't think anyone that isn't a prodigy can figure Cake or ZEND Laravel without several years of experience. I think it's better to start with a turd on the whiteboard than nothing and for a beginner there really isn't much in the way of working examples that are vanilla enough to understand. This is clearly not meant to be prod code. But I studied all of these issues for several years myself before I really understood them and I only did that by having them all together in one place as a working example I could study which was invaluable to me personally. 
I want to thank you so much for the feedback! I'm going to update the verbage on the site to make things clearer. Any intern spends their first year or two fixing broken code that looks like it works and that's exactly what this is so I stand by the potential value of the project. I understand it's not conventional and certainly worthy of criticism. I have no idea if it will actually help anyone else but that is my hope to eventually build a community that will ID and discuss the issues presented and how best to solve them. Cheers!
I've never seen it done on a per-file basis, this is not to say it's impossible. I think you will be best off allowing a specific user access to specific commands via sudo (so, instead of 'exec("ls -art")' your full command is 'exec("sudo -u mynewuser ls -art")') - allowing only the ls command (or required commands) to 'mynewuser' and only allowing "sudo -u mynewuser" from www-data.
You don't compromise with security. Furthermore, it's not even that hard: * [use bcrypt](https://codahale.com/how-to-safely-store-a-password/) You can find load of information on this online and as far as I'm aware it's still correct. You don't even need a per user salt, as bcrypt handles that for you. The reason sha functions are so bad is that they are not designed to secure passwords from brute force attacks, they are too fast by quite a long way. Which means you are making life easy for the person who compromises your data and giving your users less time to react. Bcrypt also has configurable complexity, so if you are willing to trade speed for security you can basically make brute force and rainbow attacks next to impossible. Even if you do care about speed, from the user's perspective it's barley noticeable, it makes automation really hard.
Its great for client websites. If you are doing client work en-masse then I would recommend it. Its very powerful for its small footprint. Probably the biggest pro is that its all PHP and can be embedded in your website/cms code with minimal setup. This also makes it very portable and easy to host. If you are building a SAAS or another amazon or even just a medium enterprise application, then you need something more powerful. I used to go for Lucene but these days we have the magic that is Elasticsearch which is technically just extensions to lucene but adds so much more functionality and completely changes the way you interact with it.
Yeah, I didn't see that thing, thanks @PetahNZ
any expansion on that? I'm fine if it's a paid for book but it's down as a long-term interest, as I've not seen implemented.
Yeah i'll see to it , but I think faker offers it already
Nice comment.
Nope.
Thanks for your sarcasm indicator. As a Redditor, I hate missing out on the joke because it's not explained to me.
&gt; Calm down Only person upset seems to be you. Perhaps you should drink your own medicine.
get lost
You forgot this: /s
What they're getting at is that you can add a keyword trigger for search in Chrome (and I think Firefox) so that if you type "php" in the address bar it will start searching in the PHP docs, otherwise it will search with Google or whatever other default you have.
I have a couple of junior guys working with me and they already know a lot more than you. Sometimes it's better to talk less and listen to what others are saying. You are passionate, I will give you that.
http://magentonotmagneto.com/
Do you have any Urdu tutorials first please?
But your method is much more confusing and less secure than using `password_hash`. `$salt = substr(md5(uniqid(rand(), true)), 0, 25);` is NOT beginner friendly in the least bit. You even use `sha1`, at the top of the [sha1 documentation page](http://php.net/sha1) you see a big red warning that says &gt; It is not recommended to use this function to secure passwords, due to the fast nature of this hashing algorithm. See the Password Hashing FAQ for details and best practices. It even links you to a nice little [FAQ](http://php.net/manual/en/faq.passwords.php) about safe password hashing. This teaches new users bad practices. Edit: Below you start talking about how you want people to learn from doing things the wrong way. This isn't a for loop, this isn't simple data persistence, this is user credential hashing and storage. It's **VERY** important to get right.
Lol and thus proving i don't use **magento**
How to Write Title
you need a `UserFactory` which knows how to create a user, and inject that. if you truly are using value objects though (like structs) just instantiate them....
In a true bit set implementation, wouldn't you have just 2 possible items: 0 and 1? My implementation, and the original BitSet PHP extension, are closer to a bit field indeed, but the term "bitset" is frequently used to speak about bitfields. From that point of view, your set is truly a set data structure. Why did you choose to rely on a native PHP array, which can be misused by users, instead of an object instance which hides internal structure and only provides an interface with your 4 methods?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
externals.io thread of the rfc discussion here https://externals.io/message/99346
I know you put a lot effort in it but you should really check [PSR-2](http://www.php-fig.org/psr/psr-2/)
I've never tatourial before. Tell me more. 
Sounds like a factory line producing Wordpress sites maybe?
I'd wager pornhub or another large scale website ran w/ a PHP backend.
yes i have visit my channel and subscribe it also https://www.youtube.com/channel/UC6JWw0iheOuTxk_MhI41J0g?view_as=subscriber
Perhaps it would help if you gave some examples of what you want to test but have not been able to (doesn't have to be the code, can just be a description of what you are looking to unit-test). Some things don't belong in unit-tests (i.e. a function that calls CURL or returns a PDO probably isn't going to benefit from unit-testing).
Did you code this, or did someone else and you are sharing it? As others are saying `password_hash` is the go to for password hashing from 5.5 (circa 3-4 years, [2013 was the release of 5.5.0](http://php.net/releases/#5.5.0)) it's in core What I couldn't get over was how difficult it must be to follow what is going on in that without an IDE, and some form of a diagram or mental model of the system. One accidental space and an ini edit and the headers won't send because the view code is mixed with the output code (also test in opera). I mostly wanted to say that one of the things it says on the website is inaccurate and slanderous &gt; You could also store the database connection info in the database like Wordpress does but as we all know Wordpress sites get hacked all the time. WordPress doesn't store connection info in the DB by default, and core WordPress does not get hacked because of its login system without some other nastiness going on. * password sniffed over unencrypted HTTP * password is simple dictionary password * plugin contains deliberate hole / malicious code * plugin contains unknown vulnerability (separate because the intent is different) * server itself is hacked, misconfigured or poorly setup (:2082 Cpanel is a popular one to scan for) * credentials are taken from a leak or another service (could be an email you sent someone, could be a site using plain-text or out of date auth) * injection (via plugin, or theme) * DB hack over unencrypted MySQL * phishing via a replaced wp-login.php * core is not regularly updated * server / WAF is allowing SQL in POST or QUERY parameters It's not intended as an exhaustive list, but those are some common reasons WP is "hacked" / breached / defaced remotely.
Umm… did you forget a link?
&gt; Horrible background noise &gt; Closing PHP tag &gt; English??
lol sorry thought it was on there
"Your Password Hashing Algorithm Is Bad And You Should Feel Bad" https://www.reddit.com/r/PHP/comments/6m1cmc/your_password_hashing_algorithm_is_bad_and_you/ 
The better way to over-ride a block is to create a plugin; especially if you're changing public methods. M2 carries some legacy ideology from M1, but, it also provides better ways of doing things. In this example, it is overkill to completely replace the Block class because we are only changing a couple of public methods.
visit my channel plz https://www.youtube.com/channel/UC6JWw0iheOuTxk_MhI41J0g?view_as=subscriber
tsk tsk tsk Paul... I expected better ( 🙂 ) public function getTicketById($ticket_id) { $ticket_id = (int) $ticket_id; return $this-&gt;ticket_mapper-&gt;getTicketById($ticket_id); } When you could have just done public function getTicketById(int $ticket_id) { return $this-&gt;ticket_mapper-&gt;getTicketById($ticket_id); } and let PHP cast it for you 😀 --- jk, great article!
I love the idea. I like how it solves some n+1 query problems.
I am duly chastised. ;-)
You know if you wanteeeddddd ... you could do a cookbook page for us and I am pretty sure it would find a home on our website/docs ;)
Very true, thanks. I'm not the uploader but I added them as a comment.
It's pretty much the same stuff, just with crypto as a linkedlist implementation detail. The crypto is interesting if you need to make your system distributed, but a central event store works for 99.9% of scenarios.
 &gt; this structure fits only for small projects (which maybe wont get any profit from CQRS/ES). Feature-based structure will be much more better. I'm using a very similar structure and it scales with no issue to hundreds of endpoints. &gt; (which maybe wont get any profit from CQRS/ES) The size of a project makes no difference for CQRS/ES, but its requirements and complexity do. Pretty much anything deviating from CRUD is already a decent fit, if it's not too CRUDdy. &gt; You could use builders to reduce number of arguments and make your code a bit readable. Bad idea: it's the interface of the aggregate, and that's it. It's domain logic, so keep technicalities away from it, and let the naming reflect how you discuss it. Number of parameters is the most overrated code smell I've seen so far. &gt; Is password already hashed here? Yes, it *needs* to be here. &gt; How would you, for example, send notification that user already registered? Process manager reacting to `UserRegistered` would fire a `NotifyUserOfSuccessfulRegistration` command.
Awesome article! I'll be sure to think about this as I work on my own projects. I aspire to get 100% code coverage some day, but our entire team is split up on the TDD approach.
Awesome write up! Was at Laracon 2016 (first year) and couldn't make it this year due to timing. Hope to be there next year.
Thanks for the feedback. TDD is tough to get started but once you get used to it, it really isn't bad. My favorite video on TDD is this: https://streamacon.com/video/laracon-us-2016/adam-wathan-test-driven-laravel
Hey y'all - we just announced some details about Longhorn PHP, a new conference being put on by members of the Austin PHP Meetup group (including myself). We're also launching [a Kickstarter](https://www.kickstarter.com/projects/677760345/longhorn-php-conference) today for early bird conference tickets and sponsorships. We're excited to host this conference and hope you'll check it out!
Yep! Also I find it very neat to filter by such fields.
Contact me by Twitter DM or email, we'll talk.
Your DMs seem disabled ;) but I tweeted at ya.
Paul, I have a question for you, just as a thought exercise. Imagine for a moment that when you create a `Ticket` you also have to create a `Reservation` and imagine for a moment that we're using a good 'ol MySQL database to persist this in. This would mean that you would be calling two services inside the controller, one call to the `TicketService` to create the `Ticket` and the other to the `ReservationService` to create the `Reservation`. You obviously want to wrap the creation of these two objects in a database transaction. Where does this transaction logic go? In the controller? And what if (for the sake of argument, and to continue the thought exercise) this ticket/reservation logic could also being called in a background worker, i.e. not a web-tier controller but a command line command that's not coming even close to executing a web-tier controller? To add to this (and it's basically an extension of the previous thought exercise), what if there was some sort of ACL or permissions checking in regards to the creation of objects. Where would that logic go? Also in the controller? Just curious about your thoughts. Thanks. 
I really doubt. There is no point in using fully functional approach in PHP. It has no tail recursion, no immutable types, no pattern matching, even no short syntax for lambdas. If you want to do functional programming, just use a true functional language.
Fantastic question. Leaving aside that the tickets in this case are "issue" or "trouble" tickets, and not "travel" tickets ... &gt; Where does this transaction logic go? In the controller? It goes in the domain logic. In the example we started with, you'd add a ReservationMapper to the TicketService, then createTicket() would additionally create the Reservation through the Reservation Mapper. It would have to start a transaction inside that method call as well. Now, that's a lot for a general purpose TicketService to do. After dumping all that logic in there, and handling all the error conditions etc., it would probably make more sense to build domain logic as a Use Case or Application Service that *only* deals with creating a ticket. You inject only the infrastructure and domain dependencies that it needs, and expose only one public method. The related Action code would then call that Application Service or Use Case, instead of a general-purpose TicketService. That Use Case or Application Service domain logic can then be called by *anything*: background worker, CLI tool, whatever -- because it is completely separated from the HTTP interface. &gt; what if there was some sort of ACL or permissions checking in regards to the creation of objects. Where would that logic go? Also in the controller? Again, in the domain logic. Your domain logic in that case will need to be able to see what the current user permissions are, so you will need to either construct the domain logic (Service Layer, Application Service, Use Case, whatever) with a User or Permissions object, *or* provide a way for it to discover those permissions. Then the permissions-related logic can be invoked at an appropriate time in the domain logic (before and/or after attempting the domain operations). /me takes a breath There's more after that, especially in regards to returning a Domain Payload from the domain logic, rather than "naked" results, but I'll leave that for later. Does that begin to help some? 
Came here to say this. However, that doesn't mean you can't still achieve some of the most important proporties of functional programming like function purity, function totality and determinism, referential transparency and avoiding side effecting code.
I'd love to see an (even small) example of this.
I have been looking for an indexed full-text search engine for PHP for some time. I've used elasticsearch a fair bit in the past, and setting it up and tweaking it for solid results is a real pain. After finding TNTSearch last week, I developed a plugin for Grav flat-file CMS, and it worked out pretty sweet. nticaric was a great help in extending TNTSearch beyond it's initial use-case. Performance is great, and even indexing is really fast. If you're a Grav user, check it out - https://github.com/trilbymedia/grav-plugin-tntsearch
I can make use of it, sweet. Thanks OP for sharing
This looks insane. I love it. How would this be used in conjunction with a server like Nginx/Caddy? Those can use FastCGI to execute PHP code via FPM. I guess I would instead need to use them as a reverse proxy?
I live in Austin myself. I'd attend this but I do have one thought about the venue w.r.t. out of towners: there aren't any hotels that close to it. The Domain has hotels but crossing Burnett isn't exactly pedestrian friendly. Driving would be an option for those that drove to Austin or got a rental but even then JJ Pickle's security kinda intimidates me lol. Seems like the Renaissance hotel in the Arboretum might be a better venue? I could see it being more expensive though. Regardless, good luck! I would love to see this happen :)
[Texas Camp](https://2017.texascamp.org/) was held here back in June and I don't think there was much of any sort of those problems. On Friday we had to pre-print parking passes but otherwise it was OK. Seemed like there was plenty of parking. The biggest issue was food/coffee (IMO). JJP has vending machines and a cafeteria when it is open... but it was a bit pricey. There are options within a couple minutes drive or even a walk.
As a short rule of thumb, with ADR, nothing goes in the controller (i.e. action).
sorry ? closing php tag ? english ?
What server side functional programming language exists that can beat PHP's ecosystem? Does NodeJS count?
Totally agree with this. Having finished a Coursera course on Scala taught by its creator, I find the mindset of FP much more valuable than actual FP languages. Just trying to implement the basic things, like sticking to locally scoped variables whenever possible, extensive use of the FP-like array_* functions, and just avoiding side effects as much as possible... these simple objectives have helped me countless times in my PHP projects.
Thank! BTW, I'm the author of this package so feel free to ask me anything about it
Scala, Clojure, F#. All power of Java and .NET ecosystems to your service.
Any good piece of software strives to have as much code as possible be pure, deterministic and so on. But also any good developer realizes that making 100% of code pure is a nonsense goal (aside from some niche project types that lend themselves to such techniques).
probably because it's using stemming solr has this too depending on which type of fields you would use.
Why not creating a new composer package for symfony starting from "Tenantable" ? This shouldn't be a hard task (mostly a find and replace) if you know how symfony works.
Short lambda syntax is achievable in PHP: https://stackoverflow.com/a/16509/1879194
Symfony doesn't deal with databases, your question is probably about Doctrine? https://gist.github.com/CarlosEduardo/aedfa640e3f7f22451686fb7e57228e3
That could be done but the problem would be the possible limitations of Doctrine. 
That package seems to be for a single database implementation. What we're trying to achieve is a separate DB for each customer for easier migration, scaling and maintenance.
I am very interested in the solution myself, but it seems voting will rather sink this topic down. I suppose it's for the title is rather bad. I learned the hard way that the title should be direct meaning, i.e. "Multitenant Symfony" rather than relative to something else. It doesn't give you a clear understanding and also arises some blind jealousy, I am afraid.
In one project I've noticed a solution where it got one main database with a customer database name in it and then it switched to the customer database by that. so doctrine shouldn't be a problem
I know that for example booking.com has this scale and uses PHP in the backend.
Project looks good but not having dynamic hosts, inventory feature is really bummer. 
&gt; I love the idea. I like how it solves some n+1 query problems. If you run queries in your computed properties, that actually seems like it'll directly cause N+1 problems.
This is possible: https://gist.github.com/Xymanek/8fbbd127eeeca2c6c15aad6acfd0e07b (this assumes all clients are on same DB server, but can be easily extended by changing line 53) Just call `setOrganisation()` on connection before executing any queries and you are good to go. Note the last two lines in config: * `server_version`: prevents doctrine from connecting to determine RDBMS version before you call `setOrganisation()` * `wrapper_class`: tells doctrine to actually use our class instead of default connection P.S. I'm thinking to integrate this with request stack to make it cleaner but didn't have time yet...
Nope, it's dark magic:) It will add sub-select to your query
What do you mean by dynamic hosts? I'll implement them if it useful for you.
Could you show how to handle (user input) errors here? For instance, if TicketService::createTicket() finds that the component id it received does not belong to an existing component, there should be some sort of error. Specifically, where would this be handled? Does TicketService::createTicket() return something that indicates an error and does TicketResponder::create() then give a totally different response? Or does the action contain that logic?
This seems great, are you using it?
this seems to be on the right track. will try it. thanks.
Yeap
Try iterating through the orders? foreach($truck-&gt;ORDER as $order) { foreach($order-&gt;attributes() as $a =&gt; $b) { echo $a,'="',$b,"\",&lt;br&gt;"; } } 
This seems to be working. Thank you very much!
I guess something like Ansible has. The hosts that you are deploying to might change all the time, so you need a way to list them per deployment. http://docs.ansible.com/ansible/latest/intro_dynamic_inventory.html
Unfortunately hotel venues are *very* expensive. Pickle isn't the most pedestrian friendly area, but the Lone Star Court hotel is about a 15 minute walk, and we are assuming many people will be driving. We may also look into options to run a shuttle between the hotels at the Domain and the venue, if we get enough funding.
You could refer also to this github project: [Github](https://github.com/domnikl/DesignPatternsPHP)
Nice feature. Will implement something like this.
Hi, please look at the subreddit description: "/r/PHP is not a support subreddit. Please visit /r/phphelp for help".
"it really isn't bad" strong recommendation for sure :)
&gt; you need another dependency (which has to be maintained + supported) install globally &gt; you have to configure it (at least give some api-key to identify the project) small potatoes &gt; if you add a custom "post install script" you have some weird behaviour if you just test some dependency upgrades locally config option / composer.lock hashing
There is also this one: [Design Patterns for Humans](https://github.com/kamranahmedse/design-patterns-for-humans)
Is this a flashback to 2007 ?
You should use a kernel event listener! This is exactly what I had to do at my job. Here is the gist: https://gist.github.com/zak10/6dcd9bbe33cf7a2f0c339442db293e9a
When I lived in Austin I wanted to attend... Now I live in Florida and still hope to. Maybe this is the year.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I am not going to read an article about the best php frameworks from a website hosted on wix.
"I don't trust you driving because you're asian". No, but I totally get you, I wouldn't get into that car either. (joking)
I would love to be a maintainer for a popular opensource project, but I don't think I have have enough knowledge about the oauth protocol to help with this project :/ If you've found a maintainer that needs some help with writing tests or cleaning up code I'm more then happy to help!
I know before I tried TDD I always envisioned it as being a huge PITA. After doing it, I definitely see it's value and will continue. I'm not going to lie sometimes I wish I could just crank out a new feature without having to write tests. I guess old habits die hard. Most of the time this feeling comes when I'm on a tight deadline.
That's right, we have immutable infrastructure with dynamic number of servers that are tagged for example as stage=staging or stage=production I would like to pass that to deployer and then deployer should query AWS or any other provider for the list of servers with those tags and add them as hosts dynamically.
"If you are choosing the Yii framework, it gives boost to your website. It is faster than other PHP frameworks on the market." such arguments very boost wow
Looks like its been written by a 5 year old with absolutely no depth or thought to it at all. "8 Best PHP Frameworks for the Developers" can you do the 8 Best Frameworks for none developers next?
We use a series of `filter`, `map` and `reduce` in our production system. We begin with a remote service call that doesn't give us the granularity we want, so we filter on our side, then map to get the desirable fields and reduce via a join for use in HTML. It uses higher-order, pure functions and referential transparency. It's not sexy or cool; it's just a practical, obvious* approach to solve the problem. We do use a utility library for reducing some of the boilerplate since this isn't the only place we use these functions. \* At least to those who have any functional programming experience.
As /u/LtAramaki correctly notes (thanks Tanks :-), pretty much no logic at all goes in the action. All the Action does is collect the user input (possibly providing default values along the way), pass that input to the Domain element, and pass the Domain result to the Responder. So it is the *Domain* portion of ADR that filters/validates/sanitizes the user input, and reports back any errors that might exist with the input, or with any other Domain operations. That leads to the next question: how should the Domain report errors? In simple cases of "find the Ticket with this ID" it's either found, or not, so returning a Ticket on success or null/false/empty on failure is an obvious solution. However: what if the ID exists, but the user is not authorized to view it? Returning an empty result might be misleading in that case. Likewise, returning an array of user-input validation failures is kind of clunky. Now your presentation code is in the business of "trying to figure out what the Domain results mean." You can do it, but there has to be something better. For me, that something better is a Domain Payload. Instead of returning "naked" domain results, always return them encapsulated in a payload. Because the Domain already knows what happened in the Domain, it can set the payload status appropriately. Here is a short, naive example that I hope illustrates the point: class TicketService { public function getTicketById($ticket_id, $user_id) { $ticket_id = (int) $ticket_id; $ticket = $this-&gt;ticket_mapper-&gt;getTicketById($ticket_id); if (! $ticket) { return new Payload('NOT_FOUND', [ 'ticket_id' =&gt; $ticket_id, ]); } if (! $ticket-&gt;isOwnedBy($user_id)) { return new Payload('NOT_AUTHORIZED', [ 'ticket_id' =&gt; $ticket_id, ]); } return new Payload('FOUND', [ 'ticket' =&gt; $ticket, ]); } ?&gt; Now the presentation code (the Responder) can check the status on the payload and know exactly what happened, and how to deal with the contents of the payload. I write about Domain Payload more extensively at &lt;http://paul-m-jones.com/archives/6043&gt;. It's an older post and could use updating, but I think it will get the idea across. Does that help? 
:/
Well, i think the sane solution is to make sure you accept only what files you suppose to accept, that is, if you expect only images, then using php's File Info extension, make sure you only allow images for uploading then as an additional layer, check them with gd's `getimagesize()` function if you need to get the image width / height. Do the same for other file types as well, make sure they go through good filters before you decide they are fine for storing. That should be enough for most of things. That's all i do. That's all most developers do. If also scanning them with an AV doesn't harm your app UX and doesn't make your users frustrated waiting for scans to complete, then by all means go for it.
Either learn English, or just post in your native language. English isn't the greatest language ever. You *don't* need to try to use it all the time, particularly when you're so very *bad* at it. Why do these garbage blog posts always seem to come out of India lately?
&gt; [Do not use getimagesize() to check that a given file is a valid image. ](http://php.net/manual/en/function.getimagesize.php) 
/u/phordijk - updated the above to make more sense ;)
&gt; That's all most developers do. That's true in all my experience but now that it's come up I don't really understand why. Why is it that as a community, a huge amount of effort has been made to combat issues like SQL injection, XSS, CSRF etc. yet I'm coming across this scanning issue and all I can find is a dusty old php Clam AV extension that hasn't been maintained since 2014. I was about to tell the client that scanning for viruses of uploads is not common practice but realised that was going to sound like bullshit. From the perspective of most stakeholders, virus protection sounds like something we should have covered.
You're right in that Virus-scanning is not part of everyday developer's lives - we rarely do it in all honesty. The days of uploading a worm into an insecure form are **thankfully** long gone, although never forgotten. File validation, extension verification and methods to avoid null byte injection attacks, however, are becoming more and more common. Ensure you're verifying content type, extension, and look into null byte injection protection. That should cover you for 99% of attackers and pen test scans
I've only ever used the spaceship operator once in a `usort` $records = $records-&gt;sort(function ($a, $b) { return ($a-&gt;weight &lt;=&gt; $b-&gt;weight) ?: -($a-&gt;id &lt;=&gt; $b-&gt;id); });
I like how you used ?: ~~(for people wondering, it works because isset(0) === false)~~ but I also like how the article used \SplHeap to insert in the right order rather than sorting afterwards. That's 2 good tips for readers here :)
I've only used in once to give color to an integer. $classes = [ -1 =&gt; 'red', 0 =&gt; 'blue', 1 =&gt; 'green' ]; $class = $val &lt;=&gt; 0; So sophisticated, lol.
This is the correct response you are looking for: https://symfony.com/doc/current/doctrine/multiple_entity_managers.html
&gt; I like how you used ?: (for people wondering, it works because isset(0) === false) No it doesn't. It works because the ternary operator checks for truthiness of a value. If it finds `0`, then it means the values (weights) in the initial check were equal, and so the second condition (the IDs) should be used for sorting (in descending order, in this case).
Hum. Oh... My mistake I read this shorthand ternary as a null-coalesce... :(
Agreed, that union of short ternary with spaceship is kinda beautiful.
Check out https://github.com/dave-redfern/laravel-doctrine-tenancy for a project that uses Laravel + Doctrine
Thank you.
As an aside.. why multi-database instead of a 'tenant_id' and 'tenant' table for example? I'm asking because I'm a year in to a multi-tenant application built on a single database with over 100 clients. Also in the past I've done the same with another app. Just wondering why would you do multi-database multi-tenant over a single db?
Anonymous classed are good for unit testing abstract classes 
The "short ternary" is actually called "[Elvis operator](https://en.wikipedia.org/wiki/Elvis_operator)".
Is it any faster or was is it just an experiment?
Inserting into `\SplHeap` is effectively a heapsort but with the disadvantage that it's not in-place and it performs more memory allocations. I imagine `usort` would be faster.
Nice job ! 
zener79 5 hours ago [-] Hi guys, we just developed a SaaS (https://www.hardypress.com) to use WordPress as a Static Site Generator. If you want to give a try, I would be happy to hear some feedbacks from you :-) 
Thank you! :)
I would really like to see something like application server for PHP which will be lighter that apache and also will allow me to have just single container for my application. As for reverse proxy - this is needed only in case if you have to serve static content or you are on multiple servers. In my case I would use AWS application balancer. I tired to use uwsgi for this purposes but... it's slow.
Any plans for docker image with already installed libphp7 and all needed environment to build this project?
Laravel collections too.
I use Caddy for the automatic TLS features and such.
100% code coverage is slavery
Laravel Helpers are kind off example of functional programming.
Maybe I'm just tired, but struggling to see the value over [mutators](https://laravel.com/docs/5.4/eloquent-mutators#defining-an-accessor) and adding the value to the `$appends` array.
Ahh, the old Elvis and his spaceship.
/r/phphelp
As co-author of the spaceship operator, I approve of this usage. Nice work! 👍🏼
It's a _little_ cryptic at first, but is, as you state… kinda beautiful. :D
I find this hilarious 😂 Thanks /u/palparepa for pointing this out and /u/lookyman for putting two and two together.
This seems more fitting for Node.
This kinda crap has _no_ business in /r/php. Don't do it again.
There are several reasons 1. We already have the application running as a multi install setup, so migrating to this architecture would have the least impact in terms of code change 2. Data isolation, archiving, and client customization would be so much simpler
Thanks! I'll try there.
Sorry, but this isn't working.
[removed]
WTF? I spent a long time on this. Why is it 'crap'?
The problem is that I don't want to have both php-fpm and caddy to be in same container.
Expecting to see this referenced in your next keynote, Davey!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; As /u/LtAramaki correctly notes (thanks Tanks :-), pretty much no logic at all goes in the action. Yes, one might even say we don't need action at all. /s
Awesome. I've been loving Deployer since I started using it.
There are a bunch of solutions that work here, but I took a different approach. I used a [loadClassMetadata](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html#lifecycle-events) event listener, and combined that with a [call to set the schema name](https://github.com/doctrine/doctrine2/blob/master/lib/Doctrine/ORM/Mapping/ClassMetadataInfo.php#L2294) on the ClassMetadataInfo. Your listener is registered as a service, so you can retrieve anything you need in order to decide what schema (database) you are using.
As someone born in FL, on the organizing team for Longhorn PHP, and who has been to Sunshine PHP the last few years (props to Adam for an awesome conf btw), come on back! We want to make the conference great enough to justify attendees flying in :)
To add to what d_abernathy89 said, we looked at a number of hotel venues...but the sticker shock is real. "We'll give you the space for free" stops sounding like a good deal when you're on the hook for a block of rooms at $200+ per night...and a minimum catering spend of $40k+ (varies by hotel of course, but those numbers are in the ballpark). As a first year conference, that's a *lot* of risk to shoulder/faith to put in your ability to get sponsors (because we want to keep ticket pricing at "community PHP conference" levels). As a side note, there's currently a CapMetro stop (803) right near our venue. And as of a few days ago the schedule on that route is downright respectable. Now if they could only get the airport bus to connect with...you know...every other route that'd be even cooler :p
I'm done with Keynotes — so. fricken. hard.
https://developers.facebook.com/docs/marketing-apis Check out the reference section. It gives examples for using the php sdk at each endpoint. https://github.com/facebook/facebook-php-ads-sdk/tree/master/examples It's only a few examples. But you can see how to authenticate before utilizing the examples given in their reference documentation above. 
Glad to hear it :)
Can you show an example? 
You write a unit test for an abstract class, and in the setup method you can define a concrete implementation with an inline class for the tests because you can't instantiate an abstract class.
Would it be easy for you to make it Slim compatible?
Hm, that would be nice. It would mean to abstract a few things away. CRUDlex heavily depends on Twig, that won't go away but is fine I think. Then there is the ServiceProvider being a Pimple-Provider and the ControllerProvider offering the Silex-Routes. Might be possible to make it Slim-compatible. All in all, this would be an huge efford but not entirely impossible I guess.
The way I see it, Is always to have the business part of software loosely coupled with any framework, so in case of framework switching, you don't need to rewrite much to use another one.
Obviously, for such a purpose connection credentials should be dynamic, taken from the default db connection. 
Yep, supporting another framework would definitely iron out potential weaknesses in the architecture. :-)
You can't use your mutators in Query.
Yeah, That's a nice write-up and live example. TDD approach is a good idea for any sensible developer and I am a fan of adam wathan for it :)
This is something highly appreciatable, 100% code coverage just seems like an unreachable destination because deadlines are always ahead. But thanks for the article I will definitely look forward to it. 
Symfony does works with multiple databases: have you seen that? https://symfony.com/doc/current/doctrine/multiple_entity_managers.html
Yup, I've seen that. But our use case requires hundreds of DBs that can be created on the fly. 
&gt; this isn't working. It stays at home playing xbox and eating doritos? http://rurounijones.github.io/blog/2009/03/17/how-to-ask-for-help-on-irc/ https://workaround.org/getting-help-on-irc/
I remember running into issues using an sqlite db for testing and mysql for the actual app. There seems to be minor differences in the two db that necessitated me constantly tweaking my migration scripts to support both. Can't remember the exact details now but it was not a very pleasant experience. 
&gt;*cannot* be serialized Not really true: $c = new class(['name' =&gt; 'John']) implements JsonSerializable { private $data = []; public function __construct(array $data) { $this-&gt;data = $data; } public function jsonSerialize () { return $this-&gt;data; } }; $ser = json_encode($c); var_dump($ser); Outputs: &gt;string(15) "{"name":"John"}" EDITS: Just formatting
Great, I'm really interested to know how will you do it with symfony :) 
This post is tagged as `Support Post`, yet those kind of posts are not allowed per the rules. Personally I don't want support post in this subreddit but I know mods tolerate some of them. This may be a good opportunity for clarification: - either enforce the interdiction? - or allow support post but have them tagged so that people can filter them out? WDYT?
The question you're asking is very general. "It doesn't work" might appear pretentious to the large pool of users of this API around the world who have proven this statement incorrect. Here's what you'll need: (1) A Facebook user access token that has access to the ad account for which you want to run graph API queries (2) The ad account (it's in the form of "act_12345") (3) The types of actions you wish to perform using this API (4) Understand the hierarchy of Facebook ads (campaign[] -&gt; adset[] -&gt;ad[] -&gt; insights/adcreatives/etc.) I'll use an example to show you how you can query the API so that it returns adsets. Replace [ACCESS_TOKEN] and [AD_ACCOUNT_ID] with your user access token and the relevant ad account, respectively: https://graph.facebook.com/v2.10/[AD_ACCOUNT_ID]/adsets?fields=id,name,start_time,effective_status&amp;access_token=[ACCESS_TOKEN] Also, I highly recommend that you use the documentation alongside the graph API explorer to experiment with your graph API queries. https://developers.facebook.com/docs/marketing-api/reference/v2.10 https://developers.facebook.com/tools/explorer
Oh, sorry, can i edit post an add specific info? that would be fine?
My comment isn't really against your post, it's just to start a discussion on "is there a better way to handle support in this subreddit?" If mods allow your post then fine :)
should have made it more clear, what "cannot be serialized" means that you cannot do something like this ``` $hello = new class {}; echo serialize($hello); ```
Elixir is gaining a lot of popularity too.
So much this. Also, same for react.
What is the most elegant equivalent in Ruby?
Isn't it just Erlang with Ruby syntax instead of Prolog? And I can't say Erlang has big ecosystem. Very specific language for specific tasks TBH.
A book that helped me a ton a few years ago was https://leanpub.com/mlaphp written by our very own /u/pmjones In the book he helps you start from your messy code and introduce one concept at a time to help your code become manageable, eventually it arrives at testing which is introduced midway and then proceeds into more refactoring work. 
I write tests after. Likely habit because I didn't used to write tests (helloworld.php3 ....I'm so old). It was just the wording really that made me giggle.
&gt;to controversial 
We have a Docker / Docker Compose based version of this called Drydock. It does something similar but based on pull request workflow. New PRs automatically spin up an EC2 instance and produce a fully testable dev instance which is automatically linked to the Jira ticket, etc. Drydock is the crown jewel of our engineering workflow. I'd love to give it away but I can't afford the resources to provide any sort of support or community curation for it. 
only supports up 5.6, looks dead anyway.
I took a look at your source code because I couldn't believe it could query computed properties without resulting in the N+1 problem. I'm impressed with how clever it is. That being said, these days, really "clever" code tends to make me nervous, and I haven't used Eloquent much. But if I ever need something like this, I'll definitely be using it. Great job on it though.
It always made me wonder, where mysql errors are going to be logged. 
If our custom database logger fails, the default PHP error logging kicks in as a fallback, which is just a file log.
Checkout [Whoops!](https://github.com/filp/whoops). It may help and inspire you. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
It is okay, I am still learning.
https://github.com/getsentry/sentry
IIRC, Whoops lets you add multiple exception handlers. However, I forget if they're all executed in turn or if it's first one to resolve a response.
Our database logger is still engaged from normal PHP error and exception handlers, but if an error occurs while those handlers are running, PHP runs the fallback error handling. You can also explicitly return false from an error handler to tell PHP to continue with the normal error handler: http://php.net/manual/en/function.set-error-handler.php
I wonder what did you expect. That PHP will reduce the network latency? Or speed up your SQL queries? Or will make all 50 lines of your PHP script run 100 times faster? 
Some part of "AJAX" means the browser calls the server over http. If the server runs PHP7, and PHP7 makes the server faster, then yes, AJAX will be faster.
I do something similar. We have lots of large forms and complex interactions based on the answers to those forms. Any time I hit an error case I dump a full array of all variables and a short descriptor to a SQL db. This allows me to completely reproduce the user's experience and I have found it immensely helpful in troubleshooting. What are you using to grab the variables? I'm currently grabbing all with get_defined_vars() but if there is a better way I'd love to know.
You'd probably only see a difference at significant load, but it really depends on the application. If your application was already lean then it won't have much gain. Sloppy pieces of shit like WordPress, though, see massive gains.
I'm not. I use Postgres.
get fukkin rekd m8
get_define_vars() is probably better than what I'm doing. I wanted to use that, but haven't found a great way to use it yet. The problem is that once control is transferred to the error handler, many of the variables are no longer in scope, so for now I am just saving the global variables. i literally copy the $GLOBALS variable into a new array in a way that makes sure to avoid the inception effect where the global variables contains the global variables which contains the global variables which, well, you get the idea. One of the next things I want to do is, create a way to explicitly save state before an error occurs. In that case I should be able to use the get_defined_vars() function to get all the variables. I would still need to know in advance where I want to do it based on where I expect errors to occur, I don't know of any way to make this happen automatically when an error occurs. Are there any tricks to using get_defined_vars() in conjunction with error handling to prevent variables from going out of scope?
Heidisql supports Postgres. I use [DataGrip](https://www.jetbrains.com/datagrip/) if I have to do a lot of work in the DB, otherwise I just use the built in PHPStorm tools.
&gt; That PHP will reduce the network latency PHP7 reduces response time compared to PHP5. Here are some Esty benchmarks: http://talks.php.net/confoo16a#/prod_perc95 Not latency mind you, but there should be network speed improvements none the less.
The guy is not looking for the benchmarks but obviously referring to his vague observations.
But when you decode that you don't get the same thing back.
Thanks! Progressing in this direction could lead to really powerful things.
That doesn't make any sense. Is $class supposed to give you the string back? Because your code doesn't do that.
Dayum that's a shame. That sounds like a pretty cool one that I would have happily used!
It is (very) experimental the support for postgres. So experimental that I am unable to see my database (I can see it on pgadmin and can access via my website). Jetbrains does have some good software but I am not going to pay a monthly license just to view some postgres data
I made a simple script to change apache root from single command. This really helps if you're working on multiple projects. Any feedback will be appreciated.
If you can't wait I think the sodium extension uses Argon2 as standard and with the 2.x.x release of the sodium extension you can achieve the same thing with php 7.0.x and 7.1.x right now. You will need the extension but I think its available in [odrej's ppa](https://launchpad.net/~ondrej/+archive/ubuntu/php) as php-sodium and [REMI's collection](https://rpms.remirepo.net) as php-pecl-libsodium2. The two functions to be aware of are [sodium_crypto_pwhash_str()](https://github.com/jedisct1/libsodium-php/blob/815b8f4d15b53a731cd994ccd1b0ca9faacce81f/libsodium.c#L1675) and [sodium_crypto_pwhash_str_verify()](https://github.com/jedisct1/libsodium-php/blob/815b8f4d15b53a731cd994ccd1b0ca9faacce81f/libsodium.c#L1720).
You know such a thing as vhosts exist right? This seems to give everyone on the host write access to the apache config files and replaces the distro provided apache configuration with the one in the repo (which might break stuff) all to automatically change one line in a config file.
I have some code that came with this duo and the lack of migration support (got to install phinx) is enough for me to say to people avoid this at all costs.
I didn't think gearman supported php version &gt;= 7. It is not listed on the pecl page https://pecl.php.net/package/gearman &gt; PHP Version: PHP version 6.0.0 or older &gt;PHP Version: PHP 5.1.0 or newer &gt;PEAR Package: PEAR 1.4.0b1 or newer
Not really, they make for nice syntax when consuming an API but they're a pig to understand properly.
It's not maintained but if it's the best out there then it's open source, on github, and you can change it yourself to fit your current needs.
Can someone explain to me why a person would use anything another than redis or some in memory cache that should be installed anyway?
I'm actually using Gearman and PHP 7.1. And it's working like a charm
Yes, but it's developed in Java and python. If there's any similar solutions available in php then I can customise it per my need. If not, then I will try to build it myself :)
&gt; they're a pig to understand properly 4 u
Well for bitwise operations they are quite handy. It would be pretty annoying having to do bitwise operations without them.
You can do some really weird stuff with this if you do what's suggested: ``` Page::filter($request-&gt;all())-&gt;get() ``` This allows for more than just filtering on any field in the model (which could also be bad..). You can execute arbitrary SQL depending on the underlying database because columns aren't properly escaped in many cases. (EG with the laravel `-&gt;` operator.
Love your research and summary articles; keep 'em coming!
Sure, check out gregbaugues' explanation: https://code.tutsplus.com/tutorials/making-things-faster-with-gearman-and-supervisor--cms-29337
How do you handle a crash of the server running Gearman rendering the filesystem unrecoverable? Are your jobs lost?
The article is just a high level overview of what a queuing service is and how to install gearman. I'm making the assumption, that as a preformance focused engineer, you would have some in memory caching method available....which can be easily used as a queuing service. Given that, why would someone use gearman or beanstalk or whatever?
Right. Sorry. I thought you were equating caching with background tasks. This version of your question makes more sense. What lib do you use for Redis? This one? https://github.com/chrisboulton/php-resque
Hey I think [this](https://stackoverflow.com/questions/36143960/php-distance-between-2-addresses-with-google-maps) might help you! Good luck with what ever you are doing. Specifically this: function getDistance($addressFrom, $addressTo, $unit){ //Change address format $formattedAddrFrom = str_replace(' ','+',$addressFrom); $formattedAddrTo = str_replace(' ','+',$addressTo); //Send request and receive json data $geocodeFrom = file_get_contents('http://maps.google.com/maps/api/geocode/json?address='.$formattedAddrFrom.'&amp;sensor=false'); $outputFrom = json_decode($geocodeFrom); $geocodeTo = file_get_contents('http://maps.google.com/maps/api/geocode/json?address='.$formattedAddrTo.'&amp;sensor=false'); $outputTo = json_decode($geocodeTo); //Get latitude and longitude from geo data $latitudeFrom = $outputFrom-&gt;results[0]-&gt;geometry-&gt;location-&gt;lat; $longitudeFrom = $outputFrom-&gt;results[0]-&gt;geometry-&gt;location-&gt;lng; $latitudeTo = $outputTo-&gt;results[0]-&gt;geometry-&gt;location-&gt;lat; $longitudeTo = $outputTo-&gt;results[0]-&gt;geometry-&gt;location-&gt;lng; //Calculate distance from latitude and longitude $theta = $longitudeFrom - $longitudeTo; $dist = sin(deg2rad($latitudeFrom)) * sin(deg2rad($latitudeTo)) + cos(deg2rad($latitudeFrom)) * cos(deg2rad($latitudeTo)) * cos(deg2rad($theta)); $dist = acos($dist); $dist = rad2deg($dist); $miles = $dist * 60 * 1.1515; $unit = strtoupper($unit); if ($unit == "K") { return ($miles * 1.609344).' km'; } else if ($unit == "N") { return ($miles * 0.8684).' nm'; } else { return $miles.' mi'; } } 
https://github.com/nrk/predis
Without digging into the code I can't speak to the Java side of things on this project but Python/Django are pretty nice to use, coming from PHP myself. The learning curve for that shouldn't be too great. Might well be easier than customising a PHP solution that's far off on functionality.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You could track jobs in a database^1 if that's something you're worried about. &amp;nbsp; ^1 I expect if disk failures are a worry, your database is on a separate machine.
As I said, I use it when I need go rapid. After that and after standardization of API I replace it with `$request-&gt;only` or move it to another layers. Different situations require different solutions, as always.
Why not actually link the article? http://aredridel.dinhe.net/2015/01/30/why-mvc-does-not-fit-the-web/
Does "Modern PHP" just mean webapps written by junior developers that don't understand a single programming concept outside of what they learned in blog tutorials about the LAMP stack? Because I feel like that's who this article is targeted at. I will note that it's a great introduction to bitwise operators for laymen though.
I clicked the back button I saw the noticed I was going to sitepoint.com... Got back to reddit in time before seeing their popup ad they always throw up on top of content. Too bad, would be a decent site if they cared about the user experience.
Yeah, wasn't totally stoked about this either. Publishing is a tough business these days. 
Yeah, there should be a vhost file for every site Apache is serving. That is the Apache best practice. But what stands out to me is that you have a bash script in the repo, then why not just make this whole thing a bash script? Just run a regular expression match/replace in the language of your choice and restart. For example on my freebsd box I could just run: perl -i -pe 's/^(DocumentRoot ).*$)/$1this-is-the-new-path/' /path/to/apache/httpd.conf &amp;&amp; service apache24 restart
The example of permissions set in bits in a database is a little contrived, first of all. Second, a database schema has nothing to do with PHP (and nor should it!). I could access the same database in Python and probably in FORTRAN if I wanted. Third, I'd like to point out that bitwise operations are still central to how the `error_reporting` INI setting is normally set. I'd guess that the average PHP developer is unlikely to encounter any need for bitwise operators very often, but as for relevance: it depends what you use PHP for, doesn't it?
Then why publish it as a package that you encourage people to use without a huge disclaimer saying that the code should never be used in production?
&gt; should never be used in production Why? What is the problem with this package itself? I agree that there might be problems with `$request-&gt;all` usage in production, ok. But it is fully ok to use it with `$request-&gt;only` or some other approach.
It's a nested if statement. After the first colon starts the second ternary if statement. 
Why it displays 2? What is equivalent of normal if statement?
Quoting [PHP: a fractal of bad design](https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/): &gt; Unlike (literally!) every other language with a similar operator, ?: is left associative. So this: &gt; &gt; $arg = 'T'; &gt; $vehicle = ( ( $arg == 'B' ) ? 'bus' : &gt; ( $arg == 'A' ) ? 'airplane' : &gt; ( $arg == 'T' ) ? 'train' : &gt; ( $arg == 'C' ) ? 'car' : &gt; ( $arg == 'H' ) ? 'horse' : &gt; 'feet' ); &gt; echo $vehicle; &gt; &gt; prints horse. 
Because it "places the parentheses" like this: echo (true ? '1' : false) ? '2' : '3'; which thus evaluates to echo '1' ? '2' : '3'; 
This thing is a nightmare
I started with something like this and ended up writing https://github.com/Tucker-Eric/EloquentFilter after running into a ton of issues. 
Okay I will try to explain it but please correct me if I'm wrong and sorry for bad Engrish. So let's check out your expression (excluding the echo call). true ? '1' : false ? '2' : '3'. This expression actually has 3 parts. Lets put parantheses to see them better. It becomes: (true ? '1' : false) ? '2' : '3' We have a condition **true ? '1' : false** (**if** true **then** '1' **else** false). We have first expression '2' (returned when condition is true). We have second expression '3' (returned when condition is false). Let's name them with letters for simplifying the expression. So A = true ? '1' : false, B = '2', C = '3'. Our expression becomes: A ? B : C Now it's very simple expression and we have eliminated the visual debt^TM. We can now easily calculate the result of expression **A**. Since **A** is **true ? '1' : false** we see that it's result will be **'1'**. So our expression becomes: '1' ? B : C Since '1' **isn't** a falsy value the result of the "if condition" will be true and B will be returned and since B = '2' our **echo** will output '2'.
Another way to debug this code is to analize the Abstract Syntax Tree generated by the PHP interpreter. I find [this tool](https://astexplorer.net/#/gist/e28bb3c623f42df3e12977db0ace326a/3c7f647a3b9c38a50bfcdd4e8b60b36699cca15c) very useful.
&gt; What is equivalent of normal if statement? I think it would be something like this. if (true) { $result = '1'; } else { $result = false; } if ($result) { echo '2'; } else { echo '3'; }
Sure you can: $c = new class(['name' =&gt; 'John']) implements JsonSerializable { public $data = []; public function __construct(array $data) { $this-&gt;data = $data; } public function jsonSerialize () { return $this-&gt;data; } }; $ser = json_encode($c); $class_name = get_class($c); $c2 = new $class_name(json_decode($ser, true)); var_dump($c2); // $c === $c2 
and i could not get them to fix it. the result was a lot of pointless bikeshedding: http://grokbase.com/t/php/php-internals/14cdp789nk/fix-incorrect-ternary-associativity-for-7-0
You're using examples that should never be examples. You introduce side effects. `filter` cannot be used as an input name, or likely as a column name either. End users should not have any chance to specify which columns they're accessing. You're displaying portions of your schema publicly. The `where` method already accepts an array of clauses with an optional `in`.
There isn't a strong reason to change it, and BC breaks need strong reasons. "Other languages do it differently" isn't even a *weak* reason - it's a non-reason. Other languages do lots of things differently.
&gt; the result was a lot of pointless bikeshedding: That thread is not bike-shedding about an insignificant detail. That is a fundamental disagreement about the best course of action. Not being able to tell the difference is one of the reasons why the conversation wasn't productive. 
Why what? The reasoning in the article is not enough for you?
c-like languages that haphazardly break c-like expectations in c-like expressions should be fixed. if you read through the thread, no one could actually remember encountering code that relied on the wrong behavior. and we were talking about a major version bump, where breakage is *expected* to happen. just because it's a documented mistake in the language, doesnt make it ok to live into infinity. just because T_PAAMAYIM_NEKUDOTAYIM can be googled for an answer doesnt make that error message "okay". any time a dev has to ask "wtf?", it is a wart. and php is chock-full of "wtf" [1] that's kept around eternally for fear of BC, even across major version bumps. this entire reddit thread is case-in-point; it would not exist if there was "no problem". to be fair it *has* been getting better, at a glacial pace. [1] http://phpsadness.com/
&gt;[video] Stopped reading there.
the proposed compromise (warn or fatal-error any non-parenthesized assignment chains in v7, then fix it in v8) would have worked fine to resolve the silent breakage issue. it would have forced people to change their code.
Thanks for criticizing. So, you recommend to change this part of readme for preventing bad usage?
&gt; c-like languages that haphazardly break c-like expectations in c-like expressions should be fixed. If we were designing the language from the ground up, I would completely agree with you that breaking developer expectations without good reason is undesirable, and ternary associativity should match its predecessors. But we aren't. It's slightly jarring the first time you bump into the difference (if you ever do!), but from that point forward, it's just a bit of quirky trivia that gets excitable dogmatists all hot and bothered, much like many other aspects of PHP. &gt; no one could actually remember encountering code that relied on the wrong behavior. That doesn't surprise me. Chained ternaries are absolutely terrible for readability (regardless of associativity), so most developers consider it a better practice not to chain them. So, the scope of potential improvement for the language by making this BC break is drastically limited.
&gt; It's slightly jarring the first time you bump into the difference (if you ever do!) the problem is, you likely don't know if you've ever bumped into it. it's the same problem as silently fixing it - people who don't know it's broken. &gt; but from that point forward, it's just a bit of quirky trivia i think this is PHP's unspoken tagline &gt; Chained ternaries are absolutely terrible for readability not if they're spaced/aligned well. in which case they're much easier to read than 20 if/else statements.
&gt; the problem is, you likely don't know if you've ever bumped into it. it's the same problem as silently fixing it - people who don't know it's broken. That's certainly a fair point, but for it to be a good reason to break BC, I think you would have to make the case that the change would "fix" more code than it would break in the community. That's a pretty tough job, and unfortunately, I think you've already made it harder on yourself by drawing attention to the fact that no one can remember ever seeing the "wrong" behavior before in actual code. :p &gt; not if they're spaced/aligned well. in which case they're much easier to read than 20 if/else statements. Well, neither approach would be readable in the case of anywhere approaching that many branches in a single block. You would be better off using temporary variables, extracting logic into methods, and generally rethinking your code structure.
The proposed compromise is still an option -- and it would start with a deprecation being introduced now. Someone just needs to write an RFC and implement it. I'm fairly sure that a proposal for deprecation in 7.3 and removal in PHP 8 would pass.
So did you put that to a vote?
TL;DR "_Bitwise operations definitely still have a place in modern programming_"
i suspect it would take no less than 2.5 cycles: 7.3 deprecated warning 8.0 fatal error 9.0 actual fix multiply by 5 years per extra major cycle (if i recall correctly). i'll be long dead or out of the php ecosystem by then. motivation is rather low for such a timeline after the 7.0 ship had sailed.
Angel list?
Angel list would be more suitable for startups. They usually buy shares and expect back their investment. Maybe the title of the question was a little bit confusing, since we are looking for donations to support our open source package 
good queuing services give you recovery options in case processes fail and will do things like retry failed jobs if they aren't acknowledged after a certain amount of time.. you could implement some of these with something like redis, but it's not designed for this use case specifically.
 &gt;the problem is, you likely don't know if you've ever bumped into it. it's the same problem as silently fixing it - people who don't know it's broken. &gt; Your unit tests will let you know. 
i made this argument in the thread back then: http://grokbase.com/t/php/php-internals/14cdp789nk/fix-incorrect-ternary-associativity-for-7-0#201412156sd1rsppfr33w42cw6zn9spmxg ultimately, it's true that the vast majority of code in the world is not unit tested.
I agree with this completely. I have never been a fan for MVC for the web and it is nice to hear it voiced by other professionals.
React runs fine on the frontend without any backend. Where is PHP involved in React? You can build your frontend in React but the data that moves between your frontend and backend shouldn't be tied to React in any way.
Projects like GnuPG and OpenSSL struggled with just about no funding ever hitting them. Outside of the monetisation scheme followed by groups like nginx and Elastic, you should probably be realistic about who is going to fund this.
Why in node do I have to install react router and react-materialize and other node modules? I guess how do I incorporate these things or will they not be entirely necessary?
Not PHP but: Everytime I use anything node/javascript/frontend it doesn't work because of some wrong version or something bla bla bla. Everytime I return to a project and I try to run a build script and I get some stupid error message. Google the message "update X" then "update Y" bla bla bla. Never fucking works. Makes you really love and appreciate composer and the opensource culture around it that PHP has. Everything just works.
Thing to be careful about with those instructions is the Argon2 Ubuntu package it points at is quite old, relative to the lifespan of the library itself. The Argon2 team have been .. pretty poor with releases. I'm expecting things to be markedly better the libsodium bundling.
Node is no more functional than PHP though. I mean it has maps and filters, but it's basically got the same limitations /u/pinus_nigra pointed out for PHP.
I assume you're using node as a build tool rather than as a server environment (as is common). The output of this process is typically a bundled JavaScript file that you include in your HTML page. The bundle itself has been processed to convert JSX and modern JavaScript features into forms usable by even IE11 (supposing you've configured it to need to support it).
But did you start watching?
If we do anything we should make it non-associative to force parentheses. That's my opinion anyway.
so... I should just npm run build and then serve an index.php with the bundle.js in a script tag? what about the react-materialize package? shit like react-materialize and bootstrap, those things get de"bundled" into vanilla JS when we npm run build?
You don't even need php at all just point your web server to an index.html file that loads your bundled js and you're good to go.
I think crowd-funding is pretty well-established at this point, isn't it? I think you could just put up a Kickstarter or Patreon if you have something interesting to show and think people might want to pitch in on the idea. CEMU is a good example of a crowd-funded software project using Patreon. Just don't fall into the frustrating "guerilla marketing" mindset that some people have for spreading the word about their fundraising. Put your fundraising link on your website and GitHub org, and create some worthwhile (free) content describing how you're overcoming novel technical challenges or are having a relatable experience in the management of your project. Then, post that on social media. You want our money, we want something back - an untraditional level of insight and access to your work, ideas, and experience. Another good example of crowd-funded content creation that's worth learning from is what independent media is doing. People like Tim Pool and Dave Rubin are making something people want that they don't necessarily want to pay for (news and editorial), and they're getting people to pay for it by connecting with them on a closer level and politely soliciting funding at the end of their videos. Closer to home, I've watched a few people gain real success in their projects and careers by being "personalities" in the PHP community. In some cases, they've garnered real income from it, often by being a paid speaker at conferences and offering consulting services, and then using that income to fund project work. If you're doing something compelling and transformative - though I'm always skeptical of work in search technology - then talk about it and people will find your project and see your crowd-funding link.
And assumes you're using a Debian based distro. There is absolutely zero need for this library and it should be killed with fire.
I'll give it a shot. I'm still wondering about node modules though 
This seems interesting; It appears to me that it is a rough idea of DDD. I've always preferred using Commands over a Command Bus to interact with a domain; but the concept of having an "Interface" for a domain instead; seems a bit interesting to me. I always thought it was a bit weird to have a single bus for your application and I think I see how it would be more appropriate to have a bus per Domain itself. The temptation to issue a command into another Domain is always there; but that could be eliminated totally if there's a separate bus per domain. In this case an Interface would be like a proxy to the bus itself in which case that might be what is called the control object. 
I guess the question is, if I have to use PHP to 'run' my server, how do I point my web server to my index.html in my build folder?
Why is anyone still running Apache in this day and age?
SIGH.. how do I point my web server to point to this index.html
As others have pointed out you really should invest a little time to learn the basics of server configuration. Even going as far as reading the docs on vhosts would be enough to buff your skill set. A simple vhost config for each site/project as well as a hosts file edit and you'll be living the easy life while working on multiple projects. https://httpd.apache.org/docs/2.4/vhosts/examples.html
http://www.theying.com/ e: before you ask, I could definitely use some advice lmao e2: but just seeing it live is enough to put a huge smile on my face :D
Seems that you're running apache. Check out your configuration. It's usually this section &lt;Directory "/path_to_root_directory"&gt; And put your index.html there. If you're using webpack it would generate a bundle.js file by default. Call that in your index.html and you're good to go.
Legacy of course =)
Currently it works: www.theying.com . Where do I make this amendment?
It’s clunky to get installed, but doable. There’s a pure-PHP implementation that doesn’t take a ton of work to use in place of the extension, which is probably a better choice if you’re starting from scratch 
A common build process will bundle those dependencies into your code's bundle. However, what actually happens depends on how you've configured things.
A few of the things said are quite obvious like xdebug; it's just such a major resource hog *especially* if you run it within a VM. What I can't recommend is using the SQLite replacement. I don't know what application you have, but we use Postgres with a) triggers b) partial indexes c) fulltext search capabilitites d) json operators where none of it would work with anything but postgres (well, maybe Oracle? Don't know.) One **big** mistake I did was that, when we started the (API) project we had to begin with fairly complex fixtures, lots of relations (user/groups/permissons/channels/profiles/histories/notifications/more and more and all with relations between, some with parent/child too). Importing all these complex fixtures for every test brought the test suite to over 5min and I even hadn't &gt;500 tests. We "fixed" this by: - loading the fixtures *before* any test - wrap all tests accessing the DB into transactions (well, this is should be done anyway if you use the DB in a test) This brought the suite down to &lt;1m. Nowadays of course we learnt from our sins but we've way too many test to remove this "hard" fixtures. New tests don't use them anymore and try to use less fixture dependencies anyway (testing smaller and smaller units how it's supposed to be). But at times, especially with proper integrations (testing the whole jsonapi request/response/standard conformance cycle) this just is required. Today we have &gt;2.1k tests with ~40k assertions and it runs between 2-3 minutes. Getting coverage is still a hog so we use `@group` to run a selected part of the suite to cut down the time.
Agree with this approach - I mainly use a custom data class as a wrapper when multiple entities need to be created/updated as a result of a successful and valid form submission.
We already talked about this in https://www.reddit.com/r/PHP/comments/6a7w5y/how_do_you_deal_with_complex_forms_nowadays/dhd69x6/ Doing this is just not worth the effort.
You should consider lightening your background image, seriously, 4000x3000 and 2.9MB?! :D The loading of your page reminded me of the times when we had those 56k modems. It is 6.95 seconds to load the page from which 6.57 second is spent on the background. Also gzip compression should be enabled on the server for static files, because now it needed to download the 546kB main.*.js in 1.76 seconds. Actually I have checked with a tool: Size: 545.2 KB Compressed Size: 121.7 KB Potential Savings: 77.7% So it would load much faster. :)
Consider using beanstalk instead of gearman. We had problems with long waiting workers with gearman, because the tcp connection died after 2 hours, but the worker didn't realize this, waiting forever without doing anything any more.
I'd like to hear what's the distinction between MVC and EBI. - Entity = Model - Boundary/Interface = View - Interactor/Control = Controller People just love reinventing MVC. It never gets old. 
Newer things break more often unfortunately, they're not as mature as PHP projects. One question: do the projects you work in JS have a lock file? Yarn.lock for example, NPM used not to lock dependencies but since version 5 it does, I guess if the dependencies are locked it would be much harder to install the wrong version. If you're learning React I recommend a series of screencasts from Stephen Grider.
Patreon is good if you already have an established user base but even then the return vs the number of users is very low from what I've seen in other projects. Also it will be hard to get funding for a project that is simply copying other well-established projects that already do the same thing you're aiming to do
Always wondered why they are placing all those functions into root namespace. Would be way more easier to just namespace those functions - then there is need to use: if (! function_exists(...) {}
Yeah seems like blog spam and simply quotes the article on his own page?
We alredy have patreon but it seems that nobody is coming around. There are other well established search solutions but none of them is in PHP and they are way more complicated to use in the PHP world. People use our enigine a lot, there are more than 65k installs, but nobody seems to care to donate
A good article about the theory, but I would caution against using bitwise operators for database permissions, in case anybody thinks it is a good idea; it is not. This sort of approach was all the rage 15 years ago, when I last did it, but I thought it had quietly died a death; it seems not. On a technical level it is very good, but on a developer debugging level is is hell. Too many values to remember / lookup and then do the calculations with to work out what permissions are set / need to be set. Yes it is not difficult to work these things out, but why should we need to every time we need to investigate an issue? It is more cognitive load we do not need. Much better IMO today to use some sort of string based permissions approach. Storage is cheap, servers are fast. Use something which is easy to understand if you get asked to look into it in the future...
The only one I know of is TNTSearch, is that the one you are promoting here?
Instead, have an abstract `getName()` method. You'll get a clear error.
These functions are used like helpers for the views, adding namespace would make things a bit more difficult for this use case. And yes, creating an extension system like Twig does, would be a "cleaner" solution ;)
But that only works because you still have the $c variable around to make a new class. In a realistic situation you'd decode on a separate page/request. Plus it only works in that specific example because all you have is a class storing an array. Anything actually useful you won't be able to recreate in such a simple way.
You will save 15 minutes upfront, while damaging the decoupling that is necessary between frontend interaction and business logic. Pick one: * Maintainable application and DTO/Command binding, slower first dev time * Unmaintainable CRUD app and Entity binding, faster first dev time 
The real question is why are they functions at all. Considering PHP loads all code from scratch for every request (and some of this overhead *remains* even with opcache), it's just senseless stupidity to keep piling "always loading" code on the request, when it's not certain at all that a given request/app needs it. Not only do those functions not have to be global, and risk collisions, but they can just as easily be static methods only: str_before('foo@bar.com', '@') vs. str::before('foo@bar.com', '@') Not to mention some of this is already in PHP in one form or another (and yeah, not best names etc.) strtok('foo@bar.com', '@') // "foo"
What is the advantage of using these where parallel native PHP functions exist?
Thanks for the idea, I'll implement it. However, is overriding the mother property considered good practice ?
Fun thing, these functions are "shortcuts" for static methods : https://github.com/laravel/framework/blob/master/src/Illuminate/Support/helpers.php#L835 So basically you can already use : Str::before($subject, $search) These global functions are used for the blade views, since there is no extension system (like Twig does)
= Tutorial: Bitwise Operators for Beginners Fixed the title.
&gt; slower/faster first dev time This is not true. Both approaches are O(n). With DTO approach, additional time needed to implement it won't ever decrease. It will consistently put an overhead for each form you implement. For each form you will need to write new DTO and DTO -&gt; Entity transformation logic by hand. On the other hand, when binding entity to Form, this overhead won't ever exist - it will be consistently fast. Regarding maintanability, that's your opinion. My opinion is that DTO approach is less maintainable due to need to maintain tons of additional code. There is also a problem where developer assumes central validation logic is inside entity, so whatever he puts there is valid, which is not true, since it's not possible to put all validation logic inside entity. Go read the referenced link, I think there were good arguments against this.
The real question is why use objects at all. Keep it in a generic object as an array. If it's valid, expose an API to fetch an entity from it. I guess that'd make too much sense. You see, it's for the annotations. Defining an entire useless class just for the annotations.
Patreon, as a platform, seems to be OK. They have some issues (what funded person is getting is less than displayed in the campaign) but overall it works. Getting attention and backers is totally separate question and doesn't really depend on the platform. You should have fairly popular product used by many in order to get support.
I can just picture Taylor sitting in a dimmed room, a cup of whiskey in his hand, stroking his chin and saying quietly "OK, what's the most round-about and slow way I can implement these."
Yes, this concept is called Overloading and is absolutely fine. http://php.net/manual/en/language.oop5.overloading.php 
Not sure if these functions are used throughout the framework, but if not, then it should be easy to remove helpers.php from composer.json autoload section. EDIT: ignore me, not enough coffee today
Editing files in /vendor isn't a smart idea.
Serialize can only store data. Recreating the same anon class in the next request would have the same effect as shown. 
Oops, that's true. I thought I was looking at the skeleton repo. But it's autoloaded directly in the framework
can confirm. at this moment there are still 21 .htaccess files scattered throughout the public directory in this project i'm maintaining
Yeah I think it's mostly for annotations, but it has more advantages, like autocomplete and type safety. It also scales nicer without the container containing all of these arrays which would be needed otherwise. And without annotations, you need to either put validation into Form, or into array together with own mechanism which pulls these validation constraints out of an array and uses them for validation.
For coverage, you probably meant to use `xdebug.coverage_enable=On` `xdebug.profiler_enable` is a CPU and disk consuming beast, used for a different purpose. Also, feel free to name the xdebug module simply `php_xdebug.dll` . It will simplify xdebug updates without having to change any running scripts you have.
Yap, that's the one
Taylor seems intent in adding the weirdest things to Laravel at the moment, kinda shitty to be honest. If I wanted this shitty ass helper I would just write it in my own helpers
If you are still using CodeIgniter in new projects you are an idiot
How is that any different than official docs? https://www.codeigniter.com/user_guide/general/views.html
Publish it just for some community code-review (you will learn a lot from it), don't expect that anyone would use it.
I'm not convinced that a single `use` statement at the top of your file constitutes any significant level of difficulty.
It's no, its an exact copy xD
Cheery fellow, aren't you? What's wrong with CI? It still does a job, and fairly speedily, it may not be cutting edge, but if it does what you need it to do, why use something more complex?
cool! tkx ! :)
I would be interested in looking at this. Publish it and post the link to the repo please!
If you are thinking about publishing it then just do it. Every published software package should have a license though so that would be your first step. I really doubt you'll get a huge influx of users right away so you have time to figure out the other stuff. 
Yeah when doing unit tests I try to not even use the database at all as normally you are creating an object and testing a single method. That definitely helps as it prevents the whole ORM from being loaded. We are at around ~750 tests with about ~3k assertions and it takes about 1-2 minutes.
I'll give that a shot and see if it makes a difference. EDIT: Wow that cuts the time down to only 33%, at least on a single test file that had 20 tests and 52 assertions. That is huge thanks a bunch @FlyLo11. Updated the post to include this info.
It could be worth noting that a lot of people using it will just be using it for testing and I'd imagine the number of people using it in production will be much smaller. Even the very largest OSS projects that have millions of users still only get a few thousand bucks a month on Patreon, things like GIMP, a lot of Linux distros and PulseAudio are all like this despite the user base. Unfortunately. The PHP community as a whole is mostly "get rich quick" types or "script kiddies" so will not value your work in a monetary sense so it will be difficult to generate a following. Of course, there are still highly talented professionals but due to the low bar of entry, the majority of the community will be as above. My only other suggestion to you is creating a SAAS platform for the search and charge a monthly subscription. Keep the code base OS to drive interest but make your money via a hosted, paid subscription. I was always dead against anything SAAS until I started working with larger corporations who want support contracts in place, basically someone to contact when shit goes wrong. SAAS is a real money spinner in the corporate world where they frowned upon anything that's free and you run and host your self.
You need to do some more research about all three technologies you asked about. 
It's a bit poorly maintained it works if you use the github repo instead of PECL see: https://github.com/hjr3/pecl-gearman/issues/12
It'll always be worth publishing it. All the people that like to nag you about how you shouldn't "reinvent the wheel" are using a framework that **DIDN'T EXIST** few years ago. If the author of their framework wouldn't be willing to "reinvent the wheel", all those whiners would have nothing modern to use. So keep writing, keep releasing, and god speed.
The gearman server can work with a mysql database which stores the queue
not sure if troll or deeply misguided
MongoDB.
&gt; strtok Yes, perhaps this was a bad example, but `strtok` isn't one-to-one with the `Str::before()` helper: &gt;&gt;&gt; $test = 'example@test.com'; =&gt; "example@test.com" &gt;&gt;&gt; strtok($test, 'test.com'); =&gt; "xa" &gt;&gt;&gt; str_before($test, 'test.com'); =&gt; "example@" &gt;&gt;&gt; So again, while the example wasn't a good one, at least research what you are talking about before you bash it.
jQuery because it can easily compile to Pascal and Forth which PHP can interface with natively. Assuming you are using jQuery 32bit?
I'm still completely confused how to use it from the command line or anywhere at all as I can't find any documentation for it.
I jquery is a framework built in the language Javascript. Php is a server side language. Javascript (and any* framework built on it) runs in the browser. Php runs on the server. Only brave warriors still use native js for anything more than loading a module. Everything is angular, react, and others. Many use jquery as part of their framework, so the rabbit hole goes deeper there... Learn either php or Javascript first. And if you choose js, then pick a nice framework, rather than trying to do anything meaningful natively. * nodejs is a server side version of Javascript, but that's probably out of scope here. 
I answered like this on some other simmilar question and got downvoted 'Australia' deep... So, upvote for the reasonable answer :)
I was addressing the specific example of the documentation. If another use case is presented, I might have presented another PHP function. I'd personally not even open the manual looking for string functions, as I can write the regex for this faster than I can blink. But to each their own.
Don't forget about the integration with guest host platforms too, can run multiple clients at once with jQuery.
COBOL
there you go, edited first post.
&gt; Considering PHP loads all code from scratch for every request (and some of this overhead remains even with opcache), it's just senseless stupidity to keep piling "always loading" code on the request, when it's not certain at all that a given request/app needs it. Seriously, LOL, this is so dramatic. If merely defining some helper functions spoils performance for you, I think it's time to look for a new language ¯\\\_(ツ)_/¯
 Hi! This is just a friendly reminder letting you know that you should type the shrug emote with three backslashes to format it correctly: Enter this - ¯\\\\\\\_(ツ)_/¯ And it appears like this - ¯\\\_(ツ)_/¯ --- *^If ^the ^formatting ^is ^broke, ^or ^you ^think ^OP ^got ^the ^shrug ^correct, ^please ^see [^this ^thread](https://www.reddit.com/r/john_yukis_bots/comments/6tr5vq/u_you_dropped_this_a_shrug_fixing_bot/)^.* ***^Commands:*** *^!ignoreme, ^!explain* 
yap, you are right...reiventing the wheel actually made me learn a lot about php and improved my code skills.
i dont actually expect ppl to use it hehe, its very ugly, and some parts are still a mess and i am constantly changing some parts of the arquitecture to improve it...i dont know when the hell i will have a stable 1.0 version xD
People are just used to it at this time and they know all the shitty bugs that always happens. I myself moved to nginx a while ago.
Oh no, just the helpers don't. But it's like this all throughout the framework. And many devs, spoiled by the constant repetition of memes like "premature optimization is the root of all evil" don't realize how it all adds up.
[Function array dereferencing](https://wiki.php.net/rfc/functionarraydereferencing) (FAD) appeared in PHP 5.4 and I don't expect it to go away anytime soon, if at all. I'd say, feel free to keep using it.
I'm responding late but someone recently necro'd the thread so while I'm here I figured I'd reply: * Debugging a unit test? I almost always use `phpdbg`. * Debugging something from `mod_php` or `fpm`? Use `xdebug`, preferably with an IDE in front of it. However if you are always using an IDE you probably will just use `xdebug` every time. One very nice thing about `phpdbg` is that you can print opcodes but I don't expect regular PHP devs to use that functionality.
Ok, good to know. Thanks!
This is really quite frustrating. It was only after being adopted into the source that the instructions are out of date because they still refer to the old repository. There is a non-working link on the README page to a phpdbg website that I was hoping would have more helpful information. The PHP manual links to a phpdbg documentation page that is not working: http://php.net/manual/en/migration56.new-features.php
I thought, they put it into function_exists for unit tests (at least at version 4.2). Helpers includes on application boot. Each unit test call application boot. So you get an error about function being already initialized. Similar shit was with boot-ing models within tests, but they fixed that. 
If I recall correctly, Taylor was originally opposed to adding any more string helpers and had shot down PRs for these in the past, people just kept opening PRs for the same feature and eventually one was accepted, which led to people submitting more while referencing the accepted one. Until recently only string helpers that were used somewhere in the Laravel core were provided out of the box.
Not sure I understand? You mean will Node take community away from PHP? I don't think so. Its good to dabble in multiple languages, find out the best language/tool/framework/package for a job, but Node can compliment a PHP application, much like PHP can compliment a Node one as well. They can work together. PHP is a mature language with great advancements the past few years, speaking personally as someone who's just jumping back into it after 4 years of being away.
Like And Share 
how about an alternative?
I honestly think this user a bot, building up karma so it can spam later on.
Will maglev trains bring a real challenge to space shuttles?
Opcache with opcache.validate_timestamps to false on the production environment reduces most of that overhead. Perhaps not if you are building at Facebook scale, but be honest most of us aren't building in that scale. And once you are on that level horizontal scaling is not the biggest issue to tackle. So yeah I rather have some convenience over premature optimization. 
It's probably like cursing in church, but Taylor might as well switch to Twig instead of wasting energy by rebuilding it. Every time I read a blade template I can't stop to wonder about the insane amount of similarities between both template systems. 
When your framework is at the bottom of every independent benchmark, we're not talking about "premature optimization", we're talking about "overdue optimization".
There is a big difference between the driving directions and travel time (on the tutorial) as compared to using the Haversine formula to find the great-circle distance between two points. That being said, both examples are not very good.
To add framework specific dependencies and force you to stick with Laravel. These really add nothing but slowing down processing time and adding more code/libraries/dependencies for something that already exists in a native function call. It will make refactoring, converting specific features to microservices and getting people familiar with your system harder if they have never used Laravel or these. They are even in the global namespace, so developers are going to come in and think they are legitimate PHP functions and be confused when they use another framework/write other scripts.
Any evidence to support your claim?
Don't be discouraged by the feedback you have received (although they are right about some of your approaches), there is always someone in the Linux / programming world who can do your task with some one liner (scripts are prettier anyway) Write a script that will automatically create vhost files &amp; edit host file given the following parameters -- website domain name (or testing domain name) -- document root -- SSL cert path (if you do that on local dev) For added difficulty -- Make it work for every OS under the sun (because you know nobody ever wrote software for just one platform) -- Add a front end page to manage vhosts &amp; host file entries Why would you do any of this, you wouldn't and your probably shouldn't. The only just about justifiable reasons would be to help new people out, but i think it unlikely they download and run php scripts from github, or to improve your own skills. The following guide explains setting vhost files and how to edit your hosts file (if you dont already know), https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-16-04 Also if you are serious about trying to get people to use your software you might want to learn about composer (or some other package manager)
Sorry I'm no Laravel fanboy, so I don't feel the need to walk down that dick measuring road of useless framework benchmarking along with you. 
They are not so similar in my opinion (spoiler alert, I prefer twig if I have to use one independantly of the framework) Twig is a full featured template engine (you can do `variable.key` even if the variable doesn't exists, and you can't write raw PHP) Blade is just plain PHP with some syntax sugar over it (you still have to write valid PHP), the parser is much simpler to figure out. I think blade is interesting for a lot of laravel users cause they can throw random PHP into the views (without having to create an "Extension"). Twig is more restrictive (even if it's a good thing, it can be a pain for newcomers). Switching to Twig would be a good thing in my opinion but I can see why some people would prefer blade over it (ultimately diversity is a good thing so having two template engine can't hurt). 
A more evil solution would be to define all these functions using empty functions before loading composer XD
Diversity is indeed a good thing, and technically they are different. But i'm more looking at the way the template lingo is similar and more and more of twig things are being included in blade. 
This package should *really* require a variable that defines which fields can be filtered on and throws an exception if said variable doesn't exist or is empty. There are too many potential security issues otherwise.
I do believe this is bullshit..Entities and validations are one of the best thing in using symfony..everything is consustent and working in sync..specially if you are building an api..entities at the end are just dtos so why use a dto to convert a dto..I would say that the author just has not enough experience in building robust maintainable solutions. I will be laughing really badli when he will have to keep his super cool dtos up to date over a longer period. This approach will cause so much trouble for the future he just dorsn't see it yet
You are still creating "Entities".. they just aren't DB backed entities. You can still use the same constraints/validations on 'mapped =&gt; false' by adding a constraints array of the same assertions you would use on DB entities. Though otherwise I would agree its overkill and not really necessary for simple applications. There needs to be a reason to do this over simply using validations in doctrine entities for example. 
Build 0 projects in Laravel because it's Laravel. Honestly, what the fuck were you thinking?
We're all dying a slow death. Do you need proof of that also?
Fun thing, you can just not use Laravel. You probably hadn't thought of that so I just wanted to put it out there as a possibility for you to consider.
Depends on your frame of reference. Most people perceive "growing" as the opposite of "dying" (and unless you think watering a plant to not be the opposite of letting it die, you would probably agree). Therefore, as long as something is growing, it isn't dying. That applies to humans or technology. I don't think it would be hard to show Laravel is growing, or at least remaining steady, which means it isn't dying. So yeah, I expect evidence to prove the contrary to my belief. I also disagree with your statement fundamentally, since I'm not a nihilist.
I use Nginx for probably 80% of my own sites... but there are a lot of apps, codebases, etc. that were born in a time when it was basically Apache or IIS, no questions asked. Therefore there are annoying .htaccess files scattered all over and lots of little dependencies that are built in with a mindset that Apache will be the one and only server, ever. But setting the legacy discussions aside, I still like that Apache is one of the more 'open' open source servers (Nginx, like many of the other 'community edition vs. 'pro' edition' open source products, doesn't feel as open), and it's not at all bad to work with if using 2.4+. _Most_ of the time.
The thing is that this is not necesary for simple applications and for complex high load applications you will use dbal because you need every drop of performance. So this approach is good for max an article. In real life you just loosr so many benefits and already working solutions and packagies for no gain at all. If you need to earn money you would better have a stupid client to push this trough. Tbh i have seen such experiments in real world and they all ended up as disasters in long term
&gt; PHP continues to dominate the market for PHP frameworks you don't say? This is just a poorly written ad for a udemy course.
Same here, .htaccess files are the only reason we're still on Apache. Mainly for Drupal. It's possible to run Drupal behind nginx of course, but it's just easier to rely on .htaccess, especially with a boat load of sites on different servers to maintain. Performance hit b/c of the extra file stats? Sure, but negligible compared to the rest of Drupal.
That's generally a problem with any long running worker process - you nearly always need to code it so it reconnects to any dependent services (database, redis etc) at the start of processing each job. It's not a gearman specific problem.
This seems like an over abstraction, at least for trying to say everyone should be doing this instead of entities. I'm sure it has its use case but to suggest it be used in every single use seems like overkill. The form is already abstracting the user away from the entity, so now this is suggesting going deeper into the abstraction hole.
Yes, normally they would be. Especially if you use the default configuration. Gearman can use a relational database like PostgreSQL as a backend - and that can be made highly available. Alternatively, look at something like Google Cloud's PubSub etc. 