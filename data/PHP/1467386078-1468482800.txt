You can use MySQL with PDO, (as long as you are not trying to create a Sequence, for example).
I'd try `{!! csrf_field() !!}`, but the documentation actually says `{{ csrf_field() }}`. I don't know, but this might belong to /r/phphelp
Found the developer!
Well, I don't know about you but every time I need to update my composer dependencies on a project, I always first need to make sure that no breaking changes were introduced since the last time I updated them. And I really cannot remember how many times I had to dig through the commits of a project that I'm absolutely not familiar with its internals, because there was no changelog in the repository and neither the release tags had any information about the changes. Ok, sure looking at the commits will give me the information I need but it's time consuming and also if I'm not careful I might miss something (which in fact happened in the past). Especially when you introduce breaking changes from version to version you have to make it obvious to the user, if you don't want to have a proper changelog at least make the effort to write proper messages for the release tags.
It's a larger point rather than a critique of this particular container... but... I still can't figure out what's the difference between adding a "service" in a container like this, and... adding a method to a class. Case in point, let's rewrite the given example, while preserving the same dependencies of user, pass etc. (which I understand are included for the sake of example, so I'll keep them as well). Original: $sack = new Burlap(); $sack-&gt;mailer_user([function () { return 'username'; }]); $sack-&gt;mailer_pass([function () { return 'password'; }]); $sack-&gt;mailer_settings(['mailer_user', 'mailer_pass', function ($c, $user, $pass) { $o = new stdclass(); $o-&gt;user = $user . rand(); $o-&gt;pass = $pass . rand(); return $c-&gt;share('mailer_settings', $o); }]); $sack-&gt;mailer(['mailer_settings', function ($c, $settings) { $o = new stdclass(); $o-&gt;one = $settings-&gt;user; $o-&gt;two = $settings-&gt;pass; $o-&gt;three = rand() * 10; return $c-&gt;share('mailer', $o); }]); A plain PHP class: class Container { protected $mailer, $mailerSettings; protected function mailerUser() { return 'username'; } protected function mailerPass() { return 'password'; } protected function mailerSettings() { if (!$this-&gt;mailerSettings) { $this-&gt;mailerSettings = $o = new stdclass(); $o-&gt;user = $this-&gt;mailerUser() . rand(); $o-&gt;pass = $this-&gt;mailerPass() . rand(); } return $this-&gt;mailerSettings; } public function mailer() { if (!$this-&gt;mailer) { $settings = $this-&gt;mailerSettings(); $this-&gt;mailer = $o = new stdclass(); $o-&gt;one = $settings-&gt;user; $o-&gt;two = $settings-&gt;pass; $o-&gt;three = rand() * 10; } return $this-&gt;mailer; } } Size-wise they're basically the same amount of code, and speed-wise, there's no contest, the plain PHP class doesn't need to load a third party library and doesn't have to use magic to resolve method calls. So...?
&gt; There are some surprising names on the "don't mention me" list that you'd be blown away by That is quite clearly sensationalist. Now, to go off-piste, and very likely exiting reddit in an indignant blaze of ... something or other: Why must you make every conversation an exercise in futility? For once, please, concede a position when it's the correct thing to do. Furthermore, stop relegating those with whom you disagree to inhuman figures worthy of slander, bullying and harassment. I've had enough of it, from yourself and others. If you want a kinder community, start by treating its members with empathy and respect. Try to be tolerant of people with differing backgrounds, experiences and opinions. And that completes my implosion.
There is a tool that claims to do the migration from `mysql` to `mysqli` automatically, you can find it [here](https://github.com/philip/MySQLConverterTool). I've never tried it though to be honest so I don't know if it really works, but I think it may be worth giving it a try.
Ok)
You may be onto something, take it up with Mr Otwell and Mr Potencier :) For me this was a useful learning exercise as most frameworks make use of some sort of DIC, so gaining an understanding of how they work and are used was beneficial to me.
&gt; In this case, when no book is found, FALSE is not the appropriate return value - either return NULL (to indicate the absence of a valid book), or employ the Null Object pattern and return an null book object. It just feels so wrong returning multiple types from a function. Alarm bells should ring as soon as you see the pipe: I might just be being a little pedantic here, but a method that returns `\Book` or `null` is still returning two types. If you don't write code to explicitly handle both cases correctly when its possible to get null or a `Book` as a return value, then you end up with broken code (same as if you didn't handle two different custom types).
How is this any different than the migration manager that comes with laravel?
I see people evangelize the null object pattern on occasion, but I've never been a fan of it. I feel like it permits logic errors to propagate through the application instead of being caught immediately. Consider the following method: function calculateBookShippingCost(Address $shippingAddress, Book $book) { $weight = $book-&gt;getWeightByOunce(); $zip = $shippingAddress-&gt;getZipCode(); $this-&gt;shippingService-&gt;getCost($zip, $weight); } We don't need to worry about we get valid instances of `Address` and `Book`, because if you tried to pass anything else PHP would throw an exception. With the null object pattern, however, you suddenly have to care about whether those instances are *real* or not. I can no longer guarantee `Book` and `Address` are internally valid, because a null address would have a zip code of 0 and a null book would have a weight of 0. Sure, you probably *shouldn't* pass null objects to this method, but now you have to check anyway.
Use a cache layer and query each thread. Storing it all in an array gets really slow. I experimented with checking by ID in an array, straight from MySQL and from Redis while generating 200,000 unique random codes. Array got really slow quickly and started eating up lots of RAM. Using MySQL straight up actually performed much better, just make sure your indexes are set properly. Redis outperformed it all..
Actually, if you really want to scale it you should take a thread, and push each post to a queue. Then have multiple listeners processing the posts. Doing it all in a row slows down the whole process quite a bit. I did this loading in thousands of tracks from the Soundcloud API.. If you're using a framework implementing all this shouldn't be too difficult.
Just asking...
Not everyone is using laravel. This is for people who don't want to work with laravel and just need a migration library.
I use exceptions as much as possible. The problem with null objects is any code that could consume one now has to do validation checks. You end up with "instanceof NullBook" or "!$book-&gt;isValid()" everywhere. And since they're potentially late checks when the object is used rather than early when it's created they're much more cumbersome to recover from.
Yep - the only time I ever had a performance issue in PHPStorm, this was the culprit.
Jeffrey Way just started a new beginner PHP series on Laracasts that's free. You might be able to use that as a base and expand on the content. [Check it out](https://laracasts.com/series/php-for-beginners)
There are main sections you have to explain to transfer most of your experience to whom you're teaching: * Client-side basics (HTML - CSS). * The basics of the language: (installation - using expressions - global variables - OOP concepts - security considerations). * The architecture you're using in your applications (in other words, the framework architecture). * Other services/applications like (Sphinxsearch, Redis, RabbitMQ, etc) * Give them an idea about the IDE, code standers (PSR), terminal, github, etc. 
From what I've seen, if you're developing a plug in for Wordpress then you should apparently suppress/ignore/pretend they didn't happen, all errors. Who wants to see errors anyway? Users don't care about that silly stuff. Heck, rip that rear view mirror off the windshield, slam the accelerator, and don't look back baby!
Seems pretty underwhelming.
What rate are we talking about here ;) It heavily depends on the area and if your company is willing to work with contractors (overseas or otherwise). 
Second this. I had a similar project that pulls all Reddit posts per subreddit and this is eventually what I came up with after searching around. Works well as long as the DB can support it (most can). 
I love Ross Tuck talks. I'm sometimes not sure what new lessons to take away from them, but it's quite pleasant to listen to him deconstruct the status quo of his chosen topics.
The migration package from Laravel is very nice, but if you don't use Laravel it's impossible to use (my current project uses Slim3). Phinx is great because it has no framework dependency so it's interoperable, and you can even use it with Eloquent (Laravel's ORM, which isn't as intertwined with the framework as some other components)
Specifically I just wanted to know if it was better or different-- I only use laravel in one of my projects, but I'd like to know how it differs and if it's better or different in any significant way. 
Naa it's hard to teach programmers music theory.
Quote from page: &gt; Please note that yii2-httpclient is not PSR-7 compatible. It remains an open question for the future 2.1.0 release.
Will do! Thanks for the invite.
It sounds like you have a fundamental design flaw. Given enough records, even in-memory stores will struggle to deal with the volume of data you wish to process. Why check if a thread is already downloaded in the application layer, as opposed to the data / storage layer? DB Constraints should stop duplicates by using reddit's PK (whatever that is) stored with a unique index. At any reasonable scale it becomes impossible to process, mentally comprehend or reason about an entire program, an entire data-set at once, so you should start to break things down. * Can you query Reddit so you don't need to deal with duplicates? (Looks like you've said no, I'd be interested to know why?) * Does duplicate data matter, and why does it matter? * Are there other concerns with the data? * What hardware and resources can you throw at the problem? * Can you spread the load across multiple machines (maybe one per sub-reddit?) * Can you iterate, and check 5, 10, 20 records at a time if you have to do it in app? 
Loading 45k rows to memory sounds like a bad idea (my opinion). It is technically possible to hold as much as data you want until it hits memory limit. But what happens when you want to scale to several thousand rows? - if you load all 45k rows from the database, it will have hard time because it has to lookup all its indexes. - If you index the fields properly, they should be quite fast. Perhaps a compound key can help more. - Implement a hash check mechanism to determine if an update is absolutely necessary. MD5/SHA1 are quite fast algorithms. - most of the DBMSs are terribly queue storages. Either do updates as batches or figure out a way to update the rows for every call. 
I too write my PHP in Photoshop
Salted and using bcrypt. But more importantly, you should be using the hash/encryption library/functionality built into the framework you're developing in.
As a framework builder: "A framework is not necessary for dependency injection." You may quote me. :-)
Interestingly, that none of these numerous blog posts telling you to use password_hash ever mention a password strength. While no hash could protect a weak password and thus all the hassle and agitation in vain. 
Base64 isn't even a hash function. It's an encoding.
&gt; If password_hash() is not available in your old PHP version use bcrypt ~~Use [`password_compat`](https://github.com/ircmaxell/password_compat).~~ Upgrade PHP.
However, the *other* `use` statement *is* relative to the namespace. That is, when you do this: namespace A; class Foo { use B\CTrait; } it refers to trait \A\B\CTrait. I agree with OP that it's better to always include the leading backspace. It's a dumb inconsistency in the PHP language. 
Yeah why the hell is he even talking about this?
&gt; It's a dumb inconsistency in the PHP language. Think about the consequences of "use" name imports supporting relative/aliased names. Every next "use" name import statement would be affected by all previous "use" name import statements. So let's imagine PHP did that and you had code like this: namespace A; use B\C as D; use D\E as F; use F\G as H; Would would be the FQN for "H" here? "\A\F\G"? Nope. It'd be "A\B\C\E\G". Those situations would be fun to debug in your "smarter" variation of PHP.
Now everything's broken. Clicking on "Create an account" sends me to https://account/signup
You may like https://github.com/bitExpert/disco then :-)
Annotations... Why?
Not sure where this one came from: the Symfony DIC, as well as other DICs in the thread, are usable independently from their framework of origin, no? Oh, and DI is obviously a separate concept on its own...
I think it's because they wanted all the logic and config to be encapsulated in a single class. That makes sense to me, as it makes service definitions, factories and type definitions simple to read and introspect. The entire container works and can be unit-tested even if you strip the annotations, while annotations just add lazy-loading decoration when you throw your container class at Disco for "doing the runtime magic". If you don't like annotations, send them a PR with support for another config format, I suppose. XML with a proper XSD being a plus :-P
But the code will break the second you try to pass null into a method with a typehint of Book. Unlike a null object, which can't be excluded via a language construct and must be manually checked anywhere Book is used.
The 'create account' link is working. The dashboard, however, is eternally loading my organizations.
 &gt; They're methods. They're lazy by default. Nothing gets created until you explicitly call the method. Thinks like a connection object should not be "Activated" until you actually use it. That's what "lazy" means here &gt; I know your have proxy objects, to solve this in a complex way, but sometimes... there's a simpler way. Plus nothing in a proxy requires annotations or XML. I could have this in my method: No, it's a different concern altogether (connection object example). &gt; And I'm still having a simple PHP class as a container. Yeah, now you have to test that concern and the lazy initialization of your object too. &gt; Needing to expose the same service by multiple names is architecturally suspicious, not that you can't, obviously: Happens often. A cache may be shared across different similar services, for example (as long as namespaces don't collide), and that is usually a requirement, as using separate caches would cause more damage. &gt; I don't see much noise, do you? How is basic PHP code "noise" and annotations or XML of the same volume "signal" somehow? Is it simply because of the emotional attachment? Code your class, then add a marker `@Lazy`, `@Shared`, `@Alias` - simpler to read and to understand than having to read the internals of a `get()`, `has()` or internal decorator factories implementation. Also much easier to test, as you basically move the concerns of aliasing, sharing, lazy-loading down to a decorator or generated class (which you can read anyway). Again, I am well aware that you can code all this in your own problem-space, but since it's your own problem-space, it becomes a burden to test, maintain and improve, while configuration for these particular scenarios makes much more sense.
Disclaimer: I am one of the authors of Disco ;) I am not the biggest fan of annotations. Never was. But for this use case they make perfect sense. Annotations are used to "configure" the dependencies. I do not like the approach that a lot of frameworks use these days by providing distinct methods that need to be called. For me this approach we have taken is the "cleanest" possible. The goal we had in mind was to be able to write the PHP configuration in a "natural" way without calling wired methods to mark dependencies as lazy, shared or what ever. Whilst we still need a way to add these kind of markers annotations seemed like the way to go.
I am sorry but your use case is way too simple. And even though it is given you have to use an if() statement all over the place the "configuration code" is hard to read. The annotations are used to separate the code to instantiate a dependency and to configure the instance.
&gt; I am sorry but your use case is way too simple. Provide any use case you prefer. I didn't come up with the above use case, after all. I followed what the author had in their README. &gt; And even though it is given you have to use an if() statement all over the place the "configuration code" is hard to read. The annotations are used to separate the code to instantiate a dependency and to configure the instance. You find "if (!$this-&gt;mailer)" hard to read... ? It's not clear that the instantiation code runs only if we don't already have a mailer? BTW, in my actual containers, I differentiate shared instances from always-new instances through the method prefix, i.e. getMailer() vs newMailer(), so you don't have to *read* the method to know what it does. You only read it to change it.
If you still care, IE8 interprets text/plain as html if it looks like html, so even text/plain isn't absolutely safe.
There was also an IE9 compatibility mode bug where beginning a file with &lt;/pre&gt; caused it to escape the plaintext and begin rendering HTML.
That first one is only fully qualified because of context. You wouldn't know it without seeing it used like this.
Good thing when we open a file we see it in context then, right?
So happy to see this. Honestly, I got my job thanks to Jeffrey Way's [PHP Fundamentals](http://code.tutsplus.com/courses/php-fundamentals) series. Can't recommend it enough for beginners. 
I guess they weren't quite sure what to do about it. They didn't want to disallow the leading slash in the "use" statement but they didn't also want to make it mandatory since it's unnecessary. So they allowed both but stated that only one should be used for consistency. But then they thought they shouldn't get into coding standards, so they removed the note you mentioned.
IE8 is no longer supported by Microsoft. SVG vulnerabilities are the least of those users concerns. 
Since respect/validation is quite popular, why not implement a rule for them and open a pull request on their project? You'll have a much better chance of helping others in this way.
This shouldn't go in your internal code (Form Validator) just like another few hardcoded behaviors: if (APP_DEMO_MODE == true &amp;&amp; !self::$demo_allowed) My humble advice is that you should learn about the SOLID principles.
It was coded that way so that putting the app into demo mode will disable all validation unless the $demo_allowed property is set to `true`. A quick way to put an app into demo mode and restrict all controller activity at once. I may recode it differently, I see your point.
IMHO 'respect' design is overcomplicated and with modern PHP validation could be done with much less code. I've sent them a link and asked if they are interested in contributions but they decided to not reply. I've spent a couple of days trying to make that lib work and wrote to the devs (link above). Its behavior looked inconsistent and while trying to understand how that lib works I built a vision how validation should work. So just a new rule wouldn't be enough to solve those issues.
I wasn't looking at 'out-of-the-box' functionality but looked at core components such as routing, HTTP requests, database (schemes/migrations, seeds, requests). You'd really look closer to existing solutions and learn about PSR-7, PSR-3 (other PSRs also would be good) and existing routers, DI, containers/service locators. I'm afraid you hugely underestimate complexity of these topics to make it all from scratch.
Normally you'd implement that by using the DI container to swap out a different validator that is basically a no op - no need for that to be at framework level.
More static methods for the glory of the static gods! p.s. Yet another procedural-style PHP code... I recommend you to learn about [side effects](http://blog.jenkster.com/2015/12/what-is-functional-programming.html).
I've included a demo and the wiki on github contains a full documentation.
I like your idea. I think I'll implement it in the near future.
I had no problems with git as it was globally installed using the official Git installer, thus working in cmd.exe. Perhaps a better option for some? 
Ugh, before trying to invent your own framework, maybe it makes sense to learn the inner workings of some existing solutions first? `/libraries`? `autoload.php`? Y no composer? No one is going to copypaste libs from repos manually anymore. `/assets`? Leave it to npm and whatever build system (gulp, webpack), php shouldn't ever manage frontend assets. `index.php` must be isolated inside some public folder, not hang around with other framework files exposed like that, huge security risk here. I mean, that's even before I opened the code. &gt; couldn't find a framework that does, out of the box, what Pixull does. such as?
I tried many a validation library in my time. I finally fell upon using [Symfony Constraints](http://symfony.com/doc/current/reference/constraints.html). The most common thing libraries do not support is deeply nested arrays/objects and array key validation. Does yours support this?
For people who are running the Windows Insider Builds, and have the Anniversary Update, you can do basically this to get proper linux `Bash` as your chosen terminal
Hey OP - a lot of people here shitting on you but I'd say good effort anyway. Attempting to write your own MVC framework means you'll likely have learned a lot and understand the inner workings of more established frameworks a lot easier. Definitely take a look at SOLID principles.
Did you select the wrong sub for this? Even if I wasn't a kiwi, I'd still not see how this is relevant to a PHP community.
true
I'm talking about hash functions because the vast majority of 'tutorials' on the internet suggest using them, MD5, SHA1 etc. Why this may seem obvious to more experienced developers unfortunately because tutorials suggest using them a lot of people do actually use them. I give a paragraph on why not to use them and the reasons for it. Just take a look at the many recent database breaches to see even the huge corporations still getting this wrong (not always a PHP issue), but it happens. Tuts+ one of the biggest tutorial sites for website and phone development where using MD5 to hash passwords not so long ago and its database was leaked on the internet. Whilst I understand you wouldn't ever do such a thing sadly the majority would. That's why I thought it was worth mentioning.
Yes, it does for both arrays and objects (and mix of them). Here is [an example](https://github.com/limoncello-php/validation/blob/master/sample/Application.php#L77). It seems Symfony do not support operations like `IF`, `AND`, `OR`. My library supports that and it makes possible to construct **very** complex rules.
Please, don't make any kind of tutorial videos for beginners when you're also a beginner. You're doing more harm than good.
Why? Would this code be vulnerable to [SQL injection](http://www.w3schools.com/sql/sql_injection.asp)?
I understand that. I respect people who try to learn new things. I'm sorry to say that but it's too obvious from your code you have something to learn in this area. IMHO modern micro-framework must at least have good routing, be PSR-7, support 'middleware' concept for handling requests/responses, support MVC, optionally have decent template engine. Also it not only have to be covered by tests but support writing tests for apps written with the framework. `Composer` support which is in fact a standard in modern PHP is also very desirable. Develop **all** these components is not an easy task and it's better to use the best existing ones. My personal choice FastRoute (Nikita Popov) + PSR7 (Zend) + Pimple (Sensio Labs) + Twig (Sensio Labs) + Doctrine. Combining these components I made a solution that faster than Slim 3. Thats a link you can see [details](https://github.com/limoncello-php/app).
That's the job of your web server: likely Apache or Nginx. Read up on rewrite rules.
SQL injection + plain text passwords in the database, its rather scary
[one more nested validation sample](https://github.com/limoncello-php/validation#nested-data-sample)
This. Working off the local filesystem is a prerequisite to using phpstorm. 
Typically the processes of data validation and transformation are separated. For example validation first and if the data are valid they are transformed. So it would be something like if ($validator-&gt;hasNoErrors($input) === true) { return $transformer-&gt;transform($input); } What is `not canonical data format`?
Looks like he's deleting comments on the video when someone tells him that he should not be teaching people to program this way.
I understand your idea of not working with the same data twice: one for validation and another for transformation. Though what interface in your opinion it should have? Will it produce an object of similar structure as input (with support for stdObjects, classes, arrays and mix of them)? What are your thoughts on that?
Are you using a framework or straight php?
If you're using Apache, check out mod_rewrite and if you're using Nginx, check out the [rewrite module](http://nginx.org/en/docs/http/ngx_http_rewrite_module.html). I usually use "rewrite \^\(.*\)$ /web.php last;" and then use $_SERVER["REQUEST_URI"] to get the pretty URL. 
I agree with your point about composer.
&gt; The model handles the database interactions In this implementation model is nothing more than DAO. Here only controller is responsible for model consistency, so any business logic or constraints will be placed in controller. And also all data passed between "controllers" and "models" via global variables... this is horrible. &gt; and the views are strictly used for output. In context of WEB "View" is passive and it is just HTTP request and response. What you are talking about is templates, which used by controller to produce passive view (not only HTML but HTTP headers and body). `View` stuff is not "view" in context of MVC, since `Redirector` is also producing view. There is Action-Domain-Responder which uses "active view" (responder) but I don't see any profit of it since it allows us to make actions fat.
I can tell you haven't actually looked at the code for more than 2 seconds. Parameters are passed to views by setting them via a method called set_param, which populates a private static property within the Viewer class. And the redirector only handles header redirects. That would mean that class does follow SOLID principles, would it not?
Usually you would have a Router component in your application which solves this problem. You would find such component in every popular framework like Symfony, Laravel or ZendFramework. Basically you would define a route like `/user/{slug}`, in your Action you would get user-information by the slug and render them out.
Hey, couple notes: include 'config/environment.php'; This is a little bit tricky: inclusion paths might completely break your application. Best will be to use this approach: include __DIR__ . '/config/environment.php'; // and use require_once instead of include Also this caught my eye: intval(Inputter::get_raw('start')) Here direct integer casting can be used (int) Inputter::get_raw('start'). Regarding architecture: "helpers" layer sounds like mixing several concepts (Utils, Factories, Mappers, Proxies and etc.). It worth to re-check complete folder and separate concerns from the very beginning.
[foreach](http://php.net/manual/en/control-structures.foreach.php)? if samples is not enough you can while(true) that link )
Have you explored foreach loops?
X-Post referenced from /r/laravel by /u/you_stupid_bastard [First stable version of October CMS officially released!](https://www.reddit.com/r/laravel/comments/4r2tle/first_stable_version_of_october_cms_officially/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Hello, yes I did thanks. As mentioned in the other guy's comment I need to find good exercises :)
That's also an option. It really depends on what your application is doing.
marcio and stas just trollin
Wats dis
&gt; Question: After $strFormat completed validation of input is the input valid or not? In app, yes. In lib not. What if $strFormat was combined with other rule? No, the order is always explicit. I don't understand why you're making a distinction between libs and apps here. A format is a format. It captures specific semantics and formatting of the input. Probably your examples need to be more specific. &gt; What if $strFormat was combined with other rule? I don't see the issue. It doesn't matter what each individual rule says. What matters is what they all add up to. Once a format is configured, you don't need to look into the individual rules in the pipeline anymore, just feed it input. You may need a string at a given point in the pipeline of rules, it doesn't mean you need a string at the end. Your parent "rule" in this case is "andX". In no way does it say "the output will be a string". Case in point, I do have formats combining conversion of a comma separated list of strings from a textarea, and then checking the count of items, and their content. In your case you'd need a specific rule to check the format of items in a comma-separated string, while I can reuse those I have for a list (array). So forbidding transforms only limits the utility of the library, and reusability of the rules.
You thoughts are right but only for apps. Once again. I'm talking not about your app where you have full control over usage of your rules but about the library. The code from library could be used in many ways and generic solution as in your app is hardly possible without significant complexity/performance costs.
- it doesn't make the whole validation thing stateful. Only selected parts and when developer choose. - you can't completely avoid states in validation. Take for example `required` rule. It has a state to store if it was invoked or not.
&gt; No it doesn't. Either you trust your user input not to contain malicious JavaScript code or you don't. False dichotomy. In our case, users can upload HTML, etc. files. But when you go to download them, the Content-Type header is set to text/plain, thus never actually rendering. It's like viewing a file's source on Github. (raw dot githubusercontent etc). SVG is an XML file. Forcing text/plain is an option.
I don't understand how it's better to drag the rules object to the second part of this method, or even worse, pass it to the repo, when all I need is the data. Also is that user rules object composable in more complex rules? The validated data it holds suggest there are gotchas to its reusability
&gt; drag the rules object to the second part of this method, or even worse, pass it to the repo 3 choices in the example. Do you want one more? It wouldn't be a problem to have $input = $this-&gt;validate($rules, $input); Re-usability is fine. Obviously it's not possible to effectively reuse `required` because of its state but all the rest is perfectly reusable.
You're right, that *is* an option. In my own defense though, you're not building an application that supports SVG so at least you'll agree that the point I was making apart from the dichotomy holds. Having said that, the dichotomy isn't as false as it seems: the SVG can still render on your own machine if you let it. If people download SVG files from you, any unsafe SVG files still came from you, and you chose not to sanitize them, fully knowing that they could contain malicious JavaScript code. Of course, rendering malicious SVG on its own is not as bad as having it render in a site where it can hijack sessions, but I don't think that makes it okay to deliberately potentially serve SVG with malicious JavaScript code.
&gt; I gave my thought on nested validation. You ignored them. Can you please link/paste your thought. I'm reading your comments and not sure what you're referring to. &gt; Show me your code and I'm sure I can spot not reusable code. I thought you have specific objections, because you're making specific conclusions. I can give you an example, but I'm not sure what you're looking for (I already gave an example of the basic use pattern above). 
Try using the lib. If you have any questions don't hesitate to ask. Sorry but discussing how good is your code without even ability to see it is not an option.
I'll probably never use it, but I commend them on making a business around their CMS. With themes &amp; plugins, something I plan on doing in a different niche based market.
[removed]
&gt; Sorry but discussing how good is your code without even ability to see it is not an option. It was an option for the rest of your comments, while talking about performance issues and complexity? At the core of my format is this simple interface: interface Format { /** * @param mixed $input * @param Log $log * @return mixed Filtered input. * @throws ActionException */ function apply($input, Log $log); } A format has other methods to configure its options, rules and filters. For example, to define an assoc array with fields you'd do this: $form = f::dict() -&gt;addRequired('name', f::string()); -&gt;addOptional('age', f::int()); And then you use it as demonstrated previously: $input = $form-&gt;apply(['name' =&gt; 'Foo', 'age' =&gt; 123], $log); There's no any inherent complexity to it. It's brutally simple. And it holds no input-specific state. So now I can put this $format inside another format, nest them freely.
Both of these suggestions will be implemented. Thank you.
because if no data for field X you can only understand that when data 'end' reached. And at that point you have to know was that rule invoked or not.
Nah, that's overcomplicating it for no reason. Don't iterate the data, iterate your expected fields, i.e. like this: $output = []; foreach ($fields as list($fieldName, $fieldRequired, $fieldFormat)) { if (key_exists($fieldName, $input)) { $output[$fieldName] = $fieldFormat-&gt;apply($input[$fieldName]); } else { if ($fieldRequired) { $errors[] = ['Required field is missing yadda yadda', ..., ...]; } } }
That's... not how null objects are used. You shouldn't need to check if it's null.
you should check who you're responding to. /u/SaraMG knows what she's talking about.
And what should I say from this tiny piece of trivial code? I'd like to see how can I take your rule let's say for user's name (or whatever) see how it captures the data from simple 1 level deep array (I'm sure no probs with that) and then without any chages chain it with a couple of more rules and place it for 3 level deep array where valid data would be not the field but the array itself. And see how it can handle that. I bet it cant.
&gt; I'd like to see how can I take your rule let's say for user's name (or whatever) see how it captures the data from simple 1 level deep array (I'm sure no probs with that) and then without any chages chain it with a couple of more rules and place it for 3 level deep array where valid data would be not the field but the array itself. And see how it can handle that. I bet it cant. Your language is a bit ambiguous, but it'd look like this: $nameFormat = f::string()-&gt;trim()-&gt;hasLengthRange(1, 64); $chainedFormat = f::pipe($nameFormat, $secondFormat, $thirdFormat); $dictFormat = f::dict() -&gt;addRequired('level1', f::dict() -&gt;addRequired('level2', f::dict() -&gt;addRequired('level3', $chainedFormat) ) );
The fact that you prefer tabs over spaces already points out that A. you are doing it wrong and B. the discussion is still justified.
Will it return data from $dictLevel1 or $chainedFormat? How it can know it without developer? What it would do if it was `OR` operation?
so your approach is to save all intermediate results? are they overwritten if more than one rule works with data?
[removed]
&gt; so your approach is to save all intermediate results? There's no intermediate result. The first format not to fail, wins, the rest are not processed, this satisfies boolean OR logic. If it fails, it has no result, because it failed. See here: https://en.wikipedia.org/wiki/Short-circuit_evaluation
Never went to a vote IIRC. Like a few other RFCs, some things need additional work to find the right groove, and that may mean holding off till 7.2 or later...
unlikely faster. you intensively use arrays (memory allocation) which slows down php significantly. But please let's keep on 'transform while validate' question.
Congratulations on the release!
Just want to thank everyone in this thread for their feedback. I am currently working on implementing Composer for autoloading and managing dependencies. I'm also creating a package for Pixull :). I also fixed direct folder access via the .htaccess file.
Runkit or a similar tool can help with mocking some (but not all) dependencies in legacy.
MIT licensed.
Most of the code in _"/classes/"_ is testable as it is, specially these methods [1] because they don't have any hard dependency, these other methods [2] depend on the connection with the database and in that case I would create a file with a class extending from _"PHPUnit_Framework_TestCase"_ with a function to connect to a droppable database _(one that can be truncated without any risk)_ then create the individual test files for the rest of the code but instead of extending from _"PHPUnit_Framework_TestCase"_ you will want to extend from the class that you created in the first file so you can share the variable that contains the connection to the database. As for the code in the other files, I would use something like [Casper.JS](http://casperjs.org/) or if you want to keep all the tests under the control of PHPUnit _(or whatever tool you are going to use)_ you can leverage utils provided by the _"DOMDocument"_ class to simulate clicks and form submissions in the interface. [1] grep -rn ' function ' classes/ | grep -vE 'PDO|struct' [2] grep -rn ' function .*PDO' classes/
Because I've known Stas a long time. We've had discussions on MANY votes including before formal voting was a thing. I'm not making guesses about his motivations, I'm speaking for someone who's motivations have been stated plainly over many years. You, on the other hand, I don't know from Adam, all I can see is that you are kind of being a dick about not liking how someone else votes.
But why make the preceding backslash unnecessary? The fact you can't use relative names makes `use Foo\Bar` the useless statement, not vice-versa.
straight php. should I be using a framework?
&gt; Is it necessary to write \Exception outside a namespace? It should be. Personally when I was learning about namespaces I found it pretty confusing that the docs constantly use `Exception` and `DateTime` but when you're in a namespace you have to use `\DateTime`. Make it consistent, always use the backslash, then you don't have the problems you're describing.
Sigh. http://php.net/manual/en/migration70.new-features.php
This is the best tl;dr I could make, [original](http://www.sfgate.com/news/article/New-Zealand-town-with-too-many-jobs-is-offering-8337340.php) reduced by 66%. (I'm a bot) ***** &gt; The southern New Zealand town of Kaitangata appears the prime example of the pastoral landscapes the island is known for; it&amp;#039;s lush, hilly, green, and peaceful. &gt; So in response to this peculiar crisis, Cadogan and the town&amp;#039;s bank, lawyers, and community services are launching a recruitment campaign to try and lure candidates to the area with housing and land packages costing only NZ$230,000, or almost $165,000 U.S. - a far cry from the $1 million homes in the Bay Area. &gt; If that&amp;#039;s the sort of thing that sounds like a siren&amp;#039;s song when staring down the soaring Bay Area housing costs, you might want to get in touch with the mayor and the Clutha District Council soon -Cadogan and Dick have already received thousands of inquiries. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/4r4lfw/new_zealand_town_with_too_many_jobs_offering/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.6, ~75209 tl;drs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PMs and comment replies are read by the bot admin, constructive feedback is welcome.") | *Top* *keywords*: **town**^#1 **area**^#2 **two**^#3 **want**^#4 **Cadogan**^#5
Note that this has to work with Reddit's CSS system which is completely static.
No trolling involved. I just voted 'no' because I would like to see a retake on union types before adding more pseudo types to the language.
Ah I've never worked with it before. That must be the reason for the % around images then. 
Phinx - www.phinx.org
My choice https://github.com/thekabal/tki/blob/master/classes/Move.php However you've got a few repeatable flows that make the code hard to test. 2 main issues is using echo everywhere and static methods. If the code use echo how can you capture the output? How can it be separated from output of PhpUnit? The idea of testing is that you can run the code in isolation. Assuming you can give the class/method something that acts like other class (e.g. PDO) you can test the class. And you can mock other classes. It's not always a couple of lines of code but it's possible. Back to the code. If you replace `CalcLevels::energy(...)` with something like `$calcLevels-&gt;energy(...)` and receive it as an input (via method param or class constructor) the code is easily testable. Which btw means you'd better to make `Move::calcFuelScooped` non static for exactly same reason. I'd recommend PhpUnit + Mockery and the test code might look something like $calcLevelMock = Mockery::mock(CalcLevels::class); $calcLevelMock-&gt;shouldReceive('energy')-&gt;once()-&gt;withAnyArgs()-&gt;andReturn(&lt;you choose what you want to get&gt;); // similar mock for Reg // ok mock is ready. time to test $move = new Move(); $result = $move-&gt;calcFuelScooped($calcLevelMock, ..., ..., ..., $tkiregMock); $this-&gt;assertEquals(&lt;put here what you expect&gt;, $result);
If you do use either, pass `ENT_QUOTES` especially if you're in the middle of an HTML attribute so no one can inject `" onload="alert('xss');`
In order for Generics syntax to make sense, we need a good, comprehensive static analyzer. In fact, we need a great many other syntax tweaks at the same time. github.com/etsy/phan is heading there, but it's going to take some committed vision and perseverance to get to a place where Generics are properly useful, rather than some distracting (and arguably dangerous) syntax.
I can agree with your argument that Union Types probably belong in *before* adding meta types, but PHP is all about pragmatism, and I view \Iterable as a pragmatic solution to an actual problem people are facing, so I'm willing to risk the (unlikely) complication of having one extra meta type around when union/intersection types become a thing (if they do).
It's pretty extensively tested, _but_ hasn't seen any significant production use that I know of. I'd welcome any feedback, bugs, etc. :)
Because PHP is loosely typed, and coerces types when using the equality operator, and so you end up with effectively `(int) 11 == (int) "11abc"`. To avoid this, use the identical operator, `===`.
Loose comparison. See this page: http://php.net/manual/en/types.comparisons.php When a string is evaluated in a numeric context, the resulting value and type are determined as follows: The string will be evaluated as a float if it contains any of the characters '.', 'e', or 'E'. Otherwise, it will be evaluated as an integer. The value is given by the initial portion of the string. If the string starts with valid numeric data, this will be the value used. Otherwise, the value will be 0 (zero). Valid numeric data is an optional sign, followed by one or more digits (optionally containing a decimal point), followed by an optional exponent. The exponent is an 'e' or 'E' followed by one or more digits Bonus: If that blows your mind, try following this one! FALSE == 0 == "php" == TRUE Pretty sure that statement evaluates true all the way.
I understand that. And maybe I could have voted yes for it in a future with union types already in place and noticing people really needed `array|Traversable` a lot. But certainly having iterable now won't hurt. As you said, it solves a problem.
It's all working as expected. Just accept it and move one :)
Good catch. I usually test my code religiously, but this is something I'll need to look for more often. However, whenever looking for identical values I always use "===" anyway.
As already mentioned unit tests don't fare well with code that uses static methods and you can use dependency injection to work around this (pass the object that of which its functionality you need as an argument to the method or via the constructor). Given that there's a lot of static calls happening in the code, consider writing integration tests with Behat or Codeception to cover the behaviour or functionality of the system as a whole. When that is done you can more safely refactor the smaller parts knowing you didn't break the actual flow. 
&gt; A page's content model is often incredibly more rich than this. Nested data structures and so on. You can use the [Builder Plugin](http://octobercms.com/plugin/rainlab-builder) to create *any* data structure you want with proper database tables, relationships and forms in just a few minutes. In my opinion this approach is much better than any one-size-fits-all database schema with dynamic fields and what not...
Silly question. function map(callable $fn, iterable $xs): iterable { $ys = []; foreach ($xs as $x) $ys[] = $fn($x); return $ys; } This turns an iterable in an array though, not correct. function map(callable $fn, iterable $xs): iterable { foreach ($xs as $x) yield $fn($x); } If I understand correctly, the only thing this features solves is that I now no longer have to wrap my arrays in an ArrayIterator instance? 
Yes, phps casting logic is bizarre. Try http://php.net/manual/en/function.intval.php This function will properly convert a string to an int, and will return 0 for an invalid case (so you need to explicitly check for 0). 
I certainly did not know or expect this and I'm writing PHP in semi critical systems. How can it be expected from newcomers to know about this stuff? I agree that this can be very dangerous.
I use this when I need something basic: https://gist.github.com/Petah/1443ace6accce4a069d0bd34611ce720 I wouldn't recommend using numbers for migrations though, you should use timestamps so the don't conflict when multiple people are working on the same project.
If you're not using a framework or router then I would use $_SERVER["REQUEST_URI"] and explode the URL on each / then get the last item in the array.... in this case the username Its a pretty simple thing to achieve but it sounds like it could be part of a large scale project so I would look into a framework if doing anything in production 
you design them in a way that them not being valid isn't a problem. e.g. Promote user: ``` if ($user = $users-&gt;findByEmail('foo@example.com') ) { $user-&gt;promote(); } ``` vs ``` $users-&gt;findByEmail('foo@example.com')-&gt;promote(); ``` In the second case you return a null object with an inactive promote method 
Not particular to php, this is a book about refactoring legacy code in general https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052 There are a few chapters about how to get legacy code under tests **before** refactoring. Some methods unfortunately cannot be applied to php (e.g. php core functions cannot be overriden), but still, I found it pretty useful overall.
[removed]
I once tried it. then went back to sublime text. I never tried phpstorm. If your developer was in C# project, then it is more likely that (s)he used Visual studio, instead of visual studio code. 
&gt; It'd be a fairly huge BC break, especially when things like "11 " would fail (trailing space). It's important to note it only occurs with leading numbers, "abc11" coerces to (int) 0. I thought PHP 7.1 emits notices now when you do stuff like: echo 10 + "11foo"; // Echoes 21, also emits notice.
Content isn't just about lists of entities, either. How would you describe the *content tree* within a complex page layout? Something like: header banner(options...) main panelTypeA(options...) Panel content here. subPanel(options...) Content. panelTypeB(options...) Panel content here. panelTypeA(options...) Panel content here. widgetFooBar(options...) Content. panelTypeB(options...) Panel content here. panelTypeC(options...) Panel content here. Basic WYSIWYG is out as that only produces basic static HTML files. Flat CRUD entities are also out, if you value your sanity (imagine that structure above scattered around your database, and having to edit every little bit in it in a separate form). XML can describe such a structure, but now you're forcing your non-technical users to write content in computer markup, where they explicitly have to *mark up their paragraphs of text* and what not. It's not a sane way to manage content.
Using the `===` operator in this case might not be the right choice, if the variable that contains the value `11` is always going to be an integer and the variable that contains the value `"11abc"` is always going to be a string, then the comparison will always return false no matter what the contents of the variables are, which means that such a comparison is pretty much useless in that case. The solution in that case is to simply make sure that you are always comparing apples to apples or in our case strings to strings. $a = 11; $b = "11abc"; $c = (string) $a == (string) $b; // bool(false)
`if (1 == '01')` could happen and will be `true`. But `(int) 1` isn't `(string) '01'` and thus it should be `false`. Thus I started using `===` in all languages that support it. &gt; Why == for numeric comparisons? Well, because (int) 10 is not equal to (float) 10 when you use === And that is absolutely correct. `(int) 10` and `(float) 10` are different. One is an integer and one is a floating point number. Those are not identical. &gt; and depending on how you get those numbers, it's very easy for your int to become a float and vice versa. Sure, you need to check your numbers before comparison. In my opinion this leads to cleaner code.
&gt; To most people 10 is 10. Yes, but most people don't code :) &gt; "Check" how? Quick and dirty: if (!is_int($var)) { throw new Exception(sprintf('Expected integer but got %s.', gettype($var))); } You need - of course - properly handle that exception. &gt; Being pedantic is neat, until the real world breaks through the door and starts walking all over your zen garden of perfection. I know, I know ... leave me alone! :D
&gt; If your code depends on implicit type coercion, you're doing it wrong. I'm sure you've never passed an integer to a function taking a float in PHP...
This was exactly my gut feeling when I read the RFC. Fully agree with you!
You could technically create such a structure in October by creating a layout and placing [Components](http://octobercms.com/docs/cms/components) (PanelTypeA, PanelTypeB) in it. Then link the components up to the database. You are right that this might not be the easiest solution to manage and the layout would be more or less static (It's not easy for the end-user to swap out a panelTypeA with a panelTypeB, except you would implement such a feature yourself).
No, cause I don't write PHP 
I'd want an option to call the non-blocking fooAsync() methods on the AWS client if I were to use this library.
Exactly right, I think he's looking for that ReSharper experience, which I think is more likely to come with using PHPStorm. https://code.visualstudio.com/docs/languages/php Seems to suggest that you can add a lot of extensions. Thanks for the reply
This is a great lab experiment for someone who wants to learn more on this topic. Focus on the code, easy to read and understand and everything is relevant to understanding the topic. I can highly recommend it as a tutorial! Especially if you are new to the topic. But please don't do this in production. Here are the main things I think are wrong with this: 1. No user feedback on submit. When you update something your browser can show you what's happening, with a spinner, loading bar, status bar or whatnot, but not if you use Ajax. Therefore you either need to implement clear status indicators for your Ajax operations or just use a regular form POST. Bonus rant: If you choose to implement a status indicator, you *have to* make sure it fails gracefully. Don't keep spinning after the connection times out or if your JS code throws an exception! 2. You update the entire table on each reload (`readRecords()`). If you are going to update everything, why use Ajax? Just updating the relevant rows can be an exercise for the reader! 3. Try to avoid sending HTML over Ajax. Always send JSON instead. "*Why?*", you might ask. The reason is that you can do so much more with your data on the client side later on if you send it as an object. Your API (PHP code) will be reusable. So move most of the logic in `read.php` from PHP into JS.
Is there a reason you decided to use jQuery here and not Vanilla JS or a modern Javascript framework such as Angular or React? Just interested in your thinking behind this decision
What do you think I'm doing it for? ;) https://github.com/neomerx/json-api
[removed]
I went from Eclipse to PHPStorm a few years ago, never looked back. If someone else is paying (the company) I don't think I'd consider anything else right now.
Here is a tutorial for you to read: [Your first database wrapper's childhood diseases](https://phpdelusions.net/pdo/common_mistakes). Although good attempt in general, but your PDO code suffer from two major problems - improper error reporting and multiple connections. In its current form your code will create as many database connections as may CRUD classes will be in your code. And in an average application there are *hundreds*. Besides, *charset* should be always set. So its better to get rid of `DB()` function, create a vanilla PDO instance and then pass it as a constructor variable in each CRUD class. So change db_connection.php as this &lt;?php // DATABASE connection script // database Connection variables define('HOST', 'localhost'); // Database host name ex. localhost define('USER', 'root'); // Database user. ex. root ( if your on local server) define('PASSWORD', ''); // Database user password (if password is not set for user then keep it empty ) define('DATABASE', 'itech_crud'); // Database Database name define('CHARSET', 'utf8'); // Database Database name $opt = [ PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC, PDO::ATTR_EMULATE_PREPARES =&gt; false, ]; $db = new PDO('mysql:host='.HOST.';dbname='.DATABASE.';charset='.CHARSET, USER, PASSWORD); set_error_handler("myErrorHandler"); function myErrorHandler($errno, $errstr, $errfile, $errline) { error_log("[$errno] $errstr in $errfile:$errline"); header('HTTP/1.1 500 Internal Server Error', TRUE, 500); header('Content-Type: application/json'); echo json_encode(["error" =&gt; 'Server error']); exit; } then change your constructor as this class CRUD { protected $db; function __construct($db) { $this-&gt;db = $db; } and then call your CRUD class like this $object = new CRUD($db); Also, your PDO code is a bit too verbose. For example, Update could be written in just two lines public function Update($first_name, $last_name, $email, $user_id) { $sql = "UPDATE users SET first_name = ?, last_name = ?, email = ? WHERE id = ?"; $this-&gt;db-&gt;prepare($sql)-&gt;execute(func_get_args()); }
&gt;who knows what else? [Here is what else..](https://www.reddit.com/r/PHP/comments/41bm7j/new_rfc_allow_specifying_keys_in_list/cz1qnca). Look for comments by /u/betterphpguy and /u/phpdevster for extra dumbness....
Why? You had nearly all of the development world telling you that php is utter shit. Why did you still choose to write it in Php?
It would be cool if we have type aliases after union types. Something like in TypeScript.
It is something specific to this language and all languages have something which can take you by surprise if you don't use them to often. &amp;nbsp; Looking at your old comments I see that you like javascript. Let's play with some javascript, shall we ? &gt; "3" == 3 true &gt; [] + [] '' &gt; [] + {} [object Object] &gt; {} + [] 0 &gt; Array(10).join("Super" - 1) + " man!" 'NaNNaNNaNNaNNaNNaNNaNNaNNaN man!' &gt; [{} + {}] [ '[object Object][object Object]' ] &gt; typeof NaN 'number' &gt; NaN instanceof Number false &gt; NaN === NaN false And any language has some gotchas. The difference is in how many they are and how fast you can learn them.
It's not a bug, no matter how hard you try to push it as one. It is logical behaviour which was chosen for a reason, if you can't learn to live with that I'm afraid that the problem lies with you, not with PHP.
I used PHP to create a desktop note-writing program which is available for free download at my website www.kylla.info . It is designed to run with the built-in PHP web server, on windows, macintosh and linux. It uses any web browser, but it runs locally, so it's a desktop app in that sense. I see there is a lot of controversy among bright minds here, but I'm content with what I got. 
How do I find a particular object from XML and add child to it? i.e. Parent tag with multiple child tags inside. Now I want to find a particular child tag and add a child tag to it? using query returns DOMObject and I can't add child to it. Is there any workout? 
I tried VS code then discovered Atom. 10/10 will never go back to VS code.
How can `iterable` be implemented? Are you mixing it up with the `Iterable` interface?
because you never know when you want for 11 to be equal to "11abc". I'm sorry I don't see the logic here! and didn't see this behaviour in any other loose type programming languages, if it's not a bug, it's a fault in logic no matter how hard you try to push it as a legit decision.
So why are you here, giving advice? 
This is not a bug. Type coercion is not a global standard and every language does it differently. 
What is the point in PHP being loose type then ? I mean, if it's never ok to compare just by it's value but also by it's type it kinda makes this feature obsolete doesn't it ? It just adds more overhead in the debugging process because it won't die if you assign the wrong value.
And you should try to agree also with other points, which are pretty important.
Why the downvotes? What is the problem with my suggestion? I'd really like to know. . . 
Great read! Definitely recommend. In addition I highly recommend [Modernizing Legacy Applications In PHP](https://leanpub.com/mlaphp) I used this book to great effect to modernize a monster of a legacy code base. Highly recommended. 
Honestly? I'd start refactoring things in small bits. Don't try to refactor to perform code from the start, you don't need to try and inject an ORM when it's too hard at the moment, but splitting things out and introducing some structure here and there, while making things easier to test, should be helpful. For example, if you've got something like function doSomethingToUser($userId) { //Stuff $user = mysql_query("SQL STUFFS!"); //More stuffs } You've got a good opportunity to move the `$user = mysql_query("SQL");` in to it's own function. Literally just a function that still uses `mysql_query`, but now the SQL is in a different function, and it just returns a class or an array. Now, in tests you can mock that. And maybe search for similar code. You can then later change how that function fetches the user, as you can test that function separately as well. We had some code that looked something like this function buildTableOrSomething($model) { extract($model); //Bunch of random checks //HTML Building Stuff in a loop here //Some conditions to change path here //Return HTML } The first thing we did was find remove the `extract` and see what errors were being thrown. What variables were undeclared? Then we declared them manually. We then search for any usage of `$model['someKey']`, and removed that. We, again, declared them manually. It ended up with some twenty lines of `$variable = (isset($model['variable']) ? $model['variable'] : null);`, and it was ugly. But it meant that `$model` (something that we didn't know what it contained), was no longer used anywhere. We then extracted `//HTML Building Stuff in a loop here` to it's own function, and passed in all the variables it used as parameters (Thank you to PHPStorm's extract to method functionality). It meant we had a signature that was something like 15 parameters long, but each of those parameters were defined. They had names. They were used. You could track where they were and you would be able to mock them for testing. We found that the loop contained `if`s that we could extract in to their own methods, and some variables could be gotten from others, some weren't even needed any more and could be taken out. Managed to remove about 3 or 4 parameters from the signature. Was the function as clean as if it had been written from scratch? No. But because we didn't rewrite it, we knew that it wouldn't break anything from the changes. And now, we could easily write unit tests for the function that we extracted. Not just that, but now we knew how it worked, and we knew what variables it used. We could now mock our own `$model`, since we knew hat it had to contain. So yeah. Start with small refactoring. Don't look to make it perfect, just more understandable. Hell, sometimes my first pass doesn't even change any code, it just adds comments. The idea isn't to make something *great*, or even *good*, just understandable and better. Once you get started, and once you've done a few passes over it, you start to see new possibilities.
On the one hand, you linked to the spanish version of the page while we are in an english subreddit. On the other hand, you say that PHPs casting logic is bizarre, and then link to a casting function. You don't explain anything about your assessment, you simply link to something seemingly unrelated. ^((Just fyi, I didn't downvote you, but those are the reasons why some people might do it)^)
I was checking out pmjone's [ADR example](https://github.com/pmjones/adr/tree/master/example-code), I just can't get behind the payload stuff (just seems like a lot of extra work out of the box). Is ADR a better (um, more mature) alternative than MVC? I've only recently started seeing discussion about people using things that aren't based around MVC.
&gt; trim() would be the logical way to solve the issue if user inputs "11 ", not workarounds like this. And what exactly would be the benefit of that happening? Why would it be better to force me to use A LOT more validation than just having this happen? Since I would not just have to trim, I'd also have to ensure that only numerals are used and the like. &gt; I don't get it why nobody sees this as something faulty that could cause more harm than good and change it in future versions of PHP. Backwards compatibility shouldn't be a issue if this goes in PHP 7 for example where some changes that broke backwards compatibility were already implemented. The thing is that you have completely failed to show why this behaviour is less desirable than e. g. the behaviour that Javascript displays. Why don't you create an RFC for this to be changed? It seems like you are pretty damn sure that this is some kind of extreme mistake and must absolutely be fixed, so this should be easy to do - since it's such a big mistake it should even be worth the backwards-incompatability. But, chances are that there is actually no functional reason for this to be changed and that there's no reason for you to either be annoyed by this nor be this pedantic. And if there is, I'm gladly waiting for the RFC to "fix" this.
[removed]
I already integrated with composer, and blocked indexes via htaccess. I don't agree with his comment about front-end assets. Why force someone to learn a template engine when they can just use php? I mean it started as a templating language.
The question is: why would you receive a string, when you actually expect a integer? If this is a real problem, then try to check for the correct type via `is_int();` or any other type check is_numeric/float/string/array/object etc. .. Of course there are exceptions where this struggle will occur, then you really have to choose if you want to do complex checks or just use strict comparing via `===`. Or try finding a solution that you will always receive a expected typ.
What you said about conversion is correct correct but PHP does *have* NAN for other purposes. php &gt; var_dump(acos(2)); float(NAN) 
There are inherent bottlenecks and inefficiencies in such bridges, I focus more on creating APIs that are language neutral (through simple transports like JSON over TCP etc.) and can be consumed from other languages, by organizing my app into microservices. I think it's more robust, more efficient, and... you can use any language (not just PHP-Java)
Yes I agree, but I think the goal of this library is not about providing an alternative way for communicating between process or techs. Microservices, REST... do the job when there's a contract between how they can exchange data. They particularly rocks for that. The bridge idea here does is not about replacing microservices, rest api's... It just give the ability to code in Java from PHP and by that offer the possibility to use 'programatically' libraries that exists only in the java ecosystem or shows better performance that pure php alternatives. Imagine you have to produce an excel file and start using PHPExcel for generating it. Try with thousands of rows and hundreds of columns and you'll probably end up with a memory_limit exhaustion or max_execution_time. Rewrite your code in PHP/java with Apache POI for example. The time gained will largely make the bridge overhead insignificant. I've also used jasper reports to generate product catalogs (hundreds of complex pages with images) in less than few seconds. I don't think there's an existing alternative in pure-PHP. The second use case could be when you don't have any other alternative than using a java library (I've used in the past moonrug to synhronize with exchange MAPI directly from PHP - EWS didn't exists at that time). The java ecosystem provides some java-only libs (android, closure-compiler, usb, scientific libs,...) that are possible to use directly from PHP (just like they were standard php extensions). Of course whenever they offer a cli mode, it's probably better to call it directly through an exec() or similar. The good part is by using the library, you have complete control over it. The dark side is that you have to write your code in the PHP/Java strange language :) To be clear, I don't mean the soluble/japha project is interesting for most programming problems, it just covers some edges cases and maybe provide an embryon for new ideas ;) But thank for your comment, I just wanted to try to be more clear about what is it exactly. 
Honorary mention: Adobe, which instead of hashing passwords, encrypted them with Triple-DES in ECB mode. Remember everyone, [you do not **encrypt** passwords](https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded).
This looks like it's over-engineered. Each of the invocations of HMAC-SHA256 wrapped around Halite's symmetric-key authenticated encryption seems unnecessary. What attacks are you trying to defend against?
Wow this looks interesting. As much as I dont like java, this could be really usefull for some of these nice java libraries!
 Also note that I'm really aware of the XML-network protocol overhead... Every calls to java methods are synchronously send back and forth from the java bridge server and the PHP runtime. In pratice we talk more about few milliseconds for few hundreds of method calls. Not very different from writing a text file. But still performance problem occurs mainly with long iterable lists, take a look at the [jdbc example](https://github.com/belgattitude/soluble-japha#10-jdbc-example). When dealing with thousands of rows, performance problem becomes significant mostly due to the huge number of ping/pong requests. I wouldn't recommenced to use the java bridge in this kind of scenario (still you can reduce the ping/pong requests by first storing in LinkedList and then get it in one method call, replacing thousands of small requests by a bigger one - I'll try to document performance recipes soon). For a future implementation, I'm looking at the [grpc](http://www.grpc.io/) project, but I still need to figure out how to manage dynamic contracts (means how to provide a contract based on the library classes - not totally clear on that currently). That's the reason I've created an Adapter to be able to change later by just setting another driver (instead of default phpJavaBridge). But now i only exists in my mind ;) More generally, I'll try to publish some uses cases (like a jasper report library) to get a real world example. soluble-japha is more an engine that something actually usable. Hope it helps to make it more clear.
1. It means your wrapper/logger code can catch and handle a broader class of problems 2. It means you'll have a stack trace rather than just the final cryptic line 
Completely agree on so much you've said! I am working on the echo output. We use Smarty (for now), and the intent is to move all output to using Smarty over time. It is a very tedious process, with lots of manual testing to ensure I've gotten it right. Thankfully, the classes are in better shape than the rest of the code in general so far in that regard. I don't entirely follow "receive it as an input (via method param or class constructor)". Could you explain further what you mean? The example code is great!! I'll be working on implementing it soon. I've just added phpunit &amp; travis-ci to the tools suite for the project. I'll take a look at Mockery also. Many thanks for this!!
I honestly wouldn't have thought of splitting out the SQL calls as you describe, except for the (very limited) work I did on Gateway calls for News and Players. Expanding that concept out .. helps, quite a bit mentally. As for going small with refactoring, I've followed that advice all along. It has been a slog, but its keeping the code base near to release-ready all through the process. Getting everything into classes, killing off (most) globals, and getting auto-loading were all key successes, but now it is time for the next hill - testing and refactoring and replacing stinky code with better solutions. :) Thank you very much for this guidance, it will definitely expand my efforts!
Same. Came back to sublime
I started using it for typescript support. I use it everyday now for PHP, and general dev. Mostly because Netbeans doesn't run nice on my Mac. I use Netbeans on PC.
jQuery is just a DOM handler yes, so is Angualr. Angualr can also be a full framework if you want. jQuery was amazing in its day (5 to 10 years ago) it served a very good purpose, that purpose is no longer needed and modern frameworks fill the need of modern day web development as we move into application centric web, something jQery can simply not do with ease and was never designed to do
Agreed. I particularly like how HackLang distinguishes `type` from `newtype`, where the latter is opaque everywhere but the file it's defined in. Keeps encapsulation nice and tight. https://docs.hhvm.com/hack/type-aliases/introduction
I'm just saying your example uses userland code which could or could not use exceptions independent of the php version used...
&gt; Where encryption doesn't provide integrity, I was hopeful to create an integrity-check with the hmac to prevent situations where decryption could have an unintended consequence. That's a good idea, but [only authenticated encryption is available through Halite](https://github.com/paragonie/halite/blob/master/doc/Primitives.md).
It still is amazing. Not every app needs Angular or React, and there is a price to pay for using them.
Very cool concept
Sorry yeah I meant to put `Iterator`. What I mean though is that column doesn't make sense, because `Iterator` extends `Traversable`.
Sorry for being daft! Did you mean to write, that I should use an authenticated encryption that Halite provides? Thanks!
Welcome to PHP. :) Further reading: https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/
I thought the purpose was to learn. Best practices are best practices for a reason. 
&gt; This seems to be a pretty clear mishandling of consumer data and they should be sued. Sure, under which law?
&gt; (even though i feel like the EU should have such laws to protect the consumer data) It does, it has a very good one, [Directive 2002/58/EC](http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=CELEX:32002L0058:en:HTML), but you might note it doesn't stipulate passwords are private data. (in fact it doesn't mention passwords at all). You, by giving Adobe your data, elected them to process the data as they saw fit. They didn't sell this data, nore did they aim to get hacked, so on their part they did everything that 2002/58/EC asked them to do. Do note, that I'm arguing devils advocate there, and while I'd like to see more serious punishments for ineffective password storage, efforts should also be aimed at arming people with password managers so they do not employ password re-usage.
It's a tort you sue for damages, not laws broken.
&gt; ERRMODE_EXCEPTION Sound really great, the reason I was using DB() function is just to provide global scope, and yes provided good way to handle errors I am going to use and update the tutorial accordingly.
You can still use DB() function, but you should make connection *static*: function DB() { static $instance; if ($instance === null) { $opt = array( PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC, PDO::ATTR_EMULATE_PREPARES =&gt; FALSE, ); $dsn = 'mysql:host='.HOST.';dbname='.DATABASE.';charset='.CHARSET; $instance = new PDO($dsn, USER, PASSWORD, $opt); } return $instance; } here you will connect only **once**, no matter how many times this function is called.
`Crypto::encrypt()` is authenticated encryption. There's no need to add a MAC afterwards. I mean, it doesn't hurt? But it's not necessary.
[removed]
I'm thinking about that, but did not found a proper way how to do it, because for every next request to AWS you need a uploadSequenceToken https://github.com/maxbanton/cwh/blob/master/src/Handler/CloudWatch.php#L73
You can override core functions. Check for example https://github.com/php-mock/php-mock
[removed]
Is there a sane way to wait for a page to load inside Behat tests? Selenium added the capability to wait for pages to load a little while ago, but I can't figure out how to actually call that from Behat/Mink. 
&gt; As much as I dont like java But PHP looks more and more like Java (Annotations, type safety, ...). And the language is getting similar libs to those used in Java (Doctrine 2 vs Hibernate/JPA). There is not so much you can like or dislike.
I'm gonna have to disagree with ya there. AngularJS is an MVW Framework, always have been always will be. The learning curve is quite present for those frameworks. You cant just use them as dom handler without including the WHOLE MVW Framework, parts you dont really need. On the other hand jQuery can be used in combination with almost any MVW Framework to ease the dom handling. jQuery is slim and does one thing and imo it does it pretty well and has proven itself over the years.
&gt; shitty security decisions So today we suggest people use bcrypt. What happens if, in 5 years time, someone finds a way to do less work on computing a bcrypt hash than the defender by a large amount (for giggles, lets say the attacker needs to spend 70% less time on a hash than the defender). Suddenly bcrypt is no longer a good choice, but now you're saying that there's going to be a large amount of people who are now afoul of the law? I suspect the decisions were OK at the time they were made. I suspect that the idea of using md5 or sha1 for passwords on some sites were done waaaaaaay back in the day. (LinkedIn, for example, was started in 2002, jBCrypt wasn't released until 2006, so if you wanted to implement bcrypt before then you'd had to have done it yourself...) Do we find everyone who has ever implemented AES 128 afoul of the law when quantum computers roll around and reduce the secuirty of AES 128 to 64? This is why it's difficult to legislate people to always use the best, especially in fields where what's considered the best is a moving target.
And `Traversable` is `iterable` so all is good?
 function map(callable $fn, iterable $xs) { foreach ($xs as $i =&gt; $val) { yield $i =&gt; $fn($val); } }
The sort of procedural spaghetti that allows people to turn their noses up at PHP... If you're targeting beginners, you should probably be recommending they take the secure route as the default rather than some afterthought for them to figure out themselves. PHP 5.5, which supports password_hash, is the lowest version currently supported, and that's the bare minimum that new material should be written to.
Another unsafe, outdated snippet from someone who doesn't know better. Nothing to see here. 
https://github.com/sebastianbergmann/de-legacy-fy A tool to build characterization tests (as described in that book)
I switch to vs code last week, and it's amazing. I was using sublime, but now I can never go back. Its so much more than just an editor. The auto complete for functions is really nice, and debugging actually works once its setup. Here's some highlighted features offered for php. It also works really great for Go. https://code.visualstudio.com/Docs/languages/php
Who is the target audience? It uses a really non scalable approach. 
No. Most of us pull components from Symfony, or use Laravel most of the time. WordPress is a good CMD (they certainly got the UX Right), and there is no shame in seeing how WordPress got it done. But draw a line there. 
First off, watch out for the 'privacy paywall' on this site. The logic looks ok (give that I've checked it on mobile), but the quality of the code is very lacking. I can wholeheartedly recommend to new programmers that, should you look for a pagination system, you can have a look at this code, decipher the logic and understand how it works and then **write it yourself**. I'm not saying that the quality will improve, but your global understanding will be significantly better and you'll be able to know exactly what went wrong should that happen. For OP / author, please check the hard links in your code, aa they should not be there for a tutorial.
From a marketing perspective, *why* should I use this framework. There are no immediate code samples or "sales pitches" about why your framework is something I should try. What does *backend framework* mean? What does it do well? etc. I know we're programmers first, but if you're going to build a product, you have to be a marketer too.
I've used to develop on windows. Few things: - yes, windows is harder to use - virtualization is the way to go (easiest way is virtualbox+vagrant+puphpet) - personally I use docker, but on windows it's more complicated to use and not worth it in simple use cases - for development maybe you could use php integrated web server?
Why not store a task in a queue, then have a non www-root execute either mysql directly, or a script to run the exec part?
Maybe try docker?
No worries worth a try! 
Windows is an absolute dog to develop on, you have to constantly jump through hoops to get even some of the basics to work. Would you consider using Linux maybe in a virtualbox? Its much easier to get going with and most distros have a LMAP stack out of the box or at least a HTTP server
like rq60?
I prefer using XAMPP... just make sure skype is off and if its a windows server you need to turn IIS off but idk if that will break your stuff or not.
It's good to know there are all these alternatives. I feel like a fool for insisting on WAMP for so damn long. I guess it's because that's what the work place asked me to use and it has been the default for a while now around me. Got XAMP working on the first try and now I have this list of alternatives. Thanks!
I am honestly considering moving to Linux, fortunately I did get XAMPP to work immediately, but if every little thing I install I need to go through this hell, it may be just more worth it. I am also keeping note of all the suggestions here in case things go sour again.
Did it, worked immediately :) NEVER TOUCHING WAMP EVER AGAIN!
I guess I used some poor wording. The problem was indeed Apache. Still don't know why it never worked, but now that I got Xampp working, don't really care anymore. I'm pretty sure I do have PHP in the path, it's been a while I should probably double check.
Now I do too. XAMPP worked immediately. It's odd because I remember about a year or so ago spending hours and hours trying to make it work, similarly to me with WAMP today. But, whatever, it works now and I will probably remain loyal to it until it stops :P
This account has 8 years of history. Far from anonymous as far as Reddit goes. 
OP can't even manage to install a working LAMP dev environment. Docker is above his pay level. 
Thanks for the heads up I've replaced the link to a screenshot
&gt;Anyway, I have pretty much given up Never have this mindset as a programmer. Relax, take a deep breath, work on something else for awhile. Walk through video tutorials. If one doesn't work, go to the next. :)
Mh? I really don't get your point. We have SQL files for each version with the changes. In our setup, everything that's possible with Phinx, is possible, too. With just plain SQL. I really don't think it makes sense to use PHP for database migrations - native SQL is the language to go with.
Ten years developing in php and I didn't know that built in php server existed.
Does this work on Windows?
Why did you choose admin.com? You know people could potentially own that and get password reset notifications. I suggest using example.com because it is not actually a domain and can't be. Checkout RFC 2606
It's been included as of version 5.4 (released in 2012), so it's a relatively new feature.
I think so. There are [Windows binaries of php](http://windows.php.net/download/), so I assume if you install them it would work from the command line, same as in Linux or OSX.
Hi /r/PHP, I had some free time over the weekend and wanted to spend some time playing around with C, [Argon2](https://github.com/P-H-C/phc-winner-argon2), and PHP extensions and decided to make a PHP7 extension for working with Argon2 hashes. This was mostly a fun little weekend project to brush up on making PHP extensions, but thought I'd share it here in case anyone else would be interested in it. If you'd like to play around with Argon2 but don't want to install all of [libsodium](https://github.com/jedisct1/libsodium-php) (though I highly recommend it for all of your security needs) then this is the extension for you. Code is PHP7+ _only_ (strictly out of laziness). The resources below provide direct links to the repository, as well as a compiled PHP module (.so) you can use. I'm mostly just sharing this here for fun, but I'm completely open to any comments, suggestions, or questions anyone might have. Thanks! -------- Resources: - [Github Repository](https://github.com/charlesportwoodii/php-argon2-ext) - [Compiled Module](https://github.com/charlesportwoodii/php-argon2-ext/releases)
- can you execute it outside of mounted dir? I mean something like `cp packages.json /tmp/ &amp;&amp; (cd /tmp &amp;&amp; npm install) &amp;&amp; mv /tmp/node_modules ./`. I used to do that on docker, fixed chown errors - or maybe you could just symlink node_modules to /tmp/whatever - this looks related: https://harvsworld.com/2015/how-to-fix-npm-install-errors-on-vagrant-on-windows-because-the-paths-are-too-long/ - or maybe you could use npm related stuff from windows, if it's only for building stuff?
Really cool man. Why dont you write sth about how to make a php extension or how do you start that one? I'd read it. Anyway, nice work
Yes
How about a [Video](https://www.git-scm.com/video/quick-wins) - "Git Quick Wins". 
It's a simple worker written in PHP for rabbitmq with deployment by docker and ansible. In the future, it will be updated to become a worker for all type of queues: redis, kafka, rabbitmq, activemq ...
I've been there, and I thought long and hard before switching to linux. Now most of the PCs in my life are linux, and everything works better than ever. My kids still play Minecraft, Steam works, VMs work Wine works (jk, wine sucks). Best of all no GWX. There are pre packaged LAMP installers but if you do it manually and pay attention it is the perfect crash course for linux.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You are missing boilerplate for PHP 7 TSRM stuff. Generate a skeleton extension. * Look at config.m4 (```-DZEND_ENABLE_STATIC_TSRMLS_CACHE=1```) * Look in C source RINIT (```#ifdef ZTS```) * Look at ```#ifdef COMPILE_DL_$$``` block, near end of file (```#ifdef ZTS```) It is not a good idea to put all the headers in the ```php_argon2.h``` header, if this header were installed (so that other extensions may use some functionality) including it may break the build of other extensions. All of the includes in header should be in C source file. We don't use docblocks for C :) * https://github.com/charlesportwoodii/php-argon2-ext/blob/master/argon2.c#L114 and the line below it may leak memory. * https://github.com/charlesportwoodii/php-argon2-ext/blob/master/argon2.c#L194 may leak memory. * https://github.com/charlesportwoodii/php-argon2-ext/blob/master/argon2.c#L180 doesn't seem right, I'm not familiar with password hashing stuff, but that memory was malloc'd, and then efree'd. I dunno anything about argon, so can't check it for correctness.
You have like… a couple of days. You can do it ;)
If you are on Windows 10 switch to insider builds and use bash which is built into Windows redstone. Rsync etc all works natively. 
Quit if you're an employee or fire him if he's a client. The product will be a shit, you will be stressed, the product owner will get all the praise, you will be forced to work your nuts off and eventually it will crumble leaving you with nothing. There is no changing some people. Let technological evolution take its course and let his business or project die. There will be one less clueless "technology entrepreneur" in the ether wasting development resources. If you think his idea is good there's nothing stopping you taking it and turning it into something brilliant yourself and reaping the rewards. Don't be tempted to take any code from the existing codebase though. That is stealing and there is a special place in hell for people who do that. TLDR: Quit.
1. JS has the exact same issues. So much so that the most common linting rules flag use of the `==` operator in JS as an *actual error*, and Coffeescript outright removed it. JS has *different* rules for how it weirdly coerces variables, and is prone to a different set of gotchas, but it's the same problem. I suspect you don't know either JS or PHP as well as you imagine. 2. The issue isn't the language, it's the design of your program such that you are naively trying to compare integers and strings. You need to have a much clearer idea of how data types are flowing through your program. In a well designed program you should know that you're getting a string (from user input or an API or whatever), and compare it with the identity operator to another string, *or* you should know that you're getting an integer, and compare it with the identity operator to an integer. And in the unlikely case you don't know which one you're getting, you should check and explicitly convert it at the moment you get the value.
The point of a loosely typed (or weakly typed) language like PHP is that PHP will *implicitly* do a conversion. In a strongly typed language you would have to *explicitly* do a conversion. Both are acceptable choices, but the weakly typed one saves you a few keystrokes. But in *both* cases the conversion will happen, and you damn well better know what values you have, what you're converting them into, and what rules your language follows when doing them. &gt; What is the point in PHP being loose type then ? The point is that you can type `11 == '11abc'` instead of `11 == (int) '11abc'`. That's a savings of 6 keystrokes! It is *not* that the language will somehow magically read your mind and figure out that you were trying to do something *other* than cast the string '11abcd' into an integer using standard PHP type conversion rules. If you don't want to cast your string to an int, *don't cast it to an int*.
The behaviour in question is that PHP implicitly casts values when you use the equality operator. &gt; didn't see this behaviour in any other loose type programming languages Every loosely typed language has this behaviour. It's literally what being loosely typed *means*. Your *problem* is that you had no clue what PHP's rules on casting strings to integers are. If you make dumb assumptions, you're going to have a bad time in every language. (And if you think PHP has odd rules, wait till you see *Javascripts*!)
I love the null coalesce operator `$data['something'] ?? $_POST['something'] ?? null;` is so clean
its certainly an improvement over what we've had in php 5
I think so but mainly because they have been around longer and are common place. I think as the null coalesce becomes more mainstream its one of those things you will get used to. It's less characters to type after all ;)
By the way, I've got a question regarding your other article on SQL injection. I've got an array of ids and what to run a query using `IN()` operator, but your example doesn't work for me.
&gt; so can't check it for correctness. They are calling the official reference library and appear to be making that one call correctly - I think any issues here are things you've already found above. 
Its because you're setting $_GET['language'] to a string. From the PHP docs: "The coalesce, or ??, operator is added, which returns the result of its first operand if it exists and is not NULL, or else its second operand" So in your example it passes the first test because the operand exists and its not NULL, its an empty string.
Can you expand on this? Do you have a full code example of what you're trying to do? Feel free to reply to the post with your example and I will try and help you out.
It's because your example is wrong. If you are stating in your article that your null coalesce example "is also the **equivalent** to using an if/else block" below, then both should produce the **equivalent** result. 
Some here are saying "don't try to educate him, just quit". Now... that's a bad advice, isn't it? If you are ready to quit, you have *nothing to lose* by trying to educate him. If you care at all about the people in this company, the projects, the job, at least try, before you give up. Having nothing to lose is a powerful position. Leverage it.
You say that this, $language = $_GET['language'] ?? 'English'; is equivalent to this, $language= isset($_GET['language']) ? $_GET['language'] : 'English'; and then you say that both are equivalent to this if ( empty($_GET['language']) ) { $language = 'English'; } else{ $language = $_GET['language']; } How is that even possible? `isset` and `empty` are two very different things. If a variable doesn't exist or its value is `null`, then `isset` with return `false`. But, if you pass an empty string to `isset` or a 0, it will return `true` while `empty` will return `false`. As far as I understand from the [PHP manual](http://php.net/manual/en/language.operators.comparison.php), the `??` operator simply checks if a variable is `null` or doesn't exist, it doesn't check if it is empty.
I'm guessing your target audience is people who have no access to php.net?
You can't bind arrays, only scalars.
Yup, he should've written "if (!isset(...))" and not "if (empty(...))"
I'd strongly recommend using https://puphpet.com/ to get a working environment. Not only is developing code to run inside a VM far more sane that trying to get it working in a local environment, it's also far more likely to work.
Well, it's easy to install. But then, there are a few minor things you have to overcome: - for mounting you have to change directory paths to linux-like (cygwin style) - you can't mount directories outside your users' dir out of the box, you have to manually mount them to docker-machine. Last time I've checked there was no error either, just empty dir. - to have more than one docker reachable with port 80 you have to use proxy; overall networking can be confusing at first, since you can't just connect directly to container - to switch to winnfsd you'd have to manually set it up I just don't think it's worth it if someone wants to just learn php and Linux. Docker is great when you also use it for production, or when you require multiple containers, or when you want to be able to recreate containers often. But I wouldn't advise it to everyone just yet. Maybe when docker for windows will be finished. Don't get me wrong, I use it personally. But I don't think it's "one size fits all" thing. 
If you convert any match to a string containing "%" to a LIKE, this is exploitable, as the user can give you % in their input at any time. How about if I pass "%%" and "%%" for my login user/pass? When you create libraries for building SQL you should be very strict about the security context of the features you implement.
To be honest, it was a bit of trolling, and thus no direct explanation was expected, but thanks anyway :)
Don't worry, there is no such thing as "converting equals into a like based on the presence of a %". Have a look at my example again, what I'm doing is to remove a part of the SQL query automatically if a parameter is not passed by the developer. The perpared statement accepts 2 parameters: ":name" and ":country". If those parameters are not passed, the whole condition will be removed by MagicQuery. This is very useful when you display a datagrid and want to apply filters (that may or may not be filled by the user). Of course, you would definitely not use MagicQuery in a login form! Both user and password are needed. MagicQuery is meant to be used for optional parameters. 
yes correct, you got it in one.
Thanks for the great information! I'll take a look at these things. The skeleton was giving me a bunch of trouble (especially getting it to link `libargon.a` correctly) so I was mostly using it was reference. Looks like I missed a lot - that and my C is rusty. I appreciate you taking a look! = )
This post remember me my search for rendering pdf with PHP. I looked at http://www.fpdf.org/ i ruled it out because it need you to take care of position, line breaking etc... and will need many work to do something beautiful. DomPdf was too slow (extremely). OpenOffice + jodconverter a template of odf file need to be edited with openoffice and it was easy to make mistakes and the diagnosis of those errors were hard. The other problem is that openoffice can render one pdf at a time VM/container will have been needed to resolve this issue. But the pdf were pretty and fast to render, so we run this solution for a while. At last we found wkhtmltopdf it solve all above problems but add a need one, it segfault depending on the data you feed it with. PS: i don't remember because in-browser print-to-pdf has been ruled out.
&gt; do you know why you need the extra (typeof window.jQuery == "function") check? Nope, not really. Doesn't seem to be needed, does it?
I suppose he feels in the dark on what's happening, tho he's paying me hourly. I understand his emotions. I want to ease his mind and show him what I'm doing. This will help him sleep, and show more appreciation towards the dev team.
Upvote for being the first that provides a resource! Might already be a bit to detailed tho. "What is version control" would probably have to preface this. However it is very clearly communicated. I will keep it. Thanks!
PHP extensions will be implemented to C# as well .. a majority of them is already provided within Phalanger project, the rest will be implemented in future.
https://headwayapp.co/
spot on. going to remember this for daily usage on this /r/. and these type of 'blogs' are getting more common also, its just a near copy-paste. i dont know what it is that drives people to write this shit, or even post it in here i mean ATLEAST talk about why it was introduced, why it complements the ternary operator, and thus, the difference.. guess that says enough about the authors i guess. 
If you want manage your PHAR tools for developing, such as PHPUnit, with composer in your project please take a look at "tooly". https://github.com/tommy-muehle/tooly-composer-script
I use both Windows and OS X, and I find that the Windows GUI is vastly superior to OS X (my biggest beef is that the GUI allows applications to steal focus). Moving from Windows to OS X isn't a trivial, especially for an experienced user. It's kind of like going from the US to the UK: yeah, at first glance things appear to be pretty much the same, and they (supposedly) speak the same language there, but the more time you spend in England, the more you realize that things really are different. Be prepared for lots of little frustrations. OS X's one saving grace is the superb iTerm2. That and only that keeps me on the platform. Having said that, I would strongly suggest going with a VM on whatever platform you choose. The suggestion of Virtual Box + Vagrant + puphpet was dead on (ttrakos said it). If things go really wrong, you can simply rebuild the machine, which takes perhaps five minutes. You get all of the control of a system admin and puphpet smooths out the arcane stuff. Add to that that you can distribute the VM along with your project code. Even if you're working alone, committing the VM to a repository means that if your workstation blows up, you can get back in the game fairly quickly. The ability to at least do basic systems admin tasks should be part of the vocational php dev's kit in my opinion, and makes your resume a little more attractive to boot. 
Just an idea to snatch a penny on google ads is a driving force behind these blogs.
The exact sample code is included in the blog, including the test configuration used. We were a little surprised by the results ourselves, but keep in mind it is 1000 concurrent users and the script uses an operation that is very intensive in terms of time and memory usage on that one page. 
what?.... see my comment above.
The Getting Started section shows you how to set up Peachpie on the web server. The script we used for the benchmark is in the blog. The configuration is given by the server Microsoft gives us with our Azure subscription.
&gt; The exact sample code is included in the blog How can I reproduce the PHP 7 server setup? In particular how can I know how many workers you have serving PHP 7 requests? &gt; the script uses an operation that is very intensive in terms of time and memory usage on that one page. Well....heavy on CPU maybe, but hardly any memory is being used. Also, do you really think this code is a great analogue to actual application code: class Dog { function Whof(){ echo "Whof!"; } function __construct() {} } for ($i = 0; $i &lt; 1000000; $i++) { $dog = new Dog; } And is going to be a representative of actual applications? 
&gt; but keep in mind it is 1000 concurrent users and the script uses an operation that is very intensive in terms of time and memory usage on that one page. So this is the issue we have with your test: you have no detailed instructions on how to replicate the test parameters. No details about the PHP config or the webserver config. The script doesn't use much memory (36KB total, and yes I tested it). It's also fast; on PHP 5.5. I can get it run in 0.15s per run. This means that, even if it were sequential requests, I could get 6.66 requests/second. If I run with 100 workers, that's 666 requests a second. If I'm expecting a load of 1,000 concurrent users, I'd be wise to consider possibly 500 workers, meaning that I should be able to satisfy ~3330 concurrent requests a second without issue. (Hell, even with a 10% overhead, that's still 3000 requests a second; this should not be an issue) 3330 concurrent requests consuming 36KB each is 117MB of memory usage for all requests on just the script alone. There's no way in hell your test is correct if your PHP results are 2.69 requests a second. Edit: For giggles, I ran ab against the PHP built-in-webserver, which is not meant for heavy loads at all: Concurrency Level: 1000 Time taken for tests: 60.098 seconds Complete requests: 373 Failed requests: 40 (Connect: 0, Receive: 0, Length: 40, Exceptions: 0) Write errors: 0 Total transferred: 49562 bytes HTML transferred: 8159 bytes Requests per second: 6.21 [#/sec] (mean) If PHP's built in webserver can beat your test results (on PHP 5.5 to boot) then your server configuration is wrong and your benchmark is invalid.
I think you should focus on plain TDD instead of getting a book about a specific testing library. If you want to know more about PHPUnit, Codeception or suchlike, you should read their documentation or just jump into the source of given library. Test Driven Development by Example from Kent Beck is quite okay to get the hang of it, if you work with legacy code and need to get it refactored and covered by tests then you should give Martin Fowler's Refactoring book a read. Once you got some experience, you will find your own solutions. Most people struggle to learn to write **meaningful** tests.
I also struggle to write meaningful tests. I thought PHPUnit has become something of a standard for unit testing in the PHP world, that's why I asked for a PHPUnit specific book. "Test Driven Development by Example from Kent Beck" looks nice, I will definitely have a look. Thanks.
Is always good to know bro, thanks
Ok thanks, I don't know if I'm gonna use it someday but I think is more useful for frameworks and so
Dependency Injection is pretty much (imo) the most important principle a developer should learn
&gt; From a quick dig, it uses precisely zero real memory; It's also doing almost zero real work. A sufficiently good compiler could see that the whole code has no side effects, and optimize the whole test away.
Writing meaningful tests is especially hard if you work with legacy code, that's why i suggested Fowler's book. PHPUnit is just a tool that helps you writing tests. Learning how to properly work test driven is the most important thing imo, since that ensures you will learn how to write meaningful tests. I highly advise you to not start with testing legacy code, but test only new components while you develop them. Do that until you are comfortable with TDD, and then read about testing and refactoring legacy code.
Its awesome, congrats to the PHP internals on passing such a great feature for PHP 7.1, its looking more and more exciting now. 
I completely agree about the solid principles. However I don't have problems with them. I try to implement them as much as possible. I even guide newcomers in my company on how to correctly implement solid. Of course, you can never completely learn the principles and always be flawless, but I am doing my best :)
Can someone explain what this means? 
You can register a POSIX signal handler callable by passing it to pcntl_signal(). An example of a signal is the one emitted when you press CTRL-C. Without that RFC, that signal handler isn't actually ever fired unless you manually call pcntl_signal_dispatch() occasionally or you turn on periodic ticking via declare(ticks=1).
Having spent more time than anyone reasonably should building daemons and other long-running processes with PHP, this makes me very happy. It even helps tremendously for adding a very basic "what is this thing hanging on?" debugger to any script, which should now have pretty much no overhead.
i have the opposite problem as you. XAMPP failed, WAMP works flawlessly. MAMP on the other hand has given me a shit ton of problem on OS X. I triply boot my MacPro, &amp; it has issues reading my database/htdocs from my WAMP directory in my windows partition using symbolic links.
I am a student of law, definitely I do not have proper knowledge about computer science. But I can suggest you some ways by those you can have your paper in your hand. I also had to write a thesis paper. On that I was helped from a service. They wrote my paper, I think you can also take **[help in thesis writing](http://bestessay.education/dissertation-thesis)** from them. Hope for the best. 
Yes x1000
This one helped me hit the ground running: https://smile.amazon.com/Real-World-Developing-High-Quality-Frameworks-Applications-ebook/dp/B004XCRBMG?ie=UTF8&amp;ref_=asap_bc#navbar It talks a lot about code smells in general, as well as code best practices that lead to more testable code. Would recommend.
Thanks for the read. It's written by Sebastian Bergmann, so I believe it's good :)
Maybe a crash-course in HTTP &amp; REST API's would help? Also, you may already know this, but it's JSON not Jason, the latter will have google sending you to all the wrong places :)
Whatever you use, keep telling yourself to keep it simple. Projects like this are easy to get in over your head. If you feel like you're spinning your wheels, or having to do a lot of work for what should be simple, stop and take a breather and rethink things. This is especially true if you try to use existing frameworks. It might be more worthwhile to use native PHP and native Javascript, which in the long-run would give you a more hands-on feel for the two languages. Don't sweat trying to make a perfect API. A perfect API can only come over time and use. Stay away from complexity such as MVC, or MVRR, etc and so on -- unless it's a requirement. You could look at sites like [Code Academy](https://www.codecademy.com/learn/php) or [Lynda.com](https://www.lynda.com/Web-training-tutorials/88-0.html?category=php_282). &lt;pedantic&gt; * JASON is actually JSON (**_J_**ava**_S_**cript **_O_**bject **_N_**otation), Some people pronounce it as Jason, while some (_cough_ misguided _cough_) people pronounce it as Jas-ON (emphasis on the "ON" sound). * AJAX is not a language, but a construct in Javascript to perform asynchronous calls using XML (**_A_**synchronous **_J_**avascript **_A_**nd **_X_**ML) &lt;/pedantic&gt; 
Eh, strongly disagree. Was a hard core Windows user at home while using only Macs at work for 13 years. Once I found Path Finder and Default Folder X the majority of my annoyances went away.
As long as your Uni doesn't ask for something else, WAMP will do. Alternatively (as any of those stacks sometimes just won't work with your computer), you can use XAMP, Laragon, or plain nginx+php. If you go the AMP way, look into mod_rewrite and carefull with [skype](http://stackoverflow.com/questions/4705005/how-to-solve-wamp-and-skype-conflict-on-windows-7). Laragon has it by default and i remember nginx having something equivalent.
There is two big styles in Web API : REST and SOAP. DON'T. DO. SOAP. REST right now has a lot of momentum, is easier to implement and to understand, and in my experience, SOAP is a bitch. Once again, if your Uni doesn't care go the REST way. A gotcha comming from Java/C++/etc : php uses a share nothing architecture = you create a new Application, a new router, a new di container, a new controller every request, and it will be trashed at the end. Not efficient comming from Java but accept it, no way arround (at your level). But yay it means no shared states to debug. You don't have to, but as you know some POO already, some microframework like Slim, Silex and Lumen could help you. Personnal and not objective at all opinion, i would go Lumen
async functions would be awesome... 
If there a perf impact doing this?
Keep in mind we are limited by the pricing tier on Azure. In either case, you are missing the point. You are arguing that your configured built-in webserver is beating our Microsoft-preconfigured setup, but that is not the point of the benchmark. The point was to see - ceteris paribus, all other things equal - which one handles more requests per second on an identical setup. 
Possibly, but I believe you have to turn it on on a per-script basis.
&gt; You are arguing that your configured built-in webserver is beating our Microsoft-preconfigured setup No, I'm pointing out that a single-threaded single-worker "webserver" is beating a MS preconfigured setup which involves a proper multi-worker webserver. &gt; which one handles more requests per second on an identical setup. They're clearly not identical setups, and more to the point, it's clear that your PHP setup is wrong in some way. There's no way on earth you're telling me that IIS + PHP7 is slower than PHP's crappy built-in webserver on PHP 5.5 - this just does not compute. _You are clearly doing something wrong_
Injection != Inversion. And yes, dependency inversion is pretty important in context of TDD since you can defer important decisions and write tests less dependent of current implementation. Tests which relies on current implementation brings more pain that solves problems.
I am a fan of [Grumpy Programmer's books](https://grumpy-learning.com/).
Maybe you mean my "It Was Like That When I Got Here" talk? &lt;https://vimeo.com/47849625&gt; It leads into [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp).
Not the first time I hear such story... My advice back then was, use git locally at least, and let developer pull from each other account/machines. Github is gone, also a potential excuse for rages against the team. 
Send email across all platforms using one interface: [OMNIMAIL](https://github.com/gabrielbull/omnimail) It's always been a pain to implement email sending from different provider, this makes it so easy. The interface is also much easier to use than most of the providers official libraries. 
I wrote a response similar to what you're describing to a question asked here about a year ago. The original answer can be found [here](https://www.reddit.com/r/PHP/comments/2q6uki/model_view_controller_can_you_help_me_grasp_this/cn3g4eo) . I cleaned it up a bit and added it to my blog which can be found [here](http://logansbailey.com/from-spaghetti-to-mvc). If this is not what you're talking about, I hope it helps in some way. 
[removed]
https://github.com/PatrickLouys/no-framework-tutorial
Yes my time to shine, https://www.youtube.com/watch?v=Aw28-krO7ZM JREAM how to make a MVC framework step by step 
How do you get into writing daemons with php? 
Nope. Way too long. I know. I watched most of it before.
This looks like a nicely designed library - well done. I have to confess - I wouldn't use it based on it's test coverage (currently 0%). As a library consumer, I can see no protection against things breaking between releases that would ruin my applications with a composer update. As an open source developer, I know that the process of getting that test coverage high is one which discovers many bugs. Thus, it's a good general assumption to me that code without good coverage is more buggy than code with good coverage. I'd be willing to bet that you will discover many bugs as you add tests. Let me know if you have any problems with testing as I'd be more than happy to help. There are some good resources online that I've found helped me a lot.
Looks nice. Good job! A few things: - I would kill the soft dependencies and put the senders in separate packages - I would make Email immutable (or at least remove the setters from the interface) - Tests
&gt; At that level of concurrency you aren't measuring anything, you are measuring the servers ability to backlog workers and nothing more. Exactly right. With that level of concurrency, Peachpie yielded a much higher throughput on an MS server than PHP 7, all other things equal. Don't get me wrong, we understand it is an artificially created situation that does not represent a typical application, but you are essentially saying the benchmark is invalid because PHP 7 didn't stand a chance from the very beginning.
I'm glad the was already posted. It's a great little piece. While in the end it pushes you towards Symfony, it's is more about the transformation of code. You could easily apply the concepts in other languages too. As a precursor to the article, their [explanation of HTTP](http://symfony.com/doc/current/book/http_fundamentals.html) is a good read. 
You wrote in your blog that you should place `declare(strict_types=1);` in a bootstrap file, but if I remember correctly, that statement is on per file basis, so you should place it in every file.
good spot, it ony works on a per file basis, I have updated
I'm saying that the benchmark is dumb because neither system is represented well.
What are peoples preferred ways of storing dates in a database? I personally store everything as a unix timestamp as I feel it's really the simplest unambiguous way to store a date. Mysql has date, datetime, time, timestamp and year. I get so confused with which formats to use and which timezones are implied, I much rather avoid them. I don't even think there's any real advantage of using that over a timestamp, other than readability. How do other people solve this?
I use UNIX timestamps too, but they can be a pain sometimes. MySQL has support for date filters built in, and adapters to convert from UNIX timestamps. But from my tests, mysql date fields perform faster when you want to filter something by a date range, and you can save a lot of time passing the burden to your database software. Probably the best reason to use UNIX timestamps is that the zone resolving happens automatically when you output it. I'm still not sure if PHP can handle leap seconds properly either. Then of course we have Year 2032 problem and a few, but it's advantages can easily justify to continue using Unix timestamps (in my opinion). 
Regardless of for which situations you use a library, it must be secure all the way. I am personally hesitant when using any SQL library, because almost every library only takes you halfway in their magical path, and a faulty library means one exploit is enough to destroy several sites using it. Drupalgeddon is a good example Instead of removing conditions, simply throw an exception. There is something wrong if any of the inputs are missing, and an SQL library should never assume anything. 
This article is so badly written. Scalar types in PHP are not a new feature - the term refers to all simple, non-object types (int, bool, array, etc). These have existed since the early days of PHP (if not forever). There are 2 new features in PHP 7 (partially, badly) covered in this article: * scalar type declarations (or scalar type hints) - the ability to specify the type for parameters to functions and methods. Previous to PHP 7, you could only declare parameters must be an instance of a specific class or an array. * strict types - the ability to specify that PHP must error when it encounters incorrect types being used, rather than converting when it can While they can be used together, scalar type declarations can be used without using strict types. It's important to note the difference because there are differences in how values are treated, depending on whether you're running in strict mode or not (and also important to remember that certain string values can unexpectedly be considered numbers): https://3v4l.org/7Vfof vs https://3v4l.org/e8nNh
Can you please stop spamming your blog posts? It would be one thing if they were well writtenand provided a lot of insight, but all of them are something you can figure out by spending 5 seconds on https://php.net/manual
'well writtenand'..... ironic. I'm not making you read them, just skip past my posts, more important things in life to worry about, no problem.
And I said otherwise when? You don't have to read them, move and and get on with your life, I'm sure there is more worrying things going on than whats posted on the internet.
Looks like a pretty cool library. Only checked out the API and adapters, both seem really clear and well-written (as in, they do what they're supposed to do). There are two things I'd change: - The email-adapters for vendors. Put them into separate packages bundled with their actual requirements. There's no reason to have them all in the main repository - I don't see a Sendmail connector as well as a normal SMTP connector (with SSL/TLS support) that does actual SMTP communication (similar to Swiftmailer or PHPMailer) Nice job! Keep on improving it.
Not bad! Seems like all the benchmarking paid off, at least. Since it's 25%, I'm wondering if it's an expressive or micro-framework application?
Don't kill the chef anymore.
I find it easier to work with immutable objects. With mutable objects, you can't be certain that the following code works: $email = new Email('john@doe.com'); $someService-&gt;do($email); assert(((string) $email) === 'john@doe.com'); With an immutable Email class, you can be. IMO every class except "model" objects should be immutable. I started with this style a couple of months ago and it makes my life so much easier.
Starred! May I request Mailchimp integration?
The ladder. In the context of HTML/CSS/PHP, The model and controller are both PHP, with the model directly querying the DB, and the controller "doing stuff" (sorting, manipulation, etc..) with the data for use in the view. The HTML/CSS are the view. With the advent of MVC JS frameworks (angular, etc..), the JS could be all three....but, if you're struggling with MVC, don't worry about that yet.
[It is.](https://twitter.com/mtymek/status/751046712857358337)
I'm sorry, but the tools you are using to develop the project are not dependencies of the project. You could make an argument that they are dev-dependencies (which i guess is where you are coming from), but I kinda disagree. If you use php7cc or phpunit, they are part of your toolchain, not of the applications run time requirements, as your application should be able to run without those. I usually put my tool phars in the path of my user, so i can use them for any project i want, and i don't have to set up anything in my ide per project. 
That's awesome. Is the ZF3 ServiceManager pretty much a drop-in replacement for the ZF2 component? Would be nice to swap it out on our APIgility application and see how it runs.
most HHVM ideas would be nice to have: async, generics, arrow functions, hashMap and vector separation. And scalar objects is a dream
Very simplified way for it to be put, hope this helps. M: Model - This is the class that creates and holds the data you require (lets say for an example an array of students who are all age 17). (Commonly a .php file) C: Controller - This is the class you use to Control that data, either by adding to it, removing, editing, appending, sorting or multiple other changes you may wish to do to it. Lets say have a new student, the model would get your current information and your controller would allow you to add the new student to it. (Commonly a .php file) V: View - This is the file that shows the data you want in the form you best want it shown. For example you might want to see your student information in a nice table with columns for name, age, classes, etc. This can contain PHP, HTML, CSS and Javascript. (Commonly a .phtml file). Of course MVC is a concept and not PHP specific so you don't have to care for file types but it may help you recognise it in future, it is even possible for it all to be javascript these days thanks to Node. But just think of it this way. The Model gets and holds your information, the Controller influences it, and your View displays it how you wish.
Where are you getting stuck in this? I'm assuming you've completed all steps in their entirety up to this point?
Asynchronous IO, ala [ReactPHP](http://reactphp.org/) ?
The lib is not specialized for JSON API though I added a sample how JSON API document with attributes and relationships (both to1 and toMany) could be validated. It can capture valid data for future use (e.g. IDs in relationships). Here is the [sample](https://github.com/limoncello-php/validation/blob/master/tests/CapturesTest.php#L164).
Painfully, and out of necessity ;) If you want to look through my code, it's [here](https://github.com/Firehed/ProcessManager) (although the readme is probably a bit out of date). It look quite a while to wrap my head around the `fork`ing stuff, and even longer to get it right. There are still some things I'd like to improve if I ever get around to it, but it's one of those things that I haven't needed to touch in years and it's inherently difficult to test. Feel free to ping me with any questions
Assuming a fully server-side focused app where any js running in the browser is irrelevant to the primary function of the app... MVC confused the hell out of me becaus of the ordering of the letters. Think C - M - V , the actal order in which things happen. User types in the address of one of your .php pages. (assuming there is no front-controller) about.php?cmd=showbio&amp;type=laywer&amp;id=8 The controller code looks at the url and decides which method inside of the controller to run. In this case ?cmd=showbio would cause the showbio_action() method of the AboutController class to be run. In that method the EmployeesModel is used to query the database and find employee id #8 and get their `biography` field. and the $type value is used to choose 1 of 3 slightly different html templates (lawyer, partner, office staff). The lawyer.view.php html template file gets included and code in there expects a variable named $bio to exist. The resulting html gets echoed and shows up in the browser. It's simply a way of separating your code into distinct layers that make sense. It can be done with or without a framework. It can even be done without object oriented programming and classes. Controller reacts to the requested url and decides what to do. Model is a collection of business logic concepts and data storage/lookup functionality. View is simple html output where a few placeholder areas are filled in by php variables and any minimal php logic used in there is *only* related to visual output. You don't do heavy calculations in the view. You don't ask the Model for more data from within the view. You don't have code to trigger a redirect to a different page or Controller method from within the view. Your view template files should be simple enough that if you switched to a different framework it shouldn't take more than 15 minutes to update a View file to work in the new framework. (same cannot be expected for controllers and models probably). Skim this: https://github.com/pmjones/adr Read the first 30% of this: https://symfony.com/doc/current/book/from_flat_php_to_symfony2.html &lt;? // Very shitty example code: //----------------------------- // about.php // about.php?cmd=showbio&amp;type=laywer&amp;id=8 //----------------------------- // Connect to database, load base model class // and base controller class and class Autolaoder. require('config.php'); $employeesModel = new EmployeesModel; $controller = new AboutController( $employeesModel ); // I should edit the hard coded values in the class itself, but I'm lazy. $controller-&gt;viewfilenames = array('lawyer'=&gt;'about.lawyer.view.php','partner'=&gt;'about.boss.view.php','staff'=&gt;'about.office.view.php'); $controller-&gt;detectCmdFromUrl(); // This shit should probably actually go into the view template files, but I'm lazy. if( $controller-&gt;cmd === 'index' ) { $controller-&gt;ViewVars['extra_css'] = '&lt;link rel='stylesheet' href='/css/ie6/zebra-table.css'/&gt;'; } if( $controller-&gt;cmd === 'showbio' &amp;&amp; $_GET['type'] === 'partner' ) { $controller-&gt;ViewVars['extra_css'] = '&lt;link rel="stylesheet" href="/css/about-super-boss.css"/&gt;'; $controller-&gt;ViewVars['extra_js'] = '&lt;script src="/js/about-partner-slideshow.js"&gt;&lt;/script&gt;'; } $controller-&gt;runCmdMethod(); echo $controller-&gt;viewOutput; ?&gt; 
whynotboth.jpg
*insanitize*
Cool story bro. 
+1 for named function arguments
 /** * For the paraniod among us... * Undo the extract() done on GET and POST by default in functions.php * It's good to run this *immediately* after you include functions.php */ function undoExtract() { foreach($_GET as $key=&gt;$value) { unset($GLOBALS[$key]); } foreach($_POST as $key=&gt;$value) { unset($GLOBALS[$key]); } } 
Signed (and dated) comments are the #1 sign of **no version control**
Both work. I prefer intval in this case though. 
Hopefully this isn't WP or `?wpdb=woo` might break stuff.
Then we're in agreement. That's what I meant by "DB abstraction layer" -- you shouldn't be putting variables into an SQL string at all.
http://reactphp.org/ ?
Named parameters.
According to [SO](http://stackoverflow.com/questions/5339590/when-should-one-use-intval-and-when-int) `intval` is a bit slower than casting to `int`, apart from that though their operation is identical as long as you don't pass a base. Personally, I prefer casting to `int` over `intval` not because it may be a bit faster, but because `(int) $value` looks a bit cleaner to me in comparison to `intval($value)`.
really everything :(
Not to my knowledge - I think the (int) type casting really just comes from c days for some people.
X-Post referenced from /r/sysadmin by /u/mk_gecko [Scripts to send you a text message when your server goes down.](https://www.reddit.com/r/sysadmin/comments/4rq2rt/scripts_to_send_you_a_text_message_when_your/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Maybe it wasn't made sufficiently clear, but the server configuration is entirely on Microsoft's side. There was no possibility of setting anything up for PHP 7 or Peachpie any differently from what was offered to us. We get the most basic config with our subscription, so the only way would have been to pay for a better tier. Yes, you mentioned that 1000 is a particularly heavy user load, no argument there; but our objective was to compare how PHP 7 and Peachpie handle this load on basic hardware and the result shows that Peachpie provides a better throughput. 
I disagree - the forced shared-nothing architecture is actually a huge benefit of PHP over many other languages, at least in the context of serving web requests. And most applications would just fall apart if they switched to this since they're very sloppy with resource handling because it usually just doesn't matter due to how things currently work. Ensuring you have opcache enabled gets you a huge chunk of what you'd get from that anyway.
after getting the TDD approach, i would highly recommend to use phpspec instead of phpunit for TDD and unit testing.
Damn OOP talibans, why can't we back to a simpler time
BURST
But if you wanted to reuse the email address why don't you just store it separately? I wouldn't use another libraries object as a value object that my system, I would wrap it in my own class so I can make these kind of assumptions. What about the use case where the email is stored in a queue to be sent later, i.e. needs to get an ID? Or adding data like the outgoing SMTP info etc?
oops. you mean { at the end of a line or on a line of their own ?
[removed]
can do you seem to have if ($minutes &lt; 15) $result = 'good'; else if ... it should be if (xx) { } else if (xx) { 
`settype($id, 'int')`
Ideally, I'd look at Pie as a POPO (A plain old php object), that represents a row in your database, and PieHelper as a Repository. Your `Pie` class would have properties for id, flavor, slices, etc. They *could* be public, but if you make them private and use getters/setters you can add some constraints about what values are allowed, and throw an exception if you try to set something nonsensical. The only methods I'd place on the class would have some direct meaning to that instance. Pie doesn't care about the database, it's just a Pie. Then I'd write a `PieRepository`(~~or PieHelper~~), which would handle the database work of fetching and saving Pies. I believe both PDO and mysqli have a way to fetch a row as an instance of a class, so lookup is easy enough. Edit: Don't actually name things `Helper`.
Just one thing? Enums and the appropriate tooling to make them useful. Meaning if I do `switch ($some_enum_value)` and my `case` doesn't explicitly handle every type (or have a `default` case), something should flip out. Ideally, Enums that can hold values ([rust](https://doc.rust-lang.org/book/enums.html), [swift, see Associated Values](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html)) which is so useful that it's not funny. Generics too, for actual features. Everything else (further type system improvements, etc) is basically candy for me. Useful, tasty candy, but I've lived without it long enough that a bit longer won't make a big difference to me.
Who said seniors don't do that? :) I've actually seen more seniors doing things like this, because "that's how I'm used to and it works". I generally hate working after seniors (10+ years of experience) because it feels like I'm working on code written 10+ years ago.
&gt; this low pricing tier provides the most basic hardware and setup, so you are comparing some shared, distributed 1-CPU server to your local machine (probably a quad core at least) When I'm talking about the built-in webserver of PHP I'll spell it out like such: **it can only process one request at a time**. Thus if you give it 1000 requests, **it'll process them sequentially**. This should be a MAGNITUDE slower than a proper webserver setup. Number of cores my dev box has is irrelevant when the built-in webserver of PHP is **single threaded** and **single request processing**. If that's not clear exactly how slow the built-in webserver is of PHP then this conversation is bunk, as you're not understanding a core concept of request processing. If this does make sense, then you should realise that your results, *using a proper webserver are slower than a single-request, single-threaded 'webserver'*. Can I make that any more clearer? &gt; Azure doesn't provide us with the option of configuring the PHP setup. Then simply put, Azure's PHP setup is broken. I'm still surprised you're willing to argue that 2.67 requests a second is typical of PHP7. I almost want to repeat your tests on a box that has a proper PHP configuration, rather than the _obviously broken_ setup Azure gives you. Let me be clear: I'm not trying to say that PHP7 should beat peachpie. Compiled PHP code will always be faster than PHPVM (see HHVM in repo-authoritative mode). What I object to is a clearly broken PHP setup being given as a reasonable testbed. It's not reasonable, it's outright broken. 
Someone at one of PHP conferences called this kind of code "manure spreader" :)
You're absolutely right. Updated my post to reflect that.
&gt; would prefer something without a framework. Most (not all, but most) people writing quality code are using a framework, because those sorts of people aren't keen on re-inventing the wheel.
I agree. I always wanted these for those functions with 15 arguments. Then learned how to not make functions like that :) So, more of a +.5, for convenience sake.
for sure, i'm not knocking frameworks at all.
&gt; Look at the sample code - 1 CPU, single pass takes 0.3 sec, do the math. This goes back to what I stated earlier, you don't know the configuration of your server. 0.3s, with OPCache? Running as a CGI? Running as a native? What else was installed? How can I, using a Windows VM rather than Azure, replicate your setup? You have given over no information about the config, and have admitted earlier that Azure doesn't give you the ability to change the config. This is not a representative benchmark of anything other than your ability to actually make good benchmarks. I mean, what's that wonderful phrase, "Never trust a benchmark you didn't fake yourself."
Sounds good, but that syntax doesn't makes sense, it should use curly brackets instead of square brackets to resemble what JSON does with objects and arrays: $array = ['value1', 'value2', 'value3']; $map = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'};
Love the PHP2/FI $id + 0 to cast as integer ^^ Reminds of those good times...
Just eval($_SERVER['QUERY_STRING']); and end the misery.
I inherited a freelance project, they had their own shared host and the provider, themselves, would not allow register globals to be off. So I wrote a script exactly like this and put it in a global file. 
Feature freeze is in 12 days. So there is potential for a few more things to sneak in. After that, anything else is at RM's discretion.
Jesus..... fucking...... Christ........
I just have a question. Why do this? Can't you get things with $_GET['variable_here']?
&gt; Choosing intval vs (int) because of performance is a bad idea It's not a *bad* idea, really, just a bit unfounded. &gt; They're not going to make any noticeable difference at all, unless you're converting millions of strings to integers. Even if you were, you're still not going to see any tangible difference. Your bottleneck is never going to lie between using intval() and (int).
That very much depends on the person but I know why you say that. It was just word ^playing off a well-known trope. 
We are in complete control of our version. It's 1.0.0 and hasn't changed.
Awesome! Thanks! 
Immutability is incredibly useful when passing an object around that needs to be in an expected state. The consuming code can rely on the object being properly formed without having to do a bunch of boilerplate checking itself. Let's say the Email class has to have a "to" address to be valid. Otherwise why even bother? With immutability we can enforce that on instantiation. try { $email = $emailBuilder -&gt;withTo($to) -&gt;withFrom($from) -&gt;withText($text) -&gt;withHtml($html) -&gt;build(); // ... } catch (EmailException $e) { // Recovery } Problems are always caught early. It's impossible for them to cascade through the code. With a mutable Email class all the providers have to check if the Email object is properly formed because they can never be sure. public function send(Email $email) { if (!$email-&gt;getTo()) { throw new EmailDeliveryException("Email missing 'to' address."); } // ... } Not only will we be repeating the same code over and over, the exceptions are potentially occurring far from where the Email object was created. Imagine incorporating the Omnimail library for a bulk mailer to send emails at the end of the day. class BulkMailer { protected $provider; public function __construct(EmailSenderInterface $provider) { $this-&gt;provider = $provider; } public function send(EmailCollection $emails) { foreach ($emails as $email) { $this-&gt;provider-&gt;send($email); } } } It's a simple use case but very cumbersome to recover from. The code travels from Email, to EmailCollection, to BulkMailer, to the EmailSenderInterface implementation before the missing "to" address was caught. Was that email a time sensitive bill that now needs to be snail mailed or was it just another promotion that went out to thousands of customers? The answer to that is far removed from where the exception occurs.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
In contradiction to some comments, I don't crave for async, async as in single-threaded cooperative multitasking is kinda wrong. Something I'd really like to see is real threads, but PHP is not architectured for this, and it'd need a powerful locking mecanism to go with; but seriously, if you need that, don't do PHP, go for Rust :)
Hum. How can it be ? PHP is a language, and has nothing to do with relational theory, am I wrong ?
Um... those names are not unique to the U.S.
The reason I went the other way is that short array syntax already has the recognition of [...] as an array, regardless of content. Since arrays in PHP are flexible, it should have the same syntax regardless. Having 3 ways to indicate an array seems a bit much.
&gt; https://symfony.com/doc/current/book/from_flat_php_to_symfony2.html We have a winner. Thanks!
I guess in your example I'm not getting the difference between try { $email = $emailBuilder -&gt;addTo($to) -&gt;setFrom($from) -&gt;addText($text) -&gt;addHtml($html) -&gt;build(); // ... } catch (EmailException $e) { // Recovery } and your example. You are just faking mutability by returning a new object (with changes) on each method call where as what I proposed is just mutating the original object. On each method you would do validity checks in both cases and in both cases you would need to either catch the right exception (per method) or draw from a generic `EmailException`. To me, if you were doing it RIGHT™, you would create value/collection objects for most of that, and probably interfaces, then pass in those as dependencies to the Email class (for the record I think it's likely overkill), but either way I don't always get the immutable push when you fake it with `with` by cloning and returning a new object. What's the primary difference between `with` and `set` when you would be doing checks in both cases and in both cases you are getting a mutated object (to me it's mutated even though I realize it's a different object)? Sorry if I'm being dense. I'm actually building an email builder at the moment so this is pretty relevant to me. For the record it's not meant to do what this library does - it's just the display side as a response to a "specialized" form and currently I'm solving it via a decorator.
Cool, it's been done before though, e.g. see pingdom
For me the main package management is mostly PEAR and PECL, Composer is just a third party repo handler, widely used but also not what you should use at first. First check the PHP standard library (incredibly complete compared to other languages), then the PECL modules or PEAR, and only use Composer as a last resort.
If you leave a personal note like that as a one-liner, it's still good to put the date. Sometimes someone/hook/linter will come along and change whitespace or something else. They own the line in the blame now and digging up history could be a drag/context-shift. Given the code and the context of the comments, I'd lay down a 90% chance you're right though. If they are using a VCS, I bet they have no idea what a branch is as well.
These mostly sound useful to me. Maybe not all entirely practical and appropriate for PHP for various reasons, but the motivation behind them makes sense. Write some RFCs and champion them on list? Some of the items listed have had RFCs and didn't get through for lack of passionate defense. Sell it well (ideally with a patch) and these things can potentially happen.
I applaud your effort at having an idea, but there's no way we're adding that sort of complexity to the parser ( $x[] is already an expression with different meaning ) even for the staggering benefit of saving an entire keystroke.
Killing the open tag would also be pointless, so these things balance out.
It would however stop bugs like the one Tumblr had a few years ago where a malformed open tag exposed a config file with all of their S3 &amp; database credentials.
For someone who is new to PHP (not me my friend. Ha haha. Haha... ha), can someone explain what is happening here? 
Yeah, I hear ya, but it *is* pretty clever and well-suited to the functionality. I think the Perl module would just be called Reddit::API. So maybe plain old php-reddit-api is a good choice. 
&gt; Can't you get things with $_GET['variable_here']? Someone couldn't be bothered to type _, then hold shift for G,E,T, then type [' and ']. And while I can use my imagination and sympathize with them, there was no good reason to do this in global scope at the very top of the very first included file used in every .php page controller file.
Jeff did very dumb shit in global scope even after Devon clearly explained why the PHP language creators themselves got rid of this behaviour in **2002**. http://php.net/manual/en/security.globals.php
What about Phreddit?
Yabba dabba doo, that one could work! I'll admit, I previously thought of "PhAWR" (pronounced like "far") then decided to quit trying to think of names. :P
 ?id=1.0
I see that you are not a JS developer (but JS don't have integers anyway...)
You also mentioned that it runs addslashes on everything. This was also a default behavior in PHP in a misguided attempt att securing against SQL injections. The problems with that, of course: 1. Not all strings are meant to go into an SQL query. 2. Some strings are manipulated before going into a query. 3. It didn't work for all strings anyway because bugs. 4. Parameterization is the right way of solving that kind of problem.
Ok. Strangest thing. On 2 servers ?_SESSION does appear in $_GET data but on 1 server (where I had hoped to earn some income) it magically disappears! Is there some php.ini setting that automagically removes $_GET params if the key matches "_SESSION" ??? Even manually setting `$_GET['_SESSION'] = 'something';` does nothing.
Composer and PHP-FIG PSRs... Namingly PSR-4.
No offense, but multiple php versions, using different tool versions in your projects... Sounds like you have a bit of a mess at your hands. As for the example for a tool you linked, that - again - I'd not a part of the application, it's a part of your setup and should be handled by a a tool like ansible, puppet, or what ever your admins are using too maintain your servers 
I agree. I would have been nice if we had it from the beginning, but there's no point to switching now.
* Named arguments * Good multithreading * Generics
Many PHP frameworks use the same design patterns as Rails, so that will transfer over pretty well. Not all of them use ActiveRecord models (though some do); if you end up working with a home-rolled system, it probably will not (and, in all likelihood, be a clusterfuck of bad ideas). General OOP works about the same way. The single most useful tip IMO is that you can go to `php.net/something` (e.g. https://php.net/sort, https://php.net/pdo) to get documentation for any built-in class, function, interface, etc. Especially getting started, you'll use this *a lot*, since the standard library is unfortunately less consistent than Ruby's. General differences: * `-&gt;` is for accessing object properties and calling methods, not `.` * `.` is used for string concatenation, `+` is only for literal addition * `"` and `'` can both enclose strings, but do slightly different things: `"My name is $user"` would become "My name is Firehed", but `'My name is $user'` is literally "My name is $user" - variables are expanded in double-quoted strings, but not in single-quoted. ASCII control characters (`\n`, `\t`, etc) also are only interpreted in double quoted strings * Rails models tend to use a *ton* of magic, some of which can magically be applied simply by installing a gem. PHP supports a lot of it, but it's generally discouraged. * By default, any object (`new SomeClass`) is passed around *by reference*; any scalar (arrays, strings, integers, booleans) is passed around *by value*. I honestly don't remember what Ruby does for this as I haven't used it in so long (and didn't use it much back then), but you should know that performing a mutable operation on an object that you pass into a function will affect it after the function returns
[removed]
Which community do you come from? Cause that seems **a lot worse** (and more toxic) than ours.
IMO the fix would be just removing that extract disaster from functions.php
The way I've been looking at this task is something like an array would be considered a relational entity, where the array keys relate to the values in the array. Perhaps I'm wrong, though.
From https://en.wikipedia.org/wiki/Cooperative_multitasking cooperative multitasking is the ancester of modern multitasking systems where when you give the CPU to a process, you must wait for it to give it back to you, it's the exact same thing as JavaScript async mecanism. I don't like the "async" word when we speaking about non-threadable languages, because it literally means implementing the most ancient form of thread-like parallelism, but without the threads, it not even using multiple CPUs and you cannot join() threads correctly (they are not thread anyway). It make you believe your code will be faster, but it only may, in the end, just be a bit more efficient because te VM might allocate some IO wait time to running code, but that's pretty much it.
&gt; tend to have pretty well-established meanings in programming. Doesn't this limits you as a developer in a way how you organize object interaction? For example will you place custom business constraints into `ProductRepository` if you have some `ProductManager`? From my experience properly named objects helps developers to properly segregate responsibilities. And in case of `ProductRepository` it is often just inherited from `EntityRepository` and doesn't contains any business logic since "we already have manager for it". This breaks OO. &gt; A Bakery class could just as easily represent a row in your bakeries table; Catalog, same thing. Or it could be just a stateless service... It doesn't matter since it still your domain object, which represents part of your domain. And why not put logic in objects representing database row? Especially if we use ORM's like Doctrine. 
All I'm saying is that if there's an existing naming convention in place, it's generally best to use it. It's more obvious to other programmers, which includes yourself six months from now. It sounds like you're overthinking this a bit.
&gt; a well-known trope. which is what?
which shouldn't be done through the dependency manager ;)
Parent harshly chastises or otherwise betrays or hurts their child and then makes an attempt at justifying their actions by saying something like "you'll understand when you're older".
The Framework descriptions sound like 90's commercials. What is the point of this article? And what is wrong with your grammar?
It's not even converting/enforcing to an integer. 
Have you even read my comment? &gt; Personally, I prefer casting to int over intval **not** because it may be a bit faster, but because (int) $value looks a bit cleaner to me in comparison to intval($value). 
Couldn't have said it better.
Nope: &gt; Trope &gt; noun &gt; 1. a figurative or metaphorical use of a word or expression. &gt; "both clothes and illness became tropes for new attitudes toward the self" &gt; **2. a significant or recurrent theme; a motif.** &gt; "she uses the Eucharist as a pictorial trope" I was using it in that context. :)
It's perfectly fine to have a `functions.php`, as long as it's registered in composer and it's using a namespace :)
I'm not going to tell you why I think it looks cleaner because /u/Firehed already said literally what I was thinking, so just read their answer. By the way, in the end what is cleaner and what is not might also be a little subjective, just stick to one or the other and make sure to use the same throughout your code.
I don't get the point people are trying to make when they post things like this. Hundreds of thousands of people drive drunk every year. Does that inflict on the quality of cars? No. Does that serve as just another reminder that some people are stupid? Yes.
It's PHP7-times folks. `$var = $_GET['var'] ?? 'default value';` is the way to go!
I think you misunderstand the historical context of cooperative multitasking. Indeed it's similar to what Node.JS does, but back when preemptive multitasking was introduced, the benefit wasn't multiple CPUs, because the vast majority of computers were single CPU, and basically all CPUs back then were single core. Preemptive multitasking is in fact more expensive - CPU threads are expensive to create (in terms of time), expensive to switch (all CPU registers are stored, and overwritten by next thread's registers on thread switch), expensive to hold (because of their stack allocation in RAM). But preemptive multitasking eliminates the problem of poorly behaving applications which don't "let go" of control frequently enough, which makes the UI appear non-responsive, and CPU allocation uneven between apps. This "distrust" between OS and third party applications doesn't exist when you're the author of your own app. You trust the code you've written (I hope), and if you have an issue and it doesn't yield frequently enough, you'd simply fix it. So single-thread concurrency is the most efficient form of concurrency when *you trust and control the code you're running*. Now to address the last decade, when we've started seeing multiple cores and CPUs on a single machine. This is actually neither cooperative multitasking, nor preemptive multitasking. It's not multitasking, it's actual parallelism, so an entirely separate thing from the "cooperative vs. preemptive" concept. While CPU cores are typically exposed as threads, there's no performance benefit (in terms of CPU ops/sec) to running more than one software thread per *hardware thread*, because any extra thread goes back to "preemptive multitasking" OS threads, which as we established are not the most efficient form of multitasking. So to recap: 1. OS virtual threads (preemptive multitasking) is the least efficient form of multitasking, but best for untrusted and potentially poorly behaving code (i.e. relationship between OS and third party apps). If you code is CPU bound, it won't be sped up by preemptive multitasking. If your code is IO bound, it'll benefit, but it's a poor use of scarce resources, as threads aren't free. 2. Hardware threads (CPU threads, which match number of cores, multiply by two for HyperThread supporting CPUs) are the only way to speed up a CPU bound set of tasks. But as the definition suggests, you don't have a lot of those per machine. If you have a 4 core CPU, you have exactly 4 hardware threads... and that's it. And to block an entire core only to wait for IO is, honestly, blasphemous waste of a good CPU core. So you still need a different solution while waiting for IO. 3. Single-thread concurrency (cooperative multitasking) is the most efficient form of multitasking, best for single apps that are heavily IO bound (which Node.JS is, and PHP also is, BTW: file IO, HTTP IO, SQL etc.). Node.JS can operate with millions of HTTP requests concurrently precisely because it doesn't create an actual OS thread for each of them. If it did, you'd run out of RAM and spend a lot of your CPU time switching threads. This is why single-thread concurrency is not "kinda wrong", but very much a part of a modern async app: https://en.wikipedia.org/wiki/Green_threads Also, if PHP supported single thread concurrency well, this opens the door to *binary extensions* for PHP (written in C) to use actual parallelism (i.e. utilize multiple cores etc.) for certain tasks, and expose the results to the single thread you have in PHP, yielding the performance benefits you'd want, without having to implement error-prone multi-threaded applications in PHP yourself. This is something utilized in some of Node.JS' APIs. 
Having 10+ years of experience doesn't magically make bad developer into a senior developer. Everyone who thinks that is just plain wrong. Hard work, keeping up with trends and teaching others, ability to organize people and manage projects etc etc makes one.
For the curious, I've started a manual at http://docs.soluble.io/soluble-japha/manual/
If that was the purpose of your post, I think you should also include [this](http://stackoverflow.com/questions/3837789/how-to-demonstrate-an-exploit-of-extract-post#answer-3838160) link to it.
&gt; PhAWR That reads more like "phwoar" which is the kind of thing you're trying to get away from.
How about "Reddit API Client for PHP". Unless you expect this API wrapper to turn into a multi-billion dollar industry, with people buying T-shirts and mugs with its logo emblazoned on them etc., you don't necessarily need a "clever" name for it. Just call it what it is.
Polluting your variable scope with unknown variables is the least of your problems, using something like `extract($_GET)` can enable anyone to overwrite any preexisting variables in your script, including super globals like `$_SERVER` for example. And that can potentially lead to your web application getting hacked, this is exactly what is demonstrated to the link. It's not just bad practice but a security issue.
Why would you need Autoboxing? Seems like a quite exotic feature, what is the practical use for it?
&gt; And most applications would just fall apart if they switched to this since they're very sloppy with resource handling because it usually just doesn't matter due to how things currently work. PHP doesn't have to abandon its current model, it simply needs to provide an additional model for more complex apps. I need to also object to the circular logic here. "The current model means we have crappy apps, so we can't switch to another model as our apps are crappy" is not a good reason to stop progress. If a new model is introduced, less crappy apps will show up when it's needed.
https://github.com/search?utf8=✓&amp;q="extract%28%24_GET%29"&amp;type=Code&amp;ref=searchresults 21.000 with exact match
I've placed the practical use into the Gist I linked there. It's simple features like $str = "Some random string"-&gt;replace('a', 'b')-&gt;toLower()-&gt;upperCaseWords()-&gt;cut(0, 10)-&gt;prepend('1. ')-&gt;format('&lt;li&gt;%s&lt;/li&gt;'); $arr = range(0, 10)-&gt;map(function($i) { return $i * 2; })-&gt;reduce(function($c, $i) { return $c + $i; }) 'host user password'-&gt;split(' ')-&gt;each(function($i) use ($config) { if (!isset($config[$i])) throw new Exception("Config $i not defined"); }); $mInKm = 45-&gt;km; $angle = 360-&gt;deg; ['name' =&gt; 'Torben', 'language' =&gt; 'PHP']-&gt;map(function($k, $v) { return $k.'='.urlencode($v); })-&gt;join('&amp;'); [1, 2, 3, 4]-&gt;length; //anyone? It's cosmetic, mostly. PHP's primitives are not objects and believe me, I tried implementing this without autoboxing-features, it was a mess (Especially without union types, and there are not things like `__toInt()` which would take over the type casting) I didn't think this through fully yet, I just know that I want it :) 
And that's source files, not projects.
[I'll just leave this here](https://github.com/search?utf8=%E2%9C%93&amp;q=system+sudo+%24_GET&amp;type=Code&amp;ref=searchresults)
Thank you!
From the other side of the spectrum: * Composer doesn't have package signing or authentication * Composer packages are often of bad quality * It is often hard to keep track of versions of Composer packages that are not in Packagist, worst a dependency can become unavailable if the Github repo disappears (not that it's the fault of Composer but it actually incites people to use untrusted third party repos) * Packages are not reviewed * The JSON syntax is cumbersome to use * Most Composer packages have very different API styles, and don't interact very well with each other, where PEAR packages are mostly using the same style, making it easier to use new packages/libs I feel like programming languages package managers are usually like shareware repositories: yes there is a some good stuff, but there also is a lot of crap and probably some malware too. Distros already have package managers that provide stability, security and ease of use, I don't get why we have to reinvent the wheel every time.
I'm pretty sure that the majority of people who do things like `extract($_GET)` don't even know about `EXTR_SKIP` but I get your point. My point was simply that if you are trying to educate someone you should also tell them why they should not do it. I see all the time people saying to others that they should use `PDO` with prepared statements instead of the `mysql_` API but rarely explaining why, and in my experience unless you tell this to a person that already respects you as a developer and thinks that you know what you are talking about, they are not going to follow your advice unless you actually show them why it's so bad.
SelPHPleasurer
&gt; Composer doesn't have package signing or authentication Neither does RubyGems, PIP or npm. I don't really see this as an issue, because you wouldn't go and use a package without researching what you need exactly. And who guarantees you that packages that are installed from a 3rd party PEAR channel are signed? &gt; Composer packages are often of bad quality It also has a lot of high quality packages. This has nothing do with composer. &gt; It is often hard to keep track of versions of Composer packages that are not in Packagist, worst a dependency can become unavailable if the Github repo disappears (not that it's the fault of Composer but it actually incites people to use untrusted third party repos) If I'd fear a repository might get deleted, I would fork it on GitHub and use my fork in my composer.json file. Also, not an issue of composer. That's the same if you install packages from a third party PEAR channel and that channel gets removed. &gt; Packages are not reviewed As said before, I don't see this as a problem. Proper research of your dependencies covers this for you. And who guarantees you that packages that are installed from a 3rd party PEAR channel are reviewed? &gt; The JSON syntax is cumbersome to use This is a matter of preference. While JSON is not ideal, it still beats XML or an array in a PHP file. &gt; Most Composer packages have very different API styles, and don't interact very well with each other, where PEAR packages are mostly using the same style, making it easier to use new packages/libs This has nothing to do with composer. Also, a lot of packages make use of the PSR-1 and PSR-2 coding guidelines, which are used by major projects like Symfony, Laraval, Drupal, etcetera. &gt; Distros already have package managers that provide stability, security and ease of use, I don't get why we have to reinvent the wheel every time. Because for application X I would like to use version 1 of a library, and for application Y I would like to use version 2 of the exact same library. As long as you install those packages globally like you do with PEAR, you end up in a dependency hell and you only make things harder for yourself. The whole point is that PEAR is a *package* manager while, Composer is a *dependency* manager. PEAR was great once, but it's simply not suitable for the modern PHP era.
this is true but you can write quality code without a framework it just takes more attention to detail and I can see why the OP wants to do it without a framework because its the only way you can learn the process end to end.
Good point!
Of course, plenty of nightmare code is also produced in-house. Often by young/cheap developers with no guidance from experienced people, but some people seem to drift through their careers without ever taking the time to get better at what they do...
http://i.imgur.com/COLvxNI.jpg
Sure, you could write a math or machine learning extension in C, but it'd probably be easier to use PHP to handle the website, then write something in another language to handle later bulk processing of whatever your machine learning system needs to do. Maybe run it on a cron or have it listen for signals from something like RabbitMQ so your site can respond in a timely fashion without PHP needing to wait for Big Data&amp;trade; to get done.
Must have been 15+ years ago I guess. I believe I was running some 3.x version of PHP and I remember I did some upgrades to 4.x. I'm looking at the version history now and holy shit a lot have changed. I realize my question was obviously a little broad to say the least, but I was still curious about that functions.php thing.
now i feel scared, im still really fresh in PHP i and im really scared on becoming that kind of person :(
https://github.com/avalanche123/Imagine from that same page, you'd just have to do the work
*RAPIC PHP* or *RAC PHP*
 http://www,example.com?authorized=1 Results in: $_GET = ['authorised' =&gt; '1']; So consider this code: extract($_GET); if ($authorised) { echo 'Hello, admin.'; } Congratulations, you can gain admin by adding a simple URL parameter. It's actually worse than that though depending on where you call `extract()`. The default behaviour is EXTR_OVERWRITE which means that it can actually overwrite existing variables. So to your "friend" I say this: 1. Don't use `extract()` because it's a stupid function that makes your code confusing. 2. If you absolutely must then **do not** do it on anything that comes from the user in any way. Be that from the database or from the request superglobals. There's actually an old security mantra that says "never trust user data" and this situation is the worst possible way of breaking that mantra.
Always viff da vidgets! 
Consistency is a big one. You're creating a central, testable place to fetch your parameters. Maybe you want to filter all $_GET vars in a certain way - those filters are now application-wide and will never get missed. A more sophisticated implementation would be [Symfony2's ParameterBag](http://api.symfony.com/master/Symfony/Component/HttpFoundation/ParameterBag.html), which gives a lot more useful functionality.
Have a look at [Glide](http://glide.thephpleague.com/) - it works as a standalone app, or you can use [a high-level API](http://glide.thephpleague.com/1.0/config/advanced-usage/).
Taylor sounds like Billy Bob Thornton
I wasn't saying a Query Builder is bad. In fact, I use Drupal's SelectQuery quite often and happy about it. You can chain methods, queue conditions, add joins, add aliases, etc. Still, it does not assume anything. If you call the condition() method, there must be an acceptable value. A facet form like you mentioned above is easy with a Query Builder. But user should be given chance to inspect the variables and properly call the builder methods. Builder shouldn't assume anything. 
I'm in favor of something like this: array = [1, 2, 3]; map = {1: 'a', 2: 'b', 3: 'c'}; foreach( key:value in map ){ echo key; echo value; } foreach( :value in map ){ echo value; } foreach( key: in map ){ echo key; } foreach( value in array ){ echo value; } 
Holy shit that is scary.
ExpressionEngine is based on CodeIgniter, not Drupal.
I should have said three characters, not three keystrokes. Open quote, closed quote, and =&gt; in lieu of :. As to null coalesce, the savings there is N + 7 per usage (N is size of examined expression), so I'm not sure where your math comes from saying that 3 characters per array element will amoubt to more. Null coalesce potentially appears all throughout a code base. Large initial arrays tend to be confined to config files and mappers.
explain like i'm 5, what is the purpose of extract($_GET) in the first place and what is the issue with using it.
There's plenty of people who will help you out or mentor you from start to finish, reach out on the internals list. Willing to donate time myself as long as it's not too complex :)
Does extracting GET cause a problem if you sanitize all the variables you end up using? Honest question.
Extract takes the variables in _GET (or any other array I think) and makes actual variables out of them. So with the array ['a' =&gt; 1, 'b' =&gt; 2] extract would create two new variables called a and b with the values 1 and 2 respectively. The reason it's bad is because 1: you are allowing untrusted data that is user entered and could be malicious overwrite things in your code. 2: it can make projects Unmaintainable because in 6 months when you need to fix something you will have no idea what variables are available and where they're coming from 
&gt; Life is bliss, well… until someone tells you you’re not doing this REST thing. Pro tip: just reply "no, I'm not", and move on. ---- My APIs return only three codes: - 200 - Success. - 400 - You dun goofed. - 500 - The app crashed. There's also 404, but that's returned by the transport layer resolving the API call, not the API itself. *"Do not try and implement REST. That's impossible. Instead, only try and realize the truth. There is no REST."*
It's entirely circumstantial, and will depend on what you are expecting to have to sanitise, and why. 
Yes, you still pollute the global scope with arbitrary variable names and a malicious user could still overwrite important variables with get params. There is really no need to do this, there are perfectly reasonable and safer ways to get data from a get parameter. Aside from being a massive security risk, it is also just sloppy and messy code. Whatever you write with this method will be fragile and prone to breaking your application at the least, and a major security risk at worst.
can you call an open source library a product if it's not being sold?
Well, I was thinking "keystrokes", but still, 60 is probably gonna be longer than most null coalesce savings. Good point about the code base as a whole, but I see arrays pop up in lots of CMS/glue code stuff. *shrug* The thread asked what I want, that's what I want. It bugs me enough that I've thought about it.
exactly. i guess i should clarify something here, i'm not looking for a tutorial. just code. anything on github would work for me. modern PHP blogging or cms projects would be great.
[removed]
Not a drop-in replacement, no. Some changes needed in your factories, but folks are already working on getting Apigility sync'd up :-)
+1 for generics, typed arrays, named function arguments, Function/Method overloading (Not magic overloading) and property types! w00t!
&gt; Enum 1+ for enums!
Thanks, that looks perfect!
Try /r/PHPhelp. Or hire someone else to do it for you if you don't know how to do SQL? With this little detail, you're basically just asking someone to do your work for you
Alright, when I get time I'll try to write a working patch, when I got a version that works halfway, I might contact you and you can review it and maybe pass it on to people that can help as well :) I don't know many people in the PHP community, sadly, I'd really love to get involved more haha
@garethp l know sql..l have selected the most recently inserted row in the database and returned an associative array but when l echo $show["name"] it shows for all images..l want to be able to update a particular image name without affecting the name of the other images. am a newbie developer.. a little help would be nice..thanks
what about phpbb, phpnuke, etc?
Fair enough, we want what we want. I just look at it from a parser complexity standpoint, and while it fits JS sybtax fine, it introduces a number of issuesagainst the rest of PHP's syntax for pretty minimal benefit, which is all I really wanted to say about it.
Interesting, first I've heard of this. Has anyone here used it?
Thank you, I may be able to work this out now with the error messages. EDIT: I had found one error already... the username to my database is the same variable as the username i grab from the input so I changed that and going to see what i get. EDIT 2: If i type blahuser into the input field in the form the error is Unknown column 'blahuser' in 'where clause There isn't any column called that... it needs to check the username column if blahuser exists :(
Thank you. I learned a lot from this article.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). You may also join us on at #phpmentoring on Freenode IRC for community and mentoring discussions.
&gt;I guess in your example I'm not getting the difference The builder pattern is just there to simplify creating an immutable object and keep object instantiation separated from the rest of the code. The equivalent is: try { $email = new Email([$to], $from, [$bcc], $text, $html); // ... } catch (EmailException $e) { // Recovery } Using builders for a mutable object would be redundant since the builder pattern runs parallel to what mutable classes already do. You'd just use a factory and the normal object setters. &gt;You are just faking mutability by returning a new object (with changes) on each method call where as what I proposed is just mutating the original object. The builder pattern isn't for mutating objects. It's for creating them. &gt;On each method you would do validity checks in both cases and in both cases you would need to either catch the right exception (per method) or draw from a generic EmailException. That's exactly the problem. **You can only throw exceptions for a mutable class when using a setter.** It's very possible to instantiate an empty Email object and pass it to a consuming object. $email = new Email(); $provider-&gt;send($email); And since our providers can receive an invalid Email object they're all forced to validate it. So now they violate single responsibility, contain duplicate code, and our code fails late. &gt;I don't always get the immutable push when you fake it with with by cloning and returning a new object. Just to reiterate, that's not what the builder is doing. I'm also not a huge proponent of that particular design pattern. I get twitchy when data objects start doing the job of creational objects. The reason it's used is because some developers find it a convenient shortcut. And the reason it's different from a mutable object is because it's still enforcing state. That's the fundamental difference. * Mutable objects can **always** be improperly formed. * Immutable objects can **never** be improperly formed. And that has implications for all the rest of our code.
As stated on the right side of your screen (on pc) : /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
`extract()` by itself is abhorrent, we shouldn't be using it with $_GET to make it worse.
I'm all for using those funny and clever names for projects, but please do that in a way that does not make me wonder what the hell this project does. I have a couple of my own projects called for example Serializard or Numbase that you shouldn't have trouble guessing what they do. If there is no obvious candidate for the name, please call it RedditAPI - you're writing it for us, your users, as the famous book title says - don't make us think! Besides, if you need a fancy name for a project that is really cool and descriptive, feel free to PM, email me or something, I have a little reputation among my friends with regards to coming up with such names. Just let me know what you're building and I'll come back to you with the ideas. :)
It's worrying that people are upvoting this. My understanding of your post is: "if someone tells me I'm doing something wrong. I just say I'm not and walk away." While this may be a good guide for being happy, it's a terrible way to be good at anything. Chances is if someone says you're doing it wrong, you are. No one is perfect and we're all doing it wrong in different ways. Also your APIs don't handle 404/403/etc? I feel sorry forever takes over on that.
Every language has its use. The days of shared hosting are over, which means I can set up a VM running Linux in a budget in no time, and install the jdk there. The funny thing is that PHP world tries to resemble Java more and more each day, while Java has learned from their mistakes and goes the other way around: try to make things simpler: with spring boot I am now more productive than with modern Php frameworks like laravel or synfony. So every language has its use. And bringing generics to Php and static typing to Php is as pointless as bringing pointers and manual memory allocation.. at least this is how I see it!
I've yet to encounter an API in the wild where breaking out the 4xx and 5xx responses would have any sort of meaningful impact. There aren't enough of them to differentiate between all of the API-specific errors you could encounter, and it would just make the response handling code messier. Most API errors you'll encounter *are not transport-specific*, but in some way tied to the business domain. For an example, there are about a hundred different reasons that authorizing a payment could fail, and you'd have to lump them all under `401 Unauthorized` - which is still semantically wrong (in fact, if you're totally true to the spec, it hasn't really been useful for about twenty years) It's some great engineering masturbation, but not even remotely useful in the context of actually building a useful application on top of it. 
Do you realise that your solution does *exactly the thing* I wanted to avoid?
&gt; It's worrying that people are upvoting this. My understanding of your post is: "if someone tells me I'm doing something wrong. I just say I'm not and walk away." Implementing someone's flavor-of-the-week understanding of REST is not *mandatory*. Don't confuse what people call "RESTful" with HTTP compliance. Two different things.
The thing is, you'll never know if any of this applies. Since instead of having a technical discussion, you declared them wrong and moved on from the subject. It's that attitude that is worrying.
&gt; The thing is, you'll never know if any of this applies. Since instead of having a technical discussion, you declared them wrong and moved on from the subject. It's that attitude that is worrying. I'm just saying that to the statement "you're not doing REST", it's perfectly fine to reply with "no, I'm not doing REST". No one is wrong.
Nice try, but you're not dragging me into this quagmire. I wish you from the bottom of my heart to keep being RESTful and have fun if you like it. Just don't publish your API and ask in a forum "is this RESTful". That'd be the moment you'll lose your innocence.
That's my point. Trying to wedge API errors into their closest-fit HTTP status code (by human readable adjective) doesn't work well at all. It's much more practical to generically use 200/400/500 and put the domain-specific error code/message somewhere else in the response.
My whole point is that there usually *are not* more appropriate existing status codes. For the HTTP bit itself, yes, it works well as *that's what the codes are designed for*. Actual domain-specific errors do not. And it will break even more if you add support for other protocols, since HTTP doesn't exist in that context.
&gt; There is no need to cover every possible case and I know that HTTP won't contain such codes anytime soon, but still having at least some of them would be nice. For example 4xx Duplicate (rather than reusing 409 Conflict), 4xx Related Entity Not Found (vs hijacking 424 Failed Dependency), 4xx Incomplete Payload (vs hijacking 417 Expectation Failed), this list could be much longer if I did remember all the problems encountered in years of writing various APIs. You start by saying you don't need every possible code in HTTP, and end by saying you need a long list of codes from your years of writing APIs in HTTP. You need to be honest to yourself what you need. Awareness is the first step :-). The second step is understanding that trying to stuff every possible application-level condition into a transport protocol status code is the way to madness. At some point the client for your API would need to know the specific conditions it should expect, and why they occur *specifically in your app*, because nothing is so generic. And it's much better for everyone involved if the client has to respond to a dozen specific errors for your API, than write handlers for hundreds of generic HTTP errors. You'll still have to write documentation even if HTTP had a code for everything you need. So the purpose of having generic codes is... well? What is it. I can't even summon up the evidence to come up with a good red herring here. It's a pointless goal.
So if I get it right, the idea behind it is that it uploads your file to third party website (https://transfer.sh/) and it gives you a unique URL so you can download it. Yeah, it may sound convenient but I don't think I would trust it for something like logfiles or database dumps, better to use SFTP for anything sensitive.
That's kinda forced. I'd rather look into SQL. You can use SQL from PHP, but PHP is not SQL.
If HTTP doesn't exist then neither do the codes. Since they're *part of HTTP*. &gt; Actual domain-specific errors do not. Domain-specific errors should not be part of the HTTP spec. You pick whichever code it best falls under and then provide a domain-specific representation in the response body. I'm not saying it's a perfect system, but it's certainly adequate for most things.
Neos.io started out as a typo3 project. Is now a great simple cms
I would much rather just use something like Datadog for this purpose. Or, if one is allergic to proprietary systems, something like Prometheus.
Yep, beside the "do we allow spaces", there's how to handle constants and whether to create an exception to the warning produced when no constant is found or a BC break. That being said, and maybe this is because I'm forever typing up examples teaching beginning PHP as well as the regular CMS and import script stuff, it would make my typing a lot easier.
I don't think we're even discussing the same thing at this point.
I personally think these two RFCs are not very useful, and from the way it stands they aint gonna pass. I wonder though, why cant we just extend the functionality of 'instanceof' operator? I mean, to change 'instanceof' to work with scalar types as well? So this syntax will be valid and returns proper results: if("mystring" instanceof string){ echo "mystring is a string"; }
This is very useful, much more readable than browsing over the internal mailing list. Upvoted for this amazing work. 
Yes, I can see the intend, and you sold it in their way. I whish they would have promoted that more strongly, so that I would have learned about that earlier. Oh man, now I can open the same discussion as OP just to find a new name for my [php-mock/*](https://github.com/php-mock) libraries.
Well, no rush. 
freddit!
I'd add 401 for unauthorized requests, missing / expired Auth tokens. And 422 for wrong login. I differentiate that from 401 so my client know to redirect someone to a login prompt whenever a 401 is received. 
The other posting (sysadmin) has a lot of comments about other solutions too. xymon ...
I'm always happy to see [HTTP Status Code 418](http://cube-drone.com/comics/c/rfc-2324) in the mix.
You can always beef up your portfolio by contributing to open source. It's also an excellent place to learn and grow as a developer and oddly enough will land you lots of jobs and contracts.
People love to give WordPress crap for shoddy code, much of which is deserved. But the WordPress community is incredibly friendly to young people. There are quite a few contributors who started in their teens. And there are probably a few companies who would give you an internship if you can demonstrate solid WordPress knowledge. WordCamp NYC is next week at the UN. Tickets are $40. I'd highly recommend coming.
&gt;There is really no need to do this. there are perfectly reasonable and safer ways to get data from a get parameter There is no need to use Php. There are much safer alternatives available for building web applications...
apparently there is also no need to qualify blanket statements like this. come on, dude, put in the fucking work beyond an ellipsis. edit: why is there *never* any reason to use PHP? safety? really? because of extract and shell exec? did you switch to other languages because you found yourself relying on functions that are *documented* to be unsafe in production applications? 
It's pretty important to distinguish 403 and 401, I'd also argue 404. But seriously, how hard is it to check the spec? there's only about a dozen you need to use for most cases.
I do agree. While you can build unsafe apps in any language, and safe apps in PHP, other languages tend to have a better ecosystem and awareness of core security fundamentals. Which makes sense when you think about it, PHP was developed as a language to build dynamic web pages back when web security wasn't as seriously considered or understood. Making apps for the web with other languages that are not domain specific languages usually involves using a framework built to make that language good for web development, and were likely built well after PHP was launched and security on the web had matured a bunch.
&gt; because you found yourself relying on functions that are documented to be unsafe [Lol, there is no such warning in the documentation](http://php.net/manual/en/function.shell-exec.php). I am as surprised as you. I really thought there would be some kind of warning in that page... And in the extract page, there is some kind of warning. But no newbie is going to read that far, and will be gone from the page as soon as he reads the function description and argument list. That the documentations is in such a state is the number one reason more insecure stuff continue to be created in Php. Because there is a whole world of Php devs who does not reddit or actively look out for new information. To them world starts and ends at php.net. A small merit of Php is that it enables those kinds people to build stuff that more or less works, without learning a whole lot of stuff. A big problem with Php is that it enables those kinds of people to build stuff that more or less works, without learning a whole lot of stuff. 
Maybe you are looking for something like [Webception](https://github.com/jayhealey/Webception)?
Probably, everything now, except for gui - moved to propel, some redundant classes removed, using whoops, propel, proper use of mvc, etc. Updated: https://github.com/sitilge/propeller
I remember seeing some GUI for PHPUnit reports and running tests, can't remember where though. I'm wondering: what kind of advantage does it have over usual test suite runner (CLI)? I remember using FitNesse in a previous contract, and I hated the guts out of it.
I know about that. It is a great tool indeed. But, what I have in mind is basically something on the lines of a tool that you install as a command and then invoke it in your project root and lo! you would have a web interface. Now all of this without any external dependencies. I am thinking on forking phpUnit to begin with and then gradually add features. But, my question is would you need one?
When you say differently, what have you on your mind?
What exactly would a gui provide? For me, I just want my test suite to be out of my way, which exactly what phpunit is.
Build stuff and put it on github! I've read that having (at least) one complete project to show is better than many small "proofs" of competence
When I started doing web development professionally I was actually 16. I have a small startup near my place where I did an internship, and my boss was really happy with me, so I started working there (which I've been doing for over a year now). I can only recommend looking for internships, it's the best way to really show that you ARE capable and it gives you the best likelyhood to actually find a job.
No, I don't really see the point. While I'm working I just want to run the test suite and move on. I use a build server for all the reporting and things you mentioned.
Forking PHPUnit is the wrong method to use here. Build a package that depends upon PHPUnit that sits as a layer on top. Otherwise your PHPUnit fork is going to fall behind in functionality and not be useful.
Hi, @teresko . If you don't mind looking at the update (https://github.com/sitilge/propeller), I've taken your advice into account and have rewrite most of the backend code there. 
I don't think you necessarily need to build on top of PHPUnit itself and work on handling people's app data right away. Instead, just build an online service that handles helping developers make the config files. Then, add what extra generic functionality you can on top of that. Once you have a solid web service, then address how to take that and add a layer within a package to analyze someones application and suggest a configuration and let them edit it in the WebUI. This way you are taking smaller more manageable steps to releasing something. With that, you aren't dumping so much engineering effort into the end-goal you want, but building a smaller still useful service to test the waters and get feedback. Then you see it is used loads and putting effort into the app package is worth it. Or you learn you get 4 visits a month after 18 months of trying to get noticed and it isn't worth your time building the app package. Focus on the minimum-viable-product here and move forward from there. That will help make explaining the concepts and additions easier. As well as allowing you to get actual usage data/requests to see what people want and if they are actually using the product.
PHeddit
Awesome advice! What do you think I should do to leverage GitHub and other OSS community users to make myself noticed in case I go with your advice? Like, basically how do I make this web service known to people? I am looking for *your* take on it. Thanks!
Yeah. I agree. I am still evaluating between forking and depending on it. But, I get what you are saying.
I really like this.. great work!
Which theme is that?
&gt;I think it is safe to say that &lt;uncited generalization&gt;. Stopped reading there.
Haven't seen a good idea in this thread yet. So lets analyse: The average developer works test driven (hopefully). It's annoying to re-run the tests over and over again. Would be cool if that goes automatically. Imagine: Whenever you change a test or the system under test, your test will run. The interface could simply be in a terminal, in a browser or whatever, that really doesn't matter. I want a live indication of the test/component i am currently working on, so i can bounce between update test till it fails, update component till test succeeds. So the task of executing the test is the only thing i could imagine being excluded from my workflow to make it better. But this has to work really really great and flawless, since running my test is just one key press away. EDIT: Ah and by the way, developers usually don't care too much for those metrics. Have more often seen developers using metrics to pretend their software is better than it actually is and lie to management through them, than actually using meaningful metrics to improve the software. EDIT2: Best "metric" i saw was the amount of configuration parameters. Will never forget how proud the CEO was, saying "we are so good, we got 48.000 configuration parameters" (or something like that), during his quarterly meeting.
phlapper? Then you can say that phapper is just a shortened name people use as a joke.
&gt; The days of shared hosting are over, which means I can set up a VM running Linux in a budget in no time Except now you have a whole server to maintain...
aww :( too bad I once had manager who thought knowing PHP enhanced your ability to learn C++ somehow which I couldn't figure out then. Btw, I was so intended on figuring that one out that I switched jobs gee :)
Not sure why you would want to "reinvent the wheel"; most CI tools, such as [Jenkins](http://jenkins-php.org/), can do all of that and more.
I first tried `mail` but it somehow didn't work as I expected. I knew that Swift Mailer worked pretty well for me. Its likely a big overkill to create this :)
People usually use gulp or some other task runner to watch files and run tests when they change 
That's not the open/closed principle. It isn't even remotely close to the open/closed principle. 1. Open for extension: In this context "extension" means inheritance. In other words no sealed/not-inheritable classes. 2. Closed for modification: Other than bug fixes, you don't change the code once it ships. If you want to add a method, see 1 above. The open/close principle is not "dhur, function pointers/delegates exist and I have to use them everywhere!". 
&gt; It's pretty important to distinguish 403 and 401, I'd also argue 404. &gt; But seriously, how hard is it to check the spec? there's only about a dozen you need to use for most cases. For web pages there are *half* a dozen that matter, due to search engines and other automated agents. While it may be tempting to pile web sites and HTTP APIs together, their use cases are too different, so it'd be unwise. An API wouldn't be crawled or exposed by a search engine to begin with. Its results may exposed from *within* a web page, but then we're back to talking about web sites, not APIs. If you are saying that using certain HTTP codes for APIs is important, I'm curious if you can substantiate it.
I use ENUM, I just tend to use it on mature apps where the list of possible values is well known, stable, and expected to be updated very rarely (if at all). It's an optimization, which is useful if utilized carefully. As for ordering. I feel as if you need to order by an ENUM, it's possibly not quite the use case for an enum. But if you should order by ENUM, possibly the order won't be singular and fixed, but contextual. You can order contextually enums by joining to a temp table containing the preferred order for enums (by relating an enum value to a number for ex.). P.S.: I've the feeling the author doesn't understand what N+1 is about. At least that's how it comes out from his paragraph about it. Maybe I'm wrong.
Well this article was 4 years old already... But anyway this... &gt; Quirk #1 You MUST send the function all of the variables you want bound to the scope of the Closure using the use keyword. This is different from most other languages, where this is done automatically (like in my JS example above). $foo = 'foo'; $bar = 'bar'; $baz = function () use ($foo, $bar) { echo $foo, $bar; }; I've said it before that forcing coders to manually import local variables with use statement, is by far the worst design flaw in PHP's anonymous functions/closures. The only workaround is to define a property with $this so it will be automatically available in the scope of closure. Consider this example: $this-&gt;items = []; $collection-&gt;each(function($item){ $this-&gt;items[$item-&gt;getID()] = $item-&gt;getName(); }); print_r($this-&gt;items); //it will print the array with ID/Name pair properly This way you bypass PHP's flaw on anonymous function/closure scope with local variables, and of course its available only after PHP 5.4. I really hope it will be fixed in PHP 7.2(not quite possible in PHP 7.1 since feature freeze comes soon), anonymous functions/closures can be a lot more useful if PHP doesnt make it explicitly tedious for developers to use it. 
it was an awkward sentence trying to make a different point, and should prolly be re-written
It will, just hasn't been implemented yet. 
OK but I'm asking why? The model of authentication for an API is specific to it. There is no single possible standard way of authenticating in HTTP. A token may be manually generated, or it may be returned as a result of an API call. Or there might be no token at all, with the API providing user and password every time. So how does it make sense to have generic error codes for authentication problems to which the API client should respond in a very specific way? What is the point of having a generic code for a specific response? In other words what is the benefit of returning those codes instead of custom error messages?
I refuse to use enums because a small int is just as effective, but won't make you cry for the downtime you have to take in the future when you want to add an item to your list. Because that's a full table locking rewrite. Wee.
Thanks for your thoughts!
We will see arrays with deterministic types, key names and sizes in the future, right? How will that look like? Shape-style? Will it have a short form? 
what is the point of not using standard codes? an app is consuming an api using an auth token. the server invalidates the token and next request a 400 is returned. the app doesn't know what to do. if you return a 401 it can enter the auth flow to obtain a new one. of course you could have a custom code/message, but that would be plain silly.
and add that banner to every webpage for C(++) learning ;) But I guess C has another "target group" 
Man up and own it. You really don't want to be associated with any "professional" that has a problem with the name.
Great work. UI is simple but very usable so I like it. Is it open source? I can contribute a few improvements.
We also already have the name inheritance, what's your point?
Can I get a poor man's version of &gt; A Closure is a function which binds references to non-local variables to local variables inside the function at the time of the Closure definition.
That's pretty much it.
&gt; PHP doesn't use lexical scoping, which I am eternally grateful for. http://i3.kym-cdn.com/photos/images/facebook/000/126/314/3cd8a33a.png
&gt; ?&gt; nope.
OCP isn't inheritance. It is inheritance all the time. The keyword is "all". The reason we call it the Open/Close *Principle* instead of design pattern or technique was the belief that it is universally applicable. Java's design was heavily influenced by OCP, hence the reason every class is inheritable and every method virtual by default.
Is there a reason not to use ?&gt; ?
Try msqli_select_db($datenbank) 
You can fix these warnings very easily replacing `mysql_` with `mysqli_`; if you compare the list of available functions provided by the deprecated MySQL extension [1] with the list of available functions provided by the MySQLi extension [2] you will notice that most of them share the same name with the exception that the new ones have an extra character `i`, this character stands for "improved" as you can read here [3]. [1] https://secure.php.net/manual/en/book.mysql.php [2] https://secure.php.net/manual/en/book.mysqli.php [3] https://en.wikipedia.org/wiki/MySQLi
Be aware that in a few of the mysqli commands, the order of parameters may be different. So it's not as easy as replacing mysql with mysqli in all cases. Example: mysql_query ( string $query [, resource $link_identifier = NULL ] ) mysqli_query ( mysqli $link , string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )
Here's what I used, not sure if it helps. index.php: &lt;?php include('connector.php'); connector.php: &lt;?php $IPAddress = "localhost"; $DBUser = "my username"; $DBPassword = "my password"; $DBAccesses = "the name of my database"; $con = mysqli_connect($IPAddress, $DBUser, $DBPassword, $DBAccesses); if (empty($con-&gt;error)) { } else { echo("Error: " . $con-&gt;error . "&lt;br&gt;"); die; } 
Odd that this starts by referencing "anti-enum" articles but then does nothing to counter the points that are usually in those articles. I pretty much always avoid enums. If I don't want to use a separate table I'll just use a varchar and be done. In either case I still have to write PHP code to limit what I can put in the fields, so enum gives no real advantage.
it wasn't my intent to rebuff those articles. it was to help people understand ENUMs a little better so they could make their own decision if they are appropriate for the case they are considering. "So let's do that - let's study the ENUM a little, see how we do things, what we can't do easily, and get comfortable with them so we can make informed decisions."
Hmm well your tone suggests the opposite. You say that you disagree with those articles, which implies that what's in your article will rebuff them.
You can use the library I developed in order to help to test static classes: https://github.com/shagabutdinov/moka Here is quick example of how to achieve what you want: $response = (object)['ActivateAccountResult' =&gt; 'RESULT']; $client = Moka::stub(null, ['ActivateAccount' =&gt; $response]); $webServiceHelperMock = Moka::mockClass('WebServiceHelper', ['::_connect' =&gt; $client]); $webServiceHelperMock::activateAccount(null, null, null); // RESULT
[Misread the question] Edit: Seems like it's tricky, but you could give [this](https://github.com/tomwalder/php-gds) a try.
&gt;in every programming language that has anonymous function/closure feature, theres no need to import local variables with use statement C++? 
But what about Datastore? I know PHP is used all the time with SQL-based DBs, but Datastore is a "NoSQL" DB -- and Google seems slow to come up with good support for PHP.
Get to your class, kids This code won't work because the difference is not as silly as just adding an "i" to the function calls.
Just a mechanical replacement would be the most stupid thing ever to do. The hassle with deprecation was *not* about adding an "i" to the function calls. 
True, that's not hard. The hard part for me is having to change everything to manually pass around some global $db variable instead of there being an ever-present _connection_ that just **is**. Any tips for updating my thought process in that area?
I mean, in C++ you have a choice whether to import local variables as a list, or not. So yes in C++ you dont need to import local variables. 
Haven't tried but looks interesting. https://github.com/pwhelan/datachore
That is actually pretty cool test library.
PDO does not support googles datastore...
Is there a curl version instead of a php api? Also, for oauth, look into the Google superproxy 
&gt;Instead of 401, my app returns 400 and this: {code: "invalidAuthToken"} WHY CAN'T YOU RETURN 401???!!?!?!??!??!??! 404 is a well known code for "resource not found", however I built 3 API's and when this happens the first returns "503", the second "200" and the third "FUCKU". amidoingitright? good luck with life you neckbeard you.
&gt; From this we can derive: All Anonymous Functions are Closures, but not all Closures are Anonymous Functions. Well, there are languages where anon functions don't form a closure, so that's incorrect. A closure always contains a reference to (rarely, if ever "is") a function. Which is also not necessarily "anonymous", in other languages. In JavaScript a function forms a closure even if it's named. A closure is an object containing references to a function + an environment. You can imagine it being this: class Closure { protected $function; protected $usedParentScopeVars; } If we'll be that specific, it matters, because you can have many closures pointing to the same function. So the lesson here is, I think, don't be pedantic, or it might turn out someone might out-pedant you. In PHP, when you create an anon function you do always get back a closure, you have no access to the function itself. So talking about all this is pointless.
JavaScript has this "var" thing, you know...
The problem is that you have no idea what mysqli is. [Read here](https://phpdelusions.net/pdo/mysqli_comparison). Then go tell me that one line is overkill compared to a screenful of code. 
Farewell 5.5! It was good times
That's what I am pretty much doing with the rest of the community of TDD guys :-)
farewell 7 rock!. 
But I'm still using mysql_*
How do you set things up so sudo doesn't require a password?
He probably uses C# which has a literal unsafe keyword.
I would paraphrase the article as follows: &gt; Many people are aware of a very long list of reasons not to use MySQL ENUMs. However, I want to point out that while all those drawbacks are true, you can still use them if you just *ignore all the drawbacks*. Which...I dunno, sure? I guess? Notably absent: 1. Any discussion of why you *should* use ENUMs 2. Any attempt at disputing all the standard reasons people cite as to why you should avoid them. I kept scrolling waiting for the shoe to drop, but the big conclusion was the breathless announcement that you actually *can* insert new entries into the middle of a list of ENUMs. &gt; This didn't use to be the case - and was one of the biggest criticisms of ENUMs No, that's never been a major criticism of ENUMs. In what I think is [probably one of the most popular anti-enum articles around](http://komlenic.com/244/8-reasons-why-mysqls-enum-data-type-is-evil/), the author lists 8 reasons to avoid ENUMs, and the closest he gets to that is noting that inserting new entries is extremely slow, not that it's impossible. For me personally, I find the obvious use cases for ENUMs are things like currencies, timezones, or countries. However: I almost invariably find myself wanting: 1. To get a list of all available currencies or whatever so I can populate a dropdown 2. Wanting to use this list in multiple places (eg, a currency column in my invoice table, my product table, and my coupon table, or whatever). ENUMs don't lend themselves to either task. There's no SQL query to get a list of all valid ENUM values, nor is there a way to re-use an ENUM in multiple columns.
Search for NOPASSWD in [sudoers](https://help.ubuntu.com/community/Sudoers) documentation.
Right, there also are some final fixes pending in the 5.5 branch. At least in the past when discontinuing versions, we've always released one last version after the _projected_ EOL date.
This could be useful on refactoring of legacy application. p.s. the problem is not with static methods (if it stateless it acts just like function) but with global state and global side effects. This is something like "mocking" filesystem or "mocking" database.
If you read OP's code you will notice that it is a beginners code, so my suggestion works very well; it is obvious that using this in a big project will surely break something.
Not what I was expecting. Well done OP.
Thanks for the reply. It looks like its a lot more straight forward than I thought. I've heard others complain about 1&amp;1 too but I've been using them for years in the UK and have overall been pleased with the service. I have just been onto their site and ordered an SSL certificate for £8 a year that I assigned to my domain and dropped a .htaccess into the root of the domain and it seems to be working great. .htaccess RewriteEngine On RewriteCond %{HTTPS} off RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
Now I really have to upgrade those Wheezy servers to Jessie...
That's a fairly arbitrary definition of open/closed. I'd be amused to see your source for this.
Object Oriented Software Construction by Bertrand Meyer, 1988. &gt; A class is closed, since it may be compiled, stored in a library, baselined, and used by client classes. But it is also open, since any new class may use it as parent, adding new features. When a descendant class is defined, there is no need to change the original or to disturb its clients. 
Okay, but your initial suggestion said nothing about types. You proposed a single character savings on instantiating new, empty arrays. On the subject of typing and shapes and such. I think the big issue there is a usable type checker that can take all these annotations into account and provide useful feedback at minimal (preferably no) runtime cost. The specifics of what the syntax looks like are secondary to the functionality IMO. Personally, I'd just as soon adopt HackLang's syntax full scale, not because I think it's ideal, but because it's fully fleshed out with a lot of corner cases dug into. Your syntax looks okay at a glance, but I'd want to spend some time examining how it interacts with other typing features.
Bad blog, Author cant even match the right screenshots to the code he has for example... He puts in &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;PHP on Azure&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello from PHP on Azure!&lt;/h1&gt; &lt;p&gt; &lt;?php echo 'The date is: ' . date('Y-m-d H:i:s'); ?&gt; &lt;p&gt; &lt;/body&gt; &lt;/html&gt; then the screenshot he shows doesn't even execute echo 'The date is: ' . date('Y-m-d H:i:s');
no
Then this could be a useful tool 
Wheezy is still under Long Term Support until [31st May 2018](https://wiki.debian.org/LTS/). That means the included software (minus [some exceptions](https://anonscm.debian.org/cgit/collab-maint/debian-security-support.git/tree/security-support-ended.deb7)) has basic security support until then. Same thing with CentOS/RHEL and Ubuntu LTS within their particular support lifecycles. Of course, Debian Wheezy came with PHP 5.4, which is really getting on a bit and it'd be a very good idea to start thinking about an upgrade path.
At my old job, we had an amazing test suite. It was in part because we contracted out thephp.cc to come help us. Arne, Stefan and Sebastian are all about this stuff. We used in no order: [phpmd](https://phpmd.org) [phpcs](https://github.com/squizlabs/PHP_CodeSniffer) [phpcpd](https://github.com/sebastianbergmann/phpcpd) [phpunit](https://phpunit.de) [pdepend](https://pdepend.org) [phpdox](https://github.com/theseer/phpdox) So what we did was we built a huge build.xml which is based off of Ant. The build.xml had all of these scripts with flags ready to be executed. We then piped it all up to Jenkins, which showed us all the metrics. Obviously for local development, it was piped to the console, except PHPUnit Code Coverage. But then in Jenkins, each had its own graph based on our team metrics we aimed for. Feel free to message me if you have questions.
O. K. I'm not as amused as I thought I'd be. :-) I usually find the best way to extend and configure a component is not by inheritance, so frankly it might be the case some of this advice is outdated. People were putting a lot of hope into inheritance at some point during the 80s. While the original definition of Alan Key didn't even have the concept of inheritance. P.S.: For extensibility, if I want god-mode powers, I make a configuration object using a Builder-style interface, and then I inject that builder (or the config it builds) into the extensible object.
Automated tools get you some nice wins, but they can only go so far. Having another human being review your code is still the best option to ensure that only good, maintainable code makes it into the codebase.
You should really consider implementing this with http://php.net/manual/en/class.directoryiterator.php
I had a recent conversation wether /s was necessary on Reddit. The guy claiming it wasn't (and 50 other people who agreed) did not recognize sarcasm in direct reply to his comment. Reddit is weird.
Cool. And here I am stuck still using 5.1.6.
Thanks for pointing that out. I went and added more code before publishing the post, but didn't update the screenshot. I added the date echo because before that, it was really just a .php file that just contained HTML and no PHP code. I should've given it an extra proofreading before publishing, though. Was that the only reason you felt it was bad, or was it just completely inadequate or unsatisfying? I mostly just created it to mess around with setting up Wordpress on my server, so I don't *need* it to be good - but I did run into a bunch of tutorials on this topic that had outdated instructions, so I decided to quickly write this up. I'd still like to make it as useful as possible, so any suggestions are appreciated. I upvoted you for providing feedback. I appreciate you taking the time to point out the dumb misake. 
Also after you have https all setup make sure to check the strength of your SSL. https://www.ssllabs.com/ssltest/ If you have weaknesses this tool will tell you what they are and how to fairly easily fix them. Another good tool(external vulnerability scanner) to run against your server is OpenVAS https://hackertarget.com/openvas-scan/
I'm not that guy, but... I may not always recognize when people are being sarcastic with me, but I would still prefer it if they didn't use the /s thing. Better to have a few go over my head than to have them all hit me in the ankles.
Unfortunately there is no mysqli_result().
If you're not sharing what you've tried and what the result was, it will be hard for anyone to point you in the right direction.
I put in a request for IT to upgrade our two webservers to 5.6 or 7 months ago. No reply to the ticket so far, so I'm stuck on 5.3.3
fwiw, I didn't do any down voting, you were already down voted when I stopped by.
We use all of [Scrutinizer-ci](https://scrutinizer-ci.com), [Codacy](https://www.codacy.com) and [Code Climate](https://codeclimate.com) for open source projects for free, and paid subscription of [Codacy](https://www.codacy.com) for internal projects. But I personally like [Scrutinizer-ci](https://scrutinizer-ci.com) the most. 
[removed]
What about reading the relevant part of the file with PHP, storing it in a temporary file (using tempnam() ) and giving it to read to SQLite? Then in a __destruct() you copy back the temporary file to the package. This is not as efficient but it would work. I don't really see any other solution as it would require the SQLite library to read the database only from offset X bytes in the file, and I don't think it has that kind of feature.
I'm not a big fan of the idea of having to manually write fake data to mimic what's in my real database so if I did get the resources to set up automated testing I'd probably still use our real database. Extremely complex queries against extremely old and frighteningly inconsistent data from 2 sources we have no control over is where 90% of our app's value is.
Good luck then, tell us if you find another solution, but I don't think there is something better. I looked at stuff like php://memory but that doesn't work because the resource can only be accessed by one file pointer, so you can not write your DB to php://memory and then read it with SQLite as it will point to a new resource...
Use a validation library, such as: - http://symfony.com/doc/current/reference/constraints.html - https://github.com/Respect/Validation - https://packagist.org/search/?q=validation
Bingo. SOLID is just a marketing term to sell books and conference appearances; it was never actually a good way to write software. Hell, ISP is a compiler optimization trick for languages that use header files (e.g. C, C++). It has no application in Java or C#, so in a desperate attempt to "be SOLID" people have turned it into some vague bullshit about using abstract interfaces. 
&gt; I usually find the best way to extend and configure a component is not by inheritance, so frankly it might be the case some of this advice is outdated. I completely agree that it is outdated. My objection is to people going "Whee! I'm doing SOLID! You should do SOLID too!" without actually understanding what it means.
Thank you so much, this definetly helps me a lot :D
Yeah, my bad. I think you need to provide the db connection as first parameter, but you could also send the dB name as fourth parameter to mysqli_connect I know the situation, I attended also "Berufsschule" so I know how they are teaching you PHP. I would guess the knowledge of the teachers are around 10 maybe more years old. OOP is not arrived there yet. That's why I wanted my answer as simple as possible to get the job done and don't confuse OP with the whole "you're doing it wrong and please learn a complete different form of programming" thing. Sorry if I offended you by my assumption OP. 
They are probably using CentOS with default repos
You might also want to redirect HTTP requests to their HTTPS versions, if you expect some users to try to type your site address. 
My best guess is you are trying to solve the wrong problem. What exactly your ultimate goal in this? I don't use SQlite that much, but it is a safe bet that you cannot do it. The SQLite file must contain the pages count at the beginning of the file, and there is no way to modify this behavior as far as I know. 
I hate the programmers on this fucking site sometimes. If you even mention doing something that isn't the latest and greatest best practice you've committed some cardinal sin and must be down-voted to oblivion. Like no one has ever had to dive into the sewers of some ancient rusty code base and just _fix things_ because the pipes have burst and shit and piss are flying everywhere. If fucking re-writing the mysql\_* API as a wrapper around mysqli and then performing a search and replace will keep the rusty plumbing running for another day then _good enough_. Oh, Are you offended I used a global variable for the connection? I'm covered in shit and going home, I don't care.
That's it, exactly
I, of course, would recommend using [PHP Shift](https://php-shift.com). It automates upgrading your code to match the latest PHP standards and versions. In this case the *MySQL Shift*. It's better than band-aiding the issue with a shim as you're actually upgrading your code. In addition, there are several functions that changed. So a find and replace, especially on a large project can quickly turn into a mess. And I say *of course* as I am the creator of Shift.
Yup, that's the plan! 
Meh. If you ask someone "what's wrong with php?" you will hear "mysql injection!" as on of the top answers. The community responding to any mention of unsafe sql practices with downvotes, is a result of that. It gives a clear signal to everyone that the days of crappy sql vulnerabilities should be in the past. So if you want to keep your script running for another day, do your replace. We all have to do what we have to do. But don't expect sympathy from the community. It's gotten too much shit over this in the past. 
I don't think this is only legacy applications problem. I see a problem with modern code which was written with very modern frameworks like Laravel and Yii2. And yes, the problem is with a global state which is accessible statically. But I can't change this thing. I can just make a workaround for this problem. 
If i dont use...action..then will the page reload...???? if i click submit
dotdeb.org has php5.6 packages for wheezy
Witch ever method / framework feels most comfortabel for you. 
Given that they hinted they started using Symfony 2 extensively, I would build that test in Symfony. Even though it's obviously overkill to use a framework like Symfony for a simple application, it shows that you know the basics of the framework. That's the reason why it's a simple app: you need to fetch en persist objects from the database, write one or two controllers, create a few forms. That's just enough to cover the basics of Symfony.
[removed]
It is not actually your answer offended me, but the voting that was quite high at the moment. I believe you understand the feeling when you see a wrong answer at the top.
The Debian project will presumably do what they've always done - release their own PHP patches to the EOL versions until they end LTS on their distros. If so, you're fine to keep a Debian server on 5.4 or 5.5 if you really must.
For now, 5.6 is still supported and still comes bundled with `mysql_*`, but you should upgrade as soon as possible, yes.
Well, everyone has their priorities. Some just don't care about security.
&gt; I do agree. While you can build unsafe apps in any language, and safe apps in PHP, other languages tend to have a better ecosystem and awareness of core security fundamentals. As you get involved in the communities and ecosystems of those other languages (Java, C#, Python, Ruby, Node) you might be disappointed to find that the amount of ignorance and crap is about the same.
can't tell if you're being sarcastic or serious?
As the others have said, contribute to an open course project is one of the best things you can do when starting out, also release an open source project and put the code on a public repo. Your personal websites still count towards a portfolio, it doesn't matter who the code was for as long as its of a good standard. Most job adverts do mention education but its not always needed, I've found the places I work for often put it in job adverts but most of time the people they take on don't have any education its all self taught. If I was hiring I would rather hire someone with a full portfolio than someone who has been to school. I would send a few e-mails to agencies in your area and ask if there are any internships or even freelance contract work, the worst they can say is no we will keep you on file.
A tech test is your chance to show off. That might mean showing off how you can do anything in raw code/sql, or it might mean showing off how well you can use all the latest and greatest tools and techniques. Personally I'd go for the latter, tech test problems can normally be solved in a handful of lines, but where's the fun in that? You need to be demonstrating not just that you can solve problems in code, but that you know how to write good, clean, readable, testable code. Full-stack Symfony might still be overkill though - how about a micro-framework like Silex or Cilex? Don't forget the tests! 
I use enums fairly often, but not at the database level. They're declared in PHP and stored in the db as varchar columns. Type hinting + ORM handles making sure we have valid enum values coming in/out of the db. Enum columns in MySQL I've found to be a bit of a pain.
write it in php 4 so they know you have been around 
persistence is and should be an implementation detail, so don't go building a crappy ORM. Show them you know how to build a good domain model instead. Throw in some design patterns, make use of the Symfony EventDispatcher and other components like Console... plenty of changes to show off your skills.
In PHP yes, in other languages, like JavaScript, it doesn't matter if it's named or not, it creates a closure. This limitation (only anon create a closure) is a PHP-specific decision that has to do with preserving BC and its existing scoping rules, rather than something intrinsic to closures.
Probably it's better that the original definition has been distorted, because the original context of O/C is not quite relevant in 2016, while "SOLID" as a buzzword is highly relevant. At least it teaches people to create more reusable code by making it more configurable, while remaining encapsulated.
&gt; How are all these principles different that what we used in 2013? mainly for SEO purposes :)
Please, please, please DON'T build an application based around your Database. The persistence/storage layer should be an implementation detail. Just build your application without any thought about how you should store it. Start of with a _model_ what your application is trying to achieve. You want something to do with `Pies` ? Make a `Pie` class. Maybe you want multiple of those `Pies` grouped together. So you could make a class that holds multiple instances of `Pie`. We call this class `Pies` maybe. It's just a collection of `Pie`. Start out like this. Simple. Without thinking of your Database. The organisation of your classes will emerge from working like this. Highly recommend watching this video: https://youtu.be/hALFGQNeEnU
I'm trying to compile a [resource directory for PHP programming on a Raspberry Pi](https://github.com/PiPHP/Resources). Very much accepting suggestions for links and libraries to feature here.
&gt; I see most teams use frameworks and tools mostly as docs suggest (with minor differences). Yes, nobody has to use statics, but still, everybody uses it here and there. Well, that's the difference between having a team of juniors, and a team with a good architect/senior on-board.
There is no API as i know but I am not upto a fraud. What kind of answer was that?
Yup, they gave you the hint. Use symonfy and doctrine. go get the job, is it over complicated? yup, but guess what, when you get to that company being that they are using symofny2 extensively, be prepared to develop overcomplicated solution in symfony.
Holy balls, vim-surround makes me so happy!
It's amusing that you are cherrypicking stuff from wikipedia or alike. Here's the quote directly from his book's **second edition**, in which he, himself, had made huge corrections in open-closed principle section. &gt; This double requirement (open and closed) looks like a dilemma, and classical module structures offer no clue. But inheritance solves it. A class is closed, since it may be compiled, stored in a library, baselined, and used by client classes. But it is also open, since any new class may use it as a parent, adding new features and redeclaring inherited features; in this process there is no need to change the original or to disturb its clients... (§14.7) Can you notice how he uses the words "requirement" and "solves it" in the first two sentences? He **never** states that inheritance **is** a open-source principle. Rather, he specifically states that inheritance can be used to "solve" the open-closed principle dilemma. Basically, he introduced a term and gave the easiest way to solve it. The book is not aimed on providing and classifying all ways to achieve each of the principles.
When I did my tech test, it was also a very simple task. I did it in raw PHP first, and then showed how I would implement that logic in the framework they used - that proves that you can do it both ways, on top of being able to implement pre-existing legacy code into Symfony applications. It's up to you whether you want to do it that way, but if you do end up using Symfony try implementing it with [Symfony Microkernel](http://symfony.com/blog/new-in-symfony-2-8-symfony-as-a-microframework) instead of Silex, since it's a recent addition to the framework it could earn you bonus points for showing you are aware of the latest additions to the framework :)
They are giving the complete list away all the time right after the draw. So it's not like hacking their db to obtain huge amount of data. Instead of using given list and uploading to my server and making queries from my own data i just wanted to use directly from their own system. English is not my primary language so i start to think if i couldn't explain what i want to do :/ 
Yeah, this is one of my pet peeves, having to spend so much time looking for a basic description of something. (There's a charity, http://www.worldbuilders.org/ that got pissed off with me for asking *what donations to the charity are actually for*...) There actually *is* a page giving a basic description of PHP_Depend: https://pdepend.org/documentation/what-is-php-depend.html In a nutshell: &gt; PHP_Depend is a small program that performs static code analysis on a given source base. It produces some stats and shit.
Might http://php.net/manual/en/function.shm-put-var.php be useful to look into?
Is this some kind of ad?
As mentioned by others, use Silex if Symfony is overkill. Or the hint was perhaps that they are using modern PHP, so use Composer and include as many Symfony packages you need to solve the problem (but not the whole framework).
I understand the premise of these "tech tests". But as a contractor, now more seriously looking at full time employment two things strike me. Firstly the time and investment to show off your skills adequately. Second the potential to alienate candidates that currently achieve drastically higher pay, with less time down who may not fully align, but are wiling to learn and adapt as necessary to your stack and processes
If older browsers don't matter, headers are even better. Checking the origin header is enough then. No need for tokens at all.
Since you didn't link to the lottery website we can only speculate. Others have already commented that not having a public API service is obviously a sign that they don't want anyone to access those results from anywhere but the official website. I believe you misunderstood what /u/kbst said about using a scrapper, you assumed _"hacking"_ immediately but what he tried to say what specifically about the ToS _(Terms of Service)_ that you must read before you try to _(with any technique)_ obtain the information without their permission, they can sue you if you are not careful enough; if they don't want you to post the results in your website _(not matter if they are public after hours of the game)_ then don't do it, simple as that. Now, if you really want to obtain the information from that website without an API you can try to emulate the HTTP request that the form is executing and then parse the response. However, if they are using a [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery) protection to prevent this you will be left without any alternative. Do this the right way and ask them directly if they can offer a way to display the results from their website in a external domain, explain your idea, and wait for their response.
Absolutely, but that doesn't mean the software or libraries you use will continue to support those versions (which is why it's a good idea to think about upgrading, even if it's not strictly necessary).
The parent comment is actually right, not sure if you were the one who downvoted it. I believe that you don't understand how a copyright works, nor what the purpose of a [ToS](https://en.wikipedia.org/wiki/Terms_of_service) is. It doesn't matter if you believe that doing what you want to do with that data is not illegal, if they stipulate in their ToS that you can't repost their data then don't do it, they can send you a [DMCA](https://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act) or whatever the equivalent of this is in your country in order to take down your website for copyright violations, and that is only the beginning, they can also sue you, and put you in a lot of trouble if they really want to; all this just because you don't want to contact them first.
I understand your intention but you have to be more careful with your examples. See, in effect you have all-new PDO used the same way as old mysql ext were used - **adding variables directly to the query.** To me it's anything but a good security example. 
don't, use a cron job that runs elevated without sudo and spend much more time identifying, mitigating risk involved.
surely this is more of an argument for the superglobals including $_SERVER, $_GET &amp; $_POST to be deprecated or at least hidden behind a namespace so trivial modifications to code can mitigate risk?
There is `PDOStatement::fetchColumn()`
[removed]
[removed]
I am willing to help, but explain the problem in post please!
It wouldn't hurt to separate your dependencies, and write it in a testable manner. If I were you, I would also mention why I used Symfony. Basically any class that you can use easily with Symfony will keep you ahead in the competition. 
Did they give you any rules about using third party libraries? Did they give you any rules at all?
If there is a CSRF token in the form, load the form again, and submit along with the token. 
Yeah, sorry for that 
No problems with your English at all :) If you're not wanting to store the data yourself you would have to run the scraper for each request, which would put unnecessary load on their server which I would imagine they wouldn't like. Personally I would hit their server once, store the result and all subsequent requests would pull data from your server/db Hope this helps 
It's a good news ;)
It's one of the biggest right now
Don't offer your services to this person as they [are a scammer](https://www.reddit.com/r/UniversalScammerList/wiki/banlist), Control+F, or Command+F if you're on a Mac, and will scam you.
Don't offer your services to this person as they [are a scammer](https://www.reddit.com/r/UniversalScammerList/wiki/banlist), Control+F, or Command+F if you're on a Mac, and will scam you.
Don't offer your services to this person as they [are a scammer](https://www.reddit.com/r/UniversalScammerList/wiki/banlist), Control+F, or Command+F if you're on a Mac, and will scam you.
This should get you started... https://gist.github.com/geggleto/9693fb1895c04b2b8d4abfde2bb71282
I too need help, I need to create a text around the rectangle i created. Also, I need the mods to wake up.
Yes I was the one who down vote it and NO; that comment was not right. I understand TOS may not let you use data however there is no TOS and no API. Reason for no api is not because they don't want anyone to use it it's just because they didn't care to add one. Thanks for all your concerns but question was if i can or can not. Reason i want that was it's not easy to use their own site, it's amateur and you need to click 2 link to go that form and again it's not because of security or else, it's just website is not user friendly (: I wish i asked the question without lottery word because i just feel a bit disturbed.
From the sidebar: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
&gt;Ok. I'm not interested in this kind of fingers-in-ears-shouting-lalala kind of conversation... That description seems to better fit your comments...
Thanks for your time to answer. I give up about using the external form actually i give up about the idea at all. It's far beyond my computing skill. I thought there could be an easy way to do it however there is not as i understand. Cheers.
I am trying to determine if SQLite is a viable alternative file format for PHP archives. I'm aware of all the file formats that the `phar` extension already provides. Thanks for answering the question. I was afraid that there was no way to do what I was hoping to do.
Thanks for putting this together! I've got a couple projects in the works and hope to add them once I make good progress.
Noooo I loved that site! :-(
Every PATCH upgrade for the Yii2 framework has consistently broken something. You can find what it broke this time on the `UPGRADE.md`, on the official repository (it's crazy that you even have to read an upgrade guide to upgrade between PATCH versions): &gt; Part of code from yii\web\User::loginByCookie() method was moved to new getIdentityAndDurationFromCookie() and removeIdentityCookie() methods. If you override loginByCookie() method, update it in order use new methods. &gt; Fixture console command syntax was changed from yii fixture "*" -User to yii fixture "*, -User". Upgrade your scripts if necessary. From the `UPGRADE.md`: &gt; The following upgrading instructions are cumulative. That is, if you want to upgrade from version A to version C and there is version B between A and C, you need to follow the instructions for both A and B. Which means that if you're running 2.0.0 and want to upgrade to 2.0.8, you'll have to apply the suggested fixes in your application code from 2.0.0 -&gt; 2.0.1, 2.0.1 -&gt; 2.0.2, 2.0.2 -&gt; 2.0.3, 2.0.3 -&gt; 2.0.4, 2.0.4 -&gt; 2.0.5, 2.0.5 -&gt; 2.0.6, 2.0.6 -&gt; 2.0.7, 2.0.7 -&gt; 2.0.8. That's 8 sections of an upgrade guide, with multiple fixes, just to upgrade to a different patch version.
You can also have it generate an XML version and load that directly into your IDE (PHPStorm at least), and it'll annotate each line to show if it is covered by a test or not.
What is great is the PHPStorm integration with some of these. Keeps me from having to ask for an expensive Codacy account.
&gt; and no, response headers won't do either Why not?
You can also look at [letsencrypt.org](https://letsencrypt.org/) for free certificates.
Personally I think this would be a great reference to have. As someone who only has a passing relationship with most of Symfony and not enough time to explore it, a series of articles covering these topics would be welcome information. I would advise putting it in multiple articles, though. I'm sure there's more than enough content to few up a few blog posts here and the outline you have already seems like a good place to start. Case studies and real world experience are always better than just another rehash of the manual too :)
I suppose I'll need a blog then :)
On a side me what unrelated question, is PHP really a language to code golf?
Sorry I didn't mean to offense you or anything. Technically, it is possible to mimic what a normal user would do in a browser. The easiest way would be to submit the form with Firebug net inspection tab on, and you can see what data are being submitted. Now, replicate the payload, and do the request on your server. Curl makes it easy. There are plenty of resources online. The lottery web site admins will probably notice your IP address making several requests or requests with a pattern, and may eventually block you. There is a big chance the simply woulnt care. 
&gt;&gt; I am trying to determine if SQLite is a viable alternative file format for PHP archives There isn't much we could do with user land code. 
Still not good enough. $name can have _'s and ?'s in it. It's perhaps not a security vulnerability, but it won't do what was intended.
&gt; by default. Asshole.
This would work only if you never use the int value.
Any language can be golfed and they all tend to have some unique challenges to them. PHP has a lot of neat tricks that lend themselves to code golf: loose typing, variable variables, short ternary, preg_replace /e, and bare strings to name a few. I'd definitely recommend giving it a try, it can be a lot of fun.
Not the first mocking framework of such kind but look like a tiniest solution I ever saw. Could you explain how does it work? ;)
Codacy has the best UI/UX among them but yes, repo limit really sucks. You should try Code Climate, they analyze unlimited repo and it is the fastest one among them.
https://laracasts.com
Preferably an all in one source to learn everything I would need. It would be a rather simple site, sign up, point conversion function, iframes, and php calling. sorry if my terminology isn't right..
This maybe a stupid question, but what is phpgolf?
Yes, unless you end up using a character that's non-ascii. And, usually, it doesn't go bad in mysql -- it's more when dealing with strings that have to pass through server side, to client side, REST, off to other places, etc. UTF8, vs utf16, vs mysql's version of utf8, vs. ascii, so and so forth. It _can_ get pretty messy, and I've definitely had it go pear shaped before. Doesn't mean it usually does, but, I've *never* seen ints get screwed up. (I imagine there's a situation in which even that can happen, but it's supremely rare, as opposed to having something like `diæresis` or `tréma` get your code's knickers all twisted up.)
It's completing some small task in as few characters as possible, like echo all the verses of 99 bottles of beer on the wall.
It is/was a website that proposed problems to solve with php, the aim being to do it in as few characters as possible. One would upload his submission to a given problem (example : "print FizzBuzz from 1 to inputed x with each 'number' on his own line"), and it would be tested by a script to verify the program solves the issue, and there's a leaderboard of lowest numbers of characters that solved the issue. See https://en.wikipedia.org/wiki/Code_golf
[Nitpick-CI](https://www.sitepoint.com/nitpicking-over-code-standards-with-nitpick-ci/) is kinda cool for automatically checking every PR you make and making sure it's PSR-2 compliant, which is arguably one of the most widespread and useful standards out there right now. Handy when that's all you care about or want to remove that aspect from your CI (or aren't using a general CI). I personally use Scrutinizer rather religiously, it's quite excellent. For local checks, what others have suggested is pretty good. In light-weight projects, PhpStorm's built-in PSR-2 checks, alternatively reinforced by PHPCS are perfectly sufficient, and for a proper local CI setup, maybe see [Jenkins](https://www.sitepoint.com/analyzing-php-project-jenkins/) which you can tweak and configure to no end.
They're only useful as part of a toolset, really.
&gt;got pissed off with me for asking what donations to the charity are actually for... I hope you didn't donate to them. Completely off topic, if you are interested in donating effectively, have a look at effective altruism. More bang for your buck. 
Ah, so "the keyword is **all the time** ^^by ^^default ". 
Make it so you can swap out stuff and such... 
I don't have much to add beyond what's in the linked material, but let me know if you find a way to do I2C without the hellscape that is `ioctl`. I've yet to find a way more sophisticated than wrapping `sudo i2cset` without switching to a different language 
Do you need a full stack app? Laravel is your friend. Do you need some super basic server side logic w/o the full stack? Raw PHP + HTML + CSS is the ticket. Do you need a static site? HTML + CSS are your friend. 
I second this, I have actually wrote an LDAP implementation too because the one that's shipped is too basic for my/our needs. I want to see if I've overlooked anything as well.
Screw the nay-sayers. I come across a lot of code from a few years back and their SQL standards are horrendous. I agree that the content isn't necessarily shockingly new, but the amount of people doing basic security right is shockingly low. Another hit on Google for "SQL PHP" that leads to proper PDO is a welcome addition in my book. Extra to this is because mysql is removed in php7, people will be googling how to do their mysql properly now. So the timing is right.
preg_replace /e was deprecated in 5.5 and removed in 7
That kind of sucks.. ._.
U gonna get a lot of shit for saying that ere m8.
[RTFM](https://github.com/yiisoft/yii2/blob/master/docs/internals/versions.md) - 2.0.9 not patch 2.x.Y: minor releases - Should be 100% backward compatible to ensure worry-free upgrade. Only a few exceptions are allowed which are documented in UPGRADE.md You must read UPGRADE.md before upgrading.
[PHP The Right Way](http://www.phptherightway.com) might help.. 
Why does everything have to follow semantic versioning?
It looks like they want You to work with Doctrine. I would recommend using Symfony and create entities for database schema: http://symfony.com/doc/current/book/doctrine.html
It works just like most of such frameworks: it generates class source code with arbitrary class name and evals it through default PHP's "eval". It uses reflection abilities of PHP in order to investigate final code that will be evaluated. In order to stub existing classes, it inherits from it. Such approach makes possible it to work with any modern version of PHP without requiring PECL extensions.
I thought a dataset couldn't be copyrighted, only the way that it's displayed. Display the same data differently, and it's a new "work of art" or whatever the legal terminology is.
Yeah Php devs complain about php stigma and then collectively shit on tools that they think are inferior 
+1
I like using Zurb Foundation for responsiveness. Bootstrap is good too but it dictates more design choices for you, your site will look like a Bootstrap site without customization. Foundation is a little more bare bone design. As for PHP, if you have absolutely no PHP experience and don't want to learn a new language AND framework right off the bat, try Wordpress, make a simple theme, and put all your stuff in the functions.php file. I know it's a sin to mention WP in this sub, but it'll handle user sign ups, pages, templates, API, etc etc. Once you get a better grasp of PHP, Laravel would be a great step up so you're not running all that bloated WP code just for a simple web app or whatever it is you are making. But if you want to get up and running right now, WP is definitely the way to go, don't mind the elitist crowd, they're salty.
[Magnificent view](https://www.reddit.com/user/Nehasharma007)
I'm actually currently weighing up a few technologies to build my own lightweight, intelligent service registry. I was flicking over the web to see if this is just NiH or I have a genuine use-case. I found this to be an interesting repository. I Generally like a lot of things the FT and other media outlets come up with, interested to see what others think. A few things that struck me * No Tests * Seems some basic APM functionality is handled * Some interesting choices for implementations of interfaces (likely to stop code spaghetti, I think it might end up that way).
Personally I'd do this with analytics instead of PHP. You'll get a lot more information out of analytics, and you won't have to worry about the SEO implications of a 302 redirect. But, here's how you could do it manually with PHP. &lt;?php // Pass in some kind of reference via GET variable // For example: http://www.mysite.com/redirect.php?url=myproductpage.html&amp;source=twitter $redirect = $_GET['url']; $source = $_GET['source']; $referrer = $_SERVER['HTTP_REFERER']; // Sanitize, check validity, etc. of your redirect // Now log it to a file or a database // Then perform redirect header('Location: http://www.mysite.com/' . $redirect); exit(); ?&gt;
Not arguing for ENUMs, but the problem with not being able to list them, or to share them across tables is a MySQL issue. PostgreSQL, for example, creates an ENUM type with values in it. You would then apply that type to any number of tables. It's also possible, but a little ugly, to query the list of values. Even still, I've gone from the camp of being in favor of using them, all the way back to mostly opposed. It's just too hard to change values to old data when something changes. Currencies can and do change. Countries can come and go. Timezone are politically decided upon boundaries that can change on a whim. Granted, these kinds of things don't change often. The fact they CAN change has to be taken into account. Reference tables are generally a better solution. For simple lists of absolutely constant values they can be handy. There's just so few things in this world that fit that category of data in my experience.
Also if a brown out causes a complete and total corruption of your database that's pretty bad too.
of course you'll want to take more than 60 seconds, and ensure you use the endpoint that automatically allows for sending more than the single SMS limit...
Perhaps the service is just rate-limited :)
I'd suggest skipping CI and going straight to Laravel. While there are missing features and security concerns, there's out dated styles of programming in CI. These styles are now considered best practices. Why not just figure out the best practices now instead of having to unlearn bad habits taught my CI.
funny, doing alot of interim/secondment jobs and symfony is by far leading from my exp, literally encountered laravel only 2 times, but thats alot of enterprise level of code. for simple websites another story i guess
Yes I meant Laravel is more common in new project but symfony is very common in entreprise level project that are still supported
This is a completely off-topic question for this subreddit. You want javascript, not php - you certainly cannot run any php in the chrome console..
How is this better than any of the other alternatives out there? Probably makes more sense to actually make something useful before you start asking for money, no? I tried it out quickly, and as far as I can tell it's basically just a mirrored textarea between multiple clients. And a chat. Why does it deserve $3500 worth of others' money?
lol, it's a great service. I've checked the tutorial does ensure that they are using the non-deprecated resource. I Just remember in 2014 going to the Twilio Signal CX Roadshow event in London upset that they limited me to like a tweet of characters. Turns out their older tutorials linked to an SMS resource, and the developers I was working with and me should have RTFM not just skimmed. The thing is at their price-point, with their features it was probably just more convenient to skim as it was our sole problem and not a large part of what we do. Their head of evangelism showed me how to use it in a different way, pointed out to RTFM. This manual is much nicer, although it's still a little inconsistent to read. I'd rather they spent their time on the core telephony voice and messaging than all the other side-nonsense they offer; maybe improve the docs. For anyone that is interested they have a really cool learning resource on [radical skills](https://twilio.radicalskills.com/)
I am kinda surprised that you receive so many wrong answers. Anyway, here's how you can easily do that: var e = document.getElementById("send12"); setInterval(function() { e.click(); }, 10); This for example would send roughly 100 clicks per second, depending on wether the browser can handle that. Now, how it works is pretty simple: First, we get a reference to the element. This has two reasons: One, it's easier and cleaner to write that once and have a variable everywhere else. Two, it's faster. Next up we define a function to be executed on an interval, which means it's executed every n milliseconds, where n is the second parameter passed (in this case 10). The first parameter is the function to be called. I just define an anonymous function which triggers the click function on the element. Easy as that.
You have to be kidding, I swear I was about to start making my own GPIO library for the Raspberry Pi in PHP about a year ago because there was nothing else available at the time, but for some reason I abandoned the idea. And now I see that someone actually [did it](https://github.com/PiPHP/GPIO), this is absolutely amazing! Not only I'm going to try this but I'll also try to contribute to it if I can, thank you for your hard work.
I meant with a physical mouse. A "CLICK" involves clicking and releasing parts. But yeah you are right when you trigger a click, it Des not trigger mouse over, mouse down/up events. 
The alternatives being..? I'm asking because I don't know any, because I haven't had any need for this. :)
I highly disagree with this. We use it to build highly rich interactive finical applications. I completely disagree that it's the "Wordpress" of frameworks considering how poorly Wordpress is written.
I rather just use the static calls instead of wrapping things and abstracting things and making things more complicated. 
Wait what? 
Your vendor directory should not be tracked by git
It *is* doing that, but it's doing it in a somewhat awkward way, which makes separation of concerns difficult, limits testability, and promotes coupling throughout the app. By the time you've worked around the awful router, accepted the limitations of the controllers, given up on having decent template support, learned how to use the very clunky models to load data from the DB, and come to embrace the really horrible `-&gt;load()` syntax, you'll have a working app, and it'll still be MVC. But in comparison, a Symfony app is going to be a much better example of MVC. (In my view, at any rate.)
I literally was having this exact same problem yesterday. Apparently PhantomJS does not like being exec'ed from PHP. https://github.com/ariya/phantomjs/issues/11463#issuecomment-232035624 I ended up using wkhtmltoimage instead. 
What's "awful" about CI's router? Other frameworks do have better routers, but CI's is perfectly fine.
&gt; I want to learn MVC, and CI was the only one that instantly made sense and clicked in my head Everyone else seems to have missed this. CI is the only framework where the documentation actually makes complete sense for beginners. It's weird that other frameworks still fall short somehow.
whats the best way to install laravel?
 composer global require "laravel/installer Then: laravel new $website Then just make sure the document root for the domain you're loading it off to - in this scenario - goes to ./website/public Edit: formatting.
Ask if they can install the IUS repo and just install those packages, really isn't too hard and you'll be the one who has to worry about the code updates anyways... Not them.
I finally got them to respond... they asked about my testing plan for making sure the existing code will work on the new version. So now I need to requisition a new test server with PHP7 on it, which they'll have for me any year now (I kid... it might only take 3-6 months)
I can second this. Use it to make that quick leap, and then get out as fast as possible to something better
All I see in /r/PHP is the Laravel hype-train and people recommending others to simply jump to it 'because it's the cool thing to do'. There are tons of other frameworks that work exactly like or even A LOT better than Laravel, but I guess the 'it's for web artisans' bit got in their head. OP, /u/kiiraklis94, use CI for as long as you need it to understand the main idea behind it perfectly, even write a few projects if you want, it's perfectly FINE. When you need to think about super awesome technology, high traffic and high performance, don't look at laravel, look at ALL the options available, do your research and then choose the one that fits the most your needs. Slim, PhalconPHP, Zend Framework, Symphony, Laravel, Yii, etc. There are at least 20 more production-ready and well-established frameworks. Out of all frameworks available for PHP, CodeIgniter eats them for breakfast in terms of usability, ease of access and ease of learning for beginners. I'd say, right now, CI is your best choice BY FAR. All other frameworks get too technical waaaaay too quickly. For example, I love PhalconPHP and we've been working with it for a while, yet the documentation is quite lacking or 'hard on the eyes'. I even needed to check the source code in C (now it's in zephyr) to understand the inner workings of a few classes. That's not good for a beginner, I can't recommend you Phalcon right now. The same happens with other frameworks as well, Laravel, Symphony, etc. (though they are written in PHP :P)
that's already been addressed in several places, and is not true. the article is intended to be neutral on whether or not they are "evil". It's main point is to dispel "facts" like yours &amp; let people understand ENUMs so they can make fact-based rather than rumor-based decisions.
I think it's best to avoid it. With so many good PHP frameworks out there nowadays, its hard to justify diving into a mediocre, outdated one just to save yourself from encountering a learning curve. I say dio your toes in with a microframework like Slim or Silex and build from there.
You really should try to convince your new boss that databases are a good thing.
[removed]
There are some parts that could improve. Since you feedback is welcome, I'd list a few anyway. - Add namespaces. Composer requires PHP 5.3 (which added namespaces) anyway, so you can use them with 0 compatibility issues. - Follow either PSR-0 or 4. 4 being preferred. Autoloading will remove several of your require calls. - "api.php" file usually holds information about the API. - This solution probably makes the comment system portable. But so does SQLite. If I were a boss, I would be rather more impressed with an SQLite based system. - Watch out for XSS vulnerabilities. - and tests of course :)
Slim is not MVC.
I can say this is true. CodeIgniter is much more beginner friendly than the others. They delve into design patterns and advanced practices too quickly.
Hey, if you are a beginner then it would be worth brushing up on your basics in PHP before getting into web development. A couple of key resources I'd recommend: - Codecademy's PHP track - Laracasts' general PHP tracks (and then their Laravel ones!) - exercism.io's PHP exercises will help you gain confidence in your PHP abilities. While Laravel definitely has a slightly steeper learning curve than CI, it is for good reason. CI is outdated and doesn't follow MVC very well. It will teach you some bad ideas and make your transition to bigger and better things that bit tougher. Best of luck and enjoy! If you need a hand or anything PM or post back here :)
I hate to be rude, but this is terrible. http://www.phptherightway.com/
As far as I can tell, this is a higher library. `Hoa\Websocket` provides the connection logic (client and server) and the protocol implementations, while `Thruway` provides routers on top of the protocols.
Ha... I WAS RIGHT!!!!! I told him that SQLite is non-blocking and that JSON is not a _storage_, but a data _exchange_ format. I doubted that JSON thing so much, that I've scrapped file\_put\_contents in favour of using fopen + flock... Thanks for supporting my point, I may make a branch for SQLite and show THAT my boss instead. If he won't like it, I'll _have_ to use JSON. Then, what XSS vulnerabilities??? To do ANYTHING besides reading the comments, you need to be logged in. I could play around with crypto-stuff, but my mistake was I've build the auth system around the existing product, and not vice-versa (and as we all know, security should usually be top priority). I did state that I am planning to move to autoloading... I mean, as long as it's a concept, there is no need for it, but now that the deadline is in 5 days (this Saturday), I should really get it autoloading! And I planned on making it compatible from PHP 5.3 onwards anyways (our company, not disclosed for security reasons, adopted PHP 7 anyways). And I will add unit tests (planned to do so today). And what do you mean with api.php containing "api information"? It is the only file which is directly accessed from the front end using AJAX/GET/POST reqs, hence, it's an API. TL;DR: SQLite is better than JSON, what XSS, autoloading+tests will be used, api.php is an api. And **thank you** for your feedback!!
How does it then compare to https://github.com/amphp/aerys/tree/master/lib/Websocket ? Are there any things which your library covers (Yes, we also have a separate Client in https://github.com/amphp/websocket [yeah bit of code duplication between these two libs, but meh.]) which ours doesn't (except for Hybi00 - why do you even support that one? The standard for Websockets (i.e. RFC 6455) is nearly 5 years old (Dec 2011) … whoever still uses Hybi00 has probably a browser with known exploitable bugs and should be upgrading nowadays...)
A bit hyperbolic, no? It's not like Python would have much less quirks than PHP. PHP is just much more popular and there are thus more rants on it...
The same way it would be a nice opportunity to contribute something similar to Aerys ;-D There are a bunch of registered subprotocols. Ideally you make these as a generic library and then every Websocket implementation can use these. [http://www.iana.org/assignments/websocket/websocket.xml] Also for example RFC 7692 could be implemented (on both libs).
If they can set up PHP-FPM they could configure a separate user for a "development" area on the same environment that could run a concurrent version of PHP (v7 in this case). Just a thought. :). Is this an internal team? Or a web host? That's a long time for a build order. :(
thank you for your explanation.
Thank you very much man for your reply. I also tried everything within that link and not fix my problem. I'll probably have to save on a text and process the jobs using crontab( it works perfectly from it or terminal) . 
So you were just being ridiculously hyperbolic. Gotcha.
Best IDE for Joomla development!
So you mean, the user input sanitisation, or lack thereof, causes an XSS vuln. Did I get you correctly?
Use [htmlentities()](https://secure.php.net/manual/en/function.htmlentities.php) before passing through parsedown to escape scary characters.
I used htmlspecialchars... It's considered to be better and easier to handle by PHP, whilst being as secure as htmlentities()...
Just tried font ligatures: http://i.imgur.com/sbZN4wv.png Not bad! For those interested: [download and install the font](https://github.com/tonsky/FiraCode), then enable it in *Editor &gt; Colors and Fonts &gt; Font* (you need to check "Enable font ligatures"). I had to restart PhpStorm for the FiraCode font to show up in the list.
Which, by the way, for beginners trying to grasp the general idea of how a framework works, a general idea of its concepts and get a basic site up and running in no time, is perfectly fine. You don't need to start with the top notch framework in the market.
is this a serious question?
it's a good link though. Worth reading.
All yummy goodness :)
 I strongly recommend making use of prepared statements, all these `mysqli_real_escape_string` calls hurt my eyes.
No, they shouldn't be running it in production. But it's nice to get started.
I love PhpStorm, unfortunately I've been relegated to Zend Studio 3 because my employer is on a budget brigade right now (and for the forseeable future). I'd buy it myself but that subscription fee is a bit high for me at the moment...
I don't get it 
Zend studio 3? Didn't that come out in like 2004?
Honestly I'm not sure when it came out, all I know is it's Eclipse and I hate it.
phpstorm changed my life, and I started using it instead of Eclipse because I was curious if a different IDE liked Symfony2 better, a framework that was as well changing my life at that very moment. PHPStorm + Symfomy Plugin is heavenly 
Yeah, been using ligatures in the EAP for weeks now, works like a charm
would click again
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
i have never used analytics for this. im currently using anlytics to track visitors but not sure where to track clicks from different websites
exactly what i needed, but first im going to try analytics to track the source of the clicks ive never seen that on analytics
It really, really, really is. It's more compact on disk, far more quick to search, and makes guarantees writing raw bytes to a file doesn't give. It also performs a lot better than most people think for read-heavy workloads. (In fact in simple setups SQLite is likely faster given you're cutting a lot of overheads relatively to MySQL/Maria, Postgres and others. Perhaps reconsider SQLite when/if you start needing multiple workers, need more specific typing/constrains than SQLite provides, or have data that's getting into the many GBs range.) 
[removed]
PHPStorm saved my dog's life and now food is tastier too.
&gt;Laravel is built on Symfony components therefore it is at least as good as Symfony This is how retarded you're being.
"We are all PHPixie now" - John Maynard Keynes
Only commenting to chime in with my love for PHPStorm!
Is there a way to speed up Laravel/Composer when developing locally? Everytime I reload the page it's taking at least 2s to load (TTFB, so completely server side). This isn't anything complex, literally just loading one template, no DB stuff yet. I ran `composer update -o` to optimise the autoloader but no change. I did a quick profile and the huge bottleneck is `Composer\Autoload\includeFile`where 169 files are included. Maybe it's an issue with PHP? **Edit:** after posting I realised this could be a problem with opcache, including files shouldn't be such a big bottleneck. Turns out opcache wasn't installed on my system (Mac, using homebrew). Installing opcache has fixed the problem.
Thought about it...tried using Atom but it disagrees with this machine.
I find that when people start wrapping things they loose sight of the actual framework and start making more of a mess or try and build a framework on top of the existing architecture because they think, down the road, oh we will have 50 thousand people and what were building helps with scalability. Personally, I use the tools in front of me, I do extend Models into Entities, but I do not have specific save methods or this, that and the other thing. I try and keep things as simple as possible. When testing I see all these people write all this funky jazz to make sure they don't hit the database and they test all their abstractions around the static call methods. I say just make the call to the database and validate that ok yes this was saved appropriately. At the end of the day, personally, from what I have seen as a senior developer, these other "Senior" developers spend so much time abstracting and being afraid of the actual tool, that they end up building a house around a hammer. And half the time that house is already legacy and falling apart ... My argument, is: Use what's in front of you and only extend upon what isn't when the time comes for it. Not before.
What's your point? How does this relate to my comment?
Best part about phpstorm is you don't have to renew your license anymore unless you want all the changes that don't fall under your current license agreement and to be honest if you're writing PHP you should be able to make enough freelancing on a few small projects to let phpstorm pay for itself.
This, right here, irritates the shit out of me about this sub. The Laravel hype train is strong, and not being on it = downvotes. The gods forbid you might find it not suitable for your particular needs... OP, this is the only correct answer. Once you're comfortable dicking around with CI3, you'll get into other frameworks and you'll understand why we left it behind - and the progression from it to something modern, like Laravel, will make more sense to you. People may hate on CI3 like whoah around here, but the frameworks we have now evolved from it. Yes, it's outdated, but it's as good a starting point as any to get to grips with real beginner stuff, like what MVC or routing is. And don't just jump straight into Laravel and nothing else - look at all the most popular frameworks around right now, and get familiar with a couple of them. Look at what each does best. If you just learn Laravel, like so many people are saying here, then you'll only know the Laravel way of doing things.
I've made a little experiment in PHP and hope that some of you guys might find it intresting. Otherwise im sorry for wasting your time.
Or just double click on the font files and click the install button. Works the same either way.
Yes, truly hate Zend Studio, mainly because of Eclipse.
Can you use a different language? I like PHP pretty well these days, but it just isn't the right tool for every job.
Try using unbuffered queries. If using PDO and MySQL you can do so like this: $pdo = new PDO(...); $pdo-&gt;setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false); $result = $pdo-&gt;query(..); if ($result) { while ($row = $result-&gt;fetch(PDO::FETCH_ASSOC)) { var_dump($row); } } EDIT: more on buffered and unbuffered queries can be found here: http://php.net/manual/en/mysqlinfo.concepts.buffering.php
sounds like you are using 32 bit binaries... plz confirm that its 32 or 64 bit architecture
Neat -- were you aware that the word for what you're doing is [steganography](https://en.wikipedia.org/wiki/Steganography)? 
True, but that's not the default configuration.
Does anyone else have any issues with scaled displays in OSX with PhpStorm? Using a 2015 MBP 15inch, and an external 28in 4k display, when using the display in scaled mode phpstorm struggles, and there is noticeable input lag and CPU usage spikes, using the display in full 4k mode phpstorm runs fine. Not too much of an issue, but have to bump the font size up otherwise it's just unreadable.
Right Click -&gt; Install.
Python may have fewer quirks, but not _that much less_ actually. The difference is that these things just take a lot of time the way we do it; first note it in docs, then deprecate it and remove it a few years later. We've only really begun cleaning the things up with PHP 5.3. `DateTime::ISO8601` for example could someday be removed. `&lt;?php` can be seen as a file signature (first bytes identifying the file type). I don't think this is really a problem. And apart from that it allows nice templating, so why not retain it? You somewhat could compare PHP 4.0 and PHP 7.0 to the jump of Python 2 to Python 3. Their difference is just that there was no real transition period. [Which is why Python 2 has support until at least 2020, which is about 12 years total then.] We could do that jump too with PHP, but I don't see the advantages being really superior for PHP here… [By the way I wish we had a big, big list where we could add these things to change somewhen in future. I like our bugtracker, but it also has many new-feature requests (of which a fair share are just, to be honest, bullshit) and reports marked as bug which aren't a bug, but just a badly designed feature etc. I always come across things I don't like, but sometimes I note things there and here and forgot about having saved them somewhere :x]
Hey, you still available? Hit my email - ama-zing@hotmail.co.uk
Amazing! Thanks, this gives me alot more insight. :)
BTW stubs are open sourced, so anybody is free to contribute: https://github.com/JetBrains/phpstorm-stubs/
Even better!
got few suggestions. 1. commentia.lexica.php, don't do that it, use [gettext](https://secure.php.net/gettext), it will be better for internationalization of the app. 2. I would abstract away the underlying storage system to make it possible to add adapters later such as (mongo/mysql/etc), using file system for reading small files is really not good idea specially if you have sudden spike in traffic, you could strong arm flysystem in being the backend adapter. 3. "Unpacking onto website", it's not really good idea, you should only have one file that is accessible in public folder, plus you can move all your assets such as js/images into one folder for example called "assets/" and have symlink to it from public folder. 4. try following PSR-4 it will make your live and the other developers much better. 5. not sure, but it seems to me that commnets operations such as "edit/delete/etc" aren't protected by role.
what did i tell about being stupid ? -_-
I have real-world numbers for this one! You mentioned prefork mode, and I'm assuming you're using mysql here. So you'd want apache2's mpm-prefork.conf and mysql's max_connections settings. In prefork mode, Apache defaults to 5-10 idle processes, which means if you're using persistent connections you can expect 5-10 connections sitting around connected to your database at any given time. If your requests are handled fast enough, you'll stay on the lower side of that. However, It's default maximum number of processes is 150. So that's 150 possible connections to the database, before requests backlog. Depending on which version of mysql you're running and whether you've tuned this setting, your max connections may be 100 or 151. If it's 100, you might raise it. If your application makes more than one persistent connection to the database, you'll definitely want to adjust your maximum values accordingly (either raise mysql's max connections or lower apache's max proccess limit) until the limits are sensible. 
Hah!
This sounds like another possible cause. Did not know that the mysql results are cached in the memory. Thanks for this tip! Will try it out
I probably could. But I've created this toolset for me locally which helps me automate a ton of tasks. It is neither well thought out nor very accessible but does the job most of the time. It also grew over time so maybe now would be a good time to refactor some of the tools into a smarter structure...
I think i dont want to work for the company that prefers CI over laravel tbh.
Active? Codeigniter 3 is actively updated. Security? Codeigniter is a project on Hacker One and gets security updates. Popularity? Codeigniter is consistently in the top 10 monthly php trending on github.com and has been for years. The Future? The first Codeigniter 4 alpha has been released and is PHP 7 only. Performance? Codeigniter 3 is the fastest full featured framework that runs on a standard php server by any benchmark. But otherwise would strongly encourage you to also learn about and study Microservices, Clean Code, API design, and Rest.
&gt;Python may have fewer quirks, but not that much less actually. I've used both professionally, and I'd definitely say PHP feels more quirky and I always feel less certain what I'd expect to work will work in PHP without specifically checking the docs. &gt;The difference is that these things just take a lot of time the way we do it; first note it in docs, then deprecate it and remove it a few years later. Yeah, and Python has some things like this too. Many big ones were made a pyhton2 -&gt; python3 change, but there are plenty of deprecations in new versions, like [3.3 -&gt; 3.4 for example](https://docs.python.org/3/whatsnew/3.4.html#deprecated-3-4) The reason for the 2-&gt;3 split was that the changes were generally so big they couldn't really be switched out with a mere deprecation, they inherently required a much more severe rewrite or at least reconsideration of any code people had already written. (Since since some of the changes could lead to technically valid, but different in meaning, code.) These are the sort of cleanup things PHP has just never done: UTF-8 strings as default and a good refinement of the encoding/decoding scheme, reworking a lot of stdlib stuff in light of newer features, etc. &gt;We could do that jump too with PHP, but I don't see the advantages being really superior for PHP here… Fix some of the biggest warts in PHP. PHP collected many early warts seeing as it was trying to be a templating language, and many more when it was being a very CGI-style web language. Many in the community and here on /r/php seem to want to use PHP as a general-purpose language, but it's really at a disadvantage in that respect because it's unwilling to change. The built-in superglobals for `$_GET` and friends as a form of web-server to php interface make 0 sense outside of the context of PHP the CGI-style web language. &gt;&lt;?php can be seen as a file signature (first bytes identifying the file type). I don't think this is really a problem. And apart from that it allows nice templating, so why not retain it? Generally I agree it's not a big deal, but given that most people today will tell you to never use `&lt;?php` except to start a php file because it's required points out how little people actually want the templating feature that used to be the primary purpose PHP existed. It doesn't really allow 'nice' templating, it allows easy templating. The standard of 'nice' templating today would lean to something a lot more like Jinja2 or Twig for most people. It's also one of the enablers of one of the most popular of security issues that, while not unique to PHP, PHP certainly aggravates by its echo-by-default rule: file-inclusion.
If you mean "I see more for these 4 frameworks combined than laravel" then that isn't really a fair comparison :) If you mean you see more for each one individually than laravel then I would have to ask where you see that. I did some quick searching on indeed in Cali, Mass, and NY (arguably the places you would find most of your PHP development jobs) and I'm seeing it pretty even between symfony, laravel, and Zend Framework. The fun part is that the majority of the listings actually list all 3. As in "experience with frameworks such as...." With that said I didn't find much for Cake or CI though. If someone hires you because you have done laravel over ZF then they aren't really hiring you for the right reason. Any good software engineer can learn any framework and be efficient in it in a month or two. As for ZF vs laravel I would lean towards laravel myself too. I know Matt did a lot of work on ZF3 but I just tend to think the community as a whole does a better job than Zend on frameworks... but that is just my two cents.
You are right and I take no offense. The cost itself is low for quality software, it's simply a matter of supporting my family at the moment with my wife being out of work on maternity and some other personal bs.
and... while I don't know what 'city' your 'city hall' reference is in to, in many cases there's some petty cash funds that can be used for small/misc stuff. $9/month for, say, 3 months would give you plenty of time to show some ROI, and get reimbursed for a full license. anyway, not trying to tell you how to run your life - everyone's got priorities. I hope you continue to be as productive as possible, and good luck with the new baby :)
Did you read the blog post? It was a very rudimentary explanation of what PHPixie is (a framework) and how to use it. It doesn't compare it in anyway to any of the "most prominent" full stack frameworks. It doesn't list any pros or cons of PHPixie. It is like reading a review of a car that is written by the car company that made the car vs an independent 3rd party. Well it is either that or the person that wrote it really knows nothing about any of the other frameworks.
I went thought the same thought process, Started with Notepad++ because I didnt like IDEs at first. Then got a taste of Netbeans. Used that for quite a while. Then found out JetBrains had a free OpenSource License and wanted to try it out. I am in love now.
Yeah. Not my favorite and this is one of the reasons.
It's a few 3rd party modules that are vulnerable, not Drupal core.
Hi, yeah there is a reason. The reason is that before and during the export a couple of other datasources are queried. Also I receive the data in form of different file formats which need converion and error checking before importing into my database. So a whole lot additional logic going on unfortunately
This version is so fucked up. I just upgraded from version 10 and now I can't enable the "PHP" plugin. When I try to enable it, I get the error, "Unable to apply changes: plugins "SSH Remote Run", "PHP Remote Interpreter" won't be able to load", whatever that means. I, for one, find PhpStorm to be pretty useless without the PHP "plugin". Even worse, I still get the "Unable to save settings: Failed to save settings. Please restart PhpStorm" that plagued version 10. I thought they would have fixed that by now.
Sounds like a great place to learn without all the fuss...
Few? It should only take a few hours of work to afford it. 
Nah it's fine, interesting and quite useful to understand the stegano process, so thanks!
Like... One hour. 
Not too familiar with vagrant but if you have your gulpfile.js on the same drive you can point PHPStorm to it. You can also run commands with the built in terminal. 
Downvoted the link for this reason. Those are serious issues, but not with Drupal, and the affected modules are not shipped with Drupal, like the title makes it seem.
ZF1 vs ZF2 is radically different. ZF2 vs ZF3 is not. Magento is not its own thing, it's relies entirely on ZF. If you're used to Magento, stick with ZF (assuming you're using Magento 1.x), otherwise go with ZF2. I'd recommend dropping ZF altogether though. It's a clusterfuck. 
Is anything showing up in the MySQL logs? What's your my.cnf configuration look like? Do you use MyISAM, InnoDB, or both?
As i said, this is my opinion. I live near Boston and recently went through a string of interviews for positions in the 6 figure range. I was asked specifically about Laravel experience many times and only about others once or twice.
Nope. Webforms Multiple File Upload, Coder, and RESTful Web Services do not ship with Drupal. Further, most of the exploits were of java components within those modules. Only Coder allowed the exploit even if it wasn't made active. My company manages hundreds of Drupal sites, and we didn't find any of these installed. We do use Coder, but our practice is to run it locally, on developers drush directories, so that its not accessible via the web at all. I have to say the way the Drupal security team handled this security vulnerability was pretty impressive. We were all setup to deal with "Contribaggeddon" only to find it didn't affect us at all. 
I tried to evaluate Drupal a few months ago but our company firewall was filtering needed http response headers. Doesn't work behind certain firewalls so it's a no go. 
You can adjust the colour of that line to make it slightly less ugly (Colors &amp; Fonts &gt; General &gt; Editor &gt; Tear line )
Are you suggesting that the following is some how a comparison? &gt; These are some of the advantages of PHPixie framework: Concentrate on speed and page load time. Focusing on giving a stable and adaptable architecture. As opposed to other lightweight frameworks that do not give a full stack of features, PHPixie provides a restricted full stack that focuses on effectiveness. PHPixie should be easy to learn and understandable to anyone with experience in Codeigniter or Kohana. Provides a stable codebase that doesn't "get in the way" and allows the developer to write their own code how they see fit. 
I agree with you 100%, in my area (big new tech scene) it is mainly Laravel, occasionally Symfony. I don't recall ever seeing a Zend or Cake gig.
it's not always about preference. Sometimes you have to deal with legacy code and CI used to be a great choice
What exactly is wrong with PHP and why do you think Python is better? In my (limited) experience with lower level languages, PHP uses a lot of the same syntax and concepts as the more established languages like C++ and Java.
Damn, you get paid 80/hour? How you doing?
can you more elaborate how to do this? at least which menu do you mean? i really wanted it, but i can't found it, i just found vagrant command to up, reboot, halt and init vagrant box. 
$100/HR+ in the US is common if you are good with PHP and know how to prove your value. 
Working for a company or freelancing?
Freelancing. No one I know has a 200k salary doing web dev. 
It should work as long as Host and Cookies headers are provided. 
PSR-4 autoloading? If you use PSR 0 OR 4, there is no need to include all files at first.
I had the same experience on the last build. Haven't got a clue why.
Reinstall
&gt; PHP Remote Interpreter I think this is a feature of the IDE, you don't need the external plugin anymore!