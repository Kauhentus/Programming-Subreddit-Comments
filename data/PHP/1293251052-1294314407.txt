which is not at all needed in this case
Correct! It is easy to fix. But it's also an easy bug to make. And it's a hard bug to spot. The trick to prevent these things is to _abstract_ away. Move dangerous logic into the same place, and see if you can do more with less code. Image you had a function like: function create_list( $myList ){ foreach( $myList as $row ){ echo "&lt;li class='thumbnail'&gt;&lt;img src='" + htmlentities( $row['icon'] ) + "'&gt;" + htmlentities( $row['label'] ) + "&lt;/li&gt;"; } } Now you, rather than having to check every place where you show a list of things with an icon, whether or not you are escaping correctly, you can re-use the code. I've left out the inline-css and the div, because you really don't need them. Off course, you could go much further, and make the icon optional. You can have a function that gets a database table for you, or a record from the database given a table-name and/or an id. That way you don't have to check all your views for sql-inject risks. You can move the icon/label stuff into it's own function. Then, you go on and on, and abstract away. And at a certain point, you'll be like. "i'm not the first to do this!" .. and no, you're not. You go and see that there are all these great frameworks, that turn PHP into a safe and usable language, that could be hack-free. What you want, is to at least keep presentation, models and layout separate. You may want to start learning object oriented programming. Write your own classes. Perhaps a nice class per table in your database? Actually, I wouldn't be surprised if that functionality already exists, since you are using one of the industry standard CMS systems. And the advantages of such an approach are enormous. Not only is there less chance on bugs, because you re-use so much of your code. You also make your code more readable, more maintainable and if you use industry standard design patterns, you make your code more predictable. Which means that if you get hit by a car somebody else can easily take over the projects you were working on. I'm not saying your code is one big dirty hack, because it is so very dirty. It's just a small except. I'm saying it, because it could be so much better. And you may not think it's relevant to learn those skills. But most software development, isn't as easy as a joombla-module. It's much harder, and if those programmers don't work in a disciplined and structured manner, it couldn't possibly be done. This may be a shock, but for certains programs, people generally write proofs, that they actually work. Not just for hart monitors or financial institutions. Even for PHP, the good programmers, tend to put all complicated stuff in fuctions and use unit-tests to verify that those functions work correctly. For web programming, the biggest challenge on the back-end is getting all the conversions right, and having a good migration path. (how do you deal with changes to the database structure, for a website that is already in production?). On the front-end, getting the CSS right, is really hard. The first thing you really want to do, is to make sure, all CSS logic is separated out, and the HTML is as minimal as can be. This way you can, afterwards, go and check every browser and device out there, and if needed you can have custom sheets per device. Also, never forget to use a reset-sheet. (something that resets the defaults of the css, because different browsers, also have different defaults. Some of them may even depend on browser (firefox) or operating system themes (like in linux)) 
So how does this work? Well, it's a cross between a Forum and IM so find a post/topic/thread you like and just chat. You'll find that all messages appear in realtime as they are received. You'll also see that threads are organized in a tree-like way. Threads are organized like this... (Origin -&gt; Parent -&gt; child -&gt; grandchild -&gt; great grandchild...) The origin is where brand new threads can form (the front page). Users can then reply to the parent to form children which directly relate to the topic of the parent. Likewise, users can reply to the child posts to form grandchildren which directly relate to the topic of the child, but not exactly to the parent. I hope that makes sense... so anyway, I was thinking it would be cool to see the evolution of conversation. Like, how cool would it be to start a thread right now about basketball and many generations later it still continues except the main focus is now on politics. Wouldn't it be awesome to be able to trace back the lineage to see how/why changes in the topic occur? Would it somehow reveal previously unknown relationships (between basketball and politics in this case) **TL;DR** Cross between IM and a Forum... everything is done in realtime. Check it out! Also, the backend is a LOT of PHP
I'd be interested to see how you've done it, are you going to make the source available?
[More info on this guy's cool project of raising money for the impoverished](http://gumballcapital.org/7-Marathons-7-Continents/) Here was my request (he took requests for those who contributed $27 or more): Create an ice sculpture in honor of PHP. Bonus donation if you also include a penguin (real or fabricated)
This is really, really neat. Though a few things: You need to call .focus() on new textareas that pop up when clicking on a thread to reply, so that one doesn't have to click the textarea before they can start typing, and you really should have a time delay limit for posting to slow down flooders and spammers, and some flood catching algorithms. But I really, really dig this. It's freaking sweet. I wish I had coded something like this. Give us a heads up if you release the code.
If you're thinking of the new post posting limit, I would say 5 / min per ip and 1 / min per cookie. Ip-based is quite easy, but with cookies you have to set them the first page load and then check them after each request. I would go the easy trail and not put any extra load on the server(s) with sessions and just put a straitforward timestamp in the cookie. Most assholes would be fooled. The next step (finding more heuristics for spam and trolls) would be more difficult, but I'm hopeful someone would help you with them. Nice job, btw.
Amazing idea, well done. * give out the code * push the spam control up a bit * ability to set titles to the threads (for retrieving easily) * registered user features * ability for private group threads * ability to see who is online * ability to tag threads * ability to nest more than five levels * ability to retrieve messages/thread for particular user * generate a timeline. * resize the timeline focus span (more or less like the timeline in analytics (with grips and calendar and stuff) to be able to focus on specific parts of the global timeline and apply filtering to see just a selection of messages These are all because now it looks more like a free AJAX chat (with indented messages) and less like a forum. 
Thank you! Cookies it is then! Might as well give it a shot.
Thanks for the suggestions! I'm not sure if it's a great idea to give up the code now lol... it's a bit of a mess x.x I'll definitely add these to my todo list (I'm loving all these ideas). Quick question... If more than 5 levels can be nested, there would the issue of a physical barrier (the size of the browser). How do you get around that issue? Dynamic zooming tool? Horizontal scrollbar?
Thanks! I'm glad you like it! I'll definitely add auto focus. I'll definitely give a give a heads up if/when I release the source.
&gt; I'm not sure if it's a great idea to give up the code now lol... it's a bit of a mess x.x Don't worry there are people that can help with that. The issue of 5+ level nesting should be solved as in reddit (show X more replies, then you go in the thread/navigate the tree of replies to see the replies)
And also don't allow to post less than x characters unless the post is a child of another post. That should fix the "LOL", "hello!" posts that come up.
wow, tokenizer.. not exactly a highly documented feature of php. Hmm...
Good work, I had the idea for something similar. Good use of mootools too :)
You are wise and you make good points, this snippet of code is not a representation of the entire site, I do not use the best practices and I'm still learning. I do however think that the last part was at the vary least, worth hacking together, and it has worked with pretty good results. If I posted the full code you would see that the testimonials load in a scrolling div created with jquery. So all that code above is just a piece of it. The testimonials all load at once, and slide up one at a time using javascript and css. The box they scroll inside of is a fixed height, and the longer testimonials get truncated with a read more link. would post the url to the finished app but that wouldn't be smart. Now I do have another php project I am finishing up, and I'm going to go back and rewrite a lot of the code into functions, using your advice. I however am not sold on using pdo for this one yet, because there is no user input from the frontend. It's an application for a football coach, eyed he enters his players into the db and adds various stats from his camps and competitions. And the front end calculates the stats and ranks the players in a table.
The way I handled nesting like that is to indent only where there's more than one reply, and a chain of single replies to each other gets shown as a flat list (with zero vertical margins so they're visibly connected).
The other fun way to solve the "lol" post issue without applying a random "minimum character limit" is to apply a uniqueness filter. Apply an MD5 hash to each message, and when a person posts, if there posts matches an existing post's MD5 hash, don't allow the post. This ensures that people don't posts hundreds of "lol" messages and encourages real content, not copy/pasta nonsense. (Why an MD5 instead of seeing "select * from posts where text = 'new post'"? The md5 will be faster to index and lookup than building an index on the post text itself.)
So, tell us more about the technology, what is the backend, how do you use it, what tools/libraries are being used and how they are used to create this, what server, what host.
So it seems that it is using an [APE server](http://www.ape-project.org/home.html) and MySQL+PHP+Javascript(mootools). Interesting thing this APE server...
interesting approach! Thanks!
yup!
I'm a big fan of [SQL Buddy](http://www.sqlbuddy.com/) compared to PHPMyAdmin, and [Querious](http://www.araelium.com/querious/) as a native Mac client. Also, the vast majority of the folks I talk to use [MAMP](http://www.mamp.info/) and not XAMPP on Mac- you might find that a little more Mac-specialized. Or you can run the Apache and PHP that come with OS X...
Run this little script to see what I mean: &lt;?php $x = 1; $l1 = function () use ($x) { $x++; return $x; }; $l2 = function () use (&amp;$x) { $x++; return $x; }; echo "These numbers should not change:\n"; echo $l1() . "--" . $x . "\n"; echo $l1() . "--" . $x . "\n"; echo $l1() . "--" . $x . "\n"; echo $l1() . "--" . $x . "\n"; echo $l1() . "--" . $x . "\n"; echo $l1() . "--" . $x . "\n"; echo "These numbers should change:\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; $l3 = function () use ($x) { $x++; return $x; }; echo "These numbers should not change:\n"; echo $l3() . "--" . $x . "\n"; echo $l3() . "--" . $x . "\n"; echo $l3() . "--" . $x . "\n"; echo $l3() . "--" . $x . "\n"; echo $l3() . "--" . $x . "\n"; echo $l3() . "--" . $x . "\n"; echo "These numbers should change like the second batch, but only the first column will. Yay! We just broke references and our function can no longer modify the value of $x in its original scope :)\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; echo $l2() . "--" . $x . "\n"; ?&gt; edit: formatting
I'm sure it's just something dumb about my particular configuration (or something dumb about me), buuut... When I initially tried to get this to work, it would just stop on a solid cyan page. I had the configuration set, permissions were good, pictures were there, dependencies were met... it just wasn't doing anything. Upon further investigation, I realized it was dying at "$imgType = @exif_imagetype($filePath);" in _isImage. I ghettoly replaced it with "$imgType = 1;" and everything worked just fine. No idea what's going on, but hey, it works now. That little hiccup aside, it's very nice, thanks!
Hmmm... that's odd. What OS and version are you running? Also what version of PHP and GD are you running? It would be nice to find the root cause of this bug.
I'm running it on Gentoo (kernel 2.6.34-gentoo-r12). phpinfo() tells meeee... PHP: 5.3.3 GD: bundled (2.0.34 compatible) [portage says 2.0.35-r1] Oh, it also occurs to me that I'm using lighttpd instead of Apache, if that makes any difference in how these things work together. I'm certainly no expert! 
I'll see if I can replicate your issue. Also, I don't think lighttpd should make a difference. PHP's doing all the work.
Never tried this framework out before but am giving it a test out now. Going to try combine doctrine 2 with it from the get go
We just went through the big decision to use Lithium or CakePHP 1.3 - we ended up sticking with CakePHP 1.3 if only because Lithium hasn't hit 1.0 yet. The model relation system is not a trivial addition and will likely be a little rough around the edges for the first little while. But by all means, give it a shot yourself. You might find it suits your needs as-is. Also Lithium is technically "CakePHP 3.0". CakePHP 2.0 was planned to drop PHP4 support, and require PHP 5.0+ CakePHP 3.0 was the version that was to require PHP 5.3+ since the PHP 5.3 features are what enable most of what makes Lithium what it is.
There are a few blog posts, they seem to go well together, but I'm not sure about advanced features and all
Right, I've started building on 1.3, but I feel like 1.3 is just too 'heavy', and small things are getting to me, using the use of array in models. I'm a long-time Cake user, and it's great, but I want to take advantage of some of the 5.3 features and performance, and definitely leave PHP4 compat behind. An interesting part of Lithium is how easy it is to plug-in some Zend components too
For now I would stick with Cake 1.3, using Zend Framework stuff in CakePHP is easy as well
I feel like you're missing the mark with the idea that using Doctrine would be "jerry rigging" the system but I don't know enough about Lithium's stated goals to say for sure. A proper framework wouldn't put such requirements on the developer. You should be able to use Doctrine, Zend DB Table or any such library. It should be separated enough so that if you wanted to you could completely remove the models from the application without pulling with it framework-specific dependencies.
http://lithify.me/docs/lithium/data/model/Relationship
Lithium works with plugins, it mostly support MongoDB out of the bux even if MySQL support is being added. I'm using it with [PHP ActiveRecord](http://www.phpactiverecord.org/) look for li3_activerecord within lithium projects. I've found lithium pretty strong so far, the community is reactive (#li3 on freenode) and helpful. PHP 5.3 is definitively the way to go and you can only benefits from what it offers.
Wow, this *is* an interesting approach! This will likely come in handy for me.
Lithium looks fiddly. Particularily the in-your-face-OOP style won't help code maintanability. And seemingly the authors can't tell MVC from PMVC or MVP.
I kind of like how they build the OOP style. i.e. the filters or $_classes that let you hack stuff around without touching the core framework itself. It comes with a test platform, l10n, command line tools. Most of what you do end up being a separate library that you might reuse later on. Any example of in-your-face-OOP?
i was interested until i tried to "Try It Out" and couldn't.
Not to steal Chryps thunder, but the lightest "blogging" engine I have the pleasure of using is jekyll. it's ruby (I know I know), but the neat thing is you write all your posts in markdown or another syntax and then push to your website repository. It uses git hooks to generate static HTML. Can't get lighter than that :-) 
 echo lithium\action\Dispatcher::run(new app\extensions\action\Request()); $post = Post::create($this-&gt;request-&gt;data); Too lazy to dig out the horrid examples I've seen. The second one is actually okay by my standards. Yet it illustrates how they try to subvert the hybrid syntax of PHP. Though using anonymous functions is a nice touch, one has to wonder why the remaining API seems so Javaish. The namespace directoritis is obvious, and I don't believe it's a sign of good design to jump onto new language constructs like that just to solve mostly fictional problems. But then it's probably too early to bash them for any of that. Docs are still too sparse. (Couldn't yet figure out which pretend-MVC scheme they're following specifically.)
&gt; it's ruby (I know I know) Nothing wrong with that at all.
I think it's a joke: the site is running on Chyrp, so clicking the link takes you right back where you started?
I don't think that's the case, otherwise it's a terrible design decision bound to confuse and dissatisfy most of their visitors. Wouldn't you want to demo the administrative area? I assume that is what the demo is for. 
Right, I mean that it is in the timeline of development for Lithium, but I am not sure of the time frame. So my "jerry-rigging" was implementing it (it can be done cleanly), in the mean-time, but whether it would be worth it to do so, if the time-frame for the "native" implementation was reasonable
The demo will be up shortly guys. We're more focused on getting ready the next release for now. This has been mentioned in the blog posts already. Sorry for the inconveniences.
Err, did IDEs become psychic since I last used them? Unless you're either a really bad programmer, really terrible typist, or writing something really trivial, I can't imagine 'most' of your errors would be caught by an IDE. Most errors I run across are very, very much runtime errors - not catchable by anything but a psychic IDE.
&gt; "Linux. [...] Well designed and well-planned." That's funny to me. Linux is very much not 'designed' or 'planned' - it's been grown. Linux is a damn mess. A functional mess, but it's layer upon layer of things all cobbled together to make a functioning operating system... None of them seem to necessarily fit together all that well.
I used Chyrp a while ago and loved it. Simple and so easy, for when i didn't want to bother with wordpress. I was sad to see it go out of development for a while, but I'm glad to see it back.
... And the guy that's maintaining it now wishes he had your address so he could murder you in your sleep. If you pick a language up overnight you don't have the experience to write good, clean, maintainable code - only functional code. You don't have the knowledge to avoid rewriting parts of the standard library, or to write in a way that best complements it. You don't know about all of the languages idioms and quirks. Still got that old code around? Set error_reporting to (E_ALL &amp; E_STRICT) and see what comes up. Go through and see how many places you validated things like email addresses without knowing there was [already a built in function for it](http://ca.php.net/filter_var). Did you know about register_globals? magic_quotes? How does your code behave if those are toggled on or off in php.ini? Did you use mysql_escape_string or mysql_real_escape_string? (I'm guessing no PDO.) Still sure there's no security vulnerabilities? The fact that you honestly believe that you can pick up a language to any level of competency within a few weeks just shows your ignorance. That you figure you wrote flexible, reusable enough code (in your first three weeks in the language!) that you were able to use it through four months of changing requirements without modifying it shows you're either delusional, lying, or magic. I'm leaning away from magic given that you ended up having to rewrite it anyway (with the benefit of four months of experience - much more than there weeks, by the way). Oh, and just from a business perspective: What took you five months (including a month of wasted time cleaning up old code) would probably have been a month for a professional developer. If that. It's not remotely economical to have someone pick up a language from scratch on the job.
The site that doesn't exist?
Hey man, why's it down? I was playing with that!
 echo lithium\action\Dispatcher::run(new app\extensions\action\Request()); The *Dispatcher* takes the routes and treat that HTTP *Request*. In that case you are ditching the default request *\lithium\action\Request* with yours. $this-&gt;request-&gt;data; This is just your $_POST (that will contains $_FILES as well). About the doc, you have: * the [javadoc-like](http://lithify.me/docs/) * and the [book-like](http://dev.lithify.me/drafts/source/branches/master/en)
The link you gave is no longer there or does not seem to work. what are you putting in this php.ini file that you need so much? normally you should never need a php.ini file in your root directory unless you need some specific settings to be applied to all child files/directories. Something in your domain.com/php.ini file is messing up your site, and usually the main problem is it's resetting some default settings.
Fixed the link, sorry about that. The contents of php.ini are in the original post, but to explain, I turn off magic_quotes_gpc() with it. I can iterate through $_GET, $_POST, and $_COOKIE to remove slashes manually, but turning off the option is much cleaner.
I tried it. It seems good. I need something I can plug and play into client's websites while giving them very little control. Its not what I need but I'm sure it will be great for other people.
Right on. Didn't mean to harp on your word choice.
Sure it can; https://github.com/cloudhead/toto :)
Sorry this is so late. Just really getting into this now. In which specific config file does one store the server salt?
I hate Magento, but PrestaShop is in no way better. I've been using PS for a couple years now, and it's garbage. The code quality sucks, it lacks many major features (one being paypal website payments pro support for US accounts), there are lots of bugs, the update process is broken, and the developers are a joke. If I hadn't invested so much time into modifying it and didn't have so many registered users, I would switch everything over to CS-Cart.
No essentially it isn't.
honestly, JS doesn't have classes though...
No prob! :)
Would you care to elaborate?
[Here's one I built for some of my recent projects ](http://www.withremote.com/file_download/19/format_class.php). It might look slightly retarded for some of you who actually know what you are doing and didn't learn PHP my "winging it", but it works for me every time. $out = new formatHTML(); echo $out-&gt;wrap_textarea($name, $cols, $rows, $class, $content, $ID);
 &lt;input type="text" name="fields[foo]" /&gt; &lt;input type="text" name="fields[bar]" /&gt; $_POST['fields'] will give you an associative array of field =&gt; value pairs
I really like Chyrp. I used it for about a year as my personal blogging platform before moving to Tumblr (basically just for the mobile app). I was disappointed when its death was announced a few months ago...glad it's back in action.
Just make the PHP file locally and upload it.
Just FYI, you can do something like this in apache: php_value magic_quotes_gpc 0 php_value register_globals 0 php_value include_path /where/your/stuff/is Also, you should be able to use .htaccess to do the same thing, though I've never done it. What do you have in that php.ini regarding sessions? Are you forcing a different session variable name? I didn't even know php did this, but you can load a php.ini from the current working directory. So when you access something in the sub dir, that php.ini isn't loaded. You probably shouldn't do this. You're better off specifying a global php.ini on the system, or using apache to tell php to use a specific location.
are you doing it inside of an echo call? echo ' %code here% '; or outside of the PHP tags? ?&gt; %code here% &lt;?PHP
This comment from the EE question probably explains it... &gt; yesterday i find out it is beacause SERVER SETTINGS were such that if there is PHP.INI in root folder, CGI will consider it as SECURITY RISK and wont process any request that can b either session, post, get or any alike.
Yeah, um, get yourself an FTP client. The Cpanel file managers are unreliable at best. Filezilla is good and includes a permissions editor too.
Maybe the panel is broken - quotes might break the code. Or maybe the snipet is to long? Does it come back totaly empty or truncated?
Yep. The panel could be broken. If the file isn't overwriting the original I assume there is some sort of permissions issue. OP should contact his webhost.
I second Filezilla. If you have S(ecure)FTP access, you may also like WinSCP, but try Filezilla first.
I've been working on a fix to this problem and would appreciate it if you tested it out. Download the ZIP [here](https://github.com/PHLAK/UberGallery/zipball/2.0.1) This fix wont help if you try to display all 1600+ images on one page, but should work if you enable pagination and keep it to a reasonable number of images per page. Anyway, if you get a chance to try this out, let me know how it works.
Sorry about that... I thought I'd play around with some designs live hoping that some would send suggestions via email. I've put it back up and I'll have the newer version being worked on here: http://fluin.com/live
I know this is a terrible idea and I would talk down any client who wanted me to do this, but is it really so impossible (from a technical standpoint, at least)? I think we can agree there are two ways to autoplay audio: a Flash-based player (providing the client has their settings set to allow autoplaying Flash), or an &lt;audio&gt; tag with the autoplay attribute set to true. Now, combine these with two JavaScripts: one that triggers upon document onUnload and saves the player's current file and playback position to a cookie, and another that triggers upon document onLoad that checks for the cookie and if it does, sets the audio player state to match. Would this not achieve the desired effect?
Personally I'm not a fan, it looks quite empty really. I prefer the version on the [Windows microsite](http://windows.php.net/).
I like the colors a lot better, but you're right it does look very empty. Thanks for the tip though!
I quite like the general look of it, but I would set a fixed width and use something else than that huge dropdown menu.
How do I get my password back ? I have completely forgotten what I put in there... using randoms all the time makes me a forgot-password-link addict.
Oh god: it is just as hideous as the old site but with more usability issues.
Is this an index.php in a directory where an index.html is present?
hmm, i like the old one better.
This is a good suggestion. [Transmit](http://panic.com/transmit/)($$) and [Cyberduck](http://cyberduck.ch/)(free) are good options if you're using a mac. Regardless of the platform you're on: Get an IDE or editor with syntax highlighting. It'll help you spot errors. [Komodo Edit](http://www.activestate.com/komodo-edit) is excellent and free.
I don't host it myself, so I don't have access to the low level good stuff. I also believe it depends on whether PHP is running as an apache module or through CGI (http://www.askapache.com/php/custom-phpini-tips-and-tricks.html), and I believe I'm running in the latter, so I can't use .htaccess to make PHP configuration changes.
The problem with the given solution on EE is that it gives no reference. I tried to Google keywords to try and understand where or why this is happening, but couldn't find a single thing. I understand how to fix it, but **why it works** is my problem.
I like it, much softer and more modern looking.
I think it's important to note that this is a beta version and not as in a Google beta version. I think there are some good ideas, the site navigation has become much, much easier. I especially like that it's now easy to know where to start if you're a new person. The design itself is pretty horrible and there are a ton of issues, but I'm hoping that's due to it being beta.
Protip: regional subdomains (eg. pl.php.net) might look different than the global one. As for now - it doesn't look that good. Need to work on the manual pages a bit ([example](http://pl.php.net/manual/en/function.date.php))
Still horribly broken, but I actually like it.
It's okay, but I prefer the old one atm. That could be because the old version has been around for so long that any change could be seen as bad. I'll try using it for a few weeks to see if it grows on me. A number of issues I found so far: * The press releases don't use list items for the change-logs which makes them difficult to read. * The font or line-height is just too small imho. The documentation feels 〃〃〃 * If you search for "substr" you get "grapheme_substr" first and "substr" last, it looks like the results need reversing. 
Why? PHP's documentation is one of the easiest to read I've ever seen. I don't even see why they feel the need to change anything. Please at least let us use the old interface if we want to! 
First documentation page I clicked: http://www.php.net/manual/en/language.operators.php Fonts are way too small for all links. Just because we're developers, doesn't mean we can easily read 11 pt. fonts. Combine that with a 27" imac, and I can barely read them. More spacing is needed as well around various blocks of content. The table of contents looks really, really, bland. The actual documentation: http://www.php.net/manual/en/function.session-decode.php Doesn't look so bad as far as code documenting goes. I like how spaced out it is. Only wish rest of the pages followed suite. Color scheme is nice as well.
Do they not have designers? Looks like a programmer "designed" this.
Do you understand MySQL/your database of choice? If so, and you're simply looking to more easily run DB operations, then both Propel and Doctrine are one of the most used right now. I've been dipping my toes into Doctrine myself, and am preparing to take a look at Doctrine 2 which I've heard good things about. If you don't know much about DB handling, then don't go straight to these programs just yet.
New design looks web2.0ish but comments overlap into the content on the docs pages (Ubuntu Firefox3.6). Learn from Digg change is not always good. The current/old documentation site is one of the best on the web. Easy to read, easy to find stuff, good font sizes.
I would say someone let people choose "Beta"-option way to early.
I'm getting this alot: http://i.imgur.com/vgrIM.png
The old one's not very good, but the new one's worse.
Well I know basic operations(search, update, delete, insert) both in MySQL and Postgre but I don't know anything about optimization yet. I've had some problems programming a class to query a MySQL table and turning it into a html table, when I came across ORT's I figured it might be helpful to maintain everything more tidy.
Ehm, you _can_ use the old interface. Just set it back to disabled. It's a beta, don't forget that.
That is one hell of a drop down. It's nice and clean but could be better. 
I like the cleanliness of it, but it definitely has some formatting issues that makes it confusing in a lot of areas.
Don't you mean an ORM? (Object-Relation Mapper) I've built my own in 500 lines of code, it's really simple. (you map an object to your table with a function in your constructor) Propel and doctrine are systems that are way too complex for most of the basic CRUD operations in my opinion :) http://www.schizofreend.nl/pork.dbobject/
You don't need classes to have objects.
There's such a lack of information in this question that it's near impossible to tell you what you're doing wrong.
Mm from the looks of php.webmaster this has been taking a long time to complete and they decided to push it early to move things forward.
I'm not sure if you can recover it lol... without any email or other info attached to accounts that is. Plus, all passwords are encrypted. EDIT: I found your username, you should be able to login now
Regarding your last point there is a patch for the autocomplete search ready to be submitted by someone on the mailing lists. But I agree with your other points.
In my view the optimisation comes from using ORMs *well*. For example, I've written one that I know fine well will behave badly if you don't use it right. For example: public function fetchAllByUser($userId) { $postsData = parent::getDb()-&gt;query("SELECT id, authorId, content FROM posts WHERE authorId = $userId"); // yes, sql injection $posts = array(); foreach ($postsData as $post) { $posts[] = new \Model\Post(array( "id" =&gt; $post["id"], "author" =&gt; $post["authorId"], "content" =&gt; $post["content"] )); } } Looks fine until you realise the `setAuthor` method of `\Model\Post` will fetch the author model from the database if it is not an object. The proper approach, saving *n* queries (where *n* is the number of posts by that author) is: $author = \Model\Mapper\Author::find($authorId); // ... foreach ($postsData as $post) { $posts[] = new \Model\Post(array( "id" =&gt; $post["id"], "author" =&gt; $author, "content" =&gt; $post["content"] )); } Edit: This could be made easier for the developer by caching a static list of loaded models in `\Model\Mapper\&lt;name&gt;` (to reduce the no. of queries per execution) and then to serialize the relevant data in a caching store, like memcached (so as to not execute *any* queries per execution).
thanks man, I meant ORM indeed! Anyways, 500 lines of code doesn't sound that simple!
Been using PHP about 4-5 years now, finally starting to feel some mastery of it. Most of what I learned was not syntax-related, but overall structuring. Of course now that I have been focusing on OOP style programming in school with Java and C++ , I feel like I am back to square one with the php. I realized that PHP was allowing me to write horribly sloppy, unorganized code once I started trying to use c++. What, I have to actually declare my variables? And matching types? The horror! 
Agreed 100%. I have been playing around with javascript a lot lately, thats where all the real magic happens.
You should take a look at [Twilio](http://www.twilio.com). You can send and receive SMS messages with ease. Their API and documentation are fantastic. 
Is there a free alternative to this? Or a way to do it on my own?
I am not aware of a free alternative, and to do it on your own would probably cost you more than just using a service like Twilio. 
Most programmers work with over-sized font sizes to compensate staring at the monitor all day. Now we have to deal with under-sized font sizes when we want to see any reference material. How troublesome.
Do you know what I would need to accomplish this?
StackOverflow... Some peoiple are really clueless. At least you get the chance to educate them.
I felt the exact same way. The default font sizes are tiny and it doesn't upscale well at all and the link color is too low-contrast for my liking. It would be fine for the occasional text link scattered throughout the content, but considering that you're often looking at large lists of low-contrast links... it hurts my eye (of course, only having the one may be part of my problem).
Yes, but it eventually won't be. :(
I hate change. This is clean though
I think most SMS gateways will provide you with 2 way SMS capability, but usually it's pretty expensive if you're just doing something small or personal. Twilio that jswat posted looks pretty cheap though :)
You'd need hardware that can receive SMS, a contract with a telco that allows enough incoming SMS through that device, then a way to interface with that hardware... You're almost certainly better off using someone else's service for this kind of thing, especially considering how cheap Twilio seems in comparison to buying hardware, buying a service plan, getting the hardware to work, and then figuring out how to make PHP work with it. [The API seems simple and straightforward as well](http://www.twilio.com/docs/quickstart/sms/sending-via-rest).
That only think I like about the new one is &lt;code&gt;'s style
Don't use regular expressions to parse HTML. [Bad medicine](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454).
It comes back totally empty
I didnt make the php admin panel, do you think I should contact my host or the person who made it? Thanks.
I didnt think information was relevant, is this a common issue with many causes?
Hey, I have a FTP client, I use filezilla, however I had a php admin panel made so I could edit what was on individual pages, but keep my template static. Is this possible in the FTP client?
Yep. If it's a permissions problem then your webhost should be able to chmod/chown the necessary directories so they have write permissions. It could always be a bug with the panel, in which case the creator can help
Thanks!
Makes sense. Thanks!
But if you seriously insist on incurring the wrath of Zalgo, preg_match('/&lt;table.*&lt;\/table&gt;/iUs', $html, $pony); $table = $pony[0]; That's it. It assumes there are no nested tables. But seriously, don't do this. Use DOMDocument and Xpath. Still won't listen to me? Fine. This really doesn't need regex, based on your description. Just use PHP string functions: $start = strpos($html,'&lt;table'); $end = strrpos($html,'&lt;/table&gt;'); $table = substr($html,$start,$end-$start+strlen('&lt;/table&gt;')); **EDIT:** Changed the pattern modifiers from `/iu` to `/iUs`.
hey, I paid some guy to make the panel for me, and my brother is the webhost, so i'd probably go to my brother first. He's not sure how to check my permissions and says he doesn't want edit it to give every user permission, do you know how I would check the permission problem?
What admin panel are you using? I guarantee you are using a content management system and the problem is the editor is sanitizing all input, which includes php, javascript, etc.
Are you using a content management system? Its more then likely the editor your pasting the code into is automatically stripping out php code as a measure.
Can you please explain what a content management system is? I paid someone to make this php panel for me, so i'm not entirely sure. How can I fix this?
I don't mind it, it needs some work, though. Older one was a bit too drab
The admin panel built for you is most likely using an wysiwyg editor right? Your trying to paste the code into the box and when you save it it has everything but the code left? 
It's not always just the code, It has also happened before, I copy and pasted a paragraph of text (not code) into it and when I press save, it returns without the text/code. So should I email the guy who made it?
Hey, I just did a little test.. I copied and pasted my code into the panel, and then I also wrote 'test' after the div, both the code and the text didnt save, so i'm guessing it's a problem with the panel, would this be correct?
text messages? on your site? is there a google voice API or something?
Yes. [warbaby.us/gvoice-api.tar.gz](http://warbaby.us/gvoice-api.tar.gz) I'm not sure who wrote the API class, but I wrote an extension for it and used it to write an sms server via gvoice sms.
Thanks, I'll check it out.
That's not a strange character - that's just a normal character to a lot of people. Try setting the page's language to UTF-8... &lt;!DOCTYPE html&gt; &lt;html lang='en'&gt; &lt;head&gt; &lt;meta charset='utf-8'/&gt; ...and then, if you've got a UTF-8 compatible editor, you can just put in php your characters natively, e.g. echo "€ ç é Ǒ" etc.
Don't you mean /ium for this? (multiline) That's exactly one of the reasons you shouldn't use regexes for html :P
This is exactly what happened. It's far away from going live.
Once you switch your whole PHP dev life to UTF-8, everything goes much better. You can type whatever character you want straight into string literals (e.g., $greeting = "早安";), display them, store them, process them, and it all works smoothly. Not only do you get European languages, but you get almost every other left-to-right language in the bargain. You'll just have to do a little extra work with style sheets if you want to accommodate RTL languages like Arabic and Hebrew. * open your database connections in UTF8 * make sure your text editor saves in UTF8 (with no BOM) * send your HTML content with "charset=utf-8" * use mbstring functions, and the /u modifier for preg
Not to parse, but for simple things like this it can get the job done.
I found Google Voice to be quite unreliable for text messages.
It's worth spending the $25 for Twilio; it works well and their API is fairly comprehensive. You cannot do it on your own, you need someone to interact with the phone network. Well, you could do it on your own by getting a cheap phone and interacting directly with it from your computer. But that's a fragile solution and not useful if your server's in a data center.
hmm.. I haven't. Been using it for 6months, never had a problem. I parse and send them through the API. 
Your alot is cute, but I think my alot would defeat yours in a hugging contest.
I am outside the US, maybe that makes a difference. With Twilio I don't have problems, but with Google I started dropping more and more texts and finally gave up. Since I use it for important notifications, I'd rather pay and have it work.
It's actually &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
Er, no, that's HTML5 I was using... see this page: http://diveintohtml5.org/semantics.html 
[CSS Skillz](http://imgur.com/7w4Pn)
&gt; The actual documentation... Doesn't look so bad Only when there isn't much text on the page. Look at this unreadable pile of shit: http://php.net/manual/en/regexp.reference.anchors.php This is perhaps the worst redesign proposal I've ever seen. They've taken perfectly readable documentation and killed it. You can't have a column go across the full width of the page and not give the person any sort of paragraph spacing. It is impossible to track where to read next.
In the php.ini, set php to be UTF-8. Restart webserver. Everything will now work. You have to do it in the ini file though, otherwise you'll be fighting weirdness at every turn. default_charset = "utf-8" You *might* also (in addition to the above) have to set the page to UTF-8, but usually the web server/browser just handles it correctly regardless... header('Content-Type:text/html; charset=UTF-8'); Lastly, htmlspecialchars() doesn't encode that character... you need to use htmlentities() for that, but honestly if it's all UTF-8 then it should work without that since the encoding is really only needed for sites that are not utf-8 encoded themselves. 
Bringing the content back to the focus of the site I agree with the movement to the new look, however I have a few issues with it. * More variation in font color and size to give your users visual clues as to where headers, links, and code exist. Right now its just noise. * Green on White not a good choice for link color, hard to read on large screens. * Change the background color of the right sidebar (subtly) so the users eyes can distinguish between what is content related, and what isn't.
Whoever said you did?
Alot fight! (not removing it, thank you for the heads up)
&gt; php.net is undergoing plastic surgery these days. If you want to see how the site may look in the **feature**, you can join our beta program. ... feature
That will prob be your best bet
Thanks. This didn't fix the issue when I tried it. I realized that I also needed the htmlentities function, not the htmlspecialchars function, which the original developer used. Then, after thinking about it more, the htmlspecialchars function will work for &lt; and &gt; characters while the others can be left alone for the browser to figure out. The problem must be the way php encodes those characters, even though they're within the ISO 8859-1 charset, which is supposed to be default. I'll change everything to UTF-8 in the php.ini or a config entry using ini_set and try again. 
Thanks, I just emailed him.
`/m` is only necessary when you want to use `^` and `$` to match on multiple lines, otherwise the string will be treated as just one line, and that's fine here, since we're not using `^` or `$`. To be honest, I probably should have used `/iUs` instead of `/iu`, and that's probably what you're thinking of. (I also meant to use "ungreedy" and I chose "UTF8" instead by accident.)
Oh wow, that's not right. But on the bright side, it's a relatively easy css fix. There are much worse problems though.
The multiline modifier is unnecessary as he isn't matching ^ or $. All the modifier does is make ^ and $ match the beginning and end of a line and not the beginning and end of the string which it does by default (even if the string has many lines). 
Yeah, they're reasonably safe so long as you understand the limitations. I think the problem is many people try to use regular expressions for complex HTML and invent convoluted workarounds instead of just upgrading to the DOM. 
I hate when sites don't set the background color.
It's also HTML4. http://www.w3schools.com/tags/tag_meta.asp You need the content tag as a minimum, but the http-equiv is highly recommended.
That might be the case (or it might not), but this isn't the definitive interface, so by that time, it might be usable :)
Also the plain PHP function assumes that there's only one table on the page. Better would be: $start = strpos($html,'&lt;table'); $end = strpos($html,'&lt;/table&gt;', $start); $table = substr($html,$start,$end-$start+strlen('&lt;/table&gt;')); &lt;/code&gt; 
What really works is using utf8_decode in PHP for any incoming data: $.ajax({type: "post", url: "foo.php", data: {"content": "ÄÖüß"}}); using utf8_decode, you will have "AÖüß" in PHP.
Use Google's calendar, and build on top a layer with you custom bells and whistles.
This is data coming from PHP to JQuery. Thanks for the info though. I'll try to remember it for next time!
if you are doing it via your own computer you can just connect a gsm modem to it and do it that way. you need to open a serial channel to it and you can send and receive them that way. If its from a server it will need to be web based. If you are uk based have a look at aql.
When you say "what really works", you mean that the UTF-8 characters are converted to ISO8859. That is fine if that is what you want to achieve.
http://xkcd.com/208/
You can always try &amp;ouml; :)
It's in beta ;)
That works, but PHP won't produce it.
str_replace
I'm sorry if this comes off as rude, but that's what htmlentities takes care of. I thought about that, but what about the 700 other characters, like U with umlauts? It doesn't make sense to create separate str_replace statements for everything.
Check out this, I know its not regexp but its great for parsing HTML http://simplehtmldom.sourceforge.net/manual.htm
My first "guide" with code examples. Mainly in response to the Gawker password shenanigans :)
I was about to invoke the appropriate amount of NEVER WRITE CRYPTO YOURSELF rage, but you're just using hmac. BTW, you can probably replace the guts of your salt generator with [`str_shuffle`](http://us2.php.net/manual/en/function.str-shuffle.php). Further, limiting your salts to alphanumerics is silly.
D̶̔ͪͩ̀ͭͦ̄́͠҉͏̖̙̖̼̺͍̞̞͍̙̫̫̳Ō̶̡̰͔͈̙͖͕͚̬̯̪̰̪̤̮̈̽̃͂̀͂͑̈́ͮ̊̓̚̚͘̕͢ ̛̛̩̠͈͚̼̟̪̹̮̳̲̹͓̠ͭͧ̿́͟͜ͅN̛ͥͣ̃͂̐̏͗̿̆̚͜͏͜҉͓͙̞̫̥̪Ơ̧̹͍̝̠̟̯̭̩̩̦̫̮̙̟̙ͨͫ̋̽̌̈ͨ͊̿̄̔ͬ͋̊̕ͅT̴̜̖̠̩̟͉̲̭̳̞͕̹̍̔̅͊̀ͨ͆͂̇ͤ͐͆̋̃̍͟͝͡͡ ̠̰̰̥̺͚̬͉̱̇͌̂ͤ̌ͤͪ̌͛̎̀͢͠T̴̨̠̲̗̗̗͇̗̥͎͇͚̺͍͈͙̰̖̅͊̎̽̈́̽͂ͩ͊̅͜͞Å̢̨͉̘͙̱̳͙̻̥̼̹̮̑̂͂̆ͤ̌ͪ̂̐͂̏̇̓̀͢͝U̸̧̠͉̼̲̟̩̗̖̞͔̠̟̪͋̉̍̒͛͢͝ͅN̢̛̫͈̹̱̺̝̺̦̰͇̭̙̫̩͓͖̙͓͛ͣ̒͂̏̓͐ͪ̏͛ͧͦ͛́͛̊͆̂̎͟͞Ṯ̴̷̢͈̫͖͓̫̯̰̯ͦ͐̌̂ͩ̎̉̐̾̀͡ ̵̧̧̊̆̊͛̀́͋ͣ̃͌̾ͫ̍̚͏̹̘̟̠͎̖̮͎͈͢H͂̅̓͋ͧ͏̶̷̺̗̤̻̮̼̯̳͎̮͓̻͜͡ͅA̛͉̪̩̘̥̹͑̉̓́̕͠ͅP̨̮̙̗̦̤̭̤̙̜̦̞̳̪̤̮̤̥ͥ̏̾̈́ͮͬͬͣ̊͟P̨͇͔̰̼͚̩̤̩̿ͯ̓̋ͣ̌͋ͤͯͭ̓̓ͧ̀̄̏̃̆͘ͅỲ̶̨̰͚̜̫̥̯̻̘̜̳͈̫͖͈̙͕͓̰ͥ̆ͬ͊̏̏̿̂̈ͫ̍ͬ̈͋͂ ̵̶̴̸͎̯̝͇̺̘͖̹̞͔̹̲̭͓̃̌̒̑ͥͪͅF̺̯̙͇̼̼̜͖͖ͣ̐́̋̅ͯ́͠Ṷ̵̴͉͙̬̮̠̘̫̹̦̟̝͔͕͙̳̞ͨ̒̓̓͐̑ͬ͘͞ͅN̬̹͎͍̈̈͊͂̽̐ͣ̐̽̀͞͝ ̸̡̧͑̅̈́̇ͣ̎̑̌̎ͤͬ̓ͬ̉́̚͞͏̤̙̯̘̭̜̖͙̥Ẓ̴̱͖͓̭͙͎̰̗̱̦̙̦̞͖̜͙̃͑́̀ͨ̐ͩ͋̀̚ͅĄ͙̘̗͚̖̮̣̾ͤͮ̅́ͅL̵̺̲͇̫͓̤̎ͣ̒ͧ̏͌͛̅̊̐̈ͦ́ͭ̚̚G̴̻͉̯͈̫̺̬̞̜̦̤͖̙̎̔̿͛̍ͪ͋ͨͭ͌͊͂̈͛̇ͪͩ̈́̚͝͠͝O̵̢̢̥̥̜͍̝̲̱͉̭̱̲̠̜͕̰̯̤̭ͣͪ̓̿̍̄̏̅̂ͩ̀͞.̨̛̝͙̭͇̗̜̒̿ͬ̋̉̌̄͗̀̂̾͆ͣ̀̀͞ ̷̢̛͚͎̱͙̱͔̥͓̣̱͕̿ͧ̔ͯ́͒ͬ̓̄̃ͧ́͠H̶͎͖̳̺͎̝͔̱̖͖͉̯͈͍̖͍̑ͮ̆̓̂ͥ̂̚͢E̵̛̪̤̟̥̲̪͉̪͓̬͔̗̠̺ͨ̅ͭ͐̓ͫͮ ̨̝̘̩̝͖̹̪ͭ͒̋̌ͭ̑̉͆́͢C̴̈́ͫͣ̐ͯ͑̇̈́̚͏̢̦̪̥̼̣̮̬̱̤͓̮͇̗̤́͟Ō̌ͮ͢͏҉̩̠͚̞̹͉̜̣͇̦̕M̡̲̲͙̟̳̥͈̠̯͉̜͍̥̠͚̖̼̮͆͌̈́͐̿̂̈̓ͦ͡E̴̹͖̻̝͋̃̔̉ͦͮ̎͗ͩ̋ͤͪ̊͟͝Ṡ̸̶̳̻̝̳͇̣̘̰̜̘̲͖̯̖̮̱̍̃̂ͦ͗͒ͩ̇̀͒̓̾ͭ͢͡.̶̝̻̬͈͛ͪͯ̒ͮ̊̀ͫ̾ͪ͌̏͘͜͝͝
There are problems with this guide, unfortunately. While it may do some protection against full scale data loss, the use of sha256 means that targeted attacks against specific users are much easier to accomplish. Why? Time. One of the features of sha256 is that it is very quick. This means if someone wanted to pull out the admin users from the database they could do so by generating rainbow tables using those users salts. Ideally a slower algorithm would be used, or the algorithm could be called repeatedly instead of once- $hashValue = $password . $salt; for($i = 0; $i &lt; 10000; $i**) $hashValue = hash_hmac('whirlpool', $hashValue, SITE_KEY); return $hashValue; I'd also suggest a better salt generator. This one seems overly complicated- why not just include the numbers in the string of characters? I don't understand why it splits numbers and letters up like that- by decreasing complexity it decreases the difficulty in breaking it. Of course, this wouldn't be complete if I didn't show of my own [password class](http://code.google.com/p/mortar/source/browse/trunk/system/classes/Password.class.php). This class stores metadata about the hash as well, allowing admins to change the algorithm used (or any other meta data) without forcing users to immediately change their passwords. While this specifically class doesn't show it, the code that invokes it uses this feature to update users hashes to the newest configuration when they log in (since that's the only time you have the plaintext password).
Good first post, its amazing the projects I "inherit" that don't use even the simplest password hashing, or do it wrong and wonder why it isn't working. And to all the projects I have yet to inherit lets hope they find your examples first. Keep up the good work.
Oh, very true, i wasn't realizing what we were discussing, just answering from the unread section
Wow Thanks, learned quite a lot from this small post :) I agree the salt generator is complicated, it is code I used from a while back and it goes to show updating everything as I learn is a good way to go. I just started to learn OOP so your password class example is great reading material :D Thanks for the response guys!
&gt; Ideally a slower algorithm would be used, or the algorithm could be called repeatedly instead of once- FWIW, this is one of the main features of [phpass](http://www.openwall.com/phpass/), a library adopted by many open source PHP projects.
Right. http://codahale.com/how-to-safely-store-a-password/ That's all you guys need to know.
it also means you can do things like this &lt;?php function ♥() { echo "hehe"; } You can even use it as a method on a controller (in codeigniter) so you can use a the url, http://www.example.com/something/♥ (click it and check the address bar). I'm not entirely sure of the compatibility across filesystems/browsers, but in future this could be good for foreign language sites when non-ascii characters in the uri are required, it is also fun.
ALWAYS* use UTF-8 *99.9723% of the time
Clever trick outputting "Verified password" whether or not it was actually correct - that oughta throw them off for a while!
Basically you need to re-do your logic to follow the "redirect on post" pattern. That is: if (message is posted) { // ... // persist the post // ... header ('Location: /index.php'); exit; } Once the post is made, the browser will be redirected to perform a new GET request on the index.php page. If they hit F5, all it does is perform another GET and reload the page, without resubmitting the POST data.
ah, really smart, thanks!
Append a query string to the end of the URL. For instance set the for action to index.php?submit=form. After processing the form, send a header() redirect to move the user back to index.php sans query string. That will remove POST data. It will also keep the user from resending the data by clicking the back button. The only thing is you'll have to process the form data before sending any output to the browser. In most cases that's how you should do it anyways.
also a valid way to do it! I'll see which works better on my code, thanks.
you could look into your sql more as well. try using REPLACE INTO instead of INSERT, although if you have auto_increment on the table can be problematic. you could also do something like; try update table else insert into table. this way if they process the form, it just updates itself over the top again. if it doesnt exist, then it will insert instead. 
phpass was not around when I created my class, but I agree that it is an excellent project and would recommend it to people looking for a password class.
Check out [Post Redirect Get](http://en.wikipedia.org/wiki/Post/Redirect/Get).
yeah :-)
The "beta" was prematurely posted online in an effort to convince people to work on it, and move forward. It's far from ready, and the CSS was barely touched (which is a big reason why the typeface looks so bad). Constructive criticism and ideas are welcome.
I came here to say this. Thank you guys for beating me to it. I had to look around a bit to find BCrypt for use in our C# application at work, but finally found it. I'm sure there are other choices in .NET, but I wanted to work with something familiar.
Lots of serious answers, so I'll provide the joke answer: use a [ROBOT9000](http://blag.xkcd.com/2008/01/14/robot9000-and-xkcd-signal-attacking-noise-in-chat/) approach.
Depending on the structure of your document, this should work: preg_match('/&lt;table[^&gt;]*&gt;.*&lt;\/table&gt;/isU', $html, $m); Your table contents will be in $m[0]. Tons of problems can and will arise if you have multiple tables in the same file and they will be worse if you have a table inside of a table. As others have said, use DOM functions to get what you need.
Minimum time delay between posts.
i thought this said edible 
Working with multiple databases, I've always had love for [SQuirreL](http://squirrel-sql.sourceforge.net/). It's Java based, so it runs anywhere and what's even better is that it connects to anything with a JDBC driver. I've used it with SQL Server, MySQL, Postgres and DB2/400 and it's way more legit than CLI. That being said, PHPMyAdmin is a pain.
Yo man, although all of the comments thus far offer a solution to the problem, some better than others. I've built a form handler into my custom framework: Include a MD5 hash of some unique random value to the form by means of a hidden field. Record every unique hash that gets issued, when a form gets rendered, to the database. Now when you receive POST information you'll know that: * Firstly; it's a form that you actually created, * and secondly; you'll know whether there has been any response received in the past, which prevents duplicates. I also found it handy to add a expiry date-time to each hash, also for two reasons: * It allows you to do some clean up maintenance of the database's hash table, preventing it from becoming too large. * It makes me happier to know that I receive info from a known version of the site (updates / changes wise). It's a mission, but is a more controllable method - also it compliments CAPTHAs Hope I made some sense...
[This is a solved problem.](http://codahale.com/how-to-safely-store-a-password/)
This is a delicious comment
Last time I dabbled (~6 months ago?), I was disappointed with the documentation and demos. Limited documentation, and the demos were spread over different sites (and many were not compatible with the current version). Maybe this situation has improved... I'll probably try it again (along with [Fuel](http://fuelphp.com/)) in a couple of months. 
Nice trick, I'll keep this in mind when doing user auth in future.
Thanks for that, FUEL looks interesting too
why not use blowfish?
No... **Use bcrypt**
I don't think I'm alone in thinking mouse-over based navigation is annoying.
here's a couple easy ways: before inserting the data see if the user already inserted the same data. clear a session variable on the form to add the data, set the session when inserting the data. if a double post occurs you can catch it by seeing the variable has already been set. 
Vicious or incompetent? 
PunBB is an example of this. It made several mistakes: it generated its salt at install time, based on the current date (easy to brute force), it stored raw md5 hashes in the database (easy to extract via SQL injection) and instead of session cookies, it hashed the database hash again (with salt) and stored that in a cookie. Using a known hash/cookiehash pair (my own) I recovered the salt and was able to forge cookies for any user, using the hashes I collected. I like the OP's method because it does not rely on a globally-known 'secret' salt, which could be recovered e.g. if PHP server is misconfigured and spits out source code. That said, the OP's method still gives an attack both the password hash and the salt used, as well as the number of rounds used. I'd combine it with a site-wide 'secret' salt for added security. Defence in depth and all that. Of course, it depends on scope. For many sites I think sha1($salt . $password) is more than enough (provided the salt is randomly generated).
Go read this: http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html
You should use bcrypt because it's *truly* slow to generate hashes, and not just fake slow. Strengthening is only good for slowing down login attempts, but not rainbow tables or brute force guessing against a hash. 
=&gt; is used to define a key pointing to a value in an associative array. $arr = array( 'one' =&gt; 1, 'two' =&gt; 2, ); print($arr['one']); | 1
While I love this advice you should still have fallbacks as only php5.3 is guaranteed to have bcrypt as an option. Believe it or not it is possible to be secure without bcrypt (and still without inventing your own crypto, which is of course a bad idea)- bcrypt is just the best option when it's available.
**Why use bcrypt:** - It is computationally slow. This prevent easy brute-forcing of common passwords. - Immune to computational advances. You can specify the amount of rounds needed to compute and verify a hash and increase the amount of rounds if your hardware power increases. - Allows for integrated hash in the output. This allows for multiple outputs for the same input as well as not increasing the chance of collision while doing so. 
$myobj-&gt;method() is to access functions (methods) or variables (properties) of an object
ah, i see. I actually meant -&gt;, but I didn't know this one either, so this helped. thanks!
i see. thank you!
If you don't know why, and aren't familiar with bcrypt, why are you pretending to be an expert and telling people that your method is the method they should use? No offense, but there are better ways to handle this than what you have so you're doing everyone here a disservice claiming this is "the way".
&gt; Sorry, but the function bcrypt is not in the online manual. Perhaps you misspelled it, or it is a relatively new function that hasn't made it into the online documentation yet How can I use bcrypt in PHP? 
I thought the [Portable PHP password hashing framework](http://www.openwall.com/phpass/) was generally accepted as the best way to encrypt passwords..
-&gt; is the object reference operator; it's used either to reference a method on the object or the value of a property of the object: $obj-&gt;method(); $obj-&gt;Value;
Using `crypt()` if `CRYPT_BLOWFISH == 1`. The easiest way though would be using the excellent [PHP Hashing Framework](http://www.openwall.com/phpass/) (made by people who's jobs are to be security experts) in non-portable mode as such: $t_hasher = new PasswordHash(14, FALSE); // Using 14 rounds... Reduce if too slow, increase if not. $correct = 'test12345'; $hash = $t_hasher-&gt;HashPassword($correct); print 'Hash: ' . $hash . "\n"; $check = $t_hasher-&gt;CheckPassword($correct, $hash); if ($check) print "Check OK"; 
When =&gt; is used inside an associative array it acts as a separator between a key and value. Think of it as an arrow, 'x' =&gt; ( points to ) 'y'. array( 'key' =&gt; 'value' ); When it is used with a foreach loop it assigns the key and value to the defined variables. For example we assign the key to $k and the value to $v: $test = array( 'test_1' =&gt; 'Hello' 'test_2' =&gt; 'World!' ); foreach($test as $k =&gt; $v) { echo 'key: '.$k.', value: '.$v."\n"; } /* * Result * key: test_1, value: Hello * key: test_2, value: World! */ Hope that helps.
When not available, the [PHP Hashing Framework](http://www.openwall.com/phpass/) in portable mode uses an hash primitive available since PHP4 as well as key strengthening and other techniques which allows for cryptographically strong hashes with the same properties as `bcrypt`. You just need to use a much higher round count in order to achieve the same strength though since the primitive used is pretty fast.
-&gt; is the 'object operator' (T_OBJECT_OPERATOR) You use it to call methods or properties on an instantiated object like so: $c = new Customer(100); print $c-&gt;name."\n"; print $c-&gt;is_active()."\n"; &lt;? class foo { public $bar = null; function __construct($bar = null) { $this-&gt;bar = $bar; } } This differs from :: the 'scope resolution operator', which is used in static methods and vars. 
Ask me to post the classes I wrote the last time Gawker got raped.
Can you post the classes you wrote last time Gawker got raped?
Hey MoForce, thanks for implementing my suggestion! (the sort by feature)
Now ask me to pull my finger
Thanks for the help. I've used your examples but I'm still having issues. I've updated the original text in this post. Can you take a look again? Thank you very much.
Nevermind. I think I figured it out.
ive seen quite a few ways through the years. try update else insert is what i use. Ive seen replace into in a couple of places, but when they create a new item, they do the insert new item before writing to the item. i wouldnt say incompetent, just another way to do it.
In case your're getting or setting the text to or from a db: - make sure your DB and fields are all set to "utf8 -- UTF-8 Unicode/utf8_general_ci" (default is latin1 after each installation) - run a "SET NAMES 'UTF8'" right after you connect to your database in your php script 
By far the easiest/cleanest way to do it.
I am gonna fuck you in the ass.
Ok, so this is bad, we all agree (i think the people behind it know it too). So how would one actually help them out ?
But then what, are you supposed to use a global salt that us the same for every password? Or should I store the salt in the database as well with a user row? Or...?
Debates are always good :) I'm reading up on this a bit more and it seems like a very delicate subject, as it should be. 
I might be missing the point here, but may I ask what the advantage of this is, against the normal method of template rendering and controllers?
It's a filesystem that was made in Windows. Some folders are CP850, others are UTF-8 or a more standard ISO. I have to develop my file system reader to understand both types now because the system is supposed to understand the file systems it's provided and not try to change them. Here's some of my code: if( is_dir("$directory/$this_file") ) { // Directory $directory = mb_convert_encoding($directory,'UTF-8', 'CP850'); $this_file = mb_convert_encoding($this_file, 'UTF-8', 'CP850'); //do something }else{ $directory = mb_convert_encoding($directory,'CP850', 'UTF-8'); $this_file = mb_convert_encoding($this_file, 'CP850', 'UTF-8'); if( is_dir("$directory/$this_file") ) { //do something } } That fixes the problem for 99% of the folders, however there's still one that this causes a problem for. I might change the if-statements later, because this code is rather dirty for my tastes, but it's just for testing right now.
In the form's page, generate a unique value that expires in 30 minutes or so and associate it with a counter (this is simple if you just stick it into memcache) and put it in a hidden field. When they post, increment the server-side value by one. If it's not there, send them back to the post page with an error. If it is there but it's been incremented, just send them to wherever the post is, maybe with a "posted already" message.
RIFLE IS FINE
Surprised no one has linked this yet: [use bcrypt](http://codahale.com/how-to-safely-store-a-password/)
It is.
blowfish is slower
Jesus christ, this is awful. 1) Why do you reduce the scope of your salt's radix that way? That's a massive lose. 2) Did you not notice that you left your encryption algorithm to the OS? On most Unices that's going to result in the massively unsafe DES. 3) That's not actually what a salt is. 4) Have you ever heard of stretching, peppering, etc? 5) This approach prevents wire encryption, which is a *rudimentary* security mistake. Please leave hashing to people who actually understand it, sir.
&gt; The reason why people get misinformed is because people are saying "Use this" without following it up. Well, either that, or because some amateur who thinks they know what they're doing but actually doesn't gets up on a post and says "this is how you're supposed to do it." &gt; I gave reasoning to the method I described. And then you decided to teach Reddit that your awful way is the right way. Bravo.
phpass for php &gt;= 5.3 without portability (CRYPT_BLOWFISH only): http://pastebin.com/DDV7GUEG
It's Tomas' chosen profile name/username/url name/whatever they're calling it: https://www.facebook.com/editaccount. Like https://www.facebook.com/josh.rice
The 2nd works because it's his username. Try plugging in your username for "editaccount" like so: https://register.facebook.com/obama 
... and here is a one with mcrypt: http://pastebin.com/sfqwfBZq
[http://graph.facebook.com/editaccount](http://graph.facebook.com/editaccount)
Nice little quick info link. Thanks!
This has nothing to do with programming in PHP in any way. Go to the guy that wrote your 'admin panel' for you - this is a support issue with his software.
that's handy!
Bingo.
What's with the downvotes? I just want to make sure someone actually wants this before I copy the code, dig out the production values, add the supporting classes &amp; some usage notes, tar it up and post the link. edit: Yes, i'm just busy, not being arrogant. As soon as I saw the [recent bcrypt](http://codahale.com/how-to-safely-store-a-password/) post, I updated all my stuff. It is slower, but it only runs once on login. The rest of the time I'm passing around a seed (no pun intented). I can get these posted.. just tied up with work right now.
You can run it through a translator but the results will not be what you're expecting. Your best bet is to pay a native speaker to translate. It's expensive, it takes time but it's also readable.
https://github.com/jtopjian/glue/blob/master/glue.php "deliminator" is not a word. It's "delimiter".
This is a great idea - especially for small projects that don't warrant the overhead of a full-stack framework.
As an alternative to using a translator, you can setup language files your site. Your views should contain variables (fastest) or constants for all text. You can try and guess the appropriate language from GEO_IP, or just let the user pick it out. There are a lot of opinions on how to do each step, but basically: Make sure you add &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt; or the appropriate charset to the head of your documents. Let the user pick a language (should be 'post' method, stick it in their record or session), but default it to something Use some kind of initializer before you call anything else: init.php &lt;? $db = new db('blah', 'blah', 'blah'); $u = new User($db, intval($_COOKIE['user_id'])); require_once('lang/'.$u-&gt;lang().'php'); extract($words); # unnecessary if they are constants lang/en.php &lt;? # Set language vars here.. $words = array( 'HELLO' =&gt; 'hello', 'WORLD' =&gt; 'world')) # If you want constants # define('HELLO', 'hello'); lang/zh.php &lt;? $words = array( 'HELLO' =&gt; '好', 'WORLD' =&gt; '世界'); In the view/page you'll use something like this: &lt;? require('header.php'); ## Don't emit any actual text here. Only use predefined constants. print HELLO.' '. WORLD; # or, $HELLO... if they are vars. ## You can also use string functions, but check to make sure they ## are utf8 safe, and will not munge up your international chars print uc_words(HELLO.' '. WORLD); # This should be safe, but you will probably want to test it. require('footer.php'); .... If you do all this, you can have your text (files) translated individually. It is a ton of work and very expensive if you use translators, but it will give you complete control over your site's language definitions. Don't forget to consider security (including files based on a string passed by a web client, injecting escape chars etc) and performance (the cheapest/fastest way to represent these language vars). Let me know if you need any help. [http://php.net/manual/en/language.constants.php](http://php.net/manual/en/language.constants.php) [iso language codes](http://www.w3schools.com/tags/ref_language_codes.asp) 
How is this any better than: if(isset($_GET){ do stuff... } else if(isset($_POST){ do stuff... } Maybe the demos are lacking but I really don't see a use for this.
Mmkay, Live2Troll.
Thanks for your reply, you've given me some new things to kick around mentally and perhaps to try. If I take you and Live2Troll's responses, it appears that there is no fast way to internationalize large blobs of text (or that people don't do things like that, and just opt for paid translators) -- so it seems.
Start by writing the site to pull text from a datastore by label and language. Typically this is done from a database. Next, remove all text content from your site, replacing it with calls into the text pulling mechanism. Remember to be careful about output quoting. Leave all the markup where it is. Next, pull your complete set of language strings in one language - probably the only language you have - in some form that people who aren't computer people can deal with. XML is most common. Next, provide said XML to a translator. There are tons of translator marketplaces; I use http://proz.com/ , as you can get UN certified translators there on the cheap, instead of some guy named Drahgm. Next, on receipt of replacement XML, run it through Google Translate, to make sure you don't have a political screed masquerading as a translation. China Does Not Forgive (tm). Finally, load the text into your app under a label for language 2, and provide a user language switching mechanism. If your job has been done correctly, you now have an internationalized website.
Could it also be because I messed up the code, because I think that is the problem.
As the site scales, the amount of work wasted on loading complete language sets for individual strings becomes disproportionate, and the disk hits become heavy. Please consider recommending that this run from a database, instead, in the future.
You have been deliminated.
Nice work :) I made something similar a few months ago for a small project which as jmking said, this is great for.
Irregardless, I could care less if he was the deliminator.
Bookmarked, saved, and loved. Thanks.
You make a good point here and up above about using a database for performance reasons -- thank you. Is GNU gettext obscure enough that there isn't a lot of firsthand experience using it, or are there other issues that make it less than optimal? J/curious -- because it *sounds* good. (If you have any knowledge of it -- I have to claim complete ignorance on it)
Gettext is fine, but I find it easier to just write one than to work with their (opinion warning) fundamentally unnecessarily complex setup. Besides, as an MIT license fanatic, I am allergic to the GPL. The web's already ready for i18n. Just use it as intended. GetText is yesterday.
I believe that would be covered on the 'consider performance' paragraph I wrote. Why don't you supply some code samples for the OP, Mr. Performance Man?
*twitch*
Nice way to add nothing to the conversation. Seriously, why is this worth a damn? You still need to use mod rewrite to get nice urls and any php programmer worth their shit knows how to handle get/post.
I do like this, I really do. But is ~30 lines of code really a framework, no matter how micro? I love the idea of it, the execution, the problem it solves, all of it, but I think it's silly to have its own URL and everything. Would a github page not have worked?
&gt; I believe that would be covered on the 'consider performance' paragraph I wrote. That paragraph wasn't there when I read it, hence the editing asterisk. Besides, the approach you provide cannot be fixed; it has to be replaced. So, "consider performance" simplifies to "don't actually do this at all." Why not supply code samples? Because he didn't ask for them. I did the more difficult part - told him the workflow and where to find translators. Two-key lookup in SQL is trivial. Do you really want them? I mean, it's just the PHP wrapping of select icontent from i18n_t where key=? and lang=? limit 1; Is that worth examples?
By that logic, all function calls are essentially goto statements as well.
The point is URL rewriting doesn't put any data into $\_GET or $\_POST. That's the reason all frameworks have routing and controller code to handle URL requests. You should know that but then you're a troll. This "framework" is just the routing stuff with a tiny bit of controlling to call the proper method without forcing you to write ugly-ass `if-elseif` code like you wrote above. You don't need models and you can do whatever you'd like regarding views. You also don't need an ugly directory structure -- your entire site can be contained in one readable and extensible PHP script if you want it to. Like any other framework, it's just a tool. If it fits your current project, use it. This one's good for small projects where something like Cake/Lithium or Symphony would be major overkill.
I still don't see the need for all of this code. You can parse your url with regex and a well ordered switch would be faster. All of these loops waste time.
"All this code"? Why rewrite what someone's already done? Especially when it has more features than what you're talking about? Why reinvent the wheel? I mean, fuck, why use MVC at all? Motherfuckin' `if`s all the way down.
Here's a tip. Opencart.com.
If you only have 3-6 different pages a switch works just fine.
Here is mine: http://code.google.com/p/web-dot-php/source/browse/trunk/src/web.php#17
&gt; Yeah, well I wasn't done writing it yet Okay. I can't react to text that isn't there; it isn't appropriate for you to chide me for not taking account of text you added later. It's obviously dishonest. &gt; so hold yer comments till then pilgrem And how exactly am I supposed to know when you're done? Try not hitting save until you're ready for comments. &gt; Man, you are like really uptight. Yay, more incorrect insults. &gt; OP is a newb, he says so himself, he doesn't need an answer from 'High Performance Web Sites'. Nor does he need an answer from "Low quality ideas." The correct way is simpler, easier, less code, and will last longer. He himself thanked me and continued the conversation; you have no need to stand up for the man, as he is not unhappy. You are attempting to create a proxy to hold grief through because yours isn't legitimate. I gave you a legitimate polite suggestion, and you're freaking out. Stop it. &gt; You gave an answer that is so far beyond what he is ready to do that he will not be able to do it. What? It's two lines of code. It's *trivial*, and he himself understands it just fine. I'm sorry you're this bad at PHP, but don't speak for the man, speak for yourself. &gt; I gave an answer that is in use all over the internet. Citation needed. &gt; Come down to earth man, you were there once weren't you? Yawn.
Have a nice night feeling powerful with that down arrow and those seriously lame insults.
The phrase you're looking for is "idempotency." There are much smarter ways to go about this than what's flopping around down there. If you aren't afraid of other languages, Joe Armstrong did a pretty great beginner's intro to idempotency in Erlang, whose topics should commute to PHP pretty naturally. http://www.sics.se/~joe/tutorials/robust_server/robust_server.html Notably, you're actually required to implement this sort of thing for a correct handling of HTML, not that most PHP programmers are even aware that such a concept exists, much less is a broad requirement.
Yeah, I taught someone something tonight, and all you did mindlessly attack ideas that don't fit your elitist world view. Then you freak out when someone challenges your punk notation. You have a good night sleeping alone with your ego. 
Keep in mind if use the same database for your other selects and inserts, you might want to cache those in files. Hey wait, if you put them in files, they'd already be in files. 
No offence intended here, but I really really really cannot stand Magento. 
When you're done mashing downvote and laying out more lame insults, ... well, not much will change. Funny thing: Jung measured, and about 80% of insults between strangers are actually in terms of what the speaker is embarrassed about in their own life. But hey, 1/5 says you aren't self-parodying. I'm sure you're in the narrow. In the meantime, you taught someone a small piece of a bad way, while I taught them the complete picture. I got thanked. You didn't. I got asked for further advice. You didn't. Chew on that. :) Nobody "challenged my punk notation," whatever that means. I just pointed out that you did something badly, and you lost your nut. By the flowchart, next you'll be calling me a virgin, or gay, or you'll just break down and start swearing like a teenager. Have fun with that. We're done here, not that I expect you'll notice.
Opencart and Magento overall target different groups of online retailers.
starred :)
I can't stand Magento either, but all shopping carts are different and being able to pick the right shopping cart for the client's needs is important for me, so they are in my repository of carts.
I think so. From wikipedia: &gt; **Software framework**, a reusable set of libraries or classes for a software system (or subsystem). &gt; **Web application framework**, a software framework for development of dynamic websites, web applications, and web services as for the site/URL, i think because http://gluephp.com is far easier to remember (and type) than http://github.com/jtopjian/glue
No mirrors or backups exist. Use a local grep or [ack](http://betterthangrep.com/). :) Also, [it's](http://lxr.php.net/) is back online.
What country are you in? lxr is still showing the "welcome" to apache first setup message. Thinking I've got a perma-cached copy of that, or perhaps a load balancer is shifting me to a bad version
Mmkay, Live2Troll.
Best quick tip: Don't use Magento.
Looks great. Thanks!
I personally prefer to have straight URI to file routing instead of having to look up a routing list to figure out which file is handling the request.
I found gettext to be a big mess, and wrote my own with more flexible handling of substitutions for sentence building including gender and number markers. It's worked well. When changes are made to the translation, it writes them out as a PHP include file containing a big associative array of strings. This seems to perform better than the database. Using a little front-end caching, though, it hardly matters. And, by the way, definitely pay for human translators. If you're a cheapskate, you can get someone on digitalpoint.com to do a passable job for under $10/hour. Even that blows Google Translate out of the water.
Modified it to optionally pass each URL match as a separate parameter to your class. I think this makes for more "self-documented" code https://github.com/jtopjian/glue/pull/1
actually, that's true, most method &amp; function calls are goto statements when you get down to the nitty-gritty of the code. Ever write any assembly? or compile a program in GCC and view the .S assembly file? uses JMP statements. aka GOTO.
You taught him shit, though. Your implementation is so lacking in essential features such as relative word placement, plural forms etc that it's actually embarrassing to see your insulting posts upvoted.
Give me a URL to your website. Seriously. I will post a youtube documentary of how I can SQL inject your code and do XSS exploits at will. If you refuse, I just might put this code as it is on my own website, hack it, and post the video.
Fuck, dude. Let's all hope for the safety of the Internet that you are a very fringe example of reddit coding prowess and not anywhere near the mean or median :O YOU have no clue, and I honestly feel sorry for you.
Reporting to The Daily WTF is an AWESOME idea!!!
&gt; You are, appearently, being payed by a confused individual as a programmer. Ha! In the same vein as codenamejeff, I must say, "That comment is full of win!!"
Only because you haven't provided the URL. Seriously, I will provide you proof if you do that.
RalfN, as a professional PHP instructor, I respect and admire your desire to impart knowledge of sane coding to the reddit community. Unfortunately, this place is very hostile to such ideas. I probably have a -500 karma score on this subreddit because of it. If you really wish to help people, please consider StackOverflow or other venues. Redditors in PHP tend to be overzealous, close-minded assholes who also happen to suck at PHP but think they are "leet". Disclosure: I'm confident of myself to the point that to the biased I appear to be arrogant.
Just in case [**codenamejeff**](http://www.reddit.com/user/codenamejeff) gets embarrassed and tries to hide his comments, I have mirrored this thread for posterity ;-) http://www.redditmirror.cc/users/public/whats_wrong_with_this_code/
So.. it's an MVC?
Man, I really admire your patience and thoroughness! Would you like to be a professional PHP tutor? We're just getting started but if you're an excellent PHP coder and love teaching, I can probably secure a part-time 6 figure income in a few years.
O man! Based upon this response, you totally missed every single real insight RalfN just offered you. Again, I am sympathetic for you. Perhaps you need to ... I actually have no advice. Just a feeling of despondency.
HAHAHA!!! codenamejeff, I would like to thank you for single-handedly making my day more pleasurable, albeit completely accidentally and tangentially ;-)
Um, idiot, I assumed that they were not sanitized because you do not show any sanitifuckingzation, coupled by a complete lack of SQL escaping or prepared statements, coupled by a complete lack of XSS prevention. It all leads me to believe that you probably don't know about user input sanitization in the first place, and, based on your future comments, I can now reasonably assert that you don't even KNOW if your platform (which you didn't mention in the post, mind you) even does this so-called sanitization.
Due to IE bugs in IE 8 and below, yes, they are. Anyone can hack it using UTF-7 in all but teh most secured databases.
There is a function that allows you to take an array of, ['hello'] =&gt; 'goodbye', ['good'] =&gt; 'bad and it turns it into a varible from the index so that $hello = 'goodbye' and $good = 'bad'. it would be: $list = array(['hello'] =&gt; 'goodbye', ['good'] =&gt; 'bad); extract($list); echo $hello; echo $good; 
Don't.. Get.. Delimitated!
was gluephp.com written using gluephp?
"irregardless" is not a word. Were you **trying** to make a pun?
Care to share a link or something?
thatwasthejoke.mp4
The best part is that he and several other people went off to downvote the thing that original poster was so happy about. And people say proggit isn't full of perjorative, punishment-oriented children. :)
Anyone found any value in these certs? Have you guys found that some jobs are requiring ZCE? 
There are idiots every where, and while there are a lot of smart people in the PHP reddit there are a ton of idiots who down vote things that should be upvoted. :(
C'est la vie. Upvote what you like and strap a smile on. I'm not new here and I've seen the bawwww before. :) Cheer up: I like making stupid, angry people expose their lack of self control using a tiny blue arrow. I think of it like an arm-band of shame. The only time it ever affects me is when I have to wait a minute to post, and I'm old enough that I remember having to wait for everything, always, so that doesn't even really get my goat. I'm not unhappy. You shouldn't be on my behalf. We exposed some clowns! Now is the time to *dance* .
After looking at [the code](https://github.com/jtopjian/glue/blob/master/glue.php) I have to agree with dave. &gt; reusable __set__ of libraries or classes The term Framework is somewhat unspecific and wide, why not just call it a url mapper? [Edit: formatting]
A lot of people opt for Google translate. It's not perfect but it is a decent alternative to paying translators. The best method is to pay a translator and load in content depending on the users location (which is a whole other ball game).
That's the object operator. Most languages call it property dereference. Since you don't know what that is, there's a good chance you haven't learned OO implementations yet, so I'm going to start by answering a different question. PHP uses the C++ style of object orientation. (Some would say that that's in turn the smalltalk style, which is where Bjarne got it; C++ made some serious changes for implementation reasons. I'm not here to debate right or wrong; simply understand that C++ OO is significantly different than its ancestor, whereas PHP isn't particularly.) An object is really just a pile of data and functions under some name. They have "instances" - that is, first you define class apple, which is theoretical, like a platonic ideal, then you make a bunch of actual apples, which are instances. class apple { ... }; $ThisApple = new apple(); $OtherApple = new apple(); Now, an object has internal data. It may or may not be exposed to the outside world. We prefer to make most of it internal, because the less that's available to outside code, the less opportunity one has for error. So when we make the apple, we should say something about its size. To keep things short, I'll just go with weight; you could make a better apple later, except who cares. Objects have "constructors" in most languages, including PHP. The purpose of a constructor is to set up the object initially. They're often passed parameters, and they're often perfectly regular functions. In PHP, they've got a reserved name and they can't return anything. class apple { // for now, our constructor does nothing public __construct() {} }; $ThisApple = new apple(); $OtherApple = new apple(); Next, let's give the apple a concept of weight, like discussed previously. class apple { private $weight; public __construct($atWeightInOz) { $weight = $atWeightInOz; } }; // notice that each object has its own $weight // that's why these two apples are different $ThisApple = new apple(2.1); $OtherApple = new apple(1.8); And finally, we'll write a member method whereby the apple will announce its own price, when fed a price per ounce. We'll also add a member to get the weight of the current apple. class apple { private $weight; public function cost($perPound) { return $weight * ($perPound / 16); } public function getWeight() { return $weight; } public __construct($atWeightInOz) { $weight = $atWeightInOz; } }; $apples = array(); for ($i=0; $i&lt;10; ++$i) { $weight = 1.5 + (rand(10)/10); $apples[] = new apple($weight); // apple-append } $SumWeight = 0; $SumPrice = 0; $pricePerPound = 2.50; foreach ($apples as $thisApple) { $SumWeight += $thisApple-&gt;getWeight(); $SumPrice += $thisApple-&gt;cost($pricePerPound); } echo "The price of our apples is $SumPrice, for " . ($SumWeight/16) . " pounds of apple.\n&lt;br/&gt;\n"; Notice, towards the end, the use of the object operator. It lets us call methods and variables on an instance of some object. HTH. Remember, the more very-different languages the speak, the better you get.
I notice that certs are appreciated by the employer because it shows some kind of motivation and passion for the job. I do think however that it is far more interesting to get certified for freelancers. A lot of companies (in The Netherlands and Belgium) are really asking if you are Zend certified.
create a QA subdomain with a unique version of the site for not only QA but also version control and then typically direct team mates and clients to this for initial inspection and testing before going live. Not sure if you do more front-end or back-end development, but a tool like [Multi-Browser Viewer](http://www.multibrowserviewer.com/) also helps with QA.
Eh, this still seems more like a library to me. Regardless, extremely useful for firing up projects quickly.
no edit: It's a library.
According to the news page, yes. Yes it was.
I do both the front-end and back-end. I usually check the site in FF, Chrome, Opera, Safari, and then IE. If it all checks out there then I push the site out and pray. Like I said, there's got to be a better way. I'll have to try this way, thanks!
A lot of people are going to mention unit testing. It's a really good way of being sure that your code is going to behave the way you expect.
Mind explaining how a "library" can contain a single class, with a single method, which has about 20 lines of easily reproduceable code? What we have here is a router/bootstrap component of an MVC. I'm really not sure why this needs to be written again since it's been written so many times already. the obvious downside to this "library" is it's poor use of regex. The more routes you have, the more regexes you run. Regexes are 10 times slower than string comparisons (i'm talking about very simple regexes by the way). This could be written better and be just as flexible.
That's probably really valid if you're referring to organizations that require really intricate promos and customer management. Target.com would probably not be able to run on Opencart but I'd find it hard to believe that once you get to a level such as that, or say bluefly.com, you're using out-of-the-box systems over custom code. But yeah, even running Magento costs quite a bit more than OC; different groups.
check out [selenium](http://seleniumhq.org/) for interface testing. unit testing while great, only ensures functions return expected results. This doesn't cover the fill extent of bugs your app may have. For example a change to routing may break access to a page, you couldn't unit test for this as the router works as advertised for the test, but yet a page is broken. Interface tests are the answer there. Obviously other suggestions about different versions of the site for QA are incredibly important as well.
I've actually been kind of considering the ZCE now that it's updated for 5.3. If you don't mind, I'd like to pry a little bit in to what you do ;) What kind of job do you do? Are you dedicated solely to PHP, or do you do entire sites (design, layout, javascript, etc.)? Freelance or hired somewhere? How long have you been doing it? I ask, because I'm curious how much of the stuff on the test is stuff you'll have picked up just from using PHP (with the caveat that I use some pretty esoteric language features ;)) and how much would actually need to be studied. Thanks!
seriously do it please. please. pretty please? 
tinymce strips javascript bud, and sanitizes input 3x
im not trying to hide nothing im just listening to you talk shit you havent been able to prove any hacks yet. 
I work for a boss and my work is to program websites and applications in PHP, I dont build a front-end myself nor do I design layouts, off course I have to code some front-end from time to time. I am working with PHP since one year and a half on a professional basis. I've been using PHP since 6 years now I believe. While preparing for the exam I noticed I had some experience with PHP on a daily basis, I didn't encounter any string or array function that I've never heard of. I also noticed that this was different when I prepared for the PHP 5 exam, a lot of the things I know take for granted were then new to me. I had to study a lot less then with the previous exam but there will always be functions that you haven't used at all. Stream functions were the functions that I really had to look into. Hopes this helps, btw go for it ;)
You need more pairs of eyes. The things a developer never thought to take into account while building the site are exactly the things the developer will never think of checking during QA.
Here is the **entire** code. Please show the reddit community how you would hack it, and prove me wrong and shut me up: $dbhost = ''; $dbuser = ''; $dbpass = ''; $conn = mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql'); $dbname = ''; mysql_select_db($dbname); $query = "SELECT * FROM testimonials WHERE approved = 'Y';"; $result = mysql_query($query); if(mysql_num_rows($result) &gt; 0) { while($row = mysql_fetch_array($result, MYSQL_ASSOC)) { $position=256; // Define how many character you want to display. $approve = $row['approved']; $idnum = $row['id']; $display = ''; $img = $row['userfile']; $link = $row['url']; if ($link == ''){ $visit = '';} else {$visit = '&lt;a href=" '.$link.'"&gt;Visit My Site&lt;/a&gt;';} $message = $row['testimonial']; $length1 = strlen($message); if ($length1 &lt;= 256) { $post = $message; } else { $post = substr($message, 0, strpos($message, ' ', $position)); } if ($img == 'none'){$display = "display:none;";} echo " &lt;li style='height:318px'&gt; &lt;div class='thumbnail'&gt;&lt;a rel='lightbox' href='/{$row['userfile']}'&gt;&lt;img src='/{$row['userfile']}' width='60' border='0' style=\"float:left;margin-right:4px;{$display}\"&gt; &lt;/a&gt; &lt;b&gt;&lt;a href='/index.php?option=com_testimonial&amp;view=testimonial#{$row['id']}'&gt;{$row['name']}&lt;/a&gt;&lt;br&gt;{$row['city']} {$row['state']}&lt;br&gt;{$visit}&lt;/b&gt;&lt;br&gt; "; echo $post; echo "... &lt;a href='/index.php?option=com_testimonial&amp;view=testimonial#{$row['id']}'&gt;more&lt;/a&gt; &lt;/div&gt; &lt;div class='clear'&gt;&lt;/div&gt; &lt;/li&gt; "; } echo "&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;"; } mysql_close($conn); SQL Schema -- -- Table structure for table `testimonials` -- CREATE TABLE IF NOT EXISTS `testimonials` ( `id` int(99) NOT NULL auto_increment, `name` varchar(300) NOT NULL, `email` varchar(300) NOT NULL, `userfile` varchar(300) NOT NULL, `testimonial` varchar(300) NOT NULL, `approved` varchar(22) NOT NULL default 'N', `city` varchar(300) NOT NULL, `state` varchar(300) NOT NULL, `url` varchar(300) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=27 ; ** Have at it big guy. Show me how stupid I am ** 
PHP 5.3 - Get a query value, filter it, and if not set (no notices) or invalid, the default 1 will be returned. &lt;?php $page = filter_input(INPUT_GET, 'page', FILTER_SANITIZE_NUMBER_INT) ?: 1; var_export($page);
I must say I love the broken images in the screenshot. :)
&gt; HTH. Remember, the more very-different languages the speak, the better you get. Yeah, don't forget that.
This is the shittiest framework I've ever worked with.
do you have any experience setting up Bromine and RC in selenium, we are trying to get it working, but need to hire out a consultant to set us straight.
Even though you meant -&gt;, I feel like adding my the Perl explanation of =&gt;: "a funny kind of comma."
Well instead of being a total *ass* to the person who took the time to write something **useful and free** for us, how about you suggest some improvements. Dipshit.
1. Unit testing by dev 2. Manually testing by *not* dev 3. Good error catching and reporting For manual tests, usually you have to have test plans... Essentially write up scripts of what a user will go through on the site. Try to do the minimum number while touching every functionality in the website at least once. Make sure you save them, and then for any major changes to the site, you can just adjust what you had. Have incentive for them to find problems... like a free lunch or something. Once it's live, you're likely to have missed *something* so make sure the system is ready to handle any errors from anywhere and report it to you. Examples include the webserver 5xx page emailing you, php exceptions emailing you, a report form on the site for users to submit bugs, etc. 
are you a professor?
Functional test suite for catching errors with broken forms and other things that are really bad to be broken on the live site. I use zope.testing, which lets you script browser requests in Python. This lets you simulate filling out and submitting forms, clicking on links, etc. Write the functional test suite first, and you can save yourself some time, since it's usually quicker to run the test suite after you've made some bigger changes to the code base, and you can more quickly nail down any errors in the changes than switching to a browser and manually poking around the site to see if things are working. 
No problem =D I've still got a long way to go before the core system is fully functional though... and I keep running into problems displaying the indentations correctly.
and just when I post this I realize what I was doing wrong lol... progress continues
Well, I love your project. If you ever need help, let me know. I don't actually "develop" anything per-se seeing as I am a Chinese language major, but I can run 4 miles without stopping. I think thats a pretty useful skill in web development.
It's late here, but I think I'm going to do this tomorrow. 
gettext is probably the best choice - it's portable between most languages, it's more or less de-facto standard so there's a lot of standard tools for working with it. I've used it once before and it's pretty easy. If you don't use that, there's also the [intl](http://php.net/intl) extension, which is new and more OOPy, but it's... obese, to put it lightly.
Easy to setup? wtf are you talkin' about, Willis? I still haven't gotten it working. Can you point me to a quick guide?
Nice challenge, I bet I could do a hell of a lot but not until life settles down next week. I'll be back
Unit testing should actually be done way before a site goes live. You should be doing unit testing before you actually use the units to make the site (and during, as you update/upgrade the units during development). A step you should definitely do *after* unit testing and before going live is *integration testing*. 
yea, I had what youporn.com has trending in bu then, that is not acceptable.
God damn Twitter's trends are useless nonsense.
Thanks for the pm, looking forward to working with you.
If you haven't been building QA into the entire process, it's pretty much too late to do it now ;)
And you can always build a one on top of a more low level router.
popcorn.gif
I was using, in the previous versions of web.php, regexes too: http://code.google.com/p/web-dot-php/source/browse/trunk/src/web.php?spec=svn682&amp;r=682#17 But I prefer simplicity, and switched to sscanf and vsprintf. In my own projects, I never needed the power of regexes in the end in URL routing. PHP Projects that are also devoted to URL Routing: https://github.com/jeffturcotte/moor http://robap.github.com/php-router/
I'm not completely sure I understand what you're trying to do, but if you want to call a server-side php script from the client, you have to either reload the page or use AJAX and replace certain parts of the page. If you're already using jQuery, look into [load](http://api.jquery.com/load/).
I would suggest, in order to understand how it all works properly: - Forget the Javascript and JQuery to start with. - Create a HTML or PHP page with the form in it. - Have the form go to another PHP page that processes the request. Once you've got that mastered then: - look at using javascript/jquery to show/hide the HTML form - call the PHP page using AJAX - put the results from the ajax call into your page.
I am a beginner, but a friend gave me a challenge to design a website with all I can use. I believe this will make me aware of what all there is to learn. Believe it or not, I am never able to learn through a step-by-step approach. I always dive in the deep waters and then pick up stuff with trial and error and by reading as I stumble upon errors. I would appreciate it if you could put some more time in my problem. I am sure there is an easy fix to it :). Look at this demo: http://demo.tutorialzine.com/2009/10/cool-login-system-php-jquery/demo.php That drop down panel you there is supposed to drop down when I clock the hyperlink "Enroll". In other words, I want people to be able to see the panel drop down when they want to register by clicking on Enroll. Does it make more sense now? 
I believe, the panel is coded in PHP. So I think I will have to use PHP itself in HTML to call the drop down function? 
You're much better off just learning SQL and doing it by hand. ORMs save you very little work, and you end up not learning the performance characteristics of the database under the hood, which matter *a* *lot*.
Just to make it clear: PHP is always run server-side. You don't see any PHP in the browser. The panel you linked in your answer to ipearx maybe generated by a php script, but the output is html and Javascript. My answer above was a bit short. You don't need AJAX load to open a panel like that. I just thought you already have that in a separate file and you simply want to display it. ipearx's answer is actually very good. Try to get a simple login form working first. Then use a nice stylesheet like the one in your example. The scrolling is a simple show/hide effect you can add later. To answer your original question: you don't need that onclick element. In the example, the link has a simple id="open". Take a look at slide.js, it uses the jQuery slideDown and slideUp functions as a show/hide effect and it's using the id of the a element to add the functionality.
You don't need PHP to do this, PHP only handles server-side stuff. You need to use your Javascript and JQuery to do this kind of thing. Basically you make an area for your login code to hide, call it something like &gt;&lt;div id="login"&gt; &gt; &gt;&lt;!-- Insert you login HTML here --&gt; &gt; &gt;&lt;/div&gt; Then you'll need to hide it in your CSS &gt;\#login { &gt; &gt;visibility: none; &gt; &gt;} Then use something like [slideDown](http://api.jquery.com/slideDown/) on JQuery. W3Schools is also helpful [here](http://www.w3schools.com/jquery/eff_slidedown.asp) These may also help: [1](http://designshack.co.uk/tutorials/creating-a-slide-in-jquery-contact-form), [2](http://www.switchonthecode.com/tutorials/using-jquery-slider-to-scroll-a-div) I would really recommend getting the page you want setup in HTML and the back end code in PHP done before doing any JQuery and design fancy stuff as you will overload yourself and get confused otherwise. Sure you can do it this way, but why make life harder?
\#blackpeopletweets
This one time ...
At band camp?
Your question is a bit misleading. * Learn jQuery separately before mixing it with PHP (also need CSS and HTML background before doing jQuery properly). * Learn PHP separately before mixing it with Javascript * If you require any data from PHP to Javascript, you can use JSON objects and [jQuery AJAX queries](http://api.jquery.com/category/ajax/) to fetch it. I understand that your friend is trying to teach you web technologies fast, but mixing server-side with client-side tends to mix things up a lot for most people. **Suggestion** (iperax has a smiliar view): * Make a functional server-side page in PHP * Make a functional client-side functionality in HTML/Javascript using static data (no PHP!) * Create a PHP script that exports the data you need into JSON ([hint](http://php.net/manual/en/function.json-encode.php)). * Modify your HTML page so it fetches the data from the JSON php-script. * Now that you have working server-side and a working client-side you can attempt to integrate both.
Excellent. It seems very much like Java.
hahaha, /r/bitches_and_rants is over there ----&gt; Now are we going to find out what this framework is or do we have to search?
I have to admit I have used (isSet($arr['key']) || array_key_exists('key', $arr)) when clutching at straws for more performance and the keys being checked are *normally* truthy. I'm talking a pretty tight loop that had ~2k iterations though; and it really was a last resort. Also: I did profile it and array_key_exists was top of the table for time taken. Disclaimer: I would rather have more readable code if at all possible. I had already set up APC, cached as much as possible and greatly reduced the number of db queries being performed. 
Email, unlike the title of a Reddit submission, is a great way to communicate with a single person in particular.
Thanks =D I'm definitely grateful to have fans of the project out there... if it weren't for you guys, development would be incredibly slow.
I am aware of the difference between the server-side and client-side scripting. I just haven't worked with these in over 2 years, so its a bit rusty. I will look into the basics today. Thanks!
Looking into it.
you just need css and JQuery for that.
Hell yeah! Stick it to jeffm. I always thought the guy was a little creepy. (who is jeffm?)
Hey I posted the full source. I'm waiting. I really wanna see your injections and xss technique. or is this all bullshit like I have been saying the entire time? stand up and walk the walk. I bet I never hear from you again. this code isn't hackable and I'm waiting for anyone to prove me wrong. The code in its entirety is posted above. You came here to be an asshole, not help. 
You could be vulnerable to XSS. User input should be filtered or escaped (htmlspecialchars) before you output it.
Are you simply informing of the possibility of user input, or do you see somewhere a user could input something unfiltered? There is another page that stores the data this code retrieves, but it is sanitized 3x over.
I don't know how you store the information in your database, like name, city etc, but you're not escaping it on output. If it's not escaped for html before you stored it, you have to escape it when you echo it in your html code.
&gt; email is faster than Reddit submissions. replacing a ton of slow submissions from incognito9876
because idiot, that was never part of the question, so why would I post my code proving I sanitize user input to ask a completely unrelated question? Your are just an asshole who was so so so wrong. The user input is sanitized 3 times. I dont need to tell you the user input is sanitized to get an answer for my question. You are an imbecile who jumped to conclusions and proved to be plain wrong. You didnt help me at all, and you were just plain wrong. That's bad for the open source community, which should constructively criticize each other, but at least be encouraging and factual. And I posted a new thread in php for you, tear me apart.
And you shouldn't convert characters to their entity values before you insert into the database. So escape during output!
there is no user input here, the code looks fine.
I stuck an isset() in my function.
It returned false, if you catch my drift.
You haven't given us the full information (where do the contents of this table come from?) so nobody can give you a full answer.
&gt; tl;dr: jeffm is an ignorant, lazy asshole. But he doesn't know that, because he hasn't run the test for it yet.
Yeah it was an interesting read up until he started slamming Jeff. Would have made for a nicer post if he had left out bashing others. Sure people make bonehead moves but I doubt the poster is the world's greatest coder.
Yeah WTF? It's a shitty framework he refused to name for shame of being associated with it. Who cares if it's now shittier. Get over yourself. Go write a better framework. Become a php framework rockstar. Get the girls, money, fame and a G6 Tl;dr op is an insecure prick
Well there's something I did not know. Thanks!
Well, Java got OO from the same place. And broke it the same way.
The code you've given is not "injectable" in any way. The only query in the code has NO area of user input. Is this the entirety of the code in question? It's possible the novices on r/PHP (there are a LOT of them) were just messing their pants because you didn't use PDO, but you should probably post the link to the original thread so that we can be sure. EDIT: Looking at the original thread ([source](http://www.reddit.com/r/PHP/comments/epegu/what_is_wrong_with_this_code/)) I don't see anyone suggesting this particular code is vulnerable to SQL injection. They simply mentioned it could be a source for XSS since you aren't escaping your output (but of course, you don't tell us where your data is coming from, so that's just speculation on their part). Then of course there's one more person who berates you for not using PDO/mysqli, but they are heavily downvoted. So what's the problem?
You have no idea what you are doing and you are going to fuck shit up really badly. Get someone else to do this for you. You need to back up and learn how to program if you want to be able to do this kind of thing.
First, you said this was for a custom CMS. I asked you to simply provide the URL to the website and I would attempt to find XSS and SQL injection exploits. Second, I realized there was no user inputs in that code snippet but you said you were ignorant of both SQL escaping and prepared statements, and that's where I said that your site was probably open for SQL injection. Third, let me demonstrate a very real attack vector: I assume the site has an admin interface. Let's pretend it is immune to SQL injection and just say that you have a bad employee entering data into it. They post into the message body the following text: &lt;script&gt;window.location='http://google.com/'&lt;/script&gt; Pretend "google.com" is the URL to a virus. congratulations, now every time that article shows up in your CMS, your visitors are redirected to a virus download. That's just the very tip of the iceberg. (Also note that as RalfN siad n the previous post, this is a very good reason why you should *always* limit HTML input into the database. If it isn't outright blocked, it should be heavily filterd, something you are totally not doing. You aren't even escaping it.)
Fuller review: $conn = mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql'); You're just going to die with an error that exposes information? Great, now every potential hacker knows you're running MySQL at worst, and at best the public just sees a white screen of death. No 404, no ability to contact support, nothing. Who knows what's wrogn or why? echo "&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;"; echoing HTML is so 1998. You really should look into a model view controller pattern. It has very real benefits. $conn = mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql'); You're opening and closing the database on a single piece of code. This isn't good. You should keep this all centralized and do it once over the entire run of the app, not just a code snippet. And you shouldn't copy and paste code from one file to another However, if you copied that just to be complete, then I apologize, but you should have said "this came from // include_once 'config.php' or something. $dbhost = ''; $dbuser = ''; $dbpass = ''; You store your database config in plaintext in a file readable by any one with access to the file. If you're on a shared host, this maybe **suicide** but at the very least any employee w/ read access to that box, or any hacker with access to Apache or even the console, can probably read your database user name and password... At best that means that they would have complete control over your database. If you used "GRANT ALL" as most people starting out do, you just lost control of the entire server to even the most dumb of hackers. Far more secure methods exist. A great step up (tho still insecure via things like phpinfo() is to store the db creds in an Apache VHOST file that ONLY ROOT has read access to. Most distribs launch apache as root, read the configs, then drop down to apache level, so not even a hacker of the apache process could view your vhosts. For even more security, store it in an encrypted apc key. This takes a little more work to setup but you can use it for any other project and it takes the same exact amount of time to set up for additional clients (e.g. ~30 seconds). $post = $message; } else { $post = substr($message, 0, strpos($message, ' ', $position)); } You should probably do this on the DATABASE side of things: SELECT SUBSTR(message, 0, 256), fo rinstance. # THere is no error handling! If anything at all unexpected or wrong happens, your app is toast. ---- I greatly appreciate you taking the time to ask me for my expert opinion of this code. I hope this lesson helps you out. Just remember that your code will suffer from any XSS anyone can get into your database via any unsecure vector, via it direct insertion via a hacker, XSS exploits, SQL injections or rogue employees. Even if you're the ONLY PERSON who has access to the server and it's located in your own office, it doesn't mean this will ALWAYS be the case. Therefore your app is unnecessarily open to future exploitation, and the fixes only take knowledge and 30 seconds more to implement. EVERY SINGLE TIME you output ANYTHING, be it a variable, a database entry, or even text you write yourself, you should escape it with htmlentities(). In every single case where it wont break the app, you should run strip_tags() against the stuff, too, particularly data from the database and the user input. Just because your one app is secure doesn't mean the registration form created by that outsourced team in Bangalore is. So your database should *always* be treated as insecure as user-entered data. echo htmlentities(strip_tags($post)); And you should always do this on the VIEW NOT the friggin model.
Great Advice!!!!!!1
There are no injections here. However, there remains the possibility that existing bad data in the database could be output, which is probably what hopeseekr was trying and failing to discuss. In this situation, the data is probably curated, so it's probably not a problem. However, I'm going to explain it as a generality, Just In Case (tm). Here's the issue. There are two general kinds of injection vulnerability: input and output. Looking at the comments below, most people are looking for input vulnerabilities. This code doesn't have any that I can see. Input vulnerabilities are things like Little Bobby Tables: you write some text that imitates a fragment of the data being used by a backend system, typically a chunk of an SQL query formed to confuse the backend into thinking it's receiving multiple commands, the second of which is completely within your control. So again, those are absent here. I'm just drawing lines in the sand so you can see what I'm getting at. Output vulnerabilities are a different beast. Most XSS attacks leverage an output vulnerability. Most people look for input only, because they assume - rightly at one level - that if there are no input vulnerabilities, there can be no output vulnerabilities. That's a little like saying if you manage memory perfectly, you don't need garbage collection. Generally speaking, don't play safety games like that; nobody's perfect. So where's the risk, already? Well... what happens a year from now, when some junior programmer from Podunk says "you know, Podunk isn't in this city list, I'll lean on user content to flesh out our cities?" Well, that junior programmer sanitizes the SQL, because they read some blog that said they had to, and followed instructions diligently, and lo and behold, whatever the user puts in is binary handled, and there're a bunch of Bobby Tablses safely in the database, causing no harm. There are also HTML fragments. And when the city is spit out, the HTML fragment goes out with it, because this code here has output vulnerabilities. That means the attacker can bury javascript in your database, in your city column or whatever, and when it's spat out, it's not getting HTML encoded, so it actually behaves at the user's side as a script. That's when the AJAX and the cookie sniffing and etc. This isn't as ridiculous as it sounds. This is how Kayako got owned several times in 2007 (it's long since fixed, but that got bad for a while, and they never told the public what happened; it's not clear to me that they're on stable ground today, as if you read the facebooks of their staff, they're getting hacked again.) This is very probably how the Gawker attack worked. Basically, here's the problem: you're trusting the data in your database to be sane and safe. Today, that might be true. Software changes. Start writing software which safely copes with these kinds of attack, and you'll never have to worry. Now look, I've dealt with hopeseekr. That dude is a douche, and cries wolf because he thinks being a smart developer is knowing how to cry wolf really, really loud. But, yes, this code is vulnerable to bad data propagated from elsewhere. There aren't any direct vulnerabilities here, but there's no protection from indirect attacks either. Hope that helps. Reply if it doesn't; I'll clarify if you like. TL;DR: what if, in the long run, someone gets a city into your database like &lt;script src="ajaxAttack.js"/&gt;Pittsburgh That's preventable, and it happens in the real world all the time, so stop assuming it'll never happen to you.
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
Its built in Joomla CMS, ha ha ha ha ha ha ha 
The info in the database had to come from a user, somewhere. Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
Most people who are proficient at PHP speak several languages, and brought their proficiency in. Their numbers will be distorted. Most people who only speak PHP aren't proficient, but believe themselves to be. Their numbers will be wrong. Defining proficient is preposterously difficult, so different people with the same competency arc will give you different numbers on grounds of disagreement over where proficiency actually kicked in. I believe you're measuring in a way that cannot give you good answers. Yes, it's still worth learning.
A rouge employee could log into ftp and delete the whole server, that's not my responsibility. 
So say we all ;O
And that data is sanitized 3 times. Once with javascript in the wysiwyg editor, the joomla cms jrequest command and mysql escape. 
but he's asking about this particular section of code...
right, this is where he became the idiot asshole I describe him as now. I posted some code and he starts critiquing something completely unrelated based on speculation. I never mentioned 'custom CMS' or anything in my original post. 
I never said custom cms in my original post. I posted unrelated code and you're assumptions started going wild. I want to know if someone could see the code above how they would hack it, because the above code is all I posted before, and he was 100% sure it could be hacked.
The problem is that they were getting to me, but I could not find a point of injection in this code. I am positive data is safe of javascript/xss or anything like that. I dont need to prove it but assuming all data is properly sanitized before it gets inserted into the database, how could one hack this code? If it cant be done, then there is no problem. If it could, then I will most certainly fix it.
Hey I know i'll be downmodded to hell, but you need a lot of training and assistance. My corporation, phpexperts, can offer this to you immediately. training will take about 5 hours and we will give you point-by-point instructions of how to setup a complete end-to-end testing setup. For additoinal training, you can get on the PHPExperts advanced php training online school and learn how to do things like * Unit tests * Integration tests (part of what you're asking here) * test-driven development, * Software development lifecycles, etc. for very reasonable prices. I'm prepared to offer you the QA test environment class for just $100; thats $20 an hour and far far less than you find of the same quality any where else. 30 day money back guarantee. This offer also extends to anyone on reddit who responds in the next, say, 30 days, part of my service to the reddit community. qa-training@sales.phpexperts.pro
Very informative, thanks for the information. Now I understand much better.
Hey dumbass, if you ever made money programming you know people have existing websites, built using whatever software. When someone contacts me to pay me good money to add onto the site, I'll do it no problem. And Joomla is fine. 
How fucking hard is it to indent consistently? There I was thinking people who did that else { bullshit; } died out ages ago.
Any time. It's rare and pleasant to get a thank you here. I appreciate your keeping me motivated to help.
I wish there was a PHP implementation of OpenGrok, or at least somethign standalone, so I wouldn't have to run the entire Java stack just to search code.
.pro, huh? I'm glad pompous professionals have their own little corner of the Internet to feel self-important.
The indentation didn't copy paste very well :( my bad
I'd like to see that code. I just built one, but it's ugly and hackish, and that particular corner of the PHP docs isn't well written. I'm curious how someone with the foresight to do that voluntarily went about it. Mine is balls-on-slow and I'm not sure why yet. 'Course, it's less than 12 hours old, and I was double unsober when I made it, but that's no excuse. I must say, sir, that is a really neat idea, and I don't see those often in PHP. You have earned my admiration, for whatever little that might be worth.
that's what's amazing about reddit. In my last post I got a lot of comments, mostly nothing helpful, but I did get a solution as one of the first few replies. I and many others appreciate the resourcefulness reddit provides and we should all encourage each other to keep it this way. With that said I am no angel, I've retaliated to attacks and I realize it does nothing of value for the community. I want to do my part and once again thank you for doing yours! 
The worst developer in my lab has more certificates than everyone else, go figure :D
isset is faster though. I tested three options- isset, which doesn't handle nulls right, as you said- if(isset($testArray[$field])) array_key_exists, which does handle null but has the overhead of a function call- if(array_key_exists($field, $testArray)) isset and is_null, which does everything you need without the function calls- if(isset($testArray[$field]) || is_null($testArray[$field])) The results were- 0.017626047134399 - isset 0.072526931762695 - array_key_exists 0.013750076293945 - isset + is_null I posted the benchmark source on [pastebin](http://pastebin.com/b02XnJA1). The results were almost what I expect- array_key_exists is about five times slower- but I was surprised that the isset + is_null test returned quicker. While this may be a micro-optimization that really depends on how often it's being called. If it took 200 changes to make this change then I'm guessing this function was called quite a bit, meaning it could have an affect. The only way to know though would be if you named the framework and we could benchmark the difference. Of course, anything that makes things faster by breaking the code is just ridiculous and not a benefit. Faster broken code is still broken and pretty useless. Still, bitching about it (and calling people out by name) on reddit is kind of lame imho.
I can't show you mine, but it's based off of Lithium's old template engine. [lithium\template\view\Streams](https://github.com/jlogsdon/lithium/blob/lithium-0.4/libraries/lithium/template/view/Stream.php) is the [stream wrapper](http://php.net/stream_wrapper_register) that needs to be registered. [lithium\template\view\adapter\File](https://github.com/jlogsdon/lithium/blob/lithium-0.4/libraries/lithium/template/view/adapter/File.php) is where the file is included. The [Renderer](https://github.com/jlogsdon/lithium/blob/lithium-0.4/libraries/lithium/template/view/Renderer.php) class it extends handles the variable and helper access inside the template. [An example template](https://github.com/jlogsdon/lithium/blob/lithium-0.4/app/views/layouts/default.html.php). Anything access through `$this-&gt;` is displayed *as is*, no escaping. Every other variable access would be escaped (eg. `&lt;?=$content;?&gt;` would escape everything inside the variable.)
The closest I've seen is Doxygen, but it seems to get lost a lot with the marco's and the final product is unbelievably large if you try to use call graphs and inheritance graphs.
Hey, he immediately called RalfN and myslef idiots, etc. when we were just trying to help. So consider *yourself* lucky. &gt; codenamejeff [S] -1 points 9 days ago[-] &gt; You are an idiot, because this is a simple module that is built into a content management system. Nothing you said is relevant, your just an asshole. The testimonials are submitted via frontend by users and backend, and all have to be approved in the back end, so there will be no empty testimonials. Inline CSS because the module will be put into a CMS and a seperate ecomerce store. and SEO links are converted automatically so go fuck yourself. permalinkparentreportreply That's what I get for trying to help out.
 DISCLOSURE: I have not downvoted anything on this post. 
It is your responsibility to not trust user input no matter where it comes from. EDIT: You're not supposed to downvote because you don't agree with stomething. You should only downvote something that doesnt' "aid or promote" conversation.
Stop it with the fucking name calling! GOD!@ &gt; codenamejeff [S] -1 points 9 days ago[-] &gt; You are an idiot, because this is a simple module that is built into a content management system. Nothing you said is relevant, your just an asshole. The testimonials are submitted via frontend by users and backend, and all have to be approved in the back end, so there will be no empty testimonials. Inline CSS because the module will be put into a CMS and a seperate ecomerce store. and SEO links are converted automatically so go fuck yourself. permalinkparentreportreply Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
you're an asshole leave me alone. I owe no courtesy to you **edit for your edit**: I didnt ask for your help on sanitization, I asked for help for something else. You did not provide an answer to my question, just speculation about my coding abilities. Fuck off leave me alone, im not gonna be nice to you. Other people have been far more helpful and understanding with less effort then you have put forth bashing me. 
&gt; codenamejeff [S] -1 points 9 days ago[-] &gt; You are an idiot, because this is a simple module that is built into a content management system. Nothing you said is relevant, your just an asshole. The testimonials are submitted via frontend by users and backend, and all have to be approved in the back end, so there will be no empty testimonials. Inline CSS because the module will be put into a CMS and a seperate ecomerce store. and SEO links are converted automatically so go fuck yourself. permalinkparentreportreply
---
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
 exactly my point. Would you like to further the discussion about you being an asshole or me not saying the word custom &amp; cms? 
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
No, you were just wrong, and added unnecessary noise to the discussion. I posted code, and you posted speculation that held no merit based on the code I provided. I didnt get lucky, your just an asshole.
and i dont. 3x sanitation buddy. How many times should I say it? user input is sanitized 3x. User input is not trusted. Its sanitized 3x. Also, nothing submitted is displayed on the site before human approval. 
I was honestly trying to help you out. I have not downvoted a single thing you have said, Jeff. Can you say you have given me the same courtesy? You're not supposed to downvote things you don't agree with, you know. I am not an asshole, btw. Nor am I an idiot. But I will say that your behaviourisms and code snippets lead me to believe you may be quite a bit more junior than is befitted by a person who goes around calling people "idiots". Finally, why do you call me an "asshole" in direct response to my request that you stop leveling insults? ANd is anyone who is actively downvoting me man enough to admit it?
Get it through your head, you aren't helping anyone. There are people who have helped me much more then you have with less effort. You are just an asshole. You speculated about something completely irrelevant. Do you know what baseless speculation is? 
Yes, please. I would like examples of me being an asshole, so that I can either apologize or explain. (I upvoted your comment, btw).
Um, calling me an idiot and an asshole doesn't doesn't exactly help you. You know that, right? Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
I did. I am following tutorials now.
I could post my input code and you still wouldnt be able to find any security holes, just like this code. You're an asshole because you wont leave me be, and you made baseless speculations 
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
To be fair, RalfN and I pointed this all out yesterday. And he responded by calling us idiots and assholes. I've never.
The very first post you made was assholeish because it did not focus on my question, and was all speculation. Eveery post you made, was speculation, "No. The code you are writing is setting up any website and any app your hand touches up for complete subjugation by any even remotely interested hacker." "WOw! You should be ashamed of yourself! PUtting this in production code?! I was giving you the benefit of the doubt and thinking you just coded it on the fly in the reddit submission box (as I have been prone to do) and that this only resembled "live code" by a very small amount. Give me the URL to this content management system; I won't even need an account if it's coded like this. Just the URL. " and you said that based on the code I posted here, which nobody has found a way to exploit so far. Every comment you made was speculation and did nothing to help me understand better or learn anything
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
heres some more of your **speculation that makes you look like an asshole** "You must realize that the vast majority of PHP coders in general and on /r/php in particular think they are awesome and don't even know what SQL injection or prepared statements are! (This coder is a case in point!)" Why would you say something like that? Because you speculated, you sure didnt see any instances of that in the code i provided.
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
Neat. :)
There's value to making your assertions stick with concrete examples. That said, this reaction isn't what I expected from my memory of experience. I may have you confused with someone else; if so I apologize.
Then it was too forward of me to take a position with regards to something I did not witness. I apologize.
Redacted due to me not being sure whether it was an appropriate comment or not. See: http://www.reddit.com/r/PHP/comments/eu6yo/hack_my_code_hopeseekr/c1azwop
Hopeseekr, you didnt help! You posted tips to code you couldn't even see! Seriously, you went on a rant about how i was "probably a junior dev" and i " probably dont know anything about sql injections" All because you saw the code i posted above.... I proved you wrong. I know all about sql injection and there are no vulnerabilities. Yet you still speculate EVEN more. How about you just stop trying to dance around the issue and show me the vulnerabilities that you found the first time? 
You were being an asshole in these sense you assumed things that were false, and used your falseness to blindly critique me. All because I asked a question, and you thought I didn't deserve an answer. I replied to your non related irrelevant posts 20 plus times with simple insults in hopes you would go away. Nope you're still here, and still not helping me with my questions. Just berating me with your superior speculation.
I was trying to help you in every way. If my shoes are untied and my shirts unbuttoned and I ask if my glasses are crooked, i'd hope you would tell me about those other things instead of just straightening my glasses and then laugh when I tripped and fell. Right? What Am I missing?
Before you changed all your post, you were speculating that other code on the site was vulnerable, without even seeing the code. You were wrong about it, and you never once came close to answering my question. Its exactly like someone posting on a home improvement site about securely installing a new window frame. I would have been asking for help to get the window installed correctly and your answer would have been "Why install a window they can come right through your front door because you dont lock it" My answer was the frontdoor is always locked, please help me with my question about the window. And your reply would go something like: "Your probably not even using a solid steel bolt lock on the front door" See where I am going with this? Now, I gotta get up and go take a picture of my steel bolt locked front door just to get an answer about installing a window? And then you also go to make analogy like my window is insecure, because my wife could get bicthy and open it from the inside? wowwwwww. I am asking questions about windows, you are speculating about doors. 
Also, I apolgoize for my "ashamed of yourself" statement. Honestly, what was going through my mind was that you were the lead programmer who had 5+ years of experience and kept up with the basics of website security, and thus should have known better. Actually, how do I say that better? I guess if you have 5+ years of experience, are a lead programmer, and haven't kept up with basic website security, then shame on your mentors and/or learning materials? right? Is that the nice way of saying it? Or should i have said, "Man, knowing how to run htmlentities() and strip_tags() and prepared statements is probably an advanced topic that everyone running a website should know about! HEre! Let me show you how!" Probably the last one. I apologize for being shocked.
Well, to be fair, that is what I experience. It's not speculation to me, sir. I find the entire situation **very** depressing!!! I would LOVVVEEEE for everyone to know this basic stuff. I don't even know how they missed it, for the most part. I try to help people and that's why i started the training course. I just don't understand why expressing my real world observations makes me an asshole, but .. um ... i don't understand much at all about human socialization either, to be honest, or at least ... how do i say it? I don't really relate to very many humans and a great many of their actions and responses to me seem very ... negative and confusing.
You are right, the variables should be replaced with %s
That's like saying that a hammer is faster than a screw driver. Yes, it is. I can do all kinds of really fancy tests to prove it. But that's kinda not the point. If you go around hammering screws into shit, something is going to get broken. A hammer isn't just a faster type of a screw driver. isset isn't a faster type of array_key_exists. *edit:* At least your combination approach indicates that you actually understand what you are doing. This JeffM guy just went around blindly replacing things without understanding what was going on with the code, and whether or not the null case was significant.
I don't know where the downmods are coming from, except that perhaps you're commenting in a rather odd spot. It's a legitimate question, albeit one that could've been answered by a quick Google. A framework is, in its most basic form, a suite of helper functionality that manages common tasks for you. It's important to distinguish it from a CMS, in that a CMS manages the entirety of the website, whereas a framework simply provides a basis upon which to code your *own* site, without having to repeat all of the little underlying functionality that exists in all website designs.
Yeah I've had situations where this one single change has reduced the time taken for a lengthy function by half. It was a situation with a lot of looping, but it certainly can be a valid change to make at times.
slimframework.com
Yeah, I know comparing a hammer to a screw driver isn't the same. That's why I went out of my way to have an option that actually did work like OP intended- it checks for it being set or for it being null. My hammer was a faster hammer, not a broken screw driver.
Same here, which is why I had to comment. Obviously making a change that breaks functionality is no good at all, but if you can remove a function call while still maintaining the end goal (such as by using a combination of isset and is_null instead of array_key_exists) then the right answer is to do it.
Agreed, that's what really turned me off to this post.
No. That's wrong, too. Using sprintf() won't defend you against that. $query = sprintf("INSERT INTO testimonials (name, email, userfile, testimonial, city, state, url) VALUES ('$name', '$email', '$file', '$desc', '$city,', '$state', '$url' );", I know, I shouldn't respond any more, but I'm still trying to help ;(
Pedantic: Most browsers don't allow self-closing script tags, even in XHTML mode.
Didn't know that. Thanks. Vertical lift watercrafted.
I've read that the salt should be the same length as the password, yes or no?
What frozenfire said, but to give a simple real world example and differentiate from loading a library (bunch of functions), take a front controller. This will typically require a modified .htaccess, an index file to handle requests, and some sort of class/file structure to process these requests. So, for e.g. you might use the Swift Mailer library, but your framework would take care of autoloading it for you.
Doxygen is actually written in Perl.
In the end it really should be a language thing. If there's an equivalent that's that much faster, the language should damn well use it.
Sure, it's a framework if you reuse that structure, my point was simply to differentiate between the use of libraries and the use of a framework (fw may use libraries, but libraries cannot include fw).
 // Query $query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'" mysql_real_escape_string($user), mysql_real_escape_string($password)); 
Thanks a lot for the reply! You make it sound so easy I'll have to try now! I've definitely wanted to, but am going to wait until I can convince my boss to pay for it. ;)
Your mention of GameFAQs and people banding together to build a message board system sounded suspiciously like a certain site that doesn't exist. Was curious if that was the one of which you spoke.
24 hours .. okay. But encouraging people to practice bad coding (1 file for PHP ... really?) is silly.
If people's reactions sound negative and confusing to you, let me explain why they do it: It's because you're a patronizing, condescending, rude, pretentious, lying asshole. People find these to be negative traits. 
I downvoted you because your high school drama is, to you, just an excuse to continue being an asshole to everyone, starting by comparing 2997 out of 3000 of redditors to high school bullies. You can't even write an apologetic message without sounding like a condescending asshole, and you have a history of drama-inducing posts, so yes, there seems to be something wrong with you. The last person I read that sounded exactly like you was a fictional character, and he goes by the name of Ignatius J. Reilly. And boy, did he have issues. 
For every project at work I do this: 1. Make a dev domain in the same server enviornment as the live site. 2. Build the site on that dev domain 3. After each major addition to the dev site I test the heck out of it, trying to find ways to break it that I'd not thought of when coding the addition. 4. Once at a point that seems like it's ready I'll push it out live. 5. Pray I didn't forget something.
The problem is *why* it's faster. In this case it's faster because both isset and is_null are not actually functions in the traditional sense- they're language constructs. Functions typically map to libraries of functions. In PHP this is transparent, as all libraries are included in the main namespace by default, while other languages typically make you "import" or "include" the libraries (such as including header files in C or C++, even for standard libraries). When you make a function call PHP has to look up the function's in-memory location from a symbol table. Language constructs are built into the language itself, as opposed to being part of an external library. This includes things like the operators (+, -, ==, etc), statements (if, switch, while) and a handful of "functions" which really *have* to be included in the core for the language to work. The 'functions' include, isset, require, print, and echo are all examples of this. So, in order for the language to "damn well use it" they'd have to take all of the libraries and turn them into language constructs. However, by increasing the number of language constructs they'd both increase the complexity (quite a bit) in programming the PHP core itself while also eliminating the benefits (since to manage this they'd still need a lookup table, which would grow in size). This is a very very simplified version of the problem, and may not be 100% accurate- I'm basing this off of compiler and language design books I've read and projects I've done, not the php internals themselves, and was simplifying it for the purposes of discussion. There's a much better, more in depth answer on StackOverflow about the [difference between language constructs and functions](http://stackoverflow.com/questions/1180184/what-is-the-difference-between-a-language-construct-and-a-built-in-function-in) that you may also find interesting.
Also known as the 'code and pray' method. That's not building in QA, man. You want QA? You need automated tests. I don't care if you do TDD or regression tests or a selenium suite or whatever, but you *need* tests.
Every phone can send a text message to an email address. So send the text message to an email address (or to a google voice number) and then use the built in PHP IMAP libraries to access the mailbox corresponding to the email address and volia, you have the text message.
This is silly, isset || is_null is always true. If the key is not set then it passes for null, with an E_NOTICE.
Don't telcoms charge for that?
Your test is **completely** flawed. 1. Firstly, if(isset($testArray[$field]) || is_null($testArray[$field])) **succeeds if the key doesn't exists**. In other words, it's a worthless test. 2. $testArray[$field] produces an E_NOTICE error if the key doesn't exist in the is_null call. 3. You only test for the successful presence of keys, isset + is_null is significantly slower than either choice if the match fails. Unlike isset, is_null *is a function* just like array_key_exists and is called on every failure (or null). You get a small speed improvement by testing for isset first and then array_key_exists. The array_key_exists() will then only be called if the key doesn't exist or the value is null. 
Not sure why you're sending so many different content types. Shouldn't you just send one? header("Content-Type: application/ogg"); Also, why are you sending the X-pad header? Isn't that for ancient versions of Netscape? 
are you sure the file is ready when the header request is made? what happens when you request a ogg that has already been converted?
You could easily build an entire website with plenty of features in 24 hours. But perhaps constrained to a single file you might invent something a bit more minimal and interesting. 
What did you use to encode the ogg file? (Totally aside from your php script.) I have fallen into a trap of using ffmpeg to encode an .ogg only to discover that it was somehow corrupt -- I reencoded the ogg by exporting it frmo Audacity &amp; it worked -- no idea why, but I thought I'd mention it.
I don't know about the x-pad header, never really looked it up. I tried a single content type and it didn't work, also a forum post had a similar issue with mp3 where the fix was to us multiple content types. As far as I know, the program will choose which one works best for it if you provide a list like this.
I thought about this. According to the exec docs (shell_exec as well), the next command will not process until the exec has finished. To test this I created the file first, then disabled all copy and exec code but not the headers and the readfile() function. It still didn't produce the output for Firefox with the existing file.
 ffmpeg -i "'.getcwd().'/temp/'.basename($track).'" -ab 6400 "'.getcwd().'/temp/'.basename($track).'.ogg" I tested this on the command line and the output file worked fine from my computer (using Totem). I could only assume that Firefox would play it if the conversion worked and the code was correct.
ok, if you think so. But it might be worth a try importing whatever file is in $track into Audacity and exporting it as an ogg from there. Just sayin. I only mention it because it caused me endless pain &amp; I never would have suspected the problem.
There's definitely a problem with the file, like you mentioned, but it didn't have to do with the code above. I fixed the issue and have now run into the problem you described. I downloaded a working ogg file from someone else's website and used the audio tag to link to it directly. That file worked, while mine doesn't. The main reason I wanted to try ffmpeg was because it was already installed on my server. Now I'll have to try something else. Apparently wav is suitable for Firefox too. Maybe webm.
Ouch. Thank you very much for catching that. 
This worked from the command line. I'll try it in the code now: mpg321 Input_File.mp3 -w raw &amp;&amp; oggenc raw -o Output_file.ogg &amp;&amp; rm -f raw
Install Live HTTP Headers and spy on a request that just sends a ogg file from the servr, one that plays. Compare the headers to yours and try to match them.
Yeah, I end up using wavs. But they're not great if you have a big file. Hopefully webm will be widely supported in the future. Audio codecs are a real drag. There's so much promise in putting media on the web, but the practicalities of it are still non-trivial.
Hmm, interesting. I'll have to try out mpg123, thanks for sharing. 
Thank you for your input and I think you have very valid points. Regarding the debate about whether it's a library or framework, I use Glue solely as the Controller section in MVC structured sites. As most other MVC projects are labeled as "frameworks" and Glue is just one part of the MVC stack, I felt confident in "micro-framework". I have no argument about it being labeled a library or even just an idea about how one can create a simple dynamic site. Regarding having a dedicated site for something so simple, there were a few reasons for that. Most other MVC projects have their own site. I wanted to appeal to that trend but get the point across that you don't have to use a full MVC stack for a site that sits somewhere in-between a static page and a complex dynamic site. I see it as an advertisement of simplicity, I guess. Also, IMO, having a dedicated site looks better in a resume or portfolio. :)
Yes, I have the source available here: http://gluephp.com/index.txt http://gluephp.com/set_env.txt The general structure of the site is a series of directories: * data: Markdown-formatted text files * tpl: contains a Twig-based template * public_html: contains the index.php and set_env.php files. The majority of sites I have written with Glue follow this structure. It's not the best code, but it works for me. :)
Oh heavens, this was long before that site-which-does-not-exist. A good solid decade or so ago (the good old days when GameFAQs was smaller and not owned by CNet).
Even though you solved the problem (and I don't know enough to help you anyway), I recommend checking out the source code for tinyogg.
php gd library will let you do the same.
Unfortunately there are a lot of fancy effects that GD cannot do.
If imagemagick's binaries ('convert', etc.) are available on the command line, you can pipe image data through them using popen() or other means. However it's slower and you have to be very careful to sanitize user-supplied filenames.
Why copy? Can you hard-link the files instead, assuming the source and destination are on the same filesystem?
shell_exec() won't come back until the conversion is done.
i have ... gentoo linux :) &gt; emerge pecl-imagick -av 
If your on shared hosting your pretty much at the mercey of your provider. Even if you had shell access and could some how compile it in your home directory, I'm sure they wouldn't allow it to be loaded from .htaccess, and if they did you should probably leave the host either way. 
use a cloud server at amazon or rackspace. Installing php extensions is pretty easy.
I have a smb share mounted. I wanted to run the conversion from the mounted directory, but PHP's safe mode won't allow execution of commands outside of the web directory. I can copy the files though. I don't know if it would allow me to execute the conversion through a file link, so I'd rather not hassle with it since it's working.
And if I remember correctly there are a number of image formats that are unsupported by GD, such as photoshop's PSD files.
When I installed this I had some issues as well. I was on a freebsd box though, and ended up having to find some obscure link to a version that someone else had compiled, as nothing I tried seemed to work. If you're on shared hosting though you're probably out of luck. I'm not sure what you need the library for specificly, but for my needs there was nothing else.
Considering that you spent several days trying to figure this out, do that. Whatever the price increase for a cloud server compared to shared hosting, it would already take 2+ years to make up for your time. The cheapest Rackspace Cloud is actually very affordable.
I struggled once tried to use the various php imagemagick extensions to let me build Really Big images, something imagemagick itself is quite apt at doing. It sucked. Memory was leaked, Imagemagick flags were ignored, processes were crashed, and generally no useful image was generated. At the height of my despair, I was using pcntl_fork to spawn 16 processes, each building a chunk of the giant image. In the end, I ended up using PHP to generate a really big .msl file (as it happens, PHP is adequate to output large quantities of text), then spawning an imagemagick command line tool to generate an image from it. The command line tools have usable resource-limiting flags, and will actually be able to complete whatever you ask of them without blowing up. The overall runtime speed of this approach compared favorably to the made-for-php linked libraries. I imagine it wouldn't be very hard to write a tiny bit of PHP to abstract the generation and conversion of .MSL files behind some $w00t-&gt;drawStuff(x,y,stuff) type API. 
I can relate to this.
Sneaky Tomas Fredriksson is at it again!
By default ffmpeg will use flac for the audiostream in ogg containers, firefox only supports the vorbis codec. Good day.
Now whenever I have a problem with code, I will just blame *jeffm*. People will wonder who or what *jeffm* is, and eventually adopt the term with complete ignorance, as I will never tell them the origin.
You can do some type casting in php so you can do something like: $var = (int)$var;
You could just cast it like so: $integer = (int) '0008' Or you could use intval() like so: $integer = intval('0008') One thing to be aware of though... there is a possibility you might run into PHP trying to convert your string into a different number system (like octal). In which case, what you'd probably want to do is something like this on the string first: $integerstring = ltrim('0008', '0'); Which will only trim the character 0 from the beginning of the string.
$var = ltrim($var, '0'); That will trim any leading 0's from your strings.
TIL what [TDD](http://en.wikipedia.org/wiki/Test-driven_development) is. Thank you guys for your advice! 
I highly recommend it. Glad to get you started on the right road :)
In general, in PHP, numbers that begin with '0' are octal numbers^1. That means, they have a base of 8 (as opposed to a base of 10 for decimal numbers). There is a "WARNING" on [1] that says if a symbol that isn't valid in base 8 (i.e. 8 or 9), then the remaining part of the integer is ignored. So, depending on the source of the numbers, they may be intended to have leading zeros (if they are base 8) or they may not have intended leading zeros (if the zeros are padding, for instance). In the first case, you'll likely want to convert the number to decimal using [octdec](http://ca2.php.net/octdec) In the second case, you'll want to trim off all of the leading zeros. However, beware! If the number you are trying to remove the zero padding on has an 8 or a 9 within it, everything after the 8 and 9 will be removed! So, that is, if you had $i = 000865 print ltrim($i, '0'); The function would print an empty string, as the 8 and everything beyond it is ignored, since 8 isn't a valid symbol in base 8. In order to use *ltrim* you will have to ensure that the number you wish to remove the padding on **does not** have a 8 or 9 in it. [1] http://php.net/manual/en/language.types.integer.php
I noticed someone downvoted this; is it just a random downvote or am i missing something? I tested it just to see but it seems to work as intended... It also seems to be more self-documenting (i have a var, and i want its integer value) and cover more bases than using a string function such as ltrim.
Magento is really headache for beginners. But it is the most powerful framework in PHP. People who criticize PHP must see Magento once... 
...at which point they will switch to Python or Ruby. :]
See? i can't even relate to what you just wrote. Seriously! How is the previous content condescending? I'm not arguing with you, I'm saying, "I just don't understand!!" Is **this** comment condescending?!? If so, *how many people actually think that?* Just you? 10%? 50%? 99%? How does one even know??? Also, I didn't say that "2997 out of 3000 of redditors [are] high school bullies". What I said was that in the various times people have attacked me irrationally, when there have been thousands of people present, only 1 or 2 would ever step outside of their comfort zones and offer any kind of rebuttal / insights as to what's going on, etc. To those people, I honestly think they're very awesome human beings, even heroes. I know I step out when I witness others being attacked, even if just to tell people to give them the benefit of the doubt. Does that make me an "asshole"? No way. Man! I even took back **everything** I thought I might have offended someone with, admitted I was wrong **and offered an explanation and apology**. So I really don't see how that makes me arrogant or an asshole ;O Quite the opposite.
Noted. Thank you. It does kind of make it difficult to deal with, but I understand Mozilla's reasoning.
why are there so many downvotes here. There's lots and lots of ways to make 00008 look like 8, none of the valid answers should be downvoted. * $var = (int)$var; * $var = intval($var); * $var = $var + 0; * $var = ltrim($var, '0');
But thank you, very much for attempting to explain your reasoning behind downvoting the above comment and being courageous enough to identify yourself.
At least I'm humble enough to admit that I can't possible judge some random joe smoe I meet on the Internets. I also bet you $100 that you cannot find one place where I have called someone as many names as you called me in so short a sentence.
See also http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html I get downvoted for this all the time on /r/PHP and told I don't know what I'm talking about, etc. So I thought I'd finally show some evidence to back up my assertions.
Certain people here get a kick out of downvoting every sensible comment. If you ask them why, the ones courageous to fess up start name-calling you. The most frequent terms thrown at me are "arrogant", "asshole", "idiot" and "prick", in order of most prevalent to least. Just look at this query!! http://www.google.com/search?q=site:reddit.com+hopeseekr+%28asshole%20or%20idiot%29
Yeah it's pretty stupid for people to downvote this. Either cast as an int or use intval. Just watch out for 32 bit limitations for big numbers. 
It's my experience that a great may people on /r/PHP have no fucking clue. If people aren't using prepared statements, they deserve any and all SQL injection maladies that befall them. Of course, prepared statements aren't the magic bullet, but they will prevent direct SQL injection attacks. There's a ton of hardware level stuff you need to worry about as well, but that's more of a vendor-specific set of issues.
Er, mysql\_real\_escape\_string is fine unless you are an asshole and change the character encoding on your connections to something ridiculous like GBK. Seriously, WTF?
Not once in all of the the sources on stackoverflow or here in the comment linked source was a single example affecting sql injection, for that purpose using mysql_real_escape_string *properly* (properly quoting in your sql query) will protect against sql injection, except in edge cases dealing with multibyte data or in situations where you are messing with character encodings *other* than UTF-8. No one part of securing an app is sufficient in securing an app. You filter input, properly escape, cast values that are supposed to be typed and you filter output. Your headline is like saying, "Did you know that htmlentities is not sufficient for securing an app?" Of course one function by itself or not knowing how to properly use a function is not sufficient in securing an app. BTW, I want to see a specific example outside of messing with character encoding, where mysql_real_escape_string does not prevent sql injection. //upvoted because this is an important topic
Let's just hope the unprofessional attitudes of some of the people on /r/php is in no way indicative of the PHP development community in general.
Prepared statements protect you if you use them correctly everywhere. mysql_real_escape_string protects you if you use it correctly everywhere.
I was just reading the comments on the site and one of them recommended [HTML Purifier](http://htmlpurifier.org/) to sanitise the input for XSS. Open the zip file and it contains 777 files. Seriously? I need all that just to sanitise the input?
From what other people wiser than me say, mysql\_real\_escape\_string doens't proected you enough. Are you saying you're wiser and more knowledgeable than all those people?
See http://www.sitepoint.com/forums/showpost.php?s=919baa38471812e2c172fe5acf2dd630&amp;p=2439889&amp;postcount=3 and many other examples where many people have tried to explain this time and time again ... against resistance from the PHP community. Well, mysql_real_escape_string doesn't protect against sql injections more than addslashes, but that's not the reason you use it. addslashes() was from the developers of PHP whereas mysql_real_escape_string uses the underlying MySQL C++ API (i.e. from the developers of MySQL). mysql_real_escape_string escapes EOF chars, quotes, backslashes, carriage returns, nulls, and line feeds. There is also the charset aspect. However, it is a common thought among a lot of PHP programmers (beginning and even more advanced) that SQL injections are the only thing to guard against with sanitizing user input using it in a query. That, actually, is incorrect. If you only rely on *_escape_string and addslashes because you are only thinking about injections, you leave yourself vulnerable to attacks from users. MySQL has some good tips to PHP programmers in their documentation that is, sadly, no where to be found in PHP's documentation (that I know of, as I've read almost, if not all, and PHP's mysql documentation). http://dev.mysql.com/tech-resources/articles/guide-to-php-security-ch3.pdf . It's a nice read, especially if you like reading articles about PHP programming (*guilty*). Scroll down to page 78 where they talk about LIKE attacks. If you aren't one for reading, they use the following illustration of something that neither mysql_real_escape_string or addslashes protects against: PHP Code: $sub = mysql_real_escape_string("%something"); // still %something mysql_query("SELECT * FROM messages WHERE subject LIKE '{$sub}%'"); And recommends the following: PHP Code: $sub = addcslashes(mysql_real_escape_string("%something_"), "%_"); // $sub == \%something\_ mysql_query("SELECT * FROM messages WHERE subject LIKE '{$sub}%'"); Also, read the section above the section on LIKE: No Means of Escape. Hope that helps some, Jonathan
In the absence of proof to the contrary, why not? All I saw on StackOverflow was some guy called Rook who was rocking with world with an example of someone passing something straight through from $_GET to mysql_real_escape_string in a numerical context ("where id = $escaped_thing"). Well duh.
Wrong. It doesn't protect other things, such as the infamous IE 6-8 charset hacks nor LIKE %exploits. I mean, check this, this is pretty simple: $sql = sprintf('SELECT 1=1 WHERE username LIKE "\%username%s"', mysql_real_escape_string($user)); It's totally going to open you up to a whole host of nastiness. Prepared statements protect you from all this, and indeed, every known SQL exploit (to my knowledge).
Yes, you actually do whenever any HTML tag at all can be in the user data. This is **particularly** critical in CMS systems where "trusted users" are expected to enter in code. You're one exploit from total ownage. It's just a risk vs cost question *every* dev should make their organization aware of! If you're some stupid little side project, ok, maybe it's not worth it. A major ecommerce website? YOU BET!
Proof's attached (see above).
Does this problem exist in UTF-8?
Again, these are examples of not properly using quotes, and not filtering/typecasting for intended storage. It has nothing to do with whether or not the escape function works properly. The article you linked is great, but it's not about how escape functions don't work, it's about how to properly use them and prepare proper queries.
Misleading headline. Of course mysql\_real\_escape\_string() is not sufficient for _securing an app_. Because securing an app involves defending against several different kinds of attacks, and mysql\_real\_escape\_string() only helps defuse one kind of attack (SQL injection) -- assuming you use it properly -- and even then it's better to use prepared statements. In a nutshell, [string is not a type](http://web.mit.edu/~ezyang/Public/iap/intro-to-was.html) (see p. 2-3). Every string needs to be escaped differently, depending on where you want to put it: SQL, HTML, JS, etc. (By the way, that link is one of the more comprehensive tutorials on PHP security out there, written by none other than Edward Yang, the author of HTML Purifier.)
According to comments in the linked source, no it doesn't affect UTF-8.
This entire post is fucking retarded because you are *implying* that mysql_real_escape_string somehow doesn't do exactly what it was designed to do: **escape SQL strings.** Anotherwords, it solves this problem (and only this problem): //vulnerable login test $password = $_POST['password']; // value is "password' OR 1 = '1" mysql_query("SELECT * FROM `users` WHERE `user` = 'admin' AND `password` = '$password'"); //SQL injection means this will always return the admin details! mysql_real_escape_string would return a $password value of "password\' OR 1 = \'" which would not automatically return a successful query anymore. But the above example shows a lot more glaring security problems than whether it can be blindly SQL injected (Plaintext passwords? No constraints on user input? No check on number of times the login has been attempted and failed? Etc, etc. . ) Arguing that mysql_real_escape_string is not sufficient for securing an app is like arguing that there is something wrong with seat belts because they don't stop you from driving off a cliff.
the size of the switch does not matter, refactor your code so that the switch itself is just method/function calls so that you feel more comfortable maintaining that particular logic structure.
^ what he said
&gt; WHERE username LIKE "..." What the fuck is that bullshit? Ok, here is a (slightly) less contrived example: $sql = sprintf('SELECT TRUE FROM ... WHERE username="%s"', mysql_real_escape_string($user)); Can you please provide the exploit you are talking about? &gt; infamous IE 6-8 charset hacks What the fuck are you talking about?
What does UTF-8 have to do with this?
The problem referred to involved parsing issues with a specific encoding. For people who use UTF-8 (which I assume is most people; if not, it should be), I still see no reason why mysql_real_escape_string, properly used, is any less secure than prepared statements.
So the security hole only applies if you are using SET CHARACTER SET
Ok, lets say I want to clean the user input so I've just got plain text, no html or XSS, how much safer is this HTML purifier library compared to just going: strip_tags($input); htmlspecialchars($input); Or running some of the new PHP 5.2 [filter functions](http://us2.php.net/manual/en/ref.filter.php) on the input?
i mean thats a known fact given by the description in the manual. its to protect you from failing sql queries and nothing else... btw. there is mongodb :P
Protip: Stop using mysql.
no idea. he's right, its the easiest way. for large number protection maybe: $var = sprintf( '%u', $var ); but (int) typecast should do the trick. ha, im actually the only one that would use %u sprintf. *win
slimframework.com &lt;- has glue features and way more but not too much. just the basics. honestly glue is a bit too simple... also look what i did: https://github.com/tobsn/glue/commit/e1f621ac9f90633fe63058150bedcafd307d621a btw. gluephp is not a framework nor a MVC model or anything else - its a single router function. thats how a router class should look like within a skeleton framework: https://github.com/codeguy/Slim/blob/develop/slim/Route.php
The problem is that escaping is inherently insecure because it tries to clean the input similar to using a blacklist in spam detection. A new version of mysql may come along with a bigger surface area of attack or an obscure unicode character sequence may not be protected, who knows, it may be secure now, it may not be at some point. Prepared statements are inherently secure, because of the way they execute it is architecturally impossible to ever inject code into the bindings. It's the same as using md5 to hash passwords versus doing it properly and using bcrypt. You might get away with it and it seems pretty secure at the moment but it is fundamentally the wrong way to do the task. If you want to write your applications correctly you should use prepared statements, it is the only correct way to do it.
a singleton class with no OOP elements.
&gt; Prepared statements are inherently secure, because of the way they execute it is architecturally impossible to ever inject code into the bindings. That's a pretty bold claim. How do you know there's no buffer overflow or other flaw in the code that processes them?
Ok, yes that is a bold claim and there could be, just as with the debian security flaw recently, an inherent implementation problem. This is about surface area though, if a bug allows an exploit of prepared statements the surface area is limited to the relevant code. With escaping, the surface area applies to every string that you pass into mysql, personally I know what I'd bet on.
Here's very interesting 45min talk about SQL Injections - http://ontwik.com/php/sql-injection-myths-fallacies-best-practices-of-defense/
Not alone.
mongodb is susceptible to injection, just in its own query language
Your cases might have graduated to becoming their own classes (possibly subclasses that overrides the method where the switch currently lives).
Let's also consider that anyone with a large application in an enterprise environment (facebook) is not going to use only one language for every piece of it. Sure, there's *some* PHP, but what are they doing on the backend? There's obviously some messaging going on whether it be JMS, etc al.. You can't just say "PHP is great cause facebook uses it.. look, the url says index.php!"
but its very uncommon... like viruses or trojans for osx... 
I think you should code in Python.
is that supposed to be encouraging? "mongodb is safe from injection unless it becomes a popular target"?
This post is ridiculous. It's link bait. Anyone who thinks that mysql_real_escape_string() is going to prevent XSS shouldn't be developing web sites. That's why it's called MYSQL_real_escape_string(), not protect_me_from_every_possible_attack_vector(). Also, if you're using the object method, rather than the function ($mysqli-&gt;real_escape_string()), then character set changes are covered, as well. This is non-news.
It's feature-packed, sure, but it's a real pain in the ass to develop for and is a prime example of how an open-source solution can go tits up if there are too many developers involved. 
 **Want to turn off the 'Product Compare' option?** Easy, do it in the administration system. **Want to turn off the 'Tell your friends about this Product' option?** Ah, sorry, you'll have to hack around in 3 XML files and 6 template files to remove that. My point being: *why the fuck are 2 very similar product-related features not both administrated in the same way? They should both be turned on &amp; off at the flick of a switch.* **Want to swap the price box &amp; the buy now button?** Well, that's more of a pain in the ass than you'd ever think possible. **Want to export your product set (including attributes, because hey, you might as well copy the ENTIRE product data-set while you're doing this) via the administration system?** No, sorry, but you can copy the individual products (without associated attribute sets) if you want - you'll have to buy a 3rd party plugin if you want to copy the entire database you've spent fucking weeks setting up! *My resolve to this was just to export the entire mySQL database to a .sql file and import it manually* **Want the payment system work with that popular, well-established bank?** Sorry, while cover inane ePayment systems you've never fucking heard of, you'll have to buy a shoddy 3rd party plugin to do that! When I first started working with Magento, my development process worked like this: Browse to Page in Firefox -&gt; Open Firebug -&gt; Inspect Element that I need to restyle -&gt; Locate element (hopefully finding a unique CSS ID attached to it) -&gt; Open Magento project in Netbeans -&gt; Search Entire Project to find the HTML ID or the CSS element, because it's a fucking mess -&gt; Make change -&gt; Repeat. Now, don't get me wrong, the more experience you gain, the more familiar you get and I don't need to do that so much any more now I know the structure of the templating system. I have to say though we've started to use [Shopify](http://www.shopify.com) for smaller clients, and it's a breath of fresh air. 
I like using cases because it's trivial to add a new case but if the thing becomes longer than the information it's designed to output then it may be too big.
It's the restraining to a single file that makes this a game. Giving 24 hours is mighty generous. In that time I could prototype pretty much any application I can think of but not in 1 file. 
&gt; if you're using the object method, rather than the function, then character set changes are covered, as well. The manual says that about the [mysqli](http://php.net/manual/en/mysqli.real-escape-string.php) version, object or not, in contrast with the [mysql](http://php.net/manual/en/function.mysql-real-escape-string.php) one.
A possible reason for downvotes: The conversion of the string '0009' from string to integer *may* cause a conversion into octal instead of base ten, based on how the conversion occurs. Casting using `(int)` seems safe at least in PHP 5.3, but other methods may not seem so lucky.
That "ubiquity" is precisely why I got out of PHP. I had a client who had picked a cheap PHP host. That host decided to migrate us from a server running PHP 4.4.10 to one running 4.3.8 overnight with no notice. Naturally it was *my* fault that the site stopped working because PHP changed how references were handled between minor versions.
I'd actually just use a forum if that's where you want to go with it. Simplemachine forums has a great calendar system. Though from your description you want a scheduling system not a calendar. A sequence of shared google calendars is probably best for your application. I used that here in my office with my co workers until it was handled by IT's move to outlook (*which I still maintain is horrible*) but whatever, the calendar system works. 
Dear Reddit/programming world in general... rather than posting some stuck up, immature bullshit such as THIS ^, why don't you post something useful... ie: "15 methods for sufficiently securing an app". If people spent less time bashing "idiot" programmers, and more time helping less experienced programmers with insightful examples and helpful descriptions, the world would be a BETTER HAPPIER PLACE. In other words, if you have nothing constructive to add, then please fuck off. 
You know, the funny thing is I felt like you sort of deserved all the flack you got here: http://www.reddit.com/r/PHP/comments/ev91b/did_you_know_that_mysql_real_escape_string_and/ Maybe if people call you an arrogant asshole it's because there might be something to it at times? Maybe people just perceive you wrong but saying that anyone who calls you an asshole does so because they can't admit that they're wrong is kind of arrogant. Oh wait.
Thanks. I was beginning to wonder if i was going to receive a legitimate reply. 
You mean to tell me mysql_real_escape_string won't work on some character encodings when configured improperly? You'd don't say!
i never said anything about mongodb being safe from injections. 
I usually do something like this: $module='home'; $modules=array('home','page','calendar','blog'); if(in_array($module,$modules)) include('modules/' . $module . '.php'); From that point on you can either execute the code in the included php file or create a function in each module file with the same function name, though this limits you from re-using this since the function will be already defined on 2nd go round. 
I'm pretty fond of lessphp: http://leafo.net/lessphp/
I did something similar to this in a project I did. I had Apache serve css files as a special type of PHP file that prepended a file to catch the content of the css file, and appended a file after to handle it, so I didn't need to do the &lt;?= ?&gt; stuff, it would just find strings that began with $ and replace them, though I'd never considered using the palette idea done on that page. 
Yeah, Less is great but I needed a way to store these variables in the database. Not sure if it does that. 
ahhh yes dynamic function naming. For those who don't know you can call a dynamic function via a variables name...Quick example (that i stole): function addition ($a, $b){ echo ($a + $b), "\n"; } $result = "addition"; $result (3,6);
Can we see a running example of your site?
Less *should* be able to accept a string with variable definitions (which you can create by pulling from the database) and includes to glue everything together.
Exactly.
Sure, I'll PM you the address. I don't really want it out in the public so if anybody else wants it just ask and I'll PM it to you as well.
Prepared statements protect you from LIKE exploits? I'm not sure what IE charset hacks have to do with communication between PHP and MySQL. 
This is actually not that great since your CSS file is probably almost never changing but you're still requiring a script call to display it. It would be better to just save it as something like style.user.css and regenerate the static file when an administrator changes the template.
(insert debbie downer noise)
Yeah, I saw this as well. I'm really trying to learn PHP though. 
I am curious as well.
I've been doing this for a while, and I really like the ability to autoversion, it will keep the css cached unless it changes. [http://particletree.com/notebook/automatically-version-your-css-and-javascript-files/](http://particletree.com/notebook/automatically-version-your-css-and-javascript-files/)
What about gzip?
&gt; mysql_real_escape_string doens't proected you enough. You've posted a good example; but, of course, it is a contrived example. It's a good warning to people with absolutely crazy character encoding requirements; in that case, I would recommend people use prepared statements. But in the vast majority of cases, mysql_real_escape_string() is totally sufficient.
If you send the right headers, it'll be cached anyway, so it really won't matter.
HTML Purifier is only useful if you want to allow users to input raw HTML, for example, by using a WYSIWYG editor. Another use case mentioned on the HTML Purifier website is email processing, where the service provider wants its users to be able to send and receive HTML emails. But if you're not accepting HTML submissions, or if you're processing user input in a different way (BBCode or Markdown), you don't need HTML Purifier. Honestly, HTML Purifier is so slow, you'd want to avoid using it if at all possible. htmlspecialchars($input, ENT_COMPAT, 'UTF-8') That's really all you need for XSS prevention, if you only care about plain text inputs. (Don't forget the charset.) On the other hand, strip\_tags() is pretty useless. It's possible to craft a string that remains a valid XSS attack _after_ it has been processed by strip\_tags(). Besides, if your users write anything that legitimately contains angled brackets, those brackets will be lost and your users will complain. Edit: By the way, the [Standalone version](http://htmlpurifier.org/download#Standalone) of HTML Purifier only contains ~130 files. Still huge, but much better than the standard version.
That's an interesting example, but `SET CHARACTER SET` is not the right way to change the character set of a MySQL connection. Since 5.0.7, PHP has [mysql\_set\_charset()](http://ca2.php.net/manual/en/function.mysql-set-charset.php) which achieves the same effect without breaking mysql\_real\_escape\_string(). Of course you'll have security issues if you don't use the correct function. I agree, though, that we should all be using PDO and prepared statements by now. There are so many ways to mususe those mysql\_\* functions.
Thanks for the explanation.
Sometimes, doing it on the server side (PHP) is the right answer. Sometimes, doing it on the client side (JavaScript) is the right answer (assuming an acceptable % of your visitors have JS enabled, and you provide fallback, etc, etc.) Don't just learn PHP, learn the stack and how it all works together [RetroRock has good advice, above.](http://www.reddit.com/r/PHP/comments/evhwt/just_learned_how_to_control_my_css_styles_with_php/c1bb104)
Optional unless you require them specifically for something like payment fraud detection. I only require personal info at the point right before they make payment, if they're just on a free account then I'd rather have the increased sign up rate. 
It depends on the purpose of the app.
You could just use PHP to add/remove/change a class that corresponds to the styles you want. Or there's always the option of generating the CSS with PHP in the header. This isn't that great, but would be better than using PHP to generate the style sheet every time.
The more information you require, the fewer signups and the more fake info you end up with. If you need the names for some legal or fraud-prevention reason, require them. Otherwise you're only hurting yourself.
That was my favorite part! Jeffm ran over my dog.
&gt; it checks for it being set or for it being null. Unfortunately it doesn't. If it's not set, then it's null. Try for yourself: &lt;?php if ($unset_array['unset_key'] === null) echo "it's null, darn"; ?&gt;
Then what was the point of mentioning it?
&gt; The cheapest Rackspace Cloud is actually very affordable. Anyone had experience with this? I've used their dedicated servers, and while they are missing some key features found elsewhere (mainly serial console and remote reboot powers), they're generally very reliable and the tech support is good. However, their cloud computing service was an acquisition and it's not clear to me how well they run it or how good the technology was in the first place.
&gt; When I installed this I had some issues as well. I was on a freebsd box though, and ended up having to find some obscure link to a version that someone else had compiled, as nothing I tried seemed to work. I have a whole platoon of FreeBSD boxes running ImageMagick out of the ports collection together with the PECL module. Did you get your ImageMagick from ports or elsewhere?
&gt;If you send the right headers, it'll be cached anyway, so it really won't matter. Apache handles headers more efficiently than PHP does...
i'm the furthest from an elitist/purist/whatever, but that approach is really just reinventing [LESS](http://lesscss.org/) in some very unfortunate ways edit: didn't notice earlier comment [here](http://www.reddit.com/r/PHP/comments/evhwt/just_learned_how_to_control_my_css_styles_with_php/c1ba5i4)
god thats a complicated way of writing out styles its actually less work to just write out the colors you want
I've saw another article linked on SO recently: http://cognifty.com/blog.entry/id=6/addslashes_dont_call_it_a_comeback.html While I do not agree with the headline implication, it makes some interesting points. And magic_quotes turns out to be sufficient also, if and only if you set your mysql_set_encoding() to ASCII or Latin1, that is. Because the single quote can only be represented in one variation in those two charsets, and the MySQL tokenizer would ignore any other. That being said, prepared statements are indeed the way to go. Not because they are inherently more secure, but because they are harder to overlook than an unescaped string variable sneaking in between SQL commands. Because that's the very real reason we still see such exploits - people are too dumb to be stringent about it.
I was just referring to SQL attacks alone. Perhaps I should have made that more clear. I didn't think people would blindly start accusing me of being a troll, but that's happened so many times on reddit I'm hardly shocked.
Out of everyone who posted criticisms, you're the only one who gets it! It's more than just SQL injections, but SQL attacks! SQL escaping only prevents one type of attack in VERY SPECIFIC circumstances! NO ONE who has criticized me on reddit has **ever** successfully used mysql_real_escape_string -- or any escaping function for any database, for that matter -- to successfully guard against *ORDER BY* AND *LIMIT* EXPLOITS, among other attack vectors. How do I know? BECAUSE IT IS **IMPOSSIBLE** TO ESCAPE LIMIT INPUTS BECAUSE NO DATABASE SUPPORTS IT AND ESCAPING FIELD NAMES, TABLE NAMES, ORDER BYS, etc IS NOT IN THE STANDARD AND IMPLEMENTED TOTallY DIFFERENTLY THaN mysql_real_escape_string() IN THE FEW DBS THAT HAVE NONSTANDARD ESCAPE CHARS, LIKE MYSQL's BACKTICK ESCAPER. SQL escaping, like "bad" HTML tag filtering, is impossible to guard against every known (and unknown) exploit, while prepared statement *DO* PROTECT aganst *PRACTICALLY EVERyTHING EXCEPT BUGS IN THE CORE DATABASE ENGINES*. YES! I'm exasperated! I"VE HAD ENOUGH WITH BEING CALLED AN IDIOT BY PEOPLE WHO PROCEED TO SAY THAT **I** AM THE ONE WHO IS "ARROGANT" WHILE THEY WILL FROM THEIR ARMCHAIRS ATTACK ME WHILE I AM JUST TRYING TO HELP THEM (AND BY PROXY&lt; THEIR PROJECTS AND COMPANIES) OUT! Five years ago, practically no one but the pros knew about SQL injection or mysql_real_escape_string() at all. It looks like we've done a pretty damn good job of reaching everyone who posts criticisms here. But seriously? do you think you're safe JUST cuz you try to escape a few sections of the SQL query? I'm just trying to help.
You obviously didn't read the PDF.
it's called an on-the-spot example late at night. Gosh. What's your problem?
oh jesus, sorry for mentioning it...
Now you just have to convince the raging hordes that like to call people like us names.
I read the pdf, and the specific sections you pointed to. I understood it, and it has nothing to do with what you are claiming.
All my dev and staging environments are set to E_ALL, production is set to display no errors but to log anything greater than notice level. It has come to the point that I don't even realise it, I automatically avoid notices just as you would avoid errors.
I use error_reporting(-1) and log everything else to stderr, where is collected (multiple servers) into a main server. Even if it's an undefined index, I want to know why it is undefined.
Same here. Notices are just errors waiting to happen.
Gettext is a mature and traditional unix utility for translating message strings. It provides fast runtime translation of message strings and tools real world internationalization really needs like message extractor.
Ditto, since I start programming PHP.
duh, the idea is that I can give the cms to somebody who doesn't know css and he can change out the colors. 
Yeah, really the only language I don't know at this point is Javascript (that I care to know anyway). I've got PHP, CSS, and HTML pretty much down. Javascript is next!
css is crayons compared to php put your coloring in a seperate css file, apart from structure, and then let the user pick which color set to use. gotta keep users away from the code, they will learn and no longer pay you good money to make things red and yellow
`E_ALL|E_STRICT` is the first thing I add to the ini file on a new PHP installation. The only time I *don't* turn on every warning in a language is when I'm writing bash scripts. Taking pointless risks like ignoring error output in a multi-user environment just doesn't make sense.
lol you're either new to the game or you're out of the game because the entire web industry is based on CMS work now. I used this CMS (built completely from scratch) as a way to learn PHP. I didn't know one line of code beforehand and now I have a CMS. Nobody paid me to do it I simply build it for experience. 
I'm not a pro PHP developer but why not fix errors? When I turned them on on a site I run there were thousands, but most were nested in loops and were because my array keys didn't have quotes around them. Once they were all fixed, there were only about fifty left on the home page that were actual errors, so it made the actual problems a breeze to fix.
k
If getting rid of notices is way too hardcore for you then you may be in the wrong field. Please do the next person to maintain your code a favour and ALWAYS develop with all errors and notices on. It is completely unacceptable. You should be treating notices as errors anyway. If turning that on turned your code into a mess of notices, then I'd hate to see your code.
I leave them on but I also use the kohana framework which enables then by default
Same here.
++
I think it's best to keep even notices on in development. I think it's pretty bad practice to do something PHP lets you do. For example $x['index']=$value might generate for an undefined array. Maybe it's no big woop the way you've written it but then you learn to ignore those notices. If you get in the habbit of doing something like $x=array(); $x['index']=$value; One you're being more clear about what you are intending and what the expecations should be. Also when do you start getting notices then that's a red flag something happened you didn't intend to and you might spot a bug before you're dealing with the consequences down the road.
*off topic for /r/php, sorry* If you're going to learn JavaScript, I highly recommend [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) by Dogulas Crockford. I also have an older edition of [JavaScript: The Definitive Guide](http://www.amazon.com/gp/product/0596101996/) as well, and I use it weekly at least. Don't know how up-to-date the latest edition is, though. I also recommend watching Crockford's five-part series on [YUI Theater](http://yuiblog.com/crockford/). He's actually quite entertaining.
Uhm... that's a broad assumption. There are some cases which are too extreme for one to even bother. echo $arr['level1']['level2']['level3']['level4']; There is no excuse for the amount of boilerplate code necessary to make that line pass E_STRICT for every possible case. It's just not worth it. You have to isset() and then assign on every level. What "bug" are you going to avoid here by doing such a thing? You are actually likely to introduce more bugs considering the amount of lines of code you would have to add. More LOC = more possible bugs.
Umm... what exactly is the difference between an "SQL injection" and an "SQL attack" ? I'm all for using prepared statements, but you're going overboard dude. &gt; IT IS IMPOSSIBLE TO ESCAPE LIMIT INPUTS I challenge thee to break the following query: $dbh-&gt;query("SELECT col1, col2 FROM table ORDER BY col1 LIMIT " . (int)$limit); &gt; ESCAPING FIELD NAMES, TABLE NAMES, ORDER BYS, etc Best practice dictates that field names, table names, etc. should only contain alphanumeric letters and underscores. It's very easy to check that the input contains only these characters: preg_match("/^\\w+$/", $input); Besides, you should be keeping an array of permissible values (whitelist) and throw out anything that doesn't belong there. --- *I completely agree with you that mysql\_real\_escape\_string() is not a one-size-fits-all security guarantee.* It was specifically designed for escape string literals, and it does an excellent job at that (provided that you use the correct charset). But it was not designed for escaping table names, limits, etc. If somebody uses a security-related function for a purpose for which it was not designed, of course that will result in an insecure app. I agree with you there. *I also completely agree with you that we should use prepared statements all the time.* But if that's what you're trying to say, you chose somewhat irrelevant arguments. 1. In most cases, prepared statements won't allow you to use placeholders for table names or field names. The query planner needs this information when preparing the statement, so you have no choice but to interpolate table names and field names into the SQL query string. In that case, you still need to validate/sanitize user input before using it as a table name, field name, etc. That's no different than mysql\_real\_escape\_string(). 2. Validation is different from sanitizing/escaping. No matter what kind of database API you use, you must make sure that $\_GET and/or $\_POST contains what it should. You want a limit? Make sure it's an integer. You want a field name? Make sure it's alphanumeric. Invalid values should be caught long before you get to the database API. Just because prepared statements tend to throw an exception instead of blindly consuming whatever string you throw at it, that doesn't mean you can sit back and think, "Prepared statements are sufficient for securing an app from SQL injection attacks". They're not, unless you scrutinize user input as if it were laden with gonorrhea. All of the problems you mention above can be solved by proper data validation. Neither mysql\_real\_escape\_string() nor prepared statements are secure unless you validate your data. _That's_ the lesson to take home from all those fantastic online resources and lectures. PDO and prepared statements are better for many reasons, but foolproof security is not one of those reasons. Edit: typo-fixes and clarification.
 if (!empty($arr['level1']['level2']['level3']['level4'])) { echo $arr['level1']['level2']['level3']['level4']; } ? No warnings. Unless you expect null, 0 or an empty string as a value, then just do a type check along with it.
Actually I was considering more of a loop scenario, having to foreach on each level, which would require the !empty to be on each one, together with corresponding error handling code and/or assignment for the undefined index. There's probably not much use for a 4-level-deep array with a single item... but yes, you're right.
Please, for the love of God, post your code. I'm genuinely curious as to what it looks like. Dozens of notices? My curiosity is piqued.
Pretty weak reference for someone who knows their way around
You can share your google calendar with other people. Otherwise, this could be a quick little project with Symfony 
It is not acceptable to have notices. I'm very interested in seeing your code. Whatever you post (under 500 lines), I'll rewrite for you. Post a few pages PHP is one of the many languages I use regularly.
What is your experience with this micro framework? A review would be interesting.
pick a project eg, What's your favorite animal. Try.
Notices are errors. Fix them.
Always (for me at least) Dev error_reporting(E_ALL | E_STRICT); ini_set('display_errors', TRUE); Staging error_reporting(E_ALL); Production error_reporting(E_ALL);
Have been for 2 months, just haven't found and good tutorials or any information that helps me retain the code. Or is this normal? Because I started taking html classes my freshmen year in highschool, and im a senior now and I still have to look up help for it every now and then, and im starting to think im just slow and shouldnt be in this line of work
&gt; If there are any pro PHP developers here, is it generally acceptable to have notices in the code, or should they be reduced as much as possible? *Completely eliminated*. In the few small places where you might simply want to ignore a notice or warning (happens for me in some file system functions) I just prepend the error suppression operator (@). I actually take it a step further than error_reporting(E_ALL | E_STRICT) and add this to my code: function errorToExceptionHandler($errNo, $errStr, $errFile, $errLine, $errContext) { if (error_reporting() == 0) return true; throw new ErrorException($errStr, 0, $errNo, $errFile, $errLine); } set_error_handler('errorToExceptionHandler'); That converts every notice, error, and warning into an exception with a proper stack trace. 
Why no E_STRICT in production? 
If MySQL is version 5.1 or later, you can send this to MySQL to dynamically change the max_allowed_packet parameter at runtime: set global max_allowed_packet=50M There is no way to ignore the error because that parameter is the maximum amount of data MySQL will accept in a single query. If you ignore it, your data will not be saved. 
You only learn by doing. For some platforms, I've had to lookup how to do every little thing as I go. Eventually, you just start remembering stuff. But you should start with a project and go from there.
I don't have SUPER privileges so I can't do that script but thanks. As for the data not being saved, I am fine with the single query that returns the error to not be saved since 99% of all the queries will not come up with this error.
The problem is your data is too big for a single INSERT or UPDATE; you might be able to break up your query into 2 or more to by-pass the limitation. For example, if your insert has one long string field -- send half the string and then append the other half. 
wow, such a simple workaround but pure genius. Honestly I can't believe I didn't think of that. Thank you very much kind sir.
I always develop with full error reporting on. Otherwise it's too easy to fall prey to bugs caused by mistyped variables and the like. Better to get in the habit of initializing and checking everything.
Practice practice practice. If you don't remember the stuff, it's because you haven't done it enough yet.
 $output =&amp; $arr['level1']['level2']['level3']['level4']; echo $output; Notices are avoidable errors. If I run a script and it produces notices it tells me the developer either messed something up or is too careless for me to trust that they don't have a silent logic error somewhere. EDIT- btw, the above isn't what I would recommend but given your argument it's my solution.
Programming requires patience. Everyone uses reference material even if they are fluent in a language. Play with source code from places like GitHub and keep reading books, in fact, never stop. I've been programming for ... shit 21 years ... I'm getting old... and I still play with source code, read books, and use reference material. It's not something you ever stop doing.
 if (strpos($_SERVER['SERVER_NAME'],'local.') !== 0 &amp;&amp; strpos($_SERVER['SERVER_NAME'],'dev.') !== 0) { ini_set('display_errors',0); ini_set('log_errors',0); ini_set('error_reporting',0); } else { ini_set('display_errors',2); ini_set('log_errors',0); ini_set('error_reporting',E_ALL); } All day every day
Hilariously enough, run the PHP runtime through a profiler. Whether the error/notice gets dropped on the floor or acted upon, the runtime penalty of raising it is still incurred. I've seen scripts that have as much as a 300% speedup because of all the notices.
This framework make excellent use of Lambdas and Closures ( http://on.shameerc.com/closures)
As a matter of practical usability, I try to encourage that what I write only requires a single field for the users name. Some cultures have no surname (Burma, India), some have multiple first or surnames, and some (damn my parents!) allow for more than one middle name. Throw in the joy of (as I'm led to understand how this works, anyway) cultures with logographic alphabets (say, China) allow for a name to be a single character, or their "full" name to be two characters, which may not be separated by a space character (have fun parsing that in code!) It's not always practical, especially when dealing with credit card processing, but I'm a big fan of just "name". It also means ever so slightly less work with letting users set and update their name.
Good insight. I'm going with your suggestion.
Well why not start by telling us what you already know? Teaching others, saying, and / or writing what you know helps memorization. EDIT: By the way, never feel that it is a bad thing you have to look in the documentation of php.net. No programmer out there knows or for that matter remembers everything. That is why it's there.
If his site needs *that* much performance, he shouldn't be posting something like this. 
Anotherwords, is actually "In other words" such that you are rephrasing what you meant in another way of understanding it. In other words, clarifying what you said. See? :D
notices are slowing your php to the hell. when you are processing for example 15 000 records without single error/notice, its done in 1 second. when you are processing for example 15 000 records with notice for every record ( in loop ) your process takes more than 30 seconds. 
I agree the above approach is a simple and fairly extendable. You can even made the $module as class. heres my version: $module='home'; $modules=array( 'home' =&gt; 'Home', 'page' =&gt; 'Page', 'calendar' =&gt; 'Calendar', 'blog' =&gt; 'Blog'); if(isset($modules[$module])) { $classFile = 'modules/' . $modules[$module] . '.class.php'; if (file_exists($classFile)) { require_once($classFile); $instance = new $modules[$module](); ... Then do your magic inside the $instance object ... } } 
Notices are bad and are a problem just waiting to happen.
If you want to learn to program, go to community college. I will get downvoted for saying that; I always do; but, you know it's the truth.
subscribe to thenewboston in youtube, that guy's programming tutorials rock!
&gt; If there are any pro PHP developers here, is it generally acceptable to have notices in the code No.
Keep track of how much you're sending over the MySQL connection. Stop early. Force close the connection. Open a new one. Problem solved. Alternate ending: *bear* *ninjas*.
That's locked as unsettable (as are the other interesting ini properties) in a default cPanel deploy.
1) Never use alternate notation. It's turned off on most sites, doesn't save you significant work, and *will* cause you hassle. 2) That's a call for heredoc. echo &lt;&lt;&lt;EOCSS body { background: $PageBG; color: $PageFG; } etc EOCSS; 3) The single quotes and pound should probably be in the literal, not in the variable echo &lt;&lt;&lt;EOCSS body { background: '#$PageBG'; color: '#$PageFG'; } etc EOCSS; 
Thanks!
&gt; Google Short Links uses your Shameerc.com Account for Sign In. wtf
I always use error_reporting(-1) when I code PHP. I also use it in production and staging, but in production I have also set up error and exception handlers with set_error_handler and set_exception_handler.
No, not really - the setting also affects GROUP_CONCAT and there is no other way around the problem if thats what you're doing :/
I view code with notices in it a sloppy and unprofessional. Anything I sign off on as "done" has zero errors and zero notices. I realize a lot of people have lower standards than that, but I think anyone who actually takes pride in their work and has been programming for long enough time, dealing with other people's error-filled code would have the same approach as me.
As a matter of personal principal I do not require more information that what is required to verify a user login. On sites that require a unique identity this means email address and password (Hashed of course). On sites that allow for anonymity; username / password. If the site requires any form of payment processing I require only what is needed to process the payment and always give an option to store the information for frequent users. After that they can add what they want to their profile or leave themselves completely anonymous. A persons right to information is not contingent on the amount of information they are willing to give up. It is their choice, not mine. To generate revenue to support the site I give people the ability to opt-in (not opt out) to market statistics and demographic information. I NEVER sell personal information as a matter of good principle. If they choose not to opt in I use limited ad placement. Nothing excessive or interfering with the users ability to use the site. With regards to your question use the Name field. If you need to split it out write a simple method to handle it. I also never require middle name or middle initial (unless required by law). **TL;DR: Never require more than you need; Let the user decide what they want to share, never force at gun point; Name field = "First Name + Last Name";**
"Anotherwords" is also a long time in-joke in my old English class that somehow has made its way into my vernacular. But I forgot that wasn't the right one to use :)
Indeed. 
&gt; happens for me in some file system functions Even with file system functions you should be able to test for various possible error conditions in advance. A nice set of wrappers makes it possible to react wisely to various things (inability to mkdir or whatever) without having to suppress warnings.
I had a reason once. Now it's just what I do. Now that I think about it, it's because the developer might have a different version of PHP installed than what is on production. Of course we want all devs on the same version as production but devs play. It's on staging to catch any issues when a new PHP version comes out that we want to promote to production.
Turns out, the only place I have it is on unlink(). You can't test for error conditions in advance due to race conditions. Testing for a files existence before deleting it won't work because another process could delete the file between the test and the unlink call. 
I've used several professional level applications all of which produce a ridiculous amount of notices. One such application that comes to mind, vbulletin.
I've used it on two small projects. It takes about 10 minutes to figure out and it does what it says. No complaints. It's really nice to use PHP 5.3 features.
I have a "debug" flag set in my code. When I enable it, I get "error_reporting" along with all of my GET/POST/SESSION parameters. It definitely has its use.
Why set error_reporting to zero on production? Some bugs can and will occur there, wouldn't it better to trigger those and log them to a file (or email)? 
It's 2011 and there are 200,000,000 Twitter examples out there dating back to 2008. Why not start another eh?
Any new development should be notice free. This includes cleaning up libraries you use, and contributing patches if possible. 
So do you know any language or you just decided you want to learn to program? What's the motivation for you? A strong desire to figure things out is part of it but you need a target to focus on, try to figure out a hobby project to start with, code for yourself and for fun, that's the best way to learn. 
Agreed, what *problem* is being solved here? Lazy CSS?
Take a look at an other redditor's solution: https://github.com/kurtschwarz/FFFUU-Exception 
Gotcha, no worries. I rarely get the chance to give someone a TIL moment.
Good point. I guess if you really wanted to, you could create a new file that indicated your intent to delete the file (if you're deleting "tmp01", you could create "tmp01-delete" containing your PID). Whoever created that file gets to delete the target. But I don't imagine it's worth the effort. I haven't run into the race condition situation that I know of, because normally any files on disk are attached to a given user's activities and that user just isn't going to be able to send two requests fast enough to sneak in between file_exists and unlink, but I accept that it's possible.
I'm a software developer working at a major university using Python/Django, C for database fixtures, and sometimes PHP for legacy applications. That being said, I do not recommend learning programming with PHP or Python. You are reading these tutorials without the knowledge of how things really work and it's no wonder you're lost. Learn C. Not only are these languages made from it, but it teaches you how to logically think about writing programs. Once you've learned it, I guarantee you'll have better comprehension when learning other languages. PM me if you need help/details.
Of the spate of PHP "microframeworks" that have come out in the last year or so (Limonade, etc.), Slim is the one I've liked working with the best. It does just enough to be useful -- handling the HTTP request/response cycle and the mapping of URIs to functions -- and stays out of the way if you want to use other libraries for everything else. I had been working on a hybrid for my own use taken from parts of Limonade and Pluf (the framework behind Indefero), but Slim pretty much provides the features I was looking for in one package. I would like to see just a little more documentation about the before/after "hooks" in the framework, since those can be used to set up middleware-like situations, which I like for dealing with authentication and output tidying and things like that. I have not, though, done a really deep review of the code for Slim or benchmarked it against any other framework. Performance hasn't been an issue for the kinds of things I do with it. Frankly, I worry more about the code that deals with the business model more than the HTTP transaction. The code I have reviewed is pretty clean and well-documented and doesn't seem to be doing anything stupid. I am a little disappointed in the built-in logging functionality, which only allows for logging to the file system. I'd rather be able to pass it a function so I could implement other kinds of logging. 
Nice review. Your first paragraph pretty much sums up my goal for creating Slim. The `develop` branch on GitHub &lt;https://github.com/codeguy/Slim/tree/develop&gt; contains a more evolved plugin/hook system that is described in detail on the GitHub Wiki documentation page. I agree wholeheartedly with your critique on the built-in logging. I do intend to improve Slim logging very soon in the next point release. Thanks for the feedback.
Some people learn better in a classroom. I've always done much better by just writing code.
Is it the PHP syntax itself that you're having trouble with, or how to tie the pieces together into a working app?
Im not surprised you've been downvoted, although you are 100% correct. Learning a 'low level' language will seems like a real PITA (because it is), but once you get a true understanding of memory allocation/deallocation, variable state, and the runtime stack, you will pretty much be able to pick up any language out there. OP: If you're just trying to cobble something together and have it magically (most of the time) work, check out python or ruby. Avoid PHP or Perl as your first language. Too many inconsistencies.
The site of PHP has a great introduction into language with the short examples. Another great site is sitepoint.com, netuts.com. Zend.com has a great introductory course into PHP the PHP 101. Register to phpclasses and look at the code of other people. Another site is DZone with popular links to articles, blog posts about numerous languages including PHP. Also find a forum that you like and post questions there. There are many of these types of forums or knowledge exchangers like forums.devnetwork.net, stackoverflow, dzone and of course /r/PHP
I don't run with E\_NOTICE in production or development. If an array key is undefined, but I echo it out (say, into the value attribute of an input field) I couldn't possibly care less that it outputs an empty string. The code runs exactly as intended. To me, this is a feature of scripting languages. If I didn't want this behavior, I'd probably code in something else. For exercise, I turned on E\_NOTICE on our dev server (I've been playing with it all day trying to exploit the [floating point bug](http://bugs.php.net/bug.php?id=53632) of the day) and my eyes are cringing. I really couldn't care less about any one of these generated notices, and would be pretty bitter about prepending each of these notices with an isset().
Until the day you spend 14 hours chasing down a typo in a variable name that you could have spotted in 2 seconds if you'd been using complete error reporting.
I have and love Rackspacecloud. I use the smallest server instance for about $11 / month including bandwidth and it seriously kicks ass. I pay peanuts more than Bluehost but have root access to my own CentOS box. My Apache configuration, my PHP installation. Performance is always fast and steady (unlike Bluehost) and I'm impressed with how lightweight and secure the default image is. On the flipside, I've only ever logged into their "Control Panel" three times. It has a slick web interface to control your VM, but apparently this management interface goes down often. Yesterday was the first time I tried logging in since I first signed up and it the console was down all morning and most of the afternoon. Overall, I'm very pumped about the service. YMMV.
&gt; I use the smallest server instance for about $11 / month including bandwidth and it seriously kicks ass. How much bandwidth does it include? I just went to their configurator at http://www.rackspacecloud.com/cloud_hosting_products/servers/pricing/ and chose the cheapest linux server (the $11 one) and when I said I'd use 200GB/month of outgoing bandwidth it went to $36.
Another great micro framework would be [Glue](http://gluephp.com/), which was posted here maybe last week or so. Great to see some excellent frameworks being developed.
enabled this setting on my employers web app. And was horrified to see how many notices were generated from half a decade old clunk.
You pay for all the bandwidth you use. My bandwidth fees have never exceeded 1GB a month, so I pay something like $0.12 for it. Recently I got an email stating the price had just dropped a few cents, so hey that's nice. I don't host much content on my site. I assume most of the traffic generated is from Google bots and the like. I really want to host some of my hour+ long MP3s but I'm afraid to put them on my site for fear of robots.txt-ignoring crawlers and the bandwidth bill associated with it.
*Raises hand*
The Python and PHP mob is after me.
&gt;the runtime penalty of raising it is still incurred That is, if error_reporting is turned on, right?
No, I think what oorza is saying is that it still executes the notice generating code, but then just bins the notice rather than displaying it...
Can someone confirm this? I would suspect that turning error_reporting off would prevent that from happening.
I like my code to be clean. This mean E_NOTICE and E_STRICT have to produce no messages. If there are messages, I'm writing sloppy code and it's time to tighten up the PHP. The notice for when you forget the $ in front of a variable name and PHP treats it like a string literal (!) is very much an error-level thing to my mind.
Use FirePHP and set it as the error handler.
&gt; Production &gt; ini_set('display_errors', 'off'); FTFY Log errors in production, dont send them to the end user.
What ... does group_concat have to do with anything? This is a total non-sequitur.
What do you use for authentication?
@$variable will cure a lot of that.
BAM. Cargo cult programming. Notices are notices. They are meant for debugging. If you add heaps of isset() to suppress them, you can make the notice go away; but not the actual cause of the notice. Undefined variables are an error source. A hypothetical. Making the notice about them go away will just obscure where a NULL value or empty string originated.
You are mistaken. Notices are errors.
No, whether it's turned on or off. Revamping the notice/error system because of this gets kicked around the internals mailing list a lot.
Wow, this whole thread is a masterful example of programming memes gone awry. People don't comprehend the difference between errors and debug messages. Notices are the latter. Supressing them with syntactic salt won't fix actual problems, just obscure them. Notices can represent actual syntax errors, like unquoted barewords, which should be fixed. But undefined variables OTOH are not an actual problem if you use a friggin dynamically typed scripting language which honors unset values and NULL correctly in most contexts. Adding isset() and default values to suppress a notice isn't generally sensible. That will just lose a useful debug hint of where a NULL or default value originated. - Much unlike the intended @ error suppression operator which would still make such debug notices available to custom error handlers. Also, as noted in one of the few insightful comments, notices don't cause measurable performance drains. It's the undefined indicies which do. Microoptimizing that makes sense for loops and nested loops, but seldomly elsewhere. The real reasons PHP coders are anal about suppressing notices is because of the (1) code "cleanliness" meme and perceived professionalism and "secure" code appearance, (2) failing to understand the difference between errors and notices, (3) lack of filtering notice/error handlers or management tools.
I always develop with all notices (strict included) enabled but leave them out for production. It's really how you should develop to make sure you have code with better longevity I think.
They must be. Else your circular logic wouldn't be *noticed*.
I've used no circular logic, instead I simply restated what I said about. http://www.php.net/manual/en/function.set-error-handler.php There's a reason notices are trigged as an error in PHP, because they're (minor) errors. The problem with minor errors of course, is they often lead to bigger problems. If you don't even bother checking if a variable exists, if you fail to initialize an array prior to using it, if you use an unquoted string... these are all problems that php must then interpret, and possibly interpret incorrectly; alternatively, it can be a programmer error, that gone unchecked, can cause significant logic errors.
Freaking sick man! Here's hoping everyone likes it as much as I do.
It's pretty neat. I was looking at some of the internals and have three questions: What are you doing with that referrer? http://2.ape.fluin.com:6969/?[{%22cmd%22:%22script%22,%22params%22:{%22domain%22:%22fluin.com%22,%22scripts%22:[%22http://fluin.com/Source/mootools-core.js%22,%22http://fluin.com/Source/Core/APE.js%22,%22http://fluin.com/Source/Core/Events.js%22,%22http://fluin.com/Source/Core/Core.js%22,%22http://fluin.com/Source/Pipe/Pipe.js%22,%22http://fluin.com/Source/Pipe/PipeProxy.js%22,%22http://fluin.com/Source/Pipe/PipeMulti.js%22,%22http://fluin.com/Source/Pipe/PipeSingle.js%22,%22http://fluin.com/Source/Request/Request.js%22,%22http://fluin.com/Source/Request/Request.Stack.js%22,%22http://fluin.com/Source/Request/Request.CycledStack.js%22,%22http://fluin.com/Source/Transport/Transport.longPolling.js%22,%22http://fluin.com/Source/Transport/Transport.SSE.js%22,%22http://fluin.com/Source/Transport/Transport.XHRStreaming.js%22,%22http://fluin.com/Source/Transport/Transport.JSONP.js%22,%22http://fluin.com/Source/Core/Utility.js%22,%22http://fluin.com/Source/Core/JSON.js%22]}}] How's the performance of the APE push engine? How come you're only long polling for three seconds, then beginning a new polling request? Why not just poll for thirty seconds or a minute and reduce the requests? 
I've never found one. Seems odd that it's missing no?
I know HTML/CSS....I have a few ideas i would like to put on the net that i haven't seen yet and i believe web developing is where its at in the future 
I may have to try that out when i get the time, thanks!
Now that is a reasonable reasoning I can agree too. Yet still you shouldn't overlook that "error" in terms of how PHP handles them is a generalization. They can very well be categorized further as fatal errors, informal errors, warnings, and last but not least debug notices. Of the issues you mentioned the unquoted bareword is the most severe and does indeed warrent fixing. For the others it's important to notice the subjunctive. All these issues are *potential* problems, but not always real errors. PHP is dynamically typed and NULL is a core variable type, which it interprets quite well in all contexts. If you access an undefined var, PHP will print such a notice. Adding `isset($var)?$var:NULL` will make the notice go away, but not change the outcome. It's *syntactic* error supression, and obscures where the NULL originates from (the notice is informative, and you'll lose that debug information). I'm not arguing to ignore them. Quite the contrary. I'm saying if you outright suppress them (like many do), you can only check the surrounding code *once* for potential issues. Isset() does neither fix the outcome, nor the cause.
Why wouldn't you just use the [mkdir](http://php.net/manual/en/function.mkdir.php) function directly?
I've had this argument many times with other devs, afterwards, they always agree with me. Notices are bad. Because of the internals of PHP, dealing with an undefined variable is more than twice as slow as checking whether the variable exists first (whether that be via `array_key_exists()` or `isset()`). In the end, it's simply better to have notices turned on, that way you can get rid of any bugs in your code. what causes notices? echo hello; //very bad, you're causing php to assume "hello" is a constant. $arr[key1]; //also very bad, for the same reason $intvar[] = 1; //This is what happens when you forget to initialize an array first. You end up with vars potentially being used twice, except this time, it's not what you thought it was, it was an int, not an array..
Notices are not bad. Notices are useful. And as said I do have them enabled (on/off per userscript). The three examples you gave are factual syntax problems. The last would be a E_WARNING, not notice. Undefined array indexes however seldomly are. (I'm considering the microoptimization topic moot.) But you could give an example of what you are trying to fix with isset.
Being checking FuelPHP site from time to time since I read about this in Codeigniter forum to see if there's any change so this are great news for me. Will give it a dry run tomorrow, thanks a lot to all who put effort on this project. MASSIVE KUDOS!
I think I broke it. It's not showing my posts when logged in, works when anonymous.
Sounds good, I'll check it out sometime for sure, but not until the documentation is complete (that's the greatest part of CI imo).
Maybe its just me, but for a framework whose main feature is simplicity, it looks awfully complicated.
I suppose this doesn't get any love because nearly everyone develops with error_reporting set the maximum anyway. 
What are the differences between FuelPHP and, say, Kohana? Also I'd love for a non-5.3 version, since I never use closures/namespaces. Still got some 5.2's hanging around. edit: I do see things like [Migrations](http://fuelphp.com/docs/general/migrations.html), [Tasks](http://fuelphp.com/docs/general/tasks.html), and that neat Oil doo-dad. Anything that would make me go, "Oh man, I *have* to switch!"?
Migrations and tasks has been solved by one of the Kohana developers quite recently. [Kohana-Minion](https://github.com/BRMatt/kohana-minion) - Minion is a module for running database migrations located in the kohana cascading filesystem, but it also provides a useful framework for creating cli based tasks. As for Fuel, I don't see anything that makes me want to switch. Certain things like namespacing and closures are certainly useful, but Kohana are starting to add those now too. Fuel also add quite a lot to the base package; I'm sure things like migrations, redis, auth, etc ... can be moved into modules to make the core lighter. 
Thank you so much, I like the way this guy teaches! he doesnt cram all the information in 1 video
Would move away from the subdomain thing as it breaks logins. Pretty mental though, I like it.
The lenght of the string GROUP_CONCAT returns is alos limited by max_allowed_packet: &gt; The result is truncated to the maximum length that is given by the group_concat_max_len system variable, which has a default value of 1024. The value can be set higher, although the effective maximum length of the return value is constrained by the value of max_allowed_packet.
No, not really. What purpose would wrapping *creating a directory* in a class serve? What functionality could possibly be added? I mean, we have [SplFileInfo, a built-in way to describe any directory entry](http://us2.php.net/manual/en/class.splfileinfo.php), but that's for things (files, directories, symlinks, etc) that already exist. 
What parts do you feel are complicated? There is a difference between something being naturally complicated and overly complicated, which hopefully we got right. 
It's pretty close all things considered! We have a list of outstanding features that need to be documented: http://typewith.me/4cfbj6hLHL
This is what I use: function mkdir($dir_name) { if (!is_dir($dir_name)) { exec("mkdir -p $dir_name 2&gt;&amp;1", $output, $retval); if ($retval != 0) { $msg = "could not create $dir_name \n"; $msg .= "return value: $retval \n"; $msg .= implode("\n",$output); return $msg; } else { return false; } } } I have it return false to reproduce the [return value](http://pubs.opengroup.org/onlinepubs/009695399/functions/mkdir.html) of unix mkdir. I have wrapped a lot of unixy functions like this so I can read/log the return value string if they fail. 
I use Whitesmiths
Depends on the situation, a lot of times I run small adsense sites that I don't wanna hear about unless it's a cheque coming in the mail or a total site meltdown
We don't expect any hard-core Kohana users to drop their framework overnight (or even any time soon), especially well known ones such as yourself. If you're using a framework and are happy with it then you are very unlikely to change, that is natural and fair enough. That said, FuelPHP is quicker in the tests Dan has been running so far. When BETA is out we'll test it all more extensively and publish the results. As for moving things to make the core lighter, they are never loaded unless called so having a 4k Redis library sat in your core hurts nobody. Adding it as a package would be an unnecessary overhead for those that do actually want to use it.
I was looking for class that would handle all/most file renaming, file creation, directory, permissions, etc.. I think a class can warrant be created providing all such methods- especially since zend is pretty oop. 
I appreciate your explanation. And I could definitely use it but my development environment is on a windows machine while the production server will be Linux. Thanks!
http://philsturgeon.co.uk/uploads/files/Screen_shot_2011-01-04_at_18.14_.24_.png That part.
That's a really good reason to make sure code produces no notices, then. I'm sold. Thanks for the info, oorza. 
It seems straightforward enough here. That's coming from someone with a background in web frameworks though.
Allman style is what I use. Although if I'm working on someone else's code I just follow their style.
Yeah, but when I start coding with my own small framework, I know what to do. With that I need to open docs, learn how to use the framework. Frameworks always means that I have to learn how it works. And I never really found anything that is on framework that I can't live without. (TL;TR: I am too lazy to learn Frameworks)
You've invented IRC!
I just forgot to make that public.. Thanks for mention....... You can read my article on shameerc.com .. 
&gt;Yeah, but when I start coding with my own small framework, I know what to do. With that I need to open docs, learn how to use the framework. You understand your own framework because you wrote the whole thing. You can't expect to magically understand someone else's framework without studying it.
Allman all the way. It's not like we're developing on 24-line screens anymore. I find it makes it much easier to follow the flow of the code. if (blah) { bleep(); } Anyway, the only important thing is that anyone caught using GNU style must be pilloried by nightfall that same day. PS tabs FTW.
This put me off a lot: http://amiafucktard.com. I mean, why bother? We're not all 12 year old little girls who giggle at the work fuck.
Allman, but I don't add random spaces if () // no if() // yes
&gt; Also, as noted in one of the few insightful comments, notices don't cause measurable performance drains. It's the undefined indicies which do. To put it more precisely, it's the situations which cause the interpreter to raise notices, which cause the performance drains. Therefore if you rewrite your code do it does not raise notices, you will not see those particular performance drains. You are unlikely to be able to do this if you do not have error reporting set to show you the notices.
why don't you add a space after bleep? if () of () xf () bleep () or if () of() xf() bleep() or (my prefered) if() of() xf() bleep() or something... it feels weird having some random words you add a space after and the other 90% you don't.
You are returning multi-megabyte group_concats? 
My practice has been to add a space after control structure keywords (if, while, for, etc.) and not after function names. I don't have a great reason for it, I admit, though it does help me a little bit more when quickly scanning through code.
I know, but that doesn't make it less complicated for me :P I feel like I can make application faster and better with my own code, rather than learning and then using ready build framework. However I have tried couple of frameworks and some of them looks very good. But I am just too lazy.
Oh come on it's a small 10 minute joke app and was a suggestion on twitter. Made for a chuckle and not a reflection on the framework. I'm not a 12 year old, but it was more interesting for me to make than yet another to-do list app or some crappy note management doc.
K&amp;R here.. ie. if (whatever) { call(); }
It can be quite a daunting prospect to jump into a Framework like Zend where it can look to be all or nothing knowledge. It can be a steep learning curve but once you've got over the hump it's like reaching programming Nirvana.
Exactly right. Compared to something like Zend the code we use is about as complicated as "Hello World". The documentation will contain way more usage examples and be easier to learn than many other frameworks that leave you guessing most things.
Looks good, but I struggle to think of a reason to use this over Kohana, I know you have already stated that you aren't expecting any users to switch. I think the problem is that it strikes an uncanny resemblance to Kohana, which of course makes switching to FuelPHP easier, but doesn't say "Hey use me! I'm different (and potentially better)". Whereas something like Lithium does. That said, respect for writing your own framework. If I was going to write a framework, I'd copy many of the things that Kohana got right. Just to stick up for Kohana, it's documentation has really come a long way, it did suck, but now it's up there with any other framework. [Kohana Docs](http://kohanaframework.org/guide/) 
1TBS
Yeah... Maybe I should learn one of the frameworks well someday...
Whitesmiths here.
Glad to see they have some docs now, I knew they were in the works but had not realized they were finished. I did not mean "I dont expect people to switch", I mean that it is very rare for a developer to say "Sod using this framework I've been developing twith for X months/years, I want to use that one" and that's fine. At this early stage it does appear very similar to Kohana and we'll have to prove our differences. That will happen over time, this article was to get the framework on peoples radar. The differences for me as it stands: Quicker Doesn't need hundreds (/lots) of empty files just to support CSF Simplified Auth package Very simple ORM (instead of multiple) based on Rails ORM Much more inclusive REST controller Better CLI integration These might not be reasons to make you say "OMG I WANNIT" but that will come in time. Don't get me wrong, I have used Kohana and it is an amazing piece of work, just not for me. We've taken the bits we like and moved forwards to create something better (for us). Hopefully others will like it to but I'm not going to try and force it down anyone's throat! :)
No, not really, just happened to stumble across a server with freakishly low setting and needed to return quite a big (sub megabyte, relax :D) string.
I can't relax, it just freaks me out! I am going to go out and have a drink.
I do like how you took Kohana's cascading filesystem and also went with HMVC. I'll take a deeper look at your documentation but it looks really good. Is the only benefit vs Kohana/CI speed? Do you do anything interesting with Routes or the REST controller? I really do like the Tasks feature, though. edit: whoops looks like you answered this below. 
It took me a moment to realize you're voting the twitter people at top as fucktards or not fucktards. I thought it was asking if I was one .... so I had to answer honestly
None. And I use IF: ENDIF; . And I randomly put brackets around things. My code is indecipherable so no one else can decode it or replace me!!! Allman I had a coworker who was apologetically fanatical about 1TBS and when I worked on his I'd try and maintain it. Otherwise he'd complain to me about having to reformat it. I say "apologetically" because it was almost an ADD thing, he didn't WANT to have to re-tab everything and he was very nice about it but if it wasn't all 1TBS he'd be flustered. It was sort of "please don't do it Allman, I'll have to go back and redo it!!" I can't remember what I was taught, though, so I don't know where I picked up Allman from. I think it was the first real job I worked on in Perl must have used it and I just stuck with it.
&gt; Is FUEL production ready? &gt; Not right now, but we're not far off. The first BETA will be 01/01/2011. So is the beta the version on github?
Another vote for 1tbs
Lead Developer Dan Horrigan was seriously ill in the week coming up to the launch which was really bad timing, selfish jerk! xD What is currently on Git is very close to being the BETA, basically it is in feature freeze and we just need to document the remaining bits and release the beta. After that the stable won't be far behind.
Wait, what's wrong with if: endif; ? I find it helps keep me more organized when I'd doing foreach loops and entering and exiting PHP syntax (foreach through HTML'd results). That way you don't have a: &lt;?php foreach ($a as $b) { ?&gt; HTML code here &lt;?php } ?&gt; but you can do: &lt;?php foreach ($a as $b) : ?&gt; HTML code here &lt;?php endforeach; ?&gt; The benefits starts becoming more apparent with nested loops ... although I do wish Netbeans would highlight these matches.
REST Documentation: http://fuelphp.com/docs/general/controllers/rest.html Should work really well, it's based off my CI REST_Controller which has been used to death by a lot of people.
But it wouldn't serve any purpose other than being an OO wrapper for the same functionality, providing little more than name spacing. It might add error handling in terms of more standardized exceptions, but that's about it.
Interesting... compared to [Kohana's REST controller](http://kohanaframework.org/guide/api/Controller_REST), it seems to make more sense. I like how you traded the action\_ prefix for get\_/post\_/put\_/delete\_.
+1 for 1TBS. Only exception: using PHP for templating, in which case it's time for the alternative control structure syntax.
IntelliJ rocks in many ways. Maybe 10 is different, but at least 9 doesn't give you the option to just debug as a CLI script. So, I use NetBeans for that.
You'll need something to test the code you're writing. Phil came up with this as a test for the REST controller, which I think is pretty clever. Who cares what it's called, it a test. I've written http://wanwizard.eu for the same reason, I needed an app to test as much framework functionality as possible. Wrote it in about a day, with approx 1000 lines of code (including blanks and comments, and including a custom widget engine with theme support). Although I'm an avid CodeIgniter user (and will remain one), I can't do that in CI. Fuel is going to be my choice for the more demanding applications, and that includes the next version of ExiteCMS.
Does it apply to PHPStorm?
I couldn't get the CLI script debugging to work, but you can debug against a local server. I wrestled with it for a good bit before I gave up and settled for the "PHP on server" method.
I don't know, I haven't used it. I would imagine that the setup is pretty much identical though, as PhpStorm is just a subset of the same IntelliJ IDEA Ultimate IDE.
Does it have a firefox toolbar to enable/disable debugging? Can you run code while debugged / paused? I have an 'Immediate' window which I paste PHP in and it runs it. What is the search like in the IDE? I find searching a lot of files in PHPeD a pain.
Maybe just a change in the way [BuiltWith](http://www.builtwith.com) was handling their data? Some big-name companies decided to switch frameworks? Source: http://trends.builtwith.com/framework/PHP
College kids started class?
Really looking forward to use this framework. I've been long time CI fan, but lately i thought that it would be good to have something more modern. And here you are with Fuel. Thanks.
Ah, good point. I wonder if this happens every year... EDIT: Wait, no. These graphs cover two years of data, and this dramatic of a change didn't happen in August '09. Not in the slightest.
Then I was horribly wrong!
I'm leaning toward your explanation of the way they handled their own data internally. But if not, there's an interesting story to be told here.
If you use a framework such as [CakePHP](http://www.cakephp.org), it comes standard with support for testing. You might want to have a look at that.
When web server stats show similar shifts, it's usually a single hosting provider or registrar changing how they serve parked domains or some other minor change. It just appears big because it's all done by one company. If Yahoo, for example, made one small change to their HTTP response headers, all stats based on those headers could see a shift.
2010: the year major networks of newspapers switched their sites to WordPress? edit: Can anyone find any supporting evidence? I have noticed a lot of local newspapers switch to PHP based scripts.
I haven't gotten into using a framework (CapePHP, CodeIgniter) yet because i want to know how to code on my own before I use something to fit my work into. That, and when I started to code php out of necessity at work I didn't even know there were frameworks I could start with. 
&gt; The lenght of the string GROUP_CONCAT returns is alos limited by max_allowed_packet: And, again, this has nothing to do with the advice that I gave.
[I found this](http://www.pixel2life.com/forums/index.php?showtopic=847) that I might try for reporting errors.
[Someone over at google get to work on this please.](http://i.imgur.com/oVvZN.png) edit: I guess trends kinda does that but it's not that awesome.
Read the last comment: &gt; "The following error types cannot be handled with a user defined function: E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING, and most of E_STRICT raised in the file where set_error_handler() is called." PHP error handling has been a pain in the ass since the language's creation... The way I do it is to use the bufffer functions: http://php.net/manual/en/book.outcontrol.php I set the buffer so no output flushes out until I tell it to, then I save all my output in a variable until the very end, and then check the buffer... if it's not blank, then I know it threw an error, and I handle it. Like I said... major pain in the ass to handle it this way... but buffering it is usually good practice anyway for non-huge sites. 
You will always have to look stuff up. I've been coding for 10 years and still do. If you want a well reviewed book on it [check this out](http://www.amazon.com/Beginning-PHP-MySQL-Professional-Development/dp/1430231149/ref=sr_1_7?ie=UTF8&amp;qid=1294254683&amp;sr=8-7).
Maybe a bunch of companies realized they were using ASP.NET and... made a lateral movement. Zing! I'm just kidding, r/PHP.
It's unnecessary, that's why it doesn't exist. 
Could it have anything to do with Windows Live Spaces converting over 30 million users to WordPress.com? http://windowsteamblog.com/windows_live/b/windowslive/archive/2010/09/27/wordpress-com-and-windows-live-partnering-together-and-providing-an-upgrade-for-30-million-windows-live-spaces-customers.aspx
**NO.** [mkdir()](http://php.net/mkdir). It's difficult to write code in PHP that isn't cross platform, but this is the way you do it... Also a lot of shared hosts have exec() disabled.
Allman all the way. And those spaces aren't random. One space after control structures, no space after function/method names. As for whitespace, I use the Tab key, which is translated by the editor into 4 spaces.
most websites that try to estimate the popularity of different programming languages do it inacurately. They probably just changed their internal algorithm to one that they think is more accurate.
Your mom switched her porn site over to a PHP Framework.
This actually makes the most sense.
How would you detect that you're aproching the max_allowed_packet on the server (mysqld) side? I just stated, that there is a case when you need to change the variable and no trickery on your side would be able to do what it needs to do otherwise (*you could use LEFT() and RIGHT() but that is just wrong).
Anther happy 1TBS'r
&gt; Therefore if you rewrite your code do it does not raise notices, you will not see those particular performance drains. Or you could make those performance drains disappear by simply looking at the xdebug cachegrind profiling graphs. Well, except again for the aforementioned nested loops or any functions on a recursive jihad. So in most cases you can actually keep the notices in, and don't need to suppress them with error_reporting off or isset wrappers.
Slim looks really good so far. Really looking forward to seeing where it goes. The code does read well and is easy for even a noob like me to understand.
Consistent with their [WP graph](http://trends.builtwith.com/blog/WordPress).
Ahh... August and Everything after.
Hi, we moved the server to a more reliable source and updated our list of top million sites at the same time. So the jump occurs in a few of the other trackers as reported. Gary
wait wait wait, someone was wrong on the internet?!
glue is not a framework, its just a single function. 
I'd say that's a debatable definition.
Sessions are a built in php function that when called, create a file on the server. At the same time a cookie is sent to the users browser. Upon going to a new page you call for the session, the cookie is grabbed, and the session for that cookie "number" (really it's what is known as a hash) is sent to the code for use in the php script. They are basically an array that gets saved on and by the server. $_SESSION['anynameyouwant'] = "User is logged in"; EDIT: I should also state that they can also be passed in the url as a GET variable. You can get a taste of what a get variable is [Here](http://www.w3schools.com/php/php_get.asp) I recommend picking up a beginner PHP book from your local Barnes and noble or borders. They are full of useful information.
Learning C before something as simple as PHP? I understand you need to have structure (OOP). But C is a BIG step for someone who knows almost nothing about programming.
while this may be over your head now, I'm going to post it because it's [relevant](http://www.youtube.com/watch?v=fEmO7wQKCMw&amp;feature=related) There are a few vulnerabilities with PHP sessions that need to be addressed. The presentation above gives a really good explanation of how it's vulnerable and what can be done to code around it. Learn sessions first, then come back and watch this video. Better you learn it while you're still wrapping your head around sessions. Good luck! edit: the presenter basically gives you his background and why he's a trustworthy source, if you aren't interested in that you can [skip to 5:35 into the video](http://www.youtube.com/watch?v=fEmO7wQKCMw&amp;feature=related&amp;t=5m35s) also, you should be able to find the links to parts 2 and 3 in the sidebar, didn't feel like linking them all.
[PHPUnit](http://www.phpunit.de/)
FIRST WRONG OF 2011!
I don't know about newspapers but you remind me of a time about a year ago when Hillary Clinton was giving a speech. Someone on IRC mentioned they were watching a stream of it but didn't answer where it was. It wasn't mentioned on any major news network's site so on a guess I checked live.cnn.com and found a half built wordpress site. I mentioned it to the IRC channel and someone told me that supposedly most of their sites use it. The site's wp-admin redirects [here](http://cnnlive.wordpress.com/wp-login.php). It took me by surprise, I had just assumed they had some sort of custom cms.
Chiming in: as the very first line of php, before you echo out anything, you'll need a session_start(); so you can access the session. Spent a while figuring that out when I was new to php.
**Scene One. A dark and stormy night** Browser: Hi server, can I have this webpage? I don't have any cookies. Server: Sure you can, here's the page and here's a cookie with a unique ID number. (session_start();) I'll jot it down the ID number so I know who you are later. I'll also record what time you visited, and link it to your ID number. ($_SESSION['time_visited']=date("m.d.y")); Browser: Thanks, I'll store that cookie with the ID number in it. ** a while later ** Browser: Hi server, can I have a webpage? I now have a cookie with this ID number in it. Server: Sure thing, I see your ID number matches to what I have written down. I also see you were last at this site recently. Browser: You son of a bitch how did you know that?!
I would highly recommend you *not* attempt a login system as on of your first apps. You'll be compromised for sure. Edit: Christ, what's with the downvotes? He says he wants to try a login system as one of his first php apps... Unless he's extremely careful then he's going to get his app compromised. Unless somehow user login handling became a simple thing overnight? Or maybe you think I'm saying he shouldn't tackle this, which I'm not. I'm saying he should practice with something less important first.
I won't downvote you for this, but you do need a stern talking to. Using this syntax is symbolic of everything wrong in the universe. Someday this evil will catch up with you.
I like you
Made some slight updates: http://fluin.com/7
Just to be clear, this makes it harder to guess the plaintext password from its hash equivalent if the hash is already known, right?
This is a javascript problem not php. That being said you should have a form around that input. Try this: http://lab.dotjay.co.uk/experiments/forms/input-placeholder-text/ If you are coding to html5 you can use the new placeholder="" attribute on input fields but you will need js for older browsers.
&gt; I feel like I can make application faster and better with my own code, rather than learning and then using ready build framework. It will also be less secure and if you are working on a team you have to train everyone to do exactly as you do or else you wind up with a mess of spaghetti code. Frameworks like this are nice because thousands of people are using it and testing it every day. They will find issues that you have never even dreamed of and in the long run that betters the code.
Yes, this is designed to work as an additional layer of security in case someone steals your database. By storing them in a one-way, hard to recompute and slow to generate way you make it extremely difficult for people to reverse the password hashes should they be stolen.
My first thought was this was shortly after WordPress 3.0 was released.
You can adapt [this post](http://forums.karamasoft.com/ShowPost.aspx?PostID=4295) to what you're trying to do... Just use the Javascript portion of it, and ignore the ASPX and C#. In your php you would just add: onfocus="WatermarkFocus(this,'Type keyword to search for...');" onblur="WatermarkBlur(this,'Type keyword to search for...');" And make sure the initial value for your textbox is "Type keyword to search for...", which you are already doing in the code you posted above. This code is pretty basic, but should get you what you need without having to do anything complicated. There are also some jQuery modules that do a good job of watermarking your text fields, but it may be overkill to include jQuery just for this one feature.
In PHP, there's an array called `$_SESSION`, where you can store anything you want, just like any other array. (You know what arrays are, right?) Now, the difference between `$_SESSION` and other arrays is that the values you store in other arrays are lost at the end of a PHP script, but any value you store in `$_SESSION` will stay there as long as you're generating the page for the same visitor. So you can save something in `$_SESSION` in one page and get it back from another page. _page\_1.php_ $_SESSION["foo"] = "bar"; $other_variable = "grrr"; _page\_2.php_ echo $_SESSION["foo"]; // This will print "bar". PHP remembers it! echo $other_variable; // Nothing here. PHP forgot it! This works because PHP saves `$_SESSION` to a small file on the server at the end of each script, and reloads this file every time the same visitor comes back. (You need to call `session_start();` at the beginning of your script for this to work.) Because the values stored in `$_SESSION` don't get lost between pages, you can use this to make various things persist, such as the contents of the shopping cart, login status, etc. `$_SESSION` is per-visitor. Whatever you store in there will be accessible from another page only if it's the same visitor who requests that page. If two people are visiting your site, there will be two completely different sessions, so you can't share any data between them. How does PHP know if it's the same visitor? When you call `session_start();` PHP sends a small string of random characters, called a "cookie", to the web browser. The cookie serves as a unique identifier for that browser, and is usually deleted when the user closes the browser window. But until it's deleted, the browser will identify itself using the cookie every time it requests a page from the server. PHP detects this when you call `session_start();` again, and knows that it's the same user. Because the cookie is the only thing that allows PHP to reliably distinguish one visitor from another, evil folks can impersonate other people if they know what's in other people's cookies. That's why you need to be careful with sessions &amp; cookies. People used to have their Facebook accounts hacked into because Facebook didn't (and still doesn't, afaik) protect their cookies well enough.
You are a genius, sir. This help is very much appreciated! :)
Thanks for your help. I keep forgetting PHP doesn't help client-side.
There are several people with an attitude around here, particularly against PHP and PHP programmers. Not sure why people need to be assholes when they think they're right. Sad part is they get upvoted when they're right even though they belittled someone else for no reason. On a more productive note, that last part of your post is great advice. There's [an interesting post](http://www.joelonsoftware.com/articles/LeakyAbstractions.html) by Joel on software about this (yes, he can be right sometimes!).
Maybe people finally found out that ASP/.Net sucks. 
Damn, ipearx, you should write a book. I'd buy it. Thanks!
Thanks! So, if I have a user login, and I want that to persist, then I should do something like: $username = $_POST['somethingfromaloginform']; session_start(); $_SESSION['username'] = $username; then start the session on every subsequent page?
So, starting a session accesses session info from other pages within the overall url?
thanks!
I wasn't a downvoter, I appreciate any feedback. I'm assuming you're talking about sql injection when you talk about comprimising. So doing things like mysql_real_escape_string("$username"); isn't sufficient?
Thank you very much - all the replies so far have been helpful, but yours was the most elucidating. So, if I'm using sessions to keep users logged-in, I should do something like: $_SESSION["username"] = $username; after I've gotten $username from a form and checked it against the database? EDIT: Also, a couple of people have told me that sessions are bad ways to keep users logged-in. What other ways are there to do it with php? Thank you very much, again.
Yeah, more or less. The session already "exists" in a manner of speaking, but in order for php to use session stuff, you have to make that call before pretty much anything else on the page. Once you make that call, you can start cramming stuff into and pulling stuff out of the $_SESSION array. Just don't put anything too secure behind a session thinking it can't be bypassed.
touché
That's the answer I was looking for
I see thanks for the reply.
Currently, Slim does not assume to know what authentication your app needs. So it's up to you to provide authentication. That being said, Slim does provide a plugin/hook system so you can write an authentication system that can tie into various points in the Slim application lifecycle. You can read more about the existing plugin/hook system at &lt;https://github.com/codeguy/Slim/wiki/Documentation#slim-plugins&gt;
Well, sort of. First you want to always start off by saying: session_start(); And since you want to make sure the user didn't enter anything bad into the form input box (username textbox). You would want to properly filter that. Then on every page that needs the user to be "logged in" to access. You use the session_start() and make the checks to see if the user really is logged in. But more or less you got it! 
I would advise you to use [htmlspecialchars()](http://php.net/manual/en/function.htmlspecialchars.php), then use mysql_real_escape_string() So like this: mysql_real_escape_string(htmlspecialchars($username)); There are better ways of making your code secure, but those are rather extensive for someone just starting out.
Session aren't bad ways to keep users logged in. There really isn't any other way besides making your own session function. You would do this by taking all the normal function of the session and just saving the data into a database. Then grab that data on every page load. I think what some people are saying is, php sessions are known to be insecure depending on how the programmer uses them. Also the way the actual "hash" or "number" for the session's are made. Is actually kind of flawed, but that is mostly because true random number generators are hard to create, and can be processor intensive. Just a little FYI, if you want to know why there hard... Think about righting a code to spit out a random number, that will never be repeated for say... One million times. (in reality you would want it to be MUCH more than a million)
I know of at least one major site that is in the process of moving to PHP, and it started to roll out about then too. (Major as in top 20).
StoneCypher .. If he ever spoke to me like he writes, i'd liberate him from his teeth. 
He could have been just as helpful to you by explaining the need for a deeper understanding of mysql without being the worlds biggest most condescending self important douche.
Well, yeah I can see the reasons to use Frameworks and looks like some people just can't stand different opinions from the downvotes... But if I code my own project, nothing very important. I don't want to learn whole framework when I can easily code the whole thing manually. I know Frameworks are nice and good but **frameworks are not good on every fucking project**. I don't "need" to use frameworks on my small projects where the frameworks codebase is 95% of the whole size of the project. And some people should read the reddiquette...
I agree with you there. If its a very small non mission critical project then it doesn't need one. 
I think you should try to build as many apps as you can, and definitely a login system should be up there among the first. It's a fundamental that you'll need to know and play with. You're on the right track. There are vulnerabilities with sessions, yes. SQL injections are a vulnerability, but of a different class from Session vulnerabilities. The two are separate for the most part, but still you should protect against them as well. I wouldn't worry about session attacks for now. If you're interested in the most common session vulnerability, look up "XSRF" (cross-site request forgery). Basically, session cookies can be hijacked by a malicious website and used to gain access to your account on the session's originating website. A simple and effective way to protect against them is to use $\_POST instead of $\_REQUEST when you're expecting post data, as well as checking the $\_SERVER['HTTP\_REFERER'] value to make sure that the site originating the request is your website, and not somebody else's. (Note the historic typo of the word "referrer") And that video is mostly concerned with the fact that session cookies can be brute-forced. Again, don't worry about it too much--unless you start working for a huge major company tomorrow ;) Good luck. If you have any questions, feel free to ask! 
Facebook started a new data center?
Yeah, and all of my projects have been small non critical projects... But will definitely try framework when I have time to do so.
&gt;Therefore, you should use PHP's CLI when you need to complete tasks that could conceivably surpass these limits Wut? This article is about using PHP to write shellscripts, the only CLI I see is a bourne shell to demonstrate the script with. To get an actual PHP CLI, run it with -a. Also, please don't hardcode the path to the php binary. Use env instead: #!/usr/bin/env php Preemptive edit: Yes I know the SAPI is called "cli", that's not my fault.
I've been putting this off for 10 years now... 
no joke you should write a book about this. I would love to read short programming explanations while pooping. 
Just went back through that thread. Saw lots of bright orange arrows next to Stonecypher's posts where he was trying to explain things to brick walls.
Personally, I wouldn't store something as vital and identifiable as a username inside a session. It's probably better to generate a unique auth token each time the user successfully logs in and compare that instead. Essentially, if someone is able to read the session data, you don't want them to get anything significant from it that they can use later, so either use a random token that will expire and is unique to the session, or encrypt the data, or both. The only time I don't encrypt session data is when I'm passing alerts/notices to the user after a get &gt; post &gt; redirect, because they're non-critical and get deleted almost immediately. That said, learn how they work first, then worry about securing them.
As far as I remember you rename the file by [applying a filter](http://framework.zend.com/manual/en/zend.file.transfer.filters.html#zend.file.transfer.filters.rename). As for finding out whether the form is uploading an image use a combination of `$request-&gt;isPost/Put()`, `$request-&gt;getParam()`*, [`$fileAdapter-&gt;isValid()`](http://framework.zend.com/manual/en/zend.file.transfer.validators.html) and `$fileAdapter-&gt;isUploaded()`. **Haven't used ZF in a while, but afair GET and POST variables are merged into a single array accessed by the same get/setParam methods right?*
Quote by *thatmofofred* "pompous egotistical condescending fuck-tard who enjoys bloviating about how much larger his proverbial technological penis is"
Hmm? Sessions are private. If someone can read your session, then they likely have root/Administrator access on your server (in which case, they can read all of your source code and your database too). Cookies aren't to be trusted, but sessions can be.
This is actually a fantastic idea! Programming for Poopers! Short and sweet explanations of complex concepts.