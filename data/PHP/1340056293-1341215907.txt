Yes. That is exactly my problem, I am not that good at negotiating price. I'm currently a salary employee, but the project I am about to finish is going to make my boss extremely wealthy, and I personally feel short changed somehow. My pay is decent, but for the work I did, I should be making a lot more money. I'm more concerned with how lucrative a project is opposed to the amount of money I make. And the way I am employed, I have no leverage to increase my pay. I would prefer to keep out of predicaments like this and just be part of a union.
Then I am going to look into it. Fortunately my neighbor is a wealth of information when it comes to Unions. 
I'll keep your usernames written down for future reference. 
I did say it was a simplification. MVC is all about the separation of logic; display logic (the view), data logic (the model) and "glue" logic (the controller). Having the logic separate (even if it *is* in the same file for the smallest of applications) makes code easier to reason about and easier to maintain. If I'm changing the markup that's outputted then I don't really want to be wading through SQL queries and business logic to do it; and if I change my data source, I don't want to have to re-weave some random bits of HTML into the code to do it. Even if I'm writing a ~100 line, one-off script I still tend to stick roughly to MVC-ish principles. I.e. I group bits of code that do similar things. It's not a hard thing to do; I do not understand why you would not bother to write well-structured code just because it's a small program. It's worth pointing out that even small programs can be very useful; and useful programs tend to have extra bits of functionality added to them over time. If you start with it "all inline" then it will likely stay that way as the program grows.
Does &lt;?= $variable ?&gt; make the output html safe?
This is especially true as projects get larger and more complex. Until you do feel comfortable using frameworks learn to rely more on CSS, especially for layout. You really should not be having terribly complex HTML if you are using CSS aggressively.
Safe? It doesn't do anything more than exactly this: &lt;?php echo $variable; ?&gt;. It doesn't strip tags or anything, but that really should have been done by the controller if it were desired.
If it is a super simple one-time short-term tool then you can get away with some hacked out code. But most tools still need to be maintained in the future, and that is when the small amount of extra time starts to pay dividends. A developer who is really familiar with frameworks can knock out a project almost as quickly as a hacked page of code.
The closing ?&gt; isn't really required and omitting it can actually avoid bugs - especially those awful 'headers already sent' errors that come up when you have sneaky whitespace after closing the php tag in an include file. But yes, concatenating strings on echo is horrible practice. I mean the , key is RIGHT THERE.
I prefer to use smarty and keep HTML and PHP separate, I highly recommend this! I personally use Smarty www.smarty.net but there's tons of template engines out there. Here's why you should use a template engine: I did work for an online company they were building this entire social network site. When I came on board the very first thing I saw was HTML mixed with code. I immediately let the guy in charge of the dev team know that this would become a major issue. He said this was wrong and there was no reason to have to learn another language and so on. I left shortly after because they didn't know what they were doing and wouldn't take any of my advice. A few months later they tried to bring me back to clean up there mess but I was already working somewhere else. The had done a complete redesign and had 1000s of files with PHP and HTML mixed together. Their site never took off because they had so much overhead due to this simple piece of advice. Stick with templates learn Smarty or any other engine when you want to make design changes or complete design overhauls you will not need to touch your PHP code. Smarty does also have support for if statements, and all kinds of PHP functions and custom plugins inside the templates.
Frameworks such as FuelPHP do exactly this.
Why is it overkill? MVC is about the way the application is structured, and not how big or complex it is.
As someone who works on large scale web projects, MVC sucks for large scale web projects... much rather have something such as HMVC, or V-VM-M... there's a few others out there, that scale better with sites where pages have many nested components.
Correct. I need to do my research.
Separation of concerns is golden. Unless you keep it separated, before you know it you have a horrendous unmaintainable piece of shit spaghetti code.
Just curious. I'm new to PHP and web development in general... what's so bad about putting SQL in the same PHP file? How would you recommend doing it instead?
?
B/s .. if the project is going to be important for more than 5 minutes (e.g. if it's a simple script you are running one time to migrate some data) then you should be doing it properly. You don't have to go full out MVC but there's no reason why you shouldn't be making sure that it tries to follow SOLID as best as possible.
&gt; Can you give an example that might lead to a hard-to-find bug? * An empty string '' evaluates to boolean false. * A non-empty string (e.g. '1', '100', 'lolol') evaluates to true. * Except if the value of the string is '0', then that evaluates to boolean false PHP's type coercion can save some keystrokes but holy shit can it ever cause issues...
Those are not the same as the || and &amp;&amp; operators.
Production site: error_reporting(0); --- Don't do something like this: include($_GET['site']); without checking/parsing contents of $_GET['site'], so for example you don't allow ppl to: http://example.com/?site=../my_awesome_secret_file.txt
why concatenating an echo is horrible? do you have any fact to prove it? what is so bad with that example? ~~finally, look at the code, I am not concatenating variables.~~ EDIT: My bad. I normally end up using commas instead of dots in my echo statement so they appear as *echo $string1, $string2;*
We know.
This is **exactly** identical to `if ($string) { ... }`. The only difference is that empty can handle undefined variables. 
I disagree with using strong comparison whenever possible; PHP is meant to be loosely typed and will do what you expect as long as your inputs are valid. The only exception is that all comparisons with `true`, `false`, or `null` should be strict.
Well... yes, you're right. Anyway it's about not showing errors to end-user.
This is going to be lengthy, so please bear with me. I work for a company which owns and operates niche portals, some of which compete with Google in terms of page views and traffic. On an average the data feed/database used by any portal is in TBs. This data may come from 3rd party sources, is enriched using grid, we add our own ranking algos for better searching. SLA for any service can not exceed 300ms. Code to query and serve data is mostly in Java but we do have C/C++/Perl/Python running at some places. And all presentation logic is in PHP. The framework we use is more or less like MVC. It has to consumer data from services which is mostly XML feed and present the end user with a web page. The part that takes care of what to do if a service fails and if is there an alternate service available, etc are handled by special set of files. We have country wise configurations. For example, I need to show a stock quote page for INFY, its a company listed on NASDAQ and BSE, the request is analysed for origin and how much intent is for NASDAQ or BSE, correspondingly a call to data provider service is made. Al goes well and we have data in XML which is taken care by another layer before being sent to skin files. This layer makes all the decision and has zero html mark up. Data is fed to skin files which are actually PHP files. Now for a stock quote page I need a drop down navigation, a list of news items and other such things which involve iterating on array/object or some control structure. So this is the point where my view file has html and PHP. Now you may argue why I echo HTML. I take your point and agree that echoing HTML is bad practice but then I end up having echo statements for PHP. Which one is better for me in this particular case? Our internal research has shown that we better echo mark up. So my point. Some thing that works for me, may not work for you. I don't know how to tag Nicoon so I will post link to this comment to his reply. So according to all those face palm reaction pics, this statement is funny &gt;So its a myth to have a logic separate from view. At some point of time they collide in a file and then its all your convenient and or performance which decides whether you echo html or embed PHP echo statements in HTML. How can you say that your view file which has control structure and an iteration over a loop is logicless? Its not business logic but is it not logic? So how am I being funny when I say at some point of time logic and view collide in a single unit of code. Come on guys, we are talking in a programming related subreddit and its better we base our opinions on proven facts. 
http://www.reddit.com/r/PHP/comments/v8adb/do_you_echo_your_html_or_do_you_close_your_php/c52fxb7
I'll admit I didn't read through all the posts, just wanted to say, if you DO echo stuff out, do not concatenate what you do not need to. ie, dont: echo $var1 . $var2 . ' some string ' . $var3; This concatenates the strings one at a time and then echos the whole. Rather you should do echo $var1, $var2, ' some string ', $var3; The difference is each variable\string is passed into echo as a parameter and each are dumped directly into the output stream with no concatenation and is *quite a bit* faster. **Edit:// Probably too late, but I should clarify. Yes, its a waste of time to go back and revise your code to do this. But as a habit to form and use regularly... why would you not want any performance you can gain? Not everyone has money to throw at more hardware.** 
After all that you didnt say why you echo markup
I hardly ever use `echo` and it's probably good practice to not use it for anything other than debugging. And yes, worrying about micro-performance issues is wrong. New coders can make a big mess trying to make code more "efficient" saving a few nanoseconds that are ultimately insignificant compared to a single SQL query. 
You shouldn't be using a templating language because it saves you a few characters when outputting variables - you use it because of sandboxing, filters, auto-escaping, inheritance and block overloading, etc.
If you have to explicitly define escaping every time you might need it, it's *extremely* easy to miss one and \*BAM\* vulnerability.
I've spent more time with PHP than I care to have, but I'm still being caught by some of the ridiculous things that pass for acceptable in this language.
And the widely accepted correct way you dislike as well? &lt;ul&gt; &lt;?php foreach( $items as $item ): ?&gt; &lt;li&gt;&lt;?= $item ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; Just looking at it is easier on the eyes
people should learn how to do it themselves before relying on frameworks to do it "automagically". the magic part of it is where misunderstandings and glaring security vulnerabilities go to live. 
people should instead get rid of misconceptions like all template engines are bad. a class that does it is still considered a template engine. 
Rule #1: Use the tools available to you to get the job done Rule #2: Never say Never
What if you want to require authentication to certain images?
Yes. Even a one off script. You can't say you or anyone else will never revisit it, or it won't be in use for more than a month. You know you're dealing with an amateur 'knowitall' when they claim separation is unnecessary in any bit of code. Don't justify stupid. Spaghetti code is stupid looking in any situation. 
What about this method: echo "$var1 $var2 some string $var3"; I'm also a novice PHP programmer, although I was a C++ programmer for more years than I care to remember. :) 
I'm somewhat of a novice at PHP, but one thing I've used before that I don't see *here* is the use of a "here document", like this: $test1 = "test1"; $test2 = "test2"; print &lt;&lt;&lt; HTML &lt;div&gt; $test1 here is some text followed by $test2 &lt;/div&gt; HTML; Does anyone use this form for mixing html with php variables?
Depends, sometimes you need to have one small html tag outputted in the middle of lots of PHP. Then I'll use echo. Even if you seperate the HTML out, there are places where you might want to do this. Although if possible, I'll return a string instead, so the caller can be in a primarily-HTML view. A good example is in the head, where I have to work with open graph tag, description, keyword, and title builders, which are all implemented as pure PHP objects. Otherwise I'll just switch to HTML proper.
I'd be interested if you could please expand on that. I use pretty much only MVC frameworks, and seen a few arguments for slight alternatives. However they often seem to boil down to overcoming technical difficulties in existing MVC frameworks, rather than offering something new. I haven't seen any arguments which show a real difference.
If any of you down-voting geniuses have the balls to speak up then we can actually debate your opinion and give the public something useful. If you'd like to stain people's advice with your anonymous misguidance that's fine too. I use methods of code/logic/function/design abstraction that differ from MVC which have evolved over the years from practicing (no surprise!) MVC, OOP, raw AJAX apps, etc. I don't claim one method is better than another - I use what I find to be right for the job by researching the problem first and by knowing there is always a better method ready to be found than is currently practiced or preached.
that's not really an answer to the question *regardless* if you are writing code within (the "v" part of) an mvc framework or not, you are going to reach a point where you want to output some HTML - at this point, you are presented with a choice: 1) close the php tag and switch to HTML 2) just use echo/print WHAT DO YOU DO?
Because I never use references for parameters I'm curious: In what cases you would use a reference as a function parameter?
So looks like you should never use empty or boolean-convert strings but use the isset($string{0}) function as it gives the only sane results. 
If you worry about echo performance you are worriing about the wrong thing. How many echoes/concatenation does it need to create a messurable difference 1000 or a 100000? Also your code has a big difference: while you can exchange the echo $a.$b; with $string = $a.$b; You can't exchange echo $a,$b; with $string = $a,$b; 
You have to use echo anyway.. even if you use a template engine it will convert your output to echo or something similar.
wrong
no no no, no short tags please, this is not 1999, something like &lt;?= ?&gt; is not acceptable anymoore
no, definitely not better - if nothing else some servers don't support it and not everyone has access to php.ini - NEVER use the short tags!
A good idea if you are building an business that will be profitable (especially auto pilot ones) is to dictate in your contract a percentage of future earnings in addition to fees to cover fixing bugs. You have a contract right? 
It makes no difference. The bottleneck is solved by caching, so which ever method you use is redundant because the actual string is what will be cached. Also that is a micro optimisation of the highest level. If you are worried about that you should probably be using FB's c compiler for php.
Holy fuck no. Performance increases in the web world come in the cache, like lots of orders of magnitude over that shit. You will not save anything measurable in a production site by following this method. If you like to be different, then use commas, you could at least use parenthesis too so that it looks like the function you want it to be.
Why I would like the other way? I have a the complete mark-up structure in my PHP code. So In case I iterate 0 times I do not end up with &lt;ul&gt;&lt;/ul&gt;, what I prefer may not fit-in with your definition of correct but it has worked for me. This is just an example so do not come back and shout at me with oh you can count the iterations before iterating and avoid empty uls. Again, the point is, you can not have a template w/out some basic control or loops, if you have one then you are manipulating markup somewhere else, so end of the day, you have markup in your php code. Edit: I will take your example a step further &lt;ul&gt; &lt;?php foreach( $items as $item ): ?&gt; &lt;li id="item-id-&lt;?= $item['id'] ?&gt;"&gt;&lt;a href="&lt;?= $item['link'] ?&gt;" title="&lt;?= $item['title'] ?&gt;" data-item="&lt;?= $item['data_item'] ?&gt;"&gt;&lt;?= $item['title'] ?&gt;&lt;/a&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; or &lt;ul&gt; &lt;?php foreach( $items as $item ): echo '&lt;li id="item-id-', $item['id'], "&gt;&lt;a href="', $item['link'] ,'" title="', $item['title'], '" data-item="', $item['data_item'], '"&gt;', $item['title'], '&lt;/a&gt;&lt;/li&gt;'; endforeach; ?&gt; &lt;/ul&gt; I would still like the 2nd one. Color or colour?
oh sorry - i didn't looked it up before my reply. But still this isn't realy a php quirk because 0 must be converted to false and false must be converted to 0.. So it is mostly a bug from the programmer who didn't see the big red box in the documentation or didn't think correctly about the return values. For me a real boolean bug is the "0" string behaviour. IMO it is like the java equivalent String.indexOf() which could lead to: if (myString.indexOf("b")) and which will not always work as expected but could be avoided through reading what the return values are
No, but a model can fill from an XML file. 
It'll only give a very minor performance boost. In a real world application, it will be difficult to even detect a performance boost from this. However you are right, just not with this example. On one of my sites I built a compiler in JS that compiles to JS code, and a documentation system which generates the documentation as 100s of HTML pages. On those scales, when you are doing __tonnes__ of string concatenation, yes skipping concatenation on the micro level can really help. However most projects aren't like that. These are both niche cases, and it doesn't even matter if the documentation generating example is slow (as it's only used internally). So unless you are performing tonnes of string concatenation, such as with a programming language, or a template engine, you really don't have to care.
Here document is just ugly, and always sticks out like a sore thumb. I've used it for generating mails within functions; that's it. Personally I'd avoid it where possible.
For 11 years. It's not a templating language. It's a language that supports writing out to stdout or whatever is the output buffer is. Maybe you need to learn what a [templating language](http://en.wikipedia.org/wiki/Template_processor) is and what it's supposed to do.
Don't use the term "Turing complete language" just because you see it all over reddit. A language is still a language despite it's Turing completeness so long as it provides a set of constructs and protocols for use.
Oh yes, those foreach() loops with references - some *very* strange bugs there. I gave up on them, because I was finding variables were being set to values they could not not *possibly* have been assigned. Just be *really* careful with those, but it is probably best to avoid them until the bugs are sorted.
It also *used to be* used in circumstances where you don't want to pass large structures of data around, so you just pass in a reference. This is no longer an issue, since PHP will automatically pass in a reference of to a variable into a function, and only clone it if the function tries to change anything in that parameter.
Well, most *real* RESTful APIs shouldn't be specifying it in the extension. The extension isn't present in the vast majority of APIs I've personally dealt with - you get things like example.com/post/12345/ and whatnot. Generally, you want to use a content-type header instead, specifying the type of content you expect to get back (e.g. "application/json"). Works great!
You just blew my mind with the `$string{x}` syntax. I had NO idea you could do that!
So you want to make it bad practice because you FAILED to check PHP's documentation on operators? Because it wasted your precious time, you are delivering a lawsuit against the and and or operators and want them banned for good. What is it like holding grudges against operators? Man up.
Re: Heredoc, use this to format your SQL queries and make easier to see what it's doing.
HTTP Request headers provide information on what they want to receive from the server Content-Type: application/json Accept: application/json you shouldn't care if it was an XHR request.
I think you have some serious issues with the way you code PHP if you need to ask this question. (no offense intended) Take a look at codeigniter to see how they do code organization
Let me answer this question. Usually when I see code with just functions, they make certain problems much easier to solve. For one all functions need dependencies, with just functions and PHP, people end up using globals. globals are *bad*. The best way to avoid that kind of programming is functional programming paradigm, which PHP does not support. However OO makes this much easier to solve, with a technique known as Dependency Injection, http://en.wikipedia.org/wiki/Dependency_injection, you can easily give your methods the dependencies that it needs, and set it once, without breaking reusability and not break the Law of Demeter http://en.wikipedia.org/wiki/Law_Of_Demeter. Also because Classes have inheritance, it allows you to extend classes. Making it much easier to not repeat code for things that are alike, in some ways, and completely different in other ways. Classes also keep similar units of work together, which helps organization. Classes also have a type system, when used correctly, can be used to create more type safe code, which prevents bugs in the long run, but at the same time, does allow for a degree of polymorphism that can allow for methods to work on similar types without breaking type safety. This is only a small sample of the advantages of OO. I can probably go on for hours. The point where you said "works fine for me" is not surprising. there are more paradigms out there than you realize, and none of them are broken (you are using imperative programming right now). All of them can achieve a working program. So of course imperative programming "works for you". However, your code could be so much better, be more self documenting, be easier to reuse, easier to maintain etc... if you explore the other paradigms.
Not quite. The model is more of an object that handles the data in the database (or xml file, or mess of text files, or whatever you wish to store data in). MVC is three separate entities. The controller controls the other two usually. A typical scenario is this: - The controller gets called up and is told it needs to display the weather - The controller has no access to the stored information so it asks the Model to grab it the last 3 hours of rainfall - The Model goes into the database (or XML file or text file or whatever, doesn't matter) and runs all the queries needed to get this info for the controller. - Once it has this information it gives it back to the controller in a nice simple format without the controller having to know anything about the storage system or how to access it - The controller then sends that information along to the View where it's made pretty and given to the user. (The View has no clue what just happened and it doesn't care how the info got there, just that it needs to display it) Think of the model as the nice lady behind the window that fetches your files for you. You have no idea her filing system or where they are and you don't care. You just need them so you ask her and she gets them. "Hey lady, give me my medical records!" "Okay here they are!" She isn't the medical records - but she handles getting them and putting them away (as well as updating and deleting them but.. yeah) **Edit:** Also if you don't have experience with Object-Oriented Programming the idea of "objects" can be confusing, especially when trying to wrap your head around MVC. In procedural programming you could have a single function that handles all the data stuff (admittedly this muddies the idea of MVC quite a bit) called "fetchData()". Anywhere in your code you could run "fetchData('weather');" and it would do all the database queries for you and return you the weather in one line without messing with the database in your logic code. Not the greatest example but it might help.
&gt;Maybe you need to learn what a templating language is and what it's supposed to do. I know perfectly well what a [templating engine](http://en.wikipedia.org/wiki/Template_engine_%28web%29) is, so screw you very much, you obnoxious prick. &gt;"Programming languages such as Perl, Ruby, C, and Java **support template processing either natively, or through add-on libraries and modules**. JavaServer Pages (JSP), **PHP**, and Active Server Pages (ASP with VBScript, JScript or other languages) **are examples, themselves, of web template engines.**"
Sorry for so many questions, but I've got one more. Would the model be the code I wrote to access my db and grab specific values? Would the model then just store those values in a variable or as an object? The responses I'm getting in here have already helped me out tremendously with understanding MVC. I can see that it looks like I was on the right track with my website at home, but I believe I have some things I need to separate and sort differently.
Yes, resorting to name calling on the internet makes your point correct.
I avoid HEREDOCs simply because my IDE can't make sense of it, they wreak havoc on the syntax highlighting. Also they're the equivalent of double quote strings where I prefer single.
http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/ Security, portability, better features
It's being phased out and will no longer work in new and upcoming php versions... eventually. 
Thanks cheese, didn't we lock you in the dumpster? As you mentioned, it is very specific. Each city has a landing page and there are going to be hundreds of cities. I was hoping to parse the url for a dynamic landing page but there seems to be some issues with page security. Any other ideas?
deleted it - sorry, thought OP was trolling.
The feature table found at the following URL speaks for itself. &gt; It is recommended to use either the mysqli or PDO_MySQL extensions. It is not recommended to use the old mysql extension for new development. A detailed feature comparison matrix is provided below. The overall performance of all three extensions is considered to be about the same. Although the performance of the extension contributes only a fraction of the total run time of a PHP web request. Often, the impact is as low as 0.1% &gt; &gt; http://ch2.php.net/manual/en/mysqlinfo.api.choosing.php
Sure, the model could be the code you wrote, so long as that's all the code is doing with the data it sounds like you've got a basic model. For storage - models don't really store data in themselves. They handle putting it away in a database and taking it out. Sometimes if you want a bunch of data they'll hang on to it for you inside themselves and hand it back in small pieces as you need it. "Hey lady, give me everyone named Bob's medical records!" "Okay here's one.." "Next" "Okay here's another" "Next"... That could be stored any way you see fit, usually in an array or another object. The details and how it's done are really up to you, you could have an awesome model like the lady above, or a shitty one that just slams a pile of medical records on the floor and says "Welp, there ya go!"
Classes enable you to encapsulate data with the functionality to handle that data. If you're writing a complex web application in which you're presenting the same data in a lot of different contexts, bundling the functionality with the data will ensure that the data behaves consistently in all contexts. If you try to perform business logic in the reports that display the data, you'll be duplicating functionality and you'll end up with contradictory reports.
So what would that look like? Let's say we had a page with two components; a blog-forum page. Do those two components listen indevidually on the route, or is there a third controller/whatever (like a BlogForum controller), who's job it is to combine them?
Have you considered [SimpleXML](http://www.php.net/manual/en/book.simplexml.php)?
Hey man, thanks a ton! I do like your analogies.
jquery already sets the HTTP_X_REQUESTED_WITH header
too many foreach'es, you went too deep by 1. this works fine: &lt;?php header('content-type:text'); $results['workorders_hours'] = array( 213 =&gt; array( array( 'hours' =&gt; '5.00', 'rate' =&gt; '20.00', ), array( 'hours' =&gt; '7.00', 'rate' =&gt; '14.00', ), ), 217 =&gt; array( array( 'hours' =&gt; '9.00', 'rate' =&gt; '10.00', ), array( 'hours' =&gt; '14.50', 'rate' =&gt; '10.00', ), ), ); foreach ($results['workorders_hours'] as $workorders_hours) { foreach($workorders_hours as $workorder) { echo 'Hours: ' . $workorder['hours']."\n"; echo 'Rate: ' . $workorder['rate']."\n\n"; // if you foreach on these items, you're iterating over the hour &amp; rate elements of the array. // foreach($workorder as $key =&gt; $value){ // echo $key . ': ' . $value; // yields same as above 2 echo statements. // } } } 
I use simplepie. It is a bit large but seemed to be the most feature rich.
Dependency injection.
Man, I'm dumb. Thanks!
+1 Dependency Injection. If you think a global or a singleton is the answer to your problem, now you have two problems.
This is a very nice addition, as is using it as a phar too. Thanks!
If you are not willing to accept change for the best then you shouldn't be a programmer. You will encounter deprecation of software your entire life. In order for everyone to progress properly, people (like yourself) will have to accept change and perhaps suffer a little. From now on, developers of the MySQL libraries will focus their efforts on PDO and MySQLi. The original MySQL functions will be left behind and eventually large security flaws will develop as things are changed in PHP and MySQL. MySQLi isn't a hard library to learn, and as we all know the PHP.net documentation is awesome. Good luck!
What do you think we could cut out of SimplePie to reduce the bloat a little?
You could wrap the XMLHttpRequest object, replacing it with your own, where you just pass the calls along, and copy properties back and forth at the right time. That is except for 'send', where you add this header yourself. This would guarantee the header is set in all cases. I'm doing trying this in my own PHP Error library, to detect ajax requests that cause a server side error, so I can display them in the browser client side.
Never allow allow_url_includes Never use magick_quotes_gpc Never code while you are drunk 
I wouldn't say it's bloated. I was more talking from a file standpoint where all of the classes are compiled into a single file which is over 15,000 lines long. Like I said it's very feature rich so it's understandable but I'm not sure how much of that functionality I actually use. It might be cool to create a way to let users pick which classes get compiled into the file. [EDIT] Or maybe have a few different builds available for different use cases.
Openinviter used to work, but it's more or less abandoned now. It still works with Gmail, but the facebook inviting is jacked.
Actually I think there's been a lot of good content from that site lately. I like how the author tied the general fallacies to our daily PHP experiences.
but you can't just put PHP variables in single quotes without ending/restarting the surrounding quotes, so I use single for php-only, and often use double for mixed. 
Thanks, good reply. 
you laugh in their faces and refer to the manual.
Sure, but I'd say that if he's got the time to take the dive into PDO, then the transition from PDO to MySQLi for a single project here and there is going to be an easier one than from MySQLi to PDO. Also, PDO enforces, IMHO, much better coding standards. MySQLi isn't even self-consistent: I've found that I can do pretty much all of it in OO PHP, except for the occasional weird (but vital) thing like fetching into an array from a result set with an unknown number of columns that was queried by a prepared statement.
it's not your fault: many a blog, tutorial or reference page still use old mysql functions on their examples. I know it's sometimes a pain in the ass but try this: leave your old scripts as they are; mysql methods won't be phased out in the near future so your apps are not on high risk. But please take a couple days to learn PDO (it's not that complicated but you can make some 2 or 3 practice scripts and try to have fun with them) after you're accustomed to the PDO way of doing things you'll never understand why you ever programmed without prepared statements
in HMVC, there would be a parent controller, it will have a list of other components that it's responsible for and call those controllers. (which may in turn have several components that it could launch as well). I believe Code Igniter has an HMVC plugin that you could look at. another method I haven't seen anyone attempt in PHP yet, but would be interesting. Is that a page view is hit first (chosen by the router), and has placeholders for components in the template. the view renderer would launch a controller that is in charge of rendering that component. (this is the V-VM-M method).
&gt; eventually large security flaws will develop. You mean besides the huge ones that already exist and are inherent in its design?
There is less *value* in switching from `mysql` to `mysqli`. PDO is, in many ways, simpler than `mysqli` and is the way things are going. Switching to `mysqli` would take less time but only because you can continue using old `mysql` patterns. 
welcome! :)
&gt;many a blog, tutorial or reference page still use old mysql functions on their examples. This is a pretty big problem with the internet currently - there's no garbage collection on documentation. I've been doing a lot of Python work lately, and it's *especially* bad on this side of the fence, where packages are radically changing their APIs as frequently as every couple of months. A lot of the information is out of date or just plain *wrong*. I think a lot of this would be helped by specifically detailing the current version number at the top of the docs, as MySQL and Symfony do.
Really? There's a few projects from a couple years ago out there that I made while first learning php. I'm sure a few of them have mysql_query() functions within it.
php 5.5 might throw deprecation warnings at you, and if so, 5.6 might drop it. I have all the "might"s in there because it's mostly up to the core devs' vote how long they want to leave it in, but that would be the default plan.
I ran into a [few minor problems](http://psinas.com/index.php?blogid=8) making the switch myself, hope this helps you avoid the same.
I'll have to keep a watchful eye then I guess. Most of them are just a matter of not having the time to port the project into something like CI.
Not much of an issue when using built in solutions to filter out the bad stuff. // CodeIgniter extract($this-&gt;input-&gt;post($_POST));
There is no _real_ RESTful API standard that says you must accept a header to determine acceptable content type and only a header. Don't imply that an API that allows or uses extensions is not a RESTful API. I've worked with and developed many APIs that could be accessed with /foo/123 and would also accept /foo/123.json to determine the acceptable content type to respond with.
Prove it.
You should really use the method where you check the content-type and accept headers that RRGYPM mentions above. On Apache you can use http://us2.php.net/apache_request_headers. It's better practice and allows for situations where someone wants json but isn't using xhr, maybe a 3rd party app or something like that.
I have my own experience that tells me its perfectly OK. I never worked with Rasmus Lerdoff but I have worked with people who has directly worked with him and they never frowned upon this though they wanted me to indent the echo-ed mark up properly. By the time page is served all the white spaces and redundant new lines are stripped off and browser gets a compressed html page. So the readability part is limited to IDE, for me and my peers. Now, lets not deviate from the point, you can not have a view file sans logic, you have to have some level of logic even if it is loop or control structure. 
Head over to the docs for [any mysql_* function](http://ca.php.net/mysql_connect) and check out the warning at the top.
I add a simple define() statement to my bootstrap that checks the HTTP header set by jQuery, Mootools, Zepto, and everything else I've ever used. define('AJAX_REQUEST', strtolower(getenv('HTTP_X_REQUESTED_WITH')) == 'xmlhttprequest'); For those of you that don't know, `getenv()` is a shortcut to *most* of `$_SERVER` and `$_ENV` that will not complain if the value doesn't exist. I'm sure there is an obscure Javascript library that doesn't set the header, but I have no plans of ever using it.
Are you using require / include or just using the values to populate the page. Id imagine the latter is the safe way. Otherwise hardcode a path where only the files you want access to can be dynamically loaded.
I agree if you are going back and cleaning up code. But I personally do it out of habit. balrok had a good point, in that its not easily copy and pasted elsewhere. But, I haven't run into that a terrible amount.
I've never tested. This is something I never use. Though if I had to take a wild guess, I'd say its faster than normal concatenation because it can pre-allocate the whole string in memory and only have to copy from the variables once.
Wow. You couldn't be more wrong. First off you assume everything CAN be cached. This is false. In the environment I work in, 90% of the data cannot be cached in any significant way. As for saying its not measurable, go benchmark it yourself. Also, your attitude is really out of place and not appreciated. 
Aye I agree mostly. I just argue it as a good habit to form. I do it without thought now. In our environment we don't have much budget for hardware and we get large traffic spikes, so we look for any edge we can. This is not to say we waste time rewriting old code with it unless its a HIGH traffic page, usually not even then.
I never actually heard of "Magic quotes", to be honest. As a Linux user, I was already used to this behavior, as it's used by shell programming, and several other languages, so it seemed normal to me. With shell progamming, sometimes you want to have variables expanded by the shell, and sometimes you want to send them on to another program unexpanded. 
I'm amazed by how many programmers don't understand bits. "Why doesn't mysql have a boolean datatype?", it does... its called a BIT. BITS BITS BITS BITS!
Ah, I just looked it up, I used the wrong term. My bad. Magic quotes was basicly doing add_slashes() automatically for you.
Except, it does have a BOOL/BOOLEAN type.. sort of. It's just an alias for TINYINT(1), so you only store one byte. The real problem is that binary operations aren't indexable in MySQL. So, you can't "SELECT * FROM `table` WHERE field &amp; 0x10" and expect a quick result (on a big table).
Oh, cool, I've gotta get me some of them! I just looked it up after you just looked it up, and now I vaguely remember what they are. I never used them, either. I tend to stick to basics, and avoid things like that. Heck, I even avoid most plugins for Vim. 
In my experience, every application survives loosely coupled architecture. I do agree perfectly loosely coupled doesn't truly exist. But those projects that strive for that, and continually refactor to remove tight coupling survive much longer than projects that don't. the maintainability and flexibility by the most loosely coupled systems makes it so worth it in the long run. As for your question on how does it deal with persistent objects that are needed all over the place? Basically it creates that object and that object is given to a DI container, and how that is used kind of depends on DI container and architecure. Usually in a well architectured system "all over the place" is a huge over statement. usually things only need to be passed to a single "layer". for example people often think database connection classes need to be "all over the place" when in reality they are only needed by your DAO layer. DAO layers are required by your service layer, and your service layer is given to your controller layer. etc... http://en.wikipedia.org/wiki/Dependency_injection
Ah, no, you don't. Its actually depreciated and being removed in future versions. "This feature has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0." http://php.net/manual/en/security.magicquotes.php
Storing permissions as bitfields in a database is often undesirable because it makes it difficult to index on, and fairly unreadable when looking directly at the table. A better strategy is to have a table that contains a set of default permissions, and then add new rows that override the defaults for specific users as they are modified. Bitfields are more useful in situations where storage or execution time is at a premium, such as in binary file formats where a human is never expected to directly read the data.
You can index a column, but querying that column using a binary operator is not an indexed operation. MySQL indexes only work on identical match for both numerics and text, or with text only, left-most-match. ("Foo%" will use an index, but "%Foo" won't.) Indexes are never used when you are performing a function or mathematical operation on a column, either. "WHERE DATE(datecol) == '2012-06-19'" won't be indexed, because it can't determine a match without performing the function on *every row* and comparing the result against your test.
That's not how a wildcard certificate works. A *.domain.com certificate is not valid for *.something.domain.com.
They're also essential when programming microcontrollers.
I wholeheartedly agree. That's a very good use for bit masking.
I mean, you could just use one array.. your x position is `$i % $width` and your y position is `floor( $i / $width )`. I don't think his question is about how to structure the data but how to generate a random dungeon. You could try to start with something like this: http://en.wikipedia.org/wiki/Maze_generation_algorithm and then edit it to remove some of the walls if you don't want it to be too "maze-y"
http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers tutorial I wrote for mysql developers wanting to know how to transition to PDO.
The deprecation will be slow, don't freak out. It might be many years before it's fully deprecated. the PHP community has made the first step by doing a "soft" deprecation, which is putting a deprecation warning in the manual. it might be quite a few versions before they even do a hard deprecation in which will throw E_DEPRECATION notices. Really this has been purely word of mouth for quite a few years. You just needed to be part of the right community circles I guess. I myself been pretty annoying about getting the word out on freenode.
MVC is a design method that splits up your code into "models", "views" and "controllers". http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller Most popular frameworks for PHP use MVC, so it's a fair bet to say it will not be outdated before PHP itself is.
It probably won't be as soon as 5.5. I don't think they decided when to throw deprecation warnings. But i'd be surprised it was as soon as 5.5. might be next major version. Might be 5.6. But I'd be surprised if it was that soon.
Not to mention that the idea has been around since the 70s.
 0011 === 9 0111 === 73 I know he means in binary, but someone is going to get confused.
Huh?
If this was logic inside a template file I'd prefer to use the alternative syntax to keep it readable. &lt;?php for (...) : ?&gt; &lt;div&gt; &lt;?php for (...) : ?&gt; &lt;div&gt; &lt;?php for (...) : ?&gt; &lt;div&gt;&lt;/div&gt; &lt;?php endfor; ?&gt; &lt;/div&gt; &lt;?php endfor; ?&gt; &lt;/div&gt; &lt;?php endfor; ?&gt;
i like lamp.
I think you accidentally the whole everything
This subreddit has a lot of shit posts. Maybe it is time to unsubscribe.
/r/webdev or /r/phphelp
/r/phphelp
/r/phphelp
There is nothing inherently bad about it. People here just get their knickers in a twist about it because they prefer to use some kind of MVC variant development method, so they think that it is the only way everybody should be coding.
PHP isn't universally enabled either.
Not if you store them outside of webroot.
He is referring to these lines $user-&gt;setPermissionBitmask(0011); // In decimal 3 $user-&gt;setPermissionBitMask(0111) //In decimal 7 These lines are actually setting 0b1001 and 0b1001001 respectively.
I don't like how the author just outlines the advantages but doesnt tell about the disadvantages. So I try to find them: * it isn't human readable -&gt; hard to debug * You can only store 31 permissions in an int. * you can't do anything more than store boolean permissions - if you need more advanced (upload size) you have to encode this boolean too * The way he defines the permissions doesn't allow simple reordering or logical grouping * with his implementation you expose internals (usage of boolean operator) of the class to the outside which for example won't allow you to later fix the maximum 31 permissions bug
AFAIK AJAX can accomplish this.
It's not just perfect for this - that's actually what Ajax is. Use Ajax.
Here's an alternative, service-oriented approach: Get someone to create a JSON/HTTP API around your db that contains as much business logic as possible. Then create a basic Wordpress plugin that connects to the API. This way you will be able to reuse whatever investment you make in your API should you move away from Wordpress, or create a mobile app, or whatever. An MVC framework doesn't seem like a good fit if you're already using Wordpress and are happy with it.
Because, as a human being, you **WILL** make a mistake. 
[False](http://nz.php.net/manual/en/mysqlinfo.api.choosing.php)! The MySQL extension is still being maintained - its just not under active development (hasn't been for years). So, yes it will still get new security fixes. Oh, how much easier life would be if the mysqli team had just refactored/reimplemented the mysql extension - kinda like if IPv6 was IPv4 compatible. And if the mysql_* functions don't exist in a number of years (no way Rasmus will let this happen) it will break most of the PHP applications out there.
Yeah, I think I fixed it. I should've included the connect.php file twice I think, because it only is included within one of the while loops. Thanks, your comment made me realize it. The query should be fine though, as I tested it against the database several times.
Whoops, never mind. Got the same error!
The maintenance on that page is just PR at this point. Sure they may have someone who is maintaining it, but they pretty much have to bend someone's arm to do it, no one wants to maintain it, it's a monstrosity.. Rasmus doesn't have a full say in the PHP project, (yet he does have some say). But it's already been decided that it won't exist in a number of years. That's why the education is getting done so people can start redoing their applications **now**, like I said, it will be a very very slow deprecation process, but it needs to be done. So I wouldn't act like he wouldn't let that happen, it's already happening.
No problem :) I think everyone fell for it at one point or another. I very much recommend MDN for Javascript and CSS reference, it is an amazing source of information. https://developer.mozilla.org/en-US/docs
Id2 is set on the top when it fetches all the articles. The query seems to only be failing on line 121 (the type 1 line)
You have a query inside a while loop... This is terrible bad practice, can this not be solved with a JOIN or IN statement? In addition to this, you prepare your statement everytime you execute, thats not how prepared statements work. You prepare your statement once, then execute it several times, but if you reworked this query you would only need 2 queries to do what this one does now... Example of more efficient query: SELECT image FROM images WHERE s_id IN (id1,id2,id3,id4,id5,id6) AND type = 2 You would generate a list of IDs for it to query in one go, rather than query ID by ID
I think this was supposed to be a joke..
ajax posts your form values to php, your php processes the input, returns a value. Your script process the return value for different functions. var var1 = $('input#form1-var1').val(); $.ajax({ type: "POST", url: "server.php", data: { var1: var1} }).done(function( returnvar ) { if (returnvar === 'success') { dofoo();} } });
Reasons why not to use commas: * It is less readable for the general population. Everyone is used to periods, commas look "odd." * You can't use only commas because things like `return $foo, "bar";` doesn't work. You are unnecessarily breaking consistency and adding a new mental model. * There have been many benchmarks run and yes, most of them show commas as being very slightly faster. We're talking microseconds per iteration, with millions of iterations necessary to see a difference that is measurable. The lone exception has a single string that was over a million characters long. It would be easier and better all around to not save up that many characters before outputting if that's the issue you have. * A single improvement in algorithm or removing a single needless bit of work is likely to make more of a difference than changing every single period into a comma even in a huge program.
Pretty sure you want bind_param("i", $id2) instead of bind_param("d", $id2)
Not to mention that with MySQLi, having multiple prepared statements on the same connection will result in "Commands out of sync; you can't run this command now". To O.P. do: var_dump($mysqli-&gt;error);
You're a dumbass, and I've repeatedly proven you wrong, but you refuse to admit it. Heck, even Rasmus Lerdorf (the creator of PHP) states that PHP is a general-purpose templating system. 
If it's "kinda urgent," you need to post more code than this. `$stmt2` likely isn't an object, but there's absolutely no way to tell because you don't give line numbers or relevant code, only the area you think is causing the problem. You don't even tell if it's happening in the first loop (which, by the way, you should definitely not have your include in) or the nested first or second loop. Where is `$stmt18` being set? Where is `$stmt5` being set? You are not providing nearly enough information.
Thanks, and I wasn't going for karma because I could care less about reddit's veil of democracy. I'm starting to think those people who strongly tout The Framework haven't actually tried to code something from the ground up and realized "oh, so that's why we have framework x AND framework y..." Lost in a higher layer of abstraction that has already been decoupled from the real app architecture, they are closer to being designers who plug things in than actual developers who *built the platform*. Telling someone to shy away from coding their own *something* in favor of having a template engine do the work for you is just non-educational.
This doesn't give me any results, neither does echoing $mysqli-&gt;error. I tried that before! Var_dump only gives me `string(0) ""`
You could take a look at [Puppet](http://www.puppetlabs.com/) and [Vagrant](http://vagrantup.com/). This way you could also keep your "setup" in the repo.
You might need an outward facing IP, but I don't think you actually need to assign it to the VM. What's important is that traffic from the cPanel servers ends up at your VM, and that traffic from your VM appears to come from your public IP. Look up IP masquerading for the standard way to fake it.
I have a dedicated server.
&gt; You can only store 31 permissions in an int. False, on a couple of accounts. The 0 is still a value, so there is actually 32 values -- when using integers as the representation and a base of 2. Also, some 64bit systems will support a larger `PHP_INT_MAX` (and thus allowing 64 bit values based on ints). Lastly, you can also use hexadecimal [nibbles](http://en.wikipedia.org/wiki/Nibble) to form masks that are not base2 (but base16), which can give you like 4x's the number of possible values. 
&gt; Every feature in cpanel/whm can be performed via the command line. Perhaps, but figuring all that out is a major time sink.
http://www.whisperdale.net/11-nginx-vs-cherokee-vs-apache-vs-lighttpd.html That to start. There's plenty of stats of nginx vs apache vs [whatever] floating about. To be honest, the scale at which nginx seems to be better than apache seems to be a lot higher than most of my projects will ever reach - but I'm hopeful XD. I can't remember the exact numbers, but I was running a browser-based text rpg over apache and it was using more memory/cpu than the same thing running with nginx instead. The numbers weren't too far apart, but at the stage where everything is self-funded every little bit mattered.
Yes, I just looked it up on Wikipedia and tried to find other articles about it, but clearly I got the wrong impression. 
We chose Wordpress because I know how to use it and I do not know much beyond the basic coding required to make a functioning site with the Wordpress setup. We are hiring a database designer to create something to manage our records, but we need the same database to power a search engine on the website. I asked if the database he'd design would be easily integrated into the site we already have, or any future Wordpress site (because they are easy to administrate), and he said he would use MVC. The content is basically song information. We are a music company and want to list songs online that can be searched by genre, artist, tempo, etc. and previewed (so the database would also need to have file reference information). On our end, we would also include business information that would be necessary in our office, but not for website users. edit: added an answer for ALL the questions 
I forget the name of the concept, but it's where you have a table with a resource id, a resource type, a permission id, and a permission value. Sometimes this is expanded to cover target resources. It tends to work well for me with a properly partitioned table. It is a little slower than bitmasks, but the performance gain is that you don't have to shut down shop to add a new column when permissions expand 4 years down the road.
Are you sure the ini values are set? With phpinfo()? Some hosts only allow to change those values with a .htaccess file, others with a custom php.ini, others with ini_set; it's not consistent.
It appears a lot of things cannot be done from the command line. Here is an answer to a support request I just got back. &gt; Hi lulzipops, &gt;Changing the default nameservers from the command line is not supported; you may be able to modify the configuration file for that specifies the default name-servers for new accounts, but the only cPanel supported way to change this is using the WHM. I would not recommend modifying any cPanel files manually unless you are absolutely certain of what you are doing. It is possible that you could break something that would require restoration from backups.
I stand corrected. I also think there are some issues with the service certificates that can't be done via the command line interface as well. 
Do you have any recommendations on what I should do in lieu of this new info?
often you'll get an error in the log with a 500 too. A common shared host issue is you may be running through FCGi or similar, and that has a timeout as well as php, so it kills your script after 30secs or whatever. That'll write to your error_log usually, and is something most webhosts would change no problem as it's local to you, not a global change.
Upvote for webmin. We use it. It's pretty nice, and even handles system updates. 
Seems legit.
That's what's nice about having a virtual copy of his server; he can experiment on that before doing anything on the live version.
Check Apache's error log file; it'll tell you exactly what the problem was. Often it's located in /var/log/apache/error_log.
Since you're going to need AJAX I recommend using jquery or YUI(Yahoo User Interface) as they are browser independent. If you try to write your own AJAX in javascript you will run into problems with browser incompatibility. 
Ya I might just do this. Then I'll have an idea on how to set up a server without cPanel and also have something I can pass on to other devs. Thanks for the reply.
upload_max_filesize can't be changed with ini_set(), make sure you edited the correct ini file.
Any server related task can be done via command line. Nameservers are something you typically change with the registrar and are not strictly speaking server configuration.
in 99% of cases, if you're writing a wrapper for PDO, you're doing it wrong. if you do need something more sophisticated, then use something that actually adds value, for example, [PHP Active Record](http://www.phpactiverecord.org/download)
ugh. not sure why everyone insists on using jQuery. It's ugly and hardly extendible. new Request.JSON({ url: "http://url.to/file.json", onSuccess: function( jsonData ) { // Access JSON data here } }).get();
Yup, I put it in the php.ini file.
Well I hope your project is forced to meet higher demands as well! Thanks for the response. I'm gathering that nginx is the obvious answer, so I will have to start looking into that.
I'm doing something similar, and it's really turning out to be a pain in my ass. Make them first-class object members and write your getters and setters. Maybe, **maybe** use the __get and __set magic methods to let you only have to specifically write the methods if they're anything different than flat-out getting and setting, but let your members be the real thing. I'd say let your XxxCollection classes worry about sortability and searchability, and have the XxxModel classes think about the domain models.
Check out [Bitnami LAMPStack](http://bitnami.org/stack/lampstack). They have VMs you can download preconfigured with LAMP in various versions. They also have EC2 AMIs if you wanted to give EC2 a try, which I personally like. Good starting point to see how its all put together. It will install things a little differently than the default apt-get installation, but it all makes sense and is great for having a guaranteed working base install, so you can make sure it's your app that is broken, and not your stack. Once you have your app working in a test vm, and independently of the server it was developed on, then you can start tinkering with the stack parts. Fun fun! I recently did this with a 15 year old site that was heavily coupled to the server it was created on. Now it's ready to be run on servers all over the world via EC2. :)
http://www.doctrine-project.org/projects/orm.html
Spam much?
For the first don't/do, I prefer to do this: printf('%s%s some string %s', $var1, $var2, $var3); As for the Edit 3, you can also ommit the semicolon when doing a statement like that. &lt;?= $variable ?&gt; &lt;?php echo $variable ?&gt;
You dont use JS inside PHP, you use PHP inside JS. You need a script that would just send the sever time to your page. For that you need your PC to be running a httpd and PHP. Then you do the page as normal, but in the place you want the current time you need to [echo](http://php.net/echo) the current server [date](http://php.net/date). Knowing how to do that you can echo the time to as the value of an JS variable and work from there.
Constructors exist to bring the instance's properties to a known state upon the instance's creation. 
You should put indexes on all fields you search by (well, not really, but that's a start). Your database does *not* hang, but it probably runs out of physical memory when joining tables and comparing values - this would make the OS swap and the procedure will become extremely slow. So first, create indexes. Second, finetune the database. Adding RAM to the database box helps.
Ditch cPanel. &gt; would the Capistrona recipe include installing PHP and MYSQL No. You might be able to provision with Capistrano, but it's definitely *not* what it's for. It's pretty clear, from the namespaces and tasks included by default: deploy:update_code, deploy:create_symlink, deploy:restart, etc. - it's for doing deployment of your application code. It'll manage the version control, pre-checks, reloading any services that need it, etc. And in theory it's infinitely customizable: it's just Ruby after all. But in practice, it'd be a square peg in a round hole. What you're thinking of is configuration management: check out [Puppet](http://puppetlabs.com/puppet/puppet-open-source/) and [Chef](http://wiki.opscode.com/display/chef/Home), decide which you like best, and learn its (quirky) DSL. Then you can write a single piece of code to provision both your production environment and development VMs. This is _awesome_. * All your configuration details can go into version control. Great for having others help you, rolling back things that go awry, keeping a history of changes to track down issues. Basically: all the benefits you already know, because you already keep your application code in version control, right? * Your configuration files can be templated. You can do useful things like if $::environment == 'production', then display_errors should be off in php.ini. This means less repetitive editing of the same configuration files. * You can use [third-party modules](http://forge.puppetlabs.com/modules) for most common daemons and services * [Vagrant](http://vagrantup.com/) lets you use your configuration management to provision virtual machines in Virtualbox. That is: reproducible, disposable development environments that you can share with others (called "boxes" - Vagrant, geddit?). * It really scales with complexity: once you start getting more dependencies in your stack (Redis? Memcached? Sphinx?) you'll be glad for it. Configuration management probably won't save you time on your first node. It might not even on your second. But as soon as you're on to your third, it starts paying for itself: the cost of spinning up additional servers, or making tweaks across clusters of existing ones, is essentially constant. Same with Vagrant: it won't save you time on your first VM, but it'll definitely save you time every build after that. 
Nettuts is running a course. Its still very simple (he just recently went over cookies), but in general Jeffrey Way is a pretty damn good teacher, so hopefully it picks up and gets a little more advanced soon. It costs money thou.
THis would probably be better asked in [r/webdev](http://www.reddit.com/r/webdev) or another one of the front-end communities. This really isn't a PHP question.
Thanks, I'll make a post over there :)
Yes, why?
agree
So you would use Vagrant in conjunction with Puppet/Chef? It kind of sounds like they do the same thing...
I know people diss it because I spent so much more time on the code, syllabus and training people one on one than I have put on the website's theme (it's just a MediaWiki), but I have developed over the years a fairly in depth course from beginner topics to advanced: http://www.phpu.cc/index.php/Main_Page
&gt; That is to say, if every minute you're iterating through a list of 100 stocks and grabbing a copy of www.example.com/stocks/SYMBOL, you're going to get your ass banned right quick. You say that, but it is not true. I am actually doing a re-write of a program that I made last year. I was hitting YahooFinance's website for each stock (up to 100), and didn't have an issue for months. My script was starting to get close to taking 1 minute to process though, which was a problem. &gt; My advice would be to look for an official API rather than scraping a site once a minute So, I'm ignorant to the idea of an API. What exactly do you mean?
Consider http://www.tizag.com/phpT/ or http://www.w3schools.com/php/default.asp. Both are similar but are no nonsense and you can through them in less then a day. This way you get to practicing which is more important than getting familiar.
Hmm, I suppose that Google Finance would be the most likely to have an API, but I think Yahoo has more information that I might need. I'll have to look into it. Thanks for the idea!
cUrl has a huge advantage over file_get_contents : it can handle multiple parallel downloads. Doing so can speed up your process.
Ok thanks for your thoughtful posts in my thread (I wish they were all like this ;). I think at this point I will look at starting a CentOS VM less cPanel and go from there, preparing eventually perhaps to move my production server away from cPanel as well. I'll take a look at this Puppet as others have recommended it. Thanks again.
HTML scraping is *bad*. You're better off finding a service with an API you can use. The reason you don't scrape HTML is that it can change without notice, messing up your code. This can happen more often than you might think.
Must be logged on to view pages? No thanks.
I think it depends on what you're trying to learn. You have a wide-ranging background, so what's getting you stuck? The php manual is good, google helps, stackoverflow for when you get really stuck. Are you looking for a get started guide?
Even with the API, if you have to do many requests I would suggest curl for the keep alives. Unless its already fast enough, then meh.
&gt; f_g_c() is probably better than cURL if all you're doing is simple scraping. I only step-up to using cURL cURL is faster. Significantly. Google fgc vs curl. How hard is that? http://stackoverflow.com/questions/555523/file-get-contents-vs-curl-what-has-better-performance
file\_get\_contents() will work perfectly fine. Your biggest issue is the time it will take to _download_ the contents from these websites. Especially if it has a problem connecting to them (such as if the website's server is down when you try to connect).
If you're going to be doing any kind of scraping, I highly recommend phpQuery. It loads the returned html into an object which you can query just like with jQuery. http://code.google.com/p/phpquery/
ion_auth is set up this way so that users can belong to multiple groups; you have to manually create groups in the database yourself. users:groups is a many-to-many relationship and thus takes the user table, groups table and a join table. so .. in short, just add your groups to the groups table.
I'm under an NDA unfortunately, so I can't discuss what I'm doing with it. Though, if you need help getting it working (although it's mostly very simple) feel free to message me and I can help you out.
I'm a beginner. I'm finding The New Boston's video tutorials very helpful, especially the videos presented by Alex.
Hey, I've recently created a class to handle URL fetching using the cURL extension, which is much more efficient than file_get_contents, in my experience. http://www.phpu.cc/releases/thrive-latest.zip To use: $downloader = new Thrive_URL_Downloader; $data = $downloader-&gt;fetch('http://www.example.com/');
-1, w3schools' PHP content is out of date and full of worst practices and glaring security holes. Never, ever suggest it to anyone.
The performance is irrelevant. The majority of your CPU time is spent on parsing and updating your DB. The majority of your runtime is spent waiting for the HTTP response. You should look into parallel HTTP requests.
I like that you didn't answer my questions, and instead resorted to ad hominem attacks. Not surprised though, considering the tone of your initial reply. &gt; rather than bitching uselessly on a random forum Who is bitching? You're the only one with panties in a wad that I see. &gt; The OP asked for forum advice Are you reading the same post that I am? I see **no** reference to "forum" anywhere in his post. As for trolling? I only gave practical advice. **Benchmark it yourself.**
I'm new to PHP and am frequently finding myself at [PHP Academy](http://phpacademy.org/).
Neat!
I appreciate you spreading Ratchet. Thank you for that as well as the kind words! &lt;3
Going to be incorporating this into my Symfony2 project. Very interesting.
&gt; I like that you didn't answer my questions Rhetorical questions that don't address the subject are not worth repeating. You made a simple statement that was lazy and misleading (with some additional information about your practices to make the post more than the hollow "i don't know"). I corrected the misinformation.
DI is about removing dependencies on concrete implementations and constructions of state. Factories allow consumer classes to manifest state of implementations without knowing the concrete implementation. In practice a factory may be used for user implementations in a data mapper. The article introduces DI with a factory pattern example. I think I would have started with something simpler. The example itself is awkward and doesn't make much sense.
/r/phphelp class UserModel // UserModel? rly? (Model is a layer) { public static function columns() { // using decorators return [ 'ID' =&gt; new ID() , 'alias' =&gt; new Sortable(new Searchable(new Text)) , 'status' =&gt; new Sortable(new Searchable(new Enum(['active','banned','deleted']))) ]; // another idea return [ 'ID' =&gt; new ID() , 'alias' =&gt; new SortAndSearchText() , 'status' =&gt; new SortAndSearchEnum(['active','banned','deleted']) ]; } }
My main point was to gain familiarity but I see how someone can make it their sole resource . That said php's site is a very solid resource that I at least twice a week.
If you are going to teach don't give incorrect examples. class Car { private $make; private $model; private $year; public function __construct($make, $model, $year) { $this-&gt;make = Car::valid_make($make); $this-&gt;model = Car::valid_model($model); $this-&gt;year = Car::valid_year($year); } private static function valid_make($make) {...} private static function valid_model($model) {...} private static function valid_year($year) {...} public function do_stuff() {...} }
Awesome, will do. I'm not ready to start on it yet, but I'll definitely drop you a line when I am.
God's work.
This is more of a jQuery question rather than a PHP question. Consider asking this in [r/jquery](http://www.reddit.com/r/jquery). Also, better formatted code would be nice.
No long-running problems. I've run PHP daemons back a few years ago for months. There were strides made in PHP5.2 to make this possible, garbage collection in 5.3, and performance enhancements in 5.4.
A lot of the projects I've worked on automatically build the schema information off the database itself. These values are then cached in the file system or memcache. Doing it this way will make your migrations easier. If you decide to update a table you are only required to write the SQL to update the table, you won't have to worry about forgetting to update the Model as well. In some of my own projects I've played around with code similar to what you have written, I wonder if it's not best to use an Array. There doesn't appear to much of a gain using objects.
Have you tried adding display: block to #Accordian6Content when the form is submitted? &lt;?php echo ($error == true) ? "style=\"display: block\"" : ""; ?&gt; Obviously the animation won't show, but the div will show
At my job we do several types of testing: Unit testing, integration testing, Behat testing with Selenium and Zombie. We also have QA testing and code reviews. Our bug count after each sprint hovers very close to 0. Unit testing is for PHP alone. I know the frontend dev does J-Unit testing which is for the Javascript. Integration tests make sure that everything working in sync returns the response we're expecting, and Behat testing mimics a user going around and executing scenarios.
It sounds like he is talking about the nameservers his server uses, not the ones his domain name is being resolved from.
I misread what he posted. He said "things cannot be done from the command line" when support told him "well, you can but doing that + using cpanel you're going to have a bad day".
HN?
[Hacker News](http://news.ycombinator.com/)
For work with mysql database make use of [MySql Repair Toolbox](http://www.mysql.repairtoolbox.com) software open/read/scan/export-import mysql data
I understand this, but he said my example was incorrect, which implies that they need to be called statically (which, in this case, they don't). 
http://us.php.net/manual/en/function.curl-multi-init.php
And yet, you don't know the basics of manually administering a linux server. Wow! Who knew? These two facts are irrelevant to one another! Who would have thought!?
You could just rent a VPS with cPanel installed, and you'll have full root access to it, but the VPS provider will have cPanel installed and licensed for you.
Hey just wanted to come back here and thank you for this. I spent yesterday installing and setting up a vm using CentOS and the Bitnami Lampstack. It's more or less working right now and today I'll get my site up and working on it and I'll be able to tinker around. Cheers.
My current job is C#/ASP.NET, but use PHP in my personal life. Any reasons you can provide publicly about why you're jumping the Microsoft ship? [cue flame war]
Brilliant! Many thanks! 
I recently switched over to PHPStorm. It's quite excellent. PHP security is pretty much the same as for other web languages. Have a look at SQL injections, XSS, CSRF, session fixation, directory traversal attack etc.
Can you give us an idea of what type of software you're working on and how big your team is?
notepad++
Network lag: practically gone. So you can make smaller, more cohesive commits more often. Better merging. You can work offline. 
Try python, if you have the chance. 
Flexible commit history, branching and merging is completely painless. I used to think svn branching was not a big deal until I understood how git does it. My definition of 'painless branching' changed a whole lot. Rebase is an amazing tool for small topic branches that are semi-mothballed, but not entirely dead yet.
phpstorm (if someone else is paying, zend studio has nice profiling extras that I've not seen in phpstorm yet, but phpstorm's cheaper). as others have said - git, and linux or mac for workstation, and deploying to linux machine. for me, it's generally phpstorm or zs, with tower as a git client, running on osx.
Sorry for the delayed response. You could use the [`file_get_contents()`](http://us3.php.net/manual/en/function.file-get-contents.php) function on your laptop to both 1) check that timestamp value on the remote server; and then 2) download the text file if it's been changed. You could also use Curl instead of `file_get_contents()`. As I mentioned, there are a few ways to accomplish the same thing. Say your text file path on the remote server is "/var/www/html/textfile.txt". Users can download this text file by browsing to "http://myremotehost.com/textfile.txt". Users can check the last modified time by browsing to "http://myremotehost.com/timestamp_check.php". On your laptop, your local copy of this textfile on your laptop is named "c:\textfile_copy.txt". The PHP script "timestamp_check.php" on the remote server could check `filemtime()` on the text file on its end and then just output that timestamp. Keep in mind, `filemtime()` returns an integer Unix timestamp. The code for this page would be a simple one-liner: &lt;?php echo filemtime("/var/www/html/textfile.txt"); Then on your laptop command-line script: &lt;?php while (true) { $remoteTime = (int) file_get_contents("http://myremotehost.com/timestamp_check.php"); $localTime = filemtime("c:\textfile_copy.txt"); if ($remoteTime &gt; $localTime) { file_put_contents("c:\textfile_copy.txt", file_get_contents("http://myremotehost.com/textfile.txt")); // do something with the updated "c:\textfile_copy.txt" file } sleep(1); // basically cause this looped check to happen only once a second to conserve resources } The above is just a basic example which should be a good starting point. You will have to add in ways to validate and/or sanitize data, handle errors, and adjust for time offsets on both ends to be safe. And, be sure to check the PHP manual pages for those functions to set flags for appending/replacing text file contents as needed, etc.
Eclipse + PDT is a very useful IDE. also: if you're into continuous integration, check out http://www.php-maven.org/ . That said: $_POST/$_GET are not clean, clean them! Using a database? PDO is awesome, even if you don't care about database abstraction, it's still nicer to use than the native libraries. I get that you're porting, but check out Sympony and Zend Framework for some extra components. Symphony is supposed to be more modular than Zend (Zend is rather monolithic in fact). Unit Tests? Use http://www.phpunit.de/ doxygen / phpdocumentator for documentation. I prefer doxygen. I code on Ubuntu, but we support REHL/CentOS, and I'm thinking of switching to CentOS for desktop anyways, because I hate Unity, Gnome3, and I'm not a fan of KDE. Be careful with error checking. One of the most annoying quirks of PHP is error handling. Big ass ugly warnings and errors. You can turn off the display of these errors and warnings and have them logged, but errors, being fatal, will halt execution, and often that's nto what you want. You'll want to check variables before hand (ideally, functions would raise exceptions, but blahblahblah). Dynamic typing seems to freak out a lot of people. (0 == "" == false) == true ya know? http://www.php.net/isset http://www.php.net/empty and using === will save you time. $x = 0; if ($x == false) echo "foo"; if ($x === false) echo "bar"; That will only output "foo", and that's the diff between == and ===. 
Yes. But only in an ideal world will everyone offer API/raw data services... and for free.
I just found this function function escape_query($str) { return strtr($str, array( "\0" =&gt; "", "'" =&gt; "&amp;#39;", "\"" =&gt; "&amp;#34;", "\\" =&gt; "&amp;#92;", // more secure "&lt;" =&gt; "&amp;lt;", "&gt;" =&gt; "&amp;gt;", )); } Would this be enough?
Your tag is confusing me..
I think it's about, like, the database's character encoding, or some shit.
That's what I'm trying to do I guess? Escape the values before executing the querry, but I had the hope of not needing to connect to the DB everytime. I've never built a big website and never ran into this problem before, so I don't really know what the difference of connecting just for escaping a string versus not connecting at all might be, but people always tell me: the simpler, the better How secure is mysql_real_escape_string in SQL injection related issues?
&gt; How secure is mysql_real_escape_string in SQL injection related issues? I would say it's already very secure, but not as convenient and foolproof as prepared queries with bound values, if you're used to it. If you've never built a big website before you should really have a look at prepared queries as it will make things better down the line if you're willing to invest a bit of time to do it properly now.
I already assumed something like that, but from your explanation it seems that you're escaping the data as the user enters it, even if the cache is hit instead of just escaping the values right before a database query. If that is the case, wouldn't it be better to not escape the values when the cache is hit?
Thank you for the advice, and yes, I'm definitely doing it. I'm switching to PDO next week, and already conditioned myself to not launch the app until I do it
No offense but I think you will have a bad time and lots of mistakes if you arent familiar with the language. It's pretty easy to write crappy PHP code. I guess with almost any technology, usually you need to get your feet wet before diving in. If you end up rewriting this app, you will probably come back a year later when you are more experienced and realize you made tons of mistakes. With that said, I recommend using a framework and not just vanilla PHP. Don't try to make your own frame especially if you aren't familiar with the language. I'm personally mostly familiar with CakePHP and I think it's polished and organized with their 2.x release. It'll keep your code more organized and has great security features.
This may be the case, since it's the first "big" thing I make. Let me tell you I have the site in a shared host and it loads blazingly fast, even more if I have the data cached. Of course if visits sky-rocket I'll need a VPS at least. The slug thing, I might be going for that one, but as tvjunky already mentioned, if I get to the point where I have to escape a string for a query, it means I'm planning on using a query, so the connection is justified. Thanks
This is what I'm doing actually
Wow, I'm impressed. May ask what kind of server is hosting that website? Every time you connect to the DB you perform at least a query? Whats the time, approximately, it takes MySQL to finish the query with that ammount of load? Thank you!
Then you don't have to worry about sql injections until you have to connect anyway. You only have to worry about escaping and cleaning up the string so it's safe to use in is_file(). If the file isn't there or it's stale, only THEN do you connect to the database and run a query with PDO with bound parameters and you're good to go. Some of the fastest static caches use htaccess rules to look for the file even. They're faster than PHP, typically use less resources, and you don't have to escape them. // Sorry for all the grammar edits. It's late and I'm tired. 
I'm sorry I didn't understand, but what would be exactly "safe to use in is_file"? Why could user input make this function dangerous? Don't worry about the grammar I'm not native speaker myself
I think in general is_file should be safe from code injection attacks. But I'm not an expert on code injection attacks, nor do I have the slightest idea what new vulnerabilities may arise in the future, so my practice is to not trust any user input, ever. I validate and sanitize everything. In this case, I'd probably make all cache file names UTF-8 -_A-Za-z0-9, and convert any user input characters that don't fall into that set into underscores. That might not work naturally for some languages though.
https://github.com/reddit/reddit/wiki/API Reddit returns its result in JSON, amongst other data types. Using file_get_contents() and json_decode() in PHP should get you rolling. To do things like posting to Reddit or logging in, you'll need to be able to send HTTP Requests. You can use PHP's HTTPRequest library: http://php.net/manual/en/class.httprequest.php
I'm not familiar with JSON, which makes it a bit daunting. If I follow some basic JSON tutorials should I be able to understand how to use the APIs?
JSON is very, very easy. Basic tutorials should bring you to a good understanding of it.
[Uno](https://github.com/blindman/reddit-api-client) [Dos](https://github.com/jcleblanc/reddit-php-sdk)
Don't know why a framework would make a session class like that when they can just set the handlers seamlessly :/
 $jsonResponseFromServer = "{ 'propertyname':'value' ,'other-prop':'othervalue' }"; //object style $obj = json_decode($jsonResponseFromServer); echo $obj-&gt;propertyname; echo $obj-&gt;{"other-prop"}; //this is safer to use for properties with spaces and hyphens $jsonResponseFromServer = "[ 'value' ,'othervalue' ]"; //array style $obj = json_decode($jsonResponseFromServer); echo $obj[0]; echo $obj[1]; $jsonResponseFromServer = "{ 'propertyname':'value' ,'other-prop':'othervalue' ,'arrayprop':['val1','val2'] }"; //mixed style $obj = json_decode($jsonResponseFromServer); echo $obj-&gt;propertyname; echo $obj-&gt;{"other-prop"}; echo $obj-&gt;{"other-prop"}[0]; echo $obj-&gt;{"arrayprop"}[1];
I don't get it. Why do you want to protect against SQL injections when you have no SQL query to inject to? It makes no sense to me. Why can't you store the data as-is, then escape it when you actually do connect to the database? Also, use prepared statements instead. The difference is that it's actually immune to SQL injections because the query is sent first and compiled at the server, but with parametrized slots for you to bind your data to. Since the actual query is pre-compiled, you cannot have a SQL injection as there's no SQL query to inject into. Edit: fixed a typo
Interesting, mind if I ask what website you are running? Also, be warned, I've tagged you as a php/mysql scalability expert so sorry if I annoy you with questions in the future.
Sublime Text 2 is not an IDE. Remember, IDE's are usually context-aware of what your code is doing. It's a sophisticated text editor. It's bug pluses are that it works on all major platforms (windows, mac, linux)
also, take a loot at http://silex.sensiolabs.org
Don't think about the language. Think about the infrastructure and the minefield that is deploying IIS and SQL Server (CE or Express)... In terms of licensing, I mean. 
&gt; NOTE: I'm almost surely switching to PDO in short time, but as I understand, there is no difference, if PDO has a function to escape strings, I'll have to connect to the DB NO you use $sth = $pdo-&gt;prepare("Select * from users where username = :username"); $sth-&gt;execute(array(':username' =&gt; $_POST['username'])); What are you using cache wise? 
Sublime Text 2, Ubuntu/Arch Linux, git.
Not really an option, I'm afraid. 
&gt; There is not a valid cache, so I query de DB passing the section the user requested as parameter &lt;-- here is where the injection would be a problem If the parameter has a limited set of allowable characters (say, only digits, or only latin-alphabet letters) then you can easily sanitize it with preg_replace.
Use strtotime() to convert your time from human readable form to unix timestamp (amount of seconds from 1/1/1970) and then compare to the current timestamp (time()). strtotime() will put todays date if it's omitted. $time = strtotime(file_get_contents('time.txt')); //converting time to unix timestamp; if ($time&gt;time()) echo 'Yeah its greater';
Probably "Session" class has more functions and to keep consistency with the rest of the Class. For example I created one that will save the data on a form if it failed, and clean it if it was ok. Plus, also plugins (which could extend forms) data will be saved/cleaned. So I did a few wrappers that saved me a lot of time. Of course, if you're only going to set/get ... there's no point doing it.
Howcomes?
I'd rather not say what site. I have a few reasons. Firstly, people being as they are, I wouldn't want to draw in any vandals. Secondly, I think the website itself, while harmless, is also tacky and dumb. And thirdly, I think it's ugly. I wouldn't call myself a scalability expert by any means. I've only been at it for a little over two years. There's so much to know it gives me indigestion just thinking about it. 
You typically don't want to perform any file operations on paths sent to you directly. While this might not succeed these days, imagine links like example.com/article/../../etc/passwd You could just make your cached names alpha only. Take whatever the user gives you, and preg_replace('/[^a-zA-Z]/', '', $urlpart) That string is now letters only, and should be safe for use in filenames and sql.
This looks awesome. Really looking forward to trying this out.
require.js is great for modularity with backbone
Using files is a bad idea - under heavy load you will run into issues with locking and pages constantly being expires from the filesystem cache. Use something designed for caching such as memcached or redis.
Yeah, idk why they called it that either now that you mention it.
I was under the impression that the OP did not have an active DB connection. After reading through the rest of the comments I now understand what he is trying to do. There are some good suggestions within the thread. It seems as if the OP is attempting to build something similar to memcached, not sure if he can use memcached in a hosted environment...
I know, but for now the other alternatives are not an option, if I ever need to upgrade server, I'm using them. The app is designed to make the change whenever I instruct it to do it
Its not really an option now. If I have to upgrade server, then I certainly will
Well, initially, the app was going to be Windows exclusive. At least now I can deploy it fairly easily to both WIndows and Linux...
Okay, I'm wrong with assuming it's an incorrect term but imho it is more confusing to use "SDK" instead of "API" but yeah, it's opinionated.
Fair enough. 
Head First PHP
Hello, Thanks for the ideas, though none of these work. This is my current script: &lt;?php echo "&lt;b&gt;" . file_get_contents('time.txt') . "&lt;/b&gt;&lt;br&gt;"; //$currentTime = date("H:i"); $time = strtotime(file_get_contents('time.txt')); //converting time to unix timestamp; if ($time&gt;time()){ echo 'Yeah its greater'; }else{ echo "no its not"; } ?&gt; I tried if ($time&gt;time(H:i)){ too but that didn't work neither. The format of time.txt is H:i . I've tried all other ways too, but none has worked :/
http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098/ref=sr_1_1?ie=UTF8&amp;qid=1340474163&amp;sr=8-1&amp;keywords=php+objects+patterns+and+practice
I see, thank you!
MD5 is a general purpose hashing function which was never designed to handle passwords. Secondly, it's cryptographically broken, vulnerable to both collision and preimage attacks. Bcrypt is an algorithm based on the blowfish cipher which was specifically designed for handling passwords. It has both salts and work factors built in. US-CERT has even labelled MD5 unfit for further use and the U.S government now has a minimum requirement of SHA-2 for general purpose hashing. 
It seems to be working right now. Thanks everyone for helping a beginner ! :)
Have you tried just reading the great [manual](http://php.net/manual/en/index.php)?
No, it does not.
For me the biggest benefit of git over svn is the ease of branching. For me, this means I can create a new branch of my site to add some radical new feature that changes a lot of stuff. But, while working on that big change, if something comes up on my live site that needs fixing, I just change back to the live branch, do my fix and commit, and then swap back to my feature branch. It takes a second to switch branches. You just have to try it yourself. Other than that, git is faster and just nicer to deal with. It just has one .git folder, and doesn't put a .svn folder in every single directory. Basically everything is better with git. :)
We don't use firebird so I can't speak to this extension specifically, but thanks for developing for Yii. It's my favorite framework and for some reason it makes me happy to see others contributing!
It's better practice to close the php and use html since it's a lot faster and makes the web page smaller in memory size. 
He asked for a PHP book, not a Python book. 
Can I find this at my local bookstore? A huge draw for me is that option as I'm traveling a bit and want to be able to read it without the use of a computer.
I've taken a look at it, and it's been great as a reference, but I guess I'd really just like a physical book I could bring with me on my travels.
As far as my experience with Python goes, it's not the *best* for web development, but it's still damn good. 
I think I'm liking this one the most so far... definitely liking the examples they run through
Surely we don't need to make posts about the most basic features of PHP. It will only decrease the overall quality of the subreddit. 
I get that. I don't want to write a script from scratch when someone else has already done an excellent job on one. I just don't recall where it is.
Except the speed difference only matters when apc/eaccelerator/xcache isn't being used.
[Read this](http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html). [Also this](http://www.php.net/manual/en/function.require-once.php#90017).
Here are a few of the sites I read very often: * [Nettuts+](http://net.tutsplus.com/category/tutorials/php/) * [David Walsh](http://davidwalsh.name/tutorials/php) * [Smashing Magazine](http://coding.smashingmagazine.com/tag/PHP/) and [PHPMaster](http://phpmaster.com/) once you get a little more advanced.
If you do a million iterations on a single password, you're going to open yourself up to a resource exhaustion attack.
Let me just say, **not** W3schools. Whatever you do, don't read that. In the support community we pretty-well spend half of our time unlearning people of that travesty.
I know little php, but everyone I asked said that w3 schools is garbage. I've seen that w3 fools thing too. 
It's because mysql_escape_string (not mysql_real_escape_string) won't take the character encoding into account and therefore multi-byte characters may be mangled, or single-byte chars I believe could be interpreted as multibyte.
Using this one at work, much better documentation and overall has more things you want than the slimframework. Also with tight integration with packagist &amp; composer.
The result of that is an even bigger set of tables... Also, I am not at all trying to device a better hashing scheme than the one professionals can come up with, that would be absurd. I **know** I'm wrong, that has been clear to me from the moment I made this post... what I'm saying is that I **can't** be wrong in the ways that you suggested, or at least I don't think so.
Good question. While Reddit might down-vote you for it, it is wise to question why something is best practice and propose possible alternatives. Especially if you do not quite understand the topic. First of all there is no good reason to use MD5, ever. While it is not completely broken, there are alternatives that do everything that MD5 does better. SHA-1 is a great example. So, why not run a thousand rounds of SHA-1 on a password? Actually you can if you want. This is an acceptable practice according to government guidelines on federal systems. But, again there are better options. Why? Bcrypt guarantees: * That a salt is used and properly generated. * The algorithm behind it, essentially blowfish, was designed specifically to be theoretically unfeasible to hardware accelerate both now and for architectures anticipated in the future. SHA-1 and MD5 on the other hand, were specifically designed to be hardware accelerated. Thus it is far more likely that SHA-1 calculation times will decrease a lot more rapidly than blowfish as computers get faster. * Bcrypt is more than just an algorithm, it is a fully fledged password hashing function. In order to utilize SHA-X in a similar fashion you will need to properly recreate the functionality of Bcrypt. Failure in even one area could end up with an easily compromised database. The real question is, why not use Bcrypt? The only good answer to that question is if you want to create your own alternative to better understand how stuff works. But, even in that case I would not risk using an alternative in a production environment, if for no other reason than your function has not been thoroughly vetted by thousands of security experts, and the alternative has! *Disclaimer: I have merely researched this topic thoroughly. I am not an expert cryptographer. I could be wrong. 
What results do I store in an array? The accounts results or the results that I echoed in the loop?
thanks, I didn't know that! But how does it help an attacker to find a collision? if you have the millionth md5 hash result of a password and find a string that produces that same hash, what good is it to you? what you need is the actual password to access the database as that user or maybe use it to log in to some other accounts of his like his email, so how do you get from the millionth hash back to the pass?
Learn both! If you're writing a web based game, write your front end in PHP + whatever game language you want to write it in (If it's an animated game), then write the back end in Python and use sockets or something to connect the two. Python is a great tool for anything, it's a great replacement to Perl IMO. 
You know what you put in to get the collision, so you enter that, knowing it will create the same hash at the end and be accepted as though it's the real password...
escape before query sanitize on way out
what you need in order to access the server though is a string of characters that when hashed **exactly** a million times (in this case) it will give you the hash you got by hacking the server, so what good is a single collision with the millionth hash? There's no way the string that produces a collision with the millionth hash is also going to produce the exact same hash when hashed a million times more...
what are the users seeing when they attempt to submit a ticket? does the request actually get to your server (check the logs)? do you have any custom config in cloudflare that says to cache everything?
Ah, no, I agree with you there. I jumped ship from Windows a long time ago. Spin up a Linode and never look back :D
You submitted a ticket cool, :) I think I can fix it via the default domain, I owe you a beer
let me know when you come through tucson, az and i'll take you up on that. :)
positive ;) double checked it echo "&lt;pre&gt;\t data \t\n"; echo file_get_contents($pem); echo "&lt;/pre&gt;"; returns the data
Is there Head First PHP and MySQL? or just PHP 
Mono [is a different story altogether](http://www.mono-project.com/FAQ:_Licensing). Although they seem to try to adhere to a "do _almost_ whatever you want" philosophy, as you can see, it [still gets a little complicated](http://www.mono-project.com/FAQ:_Licensing). And even though [MS "promises" to stand back and let Mono do it's thing without interferrring](http://www.itwire.com/opinion-and-analysis/open-sauce/26117-microsoft-appears-to-clarify-mono-licensing), [that promise just seems a little weak and not without conditions](http://en.wikipedia.org/wiki/Mono_%28software%29#Mono_and_Microsoft.27s_patents). This causes fear in the developer community. PHP on the other hand - and I'm sure Perl and several dozens of other languages (scripting or otherwise) - adhere fully to the "do whatever, just don't put our logo on it" philosophy of open source, so become very promising alternatives. Even though you are at the mercy of *nix repository maintainers who may lag years behind current language releases (I'm looking at you, Centos), they still become quite an attractive alternative. I was mostly being facetious about the difficulty with dealing with MS licensing. But, [here's a very basic 46-page summary of their minimum licensing requirements for private developers who choose to use an MS dev tools and environments](http://www.microsoft.com/en-us/download/details.aspx?id=13350). The costs of doing business with MS could run in to several thousand dollars per year per developer. 
Something else not mentioned here, is that attackers can use non PC hardware (like GPUs) to crack md5 MUCH faster. However the bcrypt algorithm needs constant access to a constantly changing table during it's execution, this type of algorithm actually runs much worse on non PC hardware like GPUs. So basically there's ways to make your md5 and sha1 loops much faster than intended, while bcrypt will run much slower anyway. This is why I recommend people use bcrypt over even sha256/sha512 looped thousands of time, because bcrypt is still MUCH slower and more future proof.
Cloudflare does this automatically without asking or much info
Good description, but I think you meant to say the Blowfish cipher. (Bcrypt uses a modified Blowfish algorithm coined Eksblowfish, for **e**xpensive **k**ey **s**chedule Blowfish.)
On this point you also shouldn't rate limit by IP, but rather by username (or email, depending upon which you use to authenticate users). This should also be decoupled from your user store so that attempts on nonexistent usernames are rate limited as well. I personally prefer my authentication schemes to use user email addresses instead of publicly visible usernames so that potential attackers have even less to go on.
You're missing the big picture. A hash is not a truly unique representation of whatever the input is, it's a semi-unique value. Which means that any hashing algorithm is going to only result in a hash that is one out of rather limited series of possible values. MD5 is *especially* bad in this regard. So given this fact, one can easily do the math to see that a hash *produced* by the algorithm will be one out of an even *smaller* set of possible values. And a second order product will be from an even smaller set still. One could thus conclude that eventually, due to the nature of these collisions, you end up with only a single possible hash. If that magic number happens to be, say, a million, that means that every password entered will have the same hash at a million iterations. So you see, the more times you hash, the more you've increased the probability of a collision from an attacker succeeding.
I updated it to "==" and that didn't change it. I noticed the error came up that the value was "", but I fixed the error, but it still believes that there is some in the table. I'm wondering if it has to deal with the mysql_num_rows() value. I'm going to play around and see what I can get in the mean time.
Well, yes, you'd have to use Ajax to do a live update timeline of tweets. But, Ajax is just javascript - it's not a new or different language or anything like that, and jquery makes it stupid simple.
Sorry, I thought that preg stuff in php was regex, is this wrong? Also, I love time consuming. I'm 16 and I love learning this stuff. Even if it means doing remedial or repetitive tasks for hours. Edit: typos. Damn phone. 
No, you're exactly right. Preg = perl regular expression. Although the tools exist in PHP, though, regular expressions are common through most programming languages, javascript uses them too.
Yep, and while they're a PITA to figure out at first, once you get the hang of it, they're not bad. You might want to consider open sourcing your application, if you want to spend a lot of time on it, I'm sure it'll be useful for someone out there (Twitter might hate you though). Good luck!
"if you know what you doing" Ha! Good one!
Using the mysql_* functions makes baby Jesus cry. You're using them unsafely to boot.
Ubergallery is not really a framework either. A framework is something you use as a foundation to build your application upon, ubergallery is an application itself. I know it's not terribly important but is generally worth having your terminology down.
do something useful with your time mate
Just to be sure, this was the one you tried right? http://downloads.php.net/pierre/php_http-5.3-svn20091125-vc9-x86.zip
Suggestions?
 $.post( '/ajax/update-tweets', { someVar: 'someValue' }, function( server_response ) { $('#tweets').prepend( response ); }); Simplistic example...
I recently build a scraper that first fetches 5 overview pages and then fetches 50 detail pages. With multicurl the total process takes about 14 seconds. The bottle neck here is poor performance of one of the sites I scrape.
wouldn't the server I'm trying to connect to, refuse connection without a client certificate? **edit** forgot to mention that I have no access to the code on the server I'm trying to connect to...
there are better projects to learn with than something he'll make and then forget about.
 floor(time()/86400);
I don't have the answer but curiosity is killing me - What do you need to know this number for?
Most immediately, as an implementation detail for on_consecutive_days_p(datetime1, datetime2). I'm involved with business logic that says, for example, a certain event needs to happen each (local clock-)day. If it happens at 0:30 in the morning on Wednesday, and again at 23:30 on Thursday, that's good; if it happens at 23:30 on Monday, but next at 0:30 on Wednesday, I have to signal, "somebody skipped Tuesday". Calculations of this sort are surprisingly difficult--more precisely, accurate datetime calculations involve a lot more detail than naive observers realize, and these business rules essentially require datetime precision. Why don't I just use days-in-year, which has been accurately available in PHP for a-long-time-I-shan't-now-bother-to-research? That's feasible, and what a preliminary version does--but requires special handling for 31 December. Am I serious about these sorts of calculations? Yes. On one level, they're inconsequential: it's really silly to fuss over whether a transaction happened before or after a daylight-savings-time "jump" (for example). People should just get stuff done before deadlines, and not fret about these exceptional cases. At another level, though, these calculations are *very* human, and significant: there are all sorts of legal-financial-... situations where it's a very, VERY big deal whether an event happened a minute before, or a minute after, midnight. I regularly receive annual renewals in a program I manage that are within SECONDS of a deadline that determines how hundreds of thousands of dollars are allocated.
Thank you. I thought our team had earlier determined DateTime Classes were flawed. I'll now investigate further, and make a point of reporting back what I find, although it might take several days for me to return here.
Heh-heh; and this doesn't even broach timezone questions which are occasionally taken so seriously that people end up going to jail. More trivially, there are abundant experienced programmers who still don't grasp the distinctions between PST, PDT, and "US/PT". I am familiar with the article to which you refer. I'm thinking of writing my own follow-up to it ...
I don't agree. I've learned a lot by doing this kind of projects and discarding it after a while. It doesn't really matter if it is useful or not if your goal is to learn something. If you learned something of a project you started to learn something and you later discard it, there's no problem with that.
http://php.net/manual/en/class.datetime.php You can get the difference between two times with that. **EDIT** The only thing is, with the time you have in the TXT file and `strtotime()` might not get exactly what you want. It's a little vague to only have 10:18 in the file, we don't know if that's supposed to be on a 24 hour time or should represent 10am or 10pm, also it is unknown when the file was last updated. **EDIT 2** You would probably be better off tracking this in a table with a timestamp field, that what you can query the last field and get a `DATEDIFF()` between the field and the current time.
yes sir :D
I've checked the website and it is a possibility. ;[
You're probably out of luck then, windows dlls are notoriously difficult to find and a bitch to compile yourself.
Any link you make through HTML is going to redirect to another page simply through the nature of how links work. The action you want to do is call the page/script through JavaScript. The page that executes the code will exist just like normal; however the method you call it will be through a JavaScript asynchronous load. 
Take a look at jQuery and specifically its AJAX section. AJAX basically means you can call a remote page without redirecting to it like a traditional button would. You send a call to your PHP script and the code gets run (for the shell code I'd recommend using the `exec` function (http://php.net/manual/en/function.exec.php)). Alerternatively, you could skip using Javascript and have the page redirect when the button is pressed, and then redirect back to the page you were on using `header('Location: /whatever');` in PHP.
To further clarify, if you have jQuery something like this: $('#whatever_button').click(function() { $.get('http://someurl.com'); });
What is nice is that `DateTime` allows comparing two DT objects with normal comparison operators. And, these classes can be extended. For instance, you can extend DateTime and add a `__toString()` method to print out some default `DateTime::format`. What might trip you up is periods within daylight savings turnovers as in this example: $d1 = new DateTime('November 4, 2012 1:59:59am'); $d2 = new DateTime('November 4, 2012 2:00:00am'); var_dump($d1-&gt;diff($d2)); // 1 second That's great, but what if we hadn't yet rolled back an hour for the purposes of the first timestamp. The difference should be 1h 1s. To help overcome this, check the return value of each objects' `getOffset()` method. Prior to the turnover, they should differ by 3600 or so depending on if the Timezone follows DLS. DLS start date is a little easier and a little more odd. The time between 2:00 and 3:00 am simply doesn't exist, or for the purposes of PHP, is exactly the same as 3:00 am to 4:00 am... $d1 = new DateTime('March 11, 2012, 2:01am'); $d2 = new DateTime('March 11, 2012, 3:01am'); var_dump($d1 == $d2); // true ~~Alternatively, calculate everything in UTC or GMT and avoid using unhelpful named timezones.~~ Edit: actually, this bit might be unhelpful generalized advice. See: http://www.reddit.com/r/PHP/comments/vw0gb/figuring_out_if_dst_was_in_effect_in_the_past/. But still, avoid accepting unhelpful Timezone values like "cst" or "pdt" from clients as they could accidentally pass in "pdt" when they're actually in "pst". Location-specific values like "America/Los_Angeles" are better.
I'm interested to know what you find out. After some semi-extensive testing on my part, I've found the DateTime classes to be pretty reliable especially when dealing with localized timezones.
Depends on how it's set up. If it's simple SSL then you don't need a client cert unless the server is specifically configured to require them. IIS7 and Apache don't require client certs by default. This is why you can program your code to ignore the cert errors as long as you trust the source. The tunnel will still be encrypted but you, as the programmer, have told your code not to verify the certificate authority and domain. The best thing to do is try option 1, and see if you make a connection, then try option 2.
Thanks, I managed to get the page redirect canceled out with this tucked in the script event.preventDefault(); 
right, i was thinking about adding the data check (pretty much everything requires the data), it just seems hacky
this is correct. Domain objects shouldn't be in charge of getting their own stuff from the database. That usually goes to the DAO or Service layer.
Yeah, thats what others have said. Luckily, the users will be me, and the guy I work under. This is only for practice. One question though, I'm stuck and I thought I'd kinda mooch off of someone ;) I just got the register page done, but when I try to redirect, it says: &gt;Warning: Cannot modify header information - headers already sent by (output started at .../twitter/includes/header.php:13) in .../twitter/register.php on line 66 Heres the register page, do you see any glaring errors? [PAGE](http://pastebin.com/wvF7Kbwt) EDIT.: on the link, the header is at line 69.
yeah, this is probably what i will do thanks
thanks :)
Well, in your .htaccess you could do something like: ErrorDocument 500 /you-broke-website.html
You called?
Oooo I'm liking this one. Thank you!
Yes. 
Would putting ob_start(); in the init.php help? I'l test and find out.
AFAIK it did, if it doesn't work for any reason, I'll get back. Is there a reason that this isn't a safe practice?
Without seeing your code, here's an example: &lt;?php if(isset($_POST['username'])){ //do registration/login header('Location: index.php'); } ?&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;form action="register.php" method="post"&gt; &lt;label for="username"&gt;Username:&lt;/label&gt; &lt;input type="text" id="username" name="username" /&gt;&lt;br /&gt; &lt;label for="pw"&gt;Password:&lt;/label&gt; &lt;input type="password" id="pw" name="password" /&gt;&lt;br /&gt; &lt;button type="submit"&gt;Login/Register&lt;/button&gt; &lt;/form&gt; &lt;/body&gt;
I know I could do it with the whitespace way, but is there any reason I can't use ob_start? is it insecure or bad practice?
Yes, this is the sort of thing I was looking for. I'll look into Selenium, et al. Any other testing systems anyone has seen?
Use Chrome or FireFox with Developer Tools to see the network traffic. It sounds like you are probably getting some sort of error. With those browsers (use Firebug in Firefox) you can press F12 to get the console. This will let you see what you are "posting" to the server to make sure the variables are coming through as you expect. From there, you should be able to narrow down your issue with your php script. Good luck, coding can be frustrating but fun!
1. Turn on error reporting, either in php.ini or in your .htacess file using php_value error_reporting E_ALL. Do you get any error messages? 2. is the action attribute to your form the correct URL (relative or absolute) to your script for saving to the database (I assume so, just checking).
No, but you're kinda using it not for the purpose it was intended. It's main purpose is to cache output, and possibly modify it; Your main purpose just to stop output until you've sent all headers necessary. Now it's easy to see, that those are very *similar* purposes, you could be easily forgiven for thinking, *well, what's the diff?* But in any language, this kind of solution can lead to future problems: if you write code in the same style as `register.php`, at any point that you fail to remember to reimplement caching your html output, stuff will start breaking over again exactly the same way. Although, ob_start() is not a *bad* solution in any way, per se, it puts more mental stress on you (and any others working on the code) in order to have to remember to keep on doing it in order for it to continue working. A better solution (although one likely with higher initial effort) would be to refactor and reorganise your code, so that *by design*, any and all code that would want to send headers is executed before any output code. If you restructure your program in this way, it means the in *the natural style of writing your application*, this problem will never occur, by design. You don't have to worry about it whenever you're writing out a new html tag, because you'll know that all code that needed to send headers already has, by that point in execution.
I noticed they have a [kindle edition](http://www.amazon.com/CouchDB-Development-Beginners-Guide-ebook/dp/B008DVPB52/ref=sr_1_2?ie=UTF8&amp;qid=1340605568&amp;sr=8-2&amp;keywords=CouchDB+and+PHP+Web+Development) that is very reasonably priced (just under $15). Good deal.
Strange that Symfony doesn't do this [albeit probably in a more structured way] from the get go. Testing the whole application each time you want to test only one part of it - well you can see the idiosyncrasies in that.
Funny how you've never suggested any of these 'better projects' for OP. IMO the best project you can do is one that you're motivated to do.
Some parts of the solution to this could be to chuck something like [cloudfare](https://www.cloudflare.com/overview) and/or [varnish](https://www.varnish-cache.org/) in front of your web server.
&gt; which was never designed to handle passwords. As a cryptographic hash function, yes it was. It just didn't do a stellar job.
With Apache you can set the user which the site process will be run under. This can be specific for each site. You can then use sudo to allow permissions on a2ensite to one specific website process user id, so that website can call 'sudo a2ensite' from your PHP site. You could also call a2ensite/a2dissite via something else (i.e. bash or Python script), which also requires raised permissions to be executed, but validates that you aren't adding/deleting certain crutial websites.
Thanks, the better option definitely sounds like a better option.
This is a question where you should google the answer. At least show minimal effort on your part before asking people to do your work for you. 
Look into mod_vhost_alias and skip the entire problem.
I did try to Google it but i figured i wouldn't even try to demonstrate my understanding of it, because, well, i don't understand it. Every example i got would show the query and the print but i couldn't pull it apart to get it. Like, i know that query prints four columns, multiple rows, i learnt about rows and so on, but the array size and print array command failed, i didn't know enough about troubleshooting it. Lastly, i figured if someone out there was a wizard, they'd answer it in 5 seconds and know i'd appreciate it but instead I'm hear justifying not why Google didn't help as much as i'd have liked it to or why i didn't have a huge amount of time to look in and understand it. 
Very simple case: $db = new mysqli('localhost', 'databaseuser', 'databasepassword', 'databasename'); if ($db-&gt;connect_error) { echo $db-&gt;connect_error; exit; } $sql = "select b.displayname, a.eventid, a.source, count(a.agentguid) cnt from ntEventLog20120624 a, machnametab b where a.agentguid = b.agentguid group by b.displayname, a.eventid, a.source order by cnt desc"; $st = $db-&gt;query($sql); if ($st === false) { echo $st-&gt;error; exit; } echo "&lt;table border=1&gt;"; while ($row = $st-&gt;fetch_row()) echo "&lt;tr&gt;&lt;td&gt;" . join("&lt;/td&gt;&lt;td&gt;", $row) . "&lt;/td&gt;&lt;/tr&gt;"; echo "&lt;/table&gt;";
Cheers! I think i get it, why would it be while...fetch row, instead of the other examples i saw with Array's? I'm a total novice, i can do pseudo code and usually get by, but i've been at this for less than a day so i'm really fast tracking any knowledge i can come by. Thanks again! It really is much appreciated. 
fetch_array can behave like fetch_row, like fetch_assoc, or in a totally useless mode where it combines both. I just use fetch_row in situations like this because it's terser and therefore to my mind more clear. Or if you're talking about using fetch_all to put the entire result set into an array, that's bad practice unless you know for absolute certain your result set won't be large. Otherwise you create a scaling problem.
Have php run a script which runs as a particular user, and only give that user rights to run the commands you want. Easy with sudoers, for example. 
That too! 
It's unfortunate that the: (function () { // foo }()); Syntax is still not supported, not even in PHP 5.4.
Calm down. At least show minimal curiosity on your part before accusing someone of not looking around. In the same amount of time you spent blindly accusing someone of not googling, you could have been helpful. Have a downvote.
I couldn't find anything in the MySQL logs, which was a shame. However, meritt_zare provided me with a solution [here](http://www.reddit.com/r/PHP/comments/vkj92/problems_trying_to_convert_my_database_class_to_a/c55avs9) I did look at passing the database object about, but in my case that involved passing it though several objects that didn't need to use it and I felt it was untidy. That was when I investigated the singleton pattern.
Paying for their cars and watches.
Congratulations on being a better programmer than I am and having such a great nose. On a more serious note, I am learning oop patterns from scratch. I am trying to get my head around it, but it takes time. I disagree with you that passing the db through lots of objects is always a good idea, but I fully acknowledge that there are better solutions out there. When I tackle a new project (in this case, revisiting an old on) I like to take something that I'm not familiar with and work it out and implement it. In this case it was the singleton, for which I have implemented some prefs and logger class for, as well as the db. Thank you for helping me discover that I should probably look around more at better solutions to having a single db link. But I like to run before I can walk, for now I'm just glad that I am understanding this.
What is this .htaccess file I keep reading about? Where is it located and what does it do? Also, I thought I turned error reporting on by commenting out a line in the php.ini file but it sounds like I should use SkepticalMatian's approach instead. I'm not in front of my machine right now but I will try again later. Thanks.
Yep...I can make some things available for free, but can't sell it on my own!
Yeah, it sounds like unfortunately it's a standard these days... I don't mind it only being 16%, because I have a full time job and I really wrote the book more "for fun" than anything.
I've used Ion Auth for three projects now and it works nice. Just make sure you keep it up to date by following the [git repository](https://github.com/benedmunds/CodeIgniter-Ion-Auth). 
TBH, been quite a long time since I've read that book. I think it's a good start atleast, but it could have been done better.
If you don't care about the file extension that shows in the browser you can also just give it a .php extension.
I feel like this would be great for those that would rather subscribe to a subreddit and get late content than subscribing directly to his YouTube channel.
Not an answer, but a admonition: security happens in layers. Do not rely solely PHP/Apache to enforce good security requirements. Consider running these instances in chroot'ed jails to separate them from the rest of the system.
I've actually tried the CMS Drupal before on this project, but it did not have a way to code that felt natural (ie: create a module for everything). I switched to Code Igniter to keep the ability to write my own code. Would I be able to easily code in PyroCMS?
&gt; I get 16% of sales regardless Suddenly I don't want to publish a book anymore.
Related - /r/codeigniter, /r/bonfire
Zend 1.X or Zend 2.0? Zend 2.0 is probably too fresh for a book (plenty of blog posts though)
The way Plesk does it is they run two instances of Apache and PHP. One is the standard port 80 facing server that all the public sites are on. The other runs on an alternate port and is for administration only. This way the administrative backend can be granted access to more resources and (in theory) a breach in the public sites won't impact the administrative area. 
Congratulations!
I used to follow r/codeigniter but it isn't very active.
Try: function post_comments($comment = null) { $comment = strip_tags($_POST('comment')); mysql_query("INSERT INTO comments ('text','from','date_added') VALUES ('".$comment."','".$user_data ['username']."','".time()."')"); return true; } And about the GET + POST thing: I don't know that there is anything inherently wrong with it... I've just never seen it before. I figured I'd ask.
Good point. How is Codetique going?
Can you post the relevant code from index.php? I'm not sure why it would have no problem echoing `get_comments()` but return an error with `post_comments()`. Also, change `post_comments($_POST['comment_text']); ` to `post_comments($_POST['comment']);` since your post variable is called "comment" not "comment_text".
Not too bad. It's just hard to develop an active community. Thanks for asking :) 
Is the first block of code where you declare the function included in the file where you're calling this function?
Comments.php is in the OP, but here it is again. &lt;?php if ((isset($_GET['action'])) &amp;&amp; ($_GET['action'] == "post")) { /* problem area */ post_comments($_POST['comment']); } echo link_comment(get_comments()); ?&gt;
somebody already posted it. :(
Wait, so comments.php is just this code? &lt;?php if ((isset($_GET['action'])) &amp;&amp; ($_GET['action'] == "post")) { /* problem area */ post_comments($_POST['comment']); } echo link_comment(get_comments()); ?&gt; Where is the code you posted above this in the OP?
Change `post_comments($_POST['comment']);` to `get_comments()` and see if you still get an error. It won't really do anything, but you'll know if it's still calling a function like it should be.
I don't see where you've included the file on comments.php that defines those functions (whatever the first file is supposed to represent)
PDO by far. http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers, I wrote this tutorial for folks like you. 
The sanitizing function includes the real escape string. And i'll go to pastebin and post the files. So, in a minute or two!
Fatal error: Cannot redeclare get_comments() (previously declared in /home/content/05/7506905/html/twitter/core/functions/users.php:4) in /home/content/05/7506905/html/twitter/core/functions/users.php on line 17
I'll just more or less re start. Thanks for the help, though! 
That doesn't look too bad at all! Next project, I swear ;)
If the site is almost finished it would be very unwise to incorporate a CMS or Framework into the mix. If your friend wanted to use a tool like a CMS or Framework then that should have been done at the start of the project. Just code the authentication portion yourself and get the site out the door. 
No worries! for the interested, defining a connection string is where the above is different from mysql to mssql $db = "server"; //serverName\instanceName $connectionInfo = array( "Database"=&gt;"mydatabase", "UID"=&gt;"username", "PWD"=&gt;"pwd"); $conn = sqlsrv_connect( $db, $connectionInfo); if( $conn ) { echo "Connection established.&lt;br /&gt;"; }else{ echo "Connection could not be established.&lt;br /&gt;"; die( print_r( sqlsrv_errors(), true));
use require_once 
Thank you, i do however offer a humble internet apology, yesterday wasn't the best of days, i should have shown i went to a little bit of effort to nut it out. My bad, everyone gets an upvote now to reverse the sorrow!
I'm actually the friend that gregolai mentioned. My basic reasoning: * The site needs user registration / logins, mainly for comments and having user ids for the custom content editor we built * A cms would have boatloads of plugins to deploy right away, such as comments, newsletter systems, ability to upload avatars, social sharing icons, traffic rankings, etc * We could do all the major functionality in less than a week, securely. Instead of adding a month or two of dev time. * the only things that would be needed to integrated into the existing site would be a log-in meta box, a comments system, and the ability to associate the current logged in user with our custom content editor. The site itself has it's own framework for handling the url-rewriting and page displaying, but it is not it's own CMS. So I was thinking it would be possible to us an existing CMS mainly for the community portion, and just integrate comments / log-in meta box into the current design. The question, is, what would be the best way to do that, or should the site really be re-factored into a CMS from scratch? 
Thanks. I'm kind of on the same page, too. Originally, user accounts seemed like an afterthought - something we'd get around to eventually, after the site launched. However, we realized that user content generation will be necessary for our site to grow, and needs minimal user account capabilities.
Iiiiiiif you did end up really wanting to merge your existing site into a CMS, ExpressionEngine makes this really easy with their plugin architecture. But as others say, you probably shouldn't at this stage.
If you'd like, I can write up a quick little something to show you how I would approach this and you can work off it.
At work I use CodeIgniter because I wanted to introduce a framework to a back end that was not really designed in a way that is friendly to some of the "magic" frameworks such as cake. I think I would prefer cake for designing from the ground up however. 
Alrighty. I think I'll take a crack at it anyway just because I've found myself with some free time. If you want the files let me know.
Sounds good! On seconds thought, I'd be happy to have the files when your done, if you're doing it anyways :)
Yeah learning OOP right off is kind of hard. I feel that, learning JAVA taught me OOP more than anything else. OOP is not native to PHP, so using an OOP friendly frame work is smart. But at the same time OOP is not hard to grasp. Use obscenely long names and then it's like you don't have to use comments. OOP is really coder friendly once you get the practice down. 
I agree, in that, all my best learning comes because I have a purpose behind it. You can't learn photoshop by using it aimlessly, and you can't learn to code aimlessly either
Zend_Acl
I would recommend doing the following: 1. Get your hands on "[Head First Design Patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_1?ie=UTF8&amp;qid=1340677419&amp;sr=8-1&amp;keywords=head+first+design+patterns)". 2. After reading each chapter stop and write a PHP version of the design pattern it covered. 3. Read Laravel's [best practices](http://laravel.com/docs/models#best-practices).
I worked off of your code as much as possible, while also cleaning it up a bit. I was attempting to get you as close as possible to a working version of what you have now while not just spoon feeding you everything. There are still some major "errors" with this code, but this should give you a nice starting point. Good luck! [index.php](http://pastebin.com/1wQGTQAe) [DONTLOOKATME.php](http://pastebin.com/BbAt6qjH) [add_comment.php](http://pastebin.com/1ZMtArfq) [db.php](http://pastebin.com/RK0zwzrF)
I've been enjoying FuelPHP.
Check out my comment from a similar question: http://www.reddit.com/r/PHP/comments/ud5te/i_could_use_a_mentor/c4uk4dr
I don't really know if learning oo will be better but I'm hoping it would speed things along and also let me branch into something different. I'm really wanting to learn frameworks, but my thinking was I need to understand OOP to understand frameworks. Am I wrong?
I think rolling your own code, is the most popular choice.
Fantastic! do you know how to display the time when you submit, as well?
im pretty familiar w/ zf1. how much different is zf1 and zf2? is it vastly different that i can't just pick up and start coding or is it the same structure essentially (eg front controller plugin, same dispatch flow, bootstrap etc)?
[This](http://www.amazon.com/Zend-Framework-1-8-Application-Development/dp/1847194222/ref=sr_1_1?ie=UTF8&amp;qid=1340683822&amp;sr=8-1&amp;keywords=zend+1.8) is a fantastic Zend book. Not only does it teach you the basics of Zend and MVC, but it takes you much farther than that and talks about how to structure your domain layer, and how to create a flexible yet robust way to interact with various resources. It really helped me understand the decorator pattern during the section on Zend Forms, and even talks about how to create some custom validators that I still use today. It is by far the best book I have purchased in terms of web development. I had a question about something related to how the author (Keith Pope) did something, email him about it, and received a very nice response. Excellent book, better author. No he doesn't pay me.
You can set the `time()` function to a variable, then return it. Or you can return an entire div with all the information you want in it, then change the `.append(comment)` to `.append(data)`. So something like this in add_comment.php: `echo true;` becomes `echo "&lt;div class='each_comment'&gt;&lt;small&gt;&lt;em&gt;$time_variable&lt;/em&gt; &lt;/small&gt;&lt;br /&gt;$comment&lt;/div&gt;";` Then in index.php change `.append(comment)` to `.append(data)`.
What do you mean by "not true OO"?
Wow. This is fantastic. Thank you so much! Now I'll just figure out how to clear the text box on submit! Again, thank you. You can check it out at bossexclusive.com/twitter/commenttest. 
Not sure about it's popularity but I've been hearing good things about Laravel. 
You seem to be the only one who saw the word *popular* in the title.
If you want to start object oriented programming, there are two very important things you should do: 1. **Don't** use a framework. Most "object oriented" frameworks are rather low quality. In your question you mentioned CodeIgniter, which is usually an example of a *particularly* bad framework. Instead start with a clean slate. 2. Most people who start with object oriented programming quickly drift up into something usually referred to as "class oriented programming". COP is basically procedural programming, but using classes. It has nothing to do with object orientation. To protect yourself from that you should use a strict no-static policy while learning. No static methods, no static variables. This will save you from a lot of relearning later on. Also you should become familiar with the concept of *dependency injection* early on. (But be careful, dependency injection an dependency injection *containers* are a different thing. Don't start with a dependency injection container. You can use one later on, but don't start with it, otherwise you'll fail.)
Good point. I'll have to check that out
Basically, you either use a framework, write one yourself, or have spagetti code. Pick one.
You're basically using a framework of your own design. The omission I see is that your business logic appears to be in pure JS which is putting far too much weight on the client side. One JS error or bug destroys the entire page, and it makes for a slow initial load. Twitter learned this the hard way when they went pure JS front end, and are now in the process of going back to having a server-rendered first load instead. I assume you have validation in your models to prevent people saving things incorrectly in the case the JS validation fails (or someone tampers with it on the client side) as well? If you want to know what typical frameworks offer that your system doesn't, try one out. They're popular because they're useful. There are so many because one size does not fit all. 
too bad they already are. oops.
&gt;The omission I see is that your business logic appears to be in pure JS which is putting far too much weight on the client side. One JS error or bug destroys the entire page, and it makes for a slow initial load. I've been in both camps. Pure JS has it's disadvantages, but the ones Twitter faced hasn't been an issue for any of my projects. I prefer to avoid generating HTML in PHP but I'm not opposed to it if the situation calls for it. Using JS makes the state of my application easier to predict and gives me direct access to elements when I create them instead of having to traverse the dom to get to them (using document.getElementByID or equivilant). &gt;I assume you have validation in your models to prevent people saving things incorrectly in the case the JS validation fails (or someone tampers with it on the client side) as well? Of course. I never trust what the client sends me. I omitted it from my description for clarity. &gt;If you want to know what typical frameworks offer that your system doesn't, try one out. They're popular because they're useful. There are so many because one size does not fit all. I suppose I can't go wrong there. I already have a much better idea thanks to you and the others who have responded.
It's pretty different. They've changed some of the fundamental concepts in the framework, as far as I can tell.. I'll be honest I haven't had a chance to review it in detail (I maintain several projects that are ZF 1.x so that's where my time has to be spent), but from my initial reading, it seems pretty different. They are relying heavily on Dependency Injection now, and they've moved to an EventManager model (which is great because I, and many others, had to build our own in 1.x).. Rob Allen has a nice tutorial to play around with the beta: http://akrabat.com/zend-framework-2-tutorial/ 
Frameworks are popular because they provide a consistent way to tackle common problems. Most frameworks are geared towards websites and include (among other things) database abstraction, html generation and templating, and HTTP helper functionality. It sounds more like you're making an API and don't necessarily want all of that. So, ok.
Many frameworks do have built in error and session handlers that are robust and easy to scale - for instance, switching from file to database to memcache can be a config setting with no code change. Caching, utilities, security features, input sanitation, form validation, etc. Frameworks in my mind take care of all the code I don't want to write in a more functional fashion than the code I would write to handle that stuff. The combination of the fact that I don't want to write utility code and the fact that I don't have as much time as the framework builders means the framework utility code I generally way better. Plus, for the low low price of the learning curve, you get to focus on only the app logic. In any event, I hope this comes across as helpful and not preachy. 
Funny, I just started modifying an HTML site to use some PHP and was wondering why no errors would come up. Can I just upload my own PHP.ini file to the root folder? For now I modified .HTACCESS with the commands above and introduced an error in the code and voila...I see a user friendly error message again.
As a dude who has used both, I highly recommend Yii for anyone who likes PRADO. It is written by the same guy, and it is much mo flexible. 
Thanks my friend, I sent you a message.
Because why write stuff time and time again that has already been written by many others and probably better/by more experienced people? &gt; /javascript - The controllers. JavaScript can either invoke a method inside of a model or load a view. I use my JS to build anything dynamic on the page instead of using PHP templating. For example, If I need to load a list of users, I'll use JS to call $user-&gt;get_users() (which returns data, not HTML), then iterate through my user array in JS and build the users table. How does this work for SEO/lack of JavaScript? 
The are several huge advantages to using frameworks: * If you are working in a team environment, abstraction is vital. This means business code (code which governs your application and processes your raw data) should be separated from your database code (what if you need to switch database systems? what if you need to implement caching in between?). The abstraction can go many layers deep, such as abstracting different modules from each other so different developers can work in unison. * If you are working on software which might someday be managed by someone else, it's important that your code is organized and clear. * DRY: Don't Repeat Yourself. Frameworks encourage the use of reusable modules and services within your application. * As said many many times, why reinvent the wheel? The people who write frameworks know security, they know databases, they know performance. "Not Invented Here" syndrome is so popular in the web development world, and I'm not sure why. Frameworks like Symfony2 are widely used and backed by a corporate entity. They are packed with tons of features and are very secure and fast. AND they are open source. In your case, you are using a form of a framework. The questions I would like to ask in your case is, what happens when you need to start reusing code in your controllers? What if a client needs a different database system supported, or they need an external datasource (REST API or something) added? What happens if they want to add a mobile layer to their site? You need to ask yourself, can these things be EASILY and SIMPLY done in a way that the code is still understandable? With most frameworks these days, the answer would be yes. In your case, it would be difficult deciding where to place the code which governs these behaviors. To be fair, I will list the disadvantages. Learning a framework can be like learning a new programming language. You need to learn a new set of standards and the usage of the classes and configurations of the new framework. The power is that once you learn the framework, it's incredible easy and fast to add new functionality. In most cases, you won't end up biting yourself in the ass and having to rewrite huge blocks of code to implement new functionality.
One of the big draws to frameworks is that you're not wasting time writing boring things, when you could be working on fun stuff. Account management? Boring. Session management? Boring. Most frameworks take care of all of this. There are two kinds of "frameworks" out there. There's a complete built by someone else, IE. Codeigniter, CakePHP, Symphony2 etc. and then there are components that you put together to form a framework that YOU personally use.
The frequency at which this occurs really frightens me. Especially when it happens to seemingly tech-savvy websites.
wOOP wOOP! That thar looks like some MVC coding style. Nice!
PyroCMS looks promising, but I'm not sure if I can add the site we have so far into it. Whether or not I can import what progress we have in, I'll give Pyro a shot for the next project.
Haven't been to Tuts+ in quite a while, mainly due to developing a few very bad habits while reading their tutorials in my earlier years. Back to the topic at hand though, seriously? Plain text? Surely when you're storing any user's passwords the VERY first thing you think of is how to encrypt them.
That it too is filed with misinformation and bad practices. And that you should never go to it ( or send other there), when tyou need to learn something.
W3schools is meant to start off users in a extremely basic way. Think of it as web-building 101, where as web-security would be a 400 level class. Although it doesn't really cover security, it is still a valuable resource for learning the bare basics of quite a few languages.
This is true, you can check [http://w3fools.com/](http://w3fools.com/) to see some errors w3schools has.
You'd think so, right? I love how they admit to having "a plan currently in progress to upgrade away from the current plugin". Like that's not a mission-critical for any site - and on top of it, they've been operating for years like this. Not many excuses to be found.
All the normal reasons I'd give have been covered below, so let me give you one incredibly obtuse example, which should sell you entirely on frameworks even if you ignore every other reason. Did you know, when you upload some badly formatted PDF files in PHP, using older versions of FireFox, the MIME-Type sometimes gets wrapped in "" marks, so instead of application/pdf you see \"application\/pdf\". This will tell you that a PDF is not a PDF. Well I didn't know that, never met any PHP developer who does. I've only seen it happen on one-file (UK TV License certificate), in one browser, on one server. If you don't know that it doesn't matter, as thanks to me debugging the crazy-ass solution for almost a day CodeIgniter will now deal with this for you. Why spend ages dealing with low level crap when you can crowd-source the whole thing? Hive brain over lone programmer every time.
What frightens me more is the amount of times these sites might have been hacked without the hackers going public, or the server admins not discovering the breach...
I know nothing of this particular software, but generally, if it's PHP, then it shouldn't be consuming any resources unless you request a page from it. Well, I guess it could have some background tasks, but still, those should be minimal. As such, there's nothing to "shut down". I recommend that you monitor the resource usage and determine exactly where that 230mb is going. Using a simply tool like the CLI `top` command should be sufficient for preliminary work.
Thats not "not OOP", it is perfectly valid OOP it just assigns a single instance to a globally accessible property. It's weird, especially today in PHP 5.x days, but it IS OOP.
I'm going to assume that you are running this on the same machine that you are testing it from. It appears that $_SERVER['REMOTE_ADDR'] is returning the IPv6 address ::1 which is the equivalent of the IPv4 address 127.0.0.1 ip2long() expects the address to be in IPv4 format and will return FALSE when given the IPv6 address. This results in an integer cast 0 of the boolean value FALSE.
Then Yii is the framework for you!
I actually don't mind. But! I'm pretty sure you can actually do exactly that, I just can't remember how :/ Ask around or look at the Cake docs and they'll tell you :)
So where should people go to learn? I have been doing a quite a few of their tuts and im really sad to read this.
I almost bought Premium access a few weeks ago. Good thing my wallet forced me not to.
I just read through that article, is their method of hashing passwords the way to go these days?: /** Or you may use an algorithm that supports a "cost parameter," such as BLOWFISH. */ In PHP, this can be done using the crypt() function. function myhash($password, $unique_salt) { // the salt for blowfish should be 22 characters long return crypt($password, '$2a$10$'.$unique_salt); } 
I alerted them to the fact that their passwords are in plaintext A YEAR AGO. I received a reply email stating the software they use for Premium was poorly coded and they were going to try to hack on better security since they couldn't rebuild it from scratch. A YEAR AGO. June 29, 2011 is when I got a response email. 
It is a tech-related website. They talk about this kind of thing. You would think if they can write the content to fuel their articles that they could do something as simple as hash a password.
&gt; Haven't been to Tuts+ in quite a while, mainly due to developing a few very bad habits while reading their tutorials in my earlier years. Damnit! I found the site recently (a month or two ago) and subscribed to (one of) their RSS feed because it looked interesting and was teaching me subjected I wouldn't have otherwise come across. Any suggestions for anything similar that's better on the "Good Coding Practices" front?
I would like to know this also. 
Exactly, it's not like they haven't had time to deal with it. They were probably living in hope that nobody unearthed this huge flaw.
They used a third party plugin that stored passwords in plain text. People wonder why I write all my own code. I point at this. 
Thanks, I will try that.
Speaking from my own experience, it did do more good for me than harm. It does give very good tutorials and projects that allow you to learn while coding. If you want to learn better coding practices, I'd advise you to start reading well-recommended books related to the language you're learning. Then again, I'm still a CS student (albeit in my final year) so there's people a lot more qualified than me to advise you. Learn whatever way is easiest for you.
&gt;the membership software we use for Tuts+ Premium, which isn't extremely well coded Understated much? I've written many things that aren't extremely well coded, but I've never done worse than salting and hashing passwords.
This is dependency injection: class MyObject { protected $whatever; //... public function setWhatever(IWhatever $whatever) { $this-&gt;whatever = $whatever; } public function execute() { $this-&gt;whatever-&gt;doSomething(); } //... } interface IWhatever { public function doSomething(); } class Whatever implements IWhatever { //... public function doSomething() { //... } //.. } $obj = new MyObject; $we = new Whatever; $obj-&gt;setWhatever($we); $obj-&gt;execute(); &gt;And also, what is a good mechanism for keeping track of all the db objects I've created across different classes? Sounds like you've missed the point. You shouldn't be creating composites. 
When in doubt, echo out your variables to see if those are right in the first place.
&gt; "class oriented programming". I thought I was the only one seeing this trend. Kohana, FuelPHP, and Laravel reek of this, yet they are the most popular.
+1 KeePass. I've been using KeePass on all websites with passwords now. Random password for every website. **Except** the ones that limit the dang password.
Scary part is that they could have been compromised before this and not even known about it :/ 
What do you enjoy about it?
Truth. And even at that, you're still pretty safe with a 12-character alphanumeric, I think the biggest factors are that it's unique, and that it can't be easily remembered. Tell you what sucks though: Google only allows 18 characters max for passwords - but they'll let you submit more characters, and it just truncates without throwing a warning/error - how's that for *FUCKING AWESOME* when you go to log in the next time? (This was the case about a year ago IIRC, they might've fixed that)
Apache spawns multiple children to handle incoming requests; this is normal operation. You also want MySQL to use as much memory as it can without interfering with anything else -- free memory is wasted memory. If you actually have performance issues, then be concerned. If not, then most likely things are working normally.
&gt;Knowledge of cake won't tell you anything about your table structure. cake schema generate ...and done.
Gotcha, yeah either they must've tweaked that a bit, or possibly I'm not recalling correctly / thinking of a different site... Pretty sure it was Googs though, I just remember trying shorter &amp; shorter versions of my password, chopping off the last character each time, until it worked. That was when I started switching to the 12-char, was NOT gonna let that kinda stupid shit happen again.
Not all php frameworks are built with OO php. I would definitely suggest learning it for the sake of diversity. Hell, if you're good with structuring code you'll love OO. The idea is to reduce repetition by overriding and/or extending functions to suit the needs of a particular event or page load.
But that AGAIN requires you to leave your source code. I'm not saying there aren't ways to find out the damn information, I'm just saying it's retardedly stupid to NOT have it right there in the source code so you can focus on your programming and not on looking up shit.
It is in the sourcecode, you can just look at your models? 
A model is a separate file and it takes you out of your flow. Are you seriously arguing that it's not beneficial to know what data you're working with without having to go look elsewhere when you could just know immediately?
From a few years of trying to learn from various blogs the conclusion I've come to is you've just got to look at everything you can within reason and develop that very clear, basic understand of what you're doing. Such that you understand what potential conflicts doing it X way might have without having to be pointed out. Reason yourself into your set of best practices so that you are in the right state of mind to have the knowledge challenge and moved on to change/update it with more understanding. I think this kind of advice would also teach you to spot band wagons and to as "why do that?" when everyone else in the room is "OMG!" Its hard to measure yourself as a programmer, well your progress at least. I think you've made another step when you can find yourself disagreeing with tutorials you find. Or spotting thing like "ok yes X way is cool but it will stop me from doing Y as easily, does that bother me?"
Yes. Most of the articles contain serious mistakes. Take for example both articles about MVC and PDO. All of them are filled with mistakes, misconceptions and bad practices.
&gt;I suspect he got an email like "welcome to XYZ, your account is USERNAME and log in with PASSWORD" No this is not a giveaway. I do this on a few sites where we don't store bank account or credit card information etc.. it's as simple as firing off the email as soon as the user registers, using the password they input for the email. Then hash the password, store the hash and don't keep a copy of it in plain text.
One of the main benefits of having your IPs stored as integers is that they are easier to select ranges from. Integers index far easier and more efficiently than strings.
JS is a client-side language and PHP is a server-side language. The two can't inherently be merged in the way you're thinking. You can write something in JS that makes a call through AJAX to a PHP file, but that's not the same thing as merging them. Give us a little more context on why you want to "merge" them or what your intended use is and we can help further.
Email is not a safe form of communication. Couple that with the fact that practically no one deletes email there's a pretty big vulnerability. Someone loses their email account they lose every account they ever registered with you. 
Encryption for passwords is as bad as just keeping them in plaintext. Netsec dictates that you operate on the assumption that *everything* is out in the open, including your application data. Figuring out a decryption is trivial. Password storage should never happen in a two way crypto system. 
Well what I was thinking is for a register form, to do the same as yahoo (where it tells you if the username is taken without having to submit the form) I already have the verification code in PHP, and that's why I was wondering if there was a way to set up a JS script that calls a PHP file/method on keyup.
Yeah, wouldn't there be absolutely no content on the page is JS is turned off?
Yup what you're looking for is AJAX. While you're at it look into jQuery as it's very simple to do AJAX calls through it.
I said 'want to punch a monitor', not 'punch a monitor'!
It indeed seems like a great way to implement this. However I couldn't figure out how to make a "default" vhost. For example, if the user enters a subdomain that doesn't exist (qwerty123.site.com?), how can I redirect him to the default domain?
I have a box right now that isn't connecting between php5 and mysql. So far it looks like I'm missing some configuration files somewhere. I'm thinking about just starting a kubuntu server in it's place rather than search for the correct file I need. I think I just had a problem on install with php5 or mysql. Otherwise, it could be your code somewhere, so post that.
Unnecessary comments all over the place.
I spiced up my mix with keepass by using a password and a keyfile, the keyfile is on a tiny usb-memory stick on my keychain, contains nothing else. Keeps me from using the keepass mobile app though, as i'm not about to have the keyfile on the same device as the database. Makes me feel a wee bit safer though when I log out.
THAT makes you want to punch a monitor? That's nothing. Lame? Sure. But we've all had legacy projects that were 20,000 lines of code and 2 lines of docs. Doesn't get much more tiring than walking a whole project that didn't know the term "separation of concerns".
Better than most of the alternatives?
Good correction, thanks for citing the .c code as well.
Or at least something that's open source so you can see for yourself
There's also a concept called stretching... basically, you recursively rehash the result of a previous hash a bunch of times.
The problem is that MD5 is so cheap on the CPU that rainbow tables are really easy to create. There already exist gigantic tables that covers up to quite a few characters. So yeah with a strong password you'd be okay safe (so long as not in dictionary) but 90% of passwords would be broken in no time. To elaborate on this. The algorithm to reverse engineer MD5 and thus get a guaranteed hash is computationally expensive, but the MD5 algorithm itself is really lightweight and as such it's very weak to rainbow tables. Now in theory this only gives you a hash collision. The nature of hashing means that you cannot guarantee this to be the true password. In practice the length of 90% of passwords combined with the somewhat rarity of collisions means that you're more likely to get the actual password than a collision. With all this combined I stand by my statement that you're only marginally better off with MD5 than with just plaintext passwords. The trouble posed to a hacker is so small with MD5. 
Just read books/ebooks.
The above example is already doing that - it's built into the algorithm. See the `$10$` part? That tells bcrypt to compute 2^10 (ie, 1024) rounds. That means repeat the process 1024 times. If you used `$12$`, that means compute 2^12 (4096) rounds. It isn't usually possible to run it with less than 2^5 rounds. Since the number of rounds is built into the salt, you can increase the number of rounds for future passwords really easily without any impact on existing passwords. Edit: I'm really sorry you're somehow getting downvotes, there is nothing wrong with what you wrote.
&gt; Someone loses their email account they lose every account they ever registered with you. Not defending sending passwords in emails, but if someone loses control of their email account, they're screwed either way since a majority of resets just send an email with a reset link or temp password. 
&gt; And also, what is a good mechanism for keeping track of all the db objects I've created across different classes? Why are you creating so many DB objects? &gt; Instead of using a singleton which limits me to one connection Why do you need more than one connection? Normally you just need a single DB connection for the entire request. For dependency injection I normally have all my models accept a database connection in their constructor as a parameter with a null default value. If null is passed, I get the connection from a singleton. 
That was exactly my point, just in case you didn't catch that.
js should honestly be reserved for GUI shit and stuff like cookies just used for temp storage of user preferences. we should encourage an open frontend but not abuse it. otherwise we end up with a majority of the target audience behind script and cookie blockers. then we gotta tune our apps on the spot to redirect their fucking dumbasses like i didnt have anything better to do.
What's wrong with jquery?
**Design should not be hardcoded.** I honestly feel css (and in most cases JS) should be precompiled and cached for each page load. This is a fundamental quarrel i have with web development, something i think about a lot and would love to work with other developers on.
 // get the param from the request $param = $_REQUEST['param']; // check that param is non-empty if( !empty( $param ) ) { // escape it $param = mysql_real_escape_string($param); // put it in the database mysql_query("INSERT INTO myTable (param) VALUES ('$param')"); }
Wow, that is lawsuit material right there.
When it comes to zend, there are better 3rd party docs and tuts but yeah man seriously, fuck books. Being good at anything in life takes trial and error. "Learning to code" from a book is like reading a playboy to learn how to please a woman. Some things take trial and error, and the best trials come with the most embarrassing errors. And mistakes. And infinite loops.
Not sure what language you're working on learning, but there's good books out there for a lot of things. I just recently picked up a great book on the cheap from ebay. PHP Objects, Patterns and Practices. I read through it over the course of a week, and learned quite a bit more than I expected.
In that whole book, I only skipped 2 sections. 1. The very brief section early on when they talk about multi-threading. 2. The somewhat lengthy span of pages in the Proxy pattern chapter discussing the Remote Proxy pattern and Java's RMI (Remote Method Invocation). However, after finishing the Proxy chapter I immediately wrote [this](https://codetique.com/A33VY1Db) for fun, using what I learned. After finishing the Iterator/Aggregate chapter, I then started to read up on [Spl](http://www.phpro.org/tutorials/Introduction-to-SPL.html) and it felt like great spotlights were turned on. I recommend this book if you think you'll ever need to.. * Write a useful class, then later create a decorator for it instead of subclassing. * Refactor a class with tons of conditionals to use the state pattern instead. * Create a facade that provides a simple interface to a complicated subsystem you wrote. * Use a mediator for your controller and decouple complex communication between classes in your business logic layer. The list goes on... **TLDR** OOP concepts are very usable in PHP. Learn about design patterns, their strengths and weaknesses, their intent, and their common applications.
I put jquery on almost every build and 9 times out of 10 its because of that ajax function. is so damn convenient. 
The same stuff that hurts me in projects written in another language.
thats pretty creepy. i like it but im not touching it.
Neat! Will try!
Looks good, but I don't know how to implement it because I'm so tired. I'll get back tomorrow!
People who think classes are function holders. Unfortunately this is a lot of people. You instantiate them for a reason.
IMO, you'll enjoy PDO a lot more than MySQLi. I have used both and enjoy PDO more, especially for the ability to have "named" parameters. So, for say the `user_count()`: function user_count( $db, $status = 1 ) { $stmt = $db-&gt;prepare( "SELECT COUNT( `user_id` ) AS `TotalUsers` FROM `users` WHERE `active` = :status" ); $stmt-&gt;bindParam( ":status", $status, PDO::PARAM_INT ); $stmt-&gt;execute(); if( $stmt-&gt;rowCount() &gt; 0 ) { $result = $sth-&gt;fetch( PDO::FETCH_OBJ ); return $result-&gt;TotalUsers; } else { return 0; } } // user_count I also added in there so you could get a count of users with different `active` values other than `1`. **EDIT** A few minor corrections.
The running server needs the encryption keys to check entered passwords and encrypt new ones. There's no way around that with two-way encryption for passwords. The only thing encrypting passwords can protect against is the compromise of a backup that specifically excludes the key - in which case, you may as well encrypt the entire backup.
Books, or reputable e-books are a much better resource. There's (generally) a reason they get published.
Reinventing the wheel... Currently working on a system that is written from scratch including things like template engine, http client abstraction implemented from java specs (WTF!!), email generation, smtp client, openid library, database abstraction... Everything written from scratch.. badly.
This can be helpful : http://code.google.com/p/mysql2i/
Well, because IPv6.
Then it just becomes a matter of the compromise of the password server or the use of the compromised frontend web server to enumerate the passwords of the backend server. It's an obstacle, sure, but two-way encryption is still a _really bad idea_ for passwords. It's better than plaintext (and I recognise that sometimes you need plaintext) but not by as much as some people seem to think.
-1 expressed as an unsigned integer is usually "all the bits set". That is not just PHP - it is pretty fundamental thing to understand in many languages. This case works *only* because there is some kind of signed-to-unsigned conversion taking place, so don't rely on it always working. One day, -1 may simply be invalid.
People with right-but-forgetful minds do.
E_ALL does not always expand with the error levels. Some previous versions of PHP (mainly 4.x) have needed E_ALL to be combined with additional error levels to catch everything.
Why is the binary representation of -1 11111111111111111111111111111111? And why doesn't it work the other way around? var_dump( bindec(11111111111111111111111111111111) ); int(32767)
&gt;Why is the binary representation of -1 11111111111111111111111111111111? Because php uses [2's complement](http://en.wikipedia.org/wiki/Two's_complement) binary &gt;And why doesn't it work the other way around? 1. You are using it wrong. bindec expects string as the parameter 1. bindec doesn't support negative numbers. this is done so you could use bindec('111') instead of bindec('00000000000000000000000000000111')
Indeed using "bitwise not" is much cleaner and more logical approach. Lets vote you to the top. 
It's a toss up between people using "or die()" for error handling, and people that still mix PHP with HTML.
Some things vaguely irritate me like: if(empty($array)) when the author is trying to if(!count($array)) or really any of the other misuses of empty() (by my estimations 1 in 3 PHP devs don't know what empty does). But that's just annoying. The only really rage inducing thing is encounter regularly is just when people fundamentally don't understand OO design but still try and use classes for things. Trying to debug a 500 line static method with numerous global dependencies that only works in production environment is really a nightmare. I've written some of the most insane PHP just trying to insulate my code from bad components that are integral to a system (façades, adapters, bridges, and just straight hacks to get a system into a specific state because the original author didn't think some common task would ever need to happen outside of their original feature). These sorts of things are the worst because they are horrible wastes of time AND you're fully aware the whole time that you're actually making things worse in the long run because now any future author has to understand both the original cluster-fuck and the additional cluster-fuck implemented to deal with the first, or worse the next author won't even see your stuff and write their own cluster-fuck to deal with the first. 
See those Apache child processes? A lot of that memory is shared between the child and the parent. Notice how if you add it all up, you get way higher memory usage than 230MB? Okay. There's alot of optimization you can do to lower your memory footprint- here's some of the low hanging fruit. * Decrease the size of your MySQL innodb buffer pool and MyISAM Key space. (Note: this is going to free up memory at the cost of MySQL performance once your have more data than MySQL can fit into memory) * Ditch apache, it's a memory hog. Use nginx+php-fpm, it'll use 15-20MB memory max, plus another 15-20MB for each PHP-FPM child * Get rid of named, you most likely don't need it running locally unless you have your own name servers. Use nscd for a local DNS cache. * You can shutoff kloxo by killing this process- `/usr/local/lxlabs/ext/php/php /usr/local/lxlabs/kloxo/sbin/kloxo.php master`, but it might have a cron to restart itself if it's not running
Anyone know what plugin exactly?
Little bits like this are why I frequent reddit. BrowserID looks awesome. Thanks!
I'm assuming you mean a web dev using Lamp as a development environment and not an actual LAMP developer i.e. a developer working on the LAMP software stack. I'm not a dedicated PHP dev, but from time to time I use it in my travels as a contractor; using LAMP I've put together several CMS implementations (as a web dev guy) as well as installed and configured it on behalf of design guys who don't concern themsevles with the techie stuff. LAMP requires a few different skill sets e.g. sys admin, DBA and web dev, so you can either solely focus on one particular skill or all be an all rounder and master them all. It's really up to you in which direction you want to take i guess.
I've worked for both a start-up sized business (around 6 devs) and a large corporation (currently the developer for a magazine website that handles ~6.5 million page views a month, working in a company with &gt; 3000 people in it). And they're surprisingly similar, despite the enormous gap in terms of traffic / target audience. **Differences first:** For the start-up, I spent most of my day on new builds. We'd have a client brief us on a project, we'd cost it, schedule it, and build it. Throughout the build phase, our days were pretty much solid dev, working from the server, up through the db and app code to frontend JS. In a small company, you do everything, from sysadmin to design. In the corporate env, I'm working on an established product, so my day is more structured. We're Agile, so every morning is spent at a stand-up meeting with the brand I work for, answering emails from the previous night, migrating data across from the live platform down to qa and dev if needed. Then it's working on the tasks (cards) assigned to me that day, handing off work to the design team, putting in requests to sysadmin for db changes. My code-work is much more limited, app code, db schema and frontend js only really. No design or server level stuff, there's other people for that. A whole lot more time is spent in meetings too! **Similarities:** Spending waaay too much time on the phone. In smaller companies, as a dev, you'll chat directly to clients. Clients are needy. Very needy. In enterprise, you'll be answering questions from product owners, designers, marketing, ads, senior devs, junior devs. They're all pretty needy too. Task switching. A lot of your day in both environments is spent swapping between tasks. Helps to get good at it as early as possible (and if you figure this out, please tell me how ;)) --- In terms of pure code, it's what you'd expect. Writing controllers, models etc. Laying out example HTML in Views for the design teams. Bug-fixing. Swearing at IE. Swearing at designers. Clenching butt-cheeks when putting stuff live. If I may pontificate for a moment, I think there's a lot of soft skills around development these days that don't get mentioned much. Certainly everywhere I've worked, we've been expected to form good relationships with the people we work with, as we're almost always their first port of call. So a portion of your day is spent just being nice and friendly to people! It might feel like wasting time, but when you need to tell Jerry that his project has been delayed again, being on good terms with them can ease the process a lot. Anyway, I've rambled a bit. Hopefully something in there answers your question.
I always find it funny when I get mailed about posting for a "LAMP Developer" They just mean a PHP developer who knows mysql on a Linux platform...
&gt;Swearing at IE. ha
With the size of the output of bcrypt, isn't the effect of the increased hash collision chance rather... academic? Let's say (for shits and giggles) you lose 40 bits of effective keyspace... 408 bits isn't any easier on any sort of practical level than 448.
It would have been a proprietary user plugin used to manage premium and non-premium accounts (and possibly payment portals, etc), that wanted to do user details storage its own way, or the high way. And you know by now what its own way was. I've encountered quite a few plugins with the same bent in the past.
Yup, until shit hits the fan and then those dudes melt.
Reddit, Reddit, bit of coding, lunch, reddit, bit of coding, reddit reddit, home.
Mine's pretty similar...
The binary representation of -1 is not a hack, it's a defined and expected behavior. ~0 does achieve the same result, and is just as acceptable.
Thank you! Two questions: * When you say I'm going to suffer a decrease on performance once MySQL has more data than it can fit into memory, you are talking about data in the queries or data that sits in the database? For example if my Database is 3GB in size (its not, it's less than 32MB now, but for the sake of the example) and I make a query in which I use indexes and retrieve at most 80 results, will I still suffer sever performance issues? * In case I use the command to shut down kloxo, what's the command to turn it on again?
Coming from a legend like you, this makes me both laugh and cry (edit: the var_dumping, i mean... i freaking hate having to go to var_dump). On a side note, do you have issues with getting CodeIgniter+XDebug to hit all your breakpoints? (I sure do, fwiw... my only CI project in the wild is slated for retirement/replacement soon, so we haven't been allocated budget towards upgrading it from 1.7.2, wonder if things are different with the latest releases though...)
Good call. Does inet_aton work with IPv6?
Storing passwords in plain text, like a boss. Wait... what? EDIT: 5 upvotes, 4 downvotes. So 80% of /r/php thinks that storing passwords in plain text is a good idea? Yikes...
echo '&lt;pre&gt;'; var_dump($yourMom); exit; Learn it. Love it. It is the single most important line of code I know.
I use XDebug but rarely bother with Breakpoints. Right now for example I'm working over SSHFS for a company in Chicago, later I'll be working on a project in MAMP and if I get around to it I'll be firing up Vagrant for some more client work (fun day). Getting breakpoints working flawlessly everywhere is a bitch, so I use CI/Fuel log with a tail -f or var_dump() for everything. Also, legend is a bit much. I just blogged a lot for a while. :)
Oh, I won't argue that `-1` achieves the same effect on all sane systems. I'm just saying that it is *semantically* wrong. You want an integer where all bits are set. That's what `~0` does. Incidentally `-1` does the same on systems using two's complement. But only incidentally. It's not what it means. `~0` means "all bits set". `-1` means minus one. You can see that it is only incidentally so if you look what happens on a one's complement system: There `-1` would not set the first bit. `-0` would (yes, that's a negative zero). This obviously doesn't have practical impact. I agree with that. I'm just a person who cares about semantics :) Also, if you are really pedantic, then no, this is not "defined behavior" like you claim. The C spec does not prescribe that two's complement has to be used. It explicitly mentions that one's complement and signed magnitude are also allowed. As PHP is written in C, the same applies to PHP too.
Dude, you're a bad-ass in my books, at least. I've messed with several of your github projects, mostly spent time with these though: - https://github.com/philsturgeon/codeigniter-restserver - https://github.com/philsturgeon/codeigniter-dwoo (used in WireDesignz's [HMVC project](https://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc/wiki/Home)) Plus you're all up in the StackOverflow, and more. Can't tell you how many times I run across your blogs, your work, your support. And also you're a redditor. On all counts, you rock! But as for CI with breakpoints - yeah it's kinda hard when not working on a local linux box. I'm definitely a "tail -f" man myself.
&gt;I think there's a lot of soft skills around development these days that don't get mentioned much. Certainly everywhere I've worked, we've been expected to form good relationships with the people we work with, as we're almost always their first port of call. So a portion of your day is spent just being nice and friendly to people! It might feel like wasting time, but when you need to tell Jerry that his project has been delayed again, being on good terms with them can ease the process a lot. This is an excellent point and yet another area in which the contemporary job interview process breaks down. Prospective employers seem to grossly undervalue people skills in developers. 
That is the life of most web devs, not just LAMP stack devs. I must say, it is incredibly accurate. However, being more focused now on the front end rather than middle wear, I'd say I spend a lot more time swearing at IE than I used to.
I've been on phpStorm now for about 8 months, it's greatly improved my productivity. Not only that, I now swear by it after it helped me solve a Sunday bug in like 18 minutes - no way I would've been able to isolate it that quick with breakpoints. As for CI - it's pretty rad. I really want to mess with Fuel &amp; Bonfire, just haven't had any projects that have called for them. I really, really like the way it works though. And I can come back to my one CI project after like 6 months of inactivity, and it's all crystal-clear, it's just... intuitive, I guess inasmuch as any PHP framework can be. And yeah, AHK is the shiznit. I've got a whole bunch of boilerplate crap mapped out to some text-replacement strings, here's a few examples: ::_error_log::error_log('' . '(' . __FILE__ . ')'); ::tempalte::template ; corrects common misspelling ::do.lipsum.long::Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget est mi, et porttitor dui [...] ::do.lipsum.short::Lorem ipsum dolor sit amet ::do.code.jq.iife:: ( (function($, _window, undefined){ // do stuff })(jQuery, window)`; ) return ::do.code.mysql.dump::mysqldump -u USER -p -h localhost DB &gt; FN.dump.sql ::do.code.mysql.import::mysql -u USER -p -h localhost DB &lt; FN.dump.sql 
I think "Filled" with bad practices is a bit of an exaggeration. Sure it may not be "filled with best practices", but a lot of the articles i've read have been interesting, and good as far as "ground floor" tutorials go. Anyone who takes everything said on these tut sites verbatim without any further investigation is an idiot anyways. The fact that people take the time to make these tutorials is worthy of some praise, even if it has flaws. At least it's out there. It is nothing to be afraid of... just use some common sense when following these things. 
&gt; No one really knows what they want, and as a developer your problem solving skills are more valuable to the non-coders than your coding skills. You are so correct
Can you give me some more info on "tail -f"?
:split ftw!
I had a feeling I'd get called out about that word. I was just trying to explain what the guy was saying, not necessarily agreement with what he said. Personally, I haven't used any of their tuts before, so I can't say one way or another whether they are or aren't.
Wow flexboxes sure are cool! Lets try em on IE, hmm it isn't ms-flexbox hmm apparently you have to add more pointless code just to make it work on ie, fuck you.
CTRL+S, CTRL+TAB, CTRL+R
Oh sure! Tail is a *nix program that outputs the end of a file, such as the Apache error.log file. The "-f" option makes it continuously update, as new errors appear. So with that in mind, the command `tail -f /var/log/apache2/error.log` will display the contents of the error log, and every time a new error occurs, it'll show up. Combine that with the PHP error_log() function, and you can do a lot of debugging without having to dump debug output into your rendered content.
As Veonik said, a quick skim through the [language reference](http://www.php.net/manual/en/langref.php) should get you going. Once you've done that, I'd suggest picking a simple project of some sort to implement on the command line to become familiar with and practice the syntax and language functions. I suggest starting with command line because PHP's paradigm is fairly different then even something like Python when running on the web in that it instantiates a new interpreter for every request... which sometimes takes a bit to get used to. Once you've done that, then move to trying a simple web project. Maybe a phone directory or something that involves input/output and database use. From there, simply referencing more specific tutorials for accomplishing tasks or the function reference on php.net should be all you need. 
I'm not LAMP, more like WIMP(Windows IIS MSSQL PHP) only I mostly write PHP. But here goes anyway. I work for a large security company designing the user interface(enterprise manager) for a security product. So I'm probably atypical in that we have a product that releases about once a year and the product isn't deployed on the web, it's deployed in company networks. This is software engineering and not web design. I write a lot of PHP, Javascript and HTML code and I design in Photoshop on occasion. I also manage a small team to get features implemented and sent off to QA(quality assurance) for testing.
&gt;I've pretty much played with everything you can think off to come up with prototypes and pitchable ideas (Kinect, Touch display, GPS, so many APIs I lost count, ...). &gt;Pornhub_dev D: ... :D?
You sir, know full well the truth. Everyone gets a hammer. Now go smash nails!
Apparently they were using a 3rd party plug-in (aMember v3) which handles passwords in plaintext. Not exactly Tuts+ fault entirely, but yeah, that was a really, really shitty thing to have happen. Taking the shortcut with run-of-the-mill plugins is usually a good way to open a slew of security holes. 
I do wonder if people ever consider checking google/stack overflow before posting. 
I've gotta ask, how do you setup php on windows with ms sql? To make a really long story short, windows 7 doesn't support mysql with php, or at least, I couldn't get it to. (or it was something along those lines, this was months ago) I have since been forced to use .NET which I have no clue what I'm doing (although, I do know a lot more now). I'm not a ton better with PHP, but I'd still prefer to use it. So, I've gotta ask, did you set it up? and is it difficult to get functioning correctly? Is it on windows 7? EDIT: I gotta admit, the acronym sucks.
Oh my gods, I'm an idiot. I didn't even think about the server-side versus browser-side. Thanks for the js. I'll try it out!
Thanks for showing me symfony! :)
JSON in one easy step: &lt;?php $output = array('status' =&gt; 1, 'username_available' = true); echo json_encode($output); that will output a string like this: `{"status":1,"username_available":true}` that string is JSON. Then in Javascript, you can use it like this: alert(output.status); // 1 alert(output.username_available) // true It's basically an easy way to send an object back to Javascript which you can work with right away, rather than parsing it.
&gt; Then it just becomes a matter of the compromise of the password server or the use of the compromised frontend web server to enumerate the passwords of the backend server. That's the point. It's more difficult, even if everything is given to you. &gt; or the use of the compromised frontend web server Typically machine to machine contact has a separate authentication system. Even if the same credentials are used (because the systems are identical, say an ssh tunnel), it's another step and can be stronger than simply storing the keys and data on a single machine. I've worked many places where intra server communication is packet filtered on source address. I didn't say this was a good idea, I was responding to: &gt; The running server needs the encryption keys to check entered passwords and encrypt new ones. There's no way around that with two-way encryption for passwords. This is simply not true. Depending on what you want to know (valid user, valid user password combination, valid encryption key, etc), you do not the running server to have the resources. 
I figured it out, I ended up using Steve Marks library for Code Igniter. Ripped the Code Igniter specific functionality out of it and adapted it for F3 (Fat Free Framework) and it works like a charm. http://biostall.com/codeigniter-google-maps-v3-api-library
Our stack is a wee bit more complicated than a typical lamp stack (we also use such technologies as replicated databases, Memcache, Gearman, Sphinx, load balancers, proxies, other languages, etc). I work in a small team of about 8 other developers. An average day goes something like this: * Get into the office around 9am (or log onto chat around that time if I'm working from home). * Get caught up on email, error reports from the previous evening. Read blog entries as well (mostly ones related to work). If the errors are serious, write priority tickets about them. * Start writing code! At our company, the process goes something like this: while($stuff_to_do) { * Break a task down into tickets that can be easily worked on. * Write code! * When you have something that works in your dev environment (which as closely mirrors our production environment as possible on a single machine), you commit to your branch. * When you're ready roll, roll up all your branch commits and commit to trunk. * Check out your trunk commit on staging (which also closely mirrors our production environment - think of it as a "last chance" test environment). If it works, merge to production. * Roll the change to our production servers and double-check your change on the live site. } * At some point in there, you'll break for lunch. ~1 hour is typical, but we're not a clock-watching company. Some days it's 15 minutes, some days it's 2 hours. Some days I eat at my desk, other days we go out. * After lunch, you go back into the while loop. * About 90% of what I do is new work or adding new features. Very little is actually fixing "broken code" but I work with good developers. * Usually leave the office somewhere around 5pm. Later that night, I may code some more if I'm bored, but "off the clock" work isn't expected.
For good server side software yes, but anything that the end-user needs to see.... End users don't like verbose outputs
You are in the playground and you have two rows of kids in front of you. Row A and Row B. Every kid has a shirt on with a color on it. There are some kids in Row A and Row B that have the same color shirt, but some colors are unique to individual Kids. You tell the kids from Row A to do an** INNER JOIN** on the kids from Row B. The kids in Row The kids with matching colored shirts would meet in the middle. The kids in Row A and Row B that do not have matching shirts would not be in resulting group of kids. Now you tell the kids from Row A to do a **LEFT JOIN** on the kids from Row B. The kids from Row A would walk over to Row B and grab the kids with that have the same color shirt as them. The rest of the Kids from Row A would join them. The remaining kids from Row B would not. Now you tell them to do a **RIGHT JOIN** on the kids from Row B. The kids from Row B would walk over to Row A and grab the kids with that have the same color shirt as them. The rest of the Kids from Row B would join them. The remaining kids from Row A would not.
So if you run a bank and store people's money in a cardboard box instead of a safe it is somehow partially the cardboard box's fault? It is entirely their fault for chosing that particular product knowing it had that flaw
[This might be helpful](http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html).
this is how i taught myself.
Log all uncaught exceptions, including error pages such as 404 when they occur. The storage medium doesn't really matter as long as it works and you can read from it and group it by the number of occurrences (which would probably be easier with a database). That way you can apply the pareto principle when dealing with the issues. Microsoft did a study on their [WER reports and found that fixing 20 percent of the top-reported bugs could solve 80 percent of customer issues](http://msdn.microsoft.com/en-us/windows/hardware/gg487440.aspx). Additionally, only addressing 1 percent would solve 50 percent of the issues. Why not log the exception and create a ticket in an issue tracker automatically, so you can easily keep track of which issues are still a problem and which are solved? 
Wait is this r/PHP or r/SQL? 
[Post-Redirect-Get](http://en.wikipedia.org/wiki/Post/Redirect/Get) and [flash messaging](http://www.google.com/search?q=flash+message+php) is the answer. 
Power Dump wins: http://philsturgeon.co.uk/blog/2010/09/power-dump-php-applications
Thanks!
Protip: 99.9% of the time, you're gonna be doing a left join. Because almost always, you'll have an object, and you want to find out more information about *the object you already have*.
That's a Router pattern. Generally speaking, you're going to want to be using an MVC pattern for most any decent sized application, which usually has a Router builtin to it. You should have a look at some of the major frameworks (CodeIgniter, Symfony, etc) and use one of those if at all possible, which does this work for you.
&gt;You didn't read the qualifier, did you? *With* your qualifier, you're doing multiple reads on each call, which is even worse. Seriously, unless you have a single, stand-alone database handling this stuff and optimized for performance, it's just not a pragmatic solution for the *average user*. I'm not saying it doesn't have its time or place, but the OP was clearly looking for a general, best practice - and a database is *not* that. So stop with the aggro, and being disingenuous. For his purposes, a textfile + graylog and a simple log rotation will probably work fine. And if it *won't*, he probably shouldn't be asking on *reddit* in the first place - he should hire a sysadmin to do that stuff.
Wordpress currently uses this technique. MySpace used to do this too, they were using Coldfusion with the Fusebox library, though. But please take Nicoon's advice, otherwise you could open yourself up to vulnerabilities pretty easily.
Your boss or technical lead chooses which technologies to use in the company. So that means you're doing PHP with some framework. The designer decides how the site has to look and the project manager tells you what it has to do. You talk to the themers to know what kind of HTML structure they want. Your job is to be a monkey and type it out. It's fairly easy; take data from point A and move it to point B. Even when it is complex it is just because the model is big, not because there's some kind of hard unsolved problem. You have to realize webdev is amateur-ville. It's easier to start making websites than it is helping to build the next IBM product, so you'll be surrounded by people who are proud of being self-taught, yet lack the most basic insights into programming that go beyond "OOP". They've never heard of things like iteration-vs-recursion, continuations, code templating, higher order functions, etc... Just the other day I overheard people in my team talking about looping over $GLOBALS to find the **name** of a variable with a certain value. This is endemic in the sector. So what do you do? Get some IT-experience, get out. (Note that this was written with webdevelopers in mind, who continuously need to crank out the next site as fast as possible. If you are a webMASTER, in charge of a single site, I think the picture might change... it's what I'm fishing for right now TBH).
&gt;With your qualifier, you're doing multiple reads on each call, which is even worse Wow, your comprehension level is horrible. Obviously I wasn't talking about reading from it when viewing the site, *but when you're viewing the error log*. &gt;So stop with the downvoting, aggro, and being disingenuous. I didn't downvote you and I don't appreciate the accusations and namecalling. That, however, deserves my downvote. So congratulations, you've earned it.
This. Right. Here. Perfect explanation.
I retract the statement about downvoting, and I apologize for that. But you're definitely aggroing and being disingenuous - you know that a database is not the best solution for this problem.
I've only played with laravel for a short time, nothing serious, but I would disagree with you: it does not follow best practices. Don't get me wrong, I'm not bashing on it-- it seems to be decent or better. But there are very strange things like this example, which apparently enables RESTful functionality in your controller: &gt; **RESTful Controllers** &gt; Adding the RESTful property to the controller: &gt; class Home_Controller extends Base_Controller &gt; { &gt; &gt; public $restful = true; &gt; &gt; } Setting some public property to enable features is kind of strange and definitely not a best practice; it goes directly against the OOP ideal of specialization and inheritance. Why wouldn't you just subclass Base_Rest_Controller or something similar? 
&gt;But you're definitely aggroing and being disingenuous How am I being disingenuous? &gt;you know that a database is not the best solution for this problem. I didn't fucking say it was. In fact, I didn't suggest any form of storage over the other. OP mentioned database, I said it didn't really matter, but that grouping the database would probably be easier when handling it with a database. Of course, you should use an API which abstracts this away anyway, but if he's going to implement that himself, it would be the easiest solution. There's nothing wrong with using a database for logging the data. log4* has a database adapter &amp; ELMAH runs on databases pretty much exclusively. And it works fine! Like said, the entire StackExchange network runs with database logging, and it gets millions upon millions of visits every day. StackOverflow even became a top-500 site a while ago. So, disingenuous? I think not.
PHP should work with Windows 7. We run on Windows 8 R2. Our PHP doesn't connect directly with the ms SQL database. We have an API server written in C++ that we make SOAP calls too which makes stored procedure calls for us. It shouldn't be too tough to get working though. 
Like I said to krues8dr, that's obviously not what I meant when I suggested creating tickets for an issue tracker. You shouldn't create separate tickets each time an exception happens, you should link them together so they display as one and sort them by the number of occurrences.
Now I am significantly more confused. It works fine with the TCP server in Go, but not in Memcached, MemcacheQ or a simple TCP server in C.... I really appreciate your help... Any other ideas? 
Changing the form to send "model[1]" instead of "model1" won't solve the problem. The $_POST headers already come organized. What I don't know is how many groups a user will have, so I planned to do something along the lines of: $groups = array(); $group = array(); $group['models'] = array(); ... # Loop through headers at some point and do this foreach ($devices as $device) { $group['models'] .= $device . ','; } ... $groups .= $group; unset($group); #Continue looping through headers now
I successfully create the XML document using SimpleXMLElement. The problem is populating the correct arrays to build the XML file with. Currently, it looks like this, which will also need to change: foreach ($browserTypes as $browserType) { foreach ($models as $model) { foreach ($langpacks as $langpack) { foreach ($client_versions as $version) { $entry = $client_updateXML-&gt;addChild('ENTRY'); $entry-&gt;addChild('model', $model); But as far as creating the XML portion goes, it works fine.
Could you pastebin the source for the C server? This sounds like it may be an issue with the way the data is being parsed rather than the data itself.
 ------------------------------------------------------- Received the following: set TestQueue 0 0 15 1340895314.6669 ------------------------------------------------------- ------------------------------------------------------- Received the following: set TestQueue 0 0 15 1340895314.6669 -------------------------------------------------------
Is this from CLI and/or a page load? Are you using just the snippet of code you provided without anything else at all in the source?
Also, try this: &lt;?php $Socket = fsockopen($host, $port); $Value = microtime(true); $Length = strlen($Value); $Cmd = "set TestQueue 0 0 $Length\n$Value\n"; fwrite($Socket, $Cmd, strlen($Cmd)); May be that it's getting confused somewhere about when it should stop sending, though I've never seen this issue before on any platform.
Would you say the following code is open to remote file inclusion attack? https://github.com/thefossproject/BarebonesCMF/blob/master/index.php
care to critique? https://github.com/thefossproject/BarebonesCMF :)
Doing this procedurally isnt the clearest/most straight forward method. However if you're looking for a pretty high standard version try https://github.com/mjburgess/x/ (esp. https://github.com/mjburgess/x/blob/master/x/x.php ) which was my attempt at translating some OOP concepts into a proceedural style. It was a failure, in the sense that everything ended up being clearer in an OOP manner... but an interest project nevertheless. I wouldnt advise copying the stateful-function approach (using statics) ... it would be better to just pass around the state as an argument. I was trying to emulate stateful methods (via object properties) as closely as possible and that was my soln. The x.php file provides the front controller functions, the rest is just extras. 
Very cool. Thanks for the information. I just recently setup a LAMP VM from scratch to do my local development, was using EasyPHP. This will be very useful.
Great! Looks good. Yeah, same deal here, really it's some toycode I wrote ages ago, I can't be bothered changing it too much unless there are some serious security implications. I just posted in case someone finds it handy. :)
I think you're not understanding the problem, or I'm not understanding your comment. &gt; as far as creating the XML portion goes, it works fine.
how so?
Initial comment, second paragraph. 
I don't understand the problem. You say &gt; # Somehow, do something that will make sure that the values inside of the models1 header go into a different array than the values inside of the models2 header but that's easy if the headers come in order. You just have to choose the array based on the number at the end of the header name, right? Anyway, I can say that if you use my model[1] suggestion, you can get the number of groups with count($_POST['model']). At least I think so - it's not clear what a group is, so I'm guessing that one group corresponds with one row in the form. Even if my exact suggestion doesn't work, there should be some way to name the post headers such that they're already organized the way you want in $_POST.
I mentor people one on one on the advanced stuff. It seems to go best, I'm sure any # of people who have tried this approach can attest to this.
or r/explainlikeimfive
Ah, there's the difference. In most of my data modeling, I never make the assumption that my system would have categories. With a query like yours, you'd return no article for something as simple as the categories being missing - I'd use a LEFT JOIN in the same place and be fine. In my world, that's significantly less fragile.
Oh, absolutely, but as you don't give enough details about the actual problem you're facing, I am also giving you a very general solution. Without understanding the practical problem you are facing, my first conclusion is that you're not using the right tools to do the job. If I were doing such a thing, I would load the XML file into the browser (amended with XSL stylesheet) and I would write a small server-side service type script and a larger Javascript interface on the browser side that would load the file, edit it, and upload it back (or stream the changes as you perform them to the server). I only understand the practical problem you're facing roughly. This is indeed how you would do it, but you would need to write code for every kind of item you are collecting. Consider all the transformations that your content undergoes from the time the XML target is loaded into memory until the time it is written back into the disk. The more variance there is in your data, the more complex the code that parses your POST values and writes them back into the tree will become. It is ugly solution but it will work. If you want help, however, you need to be more elaborate abou what you're trying to do. What do you mean by maintaining groups? What do you mean by headers (you use the term in two different contexts)? If you're struggling with the code that will read the post and transform it to calls to SimpleXML, then what you're doing is basically a finite state machine. You need to be more specific. 
Exactly right, the business logic of this system requires categories to have articles. If a category was somehow deleted then the article should not be returned. E.g. The URL is http://www.example.com/category_name/article/ The query helps enforce this model.
I liked those ones. http://www.homeandlearn.co.uk/php/php.html Very childish at the beginning but it gets harder as you go.. just glance through the beginning modules but pay attention when you get to "PHP Two"
I think the main problem with this is it will be very inefficient in terms of memory. Having implemented parsers very similar to this one in the past I've always eventually had to change them to implement an iterator to save on memory (either because the app is running out of memory completely or just running very slowly due to using a lot when other processes need it). CSVs are really designed to be read line-by-line rather than accessed as a whole so there are very few situations when having the whole thing of memory is any use at all. Not trying to be overly critical, just trying to stop you making the same mistakes I've made before.
[Ligaya Turmelle explains the differences using ven diagrams](http://www.khankennels.com/blog/index.php/archives/2007/04/20/getting-joins/), which I found quite effective for visualisation purposes.
Great overview wamans, thanks for the input! At what file size or line count (approximately) would your parser fail at? I was using this yesterday, importing a CSV at about 2.2mb / 6k rows and it worked for me. I agree, on a large scale, that this may not be the ideal solution. For parsing a 500 line CSV though, it took about a second (or less) from browser request to browser render (this included request, execution, transmission, parsing, display). I will run some tests on this and see what benchmarks I can make. I will post the updates. Would love to here other ideas / suggestions. 
INNER JOIN should be your default. You use a LEFT JOIN when the table you're joining to is optional. For example, if you have a blog you would inner join to get information on the author (all blog posts have authors). The situation described below with categories and such would more commonly be a LEFT JOIN. 
Should I make sure the ; character is not in the input?
I disagree. You should use your foreign key constraints to maintain your data integrity, not your query syntax. If a blog is orphaned from its author for some reason, that's not a reason to not-show the blog - nor is it the job of the query to enforce that rule. It just gets data.
nope, CI will clean it. so if the post value is ' ;sql;sql;sql ' that will literally be inserted.
Correct me if I'm wrong, but I believe the best way is to put all your global functions in one js file and link it at the bottom of the page, right before &lt;/body&gt; This way it should download once, and stay cached. By echoing JS into the body, it must be re-downloaded every time, which completely circumvents caching. Also, echoing in PHP is expensive, especially as the strings grow longer. Further, if you're writing your JS in strings, you're giving up any chance for your text editor to correctly syntax highlight or spot errors. The echoing is a performance problem, but wrapping JS as strings is just a convenience problem.
I see, that makes sense, especially if the cells are large in size. I think that for the most part, large-scale CSV import routines wouldn't want to take my approach. I guess I was aiming for the smaller end of things, where someone has a set of member records for example. I ended up writing it because I have to parse random CSVs here and there on the fly and it got really annoying writing file hooks and while loops LOL. Anyways thank you for the insight. I'm interested on stress testing it, so if you feel devious, try to blow this thing up.
The great part about w3Schools is that it give you a step by step. If you follow that tutorial trail from start to finish, you'll be in a really good spot. Make sure you code along side and then expand on what you learned. This is the best tool. Books are expensive, internet is free (for now &gt;&lt; )
Thanks. I'm beginning to really like CI. 
Nope sorry - this doesn't work either :( 
How I learned: http://www.php.net/manual/en/
| You're already using glob! what's up with it?
Single entry point: excellent. Using query parameters as a part of your urls: terrible. Much better to do something like example.com/example. It's cleaner, more SEO and cache proxy friendly. You can use a htaccess file to just always send that to your index.php file, and then parse the URL there.
well, will the array of strings be in a predictable format like your example?
So weird, I just happened to be looking at a problem like this today. In my case, I wanted to group files in a directory by matching longest prefixes. As a first stab, I put together this [gist](https://gist.github.com/3014950) which seems to work correctly. Algorithmically, it's suboptimal, but works for the small inputs I'll be using. There's a couple of test cases and some comments in there but nothing too thorough. I'd be happy to answer any questions you might have.
Whats your logic on what to compare? From the way I'm thinking of it, $out should be $out = array( "Mozilla/" =&gt; array( "5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)", "5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)", "5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)", "4.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)" ) ); 
I'd suggest reading about [Longest common subsequence](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem) and using one of the many existing algorithms which solve this problem. There's also a good amount of research specifically around parsing user-agents, finding commonalities, normalizaton, etc: http://users.aims.ac.za/~ludovic/Onlinedocs/cell_report.pdf
This is A-M-A-Z-I-N-G, just sayin'
Anything that does not match the "==" comparison operator. I can ensure you will need to use a recursive function. I am sure strcmp(), strok() and the like functions could potentially hold the key to creating a super effective recursive loop.
shouldn't that be "wander"? 
I'm not understanding what logic would end up with your example output.. a 2nd and 3rd iteration of my example would come up with $out = array( "Mozilla/" =&gt; array( "5.0" =&gt; array( "(compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)", "(compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)", "(compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)" ), "4.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)" ) ); and $out = array( "Mozilla/" =&gt; array( "5.0" =&gt; array( "(compatible; MSIE 10.0; Windows NT 6.1; " =&gt; array ( "WOW64; Trident/6.0)", "Trident/6.0)", "Trident/5.0)" ), ), "4.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)" ) ); edit: Actually with my original train of thought, it would stop at the first iteration as "Mozilla/" is the longest possible string common between all 4 of them
 function str_putcsv(array $values) { $fh = fopen('php://temp', 'rw'); fputcsv($fh, $values); $csv_str = fgetcsv($fh); fclose($fh); return $csv_str; } Improve as you wish.
What method do you recommend? Some PERL or BASH perhaps? LOLCATZ even?
Thanks dude. This puts a line (I assume at the end) of the CSV opened by fopen, correct?
You didn't need to use a regular expression, he was saying. Instead, you can just have it like: glob('frm_*.php'); and it will be the same thing.
hahah thanks :)
without the .php part you mean?
It's OK for teaching programming, but I see a lot of bad PHP/web specific code. Their HTML examples are all very poorly formatted and outdated. They use print (), *sometimes*, which is not idiomatic PHP and is needlessly wrapping an expression in parens. Other times they dont. There is very poor consistency. They dont seem to teach good application design either ( http://www.homeandlearn.co.uk/php/php4p11.html seems to be re-doing work PHP already does for free). The push to print values rather than return/assign them is already encouraging embeded-decision-logic thinking, which had its hayday over a decade ago and has left us with horrors like OSC. It seems fine if your curious about PHP, but i really want something that is going to have near-zero cost in terms of in bad-habit terms.
I ran this code across a [bigger list](http://pastebin.com/CXDU3dHW) and the results were impressive. It works for what I need it to do. Good work.
What do you mean "*the passed string doesn't seem to represent the time int I was expected*"? What were you expecting? What was actually passed? Have you accounted for time zone differences?
No, it transforms an array to a csv string. The fopen opens only a temporary (maybe in memory) file. Writes the array as csv and then reads the data again into a string. But as I read his code it looks like he wanted to write fgets when he wrote fgetcsv. I looked through my old code and found this: function sputcsv($row, $delimiter = ',', $enclosure = '"', $eol = "\n") { static $fp = false; if ($fp === false) $fp = fopen('php://temp', 'r+'); // see http://php.net/manual/en/wrappers.php.php - yes there are 2 '.php's on the end. // NB: anything you read/write to/from 'php://temp' is specific to this filehandle else rewind($fp); foreach ($row as $k=&gt;$v) $row[$k] = str_replace("\n", '', $v); if (fputcsv($fp, $row, $delimiter, $enclosure) === false) return false; rewind($fp); $csv = fgets($fp); if ($eol != PHP_EOL) $csv = substr($csv, 0, (0 - strlen(PHP_EOL))) . $eol; return $csv; } But don't know where I got this code originally from - so I'm not the author :) Also I'm not sure if the str_replace of newlines is really necessary.
I believe PHP uses the server time and not the users' local time. Unless that's what you were talking about.
That's what I was talking about. I've seen time zone/configuration shenanigans as well where PHP wasn't producing UNIX timestamps properly offset from UTC as well.
You don't have to store data in document elements. Something like this works better: &lt;script&gt; var phpt = "&lt;?=$stop?&gt;"; (more script here)
I'm mostly a backend developer: I focus on data and server administration. * The latter means this means I look after the function and upkeep of the Linux server, report any issues with the network connectivity to IT, and keep the bitch patched up. I set up the databases and ensure they're backed up. I make sure our git repos are archived and stored securely offsite. * The former means I might write the code that sets up MVC and talks to the database. I might cache the outcome of that request, or another one made to a network resource like an API. I keep an eye out for security issues. I'm currently working on a migration project to move data from an old homegrown CMS into a newer open-source one. I occasionally write automated tests for new or existing code. I don't like touching frontend stuff like JS/CSS/HTML - that isn't to say that I can't do it, I just don't have the patience for it anymore. Fortunately, my workmate enjoys doing the stuff that I don't like to do, and vice-versa!
Here's a drop-in bcrypt library that I've been using. It's really easy and just a few dozen lines of code: https://github.com/iamcal/lib_bcrypt
I use Lastpass, but it's the same principle. I'm just trusting some third party with my encrypted data. And trusting the encryption. I use the grid authentication so I don't even need to trust my lastpass password. I have a unique complex password everywhere. Account hacked? Don't care! Unless it's like, my Amazon account. Cause my credit card is there.
&gt; Anything that does not match the "==" comparison operator. That doesn't match up with your expected result. Using anything as the separator (as you stated) surely gives a result of $out = array( "Mozilla/" =&gt; array( "5.0 (compatible; MSIE 10.0; Windows NT 6.1; " =&gt; array( "WOW64; Trident/6.0)", "Trident/" =&gt; array( "6.0", "5.0", ), "4.0 (compatible; MSIE 10.0; Windoes NT 6.1; Trident/5.0)" ); Anyway, I wrote a function which implements the spec as you describe it, as someone's already implemented the spec as given by your example: $in = array( "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)", "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)", "Mozilla/4.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)", "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)", ); function challenge($str, $result) { $lengths = array_map(function($a) use ($str){ return strspn($a ^ $str, chr(0)); }, array_keys($result)); if (!count($lengths)) { $result[$str] = array(); return $result; } $pos = array_keys($lengths, max($lengths))[0]; $prefix_length = $lengths[$pos]; $common = substr($str, 0, $prefix_length); $key = array_keys($result)[$pos]; if ($key == $common) { if (count($result[$key])) $result[$key] = challenge(substr($str, $prefix_length), $result[$key]); else $result[$key][substr($str, $prefix_length)] = array(); } else { $result[$common] = array(substr($key, $prefix_length) =&gt; $result[$key], substr($str, $prefix_length) =&gt; array()); unset($result[$key]); } return $result; } function filter_empty($result) { $ret = array(); foreach ($result as $k =&gt; $v) { if (count($v)) $ret[$k] = filter_empty($v); else $ret[] = $k; } return $ret; } $result = array(); foreach ($in as $str) { $result = challenge($str, $result); } print_r(filter_empty($result)); 
He's basically saying to all the whiners, to either build something better and pervasive as PHP, or shut the hell up.
"PHP - A Fractal of Bad Design" - A Fractal of Inaccuracies and Errors.
Which is what I'm pointing out :)
Thanks!
This is not a PHP issue. However, I'd strongly suggest you look at a real mailinglist package instead of hacking together a message in this way.
There are parts of PHP that just piss me off. The API is the main thing, never being able to remember the alignment of arguements. However, it lets me GET THINGS DONE. And when it comes to a language, that's the most important part. If I need to code up a quick prototype, I'm going to turn to PHP. If I need something more stable that might be around for years, well then I might explore other areas.
Thanks dude!
Good catch! Thanks!
Why not send the mail from a PHP script and have cron call that? It's a lot easier than trying to manually nail together a MIME message in bash.
JSON is definitely a good idea, especially between server and client. However, what do you do when a client comes to you and says, here's this CSV and I need it to be dropped into a database? Do you convert the CSV to JSON? If so, is there a bennefit?
That's why I haven't switched away from PHP yet. What other language out there is virtually guaranteed to be on my client's RandomCheapHost.com SuperEconomyPlus++ hosting package - whether it's Windows or Linux? Ruby and Rails look great. Python/Django look great. But PHP pays my bills and I know I can trust it to just be there.
 public function get_info($from = NULL, $to = NULL) { if ($from === NULL) { $from = date("Y-m-d", time() - 2592000); } if ($to === NULL) { $to = date("Y-m-d"); } // blah blah } Or using ternary operator: public function get_info($from = NULL, $to = NULL) { $from = $from ?: date("Y-m-d", time() - 2592000); $to = $to ?: date("Y-m-d"); // blah blah } But you should really use the [DateTime](http://php.net/manual/en/class.datetime.php) class: public function get_info(DateTime $from = NULL, DateTime $to = NULL) 
I remember back 10 years ago when PHP was the best thing out there for getting shit done. Coders that went into it loved it because even though the needle haystack order wasn't always the same in every function, at least they had a function for accomplishing whatever it was they needed to get done. Now we have everyone complaining about frameworks and scripts written by someone else. *Newsflash* If all you do all day is maintain someone else's creation. You have no ground to stand on to claim that one language is better or worse than another. Only once you've written, and rewritten, at least one large website from scratch do you have even one clue as to what you're talking about. The sad part is all these blog posts complaining about PHP never take into account any of the plethora of MVC frameworks out there for PHP. They just mention wordpress and think that's the end of the story. Point made. Nothing else need be said. The sad part is about these complaints is just how much of a n00b you make yourself out to be. If you love Python because you use Django, or Ruby because of Rails, but then you write about PHP because of wordpress; you are a moron.
I used to see stackoverflow as the shit storm of my search engine results when I was actually looking for answers. It's only in the past year or so that the answers on stackoverflow have improved. To me that's not anything to brag about. It's just SEO poisoning.
That sounds great, didn't even think of that
This "PHP is terrible" meme that idiots who have never really grokked the language keep spouting is getting tiresome. PHP is fine. You can write great code in PHP that does exactly the job it was written to solve, is quick, clean, well organised and readable. If you can't, you can't write good code in anything else. Atwood is also an egomaniac and prone to spouting pointless, blustery, weakly argued stream of consciousness nonsense like this routinely. I'm left bewildered as to why he continues to be butthurt so badly by PHP. Is it because people don't flock to the tools he has so graciously deigned to select for his own work? How dare they! If Atwood is really saying "put up or shut up", perhaps he should put up and try to write something good in PHP. He might surprise himself, but I would hope we all know better than to expect him to suspend his confirmation bias for long enough to get there.
Consistency for once. You don't have to remember what format the date/time should be in when calling functions (is it `dd/mm/yyyy` or `mm/dd/yy` or what) — you always deal with `DateTime` objects. Type hinting. You know that you'll always get a `DateTime` because otherwise PHP will throw an error. It's OO, so if you're coding OO PHP that's a reason enough to use it. It has the same functionality as function-based equivalents plus loads more, for example: * `DateInterval` * `DatePeriod` * `DateTimeZone`
w3c sets the standard for good habits. u should really use them as a resource.
http://qkme.me/3pwud1
YES. I really wish that there were a php function to slice an array so that I could chain commands like that.
How is a post that is bashing PHP, getting so many up-votes while being posted in /r/php ?
One thing baffles me, if php is worst language than why there isn't any alternative of phpBB, drupal, wordpress written in other language?
I'm with you; a few lines later he says: &gt; That's the PHP Singularity I'm hoping for. I'm trying like hell to do my part to make it happen. How about you? So, we have a call-to-action -- but no action is presented to act on. He's essentially clamoring for change but doesn't posit any alternatives. Traditionally, this is what I call _bitching_ as it is no more constructive than just saying 'PHP sucks'. He should blog less, and contribute [to whatever his idea of a utopian language is] more.....or quit bitching about it (by his own admission he's been bitching about it for 4 years now).
Atwood makes a very good point in this article that people need to put up or shut up, but the point is completely lost in his bigoted and outright incorrect statements about the language. He quotes an article that is well known in the PHP community for being [full of inaccuracies](http://www.reddit.com/r/PHP/comments/s1zwr/php_a_fractal_of_bad_design/c4alojr) and treats it as if it were fact. He makes the absolutely foolish statement that PHP hasn't changed over the years. Well, sure, maybe if you aren't using it and don't take the time to actually read the change logs. From that perspective nothing changes. The amount of bias in the article is just ludicrous. **It's like listening to a KKK member try to tell people to quit complaining because "let's face it, the blacks aren't going away."** But this isn't even the biggest flaw in the post. The things that make PHP successful are the very things that programmers like Atwood abhor. There will never be a replacement to PHP that is designed to behave in a way that he likes, because the way PHP is designed is what has made it so popular. PHP is flexible, forgiving, and above all else unbelievably easy to get started with.
Why can't real projects be done in Python or Ruby?
This is really the simplest solution for both you and the end-user. You don't have to write an "install script" and they only have to change one value.
Fair enough, That sounds like the easy option for sure. On my edit though, could I use these functions like that?
you really want to avoid allowing your script to edit files, especially site files (log files or csvs can be ok). just create a .php file and echo out the data you need into the view.
Well, the way I used to update pages for people who were terribad at computers, was use ckeditor and put the data in a DB, then echo that. I feel that there has to be a better way to do that.
The problem isn't that PHP is a double-clawed hammer. The problem is the carpenters *have* a regular hammer, but choose to use the double-clawed hammer anyway. Then they complain that it's a terrible hammer. Well, duh. Rasmus Lerdorf has always said he wants PHP to be a language for non-programmers. He wants a dentist or an accountant to be able to use the language to create their own company website, without having to get a computer science degree. Lerdorf also uses PHP in a wildly different way than the rest of us. At Yahoo he used PHP exactly the way he designed it to be used. Most of the logic was written in C, and PHP was only used to glue the C modules together. That's the way PHP was designed to be used, and it's still the direction Lerdorf pushes the language in. Complaining that PHP is a terrible language because you couldn't create a huge website with it, is like complaining Visual Basic is a terrible language after trying to use it to program micro-controllers. You're using the wrong language for the job, and then saying the language sucks. That doesn't make any sense.
All decent editors have autocompletion...
when I'm working command line because I'm remoting in to fix a bug, generally Vi. When I'm sitting in the office or able to do x11 forwarding, Eclipse.
&gt; object pass by reference yet arrays pass by value Considering copy-on-write mechanism, I wouldn't explicitly say pass by value. Indeed those are the semantics, but we know that we don't pay a price for that unless we modify them inside the function scope.
Oh vi, ok; I use vim on the command line and omnicompletion solves the parameter order problem. edit: actually tried it out locally now and I didn't show up; maybe a fuzzy memory; disregard comment hehe
For all the people who whine about PHP and complain that it's so pervasive but so flawed... How about stfu, roll up your sleeves and contribute to the project? Or fork it and fix the common bugaboos that trigger so many complaints. I know it's not THAT simple--what with backward compatibility and all--but I refuse to believe it's irreparable. If no other language seems able to gain the traction that PHP has, then leverage PHP's momentum and divert it to a better path.
Who?
Wish I could help you more, but I am at a complete loss as to why this is happening, or where to even start looking. I'd recommend you fire up a packet sniffer and see what is happening when this is going on - it may give enough info to, at the least, track down which part of the system is causing it. Other than that, I don't really know what to tell you. It sucks when stuff like this pops up with no other documented cases/causes. Good luck with your debugging, and thank you for the Reddit gold - you didn't need to do that!
permissions? [file is too big](http://www.php.net/manual/en/features.file-upload.common-pitfalls.php)?
Compare these php [array](http://www.php.net/manual/en/ref.array.php) and [string](http://www..php.net/ref.strings.php) functions with the equivalent API of [python](http://docs.python.org/library/stdtypes.html#typesseq). Inconsistent APIs are a problem and they cost me time every day. I can't even sort an 'array' without manually checking it's type (is it an array or a hash table?) and then looking in the docs to find the right sort function. Inconsistent API and random parameter order are probably not PHPs worst problem, but damn it's annoying. Not even array_reduce and array_map have the same argument order! They must have tried to create a shitty API, this can't happen by accident. To achieve this level of inconsistency they probably had to rewrite the whole thing multiple times because they somehow got 2 functions with the same order and semantics or parameters. Sorry for the rant, I had to program PHP for 8h today.
Some interesting tips there. I particularly like the forced type on in the .htaccess file. I always put it through PHP GD. If there is anything weird in the file, it'll either not work or it'll strip it out when you save it as a JPEG.
How about this: $resultArray = array_map(function($foo){ return $foo-&gt;name; }, $subjectArray) ?
No, they had a pretty good reason about it. Won't be able to point it out exactly from I know this; I can't remember (maybe you'll have the patience to find out). As I remember it was something like this: * Objects in PHP 4 where passed by value * People didn't like that because they had procedures that changed the object but which didn't get reflected in the caller scope * People had to be explicit that they wanted to pass objects by reference * PHP devs noticed this pattern (I assume because it got them annoyed as well) and changed it in 5 so that objects get passed by reference; which isn't actually correct anyways http://www.php.net/manual/en/language.oop5.references.php One of the key-points of PHP 5 OOP that is often mentioned is that "objects are passed by references by default". This is not completely true. Or something like that :) edit: some formatting
For me I'd want to write some stored procedures and then call them using SQL parameters. You would then call your stored procedure like this: ...-&gt;query("DECLARE @myPARAM; SET @myPARAM = $param; EXEC mystoredprocedure @myPARAM;"); This is extremely safe as long as you don't use the params to construct a string and then execute the string. If you have a lot of data to insert at once you can use an XML string to pass the data in a param and then parse the XML in sql. I actually don't know if mysql supports XML parsing so that might not work with every DB type. I know it works in MS SQL. Edit: forgot to set the param...
Even if the gun will explode in his hands, than he can still throw rocks while he bleeds to death!
What's the question?
missing a "How about this: " before the code...
Ok now I got it. What I take from it is not about being able to write those with array_ functions, you can some but you can't all. First off the practically pointless, aestethics and terseness. Now with more meaningfull reasoning: 1. As pointed in those email exchanges, array_ functions only work on arrays; not Iterators or Traversables, or custom Collection type objects. 2. Evaluation on request. With generators you won't run the entire computation just because an equal precedes the expression. Defered computation can be very good for certain situations. 3. Inversion of control with incremental parsing. Think of the way you would go with XMLReader where inside a while loop reading nodes you'd call the function encapsulated by a class, or dump your logic inside it. Instead you'd be able to yield nodes, filter on them and apply functions from a better place (not mixing parsing and evaluation). Let's call it by it's common name Separation of concern. To really see practical benefit in it you would be better advised to see pragmatically how it is used in other languages like Python, Haskell and others I do not use or know :)
Typically people who code in Python or Ruby. The article this thread is about make mentions of at least one, plus it itself is also kinda almost making that claim.
Probably not breaking, but any changes require tests, input and feedback. There is also the issue of the syntax ( as messy as php is already ) is more of a python-like syntax where php has always fallowed java-like.
Unintentionally, of course. Its like when you get called names when you are a kid at school. I, for one, choose to embrace the concept of a double-clawed hammer because its a ridiculous argument. Shitty coders write shitty code. Good coders write good code regardless of language.
What are the greats parts in your opinion? I only see some parts that are less bad than other parts, but still inferior to most other dynamic languages I know. What are the other things, except from the white space, that you don't like about python?
https://www.google.com/search?q=allintext%3A+php+js+interpreter#
I was looking for alternatives (because I'm sure there are some) when I noticed python-forum.org uses phpbb. That's hilarious.
Doesn't work with anything that's not an array, afaik. Iterables are right out.
Why do you remote in to fix a bug? That means you are editing code on production? I'm assuming outside of version control? Yikes.
&gt; Now I'm starting to see that It's kind of a clusterfuck of things that get the job at hand done, but not in an efficient or 'good' way. Have you tried one of the popular frameworks ?
&gt;With most other languages it is the other way around. With them you first study computer science for five years and then you go out into the world to find some problem you can solve. This so wonderfully states why PHP has become ubiquitous.
Nope. What I've done so far is soley by myself. WHat framework would you recommend?
And I imagine also why it drives some programmers crazy. They work with programmers who cut their teeth on PHP and have developed an array of bad habits that need to be sanded down. They feel that people should come into the profession with a base level of knowledge and being able to work with PHP allows them to circumvent that. Furthermore PHP programmers tend to be cheaper, devaluing the profession.
More details on the malware warning http://www.google.com/safebrowsing/diagnostic?site=http://biostall.com/codeigniter-google-maps-v3-api-library&amp;hl=en Here is the Github link: https://github.com/BIOSTALL/CodeIgniter-Google-Maps-V3-API-Library
Agreed. I picked up php and read a couple tutorials and bam I built my own CMS for a website I previously built. A tangible, functioning, operating piece of code built within a couple days of learning the language? I think this is absolutely brilliant and I think there is a fair amount of credit due. I think people just spend their time whining when they have nothing better to do. 
"There are only two kinds of programming languages: those people always bitch about and those nobody uses." - Bjarne Stroustrup PHP is not without its flaws, but it's extremely portable and will likely remain relevant for years, because of the enormous community supporting it. If you're interested in web development, at least a basic familiarity with PHP is essential, even if you end up in another language. Also, Javascript. Learn Javascript inside and out; it isn't just for popups anymore.
Besides PHP, Ruby (RoR) and Python are the major web languages. Some would say ASP.net but I hated it and will stay far away from it.
A few notes from me: * Don't die inside a method, raise an exception. * Check for file existence before, and raise an exception in case of an error. * I guess you haven't tried your code with a different enclosure `$CSV-&gt;$enclosure = $enclosure;` this is wrong. * I would not use the same name for the parser instance and for the the collector; got confused there for a second. * Don't run the file through awk, do it in PHP. * When executing system processes use explicit commands instead of ticks. They look like strings in code highlighting, when in fact they should be much more noticeable for what they are. * Defaulting you optional parameters to null and having is_null checks would be the way for me to go. * If the headers where : "last name, firstname" , "record" your explode will not work as intended. * Because CSV headers are positional you can remove the foreach and do this instead: $csv['rows'][$row_number] = array_combine( $csv['headers'], fgetcsv($file_hook, $line_length,$CSV-&gt;delimiter,$CSV-&gt;enclosure) ); * Instead of that whole while code, and line numbering you could have just simply done: while($line = fgetcsv($file_hook, $line_length,$CSV-&gt;delimiter,$CSV-&gt;enclosure)) { $csv['line_count']++; $csv['rows'][] = array_combine($csv['headers'], $line); } * You're commenting obvious code, whereas you should comment unordinary code (like the awk part) and what it does, not how it does. * Still related to documentation, your docblock is not complying to the standard way of writing them: /** * * Parses the CSV and returns it as an array * * @param string $file * @param string $delimiter Optional * @param string $enclosure Optional * @return array */ * Your class is just a function. edit: can't get that damn formatting right
PHP is a good language. It's not the best, for sure, but there are countless well-known sites out there that are based on it. Your gripe with it may be because you've been doing it the hard way (that is, without a framework). Try picking up a framework (they all have their ups and downs, and everyone has their opinion on the 'best' one, so just do some research to find one that sounds good to you) and see how you like it. If you're still not feeling it, try out RoR or python/django. Then if you're really desperate you can try out .net. Do know that there are a plethora of PHP jobs out there right now, though, so it's a great thing to have in your toolbox. It may be an entirely different story in a few years however.
Will do! Thanks! I'm making a twitter clone in PHP right now, I'll make one site in RoR and one in another language, and display them when I graduate in order to try and get a scholarship in Comp Sci. Also, do you feel that you wont learn as much with a framework? Not having one also seems more versatile, but I'm not sure on that. Anyway, thanks for the advice!
all the time
Got you code to run. Its pretty damn close. I ran it across these : $in = array( "I like turtles", "I like watermelon", "I like water parks", "I like turkish hash" ); and I got this : Array ( [I like ] =&gt; Array ( [water] =&gt; Array ( [0] =&gt; es [1] =&gt; parks ) [] =&gt; Array ( [0] =&gt; watermelon [1] =&gt; turkish hash ) ) ) 
&gt;PHP is not as bad as they say. There are issues, like with every language, but they rarely cause problems in practice. If only he was right...
http://php.net/manual/en/function.getimagesize.php
The low-entry barrier with PHP in my opinion led to the explosion we saw with "Web 2.0." Suddenly, it was a lot easier to pick up the skills needed to create fairly complex sites. Then the CMS suites came along--Drupal, Wordpress, Joomla--and made this even simpler; suddenly, you could create relatively robust sites without even having to code. I remember how something as simple as submitting a form was handled prior to the advent of PHP. Remember the trusty cgi-bin?
Nice, short article, and very relevant to myself. I've been [wanting to learn Python](http://learnpythonthehardway.org/) for a while now, but I simply don't have the time because I'm still busy learning about everything PHP and its community has to offer. Even if I did learn Python, I wouldn't be at a level where I could use it in a professional manner, since my current position is 100% PHP-focused and Python would not fit in anywhere. It would be a very long-term investment and I simply don't see the effort being worth the payoff. It's not like I would make a lot more money as a Python dev vs what I currently make now. So, I keep learning PHP, further specializing my field of expertise, and taking me further away from mastering another language.
That explains pretty well how I got into PHP. I heard it could do more than simple Apache SSI, so I read a bit and slowly picked it up.
&gt;I wrote Tumblr, Instapaper, and Second Crack in PHP. I continue to use it because I know it extremely well, it’s very easy to use and deploy, and it’s nearly maintenance-free on servers. When you’re a programmer forced to also be your own sysadmin, that’s very attractive. So what's the problem? That sounds like it has quite a few advantages for his workflow, he's effective with it and has seen some great success with his applications. &gt; But I hate it. It’s limited, often clunky, outdated, and [deeply flawed](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/). Oh, he's linking to "PHP - A Fractal of Bad Design". Now I understand - he wants to be [one of the cool kids](http://www.codinghorror.com/blog/2012/06/the-php-singularity.html) and in spite of his proclamations, he obviously doesn't understand the language he works with well enough to know a complete crock written by an ignoramus when he sees one. If he can't recognise the significant number of points in that article that are totally wrong, and the smattering of points that are *not even wrong*, I shudder to think of what Tumblr's code looks like behind that pretty facade. I bet it's that same type of gutter PHP code that causes every whackjob who doesn't get it to write "Fractal of Bad Design" articles in the first place. I wonder, will he notice when he switches to Python that in spite of its greatness, there are some epic stuffups there too? And that there are a great many examples of something strange having to be done to the language for backward compatibility. And that they don't always get it right the first or second time there either? In fact, when he gets to his third language, and he's banging his head against a new set of bizarre gotchas, will he start to see the similarity with what he feels about PHP? And will he realise the whole thing was a fools errand and that PHP was good enough because he (thinks he) "[knows it] extremely well, it's very easy to use and deploy, and it's nearly maintenance free on servers?" I hope so, but I'm not holding my breath.
That's is a pretty sensible rule of thumb, thanks. My mind really likes to have these kind of guide lines. 
I assume this is to make sure that the MIME type is that of an image. In which case, I prefer to use the [fileinfo library](http://us2.php.net/file_info), because it is a little more flexible and can handle file uploads that aren't images.
Lighten up.
&gt; Part III: The Script Disguised as an Image It's covered in the article. GIF files, for example, accept comments. I've found out that option using GIMP.
This is starting to devolve into a "nature vs nurture" argument...
I feel that the steps from "novice" to "can display enough competency to get work/freelance contracts" aren't as steep for PHP as they are for other server side languages. I object to the word entitlement as it projects the idea of someone learning PHP and deciding they're too good for certain practices, but it's incredibly easy to go from nothing to having a LAMP server with an application running on it, and there have been guides for doing so for years. There have been all-in-one programs to go from nothing to have a development LAMP stack on your Windows box for years. It's also been very easy to get cheap, shared solutions with PHP running on them for years. If someone wanted a web site but wanted to do it on the cheap (because they don't understand the cost behind doing so) they could find a cheap PHP developer to do it for them. A demand for cheap web programmers was there, and all they were asking for was HTML and PHP. My argument isn't that PHP inherently causes bad habits (many programmers far smarter than myself have debated the pros and cons of the language), my argument is the marketplace for a period of years was looking for cheap PHP programmers, and there were many solutions out there that made it very easy to get going with PHP. After that it's up to the individual to decide if he wants to expand and formalize their knowledge, learn other languages and ways of going about things, or just coast on what they know.
Gradeschool playground bickering is what it is for some. A .1 ms processing time extra here or there for an infrequently ran cronjob seems to be the end of the world for some people. And I'm sure all other language users are experts when it comes to parametrized queries. I swear - the objection to PHP seems more politics than rationality sometimes.
I don't disagree in the slightest with quality of work being more dependent on the individual's personality. Indeed, as I said above, the best programmers are the ones who find that balance between practical and theory. They keep their skills fresh by continuing to search out new problems to solve and keep themselves informed on the latest best practices.
No kidding. I've been using frameworks so much, I forget how to do it myself sometimes and need a refresher.
Go read up on [how floating point numbers work](http://en.wikipedia.org/wiki/Floating_point_numbers#Special_values).
Here's my $0.02: I started using PHP when I was 15 or 16 (I'm now 21). It is so robust, any server and platform can run it, and it just solves problems. Right now, I'm a full time developer (php, mysql, js) and I couldn't be happier. I haven't been able to find anything PHP can't do (in before massive downvotes and smartass remarks). I think you should keep it up. Also, if you're in the South Louisiana area (Baton Rouge), Id be happy to offer you a temp job to see if it seems like a career you'd be interested in and for you to see how PHP is developed in a professional environment. If you really want to learn another web-based language, I can suggest perl/python. I've heard a lot of bad things about RoR. Best of luck to you. 
Thank you so much for your thoughts and kind words! I really appreciate the temp. Job offer, but sadly I live in British Columbia. I will stick with PHP for sure, and I think python later perhaps. Just a personal question, I'm trying to apply at local web design places, how should I go about getting them to take seriously as a web designer? I don't have a lot of extremely impressive projects so they basically have to take my word for it. Any input?
Haha yeah, don't think it'd work since were so far from each other. But, to answer your question; stick to what you know. Also, an impressive portfolio is an absolute must. When I use to apply for developer jobs, id send my resume/cover letter, and a link to my online portfolio. On my portfolio I had a brief description of the project and then a link to it. You could also think of cool stuff to do in PHP. I would always come up with something off the wall, and then challenge myself to make it using the tools at my disposal. I for example made a custom CMS, with modules you could plug in and out. Also, it wouldn't be bad to try to score an internship. That wouldn't be such a bad bullet point on the resume at all when moving forward in the future trying to score another job. Make sure they know that this is something you're really interested in. Also, clean your code up if your spaghetti coding it without a framework. Hope this helps. 
javascript is a client-side &amp; server side language. * this comment is being downvoted... I assume /r/php doesn't know much about javascript...
Use php to save the field values to a database, then get the saved data and run your template/mail merge functions.
Because it doesn't take advantage of the latest features in PHP; and it's very lightwell design wise. CodeIgniter was my first framework a couple of years ago and it formed a skewed impression of how actually things should work. Take the active record pattern, read how it should work like and also read the note on CodeIgniter on Wikipedia http://en.wikipedia.org/wiki/Active_record_pattern#PHP Object oriented designed wise, there's nothing in it. 
Do you have any idea how much the facebooks devs changed PHP for their purpose? They don't use PHP anymore, they use a language with roughly the same syntax and semantics, but not PHP.
I've never heard of TOAD before, so I decided to go check it out. Their promo video didn't really do much for me - looked like MS Access for the most part. Yay Win XP theme. I had a good laugh when I saw the price though. Seriously, if they are going to sell something for $500+ I expect them to show me something that just blows my mind.
I use PHP a lot, more than any other language, but I disagree with most of what he says. &gt;PHP is a great language to start programming! PHP has poor debugging tools, unit testing is a nightmare, the OO model is poor. Gets you into bad habits and doesn't encourage or facilitate the learning of programming concepts. &gt;Once you started, PHP is also good for “real” programming (you know, object orientation and stuff). Right, so non-OO programming isn't "real programming". Also the OO model in PHP is very bad. Definitely not the best language to learn about OO from. &gt;PHP is not as bad as they say. There are issues, like with every language, but they rarely cause problems in practice. It's a mess. Anyone who thinks PHP isn't a mess, is probably an inexperienced programmer. &gt;PHP 5 has very good object orientation support, multiple inheritance? &gt;which is actually really similar to Java. Please tell me about the PHP string object, or maybe the PHP array object.... oh wait...
I think there are some legitimate grievances with PHP and he happens to touch on some of them, but he's so frequently wrong that it feels like he hits some of the real problems more by accident than through any genuine affinity with or understanding of the language and it's pitfalls. The [conversation that happened on this subreddit](http://www.reddit.com/r/PHP/comments/s1zwr/php_a_fractal_of_bad_design/.compact) the first time "a fuckwit of bad designs" appeared on here had plenty of excellent responses, but im not aware of anything more comprehensive. If anyone knows of anything, please post as I'd love to have it up my sleeve for the next time that stupid article shows up. And of course it would be crazy to suggest that PHP has not got its fair share of absolute howlers in it - that would be akin to suggesting that regardless of the very good reasons why it came to be, the GIL isn't utterly retarded in principle - and it's certainly worthy of some sort of index. But for that, there's a much more even handed site written by someone who has clearly understood (ahem... I mean clearly *used*) PHP: &lt;http://phpsadness.com&gt;.
His blog archives seem to suggest he hasn't always felt this way about the language. If he's had a change of heart, and a combination of Atwood and fractal guy are the motivators, that's a pretty shaky basis. "I just don't enjoy coding in it" is a *great* reason not to use a language as it implies you've actually made a good fist of using it. It's hard to feel that way about this dude's rationale for this post, particularly given the proximity to Atwood's latest diarrhoea.
[or this](http://thedailywtf.com/Articles/PHP-has-an-eval-function-like-perl.aspx)
That's why it is prudent to check whether it's a valid image before you move the file in your upload script. /tmp show also be mounted as no exec.
Did you read the OP? It is possible to create a file that is _both_ a valid image and a valid (or at least executable) php file.
&gt; Please tell me about the PHP string object, or maybe the PHP array object.... oh wait... http://php.net/manual/en/class.arrayobject.php See? There are objects that are arrays...kind of. Even though PHP is weak typed, those arrayobjects are not compatible with the built in array functions. But of course you can create a new real array from it to pass to the array functions. And a hack to have string objects: http://www.talkphp.com/tips-tricks/4555-treat-php-strings-objects-like-javascript.html See? PHP is not bad! Most features can be or have been half hearted hacked into the language and some are even kind of usable!
yes... but his article also has an example where the filename has been changed to .php. If I don't allow that extension to be uploaded and I don't allow invalid images... how exactly can someone execute the script?
To be more precise, Javascript is a language. It simply has multiple implementations, such as V8.
Well, that is the point of the article, IMHO. You have to take _all_ of those measures. It's a pretty common error to just check for extensions, mime types or valid image.
I know. I'm just saying that fileinfo is a little more robust, because you can use it to check other file types and you aren't limited to images.
That seems more a question of bad coding - it wouldn't make sense to pin that on the language. 
No, long answer: If you want to go in computer science you will not meet PHP again there. Most tools / scripting languages they use are VB(.Net), Ruby, Python. While mostly python. While PHP is a nice and wide spreaded language (almost a monopole, hehe) with those other languages you get a slight edge above the rest of your class. And allows you to follow the classes more easily. For computer science interest I would suggest coursera (algorithm, saas) there you could get a small insight view how those languages are used and teached. Good luck!
Your statement is incorrect. [Facebook still uses PHP](http://en.wikipedia.org/wiki/Facebook#Technical_aspects)
&gt; I remember how something as simple as submitting a form was handled prior to the advent of PHP. Forms were even one of the driving forces behind the early versions of PHP - important enough to be in the name (PHP/FI 2 stood for Personal Home Page tools/Form Interpreter). Form handling convenience was even responsible for the mess that register_globals was to become.
They absolutely still use PHP. They have replaced the runtime engine with HipHop and released it as open source. Anyone can use HipHop with PHP if that is what they want to do to improve performance. It's all open source. It's the best of open source in action. [HipHop for PHP: six months later](https://www.facebook.com/note.php?note_id=416880943919) [Facebook looks to fix PHP performance with HipHop virtual machine](http://arstechnica.com/business/2011/12/facebook-looks-to-fix-php-performance-with-hiphop-virtual-machine/) They didn't "change php". They created a new virtual machine that translates PHP scripts to bytecode and run that instead of using the scripting based run time. It gives them the performance increase they need while their developers can still work quickly using a dynamically typed language that doesn't need to be compiled each time to be run. 
This is true, but it shouldn't be a *requirement* to use an IDE. The inconsistency should be fixed. Personally I'm all for moving to string/array classes with full Unicode support.
If only that were the only important OO feature missing from PHP....
Please. Just stop. You're a shitty programmer and just an amateur. Please stop going around trying to teach people. You're teaching them the wrong thing. There's a reason you get downvoted all the time. This is because all you do is try to peddle your shitty PHP University crap and give people bad information. You have no idea what MVC is and your code is crap. I remember when you posted PHP University's MVC on r/programming (or maybe r/php) it was downvoted to oblivion and many people listed the defects with your "framework". You just deleted the post and ignored them. Now here you are, peddling your shitty framework again.
Could you give me the to spec on php.net? I can't find it. I honestly thought that PHP has no spec and just organically grew out of a bad project from a bad programmer that still has no interest in language design other than patching more and more half done features into it.
Ok, so you mean the docs, right? I though the HipHop guys might have at least "extracted" a specification or reference for their work and released it on PHP.net. I should stop posting in this subreddit, my karma count is getting low.
Mostly programming. I'm good at minimalistic designing, but if you want something really complex, I'm not particularly good at that.
Maybe I live in happy land but I dont see why so much travel. What I usually do is to ask for a constant defined at the begining of the file if it's no available then kill the script with a die; then in my main file I declare that constant. You could put your files outside the public website. I dont think you will find read-write errors at least more than putting them in the public folder. This will only happen if your permissions are messed up (but it shouldn't). Anyway. I will not put any sensible information on files without encryption unless it's the only way to do it. So as the first commenter said, tell us more about what you're putting on those files.
You should trust nothing you include. You could save a list of the files you want to include (doesn't matter how), let's say you saved them in an array (or retrieved them from a database in an array). Then you could check if the file requested, is actually in the white list, if not: do nothing (throw an exception/log it!).
If an attacker gained access to your webroot, does it matter that he could change the whitelist? It is not like he couldn't do anything he wanted anyway. He could read your database login data and pull everything from said database, that would be my main concern. I think OP is talking about how to protect this properly: include 'func/'.$_GET['p'].'.inc.php'; Where I would suggest to check if $_GET['p'] is in a white list. Edit: I wasn't talking about uploading anything. I was talking about OP including his pages. I would configure everything so that it isn't possible to execute files~~, but what's the point if the code can be included in a part with execution rights?~~ This protects against directly calling a file ~~but not against insecurely including a file~~. It is even possible to include an url, I could make my own file and host it somewhere and let OP's server include and execute it. That way it doesn't matter what rights the upload storage had. OP is not asking how to make a photo upload service where he has to secure his uploads. It is how ever great advice to make sure that php isn't allowed to include files from a user-writable space. But that's your second line of defense. Your code should make it impossible to include an insecure file. Because it is possible to include an url from outside the server. Edit 2: You could check if a variable is defined and if not die() or exit();
Interesting. I'll take a look when I get some time. I can't honestly say I tested it much
I have developed apps where everything was outside of the web root except for htaccess, index.php, robots.txt and SEO sitemap. This was for an adult membership site.
Oh. Okay, that makes sense. I didn't realize what kind of crack we were smoking. A whitelist for something like your snippet would indeed be extremely important, but not quite as important as never ever doing anything like that. Edit: &gt; It is not like he couldn't do anything he wanted anyway. Precisely my point. Though I realize now you weren't talking about including malicious files so it's not relevant.
You're right about the fgets. I was on my phone and trying to write it quickly.
In a well-structured application the path to a class file is often guessable. I wouldn't lose sleep over it, but I think the chances of someone making an educated guess which turns out to be correct are much higher than one in a million.
I wouldn't worry too much about it. Most mature applications don't use any particularly in-depth include protection strategy, and the exploits against them don't typically come from that angle. Some projects (e.g., Yii, CakePHP, and CodeIgniter) recommend you put source files outside of the document root (web root, www, public_html, httpdocs -- it has many names) for added security. You shouldn't get read-write errors if your permissions are correct and php.ini is configured to allow PHP files outside of document root. Pay particular attention to owner and group membership setting and whether or not open_basedir is enabled and set to allow your external directory.
Yes. And then I realized it's just so much easier to install virtual box + any debian based linux and install whole development platform with less than 10 commands (including memcached).
I'm just going to point out - **don't ever do this.** If you *have* to dynamically include files like this, use an object reference scheme. You'd do something like this: &lt;?php try { switch($_GET['p']) { case 'p1': $file = 'page_1'; break; // ... default: throw new Exception('Invalid page'); break; } include '/some/path/'.$file.'.php'; } catch(Exception $e) { // Do whatever you need to fail, like log or whatever } I implore you, find a better solution. Look into something like Front Controller where all your requests go through a single script and you're swapping out objects instead of including other scripts. You can then pair this up with an autoloader to make this more safe and easier to manage. Worse case, split your files into individual scripts and reference them directly. It will probably be safer than determining a file based on a `$_GET` variable.
Use [Homebrew](http://mxcl.github.com/homebrew/). `brew install https://github.com/josegonzalez/homebrew-php/blob/master/Formula/php53-memcached.rb` If you want to go the VirtualBox Debian / Ubuntu route: `sudo apt-get install apache2 php5 memcached php5-memcached`
Let me rephase then: **I've heard a lot of bad things about Ruby. ** Better?
Assuming they know you are using the class, and they know your naming convention. It could be class-name.inc.php or class_name.class.php or className.php in /classes/ or /includes/ or /lib/ or /libraries/ or wtfever. It's easily one in a million. It's not like you advertise, "We use This_Class and we store our classes in /path/" on your homepage.
Listen, I have a degree in CS &amp; Math, well over 15 years of development experience including, but not limited to: C, C++, C#, Python, and Ruby (the current media darlings). In other words, I *do* have both the education and the experience to 'know better', and I love using PHP. I love C++ and C# to death as well, but for flat out getting shit done, you can't beat PHP. I have professional experience with RoR, and I can tell you right now, given the choice, I would choose PHP unless there was a __really__ strong reason for RoR. My experience has been that most RoR devs tend to get so enamored with the mirror, they tend to introduce systemic problems* that they don't/refuse to recognize (I've seen it several times). PHP folks will admit that it's messy, then go back to getting shit done. So Stop being an apologist, if PHP wasn't the 900lb Gorilla in the room, they would be complaining about something else. You're using the most popular web language in the world, hands down. Don't apologize for that. * To be clear, The Rails community has some really smart folks, but then there's the rest of the community.
I was taking a look at Homebrew but for some reason I kept getting errors when installing. Thanks for the ubuntu command!! I'm installing Virtualbox now. Thanks for your help!
Did I subscribe to *r/PHP* or *r/MySQL*?
Except CI conforms exactly to the definition you quoted. I'm not sure where it deviates, is it just because it uses a stdClass instead of specialised classes?
&gt; would include functions such as Insert, Update, and Delete For the record to conform to the pattern it would include it's own methods of updates, inserts and deletes. I do not know why that isn't obvious; take any ORM out there that implements Active Record and see it for yourself. My favorite is [Propel](http://www.propelorm.org/reference/active-record.html) but I'm sure there are many other out there.
I'd like to know what then, as far as I can tell it's not really that bad.
This is almost laughably false information from a PHP dev's perspective. PHP will handle negative (signed) timestamps, allowing for a much larger range. Additionally, int fields in MySQL, if you manage times in your code, sort just as readily as native date fields in MySQL.
I misunderstood you with this: &gt; Where I would suggest to check if $_GET['p'] is in a white list. I thought you were talking about having `$_GET['p']` be set to the page you want, not use an array and look up the key. Your solution would indeed work, my concern is doing a direct 1-1 match. Whitelisting with a indirect object references is the way to go and your solution is indeed more flexible. &gt; But I think OP is doing this as a hobby, otherwise he would be send on (company) courses and be reading books and wouldn't need us. You'd be surprised sometimes. I've done quite a few websites for clients where I've taken over after the nephew of the owner, who was a whiz at websites, went off to college and left them with a website to maintain. Even if OP is doing this as a hobby, that's no excuse for not learning the right way to do something. We provide a solution to OP's problem (like with your array example) but steer them to a better path explaining why what they want is potentially bad.
&gt;You'd be surprised sometimes. I've done quite a few websites for clients where I've taken over after the nephew of the owner, who was a whiz at websites, went off to college and left them with a website to maintain. I feel your pain, I wouldn't even want to start... I suggested CodeIgniter because it easy to learn and there is a lot of documentation out there. OP probably just wants to create something and not kept busy for a long time creating the perfect framework. I don't think OP has knowledge of Object Oriented Programming (judging from his post). I am used to work with little information "$_GET['p']" and "white list" I should have explained myself better, I don't think we should create OP's code but stear him in the right direction. Keep up the good work!
I don't like this set up. It makes portability an issue because of the assumption that the docroot is always going to be either named a certain thing, or you have the control to rename / symlink something. I've seen the docroot called www, htdocs, httpdocs, public_html and web. In a set up like this, you are relying on your ability to control the name of that folder, which is not always true. Using good .htaccess rules is just as effective in blocking off snooping, but doesn't use any such assumptions. The entire PHP site should be within the docroot folder, in my opinion.
Use and IDE then you never have to remember the argument order again. I can recommend the excellent PHPStorm (not free however). If you are doing typical web dev stuff with a framework you don't tend to touch those functions that often anyway.
OK fair enough. Personally I don't think it matters one iota (and I don't really care for AR anyway), but at least there are add-ons for CI that follow that stricter definition of Active Record.
strtotime is a fantastic function WHERE created_on &lt; '.strtotime('SOME DATE OR EVEN -/+ 1 Year/Day/etc').'
yeah but then you couldn't really use the MySQL date functions like date_format, dateadd, etc.
Why would/should I have to add all those functions just to use MySQL functions though. Inserting `NOW()` into a timestamp and datetime field seems to yield the same results, the timezone they are inserted as is whatever the MySQL server timezone is setup to.
I probably should of thought more about my metaphor. I meant the type that you receive in school. 
Fuck I remember when those both came out and I was like "*what is it with people and using 'Java' in/as the name of their language?*"
You're technically correct. [According to Mysql...](http://forge.mysql.com/wiki/MySQL_Internals_Algorithms#Date_and_Time_Data_Type_Representation) &gt; TIMESTAMP: A four-byte integer representing seconds UTC since the epoch ('1970-01-01 00:00:00' UTC) &gt; DATETIME: Eight bytes: A four-byte integer for date packed as YYYY×10000 + MM×100 + DD and a four-byte integer for time packed as HH×10000 + MM×100 + SS Stored as integers, but with special patterns.
The timestamp field allows you to automatically update and initialize timestamp values. You can define a table so when the row is created the current timestamp is set on your `created_on` column. **MySql Docs** http://dev.mysql.com/doc/refman/5.0/en/timestamp-initialization.html 
That's why we have the ability to subscribe to *multiple subreddits* - so we can see information that's useful to us in **all** the technologies we use.
I personally like my database to be human readable. 
If you think he is just bashing PHP I think you misread the article. His points are all valid and in perspective, and Jeff actually makes fun of pointless bashers.
He has quite clearly made is point, I am not sure how you guys have all missed it. 1.) PHP is not great - we all know this - but it works and you can get things done. That is great. That is the minor point that many people have made which is contradictory, but... moving on: 2.) Instead of people just bashing PHP they should A) send a pull request and make it better or B) help work towards a better solution. That better solution could be anything. Make a new language, build your next application with something else, suggest to a friend the new language they learn should be Python, whatever. PHP is widely used because it is widely used. That does not mean it is the best tool for the job, but it does mean that it is a marketplace I will continue to stay in, while it is still widely used. Surely you can see how this is a contradicting situation for anyone who can see all the flaws of PHP? Hense the term: Singularity.
Also add WordPress, Joomla, Drupal, phpBB.
You're just defending CI blindly; and such this will be my last response related to this thread. There is no "stricter" definition of Active Records; it's either implementing the design or it's not. Take away if you want you're argument that CI is fine like that, but do note from my initial comment that Active Record was just an example, on which we drilled down; but that doesn't maen it's the single one. And fine if you think it doesn't matter, it is practical without those aspects; but object oriented design wise it's still a bad example.
The "I" [date format character](http://www.php.net/manual/en/function.date.php) returns a 1 if a date is in DST or a 0 if it isn't. You can construct a DateTime object with the user's date and timezone and query its DST status that way. $date = new DateTime('2012-01-01', new DateTimeZone('America/New_York')); $is_dst = $date-&gt;format('I'); if ($is_dst) { echo "It's DST!\n"; } else { echo "Not DST!\n"; } Edit: bad punctuation... 
One reason is because [Mysql still uses the "'1970-01-01 00:00:01.000000' to '2038-01-19 03:14:07.999999'" rule for timestamps](http://dev.mysql.com/doc/refman/5.6/en/datetime.html). Just try `SELECT FROM_UNIXTIME(-1);` or `SELECT FROM_UNIXTIME(2147483648);` - both will return `NULL`. If you want any negative timestamp value, you have to either use the Mysql DateTime type or store the timestamp as a signed integer. Probably not usually important to switch from Timestamp to DateTime type, but you will loose Timestamp-specific Mysql features. 
If its a manual setting that you don't log the changes to, it is impossible to tell. This is a logic flaw, and not one that you should feel ashamed of. Instead, you should transition from using offsets and a manual boolean to using Timezone's, such as the "America/New_York" referenced below by Otterfan. On [Route 50](http://route50.net/), I use a setup similar to Google's for offering timezones. It's probably a little out of date, but if you're interested I'll try to clean it up, separate it out, and put it up on Github? You can see it in action [on the registration page](http://route50.net/signup).
Not so seamlessly. `DateTime` can't actually take integers in the constructor. But [this is extremely trivial to work around actually](http://www.php.net/manual/en/datetime.formats.compound.php) - just pass in `"@$timestamp"` string in the constructor. But, unlike `strtotime()`, you can construct a `DateTime` object outside the unix timestamp limits: `$d = new DateTime('-5000 years');`. Of course the limit DateTime can handle , [as a user in the PHP manual noted](http://www.php.net/manual/en/datetime.construct.php), is -9999-01-01 through 9999-12-31. And unfortunately, Mysql limits its DateTime type to '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. So once again PHP value constraints just can't match exactly Mysql type constraints. I have no idea where I'm going with this comment, but useful info to know still.
Never heard of a website scanner?
Slight correction: For PHP 5.1+, 1901 to 2038 if storing the value in a signed int column. Of course, dates prior to 1970 are useless to Mysql itself in terms of unix timestamps. Still, I agree with your reasoning in this post that unix time just isn't all that useful unless it's just to capture contemporary events. And really, it can't do anything more than that.
Others have provided helpful information. Just remember never to store timezones in any format other than the zoneinfo identifier: e.g., "America/New_York". Storing offset from GMT or other folly will preclude your ability to solve problems like the one you're facing.
Oh wow that'd be fantastic! I knew a little bit about this because I have a friend who lives somewhere that doesn't observe DST but I know countries North and South do. Guess that's why offsets aren't the best. If you did that it'd save me a lot of time. I can always update it anyway.
Check your access logs sometime. Plenty of blackhat scanners guess URLs (in most cases looking for phpmyadmin instances or insecure backends). Its not difficult in the slightest. Security through obscurity is a myth.
Use BIGINT (and 64bit PHP) and the range is big enough for anything.
They are looking for phpMyAdmin. That's not guessing a URL. They aren't going to guess My_Class.inc.php, because there is no advantage to finding it, nor is the URL standardized.
No matter what you do, one can simply take a screenshot.
That's pretty amazing. Implementing it now. I'll add you to my JS comments. Edit: Just noticed Toronto is misspelled as Toronoto. Not sure if there are any other spelling errors. Its a huge list.
If it appears on the screen, it can be copied. Easily. Period.
Beyond a screenshot, what else would there be?
a screenshot is the exact same thing as whatever is presented on the screen
You can use aptitude search php To see all the available php modules available directly from the default repositories. I don't know what packages are enabled with 12.04 but on 11.x you can just type: sudo apt-get install php5-mssql
I find a package in APT named php5-mssql. Do you have that one?
Meh, that would just be annoying to watch download, and increase overhead on the web server. I like flickrs method. Just a div / image overlay, so you can't do a right click save as. It's the most unobtrusive method of keeping the computer illiterates out.. and for the computer literates.. nothing you do will help prevent screen shots. 
That's simply not true, see: The Oatmeal v FunnyJunk or anything v FunnyJunk, really.
Yes, let's add additional overhead (both performance and memory) to our function calls. I'll pass. If you want to use Python, it's easier to just... use Python.
Not if displaying that image requires the use of an overlay like they do with DVDs. Then you just get a pink square.
I have a general idea of how this would work. It isn't 100% guaranteed to protect your images but it will keep out 99% of would-be image thieves. 1) Require the user to use a special browser that you have designed yourself in order to see the images. 2) The browser will communicate with your server using encryption and digests. 3) The browser will refuse to run if not using HDCP. 4) The browser will only work if your GPU supports hardware overlay which will protect you from those taking a screenshot. Or you could just accept the fact that people are going to download your images and any measures you take really aren't worth it.
Except FunnyJunk is a joke and not the funny kind.
This comment may also help: function is_infinite($value) { return (substr("$value",-3) == "INF"); } [Source](http://us2.php.net/manual/en/function.is-infinite.php#45246)
Within reason. COBOL ON COGS is not a good choice.
Is it easier in one language than in the other? Example request: a reddit user's karma score or the price of an item on amazon.
Your just parsing strings at that point, so any language that has good string functions would work well.
I have a PHP-based Git deployment script that I have adapted for a number of projects. You can find it on Github: https://gist.github.com/2324609 Just git-push to your remote repository, and a post-commit hook triggers this script via HTTP(S). Use it as a wrapper for various things you want triggered in your staging or production environment on a commit. It's no Capistrano, but it gets the job done.
Author here, the idea was to decrease the amount of time needed to debug an error. I often felt a minor error took too long to debug, even if we're just talking tens of seconds, so instead this aims to give you the relevant info as soon as possible. It's kept as just one file, so it's simple to setup, and easy to rip out. I even have it preload using php.ini on my development server, so my projects don't even know it exists. You can also add in info for which code is application, and which is framework, and the files get colour coded and prioritized when displaying the error. For server side errors during ajax, the JS callback gets put on hold, whilst it displays the stack trace in the browser. You can then alt+tab to your editor, fix the bug, and hit 'retry' to resend. No page refresh needed. It does some code injection into your page to do that, and raises the error settings (but can be changed) to make it more strict, but I find it a *much* more productive setup. I hope others find it useful.
I've been thinking of doing something like this for ajax requests, so I could do: ajax( '/login', function( $username, $password ) { // ... } ); ajax( '/new_blog_post', function( $title, $content ) { // ... } ); ... and the query parameters automatically get mapped for you. Saves you having to do 'isset($_POST)' and 'isset($_POST['username'])' and so on. If you're only doing this mapping once or twice per request, then it is still going to be pretty cheap.
Works! Thanks!
 spl_autoload_register(function ($class) { include 'classes/' . $class . '.class.php'; });
...echo...
what's wrong with xdebug??
What about just putting a watermark over the images?
PHP &amp; MySQL = two peas in a pod. 
Is this why you can't zoom in with smartphones on Flickr?
$names = array_map(function ($v) { return $v-&gt;name; }, $people); Would be clearer without knowing the implementation of _pluck. 
Do you have many procedural files? I had assumed people had stopped using .class.php (and /classes/) many years ago. Surely /lib/ and ClassName.php is much more descriptive and convenient?
 class Console { public static function log($item) { echo "&lt;script&gt;console.log(".json_encode($item).")&lt;/script&gt;"; } } then later on in my code or my views i can just do &lt;?php Console::log($var) ?&gt; and it will show up nicely in Chrome's console tab.
You know there's no difference betweeen function console_log() or namespace Console; function log(); than class Console { ... } . PHP isnt Java where you are forced to use statics to get procedures. Putting "class static" around a procedure doesnt make it OOP. 
/r/phpsnippets hasn't been active in some time, unfortunately. Needs more members.
This kind of passion and spirit is why I will always find the world of software development to be an amazing place: I could not stand the sun in my eyes. So I built a house. *But couldn't you have jus--* I already built the house. Let me show you it.
Why not just pass an array? Am I missing something?
I'm glad you like the look of it. If you just want to try it out, you can just download and add ... require( 'php_error.php' ); \php_error\reportErrors(); .. at the entry point to your site. The php.ini stuff is just so I can deploy, without having to care about removing it from the project first. I also have the php.ini steps documented on [github](https://github.com/JosephLenton/PHP-Error/wiki/Example-Setup).