This was covered by someone else above, but the problem with this method is that you'll always update that field if you put a current_timestamp default on it. That's great for an updated_on column, but won't work for a created_on column, as it'll get updated each time. 
excuse me, i just now checked my unread messages. Thank you for you answer
W3Schools was always horrible for beginners, even back in the 2004 in the dark PHP 4 days. Now... now it's so outdated and bad that it's actually unethical for them to host that shit. 99% of all the stuff on the Net (and in books!!) is so horribly outdated and/or wrong at this point, that the content owners need to do the right thing and remove it.
Also, find a mentor as soon as possible. And not just anyone. Virtually all PHP developers were self-taught and most stopped learning when PHP was relatively undeveloped (compared to what it is today), e.g. around 2005. In my and other people's experience, the vast majority of PHP developers do not know such basics as 1. How to debug using breakpoints in an IDE? 2. How to use an IDE (seriously! I've seen people on /r/php defend the use of Nano, which is the equiv of notepad in UNIX), 3. Database best practices, 4. Basic website security practices, 5. Decent SQL skills (aka using ORMs as a crutch) 6. What design patterns are (honestly, after interviewing 30+ "senior" devs over the last 2 years, only 2 could tell me what a design pattern was besides singleton and MVC, and most didn't even know those) 7. etc., etc., etc. My advice is find someone who is at least Zend Certified, tho this is *extremely* rare and only means that they know basic PHP syntax and are generally familiar with the language. Also make sure they earn within the top 5% of their bracket. If the businesses aren't sure of their eliteness, then how can you be?
PHP docs rarely teach you best practices nad give you extrmeely little meta lessons. It is a horrible way to learn and should be used as a last resort, but way before trusting things like W3Schools (which, unfortunately, excludes 99% of all websites). The best appraoch is how most people learned highly skilled trades: Find a willing mentor.
Copyright 2003!!! This is PHP 4 code and should NOT be the foundation of learning code!! You should, in fact, avoid ANYTHING written before 2008. Without exception.
I certainly hope you know how to use an IDE and design patterns by now... IDEs for PHP didn't even exist in 2003.
Two tutorials that might help: [10 Things You Can Do to Become a Better PHP Developer](http://sixrevisions.com/web-development/10-things-you-can-do-to-become-a-better-php-developer) [Top 10 MySQL Mistakes Made By PHP Developers](http://blogs.sitepoint.com/mysql-mistakes-php-developers/) The headlines sound like they are for advanced developers. But they are not in my opinion.
Most of it looks ok. It will give you a very basic foundation but doesn't even touch classes.
Why does this comment have -4 downvotes? Why did 5 people (at least) vote it down??
Link?
Tumblr more like bumblr
http://pastebin.com/R2PJa6BU
Teh Google seems to have [caught it](http://i.imgur.com/PDowT.png).
I think this is it: http://pastebin.com/R2PJa6BU [Mods, if this is breaking rules, please delete this comment. I'm heading out for lunch]
a more readable version: https://gist.github.com/29c5c5970d1f3313abd1 probably the programmer was VIMMING too much .. 
Wait, Tumblr runs on PHP? I thought it was part of the Ruby/Git/MQ generation? It's always interesting to see the code that runs these big sites, if just to see how imperfect and well, normal, it is.
This is why evaluating your configuration natively is wrong, it should be parsed from ini, XML or json outside the webroot.
Official update from tumblr: http://staff.tumblr.com/post/3959106211/update-regarding-security-issue
Oh man, I had forgotten about ini file parsing in php! Definitely will be using that for API keys now. Thanks Tumblr!
Can you elaborate on this method, or maybe give me a link?
http://www.php.net/manual/en/function.parse-ini-file.php
http://ie2.php.net/manual/en/function.parse-ini-file.php
So what's the opposite of clean code?
I love this file name: require_once('lib/GiantOctopus.php');
It's best practice to expose as little PHP (or any other language) as possible, in case the handler doesn't parse it. In this case someone seems to have borked the php opening tag, but something else that's also likely is a botched software upgrade that results in Apache running without PHP. Now all .php files are served as plain text directly to the browser. This is especially true for low-budget shared hosting servers. That's the reason why you'll want as little PHP in your publicly accessible directory. My index.php generally only consists of: &lt;?php require_once '../application/Application.php'; So if for some reason the PHP file is served as-is, that's the only thing leaking out. The rest of the PHP code is outside of the publicly accessible document root directory. This is also [the layout that Zend Framework encourages](http://framework.zend.com/manual/en/learning.quickstart.create-project.html).
Spaghetti. 
Ouch... Thats pretty bad.
That'll be the last time that developer says "stuff it, I'll do it live" (for a while, anyway)
My configuration is just a list in an array, as such: return array("db_name" =&gt; "derp", "etc" =&gt; "lol"); Where: $config = include("config.php"); How is that much different?
An awful collection of PHP and HTML, notable: &lt;tr bgcolor="#A3D8FF"&gt;&lt;td valign="top"&gt;&lt;div style="width:240px; word-wrap:break-word;"&gt;&lt;b&gt; Repeated for *every single table row*. And &lt;br/&gt;&lt;br/&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;include("/var/www/apps/tumblr/config/routes.php") Peppered copiously throughout. Have these guys ever heard of CSS?
How is HeidiSQL? I agree, once i switched to apps, i never use the web based solutions anymore. I've been using Sequal Pro on my mac and Navicat for work. Not sure how I feel about Navicat but SP is pretty nice.
I do this in Kohana (native) and can see how that'd be bad. I'm going to write a new config reader for ini files.
https://developer.mozilla.org/en-US/docs http://htmldog.com/
The point is that _code_ is revealed when you make a typing mistake. If your configuration was stored in an .ini file then all that'd would be revealed is that you've loaded an .ini file.
If config.php is in your webroot, you make it that much easier to pull out the data. If you do that you're **NOT (see edit)** fine, though it makes configuration files look messy, however you have to make sure your config.php is stored *outside* of your web root folder so that even if Apache gets b0rked and starts displaying PHP source, someone still can't find your config. **Edit** SniDa makes a valid point I missed, including a file that has the same issue with the `&lt;?php` tags will still cause the information to be printed, even if it's outside the root, because including a non php file will just print the output.
I'm pretty sure that doesn't change anything. The file would still be included and then execute/displayed.
[Zend_Config](http://framework.zend.com/manual/en/zend.config.html) has a nice collection of INI, JSON, YAML, and XML readers that go beyond parse_ini.
You say that now, but I bet you never noticed the mistake on tumblr before the leak (and that's all that matters right?).
AKA Dirty Code.
that will happen only if you default it to "current_timpestamp on update current_timestamp". 
The point is: in the event that you do something so that the file ISN'T being ran in the first place, like i?php instead of &lt;?php, the revealed file's location is out of the public's reach. Edit: I'm sorry you got do many downvotes. I'm undoing mine. 
No, if the file is served as-is nothing is executed or included. 
AKA "What the f... is this shit?" I don't know if I like the idea of calling code "dirty". Dirty makes me think of smudges and maybe a spot of jam smeared on the corner. Code is more *messy*, with books and papers stacked all over the desk and maybe some dirty socks laying a few feet from the hamper. The average code I come across now is a lot nicer than it was 10 years ago. If there's one thing all that OOD really did was it got people to organize their code better. 
&gt;slightly outdated MySQLi was available in... 2004? and they haven't updated to that yet Absolute shit in my opinion
&gt;If it comes from anything that's not a hardcoded string, assume that you're under attack from Little Bobby Tables Totally agree with this. You can't trust *anything* in PHP security, it isn't paranoia, it's being safe. Essentially, anything that came from a client at some time or another is untrustable.
.2. An IDE is really not necessary unless you are coding something like C# which needs a crazy amount of build configuration and code to get something to be organised or working. .3. Please don't go on those "SQL forefathers" style debates like you're database god or something. Nobody cares about the 700,000 types of index searching trees but you. .5. ORMs are a joke for anything more complex than "select * from items where id = blah" .6. Design patterns are zero to do with: code maintainability, security, organization or efficiency. Yeah, sure, Mr. A doesn't know PHP's libraries for crap *BUT IT'S OKAY BECAUSE HE KNOWS THE FACTORY PATTERN!*
If you choose to use an ini file make sure you cache the data as a naive php array to avoid overhead. 
select * from massive_table_with_700_blob_columns =&gt; Bad select * from little_table_that_links_together_other_data =&gt; Good
**There is no more VC6 build.** From the [release announcement](http://www.php.net/releases/5_3_6.php): &gt; Windows users: please mind that we do no longer provide builds created with Visual Studio C++ 6. It is impossible to maintain a high quality and safe build of PHP for Windows using this unmaintained compiler. &gt; &gt; For Apache SAPIs (php5_apache2_2.dll), be sure that you use a Visual Studio C++ 9 version of Apache. We recommend the Apache builds as provided by [ApacheLounge](http://www.apachelounge.com/). For any other SAPI (CLI, FastCGI via mod_fcgi, FastCGI with IIS or other FastCGI capable server), everything works as before. Third party extension providers must rebuild their extensions to make them compatible and loadable with the Visual Studio C++9 builds that we now provide. &gt; &gt; All PHP users should note that the PHP 5.2 series is NOT supported anymore. All users are strongly encouraged to upgrade to PHP 5.3.6.
This... If it's not something you hit directly via a url, it shouldn't be in the docroot.
Yes, it goes to show there was NO QA done in this release. THat's absolutely atrocious for a site that large! I mean, I do QA myself on my own shit before launch. I wouldn't dream of editing production live, ever.
Humblr.
#1 is incorrect, memcached is meant to lighten the connection load on your database server, not to cache long queries. Your database server should always be able to return the query faster than memcached would, once it's properly tuned then you can use memcached to avoid a million connections to the database at once... Using it for long sql queries is for lazy people that refuse to tune it properly, and this is a quote straight from the memcached developers "memcached is not a fix for you writing bad queries".
Or, you know, just make sure to store everything but your index file outside the web root like any sane person would do.
ini file parsing is a waste of time. Just use constants in a php file outside of your web root.
It looks like it's just framework generated output used for error display/debugging, which doesn't really make sense to extract out into its own CSS file.
Even if it's outside of the web root, an error like this one (i?php) can still cause the config.php to be displayed since the config file is being included via PHP.
Surely using a `style` element above the large body of debugging output and applying classes accordingly would be more manageable than a mess of inline styles and `bgcolor` everywhere.
It's marvelous for making lots of changes at once (copy/paste rows, reordering columns, temporary filtering, etc.). Very stable and just the shift from the page refreshes was enough to win me over permanently. I've hit a few snags with accessing web-based databases, but I usually build locally and just export and query on remote. Plus it works on Wine so it's at least partially cross-platform.
No, because the php is not being executed, so the file never gets included.
Or, you know, you could test your changes before pushing them out to production. 
That wouldn't actually fix the problem, if you include a PHP file with constants and it evaluates as not php it'll include the raw data in the resulting output file and would still result in information disclosure. Also, you can't put arrays as constants, if your applications are simple enough to not require any configuration arrays I envy you. 
Doesn't matter, include() a non-php file and the output gets passed on.
Won't protect you against this type of issue.
Thats just awful in so many ways, its really crying out for a much more robust solution to the problem. That said, the overall problem there seems to simply be one of that file outstripping its original intentions and I think is ultimately due to a lack of resources/time on the part of tumblr to fix "problems" like this and is IMO forgivable considering their startup status, I'm sure it'll get moved up now on the list of "things to fix" now. Does anyone know if any of the other code like the Database or ShardManager code was leaked? I'm kinda curious to read those.
Shakin is right. PHP allows you to include files out of the webroot (thus inaccessible by 3rd parties), and, if for some reason PHP fails to/doesn't parse a file, you'd only be able to access the source code of the files within the webroot. Parsing INIs/XMLs/YAMLs/LOLs/BBQs adds an unnecessary overhead and can in most cases be avoided completely (or cached to native PHP, *outside of the webroot*).
Yes, it will.
This. All this "THIS IS BEST PRACTISE HIVEMIND AGREES" shit on here is annoying. This is because someone made a stupid mistake. Any sane code editor would also turn your PHP a really weird colour. 
No, actually, it won't. -=[~/test/webroot]=- -=[Sat Mar 19]=- -=[18:08:22]=- [adam@thanatos]$ cat ../config.php #?php define("FOO","VERY SECRET DATA"); -=[~/test/webroot]=- -=[Sat Mar 19]=- -=[18:08:32]=- [adam@thanatos]$ cat index.php &lt;?php include("../config.php"); -=[~/test/webroot]=- -=[Sat Mar 19]=- -=[18:08:34]=- [adam@thanatos]$ php index.php #?php define("FOO","VERY SECRET DATA"); 
No, if PHP fails to parse the file due to a syntax error you'll get an error, If php fails to parse that file because it doesn't think its a PHP file -at all-, include() will just display the contents: -=[~/test/webroot]=- -=[Sat Mar 19]=- -=[18:08:22]=- [adam@thanatos]$ cat ../config.php #?php define("FOO","VERY SECRET DATA"); -=[~/test/webroot]=- -=[Sat Mar 19]=- -=[18:08:32]=- [adam@thanatos]$ cat index.php &lt;?php include("../config.php"); -=[~/test/webroot]=- -=[Sat Mar 19]=- -=[18:08:34]=- [adam@thanatos]$ php index.php #?php define("FOO","VERY SECRET DATA");
Obviously you shouldn't be defining anything important in your index file. All you really should be doing is including a bootstrapping file located outside the web root, and that file will take care of everything. If they had done things right, the only script file in their web root would be index.php, containing something like: &lt;?php require '../bootstrap.php'; These aren't exactly cutting-edge security measures, just basic precautions you should take with any server-side code. It amazes me that people are so slow to catch on.
Huh, it would never have occurred to me (because why the hell would my &lt;?php tags suddenly stop working? oh well, evidently it happens). I guess I'm gonna add a bunch of ob_start()s around my require()s as a stopgap measure.
Use serialized data instead.
if you use &lt;?, and short_tags goes to off that can happen, i've seen that too many times to count.
Unless of course, your bootstrap files works fine (since the &lt;?php tag is intact) but the configuration file you load from there (via include()) is broken and discloses the data.
oh, also, ob_start isn't a panacea unfortunately, if you throw a fatal error inside your require'd code the equivalent of ob_flush is called :(
I use INI files, but I don't do things that are huge traffic (1000s of requests/second) and the php ini file parser is fast enough for me.
I agree with you on #5 that ORMs are a joke. I meant to say that using ORMs as a crutch is really bad. The rest, haha hahaha haha! i can only hope to clean up your code after you've left and the company's site is hacked and crashing ;-)
You do realize that once an insert or update is done on a table, any table, that hte SQL query cache is cleared in MySQL 5, right???? About lazy people, I agree for hte most part. But sometimes reports and such need to be fast.
Ah, crap. Thanks. A configuration file it will be, then. (I'm thinking JSON so that it's both human-editable and easily decoded by a function call.)
Fumblr
What an insightful presumption. Anyone with even a *hint* of nonconformity in their coding is clearly wrong, as everyone knows, anything liked by many people has no disadvantages. Hacked and crashing? Sorry, I'm actually actively using security principles in my code, not deferring it to some other source. Unlike the bubble of 65-95% of /r/php's *so very logical* argument, not everyone who doesn't conform to trendy TLAs, the latest linking standards and the hippest hierarchies writes code like "$ResultOne = mysql_query("Insert into table values($Lol, $Two, $Tree)". In fact, very few of those posting here probably do. With the framework side, there's the argument that "if Mr. X picks up your stuff he'll know what it means". What if Mr. X doesn't know said framework? Despite using those same TLAs touted by trendy tie wearing businessmen of the 80s, frameworks are very different. If my way is organised, secure, speedy and maintainable, it makes no difference for them to use my specialised, compact arrangement than a behemoth of code I don't understand or even use. With PHP there is no one way (not to be taken literally; approaches can vary but their outcomes shouldn't differ). Peace out. 
Yeah, god forbid they look at those 3,000 line files that are actually just a load of glue code with 2,500 lines of autodoc comments. 
Thinking about this a bit, Use your complex XML or INI or whatever you want, distill that into a serialized data structure which you store/fetch via apc/memcache/redis/cassandra/whatever. You can either automate the process of updating the memory-based version (if mtime(config.ini) &gt; mtime(apc_segment)) { re-parse config file and save to memory } or just have small script that parses the ini file and pushes it to memory when you make changes
dumblr
i like this book. i think it is good..
they dint update it because it was unstable back then compared to the traditional mysql function and still remains to some extend. Check out the crashing bug with long text: http://bugs.php.net/bug.php?id=46808 Sure I do agree with you that it may be a lot more than slightly outdated but it is always a good starting point to teach yourself the basics. Try teaching someone about sql injections who don't have a good understanding of sql or how http works; even thought it looks like a simple exploit, it will confuse most.
But editing this config.php file is how they manage their production infrastructure. See all the comments about "this DB server is going down for maintenance, commenting out it's IP address in this file to take it out of the cluster" :P
You also realize that sometimes the query cache is turned off completely on higher end mysql databases? The query cache also isn't meant to fix badly written slow queries. For reports there are also better ways to do things than trudging through all the table data compiling the information - such as scheduled creation of some of the more heavy data for reports and/or data cache entries to avoid going so far back in the raw data everytime.
You can restrict access with an htaccess file and keep it inside webroot. Then it wouldn't mater if apache stops parsing php (put all your bootstrap/config into a folder and "deny from all" via htaccess). Just another option for those within a shared hosting environment or similar where you cannot play outside of the webroot.
This might help http://stereofrog.com/blok/on/070910 
Do you want them to be actual words? If so, then you will need a list of words. But if you just want... say user enters CvC: BeB, CeC, DeD, etc. That's pretty easy. Just need two arrays, one with vowels, and one with consonants. Use a for, foreach, or while loop to walk through each array and the other. For example: $a1 = array(B, C, D); $a2 = array(A, E, I); foreach ($a1 as $cons) { foreach ($a2 as $vows) { echo $cons . $vows . $cons; } } EDIT: Take note you will need to add to that code if you use it. (quotes and such)
[/r/phphelp](http://www.reddit.com/r/phphelp)
I think the point indeh was trying to make was that if the php isn't being interpreted for the file that does the including, the source of the included file won't be revealed.
Yes, except your wrong about that as is indeh, if you include() a file, the parts outside PHP tags it assumes are (not php|HTML) and passes them to the browser unmolested. This is, of course, assuming your using (include|require)(_once)? [POC](http://www.reddit.com/r/PHP/comments/g70iy/mistyped_tag_leads_to_exposure_of_tumblr_db/c1lf0h0) 
Appreciate the help Javlin, any chance that last snippet of code you put could be put in a usable format? (quotes and such). Appreciate it.
My first guess would be permissions. If permissions are OK, check the user comments here, they mention a lot of common errors, a couple of which I have done before myself: http://php.net/manual/en/function.move-uploaded-file.php
I think you may have forgotten links to your software.
Ok, I'm aware I'm venturing into stupid territory now, but how do I check permissions?
Nevermind, fixed it, thanks. It was an issue of the directory path.
Mirror?
Why does this seem to happen alot? Are people looking for evidence that people are looking at what they wrote?
I expect they put the link up and then realise it needs to be a self post and forget to include the link in the text.
I don't use longtext columns. I don't store novels in my database. EDIT: Sorry, wrote this as if you were someone else. Anyway, the point still stands, I've yet to see longtext fields in a real application...
3rd'd. I need a good one.
PM me. Maybe I'll help out with this.
I'd google "singleton" to see how to reuse an object throughout your application without having to initialize it each time. More or less, you'd make a new _connect method - the connect method will look for a class variable ($db) - if the variable doesn't exist it will connect to your database, set the class var, and return it. If it does exist, it will simply return it. This is obviously an oversimplified example (it's been a while since I actually had to write a Singleton - but if nothing else the term should put you on the right track).
Looks like they noticed it... Down for maintenance and they say on the Twitter feed that they were hacked... However PHP Fog itself sounds pretty nice, going to look at it when it goes back up.
Sounds good. I'll look into that. Thanks :)
I have has this problem before. This is probably not the correct solution but I ended up just using a blob.. Good luck
That is exactly what happened, plus I haven't been able to sleep, really tired and didn't check. Thanks for letting me know =).
You should try phpMyAdmin. Not on a production machine though.. The good thing is that it shows you the query that it uses to complete each task..
It's due to the way computers store numbers in binary. In order for the database to know how much memory it needs to set aside for the value stored in a VARCHAR type column it needs to know how many characters may be used. That number you provide, 0-255, is converted into a one byte number (a series of eight 0's or 1's) which can hold a maximum value of 11111111 which is 255, and then stored in memory for the database program to reference. If you want to store more than 255 characters then try using a different column type which allows for more characters than you'll need. [This is a good reference of columns types and their limitations.](http://help.scibit.com/mascon/masconMySQL_Field_Types.html)
Drupal. it's entirely AOP. Doesn't even use the word "class" once.
Hey, I'm impressed at what you've done as a beginner! I don't know if your stuff is open sourced or proprietary but I wouldn't mind looking over your code and making some improvements here and there for free, as long as it isn't licensed under the GPL. Just send me a privmsg if interested.
Those are error statements added by PHP itself when it encounters errors in the code, and the massive table seems to be a hackish debugging aid - it's a list of places where errors were encountered, and some CSS/Javascript to make it shiny. Honestly, it looks like they pushed the wrong branch from their VCS to the production servers.
I don't see where frameworks were discussed at all.
Um, that bug is marked Status: Bogus. There goes the foundation of your argument.
No, blak and I are correct: !?php include '/some/path/private_data.php'; ?&gt; private_data.php is not included, as the php is never executed. Now if the original situation was the the file doing the including was valid and only the include file itself was incorrect, yes, that would be a problem. In the context of this thread, though, it was not specified which file was problematic. I don't see how you could interpret blak's clarification as wrong.
There was a way to gain access to a EC2 instance: http://www.reddit.com/r/PHP/comments/g7iqc/manipulating_php_fog_to_get_full_access_to_a_free/
From the command line: ls -l From Nautilus: right click &gt; properties &gt; permissions tab From anything else: consult software help file. Most FTP programs have it in a right-click menu somewhere.
Odd as I was able to run your SQL statement in my SQL editor and the table was successfully created. Have you tried using something like HeidiSQL to run your queries? Also if you are doing this in a PHP script is everything escaped correctly?
Calling them a 'group of hackers' is laughable. PHPFog was incredibly unsecured, it didn't take a lot more than editing a single line.
Thanks for posting this! I've been working with MAMP locally but my server is set up with Nginx so now I can work in an environment that's closer to my live settings. Never worked with Percona though but it sounds like it acts as a direct replacement for MySQL.
Yeah it was done by two 16 year olds.
Executes flawlessly for me in MySQL 5.5.8. Which server version are you using?
Yes I followed the facepunch thread. I think what compwhizii did was ridiculously immature though.
or was it 16 2 year olds?
Ok, so, if the file that you never edit (because its just a single include()) has a mistake in it your fine, but if the file you need to edit frequently (because thats the one where you actually have the configuration settings) has a mistake in it you've potentially disclosed information. Which of these two files are you more likely to make the mistake in? That said, this discussion is pointless and has devolved into semantics, the whole point was that making your configuration files PHP code can lead to disclosing the data in them. That point is still valid, your vulnerable in a way that making them ini-formatted files is not vulnerable to.
I was hoping that the programming and web dev sections of Facepunch would have evolved past shit like this but apparently not. Good thing I stopped reading FP.
&gt; [...] Even though I am using TEXT with no key length.
Does Percona have any big advantages over MySQL?
If anyone has any questions about this, I am sure they will be answered in this snippet from the site: &gt; MAMP used apache and php as module, a way to implement that takes years. Currently, there are more sites that have thousands of requests at once and It can cause death site.
TIL...
One thing you can do is jump into the PHPBB code and change the variable names on the signup page to crazy nonsense stuff. The bots know PHPBB &amp; vBulletin like the back of their cold metal hands. Changing things screws them up... for a little bit of time. AND GET A DIFFERENT CAPTCHA the default out of the box one is sooooooo easy for these things to crack. Use recaptcha or one of the picture ones (where you have 3 animals and you have to click all the gorillas or something like that.) 
Add CAPCHA to it. Not sure what version you have but here's a way to do it: http://www.matthewleverton.com/howto/phpBB2-captcha.html
reCaptcha can help. Limiting posts to 1 per 30 seconds or more can help because a lot of bots just leave after the first rejection. Creating a field that is hidden with CSS and checking to see if it is still empty after submit can help because most bots will fill in every field with some kind of data. A flood control mechanism that checks for rapid posting and locks out the user account and/or IP address automatically can also help. Bad Behavior can help too, http://bad-behavior.ioerror.us/ .
phpBB2 is many years obsolete. Here's the link to the current captcha module information: http://blog.phpbb.com/2009/06/27/3-0-6-captcha-plugins-and-you/ I don't think there have been any major changes between 3.0.6 and 3.0.8.
I haven't used phpbb in years. I knew the newest ones had it so I just assumed he was using one of the older ones that didn't have it. But to be totally honest, all i *really* did was google "add captcha to phpbb"
I hear ya. I just glanced at his board to make sure he was using phpBB3. Given that it's built right into phpBB3, including a recaptcha module, it should have been common sense for him anyway. The menu item is called "spambot countermeasures".
There are a few plugins on [StopForumSpam.com](http://www.stopforumspam.com/). I've been using a plugin from there for the last few weeks and its caught about 95% of all spammers.
recaptcha..
To automatically create a single connection to the DB, you can use the **singleton design pattern**. It's very easy to implement, but it has an important drawback because it's not a good option for unit testing. Your code looks like a very very tiny ORM. These tools are used by most of the PHP frameworks, either as internal (ZF/ZendDb) or external (Symfony2/Doctrine). If you really want to avoid writing SQL queries, have a look at Doctrine. I'm not sure writing this yourself is very useful, see below why. First, your code looks a bit "uneasy". For instance, using counters in array loops is, most of the time, a bad idea. Beginners coming from C would write like you: $columns = array_keys($conditions); for ($i = 0; $i &lt; count($columns); $i++) { if ($i != 0) $query .= ' AND '; //The first value doesn't need this. $query .= "$columns[$i] = ?"; } Whereas the following code is far more readable: $conds = array(); foreach ($conditions as $col =&gt; $value) { $conds[] = "`$col` = ?"; // note the column name escaping } $query = join(' AND ', $conds); There are also some very ugly lines of code (like 120-125) that show you don't know PHP's basic functions (like str_repeat()). I believe you didn't read all PDO's documentation. For instance, you missed the ability of execute() to receive an array of parameters: so you can delete a loop and 6 lines of code if you just write: $statement-&gt;execute(array_values($conditions)) One remark: your doc format isn't PHPdoc nor doxygen. You really should stick to PHPdoc, especially if you use an IDE. Have a look at the syntax of @param and @return, the two most important tags. There might be a problem with your get_var() method. If your PDO uses unbuffered connections, then you cannot send a query while the previous one hasn't been read to the end. So you probably should add a closeCursor() call. After these rather superficial criticisms, I'll try to talk with a bit more depth. Suppose you use your *select()* method. Then one day you need to update your query. Nothing much, just a *JOIN* and a *GROUP BY*. Oh, you'll have either to make your method evolve with a new parameter, or rewrite your call to use a full SQL query instead of your method. Both aren't satisfying. That's why I would recommend to stick with raw SQL or to use a full ORM that won't drop you on the way.
 $username = $_POST['username']; $pw = $_POST['userpw']; $sn = $_POST['sn']; $email = $_POST['email']; $permission=$_POST['permissions']; $sql="INSERT INTO users (username, pw, email, sn, permission) VALUES ('$username','$pw','$email','$sn','$permission')"; $result = mysql_query($sql); Bobby Tables, calling Bobby Tables... --- Edit: After looking at some more code and your site, two things stand out at me: &gt; This is just to try and show clients that I am able to do this kind of work. So it's for my portfolio. and &gt;If you need help with the installation process and putting it into your site, I charge $35.00 which you can pay via paypal. I'm trying to not be too harsh here, but you're part of the reason why PHP gets the rep it does. I applaud you wanting to put something out there, but in all honestly, nothing you've written is passable. Charging money for help for this is misguided and arrogant. There are plenty of decent resources out there to learn from. Pick up a framework and read the community tutorials. Read r/php and r/phphelp. Read the manual, but take the comments there with a pinch of salt.
I get the IP address showing on my forum as seen in the image above, is there a way to turn that into the URL it comes from? Some cut n paste php code that takes the ip variable?
Yes. I'm not sure the exact names of the keys, but if I get it wrong, you'll just print_r($_SERVER); and pick out the ones that are close. $ip = $_SERVER['REMOTE_USER']; $referer = $_SERVER['HTTP_REFERER']; //Code here to save the data in a database
What you're asking doesn't make sense. IP addresses don't come from URLs. You might mean the hostname; try gethostbyaddr: [http://www.php.net/gethostbyaddr](http://www.php.net/gethostbyaddr). Or you might be looking for the [HTTP referer](https://secure.wikimedia.org/wikipedia/en/wiki/HTTP_referer), which is sent (voluntarily) by browsers and contains the URL of the page that linked to the resource currently being requested; see misplacedme's comment below.
Basically, you are not doing what you think you are doing. The error messages don't match up to the code you are saying is executing, meaning that the code being executed is not the code that you think. A debugger may help you track down the problem.
Ok... Thank you. I took down the $35.00 charge, I really don't want to come off as arrogant. I just want these two programs done correctly. I mean, things need to be done correctly, and I've just been staring at these two things for so long I think it is time to ask for help. I've googled "Bobby tables", and ran into a funny xkcd strip that explains the importance of "SQL injection". This is good, and is pointing me in a good direction. So thank you =).
Thanks! I'll look into it :-)
Thank you for your help, I'll chase that down. 
recaptcha will try to stop bots from posting akismet will automatically examine posts and try to see if they're spam
phpBB, eh? That thing gets spam all the time. It's also hard as sh*t to customize. Avoid at all costs. Use others like FluxBB, ipBB, etc.
larry ullman's ain't bad http://www.larryullman.com/category/php/
Here you are, now you will have to get the user input such as "CVC". Should be simple enough, this will print out every possible 3 character combo. &lt;?php $cons = array('B','C','D','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Z'); $vows = array('A','E','I','O','U','Y'); foreach ($cons as $con) { foreach ($vows as $vow) { echo $con . $vow . $con . "&lt;br/&gt;\n"; } } ?&gt; EDIT: By the way sorry it took me a while to respond, I was at a party. EDIT2: Got bored... So here you go. Just make sure you enter more than just one character. (Not just one "C" or "V") It doesn't work with out one V or C, anything else it works. I could fix it... But I don't feel like it =D &lt;?php function cv($s) { $toEcho = null; $len = strlen($s); $cons = array('B','C','D','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Z'); $vows = array('A','E','I','O','U','Y'); foreach ($cons as $con) { foreach ($vows as $vow) { for ($n = 0; $n &lt; $len; $n++) { if(strtolower($s[$n]) == 'c') $toEcho .= $con; else $toEcho .= $vow; } $toEcho .= "&lt;br/&gt;\n"; } } return $toEcho; } echo cv('cv'); ?&gt;
There is technically something called a Reverse DNS record, which lots of email providers like gmail and comcast require you to have setup on any IP address that you run a email server on, or your mail will likely be marked as spam. Using this system you can turn an IP address into a hostname, exactly the same way you turn a hostname into an IP address using regular DNS... BUT it is entirely reliant on what the system admin has setup as the reverse DNS record for that IP, and doesn't necessarily represent the referring site URL. So what the op is thinking, does sorta make sense... but its not the best way of obtaining the information he wants.
 $_SERVER['REMOTE_ADDR']
Percona has more stability and better performance. It backports many features from MySQL 5.5 and has quite a few additional features. It's developed by the authors of the [MySQL Performance Blog](http://www.mysqlperformanceblog.com/) and [High Performance MySQL](http://www.amazon.com/High-Performance-MySQL-Optimization-Replication/dp/0596101716?tag=perinc-20). It remains API compatible so you can use the standard mysql client libraries, as most of the differences are internal, making transition very easy. We switched to Percona at work recently, after being introduced to it through the XtraBackup utility that they distribute. This is one of the best innodb hotbackup tools I've seen, particularly for the price of free.
Ah, that's right. REMOTE_USER is for an apache authenticated user...
Aggregators: http://planet-php.net http://phpdeveloper.org
I have tried BLOB with no luck.
I have this book... and I hated it. Then again, this was about 5~ years ago, back when I was a real newb. That being said - I have the 2nd edition, and again I was a real newb back then. I really liked the PHP book by Visual by Whitehead (ahem) and Desamero. I found it much easier to understand as a beginner. [This book](http://www.amazon.com/PHP-blueprint-creating-server-side-content/dp/0764583328) seems to be the equivalent. 
Hey, the error occurs when I insert more than 200 words
Hey, thanks for the recommendation, ill check it out 
Hey I am using 5.1.49
Thanks for correcting me, I never considered a case where failure is partial. I have something like this as a safe guard (also against fatal errors): &lt;?php function shutdown(){ if(!defined('SECRET_CONSTANT')){ ob_clean(); echo 'u mad?'; } else { //carry on } } register_shutdown_function('shutdown'); include('tumblr.php'); Now you can also hash a serialized get_included_files() and use that to make sure ALL the files have been loaded exactly as expected. Paranoid? Yes. But might be an option depending on how valuable is the source code, and how likely you are to experience such an error... 
Replying here because Colonel-Rosa is buried. Here is an example of why this is not enough: http://www.reddit.com/r/PHP/comments/g70iy/mistyped_tag_leads_to_exposure_of_tumblr_db/c1lf0h0
You are completely correct and these guys are idiots.
 PHP-centric blogs (mostly): * [Barely Sufficient!](http://olemarkus.org/) -- Ole Markus * [Phly, boy, phly!](http://weierophinney.net/) -- Matthew Weier O'Phinney Programming, but not necessarily PHP: * [Martin Fowler!](http://martinfowler.com/) * [Coding Horror!](http://www.codinghorror.com/blog/) -- Jeff Atwood * [Google Code Blog!](http://googlecode.blogspot.com/) * [Google Testing Blog!](http://googletesting.blogspot.com/) * [Joel on Software!](http://www.joelonsoftware.com/) -- Joel Spolsky * [The Changelog!](http://thechangelog.com/) * [totes profesh!](http://www.garann.com/dev/feed/) -- Garann Means 
&gt; There is no pay or anything, but you get to be part of this fun open project. :) Good luck!
I'm a big Larry Ullman fan. I subscribe to his newsletter (one just came out today). He really listens to his community and responds personally not only in email form, but also on his own forum. http://www.larryullman.com.
MyBB is awesome and I haven't had any problems with spammers :)
My All time Fav is http://www.php.net/manual/en/
I am truly speechless. You have no idea how much that code was helpful, a million thanks :)
There are a [few ways](http://sebastian-bergmann.de/archives/573-Current-State-of-AOP-for-PHP.html) for this.
Nettuts+ Has a screencast titled "Diving into PHP" that may help a lot. The link is to episode 13, which is the final, but it has a list of all the previous episodes. http://net.tutsplus.com/articles/news/diving-into-php/
Giant Bomb seems pretty close to your idea. Check if you can learn anything from their API. http://api.giantbomb.com/
The reverse DNS lookup is what you get by calling gethostbyaddr. A reverse-DNS'd hostname is still not a URL. And it would be the hostname of the client requesting the page, not the hostname of the website they were linked from. (It would be a rare oddity for it to actually "represent the referring site URL".) You are right though that reverse DNS relies on the system admin providing it. It can be missing, wrong, or even spoofed. Email servers [should] use [forward-confirmed reverse DNS](https://secure.wikimedia.org/wikipedia/en/wiki/Forward-confirmed_reverse_DNS).
Thank you! This is exactly the kind of criticism I was looking for! I'll definitely be looking into the singleton design pattern as I move forward. As for the unnecessarily loops, you're absolutely right. I was unaware that the execute functions could be passed an array, and will bind the parameters automatically. I had also had a bit of a memory lapse regarding forgetting to use implode. I also had no idea str_repeat() existed as weird as that sounds. I knew my documentation wasn't quite right. I was just doing it from memory. I've fixed it up now. As for the suggestion to stick with raw SQL, I definitely see your point, but as you'll see me point out elsewhere here, this is just a function to cover 90% of my use cases. There's times where it doesn't so I do just use raw SQL as needed. I've cleaned up my coded as per your suggestions, and you can see the latest version [here](http://pastie.org/private/ghflezyrjjm8dvgrua1oa). Thanks again, I really appreciate it. I learn by example and through using the code rather than trawling through documentation line-by-line. I just don't have it in me to do that all of the time.
Lil' confused about what a blog is?
I forgot about that one. I had heard it was good too.
I know the perfect person for this job. YOU! Seriously, if you have an idea and can't afford or do not want to pay to have it done, roll up the sleeves and start working on it yourself. Its a great opportunity to learn a lot.
[Coding Horror](http://www.codinghorror.com/blog/) [The Daily WTF](http://thedailywtf.com/) These are the only two blogs I can think of that I actually read on purpose.
Blargh, I forgot about Joels Blog.
Bad Behavior works, but some will still get through. reCaptcha has been busted. Completely. The hidden CSS field does not work. I don't think it ever has. Do you really think a bot somehow cannot distinguish between the same rules the web browser is using to render the content? phpBB themselves have updated their post on preventing spam [see here](http://www.phpbb.com/community/viewtopic.php?f=46&amp;t=2122696), however the outlook is grim. They claim a unique QA captcha works, and I have also found Blocking UTC-12 Registrations to be effective. However, I believe it's only a matter of time before the latter is defeated. I could write a bot tonight that picked a different time zone. Bad Behavior though, it will stop a lot of traffic.
I did this. I wrote a tiny mod that not only changed the GET variable for registration, but changed it every day. The idea was sound: bots have a list of known forums, and these bots are likely directly requesting the forum's register page. Every forum has the registration page at the same path, so they can just burn through an entire list multiple times over. Changing your path and making yours unique then should defeat them. It did not work. At all. I think the bots that were unsophisticated enough to be defeated by this approach were already being stopped by a captcha.
Its awesome. It is the closest to vBulletin in terms of usability that I've seen. Its a dream to work with from an open source standard.
I'll help out. I like projects like this. I will NOT do any design though. Not unless you want it to look a like something a dog puked out. I'll program the api and do the database work though.
Thanks for the glowing review. Just downloaded it. I'll give it a try and compare with my current favorite, FluxBB.
Interesting lists
Personally, I am more likely to make the mistake in the including file. When I'm developing software, I hardly ever change the included credentials file, but I do frequently change the files that call it.
How has reCaptcha been busted?
By the sheer fact that I have it enabled on every forum I administer. And every forum I administer is suffering a hailstorm of Russian attack robots. I'm sorry. It was a well founded captcha that accomplished a goal of digitizing books while keeping robots at bay. It has been defeated. [phpBB even admits this in their most recent update to their "Preventing Spam" post on their support forum](http://www.phpbb.com/community/viewtopic.php?f=46&amp;t=2122696). It is listed under the heading of **Broken Visual CAPTCHA Plugins**.
Perhaps another example of the failure of sarcasm in the written word... However, PHP.net is a Web Log consisting mostly of php classes, functions, and other useful information. Plus, readers can comment on any posts. I say it fits the bill.
Faskinating. Sounds like /r/php needs to come up with the next gen of CAPTCHA.
&gt; Perhaps another example of the failure of sarcasm in the written word... Someone's a little confused about [what sarcasm means](http://rhetoric.byu.edu/figures/s/sarcasmus.htm). Original respondant had not engaged in taunts, bitter irony or mockery. &gt; However, PHP.net is a Web Log No, it isn't. &gt; I say it fits the bill. That's nice. By that definition, so do wikis, youtube, most FAQ and help systems, most live support chat systems, Facebook, Myspace, walls, forums, e-learning systems, some nopastes, walls, review sites, Amazon, Yelp, cross-site comment systems like Topix and Disqus, browser site-commenting plugins, and even some old BBS doors. Not every definition fits every stupid thing on a basis of a handful of commonalities you see.
I prefer the blogs of PHP devs, as the posts are pretty much guaranteed to always 100% factually correct concerning PHP (unlike many of the blog posts in the wild concerning PHP, which range from slightly inaccurate to complete and utter FUD that is nowhere close to fact). While I may not always agree with their viewpoints, I always appreciate the fact that they provide insight into the _behind-the-scenes_ functionality of PHP -- things that only those familiar with the source code would know -- that you really can't find elsewhere (unless you grok the source yourself). These devs all contribute to PHP, but many have other PHP projects as well (listed in parens): * [Rasmus Lerdorf](http://toys.lerdorf.com/) (duh) * [Zeev Suraski](http://suraski.net/blog/index.php?/categories/1-PHP) (Zend co-creator) * [Derick Rethans](http://derickrethans.nl/) (Xdebug; the mcrypt, date and input-filter extensions; bug fixes, additions; leading the QA team) * [Ilia Alshanetsky](http://ilia.ws/) (current PHP release manager; Shmop, GD, Ncurses, SQLite, Tidy, FileInfo, StatGrab, FFI, POP3, Enchant extensions) * [Sebastian Bergmann](http://sebastian-bergmann.de/) (PHPUnit, PHP_CodeCoverage, test_helpers, phpcpd, phpdcd, phploc, phpdep, bytekit-cli, Object_Freezer, PHP_TokenStream, File_Iterator) * [Sara Golemon](http://blog.golemon.com/) (infrequently updated now, but she is the author of the [premier book on PHP extension authoring](http://news.slashdot.org/story/06/07/31/1416207/Extending-and-Embedding-PHP), and she still has some *excellent* info on her site)
The code sample you provided is to create a table, not to insert data into the table. I think you need to provide a better sample of the code you are trying to run.
Have you tried [Akismet](http://www.phpbb.com/community/viewtopic.php?f=70&amp;t=1340275)?
Anything that can be programmatically created, can be programmatically solved. CAPTCHAs so far have followed this cat and mouse game. Further, recent breeds of "CAPTCHA" which catch people's eye for being witty or unique, don't actually attack the problem from a meaningful angle. They're all flash, and no function. You know the ones which I am talking about: The jQuery Fancy CAPTCHA "drag the blue scissors into the circle". People are quick to point out how the Fancy example gives you a 20% chance of solving it by just dropping the first icon into the circle. What they never talk about is the fact that a robot can determine what an image is. It would be more work, but it would be trivial to write a robot who could defeat the Fancy CAPTCHA 100% of the time. The "click the image of the cute girl" CAPTCHAs, as if facial recognition doesn't exist. I think a key moving forward is going to be heuristic session analysis. Spam filtering for your email works in this way, analyzing several different pieces of the email. Headers, origin IP, email content, words in the message, links, how much the message matches known spam emails. These combine in to a final score, and past a certain score is considered spam. When I'm looking at a newly registered user, I do these same things to determine if they're spam or not. What was the email account? What was the username? What was the IP address? Origin country? Data center or consumer ISP? What page did they enter from? How much time are they spending on the page? It would seem I would be able to automate some of these tasks. Bad Behavior (http://bad-behavior.ioerror.us/) does a lot of these, including the ability to check their IP against a blacklist of known forum spammers. It's a great tool. Second, phpBB just needs to do a better job with some aspects. For example, if I set User Activation for an account, and they manage to beat the CAPTCHA, they sit in a moderation queue, forever. This allows a robot to register with real emails, and send these emails to an account where they can be automatically processed, or processed at someone's leisure. To the best of my knowledge, these accounts stay inactive forever, and their activation email stays good forever. I can poke through and come back a week, a month later, and turn the account on. They should expire and remove themselves, the sooner the better. phpBB has a Newly Registered Users group, but the things I can do with it are trivial. There's still no built in protection or control against users posting links, the leading form of spam anywhere. Banning an IP is overtly complex, and the ability to do so is completely lost once I've already deleted the account. In the face of culling spam, banning a username or an email address is frankly useless. One of the quick tools in the admin section should be a special type of "Spam Delete Purge" which 1) bans the ip, 2) deletes the user, and 3) deletes all posts in one shot. As it stands if I have any measure of incursion on a forum, these steps are drawn out and frustrating to repeat manually.
Most people communicate in high context. This is why I like more culture-aware dictionaries like http://www.merriam-webster.com/dictionary/sarcasm You could always just run through reddit posts (for the rest of time) correcting spelling mistakes and pointing out words that only exist in the urban dictionaries scattered around the web. 
The title of this post is misleading, as svn.php.net is hosted on a different server.
A little bit, but they were able to get commit credentials.
I think I'm going to work on a library that does ALL of the things you listed above. Want in?
&lt;form enctype="multipart/form-data" action="http://www.XXXXXXXX.com/phpforms/fileupload.php" method="POST"&gt; &lt;input type="hidden" name="MAX_FILE_SIZE" value="104,857,600" /&gt; &lt;table width="100%" border="0"&gt; &lt;tr&gt; &lt;td width="20%" align="right"&gt; Name: &lt;/td&gt; &lt;td width="80%" align="left"&gt; &lt;input type="text" name="name" size="50"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;br&gt; &lt;tr&gt; &lt;td width="20%" align="right"&gt; Company: &lt;/td&gt; &lt;td width="80%" align="left"&gt; &lt;input type="text" name="company" size="50"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;br&gt; &lt;tr&gt; &lt;td width="20%" align="right"&gt; Address: &lt;/td&gt; &lt;td width="80%" align="left"&gt; &lt;input type="text" name="address" size="50"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;br&gt; &lt;tr&gt; &lt;td width="20%" align="right"&gt; City, State, Zip: &lt;/td&gt; &lt;td width="80%" align="left"&gt; &lt;input type="text" name="cityStateZip" size="50"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;br&gt; &lt;tr&gt; &lt;td width="20%" align="right"&gt; Phone Number: &lt;/td&gt; &lt;td width="80%" align="left"&gt; &lt;input type="text" name="phone" size="50"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;br&gt; &lt;tr&gt; &lt;td width="20%" align="right"&gt; Fax Number: &lt;/td&gt; &lt;td width="80%" align="left"&gt; &lt;input type="text" name="fax" size="50"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;br&gt; &lt;tr&gt; &lt;td width="20%" align="right"&gt; Email: &lt;/td&gt; &lt;td width="80%" align="left"&gt; &lt;input type="text" name="email" size="50"/&gt; &lt;/td&gt; &lt;/tr&gt; &lt;br&gt; &lt;tr&gt; &lt;td width="20%" align="right"&gt; Additional Details: &lt;/td&gt; &lt;td width="80%" align="left"&gt; &lt;textarea rows="10" cols="36" name="details"&gt;&lt;/textarea&gt; &lt;/td&gt; &lt;/tr&gt; &lt;br&gt; &lt;/table&gt; &lt;center&gt;Select File:&lt;input type="file" name="user_file" /&gt;&lt;/center&gt; &lt;hr&gt; &lt;input type="submit" value="Upload File" /&gt; &lt;/form&gt;
Thats the form supplying the data, in case that helps.
&gt; This is why I like more culture-aware dictionaries Go troll someone else please, Kraven.
Yes, usernames and passwords of SVN users, which can then be used to make peer reviewed commits to the repository. Breaching the repository server implies things like touching the source code source thus skipping peer review altogether.
First do as dedpez suggested and manually inspect the content of $_FILES. Then look at the output of phpinfo() to ensure that file_uploads is on, and that the file isn't larger than upload_max_filesize or anywhere near post_max_size.
Thank you! That will be a useful troubleshooting step.
I set file_uploads on in php.ini and set the upload_max_filesize and post_max_size up to 100mb (the upload form is going to be used for design files) and the file I was transferring is 25k or so.
Additionally, I would recommend not using any commas in your MAX_FILE_SIZE field. This will not fix your problem at hand, but since it is a client-side protection mechanism, it might prevent you from running into problems where certain clients throw a fit over the thousands being separated by commas.
My apologies; I honestly read through the article somewhat quickly, and my title was based on my belief that the repository servers were in fact in trouble, to wit: &gt;The compromise of wiki.php.net allowed the intruders to steal account credentials that could be used to access the PHP repository &gt;All data on the compromised server has been wiped and the maintainers are forcing password changes for all accounts with access to the source repository.
Its through bluehost. I'll look into the other suggestions. Thx 
No. Although I use that for my Wordpress site and like it.
I switched to a Q and A instead of CAPTCHA
I'll give another upvote for Cherokee! I just tried it out for the first time today on Ubuntu 10.10. It took me a little time to understand how to do redirects with Cherokee (equivalent of Apache's mod_rewrite) but the load on my server seems minimal, it was far easier to setup and configure than nginx, and the performance seems to be about the same or better. In fact, I didn't really notice a very big different between Apache and nginx on my server performance-wise (they both used about the same amount of resources idle). My server doesn't get a lot of traffic right now, but all of the php-fcgi processes I saw meant roughly the same RAM was being used. I obviously haven't tested Cherokee under heavy load, but it couldn't be simpler to setup, and if the performance was on-par with Apache, I'd still consider it based on the ease-of-use it provides. The fact that it has even better performance is making me highly consider switching my production server over to Cherokee.
&gt; Go troll someone else please, Kraven. I would appreciate the same courtesy, Stone. In the majority of dialects, definitions are not static...thank god. 
When I echo var_export I get: array ( 'name' =&gt; 'manutd_15.jpg', 'type' =&gt; '', 'tmp_name' =&gt; '', 'error' =&gt; 2, 'size' =&gt; 0, ) Can you help interpret? It doesn't look like it's holding tmp_name, right? I don't even know what exactly to google to check that error, I'm sorry.
Will do. Thanks, it's those little tips that help a lot at my stage in the learning curve.
IMHO, the new version is better code. I won't argue on its usefulness, at least writing this code is an interesting exercise. I still suggest a few ways to improve it, but that's mostly details. First, your code doesn't follow any known code standard. For instance, you named a method `get_id()`and another one `showQuery()`. PHP code mostly uses CamelCase (PHP official functions are a mess). Have a look at ZF, PEAR and Drupal standards. You have no obligation to follow one of them, but I believe many developpers are used to ZF|PEAR. I also like their recommendation to always put {} around a block, even for one line. It's more readable and less error-prone. It's usually a bad idea to close your PHP tag with `?&gt;` at the end of a PHP only file. If you had left a space after this tag, then you'd induced a nasty and hard to find bug. I'll finish with a criticism that is theoretically important, but in practice it's the same as a previous remark. There is an OO design flaw in your class. `get_var()` is not at the right place. First, this method doesn't use the current object, so it should be static. But it acts on another object given as a parameter, so this parameter should be the container of the method. // current use case $statement = $db-&gt;prepare($sql); $result = $db-&gt;get_var($statement); // should be $result = $db-&gt;prepare($sql)-&gt;get_var(); It means you should also subclass PDOStatement, move get_var() into it and overload PDO::prepare(). And then your new method would behave just like [PDOStatement-&gt;fetchColumn()](http://php.net/manual/en/pdostatement.fetchcolumn.php). Don't underestimate PDO, bis repetita!
Just from browsing the code it is obvious you put a lot of work into this which is great. I personally could not devote the time required to give this much back to the community. As another poster has mentioned you really need to protect the application from SQL injunction &amp; XSS. This type of project really would have benefited from using a framework as well but recoding everything into a framework might be more time than it's worth. Search around for PHP &amp; MySQL security and double check your code for any security bugs before releasing it into the public. I also messaged you about another possible security issue. 
Assuming this service was secured, is it your view that PHP Fog would be useful, or not useful, to PHP developers?
excellent, thank you!
(written 5 years ago)
This is a good start, much better than mine. Create a simple abstractions classes for all DB queries. Make sure you do not have any sql outside of these classes. Main Class, with basic connection and table handling. Classes for each table, with gets and sets. Makes life much easier later on.
I strongly recommend taking down the demo's untill you fixed the SQL injections. Basically there's injection possible in every field I encountered so far. Good luck and keep up the good work!
Cue: migration to git.
how would that help? From what I've read, it's the usernames and passwords of commiters that were compromised.
And all are 404... :))
Git doesn't use usernames or passwords, rather it authenticates based on a combination of biometric thumb and retina scans.
For the uninitiated, [here](http://dsheiko.com/weblog/aspect-oriented-software-development-and-php) is a recentish article on the subject. The article mentions the following AOP libraries(some of the articles links are borked, googled for some of these), * [MFAOP](http://www.mfaop.com/) * [PHPAspect](http://code.google.com/p/apdt/) * [Seasar](http://www.seasar.org/en/php5/index.html) * [AOPHP](http://freshmeat.net/projects/aophp/) *(requires phpclasses account)*
&gt; I would appreciate the same courtesy, Stone. I haven't trolled you. You responded to me, not the other way around. Like usual. &gt; In the majority of dialects, definitions are not static...thank god. Dialects aren't formal things, Posey McFakeLinguist. In English, no matter how many times you say that, that will not become a reason for you to invent new rules on the spot.
Don't forget to go look at the mods and themes on their site, that makes it even better :)
PHP infamously has *no* standard code review process and very few of the commits are seriously reviewed.
Sarcasm?
Nice,i'll read it. Thanks.
It's not a blog, it's an API reference site. Damn.
Use PDO and prepare statements, that would solve your SQL inject problems.
Does...does it need to be asked?
Do you have a *source* to back that up?
Are the spambots coming from a particular IP range? I once cut a chunk of spam out of a phpbb board I used to administer by adding TOR exit nodes to my IP banlist. That probably cut out a small amount of legit traffic too[1], but it was worth it at the time. [1] TOR has a lot of good uses, but in my experience people only use it to do illegal things or act like Internet jackasses.
No he doesn't
It helps because the changesets are signed s.t. existing changesets cannot be altered. I suppose there are ways to work around this in svn too.
Generally one of two things: the server's mime types aren't set up correctly if it's dispatching the correct result, or the server isn't sending PHP to the interpreter (which means either an httpd.conf/similar misconfig or PHP isn't installed) if you're seeing code.
Well PHP is def installed because the test works. httpd.conf is empty, but apache2.conf isn't. What do you suggest I do?
If by test you mean the "It works!" page, thats not php thats just Apache. It all really depends on how you installed Apache and PHP, but its possible you may just need to restart Apache. More information would be helpful. Is this on your desktop? A server version of Ubuntu in a VM? How did you install Apache and PHP?
Start by putting something blatantly wrong in apache2.conf to see if it's really the .conf in use. Ideally the server will fail dramatically, you can put it back, and then you'll know that apache2.conf is the right place to look. Then get out some header sniffer (firebug has one I think, IE9 developer's tools too) and check if you're getting sane results. Are you getting code or interpreted results? This assumes this server isn't in production, ofcoz.
Man! I am seeing you everywhere here on reddit :) I had a hard time figuring out in what cases MySQL is better, and vice versa for Percona. When to choose what?
&gt; Dialects aren't formal things, Posey McFakeLinguist. I didn't claim they were. Definitions. &gt; I haven't trolled you. You responded to me, not the other way around. I would appreciate the same courtesy, but neither of us are gonna see it. Responding with a differing view isn't trolling. Being unnecessarily argumentative is what you continue to do. From my point of view, that's trolling. You react, again and again. It's fun for both of us.
1) Search for and edit `/etc/apache2/mods-available/php5.conf`. 2) If not already there, add the line `SetHandler application/x-httpd-php` within the `IfModule` block. 3) If not already there, add the line `PHPIniDir /etc/php5/apache2` within the `IfModule` block. This assumes you haven't changed up your PHP install and moved the default apache2 php.ini file. You can just quickly ftp to `/etc/php5/apache2` to make sure it's still there. 4) Save. 5) Restart Apache (keeping in mind the command to restart like many applications varies from version to version, and lately it's `sudo /etc/init.d/apache2 restart`). Disclaimer: this assumes you're using and already have installed `mod_php5` and the most recent version of Ubuntu. Config file location and application commands change from version to version and install to install without warning. If the module is not yet installed, install it from `aptitude`, then try the steps above again. If you have the Desktop version of Ubuntu instead of Server version, then I recommend doing all of the above in command line only.
Ha, I do get around! On a related note, you may be happy to know that I build some new [stampede control/invalidation techniques](http://groups.google.com/group/stash-developers/browse_thread/thread/afdaf554bc332450) into Stash since that last discussion. Anyways, to answer your question- honestly, I don't see a point in running MySQL over Percona at this point. At it's core Percona *is* MySQL- bug fixes and changes are backported, as are other things. Percona didn't even start off as it's own application- it was originally a series of patches. While it has certainly grown since then, it still remains the same at it's core- it's a bunch of enhancements, either written independently or backported from higher versions of mysql- with testing and packaging. In cases where you're just using mysql to support some other application and don't expect any real load, then sticking with the stock mysql for the specific os if fine (ie, apt-get install mysql). Otherwise there really is no reason not to use Percona.
thanks for the links to PHP Fat-Free. It looks great. I've wasted 2 months trying to learn a bunch of other frameworks
I'm not sure but that's good advice. I'll check it out.
Update: after upgrading my version, and some changes everyone suggested my spambots are gone. Thank you all!
There seems to be quite a lot of parsing and explosions going on in your code, so I can't tell for sure what the issue is right off the bat. One thing I'd suggest is looking at the [search/query basics](http://technet.microsoft.com/en-us/library/aa996205%28EXCHG.65%29.aspx) to make sure your queries are right. Since the code is all linear and procedural, throw in a `var_dump($someVar)` in a few spots to see that the ldap strings are correctly built. Especially on that `"cn=" . $group` bit since that just doesn't seem like it _should_ work as is.
Potential typo: Line 7 looks to have an extra slash in the regex. /\\([0-9A-Fa-f]{2})/e It'd be nice if you were declaring $members before using it on line 50. adding $members = array(); above the foreach on line 41 would be ideal. Also, in general, it's nice to use brackets around control/loop statements. It was hard to read line 7 because of how long it was as is, let alone that it has regex in it and it's a foreach loop. You don't need to minify PHP. :) I didn't test it, so i'm not sure if it'll help.
I store dates as Unix timestamps in a bigint field with length of 20. PHP or whatever language you're using will have numerous ways to convert to/from Unix timestamps to various display formats. This gets around any problems with SQL not recognizing the date format etc as it's just storing an integer representing the datetime.
&gt; $ldap_dn = "CN=Configuration, DC=DOMAIN, DC=EDU"; This is the wrong context for user/group objects. This is the location for service and infrastructure objects. You need to use the "default naming context" which is simply "DC=DOMAIN,DC=EDU". Drop "CN=Configuration" from $ldap_dn and it should work find.
[adLDAP](http://adldap.sourceforge.net/) works well. 
Thanks guys. I put your recommendations to work, and I'm still getting the same error, which I should have included the first time. Warning: ldap_search(): Search: Partial results and referral received in D:\adenv\group.php on line 37 Warning: ldap_get_entries() expects parameter 2 to be resource, boolean given in D:\adenv\group.php on line 38 Warning: Invalid argument supplied for foreach() in D:\adenv\group.php on line 44 Thanks again for your help.
I gave that a shot late last night and maybe I just wasn't following along properly. I had no idea where to actually configure the LDAP host in the config file. 
Thanks for this.
It helped clean up a few errors. Thanks for your help.
Just look for the following line (line 83 in the latest release): protected $_domain_controllers = array ("dc01.mydomain.local"); You can add multiple domain controllers to the array in case one happens to be down. I had trouble with AD as well until I found this lib - it has made things so much easier than trying to roll my own.
No part of talking to you is fun for just about anyone, going by your post history. You're arguing for the sake of arguing. You're ignoring what I'm saying and pretending I'm saying things I'm not. This is the nature of trolling, even though you keep saying "nuh-uh, no-you." It is, I admit, a little satisfying watching you tell yourself that someone who's saying "I don't want to talk to you" is having fun, as evidence of just how far out of touch with reality you are, for the sake of your own self esteem. Let's make this really simple for you. I do not enjoy talking with you. I would like for you to please stop responding to me. Keep telling yourself that if someone says "go away," they're enjoying themselves and participating with you. Clearly, that's not just you being desperate for meaningful contact. Please go away soon. Your estimation that because I'm telling you to go away I must secretly be enjoying talking to you is not correct. It's, in fact, fucking retarded, because when I stop talking to you in a thread, you just start up another one, then claim there that I must be trying to talk to you, because I keep telling you to go away there too. You do this every couple months. It's pathetic in a way you don't seem to understand. Shoo.
Got it. So I can authenticate just as easily as I could before, but still running into errors when searching, which makes me think I don't even have rights to do searches. Have you ever come across this?
&gt; This is the nature of trolling Your "qualified" definitions are always your defense of right vs wrong. I find it especially special when you make moral distinctions (which is rare). Those are just as arbitrary, but a lot more interesting. &gt; I do not enjoy talking with you. This is not true, going by your post history. &gt; I would like for you to please stop responding to me. That's very polite. Unfortunately, you make statements that I like to respond to. There's a solution in there. Nah. &gt; Clearly, that's not just you being desperate for meaningful contact. You often use this as a defense as well. Which is sad in a roundabout way. &gt; It's pathetic in a way you don't seem to understand. How you bring yourself to form judgmental fantasies around forum postings, and then escalate them, every time...is beyond my understanding. This is true. &gt; I must be trying to talk to you But you are kiddo.
I'm using a plain, unprivileged account to run the searches. If I remember correctly (anyone please correct me if I'm wrong), all accounts have read permission on user, group, and computer objects in AD. What kind of errors are you getting? You might look through the [support forums](http://sourceforge.net/projects/adldap/forums) for more info too.
Notice: Undefined offset: 0 in D:\adenv\adLDAP.php on line 694 Which tells me either that I'm not retrieving any results and there's no formal output for this, or I'm not naming my user group properly. Both of which I've tested repeatedly. I'll continue to look in the support forum for related issues. Thanks again for helping so quickly. I love this community. Edit: I can't even get it to retrieve all groups using the all_groups function.
&gt; line 37: `$results = ldap_search($ldap, $ldap_dn, "cn=" . $group);` Since `ldap_search` errored and returned false, this is what's causing the cascading errors when you try to use these non-existent search results. Before passing `$results` to `ldap_get_entries()`, you should first check it to make sure it doesn't equal false. If it does, add some code to handle that error condition. Same with those `ldap_set_option()` lines right above it. First check to make sure the option changes were successful. In fact, try testing without those option lines a few times.
I can't help you there, unfortunately. I don't suppose there are any messages in the AD event log?
There's also a zend library [Zend_Ldap](http://framework.zend.com/manual/en/zend.ldap.html)
I am using [adLDAP](http://adldap.sourceforge.net/) to authenticate against Active Directory and to lookup group memberships for my users. Works great, at least with a Windows 2003 domain. 
Just as an experiment try searching with an admin account. 
Use it to start your next website, startup or your awesome ideas...
http://bjori.blogspot.com/2010/12/php-project-and-code-review.html 
That sounds like you need to enable referrals, try changing ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0); to ldap_set_option($ldap, LDAP_OPT_REFERRALS, 1); and see if that helps
Interesting idea. I wish vbulletin would work in LDAP it'd make things a lot easier on me.
if you are actually planning on using that much resources you need to look into a dedicated server, maybe a VPS. you start using that much resources on a shared host you will be kicked. They will find a reason in the TOS to end your service. I have a VPS with linode and they have given superb service for me.
Your question(s) are really broad. If you tell us what sort of software you'll be running , we'll have better answers. As far as NoSQL, it depends on what you're doing. NoSQL database are more asynchronous, and the average web application requires more interaction eg 'did that row insert ok?' As far as hosting, Linode is my favorite. SliceHost is pretty good too.
Rackspace cloud is awesome for vps. For NoSql I have had awesome experience with MongoDB but you really need to evaluate if your application would run better on relational vs nosql.
Site5, seriously the best support I've ever seen, its not UK based I don't believe, they have a wide range of plans. All other webhosts in the past, I've found them to be complete dicks... they don't respond to you until days later, they send you 'automated responses' not even reading your e-mails or tickets... so annoying. But with Site5, awesome PERSONAL support, great uptime I havent had 1 hitch or anything go wrong yet. THEY ALSO DO NIGHTLY BACKUPS FOR YOU :)
thankfully I am used to working with lamp installs on linux servers and virtualbox, do you just upload a disk image to the host, have the vm mount it then ssh in? 
pretty much, except I don't think you can upload your own image. They host a variety of OS images.
Ah ok, so if needs be I can just throw a bit more cash at them and they can increase the storage/bandwidth of the VM instantly? 
Reading up on some nosql now and it really doesn't look like its worth learning for what I want. All I'm looking to do is have a simple database with coordinates and some descriptive text stored and have the points plotted on a google maps using their api.
whats your budget for such a VPS ?! i read about a budget VPS in UK on webhostingtalk .. not sure how legit it is though .. check out lowendbox.com if you want to start playing around with something right off the bat and don't see a product launch for a while .. will definitely save you some money .. linode is 20$ a month at the cheapest .. http://bolthub.net/ 
rackspace
You'll want to use something like mysql for that. Just so you're aware, there's a [mysql query](http://stackoverflow.com/questions/4697624/querying-for-things-near-a-geolocation) for doing proximity with latitude and longitude.
Yeah. You can check the specs on [linode.com](http://www.linode.com/) . I think the most expensive VPS is 180/mo (usd) , so it's very reasonable in price also.
Thanks, that's awesome, I was thinking i'd have to just pull a square of values for the latitude and the longitude and then trim off the corners in a way with php.
haha. The way that query works is you set a center point and look for spots within a radius, so it's a circular area. You might have to add a multiplier to change it from miles to metric.
I &lt;3 Linode. Have had a VPS with them for nearly a year (after switching from Slicehost) and couldn't be happier.
If not Rackspace, [Linode](http://www.linode.com/).
Anyone know where I can get a good servlet host?
The problem I have with rackspace (goes for Amazon as well) is bandwidth is quite pricey. OP is looking for 1 tb of bandwidth which on Rackspace will cost you ~220 dollars a month not counting incoming bandwidth. The best way to reduce this cost is to take advantage of CloudFiles, but you have to keep this in mind for high traffic sites.
Not only that but you can now get their Cloud Servers based specifically out of the UK. It is 5p / GB in and 12p / GB out though.
Media Temple.
[chunkhost](http://chunkhost.com/r/savethisguysomemoney) vps also use that link if you do sign up because i wants a credit.... =)
I use Linode for my personal stuff and love it, but I have to agree. Site5 is very good for shared hosting. We've been hosting dozens of sites with them for over 6yrs without issue. I think I can count on one hand the number of times our sites have been down, and there was one period of downtime due to a massive hardware failure, but that only lasted as long as it took to restore backups on the new machine. In 6yrs, I'd say we've had less than 20 hours of downtime. Their tech support is not quite what it was 6yrs ago - still just as professional and friendly, not quite as fast, thanks to their growth and popularity, but it's still pretty responsive and you so seldom need it.
Or prgrmr or whatever it is. Happy Linode customer here! 
Don't use lamp, use nginx and php-fpm. Much better performance and only a little more fiddly to set up. For databases, Percona is looking good, it's a fork of MySQL with features like HandlerSocket, which is a superfast (perhaps even faster than memcached) NoSQL backend :)
NoSQL has its place. I did my first project with Mongo a while back and for the type of data I was dealing with (a lot of custom records with very few relationships between them), it was well-suited for it. I loved how fast it was. For your average web app, though, an SQL DB is just fine and often the better choice.
MySQL's way is much less likely to be inaccurate in the far northern and southern realms.
No way. You have to deal with all the outages and hardware failures yourself. What if you're on holiday and the power goes out and the server doesn't come back on? This approach only works if it's a hobby. If your income depends on it, it's a non-starter.
Fasthosts works well for me running production stuff on dedicated. Linode also works well (they have a POP in London) and comes with free DNS management which is quite neat.
Goodbye, Dolores.
Also check out /r/gis and /r/geospatial, there are whole industries based on analyzing spatial data. You might look at PostgreSQL, PostGIS is an industry-standard spatially aware database.
I find that it's not "faster" as such because that depends on your script/backend. But it's more stable, because whereas Apache will choke with its limited threads or preforking, nginx has workers that are designed to be very lightweight, and php-fpm essentially has a "pool" of fastcgi process that it expands and contracts to scale to demand. http://blog.webfaction.com/a-little-holiday-present Nginx saves memory, too. I think another blog said that apache can sometimes do more requests/second for a really simple php file, due to mod_php having less overhead. This makes sense, but when you have a real life app taking up 30ms or so per request, the extra fastcgi provided by fpm could be useful.
Could you make the link active, please? That way one would not have to copy and paste the link.
For those of you on Linode, are any of the hosting plans managed, or are you expected to maintain all aspects of your VPS? Is it cumbersome to stay current on security updates and patches?
Linode has stackscripts that you can use to perform batch operations, which is helpful if you have tons of nodes (never used them myself), but other than that, it's up to you what you want to do with your server. You start with a fresh install of your preferred OS - the rest is up to you. As someone only vaguely familiar with bash and Linux OS filestructures, it was relatively easy for even me to get my server running. Linode has tons of documentation. Highly recommended. I don't think I could ever ask for anything more.
I use 1&amp;1, their $10/month business package. It works for me, but I have no idea how it'll be able to handle large amounts of traffic. Soon, I'm hoping to release to closed alpha a game I've been developing. My package says I have 250GB and "unlimited" transfer, and 10 MySQL databases with 100MB each. It works for me, but again I don't know how it'll scale. Hopefully in 6 months or so I'll know.
Horribly. I was a 1&amp;1 customer for a couple of years before I got tired of their bullshit service and moved on. First to HostGator (crap) and now MediaTemple (which I have never been happier)
What's horrible about it?
* There customer service is horrible, and it is never their fault. * They promise a 99% uptime, but what they don't tell you is that is over the lifetime of the company. Three weeks of downtime on my server was still withing their contractual rights. * DO NOT REGISTER YOUR DOMAINS WITH THEM, try to upgrade/downgrade your hosting package. If you do they will renew ALL of your domains without your permission and then hit you with an "oh by the way.." (this was the last straw for me) I am sure there is more but its been a couiple years.
I have a couple domains with them, but they're the ones I got free with my package. The rest I hot on godaddy, so I'm set there.
I &lt;3 you so much
+1 for [LowEndBox](http://www.lowendbox.com), great deals on there. Even though they're probably too underpowered for the OP, it might help someone starting out.
Any issues with servers being compromised due to lack of maintenance, etc? Their pricing is certainly competitive, but i would hate to have to constantly monitor the server for fixes, patches, etc, not to mention "learn the hard way" after screwing up some minor detail. 
Thanks for mentioning this. Worked on (and still working on) a couple SocielEngine projects, and this looks so much more manageable than SE. Or maybe that's just a sign of good advertising ;p
Probably both :) 1.x is free, and I'm pre-selling 2.0 right now, so if you're fed up with SE, give 1.x a download and pick up a 2.0 pre-sale now while it's so cheap. Email me (support@kwolla.com) if you need any type of help.
I may be mistaken and you're certainly encouraged to do a little Googling, but Linode VPS is a very laissez-faire environment. It is certainly not a hands off environment, although you can write cron scripts to update software regularly. Linode also has tons of documentation on basic security. A Linode VPS is as vulnerable or secure as any other Linux server, it's all about what you make of it.
Interesting, very nice interface, didn't have the interest to go through with the complete test. I work for a company called mailingmanager, based in the UK. We're in the midst of creating a step by step application just like that. 
http://aws.amazon.com/free/ Completely free cloud instance.
Awesome! I've actually been looking for exactly this sort of thing. Dunno why people are downvoting you, except perhaps that they feel entitled to everybody else's work for free just because the result is digital.
WebFaction
Which requires 5.3 and also is still in Release Review stage?
They are down voting it because it's spam. Look at comment history.
Hrm... Fair enough then... wonder if I just gave a scammer $14...
Code canyon is legit. The person who posted the link is a spammer. 
The person who created the PHP application is legit I believe, just this Reddit post has a affiliate/referral code which the hivemind doesn't want. Different subreddits have different rules for if they allow them or not.
Oh-hoh! I didn't notice that... silly me... there goes my up-vote for this thread.
I would maybe look for features like: * Cron * Catch-all mail addresses * Nginx (hard to find, but would be cool) * "Unlimited" data transfer
Very cool, thanks :)
Howdy. I run Sickipedia with a [very similar setup to you](http://webfe.sickipedia.org/sys/initial.php). Only difference? Memcached on the front of it all. If your concurrency allows it, Memcache(d) makes a gigantic difference.
Are you essentially using memcached to handle the polling operations? I have memcached installed, and had considered using this, but I wasn't sure if it could handle the high level of concurrency (particularly the update operations). I thought I could update the cache while the process has the lock on the database update, but I wasn't sure if this would result in many false reads.
Memcached is in the front of all database operations. Nothing touches MySQL until we've checked Memcached for valid data. That operation is near instant. Our DB hits of course fell to almost 1/10th what they were before. YMMV and be careful before using it for highly concurrent operations.
Yeah, I've used it before and thought it was blindingly fast for working with data I wasn't really concerned with being concurrently updated. I'll just have to set up a few scenarios to see how it performs. Thanks!
You're welcome. 
Your database is (most likely) going to be your bottleneck. Get [High Performance mySQL](http://www.amazon.com/gp/product/0596101716/ref=as_li_ss_tl?ie=UTF8&amp;tag=twittercomste-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596101716) - it's a great book that'll help you make smart design decisions. Make sure you get the 2008 edition and not the 2004 edition. Check out [Percona Server](http://www.percona.com/software/percona-server/), a more performant fork of mySQL 5.1 server. Depending on your Database load, you should look into [mySQL Master/Slave Replication](http://dev.mysql.com/doc/refman/5.0/en/replication.html). [Maatkit](http://www.maatkit.org/) has lots of useful tools for monitoring/backing up mySQL Replication. Like some other commenters have mentioned, check out [Memcached](http://memcached.org/). Make sure you use [pecl-memcached](http://pecl.php.net/package/memcached) for accessing Memcached from PHP. There is another extension, pecl-memcache, but it's missing CAS token support, which helps with concurrency. Make sure you build pecl-memcached with the latest version of [libmemcached](http://libmemcached.org/libMemcached.html). Older versions have a nasty bug that ignore timeouts, so if your memcached server goes down, your PHP processes will wait forever. Use [Nginx](http://nginx.org/) and [PHP-FPM](http://php-fpm.org/) (it comes with the latest version of PHP). Nginx uses so much less memory than Apache. I have a Nginx Server that is pushing 250mbps of traffic and uses less than 200MB of memory. PHP-FPM uses (about) the same amount of memory as mod_php, but gives you way more control. You also might want to check out the various NoSQL databases and see if any of them fit your work-load. It sounds like [Redis](http://redis.io) might be a useful tool for you, but YMMV- you'll have to check it out and see if it fits your needs.
This is all very good advice, thank you. You're right...the database is indeed the bottleneck at this point. I may have had not completely configured nginx and php-fpm as I should, but I was seeing higher throughput with apache worker mpm. But yes, the ram usage was pretty high. Any suggestions from your experience on configurations for both nginx and php-fpm that seemed to work the best? I realize that it really depends a lot on hardware, which is 4 core Xeon 2.13 GHz with 2GB of RAM available. On NoSQL, I had considered this, but I'm pretty inexperience here. I've heard about the idea of "eventual consistency" and I immediately thought it would be a bad architectural choice for operations that would have to handle many many concurrent updates to the same data while returning an indication of what the record was updated to. Am I misinterpreting the power of utilizing NoSQL vs a traditional RDBMS here?
Definitely: memcached. We run two dedicated memcached servers and as cr3ative said, nothing touches the DB until it checks them first. Before you explore noSQL, you should have a memcached layer in between. [This](http://yoshinorimatsunobu.blogspot.com/2010/10/using-mysql-as-nosql-story-for.html) is another route you can explore if you need really high concurrency with innoDB -- it is a stripped down handler that makes inno actually faster than memcached in some instances.
&gt;*Reads first line of problem description* &gt;I CAN FIX THIS!
I've had some bad experiences with code from code canyon; I'd be shocked if the thing wasn't riddled with security problems.
Ow. Owwww. I can't stop reading it.
While my answer may not have been helpful I still stand by it's accuracy.
I'll have to give this article a good read. It looks interesting. I think what I'll probably end up with is a (eventually clustered as the app scales) mysql instance, nginx + php-fpm, and memcached for handling the atomic operations I'm needing. Are you also regularly writing the state of memcached data to appropriate db tables? I was going to look at this as well...just need to figure out an appropriate write interval. Thanks!
I use memcached in two ways. The most important one is to prevent reads from hitting the db clusters. So before checking for an object or a result in the db, the data access layer checks memcached. If the object or result doesn't exist in memcached then it reads it from the db and writes it to memcached. The second way I use it is for atomic operations like counting views or non-important vote totals. Instead of incrementing a counter in the db, I'll increment the counter in memcached and then every *n* increments, it writes that total to the db master and clears out the increment counter in memcached. That could also be done with a cron. [Example of this here](http://abhinavsingh.com/blog/2009/12/how-to-use-locks-for-assuring-atomic-operation-in-memcached/)
Get more RAM. Most standard dedicated servers come with 4GB. We've got 6 because why the hell not? It's cheap as dirt.
Try looking into HandlerSocket. It's like NoSQL that runs on a MySQL server (Percona is a good drop in replacement for MySQL that supports it off-the-bat), and it supposedly runs faster than Memcached (!!). Currently trying to adapt as much of my "must be dynamic" site to use it :) Also, cache as much as you can - there's no point computing things that aren't necessary to recompute. One technique is to store the entire page contents in a memcached key, and have nginx check that key before looking at the script. People have supposedly got 12+K reqs/sec on that sort of thing.
How large is your DB? How much could it grow? 2GB is most probably not enough for what you are asking for. Just but as much ram as you can get for a reasonable price. You want your DB to be fully cached in RAM, and be able to hand your server memory needs. To lower disk IO a list (if you start to become IO starved), just save the logs into a ram disk and rsync every 1 mins with a folder on the HDD (or on another server, if your connection will be affected. Make sure to rotate the logs every 6 hours or even 3. 
Depending on how complex your PHP logic is, you may find you can gain some speed by using Facebooks HipHop PHP compiler to compile your codebase to plain C++. But if you're considering switching to another language then you might have better luck with that.
The DB could grow largely, depending on how well my application is received. This system that I have is really just a base for developing it out. At a bare minimum to start, I'll have at least one dedicated DB server with a good amount of ram. I think the direction I'm leaning is to have several dedicated high memory machines to facilitate DB (possibly clustering) and in-memory caching with memcached. I just need to get to that point.
I might have to give this a look at. At least at this stage in the application planning, I haven't seen that it php itself will be very complicated, but then again, I suppose this couldn't hurt. I had also considerations for using python as well, just php was my go-to since I've been using it for so long.
I am developing a project that requires a lot of concurrency, and am using [node](http://nodejs.org/) for the api and [MongoDB](http://mongodb.org) as my data store. Node works great for this type of thing. I have lots of binary data (images) and metadata, which can all be stored in Mongo without using static files. I currently run a few node servers on various ports on the VPS handling various get/post requests, but the site itself is hosted with Apache. Related, for PHP, I haven't used it, but the [Lithium](http://lithify.me/) framework looks pretty cool. It interfaces with Mongo, as well. 
I would definitely recommend only using HipHop if your PHP code is becoming a bottleneck. Right now it is still fairly complicated to get up and running in my experience and so might prove to be more of a hassle at this stage. But by all means check it out if you're interested!
I've recommend HipHop in the past before I actually tried it. I run a certain service that currently needs to execute a fairly complex script about 3000 times every five minutes (that is nearly 900k hits per day). The script makes some calls to APIs and my database servers. To keep everything running quickly I do everything in parallel with up to 20 instances of this script running simultaneously. Originally this was a PHP script that forked but that was slow (as expected). CPU load was always very high and so was memory usage on my 1024MB slice. Sometimes the script would run so slowly it would get backlogged. Next I rewrote the first part in C++ using threads with each thread vforking into the PHP script. This surprisingly improved speed by about 60% though memory usage and CPU load were still high. Next I switched it up so that the C++ part would then use CURL to call a HipHop compiled daemon instead. The idea being that I could increase performance by creating new threads rather than forking into a new process. This cut CPU load and memory usage by over 50%. Speed increased further by around 20%. I'm not confident though that the HipHop is doing exactly what the PHP code was doing. For instance, there is a certain low priority bug that I know exists in the PHP code that simply doesn't in the HipHop version. After thinking about this further I realized that I should experiment by using Apache to handle the PHP script and then call it via CURL from my C++ code and use APC for opcode caching. This would still take advantage of threading rather than forking. Turns out this provides almost exactly the same performance. It is a little slower than HipHop but at least I know the code that is running. YMMV my bottleneck is probably the API I'm interfacing with so my use case may not be ideal for HipHop.
That's sweet! I never understood why mysqli made parametrized query returns so complicated...
It's true that RAM is cheap as dirt now. I just got 16GB of low latency DDR3 from newegg for $200.
I've been doing this. Except I also use PDO and not MySQLi.
Will this store_result() and free_result() for you too? or do you still need to do that if you run two prepared queries. I had extend and roll my own fetch_object() method with mysqli stmts, and it would be nice if I could replace it all by using get_result() and a standard mysqli_result object.
Thanks for the insightful post, I have a little experience with HipHop (I did a little hacking around with its codebase) and it certainly contains its own bugs and corner cases. The majority of the functions, as far as I'm aware, are based around the PHP implementation, but there are always subtle differences, and cases where the PHP documentation doesn't match the implementation, etc. So yeah, as you say HipHop is really a last resort, and only if PHP itself becomes the bottleneck, which isn't true in most cases (Since DB access is usually the biggest bottleneck when scaling).
So close, missing one extra step, the need to run though the array itself. Pseudo Code: While moving Set moving to false For each key in array (sans last key) Check keys, swap if need be, and if swapping set moving to true End For End While
try something like this: ` for($cntX = 0; $cntX &lt;= $maxX; $cntX++) { if ($programarr[$cntX] &gt; $programarr[$cntX+1] &amp;&amp; $cntX+1 &lt;= $maxX ) { $programarr = swapArr( $programarr, $cntX, $cntX+1); $move = true; } $cntX++; } `
&gt; Will this store_result() and free_result() Not that I'm aware of. But once you call `get_result()`, the STMT object no longer has access to the results. From my experience, calling `store_result()`, `free_result()` and `fetch()` STMT methods will make any subsequent call to `get_result()` fail, and vice versa. It's either one way or the other. Just be sure to monitor mysqli-&gt;error and mysqli_stmt-&gt;error properties. Edit: There's no parameters for `get_result()`, so I imagine you only have the default `stored` option, though I haven't tested it out far enough yet to see which one of the two it is. This might mean someone needs to open a change request to allow that option. Edit #2: I think I edit too much.
There should be a few shortcuts, but it all depends on which order you want `$programarr` in. A simple `&amp;` or `&amp;&amp;` typo can make all the difference. Can you give an ending example reordered how you like?
Looks like you're trying to implement a variation of the bubblesort. Post the desired array order and we might be able to help you out better.
I'm sure that's the same RAM they put in servers...
Yep... "[col_name] timestamp default current_timestamp" = Automatically sets [col_name] to current date upon record insertion, but does not update [col_name] when the record is updated "[col_name] timestamp default current_timestamp on update current_timestamp" = Automatically sets [col_name] to current date upon record insertion, and will also update [col_name] when the record is updated
PDO! Because SQL is 100% compatible across all RDBMSes, of course, and using generic drivers is faster. 
I see, then 2GB should work for you in this controlled environment. If it is not a secret, what type of an APP is it?
I guess you're using Apache. In my experience, Apache can handle 1000s of hits easily - when they're simple sendfile():s. However, high CPU usage scripts tend to bog down any machine if they're coming by 10s. I've been meaning for couple of years to write a module which adjusts Apache's MaxClients settings dynamically. Eg: I've had a situation where people are hitting simply on one image (I can set MaxClients on a single machine to 1024 or something ridiculous) or another case where people are hitting a search script consuming quite a bit CPU (then my maxclients would be two-to-four times the amount of processors). 
Yes, that is exactly the reason why people use PDO ಠ_ಠ
I suggest small modifications to your resume: add case studies, e g Size My Tires — http://www.sizemytires.com An interactive tool for finding the original tire size of a specific make and model of vehicle. It handles [number] of users a day and has been referenced by around the web. I did [exactly how you accomplished things] using [tools you used] etc. talk a bit more about the projects you have worked on; go for quality over quantity; pick a few you're really proud of describe them a bit more in detail, say what is great about the final product and how it was useful and what value it added, etc. (you can usually do that in 3-4 sentences)
I've taken your code as-is and retained your naming conventions. I am assuming that you want to: * iterate over the entire array. * check each element of whether it should be swapped with the next element. * keep track that a swap occured in the $move variable. * at the end of the iteration, loop again if the $move flag is set, otherwise exit the loop. This is essentially bubble sort. Also, recursion doesn't come into play here. We'll do this with nested loops. &lt;?php // initialize with unsorted values $programarr = array('7','4','2','6','1','5','3'); $cntX = 0; // loop starts at 0 $maxX = count($programarr) - 1; $move = true; // our flag to track swaps made /** * Swaps the values of the two keys specified, * returns the new * * @param array $arr The array to be modified * @param int $key1 First key of value to swap * @param int $key2 Second key of value to swap (with) * @return array */ function swapArr($arr, $key1, $key2) { $tempVal = $arr[$key1]; $arr[$key1] = $arr[$key2]; $arr[$key2] = $tempVal; return $arr; } /* * As long as the $move flag is set, we want to keep iterating over the entire * array, swapping as necessary. */ while ($move == true) { $move = false; // reset the flag, since we haven't done anything yet. $cntX = 0; // restart at the beginning // as long as $cntX hasn't reached the end, keep looping while ($cntX &lt; $maxX) { // check whether we need to swap if ($programarr[$cntX] &gt; $programarr[$cntX+1]) { $programarr = swapArr($programarr, $cntX, $cntX+1); // do the swap $move = true; // flag it } $cntX++; // increment counter } } print_r( $programarr ); A few things you can change: while ($move == true) { is actually overkill. It's enough to write: while ($move) { The function swapArr makes a copy of $arr that is returned. You could do the three lines for swapping values directly in the if statement block where you're calling the function.
http://kohanaframework.org/ Kohana is nice, but to be honest all PHP frameworks are very heavy...
ya it was suppose to be ascending 1,2,3...
oh yeah, it was a while within a while. How could I forget after I made fun of it in class. I kept yelling out "We have to go deeper"
If you have nested prepared queries (or other situation where you run two prepared statments at once), mysqli usually gives you an "cannnot run this one, out of sync" error for the second query (unless you store results). I will have to play around with it... if the stmt no longer has access to the results, I may not have to store/free results at all. Hopefully 5.2.17 has support. Thanks for posting this! Hopefully I can cut down my prepared statement code in half! 
I'll second this. Kohana gives you the basic MVC setup and makes for a nice starting point + a set of tools you can use (or not), but it doesn't try to help you with CSS or javascript or code generation of any kind. It's there when you need it, hidden when you don't. Not for outright beginners, but you sound like the target market.
I have to keep if ( .. &amp;&amp; $cntX+1 &lt; $max ) { because my array has 6 indexes, while the if block would generate a 7th. Unless I am mistaken. It's true what you say about the function "swapArr", pointless to make it a function since I'll only be using it once in one loop.
oop, nvm. the problem doesn't happen.
thanks guys I'm definitely gonna give it a look
I recommend Symfony 2
We need a perma link on the sidebar pointing to one of these threads. There's many of them a week! The answers are usually the same: Codeigniter, Kohana, Yii, Zend Framework, Flourish, Symfony, Cake, PHP Fat-Free Personally, I've been using CI, and am slowly learning Yii.
I've been really digging Yii since I learned it, but man is that curve steep :)
I did this in PHP: http://chir.ag/projects/preztags/ - make something like that, for your school/university. I offer my PHP code too - http://chir.ag/projects/tagline/ but I suggest you write your own. Parsing (non-Unicode) text is fun with PHP. See more projects here: http://chir.ag/projects/ - most of them are in PHP/JS. Word/dictionary related stuff require MySQL. I love working on small, fixed-length projects so my projects aren't too different from your assignment.
Thanks for the links. I'll look them over.
I'm interested in seeing your syllabus. I taught a 'Server-Side Web Programming With Apache, PHP, and MySQL' class a few years ago, and had to create one. Creating a syllabus is a pain.
FuelPHP is approaching final release and is really stable. http://fuelphp.com For the sake of your projects please don't make your own. A lot of people on here advocate that but if you are working with others or have to hand the project off at any point having a standard framework is much better then one you created yourself. Also with a open source framework there are hundreds of people working on it and fixing bugs, bugs that you may never notice that could leave gaping holes in your security. 
I like your project I'd also be interested in seeing it with some of the newer speeches as well.
Try making a tag-driven social network app. Implement users, groups, and discussions. I just finished an app similar to this idea and it was very interesting. It ended up being a rather large project, but it was very straight-forward.
The mention of family stood out to me. You could build a website where extended family members could log in and share memories from their childhood. You would basically be building a family history which we be very valuable for you when you are older the generations that follow you.
&gt; FuelPHP is approaching final release and is really stable. Why can I only find unit tests for 5 classes in its repository? o.O
&gt; Hopefully 5.2.17 has support. The help says "(No version information available, might only be in SVN)". [Bug/Request](http://bugs.php.net/bug.php?id=34948) says "Might only be in 5.3.0+". So yeah, unknown. I updated the post with this info. 
Thank you guys, anyone has any more info on FuelPHP, Kohana seems interesting... maybe there's something fundamentally wrong with PHP frameworks if everyone is talking about creating their own ...
I think it boils down to the needs of the project. For something that is fairly simple which I need up and running quickly, I'll probably go with CakePHP. I'm intriguied by Lithium, which is a re-imagining of Cake by some of the original devs and looks quite promising, however it's very lacking in documentation and any information on the status. Getting to more complicated things, I dig Fuel. If you're not comfortable with it being immature, Kohana is a good alternative. Fuel has a lot less 'magic' than cake, and you may end up having to do more for yourself (notably, there is a decent amount of 3rd party reusable cake code out there), however it gives you more in terms of flexibility. And then, PHP Fat Free I dig for certain types of projects, mostly along the lines of something that would be a API service. Zend I am not too fond of, it's big and a collection of utilities rather than a cohesive framework and I've always felt like the bits don't work together as well as they could. It does, however, give you an insane amount of flexibility as you can pick and choose the bits you want. I don't find it very pleasant to work with though, so I will typically use something else but on occasion I'll use a few zend classes in cake/fuel/whatever. I'm personally not a fan of writing your own framework. It reeks of Not Invented Here syndrome and reinventing the wheel. As a developer who has a specific problem to solve, my concern is solving that problem, and not building/maintaining a framework to solve that problem (unless that problem is developing a framework...). For the most part, creating your own framework is just going to involve implementing things that other people have implemented already, and doing it in a way that has been less tested and reviewed. I'd say it's probably worth doing once, just so that you understand at the core how such a framework works. But beyond that, I'd rather avoid having one more chunk of the stack to maintain.
Sadly our college's requirements for syllabi is rather lax. It's less of a coursework map and more of a "here's what you should learn in this class" kind of document. Here's the only course-specific info that doesn't relate to grades or policy: &gt;CIS 264 students will: * recognize the general organization of a web application and supporting systems * Develop and understanding of PHP, including how and when it executes programs * Create programs in PHP that run on the web * Understand the functionality of a database (MYSQL) and be able to create, retrieve, update, and delete data in it * Connect to a database server through PHP to create dynamic web pages * Recognize and identify common security vulnerabilities in web applications and countermeasures Pretty broad right? The rest of the 7 page document is all college policies on various things like cell phone use and grading. [This](http://www.amazon.com/PHP-MySQL-blueprint-creating-database-driven/dp/0470048395) is the book we're using. To be honest, he covers so much in lecture that I only use the book for reference- rarely at that.
Cause it's new?
I was thinking along these lines. My family is really spread out, so I feel like we would really benefit from something like this as a safer alternative to Facebook et al. 
No, everyone is telling you the exact opposite - rolling your own may help you learn some stuff but it won't be nearly as good as a community-driven framework.
Build a basic forum with threads, replies, discussion areas.
Wouldn't just [`sort($programarr)`](http://php.net/manual/en/function.sort.php) work for the whole thing? I know the assignment is probably meant as a primer for setting up more advanced algorithms. But it seems an odd assignment when there's already a function for that. Edit: &gt; but I can't get it to loop recursively `While` blocks don't handle recursion very well. Usually if something is needed "recursively", it means it should be handled inside your custom function itself. IE the function calling itself recursively until all the conditions are met. Something like this line added inside your swap function: $programarr = swapArr($programarr, $cntX, $cntX+1); Just changing the variable values, and wrapping it in an `if` block to check if the conditions are right to go another internal round. That way you can drop your outside `while` block altogether, as it's all being handled recursively within `swapArr()` itself. Hopefully that makes sense. If it doesn't, here's [the PHP example](http://www.php.net/manual/en/functions.user-defined.php): function recursion($a) { if ($a &lt; 20) { echo "$a\n"; recursion($a + 1); } } recursion(1); // 1 2 3 4 .... 19
One regret I have is not actually following through on the stuff I did in college. Sure, it's coursework, but, to be honest, there are plenty of niches that aren't getting the love that they deserve - and will pull in a bit of adwords cash in the long run. Plus, if you actually get users, you get to learn about scalability, security, etc. Real world issues - stuff that is actually valuable to employers. Pick a topic, say... windsurfing... and create a database of cool places to windsurf. Let people log their experiences at random windsurfing spots. Let people upload photos and rate them. etc. Don't pick movies, or music, or cars, or cooking, or anything big. Don't try to compete on a global scale - nothing like twitter or facebook. Pick a random, non-web related topic with 50,000 potential users - max. Once it's up and running, keep it up. Promote it as much as is reasonable. Plenty of ideas that can grow with you over the next 10 years - pick one you are interested in.
&gt; We need a perma link on the sidebar pointing to one of these threads. &gt; There's many of them a week! The answers are usually the same: I just meant that someone said that everyone's asking about frameworks and many people are talking about creating their own frameworks. I totally understand the advantage of using one that's out there and used by masses; 
I think I used SimplePie a couple of years back, worked fine. And the issue about no modifications for a couple of years isn't necessarily a bad thing. RSS 0.9 was defined in 1999 with the others following shortly after, so anything written that follows the standard should work just as well now as it did 10 years ago.
I'm more worried about PHP's changes than RSS's. I just tested SimplePie and it throws a massive list of deprecated warnings.
I've used Magpie RSS for a long time for any projects that require parsing a feed. It works well. 
That's not why PDO exists.
I know sort() exists, and the teacher knows sort() exists, but he's teaching the rest of the class how to program and I'm just following along in case I learn something new. If he were teaching the class to use functions that already exist, I would call him a terrible teacher. Instead he's teaching how to solve problems in real world situations, and for that I applaud him.
Yeah, if you want to use MySQL, there are only 3 drivers you can use through MySQL's layer alone. Clearly more shit is needed
You don't need one, just use SimpleXML (which is built in to PHP). With PHP 5 now, there's no real advantage of using another library (other than caching, which is simple to implement yourself) :) Here's some example code that outputs the link, title and short description (not the full article) for posts to my blog: &lt;?php $xml = simplexml_load_file('http://feeds.d15.biz/daniel15'); foreach ($xml-&gt;channel-&gt;item as $post) { echo ' &lt;h2&gt;&lt;a href="', $post-&gt;link, '"&gt;', $post-&gt;title, '&lt;/a&gt;&lt;/h2&gt; ', $post-&gt;description; } ?&gt;
Do you not understand the difference between an interface and a driver?
I'm the current maintainer of SimplePie. We're still working on it on [GitHub](http://github.com/simplepie/simplepie), but the code's fairly stable. The `master` branch there is 1.3-dev, which drops PHP 4 compatibility, which will get rid of any `E_DEPRECATED` errors. The `onedottwo` branch is 1.2.1-dev, which is a set of bug fixes to 1.2 that we plan to release as a bugfix release at some point. If you need any help/advice with SimplePie, please feel free to ask! :)
I really like the way Fuel is set up althought the restriction on only one subdirectory for controllers could potentially be quite annoying. Do you know of any tutorials or simple applications I could have a look at?
&gt; With PHP 5 now, there's no real advantage of using another library I have to disagree with you on that. It's fine if you're using a single feed, but when you're getting a bunch of different feeds, you'll find that they tend to deviate from specs in subtle ways. The majority of SimplePie is normalisation, not the actual XML parsing.
I'd second this, kohana is perfect for small projects.
Good point.
Oh wow. A million upvotes to you. Been playing with this and it's awesome so far.
How about the bug in 1.2 that breaks Google and Bing feeds? Is that going to be fixed in 1.2.1?
Agreed there. It would be overkill to use SimplePie for a single feed when its draw is for normalization of multiple feeds.
When my extended family decided to start "drawing names" for Christmas gift exchange, rather than getting a gift for everyone, I made a php/mysql app that automatically drew a name for everyone and allowed everyone to enter a "wish list" with ideas for the person who drew their name. That saved one person (me) from having to be the "keeper" of the names, and therefore not be surprised about who drew my name, etc. I integrated email notifications and all kinds of little bells and whistles that made it fun and easy. We eventually scrapped that scheme and now we all just pool our "gift" money and donate it to a charity, but I still sometimes work on my little project and add functionality or streamline something here or there. I figure if I ever get it to a state where I'm "proud enough" of it, I'll release it to the community.
Well, the RSS spec hasn't changed recently so these types of libraries don't need to have been updated recently to still work well. I've used RSS_PHP before and found it quite capable for my needs, which was basically just converting an RSS feed into a giant associative array for easier manipulation.
Which bug specifically? There's one that involves characters in the URL (i.e. `&amp;` and `=`) that might be affecting you, and that has been fixed in 1.2.1-dev.
You might think so, but I've seen feeds that are internally inconsistent too, using four different author formats, and two different date formats. Feeds are really a mess, though Atom is much, much better than any version of RSS.
Well you have my respect for working on that ridiculous mess.
For what it's worth, WordPress (and probably other CMSs) uses SimplePie with some wrapper functions. You could say it's been battle tested.
A craigslist like site that uses a phone number verification API for posts and responses to enhance security.
All I know is that Google and Bing feeds were not working in 1.2, but were working in 1.1.3. On your site I only see a link to 1.2, and that's the version the bug appeared in. I would love to know if Google and Bing feeds work with 1.2.1, or even better, a direct link to the code and I'll try it out myself. And I'll let you know if it has been fixed. And BTW, thank you for SimplePie, as it's a very powerful library, and also thank you for writing such well-documented code.
Fair enough. I've personally always used SimpleXML with no normalisation and it's worked fine for me. I do see what you mean by normalising the feeds though. :)
Yup.
Nah, I have no idea. Clearly they're the same thing, and you are the more experienced developer! Your views reflect those of the /r/php hivemind too, so you *must* be correct! Go on, tell me why PDO is so brilliant without just saying "It's always available". 
Everyone has been at this stage before, everyone has to start as an idiot.. but only the good thinking humans overcome this debilitating obstacle. 
Aha. 19...
It all depends on what you want out of a framework. If you're looking for it to do your programming for you, like RoR or CakePHP, then creating your own would be a huge undertaking. Personally, I only use frameworks for organization and enforcement of the MVC pattern. Because of that, I think that Zend and Yii are both bloated and they often make things that should be simple unnecessarily complex... which is why I created a lightweight framework that did exactly what I needed out of one. 
The `one-dot-two` branch is on [GitHub](https://github.com/simplepie/simplepie/tree/one-dot-two) (download as a zip/tar via the top right). &gt; thank you for writing such well-documented code. Huh, one of our major enhancements we need to do is to write more documentation. :)
Making your own can be beneficial. If you have the experience to do it. I'd say 2 years of "real PHP work" at the least, and you need to look into other frameworks, look into all of their changes to see if you don't make the same mistakes they did in the past, etc.
It never takes the trash out and will not mow the lawn. 
PHP is a Turing-complete language. You can do *anything* with it. Are you looking for *practical* examples, or *bizarre* examples? I mean, on one hand, there's Facebook. On the other hand is the dude that wrote [a freaking DNS server](http://blog.magicaltux.net/2009/02/19/your-own-php-dns-daemon/). Really, PHP has gained massive success because it's dead easy to learn, and pretty easy just to take any old C library and make it into an extension. I was about to post [this snippet about controlling one of iRobot's Roomba dev machines](http://stackoverflow.com/questions/4998847/php-roomba-serial-port-communication) as an example, but it turns out that the underlying serial port library is actually [pure PHP](http://code.google.com/p/php-serial/). To be honest, if you're looking for a good *general purpose* scripting language, you'd better look at Perl, Python and Ruby first. They're better *languages*, and don't carry the same backwards compatibility baggage that PHP is stuck with.
Reddit no but it could be - Digg is and always has been. Also Facebook.
Facebook.
Reddit could be made with it (although it would likely die with as many page views as reddit gets). Facebook uses it as well. Basically it can do almost anything, especially with the right plugins for image manipulation and whatnot. PHP can also execute shell commands if you let it (not recommended) but I made a nice little web app many years ago that played the songs from the server computer when I clicked on the songs from the web browser on any computer. It helped when I was working in a lab and wanted to not have to walk away from the computer I was working on to play a song/playlist. Lost the script like 5 years ago though.
&gt; Reddit could be made with it (although it would likely die with as many page views as reddit gets). Reddit's scalability (and scalability problems to a small extent) is better attributed to Cassandra and PostgreSQL than to Python, I'd hope. Keep in mind that [Cassandra comes from Facebook](http://en.wikipedia.org/wiki/Apache_Cassandra), the #1 example of PHP scalability.
&gt;it would likely die with as many page views as reddit gets Huh? Care to explain? Or was it only a joke?
&gt;Reddit could be made with it (although it would likely die with as many page views as reddit gets). Facebook uses it as well. If it can handle facebook, I'm pretty sure it can handle reddit. Just a matter of scaling and caching.
Facebook doesn't use some standard LAMP install. They transform their PHP to C++ with the use of [HipHop](http://en.wikipedia.org/wiki/HipHop_for_PHP). Not many hosting companies really have that option available.
Name one site that gets the same pageviews and uses a standard PHP configuration?
Yeah, guess that is true. I just never had a sight with 13 million pageviews a day so I just assume it would die. It seems once your sites gets that popular though none of the standard configurations seem to work and you have to look elsewhere to optimize what you have. I could very well be wrong, I just know I have a VPS that can get crippled, and I constantly crash the shared hosting I have anytime a large number of people visit.
I don't know which websites uses which languages! But PHP is only a text processor, would PHP be unable to handle a certain number of requests? If something was going to die, I would think about the database or any of the physical server devices first (memory, hard drive, ...), and you can configure PHP to limit the usage of each of those before the server crashes. For the record, I didn't downvote you, I'm really just asking.
Something like Reddit can be done easily with php. I wrote one myself as an exercise in learning it.
So why would the creators go with pylons? 
No worries, I knew a few developers would be too touchy when it comes to PHP and downvote me. Databases definitely tend to be the first to go under a heavy load, but if that was worked out or you didn't need databases and just had the PHP doing calculations I could see it using up ridiculous amounts of ram/processing power in comparison with C++ or Python. I wrote a PHP script to analyze images and it definitely takes up a large footprint when running (oodles of ram). I guess PHP itself wouldn't die, but the server can definitely become overloaded. PHP is compiled when the scripts are run unless you have some caching enabled, and that takes resources as well. If you look up any performance comparisons PHP never really wins out. With that said, most of the stuff I write has database issues long before anything else, and after that it would be the latency with the network while grabbing content with curl.
&gt;pylons I'm assuming that is a humorous name for python. I don't know, maybe they weren't familiar with it. [Originally, it was in common Lisp](http://en.wikipedia.org/wiki/Reddit#Technology).
I see what you mean. But I'm prety sure with proper configuration optimization, unit testing, server infrastructure ad so on, PHP can support any amount of traffic, really. But you're right, C++ *is* faster, obviously. But not as convenient!
Awesome :)
And to give you a concrete example, (even if we can't be 100% sure), SourceForge, [which is 1 rank above reddit in Alexa](http://www.alexa.com/siteinfo/sourceforge.net), [returns a php file in its headers](http://www.webconfs.com/http-header-check.php), and doesn't throw a 404 when you go to /index.php (as it would with .asp for instance), so we can't deduce that it's written in php (but once again, all these informations are just clues, it could be easily faked). I'm to lazy to find other examples, but you can, using the same technique.
None of that really matters all that much. At this kind of scale, you don't need to be 100% spam proof. You just need to make sure you're not the weakest site. If the spammer's bot can handle 90% of sites, and you're not running some massive, attractive target, he has no incentive to put the work in to spam yours (yet). Especially given that past that first 90%, you're running into the [law of diminishing returns](http://en.wikipedia.org/wiki/Diminishing_returns). The last forum I helped with spam issues, simply adding a yes/no question to the phpBB registration form solved all the issues. (This was a forum that was heavily populated by both Western and East Asian cultures, so it wasn't even a complicated question. And it never changed.) From the conversations around r/php, it sounds like the forum should have been inundated with spam! 50% of the registrations should have gone through! And I was even allowing unlimited attempts! When you get up to the scale of something like StackOverflow, then you need to start looking into more extreme measures - you're suddenly a much larger, more profitable target. Of course, by that point, you also have an entire user base to leverage for spam filtering. Maybe I've just gotten lucky. Maybe I just inhabit some sort of parallel alternate internet from everyone else. I really don't see what the huge problem is.
One more happy Linode customer. Wonderful hosting.
Not as convenient at all... which is why I only develop with PHP these days.
Something like [this script](http://www.consil.co.uk/blog/2010/02/07/cleaning-utf-8-streams-for-xml-parsing/) I put together may be useful as an input filter. SimplePie breaks easily with bad characters coming in on feeds - feeds that, as a consumer, you have not control over. Using this filter has saved my bacon many times. It's not an RSS parser, but should (or something like it) form a part of any RSS parser IMO. Oh, and one request: *please* split the front and back ends of SimplePie into separate scripts. Having to load up 10,000+ limes of PHP just to access the back-end feed reading is excessive. I grant you, little out there can match it.
Thats a'lota limes!
That's actually a pretty awesome idea. My wife's family is rather large and does this every holiday. It sounds like a really interesting site. Let me know if you decide to release it to the community and I'll be sure to suggest it for the holiday season.
LOL. I tried just doing a generic blog on some blogging site and I just couldn't stay on top of it. Plus I don't think anything I have to say from my daily life is interesting enough to want to share on the internet.
I've tested 1.2.1, and indeed, the issue I'm experiencing has been fixed. Thanks a ton. I'm not familiar with git, but I was able to figure it out after some picking around. I wanted to add for anyone else reading this thread: if you want to avoid the E_DEPRECATED errors with 1.2.1 but don't want to upgrade to 1.3, just do a search and replace. Search "=&amp; new" and replace with "= new", you should have 112 instances with 1.2.1 and 96 instances in 1.1.3. I'm not aware of anything other deprecated errors being kicked out by php 5.3. Again, thank you for your hard work on the project. And while I understand you guys feel you need more documentation, you're already miles ahead of most projects, and if I may speak for the community, it's greatly appreciated. SimplePie is exceptionally well documented, and it makes it a breeze to use and troubleshoot.
FWIW, there's relatively few API incompatibilities between 1.2 and 1.3. If you're concerned about the multi-file setup for autoloading, the `SimplePie.compiled.php` is essentially the same as the old `simplepie.inc`. :)
I was honestly curious as to what that file was. And yes, the multi-file setup was my sole deterrent. Our project is a bit spaghetti, and while I can definitely see how breaking things up would make it easier for you to maintain, it only added to our mess. Godspeed, and I'll be recommending you over MagPie any day. 
I tried ZS as well, and couldn't deal with it's many limitations. I've used PHPed (nusphere) for years and I'm very happy with it.
I'm sure everyone expects this answer, but mostly php.net (I have the manual as a search engine in Opera). In addition to the definitions, the comments are sometimes very insightful. When that fails, I pretty much just use Google.
Oreilly's PHP Cookbook. I read it cover to cover without coding a thing. It really gave me a lot of insight into what (and how) PHP would do. 
O'Reilly really produces amazing learning guides, as far as programming goes.
Php.net. Practice. Practice. Practice.
I would use GET variables in the URL string eg. eg. http://example.com/mytable.php?sort=city&amp;order=desc Advantages include: - Linkable - Bookmarkable. - Easy to read and edit the URL manually - Simple to programme, simple make your column headings links - No javascript required If you wanted to get fancy and avoid reloading the page, you could then implement an AJAX version, however you need to be careful about making it URL friendly.
Typically I set them using GET variables exactly like that, but I've run into multiple cases where I need the values to stick. The only way I have found, shy of having really long urls like: http://example.com/page.php?sort=city&amp;order=desc&amp;filter=zip&amp;dateLimit=5... is to just store them off in the session or in a cookie.
I do use javascript because makes things a lot easier, saves me a bunch of coding (i love you jquery!) but if I did it with php, I would use modrewrites, mostly because it will create more SEO friendly crawlable links. mysite.com/page_with_table/column1/asc RewriteRule ^page_with_table/(.*)/(.*)$ page.php?column=$1&amp;order=$2
You also store state in the page using hidden form elements and making each table header submit a form. This is, in a round-about way, how I do it. If I want values to stick between pages, that is what sessions are for. 
thanks for the tip, just added the manual as a keyword in my chrome options.
I'm making a household budget website for my class. You can enter your earnings and spendings and see some statistics. Still in the planing phase. You can make the base stuff pretty fast and add functionality later if you have free time or after the class is finished.
Well, every time you have a result set, it's based on a few things. 1. The base query. 2. The offset and limit for pagination. 3. An array of columns to order by and their direction. (id/DESC, name/ASC) 4. Any filters you wish to selectively apply (a name to search on, a range of prices to include, date range) So, I usually have a SomeObject::getList ($filters = array(), $orderBy=array(array('id' =&gt; 'DESC')), $offset = 0, $limit = 10) type of method on a model. I always return a nice array result set, and then if you want to you just call json_encode() and ajax becomes easy. Anyhow, you are always going to need those parameters, so every link/form element that alters the result set is going to need to send everything that describes the result set you want. Most sites would use $_GET variables, using sessions seems a bit odd but could certainly work. When you return your result set, also make sure you send back the parameters that you used to build it so you can mash those parameters back into the url. That was a long way of saying use $_GET.
Thanks, I'll definitely check it out. Having the manual as a search engine is also a pretty smart idea.
chrome has a nifty little [addon](https://chrome.google.com/webstore/detail/kfiahljocaflpaiopilgpiochncgdnhd) for php.net :) 
This would create a lot of duplicate content, a rel="canonical" link tag in the header would be highly recommended. 
Make it front end / client responsibility (if all the results are displayed on one page). Here are two JS libries to investigate or combine (like i did) http://www.kryogenix.org/code/browser/sorttable/ http://www.javascriptkit.com/script/script2/sorttable/index.shtml 
Also, you can just type 'php.net/keyword' into your address bar.
I read about 5 or 6 PHP books until one finally made everything "click". It was Larry Ullman's PHP and MySQL book (peachpit). I've had the book for over 6 years and albeit dated material now, I still find myself picking it up a few times a year to look something up. It was truly my "invaluable resource" when learning PHP. 
After looking at their website and seeing the reviews for their books, they seem to be the one I will be choosing, although instead of the PHP Cookbook I think I am going to purchase Learning PHP 5 as it is aimed more at complete beginners (it also said in the "Who this book is for" section that it would be better).
Please don't use a session variable - if I load two tables from your site in two tabs the sort is going to conflict. Use get variables in the links, and write some functions so you don't have to manually generate the links.
You can use session vars to remember the values, however there's a trick. Use them to create the URLs for the links to the page, not to choose what to display. The key is to ensure there is one unique URL for each state of the page. At any stage if you send someone a link to the page, it should be the same for them as you see it. eg. - go to http://example.com/mytable.php - click 'order by city' it will take you to http://example.com/mytable.php?sort=city - save a session variable to save sort as city - any generation of links to the page should check the session variables and use the saved settings eg. &lt;a href="http://example.com/mytable.php?sort=city"&gt; Alternatively there are Javascript only libraries that will do the sorting of tables for you, remember the pages, and might even sort the URLs however they aren't very good for paginated data without moving to AJAX stuff.
Also [DataTables](http://www.datatables.net/), which comes as a jQuery plugin and is awesome.
I'm still relatively new... I'd have to say friends who could answer my questions that the books (I'm self-taught) couldn't answer/had holes/assumed one knows more than the book SAYS they assume you know, etc. The answer remains the same today. heh
On a side note, it SAYS it's for beginners with no prior programming language experience (I know, that's why I bought it myself) and even though I DO have some minor and/or basic experience... but unless you ACTUALLY have some programming experience, it's got a lot of holes in it. And a couple of typos that really screwed me up until I got my friends to confirm that I wasn't doing it wrong, the book was. :( Mostly it's accurate, it's just that it seems to go Step 1, Step 2, Step 3, Step 5, Step 12, Step 13, Step 14, Step 21, Step 26, Step 41... you know? Anyhow, if you don't have prior experience and want this book, I strongly suggest hooking up with some friends who are available either online or in person to ask all your questions when the book doesn't make any freaking sense. Good luck! :D
FWIW, this is [one of our top issues](https://github.com/rmccue/SimplePie/issues#issue/21). Unfortunately, we have very little time to do development work on it ourselves, so we have to rely on patches, which aren't usually of working quality. If you can fork it on GitHub and write the code (and prove it works with a test or three), I'll certainly pull it in! &gt; please split the front and back ends of SimplePie into separate scripts What precisely do you mean by this?
Thanks, bought the book earlier tonight and will have to keep that in mind when I read it.
Well , not really Php per se , but back then ( 6 years ago) , I really needed to learn how to create a virtual host for testing , so I'd say the apache httpd page and Gnu/Linux.
The session is info about the user. The query string is info about the resource. If you have collisions between pages, then something might be wrong with the design. Perhaps you mean your users can save preferences on sorting, say, red wine by region and white wine by grape, then this is part of the user/session. Sorry, not much to go on by what you posted, just try to decide if it's a resource identified by a uri or a way to serve a resource based on user preferences (like lang=en).
Hm? If you mean my age, I'm actually 20 (and will be 21 in a few months), my blog description's just out of date.
I do it with javascript as well, saves trips to the db.
This is quite a nice strategy, I didn't think of using Memcached to do such things every increment. 
Thanks for the Opera tip! Ubuntu provides the entire PHP reference manual as a .deb package (or it can be downloaded as a [tarball](http://www.php.net/download-docs.php)). Alias [http://localhost/phpdoc](http://localhost/phpdoc) to the right folder, and you rarely need anything more.
...or type "php.net" into your adress bar, hit TAB then enter your keyword and hit enter.
I'm very fortunate to have a very active PHP-dedicated local user group, with monthly meetups, dedicated IRC channel and mailing lists. *That* was my most helpful resource, being able to talk to people about problems they'd solved, get introductions to tools and methodologies I might not have otherwise found and share experiences.
The Peachpit press books are all good. They were used as textbooks in some of my college classes.
This is also how I usually do it, problem is when you sort by city and it default to order desc as first, then you click country and its how you handy the order of desc or asc. Usually I've had if order = asc then make it desc but clicking along columns and it goes asc then desc then asc then desc. Perhaps some thought into this without a wine or two might figure out a better way...damn that was a lot of typos to fix...
hahahahaha what the fuck is this
For learning: * [PHP.net](http://php.net) * [Stack Overflow](http://stackoverflow.com) For reference: * [Gist](http://gist.github.com) * [Pastebin](http://pastebin.com) * [Snipplr](http://snipplr.com) The best thing I can reccomend is to dive in, write out your first program, save it...and write it again. Every time you 'draft', you'll notice you figure out ways to do it a little better. Once you get a handle on procedural (i.e. writing functions and whatnot), do yourself a favor and learn how to use classes. Almost all the code shared these days between coders is object oriented, and you'll be better prepared to reuse other snippets if you start early! Good luck! 
MySQL deserves all of the love that it currently gets from developers that actually write code and not blogs.
I've used this in the past, it's brain dead simple which I like. http://yoast.com/articles/sortable-table/
vampire_kitty does make a good point. A lot of O'Reilly's books are programmer friendly. They aren't great for real beginners. They do do a good job explaining how for-loops, while loops, etc. work, but it's not the greatest. The nice thing about O'Reilly is they have books in each language for pretty much any level of programmers. I have PHP5, the PHP Cookbook, and the PHP: The Good Parts. They are GREAT reference books, as long as you know what you are looking for. Either way, callumt, good luck, and have fun! If you have any questions, let me know. I'd be glad to help you out with any questions.
Has anyone really been far even as decided to use even go want to do look more like?
do it. cake rocks. great documentation, ajax ready, cake "bake" feature creates your mvc quickly.. list goes on and on..
I've done a number of projects with Cake and I find it fits my development style best (convention over configuration). My team also evaluated Zend and Symfony. They're all great frameworks, but we found Cake fit our needs better than the others.
You have been lucky. In my experience, it has not been about scale or size or who you are or how much of a prized target you are. Once they find you, they beat the everlasting piss out of you, and they never stop. In fact, it's more of a problem if you're small because you don't have the structure to withstand that brutal of a robot incursion. Your site either chokes on all the traffic, or your forum chokes on all the spam because you don't have the man power to moderate all of it. The diminishing returns are negligible to a bot or a botnet. They are the quintessential zerg rush. Quickly, they turn your quiet little Warhammer forum, or gaming community forum, into a barren wasteland of cheap viagra and junk.
Thanks for the link, this is really nice!
Dojo [DataGrid](http://dojotoolkit.org/reference-guide/dojox/grid/DataGrid.html) is perfect for this. It is what I use.
In my previous job, I worked fairly extensively with CakePHP and found it to be a pretty solid framework and pretty tweak-able for performance. I am now working in Ruby on Rails, and found the parallels to be significant, so it made the transition easy for me. CakePHP was originally conceived as a PHP port of the rails framework. 
Google, which 90% of the time leads to php.net like everyone else is saying.
If you want to adopt Cake, only learn **2.0,** currently in beta. The current stable version is based around PHP4-era architectural concepts and coding practices. This can lead to brain rot down the road.
That is my only real grip with Cake. Don't get me wrong I love rails but I kind of feel like they shoehorned stuff that is easy in ruby into php.
Yes, there are definitely language differences that make some things that are easy in Rails more challenging to emulate in PHP. There are probably some things that *shouldn't* be emulated too, but it's been a while since I worked in Cake, so I couldn't mention any examples off the top of my head though. That said, I started with CakePHP quite a while before I knew anything about RoR, and never felt uncomfortable using Cake as a long-time PHP developer. In the end, I think they ended up with a solid MVC framework, even if they do engage in a bit of Rails-envy from time to time. I've heard they've diverged from Rails in later releases though, and are more forging their own way ahead, rather than try and maintain the tight Rails association.
Actually, 2.0 is only at dev level and hasn't even made it to alpha yet. A number of things are still incomplete in the 2.0 branch. I wouldn't recommend using it yet, as there may still be considerable structural changes before it reaches alpha or beta.
I recommend finding the one that fits you best. the reason there are so many isn't because one is definitively better than another, simply that they all aim at slightly different goals. That said, here are a list of respectable MVC frameworks, by no means a complete list but it's a start. * [Zend Framework ](http://framework.zend.com/) * [Code Igniter](http://codeigniter.com/) * [Kohana ](http://kohanaframework.org/) * [Symphony ](http://www.symfony-project.org/) * [CakePHP ](http://cakephp.org/) * [Yii ](http://www.yiiframework.com/) There are also several ORM libraries out there that can easily be used in conjunction with any of these frameworks, most notably: * [Doctrine ](http://www.doctrine-project.org/) * [Propel ](http://www.propelorm.org/) To answer your actual question though, No I don't like CakePHP. ~~Reason being I'm not comfortable with a framework that does a lot of "magic" things that are not expected behavior~~, or a framework that tries to write code for you. I feel those two things lead to unreadable code, and also detracts you from the process a little to much. I think the best kind of framework is one that is lightweight, secure, and modular. For example, You want to be able to use a library for payment processing if you need to, but for 90% of the projects that don't need to, why include it? let someone else maintain that library for the few instances you need it, time saved on your end for development, and also one less thing the framework authors can focus on the framework. **EDIT:** I'm retracting my statements about CakePHP having "magic" pieces to it, I confused it with another framework I had recently looked at. However as chadcf has pointed out, the current version of CakePHP still supports PHP4, which I think is a huge reason NOT to use it. PHP4 is well past it's end of life , and the class enhancements PHP5 brings makes it crazy not to support it. 
His TV news show is shit though.
From his history I'm guessing it was supposed to be blogspam but it failed and is now failspam.
This man tells the truth.
Same boat. I still like Cake, but man some of it is just so much more painful in PHP (especially since they still support PHP 4 which really limits what the ORM could do).
I've never had cake try to write code for me... Nor have I really found anything it does that is magic. I'm really curious what folks consider magic, I mean, it's a library of functionality. I tell it to do something, it does it. I suppose it's magic if I don't understand how the framework internals work, but that goes for any framework. To me that whole argument just seems a bit silly. I mean, apache is pretty magic, you just stick a PHP file in there and some html comes out, like magic! But that doesn't mean I'm going to instead write my own web server because I don't like the magic of apache... I like Cake. I don't love it, mostly because the PHP4 syntax makes it kinda crufty. But when I need a quick app and rails isn't an option, I turn to Cake. For a more serious project, Cake would work just fine, but I might turn to something lighter and more modern like Fuel or Kohana. But really, there's nothing magical about Cake.
In Chrome, you can also type php.net + tab + search criteria to search within php.net.
I found their documentation to be pretty bad actually. I was constantly having to go outside of their docs to find things and then was constantly running into version problems because of it. That combined with a very clunky ACLs system made me give up on it.
Yeah, if they haven't done so already, it's time to drop PHP4 support. Or ... at least fork the project and support php4 on a legacy branch if they still think there's much value in it.
I agree with the majority of what you've written - Zend, Code Igniter, Symfony and CakePHP all have large followings, stable codebases, and would be fine to standardize on. I disagree in the analysis of CakePHP though. The framework could be considered heavier than some frameworks that are completely componentized, but if you're going to use the MVC design paradigm, why would you not want a model, controller, and view class instantiated? CakePHP does some other utility classes by default such as logging support. When was the last time you built an app that didn't need logging support though? Your example about payment processing is silly - I don't think that there's a framework out there that would load something like that by default. To answer the OP's original question, I've found CakePHP to be great for our business for a number of reasons and a definitely recommend it a solution. I have been working with CakePHP almost exclusively for four years now. I work in a smaller application-development group doing client work ($50k - $500k budgets.) I've also worked with Symfony and Django for a few projects. Much of what I write below could be applied to almost all of frameworks listed by the parent. **The good things I've found:** * CakePHP pretty much forces you to follow a very specific and well thought out design paradigm. If you have a team that works on multiple projects, it is easy to bring team members up to speed quickly on an existing project, since everything is laid out the same. Once one of my team has gone through one project, they can pick up other existing projects easily - even if the original developer on the project is not longer available. * Speed of implementation. We can have a project up and running very quickly. If you do a lot of form processing, Cake is wonderful. It has an extensive validation system and helper classes for handling form generation. * Routing. The routing system is extensive, easy to use, and highly configurable. Makes it very easy to refactor the application without changing URLs. **The bad things I've found:** * Examples given in the documentation are generally poor. * For data, it uses a named arrays instead of objects - that is, CakePHP is not fully object-oriented. In closing, I'd say yes - CakePHP is fine to standarize on. We've done it and it works well for us. It may or may not be the best fit for your situation and team, but we're happy we did it. Edit: formatting
You are welcome.
&gt;For data, it uses a named arrays instead of objects - that is, CakePHP is not fully object-oriented. I think Arrays and Objects have very different purposes. For example you can loop through the elements of an array. I wouldn't use an object to store array type data unless I needed functionality combined with that data(such as with an ORM type library) and even then, I would use PHP's SPL to add something like ArrayObject to provide the same array type access with that extra functionality that may be necessary.
I tried using it a while ago and I found it far too much work for to little gains. I've been coding PHP by hand my whole career and the thought of having to jump through hoops to have a framework build just seems like a waste of time. My advice is code by hand like a man!
Make a web app to help the family coordinate gift giving. Family members sign up, and list items they would like to receive. When they go to the "main view" they see a list of items their relatives would like to receive. Users can then select a requested gift item, and mark it as having been purchased. Family members can log in and see the status of what OTHERS have been gifted or requested... but cannot see the status of their own gift requests. Once items have been marked as purchased, they no longer appear in the "wanted gifts" list. The person who requested the gift should have no idea whether a particular gift was/was not given. I think this would be a great "into to php and relational databases" exercise. If you want to do something fancy... make the view dynamic using jQuery!
That's disappointing, I'd heard that they got further than that. Or was that what the whole [Lithium fork](http://lithify.me/) was about?
Thanks!
I'm glad to see someone else mention the ACLs. It seems extremely bizarre and confusing to me, but since I've never seen another mention of distaste, I figured I just wasn't smart enough to really appreciate its pros.
Ahh that was the thing I was missing, the generation of the url's based on the session. Thank you!!
It's quick and useful for simple applications but annoyingly abstracted and limited for larger and/or more complex projects.
I will agree that the docs for each version can get very confusing. The ACLs are something you have to do a ton of times before its second nature. There is a great tutorial http://book.cakephp.org/view/1550/Setting-up-permissions that pretty much holds your hand through the whole thing. 
This seems like pretty terrible advice to me. Frameworks are there for a reason, and from your comment it doesn't sound like you really gave them a fair shot. How long did you use Cake for? Have you tried out any other frameworks? Have you ever built a very large PHP app by hand? Can you see the benefits of structured separation of logic/presentation, well tested and feature-rich ORMs, a templating system, plugins, any of that?
Well the OP asked if I liked CakePHP and I did not. To be fair, I didn't give it a very fair shake but we had a deadline and I had to make a decision. I've built several large scale sites and building them from the ground up give you intimate knowlege of where everything is and how it works. A well designed and modulated site is its own framework.
Agreed - arrays and objects have very different uses. But Cake makes use of arrays for individual records. Consider Cake's find method. If we use it to return a list of users, joined with their profile record, we get something like this returned. array( 0 =&gt; array( 'User' =&gt; array( 'id' =&gt; 1, 'email' =&gt; 'test@example.com' ), 'Profile' =&gt; array( 'id' =&gt; 1, 'user_id' =&gt; 1, 'description' =&gt; "blah blah" ) ), 1 =&gt; array( 'User' =&gt; array( 'id' =&gt; 2, 'email' =&gt; 'test2@example.com' ), 'Profile' =&gt; array( 'id' =&gt; 2, 'user_id' =&gt; 2, 'description' =&gt; "blah blah" ) ) ); The outer array I'm fine with. It's that they treat the individual records (User, Profile) as arrays too, rather than objects. 
I wouldn't say that just because it supports PHP4 means it has issues. After having done some digging in the core myself, I can say that Cake makes use of PHP5 when it needs to but has fallbacks to support PHP4 in case it is running in that type of environment. It's not as if it always defaults to the way PHP4 wants things from an OOP perspective. Plus, it supports all the way up to 5.3.x without issue (1.2.x and 1.3.x). The next branch, 2.0, will be a strictly PHP5 framework. I know the team is also working hard to ensure as much backwards compatibility as possible with the current version, 1.3.
It is a problem, in order to get same functionality from both PHP4/PHP5 means that tons of functionality cannot be included, such as: * Abstract classes or functions * interfaces * PHP's SPL library(No iterating over objects, or accessing objects as an array) * private protected and public methods and variables. I see PHP4 support as a huge downgrade in potential functionality, and while I never meant to imply that they didn't support php5, it's that they don't actually use any of the actual benefits of PHP5.
Love it. I can whip out apps with ease in just a few hours. I go fat model, skinny controller with multiple layouts as needed built around fluid 960gs. When I have to work on somebody's crusty old raw PHP app I pull in redbean.php and phpsavant if they're not already templated. Both are tiny and nobody knows they're there unless they start digging.
Unless you have a strong business reason, a framework should be required in all your team's apps. Thumbs up on deciding to move in that direction. I built a smallish app in Cake and actually leveraged several of the Zend libraries as well in the same app. It went pretty smoothly since Cake has been built with the concept of vendors making it easy to pull in big chunks of code in a very "cakelike" way. I delivered the product that I wanted to and Cake helped to add some features that I hadn't even planned. That being said, I dont use Cake for any small projects... things that I would build in a few weeks time, instead I use Code Igniter. I think the main thing that keeps me away from Cake is how they abstract the database queries into these complex dictionaries that specify models and properties. On my first Cake project I spent the bulk of my time tinkering with all the facets of find() and the (often) deep object graphs that it would return. Once I had it down, sure it worked great and was open to tweaking. When I'm just interested in getting an app out the door there is nothing quite like the elegance of writing your own SQL. Code Igniter has some decent Active Record functionality built in, but its also very comfortable just providing you with a plain database wrapper to perform your queries. Documentation is good for both. CakePHP is very well documented. Zend is also well documented but for whatever reason I find it incredibly boring to read through.
I too have coded apps by hand and I get what skeletonhat is saying about feeling "like a man." There is something empowering about building an app from scratch, knowing every nook and cranny of every step in the execution path. But let's be real, you haven't thought of every gaping security hole in your app, you haven't built it modular for easy futureproofing, and you probably spent more time commenting your code than writing it--just so you dont forget how it works. Let the framework take care of the vanilla logic and get back to what you're really being paid for--writing the custom logic. Leave the zealotry about hand coding at the door.
It's a problem because you can't do something like: foreach ($model_find_results as $widget) { $widget-&gt;my_custom_method_on_model(); } Having your data returned as an object, though not always desired for performance, is quite powerful. An example would be wanting to spit out a full name when your database holds first, last, middle. In Cake you'd have to concatenate those in the view, likely in a bunch of places, or write a custom sql query to concatenate them. In a proper ORM, you just implement a fullname method on your model and output that in your view. Rails takes it a step further in that you can even tell it to include the output of record methods as data points in json output (not performant, but useful sometimes). 
Pumping that data into an object would add needless overhead and would add very little benefit. In fact, it would be harder to work with if data were returned as a collection of objects. PHP isn't a fully object-oriented language and forcing it for the sake of the design pattern isn't always the best idea. PHP loves arrays - I think it's good to play to the language's strengths. Cake does a really good job of balancing PHP's strengths with good design patterns, IMO.
I disagree with model data. One of the huge benefits many ORM libraries have is allowing users to manipulate the data with an object. For example, if I have a field specifying a record "active" or not(like a enum yes,no kind of thing) I can easily make a function like is_active() which returns a boolean. sky is the limit with this kind of stuff
Learning a new framework for a project that is due is not a good way to go about it, imo.
we've used cake since 1.1. we are switching to rails but we still do projects in cake. the newest version of cake is actually quite nice to use, it has matured a lot over the past couple years. i recommend checking it out.
yeah, also if you plan on ever doing anything with rails, cake was started as a php rails port, so the core concepts and underlying ideas behind them are quite parallel.
code generation? do you even know what the fuck you are talking about? this isn't dreamweaver, dude.
&gt;I've never had cake try to write code for me I believe he is referring to bake, but i haven't ever used bake, or even managed to get it to work. 
+1 for mentioning Redbean. I'm surprised at how little is known about it. It is the first ORM I've used and I love it. Am currently looking into experimenting with Doctrine.
php.net/quickref I found I memorized that URL in practically no time at all
You are likely getting downvoted because your comment is not very constructive. You state a preference, but don't really explain it. Cake doesn't do code generation for you. It has an optional command line util which can spec out models, controllers and views. Most people, beyond newbs, don't use it. It can also generate a full crud interface to a model. Almost nobody uses that, unless you need a basic admin backend, at which point it's a huge time saver. Baking in no way limits your ability to write your own code. Nor does it really make much of an impact on your development. I mean if you tell it to spec out a model for you, it creates: class MyModel extends AppModel { } which is not exactly magically writing your application for you. Perhaps you could expand on your statement a little, and explain why you think optional shortcuts mean the framework is crap and how this limits what you can do with the framework? 
Meh. I look at the things a Framework does: * Routing * ORM * Templating * Authentication * View helpers * Security Audits (hopefully) * Form processing (sometimes) These are things that have been written many times before and I have no interest in writing them again and maintaining them. You could peace together your own from other projects, but then you're not really being a man and doing it from scratch :) So if I have a project to do, which requires some cool custom logic, I'd rather just dive into that custom logic rather than worrying about all the crap that's been done time and time again. Now obviously, you could maintain your own 'framework'. Which is fine and dandy if you want to do so, I just don't have any interest in maintaining, testing and securing a bunch of code when I could offload that onto someone else, and have more eyes improving and securing it in the process.
php.net (and still use it for fast reference on how to properly utilize a function!), but the biggest by far was my own hosting to actually experiment with different techniques.
Lithium is "cake 3.0" for PHP 5.3+
I use it to quickly generate all my models/relations, and then tweak it all from there, makes it very fast either ways
We use it, I like it more than I like PHP -- one thing to look out for, the MSSQL support (especially over ODBC) isn't as smooth as it could be (I'm still not at 100%) so it's great that they let you use other DBs, but test before you assume it'll work and commit to it on your schedule.
If you can't easily find documentation, tutorials, etc then don't use it. You will only end up frustrated. Use something well documented like Zend or CakePHP.
And accordingly (it seems), the documentation and third party support is even worse. Sad to see something with good prospects dwindle so fast. No way to use this in a production environment any time soon.
To show others the potential of your framework, given limited ressources, you basically have two options: either * provide a fancy and well documented example, or * give them *optional* code generation, so they quickly see what the framework can to for *their* situation I used "bake" to see how it is supposed to be done (well, at least how it is working, somehow), and proceeded from there with my own bells and whistles. From my experience: customers love "baked" interfaces during a time in your project when you're still tweaking the table structures. It's something for them to play with and they see that you're actually making progress.
For my fellow Textmate users, the default PHP module has two very handy keybindings for use when you have your cursor on a php function. Hit Option-F1 for quick-help on the function parameters (shows in a tooltip), and Control-H to open a window directly to the php.net page for that function.
This situation was part of what drove me to CakePHP. What good is the (arguably) best and most modern concept when no one cares to support it properly and there's not enough previous work to give you a head start?
Fuel is very young (1.0 final is around the corner.. I think). As a result there is not a wealth of documentation or examples for it. There are the official docs: http://fuelphp.com/docs/ . For a (simple) example application you can look at this: https://github.com/abdelm/stationwagon . Fuel is certainly a hip new framework... but it isn't going to have the level of documentation/examples of things like CakePHP or CodeIgniter.
Check out wbond's Flourish library. It has excellent documentation *AND* he created that site himself. I mean, can you say you're NOT impressed? http://flourishlib.com/
What, Lithium? It's nowhere near being ready, I don't think they've even completed specs
I've been using CakePHP for years and it's pretty good, especially nowadays in the 1.3.x stuff. It is very much convention over configuration and will take you very far, but like anything else it can get hairy at times. Most recently I've been developing with Django, and after working under more mature development standards, I'm not terribly happy when I have to write php. While I haven't used it yet, from the frameworks I've looked at recently, Kohana looks to be the most modern/powerful, and the few good programmers that I know who write PHP use it. There is also Lithium, but it's not ready for prime time yet.
i've never even heard of it...
One of the many features of https://github.com/facebook/hiphop-php/wiki/ but probably not what you were looking for.
[Yii](http://www.yiiframework.com/) has really impressed me and I would suggest giving it a hard look.
I agree that it would be helluva handy to have the custom functions for that, but for your example the solution you can use in your model is: var $virtualFields = array( 'full_name' =&gt; 'CONCAT(UserProfile.first_name, " ", UserProfile.last_name)' ); and in the view: echo $UserProfile['UserProfile']['full_name'];
AFAIK, Outside of your webroot, in an INI file is the way to go.
Also make sure to turn off all error reporting when in production (duh) so that your info won't be dumped unexpectedly.
You should keep your files outside of the webroot and invoke the files using a [front controller](http://en.wikipedia.org/wiki/Front_Controller_pattern). If PHP would happen to fail, you wouldn't want your code to be readable/downloadable. The info should be stored in a configuration file (of your own choosing. PHP file containing an array, ini, yaml, it's all good) that is then used to lazy-load the objects on-demand.
Only if you're only allowing the user to sort just the data from the initial db query. Usually this is paginated.
No, sadly, there isn't. It is a massive risk really, and on that you can't really stop. All suggestions of not www visible are OK, but still mean the file is text based. Personally, I set an array with the details, then connect, then set the array back to nothing ($db_details = array();, so that even an include yields nothing (although you vould just fopen the file). Again though, that just puts on hold the issues of a plain text file with the DB details in it.
`preg_replace()` requires the pattern to be delimited: preg_replace('/youtube/', 'test', $relatedVideo-&gt;watchURL); The manual has a [section on PCRE syntax](http://au2.php.net/manual/en/reference.pcre.pattern.syntax.php) that might be worthwhile reading.
What is the harm should your MySQL login be exposed? If your MySQL user only has minimum rights (CRUD, no GRANT, etc), database is restricted to localhost only, and with prepared statements to your SQL - what use is someone else knowing the user name and password? security through obscurity is a weak defence. 
If the user is smart enough to gain access to the PHP files, they're smart enough to get the login info. 
I'd like to suggest something I'm currently doing - I'm scrapping my roll-your-own framework, making only the router/request handling class and template class and using http://flourishlib.com/ for the features... That way you get a stable feature set, but you can still organize what you want the way you want it.
There's no sense in using preg to replace constant strings, use str_replace('youtube', 'test.php', $replace);, it's way faster too.
You are thinking about security in a bit of an odd way. Think of it as in layers, if someone was to somehow able to sql-inject themselves the ability to connect remotely, then you would want your passwords secure. Security through obscurity *by itself* is bad...but it is hard to argue that it doesn't add another layer of protection, no matter how thin. So yes, do not rely only on the fact that your password is hidden from the main html docroot, but it isn't a bad idea to do it either. Edit: Now that I see your username, I am not sure if I should have taken you seriously...
I maintain my own framework, and have been using it (and evolving it) for projects for a number of years. I certainly learned a lot building it (and from looking at other frameworks, from which I've adopted a number of concepts). However, if I was starting over again, I certainly **wouldn't** recommend rolling your own framework.
Putting it outside the web root is a good idea. I don't see anyone having mentioned using .htaccess, with which you can deny access to files from the outside like this (as well as other ways): &lt;FILES "mysql-config.php"&gt; Order allow,deny Deny from all &lt;/FILES&gt;
You can try free plan of [BootStrapToday](http://bootstraptoday.com). Its SaaS based, so you don't need to setup anything and its very simple and intuitive. 
Careful with using php files containing your passwords. If you accidentally muck up the "&lt;?php" at the top of the file, then your require_once() statement will dump your passwords to the screen ([see tumblr's big oops](http://blog.kevburnsjr.com/how-to-prevent-a-leak-like-tumblrs)) 
&gt; What is the harm should your MySQL login be exposed? If your MySQL user only has minimum rights (CRUD, no GRANT, etc) umm, I think the harm would be the U and the D parts
I usually do this based on domain. extremely simplified example: switch($_SERVER['SERVER_NAME']){ case : 'www.example.com': ini_set('display_errors', 0); break; case : 'dev.example.com': ini_set('display_errors', 1); break; } That way I don't forget to change them. Technically I usually use Zend Framework which has a cascading like ini setup and I just tell it which environment (development|staging|production) to use, but you get the idea...
In a sock under my bed
This is a good way if you are on a shared host and/or outside the webroot is not an option. You could even put all your config information in a folder inside of webroot and block access via htaccess.
Here's a function from the PHP manual comments: function format_bytes($size) { $units = array(' B', ' KB', ' MB', ' GB', ' TB'); for ($i = 0; $size &gt;= 1024 &amp;&amp; $i &lt; 4; $i++) $size /= 1024; return round($size, 2).$units[$i]; } (http://php.net/manual/en/function.filesize.php) You could simply change the units to match, and the division (1024 to 1000).
My user name aside (some do try), if some one could hack a sql-insert remotely using the existing user credentials why would hiding your password slow them down. This existing mySQL user would need grant right to give remote access to others and with that level of security, or access through the sql-insert, they could use the current user to destroy your database. Yes, tissue paper security would be another layer of control. It looks to me as people rely on this method too much. PS I too 'hide' my user name and password - old habits die hard.
I'm fairly certain OP created a throw away because they were far too lazy to figure this out on their own.
I like the approach, but a lot of people leave debug flags in their sites that could accidentally expose it, so I'd be afraid to use on a big team of developers.
I store mine outside of the webroot folder. I think that is the best that someone has figured out. If your server is secure then the password would be. But in the end, there is always someone that is good enough to get to it, so be smart and reduce it to as few people as possible and make it difficult so they move along to another target.
`ini_set()` isn't a great way to set `display_errors`. From the [manual](http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors). &gt; Although display_errors may be set at runtime (with ini_set()), it won't have any affect if the script has fatal errors. This is because the desired runtime action does not get executed. 
It was an example, albeit not a very practical one. All I meant to say is you are making it that much easier to cause mayhem on your system if you do not hide the configuration. Sure it isn't the most fantasmical take-care-of-all-your-security needs...but its something anyone can do, and its just that much more protection. Like I said, by itself, this is a bad idea. In conjunction with everything else you should be doing security wise, this is just part of the deal (or should be).
Yeah, that was just a simplified example. I have settings in the ini that handle it at the framework level.
Supposedly they're going to roll out a big update (including docs) this Thursday. Also, their latest blog post sounds very promising. I'd agree with others though. If you're looking to start a new collaborative project that will go to production soon, I probably wouldn't use a framework that's still in early development.
For my part, small project = I do whatever I want, large project = I have to do everything my boss tells me to do. Small projects give you the opportunity to be more creative, because you won't have to explain every decision you've made. I learn a lot more from small and/or personal projects because I don't have to care about business rules so I have no boundaries. And the discoveries I make profit to the larger projects. Also, frameworks have been tested for a long period of time against unlimited cases, sometimes you can't afford to have minor unidentified bugs floating around. But your point is entirely valid. From a business point of view, you shouldn't spend more than a couple of days on small projects if you want to make as much profit as you can.
They still need to get a PHP script onto your system in order to exploit it — unless you are using a system with database access (eg port 3306, if mysql) wide open to the world, in which case may God have mercy on your soul.
As people have said, FuelPHP is a very new framework so there is not a huge amount of information available, but it does exist. I have recorded two screencasts explaining how Oil (the command line utility work) and this will generate scaffolding for you. Introduction and Scaffolding: http://blip.tv/file/4849032 Migrations, Tasks and Console: http://blip.tv/file/4885416 From that you can pick things apart or check out the documentation: http://fuelphp.com/docs/ Admittedly there are a few bits missing from docs, but they are the bits we have been finalising for RC in a few days. Why waste time documenting features that will change in a few days, if you could spend that time changing the features and hitting a release deadline? The RC release will coniside with our whole website redesign which will have a great new FuelTV section, so these videos (and more) will all be easy to find. Think RailsCasts. :)
I tend to agree. I still like frameworks for bigger projects, but end up modifying them a lot to reduce the resource impact that invariably arises from framework flexibility needs. The thing that we don't always talk about openly enough is that learning to use a new framework is difficult and requires a considerable investment in time even when the documentation is good -- which is seldom. Small projects can't necessarily fund our learning curve, so a new framework becomes less attractive for those projects. However, once you have a strong working knowledge of the suite it will often allow you to turn around projects much quicker and of generally higher quality than writing and maintaining your own code base. Except for those times when you want to do something that is ridiculously easy and should only take 15 minutes but the framework turns it into a three day production that has you banging your head on the desk until the office looks like Texas Chainsaw Massacre. Those times frameworks suck.
I think your definition of small is different than most. I am myself a proponent of DIY especially for what I'd call small projects. My small projects are literally small applications designed to accomplish a very specific function such as capture and analyses a very specific set of data who's format is fairly set in stone.
I think anyone who has ever had to truly deal with a site that is hitting hardware limits knows that a framework specifically taylored to your applications' needs is the right solution. Until you experience that pain, frameworks that eat up a lot of memory and do things that you dont need them to do are awesome.
I fully agree. Simple and sweet project for a small site, bust out wordpress. Maybe create a new plugin or modify an existing one to do exactly what the client wants. Big, long project, use custom code to create a framework. Add in a few libraries to do important things. Not only does the product end up faster, but it is more flexible in how you want to do things. For a large project, the framework should bend around how you want/need to do things. It shouldn't pidgeonhole you.
I want to meet the Dev that can roll out a specialized shopping cart in under 24 hours. 
Heh... Tumblr..
Frameworks, for me, have 3 purposes: 1) Enforce a proper structure on the application 2) Take care of boilerplate code that is not fun or unique to write 3) Facilitate more rapid development On a typical small project, I won't use a framework most of the time. Sometimes I might though, CakePHP is my goto for small projects because I can whip out things a lot faster. When it comes to large projects though, I would advocate always starting with a framework. The exception would be, if it's a large project for a pre-existing market where the specs and scaling requirements are known, and you have plenty of time to implement it, I might advocate rolling your own. For most large projects though, up front the specs are rarely known. If you look at things like facebook, twitter, reddit, etc one of the key things that they have in common is that they started from nothing with no idea what kind of user base they would have, what kind of features would be requested, what kind of scaling would be needed, etc. This is absolutely the kind of situation where a framework makes sense. When faced with a project like that the most important things you need to worry about are getting an initial product to market VERY quickly, and keeping it flexible enough to adapt and determine what is successful and what is not. While you can do this with any kind of app, a framework excels at this by providing a set of tools and logical structure that make it simpler to get up and running not have to worry about the common functionality of all web apps. In the grand scheme of things, if you were to write twitter/facebook/reddit in rails or Kohana or something, it likely wouldn't last. As it grows and the need to scale comes into play, you're likely going to start to see massive benefits from moving to a more custom solution where you can control the entire request chain. Twitter is a perfect example of this, started out as a rails app and now has grown much beyond that. But, on the flip side, if twitter hadn't started out as a rails app and instead had spent multiple years in development with a custom solution, we might not have twitter around today. TL:DR - custom, large enterprise apps = roll your own. large apps with lots of unknowns with no established market = framework.
I tend to agree with you, but I also think a lot of people in this subreddit probably freelance and their medium to large project is your small project. I wouldn't want to write enterprise-level software with CodeIgnitor. A large system would get a custom-designed code base tailored specifically to the needs of the project, taking into consideration hardware limitations, traffic volume, database needs, load balancing, etc. I wouldn't break out a framework for a small script to track some process and generate a report on it, either, though. However, they're perfect for custom content management systems and small to medium web apps.
I agree with you. Most of the posters on this reddit either have never worked on a big project or spend more time blogging about programming than programming. That said, with the current state of maturity with many PHP frameworks I would only in incredibly rare instances (like if I were re-writing reddit) not use a framework.
I either use JavaScript (jQuery Datatables, to be specific) or just re-run the query with filters as GET parameters. So long as you're not under incredibly high load or on a shit host, you should be fine with either.
I've tried almost every framework out there, as well as a few proprietary ones. If you want a good, simple framework that's going to give you a reasonable amount of control over your code but also give you MVC and RAD, I'd recommend Symfony 1.1. Symfony 1.2+ is very heavy and loses a lot of its allure, but Symfony 1.1 is mostly light and is simple enough that you don't have to grep too hard if you need to overwrite a method or something along those lines.
&gt;I'm fairly certain OP created a throw away because they were far too lazy to ~~figure this out~~ Google this on their own.
I say Frameworks for both. Frameworks for easy projects because of the reasons you discussed. And frameworks for large projects because you need a consistent and readable codebase. By not using a framework on a large project you run the risk of writing absolutely horrible code. That isn't to say that you can't write horrible code while using a framework, but it's easier to follow the standards and patterns set, and prevent your bad day of programming from turning into a huge mess later on
I couldn't agree more. I work with relatively small development team on a relatively large, data intensive, main product. Making the calls on the application architecture, I would never consider trading our DIY core for any framework. Like OP mentioned, the features, patterns and even ready components are there to be copied from existing frameworks. By forcing large, complex and performance critical application into a mold of framework not designed for it you sacrifice too much flexibility and control compared the extra effort required to build your own core. As for small projects, such as the many supporting application we do at work let alone my small private projects, frameworks IMO are an absolute must. If you behave and develop to the style of the framework, you'll end up getting well structured, easy to maintain apps that don't scream for immediate refactoring rounds once you get the functionality completed. If you need to put together an app in a month, your efforts should be directed to the usability and business logic instead of details such as call routing or database access. 
No one has said it yet so I'll bite- &gt;chown phpuser:phpgroup config.ini; chmod 440 config.ini; Each website (that uses php) on the server should have its own user and group associated with it, so this will lock make it so only that user can access it. You typically want it read only so no one can use an exploit to change your config. Of course, since the php user can read it anyone who gains access as that user (such as through an exploit in the running application) will have access to that config file- which is why you want to make sure each application has it's own set of mysql credentials.
And the system administrator should be smart enough to restrict the user access privileges in MySQL in the first place.
 function conversion($n){ if($n&lt;1000){ return $n; } $s = array( 1 =&gt; 'kilo', 2 =&gt; 'million', 3 =&gt; 'billion' // ... ); $l = floor((log($n,1000))); return ($n / pow(1000,$l)).' '.$s[$l]; }
now you have extra code executing for every query of a record even when you don't need to use it, and even that, you're limited to SQL rather then PHP to manipulate the data
I assume what he means by that though... well.. 1 a site that includes a shopping cart probably isn't very small, but ignoring that, I think he'd then just incorporate an existing shopping cart and tie it into his project as opposed to a framework which includes a shopping cart and making your site fit that framework.
Not sure I totally understand that sentence but even so, most shopping cart packages are pretty complicated. Even something as simple as adding PayPal buttons (or other 3rd party system) requires time to setup and integrate. 24 hours is about one work week so I can see doing PayPal buttons or something similar, but it very much depends on the scale of site you're working on.
Most frameworks attempt to provide things (like form validation) that are used for 80% of projects, which you would otherwise need to build yourself. It may be trivial to get something DIY working but the framework version is probably 100X better than that thing you built in addition to being looked at and tested by a much greater amount of people. You can at least use components from Symfony2 or Zend Framework and glue them together with your own code. You're probably going to end up using some 3rd party library code anyway. I think it's best to just pick a framework, learn it, and commit to it. It lets you outsource your maintenance too. Digging into your DIY framework 2 years later really sucks, like The Texas Chain Saw Massacre (2003) sucky.
Server environment variables which an accidental (or intentional) `phpinfo()` or `var_dump($GLOBALS)` would expose before you had a chance to wipe them? They are global, which means exposed to any PHP script anywhere on your site. And, they would be exposed to any other cgi or Apache mod script of another language if you have that set up. This doesn't seem like a good idea. Also, `(array) $obj` works just as well to get all properties, public or private.
I just write my own code for everything... fuck, i don't even use jquery
&gt; They still need to get a PHP script onto your system in order to exploit it That's one of many, many ways to do it, yes.
457 comment karma, redditor for 4 months. Probably not.
First, regardless of whether your own website is using the API or not, your API should be as fast and lightweight as possible. Otherwise, the way you develop an API is similar to the way you develop any other application: you have your models, domain layer, front controller, etc. You can use a framework like Zend Framework to develop an API, but I highly suggest that you instead use a framework that is specifically designed to build APIs. Frapi (http://getfrapi.com) is a lightweight open source framework for building REST based APIs that my company built. I am almost assuredly biased, but I think it is the best, easiest to use API framework out there. I can't be certain, but if you've been reading about first-class APIs, then I imagine you have read some articles authored by Helgi Þormar Þorbjörnsson or David Coallier (two coworkers and frapi developers). If you are in the Chicago area or are willing to travel for conferences, you should definitely check them out at PHP Tek11 in May. Helgi is giving a session on First-class APIs, and David is giving a session on Frapi itself. In addition, Jason Austin is giving a session about different ways to secure your API. * http://tek11.phparch.com/talk-synopses/#First-Class-APIs * http://tek11.phparch.com/talk-synopses/#Developing-RESTful-APIs-with-FRAPI * http://tek11.phparch.com/talk-synopses/#Securing-Your-API
Thanks for your reply. Helgi's article is exactly the thing I read regarding API development! It really clicked with me and I'd love to adhere to it. Do you have any information on what Jason Austin is talking about with regard to creating API keys, OAuth, etc? That's really the crux of what I'd like to know.
we don't need frameworks, we need components.
What good is hitting a release deadline if there is no documentation to support it IMO. I'm not directing this criticism directly at you, and keep in mind it may not apply. I'm just tired of seeing awesome tools with very bad documentation and poor examples. Writing documentation is a boring task, but so vital. One of the things that almost anyone should assess when considering any language / framework / tool is "how easily can I find documentation / examples".
For CakePHP, I can only hope the docs are better now than they were 6 months ago. The ACLs documentation was a broken miserable mess that did not even apply to 1.3, and the documentation on using jQuery was in the middle of being rewritten because it was all old. The ACLs implementation itself was a kludgy mess. Sure if you are a competent enough dev you can roll your own but isn't that part of the idea behind a framework, abstracting out common tasks? Oh, sure I could find 18 different tutorials on how to "bake" a simple blog, but people regurgitating the "Cookbook" content is just not very helpful.
You probably shouldn't use display_errors anyway - at least not on anything complex. It has issues with binary output, AJAX requests, startup/fatal errors, etc, etc. Eventually you'll end up with corruption simply because your output is no longer under your control. Use the logs - `ssh dev.example.com tail -fn0 /var/log/apache2/error.log` works like a charm. Then turn on error_reporting(E_ALL|E_STRICT) for full credit. :-)
Does that search php.net itself or does it use google to search it?
I believe facebook develops in php and they've got a lot going on in the back to covert that to C++ as hands of as possible for speed.
Start making something.
I work for myself now, and really miss the days when 24 hours counted as a weeks worth of work :(
* Learn by doing * Read the source code * Read the PHP manual * Understand the difference between idempotent/non-idempotent methods and when to use what * Understand web security exploits (and how to prevent them) * Read up on design patterns * Keep an eye on, and compare frameworks * Log errors * Listen to your users
If you aren't familiar with OOP, get that way; if you aren't familiar with SQL, get that way. Good luck!
Try recreating the applications you have already written using a couple different frameworks and maybe Drupal and/or Joomla. You'll learn a lot.
i agree..
What are the best ways to learn OOP? Books or online?
1. Why learn a framework. 2. Which would you recommend and why? 3. Why drupal/Joomla. I have developed on wordpress, how much different would they be?
living on the edge my friend
I think there may be a disconnect between "small" and "large" projects in these discussions. Small / roll your own I think equates to "I need to serve 2 - 10 pages" and probably has zero database interaction (or really minimal, few updates and inserts, etc). "Large" probably means, "I've got a client who needs most/all data from the database serving 10~20 pages", I'll use codeigniter/similar framework rather that write all of these classes/configs myself. And what you're describing is "Actually Large". Likely to have project managers, funding, serving (n) pages, with numerous templates, custom built libraries, and agreed upon timelines. Which necessitates rolling your own CMS. Edit: Not CMS, my head is still in "work-mode" I meant Framework. 
Frameworks are a great way to learn new ways of writing code and how to work in a group. Even if you're not contributing to the project code base, working with preexisting structure according to a predefined standard will give you a sense of what it means to work on code with others. They also look good on the resume. You should try building simple projects in CakePHP, CodeIgniter, Zend, Symfony, and Yii because those are the frameworks you'll run into most often. And you'll probably decide you like one or another for certain reasons that involve things you probably never even thought about before. Drupal and Joomla are both typically more suited to the creation of more complex content management systems and web applications than WordPress, which tends to focus on Blog style content delivery. One wouldn't normally consider WordPress for an inventory control, time management, paid content subscription, or ticket reservation system, but it would be common to see such a thing created in Drupal or Joomla. Drupal development is particularly marketable right now. It also has something of a steep learning curve, so you can make money just showing other people how to develop with it. Frameworks and platforms like WordPress, Joomla, and Drupal are currently enjoying a great deal of favor by many larger institutions because they don't like being tied down by proprietary systems that marry them to a shop with a murderous maintenance contract. Meanwhile, many shops like developing with frameworks and ready-made extensible CMS because they can save a tremendous amount of development time (and liability) if they have staff who know them well. Knowing how to work with these systems adds to your marketability. 
Searches php.net directly. It somehow registers into Chrome that it's a searchable website.
My advice, this one: http://www.amazon.co.uk/gp/product/143022925X/ref=oss_product
I haven't come across the opinion that you should roll out your own code for small projects. I agree with you, and would prefer to use a full stack framework for small projects (like cakePHP, SilverStripe/Sapphire) and a glue framework like Zend (or CI?) for large custom projects that need a lot of attention to scaling etc. 
I agree. I haven't touched Cake myself for about a year but I keep hearing how good the documentation is now. I honestly don't know. I have been using Zend for all my projects lately for exactly this reason. There is plenty of documentation.
Same, 24hrs is like 2 days for me.
* Try a framework: [Yii](http://www.yiiframework.com/), [Cake](http://cakephp.org/), [Symfony](http://symfony.com/), etc * Try another programming language: Python, Ruby, etc
Unfortunately I do not. I'm sure he'd be willing to give you a basic breakdown and any other resources he's aware of though: http://twitter.com/jason_austin
Most of you haven't done this? Client asks for cheap simple site to sell something specific (i.e florist with colour variations, messages, specific format). Throw together database model, scaffold forms, integrate preexisting payment libraries, hand over to designer. Twenty four hours (three days development time) is plenty to do something thats been done a million times before leveraging a framework.
Yup, but this completely depends on the scope. We've had clients ask to sell tickets to their nature park on their website with quite specific requirements (they didn't like to compromise on existing cart/ticketing software). We're talking about a portfolio of maybe 5-6 products here, with very specific, simple requirements. The development of that specific upgrade to their site was done in under a day, tested, and integrated with their own ecommerce gateway (eWay).
24 hours is three days of dev time in an office, or two *hardcode* days for a freelancer ;)
Couldn't agree more, which is why I don't believe developers should wait until a specific project before learning a framework (just like they shouldn't wait until they have to do client-side dev before learning javascript). Learn it as part of your continued education, on the side. Have fun with it. It's just another tool, wont suit everything but doesn't hurt to add it to your repertoire (and your resume!)
Ahhh, be careful not to confuse not using a preexisting framework with reinventing the wheel for everything. Even the super-massive DIY frameworks that I was referring to should use existing libraries for common tasks like validation, ORM, etc. But yes, this is one of the biggest benefits of frameworks. All the legwork that *every* application utilises is already done saving a lot of time esp on small-medium sized projects. Also, that doesn't in any way mean that "large" projects shouldn't use a framework. If the requirements fit - it would be silly to invest time rebuilding.
Spot on, going to forward this one on to the other dev's I work with :) This seems to boil down well to appetite for risk. Time is a significant cost investment on any project. Frameworks for the majority of projects result in a scaffolded product being produced *quickly*. 
This is true, I guess its hard to compare when "small" and "large" aren't exact definitions! &gt;However, they're perfect for custom content management systems and small to medium web apps. My thoughts exactly.
Yeah I'm starting to notice that :) I wouldn't advocate using a framework for small, specific scripts such as what you're talking about. Not to say that I'd advocate a framework or DIY solely based on the size of a project either, it all depends on the requirements.
haha so true. This is even more painful with client side libraries - they are amazing until you start running into performance issues :P
&gt; That said, with the current state of maturity with many PHP frameworks I would only in incredibly rare instances (like if I were re-writing reddit) not use a framework. This I'd agree with. It's really only the leftfield projects that you run in to problems being pidgeonholed by a framework designed for smaller projects. The main reason for this is that the *scope* of the framework itself doesn't cover what these complex projects require. However, almost all other 'common' web projects (cms, ecommerce, forum, blog) *are* covered by the scope of these frameworks.
Can be easily ported to other frameworks. Any questions, comments, and feedback is welcome.
This I can't agree with. I've worked with developers who are dogmatic with a Framework vs DIY approach before and inevitably it ends up being about trying to push a square peg into a round hole. This of course depends on the projects you have had experience working with so may have some bias, but some of the projects we have done have been hindered by attempting to adhere to a framework, and others have been held back by attempting to do everything from the ground up. In the cases where we have used a framework when we shouldn't have, we have ended up gutting and replacing the majority of the framework to suit our requirements. This can be a perfectly valid way of proceeding through a projects lifecycle (start framework, evolve tailored) but the outcome was many of the components that had been written under a specific framework guideline had to be reauthored to adhere to the adjusted system. An example of this: We used (and love!) zends validation classes. As the project evolved, it became clear that we had to gut and completely replace how the validation worked within this specific project. We spent a week designing, and another week implementing the new validation system that worked *pefectly* for our requirements. The problem? We now had more than 600 components, forms, and other classes in our projects that we had to refactor and adjust to work with the new validation system - a process that took more than a month and *could* have introduced a plethora of bugs (fortunately our unit tests caught them). Had we have assessed this requirement upfront we would have saved not only a lot of time, but a lot of risk of introducing issues into the project. RULES are important. Structure, layout, and conventions play a key part in the intial design of an application. Existing frameworks aren't exclusive in this - custom inhouse solutions can be just as elegant especially when inspired by many of the ideas and concepts found in existing frameworks.
&gt;If you need to put together an app in a month, your efforts should be directed to the usability and business logic instead of details such as call routing or database access. This. Another perfect example of a frameworked solution we used is our ticketing system for our clients. Would have been a waste of time to do this from scratch (and so not fun :P) so we whipped it up using symfony (and its scaffolding &lt;3) in a week.
I may be missing the point but what is wrong with w3schools?
Very true. I guess I'm more talking about "Applications" vs scripts. Scripts for single, simple purposes would be wasteful to deploy in (or as) a framework.
haha
It sounds to me like your ideal position would be a front end developer. In which case I think focusing on being kickass at JavaScript (going beyond jQuery) is more important than being a PHP expert. Also, the first thing I look for when interviewing a potential developer is absolute mastery of HTML and CSS. I can usually tell almost immediately whether an applicant has read and practiced the specs from a small test project and I burn the failures resumes before they even hit the hiring boss' desk. In short, learn the stuff that's most universal really well and get paid to become better at the specifics.
I've worked on many big projects and have always opted for the kohana framework. Maybe I'm biased but I've never had to alter the framework core to resolve any short comings with its design. In the rare case I need a few lines of non standard code it does offer me the ability to transparently extend and overload any class or method over any piece of the framework. Disclaimer: I have commit access to kohana so its obviously my first choice but the point still stands
And then you still feel like a slacker...
My method is faster by one keypress.
Indeed! Mine works for other websites, that's why I'm used to it.
Kohana is a nice light framework, I've never used it though. Of course, I don't disagree that the majority of projects will work well in a framework, that is the point of the frameworks in the first place. The issue though is with developers being dogmatic about one tool being the solution to all problems. Sure, you can bend, break, and force just about any framework/anti-framework to be the solution to a particular problem you are having (in the same way we did when having to rewrite the majority of validation code) but it doesn't make it an optimal solution. Otherwise one could argue that given Zend/Cake (despite the bloat) provides classes and components for a LOT of boilerplate functionality it is inherently better that light frameworks such as Kohana. It's not a question of whether it provides all of the features you could ever want so much as whether it fits the design of the project it is being applied to. Where the use of frameworks get muddy (which the majority of projects never have to worry about) is where your developers are spending more time trying to work out how to get the framework to do what they want, rather than actually getting it done. The lighter the framework is, the less risk there is of running into issues like this - but at the same time the less scaffolding and avoiding "reinventing the wheel" there is. Thats not to say that the principles of frameworks (all the positives save having everything done to begin with - which causes bloat) dont get applied to customised solutions as well. HMVC, ORM, and caching are all part of the design process that goes into application development. Just because your framework of choice uses them doesn't mean that a customised solution (such as Facebook) doesn't use them as well, without the framework. 
Cool story, bro
Make some sort of website so that you're sure you understand what you've learned. Then try Kohana. It's a good exercise. With Codeigniter you can always read a tutorial rather than checking out the code yourself trying to find a way to do what you want to do. Not so with Kohana. Since there isn't as much documentation, you're really forced to have a look at the code yourself. That way you'll stop seeing frameworks as magic and start seeing them as bits of code that make your life easier.
In most cases you do not need a full blown framework, just a list of classes to handle the basic abstractions.
I think you are creating a false dichotomy between small websites and big websites. There are too many shades in between, there are really big sites, and really small sites. I think your observations is caused by the fact that you are using a different defition for "big" than most redditors. In your examples of big websites you put facebook and others, but when I call some site "big" I'm not thinking _that_ big. So, well, the contradition seems to be caused by your own definition and by the fact that project size is not the only thing that matters when it comes to using or not a framework.
This isn't viable if your framework needs to be accessible from a CLI agent and not through a webserver.
either this is a retardedly blatant social marketing campaign or a misguided attempt at show and tell
It's probably best to get into the habit of using a function to do it: function getFromGet($varName, $defaultValue = '') { if(isset($_GET[$varName])) { return sanitize($_GET[$varName]); } else return $defaultValue; } Note I have also called a custom "sanitize" function, that way you can strip out stuff you don't want (\ ' " etc) Calling it is pretty easy: $sorter = getFromGet('sort'); or with a default for when the variable isn't on the url: $sorter = getFromGet('sort', 'ptw');
Problem here is you don't know how you'll use the data. You can't just "sanitize" it for every thing. If you use it for SQL then it needs to be sanitized for that, if you're going to store it in a cookie or display on the site then it needs to be sanitized for that. I like how the default value can simplify things but this is a bit too generic for my likeing.
Thanks for the reply, just for some extra information this is my homepage content function: function homepagecontent() { $current_year=date('Y'); $current_month=date ('m'); $current_week=date ('W'); if ($sorter==ptw) { $query = array ( 'posts_per_page' =&gt; 9, 'cat' =&gt; '-1', 'year' =&gt; $current_year, 'w' =&gt; $current_week, 'orderby' =&gt; 'meta_value_num', 'meta_key' =&gt; BM_META_VOTES, 'order' =&gt; 'DESC', ); $message='No Posts Submitted This Week'; } elseif ($sorter==datenew) ....etc. Then I have a function loop($query) which calls the posts. So is there essentially nothing wrong with how I'm using $_get calls, i wont suffer from the problems in the last paragraph in my post, i.e. 'However, if you're taking variables and handling them with PHP... you're most likely doing it wrong and should re-think it. Because that would mean zero caching and generating the page each time no matter what, or not working at all if the page would be generated already (in cache). Without any cache, your site can only handle so many simultaneous visitor as the database just can't keep up.'
I mainly code interfaces where the parameters you pass are added to queries, *uniqueID, startDate, endDate, sortOrder* etc. So it works for me :)
&gt;However, if you're taking variables and handling them with PHP... you're most likely doing it wrong and should re-think it. Because that would mean zero caching and generating the page each time no matter what, or not working at all if the page would be generated already (in cache). Without any cache, your site can only handle so many simultaneous visitor as the database just can't keep up. I'm pretty sure most decent caching mods/plugins allow you to cache pages with parameters. 
On a separate note, when you submit code for others to look at, you really should format it in a common way. Find a sane coding style and stick with it. [K&amp;R or Allman are good](http://en.wikipedia.org/wiki/Indent_style).
Whitelist the values. $sorter = 'ptw'; $validSort = array('ptw','datenew','ptm'); if (isset($_GET['sort'])) { $key = array_search(strtolower($_GET['sort']), $validSort); if (false !== $key) { $sorter = $validSort[$key]; } } That way, only the values you want are allowed. You can put this into a function as well. function check_get_enum($name, array $validValues) { $sorter = $validValues[0]; if (isset($_GET[$name])) { $key = array_search(strtolower($_GET[$name]), $validValues); if (false !== $key) { $sorter = $validValues[$key]; } } return $sorter; } $val = check_get_enum('sort', array('ptw','datenew','ptm')); In this case, the default value is the first array element. The function assumes a 0 based array, mostly because I was too lazy to go further. You could expand this to support $_POST, or just $_REQUEST in general. Anyways, the point is, if you only allow a limited set of values, don't try to clean the data. Just restrict it to the options available. Much easier, much safer.
Mysql will cache common queries and most static caching mechanisms will cache pages with get queries just fine (or even annoyingly too well). Just make sure the get variables don't change. For example, if you have something like ?sort=best, that should cache OK. But something like ?timestamp={current timestamp} will result in a unique, unchacheable query and URL. Also note that ?day=wed&amp;month=mar and ?month=mar&amp;day=wed may appear as two separate pages to static page caching engines. Also, you should validate and sanitize your input before passing it to a query. When working with small, well-defined lists of expected values, you can use a switch or in_array() whitelist to insure only expected values are passed to your applications. // One way of whitelisting ... switch ($_GET['sort']) { case 'datenew': // New $safe_sql = 'SELECT * WHERE ....' break; case 'ptm': // Popular this month $safe_sql = 'SELECT * WHERE ....' break; case 'ptw': default: // Popular this week $safe_sql = 'SELECT * WHERE ....' } // Another way... $legal_options = array('datenew', 'ptm', 'ptw'); if (in_array($_GET['sort'], $legal_options)) { $sql_sort = $_GET['sort']; } else { $sql_sort = 'ptw'; } The code formatter is really breaking my stones today.
&gt; I define homepagecontent() which has 3 if conditions I would personally go for two conditions and a default. I think you also need a slight concept change: you are not passing *variables* in through URLs. You are passing *data* in through URLs. If that data affects the values of variables in your code, then that is another step in another layer. However, separating the two in your head will steer you away from some common traps you may otherwise walk into.
I would reiterate this. Try to use indenting to represent structure, not just to line lists up into nice straight edges.
Your code is susceptible to SQL Injections and possibly even XSS. You should always validate user input against a valid range of values: $values = array('ptw', 'datenew', 'ptm'); $sort = (isset($_GET['sort'] &amp;&amp; in_array($_GET['sort'], $values) ? $_GET['sort'] : 'ptw' );
You should have a look at the adapter design pattern http://en.wikipedia.org/wiki/Adapter_pattern
I think the validating and sanitizing issue keeps coming up because your technique introduces tainted data into $sorter. It's common practice to validate and sanitize user data before placing it in a new variable like so ... $sorter = validate_and_sanitize_sorter($_GET['sort']); Or else mark the user input as tainted versus safe, like so... $tainted_sorter = $_GET['sort']; $sql_sorter = validate_and_sanitize_sorter_for_use_in_sql_query($tainted_sorter); This makes it much easier to do a code review and spot potential vulnerabilities when you revisit this code next year. 
Thanks for the suggestion, I am just learning php as I go along, so stuff like this is really useful for me.
Frameworks are good for 1. getting new people familiar with existing code quickly, 2. setting a max limit to how fucked up a project can get (seriously, I've worked at some *FUCKED* up projects) 3. keeping dev practices sane, assuming management is **extremely firm** about ***always*** updating the framework *often and immediately*. Otherwise, frameworks are pretty stupid. Except the ones that are meant for you to take bits and pieces, such as Zend and Flourish.
Ha, now you know why I sell ticketing POS's for thousands of dollars!
Most people who code PHP are noobs, especially on /r/php. I can almost guarantee you pretty much none of these people would be capable of doing that (thus the skepticism). How so? i've been interviewing SENIOR LEVEL PHP developers for over 2 1/2 years now, about once every other week or so, and I've met *one* person who could build a simplistic MVC from scratch for me on the spot. Most people just totally lack the architectural abilities you and I apparently have.
What are the advantages of Python, Ruby etc. over PHP. Would I be better off learning something like ASP.NET?
When you say front end developer what does that entail? I presume it's taking other people's designs and coding them up in HTML, CSS and JS? What are the advantages of learning to use Javascript over Jquery? Is it efficency? &gt;I can usually tell almost immediately whether an applicant has read and practiced the specs from a small test project Sorry I'm not quite sure I understand this part. Are you saying you would set the applicants a test project and then look over how they did?
While you remove the generic aspect of the functions it still suffers from several problems inherent to badly structured code. This would essentially group unrelated pieces of code in one class. (or if you don't do OOP in one function file) I'd argue that sanitizing data belongs as part of more related classes. For instance sanitize SQL belongs in your DB/ORM/Database API/Layer while sanitizing HTML belongs in your template layer. (and will usually take a language object to make sure it gets the charset and special characters right) Another aspect is that this tries to simplify an issue which isn't simple at all. I touched on it slightly in the previous paragraph, but to reiterate; often times sanitizers cannot be generalized to simply a single function, they'll often need information to determine what and how to sanitize something. Finally, this also breaks with the principle of sanitizing at the latest possible time. Often times you might use data for more than just one purpose and sanitizing at the time you get the data will require you to get it multiple times.
Fair enough, you should probably mention this before you give such advice, though. I don't really think you deserve the down votes but that's Reddit for you. :/
Yup, whitelisting is the way to go for this kind of thing. If you're dealing with numbers, a good practice is to cast it to an int. $pageid = (int) $_GET['pageid']; 
Yup, whitelisting is the way to go for this kind of thing. If you're dealing with numbers, a good practice is to cast it to an int. $pageid = (int) $_GET['pageid']; 
Best for what? This is probably the most stupid question I've seen all day. It definitely depends on what you are trying to do with this data. If you are using it in a database, use prepared queries to take care of the DB injection side of things, but be mindful of what you do with the data later so you don't open up yourself to XSS and what not.
For html purification: http://htmlpurifier.org/ For SQL safety, and having quotes and slashes not mess your stuff up, use prepared statements I'm not sure of the context, but I don't think you need much more than these things. 
Sorry for multiple posts. Comment posting is acting up.
It depends where the data came from and what you're doing with it. * Use htmlspecialchars for all outputting to HTML. * Use prepared statements for all database queries. * Sometimes use a regexp where you need something more specific (e.g., validating usernames). * Use stripslashes on all input data when in an unfortunate environment where magic_quotes_gpc is enabled and you can't turn it off.
If you have a function to remove \ ' ", then you are probably doing it wrong. You should be using [prepared statements](http://stackoverflow.com/questions/60174/best-way-to-stop-sql-injection-in-php) which will handle that stuff for you. Rolling your own sanitize() function will almost always leave holes you don't know about.
* It should be `sanitizeInput()`, or at least `sanitizeinput()`. * This function seems way too generic. You should clearly separate out all sanitize functions. For taking form input and displaying it back without SQL interaction, use `htmlspecialchars`, etc etc. * You shouldn't be using `mysql_real_escape_string` to escape your SQL queries, you should be using PDO. * Why are you passing results to new variables? You can simply force $string to change with new input at each step, or compress it down to a single return line.
no advantages, everything is same. its just for different approach
http://en.wikipedia.org/wiki/PHPDoc &gt; PHPDoc is an adaptation of Javadoc for the PHP programming language. It is a formal standard for commenting PHP code. Don't use anything else. You'll make other developers angry.
If you want to get sexy then you could pass in an anonymous function to call. :) function getFromGet($varName, $defaultValue = '', $sanitizer = null) { if(isset($_GET[$varName])) { $value = $_GET[$varName]; return is_null($sanitizer) ? $value : $sanitizer($value) } else { return $defaultValue; } } $value = getFromGet('foo', '', function($value) { return htmlentities($string, ENT_QUOTES, 'UTF-8'); }); I still wouldn't recommend but passing in anonymous functions is sexier than passing in function names. ;)
I agree with most everything you said. I've definitely witnessed developers hindered by the "ok how do I do this within the confines of this framework" problems. I'm in a unique position to be a walking set of documentation for that kind of thing, so it's never really been presented as much of a problem to me, but your point is definitely valid. I think that frameworks that avoid the little things like scaffolding are actually wise in doing so. For example, you have this wonderful scaffolding controller you can overload with a simple variable and blam, there is a who section for modifying users. But what if you want an option to force login as any one of these users? Most scaffolding controllers will be having you copy/paste existing code in order to do so. Others will probably have an option to add custom stuff, which will only make the scaffolding more complex, require more documentation, and be harder to understand for that new developer looking at the framework. Or the entire scaffolding piece can be avoided, since if a developer has that requirement, they can easily roll their own scaffolding that exactly fits their needs, or find a community developed library that covers what they want. All this said, I've found from personal experience when I try and write a project from scratch, I find I'm grasping at a lot of features already found in my framework of choice, such as object oriented controllers, logic-less templating, (optional)ORM models, url routing, caching, etc. so every time I'm starting a new project no matter how big I immediately see how it will fit in with my framework
Name some popular hosts that offer Cassandra and PostgreSQL as standard. Standard PHP configuration is fine for many websites, but once you get into very busy websites, you have to tweak everything, from Apache (or whatever you use) to your DBMS to the actual language. Mailchimp uses PHP... and while it doesn't get a ton of visitors to it's website directly, I'm fairly sure the millions of emails it sends out aren't a walk in the park. edit: Also, Wikipedia is PHP.
Someone ban this spammer!
...not sure why you are replying to me with that comment, considering I already mentioned in this thread how things have to be tweaked to fit large scale. 
Because Reddit is acting funky today and didn't load all comments for this thread. In fact, it took 5 tries to get the comment to actually post. I'll keep the comment up, though, because I'm not interested in clicking 5 more times to delete it. Also, I hope posting this reply doesn't take 5 clicks.
Because Reddit is acting funky today and didn't load all comments for this thread. In fact, it took 5 tries to get the comment to actually post. I'll keep the comment up, though, because I'm not interested in clicking 5 more times to delete it. Also, I hope posting this reply doesn't take 5 clicks.
Agreed, there is no "one size fits all" magic bullet of sanitization.
&gt; Why are you passing results to new variables? You can simply force $string to change with new input at each step, or compress it down to a single return line. To make it easier to read. It doesn't affect what the PHP interpreter resolves it down to before execution.
 function sanistiseinput($string) { $string = strip_tags($string); $string = stripslashes($string); $string = mysql_real_escape_string($string); return $string; } No need to create multiple copies of the variable when you're not going to even use those other copies.
It doesn't create any more copies with multiple variables than with one. The interpreter looks at all your code before it starts doing anything. It doesn't just dumbly start executing from line 1.
 &lt;?php function sanistiseinput($string) { $detagged = strip_tags($string); $stripped = stripslashes($detagged); $escaped = mysql_real_escape_string($stripped); return $escaped; } function sanitizeinput($string) { $string = strip_tags($string); $string = stripslashes($string); $string = mysql_real_escape_string($string); return $string; } $str = "Hello there, I am a string!"; echo sanitizeinput($str) . "\n" . memory_get_peak_usage() . "\n"; //echo sanistiseinput($str) . "\n" . memory_get_peak_usage() . "\n"; ?&gt; Try it for yourself: alternately comment out the first and the second echo and look at the output.
I tend to just add comments like: /* If anyone else is ever reading this, I'm sorry */ 
 &lt;?php function sanistiseinput($string) { $detagged = strip_tags($string); $stripped = stripslashes($detagged); $escaped = mysql_real_escape_string($stripped); return $escaped; } function sanitizeinput($string) { $string = strip_tags($string); $string = stripslashes($string); $string = mysql_real_escape_string($string); return $string; } $str = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using \'Content here, content here\', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for \'lorem ipsum\' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like). Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham. There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don\'t look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn\'t anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.'; //echo sanitizeinput($str) . "\n" . memory_get_peak_usage() . "\n"; // Output : 340728 echo sanistiseinput($str) . "\n" . memory_get_peak_usage() . "\n"; // Output : 343896
I like using case statements: switch($_GET['sort']): case 'ptw': $sort = 'ptw'; break; case 'ptm': $sort = 'ptm'; break; default: $sort = 'datenew'; } but yeah, always whitelist values;
I get the same result either way using your input string. Perhaps you are using an older version of PHP? I'm testing using 5.3.3.
The biggest problem with using a switch statement is that you can't make the whitelist easily configurable. If the whitelist is an array, then it is pretty trivial to pull the entire thing out into a configuration file or to make the whitelist itself a parameter for the function.
5.3.6
True, but I find that I normally need to make other changes as well and ethos prevents nonvalid values from hitting unchanged code. Preference I guess 
Exactly! Try something new, see if you like it, learn something. It's always good to know what else is out there and to have options. 
I'm at a loss then. 
I would've written something like... $validValues = array('ptw','datenew','ptm'); $sorter = in_array($_GET['sort'], $validValues) ? $_GET['sort'] : validValues[0]; Just a little less wordy...
There is a bundled extension for doing exactly this. It's called [Filter](http://php.net/filter), and it works for both [validating](http://ca2.php.net/manual/en/filter.filters.validate.php) and [sanitizing](http://ca2.php.net/manual/en/filter.filters.sanitize.php). If you are doing SQL queries, use prepared statements ([PDO](http://ca2.php.net/manual/en/pdo.prepared-statements.php), [MySQLi](http://ca2.php.net/manual/en/mysqli.prepare.php)).
I would recommend both using PHPDoc, which provides precise documentation for the API of your code, but also prose documentation in the form of a wiki or other easily editable system. This prose documentation shows examples, explains why things happen and how different parts interact. You certainly can write your prose inside of DocBlock comments, I've just found it extremely cumbersome. I've found that making it really easy to edit the documentation helps to make it easier to keep it up to date. The most popular documentation generator for PHPDoc is probably [PhpDocumentor](http://www.phpdoc.org/). I personally hate the PhpDocumentor codebase, having done quite a bit of work to make it create more usable output. Ironically I've found the documentation rather poor. :-\ There is also [DocBlox](http://www.docblox-project.org/), although I have never used it. If you want an example of what I am talking about, you can check out the [Flourish documentation](http://flourishlib.com/docs/). Each class name links to the prose documentation, which I refer to as Class Documentation. The API Reference is the output of PhpDocumentor. Another recommendation I have for documentation is to try and include as much cross-linking between types of documentation as possible. I keep a class-level navigation block in the same place on each page which allows you to jump from the Class Documenation, API reference or source code to any of the other three. Providing links to the different headings on the page is really helpful too.
Thanks! I've been using intval() instead of casting as int for a long while, and it looks like the int cast is actually [much](http://hakre.wordpress.com/2010/05/13/php-casting-vs-intval/) [faster](http://stackoverflow.com/questions/239136/fastest-way-to-convert-string-to-integer-in-php). So, I'll stop doing: $pageid = intval($_GET['pageid']); And start doing it the cast way. 
I use Doxygen with the @ syntax. It's pretty OK and can handle more than just PHP code.
I tend to be a bit more passive aggressive: /* Yes, I know the following makes no sense. I wanted to do it a more elegant way but noooooooo, the big bossman (who happens to have his job on account of his boning the CIO and not his associates degree in fine arts) told me I have to use this fancy new paradigm he synergied from all the programming blags he reads (don'tcha know he reads lots of programming blags so he can commoditize his emerging technology deliverables). That's why I'm using a switch inside a for loop inside another switch inside a few more nested for loops. I tried to tell him that was a bad idea, but he huffed off and sent an email to his fuckbuddy boss and got an insubordination report put on my employee record so I'm writing this piece of dung the way he wants it and when it bogs down the system because it's going through the entire employee table ten times using ten different queries doing text searches instead of using a frakking SELECT WHERE I hope I'm no longer working here. */
Nice. Not fit for production usage but + 1 for elegance.
+1 for PHPDoc If you're taking on additional developers if may be a good idea to look at [phpUnderControl](http://phpundercontrol.org/) to enforce coding standards and unit test coverage. It also has [PhpDocumentor](http://www.phpdoc.org/) integration which is a nice bonus.
I will check these out. I was writing my own HTML page with examples and what not, but not nearly as slick as Flourish. Thanks!
No, I rarely use any comments and let my tests, method names, and variable names speak for themselves. I've leave a short comment if none of the above can accomplish that explaining the business case behind why I'm doing what I'm doing.
+1 more for PHPDoc Proper PHPDoc syntax will also put nice little things like parameter and return types into Eclipse PDT and Zend Studio's code outlines. 
...but more error prone, more fragile than my solution (you forget a strtolower() call), and more complicated then the function call. I'm all for brevity, but not at the expensive of readability, especially when it offers nothing. Putting everything onto a single line like that is just asking for trouble. Edit: My comment sounds harsh. I don't intend to be. I just see no benefit of this code within this context. We could discuss how neither of us would write any of this code, and would instead have this abstracted out into Validators that handle this for us, but wouldn't solve the immediate problem.
&gt; Most people who code PHP are noobs, especially on /r/php More people who code C++ are noobs. Since C++ is taught in all lower-division programming courses, the quantity of noobs who program C++ is probably greater than ALL of the people who program in php. So, most people who code PHP are noobs, but with C++ almost everybody's a noob.
I ditched CakePHP for CodeIgniter. I found the documentation fantastic when I needed it, and now find most functionality pretty intuitive. This was my main problem with CakePHP - I got hung up a lot with needing to 'think' like the developers, and tracing obscure errors back to some wierd convention that I didn't have down-pat. CodeIgniter also plays pretty well with code snippets etc, and doesn't stick it to you if you prefer to do something your own way. The $_GET variable is disabled always unless explicitly turned on, which bothered me at first but I now don't use it even if I'm not using CodeIgniter. I use [Toast](http://jensroland.com/projects/toast/) for unit testing in CodeIgniter which I find pretty useful. TL;DR: CodeIgniter is pretty good. 
[Reddit's Digest](https://encrypted.google.com/search?num=100&amp;hl=en&amp;safe=off&amp;q=site%3Areddit.com+php+framework&amp;aq=f&amp;aqi=&amp;aql=&amp;oq=) on php frameworks
I'm intrigued by your comment - I'm going to give Kohana a crack because of it. Thanks.
Check out [Lithium](http://rad-dev.org/). If you like Cake, this is essentially what was planned to be Cake 3.0 (before they forked and created Lithium), and only works on PHP 5.3+. It works like a champ with Mongo and Couch, but if you want to use MySQL, I'd suggest popping in Doctrine or something like that. Lithium's native ORM is basic on purpose - one could argue Cake's ORM is a bit over-engineered. Lithium was designed to be plug and play with whatever ORM you want to use (or not use). Check it out.
That just seems rather excessive. I say just take some decent precaution: use a commit hook in your VCS to syntax check your configuration file and keep it above the server root or (at the very least) configure your server to refuse to serve the config file.
Obligatory [Yii](http://www.yiiframework.com/) mention. I am love Yii framework! The learning curve is steep, but it is extremely nice once you learn it. It combines stuff I've liked from other MVC frameworks, stuff from rails, stuff from component based stuff (feels similar to ASP.NET/Prado cause the guy who started it also started Prado), and feeds of the strengths of each. Yii is definitely worth at least checking out. 
Ditch Cake and it's PHP4 syntax. Go with something modern like Symfony. 
There's nothing wrong with using $_GET vars, disabling them bothers everyone because it's retarded.
I find them pretty messy to be honest, and don't miss them when they are gone.
GET vars allow the splitting of page identifiers and page modifiers. For example changing the sorting order of a table on a page is a modifier, not an identifier. Codeigniter breaks this pattern and turns everything into identifiers.
It's not more error prone. I don't think a strtolower is necessary. Code all your HTML to post lowercase sort values and it works perfectly. If someone meddles with a URL to change a value to uppercase (not in the validValues list) then it defaults to the first item in the array. If you really want to convert the sort variable to lowercase you can always add that in. The ternary if statement is a very common feature of PHP and very readable. You could wrap this in a function call if you really want. In my opinion your example is much more complex.
I hadn't considered it that way - thanks for pointing that out.
&gt; It's not more error prone. It is. This isn't an opinion. Your code is NOT a drop in replacement for mine, as you suggested. More to the point, it's not easily edited. On a single line, you're doing several things. No. When this code needs to be edited and maintained, it will be a nightmare. &gt; Code all your HTML to post lowercase sort values and it works perfectly. If someone meddles with a URL to change a value to uppercase (not in the validValues list) then it defaults to the first item in the array. No. This is bad and lazy. Do not assume you are perfect, and do not penalize users when you can reward them. &gt; The ternary if statement is a very common feature of PHP and very readable. Yes, it's commonly used (this doesn't mean it's a good thing). In this case, it's use complicates things. You shove everything onto a line (array declaration and logic) for not benefit. Just because something is a feature of the language that is commonly used doesn't make it a good choice. &gt; In my opinion your example is much more complex. You opinion is meaningless. I guess you assume when I said your code was more error prone, more fragile, and more complicated, I was stating an opinion. I wasn't.
Why not use what php already provides for [validation](http://www.php.net/manual/en/filter.filters.validate.php) and [sanitization](http://www.php.net/manual/en/filter.filters.sanitize.php). You can still wrap this functionality in a function/method if you want and add trim(), mysql_real_escape_string(), etc. to the mix. 
I wrote my own routers and template classes to better accommodate my way of organizing things. Everything else, I use http://flourishlib.com/ . Anything you'll need for a standard project.
If you want to wait a week or two, we're close to open-sourcing an improved version of the framework we made for TwitPic called Hub.
I didn't see your post before I posted... but I agree, use filter_var() and MySQLi/PDO.
Ignore the fact that the $validArrays definition and the ternary array appear on the same line, that is how the formatting came out in Reddit. The line that does the work is: $sorter = in_array($GET['sort'], $validValues) ? $GET['sort'] : $validValues[0]; This does two things, an IF statement and an in_array() function Your line also does two statements. $key = array_search(strtolower($_GET['sort']), $validSort); an array_search and a strtolower. Therefore using your definition of error prone (several things in one line) your code is equally error prone. My code does not need to be a drop in replacement for yours - I see no point in returning the key from the array_search array because I am testing the value is in the array. The value I test with is exactly the same as what you return. If your website has a mix of ?sort=blm and ?sort=BLM you will be penalised by Google for duplicate content, one URL should point to one page. It is good practise to be consistent throughout a website. Likewise if you then passed the sort parameter to a SQL query this would also be case sensitive. Why start passing BLM when you're just planning on converting it to a lowercase blm. Why does the ternary if statement complicate things? Is it because you don't understand the syntax? Is this easier for you to read? if ( in_array($GET['sort'], $validValues) ) { return $_GET['sort']; } return $validValues[0]; Seriously if you're going to knock a common operator found across a broad range of languages at least give a decent opinion. "You opinion is meaningless." Now that's just childish. 
And Jetbrains phpStorm quick documentation lookup.
that's like Tom Hanks in cast away removing his own teeth with an ice skating shoe blade
&gt; All this said, I've found from personal experience when I try and write a project from scratch, I find I'm grasping at a lot of features already found in my framework of choice This is *exactly* the situation that people should be using a framework. And by design (of the frameworks) most projects will fall into this category. As a side note by "custom framework" I'm not talking about the junior mentality that means writing everything from scratch (fine for hobby or small projects, stupid for anything commercial). The components you reuse every time (MVC, templating, ORM, url routing, caching) we use existing libraries for (or components from frameworks licensed to allow it) such as Doctrine, Smarty, zend components, symfony components, or other 3rd party libraries. Using libraries not only allows the team not to reinvent the wheel, but abstracts that maintainence to the open source team working on it. The difference (which only ever matters in large, unusual projects) is that each of these individual components can be selected based on the design requirements of the project - as was the annoying case for us with validation within the zend framework project we worked on. Most projects (and by extension most developers) will never run into issues like this and the prescribed set of components that each framework offers suits the majority of projects. This is why I advocate as mentioned in my OP that all developers become familiar with at least one framework. 
A side question, your name a reference to Farscape by any chance? No dren = no shit... :D
Yup - I've realised that the comments that originally piqued my interest have quite different definitions of 'small' or 'large' to my own experiences :) 
Love Zend and Symfony components - haven't had a chance to use Flourish yet though!
I would use multiple tables. One for clients... (clientid, name, phone, email, etc) and a table for projects... (projectid, clientid, projectName, startDate, etc) and a table for timekeeping (id, projectid, date, timein, timeout, etc) You can do a time/datestamp just to have the actual date of the event. Then if you calculate the time in seconds it's pretty simple math to get your overall time spent per project, or per client. . . :D 
OOP is often a buzzword. It's often used in an overcompensating fashion to make up for PHPs other deficiences. You can get away perfectly fine without using it. You will however miss a few opportunities to make your code more readable. Some tasks lend itself to be solved by functions, others are easier if wrapped into an object structure. If you want to get a job in the field, you will go nowhere without a checkmark besides OOP. If you venture into it, avoid memorizing design patterns, but try to internalize what "messaging" means. As for frameworks, there are also a few which work perfectly fine despite being more procedural: http://stackoverflow.com/questions/3023818/any-procedural-non-oo-php-framework (But really, use the right mix! PHP is a **hybrid language**. That's what noobs and cargo culters alike often forget.)
Unless you planning on storing the calculated time difference in the database, you can always use timediff() (e.g. timediff(end,start)). Since you're really just tracking time, I imagine you'll really just need a float stored of the number of hours...as in 3.75 or 10.6. If you needed to do this on the fly, you could simply do: select hour(timediff(end,start)) + ( minute(timediff(end,start)) / 60 ) If it were me, I'd calculate this and store it each time I updated/inserted a record so I wouldn't have to deal with this sort of messy looking sql.
cool, thanks for the response, I can code in OOP and have actually tried to learn about ZF and it has quite a few things I really like and I think are cool...I do however, already know that I don't really like it as a framework but as a gigantic library. I guess what I was also wondering if structured php is used in this particular case because there's no need for a MVC? Also,...I'm from Argentina and English is not my first language,... what did you mean by internalizing what "messaging" means?
What the company will pay for is what's valuable to them. That said, from a career point of view I'd strongly encourage you to learn PHP5, OO Analysis and Design (at the very least), and one of the more popular frameworks. The more tools in your belt, the more valuable you are. Also keep in mind that a "Senior" at one company doesn't necessarily mean they'd be able to get a senior role elsewhere without understanding these concepts. The developer you work with would have a hard time convincing me to hire him under anything other than a junior wage. That may be one of the reason he's been there "forever". That's not to say you wont find work, but why limit yourself? 
how about lightweight DooPHP. 
If you're familiar with frameworks, there's no reason not to use them. It makes everybody's job easier. The only reason, in my opinion, to stay away from them...is if the existing project is without a framework and you're hopping on board. I've coded for ~10 years now, 9.5 without a framework (my own custom gigs). It was a bit of an obstacle learning frameworks (Cake / CodeIgniter) but now that I've used them, I won't ever go back.
[Or just use reddit search](http://www.reddit.com/r/PHP/search?q=framework&amp;restrict_sr=on)
Nope no reference came up with the name when I was ten. I don't remember anymore what imaginative thinking went into it
I'm certain it would help your career to learn OOP, MVC, design patterns and the like. Not only that, its very interesting to learn these things and can make programming more enjoyable. I remember doing websites in the procedural style, hacking around with OSCommerce, and it was painful and boring and repetitive. A good way to learn is to install open source software or a framework and learn from what others have done, how they have structured their code etc.
CI &gt; 2.x now supports full GET vars
Also if you like the look of the symfony docs [http://symfony.com/doc/2.0/book/index.html] for the prose based documentation then have a look at sphynx [http://sphinx.pocoo.org/]
No, he definitely should not do it this way. 1. You should only allow valid input values. Your solution allows any input. 2. You should use prepared statements when working with external data.
Nawwww, would have been much more geek cred if you just rolled with my translation ;)
this might sound like a stupid question, but what's the best way to pass this to mysql and what field type should I be using in mysql?
The point of using OOP is to share code correctly between different parts of a system. For example, if you have 20 different maintenance scripts that all open a database connection and parse csv files, it would save time to have those scripts at least share the database access layer so you don't have to change 20 passwords, etc. Also, if the scripts share a file api, you could use abstraction to change file parsing between csv, xml, yaml, etc if one of the files happens to change from csv. The point is you can change a system more globally, and faster if the right amount of code is shared. 
field type= datetime insert into table start_time=now() update table set end_time=now() where id=X
I love Symfony
Procedural programming is like being a ninja, its easy to fuck up if you don't know what you're doing. The important thing is to understand why you're not using certain things. Sorry if that sounds cryptic, what I'm trying to say is, don't take a certain path simply for the ignorance of the others. Understand your options and pick whichever fits best.
I feel like you're right, but can you point out any specific flaws in my solution?
That's not OOP. That's just a shared library of functions (which is useful, but it's not OOP).
&gt;there's no reason not to use them. There are lots of reasons not to use them. If you're making a tiny webapp, you definitely don't need one. That's overkill. Also, frameworks come with a lot more overhead, so there are situations where the amount of overhead outweighs any advantage gained from using a framework (like a high traffic website on a weak server). There are other instances where your application relies heavily on an already existing set of classes, like for an API or something, if time is an issue, you can't just rewrite them, and you have to use them as-is, they may not work easily with certain frameworks. Remember that Frameworks are tools; like hammers. You have to use the tool to solve the problem, not find a problem to use the tool.
What do you mean? I just pointed out two. Anyway: 1. Your solution allows any input value. 2. It is susceptible to XSS. 3. It is susceptible to SQL Injections. You're using mysql_real_escape_string incorrectly. You should understand the tools you use. 
Ah, sorry but bollocks. OOP is thrown around as a buzzword but it's an incredibly efficient style of programming.
Heh.. none :)
&gt; OOP is thrown around as a buzzword but it's an incredibly efficient style of programming. No. It's a style of programming that maps well to certain problem domains, such as business logic, and it can make it easier for large teams to collaborate(specially when combined with static typing). But it is not inherently any more efficient than other styles of programming, and can be downright awkward for some problems.
Of course there are different tools for different jobs, I took issue with 'just a buzzword'.
Grow up. Learn OOP.
Yes, of course, I'm from "the old days" ;)
MVC is another application design scheme that's often misapplied in PHP. It can be good to know or use anyway for parity with what everyone else does, but that's about it. "Messaging" is the core concept behind object orientation. Encapsulation, inheritance, ploymorhpism, etc. are just methodologies. It's a bit more difficult to explain. Here is an overly lengthy article, actually about another topic, but worth to read twice where it talks about class design: http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html However, don't worry! Anything that actually compacts your code or makes it more readable is good OOP design. If you don't apply it *at all costs*, you are already doing it right.
That should not be spoken! We all agree to erase that era from our memories.
That's the story of my life, I always say the wrong things and always at the exact moment when everybody else are completely quiet. I just hope you were the only one who noticed.
The man is correct. My solution is more tailored to putting variables into a where clause (i.e. WHERE something = '%s'). If you CAN use a whitelist then you should.
Really?!?! I'm all for improvements, changes and updates to the language but this is the mountain this cat wants to put his flag on?
ahhh, a friend sent me this link, and i said, to reddit !. then i saw your post. 
Someone's been writing too much Javascript.
I challenge anyone to defend the need for the dollar sign.
It makes my variables look like a million bucks. $$$
There's obviously no "need", as other languages are fine without it. However I personally find it much quicker to read code with dollar signs in front of variables. It just makes things a bit more obvious.
http://bugs.php.net/bug.php?id=52435
Do you not use an editor with syntax highlighting? If variables are a different color, the dollar sign adds nothing.
Glad to see no one in the /r/php community is taking it seriously : ).
My syntax-highlighting editor puts most non-HTML and non-PHP in black, making any crazy syntax errors that span across the whole document thanks to one little mistype pretty obvious.
The sigil enhances readability, as one can easily see what denotes a variable. Constants use all caps which also stands out. Additionally, echo("My dog is called $name and it's awesome!"); will work, despite not being escaped like echo("My dog is called ".$name." and it's awesome!"); Of course, that is why there is a slight performance penalty with using double quotes...
Everyone knows PHP is just Java with dollar signs. Let's remove them cuz Java doesn't use them. derrrrrrrrr
Except there isn't a performance penalty, the PHP runtime has been optimised for it.
Sounds like you need a better editor :P I like that Eclipse just marks a syntax error (underline / note on line number / scrollbar note) and keeps parsing, the whole "crap out if there's a parse error" is really annoying, especially if the editor parses while you write. FWIW, I know that Eclipse isn't necessarily the "best" PHP editor, but it's more than sufficient at PHP and the advantages of being able to do everything from PHP to Java to X/HTML/CSS/JS to git to SVN to task list integration (works with JIRA, Trac, etc., everything) to having a shell in the same place that will work and look the same across PCs and platforms and is truly portable well outweigh whatever tiny featureset it's missing for a particular language.
using a framework is like waiting for a dentist to crash on your island, get marooned and not listen to you while he builds an entire dental office and goes way overboard on setup then charges you too much of your fictional island currency
This is what I was looking for. The dollar sign is nothing but sugar it seems.
Please provide sources when making statements like that
I also would like to see evidence of this. The general opinion is that single quotes are faster because PHP doesn't have to scan a single-quoted string for variable names.
Separates the namespace for variables;.you can have variables with the same names as reversed words: $class, $include, $function, etc. You can't do that in JavaScript, for example. 
im also interested provide proof.
Don't you dare apologize for eclipse, let the haters hate. Eclipse rules. I have the ability to use whatever IDE I like, and have tried several expensive ones. Some have a better implementation X, but in the end, eclipse comes back in for the reasons you said; It does everything everywhere pretty damn good.
That was my point exactly. You can find a better program for doing X, but if for doing X Y Z A B C and D together, you really can't beat Eclipse.
What's the error? 
Nothing is being inserted into the table
It would be awesome if they got rid of the dollar signs and changed the string concatenation to a plus sign like in most other languages, but they aren't going to. And if they did, I'd probably just be confused after all these years of doing it the usual way.
PHP's handling of variable types is already confusing enough, I don't think we need to add the question of "is this operation gonna concatenate strings, or convert to numbers and add them?"
Using plus signs for string concat is terrible design. It's one of the worst things about JavaScript. 
from the link, I saw how the person wrote their name in camel-case and I thought it was a clever joke. ...but now after reading the comments, I have no clue what to think of this.
Over time I've come to the belief that the biggest problem in PHP and Javascript is that they type juggle. I didn't always feel like that, but as the years go on and I work with more languages, I find type juggling to cause more problems than it solves.
Or any language except PHP and Perl.
Your syntax highlighter doesn't know the difference between a variable and a typo. The dollar sign is one more thing to help make that distinction.
&gt; It would be awesome if they got rid of the dollar signs and changed the string concatenation to a plus sign like in most other languages $a = 3; $b = '4'; echo $a + $b; What output would you prefer to see there?
http://www.codeforest.net/php-myth-busters-using-single-quotes-on-string-is-faster-then-double-quotes
http://www.codeforest.net/php-myth-busters-using-single-quotes-on-string-is-faster-then-double-quotes
Good news is, it looks like PHP 5.4 (or PHP 6? Who knows?) will have even more type hinting, with a lot of magic and usability. (It'll let you do soft and hard hinting. The former converting and in case of data loss sounding the alarms [exceptions/warnings/ new error type: E_FUCKUP or whatever].)
replace: $stmt-&gt;execute(); with: $stmt-&gt;execute() or die($stmt-&gt;errorInfo());
Doing this displays: "Array" 
[variable variables](http://php.net/manual/en/language.variables.variable.php) ie $cat = 1; $dog = 2; $name = 'dog'; echo(' 1 + 1 = '.$$name); // outputs ' 1 + 1 = 2'
I would prefer it to throw an exception when mixing types.
You can actually. JavaScript and Java will happily allow you to use $ signs in your identifier names, maybe other languages too.
try this instead: $stmt-&gt;execute() or die(mysql_error());
Me too. It will never happen though. PHP is a dynamically and loosely typed language, and likely always will be.
php devs will ignore this, as they do most good suggestions.
couldn't you just user one dollar sign to signify a variable variable then?
Not displaying anything =/
 if (!$stmt-&gt;execute()) print_r($stmt-&gt;errorInfo()); 
That's a fair point. Although $-prefixed variables in JavaScript were supposed to be used only for automatically generated code. Prototype and then jQuery sort of co-oped it for their own purposes.
Nothing is displayed with this
Ok, thanks for the explanation and article man. I'll be reading it when I get back home
I know OOP, you didn't read the text
I've seen this bechmarked multiple times from different sources, and single quotes won every time.
Yeah, but I actually prefer the concatenation method (especially for syntax highlighting). I'm not buying the double&gt;single quotes though: single has no parsing/escaping to do and is always to my knowledge faster...
$stmt-&gt;execute() ; print_r($stmt-&gt;errorInfo()); goddamn PDO
Yeah, but as they state, echo "This is a $variable"; Has a larger expansion than single quotes. So it's definitely "equal or slower than" to use doubles. Great article though, interesting to see the opcode output from such things (and I had no idea about echo commas being faster, that's totally counterintuitive...)
Your select statement is wrong: $stmt= $db-&gt;prepare("SELECT * FROM albums WHERE title=':title'"); It should be: $stmt= $db-&gt;prepare("SELECT * FROM albums WHERE title=:title"); Otherwise, you're just matching records where the title matches the literal string ':title' not the parameter value. 
"Array ( [0] =&gt; 42000 [1] =&gt; 1064 [2] =&gt; You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'desc) VALUES ('aa', 'aa')' at line 1 )" Seems to be making progress! Thanks so much for your continued help in this matter btw, I'm such a newbie at coding anything :).
As is the minus operator...
try changing your SQL to this: INSERT INTO albums (`title`, `desc`) VALUES ('aa', 'aa') desc is a reserved word in MySQL, so it needs to be surrounded by `
Awesome, everything seems to work now, thanks for all your help!
Thank you and changed, problem seems to be solved now.
Yes, a bit strange, after all double quoted strings could be chopped up, analyzed and whatever right at "compile" time, just like commas.
not in the case of variable variables :D
Why? :o It'd be exactly as fast as the comma version. Variable variables are just a shorthand for isset($__scope[$var]) ? $__scope[$var] : $GLOBALS[$var] and if you have a string in $$var, then that could have been already parsed when you constructed it, so no chopping up should be required when doing the echo "...". (If this was not the biggest bikeshedding, I'd ask why is it this way on PHP-internals :P)
uhm, what?
I'm not one to split hairs about negligibility, but... yeah, there's technically a performance penalty.
try phpStorm. It can syntax highlight SQL, HTML, etc. inside a PHP string and similar.
Exactly. Eclipse is good. It's just that Netbeans is better :p
Sounds about right. From: dh123lh1 at **hotmail** dot com OS: **windows** 7 home premium Home
Nice try ahmetdevel. I don't want my variables to suddenly be treated as variables variables when I upgrade. I would be very sad.
well shit if we want to get that clear why dont we just go all the way and not half ass it? &gt;echo "My dog is called {[][][]||||||&gt;&gt;&gt;$name&lt;&lt;&lt;|||||[][][]} and it's awesome!"; Damn I can read that variable name so nicely now, this is great.
if you use $class for your variable name youre just going to piss someone off. Theres just certain things youre not supposed to do.
or remove it cause i'm sick of hitting shift 4.
i disagree, the plus sign is the only shorthand that makes sense. Youre adding to strings togethor, you should use the plus symbol.
could be a php.ini option to turn it on/off. but i know things like that are complicated to understand.
I use/have used (in order of potency): - Xdebug (with Netbeans IDE... very powerful) - FirePHP (and plain, old Firebug) - var_dump and, last of all... if($foo){ echo 'yay. $foo = ' . $foo; } else { echo 'WTF?!!?!?! Nooooooo.....'; }
You don't have to *trust* it. He told you how he performed the tests on which he based his conclusions. 
cool thanks. ill try xdebug right now
I haven't even read the text that wasn't code :) There was a talk by a core php dev years back (if my memory serves well), and I was trying to find that, but this one seemed to show the same opcodes, so I just went with it.
Concatenation is not addition. Consider: 1 + 1 = 2 1 + 1 != 11 Edit: formatting
Not without breaking backward compatibility.
I have clients that are fine with shared hosting plans which I have no control over and may not have init_set as an option. I know that being good enough at a trade where you actually have clients can be complicated to understand. 
Which I don't agree with— he's showing the opcode, but isn't that after it's parsed? Which means PHP might take longer to parse it if you use double quotes?
I think the idea is that the op code itself represents the actual parsing and that embedding a variable within a string creates a more complex algorithm which will run slower.
If you don't have the $ then you need to explicitly declare your variables before you can use them, which in itself is a pain in the butt. The language needs to have a way of knowing when you're talking about a variable, constant, function, or object and can't do so without either being told, or given some kind of a clue. Without the dollar sign you'd end up writing code like string myVar; myVar = 'Something'; echo myVar; and all of your variables would need to be declared at the beginning of the script. When you're only working with a handful of variables it's not a big deal, but if you're managing dozens, or perhaps hundreds of variables, it would add pages of code to your script.
Mostly a combination of: die($foo); or die($sql); or echo "&lt;pre&gt;"; print_r($bar); echo "&lt;/pre&gt;"; Firebug is also quite helpful to make sure my forms/ajax is giving me what I want.
Why? It could be used quite a bit to, for example, store the reference to a ReflectionClass instance or maybe for a CSS class. Or maybe you work a school...
That's true, but the overall script run time should be slower using double quotes than single quotes since PHP has to parse through double quotes to check for variables. The reason the opcode represented that double-quoted string the same as the single-quoted string is because PHP parsed through it beforehand and checked, which it didn't have to do for the single-quoted one. Of course, the performance impact is almost negligible, but it still exists.
I convert all errors to exceptions using the set_error_handler(). There is no reason to use trigger_error in modern PHP code. 
&gt; The reason the opcode represented that double-quoted string the same as the single-quoted string is because PHP parsed through it beforehand and checked, which it didn't have to do for the single-quoted one. I see what you're saying. I'm not sure how parsers work at that low of a level. It would seem that if nothing else it would have to check each character to see if it is a dollar sign, which would be a lot of extra work. 
It's kind of like taking a hand-crafted vase and an identical machine-crafted one and saying, "Look! They're both the same, so they must have taken the same amount of time to make!"
I'd prefer to encapsulate the strings in quotes, honestly.
As an Englishman, I think the dollar sign should be interchangeable with with the pound sterling symbol.
sure there might be lots of reasons you want to call your variable that, but it still makes your code annoying. Espeically if youre trying to talk to someone about it.
no but "1" + "1" = 11. the + sign is just an operator, it doesnt have to be used to add numbers up like a calculator.
&gt; i just use firebug. Which probably means you have `display_errors` on. IMHO, you should avoid doing this always. I'm sure you're aware of the security risk on public-facing machines already. But there's another reason for dev environments as well - the page could crash mid-load and bury the error message in some hidden html tag. It can often times be a pain in the ass trying to view page source just to get at your error message somehow embedded in some hyperlink. You should instead rely on just reading the error log. Firebug is IMHO an immensely valuable tool not only for development, but also for just exploring and screwing around on the internet. IE has a similar built-in tool... which I really don't think is comparable at all, but there are some independent projects out there recently which either port it to IE or make something worth-while. But none of this is meant for testing server-side scripts except when testing output. IDE's usually are best for most cases. There's a few free ones out there you can try out. But if you don't like them, install the full PHP package including CLI on your local machine. That way you can make quick test scripts trying out individual classes and functions instantly, with instant access to the error log. Advanced text editers typically allow you to set macros, which will allow you to run the test script with just a keystroke, as well as automatically updating the log file contents if you have it open in another tab. Yes, locally installed PHP could lead to embarrassment if your local machine is compromised by some PHP script you inadvertently downloaded from the internet, so just use caution. 
I really don't see a need for those either. Its just half assed referencing.
How so?
&gt; I suppose you hate it about... every other language as well? Globally, yeah. It's a terrible idea. There is pretty broad consensus these days that accessing methods or properties of an object is better use of a symbol as valuable as `.` than concatenating strings. It doesn't follow that the only alternative is a `+`. Particularly with a type system like PHP's.
&gt; Theres just certain things youre not supposed to do. This is not one of them.
This is a sound point. Now if only PHP's parser were up to, for example, letting me call a method `new()`...
At a quick glance, I don't see an issue with using + in PHP.
toss it into production and wait for the users to complain
Repost from [Shadowsoal@technology](http://www.reddit.com/r/technology/comments/gfxuc/massive_sql_injection_attack_making_the/). Also, it's April 1st in some parts of the world, but somehow it wouldn't surprise me.
dude using a reserved word for a variable name is rule number 2 in "don't do this in your coding for dummies".(rule number 1 being something like "dont use vague words for variables"). It doesn't matter if the language still allows you to do it. It's confusing and annoying. 
&gt; If you don't have the $ then you need to explicitly declare your variables before you can use them Not really. I mean, here's some Ruby: myVar = "Something" puts myVar Or for a language that has, in this case, _identical_ syntax to PHP, here's some non-strict-mode, no-warnings Perl: $myVar = 'Something'; print $myVar; In each case the language runtime assigns an underlying representation at the time of assignment. For the Perl fragment, it won't even complain if you completely remove the variable declaration. Of course, if you've written much Perl since about 1995, you've probably stuck these at the top of your files: use strict; use warnings; Which changes that behavior by requiring a variable declaration. Not, mind you, a declaration of _type_, but rather one of _scope_: A statement that such and such a variable goes by a certain name and lives within a certain frame of reference. It also causes the interpreter to squawk at you when something seems amiss. For example, the Perl fragment above would now give you errors like these: Global symbol "$myVar" requires explicit package name at test.pl line 6. Global symbol "$myVar" requires explicit package name at test.pl line 7. Execution of test.pl aborted due to compilation errors. In order to get rid of them, you'd need to instead say: my $myVar = 'Something'; print $myVar; For your extra 3 characters, you get protection against mis-typing the name of the variable, and the ability to constrain its visibility to a given package, subroutine, loop, conditional block, etc. This is generally considered a feature. (Edit, a bit later: This is kind of a shitty comment, because I went from your original assertion about the need for a sigil to making a point about variable declaration without really bridging the conceptual gap. My bad. I should have said something like "but let's revisit variable declaration. Here's some code from a language with, in this case, _identical_ syntax to PHP..." and then gone on to point out that most people using the language deliberately enable features which require explicit declaration syntax.)
&gt; Constants use all caps This is a best practice, not a requirement.
I'm with [Larry](http://www.nntp.perl.org/group/perl.perl6.language/2002/11/msg12621.html) on this one.
I don't see how using + is confusing. String concatenation is literally adding two strings together, so why shouldn't + be used? &gt;When people look at $a + $b in Perl they don't have to wonder what it means. Really? That's his biggest concern? That if a programmer grabs a random piece of code out of context, they don't have to guess about a minor detail? Shouldn't the programmer know what $a and $b are before looking at them? Shouldn't making sense take precedent over edge cases?
We're talking about a language where variables are prefixed by sigils. A design decision which allows even a parser as halfassedly rattletrap as PHP's to sail smoothly along without confusion - much as with tools like the syntax highlighting in your favorite editor, and, as near as I can tell, the brains of _very nearly_ everyone writing the stuff (and here we are not talking about a population well regarded for its general clarity of thought). Here's the [list of PHP reserved words](http://php.net/manual/en/reserved.php). There are literally hundreds, if you count the constants. To be a bit more reasonable, the meaningful barewords you'd be avoiding under a reasonable version of this rule include things like `continue`, `function`, `default`, `class`, `static`, `new`, `protected`, `public`, `break`, `clone`, `final`, and `abstract`. Why worry? The worst you're risking in practice is a little difficulty grepping, and that's pretty easily surmounted by looking for a leading character that's _not_ a `$`, or vice versa...
Does Netbeans have a working and stable: * IRC client? * Email client? * SSH terminal?
&gt; pain in the butt Until you accidentally realize a global variable name was already taken and assigned a crappy value, but you used it anyway on good faith that it wasn't. Or heaven forbid, you have register_globals on. Even if it's not a requirement in your chosen languages, it's just good practice to declare/initialize variables before you use them.
&gt; php devs will ignore this Yeah I hope so. There's a reason all these programming languages out there do not exactly mirror each others syntax. Each has found a reason/use case/user base preference to implement or focus on their own. When I have a problem with C#, I don't come attacking with pitchforks and torches to all C message boards. Christ man, the programming world is only _slightly_ homogeneous for a reason.
UNIX shells. sh, tcsh, csh, bash, etc. all use the $ sigil for variables. Also, awk. Perl got it from these earlier languages (and PHP got it from Perl). It was designed to make the transition from shell scripts to Perl scripts easy. The sigil in PHP was designed to make the transition from Perl scripts to PHP scripts easy (though it was also probably a side-effect and implementation detail of PHP being built with Perl to start with, rather than a conscious design decision). Anyway, there's nothing odd or obscure about dollar sign sigils on variables. It's extremely common in the languages that Perl, and thus PHP, sprung from. People who find it odd just happen to come from a different culture.
I have news for you... $t = 'asdf'; $t1 = 't'; $t2 = 't1'; $t3 = 't2'; echo $$$$t3; 
Btw, does anyone else have the temptation to lose their lunch every time you have to write "=&gt;" and "-&gt;"?
I love php storm. I switched to it about 6 months ago and haven't looked back it's awesome
Could you use braces? {{var}}?
why would I want to slow down an already slow IDE?
None of these things should slow down anything. They don't slow down Eclipse at all. The IRC client sucks though, so I don't use it.