If you're working in team environment you'd have to all decide beforehand what properties will exist on these POPO's in different scenarios. You would then have to have a reference sheet or something. Having a spec defined in an interface is a much nicer way to work.
aahhh i see what you mean. 
the simple bottom-line is, do *not* store password if you do not need to. Store a hashable thing that can be used to recompute if a given password is correct And if you really really must store that kind of sensitive data read the PCI rules three times and then think again of you really need to store the information requested, and first check the possibilities of using pub/private key for authentication. Reversible encryption is a rather tough playground you do not want to think lightly off, and from reading your code I am not sure you oversee all the consequences of storing sensitive data. 
When I do a `git diff`, those lines end up highlighted red. The last thing I do before every commit is a `git diff` to ensure that there's no unnecessary whitespace. Lines with nothing but tab characters annoy me ...
To be fair, using braces could have prevented the latest iOS bug.
No, it's not the biggest thing to worry about. But it is *a* thing which is capable of causing actual problems. On the one hand, we have the rule "Never permit the `?&gt;` token in a non-template file". Short. Simple. No downsides, other than occasionally having to hit `Gdd` when editing an old library. On the other hand, *not* following this rule comes with a pile of caveats I'm not completely certain I could recite in its entirety, each with its own strategies for mitigation (which may or may not have further caveats). Why *wouldn't* I take the option that reduces my cognitive burden?
dev isnt defined in this example :P 
 * You are using `H(msg . key)` as the signature - that's not good. While it is certainly better than `H(key . msg)` (which is trivially breakable for any hash function based on the Merkle-Damgard construction, which includes the md and sha families), the `H(msg . key)` approach also has issues: Namely, if you have an (unkeyed) hash-collision `H(m1) == H(m2), m1 != m2`, then `H(m1 . key)` and `H(m2 . key)` will also collide (well, that's not exactly true, but close enough). For hashes like md5 (which we're pretty good at colliding nowadays) that's problematic. * Effectively this means: Just use HMAC, which is designed to prevent these kinds of issues. PHP provides it via `hash_hmac`. * You are comparing hashes using `==`. Especially as you're using the hexit form of the hash this has a chance of failure if the hash turns out to be some kind of number. You should use at least `===` instead, however the proper way to compare hashes is the use of a constant-time string comparison function (-&gt; google). * Your encoded hash can contain `_` characters. However you extract the hash by strrpos'ing on `_`. That doesn't look right ;) Edit: Actually that can't happen as you're base64 encoding a hexit string. So, why do you need the base64 encoding at all? Hex is already fine for URLs. If you want to use base64 you should apply it to the raw hash * I'd point out in the examples that `secret1` is not a suitable key - the MAC key must be a normal cryptographic key (random binary string), not a password (which has way too little entropy).
I'm curious to know how you're convinced that my interpretation of the refund clause is incorrect, without being associated with the company and having read the same document yourself. Additionally, that is the *only* part of the document that mentions refunds of any sort, so despite Taso's explanation (of an undocumented 50/50 split of refund costs in the Quality Guarantee scenario), I am convinced that my interpretation is 100% correct. And what are those other "many things" which are "flat out untrue?" Facts and supporting documentation, please.
I guess to me it's cognitive burden to try to remember what sort of file I'm in. "Oh, files in *this* directory, I'll never close the final PHP tag. But files over here, I'll close the PHP tag." To me that's *more* cognitive overhead. Closing the PHP tag in *all* cases, and perhaps running a linter or cleaner that looks for violations (like trailing white space) can work across the board then.
Check out the first 2 editions and see if they interest you at all.
It kinda seems to me that the idea is: in non-template files, you'd just open with `&lt;?php` at the top and write in straight PHP throughout the rest of the file. A template file would be effectively writing HTML and injecting PHP throughout. The file itself might not even start with `&lt;?php` or end with `?&gt;. So you wouldn't have a need to close anything in a non-template file, the only place it would be anyways is at the end. In a template file you'd definitely have to because there would likely be some plain text/html/js/whatever after. Basically, it seems like: don't use the `?&gt;` unless it's absolutely necessary to close PHP and start writing in something else.
What about including basic crud methods in the interface (or abstract class) for repository classes to implement. Ex: insert(), update(), delete(), along with find_by_id() and others? Maybe even having a "Base" interface to take care of all the common methods (to be defined in implementing classes), then have custom interfaces as needed so the repository class could extend Eloquent and implement base and custom interfaces.
I would suggest that it's not really the best way, and that you would be better off being able to maintain SoC using a template engine. Something like PHP Plates. http://platesphp.com/ I would also advise getting away from the flat-file procedural mentality with PHP, if that's what your example was indicating (not sure as it's only a snippet). There are plenty of decent frameworks these days to ease those kinds of burdens. 
It's worth noting that the Unix-style trailing linefeed doesn't cause this problem—the interpreter isn't *that* dumb. You only get the one, though.
Just to expand on what others have said, you want to find a good MVC framework to start with. Many people have their own opinions(including me) however the best part about PHP is there is no right or wrong answer. Here is a few great frameworks to chose from(in no particular order): * [Yii Framework](http://www.yiiframework.com/) * [Zend Framework](http://framework.zend.com/) * [Symfony](http://symfony.com/) * [Laravel](http://laravel.com/) * [CakePHP](http://cakephp.org/) * [Code Igniter](http://ellislab.com/codeigniter) 
Good start, for sure. I know the templating engines can seem overkill, but there is a great talk on why Drupal switched to Twig (the engine used by [symfony](http://www.symfony.com), among others) that gives some explanation as to why you might want to use one. There is a lot of other stuff in it too, but it's a good start: http://www.youtube.com/watch?v=adrW67KrdUY
yes you are. Even better: product.php &lt;?php // fancy DB query here $prodName = "Red Ball"; $prodDesc = "Red Ball, a really nice ball"; echo show_stuff(); function show_stuff(){ //$fname is "product" $fname = basename(__FILE__,".php"); //$tpl is "../tpl/product.html" $tpl = file_get_contents("../tpl/".$fname.".html"); //there's _much_ improvement to be made here, but you'll get the idea $view = str_replace(array("&lt;!-- t:prodName --&gt;","&lt;!-- t:prodDesc --&gt;"), array($prodName,$prodDesc), $tpl); return $view; } ?&gt; product.html !DOCTYPE html &lt;html&gt;&lt;body&gt; Your product: &lt;!-- t:prodName --&gt;&lt;br/&gt; Your product description: &lt;!-- t:prodDesc --&gt;&lt;br/&gt; &lt;/body&gt;&lt;/html&gt; This way your templates are HTML valid, much cleaner and shorter. (untested code, might not run at all) 
Yikes, I'm sorry but this is awful. Just use a templating engine, in most cases they are designed not to be awful. 
I don't understand what plates has to offer other than littering your templates with `$this-&gt;` ??
Thank you so much for the comment. Really appreciate your help.
Ugh. This is awful, and makes a not particularly good solution much worse.
The general idea is to keep your HTML pristine, even W3C valid. The templating snippet does everything with str_replace() why is it awful? 
Yes, it's perfectly fine to do it all in PHP; in fact it's preferred. Check this out: [Templating ... the correct way](https://web.archive.org/web/20050207132848/http://www.phpguru.org/static/templating.html) 
In a word: abstraction; separation of concerns. `$this` may refer to an object which can do much more than just hold a primitive value to be `echo`ed. 
what exactly are you separating? it just holds methods and variables which is in no way superior to loose variables and functions. further, *because* they've already defined a few things on the object, and then let you inject your own properties into it (I think dynamic properties are hacky), they're already eating into your namespace and opening the door for potential collisions. 
I'm not going to get into suggesting using an existing framework since it seems like that's well covered and in the end the choice is yours. I have seen a couple techniques that I think help make "regular" PHP templates easier to deal with. You're already started on the right foot by actually separating out the template from the logic. Another thing that I've seen in the past and appreciated is packing the strings that you'll be using in your template into a single associative array or object. It's much easier to pass this object/array around in your logic to change, append or translate strings depending on the control flow of your program. Also, don't be afraid to make judicious use of the [PHP alternate control structure syntax](http://www.php.net/manual/en/control-structures.alternative-syntax.php) in your template when it's called for. You'll want to use this for arbitrarily sized lists as well as if/then logic (such as showing a login or logout link based on login status of the user). It's also worth thinking about cutting your page up into sections (such as the navigation bar, login status, individual blog articles, site logo, etc) and keeping individual template files for each. It's at this point where the advantages of a framework or CMS really start to show. On the other hand, if you're just making a basic 3 - 5 page site as an interim solution, getting a full blown framework involved might be overkill.
"Forget templating engines. They're history" Says an article from 2004 
Look into Twig - http://twig.sensiolabs.org/ I haven't used it but it has some good feedback. Personally I use Smarty. Smarty appears to be hated by many PHP purists, but I don't care about them. Its hugely performant (good for high traffic sites), and provides a lot of good features to split presentation from logic. 
I would argue that "loose" variables (by which I presume you mean in the global namespace) are not an ideal way to maintains clean(er) code, especially in PHP. While the language isn't as primitive as it used to be, I would opine that using features such as OO and namespaces, concepts like DI, etc. can make for both a better product and a better developer experience. Of course, I'm not advocating for any particular templating library (Plates was just the first one that sprang to mind) and there are others. But I would recommend using something tried and tested rather than simple `include`s. 
Really? Is that documented somewhere?
thank you very much for this feedback. when I did this, I just wanted to crc my cookies, really clueless about the deep technicallity of these things. now, i'm still clueless, but a little less so because of this feedback. working on the changes now :) UPDATE: Have updated the code with changes addressing your feedback. Thanks again!
I've used Twig. I think it's my favorite templating language, even amongst those common with other languages. It's simple, easy to use, and extensible. I find the filter syntax is much nicer and cleaner than calling functions.
That's a fair point, although you may come to change your mind when trying to debug a White Screen of Death! :-) 
uh....you should never get a white screen of death in development. crank that debug up!
Quite!
This is a good idea, but at this point you're basically just doing what doctrine already does. If you do this for every entity you'd be better of using doctrine since the rapid development you get from eloquent is pretty much lost. 
It may or may not be. However it's been ages since I've worked outside a framework with PHP, but the thing I hate about that templating model is the fact that variables required are implicit. At least I'd do a function load_template($file, $variables) { extract($variables); include $file; }
I was gonna post something like this and I'd bet this is what OP is looking for. I know nothing about aspnet but i'm pretty sure there are frameworks and template systems. If anything, you should wrap it into a class. PHP5 is OO, we are 'serious' now.
I didn't want to link spam the book, but you asked so... hopefully I don't get hate for this. https://leanpub.com/build-apis-you-wont-hate
Yes pigdart, okay.
&gt; If anything, you should wrap it into a class. PHP5 is OO, we are 'serious' now. I've read (and felt) "Execution in the Kingdom of Nouns" far too many times, to know better.
Great code review. I love reading stuff like this.
I really don't get this issue with the shorthand tags. Yes, some servers have it disabled, but some servers have old versions of PHP as well. If you extend the server environment argument then you shouldn't use interfaces, or traits, or namespacing, etc. I once had a contractor alter all my wordpress plugins (and cause the site to crash) because of this personal preference, but he used the server configuration argument. It was my bloody server, and my code. The shorttags are readable, and have been adopted in the PSR code style.
This is the article I'd recommend you read - http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1 It talks about the different pieces of a framework, making them yourself, and slowly transitioning from very basic (procedural) PHP on up.
Use namespaces. You're misunderstanding them.
My suggestion is to not do something like this. #1) PHP tags are ugly, and ugly code makes your views a pain to work in and you're also tempted to put logic into your views. #2) When I create views I like to explicitly pass variables down, this makes debugging much easier as I can follow where variables are coming from. (obviously this isn't an issue with this small example, but imagine 100+ views all being reused with different controllers and mixing in different layouts) #3) (recommended) Using a very limited templating engine is "always" the best route in my opinion, because it forces you to keep logic out of your views and it also makes your views "pretty". (I tend to stay away from Smarty, but I find Mustache to be very attractive. If you really do need the extra functionality then Twig is definitely the most verbose templating I would allow)
It's my understanding that &lt;?= is considered safe to use and are enabled even if short tags are disabled from 5.4 onwards. &lt;? is another thing entirely, but I'm not kicking that hornets' nest.
Namespaces work on class, function and constant names, not on variable names.
Awesome, I wasn't aware of that, I will try it, thanks a lot.
Reddit's algorithm itself is pretty simple. Shouldn't be too hard to implement in PHP. http://www.outofscope.com/reddits-empire-no-longer-founded-on-a-flawed-algorithm/
* Remove `echo` * Throw Exceptions in case of an error * Return results * Database isn't a good name for that class. It is an Active Record, not a Database. * Stick to the camelCase naming convention for your variables * find(), save() and findAll() should already do work in the database class (add protected $tableName and $primaryKey attributes) * Use prepared statements * Use namespacing * Connecting to the database shouldn't be part of your active record pattern, put that into some sort of database adapter
I wasn't aware of that - good stuff.
thanks, I was reading that post earlier. I was a bit confused by the variables "long ups, long downs, double date" .. do you know what those represent? 
 cpdef double _hot(long ups, long downs, double date): If you are talking about that, long and double are types. So I'd say ups is the upvote count, downs the downvotes count and date unix timestamp to the millisecond. EDIT: Accidentally a word.
Hahahaha, thanks for that. I swore to myself I'm never learning Java because I hate every Java programmer that I ever got to know. Sometimes I feel like getting into C++ just to rub it in their faces.
I've done something like this while back with codeigniter. Similar logic, if not the same. It was e-commerce site that has various image size, so I implemented something similar amazon?? had, where image size is parsed with the name, and then in controller i did the resizing, based on dimensions. e.g. http://ecx.images-amazon.com/images/I/813CTILSdiL._SL1050_.jpg http://ecx.images-amazon.com/images/I/813CTILSdiL._SL60_.jpg (change last number and put whatever number there ) But anyway.. However, caching method you used is bad, as image request still has to go through framework, which is really not necessary and when you have lots of image requests... this puts necessary stress on a php module and obviously memory what you really want is server to handle caching, so if you place .htaccess file (or in nginx use regex)) in the assets folder. Something like this (obviously change these to wherever logic you are serving images) RewriteCond %{REQUEST_URI} ^/images/(.*)$ #grab image request RewriteCond %{DOCUMENT_ROOT}/storage/cache/images/%1 -f #check if ti exist RewriteRule ^images/(.*)$ /public/storage/cache/images/cache/$1 [L] # redireci if does # continue with normal processing This from memory, so pardon me if something is off. basically it will check if image request exist and will redirect to that folder, otherwise it will call the resize controller 
I yesterday had a situation where I actually could have used multiple cursors quite well. I got a two column list of numbers as an ascii file that I wanted to turn into a hash, like so: 1234 5678 2345 4567 6578 5543 into this: array('1234' =&gt; '5678', '2345' =&gt; '4567', '6578' =&gt; '5543') Numbers were not of equal length as in my example. I could use the basic multicolumn cursor that PHPStorm already brings (click and drag using the mousewheel/middlebutton), but multicursor would actually have been better.
Theoretically, if a help desk uses PDO (not the mysql or mysqli extensions), you should be able to use mssql with it (or any other database that PDO supports).
'long' and 'double' are the variable types (like int or string etc). So: - 'long ups' means a large int variable named 'ups' (upvotes). - 'long downs' is a large int named 'downs' (downvotes). - 'double date' is a double (decimal number) named 'date'.
As someone who has some experience with .net mvc and Razor engine I'd say, twig is a good php equivalent of that. Also these templating engines keep you from accidentally adding logic to your templates. Which is easily done. I refactored a whole bunch of stuff to twig. It was well worth it. 
Thats some bad astroturfing for someone with a strong engineering background...
Man, was this like "Hey, everybody - someone spoke badly about us on Reddit, who has an account there? What? You never use it? Never mind, just write how cool we are and how bad he is!"
It's also in [PSR-R](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md#22-files).
This is a better solution, because it ensures that the variables are local to the template and get discarded after use.
The templating engines I like remove the need for opening and closing php tags which greatly increases readability when interacting with HTML in my opinion. Check out the Blade engine used by laravel. 
Luckily I'm in the situation where if a server didn't allow for &lt;?= i can make it be able to. I can also ensure I have the latest version of PHP, Apache, mySQL, etc.
http://www.helpdeskpilot.com/helpdesk/mssql-server.php
I've reworked much of this as per the recommendations of everyone in this thread. I'll be posting my rework this weekend for more suggestions- this place seems really helpful!
Once your app gets even slightly complicated, not using MVC is going to be an issue. MVC helps avoid spaghetti code and makes your code more easily maintainable. It's a way of separating concerns. I suggest you look into Symfony if you're going to continue using PHP.
Yeah I'm starting to feel that way too. I really need to look into Doctrine.
Why don't you just reply directly to the comment you're replying to, rather than to yourself? The way you're (mis-)using Reddit, they never get a notification and nobody else can figure out what you're talking about.
I've looked at your website's FAQ and the entire content is for clients. Not a good indicator that you cater equally to both clients and developers. Your comment on yuriy's blog doesn't include a quote from the Agreement that would let everybody know if Yuriy did not understand correctly or not. He might be bound by legal not to disclose the terms of the agreement but you are not.
http://stackoverflow.com/questions/5262224/how-are-reddit-and-hacker-news-ranking-algorithms-used
Any plans to allow subscribing by feed? Prefer it over email...
It's a bit buried, but on [this page](https://www.php.net/manual/en/language.basic-syntax.instruction-separation.php) of the manual it says "The closing tag for the block will include the immediately trailing newline if one is present."
Reddit is open source, so you should be able to port the algorithms that you want: https://github.com/reddit/reddit
[\PDO](http://www.php.net/manual/en/pdo.connections.php)
Does anybody know how is this algorithm actually implemented? It surelly isn't recalcualted every few minutes for all posts... Is it updated only on upvoted and comments?
Yeah that's kind of what's keeping me from doing it, so many things could go wrong. Plus I would have to add some kind of layout editor to add the fields to the forms and such. But the aim of this feature is to give a non-programmer this ability to reshape (a bit) the app so that if he need a specific field for his objects, he can add it.
http://blog.glocal.com/2012/12/tuning-your-own-reddit-style-ranking.html
What you're actually looking for is an [EAV model](http://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model).
/thread
I think there is scope to be able to create migrations as part of this process. The user adds a field in the admin, that generates a migration, and that migration is then run. What SugarCRM does, is keep its table structure as metadata in files, then scans the database and compares the database to the metadata. It then issues ddl statements to bring the database into line. Migrations don't work that way, but there must be some kind of hybrid that could work. 
I think the user would be adding business level "fields". Schema changes would be handled by the system as a consequence of that. Being able to switch between EAV and flat, wide tables as needed, but invisibly to the application, would be cool. 
I would not call it "standard" but [Aura.Sql](https://github.com/auraphp/Aura.Sql) uses an _ExtendedPdo_ class to provide many convenience features: &gt; Lazy connection. ExtendedPdo connects to the database only on method calls that require a connection. This means you can create an instance and not incur the cost of a connection if you never make a query. &gt; &gt; Bind values. You may provide values for binding to the next query using bindValues(). Multiple calls to bindValues() will merge, not reset, the values. The values will be reset after calling query(), exec(), prepare(), or any of the fetch*() methods. In addition, binding values that do not have any corresponding placeholders will not cause an error. &gt; &gt; Array quoting. The quote() method will accept an array as input, and return a string of comma-separated quoted values. In addition, named placeholders in prepared statements that are bound to array values will be replaced with comma-separated quoted values. This means you can bind an array of values to a placeholder used with an IN (...) condition. &gt; &gt; Fetch methods. ExtendedPdo provides several fetch*() methods for commonly-used fetch styles. For example, you can call fetchAll() directly on the instance instead of having to prepare a statement, bind values, execute, and then fetch from the prepared statement. All of the fetch*() methods take an array of values to bind to to the query statement. &gt; &gt; Exceptions by default. ExtendedPdo starts in the ERRMODE_EXCEPTION mode for error reporting instead of the ERRMODE_SILENT mode. &gt; &gt; Profiler. An optional query profiler is provided, along with an interface for other implementations. &gt; &gt; Connection locator. A optional lazy-loading service locator is provided for picking different database connections (default, read, and write). (I am the lead on the Aura project.)
This is very high quality information. Well presented and well thought out. (Can I get that beer now Chris?)
Have you evaluated whether NOSQL would be a better fit for your project? It would allow you to do this particular thing.
Hmm, I wonder. If this happened would I be able to extend primitive types?
It depends on how it gets implemented. According to Nikita's explanation, he said it might make sense to just make them "pseudo-objects" and not real objects, so they wouldn't necessarily be a class that could be extendable.
+1. Aura.Sql is a good choice.
I imagine I could (probably) generate migrations files, but hand rolling my own "user to migration" layer isn't the primary objective of this little project. Plus when this is done, I'll need to add even more features on top of that, like the ability to add/move/remove fields in forms and views from the admin interface. It's all pros and cons, as usual.
Thanks mate, I'll look into that, for science.
Posts about bad practise where they call it optimization, articles that use techniques miles behind, ignorance of the moderators (they remove critique even when it is constructive).
It'd be nice if it could be extended, then we could implement our own string modifiers and such. maybe even have a cool new place to hook into validation. imagine if you could: class EmailAddress extends String {} then you could: $emailAddress = new EmailAddress('junk'); $emailAddress-&gt;isValid(); I know you can do this in other whys currently, but an email address is just a string... so the idea is kind of nifty.
That certainly avoids the potential name clashing issue. I don't think making `$html` protected adds any value at all, however. Also, this template class is a bit unconventional in that you can usually re-render templates with different contexts (variables) by passing them as an argument to the `render()` method rather than constructor (why would you ever want to render the exact same template more than once?). You could accomplish this by adding an arg to `render()`, storing the vars in a temporary private variable, calling a private render-helper function, and then clearing the vars afterwords.
Yea, it could be handy, but this is a place where inheritance isn't always the way to go. I'd prefer composition here: class EmailAddress { /** * @var string */ private $address; /** * Constructor * * @param mixed $address */ public function __construct($address) { $this-&gt;address = (string) $address; } }
You did comment as you said you would, so a reply is in order. &gt;Yeah, firstly, what the other guy said - you actually HAVE created yet another template engine/syntax, and what's more it's a pretty useless one. As he said, you're missing: "conditions, loops, filters, escaping, including other templates, inheriting other templates, and so on." I addressed the new engine / syntax before, It contains a couple of arrays and 3 functions so, no. It is a quite useful thing since it only deals with placing your dynamic stuff in a static html chunk. It does not try to introduce a whole new superset of PHP to deal with what PHP already deals with! http://www.smarty.net/docsv2/en/language.basic.syntax &lt;--THAT IS A NEW LANGUAGE TO LEARN ON TOP OF PHP! it's called a DSL and it DOES deal with loops and conditions and whatever you throw at it WHICH IS A STUPID THING TO DO!! That is what my four lines don't do, those four lines are meant to place bits of dynamic stuff into a TEMPLATE, that's what TEMPLATING engine (or solution or whatever) should do. Not become yet another piece of code to babysit on top of everything else. Separation of concerns means that you don't program your template and you don't extract HTML from your database, for example (unless you absolutely must, of course). &gt;So that's a start. Also, you commented that this ensures: &gt;&gt; your templates are HTML valid, much cleaner and shorter. &gt; But it actually does nothing to ensure your HTML is valid at all! The HTML is only valid if the HTML is valid. Has nothing to do with this templating engine, nor should it have anything to do with ANY templating engine (if a template engine took in valid HTML and spat out invalid HTML, it wouldn't be worth using and would clearly be broken anyway). A valid template can be sent to and received from an overseas designer, which could ensure that it's properly coded without knowing absolutely anything of your application design or function. This is one of the reasons why W3C compliant templates are a good thing (for example). You can't invalidate my argument because "bad HTML could come out of your program if coded incorrectly". &gt; It's not cleaner. It's less clean. This is messy and complicated - it'd be really hard to keep track of your views this way. You'd have mess all over the place - instead of going into a nice clean HTML view with very little logic and just a few variables spat onto a page with perhaps a loop or two on there just to run through recordsets, you've now got to go hunting around trying to figure out what's going on. You could refactor those measly four lines into a tiny class, then use static functions all over and it's clean. IT'S A POST ON REDDIT, come on! I didn't paste the whole shebang, just the gist of it. It's perfectly possible to have a whole layer devoted to post-process PHP output, before further processing it in-browser BUT IT'S BAD FORM. You can do it all in one step (main php code) then place the dynamic bits, HTML and all, in placeholders in your HTML. Then echo it and be done with it. As of late, you can basically create a JSON chunk and let JS deal with it which is BETTER FORM than a DSL in between your main code and the browser. In particular I think that escaping in and out of HTML is EXTREMELY bad form so any idea that proposes that is instantly rejected. &gt; It'd definitely not cleaner. It's unclean code - it's also adding complication for literally no benefit at all - infact it works against you because it can't handle the stuff the other guy mentioned above. addressed above &gt; I had a look at some of your older comments and noticed one where you boasted about your HTML widget generator class - you were boasting about how you'd written one massive class that has methods that directly spit out HTML, and you even argued that this is somehow better design than having (paraphrasing) "loads of classes with just a couple of methods on them in your system" &gt; The fact that you'd make this argument reveals that you don't actually know OOP, or at least, you didn't when you wrote that comment. Having one massive class that tries to do everything is simply not Object Oriented code. You are (or were then at least) writing procedural code that happens to be wrapped in an object - that's not object oriented code. In the example here, having many small classes with only a couple of methods on them is easily a superior design. &gt; Anyway, rant over. &gt; Edit: re-opening rant for a moment: &gt; Your moan about frameworks speaks volumes too. It's really only in the PHP world that people argue against frameworks as if they're a bad thing. Probably no coincidence that virtually every PHP dev I've ever met who told me they were anti-framework also happened to write really awful code that was virtually impossible to maintain. Perhaps you should try using a few frameworks? You would learn a lot from them. I do understand VOLUMES about how I'm oftentimes unable to hire halfway decent programmers because of what I read on this subreddit and other forums (worldwide). Is the same smug, illiterate and regurgitated shit I hear from the frontend devs. Almost nobody can assign a class to all the DIVs on on page without jQuery and almost nobody can come up with a clean and to the point way to deal with dynamic bits on a static page without a FRAMEWORK. Almost nobody understands and uses regexps, data structures, or know about algo complexity. At least when they apply. Six months in my company and most of them are cleansed of all this frameworkitis and produce clean, maintainable, social, simple code that is elegant and rock.fucking.solid If anyone that applied for a developer position on my company would argue like you just did of how you need a framework since that implies (or provides lol) good programming skills, you won't get a job. If I found that you have heaps of code in your templating solution for anything (production or internal), you'll be out of a job also. You guys lack experience. You have no idea how difficult is to actually create solutions with coworkers, to deal with dozens of very important things at the same time, clients' requirements, time constraints etc. You argue in favor of intellectually interesting things without a single shred of a clue if it would be of use in the real world. You guys also lack the notion of someone else dealing with your code. Have you ever wondered what will happen if you gave someone else you've just met all your code, no explanations given? How fast and effective could that person be to fix feature X, Y and Z before next monday? Or better yet, how fast end effective YOU will be when dealing with someone else's code where she decided that 3/4ths of the presentation layer is spread among an untold number of php files scattered all over the place, with conditionals and loops, nested includes and all kind of neat things? Or, to address your scouting through my post history as a means to create an argument, How effective could you be when you need to waddle through dozens of small inheritance trees to find why a given feature is broken, since you are tasked to fix it and it's your first day on the job and it's due before day's end? And BTW I didn't boast anything, I was trying to explain (many, many moons ago) basic OOP principles to someone else, and I (mistakenly, by this sub's standards) also posted a chunk of code to illustrate an incomplete idea. Try to argue with your own words. There should be a /r/RealWorldPHP *EDIT: Just saw your last edit, but I think I said what I wanted about it anyway, so I'm not replying to that.
&gt; You guys lack experience. You have no idea how difficult is to actually create solutions with coworkers, to deal with dozens of very important things at the same time, clients' requirements, time constraints etc. You argue in favor of intellectually interesting things without a single shred of a clue if it would be of use in the real world. &gt; &gt; You guys also lack the notion of someone else dealing with your code. Have you ever wondered what will happen if you gave someone else you've just met all your code, no explanations given? I am a senior developer working for the BBC. /thread Edit: And just for good measure, I was a Senior Dev at EA Games for nearly 4 years before that. The last commit I made went to a page that had 8 million hits in one day. I know more about the real world than you do, matey, and I know for a fact that my code is far, far better than yours. &gt;Six months in my company and most of them are cleansed of all this frameworkitis and produce clean, maintainable, social, simple code that is elegant and rock.fucking.solid Again, not using a framework for the ignorant reasons you have given is almost always a sign of an arrogant incompetent dev in my experience. Your code is NOT social, maintainable or simple at all - we've already established that by looking at your html class that violated virtually all known principles of good clean code. My code is very easy to understand by other devs, and I know this because we have a team of 30 or so devs, all of whom share code on a daily basis. We also back up everything we do with automated unit tests, which is all possible in our code base because we adhere to good SOLID design principles. How do I know that you don't unit test your code (it CERTAINLY isn't test driven code)? I know this because the practices you are espousing are bad practices that will make your code virtually impossible to test. I'll just leave you to it now, because I have no interest in arguing with an arrogant incompetent with a god complex. I'll just carry on being a lowly senior dev for the BBC. Final edit: Just noticed this stuff: &gt;Or better yet, how fast end effective YOU will be when dealing with someone else's code where she decided that 3/4ths of the presentation layer is spread among an untold number of php files scattered all over the place, with conditionals and loops, nested includes and all kind of neat things? We don't do that. The presentation layer is always very simple. We have very strict coding standards and all code is code reviewed before it gets into the master branch anyway. We don't use crap version control like svn, so we're able to work on branches for every feature, and code reviews are a great way of sharing knowledge and making sure we're all happy with what's going in. The presentation layer is ALWAYS simple. There's very little to it. We don't have nested includes anywhere. There are few conditionals, and loops are only used in the presentation layer to loop through results - that's about the only reason. So I'm fast and effective and so are my colleagues, because we don't have to deal with any of these issues you just described. &gt;Or, to address your scouting through my post history as a means to create an argument, How effective could you be when you need to waddle through dozens of small inheritance trees to find why a given feature is broken, since you are tasked to fix it and it's your first day on the job and it's due before day's end? And BTW I didn't boast anything, I was trying to explain (many, many moons ago) basic OOP principles to someone else, and I (mistakenly, by this sub's standards) also posted a chunk of code to illustrate an incomplete idea. Try to argue with your own words. We don't have "dozens of small inheritance trees". Infact, inheritance isn't really something we use often. It's used a bit, but mostly in certain specific root areas of our system. It's generally frowned upon and we don't tend to use it. But to answer the question of how effective I could be anyway - very. This is because we have a great suite of unit tests (made possible because we wrote good code in the first place and didn't do the stuff you do with general purpose classes that just do everything), which means I'd be able to find the error usually before it gets anywhere near an end user anyway, and if for some reason something managed to slip through the net, I'd know where to look because the tests would take me there - I'd then add a new test that proves the error, then fix the code. The test I've just added would prevent regressions - in other words, that bug is gone for good, and we know this because the moment it comes back, the test would fail again. So yes. My code is better than yours. Your arrogance is appalling.
&gt; "Hey man, can I borrow a hammer? There is just this one nail that's not quite flush" &gt; "You should use this automatic pneumatic nailgun instead. You better go out and buy an air compressor and..."
welcome to the pain of dealing with external code integration. You have to disallow the assignment of globally namespaced vars. you gotta have some rules here or someone is going to wreak havoc. If users are submitting classes I'd suggest a class stub generator that will provide them with a 'good' class container that you can work with. With this template (and this might be a good way of approaching this problem wholesale) you have complete control over what it does, how it does it and what's allowed. Have this template extend a base class in which you can write validation and auth methods to audit and control the class contents once submitted. Place the generated class into a file hierarchy (FIG style) with a matching namespace and you're off to the races. 
If you're creating single page apps then look at AngularJS or something. If you're using PHP or .net then you need to use some established framework. Are you going to create your routers from scratch? Why would you do something so stupid when quality tested ones exist? You want to recreate template caching/partials/etc again? Why??!! It already exists, just use the tools that work or go find something else to do.
&gt; but if you're making a simple 10-page site and don't want to integrate one Why not just use a framework? I really don't get this. You want pretty urls? Then you need a router. As soon as you get that router you're building your own custom framework (with your custom templating, wrappers for _REQUEST etc). It's nonsensical. Just pick a decent framework and stick with it.
Dude. take a chill pill, and stop bragging about things nobody can confirm, and stop establishing facts and inferring whole ways of living from snippets of code on internet forums. You don't live in 221B Baker Street, y'know, _matey_. You called the /thread, stick to it. 
I just made an edit to that previous post of yours that answers one of your final questions. And well, I dunno how you'd want me to confirm it, asides from pointing you to my linked in profile or something.
There are also proposed methods in this extension of Nikita's repo: https://github.com/rossriley/php-scalar-objects
It's easy. Even with a relational database like MySQL. Just create a "user_settings" table that has a primary key: (user_id, setting_name) and a (setting_value) column. Now write a Data Mapper that extends ArrayObject so you can do stuff like $user_settings['setting_a'] = 1; $user_settings-&gt;save(); where the save() method would iterate through each key ('setting_a' in this example) and insert/update a separate record for each key: INSERT INTO user_settings SET user_id = 1, setting_name = 'setting_a', setting_value = 1;
We can already do that using references. But ... doing something like that usually results in a very weird to use API. I prefer to stick with immutable APIs where the new result is returned, rather than the original modified. I don't know how often I have already debugged `$array = shuffle($array)` or `$array = sort($array)` \^^
I think this is a good idea and think it's the best way to add a more consistent API around primitives. However I don't think allowing people to register the type handler is the right approach. I think they should focus on the API, get it right and make it uniform and built in. Otherwise we will end up with different projects adding their own handlers for their preferred primitive type handling classes, each being "better" then the others, kind of like the way autoloading was. The difference their is that you may register multiple auto loaders, but you may only have one primitive type handler. Just my two cents.
STOP IT LOL REALLY JUST STOP :-) I don't specially want to confirm nothing from you. I really, really do not. "My code is better than yours" is an awesome line completely lifted off my last days in kindergarden. I'm tagging you with that. You do have a point about unit testing and its role in catching bad code. It's also worth noting that YOU CAN WRITE TESTS FOR ANYTHING, so it's not a very good argument about form and separation of concerns. Given enough devs you could write unit test for wordpress itself if need be. I can keep this for a couple more hours if you want to. If so let me restate the main discussion points: * OP wanted to know about SoC, I said he was doing fine, and proposed 4 lines to do what he wanted. The code snippet lacked detail, but the general idea was there. Stuff your dynamic stuff in an array, placeholder labels in another, call str_replace() with the contents of your template and return it to the browser. * This code gets called names (sniff!) and then I get pounded mercilessly for not being smarty-compatible, not framework-sanctioned and or creating a whole new language and templating engine. (four lines, three functions) * We then engage in the age-old internet tradition of cleverly insulting each other over and you self-righteously digging trough this peasant's post history to prove your point. * I call you on it and rant about the bunch of guys like you that I have to deal with, then you start bragging about your job (which is completely besides the point, and does not a better argument make). * I get called more names. So what's next? 
Wow. You really do have such a god complex. It's like the truth is the opposite of everything you say. In reality: * You posed as an expert, but gave really poor advice that would have made a not particularly good solution even worse * When called upon it, you not only refused to acknowledge the very real issues with it, but started trying to claim your own expertise over people who clearly know better than you * I had a look at some of your previous posts just to see what other code snippets you'd written - I was just curious to see * I found a horrible example of awful code that you'd written, that you'd already been called out on in the past * I posted a constructive argument against this code and even gave you some good resources to help you improve your own understanding * You responded by calling me an amateur and punching your chest about how amazing you are, and how I'm so crap I couldn't even get a job at your amazing palace of brilliance * You went further by ranting about how "inexperienced" I am * I pointed out I'm a fucking senior dev for one of the biggest websites on planet earth * You still can't even comprehend the fact that you might actually be the one who has stuff to learn Your god complex is really something. You're absolutely nowhere near as good as you think you are. If you want a challenge, I'd be happy to give you a copy of the bbc technical test I had for my interview. It'd be a laugh seeing how much of a mess you'd make of it. You'll still insist you're the best though, of course. Yeah, I think I'm done with this too ;-)
OHH Okay, gotcha, that makes sense, thanks Nikic
&gt; Look at Ruby for example, everything is an object and it's slow. Sure, Ruby is slow because everything is an object. And PHP will be slow too. I'll go to bed now.
I would go with Illuminate\Database - you can get it from composer. It is DB component of Laravel 4 framework. It provides Fluent query bilder interface which is amazing way to interact with DB. 
http://www.reddit.com/r/PHP/comments/20cupw/am_i_doing_this_right_code_separation/cg21h58 &lt;-- I never implied or posed as better than anyone. A few words and that's it. &gt; You responded by calling me an amateur and punching your chest about how amazing you are, and how I'm so crap I couldn't even get a job at your amazing palace of brilliance &gt; You went further by ranting about how "inexperienced" I am I did not say that, You're fuming and seeing things. &gt; Your god complex is really something. You're absolutely nowhere near as good as you think you are. I need you to understand something. The prevailing idea that you should program your template is shit. So is the notion of escaping in and out of HTML. Furthermore, the idea that frameworks are the best way to solve programming problems is also shit (mostly). IMHO if that makes you feel better. You said otherwise. please read what you wrote before exploding again I ranted about lots of people I've met just like you, that are completely sure that at least those two ideas in the previous paragraph are the best way to go about their programming career. I ranted at the other problems associated with that mindset. In closing. keep calm and carry on 
Calm down. Don't quote one sentence, disregard the rest of the entire post and jump to conclusions. It would be way more meaningful if you actually gave a counter argument. Faster scalar operations are worth a discussion IMHO.
Can confirm this is what you want. Built a crm with this model in mind and coupled it with the Morph-to relationships in laravel so I could apply any attribute to any other model.
I don't understand the downvotes. This approach is used in ruby `capitalize` and `capitalize!`, where the first returns a copy of the object, and the second one modifies the object itself.
Hi you might like to check out the following package (requires a subscription to download however) as an example. [Cartalyst Attributes](https://cartalyst.com/manual/attributes)
I summon the downvoters! I also think starting with an ORM is great for low load applications. They are even good for high load applications because after you find your bottlenecks then you can replace the code there with something leaner. Over time you write out your bottlenecks which gets you where you want to be and you launched your project earlier. Win, win. Seriously, look at ORMs. They are heavy and slow, but if you don't finish your project-- it doesn't matter anyway.
The extract function is bad. It non obviously creates variables in the function scope making debugging harder. 
RedbeanPHP - can't get any simpler really.
Postgres has a JSON data type. You could look into that.
I'm actually working on a native implementation which is forked from /u/nikic work on the scalar objects extension. There was a lot of input from PHP devs on the API as mentioned on this project, https://github.com/rossriley/php-scalar-objects and we have a fairly sane test suite for how it could be implemented. I've had to put it on the backburner for a few weeks but hopefully I'll get back on it soon and there'll be an RFC to get discussion on it going soon after. I'm a bit sceptical that something like this will make it into core, since the prevailing attitude amongst internals seems to be against anything that adds stricter typing into the language, but we'll at least get some discussion going. The plan is to build on the philosophy of the extension and have built in scalar object handlers. As suggested earlier in the thread, I'm leaving in the ability to extend / override the defaults so you can take over responsibility for your own handler methods.
Nevermind my sample was about the idea of passing in explicitly the variables upon which the template depends; care to share how exactly this would make debugging harder?
I know.. down vote me now, https://github.com/ellisgl/GeekLab-XPDO
awesome, thanks!
good question!
I once typed out my idea for this on reddit a long time ago. I think we need a reserved \PHP namespace and inside of that \PHP\String and \PHP\Array, etc. Functions inside of those namespaces become the methods on those respective classes (and can be called procedurally as well). Just adding more functions to those namespaces in PHP code would allow a natural way of adding more methods to the scalars. I would, however, expect this feature to be highly discouraged but still extremely useful for compatibility shims and experimenting with new APIs. 
Honestly, sometimes I feel like PHP should bite the bullet and just add full on static typing. Thid would make PHP very much like VisualBasic (also a beginner's language). VB has both static and dynamic typing and honestly it's handling of types is much saner than PHP. 
nikic, Thanks for the extension. its awesome :-)
[Idiorm + Paris](http://j4mie.github.io/idiormandparis/) are a mainstay of my stack.
why would the php section not be the right place for php related questions?
I agree, before `DateTimeImmutable` was added, one used to need many variables and cloning to work with dates.
It's not in PHP, but it's easy enough to understand: http://snippetrepo.com/snippets/reddit-ranking-algorithm
It is non obvious what variables been created. Variables could created that weren't intended to which could bugs, or exploits. You would be better to directly access the elements in the array, or just created the variables you want ie $blah = $variables['blah'];
/u/mosqua said: &gt;What LDAP server are you using (Active Directory, openLDAP, iPlanet, eDirectory, et cetera)? You may want to try swapping out ldap_add() for ldap_mod_add(). Are you a ~~wizard~~ [bot](http://www.serverphorums.com/read.php?8,265055#msg-265075)? Would explain why you didn't even notice he mentioned he uses Active Directory. @OP Quick research shows you need to connect to LDAP with SSL (LDAPS) to add people. Also, you set $ldaprecord['objectclass'][1] which research shows you should not do. Also, might try setting useraccountcontrol to 544 instead of 512. http://board.phpbuilder.com/showthread.php?10363712-Cannot-Create-Enabled-AD-User-Accounts-With-PHP-LDAP-Calls http://www.php.net/manual/en/function.ldap-add.php#78902 http://www.php.net/manual/en/function.ldap-add.php#30023 
OK here are my counter arguments: Do you really think that PHP internals will merge scalar objects if it has a large impact on performances? Do you really think that there is no way in hell that scalar objects can be implemented without impact on performances? Do you understand that scalar objects as nikic proposes them are not real objects? Performance is not the question here, it's way to early to discuss it, there is not even an implementation to comment, nikic's extension is a POC, not a patch.
nikic (the author) is one of the main core contributor to PHP, so that explains it :) His other articles are really interesting too by the way.
are you trolling?
Drupal too.
its 2.0 now :-) is that a mistake :-P
I wouldn't take popularity as the only criteria. Wordpress is pretty popular, with a massive community... but it is a pox. Sure it's fine if you want a simple site with basic features using a ready rolled theme but the ~~money~~ moment you need to start writing custom bits for it you are going to have a bad time. *edit* typo..
Go with WordPress so after your friend installs his first theme he will automatically become a web developer and you can start asking him questions. 
&gt; I have been using PHP for over 10 years still have yet to use a CMS or Framework as I prefer to write my code from scratch. I would respectfully say that this is a bad decision. A framework looks hard, but it lets you write better code, and write it faster. You can make an objectively better product if you know a good framework. By contrast if you don't use a framework, you're providing lesser value to either customers or employers. 
Interesting graph of various CMS's popularity - http://trends.builtwith.com/cms I'd choose WP first if it's a smallish client with fairly simple content requirements. It's ugly under the hood for sure, but once you understand hooks (actions &amp; filters) and the whole lifecycle, it's not too atrocious. I mean it's still atrocious, but it's straightforward. Unless you inherit somebody else's site, and they decided to not understand hooks before customizing the code. There's lots of that floating around the web. I'd choose Drupal for the more complex/ever-changing client requirements (always adding/altering content types, crazy workflow/approval rules, etc). Drupal is more well-architected than WP (not saying much), but it's also orders of magnitude more complex.
What money do you need to write php in WordPress? 
whoops.. moment.. i meant moment. fixed :)
I think wordpress is fun. Lots of businesses use it and if you find your way around you've just become useful 
Same here, I just wrote my own framework. Use LESS http://lesscss.org/ and Bootstrap http://getbootstrap.com/ for templates/CSS and if you don't want some heavy framework this is a cool router you can use instead http://zaphpa.org/ If you really want a framework Laravel is what's hot right now http://laravel.com/ The real rage right now tho is JavaScript's second coming and that's what I'm focusing in on this month after having attended O'Reilly's "Fluent" web programming conference in San Francisco last week. I have some tweets of what I saw here https://twitter.com/mobcat40
Yep!
&gt; A framework looks hard, but it lets you write better code, and write it faster. You can make an objectively better product if you know a good framework. By contrast if you don't use a framework, you're providing lesser value to either customers or employers. Umm no. Frameworks produce messier worse bloated code. It also is not written faster but must work around the framework. 3rd party frameworks are crutches for bad developers.
Hello! I'm working on pro-active defense for Web applications from 0-day attacks. If you, too, can't tolerate after the fact nature, poor accuracy, high setup costs, and routinely done by-pass of current so-called web app firewalls please do let me know -- sign up for early access: http://phpice.com My approach fundamentally redefines the problem. It embodies compiler principles to precisely nail down vulnerable code, and logical inference across the app stack to uncover multi-staged attacks. The solution requires no pre-training or tuning whatsoever.
Umm, yes?^Maybe ^you ^don't ^know ^how ^to ^use ^them^or ^^chose ^^wrong ^^one
Bad developers rely on other peoples frameworks.
Bad developers use high-level languages. Real, good developers write in Assembly, or even better, punch their programs on cards.
Sarcasm I assume?
http://propelorm.org/ - fastest full featured ORM out there.
Not true. I have yet to come across a problem I couldn't tackle with Wordpress. 
Once I started using punch cards I never turned back. You plebs disgust me.
Thanks for honest feedback! It monitors the parameters of each request and the control flow between PHP functions in order to prevent an exploit from taking control of the application. From the other hand, it tracks database accesses and checks if potentially malicious data is being reflected back to the user. I'm struggling with marketing of the product but I'm programmer in fact.
I point everyone towards Joomla. I feel that the codebase is cleaner than wordpress and I haven't ever touched Drupal. TIL I know nothing about Php CMS. I'll keep that in mind anytime someone asks me my recommendation.
&gt; I have been using PHP for over 10 years still have yet to use a CMS or Framework as I prefer to write my code from scratch. As in using it as a hobby or professionally? If it's the later, I think maybe you should have looked into using frameworks well before now. Even if they don't meet your needs, it's good to use them sometimes to understand good program structure. I've also learnt a lot from using, and then digging into the guts of a framework.
you mean problems besides wordpress itself? ;)
We use Wordpress for most of our clients sites and after building more than 100 custom sites over the years we've yet to have problems. You can do anything with it, there are thousands of plugins and if nothing else it's open-source PHP you can extend/modify as needed. To those with issues: what problems are you having or what have you been unable to accomplish?
Joomla is for clients who can't afford Drupal. 
He really isn't. He thinks he's some kind of world expert, and actually argues for bad practices in the name of "good engineering". Take a look at my painful dialogue with him above...
Nope, Joe just tagged up 2.0 shortly after I posted the link.
Hmmm, use Symfony/Zend/Laravel etc which have been thoroughly tested, used in production for high performing sites, and are open source so have had thousands of sets of eyes on the code to potentially spot security holes.... or use your own code that hasn't. Then pass that risk onto your client.
I use CodeIgniter and like it a lot, but its development has basically been abandoned. For that reason I don't think it's a good platform to suggest for people looking to get into a new framework.
People don't use frameworks as crutches, they use them because of their proven stability, good documentation, large communities and generally better written code. One person alone writing their own framework will NOT produce something as good as an open source framework. Regardless of whether or not they are a "good" or "bad" developer. On top of that, frameworks are a great way of learning how other people would solve similar problems to what you might face on your own. It gives you an opportunity to learn no matter what level your skills are at. Finally, although you do have to learn how to use a framework, you can still write code a lot faster, especially if you already know a framework, hence it being a desirable trait for employment. Your view, unless you are trolling makes you seem like you don't understand any of that, and clearly haven't put much thought into it. I'm kind of glad there are bad programmers out there like you because it's less competition for me! :)
The Dunning-Kruger effect, ladies and gentlemen. 
Just because it can doesn't mean you should though. I've seen far too many sites using Wordpress as a fully fledged CMS with a stupid amount of plugins to do so when there's better options available.
If you like writing code from scratch, you may want to consider [Symfony CMF](http://cmf.symfony.com/)
I would say Drupal. It's really big with a lot of NGOs, governments, and some big industry names. With clients like that, there's been an influx great contribution to the community. (I work mainly with drupal on a couple .gov sites)
I think he means things like Node.js for the backend and AngularJS for the frontend.
A framework allows you to write pretty, inefficient code on a bloated set of libraries, very fast if you're planning on writing the same type of app the documentation has examples for. Otherwise it might just be a bunch of code to dive into and figure out how it works. Laravel is a good example of this.. Easy and fast to develop in certain scenarios-- but pretty inefficient in nearly every scenario. I can't believe how much effort this framework goes through to convert everything to and from snake case / camel case when dealing with models vs db queries. Can be terribly inefficient because only of this. Don't get me started about the ORM inefficiencies at writing queries (aka, &lt;sarcasm&gt;why join when you can select all the rows from 2 tables and use PHP to fake out a join&lt;/sarcasm). 
I haven't used it for about 3-4 years now. My bad I'd totally recommend Yii framework. Solid. 
Wut...
I don't see the problem this trying to solve, that hasn't been solved yet. This is a problem I see a lot within the PHP community, wasting time and effort on solving non-existing problems. Because I don't want to be seen as mindlessly bashing the PHP community without decent arguments, I even took the time writing a blogpost about it: http://dandydev.net/blog/virtphp-filling-a-non-existing-gap
"... use them because of their proven stability, good documentation, large communities and generally better written code." Possibly, but many people use them because of network effect and/or because clients/companies require them. The 'good documentation' argument - rarely seen that. "Large communities" can help if people who are in the community can actually help - some communities are mostly people asking how to do basic stuff, and people giving no answers or bad responses. But some frameworks provide stuff they probably shouldn't be providing, and *not* providing things they should. I've not yet seen a popular PHP framework with decent adoption that provides some semblance of default concepts of users/groups/security that people can start using out of the box. Common response is "everyone's use cases are different". This is patently false - yes, edge cases and non-standard use cases will exist, but tens of thousands of projects make their home living inside of the wordpress ecosystem which provides a default user/group/security system to build on top of. And people make fun of wordpress (sometimes deservedly so) but they're providing a pretty valuable starting point. And then we have "large established" frameworks spending time providing non-essential libraries and still getting them wrong. Zend_Currency: http://git.zendframework.com/issues/browse/ZF-10038 
Criticism is always better with (sourced) arguments. Using a framework certainly add overhead, but the advantages are that: 1. Tested and reviewed codebase 2. If you have an issue, you can bet that someone else already had and resolved this issue 3. Documentation 4. Ease to use within a team And finally, I don't understand the argument of speed (on the perfomance side). If you want to build something fast, go with java/go/whatever.
Wha?
Nonsense, it hasn't even launched fully yet Only a month or two ago Google were saying demand was insanely high for it https://developers.google.com/appengine/docs/php/
Except no. The only ones that are having a bad time are hte ones that have to rely on frameworks because they are terrible at coding.
Yeah, I suppose really that was badly worded, I guess I really mean that not all developers do, that there are plenty of reasons for using a framework.
Fair enough. I can't disagree with any point you've made here, because some of it is based on your opinion, and some of it is of course just facts that are irrefutable. My framework of choice currently is Symfony2. I started with it after attempting to develop my own framework while learning PHP, so I was still pretty new to it all then, but I found the documentation really useful, and the community fantastic. I'd say for the documentation it really depends on what stage you're at with the framework. They can't document ever use case, so they'll cover basics and expect people to look at documentation on a component level or by browsing and reading the code itself. There are some components that are useless to some and not to others, but in a lot of these cases you can disable the components you don't need. You could even string together your own framework I guess!
I had one client who was using it to power a real-estate site. They were pulling in MLS results every night and each one had about 100 attributes. They had a search, including maps and radius search, and all that stuff. They contacted my company when they did their first full import of about 50K records and it brought the site to its knees. Because of the horrible way in which WP manages data in the database. I was able to get it to work, but my god it was ugly. Had they contacted us for the initial development instead of "My deadline is in 2 weeks and I can't afford to pay you to rewrite it", there is no way I would have picked WP as the backbone for that site. As someone else said, "Just because you can, doesn't mean you should"
Haha.. having used both extensively and preferring Drupal much more, I'm going to use this line in the future. The implication being that since they're both free, nobody should be using Joomla.
Nice userame. Just saying that I can draw a quite illogical conclusion by putting irrelevant things together in a math problem with a graph. As global warming has gone up (or the news about Global warming anyway), so has the taxes on people (using this graph) and also the taxes on corporations. So, to fix global warming, tax people less and corporations more. (not a logical conclusion, but one I could infer with useless statistics). Comparing gross taxes as a comparison of GDP, without doing it per capita or per corporation is just as silly.
Do you normally go around just making stuff up?
Just because you can tackle any problem with Wordpress doesn't mean that Wordpress is an acceptable platform for solving those problems with. The 'patterns' it uses (if they can be called that) defy reasoning. Wordpress in places actively works against a developer and it is dreadful for productivity. It is difficult to write tests for code you write and code you write or code you rely on from 3rd parties is not immediately obvious when read. This leads to an enormous overhead with respect to maintenance and development time. Yes you can do it. Sure. But you will have a bad time of it. It will take you longer than it should to write and even longer to modify at a later date. If you don't believe this then you have obviously not used anything other than Wordpress and (sadly) believe that the hoops Wordpress forces you to jump through are normal. One might conclude that you are in an abusive relationship with Wordpress.
Documentation is intended to explain what the framework can do, not how you should do everything. The examples are fine. The community is enormous and there are "better examples" to be had out there if you bother looking. As for "inefficient SQL" - an ORM pretty much has no choice but to write queries in a generic fashion. The reasons for using an ORM are not related to "fastest possible database query execution". They are around improved maintainability and ease of development because the costs associated with this in the real world are, by orders of magnitude, more than the cost of provisioning faster servers/caching responses etc. There are costs and benefits for everything. A framework trades *some* performance for a *massive* increase in developer productivity. If you need a framework for your *specific* case, go find one. There will of course be legitimate cases where a full stack framework simply isn't suitable. But in 99% of cases for most web apps, the benefits of using a framework (whether that is Laravel, Aura, Symfony, etc) will outweigh the costs.
&gt; 3rd party frameworks are crutches for bad developers. You must really enjoy banging out boilerplate every time you start working on a new project. You really truly must enjoy reinventing the wheel everytime you start something new. Your colleagues must have a fantastic time decoding whatever the latest pearl of wisdom you have placed in your beautifully written bespoke code. Your technical writers must really appreciate the level of documentation they need to write in order to maintain quality as-built docs for any future developer who might come by who has to maintain your code.... 3rd party frameworks might be a crutch for SOME developers. For any developer worthy of their title and pay cheque frameworks are a tool to greatly improve efficiency, reduce time to market, and drive a level of understanding that would not be possible otherwise.
Do you have any specific reasons why you prefer it? I haven't used any Aura products yet, but I always appreciate being given a good reason to.
I actually like the idea of "opt-in typing". People who claim things like Scalar type hints and the like suddenly makes php statically typed ignore the fact that it would be an opt-in. If you don't hint, you get the same behaviour you currently get. If you do hint, you get the behaviour that you expect. I believe facebook's HACK language is already heading in this direction. One of these days I should really have a look at that :)
I went to the session at Google I/O last year where they demoed running WordPress. Prolly not something I'd go running to. Heroku or even Media Temple would be a better place to chase pixies. 
&gt; The example I have was that I have a relatively expensive query that uses full text searches You should check Apache SolR for this kind of job.
Just one thing. Whichever CMS or framework you choose, whatever you have to implement: don't touch their source. I've had to unfuck enough Joomla and Drupal after some team decided to play with the core functionalities to develop something faster. Suddenly, the doc is not right anymore, the thing they did is not documented and you cannot easily apply patches anymore. Which is bad when you have some security patches not applied for years because of that.
&gt; Let me guess, you're a teacher, or a new grad. I've avoided hiring people just like you more than once. Please tell me how a server is like a bartender preparing drink orders.... Actually no. Nice assumptions there. I could make assumptions such as... you never went to school - or you sit in your living room doing "freelance" work and are in actual fact a self taught hack you have no idea what you are actually doing but doing that without knowing who you are or what you do would be rude, so I'll refrain. I am simply pointing out that if you look at your costs on any non-trivial project, the cost of micro-optimising code is significantly higher than the cost of buying and running faster servers. That isn't to say you shouldn't optimise your code. But you shouldn't *prematurely* optimise. And you shouldn't sweat the small stuff like code which alters casing when translating between a table name an an object name. That is literally never ever going to be your bottleneck. However, having objects that don't deal with the database written one way and ones which do written another is going to, however subtly, decrease the comprehensibility of the code you are writing. Code standards reduce barriers of communication between individuals within a team. &gt; and by the way -- your argument about camel case being "standard" (and thereby giving that even a single shred of importance) is a sure sign of a screwed up sense of priorities-- especially when using PHP, which is known for it's lack of doing things the same way every time. So because the language is known for not doing things the same way every time, and therefore consistency is not something which should be in any way valued when writing code in PHP. Wow. I'm honestly glad you wouldn't hire me... working with you would be absolute torture. Let's just slap out anything without any consistency at all. You really must enjoy making life hard for yourself and for others. 
Just like redstone machines in minecraft! /hyperbole
&gt; They contacted my company when they did their first full import of about 50K records and it brought the site to its knees. Because of the horrible way in which WP manages data in the database. Sure, let's blame Wordpress for the custom code your client's previous developer wrote.
This is some extremely fair criticism. I do a crapload of WP work, and generally find it tolerable enough to work with, but I can't disagree w/ any of your points here.
MailChimp auto-generates a feed from your archive automatically. http://us3.campaign-archive2.com/feed?u=a8135265ae1b33559181e2f60&amp;id=5b5ccc2ff7
I've been playing with it over the past week. IMO it's a pain in the ass if you're working with frameworks, probably not so bad if you're just posting little apps you threw together. A lot of functions are deemed unsafe to leave on by default so you have to hunt them down and re-enable them. Some are completely unsupported so you have to re-write them yourself somewhere to get a framework to run. Tinkered around for a little over an hour trying to work through all the issues GAE presents to Laravel. Eventually just spun up a new Rackspace cloud instance and had it running in 4 minutes.
They didn't write any custom code. They used a bunch of plugins because core WP couldn't do what they needed. Unfortunately, those plugins had incredibly inefficient database calls. I had to rewrite the storage and search using custom code. It wasn't difficult, but it was unnecessary. Had they started with a platform built to be a CMS and not a blog, they wouldn't have run into that issue.
I'm constantly pressed by concrete5.org. their community is medium sized, its based on Zend framework, their overrides are pretty easy, and their out of the box functionality is more than enough to make a great site that is easily extendible. 
I have; I wrote the App Engine plugin for WordPress. It's not too bad, but you have to keep in mind that you're running on their platform, not just another generic PHP host. There are things that come with that, such as all your files living on a read-only filesystem, that you have to deal with. The main reason the GAE plugin for WP exists is to get uploads to work with App Engine's filesystem. You have to pass everything off to their upload handler, which stores them in a Cloud Storage bucket, and you get a fake `$_FILES` back, which many apps will choke on. Ditto things like mail (although they might have made the `mail` function work natively now) and others. There's lots of power there (you get mail scaling, queues, CDNs, etc), but you need to adapt to handle that. Agreed with jellatin; for your own code, not too bad, but not so great for frameworks/existing apps.
If the core of Wordpress was an actual CMS and not a blogging platform, you wouldn't need 3rd party plugins to achieve basic tasks. 
Ah yes, it really is wordpress's fault for the company's poor planning. 
Nope. Wordpress was a shitty choice for their project. It's a shitty choice for many projects. Once a site grows to a certain size or complexity, Wordpress just can't keep up. While that's true of every platform, in terms of the major PHP-based CMS software, Wordpress is lowest rung. It's fine for what it is, but people go way out of their way to try to force it into something it's not. 
You obviously have no understanding of how to read or when to use frameworks. You are a bad dev. Frameworks produce bad developers no question about it. They are the last thing you should look at for good code. &gt;Your technical writers must really appreciate the level of documentation they need to write in order to maintain quality as-built docs for any future developer who might come by who has to maintain your code.... The amount of code that I have to fix and update due to over usage of random and shitty bloated frameworks is disgusting. Frameworks slow down development and push out bloated bad code. Good clean code is easy to update and maintain as it is clear as day. On the other hand bad devs that rely on frameworks usually have no idea what to do with good code. They usually only understand how to use said frameworks.
&gt; Frameworks produce bad developers no question about it. They are the last thing you should look at for good code. Oh really? Care to provide some examples to back up your outrageous claim? No. Didn't think so. &gt; The amount of code that I have to fix and update due to over usage of random and shitty bloated frameworks is disgusting. You specifically quote the section of my reply which deals with the effort your bespoke code pushes onto technical writers. What does that have to do with code you have to fix? also.. examples of "random and shitty" code/frameworks? &gt; Frameworks slow down development and push out bloated bad code. Ok now you are just trolling. How on earth is rewriting your own boilerplate every time you start a new project.. rewriting all the necessary glue to actually get an application up and running before you even get into writing code faster than using a framework which has the sole purpose of removing this burden? &gt; Good clean code is easy to update and maintain as it is clear as day. I agree. Good clean code has absolutely nothing to do with whether you use or don't use a framework. It has to do with the quality of your developers and adherence to best practice. It can however be said that in many ways frameworks encourage this best practice by providing a solid architectural base to build your application on top of, and encourage separation of concerns. &gt; On the other hand bad devs that rely on frameworks usually have no idea what to do with good code. Here you go conflating bad devs with people who use frameworks. You do realise the 2 are not codependent don't you? That there are plenty of bad devs who don't use frameworks and plenty of good devs who do? &gt; They usually only understand how to use said frameworks. Where is your evidence of this? Of course, you are quite clearly an amazing developer. Could you share your github profile with us so that we can see the amazing code that you have written so we may be inspired by your brilliance. 
Not necessarily true. But everyone working with them definitely will.
Yeah, no. This is wrong. This is the point where normally someone would say that's your opinion etc. But your opinion is wrong. A good framework lets you write significantly less code code, and have vastly less under maintenance. I'd be very interested to know what "framework" you've used that makes you believe that. I'd be further interested to know what level of experience and exposure you had. I find it very difficult to believe someone could use one of the current crop of modern PHP frameworks and come to the conclusion you have honestly.
If you're not directly changing bits with a magnetised needle you're basically just a script kiddy.
&gt;Oh really? Care to provide some examples to back up your outrageous claim? No. Didn't think so. Examples of what how terrible frameworks are? Or how they actually force you to write bad code? &gt;You specifically quote the section of my reply which deals with the effort your bespoke code pushes onto technical writers. What does that have to do with code you have to fix? also.. examples of "random and shitty" code/frameworks? I have yet to encountered a 3rd party framework that is not worthless, bloated shit. &gt;Ok now you are just trolling. How on earth is rewriting your own boilerplate every time you start a new project.. rewriting all the necessary glue to actually get an application up and running before you even get into writing code faster than using a framework which has the sole purpose of removing this burden? Learn to write code. The vast majority of 3rd party Frameworks do not speed up development. They hinder development by creating massive bloat and adding tons of terrible code. &gt; agree. Good clean code has absolutely nothing to do with whether you use or don't use a framework. It has to do with the quality of your developers and adherence to best practice. It can however be said that in many ways frameworks encourage this best practice by providing a solid architectural base to build your application on top of, and encourage separation of concerns. It has everything to do with using frameworks. I have never seen good clean code and heavy framework usage ever. &gt;Here you go conflating bad devs with people who use frameworks. You do realise the 2 are not codependent don't you? That there are plenty of bad devs who don't use frameworks and plenty of good devs who do? Learn to read. Bad developers rely on frameworks. I do not know a single good dev that relies on and recommends new developers get into frameworks. &gt;Here you go conflating bad devs with people who use frameworks. You do realise the 2 are not codependent don't you? That there are plenty of bad devs who don't use frameworks and plenty of good devs who do? Github profile... haha oh you are such a child. Maybe you should stop using frameworks and learn to code. Then maybe you could get a job. 
&gt; Good clean code is easy to update and maintain as it is clear as day. Yeah, I've certainly found in my experience with bespoke projects that it's always well structured and easy to follow, showing good architecture and implementation choices. Certainly better than the inconvenience of looking up the framework docs or stackoverflow.
&gt; Examples of what how terrible frameworks are? Or how they actually force you to write bad code? Both, if you don't mind. Specifically interested in how a modern PHP MVC framework forces you to "write bad code". &gt; I have yet to encountered a 3rd party framework that is not worthless, bloated shit. You really need to quantify what you are saying. I mean you are saying a whole lot of things but you really are not providing any evidence to support your position. &gt; Learn to write code. The vast majority of 3rd party Frameworks do not speed up development. They hinder development by creating massive bloat and adding tons of terrible code. I am forever learning to write code. I've been doing development in various languages for many years. Learning is something we never stop doing. However, rapid application development is a framework's raison d'être - you are suggesting the complete opposite of mine (and dare I say many other developers in this community's) first hand experience on large and complex web applications. You are suggesting that not using a framework (which implies you rewrite a whole bunch of boilerplate every time you start something new) is some how faster. Either you are trolling or you have some examples to back up your position? &gt; It has everything to do with using frameworks. I have never seen good clean code and heavy framework usage ever. Ok show me. Show me some real user-land code written against a modern php framework where the framework is to blame for a developer writing shitty code. &gt; Learn to read. Bad developers rely on frameworks. I do not know a single good dev that relies on and recommends new developers get into frameworks. No, you stated: &gt; Frameworks produce bad developers no question about it. My counter was that bad developers are bad developers. As you have thus far provided zero evidence to support your claim that bad developers are *caused* by the use of frameworks. If you have any such evidence, I'm happy to be corrected. &gt; Github profile... haha oh you are such a child. Maybe you should stop using frameworks and learn to code. Then maybe you could get a job. Hey, I'm interested in learning from your fantastic clean code. Actually, I'm asking you to put up or shut up. Doesn't have to be a Github profile, although it is pretty much the go to public code repository. Bitbucket or an SVN server or something will work just as well. 
Sorry, dude, you're just flat wrong. I honestly believe you think what you're saying is right, but it's just not. &gt; Seriously are you still in school or something trying to be hip by jumping on the framework bandwagon? No, I'm a PHP professional with about 10 years experience in the field. I've only started using frameworks recently, specifically Laravel, because the use of a framework allows me to make a better product, and make it faster. "Learn to code" is insanely ignorant. Everything you're saying seems to be coming from a place of sheer ignorance. Learning a framework has made me dramatically more productive. Has made my products dramatically better. Has made me *enjoy* the work I do more. I speak from experience. I really don't think you do. 
&gt;I speak from experience. I really don't think you do. You are either a terrible dev or full of shit. Frameworks for php at least are a waste of time and pure trash. Any dev that says they have experience has a better collection of code sitting on their drive than any framework available.
You keep saying that. Back it up. What frameworks do you have experience with? I'll tell you outright I've got a lot of experience with Laravel, a tiny amount with CakePHP, Zend Framework, and Symfony. I have found **in actual usage** that using Laravel makes my development process significantly faster, requiring far less code, and much easier to maintain and read. I contrast that with nearly a decade of actual bespoke PHP programming. Honestly, though. I'm asking you (and so is someone else in another thread) what your own experience is. What frameworks have you used, and what did you do with them? Either put your cards down so that your voice is worth listening to, or acknowledge you speak from ignorance. I've said my piece.
&gt;I'll tell you outright I've got a lot of experience with Laravel, a tiny amount with CakePHP, Zend Framework, and Symfony. I have found in actual usage that using Laravel makes my development process significantly faster, requiring far less code, and much easier to maintain and read. From reading this I can tell you are full of shit and do not have 10 years of professional experience. You are asking me to prove things that are impossible for me to prove considering I have not once encountered a framework for php that was helpful or good for that matter and that includes all the current big ones like cakephp, send and whatever others you want to say are awesome because its the current fad. You are full of shit. &gt;I contrast that with nearly a decade of actual bespoke PHP programming. Honestly, though. I'm asking you (and so is someone else in another thread) what your own experience is. What frameworks have you used, and what did you do with them? Either put your cards down so that your voice is worth listening to, or acknowledge you speak from ignorance. I've said my piece. prove that you have 10 years professional experience and a good dev. Because so far you have proven you are most likely a child who either does not know php and or are a terrible dev that uses frameworks as a crutch. Furthermore I have no need to prove anything to you. Reading your comments and your blind faith in php frameworks is enough evidence for me to understand how bad of a developer you are.
Wordpress is the CMS with the largest community and most templates. (Just a fact. [15-20% of top 10,000,000 sites are Wordpress instances](http://en.wikipedia.org/wiki/WordPress).) Joomla and Drupal (which autocorrects, comically, as "Stupak" on my Android phone) are the largest CMFs. Zend, CodeIgniter, Laravel, and Symfony are frameworks that have large communities and are well-supported.
You're... not helping yourself here. I'm asking a simple question. What frameworks have you used that would show you actually speak from experience. You've "encountered" a few, sure. But which ones do you **know**? Which ones have you **learned**? Being forced to fix something someone else did in a framework and left... isn't the same thing. &gt; From reading this I can tell you are full of shit and do not have 10 years of professional experience. Well... sorry, buckeroo, but you're just wrong. I started working in web development in 1998, for a small ISP. This was at a time before Frontpage was even in common usage, and 56K modems were standard. I then worked in a bunch of other industries, one of which I found that waiting for "the programmers" to do things I needed, like set up email scripts, was taking too long, and started learning to do it myself. I moved more heavily into "programming" instead of development, and have been doing so full-time since around 2003 or 2004. &gt; prove that you have 10 years professional experience and a good dev. You're not really listening. You need to stop for just a second and listen. If you do not know anything about frameworks, you are not actually qualified to speak on them. Does that not make sense to you? It's like making extensive claims about how bad a particular food is when you've never actually eaten it. I'm not asking you for PROOF. I'm not asking for evidence. I'm just asking you to **say what you've done**. All you need to say is "I've used Laravel" or "I've used Zend framework" and I'll happily take you at your word. But you constantly saying "All frameworks are shit" while refusing to even make mention of what frameworks you have knowledge of simply makes you look ignorant. I have wasted easily enough time on you now. Too much, in fact. I'm supposed to be learning Ember.
What I meant by that is that if you're building a load of shit without frameworks and then handing them off to some other bastard, those people are going to really suffer for it.
Endless abstractions for what is ultimately such little gain. Why is all of this so much more important than writing performant code that doesn't require extreme levels of caching to be usable? At the end of the day, this discussion is very similar to those who argue you shouldn't embed bootstrap or foundation class names in your markup. I haven't seen any situation (nor can I think of one) where you would completely replace your frontend framework without also modifying the markup. Similarly, I find it incredibly difficult to think of a situation where you would change your ORM without also modifying the code that uses it. I'm not saying you shouldn't write testable code. I'm just saying that these endless levels of abstraction aren't worth it at all if it comes at the expense of performance, and in my experience, it usually does.
Because it's just a query builder, and nothing else. You're not locked into any specific ORM, and can in fact still use it with raw PDO objects if you want.
Given that Wordpress the organization has such a large footprint and massive developer mindshare, perhaps they could do more to encourage better practices? Both through education but also via better underlying infrastructure so that people could still do things 'easily' without doing them 'stupidly'? The core people on the top of the project may be really really smart and sharp, but they don't have to deal with the hundreds of thousands of bad decisions that get made on top of it. They've "won" the war for mindshare and adoption, but I think they've got some moral obligation to continue to make it harder for people to do stupid stuff. SOME of that involves creating better overall infrastructure (say, a better way of storing and querying arbitrary metadata? or making more stuff *not* EAV-style metadata in the first place). One can't both promote wordpress as an end-all tool because of the plugin-ecosystem which allows anything to be done, but then defend wordpress because "it's just a core platform - blame the plugin authors". The plugin authors - even the good ones - are trying to work within idiomatic wordpress, using all the predefined stuff. The fact that even in 2014 it's still a bunch of global state stuff - no matter how well defined and documented (which I think is still not done well) - it's still a bunch of global state stuff. Provide a WP testing harness for plugin developers to utilize when developing. Provide support for multiple environments. staging/prod/test/etc. Eventually these ideas will make their way in to the plugin ecosystem. 
Like I said: still very experimental not suited for production. I wouldnt be surprised if Google Apps had some of the same issues. The way I see it, even the regular cloud hasnt made it yet. I tried to move my websites to cloud hosting for a while and ended up back in media temples grid system. Nevertheless you are right. When I say I am a fan, is because I think this is the way to go. But most probably the company that will actually make the cloudflare style happen hasnt even been founded yet.
Ahhh Mailchimp, always coming in handy. Thanks!
Any chance of tests and composer? :-)
yup came in here to say the same thing. The project layout could be a little better, take a look at any composer project for an example. The fact that you have namespaces and they aren't in the right folder according to PSR-0/4 is kinda meh. And no library, NO library is even looking at without unit tests. following PSR-0/4 btw, would also get rid of all that if(class_exists()) noise you have wrapping everything. edit: added an extra point.
For some reason I read google code instead of google app engine. Let the interweb crucifixion ensue!
Dogetibot?
* Composer * Namespaces * Unit Tests * Drop Curl and use something else * Make a README.md * Pick a license The usual stuff. :) Take a look at the PHP League Skeleton package as a template for how this usually works. https://github.com/thephpleague/skeleton
+/u/dogetipbot 20 doge verify
__^[wow ^so ^verify]__: ^/u/sethnis ^-&gt; ^/u/demos74dx __^Ð20.000000 ^Dogecoin(s)__&amp;nbsp;^__($0.0171445)__ ^[[help]](http://www.reddit.com/r/dogetipbot/wiki/index)
__^[wow ^so ^verify]__: ^/u/sethnis ^-&gt; ^/u/blinger44 __^Ð20.000000 ^Dogecoin(s)__&amp;nbsp;^__($0.0171445)__ ^[[help]](http://www.reddit.com/r/dogetipbot/wiki/index)
Thanks. I suspect for the type/scale of the project you're doing it's workable. IMO, part of wordpress' early success in non-blog functionality was precisely because it comes with standard user registration/login/management functionality in addition to some basic theming stuff. In some ways it's similar to the popularity of phpNuke back in the late 90s for several years. The core basic stuff that was a pain to write was already taken care of, and a few internal plumbing things were provided (however poorly done, they were there), so people could hack together other stuff on top of it. WP is sort of the second-coming of phpnuke, and due to network effects and the growth of the public internet in general, it will be a long time before its dislodged. Can't say 'never', but it will be more 'death by a thousand cuts' than it will be a massive overnight shift to something else when that time comes.
Not about being handed.. just documented.. I mean a place that describes what the methods of all the classes do should be mandatory. Parcel is an epic failure in that department. Most method don't even say how many parameters they have in the api docs
Note that the folder layout is a PSR-0 requirement. PSR-4 does not mandate a particular structure. I figure people typically stick with a PSR-0-like structure either for legacy reasons or because it makes it easier to navigate a suitably complex code base (those are my reasons).
What's the reason for not using CURL and what is the best alternative? 
I have 25 websites running on Joomla and they all work fine. I will give Drupal a try, just never did because I had nice extensions I loved working with.
Plugins *are* custom code, at least in the sense that they're not developed by the WP core team. Sounds like the queries you fixed up could've been done wrong in any number of frameworks or platforms, and that what actually solved the problem was *you* - not the underlying framework.
I was wondering the same. Also, I am using namespaces losely but not to their full effect. Composer and unit test are on the todo list. Thanks for the mention of a license, I didn't even think of that!
cheers guys, folder layout is high on the priority list. I didn't think other developers would pick up on that so hotly!
&gt;It's already there and stable. libcurl isn't stable?
libcurl is stable, OP's Curl class is not
Curl, the technology, is good (philsturgeon's comment was for OP's curl class). http://guzzle.readthedocs.org/en/latest/ -- use this instead. Created by an incredibly smart developer, fully featured, unit tested, dependency of well known PHP libs like the aws php sdk.
I don't think having code relying on Curl is an issue, but I suggest using a library that provides a nicer interface to it (or an alternative transport backend).. perhaps [Guzzle](https://github.com/guzzle/guzzle)? You've written a wrapper for Curl, but really that shouldn't be a concern of your project; others have already solved that issue many times over.
It wasn't that I fixed some queries. I had to replace the WP metadata way of storing additional attributes on a piece of content with custom storage. As I'm sure you know, the way that WP stores attributes is by putting all of them in the same meta_data table. That's fine if you want to add a field or two to a blog post. When you have more complex data, such as a real estate record with 100 attributes, and you multiply that by 50K records, you end up with 5M records in a single meta_data table with no possible way to specify any type of indexing. Trying to call a single record means it needs to hit that table 100 times. Searching on a record by any of that data becomes impossible. It's a horrible way to store that type of data. You're right that it could have been done incorrectly in any number of platforms. The problem with Wordpress is that there isn't any way to do it correctly without using either custom code or plugins. Wordpress just isn't built to do that. 
I'd heard of Guzzle before and planned to use it at the next opportunity, and I knew that the latest version of the AWS SDK uses it, however I was thinking that Guzzle was mainly just a nicer way to work with CURL so I was surprised that CURL was being discouraged.
Also, Guzzle uses curl internally.
Wow, that sounds like a horrible abuse of the Model-table + Atts-table design! :)
Guzzle provides a clean interface to PHP's underlying curl functions, and makes it ridiculously easy to do otherwise quite complicated things like streaming content from server A to server B via server C. There's nothing wrong with using curl, it's more about how you use it. Writing your own wrapper for PHP's curl functions, when the point of your application is about something else entirely (a spotify lib), is generally not going to end well. It's way too much work to be done well for any one developer (as in, fully thought through, documented, unit tested, and versioned).
psr is mostly nonsense. what does forcing allman style have to do with interoperability? psr-0,1 are prob the only reasonable things.
Try making searches return result objects instead of stashing them in the search object itself. Conceptually, you are making a static call to Spotify's API. (Their API endpoint is at a fixed, constant, global location). See if you can work this into making static calls in the code instead of juggling objects.
Maybe drop the cURL class and do direct curl_*() function calls. No need to use a class if you're not doing crazy stuff.
Looks like you can test your own code, but where are the Meta library tests? And is it possible that you could put this on Composer? =)
that makes sense. On the cUrl class I like cyrthawll's suggestion of using guzzle because I like the thought of having it as a dependency in composer.
yes and yes. As this is a personal project, I thought i could get away with not writing unit tests, I wanted to break away from the TDD i have to do in my 9-5!!! Seems like everyone has picked up on this!
There is no problem with using curl itself, it's a great PHP extension which solves a lot of otherwise rather boring tasks. The problem here is dropping a class called `Curl` into applications is not completely unlikely to cause conflicts. If the class was namespaced as `ThisGuy\Spotify\Curl` then it would not be a problem, other than duplicating efforts probably found in Guzzle, Buzz or Requests. 
but tests are *fun*! ;-)
Certainly!
Having the API stash results in the search object is odd. I'd have a searchAPI class that you instantiate with the needed information to connect to the API (keys, secrets, etc.). Then use this object to perform the api calls. The api calls would then return a track collection (which extends the ArrayList class, so you can access the tracks as an array), and this track collection would have individual track objects representing each one. An example of how to use a system like this would be: $spotify = new Spotify($user, $pass); $tracks = $spotify-&gt;getByAlbum('Album name'); // Returns a TrackCollection object echo 'Total running time of album: ' . $tracks-&gt;totalRunningTime() . '&lt;br/&gt;'; foreach ($tracks as $track) // Each $track is a Track object echo 'Track ' . $track-&gt;getName() . ' - ' . $track-&gt;getRunningTime() . '&lt;br/&gt;'; That to me feels much more fluid, and it makes it much easier to use in a dependency injection library like Pimple. Also, like others have said, Guzzle is probably the better option than your custom solution.
PSR-2 is entirely optional, but I think PSR-0/4 and PSR-3 (when relevant) are great standards to adhere to. Whatever way you look at it, the PSR standards have massively improved PHP over the last 3 years
Curious about this file: https://github.com/magicmarkers/meta/blob/dev/log/log.php Why do you have class_exists('FS\Lock'); on one line? No checks being made, just being called.
"Spotify.php contains all the examples how to use this library" Or include examples in the goshdarn readme.
It's good to have community level standards, most mainstream languages do. No one is forcing you to use it. So forcing allman style? don't really get where you're getting that. PSR-0 though, that's mostly what I'm refering to.
it's built on top of curl, so it isn't really a replacement. the thing about curl, is it's interface is disgustingly bad. It's good to have a library that adds some sanity.
using class_exists to autoload, wouldn't that be considered bad practice?
I would think so. It could be legitimately used if you're actually testing for the existence of that class, however.
What's bad about libcurl's interface? If you're talking about the **PHP interface to libcurl**, then sure, **that** is bad, but that is **not** libcurl. libcurl is a [C API](http://curl.haxx.se/libcurl/c/) which has what I think is a pretty nice API. It has nothing to do with libcurl that its PHP interface is just a direct mapping of its C interface.
Yes of course i'm talking about the PHP interface to libcurl. What else do you think I'd be referring to in context?
I'm targeting those developers / DBAs that are familiar with MySQL, but don't have time to read a bunch of books, blogs, and manuals. High Performance MySQL is a great book and I've read it and used it lot myself. That said, it's not a complete guide to MySQL (it's really focused on the DBA-side) and it's written for people trying to develop an expertise in MySQL. I want to write for people who are trying to use MySQL and use it well, but don't have the time or inclination to be a specialist.
That's a fair question. I'm a SQL Server DBA who moved over to MySQL/Linux. This is the book I wish I had when I first started, so I wanted to see if there's interest among those who are managing a mixed environment of SQL Server / MySQL or who like me made the switch to MySQL.
http://lmgtfy.com/?q=php%20How%20to%20create%20a%20simple%20email%20signup%20for%20verify%20email%20address
Tests are only fun for me in big projects when I fix a small problem and can immediately see how that could've been an hour of debugging with no test coverage. I don't like coding though. I'm more the creative type and code is a means to an end.
Good grief that's a lot of shut-up op (`@`) usage.
Golden.
Can someone explain why I'd want a database as a service? Sounds like a bullshit money grab. Why would I want to trust some service with all my data and add an extra layer of abstraction?
Database administration is a very much underestimated skill. Dedicated teams with expertise in this area can do a better job than you, but more importantly can free you to concentrate on what really matters - developing and promoting your product. If that logic appeals to you, I'd like to introduce my new startup - gastro.io: eating as a service. Proper digestion is a very much underrated skill. Dedicated teams with expertise in this area can... 
Uh.. if you were trying to make a point, I'm not sure what it is.
I'd like to take this opportunity to introduce Bridge.io. Please sign up with your e-mail address, Twitter, Facebook _and_ Google accounts, and you'll be amongst the first to get invited to buy our new product. 
reddit != google.
Downvotes but without any comment or reason. Really classy
I had a look into it. I wonder why the name for and method has an underscore ?
yeah, ok, will do.... that was me being lazy!
You know what would be super fun? Losing your entire database if this startup goes belly up.
Well OP says it's a hobby framework. Nothing wrong with reinventing the wheel on hobby projects to better understand how things work.
You can write spaghetti code still if you want. Exactly like how you did back in 4.x. There's nothing stopping you and the code will still probably work.
Can you clarify how Europeans take coding php more seriously? Got a link or anything? Quite curious.
Personally I get more from reading the traits documentation then from this article...
Depending on the amount of features you're expecting, you could easily create something similar in Drupal. However, Drupal has a pretty steep learning curve.
Not an endorsement: * http://www.commentics.org/ * http://sourceforge.net/projects/commentscript/ 
Not at my desk, but are composer and GitHub not throwing out anything useful?
I've used Drupal before. The problem is I don't want to install Drupal/Wordpress (or any other CMS you could think of) I just want a self hosted commenting system. 
When you say "self hosted", are you saying you want it to be a service provided by a 3rd party and you just embed some kind of JS/HTML in your page to use the service? Or are you saying you want to host it yourself?
The primary goal is: * to be able to host it myself; * to be able to attach the comment to any given page; If this is possible then I think that you can tweak the system to work on a static page using JavaScript.
 ~/tmp ⮀ composer search comment No composer.json found in the current directory, showing packages from packagist friendsofsymfony/comment-bundle This Bundle provides threaded comment functionality for Symfony2 applications sonata-project/comment-bundle Symfony SonataCommentBundle newscoop/comment-lists-plugin Comment lists plugin. rmzamora/comment-bundle Symfony SonataCommentBundle podlove/comment-introspection PHP library providing a toolkit to parse class and method comments. rtablada/l4-comment-all-things icybee/module-comments Allows users comments to be attached to nodes. ezsystems/comments-bundle Commenting system for eZ Publish mrclay/minify Minify is a PHP5 app that helps you follow several rules for client-side performance. It combines multiple CSS or Javascript files, removes unnecessary whitespace and comments, and serves them with gzip encoding and optimal client-side cache headers gridguyz/facebookcomment FacebookComment module for Gridguyz CMS robertboloc/rbcomment Comments for Zend Framework 2 applications nervo/yuicompressor YUI Compressor is an open source tool that supports the compression of both JavaScript and CSS files. The JavaScript compression removes comments and white-spaces as well as obfuscates local variables using the smallest possible variable name. CSS compression is done using a regular-expression-based CSS minifier. knplabs/knp-disqus-bundle silverstripe/comments This module provides commenting functionality for Pages and other DataObjects on your SilverStripe site. tractorcow/silverstripe-comments-notifications Simple email notifications for comments posted against the Comments module ~/tmp ⮀
Why is it listed as "Meta 13.05"? Is this really the 13th version? It looks like you have some good ideas, but the coding style and conventions are all unorthodox and either borderline bad-practice, or strictly bad practice. The coding style is all over the place, and the documentation is very lacking -- it basically just consists of a the most basic _getting started_ bit, but then the rest is just auto-generated code comments that really doesn't help much at all. With some polish, it might be a decent framework, but it really does need a lot of polish.
First, try changing your javascript contact for submit function. You should start getting better info back $("#contact_form").submit(function(e){ e.preventDefault(); $("#contacts_send").click(); }); It's a minor change and it should do the same thing as yours but return false is not always reliable in my experience with jquery. Second, do you use firebug? If so watch the console, see if your data is posting in that. Also you can see if there is a javascript error. Let me know what your results are and I will try to help further.
Hi and thanks for a fast reply! I changed the script, but the button still doesn't go anywhere. Maybe I missed something? I am currently running the page through xampp with Apache and mySQL on. And no I do not use firebug, do you want me to install it and check? Using chrome atm.
Great article, I find examples more useful than documentation
I think you dun wandered into the wrong thread mister.
lol Xdebug scream users will love that....
I have to agree with you there. I think one of the big misses in most articles related to Traits at the moment is that no caveats or best practices are really encouraged, it's just a re-imagining of documentation. Saying that traits are for "Horizontal" code reuse isn't enough, tell the readers what that really means. (for the record, I agree that traits are for horizontal code reuse but haven't spent enough time hypothesizing about the best implementation / use cases for them yet). As for the examples... Calling a trait "Cat" is really misleading though and doesn't make much sense. A cat is a vertical thing. It's a cat. Calling a trait "Speak" and having a corresponding "Speakable" interface is much more intuitive and horizontal. You compose a cat out of various behaviours, you don't just arbitrarily make a cat a horizontal, a cat is probably better represented as a vertical comprised of many horizontals (e.g. - a set of feline behaviours and interfaces).
You can export all your data: http://orchestrate.io/blog/2014/03/12/new-feature-data-export-for-zero-lock-in/
I fail to see a compelling argument to outsource the data in the first place. 
Try [Selective ORM](https://github.com/jamend/selective-orm), it tries as much as possible to let you get things done quickly, including inferring your table structures so you don't have to repeat it in code: $books = $db-&gt;Books -&gt;where('title LIKE ?', 'The%') -&gt;orderBy('datePublished', 'DESC'); foreach ($books as $id =&gt; $book) { echo "#{$id} =&gt; {$book-&gt;title} &lt;br /&gt;"; } $book = $books-&gt;{13}; // get book with id 13 $book-&gt;title = 'A Better Title'; $book-&gt;save(); (Shameless self-plug)
IMO trait are for those who don't get what oop really is. (no offense) An animal should be an interface, as well as cat etc. They should specify a 'getVoice' which returns a Voice Interface. That method would be implemented by Tiger and return eg CatVoice which can roar etc. What that article more cleverly avoided to mention is, that you can have conflicts with 2 trait (both defining roar) 
Did people vote no because they don't like the idea at all, or because they want proper generics instead? Hopefully the latter.
generics ... in a dynamically-typed language
It would be nice if they published reasons/opinions on their decisions. 
Good, because that is a huge issue that C++ has with its multi inheritance . ;) Most of the time, if you need multi inheritance, there is something that should be in a property rather than in the class itself... But if i think about it, there are very few cases where a trait would be useful. Java's Collection libary could use them pretty good (Not a php example, i know) 
haha You're right!
Not surprising considering how it was implemented. Basically inside each function that would use that feature it would run through the whole array to check if its in correct type. Here is an example from the mailing list: function foo(Foo[] $foos){ if(count($foos) &gt; 0){ $a = array_pop($foos); //do something foo($foos); } } Is equivalent to function foo(array $arr){ foreach($arr as $v){ if(!($v instanceof Foo)){ //trigger_error } } if(count($foos) &gt; 0){ $a = array_pop($foos); //do something foo($foos); } } 
thanks.
These reasons can often be found on the php-internals mailing list... but good luck wading through the mess to find the discussion.
good! Because naive implementation.
How does this bypass the need for database administration? You still have to create the schemas and indexes, no? This service handles replication and sharding and such? How does it handle geospatial DBs specially? It might have the 'spatial' extension pre-installed, but that's a one-time thing and I'd still have to create the appropriate column types and indexes as normal, no?
I still don't understand why the diamond problem is actually a problem. `$liger-&gt;roar();` is ambiguous, great, throw an error as you normally would and force the consumer to call it with a different syntax, like `$liger-&gt;Tiger::roar();`. Looks kind of weird, but then maybe you shouldn't be designing a stupid API -- at least it's still accessible.
In my opinion it's the logical progression from type hinting, to which your argument seems to applying equally. &gt; If I really want to assure that a parameter is of a certain class, I put that in the docs and some instanceof at the top. Type hinting promotes fail early and fail loud, which results to fewer bugs. Which is why I'm for it as a feature, though I know little about the proposed implementation.
Hard-coded MySQL in this day and age? You've got to be joking.
It's your &lt;a href&gt;. If you put single quotes around the $linknospace variable inside it, that should make it work. print "&lt;a href='$linknospace'&gt;$title&lt;/a&gt;";
&gt; It's your &lt;a href&gt;. If you put single quotes around the $linknospace variable inside it, that should make it work. I've fixed it now, it was just a stupid error down to me not accurately proof reading. Thanks though!
Sweet!
Good. They have a lot of stuff to do already, and this is far from necessary.
Not so, especially if the platform uses the `limit` clause (often used for paginating results). SQL Server does not have that.
needs more folders
&gt; Good, because that is a huge issue that C++ has with its multi inheritance Just to expand on what you're saying, this is referring specifically to [the diamond problem](http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem).
I wrote my own typehint function that can do multiple types and arrays of stuff. And I never use it.. since I always have errors throw exceptions, I write code that will definitely break given the wrong type, or just write out the type check long hand. It's a lot of boring boilerplate but it's less magical looking.
this is probably the best way. Since php is not type safe I dont think we cant have generics.
I know it's typical to just copy a C API blindly. But just because its typical doesn't mean it make it OK. And any PHP developers who still do that in this day in age deserve ridicule :p
I can't say for sure as to why but your 100% code coverage comment might be a reason since such an assertion is generally met with immense scepticism. See [here](http://martinfowler.com/bliki/TestCoverage.html) and do some Googling to understand why.
There's nothing wrong with an unorthodox coding style.
On it's own, no, but as a framework, I'd beg to differ. edit: lol keep downvoting me when you disagree, it'll change my mind!
I fail to see the separation. Were we all to rigidly conform to a uniform coding style why would we even need more than one framework? People doing things differently is how we make progress. Is Laravel less correct than Zend Framework? Is Symfony more correct than Yii? Pick the project that suits you best and roll with it. Consistency with your own coding style is important, but there is more than one way to skin a cat. Edit: What do you think the point of downvotes are if not for registering disagreement? You are as free to downvote me. The downvote is not intended to change your mind, otherwise I would not take my time to write a post expressing my opinion on the subject. I'm trying to have an adult conversation, not a childish spat. Karma is just a number.
I wasn't speaking of coding style to mean how you line-up your braces, I was talking about the over-use of the `@`, or the use of global constants for framework-specific defines, or the use of asserts over exceptions, or creating global functions with names like `e()`, `n()` and `id()`, or a framework that alters your error reporting and logging, timezone, etc. Sure, if that floats your boat, have at it...but I have yet to see a single person argue _for_ any of those practices.
Since you asked about downvoting: [reddiquette](http://www.reddit.com/wiki/reddiquette#wiki_in_regard_to_voting) &gt; Please don't [...] Downvote an otherwise acceptable post because you don't personally like it. Think before you downvote and take a moment to ensure you're downvoting someone because they are not contributing to the community dialogue or discussion.
Symfony's HttpFoundation, definitely.
I was trying to be more diplomatic instead of just being derogatory, something I've been working on but which still struggle with. I can definitely appreciate differing design decisions, it's where innovation comes from.
I was offended that you evidently thought that I wasn't contributing to the conversation; like I was trolling or something. I only posted the reddiquette because you basically admitted that you didn't understand what downvotes were intended for. So you have a different interpretation, that's cool. I really don't care about karma, do you think I'd really waste so much of my time in subs like /r/javascript and /r/php if I did? The defaults are where the karma whores are for a reason.
No, it never crossed my mind that you were trolling and neither was offence my intent. I disagree that I admitted I don't understand what downvotes are since I stick by my interpretation but whatever, this is all rather secondary to the conversation at hand and not worth either of us arguing over further. I'm glad we could come to an amicable resolution rather than continuing to fling shit at each other :p
aws-php-sdk ... but we use aws for ses and s3...
Agreed, have a nice evening!
Multiple Inheritance and Traits are two ways to approach the same problem. You have a class that needs code from two different parents. In Python, we have multiple inheritance. class Tiger(object): def roar(self): return "I'm a tiger! RAWR!" class Lion(object): def roar(self): return "I'm a lion! RAWR!" class Liger(Lion, Tiger): pass The way Python deals with the diamond inheritance problem is simple: it iterates over the method resolution order (MRO) until it encounters the first parent that has the method. In this case, Liger.roar() will return "I'm a lion! RAWR!". However, multiple inheritance is typically used for mixins. For example, I'm working on a project and I'm working with SQLAlchemy data models. SQLA models don't have a way to represent objects (I'm talking about interacting in the shell and you type `repr(myobject)` beyond the standard Python object representation), so I whipped up a mixin real quick to handle this for me: class BaseMixin(object): __base_pattern__ = '{class} ({pattern})' __repr_fields__ = ['name', 'id'] __repr_pattern__ = 'ID:{id} Name:{name}' def __get_repr_fields(self): fields = {} for field in self.__repr_fields__: value = getattr(self, field, None) fields[field] = value return fields def __repr__(self): fields = self.__get_repr_fields() base = {'class':self.__class__.__name__, 'pattern':self.__repr_pattern__} pattern = self.__base_pattern__.format(**base) return pattern.format(**fields) And then when I define my models, I simple do: class Tracklist(Base, BaseMixin): #stuff here In PHP, this is the sort of thing that a Trait would do. A trait establishes a concrete way of doing something. This is different from an interface, which establishes an ***abstract*** way of doing something. An interface simply says, "This class is Representable but must establish it's own way of doing it." A trait says, "Hey class, have a way to represent yourself." And, yes, you can use both. interface Representable { function repr(); } trait Represent { function repr() { /* Not sure how PHP handles this. */ } } class Represented implements Representable { use Represent; } Hopefully, this answered some questions for you. Edit: And to more concretely answer your original question, true multiple inheritance allows you to quickly compose complex objects with little to no code. class OrderedDefaultDict(OrderedDict, defaultdict): pass Not that I would recommend that particular piece of code (I don't think it'll work, it's just for show).
I am simply guessing as to why since I'm not the one doing the downvoting. It could be as simple as spite or reluctance to stray from better known libraries/frameworks but I'd hope not.
Superb Explanation! Here is some gold :)
Agreed! Pretty much use this in all my projects.
For a nice looking, easy to read error handler, take a look at [Whoops](https://github.com/filp/whoops).
For a DI container, I really like [Laravel's illuminate container](https://packagist.org/packages/illuminate/container), which works great on it's own as well.
And of course, for templating either [Twig](http://twig.sensiolabs.org/) or [Plates](http://platesphp.com/). Yes, I'm biased to Plates. ;)
Heheh, that's some cruft. Noted.
Honestly, I recommend going over and signing up to [Laracasts](https://laracasts.com/). Jeffrey Way has done an absolutely fantastic job with it, and if you enjoy learning via screencasts, you'll have a hard time finding anything better for PHP right now. Yes, it's Laravel focused, but I think that's okay for a front-end developer looking to make the transition to backend development—Laravel is very easy for beginners to pick up. He covers a lot of general PHP topics as well, so even if you don't use Laravel, it's very helpful. Good luck!
I'd suggest starting with a framework. My reason for this is: immediate reward. Frameworks offer quick to implement solutions to common problems. Selecting a framework is slightly more difficult. I believe most people suggest what they use most often. I'd say with the current climate there are probably 3 frameworks to choose from, Laravel, Symfony, and ZendFramework(in that specific order). So to qualify what I just stated, I am using Laravel for my current project. There are things that could be done a little better, but it has a low learning curve. I'd actually say those three frameworks are ordered in learn curve steepness. But I think the best thing that Laravel has to offer is laracast. These are very similar to rails casts - though you have to pay for them. I'm a frequent buyer and regretter of buying programming books. I can honestly say, laracast is probably some of the best money I've spent when it comes to learning concepts of programming. So that having been said, pony up the 9 dollars for Laracasts and get started. There are tutorials from beginner to advance. The advance tutorials cover general programming design patterns and then apply them to Laravel. 
Generally I'm not a huge fan of calling the $_SERVER superglobal from within a library, like this does. It makes it harder to test. Better to pass these values in as a dependency, or even use an instance of the HttpFoundation [Request](http://symfony.com/doc/current/components/http_foundation/introduction.html#request) object. Also, I think you'll find that folks want to pass in URI values as method parameters, which doesn't seem to be possible here. For example: `/user/1` would translate to something like `Controllers/Users::get(1)`. Finally, I highly recommend adding some sort of description as to why this router is a better alternative to the many others that already exist. Just showing some example code isn't enough...sell it a little if you feel it has some value!
Superb, thank you for your blazing fast reply. So far, 2 replies and both favoring Laracasts. I will certainly check that out !!
I was wondering how to go about doing something like breaking it up. Thanks for the suggestion.
Take a look at Larry Garfield's [Beyond Abstract classes](http://www.garfieldtech.com/blog/beyond-abstract) article as well. I find it a very helpful explanation of Traits.
It's got a lot of promise - maybe with some user feedback we can bring it to the next level. Nice job.
A very valid point. As of [this commit](https://github.com/windy1/lazyrouter/commit/32346befc1dc44e3a5a2cd04beb504314ddc9cd4) you can optionally specify your own request but if you choose to omit it it will still grab the request URI from $_SERVER. Thanks for the heads up!
assert() should never be used for anything other than checking consistency while debugging/staging. If you're throwing exceptions and writing error correction code for things that are supposed to be safe to assume then you are doing it wrong. Assertions can (and should) be disabled on production servers. Things like id(), e(), and ref() are language workarounds; they should have been included in PHP as built-ins. Funny, I had it aliased as "array_element()". Must've vanished. I use e() because I use it everywhere and I'm not typing array_element() a thousand times. I am sure most people make aliases of htmlspecialchars(), too. Timezones, logging, and error reporting can all be overridden. The idea was to make a sane default.
Asserts are good practice during development to check for that condition that should 'never happen' and is assumed removed in production.
Ha, thanks! ORM is still open faced at the moment.
Yeah, I only just started on making some. When I tested in the past I would just test and not commit the test files. My bad.
&gt; If you're throwing exceptions and writing error correction code for things that are supposed to be safe to assume then you are doing it wrong. So let me make sure I understand you -- exceptions and exception-handling code are "doing it wrong"? &gt; Timezones, logging, and error reporting can all be overridden. The idea was to make a sane default. What about the defaults I already have configured via php.ini? I believe configuration should be kept to config files, as much as possible, but now you're going to make me introduce some runtime PHP code to toggle all my configs back to the way I like them?
If you RTFM you would see that it's designed with people on shared hosting in mind. Yknow, people that don't have access to php.ini You've just put words in my mouth, trying to be clever. So enjoy your downvote. RTFM on assert, since you're so good at doing that.
Wow, precisely the type of attitude I look for when looking into a new framework... the type of framework to avoid. As if the code wasn't bad enough. You still didn't respond re: exceptions, I am curious to hear what you say there.
so comment
Full stack developer here... Maybe you should stick with JavaScript, a big part of the web world is turning to JavaScript on the backend because it's lightning fast (with node), finally has a way to do it (with node), finally has a rich library repo (with node's npm), you get to stay 1 language. Most of all tho you get to use prototypal inheritance that lets you code more modularly vs the classical inheritance model you'd be doing with PHP. Plus you already have JS skills so you're perfectly positioned to begin your adventure with Node without being held down in classical inheritance thinking of something like PHP. I know this is a PHP board and there's nothing wrong with PHP and the other traditional backends, but a good programmer in a field evolving this fast should keep his eyes open. Also LAMP is kinda old now, NGINX is the new hotness give it a shot. Anyway give this front/backend a try. -&gt; Backend .... Node.js - For your javascript web files with the template engine of your choosing NGINX - serve static files and reverse proxy your node.js from here if you want with Express - a Node framework that is super light fast and easy to use and Socket.io - if you wanted to do some real time stuff with web sockets (real time updating of the app, chat etc.) Postgres/MySQL/MongoDB - are all fine for DB Redis - Try this for your second DB for things that needs super heavy high traffic writes/reads, since it's a super fast simple key-&gt;value store method. Frontend .... JS - Browserify with commonjs + Grunt (automated tasks) + Qunit (unit testing) or w/e js stack you use (cool thing with browserify is now you can use the node npm library repo for your frontend aswell as writing in the commonjs module style, downside you have to compile) CSS - Use LESS for your CSS and use the Bootstrap library IDE .... WebStorm is awesome and the most popular right now to tie all this together, VisualStudio/Eclipse are so-so. I'm gonna get a bit more heavy into JS backends for the next few months, especially after what I saw at O'Reilly's Fluent conference last week. Regardless of what anyone thinks or has preferences for though, there's no denying how INSANELY fast Node.js is. If you really must do PHP, Laravel seems pretty hot right now.
That code isn't a true reflection of the performance in the real implementation though. Because yours is in PHP, whereas the the actual loop and checks were in C. Still, it is a bad solution and definitely bad when an array is being passed around to lots of method with the typehint.
Is there any particular advantage to mysqli if you know you will only be using MySQL? I've seen some vague murmurings that it's slightly faster, but nothing solid.
illuminate/support so you can get facades
Also, take a look at this tutorial, It will give you a nice read and practice on concepts about framework and PHP. http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
Hahahaha
Thanks I will definetly read on that. This is a deeper read and I will go get some results first ! This should become handy soon.
Yes, I often use the facade pattern, using Laravel makes that so much easier.
http://i.imgur.com/COKkyen.jpg
Well... no. I can turn a PSD into a fully functionnal website in a day or two thanks to these CMS hehe. It's a tool. There are good tools, somewhat good tools, ugly ass tools but at the end, it's the guy handling the tool that does the difference.
You said you were frontend... and you suck at JavaScript? You want to write apps now, things that feel like applications but run in a browser. That's only possible through huge amounts of JavaScript. Your strategy sounds good for writing websites in 2008, this is 2014 and you want to build apps. Hope you're not offended by this reply but it's just the truth before you go waste a bunch of your time. Also nothing in web development ever feels comfortably familiar, things are constantly changing and you will have to constantly learn new things. If you're not doing that and being challenged then that's a good sign you're being left behind. This field isn't for everyone, so if you don't have the time to be a real web programmer than you can always higher someone and manage a team for the project instead. Like I said there's nothing wrong with PHP, I've been writing in it since 2004, but your argument for not investigating JS is flawed. You can't even write an app even in PHP without super heavy amounts of JavaScript on the frontend.
Oh fuck, thanks. I've never gotten gold before. :)
Sure, though I've also read people in your position are better at building apps with JS if they're new to it because things like PHP are completely different in how you start growing an app (classical vs prototypal inheritance) not to mention that if you also do PHP instead of just straight JS you're getting used to and learning 2 languages that are completely different in how you code. In either case you're right you have to learn JS anyway, here are the best resources after codeacademy basics stuff: JavaScript: The Definitive Guide: Activate Your Web Pages (Definitive Guides): http://www.amazon.com/JavaScript-Definitive-Guide-Activate-Guides/dp/0596805527/ JavaScript: The Good Parts: http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ Programming JavaScript Applications: Robust Web Architecture with Node, HTML5, and Modern JS Libraries: http://www.amazon.com/Programming-JavaScript-Applications-Architecture-Libraries/dp/1491950293/ A cool talk from last year of the Fluent conference (and the author of that last book) explaining how different something like PHP and JavaScript are and why JS doesn't deserve the bad rap it used to get (He's a pretty cool guy from Adobe and I got to talk to him last week about all of these things we're talking about right now and where web development is heading, and why JS as a single language for the web can work even better): http://www.youtube.com/watch?v=lKCCZTUx0sI This was a really cool overview on JS today, and you get to see Unreal Tournament and the Unreal 4 engine run in a web browser: http://www.youtube.com/watch?v=aZqhRICne_M
You didn't ask a question. Learn to troll properly.
Aight, you got me. I'm getting the first book right away. I'll give it a shot. You were honest and I appreciate it. I saw Quake not long ago! http://media.tojicode.com/q3bsp/ It's very fluid on my cellphone lol I was impressed! 
and now I'm banned from /r/php
Btw do codeacademy to brush up on JS before you jump into the book, might make it easier.
http://www.merriam-webster.com/dictionary/typically
I'm already at 75% on codecademy! I blazed thru PHP in a couple of hours to 100%... That got me motivated hehe
They are sending assassins! 
[mockery/mockery](https://packagist.org/packages/mockery/mockery) pleaaseee write tests
If you want to stick and creating apps in php. I suggest you learn RAW php. Also learn coding styles and other practice like testing. Always create dummy projects like login features with validation. 
Very curious here, what are the advantages of prototypal inheritance over classical? Why do you prefer it? 
There isn't a schema per se since it's document storage. I think as a developer, you can make a document "schema" without a DBA. No need for indexes, it automatically creates a full-text index of all documents that you can query with Lucene queries. Geospatial is coming soon, but as with the rest of the features, it will likely be turn key.
Good article. Thank You. The only thing I found that may be a bit off is this heading.. &gt;Set up Vagrant to run Selenium. Not sure that is exactly right. Does installing Selenium inside a virtual machine has anything to do with vagrant, just because that that virtual machine was created using vagrant?
i appreciate that! Yeah, you're right. I updated the heading. Thanks!
I did try to explain how the example given by the article could be solved in an oo way. ;) Of you consider traits you class represents probably more than it should. 
Once again, the "All efforts of everyone in the entire PHP internals 'team' all go entirely on every single RFC, so multiple interests cannot be explored at the same time" fallacy. This is silly. Happens every time so nobody is surprised, but it's comical every time. :)
I don't know about Laravel, so take my opinion with that caveat. My personal opinion is that Zend Framework is really good, followed by Yii framework. But if want to do something small, maybe ZF is overkill. Yii is good though - fast and has an active community too. /my opinion PS: the choice of frameworks is a "holy wars" topic (like vi v/s emacs or Windows v/s Linux etc) - you have factions and fanatics and loyals and then you have atheists ;-) So take my advice with a grain of salt. EDIT: if you want to continue being a web developer, the "Head First" series has a lot of really superb books. If you purchase the Kindle editions or borrow from a friend or local library or rental bookstore you could save some bucks. Or you could be a proud owner, your choice. But HF books do a damn good job of getting across what they want to tell. http://www.headfirstlabs.com/books/hfsd/ http://shop.oreilly.com/category/series/head-first.do amazon.com gives lower prices for print (and very low prices for Kindle editions)
aah I forgot. So you may use where itself which on the next where it is appending ` AND `.
The vote was never entirely expected to pass. There were a lot of conversations happening about Generics, as the Hack/HHVM situation has some generics running. Fair enough, they sound fun, other languages have them, so yay for a potential nice thing. With the "arrayof or generics" discussion in full swing for a while, I ran a survey. I asked internals folks: 1. Do you want arrayof but no generics. 2. Do you want arrayof and generics. 3. Do you want no arrayof but generics. Lots of people chose "both" (2). Java (shut the shit up about PHP becoming Java) also has both, so going for both did not seem unlikely or unreasonable. PHP would be perfectly capable of having this RFC merged now, in time for PHP 5.6 (it had permission from release managers to do that) and essentially cover some of the use-cases as "weak-generics" with the existing syntax. Then those who really want generics could follow that up later on with another RFC for PHP 5.7 or PHP 6.0 to take care of it properly. So, it seemed the logical thing to do was throw it in for a vote and see what happened. The response to that vote was: Get fucked. Fair enough. Internals has spoken. DEMOCRACY! That wasn't exactly an unexpected outcome, it's just shitty and unnecessary. The RFC now looks like it will switch to using Hack/HHVM generics-like syntax and probably end up in PHP 5.7. Worth a try though eh?
how in any way at all is this more powerful than crontab?
What advantages would you say prototypical inheritance has over classical inheritance? I've tried both and find classical easier to understand and work with, without any disadvantages.
Sorry you fell that way.
No way... you can use cron and curl to achieve the same (if you want to block apache...)
Beberlei/assert
EasyCron extend the cron expression by adding random time support (http://www.easycron.com/faq/What-cron-expression-does-easycron-support). It also supports HTTP POST and Cookie, failure logging, etc. I know crontab can also do these if there is skillful server admin doing it or some coding involved. But EasyCron is absolutely an easier way to achieve these. 
Eh, just another possible thing to go wrong if connection can't be made between service and server. Also running long-time CLI scripts is a real pain via a web request and unnecessary messing around. 
Just that one link, or do you want to rewrite everything from `198.1.77.220/~sitelink/` to `198.1.77.220/~sitelink/index.php/home/`?
Carbon, Guzzle, Debugbar
You should be able to use relative paths for your .htaccess like this: RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^s(.+)$ index.php/home/s$1 [NC,L] You may need to put a rewrite base in also, depending on where you put the .htaccess file: RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteBase /~sitelink RewriteRule ^s(.+)$ index.php/home/s$1 [NC,L] 
Unfortunately that still gives me a 404 error. I tested the actual link, which resolves fine but the shortened link still gives a 404. : / &gt; RewriteCond %{REQUEST_FILENAME} !-f &gt; RewriteCond %{REQUEST_FILENAME} !-d &gt; RewriteBase /~sitelink &gt; RewriteRule ^s(.+)$ index.php/home/s$1 [NC,L] 
* [validation and sanitization](https://packagist.org/packages/aura/filter) * Looking to build a form need [input](https://packagist.org/packages/aura/input) and [view helper](https://packagist.org/packages/aura/view) * [router](https://packagist.org/packages/aura/router) * [web](https://packagist.org/packages/aura/web) These are a base minimum one. * [sql](https://packagist.org/packages/aura/sql)
Its in code igniter, I wrote an S controller file and it resolved fine... so I'm not sure why its not respecting the home part of the url...
&gt; &lt;IfModule mod_rewrite.c&gt; This line checks that mod_rewrite is enabled, if it's not it'll ignore all rules. This is why I was asking if any rewrite rules at all worked. I am assuming you're on some kind of cpanel shared hosting, the .htaccess file should be placed in `public_html` along with index.php. This is where apache is looking for it. 
It's a facade of a facade, the plot thickens.. 
Got ya, if it's a dedicated box, why are you using home directories may I ask? e.g `~sitelink` You could try the rewrite with redirect until you get it working, then drop the R condition from the rule RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteBase /~sitelink/ RewriteRule ^s(.*)$ index.php/home/s$1 [NC,L,R] # &lt;--- Remove R when done This will enable you to get it going to the right place, and if it redirects to the right place, but then another redirection takes place you should be able to see it in something like Chrome Dev tools. The above rule worked fine on a test server I had, but I just tested it with `index.php` and not codeignitor with controllers (which may be causing a second redirect).
Laravel facades != Facade pattern. Laravel never speaks of the Facade pattern but of the definition of facades in english.
Sorry. But this is another case of this: http://www.reddit.com/r/linux/comments/204ycc/scout_realtime_30_years_ago_top_was_born_scout/ I just can't see why everyone want to replace the CLI apps we all know and love, with web interfaces, that does the same but has more chance of bugging out on you. So fetching a url at a interval.. you could do that with the good old cron (in this example, every 1 minutes): */1 * * * * curl "http://example.com" I dont want to: - install apache/nginx on my servers, just to use cron - Start the apache service, just to use cron - go out of my terminal and open a browser, just to use cron. I want to: - Use the terminal i already have open, to edit crontab using the command "crontab -e" I just don't see the upside in using this.. "crontab -e" is so easy, it works, we all are used to using it and we love it. Down vote me if you want.. Edit: formating
I know, I'm just being a dick. :)
&gt; Fair enough. Internals has spoken. &gt; &gt; DEMOCRACY! is there any way to kick people out from the internals who doesnt code php anymore?? and it would be better if people in the internals team know languages other than 'C'. Do we have a representative from each popular frameworks (laravel,cake,yii,....) in php internals. It would be better as those people care more about php than the ones who are right there in the internals team. and, is there any way to drop the '$' from variables or make it (not mandatory) ? 
Hahahahaha. No thanks I don't want a damn HTTP request handling my important cron jobs. And no not a skillful admin, just someone who isn't an idiot. Also what if I want to restart a service for whatever reason? I have to do that in some scripting language that I let access my command line that I am having run from a HTTP request? ... yeah no.
[raveren/kint](https://github.com/raveren/kint) Best var_dump() replacement tool converting unix timestamps to human readable dates, making multidimentional arrays into collapsible tables, and showing a list of members and methods of an object along with the docblock comments before each member/method.
a crontab job to call curl to make a http request to run your cron job ;)
You've set the API base url to http://ws.spotify.com/ which is incorrect. It's actually a HTTPS URL - why are you disabling SSL/TLS protection by default? You have set CURLOPT_SSL_VERIFYHOST to 1 for SSL (when it's enabled) which is a security vulnerability. This only checks that a common name exists for a cert. You need to set it to 2 to actually verify the host name matches what's in the certificate. The obvious risk is that an attacker (a Man-In-The-Middle) could use a valid cert for a completely different host/domain and you'd never notice it.
good point, I will correct this at the same time as I replace the curl class with guzzle. :-)
Thanks for posting this. Loads of interesting info in there.
&gt; The response to that vote was: Get fucked. Not sure if you have to look it that way...may be 'Not interested'.
Interesting, I can see some use by inexperienced users of software which run cron tasks via http. That said, I've always felt that building applications to require triggering important tasks via http was horrible design. Further, if such a task is important I would never delegate it to a third-party service. These urls shouldn't be exposed externally anyway. Cool idea, but very fringe/niche use case. 
&gt;But to use an example where you walk through twice then complain about walking through twice... well that is just simply dumb Don't see anything wrong with the example.
There is a [feature comparison matrix at php.net](https://php.net/manual/en/mysqlinfo.api.choosing.php). In general, maybe the biggest issue with ext/mysqli is that it doesn't support named parameters (whereas PDO_MySQL does). However, no matter which one you choose, you have to write quite a bit boilerplate code to get the job done. That is why "tools" like Aura.SQL (which uses PDO) makes your job easier. You still write raw SQL, but working with it becomes easier.
Yup, where = andWhere
Well you do have fabpot in the internals, and I think symfony2 is kind of popular. Laravel is based on symfony so it can just piggyback ride fabpot decisions anyway. Frameworks live and die but the language moves on, you'd want dedicated people to work on internals, not someone who's developing a frsamework and just votes for stuff in C he doesn't understand
[phpunit/phpunit](https://packagist.org/packages/phpunit/phpunit) is probably the only package I use in every project. Everything else depends on whether the project is a library, or a web application built on a framework or a microframework.
Used both, they are both not perfect but I would prefer Flysystem
Yeah that's really the only reason mysqli would win (because it uses the mysqlnd native driver to the database). but that speed comes at a cost. PDO does have many features that the mysqli driver does not have, such as prepared statements with named parameters. I also think PDO does a much better job of security. Not to mention... for now you think MySQL is going to be the only db you'll use. but what happens a little down the road when you decide that maybe postgresql is better? if you were using PDO you'd just change the connection string. if you're using mysqli you'd have a lot of work on your hands. I really like prepared statements personally (and you should too).
Web interface doesn't do anything wrong. You know almost 90% what you do on the internet are via web interfaces (browing, shopping, watching video, etc.). The webcron service is not for everyone, but it's a quick and easy-to-use solution for unskillful users or general scheduled tasks (sending emails, sharing posts to social platforms, website daily maintenance). No software would be useful in all situtions/scenarios. And don't forget, there are many hosting plans have limited Linux Cron feature. Some only allow running cron job only every 5 minutes, or 10 minutes. So don't criticize things assuming everyone's having same knowledge and resource as you. 
What makes this a good example? 1. He describes the intended functionality as though it is a problem 2. The example contains a count, which is probably not necessary 3. This is somehow bad Checking the contents of an array at pass time involves checking the content of the array at pass time. If you're doing this with massive collections and are concerned about speed then you can absolutely change the API and type hint against a collection, but most of the time this speed difference is irrelevant.
So many tasks are performed via REST APIs (HTTP Requests) around the world everyday. Most of systems (WordPress, Drupal, Joomla, etc.) used by millions of people have an HTTP accessible script for handling scheduled tasks. Are those developers all damn silly?
This is not great advice. There is no such thing as an optional dependency. If it is optional, it's not a dependency -- it may be a [notification or adjustment](https://practicingruby.com/articles/relationships-between-objects) however. In the example, the logging is a notification. The class in question does not care that the logger works or doesn't work, but your application might. Additionally, the logger has no impact on the object's behavior. Initializing logger to a safe default and changing it later if necessary would be a better strategy. In this case, using a [null object](http://en.wikipedia.org/wiki/Null_Object_pattern) would be a nice way to do things. `Psr\Log` even includes a [`NullLogger`](https://github.com/php-fig/log/blob/master/Psr/Log/NullLogger.php). The article mentions this, but still makes the logger required? Why? Do we really need to fetch a `NullLogger` from a service container? Probably not. use Psr\Log\LoggerInterface; use Psr\Log\NullLogger; use Acme\Example\SomeInterface; class SomeClass { use \Psr\Log\LoggerAwareTrait; private $someInterface; public function __construct(SomeInterface $dep, LoggerInterface $logger = null) { $this-&gt;someInterface = $dep; // real dependency! $this-&gt;setLogger($logger ?: new NullLogger()); } }
Thanks for your comment. I agree that webcron is not suitable in all situations. But there are many cases you can use it: 1. In some hosting plans, cron job is prohibited or limited for resource effectiveness concern. 2. Too many cron jobs causes unstability on web server. Decoupling cron job from the web server becomes a must. 3. On cloud infrastructure, webmaster needs to move cron job to a persistence layer (independent server outside of web server). 4. Users without strong linux or cron knowledge need easy-to-master way to manage cron jobs, track cron job's executions, etc.. 5. Users may need additional features like random cron job, cookie and post method support, run time predicting etc.. 6. When managing huge amount of cron jobs, bulk handling capacity could save much time. 7. In some cases, your script needs friendly programming interface to scheduling cron job on the run. 
Lazy programmer writes code in comment without testing it... Something like this should make sure the "array" only accepted the class you want. abstract class Collection extends ArrayObject { protected $class = ""; public function __construct(Array $array = array()) { foreach($array as $key =&gt; $value) { $this-&gt;append($value); } } public function append($value) { $class = $this-&gt;class; if(is_a($value,$class)) { return parent::append($value); } else { throw new Exception("Well this collection does not accept that type"); } } public function offsetSet($index, $value) { $class = $this-&gt;class; if(is_a($value,$class)) { parent::offsetSet($index,$value); } else { throw new Exception("Well this collection does not accept that type"); } } }
This benchmark should help answer questions regarding performance: http://orchestrate.io/blog/2013/11/13/13benchmarking-orchestrateio/ tl;dr - median latency ~5ms, 95th percentile ~36ms for multiple workloads. Orchestrate is a service that is relatively new - it was launched for commercial availability this past February (2014). This year, our goal is to launch a datacenter in the EU and later to provide replication between our current datacenter in AWS-East. This should means, you're right - the best case scenario is that you'll have a globally replicated data layer for your web front ends. The last company that we launched, Basho (creators of Riak), we've seen the money, skill, and time it takes to build a globally replicated distributed data systems. Orchestrate's goal is to shrink the time and budget to global data infrastructure to the only time it takes to sign up . There are additional goals, but low latency and global distribution are definitely amongst our top priorities. Feel free to ping me with questions - I'm the COO and co-founder of Orchestrate.
In our last company that we helped launch and build, Basho (creators of Riak), we had years of first hand experience of helping companies build globally replicated, distributed data systems. After 5 years, it became obvious the pain that companies repeatedly went through. Often Riak was the primary data store for these companies, but frequently they also needed a one or more types of databases to achieve the queries at the latencies the business demanded. This resulted in really complex orchestration of databases, for example, someone may do a graph-stype query in Neo4j or a full-text search in Solr, but grab the actual object from Riak. The cost that it took for companies and engineering organizations was only exceeded by the engineering and operational complexity needed to index in one database and store data in another at low latencies. Orchestrate's goal is remove that complexity and allow developers to focus on being creative. We handle all of the database operations and provide an API that should allow you as the developer to build apps without thinking about what should be a solved problem. FWIW, I'm the co-founder and COO of Orchestrate. Feel free to shoot any questions or comments my way.
Hey thanks. Redbean is really nice!
Readbean seems to be really great. Thanks.
Uptime is a very serious concern for us, as such, we've architected a system that has no-single point of failure. We're accustomed to building services like this - the founding team and a number of the members of Orchestrate were influential in the building Basho - the creators of Riak. Additionally, our operations team consist of people who were responsible for uptime of services like GMail and later Twitter. Additionally, we also are hyper-aware of the security tradeoffs. As such, as we continue to establish our services, we will receive independent security audits. For enterprise customers, we are absolutely willing to work with their IT security teams to ensure that the security required is the security achieved. Disclosure: I'm the co-founder and COO of Orchestrate, feel free to shoot me any questions.
What are your current security practices? Do you hash/encrypt your stored data or is that our responsibility prior to sending it to you? If you do, which hashing/encryption algorithms do you use? Do you mean to say you have not currently received any independent security audits? If so, that is a huge problem and I would not at all be comfortable storing any data with you. In terms of security 'taking your word for it' is simply not acceptable and anything less than full disclosure of your security practices should be met with extreme scepticism. Security is important to everyone, not just enterprise customers. You are asking developers to handle their most valuable resource and you have given very little in return in terms of assurances which I think is why your company has met with such doubt here.
It's true that a lot of small projects, non-commercial, pet projects probably don't need Orchestrate. Most engineers can probably set up some SQL master and slave and make sure backups are happening in a timely fashioned. Their throughput may never exceed the write throughput of the master. However, by the time you spend money on two servers or even RDS, you're spending more money than you would with Orchestrate - free. OTOH, we're already working with enterprise clients who do not want the complexity of creating a globally distributed, polyglot database system. In our last company that we helped launch and build (Basho, creators of Riak), we had first hand experience selling and building these systems. The engineering effort and cost to run multiple types of databases, at scale, with read/write across multiple datacenters, is to say, not easy or cheap. Our goal is have a frictionless alternative to achieve that goal and reduce it to the time and cost it takes to sign up for our service. I'm 100% positive that our service isn't for everyone and every project, but we are hoping to help where we can. I'm the co-founder and COO of Orchestrate and I'm happy to talk about it at any time.
The compelling argument is in reducing operational complexity and cost. Today, for developers who need full-text search and a database that scales, Orchestrate *could be* an option. The service is still relatively new and we have a lot more work to do. This year we'll likely be launching a European datacenter and will follow that with a replication service that allows you to not only read, but also write objects at either datacenter. If you're a developer, where global distribution and low latency are a concern, then Orchestrate *might* be for you. Our service certainly isn't for everyone, but we are already working with a wide range of engineers - from beginners to extremely seasoned. They've found value in Orchestrate and that's what keeps us going. I'm the co-founder and COO of Orchestrate, so if you have constructive feedback, comments, or questions - I'm happy to field them. Thanks!
&gt; What are your current security practices? Probably what you expect - SSL, VPNs/firewalls, limited access, etc. We don't disclose it in detail publically, since it invites attacks. There is always more to do and as we get a little further along, we'll work on publishing as much details as we can to help increase user and customer confidence. &gt; Do you hash/encrypt your stored data or is that our responsibility prior to sending it to you? If you do, which hashing/encryption algorithms do you use? Unfortunately, we can't and I really wish we could, but because we are indexing the object that you're writing, the indexer needs to be able to parse the object. I often say *engineering is the art of making tradeoffs for optimizations*. In this particular case, we're optimized for simplicity. With that said, the disks all have encryption, so data at rest is protected. &gt; Do you mean to say you have not currently received any independent security audits? If so, that is a huge problem and I would not at all be comfortable storing any data with you. We had a security audit from Evident.io. &gt; In terms of security 'taking your word for it' is simply not acceptable and anything less than full disclosure of your security practices should be met with extreme scepticism. Security is important to everyone, not just enterprise customers. You are asking developers to handle their most valuable resource and you have given very little in return in terms of assurances which I think is why your company has met with such doubt here. Completely understand this position. I think we can all agree that trust is something that is earned with time and commitment. We're going to do our best to build that over the next few years. Hopefully when we look back in the future, we will have built the reputation we need to earn the trust of developers like yourself. Thanks for your feedback. 
But this comes at the cost of risking your most valuable resource to a third party. I assume you're not a publically traded company so we have no way of knowing the financial state of your company. I know, nobody wants to consider that but it's important. Take the case of Nirvanix: they closed down with half a month's notice for developers to shift their data. I know that's a risk you take whenever you export service responsibilities to a third party, but usually the trade-off is less risky or worthwhile. I'm also unconvinced by your arguments thus far. I've had a look at your prices and you seem quite expensive - your cheapest package is $39/mo, more expensive than some hosting services I use for small projects so that I assume would put you out of the price range of small indie developers since their needs aren't they great and they can take care of it themselves. $749/mo is your most expensive enterprise package and at that price you only get 10 hours of development support? It's only here you get extended warranty and indemnification? The wording is awkward so I can't tell if you mean you only get indemnification at $749/mo or if it's extended indemnification. Essentially saying "you're fucked if we fuck up" unless we pay for the most expensive package is not reassuring. Loss of data is not something most companies can easily recover from, especially if that data is not just lost but stolen. Litigation could easily follow depending on the data that was lost/stolen.
I am sorry pal, but you don't make a whole lot of sense. &gt; He describes the intended functionality as though it is a problem. What is the intended functionality? Is it loop through the array and make sure every element is of a certain type? No. The intended functionality is 'to make sure an array contain only a certain type'. From the introduction of your RFC, &gt; This RFC proposes a syntax to add to improve type-hinting, allowing an array of that hinted type to be passed as an argument, thus improving readability of code, improving expectations of passed items, reducing boilerplate code required to check the contents of an array and offering minor performance improvements. Looping through the passed array and checking each element is only an implementation you proposed for meeting that end. Right? So the example was correct in the sense that it was describing, what he believed to be the problem with that implementation. I am not sure why the 2 nd point even matter, as the count was not part of the implementation of the 'arrayof' section, but as a part of the actual function itself. The third point is that he does not like this implementation. 
Vendor lock-in is a hard thing to pin down. There is always a migration cost and whether or not the customer and afford the migration is really what dictates vendor lockin. So yeah, you can get your data out of Orchestrate really easily, but of course you have to do the ETL into your new database. This can be a real PITA and expensive as well - especially if your app needs to remain live in production. Lockin is one of the first objections we needed to tackle though - imagine if we didn't even have a way to export all of your data. Additionally, you can cancel the service at any time. In our experience selling enterprise software (specifically databases), there is usually a financial cost to exit a license contract. With Orchestrate, we remove that barrier as well. It's not perfect, but it's better than most enterprise database licenses. If you have any questions, feel free to let me know - I'm the COO and co-founder of Orchestrate. 
Yay you ported the worst part of Symfony to Silex ;) Ok you said don't bite so I'll cut you some slack at least it seems well written :p
I agree, I was just pointing out that has nothing to do with libcurl. 
I completely and totally agree it is a risk, I won't dare try to convince you otherwise. Ideally, as time and milestones pass, this risk will decrease and the value of the service will increase. The risk is also variable from project and user. Hopefully in time, we'll reduce this risk to a level that is palatable for the mainstream. Also, to be fair, my "compelling arguments" wasn't to convince you per se. My point was that there is a compelling argument for some, not all, users. I highly doubt that I'm going to be able to convince you over a Reddit thread. One thing we can both agree on for sure is that you have little reason to trust me. But as I mentioned above, hopefully in time that will change. Thanks for the feedback on the pricing page. I'll try to figure out how to make that more clear. Our EULA does provide indemnification and warranty to all users, but the enterprise license is meant be bespoke to the enterprise's specific needs.
Right. Creating a class, checking types when items are added then type hinting against the collection class is all well and good but not the same as the RFC. This RFC was specifically aiming to offer argument pass-time checking. You are talking about something else. :)
I feel like you don't make a lot of sense. &gt; What is the intended functionality? Is it loop through the array and make sure every element is of a certain type? No. Actually yes. It was. This RFC was specifically aiming to offer argument pass-time checking. That was the plan, now some people are acting a) shocked and b) like that is never going to be useful for anything. This confuses me.
You just gave the Ð20 to /u/demos74dx instead of /u/scandinavian- :p
This is the best thing Laravel 4 had over Laravel 3 in my opinion. I'm glad it comes bundled with the framework.
Generally speaking you shouldn't rely only on an auto-increment column to retrieve the latest entry. It's safer to add a created TIMESTAMP or similar column as you can be bitten by autoincrement columns. However, generally speaking you'll need to run some SQL like this: SELECT * FROM tablename ORDER BY autoincrementcolumnname DESC LIMIT 1 
Although I consider myself a Symfony fanboy, I've wondered how they've managed to make DI so complicated.
Must admit I do agree with the both you (as weird as that sounds, considering I built this). The reason I built this was to in keep with the Symfony feel, allowing a developer to build an application which can be ported a little easier from Silex to Symfony2. Was more of an in-house thing which I decided to make public.
Thank you :) How can I print the second latest etc, etc. In a separate variable?
sjdaws was able to help me out :) Turns out it worked. Thanks!
&gt;I feel like you don't make a lot of sense. I feel like you haven't even read my post, because &gt;Actually yes. It was. I was saying that 'looping through the array' was only an implementation detail, which that example was trying to show. 
Sorry I should clarify. I have a form on my website that allows desired users to send 'post' information, a title and description. This information is stored within my database. I would like to receive this information and print it out on my homepage in chronological order (latest first) within a table that I will style and customize :).
Yes, but I'd like to be able to have the values under separate variables in order to style the site to my preference.
Whatever you're doing I'm certain you should be using 1 query that fetches everything from the database and then loop through that data. Unless you're doing something pretty unique with the data, but I'm not sure what?
do something like this SELECT * FROM tablename ORDER BY incrementalfield DESC that will get all records from the table with latest on top. on the php side of things - do something like this: $q = "QUERY HERE"; $result = mysql_query($q); while($row = mysql_fetch_array($result)){ $var1 = $row['field1']; $var2 = $row['field2']; } now you can apply whatever formatting you want to each part when you print it out to the screen. This is old mysql code so you may need to adapt to your own sql language (pgsql etc). Also suggest using PDO instead of directly executing like my example.
https://github.com/titon/utility Contains a ton of utility functionality.
http://www.php.net/manual/en/function.syslog.php#37201 
&gt; Is there a way to change the syslog facility that PHP uses for logging errors? Yes, but you'll need to set up config files for your syslog provider. If you use [rsyslog](http://www.rsyslog.com/) for instance... if $programname == 'php' then /var/log/php_error.log Or to only send it to a single log file... if $programname == 'php' then /var/log/php_error.log &amp; ~ Either example would go in a file in `/etc/rsyslog.d/` prefixed with a number (which determines it order in the config file hierarchy. Example: `/etc/rsyslog.d/10-php.conf`. If you use [monolog](https://github.com/Seldaek/monolog), you can set up a [`SyslogHandler`](https://github.com/Seldaek/monolog/blob/master/src/Monolog/Handler/SyslogHandler.php) with a custom program name (the `$ident` argument in the `SyslogHandler` constructor) and send that to a custom log file as well: if $programname == 'YOUR_APP_NAME' then /var/log/php_error.log &amp; ~ 
MySQLi means [MySQL \(i\)mproved](http://en.wikipedia.org/wiki/MySQLi). You should use MySQLi ... the MySQL adapter should have been deprecated ages ago. 
&gt; But to use an example where you walk through twice then complain about walking through twice... well that is just simply dumb. 
Make them come up with different methods for path detection. They would need to make a shape class, such as rectangles or circles that have a function to return if a point is overlapping them. Then create an interface for path detection with functions for adding multiple shapes to a field, adding a start point, adding an end point, and adding a function to run whichever path detection algorithm has been created. It would make them use interfaces inside of interfaces. Speaking of which, I think I'm going to do this because it sounds fun. First will be a*, then I'll have to learn some new path detection algorithms.
Right, but obviously people are still even today using MySQL hence the reason I posted the article... Just because we're smart enough to not smoke cigarettes doesn't mean everyone else is, and we shouldn't ignore them :/ (to make a comparison). Sorry if you smoke. EDIT: I do agree it should have been deprecated.
Heheh - funny.
http://i.imgur.com/J8K3L.jpg
A class depends on any code that is external to it. If that class/interface/trait/whatever was not found then it would fail to work. Just adding = null after it does not stop that being the case. Saying there's no such thing as an optional dependency is just equivocating meanings of dependency. The class indeed does not care whether the logger works or not, the example here cares more not less about the logger as it now has an additional responsibility to check whether or not it was given a logger and create a null logger if it wasn't. In the example here the code knows whether it has a the null logger or not so it cannot be said to care less about it. In the example in the article there is only one way the logger is passed into the class, through the constructor. The article example depends on the interface alone. In the example here, it can be passed in through the constructor or not. Sometimes one will be instantiated in the constructor. There is also now a setter method from the trait so one may be passed in there. This class now directly depends on an interface, a null implementation and a trait. Why? Do we really need to introduce three dependencies where one would suffice, probably not.
The OP intentionally wants to log to syslog/rsyslog - this could be for any number of reasons.
Sheesh, Reddit sure does have a lot of hate these days. It's not enough if people are still using it. But sure down vote not like it effects me...
Upvoted - this answer is right on the money. If you are under Ubuntu rsyslog is more than likely going to be your system log daemon. The section in particular: http://www.rsyslog.com/doc/rsyslog_conf_filter.html You might also be able to filter out these messages using rsyslog's property based filters depending on the format used by PHP for syslog messages: :msg,contains,"STRING" /var/log/phperror.log This is covered in the link above too. Also (I'm guessing here) you might find you need to filter the "program name" as "php-fpm" as well as "php"? 
Interesting... This works for me, with one small caveat. Where does $programname get set? Is that on the PHP side? In the php.ini or something? Mine contains my app name, but I'd like to tweak it slightly.
Do you call [`openlog`](http://us2.php.net/openlog)? If so the first argument is probably `$programname`.
Good idea, and looking at the 36 developers involved, it seems like something which would be interesting to the average person attending. This would get my vote, were this a poll. 
It seemed like he wanted one variable per row to me. Whilst that can be done using variable variables, it's a bad idea. OP suggested it was for styling purposes, so this is more a PHP thing. This is either a striped row sort of requirement, of if it really is a different style per row, use classes, but that's not great because you'll never know how many results there could be. 
Aha... yes that is it. Interesting that's called in my `header.php`, but these errors are compile time, which should be well before it gets to header.php. I'll tweak this, thank you!
You might find this useful https://github.com/domnikl/DesignPatternsPHP
Oh, don't worry, we will.
Do report back your ultimate solution /u/scottchiefbaker keen to see what you end up with - I usually just log to file using php.ini error_log directly then rotate with logrotate nightly, but would like to have this information on file for future use :)
Capital letters. Have a quick Google for things that don't work on Windows, or that work differently on Windows, because there are a few things. I've never had to use MSSQL with PHP before so I can't be of much use there I'm afraid. Good luck. :)
Sorry if that joke went over my head, I'm not sure what you mean by capital letters. :) But I appreciate your response, I'm currently in the process of reading a lot of the documentation for SQL Server and IIS, as I'm already familiar with Windows Server 2012, and (obviously) PHP. This post is more for those small tips that an experienced developer may be able to provide that might roadblock me for a bit, because of the differences between Windows vs. Linux, Apache vs. IIS, and MySQL vs. SQLServer. Thanks!
Maybe there shouldn't be things that are "optional dependencies" but there are things that are "dependencies with default values". For example a CommentRepository may return the result of a query as an array of entities. The repository may have a "resultsetPrototype" property that will be used for creating the entities and push them to the collection. There is nothing wrong if the prototype default value is an empty ArrayObject or if you can set it during the application lifetime through the `setResultsetPrototype()` method. Is the resultsetPrototype a dependency? Yes Is optional? No Is it required to explicitly set the dependency? No. 
It's fine; PHP isn't case sensitive on Windows, which can lead to some... interesting problems if you transfer your code to an environment where it is. Just something to be aware of is all. :) No problem.
&gt; Sorry if that joke went over my head, I'm not sure what you mean by capital letters. :) I think he may be referring to filename case sensitivity. Windows uses case-*in*sensitive filenames, so if you do a lot of file handling, it's something to look out for. For instance, if you have a file named "vagrantfile" on Windows, it's entirely possible (and very insensible, for portability reasons) to access its contents using `file_get_contents('vAgRaNtFiLe')`.
I have never developed or deployed on Windows, so I'm not sure what the differences would really be once your web server/db stack is set up. One thing that crossed my mind is to use something like Laravel (or another framework) that works with SQL Server. Then, in theory, you won't be able to tell you aren't working on LAMP!
Seems like a good idea though not the best for people just learning the fundamentals of OOP. I think it's best to teach them in a way that isn't fun, nor boring. Just a simple extension of a base class containing People (name, age, height). If they're motivated enough to learn they should take in the information pretty quickly.
Just throw an exception if the class_exists call returns false. That would make the line more meaningful.
Ah, you're absolutely right. I have a feeling I'll be doing a lot of testing and debugging for a bit. :)
Thank you! File handling is a purposed functionality for what I am developing, so I appreciate the tip!
Classic example I've seen is building a cookie object.
English is not my native language.
I totally agree, choosing equivalent tools and tech is a holy war. I will look upon that !
Make two armies fight each other. Introduce an element of randomness. http://www.bitfalls.com/2013/08/autofight-php-job-interview-task-part-1.html
How about robots that have to take loads of cloths out of baskets, put them in washing machines, and then dryers?
See /u/baileylo reply. It's really your best bet. [Chrome](http://i.imgur.com/z5QTwIs.png) [Firefox](http://i.imgur.com/qZLMbrK.png) [IE](http://i.imgur.com/tlFoArl.png) Classic example of why everyone hates Internet Explorer, and why it needs to be dealt with. So for the most part simply requiring the field is going to fix your issue, unless someone is using IE, then you need to get a bit more creative.
I'd like to point out that converting from 0C to F and from 0F to C should still convert. 0F is not 0C and vise versa. You could just default the text input to 0
I forgot... You can use: If(empty($_POST['temperature'])) { // do some error stuff } // I'm on my phone I hope this comes through ok!
I occasionally do training for OOP programming in PHP and card games are my go-to exercises. You get to teach properties (suit and value), inheritance (card group, hand, deck), interfaces or abstract methods (shuffle algorithms, hand evaluators), and a whole lot of other stuff. With more time, you can even push dependency injection, re-usability and other stuff by asking them to modify their card libraries to allow other types of cards from collectible card games.
Oh yes definitely. It still converts 0. I just didn't want it to do a conversion with nothing entered. 
It's worth noting that this solution is only client-side, so OP would still probably want to factor in some way to recognize a blank/invalid input on the server, *just in case*. That said, [Modernizr](http://modernizr.com/) will polyfill that functionality for IE (among other things). 
This here. You aren't ever checking whether temperature is empty (or isset); so PHP just does it's best with the empty (undefined) variable.
if the form gets posted, isset($_POST['temperature']) will always equal true. you want to use empty()
Ya, I'm not worried, was just a good note to be aware of. Thanks!
The best talk you will see. 
Hey, I was there too! Paul's talk was the highlight of the weekend, IMHO. Can't wait to start refactoring according to his plan. I've also picked up a couple of the books he suggested, and his own isn't far behind.
Yeah, right up until you need something to perform well against a large dataset. Then your ORM will be crying in the corner screaming "IM SORRY PLEASE STOP HITTING ME" while you're frantically reading TSQL documentation trying to find a performant solution. All the while your bosses are breathing down your neck saying, "If you don't get this done we're finished. We're all counting on you." So if you're going to be depending on a given RDBMS, you damn well better crack the books and learn how to use it. You'll be more employable, too. 
Ah. Text fields always return something. (?) I haven't had to remember for a while. I seem to remember checkboxes aren't set to anything unless they're checked? But then, I use empty over isset lately.
That combination is a fucking *strange* beast. I know because the app that I inherited, the main bread and butter for my company, is running on exactly that platform. Thankfully, sql server is actually a damn fast piece of software. Make sure you read up on indexes, because there are some key differences between sql server and mysql. Also, there is no really working opcode cache for php 5.4 on windows. They all have weird problems. IIS is fine as a webserver really, it just has some quirks when running with php. Use the pdo_sqlsrv driver, not sqlsrv. Both of those drivers are slower than using the odbc versions, but since the stable version of php has bugs in the odbc drivers you can't use them yet. I and another coder have open pull requests to fix those drivers, but who knows when they'll get merged. Use Redis wherever you can to cache your query results,. Saving round trips and sql execution time that way will help a lot wherever you find peformance issues. Good luck.
Yes, very. It's okay to make money off of bad developers.
Smarty and Krumo
I'm not sure how much you care, but you have quite a lot of duplicated code here. For a start, I'd be careful with your "conversion" value. Saying "celsius" doesn't mean much. It could be to... or from. Saying something like "toCelcius" or whatever might be more clear. regardless, you could almost halve the number of lines in that code by combining the (already redundant because it's always set) `if(isset($_POST['conversion'])){` code blocks.
Please, do explain.
I actually got to chat with him while he was presenting this same talk in Cape Town, South Africa. Great guy with some useful insight. He also motivated me to re-factor large chunks of my code base at work. It really has made my day to day life much easier.
Typical bullshit post that tries too hard to relate to the audience with injected affiliate ids in the links. "https://leanpub.com/mlaphp?utm_campaign=cgsmith105-on-twitter&amp;utm_source=reddit.com" I vote for perm ban. 
Oh god, no. It's WebForms. 
It's not so much that /r/php/ is full of hate, it's more what you've done. Don't get me wrong, you're advocating mysqli over mysql and pointing out the use of prepared statements which is a good thing for now. We got into this whole mess because people wanting more traffic to their site decided to share their knowledge on how to put together website that interacted with databases. * The first problem was the examples had to be as simple as possible for the learners to understand so the writers cut corners (who need data sanitation anyhow, it'll only confuse the reader). * The second problem was that they achieved their goal, the got more traffic, and in turn better placement in search engines, and in the end, they got their insecure code in front of every newbie wanting to code a website. A new coder won't hit up the PHP manual until they need to, they will Google an answer and grab code snippets over trying to figure it out themselves. Even though you have provided useful information now, there's nothing stopping someone from grabbing your article, re-posting it on their site, and the same happen to them, and so on... Then 3 years down the track, MySQLi has a big deprecated warning on it due to some reason, but your article is now everywhere telling everyone to use MySQLi. The vicious cycle continues.
According to [this](https://www.eventbrite.com/e/midwestphp-conference-2014-tickets-7042840325), early bird was $175 and standard tickets were $250.
This! A thousand times this!
Good catch. I second this!
From my experience, this is a fast way to crash a site. PHP Image/photo processing can be incredibly resource intensive. I would recommend teaching her to use some software on her pc, to resize the photos/images, then upload those, so the site can focus on delivering the content.
Not saying you shouldn't learn the language, but that doesn't mean you should write raw SQL all the time. I'm still split on this personally. I write SQL every day at work but I'm going to try using an ORM more heavily at home and see how well that works. I think it's cleaner and more maintainable, but I guess I'll find out.
Don't indent the whole document, it serves no purpose, indentation is about readability and doing that makes it worse. Don't run a create table query every time. That should be done in some form of installation. Other than that for something that is doing plain PHP I see nothing really wrong with it, only skimmed it though. 
1. Fix your indentation and wrap your queries so your lines aren't too long (for readability) 2. Why is your constructor un-setting the parameter that was passed to it? This seems unnecessary. 3. Add unit tests. 4. What use case does your library address? What problem does it solve?
Several years ago the SQL Server connector for PHP was pure pain. I supose that now, with Microsoft as a PHP friendly company, maybe the things has been changed. Several years ago, the NTLM mod for Apache was very inestable on high load applications. IIS was the right way. Now, when I need to execute PHP on Windows machines (to link with COM or .Net components) I use the internal PHP Web Server and nginx to load balancing the PHP web workers.
also add value="0", then the user actively have to remove the value to submit blank &lt;input type="text" name="temperature" value="0" required&gt; or even &lt;input type="number" name="temperature" value="&lt;?=isset($_POST['temperature']) ? $_POST['temperature'] : 0; ?&gt;" required&gt; to be extra user friendly :) (note the **type="number"**) Though this might be overkill :P
&gt; Definitely not to the $ thing. why is it? (is it so had to patch? (technical issue?)) 
You're using PDO, but limit yourself to MySQL with the create table statement. Why?
Honestly can't tell if this post is genuine or just an elaborate marketing effort to get people to buy crappy ebooks. Anyone else get that feeling or am I being paranoid?
Great idea! This is a terrific way to teach them factory pattern (that doesn't involve animals uuuuugh).
I second that vote. Only logical thing to do. Lmao reddit.
Reading text on a screen is different than talking to the guy in person. But if you want to pass judgement on someone before chatting with him that's your call. 
Sites with multiple servers need to use something like this for persistent sessions. As for the unit tests, I couldn't find a way to test PDO properly. Any tips? 
Glad to hear the same speech motivated you! It got me started on refactoring and that is the important part. 
Oh, they are so unspoiled when they are young. 
Mark?
No, Mike. I was the tall guy in the gray fleece and Milwaukee Brewers cap.
In java intro, we had to code electronic components for serial and parallel circuits. I thought it was quite a nice and interesting idea. Should work in oophp too. 
Google analytics is merely a way of tracking where traffic comes from. I can show you how to use it in case you would like to know more :)
Weird, I've always indented everything. What's the proper way?
I mean the indentation of the entire file under &lt;?php. No need for that. The rest of the indentation is fine.
I appreciate the response :) What would you suggest changing about the article? In future posts I plan to write secure code because I understand I was sucked into the vicious cycle years and years ago. But now that I'm free I see an opportunity to help the community.
There are two things you could do to test the current code. One is you could pass a mock object in for the connection, and set expectations for the code you call on the PDO connection. This wouldn't guarantee that the SQL actually works, though. For that, you could try DBUnit, an extension for PHPUnit that allows you to make assertions on the state of the database. That would require you to have MySQL access wherever you run your tests.
Is the second option compatible with Travis?
nice try pmjones.
PHP [Imagick](http://www.php.net/manual/en/imagick.cropthumbnailimage.php) makes things so simple. - Store the images full-size - Write a image.php script to handle thumbnails - Call thumbnails by calling &lt;img src="image.php?file=xxx.jpg&amp;x=600&amp;y=400"&gt; Image.php looks in cache folder for resized image, if none generate thumbnail, cache and serve to browser. If cache exists send cache to browser. Page load will be hindered on the first run - but subsequent loads will be fine. Imagick is as simple as: //instantiate the image magick class $image = new Imagick($image_path); //crop and resize the image $image-&gt;cropThumbnailImage(100,100);
I tried to watch the video of the talk, His book suggestion included "The Road Less Traveled, Timeless Edition: A New Psychology of Love, Traditional Values and Spiritual Growth [M. Scott Peck]" What!!!?? What does this has to do with refactoring? Tried to watch it any way, but couldn't get far. Can't believe this guy is charging $250 for his tickets. What a joke! Stay Away! Don't waste your time, let alone your money!
Shots fired!
&gt;All existing template engines ( that I know of ) create a semantic nightmare clusterfuck of hazy logic and html. Disagree. Sure, a developer can make things a mess if they are not careful, but that can even happen with just straight HTML. This is an area of interest for me, and I've actually written a PHP template system called Plates. You'll [find a page](http://platesphp.com/templates/syntax/) in the documentation which explains how you can keep your (PHP based) templates clean and very readable. If you prefer an actual template language (no PHP), [Twig](http://twig.sensiolabs.org/) does a wonderful job in my opinion. This has become the de facto standard for PHP templates, and is anything but a "semantic nightmare clusterfuck". Having said that, I'm always interested in the possibility of something better. Unfortunately, I don't think your solution is it. I'm very much not a fan of using markup (tags and attributes) to define control structures like loops and if statements. It's just not clear enough for me, and it introduces possible conflicts when these attributes need to be used for other things (ie. JavaScript).
This talk about "Building Better Developers" by Rowan Merewood is inspirational. He's a PHP developer who I believe now works for Google. [https://www.youtube.com/watch?v=WTLqfIjJFEI](https://www.youtube.com/watch?v=WTLqfIjJFEI) I first saw it at [PHPNW13](http://conference.phpnw.org.uk/phpnw13/) but in the video it's being performed at Symfony Live London 2013.
Composer { "require": { "phing/phing": "2.*", "mnapoli/php-di": "~4.0", "ptrofimov/xpmock": "dev-master" } } [XPMock](https://github.com/ptrofimov/xpmock) for easier test mocking, [PHP DI](http://php-di.org/doc/getting-started.html) for all our DI needs, [phing/phing](https://packagist.org/packages/phing/phing) for auto deployment of all things (Still working on getting a generic phing deploy script online though, we wrote a customized one that also runs grunt tasks to compile coffeescript and less CSS [GruntJS](http://gruntjs.com/)), We also use Guzzle but that's been posted already.
Definitely agree with /u/robclancy on this one. The usual way (I'd hesitate to call it "proper") is to have namespace and class against the left edge. Also, if you want to encourage collaboration, I'd recommend adhering to a coding standard such as [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md), which would look something like this: &lt;?php namespace Whatever; class MyAwesomeClass { public function __construct(…) { // Do stuff. } } 
If you do it on upload, and limit the number that can be uploaded in one batch, there's really no problem. Trying to resize a whole page of images on load is where I've seen a lot of timeouts.
Thanks! I'm glad you enjoyed the talk, and that it helped you out. A lot of authors concentrate on green-field projects, and while I like those as much as the next guy, there's a ton of legacy code out there that needs attention -- thus the talk, and the book.
Incidentally, note that the people here (i.e., on Reddit) who have actually met me and had real conversations with me, seem to be neutral-to-positive in their assessment of my motives and expertise. It is only the people here who who have not met me who are acting negatively. That may be useful information to keep in mind.
This is what I find unfortunate. His talk was good and I bought his ebook too, but some of the constant "advertorials" are annoying
I appreciate that; thank you. I hope you will be able to hear my voice through my writing now. As far as "advertorials" -- I'm not sure what that means, aside from "he gives away free and useful advice, and hopes to additionally trade some value for value."
Wait, I'm charging $250 for tickets? I'd love to see some of that cash. And yeah, "Road Less Traveled" informs the talk. When you read widely, you kind find all sorts of things that apply to your professional situation. That particular book has a running theme about recognizing what is actually true, and aligning yourself with that, and about choosing the kind of suffering you're going to accept. You can either accept suffering with the code as it is, or you can accept that the kind of suffering that leads to growth: that is, doing additional refactoring work that will take time and effort but will ultimately be rewarding.
Absolutely! I've seen this one myself. It's a very good talk from a very good speaker. The one takeaway I recall right now is "Being 'passionate and authoritative' is not the same as being 'an angry asshole'." One may apply that one as one wishes. ;-)
I'm so glad the talk was helpful. :-)
That's not how leanpub affiliate links work. Those are Google Analytic tags. Leanpub affiliate links look like this: https://leanpub.com/mlaphp?a={YOUR_AFFILIATE_CODE} And the author has to participate in the affiliate program. I just signed up for Leanpub's affiliate program and I don't see Paul listed as a participant.
Finally my chance to shine! For server-side image processing I recommend graphicsmagick http://www.graphicsmagick.org/ (my installation instructions for debian: https://github.com/charleshross/soarin/wiki/Setup-web-server#9-install-graphicsmagick) and there is a PHP library for it as well https://github.com/vitoc/gmagick (my instructions for that https://github.com/charleshross/soarin/wiki/Setup-web-server#91-install-php-gmagick-extension-for-graphicsmagick). GD works fine too but the algorithms graphicsmagick has are much better at producing sharp high quality thumbnails (just remember to use a different compression algorithm besides the default one which is really terrible, it gives you like 15 different ones). For viewing you can center the image in a div using margin tricks (two examples here: http://jsfiddle.net/VNuFH/ http://jsfiddle.net/Marcel/JQbea/) Be warned though only Chrome and Safari do a good job of 'bilinear interpolation' http://en.wikipedia.org/wiki/Bilinear_interpolation. If you have a large image you try to squeeze down with HTML, without those browsers the edges in the photo will become jagged. Mozilla seems to not care I've sent in tickets as have others. So instead of taking the original image and squeezing it down, you could create 'different levels' of sizes which is the standard these days. Usually they restrict the width of a photo by like 500 pixels and will add '_500' to the end of the filename. http://31.media.tumblr.com/f88e353e5ddb60c270078abb044ddff6/tumblr_n164g3CmNx1spg5uho1_1280.png http://31.media.tumblr.com/f88e353e5ddb60c270078abb044ddff6/tumblr_n164g3CmNx1spg5uho1_500.png http://31.media.tumblr.com/f88e353e5ddb60c270078abb044ddff6/tumblr_n164g3CmNx1spg5uho1_400.png http://31.media.tumblr.com/f88e353e5ddb60c270078abb044ddff6/tumblr_n164g3CmNx1spg5uho1_250.png http://31.media.tumblr.com/f88e353e5ddb60c270078abb044ddff6/tumblr_n164g3CmNx1spg5uho1_100.png For duplication, when each image is uploaded just do a sha1 checksum on the file... example: $checksum = sha1_file('uploaded file here'); This will create a hash that is specific to that file with a very low level of collisions so no worries. Just save the hash with every image you upload to the database and the next time a new upload happens run a database check to see if that string exists or not already. This is a really awesome uploader library that will let you upload multiple files and drag photos into the browser for upload http://www.uploadify.com/download/download-uploadifive-standard/ It cost like $5 its worth it. In my application I have the sha1_file() function run on the uploaded image in real time and auto-block those files. I then put a toggle button so you can allow duplication uploading. If you want to put a bunch of thumbnails on the screen in columns ala Google+ check this library out http://masonry.desandro.com/ If you want to put thumbnails perfectly in a browser window like Google Images, Google+, Bing. Well they do server-side real time thumbnail re-sizing. You can't do that without your CPU spiking out of control. They have some kind of GPU cluster working that or something. You could still do it by offloading that work to the user's client. I created a library for that (time for my plug) https://github.com/charleshross/jquery-imagefiller It needs to be updated with newer code I'll be updating it soon but yea it sorta works in that form. If you have trouble implementing it just PM me the code you're using.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Bilinear interpolation**](http://en.wikipedia.org/wiki/Bilinear%20interpolation): [](#sfw) --- &gt; &gt;In [mathematics](http://en.wikipedia.org/wiki/Mathematics), __bilinear interpolation__ is an extension of [linear interpolation](http://en.wikipedia.org/wiki/Linear_interpolation) for [interpolating](http://en.wikipedia.org/wiki/Interpolation) functions of two variables (e.g., and ) on a [regular 2D grid](http://en.wikipedia.org/wiki/Regular_grid). &gt;The key idea is to perform linear interpolation first in one direction, and then again in the other direction. Although each step is linear in the sampled values and in the position, the interpolation as a whole is not linear but rather quadratic in the sample location (details below). &gt;==== &gt;[**Image**](http://i.imgur.com/u7q1E50.png) [^(i)](http://commons.wikimedia.org/wiki/File:Bilinear_interpolation.png) - *The four red dots show the data points and the green dot is the point at which we want to interpolate.* --- ^Interesting: [^Bicubic ^interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) ^| [^Linear ^interpolation](http://en.wikipedia.org/wiki/Linear_interpolation) ^| [^Trilinear ^interpolation](http://en.wikipedia.org/wiki/Trilinear_interpolation) ^| [^Interpolation](http://en.wikipedia.org/wiki/Interpolation) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cg6h7cb) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cg6h7cb)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
/me nods Yeah, the OP is not an "affiliate" -- he's a guy who heard the talk, applied the concepts, found they made his life easier, and bought the book for more information. I'm just happy, as always, that I could help.
I think it's that some of your blog posts are full of links to buy your stuff. I don't mind it too much personally, but it can come across as "advertorial". I think you can promote your stuff by having links on the sidebar of your site without also having those links in your actual blog posts. Otherwise I like your stuff. Some people seem to get butthurt from any Laravel criticisms
You can disagree, but please keep name calling to a very minimum.
This is the wrong order of operations, you don't want to be calling a php script every time you serve an image
fair enough I agree that Twig is a great system. Just wanted to try something new. Glad i haven't invested too much time in this, seems as there is not much interest. 
OH. MY. GOD, did he really just "carefully inject" a code so he could see how many people from reddit looked at his blog post!!!? Oh the humanity!!! His agenda must surely be ranked up there with Hitler. 
Session data is not relational. Would anyone ever actually JOIN to this table? I surely hope not. Most people already use redis or couchbase for session storage, because it keeps separation between use-cases. Mysql has important application-specific jobs to do and shouldn't be bothered with maintaining a session table.
To add on to the advice of others on here... 1. You don't need a PHP closing tag. 2. You should specify the type in your constructor, in your case it should be: public function __construct(\PDO $connection) 
&gt; Most people already use redis or couchbase for session storage [citation needed] I'd wager *most* people use the default PHP filesystem stuff for session storage, and only a small percentage of people have stepped up to non-filesystem session handling of any stripe. Of those that have, I'd put my money on memcache and mysql before redis or couchbase. Far more people already have mysql installed and available permissions on it vs even having the ability to set up a redis on their production systems. 
Another vote for intervention. I've just used for a laravel app and it took about 15 minutes from start to finish. Great stuff.
Hi Paul, Big fan of your work, I'm quite the admirer as you can see [here](http://www.reddit.com/user/Soru/liked/). What I was trying to say was that sometimes here on reddit you might come of as trying to push your stuff too hard, and in general redditors don't really like that kind of thing.
What exactly is the point of this? Is it so hard to just write some HTML? Not to mention, meta keywords is entirely useless, and I don't think meta title is used for anything (the title tag covers that).
Added a PR with fixed code style.
[yes](http://docs.travis-ci.com/user/database-setup/) before_script: - mysql -e 'create database myapp_test;' * host: localhost * username: travis * password: &lt;empty&gt; Though I couldnt get symfony2/doctrine to use a empty password, so I normally sets a password for the travis user before_script: - mysql -e 'create database myapp_test;' - echo "USE mysql;\nUPDATE user SET password=PASSWORD('travis') WHERE user='travis';\nFLUSH PRIVILEGES;\n" | mysql -u root
There's an unofficial Win32/64 build of Redis on their download page. But it's not production quality yet. [Download page](http://redis.io/download)
After everything already said here, I have just a little nitpick with your comments /** * @var object PDO object */ private $connection = null; Shouldn't that read /** * @var $connection PDO object */ ?
Install [squizlabs/php_codesniffer](https://github.com/squizlabs/php_codesniffer) in your composer.json under require-dev { "require-dev" { "squizlabs/php_codesniffer": "1.*" } run composer install Now run php ./vendor/bin/phpcs --report-file=./build/logs/phpcs.log --standard=PSR2 ./src Now you will have a log file with all PSR2 coding errors :) (you can also use PSR1 or 0 if wanted)
If you're just using it as an in-memory cache, it works great. That's all we're using it for, and we haven't encountered any issues with that functionality on Windows in over 6 months of use.
Yeah, don't get me wrong, a good ORM can be a great tool. I'm just saying that you shouldn't use an ORM on a platform on which you are not at least 90% comfortable writing SQL for.
Instead of using PDO directly, you could also use a DBAL fx [Doctrine DBAL](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/), [Zend_DB](http://framework.zend.com/manual/2.3/en/modules/zend.db.sql.ddl.html), [RedBean](http://redbeanphp.com/) so you dont need to write any ````create table```` But with your use case, where a sessions needs to be available on all servers, you should actually just need a memory table, because if the session provider server crashes all sessions should be destroyed imo - So I would properly go with [Redis](https://github.com/nrk/predis) instead
It would be a fundamental change to the language and be incredibly complicated for the parser to work out the difference between constants, functions, keywords or variables. Even if it was done, it would brutally murder BC. If you want that sort of "it might be a property or a method or a variable or a who knows then" then use Ruby. :)
not trying to make fun. but it's kind of plastered all over the php.net home page http://php.net/ 5.5.10 is the newest... why learn an old one? as far as learning... I don't know :( sorry
[Based on the proposed PHP-FIG](https://github.com/phpDocumentor/fig-standards/blob/master/proposed/phpdoc.md#63-constant-or-property) @var will be deprecated. It should look like this: /** @type \PDO $connection */ private $connection;
@type is much better and yes \PDO is correct - forgot about that context. 
If you want to learn PHP you may as well start by its own documentation on http://php.net; which has a "Getting started" tutorial. You must be willing to learn the HTTP protocol also. There is another great source of information for people starting with PHP (that will certainly point to right directinons): http://www.phptherightway.com/
With proper caching, there's absolutely nothing wrong with this approach.
If your views share a common set of meta tags, you could use your templating engine to do that with inclusion to keep things DRY. I have to agree here; I think this is probably an over-engineered solution.
Yes there absolutely is, maybe not a huge difference on Apache where there is an abundance of php threads, but it will be exponentially slower and/or less parallel/scalable on nginx
Still a php request that could easily be a static file request 
why do you need to learn the http protocol?
The widely used standard class is PDO. There are many tutorials on it you can get to by searching on google. google php pdo 
&gt; 1) A lot of classes had this same base block of dependencies (request, template, wpapiwrapper...), which didn't seem too dry The Laravel container has an "extend" method. I've never used it myself but just very briefly looking at the source it might help you DRY-up that particular issue, not entirely sure how it works though so maybe not, haven't stepped through it.
If twig is not for you, give mustache a shot: https://github.com/bobthecow/mustache.php. It's the only templating engine I've seen that does a reasonable job separating out logic from views.
Or just read Refactoring to Patterns and Patterns of Enterprise Application Architecture.
ಠ_ಠ
Definitely watching this. Thanks for the reply!
Heh that too, I'm thinking more of something like the symfony2 cookie class.
I've put some effort into splitting classes up and that seems to be helping. Otherwise if things get hairy again I might go with that facade route. We'll see!
Could be ;-) However, you can find out for sure by reading the samples: &lt;https://leanpub.com/mlaphp/read&gt; tl;dr: It doesn't reference any frameworks, and mentions only a few standalone libraries like PHPUnit and Zend\Escape. It's more about techniques, not tools. (I'm saving the novel on Laravel's misnamed "facades" for 10-20 years from now, when they've all had time to realize their huge mistake. ;-)
[PoEAA](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420/) is fantastic and I recommend it to everyone. I reference it regularly. However, those books don't come with step-by-step instructions on how to work with a legacy PHP codebase in order to modernize it. [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp) does.
Out of interest, what are you wrapping in your WordPress wrapper? :)
"composer update"? Don't be doing that on your production server. Composer install on your local box, build the project, run tests and then archive the workspace and upload it over whatever protocol you have access to. But please, understand the difference between composer install and composer update :)
Literally every wordpress function my application uses. I just keep adding them as I need them. It sounds weird but it's the only way I can think of to be able to mock WP functions and unit test any class that's meant to work with wordpress. I looked into the WP test suite and decided it wasn't for me.
You're right! Lemme fix that ...
If you're just using WP for data storage, you should be able to get away with using the actual [WP API project](https://github.com/WP-API/WP-API). (It's written to provide a JSON API, but you can use the functions internally.) If you're not, then you're in for an uphill struggle with mocking out all of WP's functions. :)
Wow, great tutorial. I read through all of it and really enjoyed your style. Some of it was over my head, since I'm relatively new to development coming form the design world. It's always exciting to see how much I still have to learn. I've bookmarked your blog since it seems to cover a lot of useful tools that I'll try to incorporate into future projects, especially the twig templating part. My codebase is filled with html strings at the moment and it would definitely be a lot tidier having them in separate files. Imagine seems like a good way to handle the resizing and doesn't seem too complicated. I'll be reading into the documentation of that and a few other libraries today before I make a final decision. Thanks for all the help! I really appreciate it!
Although it's just occurred to me I could probably replace everything in there with this: public function __call($method, $arguments) { return call_user_func_array($method, $arguments); }
Hmmm, I was wondering if this would be an issue. Has anyone had issues uploading and resizing a few images at a time on the backend? Could this cause my front end to crash by overloading my server? Does anyone else have input on this issue? I'd like to make things as simple as possible for her, but it would be worth teaching her to resize images if this is a serious concern. Thanks for the input guys.
Hey thanks for the info on imagick everyone. It seems simple to use but might have some performance issues. While slow loading after cache clearance seems a relatively minor issue it's still a downside over resizing on upload. Does imagick have advantages over resizing on upload that I don't know about? Thanks.
I've been hearing good things about the API project! It was just featured at #mwphp the other day. I haven't tried it out but it looks promising. I do need a bit more than data storage, although that's been a huge part of it. Enqueueing scripts, adding actions, etc. 
Ah shoot, actually it was a very similarly named plugin called "wp-simple-json-api". Here's the link to the summary of the talk: https://gist.github.com/jasonrhodes/9570529
Yea there was a disagreement amongst imagick team and it got forked. I think Graphicsmagick has become the better program. I mean if you take a 2000x2000 picture and you tell that &lt;img&gt; to be 800px in height, it has a new width/height that is smaller then its original width/height. The browser now has to subtract pixels from the picture to make it fit. If it doesn't re-soften the image it'll look jagged (because pixels are now missing). Only Chrome/Safari do this softening, IE/FireFox use an inferior method. If your source picture's width/height aren't too different then the view size you choose though then it won't look that bad. So basically when it comes time to put the picture in a 'view' mode for viewing, you want the picture's size to be as close to the div or img's (or w/e element) width/height as possible. Different image sizes are done also for bandwidth considerations. Storage is cheap these days but bandwidth has not kept up thanks to ISP's. If the div/img is set for 800x800, it makes sense for the image itself to be close to that width/height to increase load speed and lower bandwidth cost. Yea sha1 is perfect for checksuming, it adds up all the bytes in the file and then runs the SHA1 hash on the result I believe. Pretty solid. Yea my imagefiller library does cost CPU time on the client side like any frontend JavaScript will. It's not noticeable unless you ask it to resize 500+ thumnails all at once. Though I came up for a solution to even make that work that I will be committing soon to the project. The code is public and free to use for any purpose. It basically just fills a div container perfectly with thumbnails while maintaining aspect ratio of the original images. I wrote it a year ago so the code isn't beautiful but it does work for what it is for the most part. It'll be getting a major update sometime this month or next month so look out for that if you do want to use it. You should star it so at least one of my projects on GitHub has a star =)
Heh, thanks anyway! Always interesting seeing what other people are doing; good inspiration!
/me peers 20 years ahead. Guess what I see? No one still cares.
[http://i.imgur.com/beNfxo9.gif](http://i.imgur.com/beNfxo9.gif)
It really depends on too many factors for a simple yes/no. How many users, how many photos, how often, shared or dedicated box, hardware specs, php.ini memory_limit, GD or ImageMagick, etc. If you restrict the resizing script to authorized users only, and add some DoS protection, the worst that will likely happen is processes occasionally hitting the php.ini memory_limit and dying. The user would get a 500 internal error, but your server would be perfectly fine. Keep an eye on the PHP error log and adjust the memory_limit as needed within your hardware limitations.
Someone asked for an explanation, I gave one.
&gt; Plates' template objects are very simple, and the ONLY pre-set property is $template-&gt;_internal, and it's private. What about `$this-&gt;e` and `$this-&gt;layout`? Or are you discounting those because they're functions? (which to be fair, you probably shouldn't be injecting into your template) Regarding your article, &gt; Too many global functions Don't make them global. Use static methods or namespace them. It's not as brief, but like you said, we can't dynamically define (and undefine) them. Alternatively, you could make them variables: `$layout('template')` would work fine. &gt; Since these variables are assigned to the template object during the rendering process, there is no way to convert them to variables in the local scope. Sure, you could assign them immediately to the local scope (ie. &lt;?php $title = 'About Us' ?&gt;), but then they would not be available to other included templates (ie. layout and nested). Not good. You can pull them back out with `get_defined_vars()` and redefine them for the next template. &gt; The problem worsens for helper functions I don't know how these helper functions work as I haven't used plates myself, but you might have to change how the API works a bit. Having a function `start()` that both does something and creates a new var is kind of hokey anyway. Make it return the `$sidebar` object and call it like `$sidebar = start('sidebar');`. &gt; Closing thoughts `$this` is kind of a weird name to begin with. You're not inside a class method. If anything, you should call it something like `$template`. 
TL,DR version: &gt; PHP versions prior to 5.3.12 and 5.4.2 are vulnerable. The Imperva blog post said that an estimated 16 percent of public websites are running a vulnerable version. People running susceptible versions should upgrade right away. Readers who visit vulnerable sites should notify the operators of the risk their site poses.
Only applies to sites running with PHP-CGI (most use apache mod php) and have to be an older version of PHP. So, yeah. It's probably a much smaller number than 16 %.
Anyone serious about shipping code should be on 5.5.6 anyways; which is the exact reason why its 22 months and running. They're focusing on the vast majority on the current stable release, and not those who are sticking to old standards.
Sites running php on Nginx?
Even in light of `mod_php`-friendly suexec solutions like [`mod_ruid2`](http://sourceforge.net/projects/mod-ruid/), as far as I know, cPanel/WHM still uses [suPHP](http://www.suphp.org/Home.html) out of the box. However, I didn't think suPHP was vulnerable to this due to some quirk of the way it calls the CGI binary?
another reason why running cpanel/plesk is shit and shared hosting sites are constantly getting hacked. cgi and php is just a horrible idea all around there are much better ways to deploy it.
they are idiots if they are not running it with fast-cgi
http://i.imgur.com/Y9o0p.png
Don't worry about it ! Speaking english with a french accent is way more frustrating than writing it :P http://www.livememe.com/8f5ph8h.jpg
&lt;shamlessplug&gt;You might get some use out of this library I wrote - https://github.com/IcecaveStudios/isolator&lt;/shamlessplug&gt;
I used to have several provisioning scripts and template files, but now I just use [Puphphet](http://puphpet.com) and I'm done.
Just discovered something called Vaprobash from a work colleague today. It's on Github. Check it out, makes building Vagrant boxes as easy as uncommenting what you want installed.
Well, they need to be a little clever to run CGI with nginx, because it isn't supported out of the box. ;-) 
IIS runs PHP in FastCGI, does that make it vulnerable? How to test for this exploit? 
I use Ubuntu precise64 image. I have a shared folder that contains all the installation files for php, Mysql, Postgresql, apache, Java and Apache Cassandra.I have created a shell script that uses a combination of apt-get install and the files installation sources to setup all the required stuff. When I have more complex requirements I guess I will have use to something like Puphphet. 
This looks great. Thank you!
This is not pmjones . I have an identity http://twitter.com/harikt 
 &gt; a video factory class: this is responsible for the creation of the concrete classes. This handles also the dependencies required to create the real objects. Does this create dependencies using the new keyword or via more injected factory objects? &gt;In the video class? So that I could use $video-&gt;getThumb(); and that function will interact with the cache and, if miss, will use the provider api to get the data? In this case I feel that the video class is doing too much I think you can put this kind of thing is a Service or Manager (or whatever) class. Use a method that accept a Video object and let it handle the logic to fetch the details. Just define an interface for this service, and implement this interface for each of the providers. Let each of these providers use a shared cache object, that they can use to cache data. Your cache object can implement a VideoDataCache interface, and can use any back end you choose. Database, Memcache or anything like that. Are you using any dependency injection container? &gt; In the repository? But those data don't belong to the persistence layer Why do you think it does not belong in persistence layer?
cache the unfiltered results for the keywords. then load them from the cache and filter them. 
you should namespace like that: &lt;vendor&gt;\\&lt;package&gt; in your case: nehalvpatel\synapse 
Have you looked into something like [varnish](https://www.varnish-cache.org/)? That way you don't have to worry about the caching logic in your application code. I suggest you try it before thinking of adding caching in your application code.
Libraries? You don't need no *steenking* libraries! The usual extensions can do it all for you, with a touch of boilerplate. Code signing? Well, PHAR does [basic hash signatures](https://php.net/manual/en/phar.getsupportedsignatures.php). Not exactly crypto, but it's almost enough to flag tampering. [OpenSSL does both symmetric and asymmetric crypto](https://php.net/manual/en/book.openssl.php) using RSA public/private keys. The symmetric methods are `_encrypt` and `_decrypt`, with `_get_cipher_methods` producing the list of supported ciphers. [mcrypt also does symmetric cypto](https://php.net/manual/en/book.mcrypt.php). Please be careful, as [mcrypt has lots of little gotchas](http://www.leaseweblabs.com/2014/02/aes-php-mcrypt-key-padding/). If you're doing *code distribution*, consider doing deploys using your platform's native package format. For example, on RPM-based Linux distros, you can (and in some cases *must*) sign packages with a PGP key that the system has marked as trusted. I'm not sure how other distros do it, but I wouldn't imagine that the majority of them don't already support PGP signing and hash verification.
I freaked the fuck out after reading this: mysite:~ tom_shell$ php -v PHP 5.3.10-1ubuntu3.6 with Suhosin-Patch (cli) (built: Mar 11 2013 14:31:48) Then realised I'm using mod_php like any sane person.
s/cgi and php/cgi/
Thanks a lot for the reply. &gt; Does this create dependencies using the new keyword or via more injected factory objects? I think yes, consider this factory code: function createVideo($type, $guid){ switch($type) { case 'FirstProvider': return new VideoFirstProvider($guid, new FirstProviderApiClass($KEY)); case 'SecondProvider': return new VideoSecondProvider($guid, new SecondProviderApi($KEY)); case 'ThirdProvider': return new VideoThirdProvider($guid); // Third provider doesn't need api dependency } } Is it bad? How could I approach it differently? &gt; I think you can put this kind of thing is a Service or Manager (or whatever) class. Use a method that accept a Video object and let it handle the logic to fetch the details. Just define an interface for this service, and implement this interface for each of the providers. Let each of these providers use a shared cache object, that they can use to cache data. Your cache object can implement a VideoDataCache interface, and can use any back end you choose. Database, Memcache or anything like that. Are you using any dependency injection container? As I stated in the post, unfortunately I'm stuck with PHP 5.2, so no interfaces :(. I think I'll need to go the abstract class way. No dependency injection container, the code is legacy and the refactoring is hard. Once we'll succeed in upgrading our environment I'll think about all the cool options that are out there that could help us getting higher maintainability and flexibility. Right now we're kind of forced to not use those libraries. Btw to be sure to have understood you correctly. You mean that I could: * create a VideoMetaDataFetcher class (abstract) * create the three implementations that will accept the shared cache backend object * specify a method that will fetch the data and store it in the cache and viceversa gets it from the cache if present Is it correct? If so this object should be called from within the video class? Mmm something tells me that I did miss something, didn't I? :) The shared cache object will be a redis backend. So the cacheService will need it's predis client dependency injected &gt; Why do you think it does not belong in persistence layer? I'm thinking at the video stats data. I don't feel this kind of data needs to be stored in the database along with the guid or other video related information that I need to create the videos on the front end through the factory etcetera. I feel this is the kind of data that needs to be fetched from the source if available (through the api). The cache mechanism is needed for performances issues. Storing this info for a day could suffice to let the pages being rendered fast (maybe we have lists of 50 videos and fetching those information from they're source could be expensive).
One important piece of information that you've forgotten to mention is *what* you want encrypted.
We are talking about PHP here. I still get projects that are written without a single class and mixed in HTML/CSS/JS in huge files with if/else logic. It's much more easier to get a framework and throw the logic in methods. Copy what you can use from the old code and rewrite the rest.
I created a box specifically for my Symfony development, it contains: - Debian 5.5.9 - Git - cURL - MySQL - SQLite - nginx - PHP (both CLI and FPM) - APC - PEAR - Xdebug - RabbitMQ And I'm working on adding more stuff to it. You can find it [here](https://github.com/kleiram/vagrant-symfony).
You could find some use for [TCrypto](https://github.com/timoh6/TCrypto). It does not offer asymmetric encryption, but makes it easy to safely transfer AES encrypted and authenticated data. By default, TCrypto uses cookies as a data storage backend, but you could write your own "StorageHandler" to suit your needs (just code against "StorageInterface" and you are done). There is also a small article about TCrypto at websec.io which explains a bit more deeply the TCrypto usage: http://websec.io/2012/08/29/TCrypto-Encrypted-Data-Storage-for-PHP.html (I am the author of TCrypto)
md5
Q: What's the difference between senior devs and experts? A: Senior devs haven't yet had to pay off technical debt. (But they know what it is, at least in theory.)
&gt; [exploits] worked against PHP sites only when they ran in [CGI] mode, a condition that applied by default to those running [Apache]. ... in 1997. Seriously, what was the last server distribution to install PhP as a CGI binary?
Ahh great stuff! I've been using Silex for almost a year now, I spent a great deal of time trying to find a solution to this problem, good thinking! 
you may be right - unsure of per-level specifics on cpanel. i just remember that most shared hosts aren't doing straight modphp.
This is just a pathetic article attempting to get hits from a shock headline. If people don't update then that's their fault and honestly they deserve to be attacked for their stupidity.
Note that CGI != FastCGI != FPM. This applies only to CGI.
That's my project, feel free to ask any questions!
I thought FPM was the de facto standard for nginx.
I wasn't disputing all meta tags, only the two I mentioned.
I wouldn't say knowing the difference between POST and GET is "knowing the http protocol" it is, however, knowing the function of two of its verbs. I'd say you should know the http status codes once you get into making more complicated applications. 
Uh, no. You totally don't want to directly use PHP's crypto extensions, unless you happen to be an expert in the area. For example a very simple encryption using mcrypt needs about 100 lines of code, with a lots of opportunities for subtle errors. You don't just call `mcrypt_encrypt` and are done.
Can I provide a folder with sources or precompiled binaries so that the script can use those instead of downloading from net?
"use Ruby" &lt;-- no Thanks :-) i am more C# guy and sometimes php.
individual server installs pale in comparison to shared hosting accounts, where I suspect the majority are running php-cgi configs.
Is it really so far out left field that people other than /u/pmjones like the Aura framework?
I genuinely want to use Vagrant (with puphet), but the issue with the permissions on the shared directories are annoying me too much. I'd like to download the puphet file, run it, and use the VM directly, not tinker in the puppet conf for hours :(. So I basically work in a classic VM. PS: All that from a windows host. 
Believe it or not, that's *exactly* the case addressed by the book. It is possible, with a little effort, to refactor a mess like that using the instructions I lay out. I've done it several times now. Watch the talk first (it's free!) to see what I mean.
5.2.6 here. Do I win?
why? Is it more reliable or scalable?
Mainly because they run each PHP instance under the uid of the specific account rather than under a shared Apache uid (often "nobody" or "www-data").
Nobody who's "serious about shipping code" rushes to the latest version of anything unless there's a critical security need. They take their time regression-testing their app against the new version in test environments while running tried-and-true versions in production.
I just want to point out that you can use interfaces in php 5.2
"Tell me why it sucks" - THIS is the spirit of reddit, guys! You're going places! *"tell me how much it sucks" would suffice btw.. :) ** (I'm just kidding :)
Try working with chef instead of puppet. The configuration files are a bit cleaner to work with, IMO and more natural with Vagrant since Chef is written in Ruby.
aaah thanks this seems to be exactly what I need
https://github.com/haydenk/vagrant-chef I have been working with that, myself for a LAMP VM that could easily work with Debian or CentOS but still setup the same configuration.
You don't have to be sorry, your work is great, I'm just a bit too lazy (and don't have the time) to dive in those dense conf files. If vagrant's 1.5 rsync is fixing that particular issue I can't wait to see it implemented in puphet, so I can give it a try again :).
HUH. Interesting ... Thanks!
What? You and I have different ideas of senior. Paying off tech debt does not make you an expert, and in my view (and the view of the organization I work in), paying tech debt is a routine part of the job of all developers, not exclusively senior or "experts". 
Oh god. Why on earth I thought that interfaces were introduced with 5.3? Because I'm dumb. :(
You can do that, you just have to be very careful with permissions and passwords. 
They should compare this one: http://www.hardkernel.com/main/products/prdt_info.php?g_code=G137510300620 Arm A15 vs i3/i5
Yeah, that's an even simpler case than what I had in mind and you already need a considerable amount of code for it. Usually you'll need to add HMAC verification at the very least. Depending on the case you may also have to derive the encryption (and authentication) key from a password (no, sha1 is not okay for that \^\^). If you're lucky you need to implement the block chaining mode manually as well (quite typical for CTR, because there are so many different ways to implement it). Everything not a problem if you know what you're doing, but quite a lot of opportunities to fail if you don't :)
Are you a hosting company? If not, you don't need a "control panel". Even if you were, it seems like the 'need' for a control panel is dubious, at best. In my experience they're only good for letting users mess with things they have no knowledge about, which never turns out good.
Still, if you're part of that 16% its time to upgrade. I put some useful resources together here http://www.phparch.com/2014/03/still-running-an-old-version-of-php/
Actually `mod_php` is not the preferred manner of running PHP; PHP-FPM is all the rage. `mod_php` can work ok for limited scenarios (single, low-traffic site), but I wouldn't recommend it for anything that sees any real traffic. Just my experience though, YMMV.
Facebook is trying to circumvent the community process. If Hack gains enough traction then they'll try to force their views upon the PHP standards working group.
Or it could spur innovation because now the core php devs have to speed up the process to keep up.
To be frank there is not just @pmjones who love aura. There are many more. Have a look into [#auraphp](https://twitter.com/search?src=typd&amp;q=auraphp)
Is it possible? sure, but I'm not looking to re-create the wheel from scratch. There's also a ton of code to go into a full crypto library (even using native PHP) and a lot of places I could make a mistake. I'm decent at crypto, but no expert which is why I'm looking for a library in the first place.
It's a very tricky thing. One approach is to use some sort of [general sandbox](https://github.com/cemc/safeexec). However, I think a better approach is to use something like [RestrictedPython](https://pypi.python.org/pypi/RestrictedPython), which [you can use](https://github.com/xiongchiamiov/CSTutor/blob/master/codeshell/pythoncode.py) to build a relatively safe executing environment. I talked with someone a few years ago who was working on [a project](http://cscircles.cemc.uwaterloo.ca/); they are apparently using a modified version of [Mooshak](https://mooshak.dcc.fc.up.pt/)'s `safeexec` (you can see their repo [here](https://github.com/cemc/cscircles-wp-content)). PyPy also provides [some sandboxing features](http://pypy.org/features.html#sandboxing). With all of these approaches, you still need to be very careful about attacks (intentional or otherwise!). For instance, I may not be able to read `/etc/shadow` or delete `/`, but can I use up all the available memory on the machine? What about CPU, file pointers, processes, network, etc.? I would heavily lean towards building on one of the many other sites that do this, rather than starting from scratch.
I updated the post, but it's the service-to-service messages, which will likely be JSON blobs as I'm planning to make each service implement, at least an internal, RESTful API.
Removed my other thread as this one gained more upvotes faster. If you want to try Hack immediately, PuPHPet already has support for it. Go to the Languages tab, under PHP choose HHVM and select nightly! https://puphpet.com
At last some info about Hack! This looks very promising indeed. Im glad they dropped rotten stuff like variable-variables. The great thing about hack is gradual typing, so you can easily convert slowly to a static type system, keeping the dynamic parts working as normal. The type annotations and generics remind me of Rust, and thats all good, however i would love to see no nullable types at all. The type aliasing seems cool, but I wonder when it is usefull? Going to test hack out some more! Big congrats to all involved in making hhvm &amp; Hack possible!
Not on the Hack team, but used hack quite a bit: * Nullables - No need to use them in your codebase then. Unfortunately, we live in a world where there is null * Type aliasing - We use it quite a bit for enums, and it's incredibly useful.
Here's the thing: This stuff is complicated. If you write something and it turns out to be false/misleading information, a fine could reach into the tens of thousands of dollars.
How is this different then the stripe api?
Agreed, but linux server management and security is hard. There are a ton of things to do and a control panel typically gives a better interface than a black terminal where you need to be an expert to begin with. Tools like CSF+LFD are in-betweens - not a control panel, but they do a fair job of securing the server AFAIK. Then there's email, DNS, FTP, and whole lot of other things. And then there's your actual app. My opinion is that control panels take the admin burden from the developer and let him/her focus on the web app. That's my opinion.
Wish this was available as a pecl extension for use without HHVM. While I'd love to use HHVM here at work, unfortunately we have to rely on a custom ODBC driver that has to be compiled into php to work. :/ Sigh, I want strong typing. It would be sick if they added true method overloading at some point as well.
It's a bit hacky......
That's ok if you want to use only one gateway (stripe for example) but what if you need several payments, another gateway is cheaper in your country then stripe or you have to have a backup gateway in case your main not working. In this case you have to use at least two services. Configure them, think of a good abstraction. One gateway may require a redirect to its side where another just info of credit card. After you did a payment you have to get a status, each gateway has its own status fields or maybe several ones, and its own logic behind these fields. So you have to guess status correctly too. Also you have to think of instant notifications or callbacks and correctly process them. Shortly the idea is: Download a service, configure payments in yaml file, start it as web server, do purchases. Hope it is clear now.
Welp. Announced today. They did :)
Laravel because http://laravel.com/docs.
Went through the tutorial and I really love what I see! Lots of awesome stuff, even simple "hacks" to make out lives easier like simplified constructors, lambda functions etc. I have a question though - can I combine php and hack files? i.e. combine hh and php files into one project? For e.g. include hh file with classes/functions from php file or the other way around?
TYPO3 Flow. Because they are light years ahead (full project-wide dependency injection, aspects)...
Yeah, almost all existing PHP code is backwards compatible, other than code that uses features that were intentionally removed (like variable variables and the `extract()` function). As the blog post mentions, you can convert files one-by-one from "regular" PHP to Hack. At Facebook we use several open-source PHP libraries with very little (or no) modification, and not all of our code is "Hackified" yet.
You can. If you already have a PHP codebase you want to convert, just start by changing one file at a time (change the &lt;?php opening tag to &lt;?hh). Every &lt;?hh file gets typechecked, and you can start adding types incrementally (so it's fine if you only have a couple of functions typechecked in a single file). 
Obvious Joke: This has to be what they used to develop their site...
Yii hands down. Very easy to extend and configure from the core up. The events are awesome. Can't wait to find my next favorite framework. 
Now we just need a Hack to PHP translator, to get the compile-time static type checking without being locked into HHVM.
I wish people would stop targeting PHP 5.3 and just jump to 5.5. It's their call, obviously, but it saddens me to see PHP 5.3+ as the target.
Updating is not always that easy for many reasons. 1) if you're hosting with someone and don't have control over it (probably should switch) 2) Linux Distro's add in the Php updates at their own leisure, and many won't keep PHP up to date unless you're on the latest OS version. Updating the OS of your live web server is no simple task and 9 times out of 10, it will break everything.
Loving Laravel at the moment. My favorite features are the HTML and Form macros (super easy to define my own kind of front-end "bootstrap" API that other developers can use). View composers make it easy to assign shared data to every view without having to include it in every controller action etc. Route filters are useful for.... everything. Overall I love how short and sharp its API is. Wish it supported multi-auth out of the box though (for more secure admin sessions which are separate from normal user sessions). I also love how it's BOTH configuration-less, and convention-less. Instead, it provides a variety of ways to solve a given problem through different APIs and lets the developer pick the best one. For instance, there are four ways to define controllers/routes depending on which way you want to go. You don't have to put together some obtuse YAML file, or learn a whole new annotation language, nor do you have to adhere to pre-determined conventions if you don't want to. It's all very easy going and natural.
INNNNNNNNNNtterrrresting.
Why do people think you need to run composer commands on a production server? You should have a deployment server from which you rsync the codebase to the remote server.
Pretty cool HHVM / Hack intro. Side note: god damn... Engine Yard is expensive O_o
Thanks :) If you'd like to discuss the side-note privately, I'm happy to do so — this isn't the place for it, but TL;DR: we *can* be cheaper, or expensive, but either way we a good value IMO :)
&gt; Obvious Joke: This has to be what they used to develop their site... FTFA, second paragraph: &gt; We have deployed Hack at Facebook and it has been a great success. Over the last year, we have migrated nearly our entire PHP codebase to Hack, thanks to both organic adoption and a number of homegrown refactoring tools. Where's the joke?
I feel like this is an odd place to allow multiple inheritance. Why not keep interfaces pure contracts, and allow multiple inheritance through multiple extensions (and throw fatal errors when a multiple inheritance conflict arises)? 
This is why I used the words "stable release" or does the meaning of those words escape you?
Which is why you don't simply change the PHP version for existing customers, either you use a software, like Docker, or puphpet, to spin up the new stable versions for new customers, and eventually and slowly update older customers. I'm not suggesting they simply "__SUPRISE MOTHERFUCKERS, PHP IS NOW UPDATED AND YA'LL ARE FUCKED!__"
This is exactly how traits work in Scala. To cite the creator of Scala "traits are interfaces on steroids". Traits in PHP work *almost* like that...
Indeed. It would be interesting to look at how well a LAMP server runs on big.LITTLE. I think the A15 is roughly twice as fast as the A9 clock per clock. The A7, on the other hand, is probably just fast enough to handle the I/O constraint part of handling a request.
The words did not escape me. A stable tag on a release is not a guarantee of backwards compatibility. Did you think it was?
Not exactly, since you can't use instanceof to check if class uses a trait. without that nterfaces arent contracts
Not mentioned as often in this subreddit but it is my goto Framework as well. 
That's a nice touch.
Will this mean that from now on until the universe implodes all my code will be owned by Mark Zuckerthing?
Symfony 2 by quite a margin
This looks more like a good hack. :')
Yeah this is pretty damm good, from the home page: - Static typing - Collections - Generics - Async support Maybe I'm asking the wrong sub-reddit(!) - but is this going to be a serious sway for many PHP devs?
Btw, I have fixed the issues from that blog post for PHP 5.6 - at least if you stick to `mcrypt_encrypt` / `mcrypt_decrypt`. The generic API still allows all kinds of weird things ;)
The example code uses mysql_*, WTF?
How is this different from Spreedly? https://spreedly.com
I don't see a commit having been pushed to this in over 3 years?
Is Java, C#, or C++ ?? I can't see how it would be enticing ... I am observing that it somehow is, but people are rarely rational ... if I want any of those things I don't need to learn another language, if I did need to learn another language, I don't see why I would choose something that has existed for a matter of months over something that has existed for 10+ years. So from the grounded perspective of a user ... not so much From the perspective of a developer, there's nothing for me to do here: HHVM isn't opensource like PHP is, there's no *reasonable* way to be involved; you have to provide a name and address before pull requests are considered, decision making is currently an impenetrable black box. I'm not going to spend time redeveloping, or developing new extensions - which happens to equip you to fix bugs - for something that could break compatibility at any given moment because I have no say whatsoever in the direction the project takes in the future. As a voting developer, you don't get much of a voice, but you do get _a_ voice. That's enough for us to invest the considerable time and effort it takes to be useful in this kind of environment. As a grounded developer ... not so much ... What I am considering is the real world where I earn my living and spend my recreational time as an addict, er, I mean programmer. What I haven't mentioned is that it's technically, *brilliant* ... and it is definitely that ... but is that important !? Nope, fraid not ...
&gt; Is it bad? How could I approach it differently? This may be subjective, but If you want to test some functionality, you may have to mock the FirstProviderApi, then it may be easy if you use an injected FirstProviderApiFactory. Because the real FirstProviderApi may need to communicate with an external server for its operation. Or You can always mock the entire VideoFactory object to return a VideoFirstProvider with a mock FirstProviderApi, but this is extra work of creating a mock FirstProviderApi and using it to create a VideoFirstProvider, you have to duplicate in your tests. It may be easier to create a real videoFactory object with a mock FirstProviderApiFactory, and share it between your tests. Just a thought. That being said, do you really need a new instance of FirstProviderApi to go with every instance of VideoFirstProvider? Can you not share an instance of FirstProviderApi with all the instances if VideoFirstProvider? And lastly, I think the video entity should not hold and instance of FirstProviderApi at all. I think it should belong to service classes. &gt; Is it correct? That was what I meant originally. Please decide if it will work for you yourselves.. &gt; If so this object should be called from within the video class? I really don't think so. Because it is a data provider. Put as much logic in your domain objects as you can., with out adding external dependencies like persistence or data source. 
I went through exactly the same thing. I wrote the [Aura.Di](https://github.com/auraphp/Aura.Di) readme as a way of documenting the transition. Perhaps it will help some -- if it does not I can maybe point to more extensive DI examples.
I've never heard of that, very cool! Thanks for sharing.
I looked on google, didn't find that one. Anyway, I wrote something myself now. Was not too hard. Works fine. But thanks :&gt;
The example you give is service location, not dependency injection. If the controller (whether a function, method, class, or closure) has to receive the container itself to resolve its dependencies, that's service location. Granted, I can't see a way to do dependency injection with closures or methods, unless you `use` or pass the actual dependency directly (and not the container).
I went through the tutorial section. Looks good but I have one question. &gt; Hack errors come in multiple parts. What does it mean? I can already achieve similar results on my Sublime Text with lint plugins, use xdebug for debugging and Whoops shows the stack trace in a really good way.
&gt; The example you give is service location, not dependency injection It becomes service location if you pass around the container to every object you create. And to quote Martin Fowler.. &gt; [Dependency injection and a service locator aren't necessarily mutually exclusive concepts.](http://martinfowler.com/articles/injection.html#UsingAServiceLocator) So just using container in controller does not stop it from being DI.
I hope Yii2 is good. I used Yii 1.x for a few years but it just got behind PHP features. Have you used it yet?
&gt; either you use a software, like Docker, or puphpet, to spin up the new stable versions for new customers, and eventually and slowly update older customers. Thats just what I said... problem is slowly updating the older customers.
That also looks like Eclipse. /shudder
Do nullables work like Maybe values? I could say: "We live in a world where there is Just and Nothing" :)
Didn't really have the chance to fiddle with it as much as I would have liked, but it looks very solid, very excited about it!
You're kidding, right? &gt; Is Java, C#, or C++ ?? Why is this an argument? whenever someone proposes, or in this case implements new OO language features into PHP, there is a subset of PHP developers who immediately jump on this. Can you not see that Java, C# and C++ have language features which would be beneficial to **one of the most popular languages on the web**? &gt; I can't see how it would be enticing ... I am observing that it somehow is, but people are rarely rational ... if I want any of those things I don't need to learn another language, if I did need to learn another language, I don't see why I would choose something that has existed for a matter of months over something that has existed for 10+ years. Learning other languages is noble. However the benefit of Hack is that it leverages a lot of **existing** knowledge. You, at worst, need to learn a quarter of a language to be introduced to all the new features. New features which are objectively useful such as return type hinting, generics and scalar type hints. Whats more, because it is close to PHP it means existing large code bases can be relatively easily refactored to incorporate these new features, many of which will result in more succinct and comprehensible code, and less possibility of surprises at execution time. I would hazard a guess this was Facebook's motivation - they have a large legacy PHP code base - porting it to another language obviously wasn't an option so they went this way instead. They then decided to make it publicly available so we can all benefit. &gt; From the perspective of a developer, there's nothing for me to do here: HHVM isn't opensource like PHP is, there's no reasonable way to be involved; you have to provide a name and address before pull requests are considered, decision making is currently an impenetrable black box. I'm not going to spend time redeveloping, or developing new extensions - which happens to equip you to fix bugs - for something that could break compatibility at any given moment because I have no say whatsoever in the direction the project takes in the future. OK so HHVM doesn't conform to **your** definition of open source? Because a company who sponsors the thing and has a commercial interest in how it works, their requirements for contributing are "unreasonable" to you? If you don't like how it is managed, fork it. Ultimately open source gives you the ability make a derivative work if you don't like the direction a project is going in. Exercise your power. Don't whinge because a project's creator is exercising it's right to determine what PRs are accepted and who they are accepted from. 
everything is a poll.
I do know that for ZF3 they are planning to not inject the DiC into controllers by default anymore, so even the Zend people think even controllers shouldn't have access to it. Apparently good practise says you should know in advance what objects your controllers and their descendants will need, and in turn you likely want your controllers to be as thin as possible (and likely have 1 separate controller for each action) Seemed like a big exaggeration to me though. Would be happy if someone could convince me otherwise.
LOL. Good point. Odd that it got posted on here today...wonder why.
&gt; I use Aura more and more Thanks for the information. May be I didn't noticed you in twitter or irc. What is your good name and twitter handle?
Think of a container as a class. And on that class there are a bunch of methods each of which return a service. Many of these methods will call other methods on the class in order to create the service that is returned by that method. class Container { protected $services = []; protected function getX() { return new ServiceX($this-&gt;get('Y')); } protected function getY() { return new ServiceY($this-&gt;get('Z')); } protected function getZ() { return new ServiceZ(); } public function get($service) { $name = 'get'.$service; if (isset($this-&gt;services[$name])) { return $this-&gt;services[$name]; } elseif (method_exists($this, $name)) { return $this-&gt;services[$name] = $this-&gt;$name(); } throw new Exception("Service $name doesn't exist"); } } At some point in your program the container will be instantiated and at least 1 service will be retrieved directly from the container, otherwise your container is pointless. In this example it might be `$container-&gt;get('X')` Most DI systems make it easier replicate this kind of behaviour in various ways, some DI systems allow you to cache a class much like the one above. Classes generally don't need to access the container (and it is better if they don't) because when they are constructed the container that is creating them is also providing the other services that they use via constructor or setter injection. 
Laravel is pretty awesome. I really liked CodeIgniter but it's a shame it isn't being maintained. I like Laravel's styling. I think its code is incredibly easy to read and follow. The documentation could be better but it's not bad. I do like how Laravel takes advantage of PHP 5. CodeIgniter feels very archaic after working with Laravel.
I'd love to see some good IDE support for this. And by IDE I don't mean sublime. As sublime is not an IDE. 
lol
Preach it! It is often the case that developers with lots of experience still have a hard time teasing apart the different elements of a really bad spaghetti mess. I possess the dubious distinction of having had to deal with that kind of thing enough times that I can distill my experience into a book.
I think the problem you're struggling with is the difference between which part of your code is application and which part is business logic. When you build an application you usually start with building the core logic. This core logic is just a collection of POPO's, just plain PHP, no frameworks. You might choose to use a number of libraries, e.g. use Doctrine as your persistence library. You can write your core logic and write unit tests for it. You now want to expose your logic as a web application and you decide e.g. to use Symfony 2 as the web framework. You can then create a bundle that exposes your core logic to Symfony 2. In the services.yml of Symfony you can "wire" your core logic components together by injecting their dependencies. In Symfony 2 a Controller is a "framework" object and because of this it knows about the "container". In essence, the stuff you write in Symfony is essentially disposable. You might switch to Zend Framework 2 which means you can wire up your core library with the ZF2 service manager. 
This is a great post. I had the same confusion for a long time as well. Pimple is your answer. https://github.com/fabpot/Pimple I'm a huge Pimple advocate when it comes to diving into dependency injection and DI containers, as it's unbelievably easy to just do it. It instantly clicks when you do. Here is a typical DI Container workflow: First, you wire up all of your dependencies up front in a "flat" file (I call PHP files that aren't classes, "flat"). Like so. We'll call it injections.php $container = new Pimple; $config = require_once "config.php"; // This is a very simplified version. All of these are treated like singletons by Pimple by default in this setup. // In reality, most of them should be resolved out using $container-&gt;factory(), // while only PDOConnection remains a shared instance. But again, this was for the sake of simplicity. $container['UserController'] = function($container) { return new UserController($container['UserRepository'], $container['ProfileFormValidator'], ...view, ...redirect, ...etc); } $container['RegistrationController'] = function($container) { return new RegistrationController($container['UserRepository'], $container['RegistrationFormValidator']); } $container['UserRepository'] = function($container) { return new UserRepository($container['UserMapper'], new UserFactory); // UserFactory has no dependencies, so no need to resolve from container } $container['UserMapper'] = function($container) { return new UserMapper($container['PDOConnection']); } $container['PDOConnection'] = function($container) use ($config) { return new PDO($config[...]); } $container['ProfileFormValidator'] = function($container) { return new ProfileFormValidator(new Input); } Then in your router or routes "flat" file, or simply in index.php (basically whatever is handling your request &amp; dispatch logic) require_once "injections.php"; $router = new Router; $router-&gt;get('/user/{id}/profile', function($route) use ($container) { return $container['UserController']-&gt;showProfile($route-&gt;parameters['id']); } And that's it. You've already wired up your object graph PRIOR to calling $container['UserController'], so when you do finally call it, here's what happens: 1. UserController's callback function gets invoked 2. This instantiates and returns a new UserController object, and resolves UserRepository and ProfileFormValidator out of the container 3. When UserRepository is resolved out of the container, a new UserRepository is instantiated, and calls UserMapper out of the container 4. When UserMapper is resolved, it instantiates a new UserMapper and calls PDOConnection out of the container.. This is identical to doing this the manual way: $router = new Router; $router-&gt;get('/user/{id}/profile', function() use ($container) { return new UserController(new UserRepository(new UserMapper(new PDOConnection), new UserFactory), new ProfileFormValidator(new Input))); //FFS.. thankfully we have DI containers... } That's kind of a big pain in the ass, and if you ever want to use the UserRepository in multiple places, re-wiring all of those dependencies each time is a bit of a pain. Hence the benenfit of a container. But as you can see, the resolving cascades down through your object graph. 99% of your classes don't ever need to use the container at all. The only time you interact with the container is in your "flat" injections configuration file, and in your "flat" route configuration file, both of which occur at the very top of your request lifecycle.
Probably due to the fact it hasn't been touched in three years. Also those global functions are aliases to OO methods and the README.md does claim the global functions can be disabled.
I'm sure you've already gotten your answer, but I did a little [write-up on the subject](http://clarkf.github.io/php/ioc/2014/03/20/inverting-control.html). It struck me that there wasn't much out there in the way of concrete examples, so I came up with one (albeit a bad one). Hope this helps! 
http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html is still pretty relevant.
My take: DNS: DNSMadeEasy Email: Gmail Paid services, but ones I would rather have managed elsewhere - the cost imposed are minimal with the time savings of management and patching. Email in particular - trying to get even close to Gmail when it comes to spam filtering is a exercise in failure :) FTP I never touch - OpenSSH with SFTP is far superior in every way. 
it is a service locator, not an IoC container. Isn't it?
I agree to your point at some degree. As I mentioned earlier, this is not a big problem. My concerns are 1. You can confuse other developers in your team by using a service locator like IoC container. As you quoted Martin Fowler's article, some people just don't understand the differences between a service locator and an IoC container because their interface might look similar. Why confuse people? 2. Your controller now has access to all your classes since it has access to the container, which has all the information of your object graphs, not to mention that it is now responsible for retrieving its own dependencies. Your controller has to ask for its dependencies. 3. Injecting is much easier to understand since you actually have to define a class or interface, not a key in your container. ~~and..by re-reading your description above, it sounds like you're indeed using a service locator, not an IoC container. Do you mind posting your factories? Why do you need factories when you're using an IoC container with DI?~~
&gt; I can't see how it would be enticing ... I am observing that it somehow is, but people are rarely rational It certainly explains your bullet points.
There some diffs: 1. Spreedly ask for money, me not (:. The service will be open sourced on github https://github.com/Payum/PayumServer. It will also have MIT licence. 1. Spreedly is a third party api to your app. If its down you are down. My idea is to have ability to run payment service on your own servers. 2. As far as I can see Spreedly stores credit card details, so it must be PCI DSS certified. It costs money and create yet another place where your customers saves its credit card details. My service is designed not to store any secured data anywhere. 2. Spreedly tries to give "one nice format" of the payment details you can pass. My service instead does not abstract payment details. You still have to talk to a gateway using its own format. This opes great ability to customize things. Later it maybe abstracted.
Php community as the whole, sorry. The library already exists and modules for popular frameworks too. See https://github.com/Payum. The service I am talking could be used with any other languages. You setup it locally to your server.
From the example code provided, looks like they act more like @Nullable. I.e. you don't actually have a distinct Maybe class with its own set of methods on it.
Typically, well, it doesn't work very well. There are good reasons to use PDO, but "just swap out the db connection" is _not_ one of them, imo. As you've guessed, you could, if you had a very non-demanding application (insert generic TODO list thing here) code very, VERY generic SQL and actually make this work, but if you start to get even mildly complicated, I'd put money down that you're going to have a bad time. Each DB architecture has its own quirks, SQL subsets, and performance mandates and trying to make an application that works with all of them in mind is going to be way more hassle than it'd be worth. But it *can* be done (see the [Doctrine2 project](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html)) I just wouldn't recommend it unless you have a really compelling reason. (Look, even the Doctrine project has [known gotcha's about vendor support issues](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/known-vendor-issues.html#sqlite).)
Step 0, designing a programming language: Choose a name that's actually googleable.
If you lost a packet of chips.. Is it called a packet loss? ^^That ^^joke ^^was ^^extremely ^^horrible
The problem is that you have a handful of php devs and you decide to switch gears. Retraining to a new language is expensive. Firing everyone and rehiring is a potential nightmare, plus, you become that shitty company nobody trusts.
This. My biggest beef with the PHP community is that everyone refers to service locators as IoC containers, or DI containers, or anything that is explicity *not* actually those things.
I think the part you got confused was &gt; if B has to create more dependencies What I meant was if B has to instantiate new objects. These objects are not really dependencies, but attributes that hold instances of a certain class. Here is some sample factory code, please see if this makes sense. class A { protected $bFactory; public function __construct(Bfactory $bfactory) { $this-&gt;bFactory = $bfactory; } public function generateBsForToday() { $a = new A; $b = $this-&gt;bFactory-&gt;getNew(); $a-&gt;addB($b); } } -- class BFactory { protected $profileFactory; public function __construct(ProfileFactroy $profilefactory) { $this-&gt;profileFactory = $profileFactory; } public function getNew() { $b = new B; $profile = $this-&gt;profileFactory-&gt;getNew(); $b-&gt;setProfile($b); return $b; } } -- class ProfileFactory { public function getNew() { return new Profile; } } 
My apology for the confusion.
Agreed; sorry about that. I was being flippant reacting to off-Reddit chattering about &gt; Mr X: We need to hire a few more senior devs to add new features &gt; Me: We need to get things cleaned up so we *can* add new features &gt; Mr X: Eventually, sure What happens in Reddit stays in Reddit, and vice versa. *thwack*
But what do you do if you want to pass data to a constructor that isn't a dependency? If all your initialisation is handled completely in a bunch of closures in one file, that becomes impossible.
If your app uses exceptions widely and the exceptions thrown are well documented then I think that is better. I think that consistency in your code is key though. 
The fact that PHP doesn't support variable type hinting makes it tricky to bind a variable. Spring and other strictly typed languages do support what you want. Where do you actually use that though? I actually never had a case where I want to pass a value to a class's constructor. It's been always an object. Could you give me an example?
I got to the end of Version 1 and was immediately confused. My database connection details are in my configuration tree, which is brought into memory when I initialise my Config object. However, using that method means I have to hard-code my database connection details in the file that initialises the DI container.
&gt; Why is this an argument? The word I used to describe it is *brilliant*. Of course it has useful features. The point was, it would be a questionable decision to choose to deploy an implementation of something that has existed for 5 minutes, over something that has existed for over a decade. There are plenty of mature languages with those features, and should I need any of them I don't need to take the risk of relying on something that has been around for less time than the hair on my face. I'll say it again, it's brilliant, very clever indeed ... I am not being negative ... I answered the question from my perspective, honestly. My perspective. I can see that from the perspective of someone who only knows PHP, hack is great, it is definitely the easiest way for them to start using those advanced features which PHP lacks, but for which I, personally, would turn elsewhere ... because I have better options. The question was, is this going to be a serious sway. The question was not "do you think this stuff is useful on the web", the question was not "do you think PHP could benefit from any of this", the question was only "is this a serious sway". Even though the features it sports could be useful on the web, even though I would spend my own time writing some of those features for PHP, and indeed I have ... my answer remains the same, no it's not a serious sway. In some sense, every fork fractures software, it divides man power and ideas, and reduces momentum, in my opinion. So it's not really productive to go forking stuff because you don't like the way it's managed, I don't fork PHP even though I disagree with some of the decisions made for it, for those reasons. I happen to think one of PHP's strengths is the way it is managed, the amount of people with their foot in the door. The reason this is a great strength is because when it comes time to vote on something or discuss something, there are a vast number of people all with different goals and ideas and visions for PHP (some of them), they cover such a wide range of projects and backgrounds that everyone out there can bet that there is someone voting **for them**. We all have a single vote, this encourages discussion and forces voters to discuss with other voters (from completely different backgrounds, with different visions) to try and come to some consensus. Again, we are doing that on behalf of everyone because not everyone can be involved, even if you have nothing to do with the development of PHP, the chances are there is someone involved that shares your perspective, and they are voting and speaking on your behalf. It's not my definition, it's the definition that works for PHP; if you're going to aim to be as useful to as many people as PHP, then you had better have a better plan than a handlful of people making decisions in a black box.
Throw an exception. I think that if you throw an YourApplicationPackageException it is not a bad practice. Where you read it? I'm interested to know where because I'm using this technical and I think that is right way. Supose that you have a method that retrieve a property of a resource, in example Client. public function retrieveClientName($id) 1. return null if $id don't exists. 2. not for this kind of methods. 3. maybe the field name is blanks. 4. you need to parse the returned string. 5. an error success in PHP/SQL code. Then you can catch for types of Exceptions, leaving the catch for \Exception at the end of the catch area.
Yup, not that much though. What's your example code?
Why is exactly do you consider it bad practice to throw exceptions for errors?
Simple example: try to use LIMIT with an Oracle database.
Unfortunately I still have many unresolved questions in my head. I can't see any way to pass parameters to an object that aren't other objects. I still can't work out what actually bootstraps the application if _everything_ is in the DI container. And I still can't see any practical way to do this if I don't want to use a DI container. EDIT: I feel like I'm missing something that seems incredibly obvious to everyone else, and it's actually quite frustrating. I get the theory of DI. I just don't seem able to wrap my head around the implementation.
I'm not exactly sure how you plan to use that DB class, but you don't have to use a container for everything. I would inject PDO class through constructor (if you want to go further, inject an interface) then add something like setConfigurations() to set those configurations or make a config file then load that config file from your DB class (if you don't plan to open source your DB class separately). 
Why would I inject the PDO object? What else would I ever use with it? And that doesn't change the fact that at some point you need to get the connection details into the PDO object! For the record, everything in the repository I linked you to is in the public domain.
*convention*. For example, Laravel's config files live in /app/config directory. Kohana's config files live in /modules/application/config. Ruby on rails config files live in /config. It's a contract between your framework users and your framework. I'm not saying you should hard code the absolute path. 
Why would I hard-code connections details (data) into my bootstrap file (code)? What if I want to vary those connection details based on where the application is running (production, staging, local etc)?
your framework should have ability to detect your environment. Either by setting an environment variable in your deploy script or by detecting user computer's hostname (Laravel does this) and have a config for each of them.
How do you tell the class where the config directory is located? Or do you just do something like the following: $config = include("../../../app/config/myconfig.php") And hope it's in the right spot? (And in doing so, introduce a hard dependency on the file structure)
That depends. Kohana's index.php defines paths in the file something like below. $modules = '../modules'; $vendor_modules = '../vendor/modules'; It's your framework specific file. You can't make everything decoupled. Something has to be coupled to make other parts of your application decoupled. Laravel defines paths in /bootstrap/paths.php 'app' =&gt; __DIR__.'/../app',
You should contribute back your modifications and not keep them to yourself.
It's good to explore other people's thoughts. here's a good one on exceptions: http://www.joelonsoftware.com/items/2003/10/13.html
When it comes to Facebook, there's a possibility they've written their own ext/mysql.
PDO provides a common interface for many different databases. The databases themselves are different SQL dialects, though. Bridging the dialects is not in the scope of what PDO does. You *can* run the same queries for all of them, assuming you limit yourself to the SQL specifications. So, if you write your queries according to SQL-92, you'll be perfectly fine. Or SQL-99 or even later specifications if your databases support them. But if you're looking for more advanced functionality, you probably want to have a look at a query builder. 
Assumptions are the mother of all fuckups. I'm just saying.
This is...actually very persuasive. I really need to review how I use exceptions.. Thank you for the write up. +99999
It's very good for rapid development where you've yet to completely define you data models. I've not personally used it on anything commercial or external, but playing with it for local development has been very, very enjoyable.
They're not the same thing. You don't have to configure every single object graphs in an IoC Container, whereas you have to if you use a service locator. In addition, a service locator uses a key to retrieve a service (you can match your class names though).
I would make a config (multidimensional) array available in the IoC. The config file itself would be assembled in a versioned config.global.php, and overridden optionally in an unversioned config.local.php.
It gets you 90% there, so don't knock it. 
Go was already taken :(
Wouldn't "0" also fail that check? 
I'd say it's a moot point, they're trying to write a better PHP but carrying over deprecated features?
It is not a black and white answer in the way you raise the question. The answer is that it depends. Exceptions are (usually) for exceptional conditions, when your code cannot continue along the line it is taking. Raising an exception is bailing out of the current process and handing control back to some outer layer that knows what to do. It does what it does, and does it well, but should not be confused with instances where you expect certain conditions that can be handled immediately, such as an invalid firn field that results in the form being represented with an error message. Usually. 
Taken from http://php-di.org/doc/understanding-di.html: ### How classic PHP code works Here is how a code **not** using DI will roughly work: * Application needs Foo (e.g. a controller), so: * Application creates Foo * Application calls Foo * Foo needs Bar (e.g. a service), so: * Foo creates Bar * Foo calls Bar * Bar needs Bim (a service, a repository, â€¦), so: * Bar creates Bim * Bar does something ### How Dependency Injection works Here is how a code using DI will roughly work: * Application needs Foo, which needs Bar, which needs Bim, so: * Application creates Bim * Application creates Bar and gives it Bim * Application creates Foo and gives it Bar * Application calls Foo * Foo calls Bar * Bar does something This is the pattern of **Inversion of Control**. The control of the dependencies is **inverted** from one being called to the one calling. The main advantage: the one at the end of the caller chain is always **you**. So you can control every dependencies: you have a complete control on how your application works. You can replace a dependency by another (one you made for example). For example that wouldn't be so easy if Library X uses Logger Y and you have to change the code of Library X to make it use your logger Z. ### How code using a container works Now how does a code using PHP-DI works: * Application needs Foo so: * Application gets Foo from the Container, so: * Container creates Bim * Container creates Bar and gives it Bim * Container creates Foo and gives it Bar * Application calls Foo * Foo calls Bar * Bar does something In short, the container takes away all the work of creating and injecting dependencies.
But only if the error is exceptional. The OP did not give anything like enough details for us to advise whether an exception is appropriate. 
Routing with a container that require manual injection of dependencies, like Pimple. In the below code, the $c parameter being passed to the closure is the $container object itself. include 'autoload.php'; $router = new router; // router is not fetched from DI $container = new Pimple; $container['Configuration'] = function($c) { return new Configuration('/path/to/configuration/file'); //pass non object parameters }; $container['DbConnection'] = function($c) { $config = $c['Confguration']; return new PDO(//connection details from $config object); }; $container['UserRepository'] = function($c) { return new UserRepository($c['DbConnection']); }; $router-&gt;get('/showUserDetails/:id', function($id) use ($container) { $user_repository = $container['UserRepository']; $user = $user_repository-&gt;getUserWithId($id); echo $user-&gt;getName(); } ); $router-&gt;dispatch(); // bootstrap your application 
Considering people who work at facebook have said how bad the codebase has been? There is a reason facebook has lots of bugs. They keep trying to invent new ways of doing things (like google already has, and better) instead of just catching up to modern programming. All because they don't need to catch up, people won't stop using facebook. http://www.quora.com/Facebook-Engineering/Why-does-Facebook-not-need-to-produce-particularly-high-quality-software
Have you seen http://mnapoli.fr/PHP-DI/ ? It's a framework independent DI container. Their documentation is pretty clear, here's a writeup on dependency injection itself: http://php-di.org/doc/understanding-di.html
A wild guess, maybe they've made mysql\_* behave exactly like mysqli\_* upon compilation? 
No, actually, Thank you for reviewing my comment. Appreciate it much.
I believe it means how, like in the tutorial it traces the error for you. And points possible issues out for you. Look for instance at part 9 of the tutorial, the error is a wrong type in the return statement. Where PHP would just throw you the one Fatal error, "wrong type on line..." and you'll have to trace the error yourself. Xdebug etc help you by showing the stack. But Hack goes one further and traces plus highlights that wrongly typed variable with the issues. It would be throwing an error that says something like: 1. Invalid return type $vector on line 8 2. Variable $vector is Type Int on line 7 3. Which is incompatible with Type String on line 6 
fb/god/someone did not fix mysql\_* in PHP. What I was hinting at is that Hack &amp; HHVM could have patched the security problems within mysql\_*. Hack isn't PHP, so what ails in PHP doesn't necessarily ail Hack.
Static typing is going backwards.
Well, the exceptionality of the exception is relative. You can evaluate it with the exception class name: ValidateFormException extends \Exception and the code can do this: try { [...] } catch (ValidateFormException $e) { [...] } catch (\Exception $e) { throw($e); } And you can evaluate the exceptionality of the problem with the error code. In example: between 3000 and 3999 are warning, more than 9000 are fatal errors. Note: you can return an Exception object without throw it. 
Yes and no. No as in flexibility is the future. But clean code is nice. Static typing forces people to think more and make better code.
If it's PHP and not Hack, yes you should run. Because it can't use newer versions of PHP then 5.5. Which within a few years will be terrible old.
&gt; here are plenty of mature languages with those features, and should I need any of them I don't need to take the risk of relying on something that has been around for less time than the hair on my face. That's fine, but more often than not you as a developer don't get to make that decision. Businesses have millions of dollars worth of intellectual property tied up in PHP. They also have an existing trained workforce. As they run up against the limitations of the language, or have to do horrible userland hacks to get modern language features, they have to weigh this against the cost of changing their language. This allows them to have their cake and eat it too, by allowing a progressive move to better functionality whilst letting them leverage their existing IP. The age of PHP vs the age of hack seems like a strange argument. PHP has been around for over a decade and it shows. We live with the legacy of terrible design decisions every single day. Hack is new, written by some seemingly very smart people and incorporates concepts which are expected in many languages... Most of which have been being asked for by the development community at large and routinely voted down by the core team in their ivory tower. The age of PHP hardly makes it robust either. There are bugs and idiosyncrasies throughout - and that is ok - it is built by people in their free time and it for the most part works. But that doesn't give it a magical leg up over a younger language or implementation. &gt; The question was, is this going to be a serious sway. The question was not "do you think this stuff is useful on the web", the question was not "do you think PHP could benefit from any of this", the question was only "is this a serious sway". Sure, fine. You are entitled to your opinion - but the supporting arguments you made for that opinion simply don't stack up in the real world. You suggested using other languages which isn't realistic in a lot of cases (if it was, Facebook would never have bothered developing this at a cost of one can only imagine millions of dollars), you raise some FUD about how it is a "black box" because a company controls it and you can't get involved (which is inaccurate because you can get involved, you just can't make final decisions or be part of that final decision making process..which is true of pretty much any opensource project with a BDFL) &gt; In some sense, every fork fractures software, it divides man power and ideas, and reduces momentum, in my opinion. So it's not really productive to go forking stuff because you don't like the way it's managed, I don't fork PHP even though I disagree with some of the decisions made for it, for those reasons. Whilst it is true that forking fractures a development community, forking because of disagreements is the democratic process that opensource promises. If you don't like anything about it you are welcome to run your own flag up the pole and see how many people follow you. The opensource landscape is littered with examples of it. Yes communities get fractured, but projects that are worthy of survival, in general, are stronger for it. 
if I need to check the type of a variable I do it using is_* functions and get_class. If I don't need it I don't want anyone to force me.
so you want to write a bunch of conditionals to check the type of a variable or the type of an object.. rather than just declaring up front "this will be a &lt;thing&gt;"? Nobody is actually forcing anything on you either. The typing is entirely opt in.
Most of the time you know what a variable contains anyways. But sometimes unexpected things happens, or another coder changed something. Then you can't be sure anymore.
Just replacing mysql_query with mysqli_query doesn't make you instantly protected from SQL injection.
Thank you, I'll check it out when I have free time in the weekend. Such a medium project awaits me but it'll have a completely new UI and logic will be changed/extended in 50%+ of the project plus there are a lot of bugs ... do you think refactoring is the best case scenario for such a project? It's more like a new system.
&gt; I’m also, looking at an article that is introducing a new language that’s based on PHP – it’s called ‘Hack’, and it’s developed by the mighty Facebook. I just want to let you know beforehand, nobody is ever going to program with ‘Hack’ and it’s gonna die off so quickly, the only time you’ll remember it exists is because of this blog post! Classic.
thatsthejoke.jpg
This is why you throw multiple types of exceptions - so the code layer you are in doesn't have to worry about it. If you get a wrong type of object or something, throw an InvalidArgumentException (or whatever you want to call it) and catch it at a layer higher up. This is why there are multiple catch blocks allowed after a try - so each layer of code can catch the types of exceptions that layer knows how to fix, and any uncaught exceptions bubble up until they stop execution.
I get a little confused when I see PHP frameworks talking about file sizes. File size is sort of irrelevant with a server-side library. Does that mean their leaving out tests, just so they don't make their library larger?
&gt; You don't have to configure every single object graphs in an IoC Container If your IoC Container doesn't support reflection-based auto-resolving, then yes, you do. Unless you're just using simple value objects, then any true dependency must come from outside of the class that's using it. That's where you have to wire it up.
Service location is something you DO. It is not a thing. If you inject an IoC container into class that you need, and dynamically pull out the dependencies THROUGH that container, then that is service location, and it's an anti-pattern because your classes are getting more dependencies than they actually need, and it's not even clear what their true dependencies are. Demeter violations all over the place. Meanwhile, the concept of service location in a "flat" file doesn't exist. It can't exist. Your flat injections.php file isn't a class. It has no dependencies. It is a configuration file. Using your container like an array in this context is NOT service location.
No, it is not a service locator. If you were to inject the instance of Pimple into all of your classes, then you would be using it ***as*** as a service locator. This is service location: $container = new Pimple; $container['...'] = function() { .... } // Registering lots of classes 1:1 in the container, each getting an instance of $container injected into them. class UserController { public function __construct($container) { $this-&gt;container = $container; } public function showProfile() { $UserRepository = $container['UserRepository']; } } THAT is service location. But my example did not do this. It resolved dependencies OUTSIDE of the class calls, and then injected them into the client class. Service location is when you resolve those dependencies through the container INSIDE of the client class. My first example above is Inversion of Control. This example here is Service Location.
Time will tell if this has the legs to stand on its own. History has shown that not even the backing of a huge corporation like Facebook on its own is enough to sway market momentum. Neither are language improvements; Dart/Typescript have so far failed to gain much traction over javascript despite being backed by Google/Microsoft. Early days I know but so far I'm not really seeing anything good enough to uproot PHP considering how deeply ingrained it is. 
I think of file size as a convenient heuristic for cognitive load (if that's the right word) when dealing with the package. More bytes ~= more code ~= more to comprehend ~= more to be responsible for.
Fair enough, and you're absolutely right. We just need to be careful not to confuse the reasons. For server side, your reasons are bang on. For client side, it's much more about performance.
Never even thought of returning a result object that is brilliant! Thanks!
Some things I like to do: * Have a function return an empty array on success, or an array of error messages on failure. This allows multiple error messages, but you cannot have any success messages. * Wrap the return value in an array where there's a `success` property which is true on success, an `error` property containing details on the error(s), and a `data` property containing the successful data. * Throw an exception on error. Although it's a bit tricky trying to include any complex information in the exception itself for help for resolving it.
I've worked with Dwolla, they only take 25 cents per transaction over $10, so that's nice. But they are a pain because iirc the purchaser needs an account with them (this may have changed since I did stuff with them a long time ago).
Fair enough, but I hoped it would answer some of your questions: &gt; How do classes access the DI container? How is it initialised? &gt; For that matter, how does dependency injection work if you're not using a container? If none of your classes are supposed to instantiate their dependencies themselves, how do classes ever get instantiated? I wanted to state that that's the role of the "application" (or framework) to use the container, and create the controllers. By creating the controllers, the needed services and repositories are also automatically created (by the container). So I'm not sure I understand what is your problem: are you using a framework? Then it should be the framework who create controllers using the DIC. If you are writing your own framework, anytime you need to create a controller, use the container to do it. A real life example is really simple: the router will look for the controller (based on the URL), and instead of creating it, it will get it from the container.
Sounds like you're looking for an ORM. You might want to check out http://laravel.com/docs/eloquent or doctrine as some here have mentioned.
I totally agree, the name is TERRIBLE; going to check it out though, to get a feel of it. :)
If this problem landed in my lap I would recommend the following. Why don't you make it so your users purchase credits? Buy 10 credits worth $10, or what have you. It'll make your accounting and your code a bit more complicated but the benefit to your bottom line is gigantic. You're going to be looking at potentially losing 30% of each transaction over 3% ( by my example, less if you have bigger bundles of credits ) if you stick with tiny transactions. I've yet to encounter a gateway that doesn't charge per transaction. The barrier to entry for the consumer isn't really that huge. What's $10 after all? On the flip side if you're doing $10000 in sales and lining your gateway's pockets with $3000, that's a pretty big issue.
Maybe, maybe not. As I say above: &gt; I think of file size as a convenient heuristic for cognitive load (if that's the right word) when dealing with the package. More bytes ~= more code ~= more to comprehend ~= more to be responsible for. Regarding the complexity of the API, file size can also be a convenient heuristic for that as well. A "larger" package has more opportunity to expand the API. Of course, you'd need to dive in to find out for sure.
I meant classic ignorance. I completely agree with you.
The same question applies to 'How does ODBC help me switch between different database vendors'. IME there's a *lot* you can do with querying and modifying data in SQL that'll work across everything from SQLite to MimerSQL and Oracle. But the difficulty comes in the details and when the different SQL implementations start to diverge. One of the biggest pains for me was doing LIMIT style queries with Oracle; the LIMIT suffix makes it really easy, but other databases this is best done with subqueries. Using PDO behind and a query builder which supports different SQL dialects will give you the power to use many different databases, but it also limits you to the expressiveness of your query builder and the lowest common subset of functionality available across all databases which you support. One of my personal pet peeves are SQL query builders and ORMs which state they support 'many different databases', but when you RTFS it turns out they only support SQLite, MySQL and if you're lucky PostgreSQL. Where's the FirebirdSQL, Oracle and MSSQL support?
Ah. 
I've played with Hack a bit, and I find it very nice. I may be nitpicking, but I don't like that the examples encourage the use of .php file extensions for Hack code. Why? Because the .php extension indicates a file with PHP code. Hack !== PHP. HHVM may be able to run both PHP and Hack, but the Zend implementation can only run PHP. I can see the argument that HHVM allows gradual refactoring to Hack, and re-using the .php extension makes sense there. However, I'd think clean Hack code bases should use something else.
"Most of which have been being asked for by the development community at large and routinely voted down by the core team in their ivory tower." &lt;-- Sooooooooooooooooooooooooooooo TRUE.
What's service location? Is this something you just came up with or is this well known term? I've never heard of a service location pattern in my life. 
If you have some runtime dependencies to inject through a constructor, then yes, that becomes harder to do. In situations like that, you will actually want to use setter injection. Generally speaking, this is good practice anyway - scalar values represent states your objects should be in, and mutating your object's state through setters is considered good practice. If your object is only ever going to have one state at calltime, then by all means wire that up ahead of time as a constructor argument. If your object's state will vary at runtime, then you mutate it through setters after it has been built and injected into the client class.
I guess the author might mean a server for an internal app or something with a very strict firewall around it.
Could Have Fixed != Has Fixed :P I agree though, that it is possible they have fixed or even replaced that extension entirely internally.
My beef with the problem is less about the naming confusion and more about the fact that *this is not dependency injection*. If you're worrying about, or even considering, your dependency graph... you're doing it wrong.
I assumed that we're talking about DI frameworks in general. If we're talking about IoC container outside of DI framework context and you're referring 'IoC container' as a true container that holds something, then you're right.
The modifications are often specific to our environment. For example, I'm using PHPExcel and needed to remove their autoloader since we already have our own autoloader and their method of defining it didn't work in our environment (an issue with our environment rather than HHVM itself). JavaScript libraries need to be modified to wrap them in a module (all our JavaScript is in RequireJS-style modules) There is a large open source culture at Facebook. We're always thinking about which parts of our work can be released as open source and frequently contribute to open source projects. 
I get where this author is coming from. I have come across many, MANY developers that rely on framework features for EVERYTHING except if-statements, for-loops and such. Anything beyond that which is not supported by the framework out of the box is where they get stumped. Frameworks should be considered just what it's name implies. Relying on a framework to think for you and provide application logic is silly. Features that come pre-packaged with a framework are a bonus. A developer should still be able to think, reason and BUILD application logic and features as required.
thatsthejoke.png 8-bit indexed colors in more appropriate and efficient for this type of cartoon image.
No? http://us2.php.net/manual/en/function.trait-exists.php
.... do you want a medal or something?
Was you expecting reddit gold for this pathetic waste of 38 characters ? 
No, the first example is not an example of Inversion of Control. I thought programming community agreed that we use DI instead of IoC. The fact that your function, method, or a class is asking a dependency to an object doesn't make it as IoC or DI. You need to inject them for your function, method, or class. It's tell, don't ask principle.
Does anyone know if we can use HHVM as an option on travis?
Rob Allen did a great talk at PHPNW13 last year, using Pimple as the container. [Slides are here](http://joind.in/talk/view/9295) which do lose some context without the talk, but have some good worked examples in, taken step-by-step.
That does something totally different. It checks if trait definition exists, not if a class uses it
Can you tell why this particular way of doing injection ( need method ) is better than the normal containers like pimple or php-di?
I feel like this was the only good answer provided here.
Null is not a mixed data type, null is "no data" and even in statically typed languages you can return null instead of any instance. I hate when people return 'false' because that is definitely a different data type 
There ARE db abstraction layers, but PDO isn't one. I know at one point I was using ADODB. However, you have to learn to use the abstraction layer instead of straight SQL. Then the abstraction layer will take care of the differences between DBs. Of course, if you use a feature that your particular DB doesn't support, it may have to be emulated -- which may lead to much slower performance.
&gt; A possible self-test to perform to see if an exception is a proper way to handle a error condition is "would it make sense if this problem bubbled all the way to the top if it wasn't handled?". If it does, an exception is probably a good solution. Ask yourself this: Let's say you had an exception that would NOT be appropriate to bubble all the way to the top. Say, "Lookup record not found." If that condition wasn't handled properly in the upper level logic, would you rather have a return code that was silently ignored, or would you rather have an unhandled exception screaming about the fact that it was unhandled? That's why I like exceptions to handle any out-of-band conditions. They can't be ignored unless you specifically code to handle them. &gt; This leads to catch-all handlers, leaky abstractions and several other possible issues. Well, don't do that. :) You have to have policies in place that forbid catch-alls, unless they are for a specific purpose like doing clean up within a function, and then reissuing the exception. Edit: I feel like I should add one more thing. We HAD the world that you advocated, more or less, in the early days of C. Everything was a return code from various functions. And what happened? Programmers would be lazy and not check the return codes, and that was the path to ruin. Return codes are too easy to be lazy about.
It doesn't. It's very easy to write an abstraction layer on top of, though - and that's what you should be doing to easily swap vendors.
Yes. But I Just wanted to know the author's pov..
I don't think you understand C++. It not only has exceptions but they're fairly widely used throughout its standard library. 
I didn't state that it's a fact. I'm not a C++ person. It's just my experience with people around me.
If you don't care about performance, nor ranking of results, you can always use array_filter.
You will need an MTA in order to send mail, but reddit isn't the place to ask these questions your better off on stackexchange
Not sure why the OP wants a php/database-only solution, even if it performs much worse than a dedicated search plattform, e.g. elasticsearch. But if that's the goal, the only option is to use full-text search in the database. Mysql/mariadb now support FTS for innodb (yea!). PostGres has FTS too, but I don't know anything about it. 1 - https://dev.mysql.com/doc/refman/5.0/en/fulltext-search.html 2 - http://www.postgresql.org/docs/current/static/textsearch.html
I don't understand why people want these. When I consume websites, contact forms are a major turn off. I want to actually send an email, not trust some system to send an email on my behalf and have no record or proof it was actually ever delivered. 
We also provide some automated conversion tools that can help with this process -- the exact tools that we used to convert Facebook's codebase. Information on how to get the typechecker running on your code, and then how to use those conversion tools, is in our docs at http://docs.hhvm.com/manual/en/install.hack.php. If you have any trouble, jump into #hhvm on Freenode. We're hopeful that the conversion tools will work as well externally as they did internally, but if they don't we'd love to hear from you to see what we can do to improve.
This was my fault, sorry. I was going just for clarity and brevity of the example. I'm well aware that the mysql functions are deprecated and there are many better options, but it's still the most familiar to the most people, and the least number of lines of code. (mysqli would probably only have been 2-3 more lines, but we were super space constrained.) And it didn't really matter for that particular example, the point of which was the missing null check on db failure.
I don't want to be a douche but it didn't blow my mind at all.
I already tried that with Stripe, no such luck (although they are saying such benefits for micropayments are in the works). PayPal UK has something that could be good for this, still need to do my research on PayPal in the US though. I'll have to check with the others. Beanstream has a small percent for "card present" transactions. I wonder if there is a way to process things so we can get that rate even online?
We're working on something along these lines, but unfortunately it won't work for this service we're offering. We offer a service that people 'wish' they'd only have to use once or twice, so they will likely not buy a larger package. 
I've never seen a place that DIDN'T work that way. If you find one let me know.
http://www.php.net/manual/en/function.mail.php The absolute simplest way to use the PHP mail function is: &lt;?php mail('mail@jordandyeager.com', 'subject', 'message'); ?&gt; Try the above with a blank file called test.php and work your way into having it all the way coded. Also make sure you have the form set to "post" the values into the page that handles the emailing.
&gt; I prefer needs because it allows for natural OO extension. For instance a subclass could decide that it also needs a couple of other objects than a parent. I am not sure I would want that. I would like to read the entire dependencies of a class from its constructor or its attributes itself. Another thing is that, my classes will need to know the key to which the dependency is assigned in the container. Why would I want the classes to hold this information that creates unnecessary coupling.
So what happens if you want to pass in a different type logger into Worker at runtime?
Interesting concept. I like the documented api for its simplicity. Your method signatures could stand to have a scope defined ('public function' vs 'function'), and docblocks would be nice too for generated documentation. Do you have any example scripts/apps set up?
Let's take a step back. What are you ultimately wanting to do? What do you want to end up with? 
Well..looking at the doc and examples, I don't think the author is trying to say this is DI. I think he/she just think that an IoC container doesn't have to work with a DI. Since IoC == DI (most of programming communities used to call the same behavior either by IoC or DI), I expect to have DI when I see IoC container, but I don't think other people agree on that. With that in mind, this type of containers do not support interface injection..i guess.
If you want advice on code you should show what you have. Any number of things could be wrong.
The problem is that using annotations are wildly accepted and annotations do not couple things in the code level. Forcing classes to add a specific method in your code base is not a good idea..in my humble opinion.
While i too am not a huge fan of contact forms, when you just have to use them, there are many ways to skin that cat. This one (http://phpmailer.worxware.com/?pg=tutorial) was easy for me to grasp when i was still new to PHP. Good luck!
Well I can appreciate the fact you're being vague. Maybe your price-point is too low? If the demand for your service is that low your price point should be high to reflect that. If your competitors are already pricing you out of the market, maybe there's some way you can glean how they're doing it and not eating a 30% cost. This might be somewhat outside of consideration, not sure, but accepting cryptocurrencies could potentially mitigate some of your costs. Edit: Not sure what your value-prop is here so I'm kind of stabbing in the dark.
it wasn't really directed at you, it was more or less an addendum to what I said in response to /u/augustohp with the addition to what you said
hah yeah, you'd think you don't have to say that. but go ask people about their favorite IDE and you'll get an odd number of people saying sublime :P oddly enough there's a lot of people comparing &lt;insert IDE&gt; to sublime. I'm not so sure people know what an IDE is these days!
here, have a packet of sublime http://imgur.com/OXgd17G
PHP introduced is_a and gettype in 4 with inheritance. instanceof in 5 along with some typehinting. Including type information has always been the path forward. Any sizable project (500k lines+) will have a large amount of code dedicated to testing and ensuring behavior across types (both expected and unexpected). The more type information you have the JIT compiler check, the less test cases there are to handle. It's really a big deal for any nontrivial project, which is why most PHP developers don't think it's important.
Travis has had HHVM support for a while. Not sure how often they refresh the worker images though.
Is there a reason why you don't want to rely on a daemon or non-php/database stuff? Elasticsearch takes no more than 5 minutes to setup. It's really a wonderful piece of software. There is no match for it in the PHP world - not even talking about performance here, but on functionality. 
We're a brand new service and there are actually zero competitors in this space, not a single company doing what we're doing. The first instance of our service will be free, but we will charge for every other use. We simply can't charge more because the value doesn't warrant it, but for $2, it's kind of a "I have nothing to lose, but potentially so much to gain"... this is all subject to change if our model is proven though. I just did some footwork, Paypal offers micropayment processing for 5% plus 5 cents of every transaction, that blows everything else out of the water by approximately 20 cents per transaction. I am slightly reluctant to use PayPal though, as we do want to keep everything 100% on the site. May be a good first step though. 
Well at least you can use paypal up to the point where you validate your model, then you might explore a price increase to support another gateway at least.
It sounds very interesting, but I'm not quite suer how it works exactly. Could you add..um..more examples? I'm actually using something similar (Zuora). Is this library can be a replacement of a service that supports multiple gateways?
Traits are not abstractions in PHP, you cannot depend on them
I'm @dragonmantank on Twitter as well. I think we've talked maybe a handful of times on Twitter, and I don't think I have any Aura-inspired tweets. I did have a bit on Aura in my SunshinePHP talk though. 
This is true. I'm now looking up exactly what the difference is between simply setting up some sort of embeddable Pay Now button, versus having to dig deep into the API and create something completely customized. 
I'm not sure how it is now but it used to be that if you used their API they charged you a monthly rate.