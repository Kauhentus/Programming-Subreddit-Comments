Can anyone who upvoted this convince me that php websockets are superior to nodejs? I played with both options a few months back, and nodejs was, imho, hands down the more robust choice.
I realize I did a very bad job of explaining this. It will but the images and css files linked to in the file I'm trying to include don't display because the images and stylesheets aren't in my current working directory. Is there a way I can make the stylesheets and images load without moving them all from the previous directory? 
TLS support for Ratchet is planned, but not done yet. The main problem being that PHP does not allow to put secure sockets into non-blocking mode. However, as a workaround you can use [stunnel](http://www.stunnel.org/), so there is a good solution available.
You aren't supposed to be including css files in your php code, that's not how include works. Unless you are doing something like this: &lt;html&gt; &lt;head&gt; &lt;style&gt; &lt;?php include 'style.css' ?&gt; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; etc etc &lt;/body&gt; &lt;/html&gt; in general, you are going to want to create a link tag to the stylesheet in your html. Using PHP's include keyword does not auto-generate link tags for css files in the page you are using php to create.
since when are absolute paths the way to go? If you have a project it's nice if you can look at it online and have it locally in another folder.. the folder will now destroy your whole layout and maybe some links too.. If you have the following structure: layout/css/main.css layout/img/a.png you can reference a.png by: "../img/a.png" .. where is the problem to use this syntax? .. now if you decide to rename the folder layout to "dark_layout" there wouldn't be any problems too So please tell me why you propose absolute paths.. I've never seen a problem were relative paths are a disadvantage.
I edited the OP to better reflect requirements....maybe this will help clear up some of the confusion. 
Also [/r/phphelp](/r/phphelp) for easy to google trivia.
Good to know, thanks. I'll have a look.
Not fastest, but easiest and smartest in my opinion :) [CDom (simple HTML/XML/BBCode DOM component)](https://github.com/amal/CDom)
assuming you are using php 5.3+ use this to suppress the error messages error_reporting(E_ALL ^ E_DEPRECATED);
Honestly, I suggest you stick with asp.net, c# or something. Not sure what the job market is like overseas, but here in Aus most of the good jobs I've seen advertised lately are for asp.net devs.
This is nice when you don't mind kicking the problem forward.
My asp.net/asp.net page is hosted with godaddy. Even though it's windows hosting they still use myphpadmin. A php dev I know (who doesn't know asp) had phpmyadmin setup on a flash drive somehow so he could edit everything, anywhere. Are you familiar with this n know if/how to do this for asp pages?
Most ASP.net jobs are for C#, not vb. I regret that I was taught PHP and not ASP.net. My entire career so far has been developing in PHP, and there have been enough annoyances with the language to me recently that I'm considering learning C#. The unfortunate problem here is, that I've had about 5 years experience programming in PHP, and no industry experience using C#, which makes it hard to get another job, even if I learn it well before hand. From what I can see, a lot of government and jobs with large enterprises these days are C#.net. Though I've seen a few government jobs going for PHP devs recently who know about Joomla. If you look around, you can find a lot of hosts that offer both a ASP/MSSQL and a PHP/MySQL option for the same pricing plan.
try chrome. ff's js engine is too slow.
All existing PHP websocket servers have pretty terrible performance in production, because PHP doesn't support threading (so the server can only service a single client at a time) and evented I/O. That said, if you do things right (use a multiplexer, and a message interface, rather than straight WebSockets) you can later still dispatch events to a pool of PHP workers using some middleware (like a message queue/broker, and the evented WebSocket server of your choice).
There's no tip here, you just need to replace eregi with the appropriate preg* code. If you paste the actual code here you're replacing, we can probably tell you how to address it.
Add a date to the 'additional email headers' argument. Some email clients will show a date from decades ago, while others will time stamp them with when they arrived, as opposed to when they were sent. $dateStamp = date("D, j M Y H:i:s"); $body = "Name: $name \n\nEmail: $email \n\nSubject: $subject \n\nMessage:\n $message"; $recipient = 'email@gmail.com'; mail($recipient, $subject, $body, "Date: $dateStamp\r\nFrom: $email\r\nReply-To: $email\r\nX-Mailer: DT_formmail"); EDIT: No date needed for the one going to the text message address.
Thank you for your helpful reply.
Maybe I should have said I'm using ExpressionEngine? That probably helps no one here. I might just need to update that. Never done that either. This site was left to me. I though I knew what I was doing but I really only know html and very little java. Anyway here is the offending line, 342. if (ereg("^$type", $sql)) I tried changing ereg to preg and it got rid of most of the errors but like I said. I have no idea what I'm doing so I changed it back because I got a new error a few lines down. A line that had only { on it. Let me know if you need more code. I appreciate anything you can do for me. This is really annoying.
I found that file earlier and found the offending line. SQLi? What's that?
I found this page earlier and tried to do what it said. I ended up with less errors but I had new ones. Reverted. I don't know. Explain like I'm 5?
Awesome, I use this all the time but I had no idea what the technical term for it was. I saw it in someone else's code and realized how useful it is. Hell, I was just wrote some code and used it about 10 minutes ago. 
well thank you for the input. i will make a page w/ php probably, maybe asp.net/c# after that. why do you recommend c#? i appreciate the input from someone in the industry, i have never had a web dev job and do not know what the industry is like.
I was going to say the same thing about their shitty site. Why the hell do designers these days think it's necessary to not use the client's native scroll bars? It works like shit with the scrolling feature of my mouse.
OK, so here's the deal. If you want fast, you need something C-based, and in PHP that means libxml2 based. You have 3 options: * [`ext/dom`](http://php.net/dom) — A full-on DOM implementation. It supports loading some pretty badly mangled HTML through the [`DomDocument-&gt;loadHTML()`](http://php.net/manual/en/domdocument.loadhtml.php)/[`DomDocument-&gt;loadHTMLFile()`](http://php.net/manual/en/domdocument.loadhtmlfile.php) methods. * [`ext/simplexml`](http://php.net/simplexml) — A compliment to the `ext/dom`, for parsing and handling... wait for it, **simple** XML documents. What's interesting, is you can flip-between `simplexml` and `dom`, using [`simplexml_load_dom()`](http://php.net/simplexml) so you can do: $dom = new DomDocument(); $dom-&gt;loadHTMLFile($file); $sxml = simplexml_load_dom($dom); Now you have a simple — but very limited — interface to your HTML document. * [`ext/xmlreader`](http://php.net/xmlreader) (and it's twin: [`ext/xmlwriter`](http://php.net/xmlwriter)) — A super fast XML reader, using expat-type parsing. But it doesn't handle HTML. You could however, run your HTML through [`ext/tidy`](http://php.net/tidy) and turn it into XHTML, which xmlreader could read. 
This is very true when you're dumping the contents of a file directly out. My solution is better geared toward additional parsing (css minifying/js minify). Thanks for providing a better solution. :)
FUCKING GENIUS! Thank you so much... but what happened? Did my host update php or something? As relieved as I am I still feel like something is wrong. I need to update my EE.
&gt; To deliberately disable SSL’s protection of user data... This is a bit of an over-dramatization of what's going on in this curl example. The verify_host and verify_peer parameters add a layer of security, but they can also be a hassle for the many public and private websites that use self-signed certs or no certs at all. Yes, it's dangerous to get private information from an unsecured and unknown source, but if the source is secured by a self-signed cert and you trust it then there's no real harm. Perhaps it's an internal company website that you just don't want to pay Verisign for a cert. I would propose that since the website is hard-coded into the curl URL, it's not so dangerous to ignore certificate verification. Full disclosure: I'm the developer of the [Kurl](https://github.com/ajbogh/Kurl) php wrapper.
&gt; but if the source is secured by a self-signed cert and you trust it then there's no real harm You must still verify the certificate, no matter if it is self-signed or not. cURL allows you to plug-in certificates on an application layer (CURLOPT_CAINFO and CURLOPT_CAPATH). Just feed the corresponding certificate to verify against.
So... where are the view models? You did say flexible, right?
&gt;PHP doesn't support threading Fair enough. &gt;and evented I/O What? How so?
At their heart, most PHP WebSocket servers are based on a stream_select loop. For example, here is the one at the heart of Ratchet: https://github.com/react-php/react/blob/master/src/React/EventLoop/StreamSelectLoop.php stream_select is pretty shitty to work with. Some of the libev extensions I hear about may make it better.
Yep! I have a templating system of sorts built around it. I use custom tags, such as &amp;lt;component type="componentType" instance="componentInstance"&gt;&amp;lt;/component&gt; or &amp;lt;section textfrom="column1"&gt;&amp;lt;/section&gt;, and a lot of jQuery-like code to do the replacements. Not the fastest, but works. Edit: alright, downvotes of disapproval. Anyone care to elaborate why phpQuery is getting frowned upon? Also, i know my method is slow and stupid, but boy is it comfortable.
... Yes. To display an image: &lt;img src="/remote/path/to/image.jpg" /&gt; To make use of a CSS file, put this in between the head tags: &lt;link rel="stylesheet" type="text/css" href="/remove/path/to/style.css" /&gt; You only include files if you want their contents to be rendered as HTML... If you include an image it'll just look like disgusting bits of text that your web browser has vomited out onto you.
Object oriented programming makes sense to us because it lets us represent real, physical stuff as code. People are entities in the world and every one of us has particular attributes. We can emulate this in code by containing these attributes in a class. People also do stuff, so do classes. There is no better way to organise these different types of entities than to separate them into categories, eg classes and in larger projects, namespaces. Functions alone do not suffice because you cannot instantiate a function to have it's own set of attributes after you have called it. They can only return one thing, unless you rather disgustingly return an array (or an stdClass, which you would obviously never do) of the attributes which you would normally just access from the class. For (very) small projects you are right - It does make sense to not use classes, but for everything else you would appear insane. 
Perhaps buy it flowers, sometimes helps when they are feeling depreciated.
For large XML documents I'd recommend using a stream with XmlReader. Though XmlReader is tad more annoying then DOMDocument in my opinion.
Agreed for XML documents, but Davey pointed out the issue with xmlreader elsewhere in the comments in this specific case: it doesn't have a HTML mode like DOMDocument.
Parsing HTML is always a big issue, DOMDocument certainly isn't the route to take unless you know the HTML you receive is valid XHTML or so. There is libtidy, but thats another complicated and ugly argument. 
Captcha without graphics? What? I'm aware that you can have audio captchas, honeypot captchas and the like, but I think there's some serious clarification needed here. 
Yes, my bad, I meant instead of text, perhaps colored boxes or something which computers cannot simulate, I don't know perhaps an image that users could click on? What have you see around which works and isn't as confounding as wobbly graphics/letters?
There's no way I can tell you from looking at the frontend how much will be broken. The best thing you can do is make a copy on another server somewhere, get it running properly, and then try the upgrade on the new dev copy to see what breaks.
Well, other async I/O systems (Python's Twisted, for example) also use select(). But yes, libev etc would be better.
Great comments guys, :) I'm just really trying to come up with something that's not so patronizing and 90's. 
Basically you've hidden the problem. The problem is just hidden, nothing was fixed and nothing will get fixed with this mask. 
Project Euler is pretty-well exactly what you want. It does involve some math, but otherwise it's all about formulating the logic to produce a result. Beyond that, the only way to learn PHP is to use it. I've been mentoring new programmers for a while now, and am actually one of the founders of the PHP Mentoring organization. When I'm teaching new programmers, I put them to tasks such as Project Euler, because it forces them to examine their understanding of the logical structures of PHP, and also forces them to learn how to apply newly-learnt knowledge (in Euler's case, math) to a programming problem. If you're already a capable programmer, then I would suggest just trying out new frameworks, exploring the numerous extensions available for PHP, and so on.
So someone developed a piece of code recently using regi?
Yeah, it's not meant to solve the underlying problem. But if the error messages render the CMS unusable for the client, it would at least help regain usability and allow the client to continue making content changes while the error is fixed.
I will admit that I'm pretty much *always* doing local development with a full server stack VM. Once you get in the habit, it's pretty hard to go back to the "old fashioned" way. ;)
I've been using [sublimephpcs](http://soulbroken.co.uk/code/sublimephpcs) quite successfully for a while. It includes support for linting, code smell &amp; style detection, etc (most of which I disabled from running automatically, as it gets annoying). With the linter running on save, it's pretty easy to catch syntax errors early on and in an [unobtrusive manner](http://i.imgur.com/VE2Kt.png).
That's entirely based on your language skills and arguably nothing to do with the language itself. I'd consider myself advanced in PHP and junior/intermediate in the other languages. Writing anything in Python or Ruby is a lot of googling. Meanwhile PHP is a stream of consciousness. From a code perspective anyway, I've never seen something I couldn't do in PHP just as graceful as someone has in Ruby or Python.
And that worked out so well for Sony, didn't it?
Awesome suggestion!
Extremely easy to defeat once you know what all the glyphs look like.
&gt; The lack of virtualenv/rvm is definitely a big drawback too. [Composer](http://getcomposer.org/) is getting there :) Not for actual php versioning, but project-isolational package management is nice :)
checkout. #doctrine at irc.freenode.net
Ask the user a question. Depending on the form, you could ask them for information from the form. For example on a registration form you could ask for the first letter of their first name and the last letter of their last name. You can also just ask questions like "What does an apple grow on?" or "What is two and two put together?"
added an answer, hope that would make things clear 
Well as someone who followed a similar path (although started as C++ programmer-I can't design to save my life) and who is in his late thirties I feel your pain mate! I have used MVC for a while now primarily through Joomla CMS/framework and is indeed a nice way of code separation even though people make MVC as something life changing which it is not. What I find more exciting especially as I work with some sites with get heavy traffic is the steady rise of NoSql databases (currently using MongoDB- a nice NoSQL db that is quite noobie friendly) I also find I am using more and more ajax as it generally improves user experience. Lastly I am also creating a lot of web services which ultimately make it easier to use in multiple devices as well. Just remember one big positive change. I am old enough to be programming before the web kicked in and meant buying books and books where as now we have wonderful sites like stackoverflow etc. Regarding tools, I use php designer nice liteweight and fast and currently investigating LI3. MongoDB for NoSQL and have looked into AppFurnace and phonegap as they are cross device and allow you to program for multiple devices. Hope this helps, us "Oldies" should stick together!!! 
Why don't just google the bullet points and read up on current technologies and patterns? Half your points aren't even php related but demonstrate lack of common knowlegde. 
Yup, quite impressed with React. 
There are heaps of different MVC frameworks out there. I find CakePHP's implementation of it to be superb, and the documentation is excellent, complete with tutorials and code examples. At the very least, it will show you how an MVC architecture is supposed to work. 
I personally never liked Zend, should I? Why Zend? The most I've done with zend is port a few libraries (Mail Class, etc...) to my own framework. Also regarding Micro frameworks are they mainly used for small apps? Right now I've been using a [custom framework](https://github.com/Lamonte/minwork3/tree/minwork3.0.0) I built w/ php 5.3 namespaces really light (basically just the framework w/out helpers, libraries) Would love any response you give. Been coding for 6 years and it feels like I still know nothing 
&gt;Been coding for 6 years and it feels like I still know nothing You have my sympathy
Even if the url is 'hard coded', DNS poisioning, man in the middle, and other attacks still provide a vector. The proper thing to do is to keep a copy of the self-signed certificate locally (or whichever was used to sign that, etc, etc) and use that to verify the certificate, as timoh mentions. verify_host/verify_peer should only be used for development/debugging, not as part of any production system.
&gt;In the old days, you dealt with browsers. Now you also deal with diferent plattaform and devices. It's not really any different. If it's a web page then you are just dealing with different screen resolutions. You can either build multiple sites (eg m.reddit.com) to target, or you can look at responsive design, which is nothing more than selectively applying css rules based on screen size. &gt;Ten years ago you got away with some spaghetti code and procedural approach. Today you have Object oriented code, Design Patterns, MVC and frameworks. Well and also the latest PHP functionality OOP, you need to learn this. Design patterns are somewhat overrated, they're mostly just describing what programmers tend to do naturally, I can't even think of a time where I've actually heard someone say "use xxx pattern", it's mostly just Fowler and all those bloggers who repeat everything he says ad nauseam. MVC is good, helps to think of it as simply separation of concerns, but also helps to think of request/response frameworks (eg symfony) and look at it in terms of a router, a controller, and some "model" that can produce a response (as this is actually what happens). PHP functionality, just google some articles, the major changes are to 5 and then to 5.3. &gt;Photoshop used to be enough to make decent graphics. Now design has to be adjusted to grids and responsive design Not really, grids and responsive are just two of many solutions to design problems. I've never worked on any code that actually uses one of the grid frameworks, and I'm not convinced responsive design is the correct solution currently. &gt;Php used to be enough for most of web application development. Today we have Python, Ruby, and things that goes beyond php like all the frameworks CI, Cake, Zend, Symphony You're mixing languages and frameworks a bit. PHP is enough, you might want to write some of your "stack" in another language though. Frameworks are a godsend, and unlike the php world, they're pretty much required off the bat in other languages (eg django for python, rails for ruby, .net for ... hell they value the framework more than the language). I'd recommend trying to understand why they are good, and perhaps play around at creating something on your own (but not using it ever). &gt;What used to be just flash, now is done with html5 or adobe air Flash has always sucked. Air?? Embrace HTML5, it's basically just DHTML. &gt;Now we have NoSql databases Don't get carried away by the hype, you use tools for what they are meant for. If you have relational data you use a god damn relational database, NoSQL (Document Storage) is more suited to data that is arbitrary, eg you might want to log things but never know exactly what sort of info you want to log, you could create a table and a one to many for a table that replicates a key value store, or you can use a Doc Store that is designed for this.
I loved symfony 1.4 and I am learning Symfony2. It is a very good plateform, and will be used in the next versions of Drupal, phpBB, and eZ publish.
I would second this. I recently moved over from PHP to Rails and though I am still kind of a Rails newbie, I can already all the benefits I will be enjoying for making the switch. I would highly recommend [Rails for Zombies](http://railsforzombies.org), [Michael Hartl Learn Rails by Example](http://ruby.railstutorial.org) and [Railscast](http://railscasts.com) as very good resources. Best of luck.
Hmm... you sure you have PHP installed? It worked for me.
I have to disagree with the design pattern part. Singleton makes sense a lot. I've used factory a lot.
We're using silex. But handling requests and serving pages is really one of the most uninteresting / thinnest parts of our application. Not to slam on silex either, we like it :) but saying our application is 'built on silex' would not do it justice. We went for it because we love the composer/packageist system and it kind of pushes the philosophy of 'small dependencies that do one thing well'. 
I personally don't like running updates inside loops like that and might do something like this: $this-&gt;db-&gt;where_in('id', $this-&gt;input-&gt;post('skill'))-&gt;update('skills', array('skill' =&gt; $cat));
No... that is my final answer
If you firmly believe the company has a ton of potential, then sure. If it's yet another social-mobile-sharing-awesome website/app/etc, I'd take a salary instead. Also you should be negotiating lower salary + equity. Not simply equity. Even if they give you 25% equity in the company, that's useless financially until the company gets a round of funding or it is acquired.
If you know PHP stick with PHP. PHP and ASP.NET has about 90% of the public server market locked up. Ruby, Python, ect. are great platforms it just that they're just starting to hit the maturity that companies like. I would get up to date on PHP5 and look into an MVC system since that what the market is really demanding now. For mobile platforms I would look at something like AdaptJS - http://adapt.960.gs/ If you do a clean interface this will rearrange most of your stuff for you. If you want client side bells and whistle I would look at jQuery family - http://jquery.com/ and/or Bootstrap -http://twitter.github.com/bootstrap 
Agreed. CodeIgniter is a good place to start because it's an easy introduction to the concepts. But do make sure to move on to other frameworks once you've grasped the ideas behind it. You'll have your "aha" moment and be off and running with a really solid framework.
Either the wikipedia definition is not as precise as it can get or the author misinterpreted it: &gt;code review is simply the act of having someone else look at your code should be: &gt;.. of looking a second time at your code (either by you or someone else) But googling for Code Review for a single person didn't yield any results.. so maybe wikipedia just wasn't as precise as it can get :/
This belongs in /r/phphelp.
Depends why you want to do MVC. If you are collaborating with several people a framework like zend or codeigniter or cake is the way to go. If you are working for yourself I wouldn't bother. Just seperate your code. Put the model in a file that outputs JSON. If you need to do calculations on the data make a seperate file that reads that JSON and outputs new JSON. A lot of times on smaller projects combining these two is really fine, especially if the calculations that are done are always the same. Finally have the view just show the final output of the JSON. Not super elegant maybe but it's faster than most frameworks and easy to work with for one person. Frameworks and OOP are a tool, only use them if they make your life easier. Sometimes they do not. 
Wow! I have a completely opposing viewpoint to you! Classes are **essential** in writing beautiful, elegant code. Elegant code is like a novella: 1. Classes are the Roles, 2. Objects are the Actors, 3. Class methods are the Actors' actions. My definition of Beautiful code: Code is beautiful insofar as it can be readily read and understood by people with no programming experience. 
If their idea is getting results they should either: 1. Have paying customers or 2. Angel / VC Funding which means they can pay you a salary. I would never work for equity alone, I can't pay my landlord in shares of nothing. 
What exactly do you mean when you say "working for equity"? Are they offering you no salary whatsoever or just a reduced salary with equity? Are you coming on board as a co-founder? What would be your official role at the company? If they want you to come on board for nothing but equity, then I personally think you'd be absolutely crazy to take the job regardless of what kind of equity they're offering you or what type of business you're getting into. Obviously, if you're talking about being a co-founder then this is probably less applicable. In either case, I highly recommend that you run some numbers in terms of how much money the company would need to make or be sold for in order for you to make up the money you've lost by being on board. If you make 100k a year now and would be making 50k a year with equity at this startup, think about a couple of 1, 3 and 5 year scenarios for the company and see if you would, at least, make back that 50k, 150k, or 250k with the shares you're being offered. Obviously this is easier said than done when you consider additional stakeholders coming on board, but toying with these scenarios should at least help you put some of the financial numbers in perspective.
dont use captcha, it goes against all disability guidelines.
Well, lets say that you load a content area blog post. Now you need to place that page inside the layout file (or even worse - you include header/footer files). The controller is now in charge of loading several views and assembling them in the correct order. This is a design problem. With Template Inheritance you can simply create a `new View()` and it will handle loading it's own parent, sub, and child views and packaging itself for delivery so the controller doesn't have to worry about managing themes, assets, views, and partials. It also allows inheritance so that views can define default content blocks that can be extended or replaced as needed by child views in the same way that you can overload object methods if you need to extend a normal class.
personally, i would build a request class that handles all of these and checks them for bad inputs. That way anything that comes through the _REQUEST is scrutinized before its used.
I've been watching it's development for a while as a long time ago (maybe 2 years?) I first found it and was blown away at how similar it was to my framework that's been in use for a while but not publicly available. I liked it a LOT. His documentation style is great as well.
What makes more sense passing a logger object around to every object you create or doing logger.getInstance() 
I would never work for equity, but I would start my own company if I had a good business plan. There's a difference.
Holy wall of text, in the first paragraph you assumed something someone else did, I am not talking about client side Javascript, have a read about node.js
Right now I really can't be bothered to try yet another PHP framework. Unless absolutely everyone agrees that it's better than everything else for obvious practical reasons that apply to me then I'm not going to try it frankly. I know this might not seem helpful, but it's true. There are just so many frameworks out there, all of them with so much hype that the bar is that high for me to even consider looking at them. It sounds good, but I already know Codeigniter, Yii, Zend.. I don't really need more.. Does it offer anything *new*? At all? (Also, I'm sick of all these benchmarks and speed tests, for 99% of what I do, performance is never really an issue.)
Oh, and yeah. Think our wires got crossed. I was talking about PHP, and then you were talking about JS, and then PHP, and...eh.
Once you learn laravel rails will be very easy to learn.
My first experience with Laraval was actually a rather large complete project that was dropped into my lap to take on from what i already knew was incompetent developer... (the reason it was taken away from him) That being said, i was actually pleasantly surprised with it, its very clean and well thought out. A couple things i didnt really like is as the OP mentioned, database work i found to be a bit of a pain and the way routes are defined ie, (GET|POST) /someurl/(:number) just kinda rubbed me the wrong way, but i will give it credit for the flexibility this allows.
I've been looking at it very closely for about 3 months; I've read Code Happy (a semi-official ebook about the framework) and follow the team on Twitter. I agree with the downsides, absolutely, I had a serious issue with a cross-table using Eloquent and didn't get a resolve after 2 weeks of asking about it. So, the communities not quite there yet, but it will. It's on the cusp of a version 4 release, beta should start in a month or so, and there's been little detail about the new version might affect existing sites - the general consensus is that migration isn't something you should really be thinking about. Keep v3 on v3, and start new projects on v4. This in itself will split the already small community for a while, which is a shame. However, v4 looks really interesting purely because the approach to it - it's going to be completely made up of separate components (all distributable via Composer) that can be replaced at will. Something I suspect is going to be a new fad in frameworks (or meta-frameworks, as they'll be built up on parts developed by separate parties). I'm just waiting on an excuse to use it - it looks brilliant. 
Oh man, I've solved this before, but I can't remember what it was. I'll try to remember... EDIT: This is usually caused by Apache's mod_security. It's nice feeling when a light bulb goes on.
It's a nice enough framework that leaves a bad taste in my mouth due to all the buzzwords used to describe it. Beautiful, artisan, fluid, etc etc. One word I hardly ever hear is utilitarian.
What is this 5 shares per year business? Sounds sketchy. Remember you'll be the one doing the heavy lifting, and that without your dev skills they can't roll out a product.
following tdd means that your code evolves with your tests, whose whole purpose is to create higher quality, more solid code. From my experience the benefits of tdd negate the need for code review.
Don't focus on learning in the classical sense. Just build some stuff outside your comfort zone. Invent your own problems, then research and engineer solutions to them. That's how you stave off feeling old.
I agree with this. I was offered equity recently. When things came down to it (I chose not to get equity but a profit share to cover dev costs)... they didn't have money. Go figure?
today's fad framework is tomorrows maintenance nightmare.
My primary need as a developer at this point is *stability*. I simply can't bother with a package this new and unsupported, even if it is positively fantastic. Code Igniter and Symfony2 will remain my go-tos for the time being.
You should not be doing code review for coding standards, that's what PHPCS is for.
I was exploring it's use for a project. Here are some things I found disappointing with Laravel. It's not complete, but just what I remember off the top of my head. * Routing system is done in code. This is bad for several reason. More importantly, it's fairly convoluted. Why should I be generating callbacks for routes I will never need? Why are they encouraging the execution of useless code? * Configuration is done, again, in code. Again, this should be frowned upon, and should be the first thing that gets removed from PHP and put into another file. * Migrations are error prone. A migration should not be left in a half state because of an error or because you forgot something, or mis-ordered something). * TMTOWTDI - This makes me worried. They try to appease everyone with little regard to doing it the right way. * Encouraged naming scheme is PEAR_Style. Also, naming structure and files do not match. * "Magic Strings" do things. This is wrong on so many levels. It's encouraged use is bad. (e.g. Route::controller('admin.panel'); - admin.panel needs to be remapped to Admin_Panel_Controller) * Documentation is sparse. Reminds me of Zend Documentation from a year or so ago. Seems a lot of "Tribal Knowledge" abounds. * Again, configuration in PHP is encouraged!? * Views and templates.... and again, with "Magic Strings" Some of these are personal preferences (class naming scheme), but some I see as unforgivable (magic strings, config in PHP). At the very least, nothing that was offered overrode those pain points for me. This isn't to say Laravel is horrible, but it just doesn't offer up anything over other frameworks out there. I'm also an opinionated bastard, so you might disagree (but really, magic strings and config in PHP is bad... don't do it!).
Hey, you're right, but seeing as how we're developers and we love to optimize our time, and there's this great application called PHPCS that does all the coding standards checking at lightspeed vs a human doing it, you shouldn't be doing code reviews for coding standards.
Although young, Taylor had done an amazing job maturing this framework in the past year. 3.0 was an amazing release, which I used to build many production applications with. 4.0 is going to be great, really excited for it. Laravel will soon creep up to the top of the framework list. It is a pleasure to work with, extremely intuitive, and just feels natural. Eloquent is also one of the best ORMs I have worked with. Safe to say, I really wouldn't use anything else right now. 
The standard response you would get from an HR person would be:"Where do you want to be in 5 years?" and I encourage you to think about it. Your personal development should support the growth goals **you** want to achieve. Not merely covering the changing requirements of the job you hold today. There seem to be two distinct sides to your current job: design and programming. The best among us can maintain a steep learning curve on both fronts throughout their career, however, for most mortals choosing one or the other would be wiser. Most of the posts here seem to cover the programming bit. It looks like your main interest in this post, but make sure that it's a choice. Not an indirect effect of other people's decisions. When looking at a potential career path in software delivery there are several and you may want to think about growing towards the roles: * **Expert Software Engineer**: Scrumm/Agile, TDD, Stack Design, Performance solutions, Programming Frameworks. * **Software Design**: Clear Requirements description, requirements traceability. * **Architect**: SOA, Technology strengths/weaknesses (PHP, Ruby, Python), Enterprise architecture, Application responsibilities. * **Project/team management**: Project approaches ITIL/PMP, team development, CAPEX/OPEX financials. To emphasize, the above list is *not* an ordered list. I.e. to become a designer you do not need to have been an expert software engineer. They are distinct and independent roles/paths. Most of these will assume you have a good understanding of general software delivery practices and require specific skills and knowledge in their area. Acquiring these specific skills (including experience) may require several years. So it will be important to revisit your goals yearly and adjust your required skill set and necessary training. Last but not least, for all career paths and most skill sets there are certifications. Regardless of the opinion you hold of their true value compared to actual experience, they are valued by those who decide which persons get invited for job interviews. So, make the effort and pass them when you can. Posting this question shows you are looking for opinions and advice from your peers. Do also solicit feedback from your colleagues and direct supervisors. They are able to tailor it to you as a person.
Thank you very much. I also feel that im in that crossroad where i need to make a choice. All the programming advices are very helpful to understand in a better way too, how comfortable i would feel following that path, so i've read carefully every answer and put some of that in practice.
Thanks. very useful
I will look into it. Thanks
Definitely mod_security being triggered. There's a lot of rules against usage of pharmaceutical words. You're going to have to search your mod security conf files to find where this is happening. EDIT: I found the mod_security rule that tracks the usage of penicillin and it infact returns a 403 header, like youre noting here: http://www.limesurvey.org/de/forum/suche?q=forbidden+403 assuming youre using mod_security it looks like you're using the '30_asl_antispam.conf' ruleset in your install which contains the rule below which blocks 'penicillin' from being sent in a form post as a measure of stopping "Pharmacy and/or Drug" spam. You'll need to have the server admin disable this rule for your directory/site/whatever they feel is necessary... or just comment it out... OR just dont test the form using the word penicillin. =) // Rule 300057: // stacked spam rule - levitra-levitra-levitra or leviTrA retila_prosac etc. SecRule ARGS|!ARGS:/page_content/|!ARGS:Mensaje|!ARGS:/product/|!ARGS:/medical/|!ARGS:/domain/|!ARGS:business|!ARGS:/milestone/|!ARGS:/product_name/|!ARGS:/AD_ITEM/|!ARGS:/drug/|!ARGS:/^payer_/|!ARGS:/billing/|!ARGS:/casetrack/|!ARGS:block|!ARGS:imapuser|!ARGS:ban|!ARGS:/department/|!ARGS:redirect_to|!ARGS:p_profile_pictures|!ARGS:return|!ARGS:setting[banemail]|!ARGS:/username/|!ARGS:oaparams|!ARGS:/password/|!ARGS:/user_name/|!ARGS:/page_content/|!ARGS:/search/|!ARGS:/medication/|!ARGS:/ajax/|!ARGS:/email/ "[-_ ]?(?:adipex|suboxone|pseudovent|topamax|trazodone|prevacid|zyrtec|xenical|toprol|zoloft|synthroid|valtrex|wellbutrin|valium|protonix|vytorin|ritalin|zocor|seroquel|ultracet|plavix|voltaren|zyprexa|xanax|vicodin|penicillin|tramadol|provigil|prednisone|vioxx|zithromax|strattera|ultram!(a)|prozac|abilify|terbinafine|premarin|viagra|lamisil|gleevec|aztrin|azithromycin|desyrel|oleptro|beneficat|desirel|molipaxin|thombran|trazorel|trialodine|trittico|mesyrel|trazodone|methylphenidate|sertraline|lamictal|purim|salbutamol|flovent|flonase|phentrimine|aciphex|cimetidine|pantoprazole|omeprazole|ranitidine|zantac|prilosec|citalopram|lorazepam|doxycycline|propecia|natural[-_ ]?hormone[-_ ]?replacement|levitra|phentermine|cialis!t|fioricet|ephedra|!(t)ambien|carisoprodol)[-_ ]?" \ "phase:2,deny,status:403,t:none,t:lowercase,t:compressWhitespace,capture,id:300061,rev:23,severity:2,msg:'Atomicorp.com UNSUPPORTED DELAYED Rules: Possible Spam or Restricted content: Pharmacy and/or Drug content detected',logdata:'%{TX.0}'" EDIT 2: because there's no spaces in the reg_ex expression above.. you may not see all the code. scroll right on the comment OR copy the whole comment/rule as a whole and paste it into an editor and youll see it in there. Unfortunately reddit is doing an overflow:hidden on comments without a word-wrap rule =) EDIT 3: Your server admin could also change the line in the rule where it says "phase:2,deny,status:403..." to "phase:2,pass,log,auditlog" to allow the post to happen but log it, incase you do actually start getting spam and need to consider blocking it again. 
Working for equity is stupid, it's how people scam you into getting work done without paying for it. MONEY MONEY MONEY,if they don't pay, don't play. Seriously, I've been around a long time and see all this end badly for people.
Could you explain more of why configuration in code is wrong?
Thanks for the help, I am looking into it! 
Thanks for such detailed information, I have raised a ticket with my hosting company as I don't have the access required to fix this. 
Thanks, I am trying to figure it out - its all new to me! 
I don't have time to give you technical advice now, but I want to say: don't worry! One step at a time, you will get where you want to be. Don't give up!
Sure. * Configuration in code needs to be treated like normal code, because it is normal code. This means mistakes can be made, and this can cause crashes. People aren't perfect, and even well-formatted code can be wrong. * Changes in configuration require code roll ups to production. Sure, you could have software that rights out your PHP for you, but that presents it's own problems. * You tie your configuration to a single, local point. If you want to run your configuration from a central system, you cannot do that, or if you want to, it will take a lot more work. * Syntax errors will cause your system to crash hard. I forget if it was Posterous or someone else who had their configuration file printed out for the entire world to read because they didn't start the file with &lt;?php. People mistakenly believe it was because the file was in the root web directory, but that had nothing to do with it. * PHP files make for bad configuration formats! XML, JSON, or YAML all make better formats. * Configuration in PHP files are limited to PHP. You can't share your configuration across other languages you might need, nor can you use other tools. * require 'config.php', as mentioned, outputs directly if your PHP is malformed, but not including &lt;?php doesn't fail a PHP lint check. Seriously, this one reason alone should be enough. * Not using PHP as a configuration point actually forces to you to think of configuration in a different, and more intelligent light. For example, have you ever considered not using the config.php file that you are provided, and instead using the in-memory stuff? Probably not. But with a config.xml or config.yaml file, you can store that file in memory, as well as the parsed version, and when the file get's changed, you can check the values and make sure they are valid and working before overwriting. Anyways, those are some of the reasons off the top of my head. I'm sure you can find other reasons.
Check out [MAMP](http://www.mamp.info/en/index.html), it's an all in one-ish environment for running PHP/MySQL on your Mac. 
- Automatic generation of administration settings forms for your plugins. - Simple widget building - Built-in URI path registration (so I can register a plugin to listen to mysite.com/myplugin, and not having to create a page and add shortcodes or other hacks) - Solid examples and documentation of your framework The first one is the biggest for me. Making admin pages is really clunky. 
First of all, thank you for taking the time to answer. Should I go all out, framework style with an autoloader and so on ? Also, I usually tend to build the plugin, at least the main file handling the plugin / add_action calls as a static class. LE : Another class I def need to include is a class that handles script / styles. There's a lot of people that can't properly register / enqueue scripts / load them on proper admin pages. Is that good / bad / any more suggestions ?
Have you checked addslashes / stripslashes ? http://php.net/manual/en/function.stripslashes.php
If you are only doing design work right now you are in good shape. Focus in the 'view' portion of the framework and work your way up from there.
Do want!
Seconded for MAMP. I especially like it because it's easy to uninstall, it's easy to shut off and turn on, and it's easy to quickly check the status of your servers (if you made a configuration error, it'll tell you).
You can just install MAMP. Just make sure that in your Sharing settings you have Web Sharing disabled as that is what controls whether Apache starts or not.
[create one yourself in PHP](http://www.codewalkers.com/c/a/Miscellaneous/Creating-a-CAPTCHA-with-PHP/)
&gt; However, I've noticed that when the filename of whatever a user is uploading contains certain characters (in this case, an apostrophe '), the php script inserts an escape character into the uploaded file server side Do you have [`magic_quotes_gpc`](http://php.net/manual/en/security.magicquotes.php) on? Check your php.ini file to make sure it's off (hopefully the rest of your app isn't relying on this). If you don't have access to php.ini, check the return value of [get_magic_quotes_gpc](http://www.php.net/manual/en/function.get-magic-quotes-gpc.php) and then apply a fix. Once filenames are no longer being inadvertently escaped, and after you validate them to make sure the value meets some sort of minimum allowable threshold, you can then sanitize the filename by replacing [invalid filename characters](http://serverfault.com/questions/150740/linux-windows-unix-file-names-which-characters-are-allowed-which-are-unesc).
Where can I get the source? http://snaps.php.net/ Doesn't seem to have it even though there has been a snap since the merge. Also I'd like to thank Nikita Popov for his amazing work getting this feature implemented in record time (at least for PHP). EDIT: I figured out how to get it from GIT: * git clone https://github.com/php/php-src.git * cd php-src/ * ./buildconf * ./configure * make * sudo make install
Thank you for the clarification. Programming is still new to me, so even using the Mac Terminal is intimidating. This might be a stupid question, but how do you normally structure and orient your directories? Also, durring the PHP install process (which I'm working through right now with help from "PHP 5 For Dummies: ... yeah, it's come to that), is there anything specific about MMAP I need to consider when punching in my commands? 
It's good to see that the language has begun moving forward more rapidly. This'll be fun to play with in my personal projects in the future.
Uninstall it. Mamp has its own apache, and nothing good will come of two servers both trying to serve port 80.
First thanks for your response. You are right about the "nice little" terminology, I changed it. Despite all your points, and they are ones I have espoused as well, they still do not I think effectively address the point I'm trying to get at in this post. I don't think Symfony2 is pointless in fact I'm continuously impressed with how well built it is. But it's complex and I can't shake the feeling that whoever has the gumption to learn something so complex (probably on their own time mind you) isn't in PHP to begin with. Go to odesk and search for Symfony2 developers. I agree, PHP is the king of the web. It's the king of blog sites and small business sites and restaurant sites. Is it the king of enterprise though? It is maybe at best one of a few front runners. You say there are good PHP developers out there then where are they? How many PHP evangelists can you name? How many PHP blogs can you name? ircmaxell, Fabien Potenicer, Sabestien Bergmann. The list doesn't go much longer. Also the community is greatly fragmented, every other day there is some thread in /r/php arguing over which framework to use. Some might argue that means the community is "vibrant" I would just say fragmented. In ruby they are working on different gems so they can build projects faster, in php they are building another framework that already does the same thing five others already do and making a post about it in r/php. Tell me why again I should throw away my knowledge of three existing frameworks and start a Laravel project guys?
A library cleanup isn't going to happen before 6.0, if it ever happens at all. It will require breaking backwards compatibility, and there's no way that'll happen in a point release.
The list is not extensive, true. I follow Akrabat and Evan.pro, and spend a fair deal of time on PhpMaster (which has some quality articles from time to time) with authors like Alejandro Gervasio who has some very nice ideas, but I can't say I have an extensive list of role models, that much is true. But as far as PHP being king of enterprise - from my own experience I can say yes. As an example - I have built an enormous enterprise system with only one other person in 3 months which handles mass emailing, newsletters, invoicing and product catalogs, a state transition machine, a manuscript tracking system and a back end GUI that lets 200 employees use it daily for 8-16 hours on 200,000+ user accounts and over 3 million contacts in the database. All components were built from scratch except the MVC layer which is Zend. But yeah, I do agree with the fact that there is a lack of evangelists one can learn something impressive from.
As a developer ending my 20's and starting PHP dev over 10 years ago, I've found myself trying to keep up with the latest trends and technologies. I too started in PHP4 and always feel like I am lagging behind in the latest methods and functionality available. I've recently looked at some things which I've heard and read about people shouting about, both good things and bad, but which are becoming more prevelant. What I've come to learn is that there are a few things that you should have in your knowledgebase and use *when you need to*. You should add them to your existing knowledge and not replace your knowledge with the new ways of doing things. Both your existing knowledge and new knowledge will play a part in different projects. Here's what I think you should add to your knowledge: * An MVC framework. It really doesn't matter which one, since each has its followers, support and methodologies. Each framework will have die hard fans and say theirs is best. In reality, look through the tutorial app (most have a 'blog' type app) and see which you find easiest. Pick two or three and then build a sample app. The one you find easiest, go with it. These will help you learn OOP since most, if not all, the latest ones are built in an OOP way. * A caching technology. If you're working on a single server app, go for APC. Multi-server apps, then look at Memcache They are pretty easy to learn and can help speed up applications. It's one of the modern technologies that can help you move forward and show project stakeholders how fast your applications can get * Forget design patterns Design patterns are common ways of fixing common problems. It is likely you already know how to fix these problems and that you have your own 'design patterns'. It's just a label for something you're probably already doing. It's nice to look at other peoples solutions but this should be down your list of priorities of things to keep up with. * Look at NoSQL, but not for too long NoSQL is another way of storing data. It's alright to know about these but the chances are you're not going to use them (seriously). Your mind-set will be set up for SQL systems now, such as MySQL. You're not going to get any real advantage in a standard project, since MySQL is still the number 1 way of storing data in a PHP application. * Follow some PHP news There's two resources I use to keep myself up-to-date with things happening in the PHP world. The first is phpdeveloper.org which is a news feed that pulls things from different places across the web and puts them in one place for you. The other is phparch.com which is a monthly, paid-for subscription of a magazine. If nothing else I skim through the articles and pick up that xxxx is emerging and how to use it. I suspect that some people will disagree with parts of this but that's what I suggest. Steve
Let them keep laughing - I only know PHP (but am deciding whether to learn Go or Python next) and I make enough money to keep my family happy, and my job keeps me interested. The whole attitude of developers laughing at others because of their language of choice is pretty sickening and shows an amazing level of immaturity on their part. With that said, yes, Symfony2 *is* an enterprise-level framework. It is not meant for junior level developers. It requires you to be familiar with many important patterns, and many of its' choices are new to PHP frameworks. Is there a reason you are learning Doctrine inside out? It's abstracted enough that you are only required to new its' public access points to work with it. Twig is incredibly easy to use and very powerful. I've not yet used Guzzle. If you want a good intro tutorial to Symfony2, I recommend Symblog: http://tutorial.symblog.co.uk/ I also agree that anything written in Symfony2 isn't going to be little - it's a large framework maintained by many people. If you're looking for a light-weight solution look at Silex.
I know, right?
Yeah, Python programmer's just hate them.
Thank you everyone for your suggestions. My knowledge of PHP is pretty lamentable, so thus far I haven't quite figured out how to implement the stripslashes fix successfully (if at first you don't succeed, though...) This seems to be a promising fix, as it doesn't require me mucking about with PHP (and probably making things worse). Unfortunately I don't currently have access to php.ini; I would imagine my host blocks access to it I've read that you can disable magic_quotes_gpc by setting a flag within the .htaccess file, which I do have access to. I've added the following to the top: # Disable magic_quotes_gpc php_flag magic_quotes_gpc off However, that causes it to return a 500 internal server error. Is my syntax off? EDIT: Tried putting an ini_set (‘magic_quotes_gpc’, 0); command at the top of the file.php upload script; also unsuccessful. This is proving to be a rather stubborn problem.
The community is coming along, I don't argue that at all. The Composer system and the PSR standards have made a big difference. But it still feels like it's five years behind the RoR community, and not gaining any traction. And again, I'm not unhappy with the difficulty of learning Symfony, I just wonder if by the time I'm done learning enough of it to build things relatively quickly whether there will be anyone else around in a 100 mile radius who can do the same. Maybe that's you!
Just as anything in programming it can be misused. It's designed to replace the complex code of implementing an iterator.
The problem with a library cleanup is that's a lot of work and a lot of problems for very little gain. If you can propose a knock-out solution, I'm sure they'd go for it. The problem is there isn't a perfect solution (or in most cases even a good solution). 
Is your concern that this is nothing more than an enhancement to the "goto" statement?
Far be it from me to laugh at other people - every tech can be productive in the right hands. But ... Rails over a modern PHP framework? They're effectively both in the same league, and the differences are nitpicky when seen from afar. Rails is where J EE was 10 years ago, except now you're messing with YML files instead of XML files, and instead of trying to figure out which config params to adjust, you're wrestling with gem hell. If you've made it this far with symfony, carry on, finish the project, take stock of what you learned, and try another project in Rails. Then compare the two. it's trite to say "choose the best tool for the next job" because "best" is clouded by what your personal preferences are. have more to add, but may wait for a bit (need to run out for now)...
That last part works perfectly for my purposes! I modified it slightly to $newFileName = preg_replace("/[^A-Za-z0-9_-\s.]/", "", $newFileName); so it would preserve spaces and periods (without that modification, the filenames would come out diochenellalmainfonderemp3, so the browser wouldn't know what to do, not knowing the filetype). Just so I'm understanding the syntax right (I would like to actually learn something, after all), does the preg_replace command read preg_replace("character(s) to be replaced", "character it should be replaced with", "target string"), and adding the brackets [] causes it to replace everything but those characters? Thanks very much!
Yeah - it's not as easy as it appears on the surface. Sure, PHP devs can run a quick script to automatically rename all functions and classes to meet some acceptable naming convention. But they couldn't release this change under the name "PHP".
MAMP install was, from what I can tell, completely successful! That's one big step out of the way. 
Without really trying it, and just looking through the documentation, there's a few things i hated about it: * The Class_Naming_Convention * You have to manually render the view on every controller action: return View::make('home.index'); * Static methods and singletons all over the place
[Here's the manual on `preg_replace`](http://us.php.net/preg_replace). You are correct, but it's the "\^" character at the opening of those brackets that tells it to ignore all the rest of the characters in these brackets. Without that "\^" character at the beginning there, the function would do the exact opposite. [Here's the manual page](http://us.php.net/manual/en/pcre.pattern.php) on working with preg_\* functions and Regular Expressions ("Regex"). It does get rather complex.
Awesome! Now you need to go and learn PHP. Hold off on touching Symfony for a while. You say you have PHP for Dummies? Follow that for the first few chapters and get comfortable with programming in general.
indeed. I would recommend being honest. 
That's the plan. Tutorials today and tomorrow, then we'll see about Symfony. Thanks for the help!
Right now I could design an iterator that does exactly the same thing. There's really no difference. This is just syntactic sugar for something you can already do except this requires much less code and so it should be easier to follow, not harder. 
No problem! Let me know how it goes. I'm surprised a hosting company has mod_security SPAM rules in place on your site... Seeing as they obviously did this on purpose, they might not disable it for you because 1. why else would they have it in place, in the first place... or 2. they have mod_security monitoring their whole operation and turning off certain rules (unless they make conditional statements in their rule files) would turn it off for other people too. I think it's safe to say... this is a smaller company? I would say most larger hosting companies just give you a box with little to no rules on it. If they wont change it.. move to somebody like mediatemple.com or tell your boss that it's their hosting thats fucking up and not you, so if he wants it fixed he's going to have to move hosting providers since you already did your job =)
&gt; A singleton is a global variable. That seems to be oversimplifying it. Rather, if used correctly, it is a container or gate-keeper to control variables and/or "single" reusable resource connections. Is it not the root of registry and dependency injection containers? Also, like with a Singleton, there is danger of contaminating the object as you pass it from function to function as dependency injection seems to ask for. For example: a database connection object will change its error state, result info state, and the information accessible to it from the db server each time it's used, and [pass on that state to whatever original calling scope](http://php.net/manual/en/language.oop5.references.php). One could simply throw the connection object away after every use and just grab a new one like a greedy materialist, but external service providers might start to loath your application for doing that to them. In other words, singletons are not inherently "evil". Every pattern has its place. I do understand what you're saying with "if you need to use a different logger you are screwed, the method is now hard coupled to that particular logger.". You could of course adjust logger settings, but this will change its state for the _entire_ application, which is not always ideal. Edit/Disclaimer: context here is in the realm of PHP only.
 $i = 1; loop: $i++; echo $i; if($i &lt; 10) goto loop; echo '$i ends up as ' . $i; For loops are nothing but an enhancement to the "goto" statement.
Or it could be an array, which is where it DOES matter. What happens if I try to do $value[1] when $value is a Generator?
Yes, but there's been no controversy in any other control statement or structure quite like "goto" has. Even `switch` hasn't been meet with such controversy with its loose comparisons. I'm just wondering if that's what Signe is thinking about.
I was actually in the same boat as you and was pretty close to giving RoR a shot, but stuck with PHP just because I had so much experience and Symfony 2 was looking very promising (this was last year march-ish). Looking back now, I am happy with my decision. You are right about the Symfony 2 crowd in Vancouver though, I haven't actually met anyone else who really uses it. By the way, use the IRC channels for doctrine / symfony2, probably the best / fastest way to get help.
The same thing that happens when you do $value[1] when $value is an iterator. PHP is full of iterator classes (just look at SPL). There is no argument here, `yield` is simply an easier why to create iterators. If the function returns an iterator, there is no reason to care how the iterator is created. 
Yes, but I guess I was focusing on your "It doesn't matter -- as the caller of a function you don't need to know its internals" statement. As ChiperSoft was alluding to, it's the added syntactic sugar consumers still need to be aware of. They'll have to learn to properly diagnose potential side-effects, including bloating, hemorrhaging, slight memory loss, and the rare occasional fatal side effects. This isn't a bad idea by any means. It just means coders need to know when a function they call uses this feature and what to expect back. Hopefully people will properly document their use of this feature like ChiperSoft said. But you can't count on that. So, it would be best if one develops an intimate knowledge of all the code they run.
http://www.uk-cheapest.co.uk/ is my hosting company. The project is something I have been working on in my spare time, I wanted to learn PHP and improve my companys system of badly named word documents and updating hundreds of static documents everytime something changes, which had become part of my job. So I felt my project had reached maturity so I was showing it off a little and teaching my boss what it can do. The very first thing it did was this and fell over with "penicillin"! I am still working with my hosting company, they have changed a setting but I think its not working for the sub domain where the project is hosted. 
 /** * @return Iterator */ Lets hope for the IDEs to insert this doc automagically.
goto does not, and can not, enter or exit a function - only operate within a single scope. Name one other construct that exits a function, runs other code, and then returns to the middle of a function....
Create the new ones under its' own namespace. Or something I think would be neat, that they did with mysqli, is just create native string objects, etc, which are all normalized and operations are on the object and extendable. 
Right - "yield". IE expanding the flexibility of `goto` to reach between scopes. Is it the same basic arguments against that you're alluding to?
My point was that iterators don't support ArrayAccess so `$value[1]` is an error if you return an iterator. A generator is just a short-cut for creating an iterator. You can, right now, build a new class for an iterator that implements the `Iterator` interface and then return an instance of that class in your function. Or you can use a built in class like `ArrayIterator`. Generators just let you skip creating that class for your iterator. Instead you can `yield` your results and an iterator is created and returned from your function. In either case, the return value of the function is an iterator. These criticisms seem to be about functions returning Iterators not about generators. But returning iterators isn't a new thing. 
Javascript users _might_ hate them. Official results aren't in yet though - IE shuns it like it does everything else.
MAMP + [Sequel Pro](http://www.sequelpro.com/) If you haven't been using Sequel Pro, prepare to never use anything else again.
C# is a pretty awesome language.
And that doesn't bother you? That you haven't met one other person in a city the size of Vancouver, with the tech community that Vancouver posses, that develops with Symfony2? At least with Symfony people have *heard* of it, when I was looking for a Yii developer people didn't even know what the fuck I was talking about.
We'll have to agree to disagree. I've used it and can't stand it.
Looks pretty good. You should think about writing some unit tests and, imo, implementing at least PSR-0-- the other two are superfluous but PSR-0 is a Good Thing^TM Also, there is no need to have your "Prevent direct access" code in straight class files. If someone were to find those, it would simply load an empty page (or a 500). Even better, you should put the root index.php inside the public folder. This way your web root contains none of the application files so they simply can't be accessed via the webserver. Good job though. It appears that you're on the right track as far as learning the right things :)
be the change you want to see. start up the php group in your town.
How so? I mean it's hardly any different from Java. And for that matter it's hardly any different from PHP! PHP is probably more VB-like because of the dynamic/weak typing. 
Thank you! I'll definitely make the change to the "Prevent Direct Access" code. As far as keeping everything outside of web root... I agree with that for security, but in many cases it's not possible.
How would you write your .htaccess as opposed to the one I have included with this project?
Anyone care to comment on why I was downvoted for my reply???
It is an interesting point you hit on. When the frameworks are deep enough you need experts in the framework as well as the language. While PHP is orders of magnitude more popular as a language, once you subdivide to a framework that requires significant expert knowledge it becomes more tricky. If you look to Java (king of the enterprise), you have a lot of the same issues, you need a Java guy with experience with Hibernate, Struts, Spring, Lucene, etc... all the same issue come up. As for your point comparing PHP to Ruby or Python -- you are suffering grass is greener syndrome more than anything. They all have ugly bits, try to do anything with threads in Python or Ruby and you will realize you are allowed to run as many threads as you want... just only one at a time... yey GILs! Also, both Python and Ruby are starting to get dozens of competing frameworks. If your focus is being able to find/hire people, go with C# and MS supported tooling. This will get you the biggest category of trained (even certified) professional developers with good documentation available and major long term company commitment. 
This is not another post about why PHP *the technology* is worse than Python or Ruby in fact, I believe it's on par. You don't have to sell me and I don't want to debate it, I'm a big PHP fan and it's been done to death. Symfony2 is as advanced and as well engineered I imagine as RoR or Django. It's about community. It's about specializing in these monstrous enterprise frameworks and not coming out the other end and being the only one with your dick in your hand. What's the point of being a wicked Symfony2 dev if you can't find anyone else who knows or wants to work with you on framework related projects? I know guys who like RoR and work with RoR, if I have a startup idea and try to sell it to them to be a cofounder (or what have you) I think it'd be easier to sell if I told them it was gonna be done in Rails.
It needs it. WP plugins need some kind of structure and simplified stuff.
Inside your router, you have hardcoded the default controller / page (lines 53-54). This could be handled better by some kind of config file that the router includes, giving more flexibility to the developer. Also in the router, line 93 calls the controller/page but does not take any return data. I looked into one of the controllers and see they are calling $this-&gt;view-&gt;show() and inside that function is an echo. In general, you should return data rather than echo it that deeply. Send the resulting HTML back up the tree to the router or the index to echo. This gives you more flexibility for the timing of events, as well as being able to further modify the response string later on.
Symfony2 is having a get together in San Fran in 17 days, are you going? Seems like an amazing place to meet the Symfony2 community, connect with people, etc. Even if they aren't in your neighborhood, they could still be your co-workers -- remoting is easy these days. Passionate RoR folks DO travel to RoR conventions and meetups. As for specializing in a big niche framework, you better be able to answer why -- and it should be an answer you own / understand / care about. It should be something you consider the right thing to use, even if it isn't the most popular. If you don't have this for Symfony2, bail out! If you startup idea is dependent on implementation details down to the selection of language / framework -- it probably isn't that great an idea. If Symfony2 was a smart and defensible choice that yielded benefits -- you should be able to explain this to your co-founder or anyone else, and it should be something they respect you for because of all your great forethought and logic. I do a lot of work with Erlang/OTP (Erlang and its big framework) -- it is the very definition of niche. But I can write applications in days that would take me weeks (or months) in other systems. I can make them scale to over a million concurrent connections on my laptop. I can cluster them in minutes, and they are insanely reliable due to the supervisor / worker structure distributed across multiple machines. They also take full advantage of multiple cores and allow work to be divided on true points of concurrency. I have started and complete projects in Erlang in corporations that had never heard of Erlang -- but it was the right tool, and I had to convince both management and other developers to come on board (Erlang's syntax is completely alien to most developers as well)... but I had good reasons and believed it was the right choice. Don't wait for the community to validate your choices, validate them yourself and then explain to the community why you are right.
wwwwwwwwwwhat. It is nowhere near VB. It is C like and Java like, not VB like. Unless you think VB is similar to Java?
Self-taught HTML5 &amp; CSS3 + PHP + jQuery guy. I'm comfortable around $25/hr for contract work, but on another hand I have just wrapped a $118/hr gig for a local university. Just depends on the project, but there's a steady stream of startups popping up everywhere. Average salary offer around Texas is $45k- $65k I think. 
It's pretty much not my choice. That's what clients want, that's what I got to build.
You are right about trying to follow the hip and it's certainly interesting to hear your perspective with so much experience in the field. Also if you can get someone up and running and doing decent code in Erlang in three weeks, that's pretty impressive. As far as the less popular software goes I just got to say that I again don't want to fight those battles, I just want to build shit, and to do that I need other developers. And for that I need well engineered popular software *with* a vibrant community where you can find passionate developers who want to start a project. I don't think you always have to have a good idea to start a startup, sometimes two smart guys just have to agree to sit down together and build shit and after a couple pivots you might have something. But eh, I'm digressing. Maybe with all these new tools and standards the PHP community will see a resurgence in the coming years, I really hope that's the case. In fact, I'm betting on it.
That is mind-mindbogglingly insane. If you have to deep dive on every framework there would be literally no point -- it would be better (and faster) to build your own from scratch. The same people who argue you need to deeply inspect and understand frameworks claim you need to understand ASM before you touch C code... it is ignorant nonsense. http://symfony.com/symfony-at-a-glance
Agreed, I wrote an Automator script to interact with it and do some pretty awesome things.... cause I'm lazy. 
Symfony2 is fairly new compared to RoR. The community will grow with time. I've met several passionate Symfony2 devs at phptek this year, and even completed a fairly simple web application that is now a marketed product. I can sympathize with your frustration, Doctrine2 is not easy. The differences between the ORM and the framework between versions 1 and 2 are a little extreme. However, nothing is impossible, it just may take you some time to do it. :)
I absolutely think I can learn Doctrine. Whether I ever meet anyone again who has bothered to learn it or gives two shits about it is another question.
+1. Routing should either be implied (i.e. the router 'takes a guess') or explicit (I much prefer specifying). Furthermore, I think that there should be a router which takes in routes, and a dispatcher that utilizes the router and tries to find a match for a given request.
 &gt;You say there are good PHP developers out there then where are they? They're out there getting shit done instead of writing blog posts and making big names for themselves. If you want to see them in the wild, start going conferences. 
zend, symfony, cake, those are the big 3 in the contract world, at least here in the UK, from my experience. I just dont see many more being added to that list. The more frameworks people are using, the more divided the employee base and therefore the more those employees will need to be paid, due to the supply / demand ratio. Therefore, it makes sense for employers to look at what other companies are using, and then use that.
This was actually the part of the proposal that was most heavily discussed. There are something like 150 just on that issue :/ The main reason why in the end we didn't go with an additional keyword was that the fact that something is a generator is just an implementation detail. For the user of the API it makes no differences whether a certain method is a generator or a hand-implemented iterator. (What would make sense at this point are generalized return type hints, so you could say "this function returns an `Iterator`".) I think people will be able to document generators with the usual PHPDoc approach. E.g. there would probably be some kind of new `@yields` tag that signifies a generator and could also hold additional type information: /** * @yields int * or * @yields string =&gt; int */
Technically that problem exists outside of yield as well. After all, what does the function output() return without looking at the documentation? The issue at hand can be shared simply: // Non-generator runs output(); // Generator does nothing output(); Nothing in the function declaration suggests it's a generator, so you have to dig down into the function to see if it's there. So now, when you see: $output = output(); in code, you can't assume anything is actually happening.
Yeah, definitely. It looks great on paper but I feel like it's another thing when you use it. I'll have to report back to /r/php a month or two from now when I have more experience with it and when 4 gets released and community becomes more active. I'll definitely try to help out others, hopefully help others and encourage the same. It's why I wrote that article, partially.
That's good to hear :)
you don't think the framework will stay? or is good enough?
Benchmarks and Speeds Tests aside (I didn't even look at them!)... Since I haven't actually used CI, Yii, and much of Zend. Here's what I've seen it others say and what I personally think: * it's 5.3 based so it's much more updated. It's the "CI of 5.3" I have heard from many * the learning curve is shorter than any of these. With laravel you can be setup and go in 15 minutes. From my personal experience, I was able to get into Laravel MUCH faster than CI, or Zend. I gave up on Zend some time in when the whole framework became confusing to me. But that's just personal experience. I'm not a "rockstar" dev of sorts that understand everything and learns everything in 5 minutes * The ORM is supposed to be fantastic. Being the only ORM that I've used (other than when I worked with C#), I can't comment too much on it. The CRUD interface is basically built in for it. Setters and getters are dead simple. It's easy to not even touch SQL (if that's what you want to do). I do have my own issues with and i'm still struggling to figure out where those come from * The rest of my "pros" listed is basically stuff I'm sure Zend has a package for. These things just work very well in sync. * Oh, one last thing. Bundles. I'm not sure where Ci, Yii, or Zend stack up but you can grab and install package via the command line tool and update them as well (the update thing being pretty important to me). HOWEVER, if you've got a tool and a system that works, and it does everything you need. I see no reason to waste time with it. I'm all for using great new tools but sometimes there's just so much out there that you'd get bogged down with it.
it's funny, people listed that the configuration in PHP was one of the better features of Laravel. Also as far as the "in-memory" stuff, from what I understand Laravel runs a runtime config of sorts where you can change the configuration via php on the fly without having it save. You'd have to double check if that's true or not but I remember that being cited as well. Thanks for your input though :) I'm not an expert on this and it's nice to hear thorough explanation with examples on issues! :)
That is an interesting quote that puts into words a lot of feelings I have about PHP. In the same way you suspect you're wasting your time with Symfony I often feel the stack of programming books on my shelf is not only useless as a PHP dev but actually make the job harder because 99% of the people you end up working with think you're overcomplicating things just by following best-practises. I would go so far as to say simply reading Clean Code made me a less happy person because it made me feel everything I was doing was wrong and I couldn't improve because the wrong stuff is mandated by so many employers - want to test your code? Sorry we don't have time for that. Want to use design patterns? Don't bother with that - just hack it in for now and well come back to it later (i.e. never). Synfony2 is a beautiful bit of software that 99% of PHP developers will never use because they don't acknowledge or understand the problem it is trying to solve. They see no problem with writing complicated software applications using spaghetti code spread over a series of includes so they have no motivation to look for a better alternative.
Because every tool is someone's favorite tool, and the second you try to warn someone, they will downvote you into oblivion. The truth is most libraries for most languages are actually of deeply unacceptable quality. Try aggressively testing your favorite tool for edge cases some time. Brace yourself.
Oh god. That's like a new fad with tech. If it doesn't have some kind of a hipster description, the LoTR fans come in. It's pretty tiring, having every new framework/product described in this way. There's a certain ethos connected to it.
Interesting. I haven't followed drupal-8 development before, haven't worked in drupal for a long time, curiously glanced over drupal-8 code after seeing your comment. It seems that *drupal_container()* method is used in [VERY](https://github.com/drupal/drupal/blob/8.x/core/includes/form.inc#L1282) [few](https://github.com/drupal/drupal/blob/8.x/core/includes/config.inc#L28) [places](https://github.com/drupal/drupal/blob/8.x/core/includes/path.inc#L373). And all of them are in *.inc* file and inside normal function call (which are exposed to modules as they have still maintained old hook system), not used in initiating objects. They have created core services [using DI](https://github.com/drupal/drupal/blob/8.x/core/lib/Drupal/Core/CoreBundle.php#L27) not by injecting DIC. There is still lot more works to do it seems. For example entity controllers are not DI initiated. But still, saying that they are not properly using DI is a bit unjustified. They are using them with limitations in mind.
It's pretty simple. I have my own data that I sync with an API. When I use the ORM, the results either don't save (which blows) OR they do save into the database but then the ORM doesn't pull up the new results (which is frustrating). I had some other issues with it where eager loading didn't pull up all the results and instead i was forced to run many queries again, instead. Idk. It's pretty damn frustrating. 
Makes sense. Without there being a HUGE community for support and the framework still being rapidly developed, there isn't a reason to switch. It's my first framework usage and I needed to develop rapidly so instead of trying to figure out Symfony (had some issues there for some reason), or CI (which many have said will die soon), I went with Laravel which took me nearly no time at all to learn.
Have you used rails in the past couple of years? With Bundler I haven't had any gem problems whatsoever. It's really a nonissue - it pretty much handles dependencies automatically but you can lock to certain versions or even to a specific remote git repo/branch. Also if you are having tons of configuration files, you're probably doing it wrong. There are some gems that have excessive yml config, but core rails certainly doesn't and most gems don't either. There are other criticisms of rails, but the ones you presented don't match up with my current daily experience :-)
If there was indeed an IDE that worked well no matter what you threw at it, we wound't need any other IDEs in the market would we. Fact is, every IDE has strengths and flaws. You just pick the IDE which has strengths that you can appreciate and flaws that you can tolerate. Same story with Sublime Text 2. If you can get it to compile cpp without setting yourself on fire, kudos to you. If you can get eclipse to not crash on a large project, kudos to you. If you can get grunt working on Coda, again hats off to you. Nothing is perfect, welcome to the world
I agree with these criticisms, with the exceptions of the automatic view thing. The next major release uses the PSR-1 standards and dependency injection rather than static methods.
The next major release of Laravel it built on composer and is actually heavily inspired by Silex. It just provides a more "full stack" experience than Silex.
Why the hell is this in r/PHP?
In short, OP knows nothing about the tool he is using. Not its basic usage, nor what language it is written in. 
(wall of text incoming, please hear me out before just downvoting :-) I'd say that the only advantage of PHP currently is that it's installed literally everywhere and many clients who do their own hosting are familiar with it etc. That is a HUGE advantage for a freelancer and shouldn't be discounted. However if you can control your server environment, I see no reason to use PHP. I'm definitely biased since I now refuse PHP projects (and I will probably get downvoted), but please hear me out. For what it's worth I started my webdev career in 1999 with PHP (version 2!) and used it extensively up until 2007ish when I tried a project with Rails and have now completely switched. Since 2007 however I have been involved with three different PHP projects (1x codeigniter, 1x magento, 1x symfony), so while I'm not privy to all advancements I have tried to stay relatively up to date. I wouldn't say that "PHP sucks" or something like that, but I think the language suffers from (at least) three major problems compared to Ruby (and specifically the Rails community): 1. The language is bloating dramatically with every version. When I first started, PHP was a relatively simple language designed to bind c libraries into a web page (as Rasmus Lerdorf told me at a conf in the early 2000s). This is the reason for some of the weird function names and parameter order issues that never seem to get removed. However with every successive version they keep adding more and more features, apparently (and I'm speculating here) because some other language has it and "PHP should have it too". This has led to a bunch of halfassed language features on top of all of the existing ones. There is now over a decade of cruft accumulated and because of the install base nobody wants to break backwards compatibility. 2. The way PHP inheritance works requires verbosity. One of the **core** strengths of Ruby is the ability to arbitrarily mix in classes and modules into existing classes and modules (as well as live monkey patching of existing classes). Without discipline this could get totally out of hand, but (see my point 3) in practice this has rarely been an issue. What rails excels at is burying common code in a gem and **getting the hell out of my way**. When I open a project almost *all* of the code that I see has directly to do with my project. Since I can selectively mixin functionality from other sources instead of having to subclass in order to share, the hierarchy is far more shallow and thus fewer files, subdirectories, etc. My experience on both the magento and symfony projects was *out of the gate* tons and tons of cruft that had to be ther because of the inheritance structure but had little to directly do with my project. This is distracting and pisses me off. 3. The vocal community (as someone else in a different thread already mentioned) is mostly composed of pragmatic amateurs. Virtually every blog post you find is someone who cut and pasted and pushes the fact that it "works" so it's fine. There seem to be no clear "thought leaders" (apologies if there are; I never came across them). With an already crufty language this leads to a whole lot of cuttin n pastin goin on, and no clear sense of how well written PHP *should* look. Instead you have a bunch of conventions that suck, aren't even strictly necessary, but everyone just follows them because "it works". My favorite example is using &lt;?php as a delimiter instead of just &lt;? (as we did in the early days of PHP). Why do you have those extra letters? It's a PHP.ini setting. It's extra junk in every. single. template, but every PHP dev I've asked about just shrugged their shoulders and said "it works, why change it?" Contrast this with the rails community which is legendarily opinionated. Now this can rub a lot of people the wrong way sometimes (myself included) but in the end it gives you a very clear direction to shoot for. I think the core drive in the rails community is towards aesthetically pleasing code. Now this is not just to feel good about the code (even though that does ultimately lead to much more pleasant development) but it leads to demonstrably easier to maintain systems. Because of this core focus, crappy framework and language features and syntax are publically shunned and there is enormous pressure to improve or remove them completely. The practical result of this is that (in my experience since version 1.2.5) every version of rails has improved, gotten slimmer, faster, and easier to use. The fat gets trimmed. I haven't seen this at all in the PHP community. Just my perspective, but every time I've "checked back in" every year or two I see a language that is more confusing, more bloated. I totally respect the point expressed in several other threads about being able to earn money doing PHP instead of the "flavor of the month" - if that's your gig, then rock it. However I have to say that there is still a lack of available, competent rails developers and you can just about name your price. Rails at this point is also hardly a "flavor of the month" - its well into the plateau of productivity. If I were going to do another PHP project then I would definitely look for a framework like codeigniter - at the time I used it (2008ish) it was pretty great, minimal framework that played to php's strengths without getting in your way. 
I am going to Symfony Live in San Fran later this month but name a PHP conference that doesn't have "Word Camp" in the title, at least on the North American continent, there's not many of them dude.
No, Thank you for the pointers, am looking for all the help I can. this was first go at it, i know its a mess just wanted to get something working at first. The references you posted will help very much with the code clean up. :)
Symfony2 and Ruby-on-Rails both suck. PHP and Ruby are both great languages with *far* better framework alternatives available.
What are you trying to accomplish? Organize the plugins, mass updating, extended or bridged functionality, maintain conflicts? Or just a way to advertise?
Very nice, I really dont like DOMing HTML. My i ask what one you based this off? most that I found that had been working just months ago where now no longer working, with the suggested changes to the URL's I see that www.google.com/voice/b/0/request/messages?page=... is working very nicely :) 
:) I don't need advertising, I got plenty of clients. I need a way to organize the plugins code, while at the same time simplify some of the things I always end up doing, like loading scripts, creating widgets / meta boxes and so on. In case the plugin is more complex, I need a way to proper organize and load the plugins classes. I could use any advice regarding to plugin building.
Well that's exactly what you should do. Create a class that'll take care of the repetitive tasks like setting up post types, settings pages, meta boxes, etc. and have an autoloader function listen for your plugins and do whatever it is you want with em.
phpacademy in youtube has tons of great php tutorials. That's how I started.
How so? If you are having issues I can try and help you get them sorted. We use 2.X successfully with all our developers and don't have any issues that I am aware of, not saying there are not any, just that we seem to have good luck with it. 
$_FILES is literally on the second line of the code he pasted
How helpful!
I personally think the "registry" pattern partially defeats the purpose of object-oriented programming since you're globalising everything with it. It's leaner to simply inject needed classes into the classes that need them. Not a bad framework aside from that.
so after playing with this for a bit.. I im seeing this will only get messages in your inbox. this line: $data-&gt;unreadCounts-&gt;sms; seems to get all unread sms, even if they are not in you inbox. any gees on what url to get sms in this format i know the url for the web based veration is Request URL:https://www.google.com/voice/b/0/inbox/recent/sms/?page= 
You are right. I must have got confused with the version number. What I have is 1.12. I followed [this](http://akrabat.com/wp-content/uploads/Getting-Started-with-Zend-Framework.pdf) tutorial but I most of the other ones I found did not include zend_tool, which made me think they were for an earlier version.
Unless I'm confusing Zend Casts with some other site, they have a really non-standard way of doing things (or at least did when I learned ZF a few years ago), so it's not really the first place I'd direct people, especially if they wanted to learn it "the proper way".
Wow, thanks! I had almost given up. I'll test this out when I get back to work.
Just trouble getting things like pear and php unit working. Like a charm in 1.9, impossible on 2.x. Lots of complaints in the forums too. I'm perfectly happy on 1.9 so if you have trouble with something in 2.x try it out.
I tend to agree here, you need to learn procedural PHP first. after that I HIGHLY recommend getting hold of a book titles "PHP: Objects, Patterns and Practice. Thanks, Mark
Check the [FAQ](http://www.reddit.com/help/faqs/PHP) of this reddit. Some links in there. Also, use the search function to find several hundred very similar questions to this one.
http://www.phptherightway.com/ this was posted the other day, i bookmarked it
I feel that once you know what you're doing, some of the user comments are quite insightful and helpful. 
ZendFramework2 is about to release it's first stable release (on RC6 right now I think). I've been using it since the 3rd beta and greatly enjoy it. It's a great way to learn professional/enterprise PHP and general design patterns.
http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
I really wouldn't say there is a "right" way to learn php, really you just need to learn the built in functions and what they do, and read up on some of the common "gotchas". What you really want to do is find out is how to program the right way and then apply that PHP (or any other language, you may find they are all very similar at a high level). That being said the links you have in your post should get you well on your way, but don't exclude an article on programming just because it isn't about PHP. You should be less worried about finding the "right" way to program, and instead just start programming and figure out what works for you while reading everything you can and incorporating what you find to be effective. Once you stop learning you are dead as a developer.
Learned PHP from the manual and if I need to overview the basics (like when I first started to read about the concepts of ***classes***) I would refer to Tizag.com. This of course comes with a little bit of knowledge in other coding languages like Javascript :) Don't forget to learn and setup your own LAMP too. You will learn A LOT. Note: I'm not a programmer but just a PHP hobbyist. I program for pleasure!
I'm really enjoying FuelPHP. 
I think more important than going from framework to framework is building something useful in your framework of choice. Differences in frameworks are relatively minor and simply learning the syntactical nuances of different frameworks doesn't really provide nearly as much benefit as writing non-trivial code.
@YellowSharkMT: What are you "expecting" out of the dev server?
I'm not sure, I was fine with just looking at the 'type' and just filtering in the code. 
Write your own :)
You can write a decent one in a week or two.
+1 for Coda. I threw Dreamweaver in the trash 10 minutes after opening Coda for the first time.
I do it from time to time and each one gets better. This is by far the best way to learn oop in my opinion. Also, one can dig deap into the language by exploring core functions that are not "isset" or "in_array" etc. Still, in the end i dont use them for anything serious or high level production.
Huhuhu, try out [symfony](http://symfony.com/)
Am I the only one who doesn't use frameworks?
&gt;Have you used it in any projects? Nope, I've never even heard of it. &gt;I've tried it and it seems really convenient to use in smaller sites while still maintaing an advanced field and template system. And what's *your* relation to this framework/CMS? Because this smells like a con rather than an honest inquiry about our opinions on this particular CMS. 
The primary goal of a framework is time saving. Frameworks are not like pokemons. When you figure one out and end up mastering it, you just use the shit out of it...to save time. Learning several frameworks is a mistake IMO, or at least brain pollution. If you really feel like getting more out of CodeIgniter, work on your own modules so you can save even more time. Or if you're good enough, get involved in the Code Igniter project ! Or if you are one of those guys that thinks the world really need a new PHP framework, go ahead and reinvent the wheel. It's useless, but it's a pretty interesting and insightful experience.
That's not for beginners, though.
its got good details on setting up PHP with different servers etc, and has some useful information to be aware of.
Yii uses HMVC. Symfony2 can provide you "H" but still isn't HMVC framework
Do you go to the University of Nevada, perchance? My C# prof did that too.
What a highly uninformative reply. I asked a geniune question about a framework I found online and wanted to hear educated information about pros and cons compared to other solutions. Instead... there's your comment.
Please just don't do it.
You're making a post asking about a framework/CMS which no-one's ever heard about, what do you expect? Had it been symfony, for example, (i.e. a well-known framework with a large community behind it), fine, but you're asking about a completely unknown framework, for which you can't expect any response at all, which makes me think the real reason you posted about it is to advertise it. If you got any ties to the project, fine, go ahead and advertise it, but please don't lie about it if you do.
I'm sorry, I'll go back there now :(
so you have to like the stuff before you can see it, how does that make any sense.
This is really horrible. Here is how you do it. [FB.Event.subscribe](https://developers.facebook.com/docs/reference/javascript/FB.Event.subscribe/)
1. Change `$years = explode(",", $y);` to `$years = explode(',', $y);` 2. Change `for($i=0; $i&lt;count($years); $i++){` to `for($i=0, $num = count($years); $i&lt;$num; ++$i){` 3. Change `$yearRange= explode("-",$years[$i]);` to `$yearRange= explode('-',$years[$i]);` 4. Don't sort $yearRange. If the first number is higher, swap the numbers. 5. Change `for($x=$yearRange[0]; $x&lt;=$yearRange[1]; $x++){` to `for($x=$yearRange[0]; $x&lt;=$yearRange[1]; ++$x){` 6. It will probably be faster to check for duplicates and insert in sorted order as you go instead of doing it at the end.
still need a LAMP/WAMP/NGIX/ETC to run that stuff. And some people get confused setting some of it up. Great place to start. Worth a Bookmark.
So is fCache....
I let my subconscious do the vast majority of the coding beforehand, then when I start coding, it just flows. You should join #learnphp on irc.freenode.net. Usually several times a week I create a join.me session that lets others watch me code live. Typically all of those sessions are me coding live for 3-8 hours non-stop.
http://drupal.org/node/30334
 for($i=0; $i&lt;count($years); $i++) { count() here is called at every iteration and can potentially create performance issues. Well, it won't, unless you have an insane amount of loops, but it's a bad habit. Change your code to: $countYears = count($years); for($i=0; $i&lt;$countYears; $i++) { 
In any case, accessing a variable is faster than repeatedly executing and accessing a function's return value.
Awesome thanks! Lemme try that! 
Dude. Dude. Dude... Thanks a lot man, this worked for me but... For some reason Wordpress did not auto-generate a .htaccess file, so I just copied one from another Wordpress site of mine and this did the trick! Thanks!
&gt; &gt; Change for($i=0; $i&lt;count($years); $i++){ to for($i=0, $num = count($years); $i&lt;$num; ++$i){ &gt; There is a problem there but you are not fixing it. There are two problems there, and he's fixing one of them (caching `count()`.) In some languages, pre-increment is faster than post-increment, too (though not in PHP,) so there's a second idiomatic problem there which he is fixing. You are correct that there is another problem there which he isn't fixing. (I'm not naming it because you seem to want to play secrecy games, and I'm not sure why, so I'm not going to cockblock.) You could teach him about the bug he's missing, instead of being all vague-handed about it. Hinting that something is there doesn't help anyone; when people say things like this, the people they say it to generally don't go back and look.
Please don't recommend things you don't understand. Your reply is just telling him to do what he's already doing. The issue is not whether the `count()` is inside or outside of the for loop; it's whether it's in the ***second*** clause, which gets evaluated repeatedly. Since he put it in the first clause, the initialization, it only gets evaluated once. The weight of the for loop bit is repeat evaluation. You can't get out of calling it once, and moving the once around without knowing why is a form of [cargo cult programming](http://www.catb.org/jargon/html/C/cargo-cult-programming.html).
I don't break whitespace, because of PHP's wacky integer coercion rules. This is actually why PHP's integer coercion works the way it does. Try this: &lt;?php echo " 5 " + 2; ?&gt;
Slightly modified to make it work 'properly' with 2007-, or -3021. Performancewise it could be better ;) function parseYears($y, $asKeys = false) { if(!is_string($y)) throw new Exception("year list is not a string"); $y = preg_replace("/[\s]/", '', $y); if( preg_match("/[^0-9,-\s]/", $y) ) throw new Exception("year list contains invalid data"); $yearList = array(); //split on commas first, then dash $years = explode(",", $y); while($year = array_pop($years)) { $left = 0; $right = 0; $result = sscanf($year, '%i-%i', $left, $right); switch($result) { case 2: $yearList = array_merge($yearList, range($left, $right)); break; default: case 1: $yearList[] = (int) $left; break; } } sort($yearList); $yearList = array_unique($yearList); return $asKeys ? array_flip($yearList) : $yearList; }
As of PHP 5.5 (hopefully), you'll be able to do: function parseYears($yearFormat) { $years = explode(',', $yearFormat); foreach ($years as $year) { if (strpos($year, '-') === false) { yield $year; } else { list ($start, $end) = explode($year, '-'); for ($i = $start; $i &lt;= $end; $i++) { yield $i; } } } } Then: foreach (parseYears($string) as $year) { echo $year; } 
If you are concerned about the speed savings of these kind of micro optimizations PHP probably isn't the language you should be using anyway.
Disregarding micro-optimization, it's useful to just not make pointless mistakes like the original code. This isn't going through code with a fine toothed comb swapping divides with shifts; this is "hey, here's a slight misstep you could not make in the future." There's micro-optimization, and there's also just not making unneeded errors. It is of value to help novice programmers like most-recent-coder improve.
Generators! must...... have.....
*advice
Are you using the dark mode or something?
On your last dot point, if you want a nice, easy bundle / packaging system over the entirety of your PHP work (including within frameworks, and also for external, independent libraries), I highly encourage you to check out [composer](http://getcomposer.org) and it's accompanying default [repository](http://packagist.org/). I'm trying to evangelise it, because it certainly looks good enough to become a defacto system for PHP to easily manage packages and dependencies, the same way Ruby has gems and bundler, and Python has pip.
One of the downsides to laravel seems to be that it's an extremely fast moving target (in comparison to most other frameworks out there). Version 3 hasn't been out for that long - certainly the documentation isn't at a *really* mature stage yet, but already everybody is getting excited about moving on v4. Sure, writing new code is awesome, but at some point you have to remember that you need support to help old code keep on working as well. That's where I'm worried for it.
Mmm, I'd rather code efficiently than not.
Thank you for the generous offer. I'm about halfway done with *PHP 5 For Dummies*, so expect a message from me soon.
Oh, like golf!
"My favorite example is using &lt;?php as a delimiter instead of just &lt;? (as we did in the early days of PHP). Why do you have those extra letters? It's a PHP.ini setting." Yeah... because someone, somewhere, once, might, just *might* have shorttags off in their server. Even though the default is 'on' and has been forever. And despite the face that trying to mix XML and PHP in one file out violate the same purists' spirit of "don't mix presentation and logic!!!" :)
Well I wasn't trying to be snarky - gem dependencies used to be utter hell and there are still plenty of pain points in the Rails stack. I just think the strong tendency is to improve them instead of to make them more complicated (which has been my experience with PHP). For what it's worth, I once had to recompile PHP literally 7 times in one day due to dependency issues. That was a hell of a lot more painful :-)
&gt;I hadn't heard of Symphony until a couple of months ago That's your problem, not mine. It's about as well-known as Zend or CodeIgniter is. &gt;/r/PHP will continue to be a circlejerk around Laravel &amp; Symphony and hating on CodeIgniter and Zend. Way to be a prick. You certainly deserve every downvote you get. 
I'm working with 2.3
You're right. Updated my function with eval magic to accomplish that.
It alarms me how many programmers spend so much time on frameworks and so little time on actually learning how to program. Why would you learn another framework when the very idea of one is to save you time? 
I completely agree with you. I couldn't agree more with anything you've written here (which makes you a bit of a rarity for me in this subreddit ;). If I was learning RoR and it was this complicated I would at least know that when I came out the other side so to speak there would be others who had done the same and who are ready to work with me on RoR related projects. It does not feel that way for me now with Symfony2. I have this underlying feeling of dread I am going to spend all this time learning all this technology and when I have finally get a handle on it I won't be able to find anyone near me in North America interested in learning it and then working with it. I am not a big corporation or well funded startup that has resources to pick a framework of my choosing (or any technology for that matter) and then train people in it as long as they are the "right people". If I continue building all my projects in Symfony2 I'm not even sure how I will find affordable help to work on them with me. If it was RoR I might have a chance of finding a cofounder or a cheap university student learning the framework for fun. If I had picked CodeIgniter or Zend I'd be able to find help I suppose but there are too many reasons not to want to work with those technologies when we have modern frameworks. If the PHP community could rally around a couple projects instead of the 10-15 frameworks out there at the moment I think that would mitigate a lot of this. I didn't pick Symfony b/c I have a hard on for Fabien Potencier, I picked it because it's the most followed PHP project on Github (among other reasons). Which gets back to my original post: What is up with the PHP community that they like to rally around so many different projects where it seems the Ruby or Python communities have fewer but more earnest offerings? I think the PHP community needs to grow up. The tech is here, let's pick a couple well made projects and turn them into stars. 
I've never heard of it. Looks like the code base is about a year old, and there doesn't seem to be much of a developer community built around it. From what I can tell, it looks like a CMS geared towards designers, built by a designer. A quick glance at the code structure reveals a few code smells, but nothing critical. It's what I would expect to see from a design-oriented developer, honestly. I really didn't like seeing "template" files like `header.inc` and `footer.inc` in the bundled example site. I would give this one a pass on any professional project, but if you're comfortable using it for something personal then go ahead. I think ProcessWire needs to incubate for a bit longer, and there are already much better platforms that already exist in this space.
I would take advantage of `range()` instead of looping over ranges: if (strstr($years[$i], '-')) { $yearRange = explode('=', $years[$i]); $yearList = array_merge($yearList, range($yearRange[0], $yearRange[1])); } I also like to use array keys to filter out duplicates on the fly. So instead of saying `array_push($yearList, ...)`, I'd say `$yearList[...] = true` and then use `array_keys()` at the end. Of course, I'd probably have to disregard my first tip and keep the range loop if I did that.
You do not deserve an answer.
The more you know the more jobs are available to you.
sf2 isn't HMVC like most of these other frameworks, since it breaks down the model even further, which I tend to like. I would still consider it an HMVC framework though.
Exactly, for this reason I could not stick with Kohana. Instead I installed Module support for Code Igniter and am attempting to use that as my solution. I would think it would be very important to the CI community to start a new version that was strictly based on the HMVC, as I find CodeIgniters lack of templates or modules astonishing for how developed the framework is. I will give Cake another look, and thank you for your post kind person!
... and you should feel bad? (sorry I couldn't help it)
You are correct in both cases. Neither were in the problem statement and I didn't bother to read his code. Thanks for letting me know. Easy enough to fix that with a `usort()`.
I do these lessons pretty much every single week, in the hopes that someone with less or different knowledge and skills than myself may learn something. I am very motivated to help others become better coders, but I honestly don't understand all this hostility towards me when I do all these lessons completely for free.
Very well built methods. Has everything except priority (which is perhaps a bad pattern to allow anyway). However, I question the need for all three classes to implement such a simple design. Either implement the interface, use the trait, or extend the base class. Still, not really a problem considering their size and afforded flexibility. Also, there is no way to provide "filters" against data passed to events. public function filter($event, $parameters = NULL) { $parameters = func_get_args(); array_shift($parameters); foreach ($this-&gt;listeners($event) as $listener) { $result = call_user_func_array($listener, $parameters); if($result !== NULL) { $parameters = $result; } } return $parameters; } I just went ahead and forked it and sent you a pull request. I don't expect you to accept it in it's current form.
Can't disagree on the benefits of community size with the big ones. They've got a small forum community at processwire (a few hundred?), but a friendly/helpful bunch. Mostly experienced designer/developer types there, always civil. What are you talking about specifically in terms of odor? I came to a very different conclusion- thought the code and architecture seemed good, esp. relative to the others. I've been poking around the core a bit. The more I get into it the more I like. Digging the hook system and such behind it all. We're all looking for a little different things, but if you've not yet tried to develop anything in this system, perspective may change a lot once you have. I had a few false starts on the site before I used it for something real. It's way different than I originally pictured. They could market it a lot better, though I don't think they are actually trying to. If you are really happy in another system, there's probably no reason to spend time with it. But ProcessWire may be a good one when you've had it with the others.
CI is just so old, and designed before the idea of HMVC became 'hip', that implementing it now would probably be a clusterfuck of nails and bolts on top of the framework, so I really don't blame them. If you have a softspot for CI, I'd grin and bear it till v3. Otherwise, my personal choice is Cake, for a few reasons: * I go and review other frameworks' docs from time to time, and I really have to say that I think Cake's is one of the most thorough and complete, although I might be a bit biased now. * Secondly, it's also one of the most mature frameworks around (which I believe also helps with the state of the docs), has a good community, and good amount of [community plugins](http://plugins.cakephp.org/) supporting it. * It's designed to be deployable without need of the command-line, on 5.2 and up. Which really just makes things easy. * And Cake v3 is coming along steadily with php 5.4+ support if you want to look at being hip and new.
It is totally useless in this case since the given code uses `array_unique()` and sorts the result. It shows one drawback of `yield`: using this would make the code harder to maintain because PHP is still bad at functional programming.
"eval magic" in `preg_replace()` is deprecated and will probably be removed from PHP in its next version.
What sick man sends sqlite to do an opcode cache's job. 
I meant this: https://en.wikipedia.org/wiki/Quotation_mark#Irony Sorry for offending you.
Does not fulfill the requirements that the result is sorted and has no duplicates.
&gt; I meant this: &gt; https://en.wikipedia.org/wiki/Quotation_mark#Irony Uh, maybe you should try reading that link, instead of just cutting it, pasting it, and pretending that means you were right. It supports the criticism made at you. &gt; Sorry for offending you. You haven't offended me with the false claims you made.
Yes, and yes.
Mechanically reversible encryption is plaintext.
I haven't read it all yet, but I've gotten through a good amount of [PHP Objects, Patterns, and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=la_B001ITYM3S_ob_2?ie=UTF8&amp;qid=1346726616&amp;sr=1-2) by Matt Zandstra. Just like you, prior to reading this I was a seasoned PHP programmer but developed very little OOP stuff. The book provides some good real-world examples and also gives the pros/cons of the techniques he's teaching.
Same. This, and I dove head first into CakePHP to force the issue.
Remember this: The web is stateless. PHP OOP is not the same as in JAVA or any other true OOP language. Because of this stateless nature, OOP on the web is more focused on orienting your files in a way that makes development and management easier (and code reusability ofc)! So learn the OOP syntax through some tutorial but keep in mind while you're developing that you should create as many reuseable classes with methods that you might use in your next project. Also, it would be helpful if you thought about your classes as containers/wrappers for methods. Ex. Class MyUser wrapps/contains methods such as getName(), getPhoneNr(), etc.
OOP in PHP for me is all about simplicity. If I need to edit some code to do with a user, I edit the user class which contains all functions to do with users. PHP OOP is not the same as JAVA OOP. Same concept, but it's used differently.
best tutorials: [killerphp](http://www.killerphp.com/tutorials/object-oriented-php/)
Love it. There's as many framework suggestions as there are posts. My suggestion: Try all the HMVC frameworks you can find and pick the one that you're most comfortable with.
It took me a few times to wrap my head about OOP fully. Java documentation is a good place to start for the concept since that is by far, the most mature. However, a short-cut or something to do concurrently is to start using a web framework, like CakePHP or Symfony. You will be presented with an interface that is all OOP that basically requires you to 1) learn how the objects interact and b) focus on your procedural code within the objects. This is probably the best way to get really solid hands-on experience in an environment you are probably already familiar with. I used to do all my coding in Perl. Hence, if you needed a web UI, it was pretty much going to be CGI based and completely built from the bottom up with maybe a few CPAN modules. This was a great approach for the 90s but times have changed drastically.
I've been putting together Symfony2 components for a good CMS/framework combo. This is my first deep dive into a framework and I am loving it. 
Fair enough if that's been your experience, but from my daily experience with Rails, at least from the dependency perspective, it's already there. RVM+gemsets+Bundler and I haven't had a real dependency issue in a year or two at least. I ran into the problem with PHP where the dependencies were only apparently provided by staticly linked libraries (ldap, oracle, etc). Hopefully a lot of that is better now. I know that the stuff I was having to do was fairly nonstandard and the standard stuff wasn't so hard, but that is my point with rails as well: if you're doing the common 99% of stuff it really is almost painless these days. It still needs to improve and mature though, of course. Anyway I don't want to spam a PHP thread with just rails junk, but I prefer to give good and accurate comparisons. I'm also happy to be proven wrong on my comments on PHP.
Im like you, old skool php. dont be afraid to mix and match, there are times where procedural is beneficial. Do try and keep your class structures inline with convention for OOP, but not every class has to be a proper Object. /2c
You're accessing the object's attribute directly which is normally highly discouraged in OOP implementations. Sure, it works but it might create issues later on. This might not be the best of examples, but what if you're going to change the name of the attribute in question? It could result in having to walk through your entire application to update your code. Instead you could have just called a function $person-&gt;changeName($new_name). This would allow you to abstract logic to reside within the class's method and prevent unnecessary problems later on. Leave the logic to the classes.
I don't think that Java is good for learning OOP. Better use something like Smalltak or Python/Ruby (or modern Perl). Just because it has classes doesn't mean it is great OOP. OOP even works without classes.
And local storage. And indexedDB. And now even local files.
It is a good way to learn OOP and what PHP can do with it. But as you already said it can be sometimes better if you use good old procedural code !
I had to give up with FuelPHP because it was too immature for my needs, couldn't get any help in the forums and any assistance the devs provided was very short, dismissive and often missed the point.
its state is stateless. so I guess you're right, it has a state (statelessness)... MIND = BLOWN! 
"good" for about 8 years? I'm not so sure about that. edit: I guess php 5 was released about 8 years ago. 
I think the reason they dont is the ROI. creating a good REST application requires more time compared to procedural programming. Also, most developers just like to get things done, not done properly! 
what do you mean 'web'? HTTP is stateless sure, web applications are not (unless they are).
The web as in the world wide web (HTTP/HTTPS). what do you mean when you say web applications? 
Drupal or codeignitor
&gt;Using if/else clauses we can do all sorts of validation, but with standard coding styles (PSR, Zend, PEAR) we end up with at least 3 lines per check, cluttering the whole code-base. ಠ_ಠ The coding style won't clutter the code base — bad code will. 
Well, I hope this link will quite useful to you... - http://inspirationfeed.com/wordpress/tips/top-10-preferred-wordpress-theme-development-frameworks/ 
I'd recommend just going with drupal. Simply because it'll be a shittonne faster to get useful functionality up and running.
That makes a lot of sense. But how is it more maintainable than something like: $person-&gt;update("first_name", $newFirstName); Or, taken to the extreme level: db_update("people", $personId, "first_name", $newFirstName); Because at least then you can specify the field which you're updating ("first_name") and don't have to write a getter and setter for every field. No?
What does this have to do with PHP? Its not relevant at all to our ecosystem.
Agreed. I usually recommend CI or Symfony2, but if you just need a CMS, just install a CMS. ;)
It could be accessed through __get or __set, which fixes the issues with OOP implementations. You still have a very easy to use access point, but you also have the validation possibilities of going through a getter / setter. The only significant downside to this is the occasional obscuring of where the variable comes from, especially in instances where the model does more than act as just an interface for the database.
Yeah, that's right. Mine actually looks like this: $person-&gt;update( array( "firstName" =&gt; $newFirstName, "lastName" =&gt; $newLastName ) ); You will want to build all of this on top of something like [PDO](http://php.net/manual/en/book.pdo.php) so you aren't exposing yourself to SQL injection.
"I'm a fairly seasoned PHP programmer but I've always written procedural scripts" That makes no sense.
I'm not going as I don't do that much PHP these days, but I can personally vouch for two of the speakers, Rowan Merewood and Sebastian Marek - I've worked with them in the past and they really know their stuff. 
Please explain to me the functional difference between: class Foo { public $bar; } and class Foo2 { private $bar; public getBar() { return $this-&gt;bar; } public setBar($bar) { $this-&gt;bar = $bar; } } There's only **one** *****fundamental***** difference between the two: The second is slightly less efficient to run. After 15 years of coding PHP, just to try to clear up this confusion, I will tell you that pretty much everything you want to do inside a getter or setter is **better off in another method**. ***Traditional getters and Setters inherently break Encapsulation, by making private, hidden properties not only publicly accessible, but -worse-: publicly writeable. To to say they -aid- Encapsulation is just so foolish, and it's one of those places where both sides know they're right.***
Lots of MAMP suggestions, but I personally would install a VM, grab a copy of ubuntu server edition (its easy to use, its productionability is hated by some, loved by others). Select LAMP server on the install and you are ready to go. I mainly suggest this because it doesnt matter how much you fuck up the OS, you can just rebuild a VM.
One thing I want to add: You don't just learn OOP. Of course you can learn the syntax, its pros and cons, etc. But it takes years and a lot of experience to make good OO design. The design is the hardest part about OOP. For starters: Have a deep, deep look at http://en.wikipedia.org/wiki/SOLID. It'll help you to avoid bad decision.
Not sure what your question is about, if you are applying for a software development position you don't need to strike balance. If you are applying for System position you don't need to strike balance. None of those jobs will care about your non-important qualification, if they did they would be looking for Operation Engineer of some sort not a System Administrator or Developer. If you are applying for Operation Engineering/etc you should just list what you know, there is no balance per say and if they are interested they will take it further.
Yeah, organising a conf in major city is hellishly expensive. Having said that it's a lot cheaper than both DrupalCon and Symfony Live paris.
Java is really great as just a working example of very rigid, complete object orientness. It also has other uses... usually not best for a web app though unless you have a strong need for global persistent data at a low efficiency cost. I had a lot of formal training in C and C++ that went nowhere except to teach me concepts. I never regretted it since. With Perl, if you can wrap your head around references, or pointers (for C foke), you can understand memory data structures. Basically, building some sort of heirarchy in code. From there, OOP is about wrapping your code around that object. Stop thinking function/subroutine... start thinking method.
The second example isn't at all what I would have written. I would have written something more like: class FooNotShitty { private $vars = []; private $fields = [ 'bar' =&gt; [ // rules for bar ] ]; public function __set($name, $value) { if (isset($this-&gt;fields[$name]) &amp;&amp; $this-&gt;_is_valid($name, $value)) { $this-&gt;vars[$name] = $value; } } public function __get($name) { return $this-&gt;vars[$name]; } } This doesn't include any kind of thrown exception or what happens when the field is not in $fields, but it gets my point across. For a model, FooNotShitty would extend ModelNotShitty, and $fields would be populated from the database columns. I'm not at all advocating a straight pass through getter / setter model. So yeah. I know I'm right, but that's because you completely misunderstood what I was advocating.
With Symfony using Doctrine, you get to directly specify how your object appears within a database. It will even autocreate all your getters and setters. Having a common way of accessing data within an object cleanly is pretty essential. With getter and setters, you can extend how that data gets presented or saved, without needing to worry about that everytime you set a property on an object. Getters and setters ultimately lead to cleaner code IMHO.
Just put "DevOps" in your resume/linkedIn/github/etc and you'll get plenty of offers. http://www.indeed.com/jobtrends?q=devops
Once you are in the realm of using a DataMapper, you are using a concept called ORM, which is not strictly speaking an OOP concept, but rather once that usually comes with MVC frameworks nowadays, where it is extremely handy.
Try the CMF/Create.js collaboration under development by bergie and Lukas smith
I wish people would stop calling themselves seasoned programmers when they have educational gaps like this.
I'm going to Symfony Live San Francisco Sept. 26
Classes are not just a container for your functions. Many of the same fundamental concepts that get used in java are also usable in php. When it is "used differently" often times that means it was used wrong.
In my opinion the Java language is not expressive enough to see the objects and their relationship clearly and the stdlib and most other Java libs are full of patterns and patterns. You can learn OOP with Java, but it is easier in other languages. I hope you also learned the disadvantages of OOP, because Java is great for that ;)
This comment is just stupid. Java is just as well suited for learning OO as python or ruby.
You'll want to look for smaller companies if you want to be doing both. Otherwise the responsibilities will be, rightfully, split.
5 years ago I got hired as someone to build the entire web infrastructure for a small company. I did, and along the way started to maintain the db, OS (I got them to start using linux for the servers), and web servers. I learned a lot, and it was amazing, but eventually I realized my passion was more on the architecture side rather than the maintenance. When you have to keep maintaining what you build, eventually it becomes harder and harder to increase development, as the more you build, the more you're responsible to maintain. I maintained the servers, added virtual servers, but that was before the whole 'cloud computing' kick. I did play around with distributed computing for the processing system, but never got anywhere with it. Basically I was doing mysql, apache, php maintenance; frame work architecture and programming; css and html structure and design. So, you want to look for a small company / start up if you want to do that sort of thing, but realize your success will lead to pain.
Consult. I am in a similar position and realized I have hit a point where it is hard to take direction from most management types easily. I think most people I interview have picked up on that. I've been doing freelance work and have been much happier.
UNR or UNLV?
A good place to learn things is [Stack Overflow](http://stackoverflow.com). Even if you never post or answer a question, just browsing through the [PHP questions](http://stackoverflow.com/questions/tagged/php) that interest you can be a good way to learn best practices. For instance, you might come across a post asking about mysql usage and see everyone is telling the OP to ditch mysql in favor of mysqli or PDO. Or you might see something similar with bcrypt for password hashing. That community is fairly solid one and good answers will naturally rise to the top and speak of best practices and what not to do. It isn't a tutorial, *per se*, but in conjunction with some decent tutorials you will learn some interesting things. And unlike some tutorial sites, it is community driven and so it can pull from a really wide range of knowledge, skills and opinions to give you some good ideas and insight.
Actually, I'm originally from Portland, Oregon. However, I live in Reno now and am attending UNR and am working towards a Masters in Information Systems. To me, it's really just a matter of school pride. That, and UNR was historically known as the University of Nevada since it was the first of the two. Also, because of UNLV's presence as a good basketball team, UNLV's abbreviation is more widespread than UNR's, so I went with University of Nevada to eliminate confusion. And Reno is a *very* transient city as well. Probably because living in this state, whether it's Reno, Vegas, CC, or anywhere else, tends to crush your soul if you don't have a good support network.
Not thrilled with /usr/bin/php in the top. But nice thought. Looking into PSR-2 compliance, to see what I'm missing out on. The lint command would have saved me at least two pieces of embarassment :D
&gt;please remember that the golden rule is "Conform to the standards of the project first". This could be shortened down to "conform to the standards of the project". If it's a solo project, then you're the one setting the standard, and if it's a group project, there will already have been a standard set, either as a de facto standard or a formal one. But really, all you need to do is look at the existing code to figure it out. Not only do I not agree with the standard, but the standard is useless for these reasons. Additionally, unlike the previous two standards, it hasn't added anything to help interoperability.
&gt;Well, as a 12+ year veteran PHP programmer, maybe I should try to align more with you young kids before I kick you off my lawn. Young kids? Surely you're not referring to me, I've been doing PHP for 8 years and web development for 12. &gt;I don't like the brace convention I'm fine with the brace convention, as I've already been using Allman style for the past, oh, I don't know.. 5 years, perhaps? &gt;I'm unsure about namespaces What's there to be unsure about? &gt;and why are they specifying spaces and not tabs. Because a small select group voted on which one to use, and they settled for spaces (although the votes were far from unanimous). It's silly, I agree. 
So you don't develop outside of your work for years and call your self a seasoned programmer? That makes no sense. It's like a guy who goes to drag strips calls him self a seasoned race car driver. 
Thats my main concern with php-cs.. Somebody here knows how to easily configure it for a projects codestyle? I once tried and found myself adding .xml files and creating php-code for parsing.. which was too timeconsuming and errorprone for me.
&gt; Young Kids Sometimes it feels like I'm a dinosaur. We've got all this shiny web2.0 bling, bitbucket stuff, git repositories, heroku servers, you know, there's a lot of changes in the last 5-6 years and sometimes I feel out of touch, like an old man who has let his skillset stagnate. &gt; Braces I obviously need to switch my braces. It'll take some getting used to. &gt; Namespaces Well... OOP and classes I've been doing but now I have a whole new level to understand the whys and hows of. And while they were on my radar in 5.1 and 5.2, I was ignoring them. Now it looks like I need to start incorporating them better. *shrug* dinosaur 
You're being a cock for the sake of it. Let's take older versions of Drupal for example. Hello and welcome to the world's biggest array of arrays. 90% of the codebase was **procedural**. I have no doubt in anyone's ability to become the most incredible programmer, regardless of whether or not they start from procedural or OO.
I would definitely go for a framework. Writing your own from scratch is a great learning exercise, but for practical purposes, someone with your experience level is not going to make something as good from scratch as with a framework. As far as which framework, Symfony and Laravel seem to be the hot PHP frameworks these days. I'm a big fan of Drupal but I don't know if it's appropriate for what you're describing. On a side note, it is not a good idea to roll your own salted sha encryption (although I assume you mean hashing). Security is a very well researched area, and there are some fantastic tools out there that would be far superior to your own. In particular, [this implementation of bcrypt](http://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php) is really good.
I really like that you understand your needs and have already taken a look at other similar solutions and why they won't work for you. Earlier on, I wanted to suggest the S2 EventDispatcher and some of it's features but for whatever reason I didn't-- good thing! Great work, my friend, keep it up!
If you're using a single resume to apply for many different jobs, you might consider tweaking it for each individual position (if you've got the time). You'll have more callbacks if you highlight skills you possess that they're specifically looking for. 
I don't like this part of PSR-1: &gt; Opening parentheses for control structures MUST NOT have a space after them, If I'm negating an expression in an IF, I like to make it so the excl mark cannot 'hide' if (!bStupidBoolean) { stuff(); } versus if ( ! bStupidBoolean) { stuff(); } Or perhaps go: bStupidBoolean? 0: stuff(); good luck setting a breakpoint there, though. 
There are some great web frameworks Perl, for example www.catalystframework.org So if you want, you can stick to Perl. It works just as good as Python, Ruby and PHP, Perl having the obvious advantage of the best and largest library of all these. Depending on what you plan to do, this can be a worthy advantage.
But yet you wouldn't say this to a developer who only tries to go the OOP way...
Just because you use PDO does not make you code safe against injections. And your understanding of what model layer is seems quite primitive.
When I was dead set on finding a framework to use (before giving up and using Smarty to do everything I really actually needed a frame work for) I was pretty impressed with Cake. http://cakephp.org/
That makes no sense... OOP requires knowledge of procedural code.
Kohana 3 - use modules for SSO, PHPUnit Make a test case, write a small webapp in (8?) frameworks and compare. I really don't understand why people don't do this. Takes hours. Ensures you get what you want. That's how research works...not asking on reddit.
Wow, setting your self up for a lot of manual work. Composer takes seconds to setup and your done, constant, easy updates to all your vendor dependencies. Microframeworks also don't have to be single file. I've done some semi-big project sites in Silex, highly organized directory structure and file layout.
No one **needs** PSR-2
You can modify PHPCS with your own standards.
Unless the project you're contributing to requires PSR-2 compliance?
The God Function. Such a funny and aggravating thing to come across.. I've been guilty once, sure, but damn - that's not OO! OO is supposed to act like a machine where things work together, bouncing back and forth without waste; in a sort of harmony. It's not just another way to write code. It's the way to write great applications.
Can somebody fill me in on something? I've been going at PHP for 6-7 years or so, and have been using OO for 2. OO scared me until I read a book and realized my fears were silly. Now I'm able to pick up other programming languages with relative ease, and jump right into them. But how can somebody go on for so long without wanting to know or do more? Just because it works? Why not want to be really, really good or great at what you do/love?
I'd be surprised if (!b were all the same colour from your syntax highlighting though. 
I agree, complete garbage.
One important point nobody has mentioned is that RoR uses Active Record and Doctrine2 uses Entity Management. What does this mean? In a nutshell, its a difference of whether the code defines the database or the database defines the code. With Active Record, the database has to to defined first, so that the ORM can 'lock' onto the schema. Anyways, in summary, you shouldn't have to care about that stuff. It sounds like you're getting stuck in some of the deeper, darker areas of Doctrine2. I've been there before, and it's not fun. Every ORM has a list of 'behaviors'. It's good to be aware of those. They are common functions that can be added to any entity, such as timestamping, etc. As far as using Doctrine within Symfony, my usual workflow looks like this: * app/console generate:doctrine:entity * add scalar values with console, be sure to use annotations * edit newly created entity, and add object members, relationships * app/console generate:doctrine:entities --no-backup MyAwesomeBundle, to generate the setters and getters for the newly added members, relationships * test new model functionality from a controller, or whatever
sadly , your advice would work only for someone who already has learned how to write simple scripts in php.
Did you even read the criteria before you spammed your favorite framework?
It's syntactic sugar. The glorification as programming paradigm is seldomly beneficial and propagated by people thinking in classes instead of objects. You can organize your code in an object-oriented manner even in languages without syntactic support (assembler). The actual benefit in higher level languages are the looks. And that's all you should think about. It benefits readability over plainly procedural code working on data objects. Important tip: PHP is a **hybrid** language. Using just one or the other extreme (all-proc or all-oop) is unwarranted. The proper mix helps organizing code. Also forget about design pattern dogmas. Messaging is the core concept behind considerate OOP usage.
Cheers, I am working on auto generating some entities as we speak. I will take a look at this.
I'm SysAD/Dev, been hired for a position several times using pretty much the same resume. I wish there was some magic to it, but mine just lists all the systems I can use/admin and all the languages I can write in. Toss in some things I've built and some hip(ish) technologies I've done to do it, and boom, job offer. I go the open book route, "Here's all the ways I can kick asses/take names at you business, this is what it costs to get me".
While I agree there are usually distinct organizational lines between the two, I feel like system administration sits in the middle of everything, and a sysadmin does well to know the whole game. And I'm wondering if the exercise of drawing the lines and firming up the "two sides" has always been about eventually abstracting those two solid foundations back into one? A "you have to learn all the rules before you know how to break them (well)" kindof thing? I'm genuinely good at both. I'm not mediocre across the board because I'm involved in both. While kyliaar rightly points out that SA is about stability and Dev is about doing new things (granted, with just a touch too much sarcasm on the dev side), I feel like knowing both sides of that coin (and most importantly, how they interact) has some sort of gestalt to it. It has, for me, so far. And thanks to this thread I have some ideas.
I think you're onto something here. This is definitely an option for me. In that case, do you find yourself talking about how you can provide vertical SA and/or Dev for projects, depending on the scope or needs of a client? How do you navigate the two paradigms in a consulting gig?
I can say understanding both disciplines is a major bonus on either side and one well versed in either can switch roles. I am currently doing this with my own projects. However, a pure developer is worthless with no sys admin to run his code. The opposite holds true as well because a SA would have no code to run without a developer.
I feel I have a comfort zone by having access to / knowledge of the end-to-end—perhaps trying to be a hybrid is a control issue? I feel like my current environment doesn't know how much I've prevented by knowing the entire stack, even though they are maturing to a point where they are shifting the paradigms further apart. I don't disagree that compartmentalizing sysadmin apart from dev makes sense from a commodity/organizational standpoint — I just wonder if we're giving up some sort of powerful combination of the two in doing so. It's not just about agility, it's about linkages. I think you need the sysadmin team. I think you need the dev team. I think you need the in-between.
Generally, I code with the end system in mind - something developers don't often do. Being an SA leads me to think a lot more about how to keep re-usable code out of the project and put it in a common setting, like /usr/local. My experience as an SA with high performance web sites also lends itself to technology choices that will offer performance optimization options easier down the line. However, there are times to think strictly as a programmer or strictly as an SA. For instance: Developer thought: I want to commit my code and possibly branch it later. SA thought: Well, I better get that repository set up and ensure it is web browsable for convenience of all involved. Does that kind of help? Basically, as long as you understand the division and how to operate on both sides, you will find yourself switching based on the needs of the project.
The issue is ,indeed, scalability. If you need to design a complex and robust network architecture, you are going to be distracted by daily bug fix requests. The same is true on the developer side. Also, different skills sets come at different prices so seperation of duties brings down cost with scale. For instance, I never understood the concept of expecting your network operations team to handle IT. For those who don't get the distinction, network operations involves supporting the architecture that delivers your product. Non-Internet companies usually don't have that, but all companies need IT infrastructure. These are as seperate to me as the difference between developer and SA.
if you need global awareness, then by definition you are requiring a state to be applied to an object. PHP is not the language for that. Like you said, Java or maybe python is a way better choice. PHP, ASP, etc. are languages that are made to be run as scripts for a very short period of time. That's definitely a + in some cases and a - in others! 
I've used Kohana, even written tutorials for 2.x and 3.x. I've loved it for for a long time, but I feel like I need more. My problems with Kohana is all the damned ORMs. Sprig, Jelly, Default and the many others. Also I haven't seen much traction. There's Fuel PHP, but once again, read the few tutorials out there and they all seem to include ORM. The SSO module I found, using the ORM once again. Yes, I could convert it over with out a problem. The PHPUnit plugin, why did Kohana create their own testing framework in the first place?
I'm not arguing I just found that line to be amusing. If you don't keep up technology will make you obsolete.
I been in your situation, the point is that if they are not looking for Operation Engineer but instead they are hiring a software developer that means that: A) They are too small to require Operation Engineer position and have a system administrator on site/consulting/hands on. B) If you are applying for software development and keep pushing your system administration stuff, there is 90% chance they will not pay you for additional responsibility and there is 100% chance you will be severely underpaid if they do decide to give you a pay bump. Same goes for a flip coin of this scenario, so to sum this up... apply for proper positions that actually need diverse skill set AND will PAY for it.
Click on the link, click to open the archive, click to open the folder, click and drag the files out of the archive into the folder.... BTW, installing Composer on windows was easy, but had to figure out what people were mumbling about and piece it together from the search results. For others that are searching for "How to install php composer on windows". Download "http://getcomposer.org/composer.phar", stick it in the directory where the PHP binaries live (c:\wamp\bin\php\php\5.4.3\). Hopefully that path is in your path's environment. 
&gt; My problems with Kohana is all the damned ORMs. I disable the default and add Doctrine2 because I like it. The point is, that's not part of the framework. It is part of the dist. &gt; The SSO module I found, using the ORM once again. You make your own. That's the point. If not in the DB, make something that persists to memory or file. I don't care and it has nothing to do with Kohana, per se. &gt; The PHPUnit plugin I don't know what you're talking about because it seems silly to me, to consider wrapping testing with application and I've never seen it (never looked for it?)
In current market you only work for equity if: A) You don't have to do much work (not full time) and can secure certain amount of equity by putting in few hours a week or so. B) You are an intern / starting out in this field C) You are an idiot
I'm not trying to prove you wrong. It would just be nice if you weren't so obtuse about it. I "know" PHP to the point where I can 80% of the time build an application with no problem, be it procedural or OO. I only have a couple of years experience using PHP, but I by no means would call myself seasoned. If you refer to the actual definition of seasoned it primarily refers to a time context, not a knowledge context. If OP has been building things with PHP for say, 5 years - I would call that seasoned. Although I'd also call a piece of chicken with herbs on it seasoned, but I'm digressing. My point is that seasoned is a relative term. Perhaps the better term to use would be experience, in this case.
If you mean solely for equity (i.e. no salary) then I never have and never would. If the company goes bust, not only do you lose your job, you also lose all your investment - at least with a salary once the money hits your account, it's your's. Also, remember that equity is worthless unless and until the shares pay dividends or the company is bought/floated. I would, however, consider working for a company where part of my compensation is equity - e.g. share options based my performance.
I think of it as a standard way to connect applications to share data. Much easier to handle and to debug. DB replication was a bad example...
I can get around the ORM issues, but wish I didn't have to. As for the PHPUnit comment, it more me thinking out loud on a decision they Kohana dev team made to create their own testing suite, but after a quick search, It appears to be a wrapper to PHPUnit, so it's not an issue. Do apologize about that.
It's a long time since I last heard about this. Is this even true anymore? With the changes Zend Framework has undergone in version 2 I find it highly unlikely. Please correct me if I'm wrong.
It is a joke, perfect example; Drupal was represented in the voting but has elected not to implement psr-1 or 2 in the next major release. V8?
GD is a horrible library for handling images. If your serious about images, you need to look into ImageMagick (either the php extension or command-line).
check out the book PHP Master by Sitepoint, great OOP resource.
Works perfectly!
ActiveRecord::Base + ActiveRecord::Migrations + Sinatra Routes = Laravel? What is the difference beyond Eloquent naming schemes?
Yeah, I don't think that's going to be possible. For one, class names are inherently different when you toss namespaces into the mix.
verify_host/verify_peer are the ONLY defense against Man-In-The-Middle (MitM) attacks on an https connection. There may be a few exceptions - but please do STOP using those minority use cases to excuse vulnerabilities. If handling user data, it is not optional. By all means, use self-signed certs that have absolutely zero trust on the internet for your own data. That's your own risk to take. Users, however, expect more. They don't want attackers stealing their data, their passwords, their emails, their session cookies, and their credit card information. The link goes to a PHP Security book. Here's the relevant link (yes, I'm the author). http://phpsecurity.readthedocs.org/en/latest/Transport-Layer-Security-(HTTPS-SSL-and-TLS).html
I just wish elementary tasks such as defining a route wasn't this ridiculously verbose: http://pastebin.com/H6EpqaHG I'm really not a fan of returning associative arrays as config everywhere. 
Yeah, I disliked that about the framework too. It doesn't stop with routes either, a lot of the framework is configuration based. 
There are lots of examples on the net, you'll find it's much easier than that mess called GD
Yeah, but associative arrays essentially sets the standard. I'm sure we'll see different code bases with just about every manner of configuration possible, but it disappoints me that selecting a sensible default isn't a priority. Not that Symfony2 is that much better in this respect since the community attitude seems to be to use whatever you want and app's end up being a mishmash of yaml, annotations, and xml, but at least the main configs generally are always yaml. 
would like too, but seriously cant justify the cost. Would be more attractive to me if it was up North, purely for networking. 
As others have said, if Symfony2 is a good fit, there's not pressing reason to climb the ZF2 learning curve. I've been hacking away at a ZF2 project through the RCs, and I'm pretty impressed with the framework. That said, a lot of stuff is still not terribly-well documented, and there's still a lot of work to be done. Not a lot of sensible defaults for things yet, for example. Also, no command-line tooling. I think, overall, it's good for the ecosystem to have two well-supported frameworks aimed at supporting the development of big, modular, event-heavy systems. 
I was looking for my first MVC framework as ZF2 was late stage beta. I followed the big name tut (forgot his name, think its now the official tut), got stuck / frustrated, and ditched it for laravel. Shortly after getting my noggin around MVC, I switched to Symfony. Why? The reason is simply this: jobs. Symfony is awesome. My biggest problem with it is finding support for php5.4 on lower spec hosting packages which a number of my clients use. Aside from that, it truly is making my life a lot easier and my code a lot cleaner. 
i had never heard of this position until yesterday when i saw this post. Today, I spotted a devops job on a jobs board i frequent :/ maybe it has always been there, I just had blindness to it. 
I was surprised as well. However, it seems that they feel PHP &gt;= 5.3 provides enough out-of-the-box: http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+i18n+layer
I guess what I'm really trying to figure out here is what angle ZF2 is taking on in the marketplace. Although I definitely agree with your last part - two big competitors constantly pushing each other is a good thing. 
Or use something that's a cross between the two, a content management framework like ProcessWire or here's a bigger list of CMFs: http://en.wikipedia.org/wiki/List_of_content_management_frameworks 
Agreed entirely. I'm just trying to figure out what technical merits ZF2 brings to the table. ZF is a huge competitor and one would think they might have a unique selling point. 
It's just a side-effect of adhering to some of the OOP principles, guidelines and practices. Maybe half of the major ones. Most of "popular" php frameworks spit on it all and just make another procedural (static) Rails clone.
Broadly correct, but consider using a job queue system like Gear man or RabbitMQ etc. There was a post maybe a week or so ago in this subreddit about using queue systems instead of databases for managing jobs. Right now I used a list in Redis and have a companion script that starts worker processes on demand when a new batch or work arrives. 
i've never had a problem with GD like this. check your watermark file and make sure the alpha is 100% transparent for the background. you might have a bug in your code too, try phpThumb, etc.
Was about time..
In my opinion that's a good thing.
I love Redis and I'm constantly impressed by its speed and ease of use. 
You're very welcome :-) 
&gt;Ex. Class MyUser wrapps/contains methods such as getName(), getPhoneNr(), etc. I like to think of classes this way, however it seems that a lot of people disagree with using classes like this: ex. from guy above &gt;Classes are not just a container for your functions. and I think I've seen this sentiment in writing somewhere. Why would someone be against this?
It's easy enough to do. Here's an example: https://gist.github.com/3646064
Keep in mind, ZF2 does not force any particular config format. You by no means are forced to use associative arrays if you don't want to. If you would like to use Symfony2's config component, that's perfectly fine. Zend\Config also supports ini, json, xml, and yaml. Each module provides its configuration via a getConfig() method which must simply return an array or Traversable object. How you get that array/Traversable is 100% entirely up to you. The ZF2 doesn't care at all. Additionally, you can modify the [default config glob path in the skeleton app](https://github.com/zendframework/ZendSkeletonApplication/blob/master/config/application.config.php#L8) to add other extensions besides just .php.
See my other comment -- you don't need to use associative arrays if you have another preferred format. PHP arrays will, however give you the best performance, hands down, as there's no parsing overhead involved at all. The routing config is complex due to how extremely versatile it is. Lots of options mean you have to be specific about what you're doing. Additionally, I've been discussing with Ben Scholzen, the author of the ZF2 router component the possibility of including an additional, abbreviated syntax for defining "common" or "simple" routes. This alternative syntax would only make available some of the basic features of the router. I can't guarantee that it'll actually get done, as there's really not much demand for such a feature, but I can tell that we've at least had discussions about the verbosity of route definitions. :)
You can use whatever directory structure you'd like. The framework makes absolutely no assumptions about your directory structure, what-so-ever; ZF2 project and module structure is entirely user-defined. We do provide some recommendations in the [ZendSkeletonApplication](https://github.com/zendframework/ZendSkeletonApplication), each of which have been very thoroughly thought out, discussed, and justified. The structure that's suggested allows for grouping things symantically, allowing things like PSR-0 to work within modules, enabling consistent rewrite rules for public assets within modules (though there's also modules like [AssetManager](https://github.com/RWOverdijk/AssetManager) for that), etc. If you still disagree with the recommendations, then you're free to organize your project however you want -- the recommended structure has a lot of input behind it. If you are curious about the justification of the various directories, you might want to read [Matthew Weier O'Phinney's "Why Conventions Matter"](http://mwop.net/blog/why-conventions-matter.html) blog post, as well as the countless threads on the [ZF-Contributor mailing list](http://zend-framework-community.634137.n4.nabble.com/ZF-Contributor-f680267.html) where this topic has been discussed countless times.
This is how I get most things past those clients that just don't get it. &gt; It not only increases security, but gives a two-fold improvement on performance and also raises the levels of synergy within the application. Done.
&gt;beginner friendly: /zend/zendframework/zendframework/zend/app/zendf/zf2/web/ First, it's nothing like that. Second, if you haven't already, you may want to take a look at the [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) autoloading standard, which is part of reason for the folder structure seen in many ZF2 applications. You're in no way required to adhere to PSR-0, but know that your classes will not be autoloaded if you don't.
When you wrote this, were you aware of: * https://github.com/react-php/react and http://nodephp.org/ * https://github.com/cboden/Ratchet 
But does it promote harmony between servers? Because that damn database server has been getting HR complaints up the wazoo. Something about lewd error messages and exposing its drivers.
For process management (read: keeping your PHP processes up and running) [supervisord](http://supervisord.org/) is pretty awesome. But yeah, what everyone else said: [gearman](http://gearman.org/)
Javascript has state, so there is state on the client side web. I guess it depends on your definition of web.
That's the thing. I've yet to see any kind of easy to read "feature summary" of major frameworks. Their websites are basically just lots of buzzwords and promises of developmental improvements but how can a novice actually see what these frameworks have to offer and how they compare? 
Would you by chance be talking about Akrabat's tutorial? When ZF2 was in beta stages I was going through that tutorial as well. He was a nice enough guy to put his project code up on github. I would suggest finding his code and going back through that tutorial, he made it pretty clear to me what was going on (I've got basically no ZF experience, I thumbed through some source of a friend's ZF project a year ago, but that hardly counts). I know that Akrabat would fix things in his PDF from time to time, but his github source was always working to my knowledge.
As others mentioned, a queue is what you want. We use [beanstalk](http://kr.github.com/beanstalkd/) at 99designs.com. There's a PHP client for it here: [https://github.com/pda/pheanstalk](https://github.com/pda/pheanstalk) I've heard good things about gearman but I haven't used it personally.
People who associate Symphony with anything "revolutionary" really need to start using languages other than php for a little while.
more alternatives is good
Kind of off topic, but anyways, down vote it if you don't agree :) The current state of PHP frameworks are that there are major, widely used, popular frameworks such as Symfony, Zend Framework, Cake used in big, complex, enterprise applications (and not only there). The rest just picking up the breadcrumbs. If you want to get contracts of such projects you simply have to learn to use those popular frameworks. Why? There are many reasons: 1. Management 2. The frameworks are well tested, has a huge community of professionals behind it. (Zend even gives out certificates to be a Zend Framework engineer) 3. The code base is stable, well tested 4. Backward compatibility, etc. But the question is, do you want to get those contracts? Many of us are either freelancers or part of a smaller company. Do we have that kind of resources / capacity to build a complex projects that would take years to develop? Learning Symfony, ZF, etc. is a smart decision if you want to stay in the business, but developing a small project using these frameworks in my opinion is just overkill. This is where the rest of the frameworks like Laravel, Kohana, CodeIgniter and the other hundreds come into the picture. Some support coding standards, best practices better than the other. Some of them just copying the popular frameworks (or inspiring from it...), but does it matter if you're just starting out? No, it doesn't. Pick any framework, pick many frameworks, see how it compares to one another. See if it actually helps or blocks you in your development. I myself use Kohana and push my team to use it too, because I personally think it's built upon a solid foundation, it doesn't block me, it helps me to write better code. I can't say that about Laravel for ex. With this I'm not saying that Laravel sucks, it's just a personal taste.
[Photon](http://www.photon-project.com/) ! Can't compare to most frameworks AT ALL. 
Akrabat yup thats the one. I did find his github code to work as intended. The problem I experienced was that I couldn't get it to work following his tut, so I figured I would grab his github repository. When I did, it worked, but I couldn't reverse engineer my way to find out where I went wrong. 
I work with ZF1 everyday and I already miss the old doc's layout &amp; design. Fonts are all over the place and the former right hand side navigation menu was better. I hope it will improve and I will check out ZF2 when I find the time.
You can also make use of Symfony2 components inside a ZF2 project as well if you like
 $url = "http://api-url-here.com/query?q='".$query."'%20AND%20currency%3AGBP&amp;key=key-here&amp;rows=8&amp;start=0&amp;format=json"; Just change the format parameter to json
How about focusing on the solution rather than a single word used in the brief background information? Seasoned just means experienced, and experienced just means has experience of, and fairly means moderately. So having coded in PHP for a while, yet not used OOP, I would say "fairly seasoned" is a perfect description.
Thanks. So the following is the formatting. I really appreciate the help, thank you. Example URL https://www.googleapis.com/shopping/search/v1/public/products?key=key&amp;country=US&amp;q=digital+camera&amp;alt=atom Example code "product": { "googleId": "9243781955569725518", "author": { "name": "CompUPlus.com", "accountId": "1209120" }, "creationTime": "2010-03-04T09:51:45.000Z", "modificationTime": "2010-11-25T09:24:08.000Z", "language": "en", "country": "US", "title": "Logitech Squeezebox Radio, black", "description": "Logitech Squeezebox Radio brings a world of free Internet radio subscription services and your personal digital music collection to any space in your home over your Wi-Fi network.", "link": "http://www.compuplus.com/Radios/LOGITECH-Squeezebox-Radio-BLK-930-1115160.html", "gtin": "00097855063601", "gtins": [ "00097855063601" ], "brand": "Logitech", "mpn": "930-000101", "condition": "new", "images": [ { "link": "http://content.etilize.com/300/1014430207.jpg" } ] "inventories": [ { "channel": "online", "availability": "inStock", "currency": "usd", "price": 183.19 } ], }
I really liked [phpsec.org](http://phpsec.org/) while it lasted....it hasn't been updated in 6 years now, though. 
Google `xml2json`, I think there's a couple versions floating around and though they're several years old, they work fairly well if all you're trying to do is take some XML and make some JSON out of it.
Yes. Silex is a great way to ease into the Symfony2 way of life. Also read and code along with this series of blog posts: http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
This. I have developed several applications using Zend Framework. I have switched to Symfony for new projects. NetBeans recognizes it and makes it easy to work with, unlike Zend Studio which is a pain. With Drupal moving to Symfony module development is going to finally be standardized. This is going to be a major step forward for the platform.
I want to believe. :)
because you can do everything with most of them. it's more about style and community.
You are correct in saying that Drupal 8 is not a Symfony CMS, but it is using more components than you give it credit for. The HttpKernel, the dependency injection container and the routing component have all been integrated and there is discussions happening which would see more components brought in.
Very cool. Yes I'm probably wrong, I learnt of this last time it was on reddit (when drupal announced it) so what like 6 months? I thinks is a very cool notion that more and more projects are aiming for interoperability. 
I'm not sure what the point is? [PHP already has an interactive shell.](http://php.net/manual/en/features.commandline.interactive.php)
If you're going for the least lines of code, you could combine lines 6 - 8 into: if (strlen(trim(fgets($stdin))) == 0) You could also cut out the header, as the prompt pretty much indicates what's going on. Also, I think a graceful way to exit (other than control-c-ing the process) would be nice.
Yeah, but then, how do I retain the return value of fgets? thanks for the other tips
Singletons are almost universally frowned upon, as they're effectively a pattern that creates GLOBALS. Using a factory wrapper here doesn't make this any less bad. Especially in the case of database connections, dependency injection is far preferable. As soon as you start unit testing your code, you'll begin to see why Singletons used this way are hugely problematic. 
Thats not the only thing i have in my contact.html file. just the form. I think im missing some id's in the select box also, but I could really just use the next step on getting at least one of those to send to my email domain.
I need the value from fgets, then I trim that value, then I pass it to eval. $r = fgets($stdin); Now user input is in $r $r = trim($r) Now $r contains the userinput without the ending newline eval('$_ = '.$r.';'); Now, I use that value.
It's fallen out of date. The SECTG is designed as an open mailing list - anyone with an interest in security can join and contribute time if they feel like it. We also have members doing work on documenting PHP security (besides myself).
Not a repost. This is the official announcement. The last topic was for a Github tag I believe that was premature. Thanks for not reading past the link title though.
I don't need to because I'm not refuting if singletons are good or bad. I'm simply showing how your argument is flawed because your logic flows is like this: Singletons are bad -&gt; Factories are too -&gt; Dependency Injection is preferred! It's completely nonsensical as DI has nothing to do with singletons nor factories. 
It shouldn't be any different. The statement will be executed inside-&gt;out. So fgets will do its, thing, pass its value to trim, which will pass its value to strlen, whose value will then be checked for equality against the number zero. 
Factories are OK. This crazy Singleton Factory is just an abomination.
Probably because it's not implementing a singleton but utilizing one, thus: Database::instance() 
If that's the scenario I don't feel comfortable answering this any longer since I don't know enough about your organization or the demands of the service. If I have nothing in place and no experience with a framework I would actually consider doing this from scratch. Framework will add overhead and you are already adding overhead with a middle layer. Interesting project though! Maybe someone else on here can give a better response I hope.
Basically. In that case the Soap Client/RequestHandler would take the input from the end client as JSON do the request to Axis2/c then respond to end client with JSON data. I already have this going without any 3rd party framework in place. Just wondering if there is any framework that is recommended for doing such a thing so I don't re-invent the wheel.
It's just tidious :) PHP's soapClient is far more picky about the wsdls then anything else I have encountered and it doesn't support simple things like extension (extending a complextype) or Annotation in the MessageMap.
teamphoenix, this isn't twitter. Use the reply button. Secondly, you should just use http://www.spbas.com/ and be done with it.
That'd be cool to see! Do you have any previously recorded sessions saved?
Great to see it finally released!
Basically I had the .php form set up but it was alot smaller a couple months ago. I only had email, name, phone, and comments box on .html page. I since then added alot more questions, and restarted the whole .php form. So I have nothing now. I found the last one only honestly. So yea this is the contents on the www.wdgentry.com/contact.html page. Thanks for response.
GearMan was a perfect fit, but a bit buggy to install on newer versions of Ubuntu
As far as I'm aware, it has been deprecated. Furthermore, it is used in a procedural fashion rather than the more object-oriented mysqli (which I believe has better performance) and PDO (which lets you effectively interchange the database type without much adjustment to your code).
Yes, I know all of that. I understand why it sucks, I really do. I understand why the alternatives are better. I use them. What I want to know is what **specifically** is dangerous about the mysql_ extension in terms of SQL injection if it does not support executing multiple statements
1.0 here.
You can screw with the where clauses of queries to execute subqueries or make yourself administrator, but otherwise, I can't think of anything. Just the risky way of doing things.
And then tossed out. You're not assigning it anywhere, and once you've passed it to `strlen`, you get a number back. What's more, if you run that again to assign it, you get the next line. You'd have to say like if (strlen($r = trim(fgets($stdin))) == 0)
Arg. Right. Sorry, yeah, you'd need to do $r = trim(fgets($stdin)); if (strlen($r) == 0) Sorry. Don't know what I was thinking earlier. :-/
Symfony has always been less than stellar when it comes to documenting things. They prefer to do it with videos, er screencasts.
Forgot about Kohana. I will test the feasibility of using Kohana and upvote ya anyways : )
Yii lets you put stuff wherever you want and add locations through your config file with their corresponding version of namespaces. http://www.yiiframework.com/doc/guide/1.1/en/basics.namespace The scaffolding and code generation that comes out of the box creates these folders and paths to them by default as a suggested way to organize, but their assumption is (I think) that any program that uses the scaffolding without modifying it won't be that big. We have a huge set of projects in Yii that share some componentry, and many of those live outside of all yii base directories and are pointed to through namespace aliases. Even shared parts of config files are located outside of particular projects. In any event, my point is not that Yii is the best (no flame wars! it's just what we use). I just mean to say that the one issue you bring up is not really mandated by the framework and is very easy to change, it's just how the default scaffolding happens to lay things out.
Then why didn't you originally ask that question rather than something so specific?
Gonna try what STLScience suggested first. I honestly didnt even know that thread thread existed.
I'm using CI to do exactly that right now and it's working like a charm. I basically created a Library that takes care of all the site-specific config data and modified my index.php and .htaccess file to utilize multiple domains. I autoload the library (let's call it Site_config), and when it's initialized I load the configuration info based on the $_SERVER['HTTP_HOST'] variable. When I need to access any data that's site specific I just call $this-&gt;site_config-&gt;variable.
That is actually really awesome. I wonder why they don't submit them to packagist, though.
You really should be doing this in the web server and not PHP. I haven't touched apache in a while so I'll provide an example in nginx although you can definitely configure apache or use an .htaccess to do the same there. location { listen 80; server_name domain1.com; root /var/www/domain1.com/public/; } location { listen 80; server_name domain2.com; root /var/www/domain2.com/public/; } Your applications would both simply point to the core framework via normal configuration and your local application directory $lib_dir = '/var/www/yourframeworkhere/'; $app_dir = '/var/www/domain1.com/application/'; 
Which kinda blows. I use facebook's phpsh, which is marginally better; what I really wanted was something like Ruby's [pry](https://github.com/pry/pry).
In CakePHP you can do this by making plugins, - essentially drop-in features of an application
&gt; "IBM and Google support Zend" &gt; "Zend Framework is done by the core developers of php" This is why I'm learning ZF2. It has a lot of credibility and seems to be a good long term bet. I like Symfony2 and think there is room for both frameworks.
In Kohana and Zend, your "components" equate to modules (although modules are supposed to be loaded on demand classes). The fact is, a module is just an organizational tool since routing is where the complexity lies for your case. How do you reference the controllers for ONLY car? What happens when you try to reference one of your namespaces (component_car is not a component, you just named it that afaict) that doesnt exist via uri? What happens when you attempt to access a controller action that doesnt exist via uri? Most MVC frameworks have the routing (how to control what controller action) and after that it's just chaining together controller actions and views. Models are loaded on demand from autoloading. 
[Agavi](http://www.agavi.org) does this easily. In fact, I have a production application that does just that.
I hate documentation via videos, this is the primary reason I've not bothered to get to grips with Syfony, though I would really like to :-/
This is also kind of a lie. ZF is hardly worked on by core php devs. Zend employs some people that work on php and/or core extensions, and it employs people that work on ZF. AFAIK those groups hardly have anyone in common. As for IBM and Google well, Symfony stuff is used by the BBC, Drupal (which is itself used by the White House website for example), YouPorn (if that carries any weight with your boss) and many more. I'm sure you can find enough buzzwords if you look a bit. You can also point pepole at http://symfony.com/six-good-reasons 
What you're looking for specifically, is a "multitenant" capable framework. We ended up developing our own as there are some unique requirements involved.
I've just published a blog post about why you would want to choose Symfony over framework X? In this post, I've tried to list the main selling points of Symfony, without using any buzzwords and only facts. http://fabien.potencier.org/article/65/why-symfony
Are you receiving it through a linked gmail apps for business account? If so, they require some extra headers. Then again it's good practice to make sure your headers are all correct and link back from the domain that sent it. I think it's those inconsistencies that throw the spam filter
Have you verified that PHP is the problem? There are plenty of things that can get you put in spam. The first thing I'd check is if you are on a blacklist like Spamhaus. After that you need to sign your messages with DKIM and DomainKeys. Then set up SPF, and Sender ID. Make sure you set up reverse pointers. Finally make sure the user you are using for PHP is a trusted user so your mailer isn't sending out warnings in the headers. Even after all this your messages are going to end up in spam for some people. And some people will randomly mark your messages as spam even if they initiate contact with you asking for help.
who is the fabpot for zf?
What's windows?
this article is perhaps one of the worst comparison articles I have EVER seen. First, he claims that he will explain why he chooses Symfony over Zend, and then lists six points, all of which are true for Zend. It seems like he's just a fanboy who never used Zend before. Why is he getting any attention at all? * Symfony is not a framework but a project. Zend components can be used individually or as part of an application * Symfony is used by many large companies Zend is used by a ton of large companies * Symfony enjoys a huge community of users and contributors Zend also has a large community * Symfony has been created in 2005 and here to stay Zend are the INVENTORS of PHP and have been around since 1997! While they are a company providing paid-for support, Zend Framework is released under the BSD license, so it's full-on open source. * Symfony embraces the "don't reinvent the wheel" philosophy Zend is a very comprehensive framework built around principles of re-use and design patterns. Definitely follows this. * Symfony tries to bring innovation to PHP Zend 2.0 is also based on PHP 5.3 functionality. There may be features where Symfony tops Zend, but this lame article didn't mention any of them.
I agree completely, the article is useless. But, you know, the guy who wrote it is the lead developer of Symfony. That maybe explains the fanboyism.
Ah, that explains it. You would think that someone who would obviously have a deep understanding of these types of systems would make such unfounded statements. Perhaps he is so busy working on Symfony he hasn't found the time to look at Zend. In which case he should not be forming completely uneducated opinions.
If he's the lead then it kind of turns me off to Symfony already. There's been a lot of hyperbole around frameworks these days, especially javascript and ruby, but PHP also. Even the simplest libraries have very fancy websites with ridiculous adjectives such as "heroic", "classy", "opinionated", "artistic" etc. It appears that the brogrammmers have taken over. Get off my lawn! ;)
Today I've started migrate our in-dev project to 2.1 from 2.0. Wohoo! These changes will cost less now than later ;-)
There are loads of reasons why you might get treated as spam. If it were me, I would consider using Mailchimp's API to send via (its very simple to use). Mail chimp will handle sending the mail and they spend all day every day making sure that their mails are treated as genuine by all the ISPs.
You should still try it. I work with Symfony on a daily basis and I enjoy it a lot. Fabien Potencier has written better articles in the past and Symfony is a lot more than just him. At least he focuses on what's great about Symfony and doesn't bash others. 
I would say private vs protected is one of my biggest irks. The other is that some events are not raised consistently across the whole framework as you'd expect (some components raise events like madmen, some are almost totally quiet, some raise before events and not after events, etc). Other than these two things I'm pretty happy with it overall.
It's not a direct comparison between Symfony and Zend, "Z" means "Any other framework" (included Zend). Fabien said (comment #8): &gt;Anyway, feel free to create the same list for Zend Framework as it would help people choose their frameworks more easily. If you list most of the things I've listed here, that's fine too. I didn't said that Symfony was the only PHP framework to have these characteristics. Keep in mind that PHP has hundred or event thousands of frameworks. So, of course, similarities exist between them. Fabiens is proud of his creation ;)
Ok, I'll try to wrap it up to a decent place this weekend / week. I'll try to post here when I get it up. I really need to make it psr-0 compliant, as the code started back 5 years ago and I never bothered to clean up the naming conventions. It will be here eventually: https://github.com/ell0bo/snap-php Just an underlying theory of what I'm trying to do with it. It allows you to group all your functional code (js, css, templates, models, views, controllers, and db) into one module. Say, say you have user/view/Basic.php, user is the prototype, and Basic is obviously a view. It will then go and grab user/templates/view/Basic.php for the presentation. You can then associate CSS and JS with the template via the user/view/Basic.php . My model layer is a complete POS, but it's also the oldest part. So, the flow is Model-&gt;Controller-&gt;View-&gt;Template To overload a template you simply put a template of that name further up the PHP include path. Generally I have my core framework, my personal library that hasn't made it over, and then the actual project. If I want to change how the template looks just for the project, I put the code in project/snap/prototypes/user/templates/view/Basic.php. It will override then what is in the module for the framework. Makes life easier and stems from working with Zend many years ago and not being happy with it. The reason that it's called SNAP (system of nodes and prototypes) is that you build a site by snapping nodes and prototypes together in the templates, and all the other code sits behind the scenes. Building a view out of other views becomes easy as all you need to do is $this-&gt;append( childView ) in the template. Once you have enough nodes and prototypes set up, building new sites becomes a simple matter of just adding templates with whatever particular formatting is needed. 
I'm just going to leave this here: http://www.reddit.com/r/PHP/comments/zi05z/why_symfony/c64r95c
I'm not sure that you're coming at this from the right angle. It's not that `mysql_*` is simply insecure by nature, it is that the programmer needs to be exponentially more proactive about securing their database interactions while using them. The methods have been deprecated because there are cleaner, more viable solutions that provide cleaner, inherit security out of the box.
Your unedited post was very suspicious. If this is the case, then you really should have been more clear. To answer your question, yes IonCube and Zend Guard are fairly easy to get around. There's not much that can be done in order to prevent it because the encoded script has to be decoded and sent through the parser at some point. I won't get into the specifics of how, but anybody that knows enough about the inner workings of PHP and the Zend Engine can figure it out.
There is more to this - most private end-user ip's are on Spamhaus' PBL list. This is to help preventing malware from sending spam. You simply have to manually remove your ip [here](http://www.spamhaus.org/lookup/). Note that doing so means that you are taking responsibility for emails originating from your ip - if you happen to catch some malware or something like that that starts sending spam, then you are likely to end up on the real blacklists such as Spamhaus's SBL.
What do you mean unfounded? You yourself are misreading his post. He's answering a general question: &gt; Why would you want to use Symfony instead of X? *Not* just, &gt; he claims that he will explain why he chooses Symfony over Zend Which you seem to think he said. So he's making a bunch of generalised selling points, all of which are true, and none of which are unfounded. I think you want to *want* there to be fanboyism and ignorance in his post more than actually exists.
Actually, it was even X, not Z :)
Sometimes its not even about the domain. Hotmail is notorious for blocking legitimate email relay servers.
&gt; Massive ones e.g. millions of concurrent users you'd probably need IBM Sequoia to run it due to the overhead. If ted, CBS, BBC and youporn are only "medium" size sites, then yes I don't think fabien needs to be marketing his php framework to google :P
You're still not understanding. I'm saying have **one** engine/application directory total. It sounds like he doesn't want to create a separate app directory for each virtual host.
thx for clarifying this.
Make sure your PHP version is up to date though -- was getting errors then saw my shared host was using 5.2.17.
I think Fabien also fails to mention Composer which is the Symfony crew's solution to dependency management in PHP and a product of the Symfony project. Composer offers PHP's best hope for a new era in dependency management and many are arguing that it should be merged into the core. It's a big deal and the Symfony crew delivered it. The Symfony crew are doing big things for PHP, we can stand here and argue over what does Framework X have that framework Y not have but if you are a fan of PHP I don't think there's any other part of the PHP community doing a better job of taking the PHP community as a whole to the next level than Fabpot and friends. As far as others in here who are arguing that Symfony is too big of framework for small projects than there is Silex, and if they are arguing that it will be too slow for heavy traffic sites I ask what enterprise framework has a better reputation for efficient scaling (not that Symfony is known for being a speed demon but what enterprise framework is)?
I asked my host if they could update php/phpmyadmin/everything else they used... they told me their "Operating system doesn't support the new versions". We are looking for a new host atm... or might host our little site for our self..
Your criteria make no sense. You describe a (hypothetical) micro-framework, and then say you don't want a microframework.
I do understand this. However, the frame needs to be aware of the domain that is being accessed as themes and content will change depending on that domain.
Strange, my findings on general framework speed couldn't be any further from what you've experienced. In my findings, Symfony's request/response model by itself is pretty fast. The "overhead" you speak of is usually your application code. If you keep performance in mind as you code and follow some general best practices, you can stick pretty close to that baseline page load. Also, I have never observed a 4-6 second refresh on normal page loads in development. The only time that I see page loads that high are almost always something related to inefficient database queries or a cache miss. I'll pull some numbers from the site I'm working on now. This is in development mode with a development server (an Amazon EC2 micro instance with about ~768M of RAM running ubuntu with distro release Apache/MySQL) Normal page load, no database queries: Test 1: 128ms Test 2: 133ms Test 3: 142ms Page with ~50 doctrine entities loaded and ~8 database queries: Test 1: 243ms Test 2: 250ms Test 3: 237ms Page with ~200 doctrine entities loaded and ~200 database queries: Test 1: 1040ms Test 2: 1019ms Test 3: 1051ms (If you're writing a controller that executes this many queries / objects, this by itself is a code smell...) In both scenarios 2 and 3, according to the profiler the most time spent during page load is in my controller code. 
I assume you're asking about who the lead architect for ZF is, and that'd be Matthew Weier O'Phinney. 
It can depend on your host. We wanted to use a Rackspace Cloud Site for an application we were building. A few days in we were noticing that a LOT of our mails were going straight to spam (more so than we'd noticed during development). After investigating we found that our IP was already flagged. Turns out that the IP block used for Cloud Site was on a Spamhaus list. ( [http://www.spamhaus.org/sbl/query/SBL143170](link) ). We changed our setup from a Cloud Site to a Cloud Server (so we had our own IP outside that block) and things improved considerably. Still have a bunch of stuff going to spam, but there was a definite improvement.
lol, windows 7 doesn't have its own http.sys, it's probably skype.
Nah, I'm pretty sure I'm correct. Salaries typically end up being half of the amount that one would get for a regular hourly rate, as a general rule. That's the benefits/no-benefits tradeoff at work. The biggest benefit being 40 guaranteed hours a week. ;) If you do know of a place to find Indian developers with four years of experience for less than $20/hr, please send me a link; I'm not aware of that being the case and would love to hear about their products and/or services.
I was using Drupal as a comparison of what I am looking to achieved : http://drupal.org/project/multidomain , but as a framework. I do enjoy CI with the modules (HMVC style). So your solution is to hinge the configuration file off the requested domain, and then let everything else follow? That would make sound sense to me, and I will try that.
Yep, I just autoload the config library that I wrote by editing /application/config/autoload.php. When that library is initialized it loads the settings and configurations based off of what domain is being requested. It's as simple as that!
I too was curious about this. I searched around on Google and learnt that the new (responsive) mobile edition of BBC News incorporates elements of Symfony according to this [presentation](https://speakerdeck.com/u/jcleveley/p/how-we-built-the-new-responsive-bbc-news-site). Do you mind me asking where/what you worked on in the BBC? I rather enjoy learning what the webdev teams at the BBC are doing on the BBC Internet Blog.
Welcome to Reddit. If you speak out against the hivemind, you are stuck down rapidly. The hivemind here being a bunch of web developers seeing 6-figure SF offers being thrown around, and suddenly feel they are "worth" $120k even though they only have a couple years experience under their belt, so anything outside of those sort of pay ranges are viewed with utter disdain. I miss regular ole forums that promoted discussion and not simply "most liked comment to the top!" strategies.
I've been using an opensource CakePHP-based CMS called Zuha lately. It's currently in Beta, and can be found at https://github.com/zuha/Zuha May not be what you want/need, but is a great jump-off point for many different types of sites, all running on the same code. Different domains can override base functionality too. Interesting project.
This. Also find a site that will give you the results from spam assassin. 
gg Fabien. Links every site he mentions except YouPorn
Can you be more precise please ? What's THE spam box ?
It might be worth going through Amazon's [Simple Email Service](http://aws.amazon.com/ses/) to avoid this problem if your emails are important. 
ZF2 does this too, and it does it right. Your basic folder structure is project/ config/ &lt;--- global configuration modules/ trains/ planes/ automobiles/ vendor/ &lt;-- third party libs, like ZF2, Doctrine, zf2-style modules from third parties, etc, managed by composer Each module has a fairly deep structure (kind of intimidating at first, but the conventions are all there for valid reason), but it's pretty much what OP wants. Symfony2 is similar, though modules are called "bundles" and just about everything in the framework is a bundle.
This post would be better served on one of the [official php mailing lists](http://php.net/mailing-lists.php). The people who have the ability to create change at this level frequent those. There's no guarantee they come to reddit.
Sure, the intent is not to get the attention of the web-php maintainers, but the attention of the PHP community and users of php.net in general to see what they think. I already have good karma with the maintainers for web-php and even contribute to the documentation on a regular basis :)
I think it would be a great idea to revamp the user notes system and start over with fresh notes. Right now I feel like it's no use contributing because it's already so saturated with notes that are now considered The Wrong Way™, even if they were The Right Way™ five years ago. A fresh start might be just what the notes portion needs. Also, what about a limited set of tags, so that we can differentiate between those little code snippets and actual notes about how to use a function/extension/class/etc.? If I'm looking for something about a quirk with function_x, I'd rather not have to wade through 37 comments about "here's something fun you can do with function_x".
The problem with involving much of the community in these issues is that they are often the ones putting the misinformation in to the user notes in the first place. What really needs to occur is a more aggressive moderation system (with change/deletion discussions) such as what occurs with wikipedia articles.
I'm gonna have to go more in dept with Yii. I've also just noticed the following: http://www.yiiframework.com/doc/guide/1.1/en/basics.module This seems to be what I'm looking for?
&gt; Very strong PHP background and skills. 4 years experience minimum. Deep understanding of object-oriented design. Familiarity with Git. Experience working with SQL, JavaScript (preferably jQuery), and HTML. ... **Roughly $20 to $35 per hour** wat
I learned PHP, in large part, thanks to those user notes. JSYK.
Personally, I've been ignoring user notes for years. To the point where my eyes have been trained to **not** see them anymore. I just think that like **Fustrate** said: &gt; right now it's just too crowded with less-than-ideal notes to make anyone feel like they're making a difference by posting something new. A lot of people feel this way and so the caliber of contributed user notes tends to drop since you have a lot of discouraged people not offering better notes where better is possible. The original intent of user notes was to possibly improve upon the documentation and not just open up the manual to general discussion or to become a repository of code. However, that seems to be lost now since hardly anyone pays attention to it. So the improvements should be geared towards achieving those goals, I think. You also have people like **aks8282** who feel they have learned something from user notes. Everyone learns differently and whether that's by example or otherwise, not everyone feels they're learning what they need to learn from the manual alone. I can understand this since the manual is a technical documentation and doesn't aspire to teach general concepts to beginners like "programming" or "how to build a web forum" or "what are design patterns and how do you use them". Things that are better left for tutorials, blogs, and forums like SO.
exit works, but echo doesn't.
Personally I think the Reddit comment sorting algorithms would be absolutely ideal when applied to the notes. A lot of research has gone into the Reddit ones, so it would avoid reinventing the wheel, too. I feel an upvote/downvote system and perhaps a "threaded reply" feature on each note would be vastly beneficial. No need to clear out the old notes completely as the upvotes/downvotes would quickly sort out the good from the bad/outdated.
I tend to assume there exist poor people who suffer the depressing scenario that they are on PHP 4 and can't upgrade due to legacy systems and offer actual answers and assistance rather than simply parroting the same thing the other 20 comments say. Of course you should avoid deprecated libraries if you can. That's a no-brainer. OP has already said he knows it's deprecated. Sometimes you can't use the newer systems. More to the point, use of MySQLi (and maybe PDO I've not used it yet) still doesn't mean you shouldn't surround known ints with quotes.
Although there is a lot of cruft to wade through there definitely are some gems in there. Unfortunately a lot of the time the notes are pointing out things that really should be in the documentation so a vote up/down system would definitely help. For instance there are a lot of times where you only find pertinent information like "Note: this function suffers from bug x in php version x". There is also a section for this kind of information in the documentation itself however it is usually lagging far behind the reality of the code in question.
DUDE. That's exactly what I was looking for :) Thank you very much :)
I wonder ... if we fire up a reddit instance, then scrape all the pages and notes, insert as reddit post and comments, and let the community decide what *should* stay and what *should* go. How it's handled from there is up for debate as well. What about new notes? Actually, this would be a fun project. I'll get started on it.
Twig being standard is a good thing, IMO. Any framework takes time to learn 'best practices' but Symfony has a lot of stuff built-in like DB migrations and Twig. Cake doesn't include that out of the box. I've been directly responsible for sites with thousands of requests per second, and while we did not use Symfony for it due to legacy concerns, the point is to pick something that maximizes developer time, because hardware is relatively cheap. Not sure why your development environment was so slow, that sounds like something very much outside the norm.
The notes on the PHP manual have definitely helped my understanding of some functions, especially some lesser known or used functions which the manual may not provide examples for. With that said, changes should be made to make it easier to contribute to while cleaning out some of the old cruft. It's highly likely that anything from the previous major release (PHP 4 era) is very out of date and should be removed. I'd advocate for archiving notes once a new major release comes out. For example, when PHP 6 is released all of the notes made for PHP 5 are archived to a copy of the PHP manual for that time. This is the approach that the PostgreSQL manual takes. You can look at the manual for each major release - with or without user comments. This keeps the user comments fresh and relevant. If you're looking for help to make this happen, or perhaps someone to volunteer some time with moderation I'm happy to help. PHP has helped me earn a living for over six years; been a hobby for ten. It's time I gave something back. 
This. Plus, mysqli can compile against mysqlnd which is just faster in general.
And you also probably unknowingly, at the time, gained a **ton** of bad habits from them too. Before you downvote, I'm not saying you're a bad programmer or anything like that (how would I know?) but there is some atrocious advice in those comments.
A programmer who thinks he's perfect is the worst type of programmer. Nobody's ever perfect, or even close to it. Especially in the ever-changing world of programming.
The only time the notes *might* ever come in handy is when the manual doesn't do an adequate job of conveying information. There are still plenty of items in the manual that lack good documentation. I think the time and energy should be spent polishing the manual.
That's precisely the purpose user notes was meant to serve. PHP is a huge language and it gets updated very quickly. Most of the time it's not until a feature is released that some aspect of that feature becomes obvious to be people and requires more thorough documentation. Having thousands of eyes on something is far more likely to spot things quicker than the eyes of just of a few of the core developers. With that being said, a lot of the user notes aren't really serving that purpose currently. So they usually either get deleted or go unnoticed. If a note brings something to the table that the documentation doesn't it's usually integrated into the manual and removed (because at that stage it's served its purpose).
I think your ideas for sorting and rating the comments on php.net are bang on as they are exactly what I have long fantasized as how they could be revamped. Treat the comments much like any reddit comment or stackoverflow answer, allow them to be voteable and sortable and rank them using something like a Wilson score. As far as allowing users to log in I think the best solution would be to allow users to either login with their github accounts (OAuth 2.0) or perhaps their stackoverflow account (is this possible? OpenID maybe?). In addition to either of those options a user should have the ability to make their own dedicated php.net account. Don't delete the comments already there, I think sorting them by a Wilson score and giving users the ability to vote should quickly send the garbage ones to the bottom of the pile. php.net is will organized in how it presents its documentation and I believe it to be a wealth of information. Bringing it's user notes section up to "web 2.0 standards" and allowing the community to be even more involved will only increase its awesome sauce and the PHP community will be better for it. I think your ideas are great and even better, I think a lot of people *already* share them which means you're really on to something. Please go for it.
The hindrance isn't really in a lack of choices for how to keep track of users on php.net, but more of a technical burden no one has bothered to spend some time solving. OAuth 2.0 seems to be the most viable solution, but the real challenge is in implementing it so that it will work and doesn't present a huge maintenance burden. Sure, I'm not the only one to request these features, but to my knowledge I'm the first one to provide an actual implementation. You'll notice that the mailing list has discussions dating back to 2009 about these features. A lot of the backend code that runs php.net is old and ugly and no one has bothered to work on it for ages. I'm surprised it still even works at all! But despite these problems php.net lives on and I think that's a wonderful thing. To keep it alive and ticking would be even better :)
Not necessarily. The **change log** section of the manual is usually fairly up-to-date. The problem is when you get a regression that nobody spots. That can happen and it's not just in PHP where it happens. There are also bugs that are difficult to spot because they're corner-cases that the core developers would have never thought to test for at the time. That's one of the good things about user notes is that it can bring up those issues that some users have played around with enough to be able to spot things others have missed. Voting those up will make the documentation team more aware or at least make them easier to spot since there's a lack of people who consistently work on user notes. Too many notes and too few maintainers just means some things go unnoticed (some times for far too long).
I think few alternatives are good, since it shows great momentum for a php. Even in ruby world, there are frameworks like padrino. Phastlight is not built for "reinventing the wheel", it is built for the reason that the speed of node.js-like php tools are not optimized and not fast enough to even attract developers from node.js. React php, accord to benchmark, shows only 1/5 of speed of Node.js, and it is using libevent as the core library instead of libuv, the library behind Node.js, so phastlight try to bring some fresh air in the php community for this aspect. Ultimately, I think the most important thing is to invent the better wheel for the job, thus technology keeps moving forward.
Just going through my old comment history as I am a bit drunk right now ;) but I can tell you I attended a conference with some Hootsuite developers not too long ago and they have done exactly that. They said (I asked them personally) that Gearman does not scale well so they wrote their own PHP daemon which runs whatever processes they require for their backend. So long story short, your suggestion is being mimicked by real world enterprise applications and I will check out that link :)
This reply is coming a bit late but yes, I'm still working with it into my existing apps. One example of something I knocked out while testing out the framework: http://drinklaughchug.com/ 
Drinking games? I am drinking now my friend! I'm guessing I'm not the only one crusing the /r/php boards after a couple ;)
I'd upvote it more; phpsh is really nice.
Kohana
You need to flush the output for the echo to work http://php.net/ob_end_flush
And he made a triangle out of it. No looping construct support, no statement support; pointless.
If there are a lot of variables in the text I usually do "{$var1} is a var, and {$var2} is one too." the brackets make it work when you have multidimensional arrays that could make it ambigious.
You accidentally a word in your title. 
Yes it is. The php executable doesn't chop out -a for the windows binary.
You could try using [Silverstripe](http://silverstripe.org) and organize the code however you want. It builds a manifest and works with that. The framework itself drives me insane, but it will do what you want it to do. 
Classic cargo cult programming. Avoiding one of the primary language feature (string interpolation) that differentiates interpreted from compiled code. And it appears your lengthier code results from the aforementioned (but untrue) single quotes were faster meme.
Why being an asshole about it? If he's a beginner, reinventing the wheel is very good in my opinion, as he'll learn a lot from it.
The op stated they were extracting a filename from a URL. I didn't make any assumptions about what the URL would look like in any given case and as such I provided the most reasonable solution for the problem :) $url = "http://www.example.com/foo/bar.jpg?baz=quix"; echo basename($url); // gives us "bar.jpg?baz=quix" not the desired result echo basename(parse_url($url, PHP_URL_PATH)); // gives us "bar.jpg" Cheers
Thanks for the explanation. :)
So first I would avoid file get contents if possible, as it loads the entire string into memory which from I gather based off your requirements is not required. Now if your statement specifys that your search string is always on its own separate line, things get even easier. Assuming these conditions I reccomend SplFileObject with strpos, for the fastest and most memory friendly way. Example pseudo code splfo = New splfileobject( file ) Foreach splfo as line If false !== strpos(line, &lt;your str&gt;) Splfo-&gt;write(&lt;your new data, in chunks here as a loop or one write depending on memory consrraints&gt;) break; The same can be done with fopen if you have no 5.1 If you insist on load into memory, which you shouldn't really need to, do something like this because str replace is faster then any of these other options as well as very clear. Str = filegetconts(&lt;your file&gt;) BewAre = Str_replace( ... Args ... ) Please note I posted this from a cell phone I apologize for formatting. -Chris
It's actually a one-liner. No regular expressions, no searching, etc. list($old, $new) = explode("##-- DO NOT CHANGE BELOW THIS LINE --##", file_get_contents('whatever')); Later, file_put_contents('whatever', "$old##-- DO NOT CHANGE BELOW THIS LINE --##$replacement");
Either 4 spaces in front of the line you want formatted or tick (`) marks wrapped around text you want formatted.
We'll for starters he wasn't looking for assistance - he just wanted to know specifically what was wrong with mysq\_. So providing workarounds for it isn't even very helpful. The reason I posted to many times in this thread is I'm just so sick of the attitude with the PHP community that so long as something works - however shit it is - it's fine and you're a snob or not "business-minded" for suggesting otherwise. It's exactly this mentality that means year after year new developers learn the same old bad habits, and why not? mysql\_ is fine. spaghetti code is fine. xss filtering is a waste of time. CSRF protection is a waste of time. parmeterised queries are a waste of time. coding standards are a waste of time. You don't REALLY need design patterns because XYZ. You don't REALLY need frameworks because XYZ (but don't let that stop you from writing your own really bad one!). It's just depressing to read people still defend mysql\_ at this point in the game.
I think it is a great place to start. Many of the extensions in the extension repository are written as modules. Just be thorough when you look at other people's code; since the extensions are built by the community they are of differing quality. Asset management becomes important when making modules. It's a good idea to handle any client facing files by registering and publishing rather than letting them originally live in your web directory anyway (that way you programmatically control including files only once, and you easily control when they are included, and you make it irrelevant what the folder structure looks like). If you are going to play around with it more, I highly recommend the rights extension for rbac and audittrail for logging changes. They are both done in module style.
You can do it in regex and *not* over think it. http://www.reddit.com/r/PHP/comments/zjw5m/seemingly_simple_task_i_am_having_difficulty_with/c659cvo
Yet another framework, so here's what I think: * The following buzzwords are not enough to describe your framework: "lightweight", "rapid", "easy", "MVC". * I don't want to go through your documentation and I certainly don't have the time or the patience to follow the tutorial to know what it can/cannot do. * I want a comparison with the frameworks you're competing with and tell me why I should even care about your framework.
you left out part of the quote. &gt;rather than silently working *in a way you did not expect* point is it won't throw a syntax error, it will continue evaluation, and you'll end up with "effects" that are actually subtle bugs, which are the worst kind to have to deal with.
I have found notes on PHP.net that explained weird bugs and situations of other oddness with PHP. Sometimes those notes described workarounds to those oddities, that I would of otherwise spent hours trying to figure out why it wasn't functioning as it should have. I find the notes that explain bugs that caused problems or workarounds for situations where that function just doesn't quite cut it (and another default one doesn't exist), helps save time writing and testing my own solution.
Definitely, *definitely* keep the notes. Sure, some are old and/or crappy, but they're extremely useful for finding out about buggy behaviour in edge cases, or with particular combinations/versions of server software. Want to use a new function on an older version of PHP? Comments will have an implementation of it. Some kind of voting would be good, and can be used to move to the bottom those comments which no longer apply. StackOverflow or Reddit type would work. I wouldn't mind having to create an account, OAuth would be nice of course.
fair point, I'll look into doing this. Biggest challenge here is that there isn't much competition. Only one other MVC framework for WP that I'm aware of which is actually documented.
“Lightweight”? It requires a local install of IIS 7.5 and SQL Server Compact even though I've already got Apache installed and will be targeting MySQL. No thanks.
Get a virtual private server at alienlayer.com and install Subversion and Trac. There is a Trac plugin for NetBeans but it doesn't work very well. If you don't want to mess with installing &amp; configuring SVN &amp; Trac PM me and maybe we cn work out a deal where you can use ours. 
I understand. Basicly what I am getting is that detect domain, change config based on domain, then the rest of the site follows. I found Kohana lacking, perhaps with age it will become great. 
Edit: I originally saw this post on my phone and "On Windows" at the end of the title was not visible. Sorry for my off-topic reply. Also, it doesn't seem to have a download for Linux. For anyone looking for a really light weight but featureful IDE, check out KDE's Kate, the Kde Advanced Text Editor. I believe it works on Windows now too, although there it needs some of the KDE base components installed. For Linux users, it is about a 5MB download if you have any KDE component already installed or it comes with the standard KDE desktop. - Syntax highlighting for a variety of languages, PHP of course included - Many plug ins included, I will mention a few below - File browser panel with seamless remote editing - Text snippet manager with template and completion - Tab bar, and/or button bar, and/or quick document switcher - Integrated terminal emulator - local and remote backup copies - Indentation styles and cleanup - Code bookmarks and folding - Block select mode - syntax highlight themes - vi input mode - "insane"-style HTML completion - + a ton more stuff I am forgetting Oh, and of course, it is open source and integrates with KDE or GTK environments. 
The PHPStorm IDE integrates nicely with git and Github. I'd recommend paying for a micro account on Github and then keeping your project on there as a *private* repository (i.e. no one without permission can see it). Your project would have multiple branches: a production branch which is your stable branch, a development branch which serves as the branch that all your team's different developers merge their branches into to achieve stability, and then each developer has their own feature branch which they work on in their local development environment. You could do this without Github but the ability to login to Github from anywhere with an internet connection and browse your project's source code, you team mate's sourcecode, plus Github *has issue tracking* makes the few dollars you would spend with them a month a paltry sum for the level of value you would receive from them. If anyone has an issue they can open a ticket in Github for your repository. If you want to take issue tracking to the next level I'm sure there is third party solution someone could recommend but you could start with the Github offering and see if you outgrow it. With git and its distributed nature using Github doesn't mean your project's source code repository won't be hosted on your server it will, and it will be hosted anywhere else you clone a repo of it. But Github will mean that you will always have a copy of your source in the cloud which I find to be a relief, and will give you many other benefits which I'm sure you'll learn to appreciate as you continue to work with git.
First of all, let me correct a misunderstanding, you can use Github without your software being open source, you pay for a private repo ($7 USD to start for private repos). Secondly, don't cripple your choices of very important things like version control and bug tracking -- with something dumb as your text editor -- even a fancified text editor in IDE form. Any decent sized team will have multiple editors used (Vim, Emacs, Sublime, etc)... so don't use integration as a major point... leave that up to the developers, just pick common / standard / great tools with web interfaces. On the great tool front. It seems like http://gitlabhq.com/ would do everything you need and more... Git + Permissions + Web UI + Bug Tracking + Wiki + Shoutbox all hosted on your own server.
Thanks. http://gitlabhq.com/ looks wonderful, giving it a try now. Though i'd normally agree with you on the editor part, we are only 5 team members and i don't think getting everyone to use the same editor would be much trouble.
If you told me I couldn't use Vim I'd throw a fit, not unlike how a child would if you took his candy. As long as the code that comes out of the editor is the same, why bother picking a mandatory editor at all? Just make sure you all agree on code formatting.
I fundamentally and passionately disagree. If you are worried about the editor other team members use, you have already failed.
Yeah, just to add to the opinions here, I'd quit my job before changing to a mandated text editor. If you think that is important, there is no chance of you working well with others.
That seems like the perfect setup to poke fun at other languages and their users, which is always fun (until people get serious, that is). "A programmer who thinks he's perfect is the worst type of programmer, or he's a Ruby programmer."
That's how I always did it, still: what's so bad about the other way? Isn't it good for security purposes, to hide as many implementation details from the user as possible? You can't really sniff session vars, you can't forge them...
I heard Emacs and Vim are also pretty neat. scnr.
Yup, all IDEs worth using also have formatting options to make sure everybody is on the same page. 
Why in the world would you use subversion when git is free? I'm not trying to troll here, but I honestly can't see why anyone would use subversion anymore, unless they have never used git and are scared to look into it, or they have been fed some fool lies about git.
You should at least alter the twitter bootstrap colors. Otherwise it seems cool.
git is more for distributed environments such as with open source, SVN is more for a team build. They have advantages and disadvantages. 
Thanks for the explanation :)
&gt; Why in the world would you use subversion when git is free? Subversion is also free. The only non-free part in dcpanthersfan's post is the getting a virtual private server as a host, and it would be just as non-free if you installed git on that VPS instead.
IDE: no clue, I just use vim. Version control: git. Setting up a giros is server is pretty easy if you have a vps somewhere. You don't get the nice interface, but you can set up as many repos as you want. Issue tracker/code review/repository browser: phabricator. It's free, pretty stable, and works pretty darn well. Has nice command line tools for doing code review an handling diffs. Under active development, and just requires a LAMP stack
If I was working for you, and you told me which *text editor* I had to use, I'd not be working for you anymore, because that's a pretty bad sign.
Aptana + Git + Trac
I think you've been very misled about what MVC is. MVC is not singular. You should have multiple controllers that interact with any number of models and views. Models Views and Controllers are not the only code in your application. Routing is handled by whatever routing engine you use, which then triggers different controllers based on what the request was. Errors occur wherever the error happens.
&gt; Anyway, it's all inside one huge class file with nearly 10000 lines Is that for optimization purposes? If not I would say it's not as object orientated as you think. Moving on to the issue: &gt; However, I would also like to make it more MVC ish, so, should I have one controller that controls a whole lot of models, or controller that controls one model with loads of "sub-models?" [sic] This is a bit confusing to understand, I'm going to make the assumption you don't have a lot of MVC knowledge. So we have three components in MVC: * Model, * View and * Controller _Side note. People interpret MVC differently and you'll get different advice. This is what has worked for me. On with the code ..._ * Models These classes hold data to be persisted. Here's a simple example: &lt;?php namespace News\Model; class News { public $id; public $name; public $summary; } Think of the class as representing a row, document, etc ... in the storage mechanism. It shouldn't _care_ about how it's going to be saved. That's the job for another class (a _mapper_). _Note_: A lot of frameworks make a huge mistake in this regard and will tie your model to how it's going to be saved (Kohana ORM!). This makes testing harder. Zend Framework 2 does this properly as does Doctrine 2 I believe. Make sure you check to save yourself headaches down the line. So a model is just a bare class with getters and setters. You can add other logic that works off the fields to generate dynamic content. Easy peasy, that's it! * Views I work with the idea that views are classes. A lot of frameworks don't, although I don't imagine it'll be long before they change. &lt;?php namespace Application\View\Model; class HomePage extends \Zend\View\Model\ViewModel { private function newsArticles() { return $this-&gt;getVariable('newsArticles'); } private function router() { return $this-&gt;getVariable('router'); } private function text() { return $this-&gt;getVariable('text'); } public function getNewsArticles() { $articles = $this-&gt;newsArticles(); $compiled = array(); foreach($articles as $article) { $compiled[] = array( 'title' =&gt; $this-&gt;text()-&gt;shorten($article-&gt;name, 25, '...'), 'summary' =&gt; $article-&gt;summary, 'fullTitle' =&gt; $article-&gt;name, 'location' =&gt; $this-&gt;router()-&gt;assemble(array( 'slug' =&gt; $this-&gt;text()-&gt;slugify($article-&gt;name), 'id' =&gt; $article-&gt;id, ), array('name' =&gt; 'newsArticle')), ); } return $compiled; } }; All my view class is doing is transforming data from one state into another. `getNewsArticles` is iterating through news models and is generating the URL (location), title, summary and full title. There's a bit of boilerplate in there because it's from my Zend Framework 2 project, you can ignore it. That's easy too! * Controllers Call the view classes, models and other classes to construct the final output. If you have to deal with post data then that'd be in here also (anything request related IMHO). public function indexAction() { return new \Application\View\Model\HomePage(array( 'css' =&gt; 'welcome.css', 'newsArticles' =&gt; $this-&gt;getNewsTable()-&gt;getLatestArticles(8), 'router' =&gt; $this-&gt;getEvent()-&gt;getRouter(), 'text' =&gt; $this-&gt;getServiceLocator()-&gt;get('Text'), )); } Again, there's a bit of ZF2 magic happening in the above code which means that it'll use the `application/application/index.phtml` template to render the HTML below: &lt;?php foreach ($this-&gt;viewModel()-&gt;getCurrent()-&gt;getNewsArticles() as $article): ?&gt; &lt;article&gt; &lt;header&gt; &lt;h3&gt; &lt;a href="&lt;?= $this-&gt;escapeHtml($article['location']) ?&gt;" title="&lt;?= $this-&gt;escapeHtml($article['fullTitle']) ?&gt;"&gt; &lt;?= $this-&gt;escapeHtml($article['title']) ?&gt; &lt;/a&gt; &lt;/h3&gt; &lt;/header&gt; &lt;p class="article"&gt;&lt;?= $this-&gt;escapeHtml($article['summary']) ?&gt;&lt;/p&gt; &lt;/article&gt; &lt;?php endforeach ?&gt; You can see how `$article` is related what I'm building in `getNewsArticles`. So that's the gist of it. I'm not a great writer so if anything is confusing you don't hesitate to ask. PS. Why do any of this you ask?! When your boss tells you to change something (they will) you wont have to worry about things being coupled together and breaking. For example: I can swap out the storage mechanism for my model without affecting the model. 
At work, we have a custom issue tracker, but I agree that Aptana + Git make a great combination.
PHP isn't really the best language for SOAP calls, primarily because SOAP wasn't designed for PHP but rather .NET; however, there are [integrated libraries](http://php.net/manual/en/book.soap.php) available.
Atlassian provides public and private repos via Bitbucket at no charge for up to 5 users. Jira and Confluence cost extra but well worth their costs.
&gt;&gt; Anyway, it's all inside one huge class file with nearly 10000 lines &gt; Is that for optimization purposes? If not I would say it's not as object orientated as you think. Moving on to the issue: I would agree. Either you have lots of classes in one file (which is really bad for maintenance, or you only have one class and it's not really OOP design at all, just a set of functions and an additional scope. I'm not quite sure whether mine is strictly MVC or just separable model with themes for display. The theme template is provided with data, rather than requesting it...
SVN is not more for a team build. It is for people who haven't learned git. SVN cripples project flexibility, creates idiotic pointless limitations and makes branching and merging a punishment.
Nobody's mentioned Beanstalk yet. They offer hosted SVN, Git and Mercurial repositories. Their deployment tools are second to none in my opinion, and the UI is really nice too.
To make it slightly less religious -- rather than just git. Use *ANY* DVCS (Git, Hg, Bz, Darcs) -- there is no reason to use a CVCS system anymore... the industry has moved on.
*sigh* I'm certainly not defending it. About 30 people have said that it's broke. It's broke okay? The 31st person isn't adding anything. And regardless of whether you're using PHP or ASP.NET it's sensible to quote any data that's going in, even if you think it's an int. Nor do I think you're particularly accurate painting a picture of the PHP community as being particularly problematic. Legacy systems and implementations are a problem on all software systems. Heck there's still some places running IE6. Is it bad? Yes. But the solution isn't to simply spout the upgrade scenario and the YDIW answer. Of course it's true but it helps no-one. You continue by painting a straw man of my arguments, and only undermine the position. In no respect am I saying security is a waste of time. The argument about mysql being deprecated ISN'T that mysql is fundamentally insecure, it's just easy to write insecure code with it. (Of course it's equally easy with $mysql-&gt;query() but that looks cooler because it's OOP so that's not given the hate). If PHP suffers in terms of professionalism it is because it is used in script style as well as formal application style, to hack a solution together. This is however less prevalent now. However, the fact that PHP (like Javascript) is a gateway language for many people moving past HTML and CSS means that overall code quality isn't what it is for languages which don't have this accessibility. Regarding frameworks, I would argue that this argument can be applied to many things in software development. There's no need to develop a new browser, the current one is fine. There's no need to develop another web language, Perl is fine. There's no need to develop another CMS, drupal is fine. Frameworks are powerful tools. But the simple fact that there is more than one indicates that one size doesn't fit all. Regarding design patterns, there's a lot of hype on MVC and ORM and ... Does it suit lots of scenarios, sure. Is it a golden bullet? No. PHP's problem is that it refuses to remove features rather than just deprecate. We have 3 database engines, people will always pick the one with the most documentation - which is the oldest. It took till 5.4 to remove magic_quotes as an option... 
sometimes you are chained to your workflow and committing to a centralised repository is easier to deal with. When your on one project, and publishing regularly, a centralised repository such as in SVN is beneficial. This is no diss on git, they both have their uses, git is great for everyone working on their own having their own copy. It has great uses in todays online environment.
*twitch* A couple questions. #1. Have you actually ever used Git? #2. Are you aware that Git can be used in a centralized corporate fashion just like SVN? #3. Are there any specific (not generalized) reasons you can give me to EVER use SVN over GIT except "we already use it"... if there are I would love to debate those points.
Mandating a text editor is the fastest way to turn that team into 0 members.
Soap has been around a lot longer then. NET has even supported it. 
Netbeans + Mercurial on Bitbucket is my combination of choice, though we don't have a NB plugin to enable Bitbucket's issue tracker yet. Depending how frequently one visits the web UI that might not be too much a problem, but even without issue tracking it's a solid combination.
**IDE** PHPStorm. Really quick, awesome intellisense, great plugins. In terms of a full-featured IDE, this beats out Netbeans, Zend Studio, Eclipse + PDT for me. **VCS** Git. x2. It's awesomely quick, branching is great and doesn't give you the headaches of SVN branching, etc. BitBucket provides free private hosting if you don't want to pay anything. If you want to drop some bits, GitHub is admittedly a nicer interface. **Issue Tracker** Pivotal Tracker is what I use for day job and side stuff. Quick, easy to add and plan out iterations. It's good stuff. Also, a little self serving, but I built a client for Android called Turning Point (https://play.google.com/store/apps/details?id=com.dydro.turningpoint)
Never heard of it before now. They seems to have a good setup and great integration points. 
Thanks for the feedback, it is on the to do list :)
You have to make sure everybody is using the same encoding and make sure your editor doesn't do anything funky with text indentation (as in saving tabs as 4 spaces). Other than that, what variables would you need to cut back on? Setting up team-wide settings on different PHP IDEs should take a few minutes *at most*. 
Maybe this helps a bit : [How should a model be structured in MVC?](http://stackoverflow.com/q/5863870/727208) Routing is **not part of** MVC design pattern. It is done before your code actually hist the MVC-ish part.
we use https://www.assembla.com - git -phpstorm (used to use netbeans, recently switched to phpstorm).
Anyone tried it yet? Opinions? I also have 3 beta keys if anyone is interested in (seriously) testing it, so please let me know via PM.
I was talking about OPs current system which states he has only one file. Clearly you **should** have many smaller files.
Trying to find a product which does all three really well, is really difficult. Without a doubt Id use git in some way for version control. Whether you use a github private repo, or host your own repo is less important. Personally I prefer to host my own. I wont comment on IDE, since Im a mac user and all I really need is a text editor. For ticketing, I use MantisBT. Its ugly but functional, and I have a nice multi-developer workflow going on with mantis and git. You might like to look into Redmine, which does ticketing and has some form of git integration. 
Sorry but this is nonsense. I dont know of anyone who has taken the time to learn git, and would ever consider using SVN again
The default installation for PHP on Ubuntu/Debian uses a cronjob to clean up old session files based on the PHP ini setting for session.gc_maxlifetime (See [this](http://stackoverflow.com/a/654341)). As this is beyond your control, you won't be able to increase the session time while using the default location for session files. One potential solution for this can be found in changing the location of your session files.
It might be just an alias, cause Cmd+P its on the Go to Menu, when you press Cmd+T it highlights the same menu but it's not there... And yeah, Cmd+R is my favorite function, not only with functions, for example, in CSS also populates it with your #blah and .blah (don't know their name, IDs and classes?)
Your host is a shared server, right? In that case, PHP is storing everyone's session files in the same directory somewhere on that server (by default). Every time a session is started (on any site running on that box), there's a chance (default 1%, session.gc_probability/session.gc_divisor) that garbage collection will happen. What garbage collection does is expire/trash any session files that haven't been accessed in more than session.gc_maxlifetime. So even when you change session.gc_maxlifetime, it doesn't matter, because some other person's scripts still has the default. And you're sharing the same session storage directory. Solution: create a directory (outside the web root!) that PHP has read/write access to, and set session.save_path. So, assuming your site lives in some place like /home/yourname/public_html, create something like /home/yourname/sessions and set proper permissions on it. Then in your script: &lt;?php ini_set('session.save_path', '/home/yourname/sessions'); ini_set('session.gc_maxlifetime', 87400); session_start(); //...
How had user notes managed changes between versions?
Same way it's always been.
It might be one time where I'd look into using a framework and associated libraries (personally I hate frameworks as all the ones Ive tried give with one hand and take away with the other). There is also Packagist, which I see as an up and coming replacement to PECL -- http://packagist.org/ I dont use this yet, but I plan to look into it more when I get time. Id imagine there's some registration/authentication libraries there you can use
This is the one that I used for my website. It was relatively simple to modify according to my needs and the tutorial was rather helpful. [Check it out](http://tutorialzine.com/2009/10/cool-login-system-php-jquery/)
How about we leave submissions to real content, okay?
Sounds similar to CodeIgniter... tried it?
You misunderstand git. All of this can be done using git, including a local and even USB key repo
It's pretty dated - it uses the old **mysql_** library
exiftool Cryptic but powerful. :) Not a library, but there may be one that interfaces with it. I dunno. 
- refactor your code ( you have long methods with high cyclomatic complexity) - fix your [SRP](http://en.wikipedia.org/wiki/Single_responsibility_principle) violations - write unit tests - place each class in a separate file By the time you're done with this list, you will know exactly what was wrong with it.
http://usercake.com/ is the one i use. works very nicely and if you know what you're doin it can be easy to modify
Good point, thanks.
php 5.2 doesn't support "function() { .. }" style anonymous functions. I doubt these people are using php 5.3.0 or greater either.
If this is a public website, I strongly recommend using OpenID, so people can sign in with providers like Google or Facebook. It means that people don't have to come up with a new username and password for every single site, so it simplifies things greatly, and you don't have to worry about securing your user table so much (or even things like password resetting).
Just out of interest, what is your preferred editor? 
Sorry, I'm still new to web programming. Are there any major downsides to using the old mysql library? Should I consider changing the whole login system for my site maybe? If so, what would you recommend? Thanks.
[See the big red box at the start of the documentation?](http://php.net/manual/en/function.mysql-query.php) That'll tell you what to do.
This is why php has so many outdated libraries. Nobody fixes them instead of taking the easy (read: wrong) way out.
I found [this wrapper](https://github.com/romainneutron/PHPExiftool/tree/master/lib/PHPExiftool). Though it's still in active development, I hope that I can use it with CodeIgniter. I really just wish it were simpler to read and write these tags.
I mean, how do they deal the problem where a comment is no longer relevant because of a change in implementation between minor versions? Do they have a person who looks for such comments and deletes them?
I just built a data-heavy site with CodeIgniter and Tank Auth. If you are looking for a light-weight authentication without role management, I will recommend Tank Auth. Your description of framework sounds like Codeigniter.
Mainly Coda, sometimes Sublime Text 2.
I've only worked on a lot of small to medium sized sites, so I'm only going to answer your framework question. If I don't use a major framework, then I'll build my own. This is because I have yet to see a single bespoke, non-framework driven website, which hasn't been a complete mess inside. Even bloated frameworks beat chaos. Maybe you need a custom architecture, and you can't find something that fits your size. However whatever you build needs to be well laid out, and predictable, just like any decent framework.
You state that the application "probably does not NEED to be reubilt from the ground up." While you may have technical debt in your code base, it can wait while you address your performance issues. It seems to me that you're probably having resource availability (and possible contention) issues during peak times. Before you start considering rearchitecting your entire application, you really ought to check into these issues: * Have you made sure that your databases are optimally tuned? * Are you using an optimal storage engine (read: not ISAM if the databases aren't read-only) for your application? * How well are your tables and views indexed relative to the requests you're making? * Are you replicating your database to slaves to separate the reads from the writes? * Is your load balancer working correctly? * How are your app servers' load averages during peak times? * Do you have enough app servers to handle the requests? If you're using a PaaS like EC2 or OpenCloud, do you need bigger slices, or more of them? * How is your network infrastructure handling your traffic? How much data is going through the pipes during peak times? And that's just to start with. How large is your Site Ops group? How many DBAs do you employ to take care of the databases? Based on such a peak usage degradation, there are far more pertinent questions to be asking than "how can I best refactor my code?"
These are great points. I appreciate that someone examines the possible systemic issues before considering a complete up-root of code. I'll respond to your points individually: &gt; Have you made sure that your databases are optimally tuned? To be honest, I'm not convinced it's 100% tuned but I think tuning at that point would be bandaiding the actual code problems. (The most popular page generates about ~500 queries) &gt; Are you using an optimal storage engine (read: not ISAM if the databases aren't read-only) for your application? The database usage is about 80% read / 20% write, and InnoDB is used for all tables. &gt; How well are your tables and views indexed relative to the requests you're making? I've spent some time indexing relevant columns for each view. One of the bigger issues is that Doctrine1 kinda sucks at creating efficient queries. &gt; Are you replicating your database to slaves to separate the reads from the writes? No, not beyond whatever Amazon RDS does. &gt; Is your load balancer working correctly? We only have one main web server right now. Because this is a "hobby" project and income received is insignificant, we do whatever we can to keep hardware costs to a minimum. &gt; How are your app servers' load averages during peak times? We have a web server, a DB server (Amazon RDS), than an app server (for the admin tool and for CRON jobs). The DB server generally handles everything just fine, the web server (running nginx/php-fastcgi) generally hits CPU max during peak times which usually results in the slowdown. I'm pretty sure this is mostly due to the generation of ORM objects on a particular page. &gt; Do you have enough app servers to handle the requests? If you're using a PaaS like EC2 or OpenCloud, do you need bigger slices, or more of them? I have no doubt that I could solve the problem by throwing more hardware at it. It's just not in the budget as our revenue/profit simply doesn't justify it right now. &gt; How is your network infrastructure handling your traffic? How much data is going through the pipes during peak times? I've never examined this specifically. I did move all content to a CDN last year and that helped a bit but just bandaided the actual problem and didn't fix any of the core issues. &gt; And that's just to start with. How large is your Site Ops group? How many DBAs do you employ to take care of the databases? Based on such a peak usage degradation, there are far more pertinent questions to be asking than "how can I best refactor my code?" Right now, it's just me -- this site is not related to my full time employer at all and is purely hobby for me.
Downvote for quantity over quality. Number 5 isn't even the right language.
You are being rather picky if you can't take some simple PHP examples and create your own class around it. As an open source developer, I would take the code from those various examples and create my own version in the format of my choosing (OOP in this case). 1: You can format the code to your liking very easily. I would choose to highlight the text rather than bold it, but that's part of the html or css style and shouldn't detract from the overall design. 2: This one is really rather simple, but the multiple loops could confuse people. Have you thought about improving on the code to fix what you believe is "flaky"? 3: Click the second link and follow the Internet Way Back Machine to the webpage. [Download v0.2](http://web.archive.org/web/20080506155528/http://software.zuavra.net/inline-diff/download/inline-diff_0.2.tar.gz). 4: Well documented code is not bad code. If you reduce the code to just the executable parts then you have something similar in size to #2. Did you want it to be a one-liner? 5: Sorry about that, but Javascript diff code could teach you a lot about developing a PHP version for yourself. 6: Use PHP functions like xdiff to do what you want. http://php.net/manual/en/function.xdiff-string-diff.php
&gt; You are being rather picky if you can't take some simple PHP examples and create your own class around it. It's not being picky to point out that you didn't solve their stated problem at all. They're looking for a wheel to reuse. You showed them pictures of vaguely round things and said "that's how you make a wheel!" &gt; Well documented code is not bad code. If you reduce the code to just the executable parts then you have something similar in size to #2. Did you want it to be a one-liner? Bad != verbose. There's a huge number of things in that code that I would immediately chastise a fellow programmer for if that came to me to review at work. It is, indeed, poorly written. Adding comments on crap doesn't make it awesome. &gt; Use PHP functions like xdiff to do what you want. I can't vouch for xdiff specifically, but THIS is the kind of answer they're looking for. Something that is pre-made, and high quality (I am assuming here, since it's in PECL). That answer was not part of your original, though.
waasnt being picky, just giving feed back im certain i could make my own 'OOP' library that had all the bells and whistles i want, but i was looking and existing project. as mush as we do diffs, i would assume something was out there. but since you were so bent, 1. its not even a function,, didnt even hit my title.. dont get me wrong, i appreciate the code share.. but this is exactly what spawns the threads of ' stop recommending bad code samples '.. again, not trying to bash, but cmon bro.. 2. yea, them loops be crazy. 3. good lookin, a project that doesnt exist.. we _almost_ made it though that titie ;) 4. ref. #1.. and at least recommend the latest v2.. 5. kinda got me on that one.. pretty good looking project, bookmarked for a rainy day.. but i need php.. 5a.. and im pretty ok with JS an all,, but nothing about a big ass lamda script,, would apply to writing my own 'OOP' library.. 6. the point posting was because i didnt have time to roll my own.. maybe i could have been more descriptive, like can it handle Kanji.. but i figured simple question, simple answers :) sorry for wasting your time bro,, i got ya with that uptoke ;) 
It sounds like you're not doing any caching at all with APC or Memcache (if your most popular page generates ~500 queries) - how about caching the results of some of those queries? Even if it's for 5, 10 or 15 minutes that could make all the difference if you're receiving significant page views and the results of the queries don't change very often.
i agree with him... just nicer.. 
http://www.reddit.com/r/PHP/comments/zn8pc/codeathon_4_hour_livecast_coding_sprint_time/
#1 is the only valid thing not directly accomplishable by making it public. And even then, I'd say that on-the-data-store is not the ideal place for validation and transformations at all.
I'm currently working on re-writing a large financial application that was previously written in PHP3 with _no_ framework. Complex business logic is mixed in with HTML, no concept of views or templates, terribly large queries for little gain, etc etc. We decided to go for the API-centric architecture due to the fact that we often had to integrate with 3rd parties and produce mobile apps, etc. We built our backend API in Node.JS (which was an __immensely__ good decision) using express and mongoose with mongoDB to hold the data. We've written all the complex Business logic as standard API calls with mongo using map/reduce and "populate" which has produced far quicker response-times from the API, and standard output across multiple platforms. We've also integrated a route that passes through Socket.IO information so that we can broadcast events to the browser directly from the API. We then used a light, modern framework (laravel) and rolled our own ODM interface (we modelled some parts of our system on the doctrine 2 project) which translated requests into API calls and allowed us to associate standard methods (such as client-specific mathematic calculations) alongside the data so we can extend these methods and then have them effect the entire codebase with minimal effort. We took advantage of Laravel's closure-based configuration syntax to deeply integrate Laravel with our ODM with minimal effort (before Laravel changed their system for implementing Authentication, we could integrate the entire Auth system with Laravel in just 20 lines of code). --- In my mind, the question you have to ask yourself is this: How much work do you want to give yourself - the balance is very much code-beauty vs time. If you do decide you want to go ahead with the API-centric design, it's really important to run extensive load-tests. One of the reasons why we chose to use Node was the fact that we could simply and effectively create a cluster to help balance any extensive load. Also, try to keep the client as "dumb" as possible. The smarter the client, the more redundant your API will become.
Nice to hear that it's finally released.........
Why would you add so many additional page requests when cookies exist?
So you went full hipster by using a micro-framework, only to realize that you needed in fact a regular framework ? :) Also, did you measure / find out what cause the lag during peak hours ?
&gt; The most popular page generates about ~500 queries How on Earth can you make 500 queries on a single page ? That doesn't seem right. &gt; One of the bigger issues is that Doctrine1 kinda sucks at creating efficient queries. Wrong. Are the querys created with DQL or generated automatically through the manipulation of models ?
This one really isn't too bad but you might have to modify it for your needs. http://phpuserclass.com/
Just because what Facebook does has the side effect that you intend does not mean it's a good implementation just to get that side effect. Second, if a user has a cookie blocked, then that is their choice and I'm not going to attempt to override their security decisions with site design. If they do not like having to refresh the page more than once every 10 minutes, then they know what they did to cause this. Third, your opinion on security architecture is not the one shared by the vast majority of the web. Can you provide sources of security experts who share this concern?
I've had good luck with the Kohana Subdomain module. It could probably be repurposed for domain routing pretty easily. https://github.com/jeanmask/subdomain
Look... I provided an alternative to increasing the life of a session... you just feel it necessary to troll, obviously. Mr. 6 day old account.
It's a six day old account because I'm phasing out my old username - [visual77](http://reddit.com/u/visual77) Also, nice ad hominem. I guess we're done here?
Firstly: Verify that APC is active, working and does not run out of memory. My second step for a quick optimization of a web application would be to install Varnish and start adding max-age headers to all outgoing data and configure it for stale cache delivery when the back end is slow. Even a 10 second max-age can reduce the peak load by huge amounts.
That answer was on the first google page i ran into. It's not that hard to search and stop complaining when you can't find what you're looking for.
Wait. Youre putting data from a large *financial* application into *mongo*? Thats just asking for trouble, reliability is not its strong point.
I used the inline diff from pear. Dunno if it's outdated or not: http://pear.php.net/package/Text_Diff/docs/latest/Text_Diff/Text_Diff_Renderer.html
&gt;AND, because various malcontents on [4] /r/php love to bash me specifically, I went ahead and had this [5] code reviewed. And they pointed quite a few flaws in your code. Your code is OK, but it is far from being a good example for people new to PHP. e.g. Mixing PHP, HTML and CSS in one file is sometimes acceptable, but not in the teaching material. 
&gt; Wrong. Are the querys created with DQL or generated automatically through the manipulation of models ? Refactoring with DQL would help, but unfortunately many of the queries actually get generated in the view layer itself by accessing collection / object properties programatically (yes I know this is bad and I would do it differently today). Refactoring to DQL at this point would mean throwing out most of the view template code. I'm not entirely wrong here, either, Doctrine doesn't know the most efficient way to generate statements even if you use DQL -- it won't do anything special to make sure it's properly using your indexed columns, for instance. Not that I'd expect that from any ORM. 
Yeah, that's already done and in place. ~500 queries only occurs on cache miss. Right now I have it set to a two minute cache and that already degrades the feature on the website -- the page is meant to be very dynamic.
Interesting. So far your reply is the only one who has taken an API centric approach, and it sounds like you didn't do it with PHP. I've yet to hear of anyone who went with this approach that stuck with PHP as their backend language. I'm curious as to what a backend API looks like in Node.js -- do you have any example code somewhere of a node library with a similar architecture?
I strongly beg to differ regarding your anti-single file statement: If you look at the bottom, all you see is HTML and PHP echo statements. That's hardly spaghetti code. I've found that initially developing apps as a single file **greatly** speeds up the process, as all one has to do is scroll up or down or CTRL+F in a single file to find what one needs and more to the program. After the initial iteration is stable, then I split it up into files, as I have done, here: http://bazaar.launchpad.net/~theodore-phpexperts/phpu-training/trunk/files/head:/5.tax-calc/
You're describing a Service Oriented Architecture (or SOA). Lots of companies use is to good effect, including places like Amazon.com.
- The class isn't a data store. - Making a property public is counter-productive if you need it to be read only - You don't understand OOP at all.
I agree that developing **small** apps as a single file could **speeds up** the process. But it doesn't make the code better though. And if you wont to teach people how to develop, you should start with explaining how to develop good code, not how to produce OK code faster. And refactoring your code right after you've finished writing it from scratch is a stupidest idea I've heard in a while
Just curious, why don't you want people to be able to access it directly?
I don't think there's a reliable way to do this from .htaccess. I'd suggest a bit of JavaScript in the iframe: &lt;script&gt;if (top == self) location = 'page you want to redirect to';&lt;/script&gt; 
I can't say I blame you. That is a legitimate concern. With Facebook you have pretty good control over how much private information is sent to third parties. To login with facebook requires you to authorize a facebook application that the website would setup. Whenever you authorize a facebook application, it's pretty clear on what the third party has access to. I could be wrong. But when you do the base authorization of an application, all we get is basic info such as name, gender, age, location and your facebook id. Anything else, and we need to ask for additional permissions to get. 
Thank you everyone in this thread. I'll take a look.
I don't like that you're downvoted. So have an upvote. Thanks for the recommendation. 
You can check the value of $_SERVER['HTTP_REFERER'] in your script which will have the url of the page the iframe is being included from. code: &lt;?php $acceptable_referrer_domain = 'oldsite.com'; if(strpos($_SERVER['HTTP_REFERER'], $acceptable_referrer_domain ) !== false || isset($_SERVER['HTTP_REFERER']) ){ die('you are not allowed to access this page'); } ?&gt; edit: I have no idea how to get the code formatting to work.
Except the algorithm is wrong in a lot of cases. There are many times when absolute garbage floats to the top. Usually it's someone's joke thread.
[Projection](http://en.wikipedia.org/wiki/Psychological_projection). 
Ha, it's not super-realtime financial data or anything like that. We experience a metric crap-tonne of reads, but only 5 or 6 financial-data writes to the DB in a day. We've been really happy using mongo so far - we can easily achieve &gt; 600 concurrent users pulling 1000 rows of data on a regular amazon AWS instance. It's really quick!
We're a PHP shop and we use it, we have a J2EE business logic tier (using things like The Drools rules engine) which is used by a PHP frontend. There's some other services running on various other platforms too - SOA let's you use the right tool for the job and ensure your services are decoupled and reusable.
 &lt;?php $acceptable_referrer_domain = 'oldsite.com'; if(strpos($_SERVER['HTTP_REFERER'], $acceptable_referrer_domain ) !== false || isset($_SERVER['HTTP_REFERER']) ){ die('you are not allowed to access this page'); } ?&gt;
Not similar to ours - we abstracted everything out a lot. You can see the routing system of native express [here](http://clientexpressjs.com/examples/routing) though. You get "middleware" and similar goodies as well. The code to make multiple worker processes is [here](http://nodejs.org/api/cluster.html). Again, very simple and intuitive!
This seems like the best solution.
No way I can think of to do this via iFrame, but simple with an AJAX call - you can use a simple div (or any other element really) in place of the iFrame and use JS to load the page in. On the called page, check for $_SERVER['HTTP_X_REQUESTED_WITH'] and redirect if it's not there. As always, using client passed vars for security is a no-no, but I find it works well for nav.
We're not really harassing him. OP is a troll who is operating under multiple aliases who seems to want to undermine the community by teaching newcomers bad practices. Whenever flaws are pointed out in his code, the victim card is played and claims of persecution is made, as it was in this post. Take this as an example (one of many): http://www.reddit.com/r/PHP/comments/wuhvl/phpu_lesson_more_secure_php_sessions/ (phpexperts_pro is one of hopeseekr's other accounts ^[1](http://www.reddit.com/r/PHP/comments/ypct3/securely_connecting_to_sql_database_with_pdo/c5xmqcg) ^[2](http://www.reddit.com/r/PHP/comments/euacs/free_service_for_all_zend_certified_php_5/)). As you can see from the thread, OP accused me multiple times of creating sockpuppet accounts for downvoting him. The only quarrel I had with him was that he was teaching bad stuff. He's a troll with a persecution complex, and he definitely should not teach. 
Since 5.4, $val = give_array()[3]; works. $val = (give_array())[3]; is bad syntax. ---------------------- &gt;[PHP 5.4.0 offers a wide range of new features:](http://docs.php.net/manual/en/migration54.new-features.php) &gt; * Support for traits has been added. * Short array syntax has been added, e.g. $a = [1, 2, 3, 4]; or $a = ['one' =&gt; 1, 'two' =&gt; 2, 'three' =&gt; 3, 'four' =&gt; 4];. * **Function array dereferencing has been added, e.g. foo()[0].** * Closures now support $this. * &lt;?= is now always available, regardless of the short_open_tag php.ini option. * **Class member access on instantiation has been added, e.g. (new Foo)-&gt;bar().** * Class::{expr}() syntax is now supported. * Binary number format has been added, e.g. 0b001001101. * Improved parse error messages and improved incompatible arguments warnings. * The session extension can now track the upload progress of files. * Built-in development web server in CLI mode. Checking the release notes can be fun!
Works as of 5.4.
 { "require": { "somepackage": "1.0.*" } } then $ composer install Even easier.
The point wouldn't be to move away from pre-built / independent libraries, it would be to decouple the code that handles business logic from the frontend codebase. Enterprise frameworks tend to be a "one-size-fits-all" solution, and often times I feel the business logic of your application gets buried in controllers or models, which hinders the re-usability of your code -- you're essentially tied to your framework if you ever want to do anything, like, say build a mobile version of the site. Previously I solved this by creating REST controllers around my models and accessing them that way, but HTTP round trips are an expensive replacement for what could be a simple database call (via the API) My plan for the API would be to base it off of Pimple and use Doctrine's DBAL layer for database access. The API itself would be it's own composer package that I could pull into any codebase that needed to consume the API. The web frontend would be done in Silex (which uses the very same request/response components that Symfony2 uses) with Twig as it's templating engine. 
thats cool, hope you find it as useful as me. I try not to evangelise about software normally, but git has revolutionised my development in the past 3 or 4 years. Just another tip, its worth learning git from the command line first, and then use gui tools if you want to. Some of gits features are hard to represent in a gui, so unless you understand what its trying to do, tools like SmartGit and TortoiseGIT can be a tad confusing. I prefer to just do everything via commandline git, despite being a fan of SmartSVN in the past. There hundreds of git tutes on the net, but simply typing 'git help tutorial' is a pretty good guide too, and often overlooked. 
Thanks for the input, this seems to be the solution for me. My webhost offers the following information: http://www.uk-cheapest.co.uk/web-hosting/change-session-save-path.php I have created a .htaccess file in my subdoman where the project resides with the following line. php_value session.save_path '/var/www/vhosts/subdomain.domain.org.uk/httpdocs/tmp' and I have created the "tmp" directory with filezilla and set its permissions to 777 (read, write and execute) for all permissions. However, when I echo the session.save.path, like this: &lt;?$sessionSavePath = ini_get('session.save_path'); echo $sessionSavePath;?&gt; it still shows "/tmp" and not my path. 
Stop fighting boys. Thanks for the code, hopeseekr. I'll keep in mind that it could possibly be refactored into multiple files as kinmix has said. The code itself looks good to me.
Wow that's great, really.
I am confused. Why has this only come to peoples attention now? PHP 5.4 has been out quite a while and I have been making use of the built in web server since it's release...?
I'm with you. This is old. Not sure what this post is getting at.
Could be one of several things: 1) make sure you set up the directory properly. It may be that there's a mismatch, and .htaccess isn't actually pointing to a directory that exists, PHP uses the default (/tmp). 2) Maybe your host changed the way they run PHP and you can't set stuff via .htaccess. Try just doing ini_set('session.save_path',...) before calling session_start. 3) Maybe your host is running some modified PHP that disallows changing the save_path. If so, find a better host (or try complaining) HTH
Really old news. I've been using this feature for a while now. 
I come back from vacation and the first thing I see is that phpexperts_pro/hopeseeker/etc. is back up to his old tricks. &gt; AND, because various malcontents on /r/php love to bash me specifically, I went ahead and had this code reviewed. Whoop-de-doo. If you notice, this community has no issue with bad code, or people writing bad code. We all have to start somewhere and I'm sure that each and every one of us has written bad code at some point in our lives. The fact is, we figured out what was bad about it, accepted constructive criticism and moved on. This is where you **fail**. You think that your code is awesome, first of all. Then what's terrible is that when *anyone* tells you otherwise, you basically start throwing a bitch-fit. But what pisses everyone off the **most** is that you portray yourself as an expert when you're check-full of bad practices. I mean, just this "Tax Calculator" example has everything in one single file. One of the first things you learn about good code is "Separation of Concern" and you have thrown that right out of the window. What pisses everyone off **even more** is that you have the audacity to ask people to **pay you** for this horrible information that you're peddling. I mean, even now you're asking people to "drop you a line" at "PHP University". Why? So you can scam them into buying your shitty advice? Just stop. You're a bad influence on this community. Shut down your shitty "university" and actually learn how to do some good code. I mean come on, **[you can't even get a simple cash-register example right](http://www.reddit.com/r/PHP/comments/xj6rz/what_to_include_in_my_portfolio/)**, and you're going around telling people that you can teach them? I mean, [this](http://codereview.stackexchange.com/a/15481/1079) answer there (which you have conveniently chosen to ignore) highlights **everything** what is wrong with you. Furthermore, you were incredibly dishonest with your question. You bitched about "reddit malcontents" who call out your code but didn't say why. The issue is not your code, the issue is **you** and how you present yourself. If you had rephrased your question on Code Review as **Does this code qualify me to call myself a PHP "Expert" and to charge others to teach them my expert knowledge?**, I *guarantee* you would have gotten different answers. In short. please stop trying to teach people bad things. 
im currently using VisualSVN, ive used ToroiseSVN and SVN through Eclipse before, we had a look at Git when i was at work a few years ago and decided against it. Im building a web startup currently, ive just come back to it after a year away from it. Installed NginX and all the latest installs of php, mysql, and php packages used on my site. i did a test of apache vs nginx. I have timer written into my code, and nginx is showing a minimum 60% increase in speed on my laptop. Thats just one user. Although to do a proper test, i would need to test firefox vs chrome over apache vs nginx due to chromes speed on javascript compiling. There is a noticable difference. What other tools might i be missing out on.
My thoughts: - If a framework exists to do what you want, **use it**! It will save you frustration in the long run because you're not fixing bugs in your home-grown framework and the business logic. - Separating the core business logic and abstracting it into an API is a **great idea** and I think you should go ahead and do it. Doing it this way encourages you to conceal most of the inner workings and *only* expose what you need to the outer world. So this will naturally lead you to better encapsulation and better separation of concern. It will also prompt you to think about how *others* use the code. This approach also results in very loose coupling between the business logic and other layers, which is also a good thing.
Not to sound hipster... but this has been out for some time.
Maybe a stackoverflow like system? Though that might be redundant... because these days I mostly just end up looking at stackoverflow anyway. I did learn a lot of PHP from the user notes but a decent amount of what I learned was bad too.
That's what the community is upvoting. The algorithm is just doing its job!
Its hard to say without knowing what sort of project you're running. I dont use a huge arsenal of tools for my website to be honest, but I do heavily rely on memcache and sphinx search (and of course git). If you want a remote git repo with multiple remote developers, you might want to look into gitolite (or the somewhat obsolete gitosis, which I use). These allow controlled access to your git repo via a simple ssh connection. I've heard good things about nginx, but never found time to properly benchmark it. It doesn't surprise me its performing better than apache though. Initially I changed my site to use lighttpd for static images, which saw a massive boost over apache (1.3). I later moved all my servers (including php fcgi) to lighttpd. I think Apache 2.x is a lot better these days, but since lighttpd is not even breaking a sweat, I dont have a reason to try it again. There's also nosql solutions such as Mongo, and Redis. I've used mongo and it does have its uses, but I've not found a compelling reason to use it yet, and I found admin of it to be very painful. Finally theres Percona server, which is a fork of mysql (and enhanced in many ways). I think if I was starting anew, Id definitely be looking into it instead of vanilla mysql.
I discovered very early that the user comments were not necessarily good, and have generally ignored the "look at me I'm so clever" comments. However, the comments can have excellent use cases and provide context that the documentation proper does not.
How would you suggest it should function then? A computer is yet unable to determine exactly what constitutes relevant/informative content (if it was, there would be no need for voting algorithms at all). So it's up to the audience to determine what reaches the top.
So ok. I'm not attempting to help people as good as you. I'm trying to help people become better than they currently are. We're all on a growth curve, including you and me. The differences between the two of us are that I do not continuously stalk you via a sockpuppet or two and I try to enhance the community best I know how. I promise you that I have and will continue to better myself and to try to better others along the way, as well.
Um, I don't go around causing any problems. Certain personalities such as yourself and PointsOutBadCode like to, however. Therefore, you guys are the ones with the attitude problems.
What is it claiming, exactly? I can't seem to find a single claim in the posting at all. Please enlighten me.
Show me one of your submissions where I have said anything negative about you? There are none. You know why? Because I'm decent like that and don't go trying to rub your name in the ground at every opportunity. Now, name one post by me that you have not had something negative to say about me as a person.
I use their IntelliJ product which is more focused around Java but still provides php support. I haven't used phpstorm but if it's basically IntelliJ w/ the Java gutted I say yes. Given php isn't strongly typed there are obvious limitations to what an IDE can do for you. At the same time I think Jetbrains pushes the envelope on things like refactoring and reference finding beyond what netbeans or eclipse could do for you with PHP. If you write OOP PHP with patterns such as dependency injection with type hinting where members are private and only ever initialized via the constructor it's wonderful for autocomplete too.
Human interaction via a group of moderators who understand the php language. No algorithm is going to be better than that. The issue is, and is always going to be, that each person in the community is going to have their own idea of what meaningful/relevant and correct is. The PHP community has proven many times that it gets this wrong ... a lot. For example, look at how long it took to correct all the misconceptions about references. It took several articles by prominant people and a lot of chastising to start to reverse that, and it took *years* before we stopped seeing $foo = &amp;new bar;
Hm... Maybe I need to update my PHP. I tried a $query-&gt;result()[0] call the other day expecting it to work but it didn't work
Yes. A thousand times yes. If you use a modern object oriented framework, the smart auto completion, code generation, git/mercurial/svn integration, and refactoring capabilities will save you time. Syntax highlighting for just about everything you can think of, including YAML and Twig. Fantastic remote file editing, too, a feature that often gets ignored in IDE's. For small projects, I still use Sublime Text or Coda. For large projects, phpStorm is a staple. 
This is what I use. I swear I paid $50, regular price for it then. Weird.
Probably for people who did not notice this feature. It was a useful reminder for me.
Yeah, no. As someone that's used PHPStorm for the last year (after using Netbeans for six months, after using Aptana for three months, after using PHPed for two years) PHPStorm is *by far* the best of the bunch.
And... the reason is.... ?
There's far to many things to rattle off. It just *feels* better while you use it. It's as responsive as PHPed, while being in Java, its code-hinting is *remarkable*, it's flawlessly integrated with Git/SVN in ways the other editors wish they could be, it has command line tool support for frameworks, js and css doc code inspection, it allows for overrides on objects when the *extremely* rare quirk with code hints comes up, it has data sources for easy database hints. It's just a great all-around IDE. To be skeptical just because it costs money when there's a free option is silly. Have you tried PHPStorm?
Good 'ol internet, try to give a constructive unbiased opinion and rewarded with downvotes. Edit: I guess I spoke too soon.
I've tried PHPStorm and PyCharm, haven't found a better IDE. A little chunky, but it works amazingly. I've applied for a student license ($29, woo) and will be purchasing it as soon as they accept it. 
I get all of that with netbeans and it's infinity% off constantly. What's better about phpstorm?
lol.
Uh.. I don't know, maybe in their [repos](https://github.com/zendframework) ?
... See what I mean?
Using array dereferencing (as mentioned, available since PHP 5.4) likely means you have a function that needs refactoring. If your function is returning more data than you need, and spending time creating data-structures that you don't need, that's a *possible* sign of bad code. Now sure, there are times it'll happen, API result sets for example, where you cannot control what is returned. But even a nosql database will typically let you limit the response document to just what you need. Also, as a former user of Netbeans^* I checked to see if phpStorm supports this. Here's a [15sec screencast](http://screencast.com/t/4tioG3dc4) of how it behaves — I'd say this was a nice unexpected surprise, but these kinds of things is the norm in phpStorm. ^* I switched about 2-3 months ago after about 2-3 years with Netbeans, and I still use it on certain tasks that span multiple projects as phpStorm is missing the ability to open multiple projects, but this is the only feature that I miss.
Try it and find out. I was using netbeans extensively for a while, tried phpstorm and have not looked back once. It just works, overall, better. They both check off 80% of the same feature boxes on a comparison chart, but PHPStorm (imo) runs better, smoother, and often times does a slightly better job "figuring out" php.
I've actually been surprised a few times by how well code-complete works for JS in phpstorm.
thanks
That seems to be the general consensus, and I totally understand. But I'd have to pay the commercial license, which is $199, so to be totally honest, I'm just gonna go with ignorance is bliss and avoid feeling let down about my current tools :)
Ah I didn't realise it had been pushed to the main repos. I had been compiling it myself every time I wanted to install it on a server haha.
I used this at a place I used to work. I started there with netbeans and I hated it, it is just too slow. I tried some others like eclipse and apptana but... I don't know, I feel like they do too much for you. I want to be in control myself. I figured PHPStorm would be just the same but I gave it a shot anyway. Holy shit that thing is fast. Autocompletion on complex structures work like a charm and I can see where code is no longer used or what is double. The only thing I really didn't like about it is the default key-mapping. But this is quickly fixed. Changing settings is also a breeze thanks to the search option in the settings menu. Like any other IDE, it requires some getting used to but I found it very easy and very pleasent, where with netbeans it was more like 'due to lack of better I guess I'm on this stupid IDE' If you work with big, complex projects, PHPStorm is very, very much worth it.
I do not remember it having that when I last used it.
49€ + 19% taxes, so more like 58€ actually.
I use sublime text for large projects, and there's never a problem. Also, it's hardly worth mentioning syntax highlighting - every editor and it's puppy does this.
&gt;Let them keep laughing - I only know PHP You should take steps to correct that. Not because there's anything wrong with you using PHP, but because growing as a developer means being exposed to more things. Different languages take different approaches to solving problems, and it may introduce you to concepts you would never have considered otherwise. You might find that through the heckling, there are some grains of truth to the things they're saying.
one of my colleagues thought the same, but then installed it and is very happy (apparently the JS and CSS support is excellent). It doesn't look overly "native", but look past initially and after a while you won't even notice. 
PHPStorm for the IDE, and BitBucket for your source control/issue tracker. BitBucket is free for up to 5 people and works with Git and Mercurial, so you can take your pick of which DVCS to use.
You can use EAP, it's free
You don't need to use heredoc. And phpstorm can highlight your sql in string
I've worked at a bunch of places where some of the guys I trusted most weren't computer science in college. A few were actually media. What I recommend you do is get a linux vm running and start to learn the whole lamp stack. Just that little bit of knowledge will put you ahead of others. After that, learn an mvc framework. I usually recommend code igniter to new guys. It's pretty standard and the concepts translate well to other frameworks. Also, read books on technical design and architecture, as well as start playing with javascript. Front end design is more about the architecture than anything else.
I downloaded the trial and don't really see that many advantages over [PDT](http://www.zend.com/community/pdt/downloads). Can anyone tell me why I should pay the $50 for this rather than use Eclipse?
Fair enough. The thing that drove me absolutely insane about Aptana was that I couldn't just open a single file without having a project going. I was constantly opening things in notepad+ to make simple edits just because it couldn't handle that.
Bought it last year and it was the best 50$ I invested in my whole life. It just works and it's not getting in your way. Everything is integrated phpunit, php code sniffer, refactoring, code completion. The git integration is really great. If you work on a team with strict standards and continuous integration, then the 50$ is really worth it.
Even at that cost, my whole office (admittedly, only about 10 people) bought the tool. Ultimately, a $200 cost to make you even 5% more efficient is a hugely worthwhile investment.
Does it do a good job with html css as well? And does it handle java? I thought you had to use their other product if you wanted to get java support. Also I think you can evaluate an IDE in one or two days. Thats between 7 and 14 hours of use and research. You CAN'T tell me thats not enough time.
I did the math for myself once. The $99 PhpStorm cost me would be justified after a year if it increased my productivity by one quarter of one percent.
What kind of complete project, that would benefit from using an IDE, are you writing in 14 hours? That's absurd. If you're whipping up snippets use Sublime or Notepad++. It's fantastic with CSS and HTML. When you've got an HTML file open it'll even give you a breadcrumb of the xpath (and you can evaluate xpath at any time), and you get CSS id and class hinting when you've got CSS files in your project. I've never tried writing Java in my PHP IDE, but I'd fully expect it to not work.
&gt;Using array dereferencing (as mentioned, available since PHP 5.4) likely means you have a function that needs refactoring. In this case it's for a change password method, and I don't feel it necessary to have a method solely to get the user's hash since this is pretty much the only place it's going to be used. I'm basically just using a framework DB class to run a query, and it just happens to return an array regardless of how many columns/rows there actually are.
I find the comments extremely useful many times you will find code samples of implementations which help greatly since the manual does not have anything other than very basic examples.
(TIL) Thank you!
I was annoyed by that too, I think in 3.0 you can just drag it in (not really optimal but meh).
I've been an evangelist for API-centric approach for years and I'm a developer of a really neat API-centric micro-framework for PHP @ http://waveframework.com/ I ended up developing this since I realized that web development has been slow to catch up with desktop programming over the years, where API's are more common and more or less there for granted. Majority of web applications today get the whole MVC (Model-View-Controller pattern) wrong: views are tightly integrated and controllers often play a too multi-functional role in the entire system and are too tightly coupled with views. And a lot of web service API's within the last ten years or so have been developed as an additional plugin or extension, rather than core part of the main functionality. How to go about this issue differently? Well, every web service (and website too is a web service) that is being developed, can also be developed API-first, which helps to iron out most of the MVC-from-desktop-to-web kinks. The entire functionality of a web service should focus all of its development early on to develop these three things: * Models (database object representation, your users, pages and so on) * Controllers (functionality and method calls that give a specific result, sometimes involving models, sometimes not, for example methods to get all users from database) * API gateway/layer (script/class which can be used to execute controller calls, this should be available within PHP as a class (with PHP methods) as well as over HTTP (if HTTP-accessible API is built and there is really no excuse not to)) After these things are in place your entire web service should be 100% functional. If you build a Twitter client, then you should have logins, tweet submits, tweet reading and so on. Your visual and UI team could work independently at the same time, coming up with the user interface while you're working on the functionality. It's only then that you should start working on the following: * Views (essentially what is returned to the browser, views are objects that mainly consist of HTML) * Implementation (navigation logic and integrating API controller calls within views) What this API-first development does is that it makes you entirely independent from your user interface. It's not just loose: it really is 100% independent. You can do everything through the API and this means that you can implement any kind of user interface and environment: be it web, desktop software or mobile client. This also makes testing - the bane of web developers due to multi-layered nature of web - far easier: you can test the API separately without having to build mock classes or a separate testing suite. Desktop programming has largely worked this way for many years, but web has not yet caught up. Today - when the ability to quickly create mobile views of web services and/or mobile applications is business critical - this has become more important than ever. My framework tries to follow these principles as much as possible, you can read more at http://www.waveframework.com/wave/doc/index.htm
Hey. Thanks for taking the time to respond to me. I will dig into those things. Is Ubuntu the way to go for the VM. Also is there an open source Cpanel type of program that I can manage the server with ?
Not too keen on many of them, // Correct: if ($foo !== FALSE) // Incorrect: if (FALSE !== $foo) They've used an extremely complimentary example by using strict comparison there, I've seen many a bug caused by the omission of a single keystroke using this, which will always return true and re-assign the variable for some unruly behaviour: if($admin = 'foo') Whereas with this "incorrect" method below will throw a parse error and hey presto! You've spotted the typo right away: if('foo' = $var) Additionally, any sort of conditional that isn't self contained in curly braces makes me weep and is begging to introduce bugs should the result of that conditional ever need to be expanded: // Acceptable: if ($foo == $bar) return $foo; Maybe I spend too much time working on legacy code at work so I get a bit too worked up over these things, but I personally really wouldn't recommend these conventions to new devs, I'd definitely point them towards [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md).
In my opinion, Eclipse is very slow. Things like autocomplete take longer to *work* than it does for me to just type it out. PhpStorm is very responsive and very intuitive: autocomplete drop downs appear very rapidly, with a quick tab or enter to select, Go to Definition is lightning fast, switching to the file that the symbol is defined in and going to the correct line in the blink of an eye. Refactoring (or renaming, as that is basically all the refactoring it really supports right now) works well and find references that, for instance, Zend Studio would have a hard time with. PhpStorm 5 supposedly will have better refactoring support, hopefully with "Rename namespace" supporting more than a single namespace segment. I would recommend trying it out (they have a free trial) for at least a solid week and I bet you wouldn't look back.
&gt; So ok. I'm not attempting to help people as good as you. I'm trying to help people become better than they currently are. No you're not. You're teaching them bad practices. This is because you're not qualified to teach. Learn *first*, and *then* teach. &gt; We're all on a growth curve, including you and me. The differences between the two of us are that I do not continuously stalk you via a sockpuppet or two and I try to enhance the community best I know how. I don't stalk you via sockpuppets. You seem to have a major persecution complex. It's funny how you accuse all your critics of being sockpuppets. It's a way of trying to distract everyone from the *actual* issue, i.e., your sub-par coding skills, which you try to pass of as "expert", and worse, which you try to sell to people. &gt; I promise you that I have and will continue to better myself and to try to better others along the way, as well. I suggest you stick to the former. You really aren't qualified to teach anyone at the moment and you shouldn't be charging for that bad information either. That's just dishonest.
You seem to be the only one who seems to have a problem. I comment on numerous other posts and no one seems to have a problem with me.
Heck yes, man! I have used Intellij IDEA, WebStorm and PHPStorm. Both are excellent products. JetBrains makes good stuff.
There's a trial. Use it and see for yourself. I hate to be so blunt about this, but there really are lots of things that PHPStorm does for you that you need to see for yourself. 
It's situations like this, when I feel left out ... 
PHPStorm is awesome! I don't think it has true remote file editing though. According to the devs, it's not intended to work that way on purpose.
I'm not sure if it's a sales issue. They usually give a discount at least twice a year. Of course I bought it for full price a month ago. Ah well, it's definitely worth the full price.
An official voted upon PHP community standard? "Sucks"?
Let me start off by clarifying something: When I said it sucked, I meant PSR-2. Now.. Official, how? It's a small group of framework authors which got together. It has no connection at all to PHP. As for the voting: 1. It only took place among a small select group. 2. The votes were anything but unanimous. Futhermore, a style guideline has absolutely nothing to do with interoperability (which is the point of the entire project). 
And it sucks, how?
You must have missed where I said I downloaded the trial.
Did he? I didn't see any comment against the contents of the psr standard. Only "it sucks, voting wasn't fair"?
As promised, here's a quick review of my first impressions on OSX. As its a java app, its never going to be as fast as a native osx app. It loads in around 4 seconds, which still isnt bad. The overall look and feel is one of a Windows app, and although there are options to switch the java look and feel, I found they had limited effect. In addition, switching away from the OSX theme resulted in the menu bar being depopulated, so it seems mac users dont really have a choice on the look and feel. The IDE is jam packed full of features, such as tools to help you refactor code (rename, move etc), lots of features to locate and cross-reference symbols, macros, integrated debugging, git integration, collapsible code etc. Nothing remarkable here, but it all seems to work as youd expect. Code completion and various auto-popups are enabled by default, which is great if you like that kind of thing. Personally I dont, and it did seem to make the editor a touch sluggish compared to what Im used to. Turning these all off improved things though. Default editing key mappings are set up sensibly, although there are some tweaks I need to make, such as CMD-W to close current file. Hopefully this is easily solved, but I havent tried yet. A big drawback of it being Java, is that naturally it uses the Java open/save file dialogs, rather than native ones. This will take some time to get used to, as for me I found it does interrupt your workflow. The good news is, it also has a 'quick file open', which lets you type part of a filename and it presents matches, similar to Sublime, or QuickSilver. I was pleased to see this is very fast, especially as Im working over an AFP share. Other tools such as TextMate and BBEdit will normally lock up for brief periods while trying to enumerate the file listings over AFP. When editing CSS, it shows you a preview of any referenced html colors, as small swatches in the left hand gutter. Also when cursoring through HTML markup, the top bar will show you where abouts you are in the hierarchy, and updates in realtime, for example [div#container][div#header.top][span.info]. This is quite a novel feature which Ive not seen before, and I can see it being very useful. Despite having git integration, by default the project sidebar does not seem to respect .gitignore. As a result you get a lot of non-project files appearing. I believe you can set up a filter (or scope as they call it) for the sidebar, but it seemed cumbersome to use and Ive not tested it fully yet. Summary: If you want an all in one IDE, I think its a pretty good tool and well worth $49. Im pretty fickle about my development environment (for me its all about the text editor, and I can happily disable most integrated features like git and code completion). But even so, PhpStorm has enough to make me want to trial it for a couple of weeks more.
Ubuntu is my linux distro of choice, as it's very easy to get everything running with apt-get (I actually build from src, but I'm a bit older). My VM of choice is VMware. You really don't need cPanel, IMHO. Just use apt-get to install everything, and then modify the Apache instance's httpd.conf so that instead of using the default retardedness it used vhosts. It's what I always do. From there, if you want to had a virtual host or a subdomain, you just edit the /etc/host file and the vhost file. It's what I do at least. Give it a try, if you have questions hit me up.
Your settings must be different from mine. I have to hit Alt-Shift-Insert first. Then normal selections/typing work in column mode. Alt, by itself, doesn't work for me like it does in VS2010+. That said, I didn't know it had it at all and your comment made me look for it. Thank you a million times over for that!
how do you want to do it? Like one person would knock the other person out, or if someone is logged in, you can't log in from another computer? I'd suggest the former, it's easier for you, plus you don't have to worry about someone accidentally staying logged in somewhere else. Basically, you'll want to set a cookie that's paired with something on your end, like a field in the DB. Every time someone logs on for the first time, it sets a cookie and ties it to the DB. When you're checking to see if someone is logged in to give them access to a page, also check that cookie and make sure it matches your value in the DB. If it doesn't, it means someone has logged in more recently from another location, and you basically treat that as not being logged in. I hope I described that in a way that wasn't too convoluted. It should be fairly simple to log people out if there's been a more recent sign-in.
I think you are going about this the wrong way. You should be asking why your users are logging in as the same account. Although you could limit each account to one session, what is going to prevent Bob from logging into Alice's account when shes at lunch or something? What happens if Bob wants to get to the site on another computer, but is already logged in somewhere else? Who gets priority here, the person logged in first, or the person just now logging in? How do you know who the "real" Alice is? Those can be a bit tricky to solve, which is why I recommend a change in approach to this problem. You should change your CMS so users want to login as themselves, not force them to do it. Without having more details on what is motivating your users to login as other accounts its a bit difficult to give you better direction, but limiting each account to one login is going to be more trouble than its worth. If your problem isn't Bob pretending to be Alice (which is my assumption above), but rather two people editing the same page at the same time, perhaps just displaying a warning like "another user is editing this page" would be helpful. If possible, can you elaborate on why you are trying to solve this problem?
XHPROF. Run it, it will tell you everything you need to know about where you application is slowest. And likely it will tell you its in how your application is accessing the database layer. Probably because your queries are too many or too long.
Being a disinterested 3rd party with no horse in this race, I just want to say I don't see why you're being downvoted. You asked for why the standards suck, the response had nothing to do with the standards, only with their origins. Some fallacious reasoning up in this hizzy
Not sure what others experiences are, but hardware doesn't play a huge role in uploading large files. This depends on where the server is located. If the server is on the LAN then the file upload will be limited by the switch. If the server is in a datacenter (I am assuming a dedicated server), it is limited on the upload speed of the datacenter and upload speed on the clients end. [Here's a link](http://bit.ly/Pal9BK)
Think of the way that all typical IM protocols work. If I leave my MSN account logged in at work, when I log on from home it will log my work client out with the message "you have logged in from another machine". Last in always gets the slot. Just don't do it like shitty routers do where you need to remember to logout manually first.
I don't really have a problem with slowness but my development machine is an i7 2006k with 12GB ram... might make a difference. The only thing that I hate about Eclipse is if I accidentally hit CTRL B - which is frequent because I tend to use CTRL V often when working on views. 
We store the session IDs in the database, if the user tries to log in twice their existing session is destroyed. 
in your "users" table have some SessionID string(call it whatever. its random). on a "login" it should create a new string and save it to the DB table AND the session. then, on every page call, check that SESSION['myrandomstring']==DB_USER_ROW['myrandomstring'] and if its not the same, LOG THEM OUT with a "sorry you were logged in somewhere else". this way: bob logs in as bob:his random string is xyz123, which we put into session AND into DB. bob goes to a page: it checks the DB row and the session. they match. bob gets the page. alice logs in as bob. her random string is 456xxx, both in DB and in SESSION. bob goes to a page: it checks the strings. xyz123 != 456xxx so he is logged out with a "someone has logged into your account at another location" page. bob gets upset, calls alice, tears her a new one, and alice gets her own user account. profit $$$
Sessions are a better solution than raw cookies. Cookies have size limitations and you're also dramatically increasing bandwidth with every single request to your server when you have bloated cookies. Also, sessions rely on cookies too, btw. That's how the server knows which session_id to load. Session data is only loaded per-user. Memory usage is only a concern if you're using a memory-based session adapter (memcached, redis, apc, etc). Most frameworks offer a convenient wrapper for Sessions.
One thing you need to consider is that you want to have access to user trends and logs of activity so you can improve your service. Give the user a single, small cookie with a session id - and log everything else in the database. Their movements, their cart items, everything - so you will know what works and what doesn't.
One query per page is okay. [PostgreSQL](http://www.postgresql.org/about/news/1415/) just released an update with optimizations to support 350,000 reads per second and 14,000 writes per second. By using PostgreSQL, unless you have 350,000 users on your website at any given time, all loading the same page at once, you aren't going to hit a bottleneck. Here's what I do to handle sessions: 1. User logs in... 2. Give the user two session variables: 'username' and 'token' (a randomly generated one-way salted hash). 2. Store that same token in your database with the user. 3. Every page load, check to make sure that the username+token in the database matches the username+token in the user's session. This way, any tampering would force the user to have to try and recreate the token. 
I know about all of WP's plugins. For forms alone there are probably a couple more 1000 than there needs to be! But the reason I am trying to avoid using WP and its plugins is because this splash page will be compositionally different than the 'normal' site, so I'd have to go hack-slash on the HTML and CSS. I'd rather not display:hidden half the page. But, you got me thinking that a splash page is pretty temporary and I'd rather rely on WP's infrastructure than my own half-assed attempt at something. 
For very large sites, the biggest thing to remember is that: 1) You're probably going to use multiple webservers 2) You probably can't guarantee that your users always hit the same webserver That usually eliminates approach #3 - $_SESSION alone isn't sufficient for maintaining state between requests. What we generally do is encrypted cookie with $_SESSION serialized into memcached or MySQL (depending on load, and what's in a session, and how bad it's going to be for the user if memcached crashes). 
You don't need to display:hidden everything - the templating system in wordpress supports special templates for e.g. certain post ids (as in your form will likely be a custom post with an id OR it will be embedded in an post). As of that, you could create such a template with your custom html.
&gt;this splash page will be compositionally different than the 'normal' site, so I'd have to go hack-slash on the HTML and CS This is *precisely* what custom page templates are for.
I don't particularly care about any of the typically religious code formatting, except for consistency issues. Use this style of indentation here, but this other one here and here. Use this style of bracketing here, and this one here and here. Rubbish. Only people writing for the Kohana framework should use that style guide. IMO, PSR-2 gets it very close to correct, except for some very minor consistency issues of its own. Most new devs should at least read it, even if they don't follow it.
I'd disagree with their sentiment then, considering that 99.9% of PHP projects (as well as the entirety of JS projects) use `&amp;&amp;` and `||`. Also, `and` and `or` are not semantically the same as `&amp;&amp;` and `||`, and could cause some edge-case bugs when used as a wholesale replacement.
Emphasise some sort of "history" feature: if everyone uses Alice's account they're never going to know who did what -- assuming your CMS is for pages, stuff that exists long term and is iterated on frequently.
2-factor auth bugs the users. I would only recommend this if there was a security concern somewhere. I think you will find your users will be able to out stupid any barriers you setup. Limiting each user to 1 session at a time is ok, until Bob and Alice work out a schedule so they each access your site separately. 2-factor is ok too, until Bob calls up Alice and just asks for the code each time he wants to login. A determined user is going to be able get around most of the limits I can think of. So what I would suggest is this: * Make account creation easy. This way users have less of an excuse for sharing passwords. * Use the person's e-mail as their login name, or something else personally identifiable. If the user feels they OWN the account, they might be less willing to share it. As opposed to the account being a COMPANY account. If you still decide you need some protection, I'd go with a single session solution. * On login, add the new session id to memcache under the userID key. This should replace any existing value. * On page access (load, update, submit etc) check to see if the current session matches the session in memcache. If it doesn't, that means someone else has logged in and you should end the current session and alert the user someone else has logged in. Also, browser strings are fairly unique, so if you keep track of the browser strings each user logs in as you might be able to prove an account is being used by more than 1 person, and charge the company accordingly. http://www.schneier.com/blog/archives/2010/01/tracking_your_b.html might be worth reading. Hope all that helps.
I've worked on very large websites for a while now, with thousands of users a day and hundreds of thousands LOC. sessions are the only way to go. Put simply, the session IS state. PHP sessions are first class citizens, and the way you use and store them is easily customised, you may store them as files, database records, or even in an in-memory cache. You also get an all important session-ID which you can use as a key for that user's state. Most of the sites I've worked on are large eCommerce sites, that require these rings for carts and checkouts, and I have never as much as considered methods one and two. Even if I'm not following the standard php sessions, I always have something equivalent. 
How exactly does chunking over a CDN speed up the upload rate?
Wow I was just thinking about this earlier today, great question and there are some great answers. 
Try this across two servers now. Now expand to 10. There's now only a 1 in 10 shot your users will be on the same server *each request*. Those odds are pretty bad. No, sessions will not work, not the default ones, unless you use NFS (but that has performance implications under load).
Yes they will, but not the default file-based implementation. You can override the default session storage and use whatever you want - database, cluster of memcached or redis servers, etc. etc.
You can even solve this problem with file-based sessions.. just use NFS. Edit: not saying this is an optimal solution.. but it is a solution.
That's display: none, BTW. There's also visibility: hidden, but that doesn't do what you probably think it does.
I guess I lucked out then! Phew! Considering I'm a brokeass with bad luck, it's nice to know something worked out my way for a change. 
With pleasure: Suppose I had a 1.5 GB avi file and I was attempting to send it through a PHP based upload script to store in a MongoDB collection as chunks (via GridFS) or in a MySQL table as a blob. As stated by jimmy_the_tulip, it makes sense that the bottleneck is because of the up/down from the ISP. I am definitely splitting hairs here though--I was just interested in reading about some new stuff/emerging methodologies or performance comparisons. Thanks in advance, I really appreciate all the input I can get!
Out of curiosity, why would you store a video in a DB rather than storing it as a file and putting a reference to it in the db?
What is cultural here?
They will depending on where you store them. I ran a site with 12 servers, a load balancer and a SAN file system that ran basic sessions with absolute ease. Also, using memcached for session storage can help. If push comes to shove, you can use a cookie to ensure the user is served by the same app server, although some load balances will manage that for you :)
try knowing what you're talking about before talking.
Using someone elses login is a cultural problem (as in the culture of the company), and is grounds for termination at most of the places I've worked because logins provide accountability.
All answers log the current user out rather than stop another one from logging in.. so here is my solution: Database: new field: login_blocked (timestamp) On user login action: when login_blocked is greater than current time block the login. Else normal login procedure.. On each page request: Update the login_blocked timestamp to the current time +30min.. On logout: The login_blocked must be set to 0. Problems: * a user deletes all his cookies -&gt; will be logged out of your system and can't login for 30 minutes.. * a user wants to use multiple browsers -&gt; not possible * a user wants to use multiple computers -&gt; not possible * a hacker would block the owner out of his account Solutions: * additionally store the ip and add a condition, that user from the same ip can ignore login_blocked * verbose error messages to let user know what why and how long they need to wait * master password or secret question to enforce a login
When and where?
But without a technical solution one can't fix this cultural problem.. You can't call each company up and tell them they shouldn't share their accounts.. Or how should one decide which accounts to terminate? I think a prevention mechanism as asked by the OP is a better solution than some kind of enforcement because there are too many false-positives about multiple-logins possible.
Yeah I misread. I thought it was used by his company not by end users.
Its very possible I don't fully grasp the problem but the documentation suggests the last two parameters should be the height and width of the image contained in the $image variable. How are you populating $image ?
&gt; You could do, but I wouldn't recommend using an SQL database to just shove serialised blobs into. You'll end up with Drupal.
Reddit comments are via UDP? Wat? 
Couldn't care less, I presume you mean. 
Worse yet, you would end up with Wordpress... just kidding. But seriously, as someone who inherited code that utilizes serialized data (in files, no less - just as bad), it is such a PITA to hand-edit serialized data. If you make one goof, and you don't catch it, "You're going to have a bad time". It's better to put forth the little effort it takes to properly normalize your data. You'll thank yourself later -- usually when you're in a huge pinch!
TIL, that PHP runs on Windows.
You are correct. However surely a plugging for wordpress already exists for this.
&gt; Also, sessions rely on cookies too, btw. Unless you're old school and passing the session ID through GET/POST requests :)
Just don't make them type it in, putting it into a a query string on a url for them to click will be secure enough. Tons of sites do this. Make it expire after a couple days too.
Why would you install such a huge security flaw on a production environment ?
There isn't too much fancyness out there these days, really. It would be interesting if browsers did on-the-fly gzip encoding for uploads, but for your example of uploading an AVI (an already compressed file) the savings would be very minimal. Chunking, as others have mentioned, is an extremely good idea, especially with PHP, and it makes uploading more viable across large deploys of PHP. Of course, if you're doing this on your own server, whatev's, just up the limit in php.ini. Along these lines, check out: http://www.plupload.com/ -- supports chunking, helped a lot. I'm also going to go with other people, if you can utilize cloud storage systems (i.e., people aren't uploading sensitive data and you are ok with being beholden to a cloud systems uptime and tie-ins) then these would be very, very good solutions for this. If it is data you want to control, then you can build rediculously large file storage systems with extreme reliability for less than 10k now-a-days (we're talking a colo machine @ 4u with 10+TB of RAID storage that can expand much, much higher.) --- The worst part of all this, for you, is that HTTP sucks as an upload method, but that's all you can really do from a browser. If you could reasonably use SFTP (NEVER FTP), you'd get a lot of file transfer benefits, specifically the ability to resume a transfer, which HTTP is particularly bad at (afaik, I think there's some mild support for partial downloads from server -&gt; browser, but not partial uploads from browser -&gt; server)
PHP has a function for that: http://php.net/manual/en/function.uniqid.php
Makes sense. What would the fallback on a dedicated server be? Scalability?
48 hours is a good time limi, 72 if you want to be generous. Drog's suggestion of putting a link that does the verification for you is a great idea too.
I'll definitely take a look at plupload. What would be the advantage of a cloud versus a dedicated server? I'm having a lot of trouble trying to figure out why clouds are worth the hype. Perhaps I don't fully understand the difficulties in scaling up yet--I've never had to deal with high impact/stress.
When working on any project where more than one person works on the same code I think it is imperative to have syntactical standards defined. It makes for clearer code and helps to alleviate confusion. For example: Things like conditionals must use braces even if they are only one line or comparisons must be done as false == $var vs. $var == false. These things make maintaing and testing code significantly easier; When looking over code someone else authors the chance of confusion is significantly reduced because the code is laid out exactly the same way that you write every day. According to [this](http://symfony.com/contributors) 549 people have contributed to the Symfony code base recently. Do you really think that code shouldn't be bound to syntax standards? Especially when projects like Drupal are starting to incorporate other code bases (Symfony2 components in this case.) That code would completely inconsistant if there was not a shared standard. **Stylistic tendencies are a huge part of interoperability** With regard to your comment: &gt; you must use spaces over tabs for indentation Imagine looking at a the change log of a file where only one line was modified but the developers IDE auto converted all spaced to tabs. Rather than the VCS report one line as changed, it would look as if the entire file was scrapped and rebuilt.
One of the reasons to choose #2, and avoid #3, is because the state of the user can change between requests. Imagine what would happen if you used #3, and one of your admins deleted the user's account. The user won't know their account has been deleted until their session expires, and they may continue browsing the site in a semi deleted state. Really, no account changes will be seen by the user until their session expires, and answering support emails with, "Try logging out and back in" is a drag. Querying the database with "SELECT * FROM users WHERE id = ? LIMIT 1" on each page load is a piece of cake for any database.
&gt; PhpStorm license is permanent and includes one year of free product upgrades since the purchase date, including even major version upgrades. May as well go for it now while on offer.
Give me a few minutes to figure out how to rewrite my current work to-do list into a competition format, I could use some time off.
Hey look I'm not a huge fan of that particular contributor either, but this type of thing really doesn't help build a community.
Nicoon, I completely agree with you, but if this a fair competition he should receive impartial judgment
If NFS is the answer, you're asking the wrong question.
Not trying to sounds snarky, but isn't that just a cookie? What makes a "super cookie" different from a normal cookie?
You should create a token to confirm an email from random data: [hash](http://de.php.net/manual/en/function.hash.php)('sha1', [openssl_random_pseudo_bytes](http://de.php.net/manual/en/function.openssl-random-pseudo-bytes.php)(64)) for example. You may include a salt if the random data isn't expected to be secure enough, though that is unlikely. Requiring a captcha on registration and email confirmation will prevents bots, but won't prevent manual registrations or (poorly) paid workers from entering the captchas for a spammer. But as someone else said, there's probably an addon for WordPress to do this.
There's reports on this post already, and I am leaning towards the whole "what is this doing in /r/php" bandwagon. This appears to be two people who I've honestly never heard of outside of /r/php doing some sort of competition to see who can write better code? Does it really matter? If /u/hopeseekr wins he'll try to point back to this when promoting his website. If /u/joellarson wins he does ... what? And in the end, who cares who can write easier to read code, or follow a certain pattern(s) more closely? Does it really matter? This should be a sub for community learning - sharing interesting PHP-related news, releasing interesting new articles, asking interesting questions after having been researched. Dickwaving does not follow any of the above.
Anyone figured out how to change color?
You could ask *why* people think it is neccesary to log in as another person. Really, there shouldn't be any reasons for it, and you probably want to resolve any reason they give. * Is the process for getting a login too difficult? * Is there an actual problem with some logins permission-wise? Also, I assume the reason for wanting people to log in as themselves is due to a requirement for accountability. As allmightspliff mentioned, what is to stop Bob logging in as Alice when she's not using her login? Nothing. And if people are sharing their login details around you will never stop that happening with a technical solution (unless you get into biometrics, or confirm them with an email/sms each time they login). There could be some valuable information about the system and its surrounding processes to be found.
hi charlie! Shouldn't you be sleeping?
You mean you couldn't actually be bothered to check the php docs on operators?
Why would you use some third-party extension when you can simply use the built-in COM extension? The WScript.Shell COM object allows access to the registry.
&gt; Since I was offered "when and where", I think this weekend would be a good time to do it. Most likely Saturday, September 15th, **2010**. Well guys... We all missed it...
&gt; All but 2 or 3 of your comments are towards mine. That's because you reply to me with your BS and I reply back. Do you not understand how comments work? &gt; Your first comment http://www.reddit.com/r/PHP/comments/wuhvl/phpu_lesson_more_secure_php_sessions/c5hiv15?context=3 was against one of my lessons. Not that I need to prove anything to you (least of all), but I've been lurking on r/php for a while. I've seen your posts before but they were usually comments where you hawked your PHPUniversity crap. You would usually post this in highly-upvoted threads so that you could hijack it and get some new people to scam. You would get downvoted rather quickly and I would downvote and move on. But then recently I saw a more disturbing trend. On the new posts tab, I would see more and more of your bullshit lessons that were full of bad information, dangerous information, and bad practices. I saw newbies thanking you for your bad information and I don't blame them, because they don't know any better. I about had it when you posted that travesty of a tutorial on "Security". &gt; This account was created purely to be able to ridicule me at least two times via two different accounts. That is the definition of a sock puppet. O RLY. What is the other account? You're really not that important. I mean it's not that your code is shit and you charge people for it, it *must* be that you're being unfairly victimized. Give me a break.
Right. It's not that you write shitty code and try to get people to pay for it. It must be that my account is a sock puppet. Way to ignore the issue. Typical. I didn't get a response when I called you out on your shitty implementation of a Cash Register.
He has a persecution complex and it's directly related to his overinflated sense of self-worth. He's a textbook case of the Dunning-Kruger effect. Incompetent, overestimates his ability, and is completely unaware that he's incompetent.
I'm hoping that this will get hopeseekr to shut up once and for all. What he's doing doesn't help build this community either. It has the opposite effect. 
I would say that pretty much *any* code you write should be written like an API. Why? The following reasons: - Makes you think about how *others* would use your code, and that includes yourself! This way you will hide unnecessary details and only expose the bare minimum required to get things working. - Favors encapsulation. Your API is simply an interface into your code so all the logic can be encapsulated inside without being exposed. - Prevents leaky abstraction. Details of your implementation should never be exposed to the outside world. Do you know the inner workings of other APIs? - Favors separation of concern. Your code should have nothing to do with code that could potentially use it. In fact, it will know nothing about it. That way you don't make any assumptions! - Favors loose coupling. This follows from the previous point; you won't make any assumptions about what comes in so you won't be tightly coupled to a particular implementation of something. There is a clean break between your logic and anything else using that logic.
Seems rather straight-forward to me. No more difficult than reading a manual page. Just saying, the gist didn't really add much of value IMO as the same info is already in your RFC.
To those that are interested, [here is the Pull Request](https://github.com/php/php-src/pull/191/files) with this feature. Note that I am submitting it as a PR instead of directly committing it as I would like more code-review prior to the final push. So if you understand C and/or PHP's internals, please review the patch and comment away. Thanks, Anthony
great points. thanks!
the session is state. wow. i like your thoughts and ideas. thanks!
not really but result could be the same, gtk is a windows gui lib built for php. the php built in dotnet class use the .net framework. in theory u could take any .net app and convert to php, not sure how that would work practically but functionality is there :) 
I'm in agreement with you. Take for example the following code. $x = FALSE OR TRUE; // $x is FALSE $y = FALSE || TRUE; // $y is TRUE 
Why are these functions in the global scope? I take it there's a valid reason for them not to be scoped within a class ... **Edit**: That came across like I wanted them thrown into a class and made into statics. I was suggesting more of a OO API.
Actually GTK is supposed to be cross-platform, it was initially made in C, and has bindings for other languages, PHP included. I noticed that in the past couple of years, the PHP-GTK project appears to be stagnating. I don't know much about the rest though...
If you're using this for personal purposes, dedicated server is totally fine. However, it definitely won't scale if you ever turn this into a service. Also, most VPS servers don't have a ton of HDD space. Whether you use the filesystem or a DB, you probably only have 20 to 100GB to work with. CDNs however give you unlimited storage, you just pay a cent or so per GB per month. Finally, download speeds at the other end will be slower coming from your server than they would from a CDN. But again, if this is just for you and one or two friends to use you're fine basically no matter what you do
First, I am totally not opposed to accepting this challenge, but I cannot accept as of yet, for the following reasons: 1. **There is no time frame specified.** Therefore, I assert that the competition should take place between the hours of 1600 to 1900 UTC (10 AM - 1 PM MDT). 2. **There are no conditions concerning what wins and what doesn't.** I suggest code readability to be the primary metric. Nothing hurts a project more, over longer a period, than being difficult to reverse engineer. And my metric of beautiful code is that which can be read by lay people. So perhaps the final projects could be submitted to some totally non-programming subreddit and have lay people tell us which they understood the fastest and clearest? 3. **There are no safeguards or even the hope for impartiality.** Why subject myself to another lynch mob? Even in this thread, practically every discussion revolves around me (thanks, but no thanks for the attention) and little around the short-comings of this invitation. 4. **The solution *should* have separation of the Logic, Data Layer, and Views.** 5. **The solution should only allow code created by you and myself.** Neither of us should rely on code created by others. Not in this competition. 6. **A Non-affiliated user should come up with the challenge.** They should certify (swear) that they know neither of us. I will be submitting my code to www.launchpad.net. I like its interface and I already have a history of doing this. ---- But before we continue this any further, please explain to us all why you feel the need to challenge me in the first place? While it shows moral fortitude to take such a risk, I just want to state that I do not like all this ego-driven display of hostility from certain members of the community towards me. I'd prefer to be a largely anonymous person just helping people get better at programming. Really, what you have to prove is whether or not on the spot I can code sufficiently better than most programming books and online tutorials. And I believe my existing video screencasts at http://www.youtube.com/user/phpu2 prove this already. So in the end, it seems like you and several people in particular are holding a crusade against me, why? Because I'm trying to help people with less knowledge and skill than you get to somewhere below or equal to you? I mean, really. I'm trying to do this as a service for humanity. I only charge a few dollars a month for many hours of one-on-one mentoring (and even more completely free to anyone group learning) and code review/consultation and that's pretty much paying for a few meals a month for me. It's mostly to weed out the people who aren't motivated to learn. There's no reason to attack me just because I do not know everything yet and am trying to get as good as others ... I'm trying to help people get to my level, which is quite helpful to the vast majority. I'd motion a better use of this time would be for the community to focus on why they attack someone who is honestly trying to help their own ranks increase in competency at a far faster rate than most of us (including me) do on our own, without repeating all the mistakes almost all of us have. I'd particularly like the admins to answer this question. ----- As for the challenge, the man in me says "Bring it!"
totally, here as an example public class Test { public string Speak() { return "Im speaking from .NET"; } } u need to build it with Sign as an assemble, say we call this one "Speak", or from command prompt "gacutil -i Speak.dll" to install to GAC &lt;?php $speak = new DOTNET("Speak, Version=1.0.0.0, Culture=neutral, PublicKeyToken=0123456789abcdef, Speak.Test"); echo($speak-&gt;Speak()); ?&gt; quite easy to use actually, dont know the performance, guessing not to impressive
true, but it was quite limited last time I was using it, but that was few years ago. gonna have to read up on it again
It is a sock puppet. You created this account just to attack me, your comment history is clear. And for the record, I never downvote you. That'd be bad reddiquette. But I'm pretty sure you always downvote me.
To save everyone the extra click, the library requires 5.3.2 or better.
If by "scoped within a class" you mean making them static methods, then the reason is that we don't want to use that anti-pattern. If you mean why the API isn't object oriented, then the reason is that we couldn't figure out an API which is both easy to use and properly object oriented. If you have a proposal for a clean OO API, please go ahead. We might consider using it instead.
I apologize if this was covered in the internals discussions (there's quite a few there), but what's the reasoning for the required 2nd argument for `password_hash()`? It seems like if there's a `PASSWORD_DEFAULT`, that second argument could reliably be defaulted. IMHO, more parameters just means more points of failure for the implementer. I understand the need to offer flexibility, but especially when there's only 1 algo available, it seems superfluous at this point. Really glad this is getting done, though; a no-brainer if you ask me!
&gt; It is a sock puppet. You created this account just to attack me, your comment history is clear. And for the record, I never downvote you. That'd be bad reddiquette. But I'm pretty sure you always downvote me. Awww boo hoo hoo. Denial isn't just a river in Egypt. Yes, everyone criticizing you is a sockpuppet. It's not that you suck.
&gt; I suggest code readability to be the primary metric. Nothing hurts a project more, over longer a period, than being difficult to reverse engineer. t? This is dumb. Code readability, while *a* metric is by no means the primary metric. A book can be easily readable, but can still be a shitty book (like Twilight or 50 Shades of Grey). &gt; And my metric of beautiful code is that which can be read by lay people. That's another stupid metric. Why does a lay person know about programming? If someone showed you a complex mathematical or physics derivation would you have any idea as to whether it was elegant or not? No. So why would you rely on a lay person, who has no knowledge of programming, to judge the readability of your code? &gt; So perhaps the final projects could be submitted to some totally non-programming subreddit and have lay people tell us which they understood the fastest and cleares Absolutely not. Lay people are not qualified to code review, just like I'm not qualified to review a theoretical math or physics paper. &gt; Why subject myself to another lynch mob? Even in this thread, practically every discussion revolves around me (thanks, but no thanks for the attention) and little around the short-comings of this invitation. Did you not read the part where this would be anonymous? Wow you're playing the victim even before the competition has started. &gt; They should certify (swear) that they know neither of us. This is bullshit. Code-reviews are objective for the most part. People can easily tell what looks like a bad pattern and what doesn't. &gt; But before we continue this any further, please explain to us all why you feel the need to challenge me in the first place? I find it highly disturbing that you lie through your teeth so easily. **You're the one who threw the gauntlet out to the community:** [This is from **your** post](https://www.reddit.com/r/PHP/comments/zn8pc/codeathon_4_hour_livecast_coding_sprint_time/): &gt;How many of you haters are man enough to host a live screencast, code live without any preplanned architecture, recording your screen, then spending hours editing it and time lapsing it and making your source code avialable and up to peer review and willing to teach anyone who has any questions? Hmm? &gt; Better yet, Let's have a code duel. The community comes up with a project: Myself vs. all the haters. Let's see how you guys do under pressure and if you can really walk the walk or just gawk. Don't bother editing it, because I have a screencap. &gt; While it shows moral fortitude to take such a risk, I just want to state that I do not like all this ego-driven display of hostility from certain members of the community towards me. Nothing here is ego-driven. The fact that you take criticism so personally shows a lack of maturity on your part. It also shows that you have such a high opinion of yourself that you can't tolerate any sort of criticism. We criticize your code and we criticize the fact that you're selling your bad code for money. There's no ego in that. &gt; I'd prefer to be a largely anonymous person just helping people get better at programming. Liar. If you wanted to be anonymous, you wouldn't be spamming this subreddit with links to PHPExperts and asking people to pay you for your mentoring. &gt; Really, what you have to prove is whether or not on the spot I can code sufficiently better than most programming books and online tutorials. And I believe my existing video screencasts at http://www.youtube.com/user/phpu2 prove this already. No they don't. You can't get a simple Cash Register example right, your lesson on security was full of mistakes, and your multi-auth library didn't even work. &gt; So in the end, it seems like you and several people in particular are holding a crusade against me, why? Because I'm trying to help people with less knowledge and skill than you get to somewhere below or equal to you? Seriously, do you not understand this after myself and others have explained this to you numerous times? There is no crusade against you. We're criticizing your code and we're criticizing the fact that you're imparting dangerous and bad knowledge to newcomers. You are not in a position to help anyone and you should stop immediately. What makes it worse is that **you are asking people money for this**. Doesn't that seem unethical to you? &gt; I mean, really. I'm trying to do this as a service for humanity. I only charge a few dollars a month for many hours of one-on-one mentoring (and even more completely free to anyone group learning) and code review/consultation and that's pretty much paying for a few meals a month for me. It's mostly to weed out the people who aren't motivated to learn. Oh wow and here you try to justify scamming people out of money. Stop trying to deflect. All you do when criticized is play the victim. There are legitimate flaws with your code and the knowledge you display that you **fail** to acknowledge. Any criticism is characterized as a personal attack against you. How dare you ask newcomers for money while you give them bad knowledge? That is unethical and dishonest. Maybe you seriously believe you are not wrong, but you need to know that you are. What you are doing is **wrong**. Also, are you trying to play the pity card by claiming it's for a few meals a day? On your profile on PHPExperts you talk about how you are the lead software engineer for a company. They're not paying you enough to eat? If you truly cared about the community you would teach people for free. Then at the very least we could say that you were well-intentioned, if misguided. But you are asking people to **pay** you. That doesn't give you any sort of moral standing whatsoever. What you are doing is immoral and wrong, and it's disgusting to hear you play the victim. &gt; There's no reason to attack me just because I do not know everything yet and am trying to get as good as others ... I'm trying to help people get to my level, which is quite helpful to the vast majority. Again, do you have a problem understanding English? **We are not attacking you for not being good as others, we are attacking the fact that you portray yourself as an expert, while posting bad code, and then you turn around and sell that bad code to people under the guise of mentoring.** Please, I really hope you understand this. &gt; I'd motion a better use of this time would be for the community to focus on why they attack someone who is honestly trying to help their own ranks increase in competency at a far faster rate than most of us (including me) do on our own, without repeating all the mistakes almost all of us have. You're not doing the community **any** service. You are doing it a disservice by increasing the amount of incompetence and bad information. I think a better use of time is if you simply stopped peddling your PHPUniversity crap and stopped posting lessons. We have enough bad information out here as it is. 
Thanks, missed that....................
You seem quite angry and emotional. I listened to every point but I do not have any faith you'd be able to rationally and *CALMLY* discuss any of this with me at this time. It's your hostility that makes me feel attacked, man.
It will be part of PHP 5.5.
The reason for that is that CRYPT_BLOWFISH isn't supported on all installs prior to that point. It's in-built in 5.3... If you're using &lt; 5.3 and have CRYPT_BLOWFISH enabled, you can use it on that. I'm just not supporting it before that point... **Edit** I just raised it to 5.3.7 as the minimum version requirement. [Here's why](http://3v4l.org/3cAZf) (a breakdown of behavior on each version of PHP). So yes, 5.3.7 is the new requirement...
The only basis for winning is what I provided and you knocked down. So by what basis do we have to judge a winner, hmm? All you did was criticize my suggestions, while providing none of your own. Oh wait, that's what you've always done: Attack but never provide counterexamples. I realize you're on a mission to save people from being potentially victimized, which is laudable, but it's not your responsibility and it's misguided. You need to put yourself in the shoes of someone of lesser ability. Yes, I make mistakes every now and then, but isn't one of the lessons in software engineering the need to get work out there first and iterate improvements later? You look at the lessons that are done on the spot, but have you looked at the projects that spin off those projects? I doubt it, because you're not a member and you don't have access to the commercial projects' repository, therefore you're speaking out of ignorance, which is also understandable. Now, I'm open to communication. You'll see I'm not some scary monster and you'll probably pipe down after, I'd assume. You game?
Where can we go to get a non-biased and authoritative response as to whether my teachings are good or bad? You're too emotionally into the game to be taken seriously by anyone who's rational.
Very true, I agree. I put emphasis on web development primarily because desktop development has (generally) been developed API-centric already, with API's all around the place and it is not a 'big news' for them or in any way enlightening. Web development has grown out of different and often very procedural roots. It's only been a handful years since object-oriented development seemed like a 'new thing' for web developers and most web developers today still think that API is what Google Maps and Facebook have without realizing that API's are all over the place and can be the very core of whatever software they develop. But you are completely right. I simply wanted to get the attention of web developers first and foremost since there are a lot of web developers who have not thought about it from this angle.
I am glad to hear that my post has helped. I actually immediately posted a slightly longer version about it at my blog: http://waher.net/archives/1158 And if you do end up giving Wave Framework a try and run into problems, let me know. I am available for assisting or explaining a thing or two. Wave is still a relatively young framework (it was released this February despite carrying version number 3.X), but today it has a handful developers who offer active feedback almost daily and it is slowly gaining recognition.
I like how simple it is. Even the rehash snippet is pretty simple. It is nice to know that if PHP defaults update to be more secure, that passwords could update on login with the newer / more secure hash.
hijacking this to say thanks to nikic and ircmaxell for all the work they've put into PHP over the last couple of months. PHP 5.5 is coming together greatly. :)
I have followed most of what is detailed in this style guide for years but there are some things they have in there that I will never do because I hate... primary niggle would be the use of curly brackets... I HATE code that puts the curly brace on it's own line. Not only does it add way too much space to the file - thus causing more scrolling and loss of time, I don't think it's all that readable. I always - and will never change - use the standard they use for classes. I also like to use parens when instantiating an object because it makes it easy to see... I don't know of any particular reason why you shouldn't... can anyone help me understand what is bad about using them? I also use camel case for function names - never for variables. public function getTransactionById($transaction_id = 0) { //code here } Other than that... the guide is spot on.
&gt; Where can we go to get a non-biased and authoritative response as to whether my teachings are good or bad? You're too emotionally into the game to be taken seriously by anyone who's rational. Did I say that I was going to judge? Furthermore, you seem to think that my criticisms of your code are personal. Tell me, have I ever criticized your code, because it was written by you? No. I criticized your code for what it was. I'm mature enough to do that. You, however, are not mature enough to realize that a criticism of your code is not a criticism against your person. However, my genuine criticism against you as a person is that you're being dishonest by asking newcomers to pay for your bad information. If you want a non-biased and authoritative response as to whether your teachings are good or bad, take a look at my response and everyone else's responses. **The problem is that you're not seeking for a honest critique of your work. You're looking for praise, and you're not going to get that from me or anyone else; not with the quality of the work that you have presented so far.**
&gt; The only basis for winning is what I provided and you knocked down. So by what basis do we have to judge a winner, hmm? Did you see any of the points raised by joellarson? I have no problem with any of his criteria. &gt; All you did was criticize my suggestions, while providing none of your own. I didn't provide counterexamples because I didn't feel like there was a need for any. joellarson has already provided points. &gt; Oh wait, that's what you've always done: Attack but never provide counterexamples. Liar. I guess you forgot about [this post](http://www.reddit.com/r/PHP/comments/xj6rz/what_to_include_in_my_portfolio/) where I showed you how bad your Cash Register example was, and not only that, I provided you **examples** as far as fixing it. Oh wait, but all you do is think that your work is above criticism and that any criticism must simply mean that we're jealous newbs. &gt; I realize you're on a mission to save people from being potentially victimized, which is laudable, but it's not your responsibility and it's misguided. You need to put yourself in the shoes of someone of lesser ability. Are you kidding me? So you're saying that it's ok for someone of lesser ability to **pay** you for your bad information? Seriously? You think that's ok? What's wrong with you? &gt; Yes, I make mistakes every now and then, but isn't one of the lessons in software engineering the need to get work out there first and iterate improvements later? The problem is not that you make mistakes. The problem is that you refuse to admit that there are mistakes, and worse, you hold up your mistake-riddled work as an example of "expert" work and then charge people to learn from it. This is why you get shit from us. I seriously can't figure out why you can't understand this simple concept. &gt; You look at the lessons that are done on the spot, but have you looked at the projects that spin off those projects? Why are you presenting them as examples of good practices then? If you claim to be an expert, why not make good examples right off the bat? On one hand you claim that you want to teach people to be better at their craft and then at the same time you claim that your work has mistakes. How can you expect to teach anyone? Teaching is not a random act. You have to plan before hand. You need to put out a good solution and then tell people how and why it is good. You can't simply write code right off the bat with mistakes and then tell people "Oh but wait! For the LOW LOW PRICE of $25 you will get THIS and MUCH MUCH MORE! Just pay me and I'm telling you, YOU WILL GET BETTER STUFF". That's scummy. &gt; I doubt it, because you're not a member and you don't have access to the commercial projects' repository, therefore you're speaking out of ignorance, which is also understandable. Right, so we are supposed to take your word for it? I have no idea what's in your private repo. But I can tell you that based on your posts and based on the code you've shown us so far, you are in no way an expert, or qualified to teach. &gt; Now, I'm open to communication. You'll see I'm not some scary monster and you'll probably pipe down after, I'd assume. You game? Game for what? I'll tell you what will make me and others on this community happy: stop peddling your PHPUniversity crap. I could say that would make me happy, but I cannot in good conscience because I know that even if you stop peddling it here, you'll find some other forum to do that, leading poor newcomers astray, and worse, part them with their hard-earned money. The only thing that you can do as an *honest* person (and not even just to make me happy because honestly why should that even be an incentive) is close down your PHPUniversity stuff and portraying yourself as an expert. 
Hey, thanks for chiming in. I don't think you are butting in. I think hopeseekr sincerely believes that he is doing the community a service. I alluded to that too. I'm trying to explain to him that what he's doing wrong. There are a lot of people out there who are trying to help the community, but unfortunately they're wrong about many things. What makes it bad in hopeseekr's case is that he asks money for it. I don't think that's honest. I feel bad that you had to pay him to learn because there are many other avenues where you could have learned much more, in a better fashion, and for free. Sure, you may have learned a lot in a year, but have you evaluated and compared that information against other sources? Can you honestly say that you got your money's worth? That you know your patterns? Some of what he teaches and suggests is downright dangerous.
How is this different than just using crypt()? The crypt() function is simple to use with [just a few lines of code](http://www.reddit.com/r/PHP/comments/spvba/secure_php_authentication_using_bcrypt_is_a_must/c4g2yzs), and it already does blowfish with variable strength. [Edit: For those that don't know, crypt() is a complete secure password hashing solution that's already built into PHP.]
How about something like this: password_verify_default(string $password, function $on_needs_rehashing); Example: $onNeedsRehashing = function($newHash) use ($user) { update_pwd_in_db($user, $newHash); }; if (password_verify_default($password, $hash, $onNeedsRehashing)) { // Yay. } Would be easy to implement in userland though and may be too event-driven for PHP core.
If you honestly need to ask that question, you really should be using a library (such as this)... 
Literally the fourth sentence on the page. &gt;One of the reasons for this is that the crypt() API is ridiculously hard to use and very prone to programming mistakes.
Thanks for the wisdom. I'm looking at the cost of running a file upload/download service at high loads and I'm realizing how AmazonS3 and RackspaceCloud are simply charging through the nose...I can't imagine how any company in this game even stays afloat.
The ones I use the most tend to be (in order of usage, descending), with real-world examples: 1. [MVC](http://www.phpu.cc/mvc/) (really both a design pattern and an architectural pattern) 2. Composition (architectural pattern; alternative to inheritance) 3. [Delegate](http://repo.phpexperts.pro/source/rosettablog/annotate/head:/managers/ThemeManager.inc.php) 5. [Strategy](http://repo.phpexperts.pro/source/phpu-training/annotate/head:/2.multiauth/Core/MultiAuthStrategy.php#L20) 3. [Abstract Factory](http://repo.phpexperts.pro/source/driving_app/annotate/head:/lib/Cars/misc/CarFactory.inc.php#L18) 4. [Factory](http://repo.phpexperts.pro/source/phpu-training/annotate/head:/5.tax-calc/Factories/USFederalIncomeTaxes.php#L3) 5. [Observer Pattern](http://repo.phpexperts.pro/source/driving_app/annotate/head:/lib/Cars/scaffolds/DriveTrain.abstract.php#L26) 6. Command Pattern 7. Proxy / Adapter You might find [these flashcards](http://www.phpu.cc/phpcards/) helpful.
If you want to talk more about it, shoot me a PM. I have tons of experience in this field and am also an experienced CTO and entrepreneur. 
The SOLID design principles will take you pretty far. http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
Obviously it's more than a slight advantage considering you generated the salt incorrectly and also selected the wrong bcrypt algorithm, as ircmaxell explained above when he schooled you!
I did not see a positive outcome for that post/competition in any way, shape or form. If you want to see where you're at as a developer, challenging another dev to a "code-off" is not the way to go. Find a project that interests you and start submitting patches to it. If the project owners are any good they'll quickly let you know if you are. As far as some members of this subreddit maybe pushing the self-promotion a bit too far, we'll keep an eye on it. If you see any posts you think are spam, just click the report button and we'll take care of it.
Thanks for the examples. I wasn't expecting much, so I'm really glad you delivered several. Completely unrelated to my question, but how is renting a domain out of the Keeling Islands working out for you? Any particular reason you went with them?
I did not either now that I've stepped back from it. I do contribute to some open source but I'm still never sure. I'm having issues coping with personal problems and seem to be carrying my actions out in an immature way.
The reason you don't see this approach in frameworks, is because you cannot delete or modify a user until his session expires. You delete the user, which removes the record from the database, but the application will happily pull back the user from the session. The same goes for modifying any property on the user, no changes will happen until you invalidate the session of the user, which is afaik impossible, because you can only invalidate the currently running session.
That's, because smart guys were lazy when created those popular frameworks :) It was easier to use singletons than to create a solid dependency injection container instead.
All the links are filled with wrong information **Stop spreading the misinformation !**
NO, it is not future proof. It's the exact opposite. You loose the maintainability and introduce a tight coupling in any code that used you piece of *code*. If you want to group functions, we have namespaces available in PHP for several years already. Maybe you should learn about them.
I just don't understand one thing about hopeseekr aka phpexperts_pro. Why he is not banned yet. All his posts go against "Community Posting Guidelines" of this subreddit by advertising his crappy "PHP university" the rest of his comments are useless whining about how he is oppressed here. Clearly this subreddit would be better and cleaner without his posts.
One post was about a sale and another was about a major release, especially since this is a tool plenty of people in the php community use I don't see what's unacceptable about that. There isn't a large amount of content being submitted otherwise that these posts are taking away space on the page from.
Adrenaline rush :) Knowing that website available to everyone over the internet has access to my server's registry would get my heart pumping :D
even that installer is causing explorer to crash ... maybe i just dont try it
every (with very few exceptions) zend framework developer i know hates the decorator pattern :)
I've been using PHPStorm since February, and I've loved the strides forward over the last seven months.
Once you get past the things that every IDE does, PHP Storm continues to shine I've been spending my time learning the keyboard commands, not just of the editor, but of the UI. I'm already fluent with tmux and vim, so I'm already used to it. Anyways, the UI is fairly intelligent. Cmd+1 gets you to the project pane, and you can start typing to perform searches to get to the location you want (most context menus that I've used allow for searching). The point is, you can give yourself a fairly barebones UI and still have access to all the functionality with ease. There are lots of features far beyond just PHP, and the development is active and quick. They added Closure Compiler support for JavaScript in this release, which makes me really happy. I've been using Storm since it was first announced, and never looked back. I still use vim in tmux actively (it's always open), but I much prefer doing my code up in PHPStorm. It is an exceptionally pleasant experience.