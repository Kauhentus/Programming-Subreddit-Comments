Start reading about design patterns, data structures, and algorithms. I felt the same as you some years back. I'm now realizing just how very much more there is to learn. It's overwhelming, but exciting! A good place for you to expand is into doing things in JavaScript. I'm not talking about simple page enhancements with jQuery, but some things that are basically applications in the browser. Play around with Canvas, d3, and anything else that entails running a persistent application in the browser. It's a different mind-set than the CRUDdy request/response that characterizes most server-side code. You'll even find that your PHP skills start improving with this cross-pollination. Unfortunately, JS still has a ways to go in terms of reaching maturity with its libraries, tooling, and language features. Another language would strictly be better on this front, but JS dovetails with PHP for doing interesting things on the Web, which is why I recommend it. Incidentally, I found [this book](http://shop.oreilly.com/product/9780596516246.do) to be a fascinating intro to algorithms and some data structures that we don't normally get much call to use in PHP. My own learning project right now is to build a simple Tetris implementation in JS on a canvas element. It'll be awful, but I'm going to learn a ton from it.
This comment is a double-whammy. 1. This is my natural process. Even now I'll still do a "hello world" in whatever I'm doing. Just to make sure everybody is talking to everybody. It just feels like if step 1 isn't working then there is no point in going anywhere else. 2. Even though OP probably won't see this it's little things like this that help mitigate some of those feelings. I'm 35. I've been doing some form of web development for almost 15 years. With the last three being dedicated to programming only. It's still nice to know that I'm doing something right.
ZF can be slow and very bloated at times. We personally use Phalcon (1.3.x right now, will eventually move to 2.x)
If you are running locally, did you set up a vhost, or are you trying to use something like http://localhost/myApp/ ? If you are doing the latter, it could be causing issues with routing and you may want to try setting up a vhost instead, or modifying the htaccess or settings to change the base path.
What's the point of the project? It's important. Is the point to learn how to do a CMS or to provide CMS to somebody else? If it's the latter you should consider dropping what you're doing and digging in to one of the many CMSs available. If you're leaning to make a CMS then we can move on. Abstraction/Classes Make sure you're coding in some form of object oriented PHP. Right now, even if they don't follow a pattern and are essentially still functional programming wrapped in a class - make it a class. OO is what you're going to find in the workforce and hopefully schooling - whatever might apply to you. Framework You might want to scrap what you've got and look into using a framework like Symfony or Laravel. Starting out I would say Laravel. A framework takes care of some of the complex and the mundane. It will introduce you to MVC - Model/View/Controller. Which is a methodology of building apps/sites. Classes That Do Things Without knowing anything about the what you're building you can probably make a few classes that can be reused. A database class. If you're talking to the DB it runs through that class. But that's all it does. Maybe you've got a Page class. Checks for POST and routes data to the DB class. What's Next Honestly, I would go do a "hello world" with Laravel. It will introduce you to several concepts and maybe inspire you to refactor some of your code. Whatever you do - don't stop. Even if you think you're doing it wrong you keep on moving. You don't make progress wondering what if. You will **never** make the perfect app/site/whatever. There will always be a compromise and something new to learn.
Well computers are just fancy Input/Output machines... if you are looking for more challenging items, reporting can be challenging specifically when it comes to auditing. It sounds like you might do stuff with inventory... which requires a perfect system of audit-logs so you can fire someone who steals :D
By phpmyadmin-type, do you mean web-based, installed on the production server? Maybe beginners, but they'd probably get away with phpmyadmin. I would imagine anybody remotely experienced would rather use a proper client
I updated my main post. As for the version of PHP, I can't do anything about it. I have a couple of clients that have old websites and I need to re-do them, but I can't convince them to upgrade their hosting plans. I suggested the smallest of DigitalOcean droplets(5$/mo) but they simply refuse. So I was trying to find the best tools for 5.3.x.
Yes I am working locally because I need to simulate the shared hosting where I have no control over what so ever. So I need to work with sub-directories.
Navicat started, as far as I know, as a MySQL specific tool. Then they started releasing versions of their product for other RDBMS, and in the end, released a combined product for any (popular) RDBMS. So apparently there's a market for this. I'm a Navicat user, and I appreciate all my DB accounts in one place. I'd suggest your product doesn't install its "UI client" on the host where the DB is, but locally on the dev's machine. The thing that gets installed on the server can be just a connector (for tunneling DB traffic from the server to the client). This means: 1. Easier to set up secure connection between connector and client (using private/public key crypto etc.) 2. The dev has less files to deploy (just the connector) in order to use a database. 3. One place (the local client install) to overview all databases and adjust UI settings. No need to configure every copy.
Think about the next person who inherits your code. They won't care that you were not using a fancy framework, or a specific oop technique. Just make your code easy to understand. Anyone can write code that a computer can understand, few can write code a person can follow easily. Start with well named variables. Lots of functions (that are well named). If you get those 2 things down each line of code should be clear what it does. From their you can start adding more advanced techniques over time. Always ask yourself as you are working, will this be easy for a new person to work on? Here's an added bonus. For most people returning to code older than 2 years you should be embarrassed. And it will be as if someone else wrote it. If it's easy to understand it will be easier to work with. What I am getting at is making your code easy to understand is like giving future you a gift.
Enabling `error_reporting` in a script with syntax failures is always too late. You'll need to configure this in the `php.ini` or `.user.ini` or via `.htaccess` Or at least have a look into the webservers `error.log`
The + operator merges based on keys, only adding the values from the right value if it's key is not present in the left value.
You mean if you have something like `$arr = [[1,2,3],4,5]`, then `...$arr` would yield `[1,2,3,4,5]` ? I'm sure the answer is no.
I really appreciate this and will bookmark it, thank you! I'm the junior (though technically not junior as I do all the frontend) developer out of two of us for a small company of around 50. The CMS is used by a couple dozen of them. They're currently using an old, hand-written CMS that's identical but separated across each of our websites. We're rewriting it from scratch into one more modern, unified CMS and I'm doing all the coding as a learning experience with the more experienced dev beside me the whole time. Thus far the biggest change I've made is insisting on PDO with prepared statements (versus mysql_* and manual escaping et cetera). Because of the fact that I'm already learning a ton from it and I'm in no position to argue with my superior over anything PHP yet (...except PDO, I won that one) the move to a unified CMS is set in stone. That said, I could still move on to a CMS that's already available like you mentioned as a new project next year. I really like the classes idea, I'll definitely do that. Oh, and I have to develop against PHP 5.3.2. Probably should have mentioned that sooner haha. Will that affect any of the things you've mentioned?
No need to apologize, at least you have a blog. I'm too damn lazy and insecure for that. ;) I wouldn't have guessed that your not a native speaker. If I compare your answer to mine, yours definitely has less errors. 
Nah, we're better off without him.
I'm a bit confused by this bit of logic: $secure = true; $buf = openssl_random_pseudo_bytes($bytes, $secure); if (!$secure) { throw new \Exception('Better for PRNG failures to terminate than propagate'); } Surely you could just replace that with this?: $secure = true; $buf = openssl_random_pseudo_bytes($bytes, $secure); and skip the exception entirely?
Maaaaaaaan. 1. You will learn some good things there. 2. You will not learn good coding there. * hand-written CMS * PHP 5.3.2 * ...except PDO, I won that one * identical but separated across each of our websites * though technically not junior as I do all the frontend * out of two of us for a small company of around 50 I'm really not trying to shit on your, your job, or the company you work for. But all those are big red flags to me. Why is this a 50 person company with only two developers? Do they sell this CMS as their main product? Did you want to learn PHP or were you presented with an "opportunity" to learn? Before I go further, here's what type of company your response indicates to me. Obviously with some reading between the lines and some assumptions. *Small company that is reliant on technology to exist but does not value it. The don't care about process, staying up to standards, or developing your skills. They want you make them something that will do whatever they told the client it does. They don't pay their developers market value and/or they hire people with low skill sets to they don't have to. But still expect them to get it done. No regard to work/life balance - just a "get it done" mentality. Little to no infrastructure or process.* I could be completely off base but that's my experience with places that do the things you've listed and I hope I have taken the focus away from programming. You seem really excited and eager to do this. Which is the best thing you can have at this point. [Start here](http://php.net/manual/en/migration54.new-features.php). That's for 5.4. You can go up or down by changing the URL to 55 or whatever. Staying at 5.3 [is not good](http://php.net/supported-versions.php). It's no longer updated. You may run into performance and security issues. The current stable release is 5.6.10. You are three major versions behind. Do some Googlin' and read up on why it's best to stay current. Or at least what you'll be facing by staying. You probably can't change it at work but at least you'll know. Why do you have a custom CMS? Does your small team think they are going to be able to produce something better than WordPress (for example)? But maybe your company fits a very specific niche and needs very specific requirements. My guess is that is not the case. Is your task to rewrite it a "test" or some form of training? What are your senior devs doing while you're doing this? Look, I don't know all the details and I certainly don't want to plant a negative seed in your brain. But nothing of what you stated sounds good. It sounds like your "senior" developers are - at best - not guiding you correctly or - at worst - not qualified to be called senior or guiding anybody. Okay, let's move on to what we can change. Which is a good thing to get used to. You'll encounter some type of issue everywhere. If you can't change it; accept it and work with it as much as you can. Staying positive is very important in development and in your career. **Scope** Do you have one? A defined list of required features? If you don't, make one. Even if the directive is "just make sure it has all the features it currently has". You're making a fundamental change (unification) and that will most likely make some feature have to change. Get a sign-off from the highest person you have access too. They want something changed? Pull out that scope and reference it. Wait. Roll back. Do you have a project manager? This is stuff they should be doing - even if it's an internal project. If you don't you just got one. Yourself. **Version Control** If you're not using version control then you need to start. Git is my suggestion. GitHub is free and you get one private repository. It will need to be private since it is an internal project. [GitLab](https://about.gitlab.com/) and [Gogs](http://gogs.io/) came up as self-hosted solutions. Learn the [GitFlow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow) process. It's easy to understand and great for beginning. Gawd, there is so much more. Reply back or send me a private message and lay it all out. Answer anything you can in this message. Lay out what your current process is. What technologies you have at your disposal. I'm willing to take a look at see where I can help point you in the right direction. Or don't. I could have completely missed your intent. Maybe you don't really want to become a PHP dev and just want to get through this project. Or you're already looking for another job. But if you want an outsider's perspective I'll provide it.
Oh ok
I'd look into CQRS, events, event-sourcing, and DDD, which are all mostly-separate techniques that often get smushed together in different ways. I'd start with just CQRS and events, as the most immediately-interesting way to restructure existing applications. In a nutshell, you design your controllers so that they create and send off a command, like `RepriceStoreItem` and then collect the swarm of events that occur, especially `StoreItemRepriced`, deciding how those events should guide the response to the user, which could be as simple as "Success!" Meanwhile those same events are triggering other activities, causing certain caches or static tables to get rebuilt if necessary, sending alerts, or updating graphs for price-histories, etc.
If the CMS doesn't integrate with the CRUD app, I would keep them separate. Throwing wordpress in a subfolder seems appropriate enough. 
Ah yes, makes sense. Didn't realize it was meant to be a reference variable.
That source code looks like a nightmare. I wouldn't want to fork that. * Global functions/vars everywhere * No classes and obviously no autoloading * Definitions and output in the same files * Include/require hellscape OP stay far, far away from this codebase.
Thanks for the warning, will do.
As great as Discourse is, I think people are happy communicating using the tools that they have become accustom to. I think it is not worth the effort required to centralize everything. Discourse is better for newer communities that aren't as established as all of PHPdom. 
Thanks! Any other must-have Chrome extensions that you guys use?
So what you're saying is you want to learn PHP the right way?
[Escape character](http://php.net/manual/en/regexp.reference.escape.php), [Scope Resolution Operator](http://php.net/manual/en/language.oop5.paamayim-nekudotayim.php), [Object Operator](http://stackoverflow.com/questions/6989308/object-operator-in-php).
This? -&gt; http://www.phptherightway.com/
LOTS of reading and I always have some sort of coding project I am working on. The second is very important as it gives me a chance to try new ideas out in actual code. 
Instead of TV and movies, I watch presentations on InfoQ (unless it's about "kanban", "agile", "scrum" and so on B.S.). Also presentations I find interesting from Apple's WWDC, Microsoft's Build and other conferences (you can find various conferences on YouTube for PHP, Ruby, Python, Scala, etc.). I check topics on YC News, and from time to time other subreddits like: /r/python/, /r/csharp/, /r/windows/, /r/linux/, /r/programming/, /r/compsci/, /r/java/, /r/dotnet/, ... Learn to skim fast and look for news more than opinions, because most opinions online are by people who have a lot to learn yet (despite I'm occasionally impressed by someone's insight). And, of course, as I code, or integrate a library, or whatever, if I see some concept I don't understand, I research it obsessive-compulsively until I understand it by reading articles, googling up videos and even getting books about it. That's the most important part: be curious about the "why". Never just accept something without understanding deeply the reasons that make it what it is. Knowing a lot of random techniques that are considered "good" or "bad" doesn't matter if you don't understand "why". Looking for the "why" also protects you from fads and hype, which are very common in our industry, despite we're supposedly using cold logic for all our decisions (best joke ever).
This one is for me a must have https://github.algolia.com/ More interesting extensions over here https://github.com/stefanbuck/awesome-browser-extensions-for-github
Keywords here might be propriarity, code protection and outsourceing. Source obfuscation is expensive while mostly useless on PHP. And why not putting it into the SaaS cloud so you can blame other companies that stuff isn't working instead o your inhouse it departement :P
I can't identify a specific point in his demo of context up there tbh. Maybe he has to explain more about why he wraps up that particular data in a context.
I have collected some of the popular sources in learning [modern PHP](https://www.google.com/stars/xsml2ivuk6hpe/profile/folio/ssf_5e3a37f482ad3216?hl=en-US). It might be of some help.
`not_nested` would contain the first three items in a list, so `[1, 2, 3]` then the `(nested_one, nested_two)` would create two variables containing 4 and 5 respectively. In Python we refer to it as extended Tuple unpacking, even though it'll work with any sequence (or generator, but those can be dangerous to unpack for obvious reasons). What's nice is that this can be nested arbitrarily deep and have wildcard unpacking (the `*`) at each nested unpacking. 
Basically using namespaces as rudimentary classes?
Awesome! And contributed to this :D #mammophp
You should leave this job if you want to learn development. Because you have to give your full time for learning development it takes so much time.
no offense but are you experienced(working) or student? 
A full introduction into DDD (read in this order): - http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215 - http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577/ref=pd_bxgy_14_img_y The article 'Effective Aggregate Design': stepping through all the consideration in deciding on how to model a (part) of your domain. - http://dddcommunity.org/library/vernon_2011/
"Big Data" that You mentioned is quite vague, but if it's really serious BD, then You have a LOT to learn in here. And remember that you will rarely start working on best projects in company from day one. It's quite normal to work your way up there as your skillset grows. 
I don't know how big this project is supposed to be. I would do one of the following: 1. Use WordPress. It's easy enough to use as a simple CMS and the guy who just wants to use html can have the WYSIWYG editor suitable for good account and edit away. 2. If you need more control, roll your own mini CMS with a framework of your choice. It's easy enough with stuff like Laravel our Symfony. In any case I would tell this guy that it's not feasible for him to still edit html pages.
It's always a difficult call where a job may not be as advertised, and that is why when interviewing it is important for you to ask them as many questions about the role as they ask you about yourself. Without knowing more about the in-house products, or what external products they/you will be working on, you aren't really going to get any solid advice from people out there - since we don't know the details, and everywhere is different. In my opinion, as a graduate, the company would be doing you a disservice if they don't get you trained up, or afford you the time to train outside of work time. That isn't a sound investment in you for the future. But perhaps it is important to note that you should walk before you can run, and lots of the work that we have to do as developers is inhouse applications, and the key in their statement is "help maintain, and **improve** them". You may get the "good php projects" out of improving things in the short term.
My recommandations : As suggested by /u/909plz and /u/no1youknowz, start by reading this : http://www.phptherightway.com/ Then get used to working with https://getcomposer.org/ (dependency manager) and packages on https://packagist.org/ Then start using a framework. I'd suggest Laravel because it's quite popular around here and you can then watch videos at https://laracasts.com/ wich is probably the best PHP resource right now (it's not free, but it's a few bucks for one months and you can download the courses that you'll need and watch them later). Even if you don't use a full blown framework in the end, learning how to use one will teach you a lot about PHP. edit : Oh, and use PHPStorm. You can't use PHP properly without a good IDE ;-)
I know that, but since the code is also on the github repo... all files will be public, or am I getting this wrong? 
And BTW - I think it can be only used for new purchase, not to prolong existing license. I wasn't able to use it for my renewal as got error msg: *Sorry, this code cannot be applied because the current promotion discount is already greater than the code discount (and they cannot be combined).* 
The question is why wasn't it extended by 6 months. Given that it takes 6 months for a new version to be adopted by any distro and to be accepted as production stable. That leaves 18 months of life before its on life support. 
There shouldn't have been any reason why CloudFlare wouldn't have protected you if you did things correctly. That is, you migrate to a different IP address AFTER you set up CloudFlare, and don't leak it anywhere. See steps #10 and #11 in their guide [here](https://support.cloudflare.com/hc/en-us/articles/200170196-I-am-under-DDoS-attack-what-do-I-do-). Regarding CDN, it's important to differentiate what is causing you issues, since this is /r/PHP is it the request/s of PHP?, or is it serving media assets - as above, CloudFlare will help with those - and your php could just be load balanced.
We changed ip's 3 different times before we were told that we needed to resolve the ddos issue because they wouldn't issue new ip's after the 3rd. From what i read online this is how the ip was found http://iphostinfo.com/cloudflare/ In the past his happened on one of our previous sites as well ( last year ) we ended up having to go through blacklotus because of the size of the attacks. If we change the ip after we set up the cloudflare account the resolver wouldn't find it? We were down for a solid week with random 5-10 min of the site randomly being live until we just closed the site down and began researching alternatives. I followed the setup steps &amp; the steps you displayed there. ( We have business protection, currently not making enough to swing enterprise ) As for the cdn it will mainly be used for serving media assets ( video, large hi-res images, etc. ) I am looking into load balancing as well at the moment.
It's really hard to tell what should You do, so be sceptical about my advice. Here it is: work for 110% for a half year. Be super eager, try to figure out how everything works there, get involved in as many thing as you can manage, find some PHP/SQL/whatever course/meetup/whatever nearby and ask a boss I they would allow you to participate during work time (without taking day off). Just don't be that guy that gets there, looks around and leaves. At least show them your best, so You'll have a nice reference (and it might be useful at this point of career).
Verisign has DDOS mitigation however it is somewhat expensive ($2000+)/mo
We've had a lot of luck running stuff through Akamai from a Rackspace cluster. You can drop public-net from the instances so traffic can only be routed internally via the CDN.
And definitely worth the renewal price every year too.
Programming = 80% business logic + 20% code writing. I guess now you have reached a position where you need to learn and understand business. Get involved with some financial/ accounting/ supply chain/ ERP kind of project. You 'll feel that a single life is not good enough to learn all the nuances of different business practices. Any kid can hope/dream to create a CMS or a game or such kind of products but when it comes to real business applications in Manufacturing or Financial sector (not so in retail or service) you need to learn a lot...a lot...
Isn't posting software license keys against the terms of this subreddit? If it is not, it should be :/
Thanks for the suggestions, but books...they're books. I was thinking of something along the lines of [this](http://stackoverflow.com/questions/21895756/why-are-floating-point-numbers-inaccurate). Short and sweet.
You're deluding yourself, this is piracy.
I seem to remember that he posted it ... But i can't find the orginal post so can't prove anything. But that whats the "Learn Programming" key is for !
Why would you think this is ok in this sub?
There doesn't have to be a dedicated driver; the two should switch roles periodically. There doesn't have to be a hierarchy, either - hence the alternative name "Peer Programming."
I've done it several times (not on an ongoing basis, but for quick problem-solving sessions). I usually just stand next to the other person, or vice-versa. We talk through the code together (control flow especially) and bounce ideas and concepts. Lots of what-ifs on conditionals to break apart the program. I've never tried it for an extended experience, and have no desire to do so. I think it's a good way to tackle initial design or tricky algorithms, but don't think it offers much more beyond what you'd get in a code review after. YMMV.
Did you read the first sentence? It was supposed to be a play on words.
I will check about exploitation issues. I don't get the part of reusable class, can you please guide me regarding this. I am not major PHP developer. Regards. 
Instead of generating the same code over and over, changing only a few strings, just accept that configuration in the constructor: $api = new MyNotReallyRestApi($host, $db, $user, $pass, $etc.); $api-&gt;insert(...); Now your class is free of configuration and you can reuse it without changing it.
Emit events, and use the events to update asynchronous read-models. For example, consider your code that manages friendships: It should not need to know all the different graphs/rankings nor should it have to wait until those things are updated. It simply does its job and then creates objects/messages for `FriendshipAdded` and `FriendshipRemoved`. These messages are quickly appended to a database table or emitted to some other service. Then, you've separate pieces of code -- maybe cronjobs -- watching that firehose of events and reacting to the ones that matter to them. So you might have a piece of code that goes: "Oh hey! A `FriendshipAdded`! I need to update the `most_recent_friendships` table." Finally, there's a piece of code for the front-page that does nothing but render a nice little box based on the `most_recent_friendships` table whenever people refresh the page. 
PHP7 is going to have `random_bytes()` and `random_int()`. I heard talk of a userland implementation of these functions, much like we did with `password_hash()`, has any progress been made on this?
I can't comment on NYC, but I made more than that as a junior dev in freaking Wyoming almost a decade ago. That was mostly Java, though, but still a decent amount of PHP as well. Considering NYC cost of living, I'd say you're underpaid as a dev regardless of your level.
I think you're being underpaid. Also, just a little sidebar, Java is not difficult to learn at all. Especially if you already know PHP. 
Without knowing your skill set, I still feel that's insanely low in NYC. I'm a sr dev now so what I make now isn't going to help you but I was making 55 out of school NOT in NYC in 08. I did graduate with a CS degree and had a year of internships under my belt, but still. Fairly certain Jr devs where I am are at least 60 to start. We're not even finance, which I assume averages higher. 
Java pays in gold nowadays - it may be worth learning but I would quickly get rusty with it since I wouldnt have a chance to use it daily at work :[
http://www.indeed.com/jobs?q=junior+php&amp;l=Brooklyn%2C+NY Looks like most JR PHP positions in Brooklyn are starting in the $50k area, with about half of them starting at $70k plus. You're being severely underpaid and your company is making a killing off of you. 
Yeah I've looked through the numbers but I didn't believe them solely based on my situation and what I personally make. It's turning out to be that my salary is the unbelievable one, lol.
I was a Java engineer in Boulder and got laid off at the same time as Oracle bought Sun and laid off a large portion of their Java engineers. Needless to say, I couldn't compete for the few available Java jobs on the market. If you'd be willing to move, I know of available PHP jobs that pay better (plus with great benefits) than what you've got, but... Colorado's kind of far from NYC.
I appreciate the kind offer but I'd like to stick around the NYC area :]
Even that sounds very low. I'm going under the assumption that NYC is on par with or slightly below Silicon Valley when it comes to software engineers though. For reference: there were junior people getting 160k offers for some roles. Granted that was devops and the company was desperate for it, but interns start over 60k these days and 100k is normal for maybe a year or two out of school (if not an fresh grad)
The dev environment has changed quickly. Being experienced at managing multiple servers and backups and NAS servers may even play against you since the environment has shifted to using third party systems like AWS/rackspace in non enterprise environments. The most disconcerting thing is that you mentioned you don't do much OOP, which puts you pretty squarely at a junior dev position. You need to get over that extremely quickly if you want to see significant changes in your employment terms
Well, that was just me going to indeed and typing in "junior php" in the search bar. Obviously, there will be fluctuation, but I feel like $70k-ish is probably more appropriate for the position. 
A ton of comments in this thread are correct. You're being underpaid. But you need to consider a few things. One, it's NYC. I live in the area and can tell you (which I'm sure you don't need to be told), shit is expensive. Wherever you can save money, you do it. This includes with employees. If they don't have to pay you a ton, they're not going to. Two, you need to remember that you have a degree in financing--not in engineering or any other computer science related field. I'm not trying to imply that it's required for a career like this, but it can easily be seen as fickle at first glance without reading into it. What I suggest you do, is apply for some certifications and see if your company has any form of continuing education program. By doing both you'll increase your desirability at both your current career and future careers. Three, looking for a new career constantly is not only a good idea, it's basically a necessity. Especially so in the City. If you don't get a decent 3-9% raise every 2 years, then you're underpaid. When it comes to payment, especially with career paths like this, experience is vital. It's great because the longer you work in the field the more desirable you become because you're gaining real world experience all the time. Paired with your certificates and CE credits, 3-9% per 2 years is pretty reasonable. &gt; My last raise was $12k in January and I only got it begrudgingly after my boss found out I was job hunting, not before when I asked for it. This is sign #1 you're being underpaid and it should be the last straw for you. If they aren't going to pay you what you're worth then they're not worth working for. People really undersell themselves when it comes to careers. The company is helping you out by employing you, sure. But it's not like you're not busting your ass for that paycheck. __You don't owe them any loyalty or allegiance.__ People forget that when they hear things like _be a team player, etc_. They're all relatively common qualities, but I've always said that you need 5 qualities to be a good developer; 1. Humility a. If you walk around acting like you know everything--that's my first indicator that you're not only difficult to work with, but are probably the farthest thing from intelligent. Humility is so fucking important. 2. Curiosity a. No one wants to work with the guy that just comes to punch in and punch out. We're developers. We get paid good for our time (hopefully) and should be putting good time in for our projects. Seeking to expand your current toolset and skillset is apart of the job. 3. Honesty a. If you can't tell the project manager he's a dumbass for thinking that the refactoring of the company's entire codebase isn't going to take a weekend, then you're probably in the wrong field. 4. Cooperation a. Why do all the work when you don't have to? Cooperation is vitally important to operations. 5. Discipline a. Comment, stage, and test often. For God's sake, never push out inferior code for your partners to figure out why in the fuck you're using inverse operators for a simple if statement. ------------------------------------------------ To clarify my above statement. If your starting salary is $45,000 and your raise percentage is 6% every 2 years, then after 10 years you'll see something like this. |Year|Raise|Gross|Change| |:--:|:--|:--|:--| |2|$2,700|$47,700|+$2,700| |4|$2,862|$50,562|+$5,562| |6|$3,034|$53,596|+$8,596| |8|$3,216|$56,812|+$11,812| |10|$3,409|$60,221|+$15,221| This is pretty average.
You can do much better. I make $55k (plus great benefits) as a mid-level full-stack PHP dev in Indiana, which has a notoriously low cost of living and a notoriously low availability of PHP jobs (almost everything here is .NET). I feel like you should be able to find something better in NYC for sure.
It's hard to estimate jobs when you have little to no experience. You will learn as you take on more work how long things realistically take. An hourly rate is going to be different depending on location. $50-$60 is probably a good average rate. Are you planning on giving them a ballpark estimate with an hourly rate or a lump sum contract price? Do you plan to start from scratch, use an open source package, use a commercial package or use an API from a company like PayPal? This would be a good project to get some experience with but at the same time online shops can be a bitch. Don't forget that unless you use an API that includes a shopping cart on a secure site you will also need to worry about the security layer (SSL, auditing, merchant account approval, etc). Also, make sure you really know what customer data to store and how to store it securely. A way to process orders is going to take some time to build too. Make sure you fudge your time enough to also cover the time you spend in meetings, training the client and other administrative tasks. That stuff adds up quick. Especially with a small business. They'll want a bunch of face-to-face time. I really only take on small business projects when I have absolutely no other work. Even then I'd probably just setup a shopify site for them and charge them a monthly maintenance fee.
Thank you for the info - what were your duties at your first job? Anything similar to mine?
See my edit to my original post. MEAN stack stuff is fairly new so there aren't a ton of experts out there. If you know javascript you can pick it up pretty quickly and Microsoft has embraced it so they are integrating with it a lot if you like working with Microsoft products. 
I made $50k 7 years ago here in San Francisco when all I knew about PHP was how to echo out variables in wordpress themes. I know the market for devs is tighter here than in many other places but that seems insanely low especially given the cost of living in NY. I'm about to hire a jr. PHP developer and assume that we'll be paying them at the absolute minimum $80k. If your work was building homes for malaria-stricken endangered animals it'd be a different story but from what you said, it sounds like they're making money. You don't need to give them your life as a charitable contribution. Look for another job. With an offer in hand you can say to your boss that you have a better offer. He doesn't get to say what you're worth, the market does. Maybe he'll offer you another raise to keep you, maybe not. That's up to him.
Indeed. I too am a consultant and I make just shy of that, but I'm also in the midwest where cost of living is insanely low. Experience and knowledge wise I'm a senior guy but i'm not currently working in that capacity (not leading a team, not doing architecture, etc.). Hell my current contract is only for client side work (backend is Java), so I'm not even doing full-stack at the moment. 
You are being severely underpaid. Six figures is absolute baseline for real technical talent, especially in a city with as high a cost of living as New York! If you can intelligently copy and paste snippets from stackoverflow into a single file (even at an intern level!) and get it to do what the bosses want it to do: you are worth at least 75k to them. The only reason employers who pay less than that even exist is because young devs don't understand how tremendously valuable they really are and agree to work for peanuts. 42k is peanuts. 
Very good point, thanks!
So many programmers feel like this. Just fight through that feeling. It's perception you have, not a reality. Are others better than you? Undoubtedly. Also better looking, more charming, confident, and rolling in dough. So what? They started somewhere, too, and that's where you're at. Keep at it and you'll care less and less. 
&gt; GoF's chapters on Abstract Factories &amp; Factory Methods don't say anything about a factory being allowed, or being forbidden from retaining created instances, so one could argue it's not essential to the pattern. The Factory Method chapter in GOF includes an example of retention via a separate method. That by itself is evidence that they encountered the behavior, and showed how to allow for it (i.e., by separating the "factory" method from the "accessor" method). &gt; This diagram is from the Flyweight chapter, demonstrating a Flyweight Factory, which is instructed to retain created instances in a map and return them on repeat requests. I have skimmed the chapter and at first blush that seems like a correct assessment of their description. Let me get back to you on that one after I read more deeply. :-) &gt; It does get weird with pooled instances (like in the Flyweight pattern mentioned above), as they're something in-between (neither singleton-like, neither always new). Yes, I agree that mixing/combining things in that way makes it harder to have a clear vocabulary to describe what's going on. Perhaps it's a case of being too close to the problem (on the part of the authors) and not seeing clearly because of it. Regardless, this is food for thought and I'll say more about it later, one way or another. EDIT: If you have other examples from GOF or other authoritative sources, doing what I would call "mixing of creation and retention" (a la FlyweightFactory) that would help to shed light on the subject. It will help to show, one way or the other, if FlyweightFactory is an oversight or inconsistency, or if the Factory Method description has unstated aspects.
Started with this: http://web.archive.org/web/20061009055225/http://www.pcquote.com/ Made a pitstop here: http://web.archive.org/web/20061108131015/http://www.pcquote.com/ Finished with this: http://web.archive.org/web/20061227014518/http://www.pcquote.com/ I should note that I didn't do the design/layout but the guy who did sat right next to me. Also, I didn't have any control over the servers but that was already in my skill set so I was able to talk with the people that did the hosting. I started from scratch but had directives to keep similar functionality. There were user accounts already that I had to keep; that was doing portfolio tracking. Quote lookups from the real time socket feed for authenticated users, but delayed quotes for anonymous requests. I had to pull the news articles from TheStreet.com and TradingMarkets.com. Sometimes I had to pull down copies of the news articles while others had to have links to their pages. Also we had some sort of agreement with ATT/Yahoo where we would host their finance pages and give their users access to the realtime quotes. I also set up and administered an OpenX Ads server for the 3rd party ads on the site. 
I live in Salt Lake City and make 78k with 10 years experience. I get headhunters that call offering me 100k to 110k but I really love my job and the flexibility and freedom they give me. Plus the cost of living is lower than most metro areas so I live incredibly comfortable. Unless you absolutely love the environment of NYC, I would look at other tech hubs that have a good stand of living with a low cost of living. 
I caution everyone that this should be considered **experimental** until I get the all clear from other PHP security experts.
Yep. Maintaining the system, backups, PCI compliance, load balancing and servers will quickly make this project more expensive than running Shopify / some other hosted solution. As a junior you would gain a lot of experience maintaining the Shopify store + writing custom plugins using their API.
OK I see. That's not in the above proposal, but I suppose it could potentially be added with some syntax like list(...$not_nested, [$nested_one, nested_two]) = [1, 2, 3, [4, 5]] Seems to me like the use cases are pretty limited though.
Google results are meaningless, there are [plenty of things](https://en.wikipedia.org/wiki/Erp) ERP can stand for. There are only 6M results for "enterprise resource planning".
I doubt you use factories for *everything*. Search your codebase for "new". I bet you might encounter at least one "new DateTime()" or similar outside a factory. Furthermore, any function you call represents violation of factory usage, because it refers to a static global name (it's like reaching out to call a singleton or a static method). Imagine how your code would look if you had to capture all functions you use as closures, and grab them from a factory. It'd sure help testing - you can now mock file operations like fopen, fread, fwrite, or time operations like time(), sleep() etc. Buuut... it'd be hell in all other respects.
Other languages you can learn if you're comfortable with PHP's OOP and so on paradigms: C#, Python, Swift (that allows you to write iOS apps), and the Android devkit (Java, which allows you to write Android apps). A world of possibilities awaits...
just a run of the mill SSL cert will work fine. Here's one for 6 bucks. https://www.sslcertificate.com/lp/5.99-essentialssl-sale.html?gclid=Cj0KEQjw6OOoBRDP9uG4oqzUv7kBEiQA0sRYBD6M0hpp5pffC3CwuAdJniWUwIoULvUYtuqdJvWCJxkaAkyh8P8HAQ
It still is, but Apple released a new language, Swift, which is much more pleasant to work with. It feels like a script (PHP, JS) but it's compiled, statically typed and fast (like C and Objective-C). Both languages have full access to the iOS and OS X APIs. **EDIT:** Wait, why am I explaining this, can't you google?
The audio was terrible and make it torture to watch :(
I live in bath beach in Brooklyn. Rent is 1450 for a large two bedroom, I have a roommate. I actually would probably never live in NYC if given the chance, too crowded and dirty for me, parking my car and motorcycle would be a nightmare, just not my thing really. Technically if things went south I could live in my car, it's big enough :) edit: I also don't go out much, I don't like bars and clubs, my girlfriend and I prefer hiking and nature, so I don't spend $100+ on a night out. That saves a TON of money. 
So, libmcrypt is bad because it hasn't been maintained in a long time? Not the most convincing argument, if you ask me. How about listing a vulnerability case or two to prove the point. 
So first, the brutal truth. If you build an ecommerce system from scratch, you're going to fuck it up. You can expose sensitive data that can seriously damage the business's reputation. You can just make it too difficult for them to manage all of their products. Bottom line, no matter how good you feel about your skills today, you *can't* do this properly. Now, with that said, you are absolutely capable of delivering what these people want. You need to do that by managing expectations. Imagine for a minute that you're an honest car salesman out to do the best for your clients. A person comes in who understands what they want out of a car and what they're willing to pay for a car, but they've never driven a car, don't understand how they work, and don't have a good understanding of the differences between a Kia and a Ferrari. The fact that Ferrari's are hand built may sound really appealing to them. The fact that they're pretty and fast and fun to drive may be appealing. But a Ferrari isn't going to carry their family around to the grocery store, and even if they were willing to make some sacrifices to deal with that, they can't afford it. This is where managing expectations comes in. This guy doesn't really know anything about cars. You don't even need to tell him that Ferrari's exist, or explain the difference between assembly line assembled cars and hand built cars. He doesn't need to know about engine displacement, weight to bhp ratios or anything else. What he needs is a car that drives his family to the grocery store, for it to be reliable, and for it to be affordable. This is the situation you're in right now. These people own a fishing shop, and they're entertaining the idea of a high school kid developing their website. They've used the internet, but I doubt they've ever so much as logged into the backend of *anything*, let alone something as complex as an ecommerce site. They don't know what it should look like, what the UX should be, how the inventory system should function, how payment should be handled, how to process returns through their merchant system, et cetera. Short version, like John Snow, they know nothing. Like the car salesman, you shouldn't be trying to convince them to buy into a custom ecommerce system. They can't afford one that would be safe and reliable, and even if they could, their needs don't even come close to requiring it. They're more likely to be missing features than having whatever non-standard things they'd want. What they want is Magento or Shopify, installed out in the cloud somewhere, made pretty and configured for their needs. You need to convince them that this is the best option, sell them on it and go from there. I might add, you can make plenty of money doing this. It sounds simple, but in the same way that you don't need to make them aware of those hand built cars, you don't need to explain that Kia's are getting manufactured super cheap in Korea. They just need to know that it fits their price, is safe and reliable. It doesn't matter if configuring and styling Magento only takes you a few days. You're in charge. You can name any price you want for this. So, bottom line, here's what I would do. Explore the options for prebuilt ecommerce like Magento or Shopify. Find the one you feel like you're going to deliver the best experience with. Come up with a price for how long it's going to take you to make a design (or purchase and customize one, nothing wrong with that), customize the software and get them going. Do *not* offer to input their inventory for them unless you are absolutely bored out of your mind and suicidal. It is tedious, mindless and below your ability as a developer. You're setting this up for mortals to use. This is setting expectations again. You setup the software, now they're going to manage the store without your help. Tell them whatever the price is and go with it. If they're unwilling to pay it, don't haggle. Just pass. They're not going to beat whatever a 17 year old kid offers them. Don't undersell yourself just because you're young. Good luck man.
You could abstract the setting of these values into components per entity that could then be composed together for each association. A similar problem to this was actually a major inspiration for [Incoming](https://github.com/Rican7/incoming). There are some examples in the README.
&gt; But for any class in userland? Factories. How are you implementing this, though? Adding factory methods to classes for the sake of breaking out the `new` process seems like a proper practice (SRP, testable, etc.), and doesn't require much additional development overhead. Are you actually creating dedicated factory classes as well, or just utilizing factory methods and container(s)? The development overhead of creating factory classes for most user-land classes does not seem to have much return on investment. Seems like an unnecessary level of abstraction for most cases.
People need to start putting pressure on Magento to fix this.
I think your blog post brings up a good discussion regarding factory pattern implementations. However, I think you're interpreting Misko's article more broadly than originally intended. The article's title states "... with Respect to Unit Testing", and the example(s) given are specifically regarding removing hard dependencies and using DI.
&gt; If you check the list of pros and cons of a Service Locator you'll notice they all rely on it being runtime configurable and global. Yay, duelling examples! ;-) If you check [the original Fowler article](http://www.martinfowler.com/articles/injection.html#UsingAServiceLocator), he shows a Service Locator with methods that are not runtime-configurable. A later example with runtime-configurable methods he describes as a "dynamic" Service Locator; the Wikipedia example you cite is one of those. That leaves us with "global" -- which I think is a small enough difference to say that Encapsulated Context is a non-global Service Locator, and is otherwise identical. It's for module-specific services, not application-wide ones.
reddit, the new google
It's not really "the original Fowler article". He definitely didn't come up with that term, neither is he the authoritative source that defines it. He's a popular dude who really likes to write articles about patterns. This article by Sun predates that "original article" by 3 years: http://www.oracle.com/technetwork/java/servicelocator-137181.html Look, it's very simple. When people say a Service Locator, they expect to gain benefit X, Y, Z and encounter problem A, B, C. I don't like to cite Wikipedia, but they list pros and cons very well, in a way that matches the way most people interpret Service Locator today (and a way that matches original implementations in .NET and Java). A "non-dynamic" and "non-global" Service Locator, doesn't have benefit X, Y, Z and has no problem A, B, C. So calling it a Service Locator really serves no purpose at this point.
&gt; It's still a Factory if it encapsulates object creation. This is what I'm arguing: that if it encapsulates *more* than object creation, it is *more* than a Factory; that is, it is not *only* a Factory. Perhaps this is a case of you thinking "That which is not explictly forbidden is implicitly permitted" and me thinking "That which is not explicitly permitted is implicitly forbidden" -- at least in this context. Regardless, it appears neither of us has changed the other's mind; perhaps lookers-on will have gained something useful from the exchange.
Like I implied in another comment, if you've got an Android (or hell, can pick one up cheap), a great way to get started learning your way around Java is find something you want your phone/tablet to do, and write an app to do it. If it's useful to others, release it, and then you've got a side project that'll help keep you fresh. Java is certainly plenty different from PHP - it's very emphatically OOP, and feels really verbose especially when you're starting out, but a good IDE helps with that, and as you learn it starts making more sense. I've started to see how the enforced OOP/verbosity helps keep things organized - it gives you much less rope to hang yourself with than things like PHP. Android development is a great starting point, I think, because it reduces the scope (you've got a nice structure built to work inside of), and Android Studio is becoming a solid IDE to help out.
I'm just starting with Swift.......it feels so odd and wrong...
Yeah - one thing I have learned is to not give a shit about what other employees are making; you know what you are worth, if the other guy does not want to step up his game then this is their decision (I have been getting very nice raises for the last 8 years... I have no shame I don't care if anyone was here before I was and has been doing this longer, if you have to give them a raise to give me a raise then that is your problem). Seriously, do not under value yourself. Be straight, honest and direct. If they are unable to give you a raise then thank them for their consideration, go back to your desk and spend the next week looking for a company that will value your time. Nobody is comfortable talking about money. Then again that is why 99% of people are work in the first place so, it only has to be as awkward as you make it. I assure you the people at the top are taking their yearly raises and not working for less than what they feel they are worth. Why not you?
/me shakes head In this case, yes, `not only a factory == not a factory`. It combines concerns, making it something other than a factory. (For the record, I get that you want to factory your cake and retain it too. ;-) 
The software is not free unless they give us the source code. Whether it costs money or not is not a big issue. They should be paid for creating and maintaining such a quality piece of software. 
I wouldn't worry about his salary. In a perfect world everyone's salary is relatively fair, but in actuality there is a reason they don't want you discussing your salary and that's because it's never fair. It's not illegal to look for other jobs while you work your current one; and nothing motivates a raise like "I have an offer for 20k more at another company, can you offer me something comparable."
I know, I tried, but didn't have the interest and the time required.
The "network operations" bit is a strong hint about the kind of use cases Service Locator exists to serve. If you want, think about it as an in-app DNS for your services (which may be tunneled over a socket, over a named pipe, or local, it doesn't matter). You ask for it by name (= some identifier) and you get back an address (= object reference). There's one DNS for the web, and no matter which DNS server you use, they all point to the same root DNS with the same domains in them. That's sort of the role of a Locator in an app. 
Floating points have given me a headache in the past. Try running the following example: $float1 = 0.04 + 0.02; $float2 = 0.04 + 0.01 + 0.01; $float3 = 0.03 + 0.03; echo 'Values:'; var_dump($float1); echo '&lt;br&gt;'; var_dump($float2); echo '&lt;br&gt;'; var_dump($float3); echo '&lt;br&gt;&lt;br&gt;'; echo 'Comparisons:'; var_dump($float1 - $float2); echo '&lt;br&gt;'; var_dump($float2 - $float3); echo '&lt;br&gt;'; var_dump($float1 - $float3); echo '&lt;br&gt;'; Run on PHP 5.3, here's the result: &gt; Values: &gt; &gt; float(0.06) &gt; &gt; float(0.06) &gt; &gt; float(0.06) &gt; &gt; &gt; Comparisons: &gt; &gt; float(-6.93889390391E-18) &gt; &gt; float(6.93889390391E-18) &gt; &gt; float(0) It doesn't matter *too much* when making calculations unless precision is really important. However as you can see it can catch you out when making comparisons, since PHP treats them as not equal even though they have the same string value.
Some examples: https://github.com/domnikl/DesignPatternsPHP/tree/master/More/Repository
Looks cool, but still not what I'm after. I want a _strict subset_ of PHP, which e.g. removes `==` operator, forbids using `!` on other variables than bools, etc. Also, this is written in PHP...
All I know is when people talk about the benefits of Service Locator, and the negatives of it, they come from the definition I'm trying to describe. And passing in contextual object providers according to an interface you ask for has neither those benefits, nor those negatives. It's just a different thing altogether. Everyone knows the pros/cons of Service Locators, yet they think they apply to a different definition, so now many developers would just blindly state injecting a container is bad by default, without having a clue what they're talking about. It's like watching a sitcom joke develop in slow-motion over the course of the last decade or so.
&gt; All I know is when people talk about the benefits of Service Locator, and the negatives of it, they come from the definition I'm trying to describe. It is my guess that the folks on the PHP subreddit are using the Fowler article, and descriptions based thereon, for their understanding of the pattern, rather than the "Core J2EE Patterns" article you linked to. That certainly has been the case for me, and it might explain a lot of the pushback you've been getting. If that's true, then this appears to be a problem of using different dictionaries to look up the same phrases, in which case you may wish to specify *which* "Service Locator" pattern you're talking about.
&gt; It is my guess that the folks on the PHP subreddit are using the Fowler article, and descriptions based thereon, for their understanding of the pattern, rather than the "Core J2EE Patterns" article you linked to. That certainly has been the case for me, and it might explain a lot of the pushback you've been getting. That's not the important part. It's that folks who read the Fowler definition (let's call it that) still think the J2EE pros/cons apply to it. Which is not the case.
If they haven't read the J2EE definition, they probably are not aware of that definition's particular pros/cons as such. Further, you're talking past each other if you're referring to different definitions.
I've never made less than $80k /yr as a developer (and that was as a Junior dev). You shouldn't either.
Do you remember when you told me injecting a locator would hide the component's dependencies? That's an example of this inconsistency. So somehow you were citing the "classic" locator pros/cons while discussing an implementation that doesn't match it.
/me shrugs All I can tell you is that I discovered it in reference to the Fowler definition, not the J2EE one, and that I consider it a tradeoff, neither pro nor con. I think, though, that we have reached the core of the problem you're having when talking about Service Locator. If you modify your references to use Fowler instead of J2EE, you may have better luck. EDIT: Here's one example that refers to Fowler, not J2EE, and my guess is that quite a few PHP redditors here are familiar with the sentiment: http://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/ The examples therein are why I at least think of your Encapsulated Context as a limited-scope Service Locator.
Am I correct saying that the purpose of Recki-CT is speed?
The article links to Fowler only to mention it doesn't matter that he wrote about it. I seriously doubt the author even read the material he's linking to. Then the post proceeds to clearly demonstrates a global, runtime configurable (notice the Register method) locator. If this article, that you base your beliefs on, speaks about a *global, runtime configurable locator* how did you decide whether it's global or not doesn't matter much as to its negative sides? Kind of arbitrary, don't you think. And, BTW, Martin Fowler describes a locator like this: &gt; The basic idea behind a service locator is to have an object that knows how to get hold of all of the services that an application might need. "All of the services an application might need" sounds like a app-global locator, not an object provider interface specific to a given class constructor. The fact PHP developers would skim some article boldly proclaiming X is an "anti-pattern" and run with it and claim any factory/container/whatever injection is "hiding dependencies" speaks to the fact that those patterns are understood extremely superficially, and used to broadly label techniques bad or not bad based on surface similarity with something they don't even understand. Don't seek some internal logic or deep insight to this whole situation. There is none.
As somebody already pointed out with the Flyweight example, the client should not really care if what it receives is a new instance or a "shared" one. So I wouldn't go as far as to say that factories should never keep instances. But personally I prefer when people say that something is a "factory and registry" just in case =)
&gt; "All of the services an application might need" sounds like a app-global locator, not a contextual object provider. Yup, which is why I have been saying that the only difference between Fowler's Service Locator and "your" Encapsulated Context is the app-specific nature of one and the module-specific nature of the other.
Good grief. I'm making way more than that in Austin, only a few years experience, and mainly doing WordPress work (managing 2 junior devs). You need to find a new employer. 
The object is stored in memory (RAM) until you unset it, or your script terminates. Once your script ends, it's gone forever. You use the database to persist whatever information you have stored in your object, so in the future you can recreate it and manipulate it as an object again. The key concept you are missing is that although PHP objects and database rows are often treated as the same entity in many frameworks, the object is just a convenient data structure that represents your database data and allows you to manipulate it (and in most cases, save it back to your database when you are done).
That seems so low... I have a friend making $75k as a Quality Assurance Engineer. Why isn't a dev getting paid a lot more? He works in Valhalla NY about 30mins from Manhattan. 
If I'm using XYZ cool new framework, when does my script actually end? Say my controller saves some data to a variable and I don't actually do anything with it. Something function foo(){$bar = foo}. If I run that function, am I just essentially recreating that object every time unless I save it? What about data submitted from a form? I know I can call that function and get that variable in other places without saving it. Does foo = bar until either something overwrites it or the memory is dumped? Does that make any sense? You could probably make an argument from my questions that frameworks are bad. it's amazing how much I'm able to accomplish without knowing the fundamentals like this. I appreciate your help. You actually just made me have one of those brief "aha" moments. I never realized that what I'm doing is actually recreating the object 
&gt; so complex... It doesn't have to be all that complex to warrant a factory. If the act of instantiating one object requires the instantiation of another, it's a good sign you should have a factory that either encapsulates the instantiation of both, or makes use of additional factories if needed. Correct, valid object construction and instantiation is arguably one of the most important parts of any application, and there are no drawbacks to treating that operation like a first class citizen.
The drawbacks apply in both application-wide and module-specific scenarios. For example, one set of tradeoffs: - being able to see from the outside exactly what the specific dependencies are, and not "reaching into" collaborators (that being the DI side of things); - versus the convenience of having all the dependencies in a single object and having to inject only the one dependency (that being the Fowler-ish Service Locator side of things). That particular set of tradeoffs has nothing to do with application-wide or module-specific dependencies.
That's one purpose. But it was designed as a compiler toolkit to also enable better static alaysis. Lessons learned are going into future projects that I am currently working on.
Frameworks do hide a lot of the inner workings and abstract away what is really happening, so it's important to explore these kinds of questions as you come across them like you're doing now. Otherwise you'll just keep running into bigger and bigger walls down the road, get more frustrated and not get any better. Since you mentioned forms, I'm going to assume you are building a website of some variety. Let's assume you have a simple form with one field, 'First name'. * The user loads your form in their browser, types in their first name and presses submit. The form data is [POST](https://en.wikipedia.org/wiki/POST_\(HTTP\))-ed to script. Let's call that script submit.php. * submit.php starts at the top and goes through all of its logic - if a framework is involved, likely the script is include()-ing or require()-ing a whole bunch of other scripts to do what it needs to do. Since the framework is probably object-oriented this means that a lot of classes are being referenced, all kinds of objects are being created, etc. This could end up being quite a labyrinth of code to navigate if you are trying to figure out what is going on but the important thing is, once submit.php reaches the end - meaning there is nothing left for it to do, this is when the script ends, or terminates. At that point, all of the variables that submit.php generated are now gone. The lifetime of a variable is the script it is created in, sometimes less if it's deliberately destroyed using unset() or a similar function. If nothing in submit.php sent that data to your database, the variable and the data that was associated with it is gone as well. You can only reference that variable for the lifetime of submit.php. As mentioned in the first comment, frameworks will help you out by mapping the object to a database row and vice versa, so you can work with it indefinitely. Specifically this is known as an [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping) or object-relational mapping library.
&gt; being able to see from the outside exactly what the specific dependencies are, and not "reaching into" collaborators (that being the DI side of things); [Wat](http://vignette2.wikia.nocookie.net/gta-myths/images/6/6d/Lol_wut.jpg/revision/latest?cb=20140121172907), you're saying I'm able to read a constructor from outside, but I can't read the interface it requires from outside? I'm pretty sure you can read an interface. What is the *actual* drawback here?
&gt; when does my script actually end When the last line of code (more accurately, instruction) in the script finishes executing. Even though there's more to PHP than just websites, it's easier to understand this using a website as an explanation. When you request a URL in your browser, here's what happens: 1. The DNS your browser is using reads the URL, and points it to an IP address that corresponds to a server somewhere. 2. The request (in this case the request is literally just the URL you typed in your browser, plus maybe some cookies or form data) usually goes through on port 80 (for HTTP) or port 443 (for HTTPS). 3. A dedicated program called a web server is listening for bytes to come through on those ports. If it sees them, it does some of its own stuff, but then calls whatever file it was configured or instructed to call - usually index.php if no specific file was specified. 4. When index.php starts up, the file is executed in sequence from the first line to the last line - sort of. You can define functions and classes differently from the order in which they are actually called, but the basic idea is that it executes the lines of code that it should. 5. Usually, the final line of code to be executed is something that includes HTML, or echos data. 6. That data is then sent back through the webserver, through the open connection to the browser 7. Once that's done, all objects/variables/references are removed from memory (this actually happens as the script executes, not just at the end, but the idea is the same - once the script is done, there are no memory references left) This is what's known as the request/response cycle. Every time you refresh a page, or visit a page, it's a whole new request/response cycle - it doesn't remember anything about the previous cycle (unless you use sessions or database storage!). Every request is independent from all previous requests - not just between different users, but even for the same user. The same is true for any PHP command or script executed from the command line, or any other means. It executes all instructions, and when there are no more instructions, the script is done, and there won't be anything stored in memory. There's more detail and nuance there, but that's the overall concept. So, all that said, if you look at a framework, which executes thousands of functions and instantiates hundreds of objects in any given request, it does that *every* request. Every single request, it "starts over from scratch" and goes through the whole process again. Of course things like OPCache improve the *speed* at which it does this from one request to the next, but that's a bit different from all of that data being persisted in memory from one request to the next.
Its static code analysis kicks the pants off of any Sublime plugin I've tried. This alone makes me far more productive than jumping around the code base, looking things up, remembering them, etc. not to mention the integration with Xdebug and other tools. Honestly, you should invest some time into it reconfiguring the keymaps and layout. It has way too many menus and toolbars cluttering the screen by default, but there a handful of guides out there on configuring it to be very minimal.
I think this is a question better suited for [r/freelance](https://www.reddit.com/r/freelance)
First off, thank you and everybody here. I was expecting to be told to google or read a book. Once you get over the beginner "this is a function" stuff, it's a lot harder to level up. How do controllers work then in a MVC structure? When my form POSTs to a route, I understand that it calls a method from my Controller.php. So if my controller method is called by submit.php, when does that controller script ever end? So basically submit.php runs in its course, passes the data off, executes whatever else and then dies? When I pass it to a controller, I'm saving it inside a function, but why can I still access it? I'm assuming there's just black magic going on inside the framework that is doing this. 
Just curious, what exactly is exploitable? This is the sort of fear that stops me in my tracks. I'm sure you don't have the time to pump out an essay, but what should I google here?
Doesn't sound that bad. I will say, if you have limited experience with php you have some work ahead of you. Patience would be key from the customer as there are going to be some spots you bang your head against for a bit. That might be the push you need to get through those bumps though. All in all it sounds like a good/hefty beginner project. Good Luck!
That's exactly the drawback; it hides the things the object actually needs behind a layer of indirection, rather than just injecting them directly.
^ This + your currently salary (or better) should be doable remote so you can go wherever you'd like to live most.
I would probably enforce data type consistency on variables.
That interface is not "hidden" in any way. You can open the interface and read it, just as much as you can open the constructor declaration and read it. Both as a human, and as an IDE. Moving something to another file (if we assume PSR-4 layout) is an entirely trivial concern and doesn't "hide" anything. You can't just say something is "hidden" while... it's not hidden. What are you worried about, that you'll casually forget to fulfill the interface? Don't worry, both your IDE and PHP itself kindly remind you with a Fatal Error.
&gt; You can open the interface and read it Yes, you open the interface to *some other thing* (that is, not the class you are working with) to discover the true dependencies of the class you are working with; that's "hiding behind a layer of indirection." The alternative is to inject the dependencies directly into the class you are working with, and avoid the intercessory dependency-collection-object entirely. Again, I get that you really like doing things that way, and you're allowed, but to me that's a drawback to consider. It is to other people as well. Anyway, I think I'm done here -- you can have the last word if you like.
Hack is nice, but is actually a super-set. I thought a subset might be able to help me without imposing architecture (necessary for the job).
- When you're calling a constructor from class A to class B, class B is already "some other thing". The dependencies you feed into the constructor directly are also "other things". So if you have a "thing" (1) construct another "thing" (2) and pass in one (3), two (4), three (5) other "things", those are five "things" coming together and no one bats an eye. But add a sixth "thing", and everyone loses their minds! - You're completely ignoring that this "thing" gives you lazy instantiation and avoids positional arguments that get confusing when you have more than 3-4 of them. This is for higher level components. It's not fun counting arguments to see if that 8-th boolean argument really was flag $foo or flag $bar. "Time" is also not considered: over time some arguments will be deprecated, new ones will be added. Named arguments (via methods) are much easier to manage than positional ones for this purpose. - It's not "intercessory", as it's defined by the caller. The caller defines that object. It's not some foreign object that comes from some third place. There are still two parties: caller, and receiver. The interface is defined, maintained and comes with the receiver, so that's *also* not a third party in the transaction. In some languages you can define such interfaces inline. In PHP you can't but that's purely a syntactic difference. You know, considering you're a proponent of factories, and so you won't even *look* at those constructors most of the time, it comes off quite hypocritical to say that it's soul-crushingly complicated to express dependencies in a simple interface, when it's warranted.
Sounds like my first project. Go for it!
Sounds like my first project. Go for it!
One of my favorite features of Sublime is the multi-cursor, can storm do that too? 
Sounds like my first project. Go for it!
This is true. I used to work in enterprise Java, using JSP and Servlets. I hated it. PHP is much easier to understand when it comes to web programming. However comparing syntax to syntax, I think that Java is much easier to follow and understand, which is why it is often used in the classroom for beginners. 
Hey guys kind of off topic, but how much do you think you could get before college? I'm learning PHP in my little free time from(had a kid young, had to provide, can't get to school yet) anyways its gonna be a little while before I can go to school so I am putting my faith in PHP.
Java is more verbose than PHP though. It has static typing and return types, and things like generics that PHP simply does not have. The only meaningful difference between Java and PHP syntax is the `$` in front of variables, and the `-&gt;` instead of `.` Once you're used to that, PHP is just a less verbose version of Java. Example: Pair&lt;String, Integer&gt; p1 = new OrderedPair&lt;String, Integer&gt;("Even", 8); 
Looks like it actually drops on July 9th, but still, this is great!
It's been released to be released! ;)
delete? i'm sure just about everyone would fix the function naming inconsistencies
If it's a relatively simple shop, wordpress+woocommerce may be the quickest to get started with (magento apparently has more features than a swiss army knife....) 
You're welcome. It's probably safe, but I'm also probably blind to my own mistakes.
PHP is stateless. This means that the state of your program (variables, objects, etc) are gone when the program ends. Everything is erased and the next time you run your script you start from scratch. You do have different ways to save the state of your program, these includes: sessions, caching, databases, files. Depending on what you need to do, you will save data, serialize objects, or any other relevant information. 
Well said!
Hm, never seen that...
Testing, to me at least, sort of seems like recycling. It's seen as a really good thing and people talk about it's merits all the time, but not many people actually do it as in the short term it's a lot easier to just throw stuff away. That said, I work on tested software. Our coverage isn't great but it's a start and something we're always striving to increase. If we're working on something which can be tested, we're expected to write tests for it. For a personal project of mine, I set a couple of days aside and wrote integration tests for everything I could think of. It was a pain but now I can deploy new features or work on things with confidence that they aren't going to break my app. Some people will tell you that you need to be writing tests for everything, and some will tell you they've never written a test and it's a waste of time. Both of these are fair enough I think - if you're writing something extremely familiar, do you really need to spend your time writing less code and more tests? And on the flip side are you 100% sure the feature you're working on isn't going to break something which might go undetected?
Any word on how stable this release is? I understand this is purely a beta, but how close to production ready are we at the moment?
Eh, come on man, just check the folder /tests on any bigger open source project. We write tests. That said, if you start reading the tests people write, you'll notice some projects have fake tests designed only to maintain the appearance of having a test suite. They may be mocking the thing being tested, or testing hilarious stuff like "hey is new Foo()... an instance of Foo?" either because they don't really give a damn, or because the nature of the component may be hard or impossible to fully automate or *unit* test properly (UI components, third party service integration components, etc.). Even if you can't give a damn about unit testing your library, fake unit tests are a necessity of modern day FOSS development, as an effective tactic preventing unit test zealot wrath. See, zealots want you to have tests, but they're too lazy to read the tests, so having any tests at all is sufficient to shut them up. It's kind of like using garlic against vampires. Not as good as holy water or a stake to the heart, but good enough in most cases. One of those days someone will write a self-hosted fake unit test generator for this purpose. Just click, and you now have a bunch of useless fake unit tests. The [SCIgen](http://pdos.csail.mit.edu/scigen/) of unit testing.
There is some good advice in /r/Magento/comments/3cg8yo/supee6285_released_please_update_your_systems_7715/ about applying this patch properly.
Is there an upgrade path from this to the final release? I see ondrej has a php 7 ppa. I have a live project I'm interested in running this instead of HHVM but only if there's an upgrade path through apt-get.
I personally wouldn't use 7.0.0 in production anyways regardless of beta status, except for personal projects. But that's from a history of less-than-stellar test coverage. It would be wise to download the betas and start testing locally now though, so you can both spot BC/upgrade issues and potentially report any bugs in PHP itself before the final release. Everyone wins!
&gt; It depends on what you're doing. At my company probably 99% of resource spending is database and storage servers, so saving 30% on 1% of your spending is not that big a deal. Ah yes: "PHP performance doesn't matter, cause the bottleneck is the database, man!" That's a strong meme, and it usually comes from people who have never really profiled their app. While it's theoretically possible to spend 99% of your resources on a database, this either means the database is used incompetently, or the application is very atypical. And atypical cases don't matter for overall adoption. If the community as a whole moves to PHP7 quickly, the laggards will have no choice but to follow suit as their Composer packages for PHP 5 get EOLed. I'll just remind you that PHP7's performance gains of 30%-50% have been derived by testing real PHP apps (WordPress, Drupal, etc.) that *use a database*.
Now I will be compulsively checking everything in my vendor folders just to see if this is true. Thanks...
So this means it's feature-complete, right? All the RFCs are implemented?
I'm not saying the DB is always the bottleneck either... In our case we only have 4 servers which are used to run PHP scripts and they're not even used at 100% capacity, while we have a dozen database servers (which are also the most expensive ones since they each have 96GB of RAM and only SSD storage) which are pretty much constantly on their knees, and our biggest monthly fees are AWS and a video generation/compression service. So yeah, in our specific case PHP is probably not what's costing us the most money, but as you may have guessed we're not exactly running a Wordpress site either ;-) 
Hahaha, yeah that sums it up quite well ;-)
Are... are you trying to make my point for me, or you're simply unaware of the point I'm making? Anyway, I do enjoy the use of numbers in this thread. Everything is either 1% or 99%. Just bunch of engineers sharing hard numbers is all. Definitely not pulling this stuff from our butts. 
I think it is more often than not that database (or just I/O) is the most time consuming part of any application. For example I work in an application where serving a page from a query may take 150 ms, whereas php is only taking 30ms in total to process the request. What would you optimize first? The database response time is one order of magnitude bigger than what is done in PHP.
You guys are getting underpaid. PM me if you are willing to move out of NYC and get paid more.
You can use the EntityManager getReference method to get a reference to an entity without having to fetch it from the DB. http://doctrine-orm.readthedocs.org/en/latest/reference/advanced-configuration.html#reference-proxies
Lol, you don't know his use case.
Thank you!
OK - you're possibly a bit of an outlier by having that number be as precisely measured as it is :) I usually see people measuring query stuff via microtime() calls.
build your own packages: https://github.com/jordansissel/fpm
You can force https with htaccess or you could do something like... if($_SERVER["HTTPS"] != "on") { header("Location: https://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]); exit(); } with php.
Most companies are more about stability than performance. My supervisor is fully willing to spend more money on servers because he's afraid of adopting new technologies. We have a new MariaDB cluster set up that we're migrating to (our two MySQL instances are currently on 5.0 and 5.1) which he fully believes will cause us to lose all our data. So yes, I too can't wait till my company lets me use PHP 7 10 years from now.
there is /r/programming and php channel on freenode. Stackoverflow obviously too.
I write tests because otherwise my boss won't let me deploy the apps I write. Seriously, it is useful though. Even if you only find a bug in 1 out of 100 tests, finding and fixing a bug is always worth it.
1) PHP has Excel Parsing Librarys, go and find them 2) Use a tool to manage your database like MySQL Workbench 3) Read up on table conventions for designing your database 4) Read up on ActiveRecord libraries for PHP, my personal fav atm is Eloquent 5) Learn how to use composer 6) Slap it all together 7) ... most important step... write unit tests for everything you can think of 
If I saw that kind of code at work I would kill everybody who showed up in the git history for that file, except for one guy I choose to spread the word of what happens when you do that. 
Did I do it right? &lt;?php $phpVersion = 6; echo 6 === $phpVersion ? "Next step !" : "No !";
Finally a [performance improvement](http://i.imgur.com/oGa2Cuk.png) release. (trolling, but I'm using phpStorm for years and it get slower and slower with time...)
Is Java 6 still needed? I only have that installed for PhpStorm.. 
On MacOSX 10.10+ you may use our build with custom JDK: https://www.jetbrains.com/phpstorm/download/download_thanks.jsp?os=ws-jdk18 For this build you don't need Java 6.
Sometimes they're actual unit tests, sometimes they're integration tests, sometimes they're acceptance tests. I don't separate them into different types, because often times the distinction between them is too fuzzy to justify it. At the end of the day, I just want to know that A still outputs B when I refactor, so I write tests to cover that. If the output is the return statement of a function, great. If it's the final return statement of a series of functions or object calls, great. If it's what I see in my browser, great. If it's what goes into the DB, great. Well, great until I'm dragging too much in to test it quickly - but only when my tests start taking longer than they should do I start looking at pulling heavy functional/acceptance tests apart into faster unit tests. Also, I don't write tests first. I design the API first to make sure it's not bat fuck insane, THEN I write tests for it. API comes first though - I'll sacrifice fully decoupled testability for a clean, easy-to-use API. When I do write unit tests, I also test only public methods unless for whatever reason I have a protected method that's heavily used by a bunch of subclasses and want to make sure it does what it's supposed to. What I don't do is write the kinds of tests that PHPSpec was meant to cover - the kind that test the messaging structure of your app (e.g. B gets called by A). I don't see the purpose of that - that's implementation detail and I don't want to test that. The output of A shouldn't depend on whether B gets called or C gets called. If I should choose to refactor my application to use C instead of B, it shouldn't break my test.... But I've not practiced that kind of testing that much, so I'm probably applying that concept incorrectly. For the most part, I just test output. 90% of my tests are `$this-&gt;assertSame/Equals($actual, $expected);`. The other 10% are testing the right exceptions get called.
I'm definitely going to use that. How could I miss that ! Thank you !
Every time a test fails after writing a new patch I thank my past self for writing these tests, boring and time consuming as it may have been.
Yeah not necessarily. If it were more backward-compatible with older versions, then adoption would be relatively fast. However, recent versions of PHP keep deprecating and breaking old stuff, so I predict that adoption could end up being painfully slow. Most people aren't going to re-write their entire application to save a bit on server costs (which are cheap and getting cheaper by the minute).
I put together a few PHP challenges that might be of interest: https://github.com/wearebase/base-php-challenges
If you already know an overview of the changes in PHP 7 (eg if, like me, you've been following the RFCs) then this is a great summary. Making it interactive help you remember too.
I just updated from 8 to this bundle. I'm seeing a performance difference right away.
would be amazing if it updated the link to the php module in apache. You wouldnt happen to have some magic way to do that would you? (crosses fingers)
I prefere the one window per project approach. Makes everything so much more clearer.
Can't fix dumb managers ;(
so you're in a business of storing and presenting data instead of processing that data?
That should be a huge indicator that there is no headroom for you at this company. I would have a frank discussion with your Manager about the career progression for you there and plan accordingly (start looking for other work).
I used to think that way too, until I had to hire and manage developers. We're not all interchangeable. I've had people work for me who were barely worth $50k/year and people who at $100k were seriously underpaid. Only a small amount of that difference is due to knowledge or even skill (defined as ability to write correct, readable code). I'd say to an employer a large part of your value comes from * ability to communicate clearly * ability to deliver, on time * ability to deliver fast, relative to other programmers 
Are you /u/idiot-with-opinion'? 
Just FYI: It is released and available for download: https://downloads.php.net/~ab/ Go get it! EDIT: Windows binaries aren't available yet.
As a former netbeans user, I used to think I needed that feature as well, but after giving phpstorm a proper try, I fell in love with it. I don't really need to have that many projects open at the same time and when I do, having them open in different windows is actually pretty intuitive after a while.
Please vote for https://youtrack.jetbrains.com/issue/WI-15187
That is good to know, thanks for your feedback! I'll have to give it a try again. Our dev environment is setup in a way that I need to have multiple projects on the go, so being able to switch between them easily is important.
I was recently reminded that some clients still use ftp and no version control and not only are totally fine with you editing live files on their servers but actually seem to have taken great pains to prevent you from working any other way.
I meant that I am not missing that feature
half of the customers I work for a still on 5.3 "because this is what's on centOS 6"...
I HAVE TO UPDATE MY DOCK SHORTCUT. IT TAKES LIKE 10 SECONDS OK. No more seriously I'm usually always riding the latest EAP so there isn't much in the 9 release that I don't already have, so I prefer to wait for the next EAP when there are actual changes.
You can also setup multiple roots in the "directories" setting.
Here are some links to help you find projects: - http://up-for-grabs.net/ - http://www.codetriage.com/ - http://www.lookingforpullrequests.com/project/ - https://openhatch.org/search/ - https://help.github.com/articles/where-can-i-find-open-source-projects-to-work-on/ 
I would fix the terrible API.... removing trash such as mktime() time() Also fixing dumb argument ordering... strpos($stack, $needle, $offset) array_search($needle, $stack, $strict)
Same. Unfortunately, getting new software approved is a major headache and likely won't happen here (one of the top 10 largest companies in the US). My only options are maintaining the existing software stack. Even software upgrades between major versions (such as this one for PHP) will require a lot of effort to get approved, which is why I'd like to start earlier rather than later.
&gt; earlier rather than ahhh damn that sucks.... ;(
If I'm writing something I intend to release as OSS then I write tests so that people using my software can have confidence that it works. I didn't always practice this so some of my older code is still without tests. Prototyping applications I generally skip testing on until I know I'm in the project for the long haul. As an aside, you should **always** keep testing in mind. As long as the code you're writing is easily testable then you'll have a much easier time down the line.
Still no new icon? The current one looks so out of place on Yosemite.
500-1400% cpu usage while indexing, brutal. And very sluggish afterwords.
High cpu load on indexing is ok because we're trying to finish it asap. It doesn't make sense to limit it to one core and let you wait 5-10x times longer. The sluggishness afterwords is a real issue. Do you use version with custom JDK for Yosemite?
Your code is just as bad: 1. You use global variables, you should wrap it in a class or a function. 2. Where is your license boilerplate. 3. There's no PHPDoc. 4. No unit tests. 5. You should put it on GitHub and add composer.json, Reddit is not a code repository. **EDIT:** I just tried your code and it says "Fatal Error: class ValidatorFactory not defined". It's broken.
That was with the bundled one. I'm now using the normal version and it seems to be working better. I know I had similar problems when I played around with the EAP's a few months ago
Please vote for https://youtrack.jetbrains.com/issue/IDEA-138687
Seems to work with Java 8. Although, they have version with a custom version of Java that includes patches with issues with the IDE. I'd use that (for Yosemite and beyond).
A few of them are * https://github.com/auraphp * https://github.com/distillphp * https://github.com/hoaproject * https://github.com/radarphp * https://github.com/slimphp * https://github.com/sparkphp * https://github.com/thephpleague Hope that helps!
They changed the splash screen ...
Blocking with something like iptables won't do much good as you're still going to saturate your connection. Drop the box from the external network and let you CDN act as a DMZ.
To be fair, most web devs probably don't participate in the greater PHP community in anyway. They just go to work, write code 9-5 the same way they've been writing it most of their career, and then go home and think about other things.
Nice. So you don't have Java 6 installed? I cleaned up my system(uninstalled) from Java(6 and 8) and trying the bundled version now.
Actually this is very useful if you are running a local Vagrant, you _can_ run it in production, without literally running it on production. My Vagrant boxes mimic production settings, so by using the remote interpreters and running PHPUnit/Behat/PhantomJS on them, it is effectively like running it on the production server. That way you aren't using anything installed on your machine to test, so you're leveraging the same exact interpreter from the same OS as the server.
_Thats_ what keeps you on Netbeans? Wow.
$99, less than a day of work, no big deal. It is totally worth it.
Wow what? Is that before massive tax deductions or something? What does 50k mean net monthly? I mean, overhere(holland) i make 40k euro a year as a senior(10+y), which means about 2.3k euro a month net after all deductions. And this is way above average.. 
Yeah, it's before taxes. Honestly, SR PHP developers in the US make upwards of six figures.
Very simple but makes all the difference. Thanks.
Dear JetBrains: stop using the "copy/paste" flash app on your license-generation page. Some of us don't have Flash, yo. Using "document.getElementById('pre2343').innerText" to get my license key is kind of annoying. Just let me copy the dang ol' text!
Create one project and then add multiple directories to it. Settings &gt; Project &gt; Directories
it's not only "call and update the db". It's also fetch the data and parse it first.
Whilst his caution is probably unneeded, it's borne of experience seeing things fuck up in front of your eyes despite all preparations. 
I use Sublime Text 3, a few plugins and Gulp for my frontend development. Getting into the backend - how worthwhile is this once I'm more full stack?
&gt;pubic interface Freudian slip? 😆
I wish PHPStorm had the code scroller sidebar thing that sublime has, I miss that.
I use `php -S` when I test locally, so I haven't tried futzing with apache. Others may know better, but I'd probably link to the new module manually for now. :/
I just used this https://github.com/conradkleinespel/sphp-osx works perfectly. it makes a symlink at /usr/local/lib/libphp5.so and links whatever active version you have to that.
/me nods Perhaps I should have written "It doesn't say you can't embed a CMS inside it, so it's OK." The point was to say that merely because X is not forbidden, does not mean X is therefore permitted. One then begins arguing what the "spirit" of the rule is, and down the rabbit hole we go.
could an experienced Vim and PhpStorm user explain to me (a veteran Vim user) what am I missing out on by not using PhpStorm? (disclaimer: nothing will ever change my mind, you'd have to pry Vim from my cold dead hands, but i'm still genuinely interested in the benefits an IDE like PhpStorm)
Sadly, flash has the only 100% reliable cross-platform clipboard API out there. There are HTML5 alternatives, but none with the wide compatibility range as flash :(
What is the reasoning for needing this? It sounds like a better design can solve your problem without some sort of runtime generation of inheritance.
While I'd happily engage in a generic rant about ORM, I think the variables are too many to draw general conclusions. The concept of mapping a table row to an object (or to a container of some other kind, like a hashmap) is fairly harmless on its own. I don't think it's inherently limiting. It becomes limiting when the ORM starts to assume too much and starts adding concerns to the core mapping logic, which are best done separately at another layer of the app. For example, Doctrine and other ORMs are big on caching. They keep adding layers of caching, because it makes them look good in benchmarks. The problem is this cache is not synchronized with the database's MVCC, so the guarantees provided by ACID now fail at subtle and hard to detect and debug ways. This is not advertised, and because ORM is mostly used by people who don't want to touch SQL with a 20 foot pole, it's not widely understood as a problem. As for whether ORM is for people who don't know SQL, I think there are two ways to approach it: 1. Focus on object graph: use the database as a dumb persistence backend, and give up the guarantees and query power provided by SQL. You're essentially persisting an object graph. 2. Focus on SQL relations: map the database closely and expose powerful SQL features; requires good knowledge about transaction mechanics and so on by ORM users. I think either one of those approaches is valid. Apple's Core Data is the first approach. And a lean Data Mapper implementation + query generator is the second. Both have their pros and cons. It gets worse when you try to have it both ways, though. Which is where Doctrine and related solutions like Hibernate lie. The result is complexity and plenty of edge cases with ill-defined behavior. But as I said I'll avoid the generic rant.
&gt; This is probably why Eloquent is currently the most popular ORM for PHP. &amp;#3232;_&amp;#3232; Packagist Install stats: Doctrine/ORM: 7,506,896 Laravel/Framework: 5,253,927 I use and enjoy both Laravel (with Eloquent) and Doctrine. But throwing out statements like that is totally fanboytastic.
Yes, as much as possible. Unit tests and then browser/functional tests on top. I'm a PHP dev, so all tests go through PHPUnit. Browser tests use Selenium or Spiderling/Phantom. Some employers I've worked with are not willing to set aside the time necessary. It's harder to do it if you're a freelancer, since making a case for testing for smaller employers and/or time-limited projects can be tricky. If you're prototyping, go easy on the tests, since you don't want to have to re-write if a UI or workflow changes. Bulk up your tests when your app starts to take shape. Tip: write your tests so they will parallelise as much as possible. Big browser test suites can take hours to run, and if they won't parallelise, getting a green build cannot be sped up by throwing hardware at it. (One of the big sites - something like LinkedIn, I forget which - reportedly had a set of functional tests that took ten hours to run!). --- Do you do any PHP? [Here's some unit/browser tests](https://github.com/halfer/awooga-app/tree/master/test) for a F/OSS app I wrote. 
For some reason I thought he said remote debug.
what the fuck?
lol, did you noticed to whom he was replying to?
Instead of having a single class take care of everything, why not have a set of individual classes each with a single responsibility?
Did you try like http://superuser.com/a/623596 ?
This is a good suggestion, but I don't think it's applicable in my scenario. The base class has one-to-many relationships with many kinds of entities, and therefore needs instant access to them to perform different things. It is in the scope of responsibility of the base class to do these things, it just happens to apply these entities to produce the result.
You say you want to decouple your software from your database engine and yet you complain that the orm won't let you do things that are specific to your database engine.
Achieve it with composition. Store the entities as attributes, and design an interface for the entities that is common.
Guys any one of you know how can I have code completions like so: &gt;i have selected variable i.e. $variable When i select it i want to become &gt; $nameToBeset = isset($variable) ? $variable : null; How I can achieve this???
Absolutely everything. Just go look at the feature list. Integration, code help, code formatting, code navigation, etc. Vim is a text editor. PhpStorm is an IDE. Yes, you can add functionality to Vim but you'll never get close to the save level of functionality. It's also personal. It's also having more options. My workflow will change after I find a new feature of PhpStorm. Alot of "I didn't know I was missing that." when you really start to dig into it. Try the EAP. It's fully featured with a 30 day license. And go into it with a "how can I make this work for me" attitude instead of "why isn't this vim". I do know they have a keybinding preset for Vim users. And a few plugins.
Hello, each step contains a link to its RFC. Maybe this link is not enough visible ? Or the description is not sufficient ? The main objective of this site, is to show quickly to developers all the new change/feature implemented in PHP7. If you have suggestions to improve it, I will take them :)
You missed some basic rules: 1. never benchmark with unit tests. :) 2. never benchmark with a single run - has no sense, the process scheduling can easily kick in, do a lot of cycles that are reasonable to wait for, check for multiple 10s: 10, 100, 1k, 10k, ... Second thing: the HTTP implementation didn't work for me, it not just returned the output but echo-ed it to stdout. :) So I did my own version, with some research on how to do fire and forget HTTP calls. # time php benchudp.php 10000 real 0m0.475s user 0m0.163s sys 0m0.300s # time php benchhttp.php 10000 real 0m0.907s user 0m0.257s sys 0m0.637s # time php benchsyslog.php 10000 real 0m0.208s user 0m0.097s sys 0m0.070s # cat benchhttp.php &lt;?php $host = 'myexistingsecretdomain.tld'; $port = 80; $data = ["hello" =&gt; "world"]; $json = json_encode($data); $request = "POST / HTTP/1.1\r\n"; $request .= "Host: $host\r\n"; $request .= "Content-Type: application/json\r\n"; $request .= "Content-Length: " . strlen($json) . "\r\n"; $request .= "Connection: Close\r\n\r\n"; $request .= $json; for ($i = $argv[1]; $i &gt; 0; --$i) { $fp = fsockopen($host, $port, $errno, $errstr, 30); fwrite($fp, $request); fclose($fp); } # cat benchudp.php &lt;?php $host = 'myexistingsecretdomain.tld'; $port = 80; $data = ["hello" =&gt; "world"]; $json = json_encode($data); $len = strlen($json); set_error_handler(function() {}); for ($i = $argv[1]; $i &gt; 0; --$i) { $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP); socket_sendto($socket, $json, $len, 0, $host, $port); socket_close($socket); } restore_error_handler(); # cat benchsyslog.php &lt;?php for ($i = $argv[1]; $i &gt; 0; --$i) { openlog("forward-to-x-api", LOG_NDELAY, LOG_LOCAL0); syslog(LOG_DEBUG, '{"hello":"world"}'); closelog(); } So it seems like UDP is twice as fast, at least with my setup and the given codes. If you really need "non-blocking requests", then use syslog (server: https://syslog-ng.org/ or http://www.rsyslog.com/ + https://secure.php.net/manual/en/function.syslog.php), it communicates on local socket and it can forward the message nearly anywhere that you configure it to do. UPDATE: added syslog test code and results. UPDATE2: modified syslog test to open and close in the loop, so it's more similar to the other tests, updated results.
Live users always make the best beta testers
Sounds like you're asking about Live Templates.
There is a class, 'Issue', which contains the following: 1) assignees (whom it is assigned to, a list of user IDs) 2) attachments (not the files themselves, just general information about them, like name and size) 3) comments (similar to Reddit comments, with a text, place in comment hierarchy, but no voting system) Issue itself contains a lot of information (e.g. category, progress, description). There is a table which contains the relationships between users and issues (who is assigned to which issue), a table for attachments, and a table for comments. When instantiating an issue, the information of the issue, its assignees, the attachments and the comments are all fetched via separate queries. In the app, there are various ways of managing the issues (i.e. viewing them). For example, an assignee can view just brief details about an issue, i.e. the Issue's category, progress, etc, but no attachments or comments. When the issue is clicked, a GET request is sent with the corresponding Issue's ID. The fetched Issue object is encapsulated with all the aforementioned things (assignees, attachments, comments). It is first checked whether the user is really assigned to the issue (for security purposes). Then, the core parts of the Issue are presented. Assignees are encapsulated to the Issue, and they are used. But the problem is that attachments and comments are fetched, but are left unusued. There is also a way to view comments in a hierarchical way with very brief details about the Issue. This last one doesn't use attachments at all. There are more properties of an Issue than the ones I listed here (I simplified), and the number of combinations is too high to create a class for each necessary combination.
The description is not explicit enough. The goal of this step is to change the value of the variable $phpversion The steps validation are done with php-ast (https://github.com/nikic/php-ast)
Doesn't sound stupid at all. And its good that there's a plugin for it too!
whoops
To say it excels is probably not the best question to ask. The better question to ask is "where is it the right tool for the job?" The answer is it depends on context. PHP affords a new developer a very welcoming community with a mature set of features, libraries, and frameworks. Just like *all* languages you can write shit code if you're not well versed in CS foundations. Like *all* languages it has quirks and annoyances that unfortunately due to backwards compatibility and history are still present. It's not going to be the best tool if you want to build a desktop application. It's also not going to be the best tool if you want to create long running processes. Or if you need parallel processing. However, if you want a language that integrates easily and well into web servers for delivering dynamic pages or if you want to create command line tools then PHP is an excellent tool. It also maintains quite the broad integration library for various data stores. For what it does well it can be highly performant and when combined with other technologies such as caching and load balancing it can become extremely performant. In the edge cases using tools such as Facebook's compiler you can gain even further performance at the cost of some language flexibility. I see this all the time all over the place. Developers who rave that some language or tech is the best thing since sliced bread. In reality all technologies have their strengths and weaknesses and understanding those will help you decide if it will be the right tool for you. 
Just the default ones, `pubf` and `prif` are the 2 I use most..
Ok. But other people don't. Hence all the people requesting it.
1. Every page request has its own state, so no chance for slowly developing subtly wrong and hard to debug application states (persistent state excluded) and memory leaks. Also no application-wide crashes - every page crashes on its own, which limits the effect of a catastrophic bug severely. 2. Fast feedback during development - refresh the browser and see what happens (matches also how you do client-side JS). 3. Glue language - connects to everything through a bunch of extensions and the dynamic typing system means it's easy to grab data from one place, reformat it and throw it another place with least amount of effort. 4. It has an object type system which, in my humble opinion surpasses Python, Ruby and JS for mid-size apps (for small apps it doesn't matter; for medium size apps it starts to matter seriously; and for big apps it becomes crucial, but at this point you'd use Java, C#, etc. for the services).^1 5. It's f***ing everywhere. ^1 For JS a way to solve this is using TypeScript, which changes the entire experience of doing JS code (for the better).
What you want are "Modules", try it.
PHP does by no means excel above other languages. Besides its myriads of disadavantages I do see these advantages: - It's meant to live only for a request. This makes it really hard to create a memory leak or think about thread safety. - It's interpreted. You can see effects instantly. - Developers are available and cheap. And that's it. And yes those advantages can also be perceived as short comings. It's just a matter of perspective.
I'm sorry? I was basing it off of the number of mentions I see on this subreddit, I wasn't trying to be scientific. Leave it to reddit to be anal about something that wasn't even the point of my post. 
this is great. thank you very much!
this all makes sense. Thanks for taking the time to help me out :)
I feel very bad for you. Honestly. As a follow up, can you please show me what you have contributed to the PHP ecosystem?
No I don't. But I'm realising now that it's a very bad thing that I don't, and I'm making steps to change that. I've already started writing unit and integration tests in my side projects. Unfortunately, convincing managment and the other webdev I work with that we should wrote tests for new projects is extremely difficult.
Try the version with SDK 1.8 bundled. It fixes the fonthandeling. Its just below the download button: https://www.jetbrains.com/phpstorm/download/ 
Oh nice then, hope you can do it ;)
This was extremely helpful. Thank you. 
Another alternative for simple one-column stuff would be [DBAL types](http://doctrine-dbal.readthedocs.org/en/latest/reference/types.html). 
One thing I've noticed is that the Oracle JDK doesn't seem to be color-managed (i.e.: on high-gamut screens, the colors aren't remapped to their proper displayed values). I realize that Apple and Java are now Mortal Enemies thanks to Android, but if there's any way as "a big Java ISV" to put pressure on Oracle [is anyone big enough to put pressure on Oracle?!], hopefully this can all be fixed.
&gt; you just don't want to buy a license. ;) Tbh, I have a license (and an OSS license) ;-) I'm really just interested in "what's next"
&gt; switch to a different query builder for queries that don't need to return an entity If you're looking for a standalone query builder, you may wish to consider [Aura.SqlQuery](https://github.com/auraphp/Aura.SqlQuery). While it does not currently support INSERT...SELECT or UPDATE...JOIN, it is my guess that it'd be easier to add those features in SqlQuery than in other libraries. (I am the lead on Aura so I am biased in its favor.)
Mostly a modern UI that has functionality discoverable by experimentation, not reams of documentation.
Of course you would. But of course, you're the guy who likes calling functions with boolean parameters that you have no choice but to use as they are like this: $stuffDoer-&gt;doStuff(true, false, true, true, true); And when confronted with an interface like that, your histrionics about "killing everyone in the git history" won't end up sounding quite as reasonable as you thought. Perhaps submitting an upstream PR or issue and falling back on some cheeky readability tweaks like the one I suggested while you wait might be a better alternative? Or at least wiping the froth from the corners of your mouth.
I haven't tried the final release yet, but the EAP seemed to not work with CLI debugging on Mac 10.10 which is a real pain. It sends the correct paths when debugging a web app, but it sends IDE host paths when you try to debug CLI.
Sorry to be amiss - I have been pouring over everything I can find. I have a private key, and in the Java code I saw, the function for the signature was passed a value called 256hashwithRSA, which confused me. After about an hour, I think I can identify the function call I'm looking for - openssl_private_key. Will post back results
Just crowd-sourcing our QA...
yes, the CEO in my company makes some really weird calls about business, and she is right most of the time
&gt; But the problem is that attachments and comments are fetched, but are left unusued. It sounds like you're trying to make an ORM. You may want to look at how Doctrine 2 handles this same set of problems, using lazy proxies. As soon as a public method is called on the object, it fetches the underlying data. $firstAssignee = $issue-&gt;getAssignees()[0]; // At this point $firstAssignee is mostly empty, it only has a primary key ID $firstAssignee-&gt;getLastName(); // Triggers and waits for the loading of data for that assignee. $firstAssignee-&gt;getFirstName(); // Already loaded, immediately returns the first-name data 
1. ORM is always a crutch. 2. Every ORM will be a limitation at some point. 3. Queries and query builders are inherently related to databases, so you cannot use a query builder to decouple software from database. Doctrine is one of the best ORM tools that exists for PHP. You won't really find a better one. In my opinion, what you are missing is simple to say and extremely hard to practice: think in terms of data structures, not databases. A lot of really smart people (Fowler, Martin, etc) have been talking about this issue for years. The conclusion is that you have to separate entities from storage. A good method for doing so is using the [repository pattern](http://www.sitepoint.com/repository-design-pattern-demystified/). The thing I find most attractive about using repositories is that you can use ORM when it works and use something else when it doesn't. In fact, your repositories can be backed by things besides a database, such as Redis or DAV or memory.
I was just looking over PHPixie/Project and noticed that web/index.php points to vendor directory in the root that doesn't exists...
You may also give the search for language:php a shot on githubs searchbar. 620k+ projects though. Sort by stars maybe. 
No, *they* should be more careful in their interactions with the community. Everyone wants to put all these rules and restrictions on what community leaders say and do, but *nobody* wants to say the same thing to the community members. :) ... It's a two way street. I absolutely gurantee you, community leaders take way more crap than they dish out. :) I would kindly accept any constructive criticism. However, I don't consider dismissing something as a "toy" as constructive criticism, especially when said "toy" is used in a load of successful applications.
Hey, that's awesome! Congrats on the release!
The vendor directory gets created by running composer
Today I learned that my license worked with all versions released during the time my license ends. I always thought when a new version number releases I couldn't upgrade. Since I've always been used to licenses that only applied to the version I purchased and any minor/bug fixes makes this is pretty awesome since I can just upgrade to the next major version :D
CodeGlance.
Counter what criticism? There was none. There was an insult. Anyways, I have nothing else to add here. Clearly not a place interested in actual constructive discussion. It is Reddit after all :) ... Big talk, no shipping.
This version breaks my shortcuts :( In french keyboards above the tab keys there's a "²" (don't ask me why it's there) and usually I use ctrl + ² to open the console. If I set it via settings it works, but everytime I restart PHPStorm 9 I have an error message that says "Cannot parse first-keystroke 'control null' and it removes it :(
The CakePHP 3 ORM does support those things, including UPDATE JOIN (via multi update), INSERT SELECT, temporary tables and subqueries are pretty much a first class citizen. Here is the link to the standalone library, if you are interested https://github.com/cakephp/orm and if you are only interested in the kickass query builder, take a look at the standalone database abstraction layer https://github.com/cakephp/database
But realistically, anyone using phpstorm has an html5 capable browser. 
i am not messing, seriously I was not getting because I am not a native English speaker..
It's like managers hold you back in your development learning, by not allowing you to use new tech in your job. We're the same here. 
Well, [SQL Server supports it](https://msdn.microsoft.com/en-us/library/ms177523%28v=sql.120%29.aspx#OtherTables) and [PostgreSQL supports it](http://stackoverflow.com/a/7869611)
That is Update From, which is quite different from update join :)
Spotify also.
Sorry, I get that it's not nice to hear someone downtalk something you probably worked on very hard, but be real for a minute. Eloquent is great for the most basic scenarios, and that's fine; a lot of simple applications don't need more. But you'll have to realize that it's a bit too magical for more serious scenarios, and is limited in comparison to ORMs like Doctrine.
This whole interaction made me feel dirty. Some thoughts. As a human being to another human being, I do feel bad that you're obviously affected by my negative opinion. I know it sucks to read Bad Things about something you've done. While I do come off as a sarcastic asshole at times, I have respect for people who put work out there that is useful to someone, never mind what I think about the actual work. So it's not my goal to badmouth you or anything. I've said before I admire your energy and enthusiasm about your projects. On the other hand, I wasn't talking to you, but to someone who IMO was misdirected into choosing a quite less mature ORM in place of Doctine. I spoke with the idea of helping that person, not with the idea of insulting you. You're always scanning this subreddit for opinions on Laravel and its components, and take everything as if we direct it personally at you, so where is the balance here? We should be free to share our flawed, subjective opinions, because not every time we open our mouths it can be a PhD dissertation about why we don't like Eloquent for serious work. I and others have already spoken at length about the problems Eloquent has in other threads (magical interface, active record, god class, etc.). And you've made it clear that you don't see the problem. Regarding "what I've done", I'm obviously here anonymously, so I can't start listing work under my name. While I don't think that's a valid argument about whether I'm allowed to *speak*, I see your point. On the other hand, again, Reddit's community model allows anonymity so if you choose to come here as Taylor Otwell, that's fine, and if I choose to come here as Zen Idiot With Tanks, that's also fine, and it's not appropriate to ask ask me to change this only to prove my "worth" to you.
Ok so you are using vim. I used vim before phpstorm. I find that phpstorm is more capable and time efficient.
This wasn't negative feedback though, this was stating an opinion as fact and phrasing it in a way that's pretty disrespectful, not only to the creator but also the people that use it. You're basically saying that any project using Eloquent is just some ridiculously simple thing that doesn't really matter. The fact is that the vast majority of projects are probably fine with Eloquent and dismissing something with a flippant comment like that doesn't help anyone. 
It's obviously not 100% reliable because some people (like me and /u/postmodest) have it disabled/not installed
I'm sorry, but if you're not familiar with Doctrine, on what basis are you comparing it to your tool of choice? For starters, Eloquent is not a data mapper implementation, but an active record. That is already sufficient by itself to disregard any comparison, because it would transcend in a broader comparison between design patterns, and the "data mapper vs active record" is a pretty big religion war ongoing for years. Having said that, please, at least give both stuff a try before throwing random "it's more this, it's more that"... They're just tools you know, don't get too fond with any hammer.
It's more a matter of mindset and culture. You'll see all the actual benefits in the long run, and once you get used to the confidence that tests give you, you'll find very hard to do without; plus you'd feel guilty and dirty, like when your codebase is not really complete, or it has some smells you know about but you're too lazy to fix them.
For anyone who didn't pick this up, as a reminder from the composer [FAQ, Should I commit the dependencies in my vendor directory?](https://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md)
If you haven't started coding yet what you've basically described is how erlang's supervision works out of the box. So it might be worth checking out this as a language choice. Or my personal preference: elixir which is a language which runs on the erlang VM.
That pretty much describes 90% of the PHP candidates I see. Number of tests I've seen from people with "OO experience" because they use a framework, but then write all of their code in the controller other than the Active Record models to manage the data in the database. **edit** recruitment tests, not unit tests
Is there a way to debug code between projects? With NB we can. I have a PS license, and I like a lot its SF2 plugin, it's awesome, but there are a lot of small things that made me more confident with NB. Well, I try again, now version 9, and there are a lot of small things that I like a lot. I want an IDE that mix the good things of booth :) Yes, I know, I'm not so hipster ;-)
Check your systems date+time. Install NTP.
Could you please check that Help-&gt;Find Action-&gt;type Registry-&gt;force.default.lcd.rendering.settings is enabled using bundled JDK? 
Feel free to file an issue at https://youtrack.jetbrains.com/issues/WI . Very likely it's a configuration issue because I haven't seen any similar reports.
Why is it "too magical for more serious scenarios"? What does that actually mean? Can you give an actual example with context and explain why the "magic" doesn't work because of how "serious" the example is?
Thanks! I'll be adding documentation to every method after I finish writing the tutorial. I skipped it for now since my classes and architecture used to change a lot as time went on (I actually made a joke that in the span of writing the new ORM I probably wrote 3 different ones). PHPixie 2 has docblocks for every method and this will be the case for 3 too. As for personal preference I dont usually write them if I am the only one reading/writing the code.
Don't use PHP for this. Yes, PHP is a whole lot better at long-running processes now, but it's still a language fundamentally designed for short-lived, request-based processing. If the long-running connection accepts individual requests that need to be processed and you are somehow bound to using PHP for them, I would suggest coding that socket layer in something else (I would use Python, but the Erlang suggestion is a good one, or something like Go that has concurrency primitives built into it) and then defer to PHP for the work. Still, if this is a green-field project, I would seriously consider just using a language with these strengths rather than PHP, which is made to serve web requests.
[PHPExcel](https://github.com/PHPOffice/PHPExcel) does CSV and more. I've had good experiences with it.
I found a torrent with an working key generator for IntelliJ and PhpStorm. But it's not fair so i sill use Netbeans.
I've got a couple of daemonization and process management tools on my github (same username) you're welcome to poke around at... but there's a good chance they're the completely wrong tools for the job. My game prototype did a bit of sockets work, but that's designed around single-process usage (and is probably trying to be more clever than it should be around encapsulating the crappyness that is raw socket handling)
Doctrine is great for the majority of situations. If these queries are really, really, really, really, really important, use java and Hibernate.
Yes, use this library! Saves the hassle of writing your own CSV parser. http://pastie.org/10281750 - This was my own CSV parser that I wrote a few years ago and still being used in various projects.
Are you trying to demonstrate your ability to develop a framework of to use a framework? I don't think there's a "gold standard" demo application in any language, including JavaScript. Is this for your portfolio? Something you can show clients as proof of your ability? Or are you just looking or an exercise?
He's a framework author. He's just about to release a new version. I assume he wants a demo app for his docs. 
Inventory systems are a nice change of pace. Add products. Manage stock levels and descriptions. You can even lift an api for external systems to integrate with it. 
Ah. Well, creating some smallish apps of varying purposes wouldn't be so bad either. Demonstrate some flexibility as well as more powerful aspects of the framework, depending upon what those aspects are. 
Yes, ORMs are inherently limiting. Specifically they are limited to only supporting features that are common to every database the ORM supports. Doctrine can only support those features that SQLite supports, regardless of how many awesome features are built into MySQL and PostgreSQL. That's the price you pay for the flexibility of being able to switch to a different database down the road. In other words, Doctrine can't provide support for `UPDATE ... JOIN` queries because SQLite doesn't support them.
Well the purpose is to showcase the components of the framework, not my personal programming skill. So I'm looking for something that covers a lot of things ( like database, templating, APIs, etc) while not really being complex
A event's website featuring multiple halls,speakers, and presentations would be a nice example for a framework.
I get that. An inventory management system is easy to conceptually reason about but sophisticated enough to have the kinds of problems your framework may be able to solve (db interaction, users, acl, blah blah blah). 
Currently have built 3 serious money making applications with Eloquent. ActiveRecord in general powers GitHib, Basecamp, AirBnb, SoundCloud, Shopify, etc.
That's not quantifiable.
I agree that some people do like using Eloquent and Laravel, and I can't comment otherwise because I've never used neither before. But resorting to personal insults to a comment that was not even directed at you? And using your position as an open source project leader to challenge others what little work they have done? Even from an outsider's point of view, I feel that your response to /u/zen-idiot-with-tanks was extremely unprofessional.
My point is, you should probably pick something you can isolate from your real-world experience, and use that as an example case. Easier than contriving something out of thin air.
I hate using Active Record, and generally enjoy config over convention when it comes to my frameworks, so Laravel/eloquent isn't for me... but you're right - these people shouldn't dismiss valid patterns and libraries that use them as toys simply because they don't like using them. There's a lot of religion in programming, and this whole thing is a prime example. 
Well, as you now `new` is a reserved keyword in PHP, also it needs to express "new what?". I don't have a really good explanation for the log names, other than I like class names to transmit the intention of what they are without having to look at their namespace, for example. I think another reason is that in the CakePHP framework, most of the long class names are abstracted away in utility factory methods.
&gt; It isn't compiled to machine codes, it uses JIT to generate machine codes from opcodes dynamicly I think OP means it's not compiled to machine code ahead of time. It's compiled from *opcodes* at runtime. It's a subtle difference, but a significant one.
I honestly don't like PhpStorm because it doesn't separate HTML from PHP like PHPDesigner does, I would maybe start to use it if they added that.
Did these benchmarks have opcache enabled on the PHP 5.x builds? I would have expected a large speed increase between 5.4 and 5.5 when opcache became enabled by default.
the way guzzle does this in that particular implementation is now already obsolete, their 4.x branch uses promises.
I do take it as directed at me though. I wrote every line of Eloquent. If I was at a conference and someone came up to me and said "Man, Eloquent is just a toy"... people would think "Wow, what a douche."... but if you say it online it's all well and good. Makes no sense to me. I have and will continue to have people come up to me and conferences and talk about how ActiveRecord just isn't there thing. I don't care. That's great - I don't care how you program anything. But to say something is a "toy" is a whole different thing.
&gt; It's not even possible to do everything a modern RDBMS is capable of with an ORM, and I'll never understand why people act so shocked and appalled that ORM X is missing feature Y from RDBMS flavor Z (or even just from standard SQL). Because people go into it with the wrong mindset. People think it *is* an alternative to standard SQL. ORM's are best used for rapid development, where you're not super concerned about performance and just want to get something prototyped or roughed out. They're excellent for that. They are not excellent at replacing standard SQL. They're much slower, don't always make the best decisions, etc. It's common practice to go back and replace some of your heavy ORM stuff with regular queries.
I see. Point taken. I think what he meant by "toy" is wasn't the dictionary definition of toy, but rather his personal opinion on the scalability of Eloquent in enterprise applications.. But please use more professional language next time you post. I understand that &gt; As a follow up, can you please show me what you have contributed to the PHP ecosystem? is supposed to show your "Ship-It" mentality and your criticism to the "talk-only" mentality of this subreddit, but really, it's just a huge insult and disrespect to think that every PHP developer should dedicate their time to contributing to PHP. People have jobs and hobbies and it's not exactly their job nor interest to be contributing a lot of work to the PHP ecosystem. You shouldn't be using people's OSS contribution as a criticizing point.
Which PHP library is this? One reason I started using play over php was the use of promises. The PHP I'm used to was bad at threading and handling concurrent data retrievals
Benchmarking PHP 5.4 without apc opcache wouldn't be very serious.
Is there a php version of observables?
This is Guzzle 3. Currently Guzzle is on v6 I believe.
Ask here: http://www.hkvstore.com/phpmaker/support.asp
My strong advice is hire a developer to do the job instead. You may lack the attention to detail necessary to provide a good product with a positive impact.
Mostly working on WordPress, I make ~$150k. My first full time development job was in 2010. EDIT: Forgot to say that I'm also in NYC and our office is in the Financial District. 
How in 2015 do people still do shit like this? How often do people not stomp on each others code? How many people are working on the code? How do you work on two features at once? The mind boggles... It is NOT hard to have a code repo with branches and a simple deploy script. Your manager should be fired. Keep fighting the good fight and frankly start looking for a better place to work. 
Magento released a new patch yesterday called SUPEE 6285 along with a new version of the CE (1.9.2.0). This patch introduces some really annoying bugs though, especially regarding 3rd party modules/extensions. Basically, any third party extension that introduces Adminhtml pages needs a new _isAllowed method in it's controllers that sets up proper access control layers for its functioning. Any person trying to access anything to do with a third party extension that has a user role with anything less than administrator permissions will not be able to access those pages, no matter what permissions they have!! I'll show you how to fix those issues, particularly pertaining to the Ebizmarts Sage Pay suite. [Read more here](http://www.hmp.is.it/fix-magento-patch-supee-6285-access-denied-ebizmarts-sagepay/)
Why compare oranges and apples? Implement a Todo app in minimal MVC PHP set up so people can see Apples to Apples.
If you're exporting a CSV for a client and the client needs to re-import it in a Excel file (for any report reasons)... you should definitely use PHPExcel, that is, as far as I know, the best PHP Excel library.
Feross/standard for js, my css is a mess, can't name stuff
This is great thanks! I'll be sure to check those out.
$15 is good. Anything that you can program to do returns or w/e would work. 
Good point. I noticed a lot of frameworks already have todo apps, so I'll stick with that
So, if my understanding is correct, I should use the token to verify that the user has access to the content. And following that, the query should be issued? Only content already accessible by a user is presented to them by default, so there is a very small chance they would query for something they do not have access to. In that case, this would be a performance boost, but as a scenario it will rarely occur. Regarding the caller being explicit: do you mean for e.g. an Issue to be able to specify that it wants to query attachments and assignees only, and the specific fields from them? I like being explicit to a point (e.g. specifying the attachments and assignees bit), but I'd rather avoid being too explicit if possible. 
then you're missing out, it's not because they can't do EVERYTHING that they are good for NOTHING...
They could have just called it `create()` though :) many reserved keywords have perfectly fine synonyms
You know, I re-read your use case and I think I misunderstood the description initially. I think what you want is implementing the [Decorator](https://en.wikipedia.org/wiki/Decorator_pattern) pattern where each decorator processes any aspects of a given command it can and passes the rest to the next link in the chain ([Chain of Responsibility](https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern)). You still won't be gaining different methods as a result of decorating, as all decorators have the same methods. But you really need just one method: execute + [Command objects](https://www.google.com/search?%7Bgoogle:acceptedSuggestion%7Doq=command+object&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=command+objects&amp;gws_rd=ssl). A Command object encapsulates a method call as an object that you pass to execute($command). I.e. instead of $modules-&gt;doSomething(1, 2, 3) you will have $modules-&gt;execute(new DoSomething(1, 2, 3)); In practice, you can have 2-3 methods depending on their semantics. Say it's typical to have execute() for commands that affect state and query() for commands that read state. If it sounds familiar (SQL), that's because implement the same pattern, but accepting commands as SQL strings. You can use objects instead. There are other ways to do this, but this is the most straightforward. Apologies for not reading more carefully.
Thank you.
Hi, Doctrine core developer here. First of all, Eloquent is an ActiveRecord based ORM, not a fully featured Data Mapper based ORM. It's like comparing apples to oranges after this. Anyway, I'll stick to your point of not using raw queries. Doctrine allows you many different ways to access data using raw queries: * If you're mostly trying to build a different set of objects, then you can use NEW operator, such as "SELECT NEW UserDTO(u.id, u.name) FROM User u" and it would create instances of UserDTO instead of regular User. * If you're trying to retrieve only a subset of information of the object, you can use PARTIAL operator, such as "SELECT PARTIAL u.{id,name} FROM User u" and it would create instances of proxied User instances (any other information not loaded would be fully loaded once you request it) * If you're trying to completely customize the SQL, but map to objects, you can use the raw SQL support with a custom result set mapping. There is an entire documentation page explaining how to do it: http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/native-sql.html Hope I clarified your concern... =)
PHP is really easy to learn. You don't even need to know how to do things the right way to get a webpage up and running. This is PHP's greatest strength. . . and probably why people tend to hate on PHP. Because of all the poorly coded legacy stuff that is everywhere.
Well it sounds like you are describing RabbitMQ. https://www.rabbitmq.com/getstarted.html Possibly with different servers working through a worker queue.
Hi, Doctrine core developer here. Doctrine follows whatever is defined in SQL-92 standards, plus several features from SQL-99 if and only if it is supported across all database drivers we support. This means that features that mostly work can be included, but features that only one driver supports, it will likely never be included. We are considering to work on SQL-99 compliant support as part of Doctrine 3, mainly because nowadays most drivers support the features described there. Right now we're slowly adding it based on demand and our free time. =)
Keep in mind the majority of the situations are developer's fault, not ORM's. I managed to deploy a 12k req/s application using Doctrine ORM without headaches. I feel this is pretty much extreme, agreed, but it helped the team to create the application faster and then handle with specific bottlenecks using ORM features, such as second level cache, result caching and query optimizations.
True, but ORM's like Doctrine are really greedy out of the box. Doctrine can be tuned quite well, and it makes good use of caching. Also they don't always make the most efficient decisions on JOIN's and things like that. I've found it doing weird shit before and had to kick it in the ass. EDIT: Hope I'm not coming off as an ORM hater. I work heavily with Symfony2 and Doctrine2. I'm actually a big fan!
You could look at tcpdf that might do what you need. 
Hi, Doctrine core developer here. I'll answer your individual concerns one by one: * No support for table partitions Table partitioning is supported based on @ORM\Table(options=...) where it actually into consideration specific DB options, such as your PARTITION BY for example. * No support for UPDATE ... JOIN in either ORM or DBAL query builder Through ORM it is not supported, and I completely agree. However, using class table inheritance, it is emulated using multi table update executor if the driver does not support it. As of for association updates, it's up to you to trigger another update as it's out of ORM's scope to do it. You can also manually trigger your query using UPDATE ... JOIN as a specific scenario query using: $connection = $entityManager-&gt;getConnection(); $result = $connection-&gt;executeUpdate('UPDATE ... JOIN query'); * No support for INSERT ... SELECT in DBAL query builder (no insert at all in the ORM query builder) Even though you can do it through connection, think twice about what are you trying to do. In any ORM context, inserting should be controlled through the ORM itself, not at DB level. The key reason is because ORM keeps its internal identity map, allowing the ORM to always give back the same instance when requesting multiple times same object. That's why INSERT is not supported at all in QueryBuilder. * No real support for sub-queries, though that can be hacked together. Care to expose one example where it doesn't work? * No support for temporary tables Same as before through Table options: @ORM\Table(options={"temporary"=true})
There's a way to get raw HTML source code using cURL (http://php.net/manual/en/curl.examples-basic.php). After that, all you need to do is parse it- that is, look for specific spans or divs which encapsulate your data. Check to see if there's API by Google that already does this for you first. This is how I've always done it. There may be a better way, if someone would like to share it.
PHP 7 is 2x faster than 5.6 running Drupal 8, and 3x faster than 5.4 (with APC opcache), according to some benchmarks I've been running on the Raspberry Pi model 2: https://github.com/geerlingguy/drupal-pi/wiki
Why didn't you cache the result for X minutes? Doing 24 requests each page load seems like unnecessary load.
I agree and there was some caching for specific items that had to get cached but bosses wanted to see some things more immediately.
As /u/jaym5s said, look at tcpdf. Its an older library but works well. There is a port of it on composer but I never used that version of it but it appears to work exactly like the older non composer version. There are other PDF libraries on Composer but i never used any of them After pulling the data when you are writing to the pdf loop through the data and count it and after however much data you put into a single row on the pdf go to the next row and restart the count
Same. I definitely prefer 4 spaces anyway.
Glad it's not just me.
I'm a little unclear -- are you trying to count up the number of objects by type or do you want to sum the value of the amount property for each type. So the sum of $obj-&gt;amount where $object-&gt;type == "sell" and then sum of $obj-&gt;amount where $object-&gt;type == "buy"?
I've been doing quite a bit of website crawling at work, so it's certainly possible. Here's my advice : * Avoid resorting to a web crawler. It's a bad idea since it will inevitably break when the website is updated. Make sure you can't get the information from a real API (something that uses XML or JSON and has some kind of documentation so you know it won't change without prior notice), and only use a web crawler if you really have to. * it's certainly fancier to use [Domdocument](http://php.net/manual/en/class.domdocument.php), but usually a good [regular expression](http://php.net/manual/en/function.preg-match.php) will work just fine. * If you just need to get a publicly accessible page, [cURL](http://php.net/manual/en/book.curl.php) will be perfect (you could even use [file_get_contents()](http://php.net/manual/fr/function.file-get-contents.php)). But if you need anything more (authentication, cookies...) use [Guzzle](http://guzzle.readthedocs.org/en/latest/), it will make it much easier.
but you cant do everything an ORM does... that's the whole point, it provides a layer of functionality on top of SQL, it does by no means replace SQL...
How about SQL?
Haha, yeah. I still have some old bad habits. I try to avoid them when I remember. 
yeah exactly . sum of amount where type == sell and sum of amount where type == buy , It should be dynamic and updates every second .
I'm pretty sure it's compiled into the executable or at least included by default in Ubuntu. 
only if you use tabs, if you use spaces like every sane being, then there is no war.
Like what exactly? The actual "object relational mapping" stuff can be done easily with PDO's `FETCH_CLASS` option.
If it's wordpress you can install and activate Wordpress' JSON API plugin which will allow you to use endpoints to capture, alter and create data. Wordpress plugins really should be PHP -- it's not really a plugin if the end-user will need to follow special steps to implement it (e.g. daemonizing your script or scheduling a cron for it). However, if you do want to work with Ruby or Python you can do so without direct DB writes via the above plugin. If you do choose to alter data directly in the DB, I'd become familiar with the DB structure and how the CMS handles postmeta, revisions, etc so you can emulate the wordpress experience -- afterall the CMS loses its value if you compel your end-user to operate outside of it.
&gt; can you please show me what you have contributed to the PHP ecosystem? I like Eloquent but this is a ridiculous comment to make. Just because someone hasn't made their own ORM doesn't mean they are not allowed to criticize others.
So after looking at this damn code until 4am, I can say I am.... closer. I have a privatekey, base 64 encoded. I can pass the sha256WithRSAEncryption through openssl_sign and specifying that argument. The issue is that my private key doesnt have the headers like -----BEGIN etc. The next stage is now upon us!
Ah, just like smoking then ;)
Hopefully no one's life depends on my threaded download function I wrote for an old bandcamp downloading project in PHP a while back. 
Again, he *didn't actually* criticize anything. Criticizing is saying "I think X could be improved in Eloquent". Saying something is a "toy" is just being a dismissive jerk. **Again, if someone walked up to me at a conference and said that exact sentence to my face it would be plainly obvious that they were being a total jerk and were not offering a single ounce of constructive criticism.**
To your horror, you discover that your code is running deep within JP Morgan Chase's financial transactional systems. :p
ORMs are nice for the basic crud. They all have ways to write direct SQL. Pragmatism is an important quality of a developer.
Limitations of ORMs have nothing to do with with queries per second. They are limited in SQL and data interaction expressiveness. Sounds like you handled it well though. Build the basic app stuff fast and then break out of the ORM when needed.
I was using tcpdf then mpdf for years, and then I discovered wkhtmltopdf and it changed my life. If you can exec() then you will enjoy super fast operation, no more memory/process time outs, and overall easier and better PDFs... Check out http://wkhtmltopdf.org/ ... binaries for most platforms... Here is an example of some code I used... //Setup file parameters $cwd = getcwd(); $htmlfile = $cwd.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.date('Y-m-d-h-m-s').'.html'; $pdffile = $cwd.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.date('Y-m-d-h-m-s').'.pdf'; //Fat Free Framework code that generates a valid html file and writes to disk $html = \Template::instance()-&gt;render('pdf/order.html'); $f3-&gt;write($htmlfile, $html); //Convert HTML to PDF exec('"C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe" '.$htmlfile.' '.$pdffile); //Output the file to browser header('Content-Type: application/pdf'); header('Content-Length: ' . filesize($pdffile)); readfile($pdffile); //Delete the junk and bye! unlink($htmlfile); unlink($pdffile); die();
&gt; Thanks to a wonderful PHP HTTP client called Guzzle, we can achieve the same result Which of the 7 versions of guzzle should I use here? _/s_
Why don't you log in using your account?
I re-use my old code all the time. I *need* the ability to quickly open other projects in the same window and pull some code from them.
You are absolutely right, and it was my fault to not provide all the details. I managed to deploy a 12k requests/second with average response time to ~75ms through Symfony2 and Doctrine2. =) I feel that makes more sense now.
Echoing a lot of the existing comments, ORMs make for an easier time performing standard MySQL requests -- they should not replace them. Knowing the full SQL spec for your flavor is important and necessary and a developer should be fully prepared to have to spell out a well-written complex query, even when using an ORM.
Ever find those bugs that when you fix them it actually breaks the system because everything was expecting that bug to be there? 
I really like PHP. The language itself has caught a bad rap, I think, because of hits like Wordpress and Drupal, which, being so widely adopted, have been targets for hackers. PHP is a fine language and has its uses. Just like Java, NodeJS, JS, Ruby, Python, Perl, etc. etc. etc. have things that they're good at. Every project has the right set of tools for the job ... people bashing PHP are either blind followers, parrots or folks who just haven't had a project that really appreciated PHP. My two cents.
Do you think 70k is a fair salary considering my only fundamental knowledge of OOP and no framework experience?
That's true, but there's no reason why you can't challenge yourself in your current position to code exclusively in OOP to stretch those skills while you job hunt.
The conversation is about what *extra* functionality ORMs provide.
It's not a bug. It's a security enhancement. You also got the version number of the new version wrong.
Then all I can say is hunt hunt hunt. You seem like you're young with a whole career ahead of you -- being compelled to not work to your full potential because existing others can't follow is short-sided by your company -- they don't pay you an equitable wage, they thwart opportunities for you to grow your skills (which would benefit them) and they don't take care of your senior, who you say is the backbone to the company, more essential than the owner, what do you expect them to do for you? It's time to pack it in -- line something up, tell them your leaving and ignore counter offers -- money won't help you reach your next level, just remember that.
I've started working at a place that does insist on having unit tests for all new features that get put in the product, and I'm actually for the first time enjoying writing tests, because it is such a complex product, there is no other way for me to see if the code I've written is working properly. In the past I've usually been able to just reload a page and see if everything was working, and for most of my bosses, that has been what they wanted - get it done fast and "just make it work" without regard to quality. I've actually been spending a lot more time writing and improving test coverage than writing actual code, because I've been working on fixing old code and I'm not deeply familiar with the whole codebase yet, so I need to make a lot of assertions about the code - that what I'm doing both works properly, and replicates or improves upon the older code's behavior.
I agree with adrianmiu. A few more points I like to cover are * relationships in database * authentication and authorization ( if it have ) * How can we reuse the same module later ( so that the css / images etc are shared ) via a composer install.
Sure. But for the sake of building an example app for a framework, you can ignore a large number of these features, and just pick and chose the parts which allow you to show off what your framework can do. Framework example apps are RARELY feature complete.
https://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2) You can distribute derivative and sell it as long as you include instructions to get the original and disclose the list of your modifications.
`FETCH_CLASS`does the 'object' part, yes. But it's missing the relational mapping... which is quite a big part. PDO simply maps one row to one class, it does not build an object graph, it does not know when the same instance is fetched multiple times, it doesn't have lazy loading, it has no clue about class inheritance, .... the list goes on, in fact this is just the basics.
&gt; Sadly, flash has the only 100% reliable cross-platform clipboard API out there. Surprisingly, 100% of the people in PhpStorm's target segment **should** know how to copy text in their chosen browser on their own. Just give us a readonly *(not disabled... wonder why these two are so often mistaken for one another;)* textarea with the code *(and remove the "click to copy"-hint)* and we become happy campers :D
Thanks So I am fine if I rename the product and sell it with a new name
Thanks.. It was really simple &amp; precise
Write tool for story mapping like [storiesonboard.com](http://storiesonboard.com) but in classic fashion. Without master stories and with ability to extend flow from any user story. If you'll put it to github i could then take a part and contribute.
Smite the heathen blasphemer! Your momma puts the opening curly brace on the next line! :)
Oh yeah, thanks! Edited.
Exactly how is the cryptography bad? Look at the commit: https://github.com/sarciszewski/opencart/commit/7fe1d26a03b8da768bdb5d3e576e4f132df40737 The change is about using MCRYPT_RIJNDAEL_128 instead of MCRYPT_RIJNDAEL_256. The commit message says MCRYPT_RIJNDAEL_256 is not AES which is wrong. It is AES with 256 bit key sizes. It is secure: http://stackoverflow.com/questions/5253751/what-are-the-differences-between-these-encryption-algorithms Edit: So I was wrong. MCRYPT_RIJNDAEL_256 is Rijndael-256 which uses 256-bit block size and 256-bit key size (AES-256 only use 128-bit block size). Still, nothing says it's insecure, it just hasn't had as much analysis done on it: http://crypto.stackexchange.com/questions/6016/difference-between-rijndael-128-256-blocksize-implementations-and-impact-of
IF ('do you mean' == $what ) { } i also hate that argument order, i think some cience guy once tried to convince me its better in that order ... i cant remember why anymore ... but i still hate it even if it would be better, variables first!
I do this with image files in a directory, to automatically create the associated webp files. I use lsyncd to do that, it works very well. https://github.com/axkibe/lsyncd/wiki/Lsyncd%202.1.x%20%E2%80%96%20Layer%202%20Config%20%E2%80%96%20Advanced%20onAction I understand it's not inside php, but I use lsyncd to call a php script via CLI.
[He's a great guy!](http://forum.opencart.com/viewtopic.php?f=2&amp;t=142532&amp;start=240#p567117) Really knows his stuff eh?
He has been previously mentioned in /r/PHP before. I love this guy - he's living the life.
It's a necessity in Java, where you compare strings with .equals, and since any String in Java can be null, changing the order to "literal".equals(variable) protects you from NullPointerExceptions. It's extremely dumb, but that's the way things are. I don't see any point to it in PHP, and it reads far less natural (human beings think like "if this car is red", not "if red is the color of this car", ugh...).
Nobody seems to have mentioned that this looks like a terrible way to disseminate the data. Is the data there until it is consumed? Or will it just be different every time, so you'll miss transactions? how do you verify that on consumption of the data, it was imported correctly, and can be discarded for new data? What if the data comes in faster than you can consume it? You'll note from the above that there are a great many questions about the hows and whys of the method you're describing, which almost certainly points to it being the wrong way. You need logic at both endpoints (transmitter and consumer) in order to negotiate transmission and ensure no loss - unless you're happy with loss of data, in that case, do whatever you want!
Could you elaborate what you mean? I can't think of a way how the IDE can separate HTML from PHP, if the developer mixes both.
The list of things that are not great about this project is longer than the hills without worrying about Rijndael versus AES, or personal attacks on its founder. Of course, with a better attitude, that list would be reduced a whole lot, so have an upvote!
&gt; Lots of people have a tendency to shit on PHP (e.g. /r/lolphp[1] ) I think most of the time it's shitty coders shitting all over themselves and then pointing at PHP as the culprit, or otherwise it's "it doesn't do it how I want it to do it so it's wrong". I think PHP excels at being fucking easy to get momentum if you are already familiar with other c-like languages. To me that's its biggest drawcard, and the biggest reason I truly can't be bothered with Python yet. I'm getting too old and tired for this shit and don't need yet ANOTHER way to write what is essentially the same thing that has been done for decades in languages that are given less love these days. It's all more-or-less the same shit dressed-up in a different suit.
Runs a really popular eCommerce platform and is a dickhead. Is he rich too?
Thank you all for your help, you're all really great. I'll definitely look into TCPDF, since this is the consensus.
It's a protection against misspelling too (if you forget one '='). if ($var = true) work but not if (true = $var). An interesting article about the linux kernel and an error of this type : https://freedom-to-tinker.com/blog/felten/the-linux-backdoor-attempt-of-2003/ https://en.wikipedia.org/wiki/Yoda_conditions
I fully align with the mindset of the security community "better safe than sorry", but I wonder if ECB is insecure for compact binary data, or only when encoding giant uncompressed bitmaps (quite the edge case IMHO).^1 Take the penguin demo and perform a harmless real-world transform on it, like using PNG, JPG or GIF, so it's not just raw bytes stored wildly inefficiently in a uniform way in space, and the problem goes away. ^1 Not that I'm willing to try this in my code :P
Every time someone posts that penguin picture I think the same thing.
Under that license (GPLv3), people are free to fork it and improve it however they please. They're also free to suggest changes to the original repository, and the author is free to accept them or reject them. People are also more than free to post threads like this one and warn people for it being possibly insecure. But a sarcastic remark like "real professional..." suggests *entitlement* and the expectation that an open source author *owes* users some level of *professional service* merely because he opened some source. And that's not really the case. Nobody owes anything in open source. There's the source, there's the license, everything else is done on good will.
I am aware, but I took the comment and the reply to mean opencart was using the `mysql_` functions. Looking at the code I see both the inclusion of the `mysql_` extension and [manual escaping](https://github.com/opencart/opencart/blob/254ab46051fb3cc936c8c5327909e319e3d9ca99/upload/catalog/model/localisation/language.php#L4). This is dispute them also having PDO as an option to connect the the database. As for portable SQL, you're right. But you **can** abstract the underlying SQL and keep your PHP code free of `mysqli_` statements, the advantage of PDO is a unified interface.
I'll keep it short as it's off topic to this thread, but PDO limits PHP users to a db interface frozen a decade ago. Some people will reject it, and it's not completely unwarranted. Look at the other DB extensions and you'll see a lot of innovation that PDO doesn't expose. Unified interface can be had though wrappers, similar to Doctrine's DBAL or Aura's SQL component.
Do you mean literal language translations, or are you talking about data transformation?
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**XLIFF**](https://en.wikipedia.org/wiki/XLIFF&amp;amp;ved=0CDEQFjAE&amp;amp;usg=AFQjCNG71wIwKlsTYDEzfbLfeVHkEDlnrg&amp;amp;sig2=wcQfXi4gZh-HumPuQMjn0Q): [](#sfw) --- &gt; &gt;Unrecognized parameters: 'amp;ved', 'amp;usg', 'amp;sig2' &gt;__XLIFF__ (__XML Localisation Interchange File Format__) is an [XML](https://en.wikipedia.org/wiki/XML)-based format created to standardize the way localizable data are passed between tools during a [localization](https://en.wikipedia.org/wiki/Internationalization_and_localization) process. XLIFF was standardized by [OASIS](https://en.wikipedia.org/wiki/OASIS_(organization\)) in 2002. Its current specification is v2.0 released on 2014-08-05. &gt;The specification is aimed at the localization industry. It specifies elements and attributes to store content extracted from various original file formats and its corresponding translation. &gt; --- ^Relevant: [^Open ^Language ^Tools](https://en.wikipedia.org/wiki/Open_Language_Tools) ^| [^Computer-assisted ^translation](https://en.wikipedia.org/wiki/Computer-assisted_translation) ^| [^Service-Oriented ^Localisation ^Architecture ^Solution](https://en.wikipedia.org/wiki/Service-Oriented_Localisation_Architecture_Solution) ^| [^Translate ^Toolkit](https://en.wikipedia.org/wiki/Translate_Toolkit) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+csyj5uv) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+csyj5uv)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
This joker has been around a lot before. Here's how he responded to someone providing suggestions on OOP. https://www.reddit.com/r/programming/comments/c60g1/how_not_to_respond_to_constructive_criticism/
Do you have any input on why to use this over existing solutions such as https://github.com/myclabs/php-enum Related note: I really hope [this](https://wiki.php.net/rfc/enum) happens with 7.1
The commit was not meant to fix everything. See my comment: &gt; Note: There are numerous other issues here. ECB for payment data? No IV or authentication? **Will revisit later.** I intended to start a discussion and come back with a detailed analysis, but he sniped me with his assholery.
&gt; Do you have any input on why to use this over existing solutions such as https://github.com/myclabs/php-enum It's very similar but using magic methods is causing problems in large code bases. So not providing magic methods is a better solution when you need it. For smaller projects myclabs/php-enum works great, I guess! :) &gt; Related note: I really hope this happens with 7.1 Me too :) This would be very awesome. 
"Professionally" doesn't mean "ethically". A profession is a paid occupation where you reliably perform service X for cash, while this is neither paid, neither is it a formal occupation. Even if we equate those terms, the choice of algorithms, components and style in your source code is not a matter of ethics. The author's style of communication is not very productive, but when Linus does the same with one of his random rants, he makes the news and everyone cheers, so I guess this is all quite subjective. Just as a change of perspective, your open-source code on GitHub (which I appreciate &amp; find valuable, BTW) also has some known deviations from standards widely accepted in the PHP community, yet you're free to adopt these standards or not, without someone calling you a dick. It's your code. We agree on this one, right?
We use Sentry (https://getsentry.com/). It's open source so you can host it yourself but you can also pay for a hosted version.
Can't you just setup Kibana + Logstash? A nice example here. https://www.digitalocean.com/community/tutorials/how-to-use-logstash-and-kibana-to-centralize-logs-on-centos-6
You can use [Symfony's Translator component](http://symfony.com/doc/current/components/translation/introduction.html) outside of a Symfony project. It supports all of the formats you need - YAML, XLIFF (XML) and JSON. Those files can be committed to version control.
i can relate th misspelling thing, this sometimes used to happen to me before i started using === by default And then its a pain to debug sometimes
I'll use tabs.
If I remember right OpenCart made the news few weeks ago for this and back then that concern was given: it'll break BC (although if we're fair, there's a way to gradually upgrade hashes and keep BC). Get asked a dozen times the same thing, you might develop a temper. BTW, I just went through that thread and Daniel (the author) says this in the end: "just tell me which one to use instead!" Seems like he was waiting for the issue filer (OP) to recommend an alternative, instead he closed the issue.
&gt; the author is free to accept them or reject them And I'm free to decry their project and tell developers the world over not to trust the project while pointing to real defects in their codebase as an exhibit to support my advice. Everybody wins.
You forgot the fact that he added, "idiot!" to the end of his comment then ninja edited it after the email went through. ;P
Oh, well...
True, the relationships don't come free, but that's trivial to add. Your objects can handle that with a couple of lines of code. Not sure what you mean about class inheritance, why would an ORM need to care about that? The other stuff I've never had a need for personally.
I've run this project by a bunch of cryptography and PHP security experts (many of whom are friends of mine, so they might not have looked as deep because of familiarity and my reputation) and so far it passes their analyses. However, I'm hesitant to call anything stable before the general public has had some time to hammer at it and find any flaws I might have overlooked. (There's also the matter of the two outstanding php-src PRs that I anticipated will be accepted when making design decisions, i.e. to throw `Exception`s.) **The library itself is only about 300 lines of code, many of which are comments.** https://github.com/paragonie/random_compat/blob/master/lib/random.php If you're wondering if you're qualified to review something this technical, the answer is probably yes. Even if you don't find any bugs, feel free to weigh in.
Very helpful advice here, thank you. It is understandable to handle the HTTPS at the service level. I will probably look into that first before doing anything with PHP. I looked into cloudflare and it does look very attractive. That DDoS protection would be very nice, but I looked into the pricing and it is expensive for the plan that includes that advanced protection. However, if the app gains enough popularity I will probably look into upgrading to cloudflare. I have seen some services using cloudflare (ironically when it went down), so I know some well known websites do use it.. could be quite useful with a lot of traffic.
That's my post he replied to. I'm kinda surprised anyone ever saw the response. It was a two month old comment buried in a locked thread when Daniel found it. Needless to say it was a bit of a turning point for my involvement in the project.
I see. But PHPStorm can do this too. May even be a new feature in 9, because I didn't see it before. 
I made that recommendation for a few reasons. 1. Getting third-part libraries into OpenCart is almost impossible. As of today every single part of the cart from email to encryption was developed in-house. 2. Accusations of "bloat" and "slowness" for other frameworks/packages is common (true or not) so getting Doctrine in is likely a non-starter. 3. PDO is fairly close to the abstraction already in the cart and would required the least amount of refactoring.
I propose that everyone makes their own implementation of the polyfill, and we gather them together. Then we have a polyfill that chooses a random polyfill on every call.
&gt; Your objects can handle that with a couple of lines of code. You have now built a basic ORM... welcome to the party. Only have you also violated SOLID principles, and your domain is now polluted with code to build object graphs based on specific queries. So you now also have imposed limits on your queries, because the code you wrote expects certain things. And we're not even touching the fact that the column names can differ from the property names... You say it can be done with a couple of lines of code, but I doubt this is easy for any query with more than zero joins, and it will become exponentially harder when you start adding relations and thus joins. if this were trivial, Doctrine would not exist. Inheritance is just one of the extra features that are added on top of just SQL, and it can be very handy in certain circumstances. an ORM does not only add functionality to SQL, as I said it's a layer between the database and your domain. Doctrine also augments your domain model by allowing to easily add validation, data transformation etc...
This. Sentry is a great product.
I'm not saying PDO is bad or anything, but I'm just saying it's not the universally best option in every case. If it matches the existing abstraction in OpenCart feature-wise, then it's obviously a good choice. BTW, just want to add: Doctrine DBAL and Doctrine ORM are separate components (ORM depends on DBAL, but DBAL doesn't depend on ORM). The DBAL is a much lighter component and very close to the metal.
A library to randomly select a random polyfill for randomness randomly using a random polyfill for randomness.
DBAL is built on top of PDO, isn't it? Definitely not accusing anything though. I just know what the excuse will be.
The free version offers some DDoS and a free SSL cert -- it may still be right for you. If you hit it big and need more than that, you'd presumably be making money and then could just upgrade your plan. Free SSL as a service is a gift, I'd take it.
I took another look at it and its a bit different. What it does, is coloring HTML Code and PHP Code different. How different is configurable, but it wont change it, depending on your current selection.
It can run on top of PDO but doesn't require it. DBAL is relatively primitive, but you can add methods for handling async queries through mysqli, for example, that transparently fall back to synchronous methods when using PDO. This is the kind of approach I was suggesting (and not Doctrine in particular, that part is up to a project's needs).
I tend to just berate myself in my docblocks (personal projects.. mostly). /** * Here comes some ugly ass code. Good luck future-self. */ This is something I have in a nasty parser I wrote. In my defense the output I was having to parse was sometimes CSV, sometimes space delimited, sometimes had key=value and hate everything about it. Another gem from that parser: /** * I hate you - you nasty fucking method So yeah, my docblocks are useful. 
We want to implement this solution too, stream all errors directly to a chat channel. What are the gotchas?
still working*
Thank you mbabker. I thought I would get a warning message. I guess I would not :)
Errors for deprecated features (E_DEPRECATED) are off by default in PHP 5.3 and later. You can turn them on in your php.ini if you desire--although you should never have error messages set to display on a production server.
ah...I see. Thank you! :)
For people who grabbed the code from the /r/PHP post on Tuesday: please note that several commits went in after that post and the release was re-tagged, so you'll want to grab the code and build it anew. This is why we tell people to wait for the actual announcement. :)
This is extremely cool. Also check out the [npm](https://anvaka.github.io/pm/#/galaxy/npm?cx=-1345&amp;cy=-7006&amp;cz=-6553&amp;lx=0.621700613972938&amp;ly=-0.6458651572907126&amp;lz=0.30983196944957914&amp;lw=0.31678177960626197&amp;ml=150&amp;s=1.75&amp;l=1) and [bower](https://anvaka.github.io/pm/#/galaxy/bower?cx=0&amp;cy=0&amp;cz=0&amp;lx=0&amp;ly=0&amp;lz=0&amp;lw=1&amp;ml=150&amp;s=1.75&amp;l=1) versions. What framework is this built on? Looks like react and... what else? 
Right now, as far as we can tell, none. Except of course if their site goes down and because of that your own site will be slow to load because PHP is not multi-threaded. However, we think it's fair to assume that their uptime will be much better than ours. If this is a real issue than maybe you should build some safeties into your code, but currently it really works like a charm for us. In the end, if you want to be really sure, testing will give you the only metrics you should go by. So, assume they can fail, program for that, and you will be okay.
Thanks!
Thank you! Here is the source code: https://github.com/anvaka/pm The rendering is done with [three.js](http://threejs.org/). The layout is computed by [ngraph.forcelayout3d](https://github.com/anvaka/ngraph.forcelayout3d), and the packages are indexed by [allcomposer](https://github.com/anvaka/allcomposer). I'm using react to render input fields and search results.
Whoever put together the Homebrew packages already - Thank You. edit: I've been on this site for 6 years now?
Given the lack of security, and the lack of allowing others to contribute, "OpenCart" takes on a whole new meaning.
We could use some bright thinkers like you over at /r/shittyprogramming
There is a real world attack that actually decrypts ECB mode encryption under some circumstances. [I implemented it here - excuse the Ruby](https://github.com/technion/matasano_challenge/blob/master/set2/chal12/chal12.rb)
[PHP 7.0.0 Beta 1](http://us3.php.net/archive/2015.php#id2015-07-10-4) officially released.
It's not a "bug" but I think it's worth considering - should mcrypt() really be the first attempted/preferred source? [Given the state of mcrypt](http://news.php.net/php.internals/79446), I'm not convinced it should have a higher priority than OpenSSL (which on most systems just reads from /dev/urandom) or... reading from /dev/urandom. And yes, I'm referring you to yourself.
We discussed this pretty heavily but the issues are mostly closed. https://github.com/paragonie/random_compat/issues/6#issuecomment-119564973 https://github.com/paragonie/random_compat/issues/11#issuecomment-120511101 `mcrypt_create_iv()` is the only sane part of `ext/mcrypt` (it's not part of `libmcrypt` at all).
Cool but completely unusable on mobile. 
Yeah, libmcrypt needs to die. :(
I assume the 'planet' size comes from the number of dependencies. It'd be interesting to be able to see the opposite too.
I think it's much better to just "vagrant up" or "docker run" a preconfigured box, either from some online repo or the companys own private repo. It's faster, easier and you're sure all devs are working on the same box. At least with a VM you should use shared/mapped folders, haven't used a FTP in years.
Use vagrant + virtualbox + vaprobash. Vaprobash has a lot of different configuration options and is simple to setup. See the documentation: http://fideloper.github.io/Vaprobash/index.html Another option that is very popular amongst PHP developers is laravel homestead http://laravel.com/docs/4.2/homestead. It is used mostly by laravel developers but you can use it for other types of PHP development. It seems like a nice solution but I have never been able to get it to work with all my requirements. 
[use the search! idiot!](https://www.reddit.com/r/PHP/comments/22761d/opencart_developer_doesnt_believe_in_proper/)
wow declarations. fatal errors are exceptions. i like this.
Yikes. No, instead it does this: https://github.com/php/php-src/blob/e63c756c0903e4f62f04a6ad97dc6b8fc289c6a9/ext/mcrypt/mcrypt.c#L1319-L1386
Try at /r/phphelp/ with a more coherent and detailed description of your problem.
You would want to include some sort of check on page load to see if any form fields (even an invisible one) have been set, indicating there is data to be dealt with. A simple if(isset()) should work, then process your form data. As others have said, also include the #{formID} into the URL to jump to that section once the page is rendered. 
For the life of me I just could not get NFS working from my Vagrant VM to my host. Shared folders work fine but with large projects the overhead really adds up. It might have something to do with my Corp/networking policy? Running Mac OS 10.9 host with Ubuntu 12.04 guest 
This is also not "manual". Manual would be if you came to me and asked me where the class is, then you typed it out on the server. ---- Kidding aside, once we have a solid system for mapping code to files, autoload, there's no reason to have specialized loading solutions for this kind of code or that kind of code. 1. Maintainers have more to maintain (and risk security issues, case in point). 2. Users have more to learn. 3. Couples application code to framework-specific loaders. I don't feel *strong* about Yii doing what it's doing, but it raised an eyebrow. The reason went away 10 years ago.
You're not getting any answers because your question is too broad yet vague. From what I can understand from your description, you need to maintain a list of transactions for every customer. There are two kinds of transactions (in a nutshell) - credit and debit. - A credit is any bill the customer has to eventually pay. - A debit is any amount the customer has paid. When you fetch all transactions for a customer and compute the balance you know what's the situation: negative balance, this customer has more to pay. Zero, everything has been paid. Over zero, this customer has overpaid, or some service he's ordered has been canceled, and now you owe them a refund. This system allows the customers to pay in part or in full, however they please. Only the balance matters.
Have you checked my code here? http://pastebin.com/raw.php?i=mPB0xMkH Do you know any better alternative to this schema? 
You should really post a writeup on the README on the structure and overall architecture. I browsed around a bit and I really don't know what I'm looking at.
I think I understood what you are saying.thank you!
I get this sometimes even as a 10+ year PHP expert. One pseudo solution is a bit of liquor, sounds funny but helps to kill any anxiety if starting a project for fun. Too much and it becomes a mess of course. The second thing is to just say "Fuck it!!!" a lot and just do it. As long as you know git you can always change things later, and you'll be smarter in the future. 
/u/jmprobert any news?
I use Monolog + handlers depending on the context. For production environment these handlers include [Newrelic](http://newrelic.com/), and newrelic in turn might be configured to send me alerts for more than X app errors in a timeframe as well as other conditions such as CPU usage, free space on HDD, etc. The alerts might come through email, hipchat, slack and others. For dev environment I'm using [PHP-Console handler](https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef), which sends errors and debug messages to the browser's console. Every environment also has a Streamhandler appending data to the application's php error log. This way I have one place to check for application errors as well as errors from php-fpm. Some times, like when you forget to update your composer dependencies, the error will happen before the app has time to instance Monolog, so no matter what handler you use, you'll end up checking for the php error log sooner or later. You can have this log checked in an online dashboard like the ones mentioned in these comments. I'm also used [LogEntries](https://logentries.com/) for this purpose. 
This is interesting, although I find the idea of instantiating contracts a bit confusing semantically, ie: new AccountContract() vs new Account().
This tutorial should be updated to apply to Guzzle 6 You can now [pass an array of promises](http://guzzle.readthedocs.org/en/latest/quickstart.html#concurrent-requests) to `\GuzzleHttp\Promise\unwrap()`;
You can follow there tutorial on the authentication system in the Slim framework. It made a lot more clear for me than their simple MVC tutorial. It will take a lot of time to complete the tutorial but it's worth it. https://www.youtube.com/playlist?list=PLfdtiltiRHWGKUvioJly40RJZchSG2-34
I'll be sure to check that out, I followed their OOP Login/Register system tutorial last night and it gives you LOADS of stuff to resuse on a global scale and not just for a login system; the whole DB class is amazing.
It's a shorthand... to cool. (⌐■_■)
I was curious if anyone had thoughts on whether it blurred the line between data model and application behavior, which might turn into a 'why not'. 
I've read many PHP books and this is far and away the best.
Think of it this way, the contract allows you to add additional validation to existing classes while maintaining its ability to be type-hinted. As for how the contracted class differs to your vanilla code, just one obvious reason is this: Lets say you instantiate your AccountContract class then deposit 2, everything is fine. However, lets say you then deposit 3 but catch the exception, your class balance is still 5 even though an exception is thrown. The state of the object remains altered. Using my contract class however, the ensures validation is first checked on a cloned version of the class to see if it passes. Only once it passes is it then applied to your initial object. So in the above scenario, my class would have a balance of 2 even though we caught the exception. Obviously this all falls apart if the class calls outside services or uses static variables. A place where the contract would be useful is mass import of data that must meet strict validation from say a CSV file.
That is pretty much spot on. It was initially made as a proof of concept as PHP does not have built in support for design by contract pattern. The best application for the contract is objects that interact with themselves and not other objects as cloning would maintain the reference to those other objects and could invalidate the ensures aspect of the contract. You could get around this with deepcopy but that would be an even bigger performance hit.
Shared or Mapped folder to a windows system causes major lag with apache/php processing of shared files. Vagrant is a good solution, however, I prefer more control over my environments, this development environment will be running PHP Phalcon.
&gt; Using my contract class however, the ensures validation is first checked on a cloned version of the class to see if it passes. Only once it passes is it then applied to your initial object. That's neat. Thanks for answering!
Man and I thought my phone and email were the only places I'd have to deal with recruiter spam. 
On second thought, if by "Corp/networking policy" you mean a VPN which tunnels everything, then you need it to exclude the 192.168.56 network. 
Yes its does give you lots of reusable classes. I followed that one too. But in the long run I think you will like the authentication system he maded with Slim.
Nothing wrong with Apache nor Windows host. Manually managed VMs however...
He excused manually managed VMs with need for speed [in another thread](https://www.reddit.com/r/PHP/comments/3cvqcz/how_to_setup_a_vm_for_php_development/ct0a8mh?context=3), (I know it makes no sense), but he uses the most bloated webserver out there. As for windows, the case-insensitive filesystem reintroduces the "works on my machine" problem which [vagrant aims to solve](http://docs.vagrantup.com/v2/why-vagrant/) (amongst others). 
Never underestimate the power of a brand. PHP 3 was also a rewrite (for frameworks: Zend Framework 2 &amp; Symfony 2 come to mind). The people &amp; mindshare behind a project are its biggest asset, the code less so. 
In simple terms; it's like writing a sentence. Define the subject (if possible) before the rest of the sentence so the reader knows what the content is about. The ($subject) is (==) 'good to go'.
&gt; Generating mocks, stubs, proxies This is actually something everybody of us is doing, given us is the set of PHPUnit's `getMock()` users.
I'm, of course, not claiming exclusivity on any of those. Since it's hidden in a library, many don't realize eval() is what makes mocks in PHP possible. So I thought I'd include it.
I'm not a recruiter. In fact, I rather despise recruiters based on my previous experiences with them. Apologies if this is not the correct place to post this. Maybe you all could suggest a better subreddit? Thanks much J
I have nothing to contribute to this discussion, but I am interested to learn more. I know of eval(), but never had reason to use it. If you have some additional links on this topic, I would like to check them out.
Exploiting
I like to eval query params so that any user can extend my code. 
The idea behind extending the instance is that both the base class and the contracted class can pass for the base class in a typehint. In a decorator, !AccountDecorator instanceof Account... The idea of this class is that you can add constraints to existing class by just making your object resolver instantiate AccountContract instead of Account with nothing else in the application breaking. How would I get around the debug_backtrace calls? From the trait, I need to find out the name of the calling function to check for contracts. The only way I can think of is by adding a method name parameter in all 3 trait methods but get would get messy.
&gt; I'm not a recruiter Do you prefer the term overhead? 
Good job, keep it up. 
I think you're looking for the /r/forhire sub. 
Thank you I've posted there and I'll check out some others. Thanks for the courtesy. I will delete the post in a moment. 
Looking through his code, the debug backtrace seems to do more than just provide the calling class and method. On lines 114 and 129 of ContractTrait.php, the called method parameters are passed to the requires call backs and to the main method. This would not be possible without a backtrace 
The problem is the author clearly believes their software is secure enough. What's good for a piece of software is highly subjective and a balancing act. And it's up to the author to choose that balance. As I said, if the vast number of people using OpenCart disagree with its maintainer, then they should fork it, problem solved. You need to consider that together with reasonable demands like the encryption issue described by OP, project owners are flooded with plenty of poor requests and nice-to-haves that can destroy a project. More is not always more, and you can't appease everyone, this is what repository ownership is about - you decide what happens, and people then can use your product or not. 
&gt; Then I completely changed my approach, and students see the vast payoffs of OOP vs Procedural code, let alone MVC. MVC in PHP is quite linear, to be honest. I can't think of any advanced OOP techniques being utilized. In fact, you can pretty much do the same with functions. What is the vast payoff you observe?
Used to use it for math based input e.g. (5+3*(3-1)) or with variables by replacing variables with their number counterparts first.
&gt; Optimizing complex computations by creating a specialized function based on runtime-known conditions (best used for long-running processes and not within request-response context). It's not just to make code faster, you can use it to make stuff easier to read. I have a library (that I'm not going to share for other reasons that just the eval) where it allows you to query Yaml by SQL like syntax. i.e. it allows you to do: $queryBuilder-&gt;where('fooFieldName like 'bar%'"); by converting it to a preg_match and evaling the code. Being able to write code in a 'DSL' that is easier to maintain than the actual functions needed to implement can be very nice. 
The brand might hurt it in this case. CodeIgniter doesn't exactly elicit a positive response in many people.
Two great books have already been mentioned. - [Modern PHP](http://shop.oreilly.com/product/0636920033868.do) - [PHP Objects, Patterns, and Practices](http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1430260319/ref=dp_ob_title_bk) I've got them both on my [bookshelf](http://images.helgesverre.com/20150712_164202.jpg) and I learned quite a lot from them, particularly the Modern PHP book due to it being quite short and to the point, you can pick up a lot of useful things from it in a short timeframe. The other one is more beefy and verbose, it has a lot of examples and theory packed in there, It's not a book I have read all the way through yet, but what I have read, is very useful stuff, it does a good job explaining how to work with objects effectively, design patterns and the like. I read through Modern PHP in one sitting, and its very easy-reading in its writing style, it's more "personal" and feels like the author (Josh Lockhart) is speaking directly to you, which I appreciate in a book.
What kind of needs do those classes fulfill? I have a similar system, which compiles classes on demand from the autoloader (either from non-PHP sources, or parametrically), and curious to hear how people use this. Mine saves the files, but that's a detail.
I learned a lot by following JREAM's MVC Framework tutorial, maybe it will help you as well, you can checkout the playlist on youtube: https://www.youtube.com/watch?v=Aw28-krO7ZM&amp;list=PL7A20112CF84B2229
&gt; Used to use it for math based input e.g. (5+3*(3-1)) or with variables by replacing variables with their number counterparts first. I see what will you do there
You've misunderstood how `call_user_func_array` works. You can do this one of two ways. 1) Just use `call_user_func`as it will pass the given parameter wholesale down to the called method. call_user_func([$this-&gt;controller, $this-&gt;method], $this-&gt;params); 2) wrap your params in another array. `call_user_func_array` expands the passed array in to individual func params. call_user_func_array([$this-&gt;controller, $this-&gt;method], [$this-&gt;params]); 
Thanks a lot, I used: call_user_func([$this-&gt;controller, $this-&gt;method], $this-&gt;params); I knew there had to be a function for this. :)
&gt; The problem is the author clearly believes their software is secure enough. That is his problem, and should not be made that of his users. &gt; What's good for a piece of software is highly subjective and a balancing act. No, it really isn't. We're talking about security vulnerabilities here - these are objectively bad. There's nothing subjective about it. &gt; As I said, if the vast number of people using OpenCart disagree with its maintainer, then they should fork it, problem solved. Which has already happened a long time ago, and yet the original is still around. Why? Because [network effect](https://en.wikipedia.org/wiki/Network_effect). &gt; You need to consider that together with reasonable demands like the encryption issue described by OP, project owners are flooded with plenty of poor requests and nice-to-haves that can destroy a project. More is not always more, and you can't appease everyone And that is fine. But that is not an excuse to be a dick about legitimate issues. If distinguishing the two is such a big problem, create a security@ e-mail address, and handle security issues there with serious attention. Problem solved. &gt; this is what repository ownership is about - you decide what happens, and people then can use your product or not. And repository ownership also comes with the social responsibility to be transparent towards your users. Whether that is by telling them that something is unsupported, that they shouldn't bother submitting feature requests, or that any suggestions are welcome. And Daniel is neglecting that responsibility. 
That's one of the most stupid things you can do. Why would you allow users to run their own code on your server without any form of escaping? Do you realize what a huge security risk that is?
Username is relevant if anyone missed it
Firstly `eval()` is really nothing more than `include()` without files. So of course various templating tasks naturally lend itself to it. As usual, context is important, but `eval` occasionally simplifies or adds robustness even. 1. The most common use case are expression evaluations of course. While sure you can write a micro tokenizer and a wee recursion to calculate things, a simple `preg_replace("~^[\d\-+*/%]+$~e"` is often enough. (Now you do actually need `eval` since `/e` got canned [still for valid reasons, IMO]. A recursive ?Regexp for whitelisting some math funcs is a bit more work. But it's still less than the 30-50 lines of manual iteration or a S-Y transform.) 2. Same goes for the typical `dot.notation.ini`-style extractors with double loops and reference-y array collecting. After writing the 10th variation you should really ask yourself if a simple regex rewrite and `eval` wouldn't fit the bill rather. (Such ini-files practically amount to code anyway, despite the configuration file look and feel.) 3. Development-time templating. Now not as relevant or fascinating. But for instance I use macros like `-&gt;query(SQL@(SELECT :$cols FROM tbl WHERE x=$x AND y IN (?$y) OR so))` for e.g. autoparameterization. Which just happens to be `#defined` as inline `eval` rewriting callback. Anyway, looking at [Python examples](http://stackoverflow.com/questions/1087255/use-of-eval-in-python) or typical [JavaScript uses](http://stackoverflow.com/questions/197769/when-is-javascripts-eval-not-evil) help to overcome some of the stigma, or recognize realistic patterns. (Btw, "Xyz is evil" are often very *well-intentioned* noob memes. It's just that such shallow advise doesn't really educate about the when's and why's. And intermediate coders rarely unlearn the indifference.)
Was about to downvote...
\&gt; "I like to eval query params" \&gt; extremism Yep
&gt; let's please skip the "eval is evil" remarks. I clicked on the link to say this. If I cannot say eval is evil, I have nothing else to say! It would really need to be a complex reason to find a use for eval() and I like your potential usages. 
Still not a particularly helpful reply.
If it is in source control, then anyone can see it that has access to your source. If your server is compromised, anyone who looks at the file can have it (this is less of a concern as, if they have access to your server, you have other problems as well). What I typically do is leave it blank and then pull in an environment variable. That way, the code functions the same from dev to stage to production and all I need to do is feed in different environment variables. This also makes it easier to put into configuration management or containerization systems (docker, ansible, etc). Edit: How are you hosting the server? If it is a shared host then you REALLY want to consider moving to something a little more secure, such as Digital Ocean. PM me if you want a referral code for some free credits. 
OK now I'm making a little bit progress. I found that my guest OS can connect to the host on IP 10.0.2.2, not sure why it was trying on 192.168.33.1. Now I'm trying just a pure NFS mount with fstab as a proof of concept before I set it up with Vagrant. 
I guess you replied while I was writing a reply to you. You don't need fstab, you can just test with `sudo mount -o 'vers=3,udp' 10.0.2.2:'/Users/myusername/Vagrant/scotch14.04' /var/www ` But you need to replace 192.168.33.10 in /etc/exports with whatever the VM's ip is `ifconfig | grep 10.0.2` It's very strange that the network configuration didn't work well. Perhaps there's something wrong with the base box you're using. 
You're always at risk when you store passwords in plain text. But if you need to, you should be using `.env` files instead. [This should help.](https://github.com/vlucas/phpdotenv)
what kind of monster are you? This is a security hole. You should only eval variables names $DONT_HAXZORS me. That way your users know to only use the extension points for good.
I didn't downvote. \Symfony\Component\DependencyInjection\ContainerAwareTrait
yes but https://www.reddit.com/user/SkepticalMartian
this is no more secure than storing it in plain text if the decryption key is on the same machine, an env file with the correct permissions should be more than enough
It's pretty much the standard way of doing things so I personally see no problem with it, even though some people will suggest further actions (and I suppose it can't hurt to take further measures). But if someone is able to read your config.php source code, then chances are your MySQL password is of little value because the someone has already gained significant access to your server. The only advice I would give is to put the config.php file outside of your public web directory so if PHP stops parsing files for some reason, it can't be accessed from the web.
If you have shell access it's still no less secure than storing passwords in plain text, with added advantage of being left out of repositories by default.
&gt; EDIT: i think my hard drive is encrypted since it's a corp machine. The vagrant docs mention that it is not possible to use NFS due to this. Think that could be the reason? It's possible. I my company's vagrant setup I documented that it won't work with encrypted home directory, a long time ago. I can't remember why I did it and I can't seem to find a source for it now. I guess you already tried allowing `/Users/myusername/tmp 10.0.2.15 -alldirs -mapall=0:0` Any chance your username has a space in it? 
Another framework that has no comments or docblocks. What's up with that?
I do give you that point. I checked out their source and they definitely need to document it. However, the code you make with the framework is pretty darn elegant. Also, for a new framework, the docs are pretty amazing. I've tried other frameworks like Fuel and never got to use them because of the really lacking documentation. Fuel was a pretty huge mess with the lack of tutorials available... Most are from 2011.
Very good job, but let me ask a question. Isn't the call to the enforce method a little bit redundant? Is it there because of some reason or you just didn't find a way to avoid it?
Lets just say my approach to MVC was pretty poor, and I used to recommend WordPress as a good beginners CMS.
I don't own a framework. I have nothing to do with it. I just literally started using it. https://github.com/Alphapixels https://github.com/Rhyre https://github.com/Mxious
1. I don't know. It's about personal preference, and I saw this and liked it, seems new which means it could be innovative and add good ideas someday. 2. The documentation is better than some frameworks that have been years at the same thing, and have shit docs. At least I like it. Setup is pretty straightforward. I'm coming from a CI background to modernize my habits, and I hated Laravel's file structure, found this and liked it.
CodeIgniter is certainly not dead, thousands of developers still use it. I don't use it anymore, but it sure is reliable. After Ellis gave it to BCIT people thought it was dead, but development is stronger than ever now.
You're fine as long as you don't commit that file to a VCS. Once it's committed it's going to be in the commit history forever (effectively) so anyone who ever gets access to your repository will be able to get that password. Even with a private repository this still opens another attack vector in that if anyone's account who has access to that repository is compromised then your database should be considered compromised. So make sure that file is in your .gitignore or equivalent file, set it manually on each system (or with a secured provisioner), and make sure the permissions on the file are locked down.
Typical practice is to put it outside of webroot, gitignore the file so it's not in your repo, and create a config.template.php containing placeholders so devs can see what settings there are for your application. 
Thanks I will take a look at that one, I'm trying to build an entire project off these tutorials and learn along the way since I'm still new to OOP/PHP as a whole but I'm learning quick :)
Traits, as such, are actually syntax-sugar, which is implemented as a magic copy-paste. That said, why exactly injecting a dependency is an overkill? &gt;Some of these classes might be controllers, but others might be middleware or event listeners. This indicates, that you have a serious architectural problem, because same operation is performed in different layers. That said, you get a +1 from me for not using the stupid "but it make logging better" argument. As for your example: why couldn't you do the same by using a *decorator*? 
Weeell yes. It keeps your database credentials out of your revision control software.
Thousands of developers still use php 4.x too. CI is *"legacy code"* now.
Had to look up the [code](https://github.com/symfony/DependencyInjection/blob/master/ContainerAwareTrait.php). This looks like another way to pass along the *service locator*. DIC wouldn't be injected.
You can use it to build an SPL autoloader that reads from Memcached rather than the filesystem. (On a cache-miss, read from the filesystem of course.)
Even if the file is accessed directly, so long as the server parses it as PHP it won't output anything either way. If your server is conked, there's a chance it won't be parsed as PHP and will output as plain text, but if this is the case then an if statement will do nothing to help. To avoid that issue, the file can simply be placed above/outside the web accessible root directory - though whether you have the permissions to do that will usually depend on how much you actually control the server itself. 
For stuff like this I usually add the file with empty/dummy values and then run `git update-index --assume-unchanged filename.extension` to ignore any further changes to the file. Typically, you want these files to be with the full project as they're pretty integral to it functioning, so ignoring them from the repo isn't a great idea. 
That's honestly overkill if all you need is to remove a file like this. That tool, IIRC, is mainly useful if you want to clear out big files &gt; X size.
&gt; shadowbanned why ban him?
Salting and hashing is for when you are the gatekeeper, and you are validating passwords sent by users. In this case, OP is sending the password to the database, and needs to send it in plaintext, so it needs to be stored unhashed (and so, unsalted- the purpose of salting is to make hashes harder to break).
Once it is visible and public, even for a minute, I'd just change the password. 
Also, always keep sensitive config stuff like passwords in a file that's ignored by your source control. Get in the habit, and there won't be as many accidents.
&gt;It's time to move on Why? What value does a smaller php ecosystem hold for you? There are plenty of little nothing languages with no viable 3rd party code if thats really what you're after. On top of that, do you think symfony/laravel/yii 2 appeared in a vacuum? Especially Yii 1.0 was regarded exactly as CI is right now. Then they effectively remade it from scratch, and here you are holding it up as "You cant compete with that!"
Neat idea. But you're still parsing the code from memcache. Opcode caching is essentially what you describe, but it caches opcodes (parsed code) to avoid the extra work.
Yes, committing passwords to source control is stupid no matter what format you're using. 
Well if you're like me you had a password committed for some time so it had to be expunged from the entire commit history. That tool made it really easy... But yeah it's not absolutely necessary, you can do it manually too.
Very good point. In my case I hadn't yet publicized the repository anywhere.
Well. There goes the only use case I could think of. :P
Well that's cause I listed all use cases up there so I can look smart :P Sorry. But it's still a neat idea. In general I think people don't use autoloaders creatively enough. No one says one has just to *load files* there. So many crazy stuff we can do in an autoloader (and for good reasons too).
&gt; Optimizing complex computations by creating a specialized function based on runtime-known conditions (best used for long-running processes and not within request-response context). Yes, it's possible to save on CPU by eval()-ing sometimes. Why are PHP devs always trying to micro optimize?
None of what I listed up there is something that's "always" done. But sometimes a valid use case appears. Especially if there's so much runtime information you just get bogged down computing the same runtime conditions over and over, when you can "inline" them. In general, when it comes to lots of raw performance I've always recommended moving some of the code to a Java or C++ service.
/r/php mods didn't do it. He needs to speak with Reddit admins.
It's exactly the same as using `config.php` except you get a helper class that can enforce some requirements and other minor benefits.
I'm sorry to say but this is such a non-posting. Parry is just trying to keep the momentum going. Nothing is set in stone, the details are still malleable. CI is great if you are in legacy land. That is, your business can't or won't upgrade. Still stuck in PHP 5.3 land with Centos 5/6.x. The world keeps turning and for newer projects you are crazy if you develop it in CI. Ah well....
So we're talking about a framework which has one central database (can't add a second one that I see), and it uses phrases like "no more awkward sql". Pretty much speaks for itself. I mean, I'm sure it's great for little sites and so on. But... yeah.
It does have more database systems, while installing the scaffolding it does ask which one you want. I don't remember which ones they were though.
Ah, in that case I really don't know since I just started using it today to build some playground apps.
Just change the damn password!
The only good uses for eval are those discovered on your own, after years of having everyone tell you eval is evil.
https://i.imgur.com/Zjwo4.jpg
You could possibly use https://github.com/defuse/php-encryption, then generate yourself a rsa key, store that in possibly something like a protected folder, then fetch the key, and make sure to only store your password encrypted, then decrypt it with yoru key, which you never put in your code-base.
I can see it not ending horrifically with proper verification/sanitation but I still wouldn't want to try it.
&gt; This indicates, that you have a serious architectural problem, because same operation is performed in different layers. Middleware and Controllers are both at the HTTP layer, and I see no reason why event listeners should be excluded from the HTTP layer, as long as they're not mixing in concerns from other layers as well. &gt; As for your example: why couldn't you do the same by using a decorator? Since controllers don't typically implement an interface, I don't believe they can be decorated in the proper usage of the term. Middleware is the closest thing a controller can (or should) have to a decorator, in my opinion.
Just because Wordpress does something doesn't mean that something is probably secure: http://www.cvedetails.com/vulnerability-list/vendor_id-2337/product_id-4096/
If you had the password committed for some time, consider it already exposed, and just create a new password. You can leave the old password there or delete it, it doesn't matter, because the old password should not reveal any information about what the new password is.
For API documentation with code examples. When you need to show and run the code at the same time. 
This is true and VERY VERY IMPORTANT. MySQL in default does not permit users to connect remotely unless config to do so. 
Elasticsearch 
I setup a VM with PHP 7 to try out some of my applications this weekend, but I just realized that APCu isn't available yet (from what I can see, nobody has even started porting it over). Most of my applications run on a single server, and thus heavily rely on APCu. What does everyone else use? Setting up Redis / Memcache seems overkill. Edit: All my symfony projects also rely on APCu (doctrine query / metadata cache, etc).
Look its heartwarming the Project lives on, i get it, but in the end of day, i work with it, with v2 and v3, on really large projects, with no ORM and templating and feel the gravity and it just irritates me that the 4th comes along and says -- hey were just like 3 but with more swag
phpdotenv keeps config values out of source control, and makes it easier to have different settings on different environments. That's its purpose, and is a great pattern for doing that.
How would that work in production? I mean the key has to come from somewhere when the app is running.... I mean if the server can decrypt the php, an attacker who has write-access on the server can write php who is able to decrypt the config anyway. I'm really curious. I guess you could do codesigning and then it would be safe, but there is no support for that from hosters or the php developers.
This looks like a WordPress project unless I'm mistaken? Back when I used to use WordPress, I tried to think of a way to get all these definitions out of the `wp-config.php` and into a file I could ignore with version control, and [here's what I came up with](https://gist.github.com/mikefrancis/c41944fd0028928ab313) By no means a silver bullet, but if it helps you or anyone then great.
I'd use it but its name brings back slightly bilious memories for me
It's a necessary evil. you can't really do anything about it. I think FTP Access to the server is more dangerous. If the attacker gets write access, he'd be able to write to the DB regardless using php functions. - Don't run phpmyadmin on your server without additional security (htapasswd password prompt with a different passwort than the db user). - Only give the db user access to the database of the app - Don't allow remote access to the db for the user (meaning only the webserver can connect with the mysql server) - Don't reuse passwords elsewhere. - Don't add the config file to the repository
I'm of the belief that if you call it the "autoloader" it should do nothing but autoload. If you need magic to appear somewhere in your code, make sure you include a "magicgenerator". This will help developers who inherit your work to not go crazy because of all the autoloader magic.
So putting password in cleartext is generally if you can avoid it a nono. The more steps you create that cause whoever it is trying to hack or extrapolate information from your application, the more work they have to do, the harder it becomes for them to execute. So sometimes simple obfuscation is enough to stop potential attackers, especially when they have direct access to the machine. Also consult https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet owasp is the standardization used for most pen-test companies.
That's pretty much what I mean. If it's up, it's assumed gone.
Yeah, I suppose, but at $5 a month I kind of forget people still use managed hosting.
Once again, this is where Wordpress sets a bad precedent. It's the first exposure to development people have, and the install guide says "here's how to get SQL setup properly: Grant everything".
&gt; Why would you allow users to run their own code on your server without any form of escaping? Good point. I only allow my users to run fully escaped code on my server.
Whatever your thoughts on the framework, the ouzo 'goodies' are pretty useful on their own. https://github.com/letsdrink/ouzo-goodies 
&gt; But if someone is able to read your config.php source code, then chances are your MySQL password is of little value because the someone has already gained significant access to your server. &gt; Not really. There was a bug two (?) years ago where you just needed to add a certain GET parameter and you could read the PHP source of any PHP file that was running either a certain version of PHP or Apache. Also your webadmin can very easily mess up Apache to serve your PHP files as ordinary text. It can and does happen.
But you shouldn't run MySQL on the same server as your webserver. Keep them separate.
PHPDocumentor may be useful here, or massive overkill. If the comments are docblocks in the test files, it should be reasonably straightforward to use reflection to pull them out and then dump them into a text file somewhere. If they're inline... it's doable with the tokenizer but you really don't want to go there. 
Why is this article punctuated with memes? Some of the phrasing used made me think I was having a seizure.
A long time ago, I used to have a templating system that did something like: &lt;?php class Template { private $vars = []; private $template; public function __construct($tpl) { $this-&gt;template = $tpl; } public function offsetSet($key, $value) { $this-&gt;vars[$key] = $value; } public function __toString() { // Do some bad regex conversion of twig/smarty-ish to PHP // Extract the scope vars to local variables extract($this-&gt;vars); // I forget the exact ordering of this, but it used to allow nested // Templates as well by putting stuff back in the buffer ob_clean(); eval($this-&gt;template); $tpl = ob_get_clean(); return $tpl; } } Eventually I 'upgraded' to including the template directly, still pretty bad. Felt rather clever building a poor-man's Smarty in a single class though :-)
Well no because you can actually better test your system with mock env configuration and to share your configurations with other language... I think putting all of your configuration in a .php file is an anti pattern in a high level way of looking at things.
You should look into [PhpStorm](https://www.jetbrains.com/phpstorm/). It is the best PHP IDE by far. Source: me.
While there are many ways to accomplish what the trait does, I prefer ease of use to a ever so slight performance hit by using debug_backtrace. The real performance hits are running the requires and ensures closures and cloning the object. I have revised the code to only clone when an ensures contract exists as only ensures contracts are bound to the current object and can check the state of the object. I don't believe I have painted myself into a corner with the use of debug_backtrace. The maximum trace it generates is 3 levels deep and the use of it saves the developer from explicitly typing method names and manually passing parameters to all the requires and enforces methods.
Pretty much this. Ideally the contracted class would be used in place of the original class so it would be named semantically. However another use case would be to inject it in place of existing semantically named classes so adding Contract at the end would also make sense.
I installed FOSUserBundle in my app and had to enable the translator in app/config/config.yml to get the button and field labels to work correctly. Now when I look at my pages in debug mode, i can see missing translator messages everywhere. Will this be a problem in production, or can I just ignore it? This app is an internal tool and will never need to be internationalized.
Cluster servers you mean? Does this implementation also applies in small scale database systems? 
/u/krakjoe has been doing a lot of PHP 7 porting work for his extensions recently, so there's a good chance he'll get around to APCu sometime soon as well :)
When you test what's a performance hit, make sure to have a realistic stack depth and not something close to the root. In a real app you'll have a stack that's dozen levels deep and at every level up the chain you have the engine pass you the caller and arguments. In the context of running a batch job on the command line, I'm sure it doesn't matter. Say, some data import job which you hinted at, I think. But for websites where the request should be done as fast as possible, people who see how your library works will avoid it IMHO. Just saying, not that you have to change it. Your component, your rules.
It's idomatic JavaScript (which doesn't have explict casts) - i'd guess that's where it comes from.
If you are familiar with Laravel I would try to build it myself. It doesn't look too complicated + you could put it atop of L5.1. Allthough if you're tight on a schedule just invest the $18 and try it out. If it doesn't fit your project, refund your money via "14-day money-back guarantee".
Is it possible to use Zend or Doctrine Hydrators without actually using Doctrine or Zend? i.e. I want to be be able to use it to just 'hydrate' a load of data into objects, and that data won't be coming from a DB. And if so can someone point to a project that does it so I can see what is needed to set it up?
This is a big helping of a can of Spam, right? Yummy! (Reported). Edit: thanks for deleting, freelancerharry. 
I do see what you mean. I am well aware that my contracted class is around x4 times slower than the non contracted class on a normal usecase. I do believe that it is more suited to background processing jobs to maintain data integrity than for say validating user input.
Yep, every new application, create a new DB user, and ideally only write record permissions, not write tables. Obviously even better is having separate database instances for each application but that's not necessarily realistic / ideal for every situation.
This suggestion would make sense if the topic was `shell_exec()` not `eval()`
Agreed. I couldn't up-vote this more. I have used CI for many many years now. I have an eye-watering huge enterprise application with over 150 tables in the database and into the billions of rows of data. It's a crazy app. For now its staying in CI. But I'm always wanting to move it over as I'm missing a lot of ways to refactor the code due to CI and how it works. I'm sorry to break /u/Alphapixels bubble. But CI is legacy code. The very fact that PHP 7 is around the corner and they are not targeting that as the utmost minimum just shows it. Instead they should release CI 4 as being forward thinking and then just release security fixes to CI 3 if "enterprise" or "shared hosting" users can't move on. Really, I shake my head. Shared hosting should be wiped off the earth. There is AWS and digital ocean now. There is no excuse.
You have to check your 'locale' under parameters.yml and make sure that's your translator fallback. If it's not working in app_dev.php, it won't work in production. What did you configure at parameters.yml? If you can't get (or just doesn't want to get) your translator working, just [override FOSUserBundle templates](https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/Resources/doc/overriding_templates.md) and draw your buttons manually.
My locale is set fine and the translations for FOSUserBundle are working fine as well. The problem I'm having is I didn't write translations for all of my other forms and in the profiler, I get alerts about missing messages. I just want to know if this will cause any issues with performance or if this is something I can ignore.
Have a look at Behat or maybe PhpSpec. From your description Behat (story driven behaviour testing) is what you want. You start with a feature (a formalized story) and generate the test by that. It depends on how you implement it, but the features can be used to describe human interaction and would be a good candidate to be stored in TestLink. In [Behat 2 ](http://docs.behat.org/en/v2.5/quick_intro.html) (Behat 3 is the current version, which I have not looked into yet) Each line of the feature is matched against regular expressions, which determine the method to call and the parameters. We ultimately decided against Behat because those defining and those writing the tests were the same people. 
It looks promising, I've read their documentation a bit and it seems cool, like a codeigniter version of laravel if that makes any sense to you haha but it sure looks good, and light. Maybe I'll give it a try. (Their website is pretty too :D )
Translations from FOS User bundle work just fine, that is not the issue. I have other pages with forms on them, completely unrelated to FOS User bundle, that are complaining about missing messages. 
I'll reply to it even though it's been over a month. PostgreSQL is pretty much like MySQL, but it supports different features - one of them being recursive queries, which allows for querying a comment with all its respective children and their respective children - and so on. MySQL doesn't support such a query. There is a nice [tutorial over here](http://blog.timothyandrew.net/blog/2013/06/24/recursive-postgres-queries/) on using recursive queries with PostgreSQL. Like someone else said below, the usual NoSQL model is probably not a good choice in this scenario, as it has no relationships or JOIN clauses (you would have to build the graph structure in your app and would probably need to dispatch many, many queries). Maybe a GRAPH Database (such as [ArangoDB](https://www.arangodb.com/)) could suit your needs. I can't really say what's the best for your longterm, but it's something to consider.
async_function() {} 
I think people will use it because of preference and general knowledge of it. Not to mention, there's plenty of programs and IDEs that have built-in function documentation that make using (almost) any library/framework a breeze.
Wat? It's PSR-4.
It warns those who are oblivious to sarcasm. 
&gt; I'm the part of that "Satan" creature Congrats with [new monument](http://www.vice.com/read/heres-the-first-look-at-the-new-satanic-monument-being-built-for-oklahomas-statehouse ) of Yii2
Not really replacements. A PHP parser is made complete when paired with a PHP evaluator, so they complement each other As for the the Symfony Expression Language - it's a baffling invention. Script in a script, except with severe limitations. **EDIT**: Also ahem: https://github.com/symfony/expression-language/blob/master/Compiler.php Guess how you use the PHP output of that compiler. Either you save it and require it, or you eval() it.
&gt; A PHP parser is made complete when paired with a PHP evaluator, so they complement each other. True, but OP used it as just a parser in his first example. &gt; As for the the Symfony Expression Language - it's a baffling invention. Script in a script, except with severe limitations. I quite like it. The limitations are one reason why it's better than eval(): It's secure. It suffices for 90% of the use cases where you just want to evaluate some expressions, not a complete code block. It's also extendable. I used it to create a DSL for an application where users could edit expressions/formulas. 
Using a framework like this and Laravel is the 2nd best way to learn that Activerecord is evil. 
Agreed. Simply selecting all text with an onclick event would be sufficient.
&gt; Overall it ready as leagular process of learning. ... wat.
I love Yii. I think that, really, you could replace Yii in your post with almost any other framework and say about the same things, coming from someone who doesn't know that framework. I would agree, though, that the documentation (as far as how-tos) is a little sparse for Yii2, but they *do* offer a complete API documentation that breaks down each class.
You need to identify your inputs with names or ids, similar to how you have them with the &lt;form&gt;. 
The first thing I see is the line if($_POST['submit']); Which I'm not even sure how php will handle. I'm thinking it has no effect... it basically says "if this thing is truish, don't do anything", and then continues with the script. If you want the rest of the stuff to run only if it is posted from the form, you'll need curly braces around that part: if($_POST['submit']) { // stuff } Figuring out what else is going on, you can do `print_r($_POST)` to make sure you know what post looks like when it comes in. Is it empty? Then print out $body right after building it to see if it looks right. Basically, print out things along the way to make sure you know exactly what is happening at each step. When you find the step that isn't acting right, it'll be easier to figure out why.
This doesn't even taste minty or give you a buzz.
Not sure what you're talking about, maybe you're just frustrated. The best thing about Yii2 is that it doesn't force you to do anything, you can opt out of nearly any feature or convention to use your own custom solution.
&gt; Bluetooth headsets So many unused BT headsets at home. Even supposed 'good' brands like Plantronics. 
Use tokenization
The cache implementations are easy swappable, and I have changed it to a file system cache for now. I was just trying to get a realistic benchmark between the beta and production servers. Will wait for APCu.
Nice typo :) Regular, of course.
Add to your php.ini: [XDEBUG] xdebug.remote_port=9000 xdebug.default_enable=1 xdebug.remote_connect_back=1 xdebug.remote_handler=dbgp xdebug.remote_enable=1 xdebug.remote_autostart=0 zend_extension=/usr/lib/php5/20131226/xdebug.so Change `zend_extension` to location of your file. Set this up: https://www.jetbrains.com/phpstorm/marklets/ Make sure your firewall isn't blocking the ports.
Is there a way to set a break point w/o having the code remotely on my computer (i.e.: remote editing)? If not then hey. I think that's the biggest hiccup I have now that you provided that.
Ah, you mean that :) ViewAction is a handy thing for static pages. Accepting path instead just name is the mistake we've fixed. It wasn't intended to work like that.
If you don't like GridView (which I only use for the administrator, never for the end user) you can use ListView or define your own widgets (which is what I do for the end user). The learning curve for Yii2 is tremendous because it uses a pattern and architecture for everything so simple things like relational data seem very hard to achieve at first. I promise after you do it successfully once or twice you will do it seemlessly, like if all the data were just being generated like magic. What parts of the docs you don't like? What would you expect to see when you browse the docs?
[Legular.](http://31.media.tumblr.com/2544ccfa58bb5d1230af943286f09088/tumblr_moqm3d4vF21r319g4o1_500.gif)
You'll have a much easier time provisioning with puppet than bash. Check out: [PuPHPet](http://www.puphpet.com)
Are there any common practices on how to get rid of helpers with static functions? I'm refactoring an old procedural project with PHP 5.2 that is using the static Utils class.
I really don't mean to "pimp-out" my own projects or anything, but it seems like you've described the intention of the creation of my project: **[Incoming](https://github.com/Rican7/incoming)**.
My only issue with yii is the quality of 3rd party modules....nothing else. For small to medium scale projects is just fine!
If I hired someone to work on my project and then they basically ignored the framework, did everything the hard way, because they where too stubborn to learn something different to what they know... I'd fire them.
It's not always the best decision. It takes time to learn framework and actually gain from using it.
You can stop acting like an ass. People like you is why they talk so much shit about the PHP community. Stop being an ass, you're not the best here and while I might not be as experienced as you, it doesn't give you the right to be so condescending. Regarding Ouzo: I simply posted about a new framework that seems to have potential. I have dealt with Symfony and know it's uses, thank you.
I don't use CodeIgniter at all but have made a few applications with it that still run today. And they've worked. They haven't broke. I don't like CIs principles, bro. I hate dealing with the god object, that is why I don't use it anymore. But I do have to admit, it does one thing and it does it well. Also, targeting PHP7 as minimum would be absolutely idiotic, not everyone will update to the technology as soon as it comes out. Keep 5.4 as minimum and it would be reasonable. If Laravel changed the minimum to PHP7 as soon as it came out, it would be chaos. Same applies to CI.
Storing it in a PHP file is not bad in and of itself, but then you need to make sure you're not committing that php file to version control. Your sensitive credentials shouldn't live in a code repo.
This looks pretty nice, I'll definitely check it out further. Most of the php Varnish libraries I've seen so far have been messy to say the least.
I personally really like Yii, and people suggested GridView so you couldn't have to duplicate functionality. You can easily style tables or rewrite it yourself
Reported as spam.
And look into `PDO::FETCH_CLASS` for getting back Movie objects from your query.
&gt; Is it possible to use pre_replace to use on urls? Yes. If you ask questions you should be specific with what you tried and what failed you. You should have posted this to /r/phphelp anyway. Finally, have a look at (good starting point): http://stackoverflow.com/a/17030234/2912456 
Nothing observable on my end. You can always go back to a previous version no problem - I do it every so often when support asks me to use a test version. Just dump the old version's java and config files into the installed directory and off you go.
:(
As you see in the link there are multiple way to represent a youtube video link. The easiest solution (if you do not care about any other information from the link) would be to grab the video-id from all of them and use a normalized link format for your tags: Example: http://3v4l.org/E5JRO (regex slightly modified to not anchor at the start of the line) 
If they manage to do, again, the most complete and useful documentation, they may become big again.
I'd start to question your JDK installation if I were you. 
There are three reasons we have types: 1. Using best (and typically most compact) representation. A UTF8 string float is larger than a double (except for values with a very small number of significant digits, at which point you can use a single or half-precision float). 2. Interpretation: you can compare floats as floats, but if you compare them as strings it will yield strange results sometimes (or always). 3. Constraints to avoid unintentional errors. If you import everything as strings, you risk importing a string that's not a valid double. The last one can play a bad surprise on you when you decide to use floats one day, because conversion will fail and whoever could fix the source data may have moved on and unable to correct their mistake. So sure, use strings, but validate them carefully to be doubles... and... well if you validate them to be doubles, you might as well use double columns.
It's a hell of a lot faster for me.
Feel-good quote of the week: &gt; Anyway, my work on PHP is very much about boosting performance. And here PHP has left Python and Ruby far behind. So… Critics are criticizing, while we’re working. 
Not really seeing any performance issues for me.
I like the typedphp project, though immutable.php's quite a bit different. typedphp's running its functions against an `array`, for which there are quite a few available builtins already. I found myself frequently reading on StackOverflow and IRC questions for functions I took for granted that weren't implemented for SplFixedArray. Since a fixed array seemed like the best closest thing to an immutable array, and these functions were needed for an immutable array to be at all useful, it seemed like a natural next step.
Hey, man, I was going to help OP, but I'm also very sleepy. Let's do it like this - whoever wakes up first helps him.
At first glance it looks ok. Which mail server are you using? I normally go for Postfix, easy install and easier config that Sendmail. Have you checked the mail queue?
The only issues I'm having are with PHPStorm recognizing Twig and the Exception class. I'm not wholly convinced that this isn't a composer autoload issue.
Your "name" variable for the email is "mail" in the form, but the PHP script is expecting "email", fix one or the other.
Thing with your library, you list features like "filter complex input" and so on, yet your examples don't show any of that. IMHO you should have an example where you validate, say, a simple realistic form from start to end and hydrate it to an object.
I use environment variables for this type of stuff. For added security we have different credentials for our different environments (local, dev, stage and prod) so in each environment we set nginx/apache-level environment variables You can set environment variables at the user level in the ~/.bashrc file export MYSQL_HOST=the server name export MYSQL_USER=mysql user name export MYSQL_PASS=mysql password export MYSQL_PORT=3306 But these will only be available to the currently logged in user, which is probably not the user the apache or nginx runs under. You can set them in apache using the following &lt;VirtualHost hostname:80&gt; ... SetEnv VARIABLE_NAME variable_value ... &lt;/VirtualHost&gt; Or if you're running nginx you'll want to add the following to your .php location block fastcgi_param MYSQL_HOST "localhost"; fastcgi_param MYSQL_USER "root"; fastcgi_param MYSQL_PASS "password"; fastcgi_param MYSQL_PORT "3306"; then define ('DB_USERNAME', getenv("MYSQL_USER")); define ('DB_PASSWORD',getenv("MYSQL_PASS")); define ('DB_HOST', getenv("MYSQL_HOST")); define('DB_NAME', 'foodDB'); Now you don't have to add conditionals to be able to deploy your config and you can safely commit the file to a public repo or put it anywhere and it contains no sensitive information. Finally, you want to never, ever, ever, provide root credentials to any application. You should set up a general applications user with limited permissions (Usually INSERT, UPDATE, DELETE, SELECT for my prod environments) or if your application needs more (e.g. wordpress or any cms) you would create a username for the application and then give it the perms it needs for only the schema(s) it needs them on (e.g. GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, INDEX, CREATE VIEW, SHOW VIEW to 'wp_user'@'%') This is the practice I enforce in my department. You can set an environment variable in apache doing something similar to below
That'd be a welcome change in my book
Haven't seen any performance issues but I had to rollback to phpstorm 8 because phpstorm 9 doesn't save shortcuts that uses special characters for now edit : and editing javascript often crashed it
agree with all of the above, as a footnote it is my understanding that DOUBLE and FLOAT both carry rounding error inaccuracies, therefore you should use DECIMAL instead if your values represent some currency or something else you might ever want to perform some math on. MySQL is extremely powerful when it comes to number crunching so storing them correctly now will keep doors open in the future. 
I know concrete examples are missing from this discussion, but I'm curious why would you make un-static the functions a Utility class? Where said static functions would have a pure utilitarian role: like getting the size of a directory, or an environment variable.
Backdoors are too easy to create, and can be secured against on the server itsself. I would run it in a sandboxed server if I where you. Test against all backdoors and report the results. - or maybe that's his plan all along.
How do I do that? 
Pastebin the file. If it's in PHP, it should be pretty obvious what it's doing.
It seems to be coming from nearly all of the .php files on the site - pick a random one?
Only problem with PHPStorm 9 I noticed is somehow it switched all my projects from utf-8 to win-1252 encoding. Seriously, wtf JetBrains? Why?
This looks a lot like https://github.com/cakephp/collection . It was built with the same ideas in mind: having immutable data and reusable traversal algorithms. One advantage of that implementation is that it can work with both arrays and iterators as input, and that it features a very extensive set of traversal and utility methods. I have invested quite a bit of time in that library and I find it pretty solid so far. It has also changed the way I think about loops and solving problems.
As long as the make annotations an actual thing and not meta data comments then I'm very excited for that too.
Thank you for your detailed advice! I will use it when moving user-related functions to the user model. Also I hope this will help me with writing unit tests: one of those static functions is registering new user (if it isn't exist) in the database, so I'm hoping that I could mock it somehow.
Definitely not in 7.1. I _hardly_ can believe that would be achieved in only a year. (saying that from a core dev pov)
For me is Netbeans :-)
About a week ago, I saw interesting use of eval in this video: https://youtu.be/8WUcfUU_r4g?t=5m23s I think that what he said would be applicable in PHP too.
&gt; he's working on the "next Facebook." What's wrong with his current Facebook? 
Not evil enough :)
I had to blow some steam, so the rant was without any logic and connection. Generally, I pissed about everything and nothing in particular, and it was a product of short deadline. From the comments, I can see that I am missing a lot of things and that I should learn the framework in greater details. Which I will when I catch some free time. 
Quick question :D - how can I run a single (older) migration? 
I swear I had an alarm set, but I slept through it somehow. Damn it. Next time!
I had the same issue!!
Both approaches are valid, so the choice will depend on many smaller details which we can't guess from this description. "Products" doesn't have to be one table. You can have 1:1 relation with the "traits" of a product in other tables and join them for queries. This would mean when you update, you don't duplicate all fields, but only those in the changed trait. By observing which fields change most, and how they group logically, you can factor your schema accordingly. Say you can have one table for versioned pricing &amp; discounts, one table for versioned descriptions and photos etc. Then your product table becomes: Products: id, pricingId, descriptionId, quantity. I've put quantity on the main table because you might want to NOT version that particular field, it'll change all the time and there's no particular value in storing old values (unless there is - only your boss knows). Then a product becomes a collection of trait ids at the time of making the order, which is a lot more compact to store in your orders "data" field. So as you see, you have control: what to version, what not to version and which part to duplicate. Ultimately it also depends on your architectural design. Orders can be seen as a separate service so in this case saving item snapshots independent of the Products table may be preferable so Products can change more easily without complex outside dependencies.
I wonder whether people on other professions also blog about this.
try Komodo ide. PHP storm is Java based.
Looking back on the guys posts I can't see much outside of 'dude', 'noob', 'super stoked' and general CI bashing, he claims to be 40 so no need to hold back, f*ing doughe bag 
I'm using it on Mac OS X 10.10 and I didn't notice any performance issue. Tell us your configuration.
Just don't benchmark it against PHP arrays, because then it gets ugly.
Not sure that would solve our problems as it would just mean we'd have to have some extra links setup for any old orders to link to that audit table as well as / or instead of the products table.
Really the products table only contains the title, description, brand id, tax id and that's it. Pricing is all handled via the variants, our clients are going to want to potentially off the Large Red Version of Product X at a different price to the Small Blue version of Product X. For me, I feel, one of the main issues comes with the Custom Fields plugin as that's the only code out of all of it so far that's in place already as we've used it on other sites. And it's just not been setup to handle a revision "is_deleted" type option. It's a plugin we've developed to allow us to set behaviors on models and allow those models then access to custom fields. E.G. a blog post could have custom fields, and we as the developers can setup the custom fields attached to blog posts so the client can then login to their side and see all the fields they can enter that we've just setup.
I'm with you there. I actually can't comment on Yii 2 since I have not used it, but I have to use Yii 1.x at my job (been here for over 1 year using it) and I hate it. I would not trust anything coming from the Yii team. Although I have a feeling most of the pain comes from how this company is using the framework, maybe not the framework itself. But I feel like if you try to code like Yii does in your application you're barking up the wrong tree (e.g. using Static functions everywhere which becomes a nightmare when you want to write unit tests). I think even the simple pattern of Book::model()-&gt;findByPk(...) is horribly wrong because now you have a static function Object::model() that you need to create a middleman hack in your unit test environment in order to mock it. And NO, I don't want to connect to any database (memory or otherwise) in my unit tests. Another problem, using a cache (e.g. memcache) on top of the database opens a database connection even if it is not used. So if memcache can support 1000 requests per second and MySQL can only support 100 requests per second, then your bottleneck becomes MySQL because it opens a new connection for every request anyway. There's a workaround for this but you have to use custom caching before even going to the framework. Edit: P.S. I'm a Symfony 2 fan :p I don't think I have seen even one static function call in Symfony yet, and everything is customizable, mockable, well designed, and cleanly coded. I even prefer the bracket positioning and whitespace formatting of Symfony over Yii. Here's an actual code snippet of CActiveRecord: public function __get($name) { if(isset($this-&gt;_attributes[$name])) return $this-&gt;_attributes[$name]; elseif(isset($this-&gt;getMetaData()-&gt;columns[$name])) return null; elseif(isset($this-&gt;_related[$name])) return $this-&gt;_related[$name]; elseif(isset($this-&gt;getMetaData()-&gt;relations[$name])) return $this-&gt;getRelated($name); else return parent::__get($name); } And my personal favorite (I'm not kidding, this is in the actual source code): protected function sortData($directions) { if(empty($directions)) return; $args=array(); $dummy=array(); foreach($directions as $name=&gt;$descending) { $column=array(); $fields_array=preg_split('/\.+/',$name,-1,PREG_SPLIT_NO_EMPTY); foreach($this-&gt;rawData as $index=&gt;$data) $column[$index]=$this-&gt;getSortingFieldValue($data, $fields_array); $args[]=&amp;$column; $dummy[]=&amp;$column; unset($column); $direction=$descending ? SORT_DESC : SORT_ASC; $args[]=&amp;$direction; $dummy[]=&amp;$direction; unset($direction); } $args[]=&amp;$this-&gt;rawData; call_user_func_array('array_multisort', $args); } 
Don't know about that. But I remember during college my accountant friends always asked why my engineer friends and I gather with our CPU's, huge CRT screens, router/hub, beers and snacks just to fool around with a new linux distro or a programming hackaton. And they didn't saw themselves having all nighters practicing their balance sheets and income statements.
Give https://serverpilot.io/ + https://www.digitalocean.com/ a look. I think it will give your employer the comfort of a GUI that they can understand, while allowing you to configure servers as needed.
Despite being on Yosemite, I resorted to using the 'standard' build (the fonts on the Yosemite build were horrendous on my Retina MBP). I did modify the memory allocation though. Go into Applications, Right click PHPStorm, Show Package Contents, then navigate to Contents/Bin and edit 'phpstorm.vmoptions'. Change your values to raise RAM limits: -Xms512m -Xmx1024m -XX:MaxPermSize=450m -XX:ReservedCodeCacheSize=325m -XX:+UseCompressedOops Immediate speed boost for me.
https://github.com/fruux/sabre-katana
Excellent! This is exactly what I needed!
I've actually listened to a good TED talk on the subject and ever since I've been thinking about motivation hence this post strikes close to home. The talk in question: https://www.ted.com/talks/dan_ariely_what_makes_us_feel_good_about_our_work?language=en Worth listening.
Also, it would be nice if it didn't check out the project, only setup the environment.
There are email settings in php.ini.
I haven't worked with Saltstack. I've heard it's good, but I sort of went full bore into Ansible and never looked back at Puppet again.
Yes i have. The worst is cpu levels. Always at 50 %
The point of the project is to be a boilerplate for OctoberCMS, so checking out a new copy is what it is supposed to do. It does, however, only set up the environment and run the migrations if the www project dir already exists. This makes the environment reuseable for your project specifically.
I'm sure you are decent at your job and because you are interesting in technology and reading tech articles like this that assures me that you are. It probably doesn't make it easy if you work with "non-techie" people. In my office (I'm a junior btw) everyone is better than me. Even the directors of the company are ex-developers and have written some of the code which I change on a day to day basis. Believe me in my environment you never lose the incentive to want to learn more.
It sounds to me like Event Sourcing would be a good fit here: you'd save all the changes done to your data on each save instead of saving the outcome of each change. By replaying all these changes you can basically jump back and forth into the 'timeline' of your objects.
I'm not objecting to anything you said and immutables definitely have benefits in some areas, but some minor remarks: 1. There's nothing inherently more "spaghetti" about for loops, and we could perform functional operations on arrays: $bars = []; foreach ($foos as $foo) $bars[] = $foo * 2; $bars = array_map($foos, function ($i) { return $i * 2; }); $bars = $foos-&gt;map(function ($i) { return $i * 2; }); 2. PHP7 optimizes list arrays so we won't need SplFixedArray for this purpose soon. 3. There's no reason to use parallelism in PHP. If you want performance you can get more out of a single Java thread than 16 PHP threads. We have to also consider arrays in PHP are passed by value, which makes them a lot more "functional" than, say, arrays in JS (which are passed by reference).
Oh! I feel dumb now... I just read it as puppet and didn't click the link. Sorry about that! I appreciate the clarification.
PHP7 already has delegating coroutines and AST. Implementing async can be done by transforming async functions in the AST to such coroutines. In other words, it doesn't require changes to the runtime, it amounts to little more than syntax sugar for what PHP7 can already do. So who knows...
5.5 is already EOL as well LOL.
Programming is not accounting. It has a creative element, and a practical element, so it's closer to, say, carpentry.^1 Like creating a beautiful cupboard for fun. Not unheard of. ^1 Technically there's creative element in accounting too. Managing the financing of a medium to large company has a lot of interesting decisions to make and people do read and research this stuff for fun during their free time too. But in the simple case it's a very mechanical task.
It looks like the RFC hasn't been touched since November. Has there been any recent activity pushing it forward? Would it be a potential candidate for PHP 7.1?
Definitely, thanks! 
It's a tough spot, since I've definitely run into minor incompatibilities more than a few times. The flip side is that they're always quite quick to resolve issues as they come in. e.g. a couple days ago I found that an SplFixedArray::fromArray() could take minutes to run on larger datasets, but the issue was fixed hours after opening: https://github.com/facebook/hhvm/issues/5671#issuecomment-120741410 Of course, if I'm running in production, the time to get an individual fix doesn't matter so much as the time to put that fix into the next release, and then package that for my distro, then I need to run the upgraded HHVM on staging for a couple days to look for any regressions that my test suite didn't catch. I like HHVM quite a bit, but with PHP7 on the way (which I still don't think is nearly as performant in practice, it does pick a lot of the low-hanging fruit to push the zend engine from suicidally-horrible to pretty good), performance isn't enough to use HHVM. Hack and builtin XHP are the two main draws for me. XHP's easily the best, least-kludgy server side templating I've ever used; these days, if I'm not using XHP server-side, my response is usually just `json_encode($response)` so ReactJS can handle it client-side. Hack I like since nothing I write has to be 100% hack; I can stick my strict business-logic and async file read/writing into some `&lt;?hh` files.
So did I. The small but incremental memory usage (leak?) was getting annoying. Then the "Failed to initialize central HHBC repository" error was the last straw. I'll just wait until PHP 7
For some reason modern developers have had the mantra of "tables are bad" to the point where they don't use them for tabular data. I seen unordered lists abused to fit the same purpose.
This is above my level, I'm just starting to get into db design/management. But, maybe that's a good thing to give a simpler look at it. I would add two fields: First would be a bool for "current", and the other would be "revision". When looking for new products you would filter by if current, and then when saving the order save the revision with it. 
Wait... You know about... [301 redirects](https://ladygeekgirl.files.wordpress.com/2012/01/jr9fangirls.jpg)?
dont use mail()... use a proper mail library like SwiftMail.
Don't forget async/await. Hack + async/await + xhp. Killer features.
It will pass. Just stick with it, just don't use parts that really don't fit your needs. There is a learning hump, for me it was at about 3rd to 4th week, after I've finally got the general grasp on how things go and adapted to the docs (and started to read them carefully), I just steamrolled the hell out of the project I was doing on it. From that time forward I've build and re-written a god damn behemoth of a project with such an ease, that I never had much trouble. Just remember this thing: Yii has a superb object model. Like legendary stuff. Override what you need, make/replace with our components, start using Gii and write your own generators (adapt what community has to offer), check community packages. Soon, you probably going to change your mind :) It's not perfect or suits any type of project, but API's, CRUD's, administration panels and custom frontend is what this framework was built for. It's a great tool if job is right for it. Just know when not to force the usage of the built in stuff.
Not sure if I understood you completely, but if you want someone to set a breakpoint on the remote machine (and for it to connect to your machine when it hits a breakpoint) they need to know what line they want to set a breakpoint on. If that is the case and if they can edit the code remotely, they can call the function `xdebug_break();`on the line they want to set a breakpoint on, and then execute the code - it will connect to your machine. Example: xdebug_break(); $foo-&gt;bar(); You can achieve pretty much anything with XDebug since it uses a [documented protocol](http://xdebug.org/docs-dbgp.php)
Looks nice, thanks!
I know I value different things than other people. I value learning new things: new languages, new ways to use old languages. New skills, just in general. On some level I always feel like an idiot because I'm always doing things I just got started on recently. That process of discovery and making new connections is really rewarding though. My primary motivation, however, is money. If I had enough income from a source that did not require labor I would never build another website ever again. I'd never take a call from a client. I'd never edit another poorly worded about page. I chose this line of work because it constantly changes and I can learn new things every day. Even when the projects don't change that much, I can do them in different ways. I take work entirely based on which projects will make me the most money for the timeframe it will take me to do them.
order_items_data is the better approach. Think of it this way, when you create a line item, you are seeding it with product data. You can keep updating it until the order is placed (to get the most recent price), but after that the data is set in stone and the line item owns it, not the product. We do something similar in our own ecommerce package (Drupal Commerce), and making the actual copying configurable is what we're doing for 2.x
I only got so far as 201s. 
See. I use an i7 with 16gb of ram. There's a major disconnect there between our experience, I'm sure. 
[**@voodooKobra**](https://twitter.com/voodooKobra): &gt;[2015-07-15 00:00:51 UTC](https://twitter.com/voodooKobra/status/621107117219561472) &gt;Dear PHP developers: Send me any StackOverflow questions whose answers you're thinking about implementing. I'll tell you if it's secure. ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/3dbiyl%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Probably forever.
Well, the purpose of this exercise was to search and destroy existing bad advice and clean up the ecosystem. I suppose some general questions are okay, as long as they aren't the majority. My opinion of phpseclib: * It's very low-level and not something I would entrust to anyone but a cryptography engineer (i.e. `phpseclib\Crypt\Base::encrypt` doesn't authenticate ciphertexts, which any crypto library whose audience isn't power users should) * It uses `strlen()` and `substr()`, which is brittle to `mbstring.func_overload` misconfiguration It's probably okay in general, but it's something for a security engineer to use to build a safe abstraction, rather than the safe abstraction itself. Aside: if anyone needs a full code audit, penetration test, or custom development with security in mind, those are professional services that [Paragon Initiative Enterprises](https://paragonie.com) (my employer) offers.
Is this from Stack Overflow?
Nah, just me having fun.
Java is fast enough 
Have some upcodes, kind sir! 
What's your stackoverflow name? Can we @name you in a comment?
http://stackoverflow.com/users/2224584/scott-arciszewski And yes, that's fine too.
The guide is essentially for people who probably are making a blog to start their writing career or something not use it as their framework.
One thing I see regularly: if ($var = $this-&gt;method()) // etc It's convenient, but I've seen *that* lead to some pretty interesting bugs, like: if ($var1 = $this-&gt;method1() &amp;&amp; $var2) People don't realize that `$this-&gt;method1()` evaluates, *then* `$var2`, leading to some unexpected results, since the developer writing that may intuitively assume the equality statement prior to `&amp;&amp;` will execute on its own. The reality is, PHP will start out (since there are no parenthesis) doing what it can to assign a value to `$var1` *and then* go to check it for "truthiness". Case in point on a plugin I worked on for SilverStripe: https://github.com/bummzack/sortablefile/issues/26 What's your opinion on this? Do you think it's an antipattern? I lean toward "yes" on that opinion, partly because it's unaesthetic (which is only minor on importance) but mainly because it can lead to sloppy code.
And mbstring.func_overload just makes the whole mess *insane*
OMG, I didn't know that existed, but that's a bad bad idea. So many potential subtle bugs, especially when you combine an overloaded strlen() with functions that expect the actual number of bytes, such as the length parameter for fwrite(). There's no way around it, you just have to ask yourself what the situation calls for whenever you using strlen() or other string functions, and use the mb_ functions when appropriate.
Not sure if antipattern is the correct designation but it is definitely sloppy. Do assignments before if statements that check their value. Explicit and concise code is easier to audit.
A bit unrelated but I noticed php builtin functions are being prefixed with `\` on your Twitter background image. This is the image I'm talking about: https://pbs.twimg.com/profile_background_images/578748780343795712/XjIKN6HK.png Is there any special reasons for doing this? if (!\in_array($algo, \hash_algos(), true) {...}
You currently can not. It's kinda against migration nature and purpose. If you'll explain why you need it, I'll add the ability to framework.
It explicitly refers to the global function, rather than looking for that function in the local namespace and then falling back to the global. This may be a microoptimisation, or some sort of security measure.
SO is a wiki, could you update the dodgy responses that turn up?
Sure. I'm still early in the process, so there are just a few on the list. But ones [FastRoute](https://github.com/nikic/FastRoute) (and the related [PHRoute](https://github.com/mrjgreen/phroute) and [Route](https://github.com/thephpleague/route)), [Aura.Router](https://github.com/auraphp/Aura.Router/tree/3.x), and [TreeRoute](https://github.com/baryshev/TreeRoute). I also thought I might use the router from the [Nette](http://nette.org/en/) framework, since much of its functionality is provided by components that can be used independently. However, it looks like the router may not be able to be used as an independent component. In general, I'm looking for a router that will be fast. That's important because the target application has a lot of routes. So, while I might look at routers from frameworks such as Symfony2, Laravel, or Yii2, my gut tells me that performance issues will lead me to be better off working with something that's not part of a framework.
Yeah it's a terrible way to work and we have actually overwritten each other's work before. Also tried explaining those exact points which you have mentioned, but they still won't budge on the matter. I have now found a new job where I know I will be happier. :)
In your PHP script you have $email = $_POST['email']; where as the name of input field you have used for email in your HTML is 'mail', so first make it same that is either 'mail' or 'email' at both places. Secondly you don't have used any condition that's why its redirecting in all conditions. You should use this code : &lt;?php if (mail()) { header('Location: thanks.html'); } ?&gt; 
Yeah that's the idea.
&gt; PS CodeIgniter is no fun. Can you recommend a more.. "fun" ;) framework to integrate bootstrap into? 
Thats what I found odd about their API, I'm used to seeing JSON format and how to extract the info through that way. I have spoken to the dev that did this and I think they were focusing on ecommerce formats that they never made it any other way. I have no idea how to make my own SDK. But I think I found the endpoints for their API, which is [here](https://github.com/codeswholesale/codeswholesale-sdk-php/blob/master/src/CodesWholesale/CodesWholesale.php). Now I just have figure out how this can be translated into Rails with the OAuth gem.
FYI: Symfony components are very decoupled. They are not "part of the framework" but all components put together make up the "full stack framework" aka the standard edition. This is shown by the multitude of projects that reuse the symfony components, you can view which large projects use which components in the documentation, for instance for the routing: http://symfony.com/components/Routing Some widely known projects that are using symfony components are: Laravel (many components), drupal 8 (mostly http foundation components), composer (mostly Console component), silex, ...
I need something straightforward that I can get up and running soon. But I'm having a problem with gettiing an environment running on linux :/. ORM?
If I may be more specific: With Flask/Django, you set in a virtual environment to install dependencies. Do you do this with PHP also? If not, how else? And how would you localhost it? Django/Flask has that integrated into it; With PHP, I guess you should use XAMPP or something? But at the very core, how do I set up the environment properly?
Thanks for the reply. I was aware that many of Symfony's components are decoupled, which is why I intended to look at the router. But it's a useful reminder for others to mention the decoupling explicitly. I'm sure I'll look at the Symfony router. It's just that, given what I've heard about Symfony performance in general, I'm not optimistic that it's going to be a good fit with my needs. There is a comparison [here](https://gist.github.com/harikt/7bbcd76105da40431713) of the performance of FastRoute, Symfony's router, and the Aura router (v2). It suggests that the Symfony and Aura routers perform about equally, but FastRoute is more than an order of magnitude faster.
Oh, sorry. I showed it to my boss since I wasn't to keep on downloading it and he said it was infected for sure. I think he pulled down the site and is going to try and fix it tomorrow. Thanks for your help though :)
If I accept user input in a text field and I want to limit it to 255 "characters", I should use the mb functions. Let's say a Chinese or Japanese user comes along, those character sets are not just one byte per character. If I end up doing a substr on the input, it will like result in corrupt data that will show up as question mark blocks (the character at the boundary). Maybe not a security problem, but definitely a bad visual experience. 
https://docs.codeswholesale.com/getting-started/ You can create an account to get access to their API. Presumably, and hopefully, they have their API documented so that you do not have to dig through another SDK just to figure out the endpoints.
Benchmarks are good, but they never tell the whole story of course. For instance `FastRouter` only just recently got support for optional parameters in the routes, this would be a blocker for me. But since they now support it, I would love to see some more benchmarks with this feature actually used in the tested routes. And if such a basic feature was already missing, I would imagine some more advanced features are also missing. So I'll be watching this post for a good soul who wants to put together a feature comparison :)
The fastest route is no route at all.
FizzBuzz
I have an account with them, the github I linked are their docs for the API. There are no other docs and I do have to dig through the SDK to find the endpoints.
On linux it's very easy to get yourself a web server with PHP and MySQL up and running. If you google &lt;Your Linux OS name&gt; LAMP Setup you'll find a ton of guides :)
Funny you say that because just about a year ago I did ask a candidate for a senior dev position to solve FizzBuzz. He spent thirty minutes attempting the solution and failed. FizzBuzz isn't some parlor trick, it's a simple problem that quickly weeds out those who can't. And any prima-Donna who thinks they're too good for a standard interview question isn't worth hiring.
I'm not quite sure what you mean but you're probably looking for Vagrant.
ask them if they have any personal projects they worked on. if they don't have anything then they should automatically be rejected. its unimaginable for a passionate programmer not to have ever sat down to implement one of his/her ideas even if it was never launched.
any documentation ? 
It is not a standard interview question. And if you really have to go down that road, I see more potential in asking a candidate to solve it in a recursive manner - it doesn't make a lot of sense, but it opens up a interesting conversation that should shed a lot more light on candidates general programming knowledge and problem solving capabilities. 
I doubt that it would be ready for production unless it has been documented extensively somewhere. FPM is the pretty standard way to go anyway.
This website: http://sijinjoseph.com/programmer-competency-matrix/ is awesome framework to structure your questions. Take a look.
http://cdn.smosh.com/sites/default/files/ftpuploads/bloguploads/I-know-that-feel-bro-blank.jpg coded Laravel for a year (4.2, then 5) and now I'm working with a Yii2 project for almost a month, and I really hate it. Routing sucks. Query builder sucks. Migrations suck. Documentation sucks. Environment detection sucks. Everywhere those god damn arrays, it's like they had a fetish for them, or something (all migrations are ugly arrays with string concatenations, instead of simple method chaining). Configuration is many-level arrays. No dependency injection via controller methods, event controller constructor is cluttered with unnecessary parameters, which you always have to write. I already added to the project some things from laravel, like elixir, migration schema builder (Capsule), php dotenv environment detection, dd() function and other useful helpers. Don't try yii, if you have tried laravel. You will feel like you've been thrown 5 years back. Yeah, I wanted to write some tests too, but hell, it's impossible to mock something. "The community can help!" you say? Yeah, right, I bet no one has ever mocked something in that community... (http://www.yiiframework.com/forum/index.php/topic/64710-activerecord-mocking-with-mockery/)
&gt; NO, I don't want to connect to any database (memory or otherwise) in my unit tests. Oh man, the feels! I tried to test and mock something too, but, got nowhere. http://www.yiiframework.com/forum/index.php/topic/64710-activerecord-mocking-with-mockery/ What's you secret "middleman hack" you're talking about? I NEED IT!!! 
Not necessarily just for a php programmer but I love this blog post by a guy I met at a web developer meetup. http://ngerakines.me/2013/06/02/how-i-interview/
Not sure if this is a good solution, but it seems like a decent one to me. Fun exercise. class FizzBuzz { private function isFizz($num) { return ($num % 3 == 0) ? true : false; } private function isBuzz($num) { return ($num % 5 == 0) ? true : false; } private function isFizzBuzz($num) { return ($this-&gt;isFizz($num) &amp;&amp; $this-&gt;isBuzz($num)) ? true : false; } private function print_number($num) { $output = $num; if($this-&gt;isFizzBuzz($num)) { $output = 'FizzBuzz'; } else { if($this-&gt;isFizz($num)) { $output = 'Fizz'; } if($this-&gt;isBuzz($num)) { $output = 'Buzz'; } } echo $output."&lt;br&gt;"; } public function solve() { $minCount = 1; $maxCount = 100; for($i = $minCount; $i &lt;= 100; $i++) { $this-&gt;print_number($i); } } } $fizzBuzz = new FizzBuzz(); $fizzBuzz-&gt;solve();
&gt; $minCount = 1; &gt; $maxCount = 100; &gt; for($i = $minCount; $i &lt;= 100; $i++) { Why aren't you using $maxCount?
 private function isFizz($num) { return $num % 3 == 0; } private function isBuzz($num) { return $num % 5 == 0; } private function isFizzBuzz($num) { return $this-&gt;isFizz($num) &amp;&amp; $this-&gt;isBuzz($num); } ;) [My attempt](https://gist.github.com/dadamssg/d964d2e3748ce3e35393).
Ha ha.... nice one. I meant to.
Honestly though, now that I think about it, those variables are useless. I should have just hardcoded the $minCount value in the for loop. It's not reused anywhere.
([Previous thread](https://www.reddit.com/r/PHP/comments/3dbiyl/open_invitation_to_php_developers_before_using/) mysteriously got deleted.) It's not really a secret that there are a lot of insecure code snippets in high-scoring answers to popular questions on Stack Overflow. [I've complained about this before](http://meta.stackoverflow.com/questions/293930/problematic-php-cryptography-advice-in-popular-questions). Right now the burden is on you, the developer, to be able to discern secure solutions from insecure solutions. And I don't think that's fair. Rarely, if ever, asked questions: ### Why should we trust your opinion? I'm an [application security consultant](https://paragonie.com/service/appsec) and experienced [security researcher](https://scott.arciszewski.me/open-source). If you're using a popular PHP framework or CMS, odds are that you've benefited from my efforts without even knowing it. I'm also working on some ambitious projects (which will hopefully be ready in time for PHP 7.1) that will make it very easy to develop secure applications. More recently, I've performed two code audits for cryptography applications (one in PHP, the other in C#). **I have a lot of specialized knowledge and experience in the field of application security.** I've also been a PHP programmer for 13 years. ### Why StackOverflow? Lots of people go there for answers to programming questions. Some even copy and paste solutions into their code. (Please don't be one of them. I've seen more weak RNG bugs in production than I care to think about.) Since StackOverflow is a very popular and visible source for programming wisdom, improving the quality of the information there should diffuse to the rest of the PHP community. ### Can we ask general questions? *Sparingly*, yes. I'm mostly interested in cleaning up sources of bad programming advice and reducing the incidence of security weaknesses. If anyone needs help with a specific problem for their business, please consider [hiring me as a consultant](https://paragonie.com/service/technology-consulting) instead of asking me to work for free. :) ### Why did you make this offer? / What do you get out of this? If I have to admit but one weakness, it would be that **I'm terrible at identifying the original source of bad security advice.** I'd like to stop these problems at their source and make the Internet more secure. Telling one client after another to fix the same bug gets to be very tedious and soul-crushing. If you point me to a question or answer I haven't encountered before, and it contains bad advice, I'll be able to fix it. Or provide an alternative answer in line with security best practices. Everybody wins. The most I'll get out of this is the satisfaction of raising the good:bad advice ratio and discouraging tomorrow's developers from repeating mistakes or adopting bad habits, and *maybe* material for future blog posts. ### What if you don't know whether or not it's secure? I'll say so, and then research the issue until I know if it is or not. ### I don't trust you. I'd rather check with ircmaxell/enygma/padraicb/et al. That's fine. Skepticism is healthy. On most issues, however, they're probably going to reaffirm my advice. And this is *my* open offer, not theirs. It wouldn't be fair for me to volunteer other peoples' time. ### How can we ask you? * By email: `scott@paragonie.com` * By Twitter: `@voodooKobra` * By IRC: I'm `voodooKobra` on freenode (I idle in `#phpc` and `#php.security`) * Or, I suppose, you could leave a comment here. ### What's the catch? The scope is, aside from the rare general question, limited to StackOverflow questions and answers. ### Will you audit an obscure library for me for free? No. That wouldn't be fair to Paragon Initiative's clients.
Yeah, elseif could definitely work. It would be a bit cleaner, too. 
&gt; Experienced devs are usually not happy having to perform 'parlour trick' coding challenges On the other hand, experienced devs can actually solve them. Bad programmers will simply flounder. You *must* do a coding test, even if it's extremely simple, to weed the wheat from the chaff.
Eh, I leave the programming at work, thanks. Maybe 10 years ago when I was fresh out of uni.
I'd probably give them some common and not so common PHP errors and ask them how to fix. Then I'd give them a block of code with an error in it and ask them to find the error. (debugging experience is real experience) If they pass all that, I might send them home with instructions to build something very simple that requires a PHP class, an index.php file and some styling with very specific instructions and to email me a link within 3 days. (proves they know how to use hosting/FTP and that they can build something simple including a UI with HTML, CSS, and JavaScript in a time crunch). Examples: Login/Registration/Forgot Password screen that displays a Hello [Name] after login, A texting program that sends out a text by email to common carriers (e.g. T-Mobile, AT&amp;T, or Verizon in the USA). Or if it's not a high-paying position, but they still need experience, I might ask them to walk me through the planning stage of building such a thing in a short period of time.
RE: your solution... it's not supposed to output the number if it is Fizz, Buzz or FizzBuzz. "Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”." http://c2.com/cgi/wiki?FizzBuzzTest
Thanks for taking the time!
doh! gotcha, didnt' read it too carefully. Fixed it.
This solution seemed ... funny to me, so I threw your class into a small script and ran it $testRounds = 10; $fzbz = new FizzBuzz(); $at = microtime(true); for ($i=0; $i &lt; $testRounds; ++$i) { for ($j=0; $j &lt; 100; ++$j) { $fzbz-&gt;solve($j); } echo " Completed Round $i\n"; } $bt = microtime(true); echo 'Completed ', $testRounds, ' rounds in ', ($bt - $at), 's.'; Ran it through wamps commandline, and got the following result &gt; Completed 10 rounds in 11.434819936752s. It's taking a little over a second to FizzBuzz 1-100. That is ... not good. See if you can get a round to complete under a second. (FWIW I took a minute to writeup a solution that completes a round in just over 0.01 seconds, I bet you can beat that)
What about creating a new migration where you alter the table, adding the needed column? Then populate it with a method that imports the dump.
By "book", I meant any form of written text. It's the fact they are reading and learning that's important. It's also a great jumping off point to find out what the prospective dev finds interesting.
For a senior level interview, questions that only show you that they can program (fzbz) are great. However, just because someone can solve a problem doesn't mean they're capable of proper software design. But for a sr level dev, it should be pretty clear during the phone screen if their worth bringing in for a face-to-face interview. Here is an example of something I've asked: (paraphrased and shortened version): you need to send and retrieve data from several different vendors. Each vendor expects and send the data in a different format (json,xml) and uses a different method (soap,rest) Create an uml diagram of the structures you would use to design this type of system.
It's a perfectly cromulent word
I genuinely thought you were being sarcastic on the text I quoted. I wouldn't think about contacting ircmaxell for security-related stuff, and it never stroke me that he could be really good at it. Good for him if he is, though.
http://blog.ircmaxell.com/2014/11/its-all-about-time.html
Well for starters you could use something like this function isThree ($num) { return $num % 3 === 0; } 
I not an author of this library. Anyway see `examples` directory.
THANK YOU! edit: your edit is extremely helpful. thank you.
It's hard to put the examples in context when we don't know why this library exists. It maps objects, but I have no idea what "convention based" means in this description. I see you're not the author, but I'm saying... sharing without those crucial bits only leaves a trail of puzzled redditors behind. 
Must be your dev environment. On mine I got the following: &gt; Completed 10 rounds in 0.4422287940979s Definitely not 0.01, of course, but far from 11.434819936752s However, since you were able to rewrite it to perform so quickly, I'm curious. I'll have to look at it again, when I have a moment. I dig this challenge!
Yes, I implemented generator delegation in PHP. It's a small thing required what will be needed to make things perfectly async. But judging from the internal rewrites it'll need. (Or it will be a gigantic hack nobody wants to maintain. Like the current streams API already is.) It won't be a 7.1. thing.
It won't work if there's more than one developer on a project and we don't really want to support one man band style of development since if the project goes success, more people will come and you'll loose time correcting your workflow. Overall, if migration went to repo and it can be executed, don't touch it, create new migration. If migration went to repo and it can't be executed, fix it.
If I am implementing solutions from code snippets on SO, it is a relatively unimportant piece of functionality. If it is related to cryptography or security, you'd better bet I'm getting a better comprehension of the situation before deciding how to proceed. As great of a resource as it is, SO is like the yahoo answers of coding.
&gt; I wouldn't think about contacting ircmaxell for security-related stuff, and it never stroke me that he could be really good at it. Good for him if he is, though. I'm vaguely curious what did you think about ircmaxell before you were told he's good at security.
Skip steps 3-5 and edit the actual answers on Stack Overflow. The problem with adding separate answers is they have a tendency to get buried, especially if the top answer is selected as best. If you don't have enough rep you can still edit and it will be reviewed and should be accepted no problem. Also you may have already done this, but you can order the questions by votes. Those are the most likely to be appearing in Google search.
My advice would be to code some basic application from scratch and think things through. Take your time, maybe even scratch it and start over and take another run at it. It is a really good way to refresh your memory on some concepts you may not have even thought about in a while. 
I think for PHP the word "extension" should be reserved for binary extensions (typically C source code), cause this gets confusing very fast otherwise.
Thanks. Look forward to seeing that router of yours whenever you get around to publishing it.
You can also check-out relative libraries. They have pretty good documentation. http://automapper.org/
http://www.phptherightway.com/ is a damn good summary, so I wouldn't be too quick to dismiss it - it's basically got every good practice thing in there. Newer versions of PHP have expanded on the OO side of things dramatically, so that alone makes it a different landscape to how it was. It's worth noting that Wordpress is not a good example, and is still stuck as it aims to be compatible with a wide range of older versions of PHP due to it's target audience.
I left out of my original posting a concern that I thought might come up in some of the responses to the question. Since it hasn't, I'll mention it as something that I've thought might be important. In particular, one concern I have is that different URL structures might lead routers to perform very differently than what is seen in their benchmarks. `FastRoute`, for example, seems oriented to URLs with common patterns (`/news/...` or `/post/...`) that can be picked up easily using regular expressions. How does the router perform if, instead, URLs are more freeform (`/installing-fastroute/`, `/benchmarking-fastroute/`, etc.)? Are some routers better suited to performing well with these sorts of URLs than others?
This is what I was looking for. Thank you!
If you see "convention" listed up high in a programming tool description, run. "Convention" means "I'll be second-guessing your intent at every step through fragile naming patterns, and once you have to deviate, I'll make your life hell".
It helps that it's a simple variation on a game everyone knows the rules to.
Do you plan to build projects from scratch or write addons for existing systems (WordPress, Drupal, Magento, etc.)? In the former case, listen to everyone else and read through http://www.phptherightway.com/ . In the latter case, you're not missing much, some projects are making moves in the right direction (Drupal 8), but the majority still sucks because of backward compatibility (WordPress) or outright twattery (OpenCart). Do yourself a favour and get a decent IDE, such as PHPStorm (from the same people who brought you Resharper). One of my colleagues was using Sublime Text and it was painful to watch. For continuous delivery, we use ThoughtWorks Go at work, and it's really improving our process. For local development, there's Vagrant and Ansible/Puppet/something similar, it's a timesaver for teams when you can launch a new VM with a precise copy of the production environment (same versions of Linux, Apache/nginx, MySQL/pgSQL, PHP, etc.) with one click.
This looks neat and super useful. Keep up the good work &amp; thank you! :)
Honestly, this raised an interesting thought for me. I think from now on, I'm going to keep the source of code snippets in the comments, so I can trace it back from now on. I'd never thought of documenting it before, but it seems like a good idea for down the road, especially for "Why did I do it this way?" situations later.
For example you have simple restful-service with 20 business objects and 10 fields in each. And we have also DTO objects for almost every use cases (something can be reused via VO). And we also should generate representation from this DTO (or generate DTO from request representation). And also we have 2 versions of API (or even 3). Yes, we can write a ton of boilerplate code which maps and generates this objects... This library provides you just an alternative. It isn't perfect (for example it can't convert stdClass to object without explicit mapping, which makes me sad), it 7 times slower than good-old manual mapping, but you don't waiste your time on boring stuff and write more useful stuff. This is like an autowiring in some IoC implementation for example (Laravel, PHP-DI). Sometime it makes your life easier, sometime explicit config is better. I think that this kind of stuff perfect when you writing MVP or PoC implementation.
It's not pretty, but the "middleman model mock" revolves around a bunch of nasty hacks. First, have all of your model classes extend a base model class of your making, which in turn extends from Yii's CActiveRecord. Next, your ModelBase class has a trait called something like UnitTestableModel. Create this trait in your prod code but also create another version of the trait in your unit test world code. force include the unit test world trait at the top of your unit test bootstrap so the Yii autoloader never loads the prod version. Now you have an injection point to override the static functions of CActiveRecord in your unit test world. In the prod version of the trait, you simply create passthru functions that call the parent::method($arg); (unless you want to add on functionality). In the unit test trait you can override the public static function model() to return a mocked model of your choice. so you can have something like $myMockedUser = createMock(...); User::modelWillReturn($myMockedUser); $result = $myObjectUnderTest-&gt;doThing($input); // this is calling a real method Then when the real doThing function calls User::model()-&gt;findByPk($x) your unit test trait model() function is called first. You can do get_class() to get the model name (in this case "User") and have it return a cached value which you set with User::modelWillReturn(); You're basically building a unit test framework around Yii, so it's a lot of work and I never said it was clean. Edit: the alternative is to never use the Yii static calls like User::model() to get the singletons, instead create a Container class that you can more easily override in unit test world. Like this: $container-&gt;User()-&gt;findByPk(); the CapsCamelCased function call of the $container object actually invokes User::model() but can be more easily overridden in a PHPUnit mocked object world.
&gt; once you have to deviate Yes, but why would you do that?
You can steam trade link to a row that already exists in a database. The data will be added to existing stuff user wrote, him will require typing it and the steam id will be appended to the row stuff mysqli.
Thanks for taking the time to do this! I am the author of this SO answer: http://stackoverflow.com/questions/1846202/php-how-to-generate-a-random-unique-alphanumeric-string/13733588#13733588 (Not the accepted answer, but it is the most up-voted) I have no real background in crypto and wanted your thoughts. I will make any edits you suggest and try to make sure it is up to your standards. The meat of the code is taken from a comment on the php doc of openssl_random_pseudo_bytes and it looks legit to me. I just want to make sure I am not putting bad code out into the world and making your life harder.
There was a court case IIRC, where it was argued that things like for loops with i, j, k, as counters and obvious variable names would be written the same way by many developers. And given that there are code snippets in open source programs (LGPL, APL, BSD, MIT, WTFPL) and in the php.net site itself, there's a good chance those code snippets were learnt / copied from the original free sources, in which case, copyright issues go out of the window. Basically, Proving copyright violation isn't easy for snippets. More importantly, the reason you should not copy-paste (I'm guilty of it sometimes) is that you don't learn the best way of doing things. Learning by copy-paste is fine, but while doing, I find there is always a tweak or two needed to any example to make it better. /my opinion
My laptop is dead at the moment so I apologize for the brevity of my response but http://stackoverflow.com/a/31284266/2224584 is how I tell people to generate random strings. See also https://github.com/paragonie/random_compat/blob/master/ERRATA.md for the preference order of PHP 5 CSPRNG strategies. Your answer isn't bad. I'm concerned about possible timing leaks with bin2hex and hexdec, as well as any operations that work with floats, but I don't think there is much that can be practically exploited today. The [random_int and random_bytes backport project](https://github.com/paragonie/random_compat) uses bitwise operators to avoid working with floats or cache timing side-channels with hex decoding or changing base to decimal. The random_compat project is deliberately engineered to be as secure as possible and is the result of many contributors far more brilliant than myself. I don't demand everyone spend as much time or research on their own solution. If someone uses your solution, they are much better off than the accepted solution. If I saw your code in production during a security assessment, I'd probably move on.
&gt; through reflection Reflections? Why? Mapping directly to business object isn't good idea... DTO usually have public properties. &gt; objects for business logic, use arrays for DTO. I use arrays and stdClasses as DTO already. Typed objects is good for consistency but as you mention this is overhead. Also, how would you suggest to solve my problem? Multiple versions of JSON -&gt; DTO (arrays, std objects) -&gt; business objects. For example... $data = json_decode($request-&gt;getContent()); // support of legacy version which will be dropped.... in six month for example $dto = [ 'location' =&gt; Location::fromArray($data-&gt;location), 'name' =&gt; $data-&gt;name, 'options' =&gt; [ 'foo' =&gt; $this-&gt;foo, 'fooBar' =&gt; $this-&gt;foo_bar ] ]; // ... $bo-&gt;update($dto); 
In PHP 7, random_int() and random_bytes(). In PHP 5, ircmaxell/RandomLib is good. So is Sodium::randombytes_uniform() if you install libsodium. We're still working on random_compat (backport PHP 7 CSPRNG functions in PHP5); once it's stable that will be my recommendation. Our blog has a recent blog post on this subject: https://paragonie.com/blog/2015/07/how-safely-generate-random-strings-and-integers-in-php
I've been using php's built in server for a few months on a small production. Not too bad. I'm on Windows and refuse to use IIS (hate their management interface). Nothing else was working quickly for me - lighttpd, nginx, etc. Finally settled on a separate PHP-server for each domain with a reverse proxy running on port 80 (to redirect to each process based on the domain). Performance is the best I've had so far. Only real problem is it doesn't support simultaneous connections, and isn't multi-threaded or multi-process on windows. And I have to have a scheduled task to restart all the processes every few hours or they stop responding. -edit- Of course I get downvotes. /r/php is practically a cult, or a circlejerk. If you're not running the latest stable version on an LTS linux distro with OOP, you're apparently a moron.
Thank you! Much appreciated. 
This is a very, very bad idea. It's not just a question of performance, it's also a question of security. The built-in server is neither designed nor reviewed for public-facing usage.
[Here's](http://php.net/ChangeLog-5.php) a pretty comprehensive list of changes. It's called a "changelog". :P
That's a strange question, React.JS is a client-side JS view rendering component and PHP is a server language. They're for all practical purposes completely independent from each other. Might as well ask if pizza is popular in the PHP community (answer: kind of). 
I would never assign a variable within an if statement, it's not obvious (to someone else, or you 6 months from now) if you were meant to assign it there or if you missed an `=`, `&gt;` or whatever.
&gt; However I noticed that developers from some technologies tends to use other solutions for front-end as well. Like Rails developers uses Turbolinks (ouch...) or Ember.js. That's because the Rails community is much more culture-driven than PHP. They use solutions based on what various people in the community recommend, completely irrelevant to Rails as a technology. It is more like a religion, and I'm not saying that to dismiss them, but it's what it is. People listen very carefully to DHH and there are a lot of strong opinions about what's "good" and what's "bad", what's "cool" and what's "uncool". The PHP community is very different. First, it's much larger and much more heterogenous. No one gives a damn what Rasmus (the creator of PHP) says, and its users are driven in their choices entirely by their goals: - I have PHP on my server, so I use PHP. - I want to do X, so I'll get the first PHP library that does X. There are pockets of opinionated religiousness here and there around some of the PHP frameworks, a suitable example would be Laravel. So it'd make sense to ask what *Laravel users* typically use for their client-side solutions, that might yield a cohesive answer, but not PHP users as a whole. PHP users, collectively, use everything they can get their hands on.
Why use a "mail library" instead of PHP's built in mail() function?
Yes? That's exactly what you should do. Digital Ocean has basic servers for $5 a month...
This question is too open-ended. It really depends on the company and the developer(s). Regardless, we use React + PHP for most of our projects.
What does this have to do with php?
I have been developing in PHP for last 5 years and not before that, so what I have learnt might be what you are looking for. Just on top of my head. Pitfalls: magic quotes? never heard of it. but these: $a = 'B'; $output = ($a == 'A' ? 'a' : $a == 'B' ? 'b' : $a == 'C' ? 'c' : 'd'); // $output is 'c' 0 == '0' // true null == 0 // true null == '0' // false Language features: * I don't know PHP which is not OO. * PDO to talk to database * PHP trait to solve multiple inheritance. * $arrayShortHand = []; * $this-&gt;accessArrayAsItIsReturned()[3]; * (new Foo)-&gt;callMethodAsClassIsInstantiated(); * Generator function * Constant expression * Variadic function Community standards: * Composer package management * PSR-0, PSR-1, PSR-2, PSR-4, PSR-7 * A lot of developers start adopting SOLID principles Frameworks, like Laravel, Symfony, CakePHP which comes with nice features like ORM (Eloquent, Doctrine, CakeORM), template (Blade, Twig), Dependency Injection, Service Locator, etc. I believe LAMP is still popular even though Nginx has been widely used as well. Also MongoDB and Redis. 
Are you just trying to gloat that you're getting a new computer? Personally, I'd buy a 17" pc laptop, and a desktop, then install Linux on both and still have money left over. 
It's not an IDE no matter how many plugins you throw at it. 
Unfortunately, I don't think [you can count on `crypto_strong` at all](https://paragonie.com/blog/2015/07/how-safely-generate-random-strings-and-integers-in-php#openssl-not-great).
React just doesn't do enough to be useful for anything more than a replacement for some jQuery IMO. The instant you have a complicated app where changes in one React component needs to affect changes in another React component, GLHF to you. Need to bubble all changes up to a common parent just to trickle them back down through a sequence of props to the target child. It's tedious, cumbersome, and becomes rigid very quickly. This is why Flux exists, but Flux is... weird. Using React for anything other than performance-demanding apps that NEED a virtual dom, is the wrong choice. And even then, you get a lot of performance out of things like Angular or Vue as compared to DOM queries, and with those frameworks you get a slightly broader scope of features than just a UI layer (Vue is less robust than Angular, but still has more features than React). I've worked with Vue a bit and I've found its component scoping and property passing to be a bit difficult to reason about. Could be I just need more experience, or the documentation lacks examples. I've head the fewest headaches from Angular even though I'm not really a fan of it. I dislike pretty much the entire JS framework landscape right now, but Angular has treated me the best thus far, so that's my preference. Just need Taylor to build Laravel.js and save us from the madness of half-baked UI libraries, terrible documentation, and wonky conventions that is the current JS framework landscape.
"Back-End Developer Interview Questions": MVC, ORM, HTTP, Network etc. https://github.com/tvandame/back-end-developer-interview-questions/blob/master/README.md
FWIW, `openssl_encrypt` doesn't authenticate ciphertext's either. The authenticated modes (eg. AES-GCM) certainly aren't mentioned at http://php.net/manual/en/function.openssl-get-cipher-methods.php . Altho I suppose it's like you said for phpseclib - OpenSSL is something for a security engineer to use to build a safe abstraction, rather than the safe abstraction itself.
Slightly unrelated but I might step in here and suggest you checkout Ember. In terms of having all the stuff, it is pretty much there with batteries included. You get components, a router which provides a mechanism for rehydrating state from the current URI, templates which are kept entirely separate from everything (unlike React's obsession with munging logic and templates together), and a data layer which normalises communication with an API and provides you with a really nice interface for getting your data into your app (no more $.ajax). Ember has taken a lot of the good from React and included it recently. Their new rendering engine uses the same virtual dom approach and is on par with react for speed. They are currently in the throws of migrating away from 2 way binding everywhere to a preference for "actions up, data down". Add to that all the tooling, large community, massive ecosystem of plugins and addons... it's pretty much the nearest to "laravel for js" going at the moment. Cross component communication is problematic I think mostly because components attempt to be isolated in their own worlds for maximum reusability. Typically the solution is for them to share some common object which they can both act upon. Component A updates object (passed as an attribute), and Component B reflects that object change in it's own template. Something like: {{component-a shared=object}} {{component-b shared=object}} component-a can call methods on shared, and component-b will be notified about them. Can you not do something like that in react?
&gt; Just need Taylor to build Laravel.js +1
The biggest part of the ecosystem to change is the ease with which you can incorporate external libraries via namespaces and composer and the fig standards. This then gave rise to lots of high quality libraries, which because they were easy to use, got more users and thus more contributors. For example, to talk to a sql database there's doctrine. For making and mocking http requests there is guzzle. Etc etc. The server environment has changed too. With most folks using nginx/php-fpm instead of apache/modphp. And mariadb replacing mysql. And continuous deployment, docker, etc. 
I love both sublime and phpstorm for both their strengths and weaknesses. But no matter how many plugins you use with sublime It'll not compete with phpstorm.
I use angular + php.. I think its based on personal preference and the project's need.
Not a big fan of him and the other PHP "big people", because their views and opinions are not helpful to me my business. To quote a friend of mine : they're the PHP "MVPs" (Most Vocal Politics). I have absolutely nothing against the guy, and he's probably good at what he does. But I am mostly interested in pragmatic stuff coming from pragmatic people.
This was actually in interesting read !
I honestly can't say i agree with much of your first 3 paragraphs (didnt really read the rest). If you build your React app with Flux (basically an event dispatcher) from the begining, its pretty simple, and not very cumbersome at all. 
&gt; Coming back into it - what does a PHP programmer need to know? I was in the same shoes half a year ago. Don't worry too much about that, PHP is still limping behind other technologies. PHP got these days a package manager (composer), a widly adapted coding style (PSR-2) and then there's an ecosystem of frameworks, which concepts you find in frameworks of other languages as well (e.g. doctrine is a limping hibernate). Ignore Phing, it's just a mindless copy of ant. Ignore anything regarding concurrency. Regarding the language itself. You got namespaces, a further reference mechanism which is used for objects by default (in case you came from PHP-4), there's a class loader (namely autoloading) and the rest (I mean those ~10k builtins) stays as is because of BC! Don't waste your time learning any of that before hand. It depends on what your prospective opportunity adopted. Just know that they exist should be enough. You catch up very soon with the needed technology. CI doesn't care about the technology. So you can use e.g. Jenkins here as well.
&gt; Not a big fan of him and the other PHP "big people", because their views and opinions are not helpful to me my business. Your comment reminded me of the people that troll /u/philsturgeon simply because he's very visible in the community. &gt; I have absolutely nothing against the guy, and he's probably good at what he does. Do you know what /u/ircmaxell even does? &gt; But I am mostly interested in pragmatic stuff coming from pragmatic people. That's fine, but... &gt; I wouldn't think about contacting ircmaxell for security-related stuff, and it never stroke me that he could be really good at it. ...considering [he's the author of `password_hash()` and `password_verify()`](https://github.com/php/php-src/commits/PHP-5.5.3/ext/standard/password.c) (PHP 5.5+ or password_compat), I don't think your assessment of him is fair. He spends a lot of time focusing on helping people learn and making it easier for people to do build safe, reliable, and correct software. What's more pragmatic than that?
Do you have a blog or website advertising your services? I am in the process of writing my own, happy to give tips and thoughts. If you are willing to share a link (either here or PM), happy to review it. 
Yeah I already figured it out, thanks anyway
After a quick skim through it looks really good. I've never used PHPixie before but the docs make it look quite quick to get started. Possible improvements: * Add how to use this with PHP's built in server (`php -S`) * Add how to create (integration) tests (if the framework provides a standard) * Add some links from class names to either the class in github or further docs. Eg `Request` * Add a space after `//` comments (subjective)
Thanks will do =). The tests are one of the things I thought were to straightforward to write in the doc about. They are preconfigured to run from both /tests and /bundles/app/tests/ folders. Linking to classesis actually an amazing idea! Will definitely do that! 
The space after *//* also bothered me but I though it wasn't important enough to mention =)
From reading, you could explain a bit more about how the router works or point towards upstream docs if its an external package. I would also tend to use GitHubs wiki for the docs, that way you can split into sections and make it easier to find stuff 
But yeah, if you are a PHP coder and ever need a job, just look me up! I can interface you with great positions currently in Washington, DC, Houston, Detroit, Austin, Dallas, San Francisco, Los Angeles, and NYC and those are just the people I've talked to this week. These are all 6-figure, relocation-paid jobs, for the most part. I'm living in the Bahamas now, and going to go back to Bogota in 2 months. I have no desire to relocate for a job anymore.
From the introduction post, I can tell proxygen is ready for production. The real question is... is your project ready for proxygen? It seems to me it isn't a drop-in replacement for nginx, so you're seriously planning to roll it out to production you might have several hours ahead to figure out all the pieces. In my case, nginx acts as a single entry point for a dozen of vhosts, each of them available under http and https, which in turn communicate to either one or more of 10 backends (4 php-fpm pools, 1 hhvm for wordpress, 3 node apps, websocket and secure websocket) So I'm not going to dive into proxygen, because I know myself and it would inevitabily mean I'd spend the next weeks figuring out how to migrate. It's addictive.
Ask a **commercial guy** to define an imaginary app describing only what the end user will see. They always come up with silly requirements.. Then ask the candidate to sketch a diagram about how would he arrange the infrastructure. Even for someone who isn't an expert in the subject he should at least be able to mention a load balancer, web server, app server, database. Inside the app itself, ask for more detail about the tools or libraries he would use. - Some of them would say "You can do everything with Laravel" - some others would say : "I'd program the whole thing" - others will say: "I'd use silex as a router, doctrine as orm, smarty for templates, monolog for logs, swiftmailer..." I like the last one more but it depends on what you're looking for. For some positions you just need someone who knows what library does what and only needs some glue code. Ask him about methodologies. - How would he arrange version control - how to manage hotfixes, releases, feature integration in a team of 8 developers - Will everyone push to master? - Will every dev clone the repo and push to their master then open a PR against central repo? - or will there be one repo and every developer creates a branch while a feature is coded? - How would he ensure quality code when 8 devs have open PRs? Will be manually review them? How will he keep the team aligned towards a common goal? Will he hold daily meetings? Will they be connected to a chat? Will they use a dashboard to visualize pending tasks, deadlines, bug reports? About every answer given to the previous questions, what answers would have been different if they were asked two years ago? what about five years ago? Given the stack keeps changing, what would he do to keep himself and the app up to date with latest best practices?
A back rub is always nice.
&gt; I'm interested in the tools, not in the people who build the tools. Okay, thanks for clarifying your position. &gt; But I avoid fanboyism, and people who feed it, as much as I can. Agreed 100% on that notion, but I also add that counter-fanboyism (a.k.a. drama directed against individuals) is just as harmful as fanboyism.
So much Zen in this one.
This is a great way of doing things, thanks!
Use trim() function.
This may be an unpopular anecdote... but I've done well with elance and such. I'm just very straight forward, and I make sure to take a close look at the "buyer's" job history - find people who HAVE worked with the $10/hr crowd. Then sell them on why you're better. Also, make sure your work is 10x better than that of the people bidding 10x less than you. Most clients there laughed or never responded to my rates/bids... but those that did have been very happy and continue to bring me projects. The good clients are there, you need to learn how to filter them and get in with them.
this mentee needs a master. 
not possible with php. there i said it.
Well you said this is a side/learning project. If you want to learn about a specific framework then use a framework. Most of the big frameworks (Laravel, Zend, Symphany, slim etc.) all have their pros and cons. Maybe you want to learn/practice something where a framework might be a hindrance. If that's the case don't use a framework
That's true. Certainly not PHP specific but I've managed to get a couple of good beer money jobs out of there in the past 
Gah, yes that's what I meant. PaaS have spoiled me :P
If you're displaying the data back in a `&lt;textarea&gt;` make sure you don't have any newlines or spaces before you print your content. If that's not it, try using the `trim()` function like /u/of_Arabia mentioned. Also, make sure you post stuff like this in /r/PHPHelp ``` &lt;textarea&gt; &lt;?php print 'something'; ?&gt; &lt;/textarea&gt; ``` Should be ``` &lt;textarea&gt;&lt;?php print 'something'; ?&gt;&lt;/textarea&gt; ```
Totally agree with this guy. Well, except the WordPress part. I'm a big fan but that's personal preference. I would put Magento in there. Anyway, what alot of those lead back to is that I am valued as a person and a developer. Many places it just boils down to the company not valuing development. Not seeing it as an investment in the company. The analogy I always use is a train. At alot of places developers are the caboose yet they are still blamed for any crashes. Client was late getting you comps and also changed a bunch of features? Tough shit. We still need to launch on the previous deadline. And if you miss that deadline it's your fault. Never mind the long list of mistakes that took place before it even hit my desk. Oh, one thing not mentioned was leaving me alone to work. There's no for me too attend meetings eight hours a week. Exceptions happen and it becomes more common the further along in your career you are but if I'm hired to code I need uninterrupted time to code. Two very nice-to-haves would be big dual screens and free snacks/soda/drinks/whatever.
Powerful tool, horrendous name.
Thank you
Anythings possible
idk, but if you use IRC constantly I could possibly be of some help
Oh man, the timing on this. I've been working with EWS over the past 2 months and have been working with the original "jamesiarmes/php-ews" library for the past 4-5 weeks with frustration over the incompleteness and 5.2 style of code. If this was just a bit earlier it would have made things a bit easier for me, haha. But alas... At any rate, thanks for this great work and thank you so much for sharing it!
That sucks, always directed people who wanted to learn here as it seemed to be very active. Trying hanginng out in #php on freenode and some of the relate channels, usually people that idle are fairly open and friendly just don't expect them to do your job for you ;) Sure there must be a slack alternative too but i'm not really a user of that so :(
I understand your pain. 3 weeks ago I got tasked with having to build something to connect our application to ews, and made the same discovery you did, that there was nothing worthwhile out there to use. Obviously I forked off of James, but made some major improvements. Under the hood though, its running mostly the same. If you're still developing your thing, it may turn out to be easier to use my library than you think, and get the advantages. If you want to go down that path, but run in to some moderation issues, let me know and I'll see if I can build some in
Yea, so you get it, haha. Thanks, I appreciate it! I might take you up on that. :P
Find better mentors? Write more engaging emails? I haven't had much experience with phpmentoring.org other than having looked at it a couple of years ago and deciding at was not for me. It does feel strange that, with all of the effort that has gone in to it, there is no rating or "repercussions" system to be able to filter out less effective mentors or mentees...
Im definitely not expecting them to do my job! Im more just kind of stuck in a rut in terms of how to grow as a developer and would love to get some tips and tricks from people who have gone through the same. Im in #coderabbi, #phpmentoring and ##php, but Ill find more to get into as well! Thanks :)
If you can't find the time for a full migration, here's a quick improvement that'll take 5 minutes and make testing so much easier. Take a look at my [HttpPlayback](https://github.com/Garethp/php-ews/blob/master/src/HttpPlayback/HttpPlayback.php) trait, and how I integrated it in to [NTLMSoapClient](https://github.com/Garethp/php-ews/blob/master/src/API/NTLMSoapClient.php). It's simple to put in, and it'll make your testing much easier and much more reliable. No need to mock those oh so cumbersome responses.
is their a quick how to for trying out hhvm/proxygen. Been looking around for a bit. just getting 404's . I think my server.ini is good and the error log is empty.
nevermind - figured it out. looks like i was using server.ini when i should have been setting options in php.ini
Yeah, I know. I was just being a smart-ass.
*a lot
Hahahh, outright twattery! That put a smile on my face. I'm not yet sure what projects I'll be handling. It's depressing how far behind everything Wordpress is, though - I'm surprised that Wordpress.com has been able to run a server-side rendering farm on this technology for so long.
What's your background &amp; experience, OP? What are you trying to get out of a mentorship?
Thanks for sharing! Dual screens in 2015 is a must, since I'm currently using 3 screens for better work performance.
I'm all about mentoring other developers... But I also want "peers" and mentors for myself :-) Also this isn't strictly about roles/titles like Senior/Junior Developer because often times there are people below you on the org chart you can learn a lot from especially if its an organization where there is a lot of specialization.
I'm serious: AMA. The rest was a Joker reference.
Im looking to contribute more to open source, Im looking to start getting into conference talks. Although there are lots out there, Id love to be able to build a framework so I understand it better. I want to write more efficient code. My main career goal is hopefully getting up to the senior level, writing code for an awesome company who values me, who wants to see me grow as a developer. There's a few companies in my mind who I would love to work for. Time wise, Im open to anything. I would make myself available to their time. If one night a week for 2 hours is all I can get, then Ill take it. 
A little video from Rasmus Lerdorf: http://www.ustream.tv/recorded/1509596 Quote: All the latest php frameworks got it wrong. 