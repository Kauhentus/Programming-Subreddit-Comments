Use `preg_replace` on each line to turn multiple spaces into a single space, then `explode` to turn each line into an array of useful data. That should get you on the right track. Also FYI, /r/php is not a support reddit. Next time, you should post in /r/phphelp.
This exactly. Autoloading is a convenience. It's not by itself the epitome of maintainability or efficiency. (Allthewhile the FIG has duped everyone into dependency-disregarding autoloader file-by-file tapping.)
I used to really love JS. That faded the more familiar with it I got. Eventually I have come to conclude that it is easily the worst language I have ever touched. Biggest reason, silent failures. Not generating errors when you need them is awful. My big turning point was reading the thoughts of one of the JS design committee members. Up until then I loved the language and assumed I was at fault for somehow misusing it. He basically said JS was designed for 10 line scripts, running in an environment where the customer would be the one seeing errors so it should fail silently. By his pointed admission it is not designed for anything bigger, and requires an incredible amount of discipline, design guidelines, and other tools to make it manageable. Most other languages have this stuff built-in, requiring less discipline, tools, etc. They are simply better in many many respects. Agree to disagree.
A "better" question would be should you use protected or private methods. The protected can be used by extending classes while private methods cant. For a good explanation see, http://stackoverflow.com/questions/4361553/php-public-private-protected
Heh, I wonder how many times I can nest this and still get requests out in reasonable time.
Wasn't that a cristopher nolan movie?
For example i clearly remember there was a ddos vulnerability in some version of symfony/http-foundation. You just had to send some header with a very long value and that's IT. Pretty easy...
d
This one seems nice. Low sloc count and pretty clean.
d
You sound like Bain from Payday 2
check out /r/headphones
``php -S`` ? http://php.net/manual/en/features.commandline.webserver.php
*To address the framework question:* I would suggest going with Silex, Symfony or Laravel as a framework of choice for building an API. They each have their strengths and weaknesses. Laravel and Symfony have huge support behind them. Laravel has great resources like Laracasts to help you get up to speed. Silex is the best choice if you need to leverage your own architecture; Silex is a microframework which requires you to make a lot of your own decisions about libraries, dependencies, etc. However, these all use the [Symfony HTTP Foundation](http://symfony.com/doc/current/components/http_foundation/introduction.html) components which I find awesome when writing APIs. *To address the authentication question:* There are different ways to authenticate your API, depending on the level of security you need. You can look into **OAuth**, or you could use something simple like a private/public key **HMAC** message. [How amazon uses HMAC](http://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html)
If there are known vulnerabilities in any of the modules you're using, they can easily exploit them when they have a list of all your modules.
Strange to see database configuration at the platform level instead of the application level.
My interview questions would be largely based on fear. Fear of hiring one of the people like I've worked with in senior positions. People for whom "senior" just means they've warmed a chair for longer than most. I actually think the most useful question in an interview for a developer is "What are you learning at the moment?", or alternatively "What was the last thing you learned?" If they're not currently actively learning then they're no good to you. Additionally, I'd ask what their favourite framework is, not because I care, but because the way they respond is highly demonstrative of their attitude to contemporary best practises. "I really like Symfony, but there are some nice ideas in Laravel/Yii, etc" is a totally reasonable response. "I use CodeIgniter for some things." suggests to me that the skills and knowledge are a bit behind the times. "I never use frameworks because they're a waste of time." Speaking of wasting time... thanks for coming in! Similar questions would apply to things like coding standards, ORMs, etc. 
There is no reason why PHP can't be used to power a persistent application/daemon. You do have to be more mindful of your resources, but that's not something unique to PHP. There are actually quite a few high-profile projects that do just this, with at least one that I know of authored by PHP internal devs.
Very much agree.. this definitely feels like the type of thing you want to do within PHP, instead of C.
Hah, awesome.
http://www.restapitutorial.com/ this site has some good suggestions for general design and HTTP codes. we use oauth 1 for authentication, since there are libs in most languages for dealing with oauth, and oauth covers all the attack vectors you need to be concerned with.
also your $frameworkOfChoice probably already either supports it or has an extension that supports it, weird to go to all that trouble
Call me crazy, but I wouldn't even want *junior* devs who couldn't weigh choices, think sensibly about them, and make decisions.
phpstorm
That doesn't work, the idea is to run it through phpdbg, and the -S option is an internal webserver.
We're using it for some back-end service stuff (and that's about all I can say). It's making some inroads into being used for more though. Are you guys even serving HTTP requests with it? If so, that's pretty awesome!
I've been a PHP dev for 10 years and under pressure I would stumble over FizzBuzz because that kind of problem solving is like 2% of the work I do that actually earns both myself, and my company, real cash. FizzBuzz is *retarded*, and absolutely no way indicative of real world programming skill, experience, or knowledge. It's actually a bit insulting to be blunt.
This would have very little real-world use, but it's very cool regardless. I could see this being the sort of thing that if you **did** happen to match its use-case would be an absolute godsend. Some great programming to result in a nifty little project, exactly the sort of thing "hackdays" are for.
Hi, I'm seeking for advice how I can implement this kind of application. Thanks for commenting, much appreciated!
That's true, Set up a chef script in OpWorks that sets the JSON file from your config options.
Yes I'm still waiting for a few real use cases, but as you said, it's very cool regardless. However, the feature to run gists: melody run https://gist.github.com/lyrixx/565752f13499a3fa17d9 Cool, but i saw one on twitter and hell no I'm not blindly running that by copy-pasting it in my terminal. It's the same as [piping to your shell](http://www.seancassidy.me/dont-pipe-to-your-shell.html) (can't find the link where one guy made a mistake in such a script and it did a `rm -rf /` on people that installed its tool).
What.. A web server in PHP, I mean this is a really interesting concept, but I haven't heard of one unfortunately. That said I'm sure it would be buggy and underdeveloped. Post back if you find something.
It's called github. You can't talk a big game in open source. I see the commits of every single person in my company (even the .net guys). I can literally see when you're a giant shitball that can't code. I can also see when you deliver decent code. Whether you can pass FizzBuzz or not is the most irrelevant thing in the world, when I can see your *actual*, *money-earning*, *business-value-delivering* work in my email....
&gt; Please stop trying to use it for more than it's built for. This is the worst advice ever given in a programming forum. I feel like half my job is figuring out how to use things for more than what they're built for.
&gt; This saves a lot of hassle when you work in a collaborative environment. What it does is create a lot of responsibility to be very careful about not breaking things, because you can have a lot of dependencies. The nature of PHP makes it so that you may not even be able to reliably identify those dependencies. My class template is `final` by default. I haven't extended a class all year. It's almost never the right solution.
That's fair, and totally reasonable for a technology company - unfortunately, sometimes developers are employed by people who are clueless about technology (in which case, passing FizzBuzz should be HR policy for hiring programmers).
Nice! Yup we are using martini since it still performs very well and their service mapping is amazing. We're also using it for background services as well, slowly migrating the stack from Apache/PHP to nginx/go
Thanks.
As a blanket approach that "guarantees" minimum competency only, and potentially skips over useful talent. "What do you mean he doesn't know how to reboot our server? He passed the BizzWuzz thingy!" But presumably if you're testing someone at a FizzBuzz level, you *already have* a technology director that can make a more accurate assessment using more accurate tests. If you don't have a technology director yet and you're trying to hire one, then making FizzBuzz your main (or only) policy requirement is most likely going to result in an under-qualified hire.
Depends, if you want it to be real time, it's going to involve using nodejs and socket.io. There are a number of tutorials available on the Internet but explaining how to go about this task on here would be far too complicated.
I took a quick look through the source of nanoweb, and it's highly reliant upon pcntl, which is pretty heavy, not compiled by default, and unavailable on Windows (which I wouldn't mind, but I don't know what OS you'd be on). The approach here in yosymfony/HttpServer looks much more modern to me. It's using ReactPHP, which takes the simple node.js approach of an event loop, so it's meant for concurrency (which is different from nanoweb, where pcntl_form is meant more for parallelism -- you'd get parallelism with React by just running 1 webserver for each core you want to use). The big caveat I see here is that while the event loop works nicely on the v8 javascript engine, the Zend engine for PHP's performance is demonstrably terrible when it comes to functional programming. This project's building its handlers using PHP's quasi-first-class-functions Closure, so if you plan on serving a non-trivial number of connections, you may want to consider HHVM as an alternative to Zend, for improved performance.
&gt; Don't try to use it as a persistent running application. Stop telling people what they should do or not do. They didn't ask for your opinion.
It can use Symfony HTTP stack, so no, you wouldn't have to. There is also [this](https://github.com/reactphp/http) if you want to go to lower level.
I think it could work well for bug reports
This is a "raw" link to a PHP file on Github at master for the repository: https://raw.githubusercontent.com/symfony/symfony/master/src/Symfony/Component/BrowserKit/Client.php If someone were to update that file and push it to the repository, the contents of the link would be updated. By the same token, if you had a repository, and linked master similarly to how I did above, all you would have to do is just push the update to the file, and the contents of the link would be updated. I'm assuming you already use some kind of version control, probably git (Github supports SVN too if you happen to use that) so this would be a pretty minimal amount of effort to "keep things updated", you just have to git push and everything works fine.
I would highly recommend buying the study guide. The reason for this is mainly because that way you know what kind of questions to expect and what to pay attention to. The ZCE exam is hard in the sense that it requires you to remember a lot of details which are close to useless in your day to day job and some of the questions are tricky (the lame kind of tricky). The strategy I took was going through the study guide until I could answer and understand the questions perfectly (or close to perfect). Please note, ZCE may be a formal certification but it's value is highly questionable. I'm not saying you shouldn't get it but your 7 years of experience are worth way more than that. It probably won't influence your career in the slightest.
What an answer, brilliant ...
Give it a try, it's been a life saver on numerous occasions over the past years. The ability to look back at your history to see where you changed what is priceless compared to the extra steps you'de have to make. Was doing the same years back before starting with SVN. (Even used CVS because of the job at that time, but I would really stress that CVS is never an option.) Was starting at a new job and never really used versioning really but that learned me there. It made life so much easier in case you mess up because you can look back and revert if you have to. Or when you remove something from your code you can still get it back from a previous commit. Switched to Git later on because of the better merging, more advanced features and ofcourse Github. So yeah I would recommend that you give it a try and see if it could fit you.
What i did got the book make sure I have a deep understanding of the book. A week before the exams i just went online and found a bunch of free mock exams and kept doing them, to get a handle of the tricky questions the /u/rickkuipers have mentioned. You can do it with easily cause i did it with only 6 months experience in php, 7 years can teach you alto! Good luck!
Video Part 2: https://www.youtube.com/watch?v=N1xBw16SP24 Slides: http://www.slideshare.net/vanphp/php-meetup-slides
You can effectively package the code to replicate the bug, along with the specific versions of dependencies required to replicate it, in one runnable script.
I meant all the trouble of creating a C extension when it's so trivial to do in userland, but I guess being able to update legacy apps is nice.
Wish the sound was better, it's pretty echoy :(
I skipped forward hoping it would get better, but it doesn't. Came here for slides and was not disappointed
LAMP at home and work, using Vagrant for the latter. I use Debian and Ubuntu but Mint should serve you just as well if you're new to Linux. 
Soo... in the end they switched all their services to Scala (slide 42) and only kept PHP as the facade?
 #!/bin/env php -S 127.0.0.1:8000 router.php &lt;? // Usage: php -S 127.0.0.1:8000 router.php if (strpos($_SERVER['REQUEST_URI'], 'php')) { $file = ltrim($_SERVER['REQUEST_URI'], '/'); if (strpos($file, '?')) $file = substr($file, 0, strpos($file, '?')); include_once __DIR__ . '/' . $file; } else{ return false; } ?&gt; Save as *router.php* and enjoy.
so you use inheritance for code reuse ? fuck me
&gt; Please stop trying to use it for more than it's built for. It is not an application service. Don't try to use it as a persistent running application. And why, exactly, shouldn't you?
I am both horrified and thrilled. Nice work!
http://youtu.be/FNt0anp7WK8
abysmal bad audio.
Well done, but I hope your not expecting that to be accurate as it rarely is.
+1. ipinfo.io says I'm over 450 miles away from my actual location. IP Geolocation is almost always pointless. OP, consider using GPS (if available), or HTML5 Geolocation. It's somewhat more accurate.
Be sure to consult against PHP's actual behaviour. The work-in-progress [language spec](http://github.com/php/php-langspec) might be useful.
if you are doing php for 7 years you'd probably be able to answer 70% without learning, the other 30% are usually stuff that you never used cause you had no use case or you havent used yet (like traits) the only stuff that most people really have to learn is the parts they ask about security, SPL/Objects and the various string syntax and heredoc/nowdoc because for some reason its uncommon and some people discourage iusing it. the ZF/ZF2 exams on the other hand are much harder compared to ZCE ZCE is a good thing for juniors, here in germany seniors rarely have it, and i havent had anyone "asking" for this or thinking about it when searching senior devs.
I don't know what to make of the fact that there are only 666 lines in the program...
HTML5 Geolocation is super accurate compared to IP based location. Also, I'm not sure if you know that but the HTML5 Geo API uses Google's Geolocation API
surprisingly it was ok! I am only after the country and the town at most really!
It's telling me that I'm about 280km away from where I actually am. 
So if PHP gets a spec can we expect to see PHP running on the JVM someday? Similar to python and jython.
There are a lot of blockers in general design. For instance PHP does not support nested classes.
I'm not blaming anyone, you said you want the country and city and I'm just informing you that it got my city really wrong. Also I'm not using a proxy.
If you're using Apache, make a directory for your unparsed PHP downloads and put the following in your global Apache config: &lt;Directory /path/to/dir&gt; php_admin_flag engine off &lt;/Directory&gt;
Mind you it said I was in London ... I am no way near London. Maybe the city part could be wrong, as long as I get the country I am happy. The city is a bonus really. I tried it through an actual proxy set up and the location was correct. Maybe its something to do with ISP?
Why not? If an implementation performs according to the spec, then it can be called PHP just as much as PyPy is Python or Mono is C#.
This presentation could pretty much be summed up as "use PHP as little as possible".
It's interesting to me that they'd go with Scala, since in some ways Scala is to Java what hack is to PHP (mainly that Scala code can run Java libs, and hack code can run PHP libs). This seems like more of a story of Hootsuite's current migration path away from PHP than a story of how to scale up a PHP site.
I managed to get ready for it in 2 days. Don't buy their books and study material, you can get all that from php.net What you do need is the free study guide they have. It contains lists of stuff you need to know + sample questions. The stuff they have listed mps perfectly to php.net manual pages. You don't have to answer everything right, afaik you need 50%+1 correct answer. Also google some additional sample questions on the internet, there are a lot of those floating around. Pretty much everything is trivial. 
Why would they use yaml when composer uses json?
It already does ([Quercus](https://en.wikipedia.org/wiki/Resin_%28software%29#Quercus), [Project Zero](https://en.wikipedia.org/wiki/Project_Zero)). There's also [Phalanger](https://en.wikipedia.org/wiki/Phalanger_\(compiler\)) for .NET.
Don't mix your HTML markup and PHP in the same file. Even though it's just the initial page, I'd toss something like Twig or Mustache in the mix.
Thanks for the link. Definitely a good overview for some questions I had. I was wondering if you issued a GET and didn't find anything, should it be a 404 or a 200 with empty data.
Cool service. How does it behave with longer text strings? It would also be great to have actual SDKs.
Why not making use of composer ?
We have just launched SDKs for PHP, Ruby, Node and Python. Grab them here: http://aylien.com/sdks/ It also works great on longer documents, blogs and articles for example. 
Many businesses are big enough to need technology but not big enough to hire a technology director. I'd be thrilled to work with codebases that weren't copy-pasted from tutorials, so the prospect of even minimum competency surpasses what's going on - right now - with many real world businesses.
Just FYI, your submission is stuck in the spam queue. I can't unspam it, but I've submitted a bug report to reddit.
Thanks. I didn't know that.
How does Google's Geolocation API work?
If you're willing to work around the issues that may arise, have at it. But as a professional, I will never recommend pushing a language into a realm it wasn't designed for. PHP Does not have an application layer. It doesn't work efficiently as a constant running process. Its garbage clean-up is subpar when taking that into account. It works great for what it's used for, but not in a "constant process" context. But, if you're advanced enough to work around all those shortcomings, by all means don't listen to me. However, it doesn't change the fact in a general purpose, I will never recommend it.
I'm sorry, but 5k req/sec? Without much insight into the size of the stack, that doesn't sound interesting. Heck, you can get &gt; 1-3k req/sec out of a single box. So 5k req/sec is maybe 4 or 5 front-end boxes. Not really overly interesting. Now if you were talking 500k req/sec, then that's a different story (and yes, I have personally seen PHP running at that scale).
&gt; You do have to be more mindful of your resources I agree. And you and I know, the vast majority of PHP "professionals" don't know enough about PHP memory management to be able to manage these resources properly. So, in a large public facing forum where you have developers of all range and levels, I will never recommend PHP outside of what it was designed for.
&gt; Oh, it is. It's bad memory management, lack of internal clean-up, and complete void of error checking or logging None of that is the fault of PHP.
&gt; It's because PHP wasn't designed for persistence running, it doesn't have an internal garbage collector to handle these things. PHP has had garbage collection since, what, 2006? What the hell are you on about? Even before then it had reference-counting... GC only matters for cyclic references.
A log entry is always 1 line in the log, no matter how many \n you put in there, they get escaped. Don't bother trying to change that. If you need the log to be readable, run it through a pretty printer. As for displaying errors shouldn't it be the same as php - the [display_errors directive](http://docs.hhvm.com/manual/en/errorfunc.configuration.php#ini.display-errors)?
What this guy says!
I can see splitting out the code base into a non-monolith architecture. But, why switch to Scala? Is Scala OMG!1! 10x fast or something?
Please do let me know if you find another mistake :) I am very new in Article writing. But having 8 years experience in PHP 
Just why?
Really? These things are interesting because not because of the absolute size of the traffic, but because of the information regarding what the bottlenecks/flaws of the setup were, how it was rectified and finally **what difference** did it make. saying something like "Phew, 5k req/sec. Nothing like the things I've seen!" sounds quite missing the point and frankly a bit moronic to me. But what ever, we would rather hail some popular guy rather than use couple of our brain cells...
&gt;1 import controller per file type? Why? you just need different strategies. 1 for CSV and 1 for Excel &gt;query the whole table instead of a single row and do the maths in memory (instead of 1by1)? I would import everything in a (temporary) table beforehand and let the database do the "hard" work instead of php. No doubt about that. And yes, using a message queue for this kind of "work" is considered best practice.
PHP is not worse than any other similar language when it comes to memory management. There is nothing unique to PHP that implicitly makes it a bad choice for persistent applications. Feel free to give an example, if you have something in mind. Otherwise, I'm calling this FUD.
what does this do besides making you write longer query statements?
I, for one, would love it if PHP had a strictly typed mode.
[Then you're in luck! Facebook already did that.](http://hacklang.org/)
I dont know much about FB's new SDK but I would maybe assume its encoded in the URL possibly, somehow. I know that sounds simple but I have been stuck on various API's in the past and both times I can recall not having the url structure just right really had me banging my head against the wall. This probably doesn't help and I'm sorry if it doesnt lol.
&gt; saying something like "Phew, 5k req/sec. Nothing like the things I've seen!" sounds quite missing the point and frankly a bit moronic to me. The point was more that 5k req/sec isn't interesting **by itself**. There are *literally* tens to hundreds of thousands of sites out there with that level of traffic. And considering the talk (the slides specifically) didn't really go into what made it interesting, my assertion was selling that you're doing scale because 5k req/sec is *not* interesting. Selling the talk with a number is only good if that number itself is interesting. And 5k req/sec isn't that interesting by itself. Yes, it's high, but it's not into the "interesting" high phase. 5k req/sec is doable with a handful of servers if the software is reasonably smart. So the number itself isn't that interesting. Show me why *their* stack is interesting. And that seemed to be lacking. So either sell why someone should care about 5k req/sec (which wasn't really covered) or don't try to tell me I should care because it's 5k req/sec.
&gt; Are very different things.... Absolutely. However, the talk really didn't get into that. So...
If you could do PHP to JVM next that'd be awesome. Not sure how useful this project would be besides teaching you a lot of stuff.
That's pretty cool. Have you thought about doing this at the bytecode level?
This is true for *any* code you install via composer.
And the gearman jobs (implied).
That is really cool! Compilers are the best!
I though of doing something similar.. how do you think enums should be translated? I'm thinking a final class with public static properties .. the only downside is that those will be writable 
yes, I believe gist are some sort of, so I decided to go that way out of simplicity, I think later I can move to a proper repo without losing the whole history
haven't though on that, but could be a good lead!!
Preferably something like a "use strict" would be nice. 
There's a good chance that once I move on out of my php shop I'll find a .NET shop because I'm not a huge fan of Hack's notation, and I can't convince my boss to let me use it because a couple other people in my shop refuse to try to learn anything new... I love dot-notation, though... 
Move towards SOA basically. They're able to do 5000 requests per second, but to help their team grow bigger and not step on each other, moving to smaller service projects (written in Scala) was the right way to go (for them). Source: I was there at the talk.
Well, Hack really shouldn't be used in production yet anyways. Facebook's stewardship has yet to be vetted and only time will tell if it's going to be maintained properly.
It should be use the right tool for the right job. PHP is great, but it needs supplement infrastructures around it to scale up. They used Memcache, Gearman, and some Mongo to help scale to 5K, now they're swapping out pieces for Scala to help their team grow. I'm not particularly fond of how they "dark launch" code. IMO, they should get ops to setup separate environments and use some special logics to route users to the separate environments. But at the end of the day, it worked out well enough for them to get to acquiring massive funding... so whatever works, I guess.
True, but I feel more confident using a lib I know and that is used by thousands of other people. And if it's a small/not popular lib, usually you review it (because in that case it's maybe not maintained or maybe not so good). Whereas if someone throws you: &gt; hey here is my bug report: &gt; melody run 565752f13499a3fa17d9 I'm not so confident.
Yes. 
&gt; Don't try to convince me that having a ton of visible "\n" in my log files is all great. It's not. It's complete crap A (non-escaped) newline in a syslog format message written to a file signifies the end of the message. So, you *are* actually asking for an anti-feature here. The relevant standard here is [RFC3164 4.1.3](http://www.ietf.org/rfc/rfc3164.txt) which states: &gt; The code set traditionally and most often used has also been seven-bit ASCII in an eight-bit field like that used in the PRI and HEADER parts. In this code set, the only allowable characters are the ABNF VCHAR values (%d33-126) and spaces (SP value %d32). And that's it: other than that, newline handling is undefined. So, HHVM takes a reasonably good approach of being maximally compatible with as many things that consume the logs as possible. Many other tools (rsyslog, syslog-ng, etc.) take the approach of escaping `0x0A` as `#012` or `\012` (012 being octal for a newline), but the vast majority of them do not leave them unescaped. &gt; Have you worked with HHVM on more than a cursory level? It seems like you haven't. Have you worked with remote syslog or the ELK stack on more than a cursory level? It seems you haven't. Not escaping the newlines will result in a single stack trace being split into a separate message per line. Splitting logs on escaped newlines is easy. But split them before they're received and they're a massive PITA to recombine. Especially if, like in PHP, stack trace lines don't usually start with a tab/whitespace (which is how stuff like [this multiline processor](http://logstash.net/docs/1.4.2/codecs/multiline) works). It really sounds like HHVM is just solving problems you haven't encountered yet, and so don't consider important. Believe me: once you get to the scale where you need centralized logging, you really start to wish vanilla-PHP escaped newlines like HHVM does.
I just threw together a docker image for melody, would make me feel slightly better about it docker run -t -i davedevelopment/melody 565752f13499a3fa17d9
Oh gahhhddd! I FUTGATTTT DA HEADAH!!! I'll fix it! *scrambles to pull up vim*
Relying on an external website for synchronous call is not a good idea. Granted you call it only once (I hope) after login, but that could introduce undesirable delays. It would be acceptable if ipinfo.io provided more accuracy than a local DB such as maxmind, but it is not the case!
This is the proper way to do it. Relying on constraints to do the validation isn't good practice. HOWEVER: constraints ARE GOOD. Your "name" field should have the UNIQUE constraint. The constraint both indicate to a future developer reading your scheme that this field should be unique and it also acts as a failsafe.
&gt; Its garbage clean-up is subpar when taking that into account. Could you elaborate on this?
 &lt;?php /** * your authentication/tracking logic here */ header('Content-type: text/plain'); header('Content-Disposition: attachment; filename="'.$filename.'"'); readfile($file_path); More information at the PHP manual entry for [`header`](http://php.net/manual/en/function.header.php)
This is something that's been missed in the HVVM hype: it's a Facebook product with a design goal of fulfilling their needs. That outside developers want something different doesn't make this requests a design goal for Facebook. The fact they open sourced it means they provided a means for the public to use it, not for the public to demand they change their internal product.
&gt; The developer experience for HHVM needs to be largely the same as PHP In this post: entitlement. That's your opinion. If it's "needed", fork the project and take on the responsibility. 
Not sure if crazy or genius...
I heard [Sentry](https://cartalyst.com/manual/sentry/2.1) is good.
&gt;usually too big for somebody random on the internet to review and sort out. ' throw it up on github and Ill have a look. reading code and thinking of how I would improve it is one of the things I like doing.
You might be diving into the code a little too quickly. You should have at least a rough idea of which design patterns and directory structures make sense for your current project before you even start. Planning is an important and sometimes undervalued part of coding. That said, it sounds like you're on the right track, and I don't think you need to worry too much. The get-your-hands-dirty approach that you're using is a long and hard path, but it pays off in the end. Just keep learning and you'll be golden.
Beginner and Novice are the same thing. It sounds like you're trying to transition of Beginner to Intermediate. You really should stop trying to write your own framework for the moment, and start using a mature framework. Good frameworks aren't trivial to write, and generally require an expert level of knowledge to write well. The thing with a framework is that it helps remove you from a lot of boilerplate code - that is, common code everyone would normally need for any give web project. The easiest way for you to bridge the gap is to begin using and understanding code that is better than yours. Don't reinvent the wheel until you understand how to make a better wheel. Design patterns are everywhere in good code. The trick is to recognize when a design pattern is being used, and to understand why it's being used. In order to help with this, it's commonly recommended to read [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&amp;qid=1418439462&amp;sr=8-1&amp;keywords=Design+Patterns%3A+Elements+of+Reusable+Object-Oriented+Software). This is a book every programmer should own regardless of the language they use.
I like the idea of a framework agnostic solution, but a few things have emerged since I started looking into it: It is now a different project called Sentinel which is further subdivided and it seems to require recurring subscription payments from the start : ( 
I've been unimpressed thus far. I've ran into subtle differences between HHVM and PHP within minutes. Crashes and exceptions. That's even without Hack. Also, it wasn't really any faster.
I've actually started work on something like this: [Gatekeeper](https://github.com/psecio/gatekeeper)
A lot of this for me came from planning out my architecture before writing any code. Writing out dependencies, classes (i.e. that classes responsibility), and how all those classes fit together. Getting as much of it on paper as I could (even doing just a little bit of this helped me a lot). The issue I found -- before I started doing this is I'd start coding. Be fairly deep in to the problem and discover I missed something in my mental model about what I was trying to do. Beginner me would just be like oh dang, I'll just add another private function or another array needs to be passed in to my constructor Or whatever. Without realising I was making a significant design decision or was breaking one or more of the [SOLID](https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29) principles. Other than that it was a lot of seeing what other people did. I started using some modern frameworks and eventually got curious about what in the world it was doing under my apps feet. So I started reading. This is one reason I like to recommend [slim](http://www.slimframework.com/) and other micro / component frameworks because they are not as hard to jump into the code and understand. The transition always feels slow. You probably have a better understanding than you think you do. Don't get discouraged keep hacking at it, you'll get there! EDIT: Typo
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SOLID (object-oriented design)**](https://en.wikipedia.org/wiki/SOLID%20%28object-oriented%20design%29): [](#sfw) --- &gt;In [computer programming](https://en.wikipedia.org/wiki/Computer_programming), __SOLID__ (__Single responsibility, Open-closed, Liskov substitution, Interface [segregation](https://en.wikipedia.org/wiki/Segregation) and Dependency inversion__) is a [mnemonic](https://en.wikipedia.org/wiki/Mnemonic) [acronym](https://en.wikipedia.org/wiki/Acronym) introduced by Michael Feathers for the "first five principles" named by [Robert C. Martin](https://en.wikipedia.org/wiki/Robert_C._Martin) in the early 2000s that stands for five basic principles of [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming) and [design](https://en.wikipedia.org/wiki/Object-oriented_design). The principles, when applied together, intend to make it more likely that a [programmer](https://en.wikipedia.org/wiki/Computer_programmer) will create a system that is easy to [maintain](https://en.wikipedia.org/wiki/Software_maintenance) and extend over time. The principles of SOLID are guidelines that can be applied while working on software to remove [code smells](https://en.wikipedia.org/wiki/Code_smell) by causing the programmer to [refactor](https://en.wikipedia.org/wiki/Code_refactoring) the software's [source code](https://en.wikipedia.org/wiki/Source_code) until it is both legible and extensible. It is part of an overall strategy of [agile](https://en.wikipedia.org/wiki/Agile_software_development) and [adaptive programming](https://en.wikipedia.org/wiki/Adaptive_Software_Development). &gt; --- ^Interesting: [^Robert ^Cecil ^Martin](https://en.wikipedia.org/wiki/Robert_Cecil_Martin) ^| [^No ^Silver ^Bullet](https://en.wikipedia.org/wiki/No_Silver_Bullet) ^| [^GRASP ^\(object-oriented ^design)](https://en.wikipedia.org/wiki/GRASP_\(object-oriented_design\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmthoq7) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmthoq7)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Me too. 
PHP has is_callable(), which means you don't need to use the Reflection API. Its still a form of reflection / introspection but more lightweight.
I'm a big fan of Twig, but I want to keep the footprint of this application small for now.
It's wrong to delegate query building to a driver. Suppose we have a query which will be run on two servers. So we will have two connections. $conns = [new mysqli(), new mysqli()]; $query = QueryBuilder\update('user', ['tz' =&gt; 240]); foreach ($conns as $conn) { $sql = $query-&gt;compile($conn); $conn-&gt;query($sql); } Previous example is more clean and fast than follow: $conns = [new mysqli(), new mysqli()]; foreach ($conns as $conn) { $driver = new Driver\Mysqli($conn); $driver-&gt;update('user', ['tz' =&gt; 240])-&gt;compile()-&gt;run(); }
Extensibility is a power of the builder. You can write own expression which implements ExpressionInterface. Creating longer query statements is not philosophy of the framework. But it will be look more declarative than in another builders.
No, your implementation is different.
I'm game!
You progress a lot faster when working with other people's code rather than trying to implement everything yourself. This includes working with frameworks/packages as well as actual collaboration. In terms of "fixing" your current codebase it would probably be easier to just start again. In business the big re-write is generally considered to be a poor idea but if it's a personal project that was written as a beginner it will probably be easier, faster and produce a better result to just start again with everything you know now (using a popular framework).
Did you actually try it? I am considering trying this to improve our application's performance. I'm worried though about deployment complexity. At the moment we push to production without requiring a web server restart.
They tracked and collected informations with the Google Car "spying on wireless"
Have you documented them and submitted bug reports?
Dude, you've got some serious anger issues... 
I have used laravel before but I feel like I'm just riding the rollercoaster instead of understanding how it works. The gap is just a little too big for me to truly understand what is going on. I do feel like I am learning a bit faster this way though. Thanks for the book suggestion I will check it out.
Sentry forces you to use eloquent, problem is I already have a lot of code using doctrine. So now I have two orm floating around.
http://akrabat.com/zend-framework-2/returning-json-from-a-zf2-controller-action/
I can understand the appeal of wanting to write everything yourself, but in most cases, the established framework or package already has a nice long track record of being tested in the wild. For things like security or sanitation, using the expert-made tools is almost a necessity, rather than a convenience.
one of the goals is in fact php compatibility.
That last one seems like really good advice and I wanted to get into TDD for a while but have not gotten to it yet. Do you have any good sources for learning test driven development with php? How much did learning another programming language help you further your goals in for example php?
Really depends on what the purpose is. Rolling your own, and learning each step along the way, and refactoring improving as you learn new stuff - that's all really good. Probably one of the best ways to learn for many people. But... that probably shouldn't be used in production for anything sensitive - at least not without a lot of review from someone more experienced.
The site itself could do with some spelling/grammar proof-reading: * JQuerry * web apllication * see on oyur way back home * unique opprtunities * Given below is a code * LARAVEL Might be worth asking someone to go through the tutorial material itself too, to comb for similar issues. 
does it try to get some variables under php framework and send them to the site in the end of the code?
&gt; [...] currently working on the mvc structure. This project makes me realize how little I actually know. MVC really separates the men from the boys. Not the first time I've heard that either.
The clip is empty.
It is malware. It is a remote control script that can put more files on your site, DOS outside IPs, and others.
I've seen this on a client's website. A plugin will put a base_64 encoded string that's malware into either your theme's css directory or your wp-content/uploads directory. This can then be accessed by another server and executed on yours, without it ever being noticed by any virus scans, or affecting your normal page loads. It's simple, but hard to find. I am personally now putting a .htaccess file into all of my server's wp-content directory that prevents execution of PHP directly for any of the files in the directory.
If a component is registered as a shared object, every time that dependency is requested from the dependency injection container, it will return the same instance of that class. If it isn't registered as a shared object, it'll return a new instance of the class every time it is requested. 
A classic singleton is a class that's written in a way such that you can only create one instance of the class. If you try to create more you'll keep getting an reference to the first instance that was created instead of a new one. With the DI container you no longer need to put complex singleton code in your class. You can just write your classes as normal and tell the container to share the service. Anytime you access it the container will hand out the first instance created instead of creating a new one. 
Do you take a look to jour error log file ? Also, validate that the POST variable is set.
Is your second code in file benzin.php?
POST variable is set and program is validated it gives me the message: program excited
You forgot a : after "SuperPlus" 
You are missing a colon(:) after the second case. You may also want to set error report to -1 in order to have displayed all the errors http://php.net/manual/en/function.error-reporting.php
Thanks you are great!
&gt; If I was going to specify different background images, I would do so by having code that assigns an image url to a variable, then set the background image to that variable. Wouldn't it be better to set a class name (to apply to ```&lt;body&gt;```) which specifies a background image? That way the cosmetic changes are set in the CSS rather than the business logic.
I just stumbled across this github repository. Was expecting C code but it seems to be written in PHP. Take a look: https://github.com/nmmmnu/Micro-HTTPD 
Not to mention it's badly written to start with. Also going through 3 things that don't work seems like it's just padding out the article.
How so? One is pronounced "pickle", one is pronounced "peckle".
Well, the first mistake is that it's completely unreadable. Your body tag isn't closed properly in the first sample. You're missing a colon after "SuperPlus". You have a little bit of a DRY violation (don't repeat yourself). You should also have a default case in your switch just in case your input gets borked/manipulated. As an alternative, you could do something like this, which avoids a switch statement altogether and does some input validation. It also makes it easier to add fuel types in the future because you just have to add them to the array. https://gist.github.com/JamesB41/5b36be18cb9d92e65fc6 I know you're new to PHP, I'm just providing an alternative approach.
lolwat
PN me ;)
Try to calm it down first
So many errors in that code. "&lt;? php" should be "&lt;?php" "&lt;bodyid" should be "&lt;body id" "($ content == 'showrecipe')" should be "($content == 'showrecipe')". You consistently have space issues. "if ($ content='main') {" should be "if ($content=='main') {" - but actually you should probably use else { here. The css is invalid too. It's best to generate as little html as possible from php. I'd set and use the variable $bodyID, like this: &lt;body id="&lt;?=$bodyID?&gt;"&gt; 
uh, um, uh. On top of the bad audio that annoyed me a bit more.
There are two primary purposes for this pattern: avoiding the overhead from creating and managing objects, and reducing the number of connections/pointers to external resources. It takes time to create and configure an object, and each object exists in memory. Imagine you have a logger class, which is used in hundreds of different places in your code. It would be wasteful to create a new logger object *every single time* you want to log a message to a file. Instead you should create *one* logger object, and use that same object over and over. Create the object once, configure it once, and maintain one pointer to the log file. Now imagine a database object, which is also used in hundreds of different places in your code. Each time you create an instance of the database class the object creates a connection to the database. It would be incredibly wasteful to create (and configure) a new instance of the database class each time you wanted to query the database, and it would be incredibly wasteful if each object created it's own connection to the database. Instead you want to create and reuse a *single* database object in your code, which keeps only a *single* connection to the database. I mean, imagine if you had to buy a new cell phone every time you wanted to make a phone call. That would be very time consuming and very wasteful. It makes more sense to buy *one* phone, and reuse that *one* phone over and over. In the same way it makes sense to create *one* instance of a class, and reuse that object over and over.
At the top of your main php file(s) (not necessary for files you include into the main file) Add: your index.php file: &lt;?php ini_set('display_errors', 1); error_reporting(-1); //code here You can even do something like this so you can disable the errors on the fly: &lt;?php define('SHOW_ERRORS', true); //change that to false to disable errors temporarily if(defined('SHOW_ERRORS') &amp;&amp; SHOW_ERRORS == true) { ini_set('display_errors', 1); error_reporting(-1); } //code here What the above does is spits out proper error messages that you can google the error and figure out what the issue is at a quicker rate. Now when you get a little more experience look into setting this in your php.ini settings file in your php/apache installation folders. In a year or two this info will make more sense, but personally I'd just start off continuing to learn the language at the pace you like and then study others code on say http://github.com to understand how php is layed out and then once you start getting it check out: http://phptherightway.com (which is a good resource of information about the language and current standards, etc...) gl - remember learn at your own pace.
So many of these remote file exploit drops can be avoided by ensuring (at least on Linux boxen) by having the user running your web server (or PHP-FPM if using Nginx/similar) different to that of the files/directories of the PHP application itself - and only setting paths to the same user where uploads explicitly need to be written/saved. 
There should not be single quotes around your parameters. You really also should be checking to see if things fail or succeed - otherwise you wind up in the boat you're in when you could have had something telling you exactly what the error was in the first place.
So what you're saying is, you tried it once, it had minor issues that are likely fixed by now, and so you don't want to use it. Are you familiar with this language? If that's your tolerance level you should have stopped developing in PHP, hell, ***ANY*** OSS language the moment you started. I guarantee you that the official PHP engine has more bugs than HHVM does, and yet you're still using it.
You might want to use PDO http://code.tutsplus.com/tutorials/why-you-should-be-using-phps-pdo-for-database-access--net-12059 
Doesn't do authentication, but [Lock](https://github.com/BeatSwitch/lock) is great for handling ACL. [Sentry](https://github.com/cartalyst/sentry) is pretty good for auth, but depends on what you're looking for.
| simply exit() as it’s shown in the below example Ouch. "How not to use a framework" might be a better title for this post.. 
MySQLi is just fine. For those not getting it, MySQLi is [pretty much PDO](http://code.tutsplus.com/tutorials/pdo-vs-mysqli-which-should-you-use--net-24059). The only reason you'd want to *rewrite* something with PDO from MySQLi would be if you want to use a backend other than MySQL. OP started with MySQLi, there's no reason for him/her to switch it to PDO.
It is fine, but PDO is generally considered to be preferable.
How do you figure? PDO may be a bit more flexible but their implementations don't differ very much.
this site is better for pasting text [http://pastebin.com/FczqWYxX](http://pastebin.com/FczqWYxX)
PDO has parameters and prepared statement just like what OP is asking for. MySQLi only has direct string mangling. So, while you can get away with MySQLi, PDO is preferable.
[MySQLi has parameters](http://php.net/manual/en/mysqli.prepare.php)... I believe you're confusing standard MySQL for MySQLi.
&gt; So what you're saying is, you tried it once, it had minor issues that are likely fixed by now, and so you don't want to use it. I'm not sure if you develop websites for a living, but I can't have sites crashing on me all the time (*not* a "minor issue" by the way). It's a new technology. It's unproven. I'll try again in a few months or years when they work out the kinks. Until then I'll keep using what I know works. Yes, PHP isn't without its flaws, but I've been writing PHP for years -- I know what they are and how to avoid them. I don't have time to fuck around with HHVM for little to no gain. I've got more important problems to work on. Hell, [look at this](http://hhvm.com/frameworks/). Less than 100% on *any* of those means it simply doesn't work. A single failing test can break your entire app. Do you have time to rewrite an entire framework to avoid all of HHVM's pitfalls, or pester them to fix everything that's broken, waiting weeks, months or years for a patch, in addition to actually developing your app?
PDO supports a number of backends that aren't MySQL and it also supports named parameters. They are very similar, but that's more of a reason to switch to PDO imo. Little extra needed to learn.
There are a couple of minor changes you want to make: First, as /u/and_yet_not_yet said, lose the single quotes around the question mark. By calling `bind_param("s", $username)` you are explicitly telling the statement the question mark refers to a string. Second, `bind_result()` works a little differently than you think it does (I've been doing this for ten plus years and still had to check the docs, it works oddly). After calling `fetch()`, the username (the first and only column you `SELECT`ed) will be bound into that variable, not the entire row. Similarly, you would want something like the following for multiple columns: $stmt-&gt;prepare("SELECT `username`, `password` FROM `accounts` WHERE `username` = ?"); $stmt-&gt;bind_param("s", $username_from_POST); $stmt-&gt;execute(); $stmt-&gt;bind_result($username_in_db, $password_in_db); while ($stmt-&gt;fetch()) { // $username_in_db and $password_in_db have the value of the row } There are a couple ways to fix this: 1. Use `$stmt-&gt;store_result()` and `$stmt-&gt;num_rows` to check if your SELECT returned anything. The `store_result` call is critical here, because until you do that, the data hasn't actually been fetched from the server, so PHP does not know the size of the result set! (This is done to reduce unnecessary memory overhead which is helpful in many situations, but complicates cases like this) 2. Rather than `if (mysqli_num_rows($result)) {`, simply check if `$result` is non-NULL, since it should have the username value assigned to it if one was found in the DB. (It's also quite odd to mix the procedural and OO APIs here, although the documentation gives this as an example. Bad docs!) I'd suggest #1, as you're guaranteed to have a meaningful number in the number of rows. Finally, your INSERT is a little odd as well: 1. `bind_param` should only accept variables directly, rather than the result of a function call. Do something like $hashed_pw = password_hash($password1, PASSWORD_BCRYPT); $stmt-&gt;bind_param("sssss", ...., $hashed_pw, ...); If you have strict error reporting enabled, you'd otherwise see an error like this: Strict standards: Only variables should be passed by reference in /home/firehed/test.php on line 43 2. there's no need to do `bind_result` for an INSERT (or any non-SELECT). Simply checking `$stmt-&gt;affected_rows` is sufficient. Here's my version that includes these suggestions that should make a good starting point: // (Your existing connection and POST handling code) if ($stmt = $mysqli-&gt;prepare("SELECT `username` FROM `accounts` WHERE username = ?")) { $stmt-&gt;bind_param("s", $username); $stmt-&gt;execute(); $stmt-&gt;store_result(); if ($stmt-&gt;num_rows) { // user was found } else { // user was not found } $stmt-&gt;close(); } // Be sure there's logic above to indicate // if you should continue to this part! if ($stmt = $mysqli-&gt;prepare("INSERT INTO `accounts`(`firstname`, `username`, `password`, `email`, `ip`) VALUES (?,?,?,?,?)")) { $db_pw = password_hash($password1, PASSWORD_BCRYPT); $stmt-&gt;bind_param("sssss", $firstname, $username, $db_pw, $email, $ip); $stmt-&gt;execute(); if ($stmt-&gt;affected_rows &gt; 0) { // INSERT was successful } $stmt-&gt;close(); } $mysqli-&gt;close(); As a general rule, I'd strongly suggest improving the error handling a bit as well, although my example doesn't reflect that. It's a reasonably simply matter of doing something like changing $stmt-&gt;execute(); to if (!$stmt-&gt;execute()) { throw new Exception($stmt-&gt;error, $stmt-&gt;errno); } And props for using bcrypt for good password storage :D
If we're talking about a comparison between MySQLi and PDO, the backend flexibility doesn't mean anything. So then you're down to named parameters, which really just amounts to code readability. This is simply for sake of argument, by the way. I use PDO exclusively, but for OP MySQLi will do the job.
&gt; &amp;&amp; SHOW_ERRORS == true why do the weak comparison to true? `if(defined('SHOW_ERRORS') &amp;&amp; SHOW_ERRORS) `
because I wrote that post in a minute tops, thanks for the correction
&gt; in a minute tops &gt; 1235 meaningful characters http://imgur.com/Zz4sq5J
what ever makes you feel good.
Yes.
Sounds interesting, will check it out monday when i'm back at the office
I think the problem here is that if someone is asking this type of question, talking about DI, they aren't going to understand what you mean. Upvote anyway as it's the right answer :-)
&gt; as I understand shared means singleton? Yes you understand it right. - shared == singleton (one instance reused every time it's injected) - non-shared == new instance created every time it's injected
The only reason I prefer PDO is because it allows using different database types, which is useful if you're making an open source product to be used on different systems.
While we're at it, could anyone be kind to shortly explain how to work with Laravels DI and non-shared objects? All objects injected in the Laravel framework is singletons, right? How would you normally go forth if you need to create new instances of the injected object? 
You either haven't read half of this comment train or you've not been in the industry for long. gg.
I really like Symfony2, and security component with the right bundle is my preferred option
Feature-wise yes, they're comparable. In comparison to PDO, MySQLi even provides a few more MySQL-specific advantages such as more thorough debugging support, simpler multiple statement combinations, server-side prepared statements. And I actually like the hybrid procedural/object-structured interface approach. MySQLi is arguably the more "expert" API of the two. - However: * Parameter binding is an *absolute clusterfuck* with MySQLi. * It solely benefits stored procedure usage once in a while. * You can't rely on API compatiblity between libmysql and mysqlnd configurations. * *No named parameters*; WTF all over. Which is why it's generally shunned for new projects. And it's totally inept to be recommended to newcomers. → Most invariably just keep using variable interpolation with mysqli_ functions (after eventually managing the idiosyncratic function signature shift). MySQLi is nothing more than a stop-gap API. 
Getting a developer to talk about best practices while showing enthusiasm and excitement has always been the best indicator for me in interviews. But if you absolutely had to have a coding exercise, I'd focus on something that would reveal a candidate's knowledge about design patterns.
I know but it is quick and easy :)
The readme file uses the deprecated mysql_* set of functions. That alone is reason enough to not bother looking at the code.
As per the other remarks, one of the first things to fix would be switching to PDO or MySQLi - the mysql library has been deprecated for a while. Good idea to create examples. I like the availability of the ORM in JavaScript, but could you have just added a JS frontend to Doctrine or Propel? One other thing that people like is seeing continuous integration icons - can you set that up on Travis or something? It's free if your project is open source. 
;)
Shut up :)
(:
Been building an ecommerce site for a large company for the past 8 months. The back end devs decided on magento, which is great and all but about 4 months in we realized we should have built something from scratch. If you have the time it's much better to build something custom that fits your needs perfectly, rather than modify an existing tool. 
I faced this dilemma myself, and I decided to build my on on top of Laravel 3 (laravel 4 hadn't come out yet). I don't regret doing it as I learnt a lot while building it, but I wouldn't do it again, as I was doing it during my free time, and I already had a full time job, so it took ages. So my advice is , if you are really interested in learning and can afford to spend some time, do it yourself, but not from scratch, use a framework, and/or composer packages for this and that. Otherwise use something else and modify it, it will be 100 times easier.
how did you realize that you need to build something from scratch, what problems did you face?
i would also take a look
Magento. Shits got like a year long learning curve.
if you had to do it again, what framework would you use, zend? laravel? symfony and why?
riding the rollercoaster is good. you want to ride it. if you had to build a rollercoaster every time you wanted to go on a ride, that would be frustrating, right? a framework is basically a pre-constructed, battle-tested rollercoaster that people can vouch for. wouldn't you rather ride that than your own rickety-wooden thing? i recommend learning how to build a moderately decent rollercoaster on your own, and then using the commonly agreed up on rollercoaster for production.
Maybe this - https://github.com/robmorgan/phinx#version-history?
Well you should never have to build everything from scratch. There are packages you can easily put together to get a customized framework. Symfony components is a great start.
You must ask the question of what are you REALLY doing different that the ecomm system can't do. While others have said Magento has a difficult learning curve the amount of modules and other pieces out there are a good starting point. Writing modules isn't as bad since they provide a pretty good architecture to hook-in(not as easy to pickup but extensible after). While it is bigger and more complex than a basic cart. One company I built for has 25 products and another has 50,000+ products. Remember that its not only the eCommerce selling part but the accounting/shipping side that needs to be thought of, how to export orders and match up the funds. Magento and other popular carts probably have integrations. So when do you roll-your-own. I'd say if you are selling subscription services perhaps or unique pricing tiers like hosting or non-physical/digital download item. In most other cases you are probably wasting your time since it is done already. Also if the primary point isn't to sell something but offer a premium option, ad-free that you just want a simple payment then don't bring a battleship. Other advice, don't write your own framework. Why? Because if you grow and need to bring people on then it is easier to have someone familiar with another framework than your custom built one. Think cost of adding new features /documentation /testing etc. Symfony or Larvel will be fine. I used Symfony before, not so much Larvel but it looks promising.
Thanks man, after reading your post it finally makes sense now. Thanks all by the way!
Thanks for your answer, could you just clarify it a little? Just want to make sure I'm understanding it right. So, if I set my services as shared (aka singletons) in my DIC - it's not considered as anti pattern since it is controlled by DIC? Or I'm getting it wrong and I should not have any singletons at all? Thanks very much!
Reusing services is often what you want. Eg you want a single connection to each database you use in a request, not a new 1 for each query. This is not an anti pattern. I wouldn't say that reusing the same instance in some circumstances is the same as singletons. Your DIC will let you share any number of instances of a class under different names. You can also have many instances of a DIC if you want. Neither of these are controlled by global state.
I've had to make an online store for window / door seller. After looking at prestashop and drupal commerce, i've decided to build my own .. But using Silex and Symfony components (Forms, Security and some others). But be warned, as a full time job, it took me 5 month of work and maybe 1 month of debug. Between the public website, the client zone, the admin zone.. That's a lot of work. Finally my client is really happy and has a solution really adequate to his needs.
Create a checklist what you need and what the framework/platform(s) have. - sufficient search - customizable products - cart options (delivery choices etc..) - discount/campaign/gift card rules - payment gateways - shipping / warehouse integration - user accounts - product reviews - abandoned carts process - email templates - reports Depending on the case, you need just a few features or the whole set and the list goes on forever. Configure a module = an hour or two? Develop a module = hours, days or weeks. Your estimate. The problem is, having no experience of the ecommerce platform you'll know the correct answer a lot later on.. If you have now pretty good idea how each desired feature would be implemented with the tools you know, I'd go with custom code instead of previously unknown platform. Then again, with modules and knowledge created, you might be able to pull off the next ecommerce with a lot less work if you find the platform decent to work with. 
You can use the Whoisdoma Api Core which is an api based whois system, and has a graphical admin interface. You will need the installer to actually create the database tables and the configuration file. https://github.com/Whoisdoma/core https://github.com/Whoisdoma/installer
But... you might have tot deal with 2 different databases. Then you'll regret the single instance limitation of your DB class. Singletons are hardly ever the best solution. In the DB example class instances could store the actual unique connections in a registry.
I think the OP is just talking about the ecommerce side of things, rather than the framework it sits on. I've built two custom ecommerce systems and the big argument for doing it is that every company works differently. From accounting to packing &amp; dispatch, a well built custom ecommerce platform is going to keep costs down and customers happier. It also comes down to control. Some companies are happy to compromise control by using something off the shelf, others not so much. Internal business culture is often a big driving force in decision making, especially with stuff like this.
I'm not sure there's a good answer yet. Most ecommerce software is terrible. And yet, the problem space is complex enough that even people who do this full time (like me) make big mistakes (hence most ecommerce software being terrible). For our own ecommerce software I've been working on gathering the requirements (the hardest part), and trying to build ecommerce components that can be used (or at least copied) by everone. You can see my initial results in the [addressing](https://drupalcommerce.org/blog/16864/commerce-2x-stories-addressing) and [taxes](https://drupalcommerce.org/blog/31036/commerce-2x-stories-taxes) blog posts that I've written to explain the backstory behind the [addressing](https://github.com/commerceguys/addressing), [zone](https://github.com/commerceguys/zone) and [tax](https://github.com/commerceguys/tax) libraries we've built. Initial feedback has been very positive, I'd love to discuss the problem space if you're interested. (If you're interested in components, also check out the Sylius ones, and Omnipay/Payum for payment processing).
Which of those decoupled modules are up already, in a close-to-final shape? Any resources clarifying the design considerations? I'd love to take a look.
I would go with Symfony, because only the Symfony ecosystem has started focusing on creating ecommerce components (other ecosystems don't have a big focus on decoupling).
 &lt;?php $name = $_POST['name']; $email = $_POST['email']; $message = trim($_POST['message']); $body = "{$name} &lt;{$email}&gt; wrote: {$message}"; if (filter_var($email, FILTER_VALIDATE_EMAIL)) { mail( 'you@yourdomain.com', 'E-Mail Subject', $body ); } But seriously, why not validate this stuff? *Edit: the code is untested as I just wrote it in here. But it should work - hopefully.*
If you need to add something on top of an existing solution, you can use the solution, but if you need to modify a feature , build from scratch. 
The only way the client would have something you didn't explicitly give them in the page is via a previously set cookie or local storage, which can be manipulated by the client. And if you give it to them, you already have it, so what's the point in doing the round-trip? You're going to have to be a lot more specific about your use case, because without specific detail (and a really special case) the answer is always going to be "if you want reliable data *about your own processes*, store it yourself."
Not to mention the fact that it's much easier to convince clients to sign when they know there are other companies out there that can work on platform x instead of some custom software. There's a lot of bad advice about rolling your own in this thread. You should never roll your own for e commerce for a multitude of reasons; support, talent, development speed, code quality, patent trolls, liability, etc. Ecommerce sites aren't blogs, if you aren't willing to put in the time to learn an existing system please don't attempt it.
By validate I meant I don't want script to check if email is correct etc. I've been looking in Google for the code, and it looks like one of these "simple php form". When I get home, I will try it. If it works I will keep my promise of course. Btw. someone downvoted you and this thread, it wasn't me.
I've used it with a simple website built with [Slim](http://www.slimframework.com/) and found it very easy to set up. Bonus point: Configuring it for multiple environments is pretty simple as you can store configuration in a YAML file.
In my job we do some Wordpress with external (not Wordpress) data and I always use Sphinx. Really easy to setup and get going with. 9/10 would recommend. 
This Friday I was looking for the prefix support. Will use it tomorrow. Thank you for an awesome project! 
What's the advantage of this over the [DoctrineMigrationsBundle](http://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html)?
I've only used Phinx, but it looks like they have similar features. After just a cursory glance, Phinx seems less verbose to me. I like it's configurations better, and I like the coding style of phinx migrations better. Both seem good though, just use what works for you.
 I don't know anything about Liquibase, but Phinx is a tool that allows you to roll out changes (called migrations) to your database. You can roll up and down to different versions of your database. You write queries about how your tables changes to go up a version, and down a version. A lot of the work is up to you, but tools like Phinx make it easier. 
PDO is the de-facto industry standard. Both are good, but more shops/projecs will use PDO as the choice db library.
Be able to choose right level of customization is important. I would never recommend you starting way from scratch, as many problems has well-considered solutions. I always start from some basic framework, so that you have basic needs covered, and then maybe built the ecommerce part myself.
We use it at my place and find it very easy to use. We've used it from the start of a new project though, not with an existing one. One issue I can think of with that is it keeps track of which migrations its run (for good reason) in a table called *phinxlog* so if you wanted to write up your existing tables into a migration when you ran it Phinx would complain they already exist. You can simply add the relevant entry to the *phinxlog* table to so it believes it has already run that migration to get around this or Phinx may possibly offer a more elegant solution, I've not looked into it. [edit] Corrected phinxlog table name.
&gt; No Bundles &gt; […] &gt; So why isn’t this the Symfony best practice instead of AppBundle? […] And for Symfony 3.0, maybe we’ll get there! That would be great! I see absolutely no reason to have a `AppBundle` in most applications.
How long does it take a new engineer to become truly productive in a bespoke ecommerce system? At least with a framework you stand some chance of finding someone that's done it before.
I found doctrine migrations very slow on large schemas. From what I can tell it builds a representation of the schema in memory before executing your code, so takes a while (around 7 minutes for me on a database with around 100 tables and ~6 million records) to execute. Phinx doesn't suffer from this performance issue on large schemas, and executes in a few seconds on the same schema. This is the sole reason that we chose phinx over doctrine migrations, as we prefer to use doctrine for all other database related functionality - it just didn't measure up in terms of performance.
&gt; bespoke I really cant stand this word. What is the point of your comment? I was answering the question "what problems did you face" with "magento". 
It's also very easy for quick prototyping. You can build out your database scheme and yiis code generation does a fantastic job. 
Especially Magento. It's like the primary goal of the people who built magento was job security.
[It's hardly the worst](https://github.com/sciactive/nymph/blob/master/src/NymphDriverPostgreSQL.php#L121). To OP, sorry to say, but half of this project could appear in a TDWTF article and nobody would believe it was legit.
Anytime someone says "use magento" I would consider that the time to start developing your own.
I'll ask a wonderful 'how long is a piece of string question'. For a while I've self-coded everything and basically avoided using anything like Composer/Frameworks/etc, but it's an area of weakness that I want to fix so I thought I'd start out with a framework. So now for the lovely question... Which framework would you suggest? Edit: Great replies, really helped a lot. Thanks :)
The name would make you think it's the PHP language specification, but it's actually some framework. Weird.
I think George's suggestion of making it non-associative is the best, if we do anything.
Yeah, that seems obviously the best solution. Also, something should really be done. The current non-standard implementation is a disaster. And a 7.0 compatibility break with an obvious compiler error is the perfect time to do it. Making code compatible with all PHP versions is still trivial - just add parenthesises. The only downside will be for people who blindly try to run old PHP code in production on PHP 7.0 with literally zero testing, but that is not a supported use case!
I feel like this would be slow and potentially a waste of valuable time in a startup like atmosphere where the key is to adapt quickly and the api of the application might be changing rapidly. Writing a bunch of tests for some class that might just get thrown away may be an acceptable expenditure of time in some larger enterprise but for small agile teams spending your resources wisely (and time is one of the most precious ones of them all) is truly an art. Tests are great but I feel better for more established APIs. Of course I'm not a big believer in TDD to begin with but that doesn't mean it isn't a valid approach for some teams. On the other hand (and I imagine some of you might find this controversial) I think a tool like this might allow a less creative developer to design a system that a more talented one might be able to do in his head, and faster.
I have been using Phalcon for over a year. It's written in C so it has to be installed on the host.. But it's pretty fast and has some neat concepts. The developers are also working on a language between C and PHP, Zephyr. I don't follow it as closely as my friend, but generally this framework has been pretty awesome, and the support is decent. One note: its oracle support was broken as of 1.3.2 (not sure about 1.3.4 or 2.0 (beta)). I can't really speak for the others.. I have an app I inherited which utilized Silex, and I do not much care for it or Symphony... but that's just me and could be due to the state of said app.
1) Not tied to Doctrine (and I use Doctrine extensively, but a lot of projects don't). 2) It's incredibly fast. 3) Very easy to configure (especially for test/dev/prod environments). 4) I switched from DoctrineMigrations because at the time it hadn't been updated for a while and they looked like they were doing a complete rewrite.
Can someone explain the "associative" part of this to me? I use ternaries occasionally, but strictly never nest them, so I hadn't ever run into this issue. I do agree from reading examples that the [expected behaviour differs drastically from the actual](http://phpsadness.com/sad/30). I really did think that what was the current behaviour, but apparently not.
You speak the truth. I know I have a lot of haters in the sub and even got my main account banned, but I really do know what I'm talking about, for the most part, and this is right on the money. I created the entire taxing system for www.blinds.ca almost a decade ago, for instance. The tax situation for custom-made, made-in-Canada products was so complex their regional and national tax advisers were even in the dark. You have to figure out 1) where the product was made, 2) where it's shipped from, 3) where it's shipped to... Because the shipping from province gets a separate tax rate on the shipping charges :O I then went ahead, quit that job, spent 6 hours making an API to handle Canadian tax rates, and then I expanded to the EU and then America. Then I sold the system to Reuters for a handsome profit about a year after that.
I used Laravel for a simple, internal website not too long ago. It took a little work to get the hang of it, but its simplicity and flexibility are great.
hey guy! thanks for the info :)
&gt; It is not a bug, as the issue's status says: "Not a bug". Heh.
thats good info, did you use Eloquent ORM? because it is an active record, which as far as i know, are not a good fit for complex systems (ecommerce in this case)
You'd use this for versioning the schema of your database, but not the data itself.
Depends on the kind of action, but yes, you need a last timestamp, either from the database, the session, or something else.
Yep. I just hope they sunset the old code quickly and remove it from the code base. Would definitely not want to deal with messy if clauses as the way it was presented. If the code must live in the same code base for some reason, I'd have at least set them up such that they're enabled via configurable components dependency injected into the main application. 
Haha
I love and hate Symfony when it comes to keeping everything decoupled. I just installed Sylious last week to see how their database structure was and spent days trying to find anything. 30+ route pages, 30+ configs, 30+ events, event listeners, resources, templates, etc. etc. It made trying to find anything a nightmare. I get why they do it, but it doesn't make trying to figure out which route is in what route file, or finding the correct template that needs to be edited any easier.
Hootsuite engineer here. Yes, we make an effort to remove dead code as soon as possible, usually within a week or two of public release.
PhpSpec is for writing specifications for PHP code. You write the specifications in PHP too.
These are 5k *real world* requests per second. Each request is heavily dependent on databases and other resources, which brings up much more interesting challenges than simple computational power.
That's definitely possible and may be the case in some situations. However, writing a spec (eg with PhpSpec) allows you to make changes to your API much faster and with more confidence. The problem with writing tests after writing the code instead of before is that you have to be a really really good developer to always write code that will be testable. If you write the tests just before then it's so much easier. Of course, if you don't want to test your code at all then not writing tests may be faster in some cases. Even if you have a very low cost manual testing workforce then the slow turnaround time is often more costly than automated tests.
You should check out PHPStorm + Symfony2 plugin. This will make your life a lot easier debugging event listeners, routes, templates and services
I think it is backwards compared to every other language. I just always used parenthesis so I wasn't even aware of the issue until it was pointed out to me.
+1 :| Seriously dude? 
Also 0.00 is false, but "0.00" is true. 
I always suggest Slim as a first framework. It's small, self-contained (no external libraries so it's easy to read/debug its code), simple and keeps close to what you would write with "raw" PHP.
At first I was like, _wow, this is really stupid...._, but then I was like _wow, this could be pretty helpful to a lot of people_. Fuck the haters, this is pretty cool.
You said Magento had a years learning curve so I wondered how long it takes new engineers to pick up an in-house system. Is it less or more than learning Magento?
thanks alot
Actually its just a little effort when you dont have an advance IDE
This is an [image snapshot](http://i.imgur.com/38zs6Rg.png) of my personal framework's directory structure. I would like to get any feedback just to improve anything. 
&gt; I feel like this would be slow and potentially a waste of valuable time in a startup like atmosphere where **the key is to adapt quickly** and the api of the application might be changing rapidly. TDD lets you adapt. Without it you can't know what you might break when you jump in and refactor that API. &gt;Of course I'm not a big believer in TDD to begin with I totally get this. It took me quite some time to come around. But once I made the commitment and developed something that was more or less fully backed by automated tests ... I just could not go back. &gt;I think a tool like this might allow a less creative developer to design a system that a more talented one might be able to do in his head, and faster. This isn't the point of TDD. It's 1) to properly define what you're trying to code, 2) allow safe (and encourage) refactoring, 3) provide some measurable quality control
actually Eloquent is probably my favorite part of Laravel. I know it's not perfect, but it's a nice abstraction and it saves you from writing a lot of boilerplate code. I didn't use is for everything though, at times I just found it easier to write my own sql, It's about using the right tool for the job. 
No it doesn't. You can just write your own provider using whatever you want to use.
Indeed, FOSuserbundle is well worth the read. Really easy to extend and modify AND it's Role based :)
To be honest, that one does stump me. "0" is `false` and "0.0" is `true`, if cast to boolean. It means you have to be very careful in comparisons. However, you can cast it to a `float`, as both (float)"0" and (float)"0.0" are `false`. I came across this last week in omnipay and fixed it with a cast to float. The tests only considered "0" but the formatted currency values could also be "0.00": https://github.com/thephpleague/omnipay-paypal/commit/4dc43c0b8525c86dd5f4612657a2a7a6ed40ee73 Edit: just trying to find an answer, there are some additional details in this [bogus] bug: https://bugs.php.net/bug.php?id=60402 According to these docs, boolval("0.0") is `false`: http://php.net/manual/en/function.boolval.php So boolval() does some kind of casting that (bool)"0.0" does not do. And this does make the example on that page the "hack for older PHP versions without boolval" wrong, since it has different behaviour for "0.0". I've only got PHP5.4 so can't test that to confirm. Mind, rereading the docs, the official examples conveniently miss out "0.0". Check the docs here: http://php.net/manual/en/language.types.boolean.php#language.types.boolean.casting and the *only* strings that evaluate to `false` are: the empty string, and the string "0" That's it. All other strings will cast to `true`. That's how it is, and that's what we need to live with and be aware of. I've gone around the houses a bit, but I hope that answers your question. It is because PHP says so, now stop asking *why* ;-)
you'd at least need some NOSQL cache to store the last used nonce otherwise how would you ever know if it has been used before. 
the problem of e-commerce solutions is usually the back-office what i see regularly is people seperating away from the normal magento frontends - developing something of their own, but still using its backends thats a good way to do it ... but i can guarantee you, that you will heaviliy underestimate the time it needs to build the backoffice part of an ecommerce solution if you ship "actual" products and not only virtual ones.
I'd recommend you to try [proofhub](http://proofhub.com/?ref=ak).
Yeah, ecommerce is incredibly complicated. The company I work for have been building a platform over the past year or so and it's been really eye opening as to how deep it goes. I would recommend using an existing solution, or if you can wait, watching this space ;)
At work we made our own base box based off the 64-bit Ubuntu 12.04 image from vagrantup.com. That was a couple of years ago though, we're upgrading to 14.04 in the near future.
Your own link explains it. An example from your link &gt; TRUE ? "a" : FALSE ? "b" : "c" Is parsed as &gt; (TRUE ? "a" : FALSE) ? "b" : "c" Where all other languages and common sense expects it to be right associative &gt; TRUE ? "a" : (FALSE ? "b" : "c") The current left associativeness simply is never useful, whereas right associativeness would be for chained if-elseif-elseif... .
I've built several custom ecommerce systems from the ground up, 100% custom code. Never do that. If you are going to do it definitely use a framework at least, Laravel or Symfony. But it will take you a **lot** of time to make. If you want to learn a lot: Yes, make your own If you want to make a profit on your time: No, use Shopify
At university, I learned that one type of [programming language specification](https://en.wikipedia.org/wiki/Programming_language_specification) is to simple take an implementation of the programming language and define that as the specification. That was mostly done as a thought experiment, before moving on to the actual serious definitions, because it would lead to the insane consequence that it is actually impossible for there to be bugs in the reference implementation, since any behavior is per definition in accordance with the specification! But some PHP developers seem to actually believe in that. With unfortunate consequences. Case in point...
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Programming language specification**](https://en.wikipedia.org/wiki/Programming%20language%20specification): [](#sfw) --- &gt; &gt;In [computing](https://en.wikipedia.org/wiki/Computing), a __programming language specification__ is an artifact that defines a [programming language](https://en.wikipedia.org/wiki/Programming_language) so that [users](https://en.wikipedia.org/wiki/Programmer) and [implementors](https://en.wikipedia.org/wiki/Programming_language_implementation) can agree on what programs in that language mean. &gt;A programming language specification can take several forms, including the following: &gt; &gt;* An explicit definition of the [syntax](https://en.wikipedia.org/wiki/Programming_language_syntax) and [semantics](https://en.wikipedia.org/wiki/Programming_language_semantics) of the language. While syntax is commonly specified using a formal grammar, semantic definitions may be written in [natural language](https://en.wikipedia.org/wiki/Natural_language) (e.g., the approach taken for the [C language](https://en.wikipedia.org/wiki/C_(programming_language\))), or a [formal semantics](https://en.wikipedia.org/wiki/Formal_semantics_of_programming_languages) (e.g., the [Standard ML](https://en.wikipedia.org/wiki/Standard_ML) and [Scheme](https://en.wikipedia.org/wiki/Scheme_(programming_language\)) specifications). &gt;* A description of the behavior of a [translator](https://en.wikipedia.org/wiki/Compiler) for the language (e.g., the [C++](https://en.wikipedia.org/wiki/C%2B%2B) and [Fortran](https://en.wikipedia.org/wiki/Fortran)). The syntax and semantics of the language has to be inferred from this description, which may be written in natural or a formal language. &gt;* A [*model* implementation](https://en.wikipedia.org/wiki/Reference_implementation), sometimes written in the language being specified (e.g., the [Prolog](https://en.wikipedia.org/wiki/Prolog)). The syntax and semantics of the language are explicit in the behavior of the model implementation. &gt; &gt; --- ^Interesting: [^Language-independent ^specification](https://en.wikipedia.org/wiki/Language-independent_specification) ^| [^Web ^Services ^Metadata ^for ^Java](https://en.wikipedia.org/wiki/Web_Services_Metadata_for_Java) ^| [^Programming ^language ^reference](https://en.wikipedia.org/wiki/Programming_language_reference) ^| [^Digraphs ^and ^trigraphs](https://en.wikipedia.org/wiki/Digraphs_and_trigraphs) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmvgi7m) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmvgi7m)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I posted [this](http://www.reddit.com/r/PHP/comments/2luql2/php_vs_js_loose_comparisons_with/) some time ago. I did a bit of code that goes through pretty much all the loose comparisons for php and overlays the differences of JS loose comparisons to boot.
That's exactly the current situation but my boss has a better idea and thinks that just trying to run the script is more safe. Even though the current situation works...
How does one make the transition from simply "hey I'm a guy who knows PHP really well" to someone who can actually mentor other people? I realize that teaching is its own set of skills but I'm not sure how to best approach this from my position.
I like this, it is a cool little project! I have not had a chance to actually run it yet but just looking at it, 1.You have included your API key in tractAPI.php that should be moved to a configuration file and injected on creation. Line 9 of index.php would therefore be $traktapi = new Cinematix\TraktAPI($apiKey); This means you now need to read a configuration file. 2.You could use a Movie class. Currently you have a helper function that is used to return a movie title and you are using arrays of 'movies' and then formating the data in the view. an example class might look something like.. php namespace Cinematix; class Movie{ private $title; private $small_poster; private $year public function __construct($title, $poster, $year){ $this-&gt;title = $title; $this-&gt;small_poster = $poster; $this-&gt;year = $year; } public function title(){ return $this-&gt;title; } public function small_poster(){ return preg_replace('/\.jpg$/', '-300$0', $this-&gt;small_poster); ?&gt; } public function title_slug(){ return str_replace(' ', '-', $this-&gt;title); } now we have a movie object that can be used cleanly in our views, the formating is all done in one place, you could easily update the object to accept more values on creation such as the ratings etc that are returned via the API. Perhaps do some validating of the data received etc. I have more but I am interested to see what your thoughts are so far. 
I don't believe `header()` can be used for a delayed HTTP refresh. I could be wrong, but I've never seen anyone do it that way. `&lt;meta /&gt;` is how I've always solved this. A short snippet of Javascript can also (though not reliably) serve this purpose as well. As would an iframe. But if you're trying to run a PHP script locally... why not just $output = shell_exec("php /var/www/sites/external.php"); // OR $output = `php /var/www/sites/external.php`; Note that if you're accepting user input, you'll want to make sure you sanitize it. $output = shell_exec("php /var/www/sites/external.php " . escapeshellarg($_GET['something'])); This probably won't work in a shared hosting environment, but if you have your own virtual/dedicated server you should be golden.
How would I go about caching results from a DB query for later use? For example, caching user data or image tags. I'm reading [this](http://www.amazon.ca/gp/product/B00CAYHLHE?psc=1&amp;redirect=true&amp;ref_=oh_aui_detailpage_o00_s00) book on MySQL optimization and it talks a bit about caching info. I guess I'd use Redis and a class that can serialize and deserialize objects?
I once wrote my own PDO + memcached wrapper that looked something* like this: class CDB { private $pdo = []; public function __construct(\PDO ...$conns) { $this-&gt;pdo = $conns; } public function lookup($type, $where) { /* $x = new CDB($dbh); $x-&gt;lookup('users', ['id' =&gt; 13]); 1. If "users.id_13" exists in memcached, return that. 2. Fetch the results of "SELECT * FROM users WHERE id = 13" */ } } Your mileage may vary. (I don't actually have access to the code anymore)
What does he mean by "non-associative"? Showing an error if you use chained ternary operators (without parentheses)?
Cryptography is not a panacea. If you need application logic (e.g. the last action was at least 60 seconds ago), you need to 100% rely on server-side application logic with some stateful property (whether it's applied to a single session, IP address, or the entire server). Crypto/JWT is great for communication, but does nothing to prevent dishonest clients. CSRF is too specifically and categorically irrelevant here.
I've always used the SPL Object Hash to use an object as a key which I think is a better solution.
Only thing I wonder about is the controllers directory. Are you using namespaces? Have you considered using a PSR-0/4 autoloader? In which case you'd probably move the controllers elsewhere. It's one thing I was debating when I was playing with a personal framework. You have several elements: - The "framework code" - nicely namespaced and autoloaded in lib (or vendor in my case). - Your app code (controllers, models) - in a framework like Laravel they sit in special directories and don't follow a PSR when autoloading. - Config - typically just a PHP file that returns an array, so not an autoloaded class. IMO it doesn't make sense to have this alongside controller/model classes. - View templates - the templates themselves are essentially "data" like the config stuff, so again should be somewhere different to autoloaded classes. So I actually had folders like this: app/ src/ # the app itself Controller/ Entity/ tmpl/ # Twig templates config/ # PHP files returning data, including routes public/ # front end vendor/ myframework/ # framework code .../ # other stuff loaded by Composer Just my 2¢, I'm as much as a 'moron' as anyone else when it comes to this. I'd love to hear others' thoughts on this topic.
&gt; I don't believe header() can be used for a delayed HTTP refresh You're right about this. If you try calling header() after outputting anything to the page, PHP nags at that you are trying to set a header after output.
Again, it's the word "associative" that I'm not getting. You've used it in your explanation, which doesn't help. I understand the **problem**. I just don't quite get the **word**.
Am I the only one that spends basically **no** time actually scaffolding a class? Naming a class, giving it a namespace, adding a constructor... none of these things really take a lot of time to me. It's the other stuff, the actual application logic, that takes me time to get right. If you could write a generator for that, please let me know. :) I mean, aside from the fact that I use PHPStorm, which facilitates most of this stuff anyway, I feel that this solution would actually be **slower** than just typing stuff. 
http://en.wikipedia.org/wiki/Operator_associativity
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Operator associativity**](https://en.wikipedia.org/wiki/Operator%20associativity): [](#sfw) --- &gt;In [programming languages](https://en.wikipedia.org/wiki/Programming_languages), the __associativity__ (or __fixity__) of an [operator](https://en.wikipedia.org/wiki/Operator_(programming\)) is a property that determines how operators of the same [precedence](https://en.wikipedia.org/wiki/Order_of_operations) are grouped in the absence of [parentheses](https://en.wikipedia.org/wiki/Bracket_(mathematics\)). If an operand is both preceded and followed by operators (for example, "^ 4 ^"), and those operators have equal precedence, then the operand may be used as input to two different operations (i.e. the two operations indicated by the two operators). The choice of which operations to apply the operand to, is determined by the "associativity" of the operators. Operators may be __associative__ (meaning the operations can be grouped arbitrarily), __left-associative__ (meaning the operations are grouped from the left), __right-associative__ (meaning the operations are grouped from the right) or __non-associative__ (meaning operations can not be chained, often because the output type is incompatible with the input types). The associativity and precedence of an operator is a part of the definition of the programming language; different programming languages may have different associativity and precedence for the same type of operator. &gt; --- ^Interesting: [^Associative ^property](https://en.wikipedia.org/wiki/Associative_property) ^| [^Eqn](https://en.wikipedia.org/wiki/Eqn) ^| [^Outline ^of ^discrete ^mathematics](https://en.wikipedia.org/wiki/Outline_of_discrete_mathematics) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmvif08) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmvif08)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
You can create a nonce/hash stored client side and key it to an expiration time but you end up validating that nonce server side when a request is submitted...
You should really get out more. :)
I hate when I'm not using CakePHP and I try using pr()… (prints it and wraps it with &lt;pre&gt; tags)
This tutorial was posted by someone on here a while ago, and I found it helpful in understanding the different parts of a framework and their purpose. You basically build a lightweight framework from Symfony2 components similar to Silex: [Create your own framework... on top of the Symfony2 Components part 1](http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1)
Yes.
You should correct the original post
laravels dd() ftw :)
What's the best way to log in PHP? echo and print_r statements on the page are pretty ugly, is that really how the pros do it? I have also read about a clever hack to print output in the browser console but inline javascript can get a bit messy. Isn't there really a way to print to print to IDE console (I use PHPStorm btw) like you can in for example Java EE with system.out.println?
I would start with pair programming and finding another developer to do peer code reviews with.
A lot of people are probably just going to read your post without looking at the comments. You should update it, unless spreading misinformation is your objective? 
Because it's Verbal! (er, verbose! ;-)
+1 Dump and die!
This makes me think PHP should allow objects implementing `Serializable` as array keys. Would this create different behavior compared to currently-allowed array keys?
There is literally no scenario where I think this would be a good idea. Even in situations where no cart system seems to do just the right thing I would choose to customize an existing one (ideally in a modular way) rather than reinventing this wheel. There is demonic-level complexity in e-commerce that no one in their right mind wants to own.
God, I read "How can I run a php script at the end of my life" twice.
It looks like you're trying to combine javascript and PHP there. Not gonna work. PHP can only be used to redirect BEFORE any output has been generated on the page. If you want a delayed redirect, try something like this: &lt;script language="JavaScript"&gt; setTimeout(function () { window.location.href = "page.html"; // Will redirect to page.html in the local directory }, 2000); // Will run this function after 2000ms (i.e. 2 seconds) &lt;/script&gt; Also, in the future, you want /r/PHPhelp - This subreddit is more discussion oriented.
In an ideal world, yes. I know back when I was in my first couple of years I thought I was weighing choices and being sensible but the surface area of my knowledge was really limited. I like to see these habits in junior devs as well but I don't expect them to see through the problem as well because that just takes time and experience.
Glad Im not the only dyslexic morbid developer here
Most code reviews I've done are pretty informal. Usually "hey does this work against cache-timing attacks?" "you have an integer underflow on line 8 of your patch" "oh shi-"
https://github.com/barbushin/php-console is a not-so-hacky way to send stuff to the console. But I use print_r/var_dump and error_log (I almost always have log files tailing on my second screen) more than anything really elegant.
We'll have articles out in a year talking about how anyone who uses this is stupid, kind of like mysql_* functions. And they'll be entirely correct in saying so.
To give an illustration from Python: In Python we have things called descriptors. They're objects that live on a class (not an object) and stand in for an attribute or method. Since a single descriptor is shared between all instances of a class, a common way of saying "this data belongs to this instance" is to use the instance as a key in a dictionary.
include("Death.php");
Well, it kind of depends. Changing the background image per-page is generally a bad idea for consistency reasons, so you probably don't want to be doing it anyways. But for most things that change per-page, it makes sense to define them in your controller - like the page title, for instance. This keeps per-page logic in the place where the page comes from. (Another alternative would be to have it defined in a very simple template that inherits from a base one, assuming your templating system has inheritance.) I also like to keep as little client-side code as possible, because every style that's included but affects no elements on that particular page is just more to download and more for the browser to parse. But this is clearly a very new programmer, so discussing the pros and cons of setting a background image using a css class when the entire site is probably one php file with html intermingled is a bit premature. There's more important stuff to cover first.
From personal experience I have to say that there is no way to deliver a complete platform in a timeframe that makes sense if you start from scratch. If you are interested in components the way symfony works check out sylius
The code for M2 as well as some hefty discussion has been online at GitHub since last year at http://github.com/magento/magento2 Dev beta starts on Thursday (Dec 18, 2014), but this is really for the framework (we are sticking with our own MVC framework, FBOFW). Merchant beta is when we'll see the ecomm stuff factored in - which will be Q2 and Q3 of next year.
Another solution would be too use php sleep(2) before the header maybe. That shouldn't cause output but will cause the delay. 
I don't think that's what this person is asking for. It sounds like they want a redirect after the page has loaded, not a long-loading redirect.
That sounds similar. However, even if a Python object doesn't provide a `__hash__` method, CPython will use the object's `id` (think memory address) as a hash instead. Consider this example: class CachingDescriptor(Object): def __init__(self, *args, **kwargs): self._instances = {} def __get__(self, instance, cls): return self._instances.get(instance, None) def __set__(self, instance, value): self._instances[instance] = value class ExpensiveObj(Object): calculated = CachingDescriptor() def calculate(self): if not self.calculated: # pretend we're doing something expensive time.sleep(2) self.calculated = 4 return self.calculated Really the only magic you need to understand is when Python sees we're attempting to access `ExpensiveObj.calculated` it'll understand that it's an object with a `__get__` and `__set__` method and handle retrieval and assignment behind the scenes. Of course, this only works for immutable objects or ones that don't get changed that often. And a very limited example as well.
The others are incorrect, "refresh" is a perfectly valid HTTP header so you *can* redirect a user after a few seconds. The real question is, what exactly are you trying to achieve? If the *user* is supposed to visit that URL (example.com in your code) then what you have is one correct way to do it. If you're getting the "headers already sent" error then you need to move that header call up before you output any content. However you are talking about "running a PHP script" which implies to me that you don't actually want to redirect the user. In which case include() should be working fine. However, if that script also has calls to header() and such, it will not work for the reasons above. I think you need to explain **what is the script** you're trying to run, and **what exactly isn't working** about it?
Okay it's simple: After the user has performed an action on the screen, for example it pushes a button, the user will be redirected to another local page in the website. That is what is happening, but my boss wanted me to use something different then the headers() function. I tried include('very/long/dir/example.php') but that didn't work. My boss mentioned a return function. Do you know anything like that? :)
For starters, sounds like you're already well beyond novice. I've interviewed "seniors" that haven't worked with APIs or used PSR autoloading etc. So props on that. Secondly, progress is slow. You can academically learn something, but you don't truly "get it" until you've actually done implementations in a few different applications. My approach has been "sponge everything, even if I don't understand it", then as I start building and refactoring, I start seeing patterns I saw when going on a learning binge. Since I've seen it, I can go look for it, and all of a sudden I better understand what I was reading because I just ran into the issue that it would have helped me address. One example is nested sets. For god knows what reason, I just stumbled upon an article about how nested set storage in a database works. Filed that under "hey, ok, that's cool" and didn't think much of it. Then I had to build an application with arbitrarily deep navigation (N number of child menus). If you have arbitrarily deep menus, getting all of the children is really quite nasty - compounding nested/looped queries.... unless you use nested sets. All of a sudden I recalled that nested sets article I read an had an instant lightbulb - "oh shit, this is a perfect situation for nested sets". Now I "get it". Same thing happened to me with dependency injection / ioc containers. Didn't really understand them until I wrote my own session/authentication component for my own framework for the fun of it, but using proper dependency injection and dependency inversion. The instant I had to wire up an object graph of I think 7-8 different objects *every time I wanted to use sessions*, I knew immediately that I should use an IoC container and wire them up once.
&gt; and only setting paths to the same user where uploads explicitly need to be written/saved. As long as you leave something open to uploads, your efforts around permissions are just a pain in the but. On top of that, anyone can evade from your website document root and at least read sensitive data. You could start by chroot the damn thing, leave just the front controller in web root, disable php in public available directories (*because nobody needs to run a php script in /images and/or /uploads*) and move on from there.
I'm so tired of attitudes like those of Derick Rethans. Literally the only reason I'm using PHP instead of Hacklang is because PHPStorm hasn't released their Hacklang update yet. As soon as that happens, I'm moving over, and moving my company's application with me. Either that or moving to Python. I'm done dealing with this sort of absolutely backward, lazy attitude. I shouldn't have to contribute to core myself if I want sanity.
Sometimes I try to read other's code and I struggle a lot with that. Recently I discovered [Ctags](http://en.wikipedia.org/wiki/Ctags) and I installed it, then I knew about a fork of this program which parses PHP and yields a more useful output. Now, here's my question, do you know other tools that can also help me to read other's code? Thanks in advance!
I think the approach wrong. Instead of reducing objects to strings to make them comparable there should be a mechanism to overload the === operator for objects. If two GMP number objects represent the same value, they should return true for === even if they do not reference the same object. The array should then use the object as a key (and no hash) and all problems are gone (except of the implementation, of course).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Ctags**](https://en.wikipedia.org/wiki/Ctags): [](#sfw) --- &gt;__Ctags__ is a [programming tool](https://en.wikipedia.org/wiki/Programming_tool) that generates an [index](https://en.wikipedia.org/wiki/Index_(publishing\)) (or tag) file of names found in source and header files of various [programming languages](https://en.wikipedia.org/wiki/Programming_language). Depending on the language, [functions](https://en.wikipedia.org/wiki/Function_(computer_science\)), [variables](https://en.wikipedia.org/wiki/Variable_(programming\)), [class](https://en.wikipedia.org/wiki/Class_(computer_science\)) members, [macros](https://en.wikipedia.org/wiki/Macro_(computer_science\)) and so on may be indexed. These tags allow definitions to be quickly and easily located by a [text editor](https://en.wikipedia.org/wiki/Text_editor) or other utility. Alternatively, there is also an output mode that generates a [cross reference](https://en.wikipedia.org/wiki/Cross_reference) file, listing information about various names found in a set of language files in [human-readable](https://en.wikipedia.org/wiki/Human-readable) form. &gt; --- ^Interesting: [^NEdit](https://en.wikipedia.org/wiki/NEdit) ^| [^CTAG](https://en.wikipedia.org/wiki/CTAG) ^| [^CTAG1B](https://en.wikipedia.org/wiki/CTAG1B) ^| [^CodeLite](https://en.wikipedia.org/wiki/CodeLite) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmvtjmq) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmvtjmq)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Yes, but no parts have been separated into their own repositories yet? That's usually the moment when you realize it's not as decoupled as it needs to be :)
It's known as associative memory and it has it's uses. http://en.m.wikipedia.org/wiki/Content-addressable_memory
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Content-addressable memory**](https://en.wikipedia.org/wiki/Content-addressable%20memory): [](#sfw) --- &gt;__Content-addressable memory__ (__CAM__) is a special type of computer memory used in certain very-high-speed searching applications. It is also known as __associative memory__, __associative storage__, or __associative array__, although the last term is more often used for a programming [data structure](https://en.wikipedia.org/wiki/Data_structure). It compares input search data (tag) against a table of stored data, and returns the address of matching data (or in the case of associative memory, the matching data). Several custom computers, like the [Goodyear STARAN](https://en.wikipedia.org/wiki/Goodyear_MPP), were built to implement CAM, and were designated __associative computers__. &gt; --- ^Interesting: [^STARAN](https://en.wikipedia.org/wiki/STARAN) ^| [^CAM ^Table](https://en.wikipedia.org/wiki/CAM_Table) ^| [^Hopfield ^network](https://en.wikipedia.org/wiki/Hopfield_network) ^| [^Associative ^array](https://en.wikipedia.org/wiki/Associative_array) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmvtu0n) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmvtu0n)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
All modules together make the app known as Magento 2 and are created by a core team of eBay employees, so they will likely be part of the same repo. However, in anyone's app they can (will) be pulled in via declared dependencies. Each modules code has / will have no external dependencies explicitly declared. Hope that makes sense.
I think it's probably even more important to first go into detail about what problem it solves, and address a few use-cases that could allow frameworks to interop better. The interface is really secondary. First you'll need to convince people that this is actually desired and why.
From your description it sounds like what you want is client-side behavior, it's not something you'd do in PHP.
So you have a form that is submitted to the server? If you want the user to be redirected to another page on the website, then using the header function is the correct solution. Don't use the refresh thing though, the best way is this: header('Location: http://yoursite.com/thepage.php'); exit; (Note: 'exit' is not strictly required if this is at the very end of the script but it's good practice.) The header function can only be used if you have not already output any text/html. Which you shouldn't be doing anyway in this case (there's no point outputting text if you're just gonna redirect the user straight away). Not sure what your boss means about return. 'Return' is not a function, it's what you use to get values back from functions.
do you know if there is a module to give yii 2 annotations?
Was expecting an awesomely animated website, disappointed
[What. Thefuck.](https://github.com/sciactive/nymph/blob/master/src/NymphDriverPostgreSQL.php#L462)
As far as I know, there is no extension to support annotations in Yii2.
Sorry Macguyver, it's day one of the site after many years of break. Gimme a break.
good idea!
Thanks for the help. I'm going to explain this to him tomorrow.
Ok, first off, it's **hashing** not *encryption*. It's not a trivial difference, so please use correct terminology. &gt; echo password_hash($original, CRYPT_BLOWFISH); No. That is incorrect. In fact, it's just [coincidence](http://3v4l.org/cBZHP) that it works in the first place. The proper constant to use would be `PASSWORD_BCRYPT`. &gt; With the recent release of PHP 5.6, the hash_equals function has been released which is more appropriate than password_verify because it’s ‘timing safe’. Incorrect. `password_verify` was designed to be timing safe from day 1. The [RFC](https://wiki.php.net/rfc/password_hash) included that point, as well as [the implementation](http://lxr.php.net/xref/PHP_5_6/ext/standard/password.c#291). &gt; This means that the function will increasingly slow down under a brute force attack – so you wouldn’t notice it day-to-day, but it would make brute force attacks take much longer. No, that's not what a timing attack is. And that's not what `hash_equals` does. Here's a [blog post](http://blog.ircmaxell.com/2014/11/its-all-about-time.html) explaining what a timing attack is.
Was a reference to these old guys :P http://www.2advanced.com/
Awesome stuff. It would be scary (and intimidating to new employees, not that the block-of-warning-comment-per-line thing isn't scary enough already as is :p) to have all the if statements in a large and busy code base :)
Understanding concepts and knowing the words for it are very different things. 
This blog posts gives many of the reasons why a Router PSR something that has no benefit of being covered by a spec: http://blog.ircmaxell.com/2014/10/an-open-letter-to-php-fig.html
Good point on injecting the api key on creation of the api object. I sometimes get a bit caught up in the code that I forget that other people could use it aswell and need to provide a way for them to do so. I like the example class you provided since my html view is indeed a bit a cluttered with some php in it. Also probably a better idea to place this code in a movie class than a general api class since it could contain more responsibilities than one in the future. This way I can divide them. Thanks a lot for taking a look and giving me suggestions, I really appreciate it. I will update it as soon as I can.
Thanks for the feedback, working on updating it. So is there any benefit to using hash_equals over password_verify?
I'm not sure I agree with your assessment of the post. Particularly this part: &gt; Instead of trying to build a solution that scales, why not build a targeted solution? One that targets the simple case, but doesn't preclude the complex case? My example targets a simple case. It doesn't preclude complex cases. It solves the 50% problem the post is talking about... Is there something specific that you think needs changed?
You can use hash_equals to perform checks against any two strings. password_verify will hash the user input, and then compare the two.
the name goes alongside ruby's rspec
Honest question, how are Phalcon benchmarks compared to Node.js ones. I've heard Phalcon is very fast.
There this thing called RabbitMQ which is specifically designed for what you're trying to accomplish here and supports clustering, federation, persistent queues etc. Your example is interesting and looks very similar to how you would use ZeroMQ, i.e. very flexible and will turn into a big connection mess by the time you're trying to build a "real" system with it.
A couple of points (hopefully constructive): The router interface has lots of methods. status() and methods() don't appear to be a common use case. They also seem to be temporarlly coupled to the resolve() method (can they be returned from resolve()?). If they're needed where they are then they could be in another interface (eg RouterWithStatus). The router example is also instantiating controllers, which is not something I'd expect. The example also uses "ClassName@method", which (AFAIK) isn't a standard. A much simpler example would be type hinting to "Callable". More complex implementations can always do extra logic if they want (as long as they avoid violating the Liskov Substitution Principal). I'm not sure whether the interface should specify this or not. You're routing just on the URL and the HTTP method. This is definitely the most common case but is inflexible. Ideally the Router would be given the whole context of the request and it could match it against whatever it wants. Eg http vs https, port, accept headers. I'm not sure the best way to do this. Route::parameters() is a getter and a setter, depending on parameters. This is clever but not obvious and explicit. Always favour simple :-). The interfaces could also do with some more documentation in the doc blocks. 
&gt; just amounts to code readability. I don't intend to be snarky, but it's difficult to over-appreciate the importance of code readability
I've been identifying my 'weaknesses' as of late so I can target them for improvement, and you actually added a few more onto my list. I'll definitely put some time aside to do some extra research into the areas you said, thanks a lot. :)
What PHP news site/feed do you consult to stay informed about PHP news, interresting new or updated libraries/tools and so on ? 
I'm using it as an example project for these posts because it's understandable. This is not me trying to solve a problem or propose a solution. I evangelizing how to use ReactPHP. Also, ZeroMQ is built *on top of* React, so that only kind of proves the point I'm making: React is very useful for a set of tasks that are normally very difficult to accomplish in PHP.
Pull requests welcome, I guess
Absolutely - but I wouldn't base my decision to use PDO over MySQLi on that either.
I'm confused, ZeroMQ looks like it's built in C++
Why do frameworks need to interoperate with each other?
Ah, I'm sorry, I totally garbled that message. This is what I meant: ZeroMQ isn't built on top of React, what I meant was that React has been used to create ZeroMQ libraries for exactly those reasons. For instance: https://github.com/reactphp/zmq I totally misspoke, which I can only blame on it being a long day. I didn't mean that ZeroMQ itself is built on React.
Because I don't want my code to be coupled to Monolog (PSR-3) just like I don't want it coupled to Doctrine Cache or whatever… Just like Symfony doesn't want to be coupled to Monolog too…
If you're running it at the end of a file, make sure you've not sent any content to the browser before it's called. Otherwise you'll get an error, because the response headers will have already been sent.
All our backend API services are running in PHP, using supervisord to keep them persistent. They have no problems at all. I call bullshit on this one. New Relic are showing a consistent low memory usage. We also have a few of those services doing large import jobs each night, ranging in gigabytes of data, and they are just being killed of and respawned after each use. PHP can be whatever you want it to be, just like most other languages. Sure thing we could have built this in C, or used Assembly.. But why the fuck? Most new backendjobs takes an hour or so to develop, and they work great.
You are right, I was answering the question "Why do we need PSRs" and not the question asked above.
Ok, those are good points! &gt; A router may not care about HTTP methods Yip. I can see that being a thing. The examples I've used (so far) all do though. Illuminate, Aura, FastRoute, Symfony all do though. Or at least they provide interfaces for applying methods. The interfaces here don't require them - only that they return method data from an accessor. That could be blank, though... &gt; A router may not use just one string to define the route The data, assigned to a route, can be anything. It's annotated as mixed. Could be an object, a string, an array or a callback. Doesn't matter, according to the interfaces. Thanks for your feedback! :)
&gt; They also seem to be temporarlly coupled to the resolve() They are, and I'm not sure how to alter that without making the return of `resolve()` very specific. :/ The values they return are quite general to the problem of routing though. They're just temporally linked (which sucks). &gt; router example is also instantiating controllers I'm going to change the example - it's not a good one. I wanted to show how I expect the majority of consumers to use the interfaces, but actually it doesn't have to be something like this at all... &gt; This is definitely the most common case but is inflexible I thought about this too, and I don't think it's settled yet. It could pivot on more than that, but I worry bout how to get there without adding that the PSR should depend on implementors using `Symfony\HttpFoundation`... &gt; getter and a setter, depending on parameters Yeah. Wanted to try out an API that uses that style. I'm usually a lot more explicit (thanks to Uncle Bob). Thanks for the feedback! :)
&gt; I was wondering on how to optimize page load speeds on the backend. Are you encountering performance issues? If not, you might be wasting a lot of time and effort on something that makes no significant difference what so ever. 
It's less about the frameworks interoperating with each other directly, and more about letting third party code function with zero-to-minimal rewrites regardless of the framework. Sounds a bit similar, but it's a little different. 
Obviously not. In fact, I'd say the opposite. If you are to learn JavaScript, you should have a solid understanding of how the web works with regard to the HTTP protocol and its respective domains (client and server). 
To do anything interesting in the browser beyond basic HTML you're gonna need Javascript. Now, you don't NEED JS to get a basic web form to submit to your PHP back end, but if you want to start doing anything interesting it's going to come into play. I'd say learn PHP, JavaScript, HTML, and CSS all in parallel. You'll thank yourself later.
If you want to do anything dynamic it is. If you're not interested in AJAX or only are planning to do some light form processing, no, you don't need it. On that note though, every little bit helps!
STOP SPAMMING.
Well, you have to understand:
What does this have to do with PHP?
I'd say it might be distracting at first because JavaScript looks similar but is different from PHP. You should definitely learn it though, but not for that reason but because it's an essential skill for any web developer, especially if they want to do WordPress themes. Is JavaScript necessary for learning PHP? No it's not, but I personally *would* recommend that PHP developers learn it well, because PHP people tend to develop for the web and good JavaScript chops can make your sites *really* come alive.
So if it can't do joins, isn't it essentially useless in 90% of SQL projects?
Javascript is definitely not a must have. You can build fine applications just by doing server side code. Javascript can make something more fancy, yes. But it should not distract you from your task. All you need to know is probably some basic HTML in order to be able to print your stuff correctly on the page.
Learn php first and then once you have a grasp of it branch out into other things. Really, to get a web project up and running you'll need to know at least php, html, css, and sql for database access. That's already a good amount to start with.
This seems a variation on the knapsack problem. Solving it efficiently goes some way to showing P = NP
"The site wasn't working so I tried to create a new invoice like 500 times but that kept going all wack-O so I just purchased the client's products on my personal credit card and promised them our tech guys would work it out. Computers, amirite? Can you fix it?" Welcome to my hell. 
Awesome ! I am exploring the internet to get a glimpse of what is uncovered. I want the development to be fun so that we dont lose interest in the mid-way. I will share my thoughts (good/bad) as and when i get some cool ideas. 
how good is your php skill? Do you also github? Just trying to know if we can work together, because I am not a php guru
-_____________- Do you really think this is a homework assignment? if so, fuck whatever teach gives this shit out without proper instructions. 
ty. I will look that up. All I needed was a nudge in the right direction :) Didnt know what to google for :D
I am good with php. I can develop anything if i get an idea. I maintain my profile here - http://ajaxtown.com and my github profile is here - https://github.com/ajaxtown I am not an UI expert but i have developed wordpress themes. What are you strong at ?
Let us know if you find the solution to P=NP!
First of all let me say ty for the extremely helpful answer. I dont care about the language. I just wanna know how to algorithmicly solve it in a language-agnostic way. This is not a homework :P I have already solved it through a bruteforce method. But your first solution made me realize how stupid my solution was. I should have seen it. It helps DRAMATICALLY to sort the array and use a binary search based on the remaining value of (100-90.5). It cut my execution time by ALOT. Ty for this once again! 
I am not strong at anything. I just try take it one step at a time. It's weird that I am [working on a framework](http://www.reddit.com/r/PHP/comments/2pb36x/php_moronic_monday_15122014/cmve1ry) which seems pretty similar to yours. Just let me know what you are imterested on doing, and I will tell you what I think. Right now, I can't come up with anything https://github.com/samayo
Great. Nice to know you. I have you in my contact list now. Will keep you updated ! Thanks.
Haven't seen snow in a website since '97
https://github.com/marcj/php-pm I found this today.
Try /r/Entrepreneur or /r/startups someone might be looking for a tech guy
- If you sort the array and look for a specific number **x**, you can start looking for the number at **x%** of the size of the array, which would improve the binary search algorithm (given **n** is large and the floats are random). - You will need some sort of iteration over every element (high to lowest), stop when sum of remaining element is `&lt; 100` (no more possible combinations) and have a lookup method which searches for a nextElement for which`previousSum + nextElement &lt;= 100`holds. As said before, the start of this lookup can be improved. - Don't forget the drawbacks of floating point arithmetic! 0.1 + 0.2 != 0.3
Thanks. Looking at them now.
Just prefix the class name with a "\". Example: new \Application_Config_Zend() As the underscore classes don't use a namespace, they exist in the global space. http://php.net/manual/en/language.namespaces.global.php
Great post. Would love to hear your feedback on a ReactPHP thing I've been working on... https://github.com/assertchris/spin
Me too!
I would import it explicitly, even though the class is in the global namespace. namespace Ticketsystem\Config ; use \Application_App_Config_Zend; ... new Application_App_Config_Zend(); IMO it's a better practice since you can see the dependencies immediately.
&gt; &gt; This is definitely the most common case but is inflexible &gt; I thought about this too, and I don't think it's settled yet. It could pivot on more than that, but I worry bout how to get there without adding that the PSR should depend on implementors using Symfony\HttpFoundation... You should go to the proposed FIG standards (https://github.com/php-fig/fig-standards/tree/master/proposed) and have a look at the http message PSR. I think it contains the interfaces necessary.
Have you contacted the FIG mailinglist and asked if anybody there is already working on a Router PSR or if it has been discussed before between the relevant parties? You need to convince them to accept and actually implement/use the PSR so I would start there.
&gt; The data, assigned to a route, can be anything. It's annotated as mixed. Could be an object, a string, an array or a callback. Doesn't matter, according to the interfaces. I assumed that was reserved for the callback (which is usually mixed - either an actual callback function or a string/array representing the class/name of the function). I suppose you could use an array with the first element being some kind of definition for your path (a sub-array or object) and the second being the callback. But then you'd end up with something like this: $router-&gt;bind('', '', [new Path(...), function () {...}]) Honestly that looks stupid passing in blank parameters, just to adhere to an interface. Plus there's a lot more to think about... what about "dispatching" the route? Now everyone's callbacks must adhere to some strict rules.
Yep I agree with this, also it'll carry through to all instances of this in the code with a single change.
$350 what the fuck. This is the first conference and with no prior experience for me to judge value on it that is insane. 
While I agree on that, I think that in order to
I didn't even know phpBB was still a thing
Still my personal favorite for a customized forum.
Well I'm not saying it's bad, just, last time I heard about it PHP 5.3 wasn't even a thing yet
I know. But honestly, I became a fan of VIM and I'm very productive with it by knowing the shortcuts. That said, I read about cscope, maybe there's a similar tool for php
Composer by itself doesn't require any network access whatsoever. When using Packagist.org you will need to access packagist.org (87.98.253.214) on SSL port (443). Plus access to github.com or wherever the repository is being hosted at. Edit: Here's Composer default configuration: https://github.com/composer/composer/blob/master/src/Composer/Config.php#L41:L52
&gt; This is much easier/safer and negates the need to mess around with PHP enabled/disabled at the application path level (prone to error/exploiting). Because your "upload.myapp.com" has PHP disabled it is the same thing as I said (*disable php in public available directories*), with the single difference of the vhost, so I do not know exactly why your solution is "much easier/safer". Because you have 2 vhosts in this equation its not easier, because you need to configure two things instead of one. 1. As long as "myapp.com" has access to "upload.myapp.com" document root in order to save files, you need to also configure "myapp.com" to not execute php files from upload.myapp.com's document root. 2. Because those two vhosts interact at the FS level, you need to put them in the same chroot, which is not recommended. You are thinking security in a context of a single application and I'm thinking in a hosting context. And when I say "hosting" I'm not necessarily referring to hosting company, but hosting your applications on the same machine. You are also not taking into consideration the fact that you can get hacked and thinking how to minimize the damage. If your Wordpress blog gets hacked, you don't want the attacker to be able to read any data outside your blog's document root, for example data from "myapp.com". In this context your recommendations are useless, because you didn't "*chroot the damn thing*".
&gt; For example, mutable objects almost never are, since if you put something under key X and then it mutates to represent something different from X – where are you going to find it? Can this be better clarified, otherwise it seems to only make sense when the `__hash` function is returning a calculated value based on the state of the object? Is there an example of "How to use it right", e.g iterating over an array of values, some of which are objects, and these values are going to be used as keys. My preference is that it should not matter whether its usage is with arrays or objects, but the discussion only mentions arrays, e.g $a = new A; $b = new stdClass; $b-&gt;$a = '1'; $b-&gt;(new A) = 1; //should that work? [new A =&gt; 1] //should that work? Should `__set` then also allow objects? public void __set ( string $name , mixed $value ) Otherwise if this is only going to work with arrays, then there must be a real world use case, or design benefit?
They are in the process of integrating some of the Symfony components, which sounds promising.
I've been using phpBB for years. A few months ago I got curious of its status and looked at the [source](https://github.com/phpbb/phpbb/tree/develop/phpBB/phpbb)... and was surprised to find that the platform now requires 5.3+ and seems to be decently-tested.
To be honest I'm more of a [FluxBB](https://github.com/fluxbb/core) guy but that might just be the Laravel talking. 
[492 security advisories later](http://www.phpsecure.info/v2/zone/SearchAdvisories?sRech=phpbb) they figured out it was a bad idea to use their own software on their product site.
Your idea is pretty good actually. I've had to deal with currency lately and, whenever possible, I want to deal with the lowest possible subdivision of it. For example, when dealing with US dollars, I never store the sums in actual dollars, but instead I store them in cents. That way it leaves no room for error. Clearly this isn't my idea. I've read it somewhere, can't really remember where.
Course highlights: * PHP with **Jason** * OOPs * All **Quary** with Joining =)))))))
When dealing with currencies that naturally require accurate arithmetic, always use the integers of the smallest unit possible. That's the rule of thumb because you run into issues regarding floating-point arithmetic that cause such comparison issues as you're witnessing. I'd recommend working on yocto-units which are called satoshis in BTC. This won't solve all of your issues, but will help with the most common nonobvious ones. The other issues you'd probably have to deal with regard rounding upon division. [Here's a lengthy explanation as to what you need to understand for this](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html) Most of the time, you don't need exact precision which is why working with floats is trivial. When you're working in fractions like satoshi, then the rounding errors aren't trivial and you need to adjust what you're doing. We operate in a base10 world whereas computers operate in base2. They don't accurately translate which would cause some rounding issues like you're describing. If I were to express 1/3 in base10, I'd have 0.33333333; 2/3 might be 0.66666667 and if I add them together it would work out to 1.00000000. Now if I were to add 0.33333333 three times, I'd have 0.99999999 which is not 1.00000000 (of note though, 0.999... does actually equal 1 and this is a rounding error). If I were to express 1/3 in base3 though, I'd have 0.1 and if I triple that, it's 0.1 -&gt; 0.2 -&gt; 1.0 so would be correct. These errors magnify when you expand into the decimals further and further which is why software working with lengthy decimals use integers when possible and convert for display purposes later.
It may have just been their front end. 
I use web-mode when writing Javascript, PHP, HTML, and CSS in the same file. I also use a custom syntax checker for flycheck for PHP with this: https://gist.github.com/rlph/4a0c00757f9e5e5cb748 I don't normally use Emacs for web development but this is the best setup I have found. 
Except that link is pointing at various mods for phpBB that have issues, not the phpBB platform itself. [phpBB 3.x has had 6 vulnerabilities](http://secunia.com/advisories/product/17998/?task=advisories), with the last in 2010.
There are a ton of international speakers, which might be a significant factor. These organisers were also involved in PHP New Zealand, so they have prior experience in organising...
Wordpress syndrome.
This happened a couple of years ago. Their website was compromised from other code on their site that had nothing to do with their forum. Although it COULD be their forum software, there are other points of entry.
I was specifically referring to reflection classes usages in php and not the concept of reflection. I'd love to get some feedback regarding how I arrived at this and if you don't mind. When you say dependency injection, I'm assuming you're referring to a dependency injection container and not dependency injection as a generality. For the generality, you pass in dependencies either via construction or setters and that's it. Containers add a bit of complexity on top of that and can allow for such dependencies to be automatically done so you needn't worry about it. This is where I typically find reflection for dependencies used and a solid value, but where I have a problem for this is with how typing is handled in php and how weak and dynamic it is. If you want to hook this into an autoloader, then you'd reflect to examine the parameter hints to see what to pass in. For strongly typed languages, this is extremely simple, but for php it's a nightmare to properly do. If something is like this class: class Something { protected $object; public function __construct($object) { $this-&gt;object = $object; } } Reflection doesn't help determine the dependency that `$object` should be here. If there was a type hint, it helps, but doesn't always allow complete detection when non-scalars are involved. The work-around for this would be annotations which aren't supported or fully operable type hinting and strict adherence to using it. Annotations are a horrible choice for now since they require reflection, acquiring the docblock, parsing the docblock, then finally injecting dependencies. I've determined two alternative approaches for reflection-based dependency injection and the first is interface detection. If something uses an interface, then use its setters to inject dependencies in a container similar to what I described already. The second is to do away with any detection and use a map to implement something more closely related to a service locator. A locator does away with the magic and increases the degree of control, but it's a messy trade-off. I do think that instead of detecting if classes have methods, detect interface implementations. I will say that I use reflection extensively in some analysis tools where it's not sitting in a production environment. I use common docblocks to document expected usage, but the static analysis will run through and verify parameter types and return types are possible as per the definition. If it doesn't match up, then the documentation is incorrect and needs updating. There's also mocking objects to change accessibility of certain aspects to help lock down edge cases in tests. Beyond this, I don't any reason to use php's reflection in production systems at all. If you need to dynamically change accessibilities, then your code is bad. If you need to dynamically create items, then use a factory. If you need to dynamically invoke methods and classes, then php has built-in syntax and support that doesn't require the use of the available reflection classes. I'd really like to know where my reasoning falls apart here and if you can provide further examples for reflection. I just keep finding all of my potential uses when applied in java fall apart with applied in php.
A constructive critique: 1. None of your Database drivers use PDO, and the mysql_* functions have been deprecated for some time now. Any modern ORM should be using PDO at this point 2. You're suppressing warnings all over the place, which is a bad practice. If you used PDO, you could catch exceptions instead 3. The code in your driver classes is so complex and convoluted I can't really follow any of the logic. There are 500 line methods, when the typical best practice is to keep methods less than 5% that size 4. None of your classes are namespaced, and you're using your own autoloader, including multiple classes in a single file, which is unnecessary and confusing 5. You have tests...but there are only two of them. One has 500 lines and the other has 1000. In addition to that, you don't have a code coverage badge, so it's hard to figure out what is actually being tested My advice going forward: First thing, read up on the PSR-4 autoloading standard and use it. Namespace your classes and interfaces, for example: Nymph\DataContainerInterface Nymph\Drivers\DriverInterface Nymph\Drivers\AbstractDriver Nymph\Drivers\PdoDriver Nymph\Entities\EntityInterface Nymph\Entities\Entity Next, for the love of god, use PDO. It seems like you have tons and tons of code responsible for escaping and parameterizing SQL queries, and PDO will do most of that work for you. A good place to look for more best practices is [PHP The Right Way](http://www.phptherightway.com/), I highly recommend it.
Where did you get the idea that they were compromised through the phpBB forum software?
http://hnhiring.me/ Have fun.
No, flux is one of the better forums.
There are many ways to gain unauthorized access to a server, eg bad user passwords.
It will be hard for you to find benchmarks for Phalcon vs Nodejs, they're two different technologies. If you're looking to pick one of them use whichever one suits your needs the best. People really shouldn't get hung up on micro-optimization, Phalcon won't provide a bigger benefit because of its performance than a purely PHP framework that meets your business goals properly will. All this being said, I imagine Phalcon is faster than Node for the same type of application.
Which way seems like the best way to configure a multi site Joomla setup https://docs.joomla.org/Multi-site_Design_Options? 
That's correct. Your should store prices as integers as they don't lose information when stored. Floating point numbers are approximation.
If you keep using floats you need to define a set point where you consider two amounts to be equal, that is much bigger than the smallest float precision eg: EPSILON = 0.0000000001; function equal($a, $b) { return abs($a-$b) &lt; EPSILON; } You can implement &gt;= and &lt;= by using equal($a, $b) || $a &gt; $b \&gt; and &lt; can be used as is
Hm no, not sure which one you're confusing with. I say Laravel because it's based on the Illuminate components so most of the code feels pretty Laravel-y, check the link I posted above: https://github.com/fluxbb/core/tree/master/src
&gt;IF a router PSR goes ahead, it would be the utter basics alone. Let's hope that never comes to pass. A PSR for a router would be too opinionated and restricting even on a most basic level. &gt;That said, if somebody wanted to make a router which ignored HTTP verbs and pretend it was 2006 again they'd be welcome to, they just wouldn't use this interface. There are other routers than HTTP request routers. Console command routers, for instance. It's hardly a dated practice. 
The maintainer of FluxBB ist rewriting it with laravel 4, or someday even 5.
Convention based is interesting. Your docs don't speak on how it handles query parameters. How can I have a route like: `/user/{id}/edit`?
Not confusing it, thats version 2 it would seem. Version one is not on laravel.
The solution to every problem is actually writing tests. 
Ah yeah probably, never used version 1 to be honest. 
Actually a great resource, thanks.
Am the only one who thoroughly enjoys refactoring? Surely cleaning up a mess as you figure it out is better than figuring it out but leaving it there to trip over next time? Like, if there's something in my way when walking in my house, I don't avoid it and leave it there to keep tripping over, I pick it up and put it where it belongs, and I feel *good* about it because I've made an improvement to my environment. I don't think "FFS, I have to move this thing now", I think "This space is going to be so much easier to walk through next time". I like seeing things get iteratively and progressively cleaner and neater.
Stop telling me to write tests!
Ah I remember those days, especially when I used the forums as a template and custom coded the additional content. 
Yii framework does precisely what you need with very little effort. The basic steps are: 1. Define database schema 2. Generate model code with Gii tool 3. Create a controller class which extends rest\ActiveController and set the model class 4. Add the rest\UrlRule class to urlmanager configuration which points to your controller class. That's all. See the Yii Guide for specific details: http://www.yiiframework.com/doc-2.0/guide-rest-quick-start.html Good luck
You probably didn't pass strings to bcmath. If you do bccomp(0.00000053, 0.00000053) instead of bccomp('0.00000053', '0.00000053'), then it's already too late to be precise. Other than bcmath, using integers also makes sense, if you're sure you'll never need additional precision (e.g. 52.5 btc)
This is great stuff. I really enjoy language parsing, though I haven't done much of it in PHP. I look forward to your next post!
Part of the trade off in this situation, it seems to me, is limited resources. Should he spend time refactoring a legacy codebase that works and is profitable *instead* of working on new projects/revenue? Hard to make the business case for A. Now, if the conversation turns around to how can we make the legacy app less costly to run, add features, etc... then you can budget in time and resources to refactor. It's not like we all have an infinite supply of time to devote to all our projects.
Thanks for the feedback, guys. Yes, the driver is quite outdated. Most of it was written between 2009 and 2011. I plan to write a new driver, using PDO.
One source of inspiration could be mail programs like Thunderbird. They allow you to define filters for incoming messages, etc. Instead of "AND" and "OR" they use "Match all ..." and "Match any ...".
http://weworkremotely.com
Well yeah of course - but that doesn't change the reality that if you don't literally want to pay for technical debt, you have to invest in some refactoring. Of course it's up to you to do the cost/benefit analysis, but maintenance problem == refactor, even if that's something you don't want to hear or don't have the bandwidth to approach.
I'd do that as a matter of urgency. I think mysql_* raises warnings all over the place now
Specifically, it's an instance of the subset-sum problem where all weights are positive and bounded. Surprisingly, these restrictions admit a *linear*-time algorithm for the decision problem (BibTeX citation below), which is probably not too difficult to adapt into an efficient algorithm to solve the corresponding counting problem. Unfortunately, I haven't been able to find the text of the paper anywhere that's not behind a paywall. Yay science! (It may be possible to write the author and get a preprint version.) @article{pisinger1999linear, title={Linear time algorithms for knapsack problems with bounded weights}, author={Pisinger, David}, journal={Journal of Algorithms}, volume={33}, number={1}, pages={1--14}, year={1999}, publisher={Elsevier} }
I feel to the average person, that's the same problem. The average person uses 'all' and 'any' interchangeably. If you don't have experience with a search, the word "all" means the same thing as "any", and it would feel counter-intuitive for "all" to return little to no results.
It looks like he took other approach: &gt; The name of the controller determines which url it appears as: &gt; &gt; http://yourdomain/my/ -&gt; Your\Controller\Namespace\MyController::indexAction() &gt; http://yourdomain/my/action -&gt; Your\Controller\Namespace\MyController::actionAction() &gt; &gt; It supports nested namespaces so that: &gt; &gt; http://yourdomain/level1/level2/save -&gt; Your\Controller\Namespace\Level1\Level2\IndexController::saveAction()
Thanks for the feedback. I'll work on updating the old code to modern standards for the next release.
&gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC
Does the user *have* to choose? If I did not specify, I would expect my search results to prioritize items that matched as many tags as possible over those that match only one. Now, if I chose to go into "advanced search" mode, being clear about that option is a good idea. I agree with the concern about "any" and "all" ambiguity. Perhaps "Has one or more tags" vs. "Has all tags" vs. "Has exact tags". All options with different results.
&gt; The average person uses 'all' and 'any' interchangeably. If you don't have experience with a search, the word "all" means the same thing as "any" Do you have any data to back this up?
Oops, my bad!
Because of some changing directions and becoming the lead developer in my department... I've had a good bit of "free" time at work lately, and have been able to dig deep into parts of the code that I've never really looked at and found lots of ways to simplify and modernize stuff. Sometimes I want to pull my hair out, but it's always nice when you can remove or replace a ton of old code by using more modern practices.
I agree with this idea. "any" and "all" is the closest you're going to get without being needlessly complicated so it's best to try to find a solution while requiring as little user input as possible.
It's definitely fun/rewarding to refactor and improve the code base. But some people prefer to work on greenfield / new / shiny projects instead. Or, my experiene at least, you work at an agency and move on to new projects when current one is done, never to touch that code again.
You can do it in SQL, do an INNER JOIN that matches exisiting customer addresses to the larger set. Something like SELECT ex.email FROM existing_customers X JOIN email_list li ON (ex.email=li.email) Indexing the email fields in both tables should help with query performance.
so is it an array or a database? we need more info on storage and formatting before making an educated guess.
This post is an interesting read on the topic; http://nikic.github.io/2014/02/18/Fast-request-routing-using-regular-expressions.html
Can confirm - had to explain the difference between "any" and "all" to our client. That's an immediate shoot-down of those terms. If our semi-technical CEO client needs an explanation, his users do too. Also, 5 years of working retail at Staples trying to explain to people that a U**S**B flash drive is the same thing as a U**B**S stick, is enough reason for me to avoid anything that has least bit of ambiguity. You can never underestimate how "stupid" some people are.
Two years since last stable release.
I love it, specially if the code is backed by decent tests.
You are not alone. I find it very satisfying and fulfilling.
Oh cool, thanks. I wasn't aware of that tool. I'll check it out.
Yup. CakePHP 3, for example, would be able to do that quite easily. And with the CRUD plugin with even less lines.
Perhaps. I wonder who you are... /s
Nice work Chris. Perhaps we can trade notes - https://github.com/jgswift/qtcp
I hate that most places don't even respond to my application. I'm very lucky to have found the place I'm working at. They no longer allow remote, but the ones that were remote can stay that way (for now). Kinda sucks though. Probably in the near future I'll be working in an office again :( 
http://odesk.com or http://elance.com or http://toptal.com ?
Maybe we can trade. Tell me more.
I think you only need to use ssh2_fetch_stream if you want the stderr stream (that is, I think the stream you get from ssh2_exec is the stdio stream). Not sure if that will solve your problem though.
Sometimes I find myself wondering if Wordpress has some security flaws...
You might also consider [Envoy](https://github.com/laravel/envoy) which is actually from Laravel also. We use Envoy at the completion of our automated testing to take us live.
Not sure why you're telling me.
Please, I did not mean to offend. These are not accusations of your character or ability, but are meant as comments on your word choice and the suitability of your library for inclusion in my (theoretical) project. Which is (theoretically) really important to me as a consumer. You asked for people to comment on your encryption scheme, and I stated that I could not. You asked that people start using your library, and that aspect I feel confident assessing as a fairly veteran user-of-other-people's-solutions. I admitted (at several points) that I have severely limited understanding of encryption methods. There are things about this library that would lead me to turn it down that are either unrelated or only tangentially related to the encryption. I will reiterate them here: NOT A BIG DEAL: Your coding style deviates from standards. This just makes it more annoying to read when something goes wrong. KIND OF A PROBLEM: You do not have any parseable documentation, e.g. the standard PHPDoc DocBlocks. As a user, I like autocomplete and type hinting. COULD BE AN ISSUE?: OpenSSL is Bad&amp;trade;. At least, according to people who write more comments on mailing lists than I do. I don't know anything about encryption, so my question to you is: Is openssl_random_pseudo_bytes() a secure function to use? Have you verified this yourself? Are there reasonable alternatives that don't require me to have OpenSSL installed on my system? Vis-a-vis the RNG and algorithms: Good. Great. Fantastic. The descriptions you provide here are delightful. Were they in the original post, my naive user brain would not have been confused by the seeming contradictions. Edit: Swap 'reasonable' and 'there'
I think you have your own question answered. This is what a database is designed for. 
I get that as an author you might be protective of your work, but hell, you have one hell of an attitude towards what I'd consider to be valid feedback. I didn't see any accusations in @npfund's comment. Merely questions from someone who took the time to look into your library. If you're going to be a dick about things, I doubt you'll get much feedback.
Of course, not. It's software and it's highly unlikely that software has security flaws.
Don't forget about Symfony LTS http://symfony.com/doc/current/contributing/community/releases.html 
An article on frameworks with no mention of (arguably) two of the biggest frameworks, Zend and Symfony? 
&gt; is PHP the wrong language for this? Yes. You need to be using SQL, as /u/omerida pointed out.
If I've read this right, it's using SHA512+counter to create a stream. There's nothing novel about that and you absolutely can not call it "a perfect one-time pad". You've just described something like RC4 (which is considered weak). &gt; it's impervious to back doors (since it doesn't rely on mathematical algorithms This is clearly untrue. What do you think SHA512 is? 
I've tried to migrate an older PHP project from ZF1 to ZF2. Never again. The two frameworks are very different. Also, ZF2 is not better than ZF1.
Further, does it even really matter anymore? 99.9% of the sites out there are not going to become facebook, nor will they ever even be the next (some website you never heard of getting 100,000 uniques a day). In the *vast* majority of situations, these ridiculous benchmarks mean nothing. When you get to the point that these things actually do matter or impact your business, that's what you call "Rich People Problems".
Thanks! I think I understand a bit better now. I'll try this out.
Surprised to see CodeIgniter towards the bottom of the list, despite being so lightweight.
It's Laravel 3: https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/PHP/php-laravel
9 times out of 10 its not php that is causing the bottleneck that is slowing down your site. Its the calls to the database, reading from the file system for static images and other assets. If you are worried about performance look into [Caching SQL Queries](https://mariadb.com/kb/en/mariadb/documentation/optimization-and-tuning/buffers-caches-and-threads/query-cache/), [memcached](http://memcached.org/), or [redis](http://redis.io/). Honestly these things are what is going to speed up your app way more than the php framework you use. I'm not saying that your choice of framework wont affect anything and you should definitely take advantage of configuration and dependency injection container caching for whatever framework you use. But if you are looking at creating a "high volume" site your php framework has less impact than everything mentioned above.
So you're writing to the socket synchronously and while this is done, nothing else is going on in all other connections. This means if for some reason connection to other server slows down, it's going to be very inefficient. It would be interesting for me to read more about asynchronous parts of React, because using it as if it's synchronous doesn't really scale well.
The event loop actually makes all this code run asynchronously. If you're referring to the fsockopen, that was just to use something most devs are familiar with. 
I just installed laravel 4.2 and installed a basic project - just the standard "create-project" command (no database connection, etc). I added 2 microtime calls in the index file, and with APC caching on, the fastest page load time is about 12ms. (php 5.4, fwiw) On the same hardware, a Grails project that does about the same (general HTML page using the template system) is 2ms. Granted, this is after the JVM has warmed up for a few seconds (I did a few runs on the PHP/APC side as well), but the spread seems similar to laravel/grails diffs in techempower results (6x diff)
Taylor, thanks for your response. I want to believe that Laravel is fine to use at scale, because I really like it. I've looked around, but wasn't able to find examples of high traffic sites built in Laravel. I am aware of builtwithlaravel.com, but I'm not sure what the volume of any of those is. It's good to know that companies like NBC and MTV are using Laravel. Is that information available anywhere to read about further? In addition to your response, another good point here was the "Rich People Problems" comment. I too am of the mindset that if you've seriously reached the scale where you can't reasonably throw anymore AWS resources at the problem, then that's likely a good problem to have.
I dont think these benchmarks are showcasing anything but raw speed of simple situations. Of course, Laravel can power anybody's website just fine, but what these benchmarks leave out is the infrastructure and personnel cost of running at scale.
Tests were May 2014 - Laravel 4 was released May 2013 (IIRC). That said, I didn't see much difference between L3 and L4 on some basic tests I did. 
No, the companies I mentioned have not published any case studies. Sometimes there are also other large companies using Laravel that prefer I do not disclose their project, etc.
I use ElasticSearch, and I kinda like the syntax they use for boolean searches. Must, Must Not, Should. Bonus if you're also using ES, it should translate nicely to the query. 
You should use Laravel because Laravel is my bae. * comes with built in auth (can't remember its name, might be symfony).
Nothing worthwhile is easy, but leaving a pile of shitty code to fester for all eternity is not really a good solution. Sometimes you have to bite the bullet and at least try to leave things a little better than you found them each time you go in. This doesn't mean you rewrite half the application, it means you do what you can, when you can. Particularly if you're already in there for some other reason. This article tries to make "refactoring" out to be a dirty word. It shouldn't be seen that way.
Thank you guys :) 
Yes, check out [Apigility](https://apigility.org/)
Curious what this has to do with PHP. Is it simply because it is written in PHP? I hope that's not why it is getting hacked.
Yep, can't remember the last time an actual WordPress core flaw caused issues and nowadays it auto-applies security updates. Plugins and bad user practices on the other hand... In this case it's almost more of a licensing problem. Theme developers packaged RevSlider with their themes and sold them on ThemeForest and other such sites - because RevSlider is not free the end users could not update it without purchasing a new license (and if I'm not mistake were not ever informed that updates existed). My company had one site using RevSlider (prepackaged with a theme from Themeforest we had customized) and we fixed it the same day Evanato released their security announcement, but we had to do so by going and downloading a new copy of the theme, then pulling the plugin out of it and manually updating. Moreover the plugin developer kinda pushed the problem under a rug, which ended up exacerbating this entire situation - they didn't tell anyone that they had a major security bug and that updates were required. Instead the just quietly patched it and trusted that it would sort itself out, which might have been true if it hadn't been a premium plugin that was apparently very popular to include in themes. You would think that they would at least send out an email to registered license holders, which is exactly what Evanato did when they found out about it, but for a couple weeks there was a known critical security flaw people could exploit with the vast majority of site owners and administrators not even aware that there was an update available, let alone a vulnerability.
By default WordPress allows a user to modify the PHP files that are executed, over HTTP! By default all configuration and PHP code is inside the web root and served by Apache! By default WordPress hides away some PHP errors! WordPress is insecure in some ways by default. We work with WordPress quite a bit and use [Bedrock](http://roots.io) to help fix some of that.
You're right that many people don't have scaling problems. However, performance problems are far more common. Many apps / APIs want to return a response within a given time. 
What do you mean that by default it is served by Apache? Wordpress doesn't install Apache and set itself up for you. You install Apache or whatever else that can interpret PHP.
I don't do WP but my GF used to and her shit would get hacked now and then (she's more assembler/configurator than programmer). Main trick she learned is rename the wp_content directory and fiddle the config to point to that. It seemed to stop most of them. Other funny thing I heard today is my kid's friend's mom does WP for a living and is Russian (but living in Cal). She's had a hell of a day fixing sites. I made a crack about those dang Russians. She insists the hackers are Peruvian. ;-)
HA
He means the Wordpress installation is in the Apache DocumentRoot. It's advisable that backend (PHP, Config files etc) are outside of the DocumentRoot (inaccessable via an external request), and only assets (css, js, images) and an entry file (index.php, for example) would be in the DocumentRoot only. Minimising the chance of people accessing sensitive data. Look into modern PHP frameworks &amp; applications, you'll see the majority follow this practice.
Implementation of the Decorator pattern that can make your apps more flexible.
http://everything.kz/img 
I love Laravel, but as someone who has built a Laravel site that regularly has over 60,000 concurrent users (real-time active users in GA), I would guess Varnish or some other layer on top of Laravel plays a large part in any large scale setup. Laravel isn't worse than Symfony, ZF2 or Yii - but it isn't better either. There will probably never be a PHP framework built to scale. You don't scale by picking the perfect framework, you scale by: * Caching. As close to your users as possible. CDN &gt; Varnish &gt; views &gt; subviews &gt; queries. (Obviously you turn on "free wins" like opcode cache and db native query cache first). Offload everything you can to a CDN and scaling is no longer your problem... * Living in New Relic and rebuilding/restructuring anything that stands out and can't be cached. That's usually personalized content, everything else can normally at least be cached for a few seconds. * Queuing anything that takes time to run. * Building for a scalable platform (like EC2). That said, I think the techempower benchmarks is a good way to compare how different frameworks prioritizes performance and it would be interesting to see Laravel 5 in the next round.
&gt; Maybe try some front-end subreddit, cuz this seems like a weird place for this. How to change subreddit?
That's not what *who* is measuring? I was making a rough comparison between two options, and finding, in some cases, around a 6x factor, which is roughly what I see on the techempower results. The APC caching I used takes some of the language init steps out of the loop - the framework itself still has init overhead, but that's part of the point of the comparisons - how much overhead is there in the framework when it's processing requests that do extremely little?
I've been using phpbb, smf, mybb on many occassions and for long time. Then I've switched to IPBoard - it beats them all, both on user experience and codebase.
Everything that touches WordPress is GPL, because plugins and themes are a derivative of WordPress core, so anyone can distribute it. Envato really has no enforceable licenses when it comes to WordPress. But developers go a long way to make sure that people use the code in a limited way. However, there's nothing stopping anyone from blocking the API call (And returning true), fixing the patch, and distributing it to everyone. http://www.ivycat.com/2013/07/a-newbies-guide-to-the-gpl-and-wordpress-licensing/
Site has been updated. One of there admin accounts was compromised. Site software was not hacked (So they say) So PhpBB installs should be fine. Annoying thing is I am just starting a forum using PHPBB and all styles and Mods are offline cause they are all hosted on phpbb.com
\*their
Well done.
**PLEASE** stop abusing names to use them as meanings other than they were originally meant to be. This is **not** a Decorator. In fact, it's a Mediator. It's events, even though they are disguised as something else. I'm not saying if it's good or bad, just that it's most definitely **not** a decorator and should be renamed to indicate such. &gt; We get further from truth when we obscure what we say. Please don't bastardize yet another pattern's name...
By "websites run by..." do you mean their main domain, or some niche section of it? Anyway this isn't about Laravel, nobody in his right mind is going to go with PHP if req/s and scaling is a concern.
What is the difference and benefit of using the decorators instead of using an event? The manager's `add` method is the same as adding an event? E.g `add($classObjectOrCallback, $destinationClasses, $priority = 0)` Could be `add($destinationClasses, $classObjectOrCallback, $priority = 0)` i.e `add($name, $listener, $priority)` Here `$name` could be an array of string names. So basically the implementation of the decorators here is no different than an event system. In general it is somewhat frustrating, for me at least, to see the same pattern being repeated throughout components where each has their own name and duplicate code, e.g Filters, Validators, and now Decorators? I also think that with the right event system, better inversion of control can be seen and achieved. Just some thoughts. I appreciate the interesting read!
We've released the new version of Bolt. It's been a year in the making, and it took 7,300 commits and 121 contributors to get where we are now. This release embodies the growing up of our "Simple &amp; Sophisticated" Content Management System. Almost every library in Bolt was refactored to be cleaner, more readable and better to understand. Bolt is built upon Silex with Symfony components, and it is completely free and open source. Apart from the code itself we've put a lot of effort into making the documentation better and more extensive. - Details on this release can be found here: https://bolt.cm/newsitem/bolt-20-released - We've got a brand new site: https://bolt.cm - The features in Bolt are listed here: https://bolt.cm/features - Screenshots of the administrative interface are here: https://docs.bolt.cm/screenshots - Come say "hi!" in our IRC channel, or post any questions you might have in the comments right here. https://bolt.cm/page/irc
Thanks! :-)
WordPress is written in PHP, so how would it not have to do with PHP?
Well, WordPress core is pretty damned solid. Plugin, themes, etc are written by people who don't always know what they're doing, and many times very inexperienced. You really can't blame WordPress for what the plugin developers do any more than you can blame Honda for what a local shop adds on to their car.
A decorator (from this library's pov) basically wraps around an object. It's like having $obj = new Decorator(new Target()); $obj-&gt;anyMethodFromTheTargetClass(); // will execute it's own thing and might delegate to `Target::anyMethodFromTheTargetClass()` In this case the limitations of the event system are: 1. You need to attach listeners to each event/method (while the decorator you just have to specify which decorator applies to a class and it will take care of everything) 2. It's trickier to implement something like a cache solution where the decorator does some stuff and under certain conditions the call to the underlying object might not be executed 3. Call-stacks. With this library when you debug your code you can easily see what called what. PS: I could have named the library Sirius\Onion but that's not a better option (If I remember correctly Phil Sturgeon wrote an article about the "clever" naming of libraries)
If you [limit it to just PHP frameworks](http://www.techempower.com/benchmarks/#section=data-r9&amp;hw=peak&amp;test=json&amp;l=sg) it's in the top half. Mostly just the PHP extensions above it.
I think it is not a mediator. http://sourcemaking.com/design_patterns/Mediator/php vs http://sourcemaking.com/design_patterns/decorator It seems like an event system but if you were to implement the functionalities this library provides with an event system it would take a lot more code and/or make the event system automate some stuff (like automatically listening to events on a per method basis)
Looks fantastic. I was playing around with 1.6, whilst eagerly awaiting this release. Will definitely be using this for some websites, however, I heard talk of a REST API...this would turn Bolt into an awesome application management system and would transform its potential. Is this still on the cards?
http://php.net/manual/en/migration55.php Check the links at the bottom. You can see what has been added from 5.1 upwards.
This looks very interesting — I've seen Bolt zip past before, this might just trigger me to try and convert the odd WordPress site to a new platform... How import-friendly would you say it is? Assuming I can turn whatever content into a blob of JSON or XML, is there an easy way to get that into the system?
The ImportWXR extension should do the trick: http://extensions.bolt.cm/view/38d39e79-db98-4114-95e5-0673af79e6a4 
Hi guys, I'm the author of this post, initially published it to /r/programming, but I guess here is a good place too! :) I'm happy some of you liked it, next post will be on January 6th. I'll take a break from posting during the holiday period, but I will still be pumping out posts to have a couple ready in advance. After that it will be a post a week, every tuesday. The next two articles will respectively be about parsing and interpreting. The following posts will expand on what we built, growing from simple mathematical expressions up to a more complete general purpose programming language. We'll gradually introduce variables, more complex expression parsing, booleans and if conditions, functions, etc! Stay tuned ;)
Can you tell me how can I do the following in PHP trait TraitA { function foo() { return 'foo'; } } trait TraitB { function foo() { return 'bar'; } } class WithTraits { use TraitA, TraitB; function foo() { // make a call so to return 'foo-bar'; } } After that solve the same problem with the additional restriction: you don't know the order, names and number of the traits (cause they are added at run-time). Cause that's what I'm trying to solve here.
Actually, I presented all this to my time and it looks like we will be able to try it :D
 $orm = new CacheBehaviour(new LogBehaviour( new ExceptionNotifier(new ORM($dbConn)))); $orm-&gt;getLatestArticles(); &gt; I'm sure you can see the problems with such an implementation. Actually, no. Can you elaborate and explain what "problems" there are with such an implementation?
&gt; From my understanding, the core of WP is pretty solid. It's plugins and themes that usually create gaping security holes. It even says that in the article. &gt; [...]the malware uses a vulnerability in a slideshow plug-in called Slider Revolution. 
Right now only query string and body parameters are supported. Issue #1 on github is to support path parameters at the end aka: /user/{id} but a path parameter in the middle I believe is not possible in a pure convention based system: /user/{id}/actionOrNestedController It would be a downside of the convention based approach. 
namespaces closures generators traits short tag support shorthand ternary late static binding new iterators (Filter, etc.) new datetime classes new SPL classes (JSON Serialize, etc.) There's a ton more I'm sure, it has come a LONG way in the last few years. It's getting harder and harder to hate on PHP, especially what I think of as "modern" PHP, with frameworks like Symfony and Laravel and dependency management like Composer. Edit: trying to format lol 
Croute takes a fundamentally different approach in that the structure of your code defines the routing rather that a series of regular expressions. AKA most routing solutions are configuration based, rather than convention based.
1. The CacheBehaviour will have to implement the ORM interface or your IDE will stop helping you. This means you will not be able to reuse the CacheBehaviour (even by extending) on another class. 2. You cannot dynamically (easily) add decorators. If your app uses plugins to extend the functionality of a component, even if you use a DiC to construct the components you will still need to write a lot of code to make that happen or extend the DiC to use events or something to return the components you need.
I understand but how the actual code works is different. When a class is starting to use the decorators the manager returns a stack of objects (each having a `nextDecorator`) class CacheDecorator extends Decorator { function getLatestArticles() { if (($results = $this-&gt;get('latest articles')) { return $results; } $results = $this-&gt;nextDecorator-&gt;getLatestArticles(); $this-&gt;set('latest articles', $results); return $results; } } The `nextDecorator` is exactly the `wrapee` from the Decorator pattern. I fail to see how having a manager handle the decorator stacks turn this into a Mediator. The Mediator pattern shows that the mediated objects are aware of the mediator and the mediator manages the interaction between objects. In my case the manager just passes a decorator stack to the "main" object and it doesn't get anything from any other of the components involved. The communication object&gt;mediator is missing; that's more than half of the mediator pattern IMHO
Yes, I know about that :) There's another part of the problem unresolved.
s/short tag support/separation of short tags, and [short] echo tags (the latter always being enabled)
Time to migrate to bolt~
Using traits as decorators is a bad idea. Why not just use actual decorator classes and a dependency injection container? For example: $router = $container-&gt;make('DefaultRouter'); $cache = $container-&gt;make('CacheRepository'); $router = new RouterCacheDecorator($router, $cache); $logger = $container-&gt;make('Logger'); $router = new RouterEventDispatcherDecorator($router, $logger); $notifier = $container-&gt;make('ExceptionNotifier'); $router = new RouterExceptionNotifierDecorator($router, $notifier); return $router;
I actually have been giving exactly the answer to this question as a presentation for the last 3-4 months. Here's a [video from the San Francisco PHP User Group](https://www.youtube.com/watch?v=qE_z2TbEEG8) (1hr 17m). Also, [full slides are here](https://speakerdeck.com/dshafik/php-world-2014-php-5-dot-new-the-best-bits). The slides cover pretty much *everything* to happen from PHP 5.3 -&gt; PHP 5.6 (the video is a cherry-picked sub-set).
Thanks for noticing.. Fixing it now. Use it over 'plain' http: http://try.bolt.cm/
It's still not a decorator, since the object is **internally** creating the pipeline. If it was a decorator, the original object would have no idea it was being decorated, and would just function as normal. But in your case, the original object knows about the extra code. Which is precisely a [Chain Of Command/Responsibility](http://sourcemaking.com/design_patterns/chain_of_responsibility) pattern. You're using a mediator to construct the chain dynamically, and return it back into the original object. Really, it resembles a hode-podge of multiple patterns mixed together.
Some reasons: 1. `RouterExceptionNotifierDecorator` (and all other decorators) must implement the `Router` interface or your app might start crashing 2. If you have a plug&amp;play type of system the construction of the "final" router must be automated somehow. Granted the same results can be achieved if you use only the DI for constructing your objects, the DiC is capable of composing objects without prior knowledge about the structure and you're willing to implement the proper interfaces on all your decorators :)
I think a large portion of his (perfectly reasonable and valid) argument could be argued against successfully if a framework like Symfony or Zend is used. Especially in the case of Symfony 2 which will have a clear and easy upgrade path to v3 before v3 is even released. Not to mention that symfony has an LTS release, and you get the benefits of the monolithic framework.
Some unsolicited feedback and questions: * I love that so much of the configuration is saved to files... I've been getting into ProcessWire a lot recently and it's a great system, but probably the worst aspect of it is that it saves EVERYTHING to the database, including the configuration of its template types (what bolt calls "contenttypes").Makes it incredibly hard to develop a site with other people, or work on a copy of a live site on a local machine because you can't version control database changes. * I love that it uses sqlite by default. I never understood why so many CMS's require MySQL... I mean, that makes total sense for a lot of sites, but for someone just playing around with the system or building a 5-50 page marketing/brochure site there is just no need! Also makes it a lot easier for new designers to get into because it's one less "server thing" they need to worry about. * The lorem ipsum content generator is spiffy * I don't see any way to do "repeating content" (called "repeaters" or "matrix" fields in other CMS's). I see that there is "image list" and "file list" field types, but what if you want to combine several different field types into one "repeating item"? (Like what if your slide show has multiple content areas to go with each image, along with links and other options per-slide?) * It appears that nav menus are done by editing a config file and are not automatically generated from the sitemap... what's the deal with this? If my client adds a new page to a section of the website, I generally want that page to automatically appear in the nav menu... and asking a non-technical person to remember to edit a config file to do so is a no-go in my opinion. Perhaps the nav yaml file is just the easy default, but there's some other way to auto-generate menus that I'm not seeing? * Where is the "sitemap"? All I see are various lists of pages under each contenttype. But how can I see how all the pages fit together from the back-end? Perhaps this is Bolt's "thing" (there is no sitemap structure, you just make a menu and put whatever you want in it)? I've found this approach to work okay when a site is just a blog or just a news feed or something (like the ideal wordpress site), but I think this makes it very confusing for more general marketing sites that have several different pages and sections in them. Users have a mental model of their website as a series of pages in a certain structure, so it can be hard for them to do the mental jujitsu required to understand that "actually your site is a flat database of pages which are pieced together via configuration at run-time etc etc". Overall, looks like a really great CMS that could work well for more complex sites where you have very structured "contenttypes", but maybe is a bit too complex (out-of-the-box at least) for more straightforward marketing/informational/brochure sites. (Maybe?) Looking forward to working with it more if a good project comes along that fits this style. Great job!
I'm adding to @ircmaxell's the "it's still not a decorator" part ... Looking at the code in the tests: class DecoratorA extends Decorator { function foo($repeat = 1) { return $this-&gt;callNext(__FUNCTION__, array( $repeat + 1 )); } } This will help explain what a decorator is and isn't. When most people talk about the Decorator pattern, they do so in the context of languages it is most applicable to: class based inheritance / interface centric languages (Java, PHP, C#). That being said, Decorators must be able to pass the same is_a()/instanceof checks that the subject of the decoration can. Put another way, to things that depend on your SomeSubject[Interface], your decorators too must be able to pass this same type check. Your's do not, and that is one central reason @ircmaxell is arguing the name is not appropriate. There are a few other elements of the decorator pattern that are missing (trivial though): 1. typically decorators sub-class their subject (covered above) 2. typically, the subject is the, or one of, constructor arguments; it is at least a dependency 3. typically, along with #2, there is a pointer in the decorator to the subject 4. typically, any calls to the decorator not specific to the decorator need to be re-directed (or proxied) to the subjects via the pointer (in #3). When we talk about decorators, we're generally talking about those facets of the pattern. When some or most of those facets are not there, we have a hard time calling it a Decorator.
I agree, it's more a Chain of Command/Responsibility pattern than a Mediator. Still, there must a command passed to a chain. This means that in your system you will not be able to call something like `$orm-&gt;getLatestArticles()` but something like `$commandBus-&gt;execute('get_latest_articles')`. Which might create some hodge-podge of its own :) &gt; It's still not a decorator, since the object is internally creating the pipeline. It's still not a Chain of Command pattern, since the object is internally creating the pipeline :) I guess I need to find a name for this pattern, or change the god damn name.
Thanks for the heads-up on that, AlpineCoder. I definitely need the output in this case because I'm using it to handle some conditions later on in the process (i.e. - it's a process that archives some things on the server, so depending on how that goes, I use the stdout to determine what to do next). I'll keep doing some tests with this and I'll post back if I find out what was causing this. I experienced this awhile back but I can't remember what the cause was. I keep wanting to blame something like traffic or server process amounts, but I'm not sold on that being the reason yet.
Got it! My intention was to create a system that does what decorators do (ie: functionaly): 1. Without having to make the decorators implement the interface of the subject 2. Allowing some way for dynamically adding decorators at any level on the decorator stack. PS: Do you have a suggestion for a name?
Thanks for the feedback! I'll reply point-for-point: &gt; I love that so much of the configuration is saved to files... That's exactly the reason why we did that. We usually work in small teams (backend dev + frontend dev), and being able to put stuff like this in git is invaluable to us. &gt; I love that it uses sqlite by default. I never understood why so many CMS's require MySQL... I mean, that makes total sense for a lot of sites, but for someone just playing around with the system or building a 5-50 page marketing/brochure site there is just no need! Also makes it a lot easier for new designers to get into because it's one less "server thing" they need to worry about. Yup. We made it the default, because it's "no config" and works out of the box. We often use mysql (out of habit) for production websites, but we've done a few using sqlite. The performance of SQLite is actually pretty good. &gt; The lorem ipsum content generator is spiffy Thanks! I was _so_ bored of setting up a site and having to copy/paste some random crap to get started. :-) &gt; I don't see any way to do "repeating content" (called "repeaters" or "matrix" fields in other CMS's). I see that there is "image list" and "file list" field types, but what if you want to combine several different field types into one "repeating item"? You're not the first to ask. Soon. &gt; It appears that nav menus are done by editing a config file and are not automatically generated from the sitemap... what's the deal with this? If my client adds a new page to a section of the website, I generally want that page to automatically appear in the nav menu... There's an extension to drag'n'drop menus: http://extensions.bolt.cm/view/d49af7c7-7b34-4396-b436-2f63f4747a7d It doesn't do all that you've mentioned (like 'auto add' new pages), but we've found most clients like the extra bit of control over what shows up in the menu, and what not. Usually, we make it so that a menu has a single link to "news" or "weblog", and on _those_ pages we add dynamic lists with the latest few entries and pagination and stuff. &gt; Where is the "sitemap"? All I see are various lists of pages under each contenttype. But how can I see how all the pages fit together from the back-end? Perhaps this is Bolt's "thing" (there is no sitemap structure, you just make a menu and put whatever you want in it)? I guess Bolt is a little more "detached" than that. Contenttypes _usually_ have a direct mapping to a page on the website, but it doesn't have to be that way. Creating a dynamic map or flowchart out of that would be sweet, but i'm not sure if it's feasible. Do you know of any CMS'es that are able to generate something like this? If so, i'd like to take a look to ~~steal the idea~~ for inspiration. &gt; Overall, looks like a really great CMS that could work well for more complex sites where you have very structured "contenttypes", but maybe is a bit too complex (out-of-the-box at least) for more straightforward marketing/informational/brochure sites. (Maybe?) Nope, the easier the site, the easier it is to set up. Just remove the cruft from contenttypes.yml you don't need, and you can give the client a lean and mean CMS without any stuff they don't need. 
Thanks, the correct link is http://cheatsheet.bolt.cm/ Luckily the site is powered by a convenient CMS, so i've been able to fix the link on the homepage as well! 
This plugin seems to have resolved the issue for us: https://wordpress.org/plugins/patch-for-revolution-slider/
&gt; The CacheBehaviour will have to implement the ORM interface or your IDE will stop helping you. It does in your version as well. Well, it needs to implement the methods at least. Meaning that the `CacheBehavior` in your example would still need to be specific for the `ORM` class it was decorating. Because it needs to respond *properly* to the proper methods, and implement the implicit interface. So while you may not be explicitly implementing the interface, you are implicitly doing so. So you can't reuse the cache behavior in either case. You can extract the logic, and make a simple Adapter, but that's applicable in both patterns. &gt; You cannot dynamically (easily) add decorators. Having global state makes things worse. The point of decorators is that it's local state. So yes, you will need to wire it up, but the wiring becomes explicit local state as opposed to implicit or global state. What you are calling a disadvantage, many including myself would call an advantage...
Onion. (j/k!) I would likely stay away from specific OO-patterns for a name, because what you're doing here is less associated to a pattern as it is more associated to a paradigm of programming. You've kinda got AOP going on here without any of the AOP diction/terminology (I think that is your ultimate goal, right?) Like AOP, you're employing the use of a couple of patterns in order to achieve the *implementation* you envision. A similar paradigm is subject-oriented programming (http://en.wikipedia.org/wiki/Subject-oriented_programming). EDIT: But it also has some event driven programming, subject-observer, even some callback notions going on. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Subject-oriented programming**](https://en.wikipedia.org/wiki/Subject-oriented%20programming): [](#sfw) --- &gt;In [computing](https://en.wikipedia.org/wiki/Computing), __Subject-Oriented Programming__ is an [object-oriented](https://en.wikipedia.org/wiki/Object-oriented_programming) [software paradigm](https://en.wikipedia.org/wiki/Programming_paradigm) in which the state (fields) and behavior (methods) of objects are not seen as intrinsic to the objects themselves, but are provided by various [subjective perceptions](https://en.wikipedia.org/wiki/Subject_(programming\)) (“subjects”) of the objects. The term and concepts were first published in September 1993 in a conference paper which was later recognized as being one of the three most influential papers to be presented at the conference between 1986 and 1996. As illustrated in that paper, an analogy is made with the contrast between the philosophical views of [Plato](https://en.wikipedia.org/wiki/Plato) and [Kant](https://en.wikipedia.org/wiki/Immanuel_Kant) with respect to the characteristics of “real” objects, but applied to software ones. For example, while we may all perceive a tree as having a measurable height, weight, leaf-mass, etc., from the point of view of a bird, a tree may also have measures of relative value for food or nesting purposes, or from the point of view of a tax-assessor, it may have a certain taxable value in a given year. Neither the bird’s nor the tax-assessor’s additional state information need be seen as intrinsic to the tree, but are added by the perceptions of the bird and tax-assessor, and from Kant’s analysis, the same may be true even of characteristics we think of as intrinsic. &gt; --- ^Interesting: [^Subject ^\(programming)](https://en.wikipedia.org/wiki/Subject_\(programming\)) ^| [^Separation ^of ^concerns](https://en.wikipedia.org/wiki/Separation_of_concerns) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmxr97a) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmxr97a)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; This is another example of how large frameworks shorten the shelf-life of your application. Suppose we had built the app on v3 and handed the project over to the client, then next year they want some enhancements done. Now we’ve got the following problems to deal with: * Find developers still familiar with the old version of the framework * Spend time / money upgrading the framework (for no new end user features) * or… Stick with the old framework and try to find old versions of other packages you might be using through composer. * Eventually the old version will stop being supported and security becomes an issue So what's the alternative? A custom "framework" that **NO** other developer is familiar with? Any appreciably sized project needs lots of helper utilities to cut down on code duplication (the "cool" stuff you talked about that frameworks ship with), and the instant you introduce those, you've introduced a *WORSE* problem than being "stuck" an old version of a well known framework. News flash: applications incur legacy baggage over time. There is no avoiding that...
Excellent! Feel free to get in touch with us, should you get stuck! \^_^ 
&gt; It's still not a Chain of Command pattern, since the object is internally creating the pipeline :) No it's not. It has a central authority do it: [link](https://github.com/siriusphp/decorators/blob/master/src/DecoratableTrait.php#L23). And that's the mediator in action. The object sends an event to the central object ("DecoratorManager") saying "Wrap me". The central object then looks up who can receive said event, and then attaches each one of them into a chain (a linked list could represent it). Then it returns that chain back to the object. That chain is then executed in tern. So it's definitely a conglomeration of a chain of command, and a builder. With some pieces of mediator and strategy littered in. It's hard to identify which pattern, because there is no pattern. There are a combination of many, with the lines blurred between them.
Noted. Like I mentioned to /u/Base10Propaganda, there's obviously a demand for this. 
That makes sense. Is it safe to assume Facebook's "Hack" is somewhere near HHVM's performance?
More issues: 1. It isn't possible to wrap a method execution within ORM class itself, e.g when $this-&gt;someAnotherMethod() is called in the ORM class instance context. $this won't refer to a CacheBehaviour instance, so caching will not work. 2. This will also break fluent interfaces, for example, if some method returns $this, then $cachedOrm-&gt;getThis()-&gt;getLatestArticles() will call ORM-&gt;getLatestArticles() method directly and will not use a caching proxy instance at all. 3. This implementation can not handle direct initializations of class instance inside ORM or another classes, e.g (new static)-&gt;getLatestArticles() or (new ORM)-&gt;getLatestArticles(). There is no way to cache this calls without source code modifications. Actually, DI should be used instead, but for a legacy code this can be not so easy task to do. 4. Can not handle static methods at all. How to wrap this ORM::findOne(['id'=&gt;5]) ? 5. Poor performance due to nested call_user_func_array() and proxying methods. 
I gave it a whirl, but it didn't in fact do the trick. Things I ran into: * It tells me there's no mapping for attachments -- easy enough, I concoct something that just might work in `contenttypes.yml`. Lo and behold, I get a message about my database not being up to snuff which allows me to fix it, and BAM I now have an attachments type. So far, so good, and by the way, what an easy and great way to create types! * It runs the dry-run preview, and it shows me a post and some images and asks me whether that looks OK. Yessirree, to my untrained eye it does, onwards! * **BLAMMO**, fatal error: &gt; Error: Call to undefined function Bolt\Extension\Bolt\ImportWXR\makeSlug() &gt; File: extensions/vendor/bolt/importwxr/Extension.php &gt; Line: 160 I figure out what it attempts to do there, decide the slugification is not really that important for that field (the user name, which already is slug-compatible), and comment out the function call. _Later on, I notice [this pull request](https://github.com/bolt/ImportWXR/pull/2), which actually fixes the problem, too. So there's that._ * Reload! Now it starts doing all kinds of things, and it gives me a long list which seems to consist of all my posts and attachments with a reassuring "Done!" at the end. Wonderful! However, they're not actually imported, database still empty... I'm sure I'm either doing something wrong, or that my problem is easily fixed. I sure hope so. Any pointers as to what I did wrong and/or how I can properly troubleshoot it?
Ok, let's go through these one-by-one: &gt; It isn't possible to wrap a method execution within ORM class itself, e.g when $this-&gt;someAnotherMethod() is called in the ORM class instance context. $this won't refer to a CacheBehaviour instance, so caching will not work. This sounds to me that the ORM class is doing too much and needs to be split apart or refactored. SRP and all that Jazz... &gt; This will also break fluent interfaces No it won't. You can have the decorator return properly decorated instances at every step. Besides, fluent interfaces (in the context you're using them) are very much a Law-Of-Demeter (principle of least knowledge) violation and are an anti-pattern. &gt; This implementation can not handle direct initializations of class instance inside ORM Object initialization within **a business object** is an anti-pattern. [New is considered harmful](http://c2.com/cgi/wiki?NewConsideredHarmful). &gt; Can not handle static methods at all. Static methods are not an OOP construct, and as such have no bearing on a discussion of OOP techniques and patterns. &gt; Poor performance due to nested call_user_func_array() and proxying methods. And how is that any difference from this implementation? Additionally, if `call_user_func_array` becomes significant in your implementation due to decorators, I'd **highly** suggest your problem lies elsewhere in your architecture and algorithms. So basically, these issues all fall down to wanting to use anti-patterns, and then blaming a pattern because it doesn't work with anti-patterns that you shouldn't be using in the first place...
I think you've just described Laravel. While their ORM is super powerful when used within its confines, you can still break out of it pretty easily and write raw SQL ([example](http://stackoverflow.com/questions/14687993/laravel-4-how-to-run-a-raw-sql)). While is was a big shift from CI, that's not without good reason. Laravel has embraced the new features of PHP while CI was stuck.
Thanks for the fantastic response. re: menus... is there an example or documentation somewhere on how I could implement your suggestion of having a manually-configured top-level menu, but then dynamic population of sub-pages for particular contenttypes? That does sound like a good solution (because it is rare for site owners to add new top-level pages, whereas adding new pages underneath existing "sections" happens more frequently). About other CMS's that dynamically generate the "sitemap"... I think we're looking at things from different angles on this one. There are CMS's that start from the assumption that "everything is a page in the sitemap", so it's not so much a matter of "dynamically generating a sitemap from pages" but rather "pages can only exist in the context of a sitemap", so the sitemap is always there and present. The primary example of this is ProcessWire (where literally everything is a page, even users, groups and permission!). I personally think they take the metaphor too far, but at least it is a consistent philosophy that allows you to leverage more common functionality (because you know that the standard data access functions will work across any type of "thing", because every "thing" is really just a page). Another example is Concrete5 (the CMS I use the most professionally, because the front-end editing interface is easiest for non-technical people to use... at least for the kinds of sites I build and the kinds of clients I have) -- everything is a page in the sitemap... in fact, creating new pages is a function of the sitemap, so to add a new page you have to first go to the parent page and then click "create sub-page" (so it knows where to put it -- in other words, you cannot create a new page without knowing where it will live in the site). There are of course exceptions and you can programmatically create pages that are "disconnected" from the sitemap, but these are exceptions to the rule (and require custom programming, so not something an end-user would do on their own). Also take a look at Weebly. It's a hosted service, so it's very different from an open source CMS like Bolt, and it is only suitable for relatively simple sites without custom functionality... but they have a super intuitive drag-and-drop sitemap tree that lets you easily rearrange pages and see the overall structure of the site. Thanks again, I'll definitely be taking a closer look at Bolt!
I can agree with the above points. However, this is like a "clean code" ideal instructions. SRP for class, methods, IOC for for object initializations, etc. As I'm architect, I always follow this way and teach our developers to do this for our business code, but I like the whole idea of AOP to keep annoying part of the source code in the separate classes. So a caching aspect in terms of AOP is a SRP applied to the functionality of whole the system (caching). But OOP doesn't give me a nice answers for my questions. I like mediator pattern for low coupling, but I hate to inject it everywhere to dispatch an events and add tons of listeners for logging. Decorator is good, but typical enterprise application contains a huge number of classes with methods that should be logged and cached. Good decorator should use open-closed principle to extend just a single method and it should also implement an original interfaces - this can require a lot of boilerplate code or code generators. Proxy pattern is not efficient (typically implemented with __call) and can not be used with type hints. So, this is a cross-cutting issues. OOP can handle them for a small number of classes and cases, but not for a complex systems.
Doctrine DBAL is a pretty nice little wrapper around PDO. It's possible to use it in any project that ships the Doctrine ORM. Also, the Doctrine ORM allows you to use native SQL queries, but still map them to your objects.
This might be true for most, but I am definitely kitty scripting.
&gt; So yes, it definitely does work for complex systems if you design them properly. &gt; I have nothing but anecdotal evidence to support that, so I won't go further. Ok, thank you for sharing you thoughts. But let's agree to disagree.
&gt; If you can get a bare bones WP install export imported, we can rule out issues with the WXR importer and/or Bolt, right? I'll try and dig up a new .wxr file somewhere, tomorrow and give it a go. Will let you know how it goes! 
The two biggest things that jumped out at me are: 1) It seems like authentication/authorization is a very good project boundary, and I'd like to see separate standalone modules for each, rather than one for both. 2) The project is very tightly coupled to Modler; it would be nice if the extensibility were provider-based, with an adapter for Modler instead.
HTTP Router PSR is exactly what I was thinking, and if it interests; all the implementations I was looking at are also HTTP routers.
yuuuup.
What are you talking about? This gives you a good indicator of your expected upper-bound performance. There's 100% guarantee that your application will be doing *more* than "hello world", which means your application will run slower than "hello world". So if "hello world" can get a RPS of 60k, this test tells you your application will never achieve better than 60k RPS for this framework using this configuration. Naturally, you want hello world for a few major configuration options (e.g. with/without opcode cache, etc), but the implications are far greater than zero. 
&gt;Ratifying interfaces does not make a framework. However, the interfaces do act as a blueprint. The more aspects of a framework you specify as a standard, the more homogeneous frameworks will become. Standardisation removes variability. &gt;I don't agree that this would be a bad thing. Well, that's where we disagree then. First of all, it limits expression by demanding conformity. Second, it doesn't really add anything of value. Introducing this RFC won't increase the user's ability of using components from other sources for their application. PHP-FIG isn't meant to make applications pluggable without modification between frameworks, it's meant to enable use of components at an application level. 
Thanks for the great reply and the high praise - we do strive to prioritize performance as our yardstick.
Would you say that the Dev (Laravel 5) branch is pretty stable for beginning a pre-production application?
There are many success stories, some of them even posted on this sub, about running SF2 applications under high load. If a framework that is at the bottom of this benchmark, can achieve this, then the benchmark's usefulness is near zero. See Taylor's (utotwel) response at the top. This benchmark is useless.
Decided to go with this solution: To the right of the Chosen tag input field, we have a radio group with two options: Broad search, and Narrow search. Broad is selected by default (logical OR). If they select narrow, it uses a logical AND instead. Ideally we would always just have broad by default, and a single checkbox with something like "Too many results? Restrict my results to EXACTLY this combination of tags", but that's a bit too verbose for the space we have. We could just do the same single checkbox with "Narrow search" next to it, keeping broad as the default, but we felt that "Narrow search" is too terse to be shown by itself, whereas showing "Broad search" next to it, selected by default, helps reinforce what it does. Further, seeing that one of only two options is already selected by default, we felt that it would help prime the user and make them feel less apprehensive about selecting the other option - it's less of a mystery what it will do. The use of terms "Broad" and "Narrow" also better communicate the dichotic behavior better. We thought about "Any" and "All", but those are semantically similar while the behavior of logical OR and logical AND have opposite effects.
That's a good question. I've heard that it is stable enough to use in pre-production. However, since I haven't started using it myself, still on 4.2, I would hate to say yes without having experience using it myself.
It's not insane seeing as HTTP Message is nearing completion, and HTTP Client is potentially on the cards.
&gt; It isn't possible to wrap a method execution within ORM class itself, e.g when $this-&gt;someAnotherMethod() is called in the ORM class instance context. $this won't refer to a CacheBehaviour instance, so caching will not work. I think /u/lisachenko is refering to the following situation: class ORM { function findByCriteria($criteria) { // call the database } function findLatestArticles() { // create the criteria here return $this-&gt;findByCriteria($criteria); } } And you want to execute the "decorated" `findByCriteria()` method when the "undecorated" `findLatestArticles()` method gets to be executed.
True, but that's a bit more focused around authentication and not as much authorization. The RBAC handling in Gatekeeper handles that in a pretty generic way. There's a bit of session management in Aura.Auth that Gatekeeper doesn't include, though. The goal is a drop-in system for a 90% audience needing authentication and authorization.
It is just an additional URL to hit on the backend? 
any plans to talk about [doctrine/lexer](https://packagist.org/packages/doctrine/lexer) or [hoa/compiler](https://packagist.org/packages/hoa/compiler) ?
I think, as long as you aren't planning on releasing a production app within the next couple months, it'd be fine to start with 5. But it *will* have some quirks while developing, and since you are new to the application, it may be difficult to know whether or not the error is from you or the beta framework. FWIW.
Cool stuff, thanks for sharing.
It sounds like you have fairly complex MySQL queries, which in my experience means that you also need to do more complex stuff after getting it from the database. How is a framework helping you in this instance?
[CakePHP 3](http://www.toptal.com/cakephp/cakephp-still-fresh-still-hot) - Quick to pickup. - Major versions are supported for a very long time. - 3 is still in beta, but 2 has been used in production for years and has proven to be reliable. - Easy to retrieve data and cache. Has a nice query builder to help with complicated queries. Very helpful community #cakephp on Freenode :)
laravel's creator has an issues with laravel's results....are we surprised? to me, half the value of projects like this is to remove the heresay that surrounds various frameworks. I'm so tired of people **claiming** X or Y is better/worse. Do you have hard data published on any of these frameworks? Can you generate this hard data using a repeatable set of scripts? Does your data enable rough comparisons to multiple other similar frameworks? Are your scripts open source and do they have have multiple communities looking at them occasionally? All these "high loads" you mention are just marketing - they are people fooling either you or themselves into thinking their result is more general than it has been proved to be. Without open repeatable (e.g. scripted) methodology, known hardware, etc it's all open to criticism. From where I'm standing, at the moment this project is the one most open/closely examined, so it trumps most one-off results. There's nothing wrong with fact-checking it against these one-offs and looking closely at discrepancies, that's great to do, but don't think that just because someone published big numbers on framework X running on hardware Z with configuration C that one data point invalidates everything else you hear about framework X. There's a lot of stuff still wrong with this project I'd like to see fixed, but it's more trustable than anything else I have seen so far. Now, I'm sympathetic to framework devs that have to put up with silly people vastly misunderstanding the type of conclusions that should be drawn from a dataset, like thinking RPS is the only thing that matters when choosing a framework, but the right solution isn't get angry at a project trying to address the lack of data in a systematic manner, it's to educate the user base and/or contribute to this (or other) projects trying to enable repeatable comparisons. For Laravel specifically, perhaps the creator should: 1) explain why it appears to underperform on the metrics in these benchmarks (perhaps propose a fix it if the implementation used is incorrect) - is the testing methodology unfavorable to Laravel's speciality area, is it somehow nonrepeatable, etc 2) address what nonfunctional properties make laravel appealing. There are tons of reasons I'd choose a framework with lower RPS over one with higher, such as ease of coding/maintainability, a focus on security, ease of testing, memory safety, etc. Does laravel have non-quantifiable properties that make it appealing? In addition to addressing (1), I'd personally also address why "big sites" find Laravel useful and motivating. 
[Hey, I thought I recognised you!](http://www.reddit.com/r/PHP/comments/10t585/weve_just_released_the_first_version_of_our_new/c6gfqcd) (site is looking way better by the way). Glad to see this project wasn't just a rookie's hobby and that it's come so far since the first release 2 years ago! I have some questions. How big is your community? Do you have any metrics - i.e. active installs, downloads, forum registration, social media follows? How have you responded in the past to security patches?
Make a simple Online Calculator in PHP (Tutorials)
You mentioned the framework should be easy to learn but also you want long term support. Being quick to learn is obviously important but (with hindsight, on a long term project) I'd rather have developers take a week or 2 to get up to speed learning a more flexible, complex framework than choose an easier framework that's less flexible to use in the long term. The requirements vary for everyone but as humans we're naturally biased to value short term gains over larger long term gains.
I have used symfony2+doctrine2 in the past for an ill-advised PHP project dealing with lots of aggregated statistics. Now first of all I'll say I'm fully aware that PHP is terrible for this kind of thing. :) But it was just a hobby project and I wanted to see how far I could go. The eventual form of the project ended up iterating over a couple of million records aggregating them based on filters six ways from sunday. Yeah, it really does scream PHP doesn't it. Although once I got it running with hhvm it was actually fairly reasonable. Anyway, using doctrine for this was a quest of optimization. I actually eventually had to forgo doctrine completely and just wrote my own wrapper around PDO. The abstraction in Doctrine was still eating too many cycles. I was literally shaving hairs at that point. But 2 things that really made a difference for me before I had to take that step. Forcing an index. Sometimes your rdbms is dumb and you need to help it out. $q-&gt;setHint(UseIndexWalker::HINT_FORCE_INDEX, $this-&gt;filter-&gt;getForceIndex()); (where "$this-&gt;filter-&gt;getForceIndex()" just returns an index key) Second tip would be when you NEED to retrieve a date field, you can speed things up considerably by cheating and changing the model definition to define the DateTime field as a string. $cmf = $this-&gt;em-&gt;getMetadataFactory(); $class = $cmf-&gt;getMetadataFor('MyProject\ProcessingBundle\Entity\\'.$entityName); $this-&gt;oldClass = $class; $class-&gt;fieldMappings['fieldName']['type'] = "string"; $cmf-&gt;setMetadataFor('MyProject\ProcessingBundle\Entity\\'.$entityName, $class); Then later switch it back. Doing this will prevent Doctrine from instantiating a DateTime object for each and every record it retrieves. This is an unsupported "feature" though, so don't use this in production code or anything. But one-off scripts or something could make a real difference. Anyway, johnny's reply just reminded me of this fun little project. I can't stress enough though that Doctrine2 is absolutely wonderful, and if you ever find yourself in the niche case like I did where it simply isn't fast enough, then you should probably think about alternatives like a noSQL data caching layer, or hhvm or perhaps something not PHP, or whatever. Because unless you are trying to process a large volume of data natively in PHP Doctrine2 is probably fast enough.
&gt; I imagine it could be teased apart somewhat but they both would still rely on the "users" information, so there'd still be some crossover in the functionality there. IMHO authentication/authorization modules shouldn't concern themselves with users (as far as retrieving and modeling them goes). They should provide interfaces for what they need to do their jobs, and rely on the consumers to give them implementations of those interfaces. If a consumer wants a single implementation to implement both interfaces and be shared across both modules, that's fine. If it wants to only implement one or the other, that's fine too. If (for whatever weird reason) it wants to use both models, but different implementations with each, it could do that, as well. &gt; I'm not sure what you mean by "provider based" in the context of Modler. Are you meaning having the ability to switch out other "model" kind of systems (like maybe with Doctrine entities or something)? I guess "repository" would be more accurate than "provider". And yes, it would map to Doctrine's entity repositories.
It is hard to read your site and, of your six "slick" tips, none are specific to PHP.
This looks very interesting! Well done. I'll try soon.
"Hamza Ali Shahid Is a Professional Web Develpor, Blogging Expert, Graphic Designer, SEO Expert. I'm 16 year old." How long would you say you've been an expert..?
Thank you this is great insight! I'm currently working with the original developer as well. Do you think I could have him create the needed extensions to integrate this bit without reworking the entire architecture?
that you are right about. I should darken the text for future post so that its a bit easier to read.
Correct. The framework helps with routing, user sessions, MVC organization, helper functions, forms, user input filtering, etc. I'm not sure I understood the question.
I agree that given the tradeoff, long-term support and future potential matters more than "quick to learn". With that said, what framework do you feel I might be overlooking?
This seemed like a pretty interesting problem to solve, so I tried tackling this without a DB. I ended up using JavaScript, and my first attempt took 84s to run. After creating an index by using the row's id as the property name in an object, I managed to get this down to 2ms. Creating the index took about 50ms. PHP may have similar performance. I'll share my solution once I can access VPN, but overall it looks like a DB isn't necessary.
Nah.
&gt; be friendly to developers who need to write complex MySQL queries (often not suited for No. Definitely not. Taylor is taking some liberties with the architecture now since he is starting restrictive semantic versioning with 5 - he's getting in some broad changes now because he won't be able to arbitrarily introduce them as easily in 5 while following semver. While he said he's focusing on documentation this week (which could indicate relative stability at this point), there's nothing that would necessarily stop him from making bigger changes. Not even Jeffrey Way is updating Laracasts with L5 videos anymore - he's likely waiting until Taylor gives him the thumbs up that he's done with the major architectural revisions. Also, it's tough to get a read on what his intentions are. So far he's removed some useful features that we had in 4.2 (middleware are not as useful as filters, but filters aren't "officially" supported even though he's leaving them in). The awesome stuff he did in the early days with automatic request validation upon controller method resolution he seems to have been changed back in favor of validation in the controller method. As it stands now, 5 seems to be *different*, not necessarily *better*, than 4.2. If you're not sure, wait until January when it's slated to release, but definitely don't start dev on 5 unless you want to play around with it.
Good day. Congratulations on the new release! I've just installed Bolt 2.0 stable, and have noticed an issue: the thumbnail filter, at least on my machine, is generating image links that lead to 500 Internal Server Errors. The regular image filter is working fine. I have tried this on XAMPP and AMPPS server stacks on windows. Would love to get some feedback on this.
Try looking at apache's error log to see exactly what goes wrong and then we can debug from there.
Phalcon
Bolt is a joy to use and develop for. Really a developers dream cms. IMHO, way better than Wordpress or Drupal (from developers point of view).
I recently went through a similar process from CI and realised that like you I needed the basic functions of a framework - the routing, MVC, etc. You may find that a micro-framework will do what you are after, especially if you already have your own libraries of helpers etc? I ended up writing my own - very micro - but I did like Slim. Silex also - and I think there are a few others around; take a look before deciding on a bigger framework.
Ha, such a long time ago! :-) &gt; How big is your community? Do you have any metrics - i.e. active installs, downloads, forum registration, social media follows? Hard to measure, i guess. We have 1400 something stars on github, and 120 contributors. Almost 500 followers on twitter. _active_ installs are hard to measure, but we have about 28.000 installs who pinged our server for the "latest news" (in the top right corner) at least once. &gt; How have you responded in the past to security patches? So far we've never had any serious issues. I guess partly because we're aware of this in everything we do, and try to use best practices only. There have been minor issues like the random XSS issue or "logged in editor who's not allowed to upload an image can still upload an image". We've marked these issues as such, in the changelog and upgrade notes. I think we'll adopt this, as soon as it's taken shape somewhat: http://blog.astrumfutura.com/2014/11/security-oriented-psr-proposed-to-php-fig/ 
Thanks for the compliment! Glad you like using it. :-)
Sílex 
Maybe try posting on hacker news or some other subreddits.
I guess you could try http://www.dzone.com although their site seems broken for me at the moment. If you are going to post PHP related posts on subreddits other than /r/PHP you are going to have a bad time as there is a big circlejerk going on about how bad PHP is so the reception probably isn't going to be good.
5.3 is no longer supported, so definitely don't use that. 5.4 only receives security updates for about one more year, so given a choice I wouldn't use that either. Other than that, I can't really comment. I haven't used WordPress on PHP 5.6 yet, but 5.5 seems to work really well.
Also worth mentioning the great evolution of the community and ecosystem: * Symfony2 (with the components, which are foundation for great frameworks like Symfony2 Framework and Laravel for example) * PHP-FIG * Composer
(y)
That is very hard to guess as I can only speculate how the code looks and how exactly the addon and the original program have to interact. I would give it a try ...
Micro : Slim Need much more : Laravel , and if you willing to invest some time to learn : Symfony :-) .
If you post PHP-related stuff, try to get your blog into planet-php.org but I can not say how well it will perform.
Thanks! :-)
Please do! If you bump into issues, don't hesitate to get in touch! 
I see you opened an issue. Good. :-) https://github.com/bolt/bolt/issues/2331
Ctrl + Shift + A -&gt; Search for Action or Option. You want to extract a codeblock into a function but can't remember the shortcut? Select the code press Ctrl + Shift + A and write: "extract method" select the first entry and there you are. Basically makes memorizing all those shortcuts you rarely use unnecessary and a very easy way to never be forced to take your hands off the keyboard. If you present it to some administrative/architectural people" the show UML Diagram may be a goody as well. I used Netbeans ~2.5 years ago before switching to PhpStorm and the overall feel with PhpStorm is way better imho, but it's hard to show that in a presentation I guess :) 
The second one is the most valuable. I cannot work without it anymore. The feature is context sensitive, so it work as you expect in php, js, html etc. 
Recently discovered that if you press Ctrl + w too many times, you can just add shift (i.e. Ctrl + Shift + w) to make it go down one level.
In the end, the developer should have the last word. I've never worked anywhere where I was told "This is what we use, pick.", I still prefer Netbeans (although I'd like to have some of the PHP Storm features, my choice is mostly from a UI point of view and setting up my IDE perfectly across multiple screens), I would say it's wise for a PHP development company to supply licences for PHP Storm, but it should always be the developers choice in the end.
I've just added an issue to the repo regarding related data as it doesn't seem to be able to return it. Is there a simple way to add in the related data (even just ids and contenttypes)?
I especially love that part about routing. I totally agree with it, why are people wanting to route everything through index.php... what are they trying to solve exactly?
I have literally spent the last year making this argument =). After I started working remotely they let me use PHP Storm for its better syncing functionality, but before that all developers were meant to use net beans so if a developer had a problem with a program there were X other developers with experience in the program to help. This might not be the case if other developers all used different programs. If the company accept PHP storm all the other developers will be given the choice to switch, but not forced, its like my christmas gift :)
Yes, this was exactly that case.
Can't imagine these are unique to PHPStorm, but [Live templates](https://www.jetbrains.com/idea/help/live-templates.html). Portions of code that you commonly write, setup an abbreviation for them, type it and hit tab; instant code! Few of the ones i have setup, typing *ajax* + hitting tab in javascript gives me $.ajax({ type: "POST", url: "/URL.php", data: { }, dataType: 'json', success: function (response) { } }); *btable* + tab in HTML &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; saves so much time typing &amp; looking up correct formatting/syntax for things
Reasons that I like PHPStorm - I tried Netbeans and eclipse for about 2years, they never seemed as responsive as phpStorm - Rocket fast and genuinely useful code completion. - Its very good for nodejs development too. - XDEBUG remote debugging. This has saved me hours! I was so impressed that I wrote a guide on how to set it up: http://www.irving-swift.com/2014/01/setting-up-xdebugs-remote-debug-with-phpstorm/ - Its the first IDE where I am happy with the code generation... especially for setters and getters. - Quick and nice linting (PHPMD/PHPCS/jsLint/jsHint are all supported out of the box) - Automatic FTP/SFTP uploading (I don't use if very often, but if i'm on a project that the files are uploaded in such a fashion, I don't need to bother with an FTP client) - The Shortcuts are fantastic. - Git integration is good - Vagrant support (even though it is quite a lazy shortcut for doing vagrant up/vagrant halt)! - Annotation helper plugin - If you use a framework that is supported, i.e. yii, symfony2, drupal or wordpress, it is very good at understanding how the framework works! - Even though I prefer to use mysql workbench and postman, the fact I can browse my db and test my restful calls within my IDE is very useful. In all honesty, I don't understand why you would want to use another IDE these days other than the price tag. I understand that some people don't like to use an IDE, for those people, sublime/atom/vim are all very good too. Notepad++ is dead to me! :-P
Here's a good list: http://www.sitepoint.com/phpstorm-top-productivity-hacks-shortcuts/
"the problem" might be that it's not PHP Storm :) (or eclipse, or whatever I may already have 5 years of productivity with). The time lost in developer productivity by using tools that slow them down, or maybe worse, having to play support fairy for other team members can quickly add up to far more than just letting people use what they're comfortable with. I've been on teams where we all used the same tools (not IDEs, but other tools) and there was *some* benefit to it, but by my reckoning it was still a net drain on group productivity.
This was a crosspost from /r/wordpress, so I can't hold it against you that you didn't bother to read the associated replies which included further information regarding this. "Performance increases" refers to PHP processing time, TTFB, site load time. You say "two opcode cahes enabled is weird" and that you "don't actually see how it could work." Congratulations on a very condescending way to address that, rather than sharing your implied advanced knowledge on the subject. "Are you provisioning your server by hand?" - No, I'm using a VPS powered by cPanel, running Wordpress (as indicated via the title of this post). "Are your automating with Ansible, Chef or another conf management tool?" - I don't know what any of those are. Apologies, but you're clearly dealing with someone not as au fait with the technologies of which you speak. Perhaps for the benefit of others you might consider enlightening us? Cheers Cam
As opposed to what? Having a separate php file for every URL like back in 1999?
That's an excellent point, about the seamless transition/integration. I'm actually leveraging that in something I wrote about 5 minutes ago :D. Another thing to point out, is that if you really have a query that is so unruly that you don't want to use the ORM at all, you can always degrade to the underlying PDO object in Eloquent (which is publicly accessible). Have your cake and eat it too. Mmm. Cake.
There's a lot of reasons to send everything through one file. With any framework, you're going to have some bootstrapping to do. Why re-do that in a bunch of different files? That also increases the risk of forgetting to propagate changes to other bootstrap files. It could be argued that you could do a common bootstrapping file that's included by all the entry points. But at that point, how is that really different from one entry point? Let your router do your routing, not a bunch of different entry points. There's a reason that EVERY popular framework sticks to the single entry-point model.
Are you looking for a flat file implementation? Have you considered using SFTP or git to accomplish this task?
"Our team is moving away from CodeIgniter due to its stagnation and declining community." For the record, CI3 is nearly finished. There are a couple outstanding changes (`feature/session` needs to be merged, the password generator library hasn't been accepted yet).
lol wut? How about, a single session instantiation. How about a single database connection. Or cache. Or IoC container. Or really, anything that you only need one of, without needing to actually use the singleton (anti)pattern to do it. It was like the dark ages before front controller.
One benefit of having everyone use the same editor/IDE is that it makes pair programming much easier. Not saying that that justifies it, but if pair programming is very common at the company, this would make a big difference.
PHP Storm cannot open more than one project per window. This alone has kept me from being able to make the switch from NetBeans, but it looks really nice! =)
Had a quick check and was wondering why have you decided not to have a separate webroot but rather do the whole project web accessible?
I use live templates a lot! they're very handy especially for super repetitive things like UI elements. They're extremely powerful with the ability to define template variables.
&gt; Control + w -&gt; every expanding selection. I went step further and made a macro that creates this automatic selection and copies/cuts/pastes content. All i have to do is move caret anywhere and it automagically copies/cuts/pastes things. As per original functionality - ctrl+w is a default shortcut for closing active windows so I rebound it first time I found it, but I rediscovered its functionality later and really liked it.
And some small thing I wanted to add: If you configured your DB Connection then it automatically recognizes SQL queries and offers autocompletion. Really sweet as you don't have to remember the column names. We had a fan of sublime and enemy of IDEs in general in our office and he switched to PhpStorm after some time, i guess that speaks for itself. :-)
Because still not everybody (read: "people on cheap-ass shared hosting") is able to put files outside of the webroot. If this is important to you, please see here: https://docs.bolt.cm/installation-advanced#keeping-code-out-web-root
&gt; You say "two opcode cahes enabled is weird" and that you "don't actually see how it could work." Congratulations on a very condescending way to address that, rather than sharing your implied advanced knowledge on the subject. Essentially, "opcache" and "xcache" perform the same kind of caching, so the performance gain from having both enabled is probably minimal or possibly even detrimental (I don't have enough experience with either to say). &gt; "Are your automating with Ansible, Chef or another conf management tool?" - I don't know what any of those are. They're tools for automating the process of building and deploying server configurations. So for example, you might use Ansible to create a kind of server template with specific technologies installed and configured (PHP, memcache, etc). FYI, I understand that /u/gou1's reply wasn't terribly helpful but responding with escalating condescension isn't likely to help ;) 
I was just implementing a few of these this afternoon, it's great for inline code. Also take a look at File Templates. I made one for a Silex boilerplate controller: &lt;?php namespace ${NAMESPACE}\Controller; use Silex\Application; use Silex\ControllerProviderInterface; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpKernel\HttpKernelInterface; class ${CLASS_NAME} implements ControllerProviderInterface { public function connect(Application ${DS}app) { // creates a new controller based on the default route ${DS}controllers = ${DS}app['controllers_factory']; ${DS}controllers-&gt;get('/', function (Request ${DS}request) use (${DS}app) { })-&gt;method('GET|POST'); return ${DS}controllers; } } And a slight improvement on your AJAX one to make it parameterized: $.ajax({ type: "$METHOD$", url: "$URL$", data: { }, dataType: 'json', success: function (response) { } });
You can do this in any text editor/app with something like TextExpander.
If you update the ImportWXR extension to the latest version __and__ apply the patch linked below, it'll most likely go smoother: https://github.com/bolt/bolt/pull/2336/files 
1. The need to create a new PHP file for for each URL 2. Storing important routing parameters in the query string and less readable URLs 3. Duplicating code needed to bootstrap the application Pretty significant issues, in my opinion.
Thanks for your reply, and I take your point about escalating condescension :) Well made. I'm on 5.6 now so opcache and xcache together isn't even available to me. My server response time seems the lowest it has been (according to Pingdom), but I'll re test again. Thanks too for the insight on Ansible and Chef - depending on the config I'm using, imy PHP either been SSH managed, (obviously that wasn't a Wordpress application); for my blog and other websites, it's cPanel / Pear interface all the way. I'd love to dig in to the hardcore technical but I started my blog to build my writing portfolio, to write, and to self promote. I wish I had the time to pull the thing to bits. I was a BBS SysOp back in the day. I miss Maximus and Fidonet. Thanks again Cam
We did. We migrated the vast majority of historical seconds-resolution stock data analysis to NodeJS, as its syntax is *very* similar to PHP's in certain respects, but the performance increase was phenomenal. What I was trying to say is that now that we moved to HHVM, if PHP takes 45s, NodeJS 1.5s, and C++ 0.5s, HHVM is taking around 3.3s, which is good enough that we don't have to port code out of PHP anymore, which is REALLY awesome!
Assisted import of namespaces, and assisted initialization of constructors / properties. This just reinforces good habits, and eliminates the excuse not to do PSR 4 namespacing (if there is one)
Just replicate what Jeffrey Way talks about in his "Be Awesome In PHPStorm" Series on Laracasts and they'll surely be convinced to move on from Netbeans and Dreamweaver for PHP development. https://laracasts.com/series/how-to-be-awesome-in-phpstorm
Yeah. This is low traffic/ low maint. Owncloud was another i looked at. It's overkill. 
Added
ah sweet. couldn't find that bit of info in docs for some reason.
You don't need a framework to help you with: * Forms * User input filtering * Whatever these unnamed helper functions are you don't need them either * Database queries (since they are complex you do them yourself) So you need a framework that does: * Routing * Session management (maybe) * MVC (though I don't personally believe this, it does seem to be a common thing) Are you *sure* you need a framework? That list looks awfully thin to tie yourself to a framework. 
I use Netbeans about 50% of the time because of some significant issues that I have with PHPStorm: (1) Poor linux support. Works great on OSX, but on Ubuntu you have to manually create your own icon for unity. I've had to shut down phpstorm on ubuntu using kill way too many times, have had it refuse to start up if another instance of phpstorm is already running, and have had it loose my install a couple of times as well. I have given up at this point of using PHPStorm on ubuntu. (2) Inability to open more than one project in the same window. Seriously? Why is the UI set up like this? Do they not think that we might have multiple projects that interact with one another that we would like to be able to open and view at the same time without having to have two separate windows? This also does away with NetBeans side-by-side diffing between projects which I find myself using quite frequently. (3) Tab/Window management. On Netbeans, I can grab a tag and drag it out into it's own window, or tile it in the editor by just dragging the tab to the edge of the window. This makes opening up a lot of windows and quickly tiling them a lot better. PHPStorm does support creating split windows, but the UI requires selecting the split from a menu not by just drag-and-drop. (4) I prefer NetBeans code hints which pops up my entire doc block versus PHPStorm only displays the method signature. Granted, I wouldn't be surprised if there isn't a way to change this somewhere in the settings and I have just not found it.
&gt; We just rolled out our new website and I'm looking for something that would take little time to implement and be very simple on everyone from me to the end users. Just set up a dropbox acct.
I know 3 valid user cases, imo, where you would want to re-write the URL and they have nothing to do about structuring your code correctly, using centralized libraries or code duplication. Everything that was said so far can be done without having the whole traffic of your site go through a single file (index.php). Did you guys even listen to the video?
Thank you for clearing that up. I will give it a try!
Have you thought about using google docs API for document storage? Someone built a simple CMS out of it you might be able to use for reference: http://www.joshcanhelp.com/google-docs-cms/
Preach it. EDIT: I've done these kinds of benchmarks before and was always met with two common reactions. People whose favored projects do well respond with "SCIENCE PROVES WE ARE BEST" and people whose favored projects do poorly respond with "THIS IS MEANINGLESS AND PROVES NOTHING." As /u/crabpot8 points out, it's more about knowing what the outer limits of your performance are so you can judge accordingly where to put your efforts.
[r/learnphp](http://www.reddit.com/r/learnphp/)
This is brilliant. THANK YOU (works in their other IDEs as well, at least pycharm)
The documentation of [`Hoa\Compiler`](https://github.com/hoaproject/Compiler) contains a lot of information about lexer, parser and interpreter also: http://hoa-project.net/Literature/Hack/Compiler.html.
The only way you end up NOT choosing a framework is if you decide to violate the DRY (Don't repeat yourself) principle. Choosing no framework means either choosing to write bad code or choosing to write your own framework. Everyone needs a framework for any project of non-trivial size.
I have tried all major php IDEs and the phpStorm search function is the best. Especially when working with large frameworks or someone elses code, search all is really useful, Control-shift-f to search an entire directory. Search is also a lot faster on phpStorm, I think it caches results, not sure though.
&gt; yii, symfony2, drupal or wordpress But not Laravel??
I've renamed the library to "Stratum". I hope people will start looking if this library can solve problems even though it is not a pure implementation of a specific pattern.
While it's not a series of tutorials and a lot of it might go over your head at first, [PHP The Right Way](http://phptherightway.com) is a good overview of PHP's best practices. This is *especially* important because there are tons of old tutorials online that will teach you outdated or insecure ways of doing certain things. Aside from that, /r/phphelp is a good place to get assistance, as well as the "#php" IRC channel. The best thing you can do to learn is put together a real, working project. Learn by doing!
on that note, have you seen c9.io?
and on that note. I just can't pull myself away from Sublime Editor. IDEs and especially web based editors just aren't fast enough. I just feel they're still not as fast as I am. They make suggestions and code completions but they're just not there in time. Even on a MBP
How can you assure the lib works? There seems to be no tests available
Haven't jumped on this train (noDB) since the tail end of the 90's, so take what I'm about to say with a huge grain of salt: But I would probably just store a series of JSON structs to an array and save that to a file. function getDatabase() { $db = file_get_contents('mystuff.db'); if(!$db) throw new Exception('Database not found'); else $docs = json_decode($db); if(!count($docs)) throw new Exception('No data in Database'); return $docs; } try { $db = getDatabase(); } catch(Exception $e) { die($e-&gt;message); } probably the worst approach ever though, you'd need to come up with your own search and find functions, index the data manually, that kind of thing But ya, there are far better approaches than this; just spilling my mind here on if you were looking for a non-external solution
&gt; I recently had to buy my own SSD (my company wouldn't pay for one) Uhh ...
I really didn't meant to be condescending (on the contrary, hence the open question on opcaches - I was wondering whether I missed something that I didn't knew). I guess i can see how it could be taken like this. Sorry about that. So, let's start again shall we? :) As is, your questions is too broad to give you a useful answer. You need to better define your goal first. What are you trying to optimize and why? Do you want to reduce server costs, or improve user experience, or ... ? If you want to improve user experience by reducing page render time, you might to start looking outside of php first, the bigger picture. A good starting place for this is https://developers.google.com/speed/pagespeed/ with both analysis and optimization tools. Solutions like caching at the http level, resource minifying and so on can give you really good results. If you want to improve server load and stuff, you need to be more precise about your system: measurement/monitoring tools, a precise config, and so on. It's really a broad subject, but the general idea would be: have good monitoring tools (eg. Munin), change one thing at a time (eg. 5.5 vs 5.6 without cache, 5.6 with opcache vs 5.6 without, etc.), and take notes. Don't forget to think about cost saving vs time spent to avoid spending too much time in micro optimizations. 
the difference is your PHP application is doing all the work instead of leveraging the capabilities of other software used in your stack, like your webserver
I just read the PHP documentation. LOL
Laravel is amazing. Use Laravel. Nothing else. Laravel is love, Laravel is life.
Laravel es amor, Laravel es la vida. &lt;3
The argument can be made the other way round too. If one dev sees his neighbour use cool feature x it might trigger him too have a new look at the features of his IDE or Google a bit.
* CTRL + SHIFT + ALT + N - Go To symbol, I use this N times every day, after a while you dont even think about it just use it. * CTRL + N - Go To Class. * CTRL + hover/click - Info on Class/method. * CTRL + Space - auto complete suggestions. * CTRL + Shift + A - Go To command. I cant imagine my workflow without this stuff. make it your daily thing so you don't even think about it when you use it and you will improve your workflow immensely. 
I am one of the developers of FluxBB. We are using Laravel 5 for FluxBB 2.0. You can find the install instructions for the alpha here: http://fluxbb.org/forums/viewtopic.php?id=8033
The only thing I can think of is that MySQL doesn't scale. MongoDB is web scale. I'm sorry. Internet did this to me.
Which why I submitted this [post](http://www.reddit.com/r/PHP/comments/2n7hmr/mvc5_a_new_programming_environment/). Either start from scratch, or change it so that it runs the existing CI project. Trying to get the existing CI project to run within the new context would be an interesting challenge and can save you from a complete rewrite. The first hurdle in taking the execution of the CI project out of the global scope will be to remove or fix the global variable dependencies (if any). You've already identified the other component/dependencies that you need, and you now just want to have explicit control of them. 
Great, prepare for the monthly "my ide is better than your ide" flame war.
Consider running this through [Scrutinizer CI](https://scrutinizer-ci.com) - it's free for F/OSS projects. I'd love to see what the complexity analyser makes of `NymphDriverPostgreSQL::getEntities()`! 
I don't really get what you are trying to say at 3? Grab a tab and move it outside screen to create additional window?
Yeah, they actually both use the same core editor (ACE), which is now maintained by Cloud 9. I looked at just using Cloud 9, but I wanted something that I could run locally on my own server so that files save instantly and I can edit it and customize it. Neutron IDE offered that (see the "hosted version of Neutron Drive" link on their home page). I think their hosted version is no longer updated, but it's easy to update the ACE editor it uses to the newest version and the rest of it is all my own customized thing at this point anyway. 
pretty sweet! I'm going to check this out. thanks!
I also bought my own monitors too
Absolutely. Nobody here wants to rewrite the tried and true. We're happy to accept some bloat (unused framework functions) in exchange for time saved.
The webserver should not be performing application logic, and routing falls well into that category. It should know my application has a single entry point, send requests to it, and pass responses back from the application. Having a webserver perform routing is a bit like having the highway system tell me what floor I work on.
actually your webserver is already doing routing, it is routing every request to a single entry point I fully get what you say, I guess we have a very different view of HTTP, the web, file hierarchy and a lot of other stuff I read somewhere "this is so 1999", well at work we still do things like they did back in the 80s, and it works, fast
I hate it when applications tell me they're beautiful!
http://i.lvme.me/cz1xdkx.jpg
Nah, this is a PHPStorm thread. Everyone knows PHPStorm is awesome, some people just like the quirks of other IDEs more.
1. Install Git or Svn 2. Get Modernizing Legacy Applications In PHP by Paul Jones - https://leanpub.com/mlaphp
how big is the difference? if it's minimal, I'd use 5.6 for longer support. Majority of performance bottlenecks on a web page are on the front end. If you're WP is not personalized or requires authentication, put it behind Varnish to make it super fast.
If you want to see how to setup WordPress w/Ansible, check out the free article in php[architect] http://www.phparch.com/magazine/2014-2/september/ Disclouse - I'm the Editor-in-Chief
Using an IDE like phpstorm should be your first step, it will help you to navigate the code has its own code inspection tool.
https://www.codacy.com is very cool for running those kinds of checks upon commit and grading code from A to F. Started using it recently. 
&gt; I'm surprised that a third party needs to be involved to get it working on a common platform for development. Sadly true, I'm using an unofficial package for Arch as well. Jetbrains should really handle the most popular 2-3 distros themselves. &gt; Still doesn't let me tile inside a window without having to go through a menu Yeah, I want this as well. Do let me know if you ever figure it out. I have my own little, but numerous issues with PhpStorm. Yet even with all its issues, compared to any other IDE, I just find it miles ahead.
I'm myself a newbie, so probably don't take what I did as advice, but here it is anyway. Does the code still work in any way? My situation was that I could use a broken site in some ways, play with the code and see what it does. I mapped every single thing I could find that the site does and just completely re-wrote the whole thing on a framework. I'm sure that was not the best approach, probably, but I was pretty desperate, because of inexperience.
The site is 100% working and functional. It is also mission critical and **cannot** go down or hundreds of people can't do their jobs.
I've been using ST3 with some plugins. Is there any reason I should switch to PHPStorm?
I'd be sorely tempted to leave it alone. Continue trying to learn how it works by using a good debugger, so that if a bug is found (or God forbid, there's a new requirement) you'll have a good chance of fixing it. At least don't feel like you have to go in there and rewrite it "correctly." Doing so and introducing *any* bug would be a Really Bad Thing To Do.
Admittedly, it is very complex code, but it's also doing a very complex thing. I'll try to break up the code into smaller chunks so it's easier to understand.
Tons of fantastic advice I'm looking for in here. I'm going to do ALL of these. Thank you for listing tools to get things done, like speccing out the application. Any other tools or methodologies you would recommend? I also REALLY want to get composer implemented. There are libraries scattered throughout the application and it is quite frustrating to figure out where they all are.
What amazes me is its apparently been around since 2012 - there's a copyright notice at the bottom of the page. It must have just never gotten traction. I found it via google search ... something like "search just my gists" 
I am definitely going to look at all of those tools. I had no idea stuff like that exists! Thank you!
This looks good. Thank you!
&gt; Eventually, you'll also want to create a Front Controller to handle all requests and move the code from 300 files slowly into individual controllers. FWIW, that is exactly the end-state of the MLAPHP process, although a front-controller is closer to the end of the process than the beginning. We end up with controller classes a little sooner than that. (And thanks for the book plug! :-)
Set up version control. As you document the code, commit and keep testing. Once everything is committed, start refactoring, doing small chunks and committing often. A good procedure to help you grok the code is to run a profiler and a debugger on the website as it's running, to see the natural flow of the program. 
That second paragraph went completely over my head. Can you give me an example of tools you would use to accomplish this?
Looks like you have the word style double quotes around 'Success' and 'failed'. Add this to the top of your file to help with debugging: &lt;?php ini_set('display_errors', 1); error_reporting(E_ALL); // the rest of your code. This will help with debugging but make sure you remove those lines in production.
Spot on. 
I've been using it for about that long... I didn't realize I was the only one! Glad you like it!
&gt; But as things go I made a decision to write a rather complex set of jQuery Mobile tutorials that required server side communication. ... &gt; Unfortunately, its connection to Symphony is also the main reason why I’m not using it. Frameworks build for the masses are usually optimized to run all around well thus sacrificing speed element. Let's not use Silex because it's slow! (or at least frameworks like this are *usually* slow, whatever that means) Especially since we want to use it for jQuery Mobile tutorials right… And why is it slow? Because it's built for the masses! Yeah… It makes total sense. Also the part where Phalcon is a micro framework.
I implemented a similar thing some time ago: https://github.com/camspiers/statistical-classifier
As most other comments mentioned, set up xdebug and a proper IDE. It'll help you immensely. 
I've been pronouncing it with a hard G sound (like Gilbert). It just made sense since it was part of GitHub, so I've been pronouncing Gist the same as I pronounce Git. I kind of feel silly, now. But I don't think I'll be able to change it.
This is more or less what I was going to say. If you get set up in Vagrant you can do things like install [Xdebug](http://xdebug.org/), which helped me a lot when I was dealing with some really bad spaghetti code a few months ago. One stupid trick I ended up using was that if I was trying to figure out how the code got to a certain point, just deliberately throw an exception there and check out the Xdebug backtrace. You can also use PHP's `debug_backtrace()` to DIY this if you're less lazy than me. This will also tell you which files included what other files up to that point, since `require()` is just another function in PHP.
Knowing the IT world, the logical upgrade from a bicycle is either a tricycle or a tandem bike.
Anywhere from $60k to $200k.
You should have learned PHP thoroughly before attempting to use a framework. As is, right now you're most likely a Laravel Developer, not a PHP Developer.
I was thinking of data as cargo, and like bicycle messenger -&gt; courier service -&gt; long haul trucker -&gt; fedex cargo jet. But I get your point
I feel like I know PHP decently until I try to read the change logs. 
My point was just a joke. "Upgrades" normally doesn't fit the original use and end up more as a burden than an improvement. Like a MySQL -&gt; MongoDB "upgrade".
[stackoverflow.com](http://stackoverflow.com) is your friend
PDO! Just kidding, you are right.
You might first want to extract the repeated logic out into it's own method and place it on the appropriate controller in your application's hierarchy. protected function verifyOwnership($model, $user = null) { $user = $user ?: Auth::user(); if ($user-&gt;id != $model-&gt;user_id) { throw new Exception('Current user does not own this model.'); } } You can then simply use one line in your controller actions to verify ownership. $article = Article::find($id); $this-&gt;verifyOwnership($article); To extract this even further, you might take a look at before filters so that you can simply register the functionality once. This isn't something I've seen much of in Laravel but is common in Rails. protected $article; public function __construct() { $this-&gt;beforeFilter(function() { $this-&gt;article = Article::find(Input::get('id')); $this-&gt;verifyOwnership($this-&gt;article); }, ['only' =&gt; ['show', 'edit', 'update', destroy']); } Be careful with this in Laravel though, as dependency injection of Eloquent models is quite common, and having a protected property called $article might give other developers the wrong idea.
Never stop learning. Not today, not next week, not 20 years from now. Always look to push your understanding higher, and never settle. Learn to recognize when you don't understand something. It's the first step towards understanding it. Use people who are smarter than you are to your advantage. No person is an island. No person knows everything. Stand on the backs of giants. Never blindly follow any "rule" in programming. Always strive to understand its significance and how it may apply to your work. Love what you do. If you don't love it, it's not worth it and you need to work towards what you can love.
That reminds me, forgot to subscribe to /r/lolphp on this account.
MWC usually draws a premium - whatever you were thinking of paying, triple it.
We use this internally at my work...it's a pretty nice way to organize everything. 
I use to use PHPStorm at home on Ubuntu however on a mac at work.... PHPStorm was the main reason I now have a mac at home! Your point number 3, isn't that one of the new features in PHPStorm8 ?
Apologies mate, I over reacted a little to your post. I've found lately, more often than not, I get arrogant replies to technical posts and questions - particularly when they have to do with Wordpress. I guess it was a bit of a knee jerk reaction :) To be honest the difference in response time (time to first byte) variation per different php config, while not negligible, certainly wasn't huge either. 300ms to 500ms. With the odd exception. OPcache caused a fair bit of havoc on PHP 5.4 and slowed down my site's response time quite considerably. When I get time I'll do some proper benchmarking with no caching or CDN attached and I'll report back. Thanks for your info, it's very insightful. Cheers Cam
Well there is 1 leap day per 4 years roughly, I think it's actually something around .24219907407 days longer per year, but taking that into account (.242 days per year*2014 years = 487 days) it subtracts something like a year and 122 extra days, which means the time should be around August 30th, so I dunno.
We can debate Silex speed all day long, If you carefully read my article I never said Silex is slow (on the contrary, I said: One of the fastest micro RESTful PHP frameworks). I just don't like its connection to Symphony. It's my subjective judgement, you can always give a counter comment, just don't put words in my mouth. Regarding Phalcon, if you ever read it's official documentation, one of its purposes is for micro applications, so nothing wrong there.
Well thats helpful.... ;-) 
is phpstorm free?
You really didn't provide very many details.
Point taken. :-) What details would be helpful in addition to OO and MVC? I've known programmers with very different experience who had almost opposite of expected skill sets... 
It's not, but it's worth the money!
Not for commercial use.
Great! &gt; The attachments were imported, but no relations between posts / entries and the attachments were made. The importer is pretty dumb in that regard. The attachments are defined as an entity in the .wxr, so they're just imported as-is. &gt; Bolt doesn't come with commenting out of the box. That is correct. Disqus, livefyre or plain facebook comments are usually preferred. No issues with security, spam and they work pretty well. If your .wxr comes with comments, you can import these in Disqus. &gt; There's no tags and categories. That's just a matter of specifying them in the config? Yes. :-)
&gt; finding where functions can be found I use grep all the time for this. cd into the project's root directory and grep -rno 'function somefunctionname' ./* Should show you every file and the line number where that text is found, and it will recurse through all of the directories. grep is great for finding all sorts of things. Not sure where the alert text is hidden away in some project you just inherited? grep it. What files calls this method, that function, or some variable? grep it.
Keep in mind a lot of the change logs are about the C/C++ backend part of php.
Sadly it didn't mentioned about aura. If anyone like to checkout quick start http://auraphp.com/manuals/2.0/en/quick-start/ . It is really a micro framework! .
Hi, Bolt looks interesting. A few notes: * There is no link to the extension library on the homepage. I only found it from your posts in this discussion. * Similarly to the extension library, is there a theme library somewhere? * The extension library could have nicer URLs so that you can immediately see what's under which link. GUIDs do not make good URL parameters (see Google+ for the best-known botched URL system). * The extension library pages should have unique page titles so that you can see what's on the page just from the title (eg. in browser tabs) Good luck.
You are correct, this is my mistake, this sentence is purely formulated. I will coorrect it.
could go a lot further than just Laravel template support though!
Use ack, not grep, for finding things in source quickly. It gives syntax highlighting in the console and is specifically for source code searching.
Give `ack` or `ag` a try! 
I think thats how developers should move forward, keeping an open mind to all programs and when they see a feature go check it out. It shouldn't be forced decision to move to PHP Storm, but assuming it is the better product the other developers would hopefully see this and decide to give it a try. 
I'm not saying any IDE is better than another *cough* all I'm doing is presenting PHP Storm to some colleagues with the suggestion it suits our workflow better
You did all that math and ended with I dunno.
Johannes really is a PHP magician sometimes!
Pfff. Of course! Fixed. Thx. :)
So hard to know if you're just trolling typos or if MWC is the name of the *new best thing*™ 
Or do like reasonable developers should, use an IDE with all of these features built in, My recommendation is PHPStorm(Paid) or Netbeans(free).
"Doing it right" is to keep things working without down time. You need to understand the existing codebase before you even attempt to improve things. Sure it may be awful to work with and take even longer to do things, but if you can't afford downtime it's something you've got to live with. One thing you have to do right now, is tell your manager or employee exactly what you think and explain some of the pit falls you have with it in its current state. 
Note that this release fixes an *actual* security vulnerability in the `unserialize()` function. Unlike most of the other stuff that we classify as security issues, this one can be remotely exploited if you're passing user-provided data to `unserialize()`. Where "exploited" here likely means full RCE. So remember that you should never pass user-provided data to `unserialize()`. Not just because the function itself can be vulnerable, but also because of a number of additional attack vectors wrt objects.
I think job titles suck. Being a lead or senior developer only fuels the holder's ego and discourages other members of the team from suggesting ideas. At my job some of our best ideas - like moving from SVN to git and using Laravel - were instigated by "juniors".
Security advice from an indian firm? A vague article to say the least.
You can use the EAP version for free though, just involves lots of updating. https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program
The company where I work, prefers to not listen to suggestions... The where going to start using Zend 1 as main framework, when Zend 2 just came out, they told me that some modules where not mature enough (Cryptography, and another thing that I don't remember), I told them that the probability to use those modules in a project where very low, and even if they needed to use it, you could tell the team to be careful with module x, because it's probable that it will be upgraded in the inmediate future). They choose Zend 1, one year later, we need to migrate more or less 10+ internal applications to Zend 2 and adapt all the modules built for Zend 1. PS: The app i've developped is still under PHP 5.2 ;(
Ed master race checking in
Labels do provide some merit though. If there are 5+ devs in a team its very important to establish some hierarchy. Especially when a lead devs has a few stubborn juniors that use "I've always done things like this", "standards suck" and "works on my machine"
The most important step is not using WordPress.
Thank you for your feedback. I m using Simplepie to run internal tests. I should remove it and install it locally. Do you mean that i should move the whole storing process into another class? 
This is just a stream of thought with some vague reference to security?
If you work on OSS it is, well its free for that project to use.
I would separate the responsibilities. Let this library only care about the classification and nothing else. Then build a larger framework around it that can save the documents and/or results and even test it on some RSS feeds.
You really need to change your code highlighting plugin. The word "class" is not highlighted and it just look weird.
My title and the title of everyone I work with is "developer." Even though I am a senior level developer, I don't get fancy titles. I will now /ragequit 
Yeah, looking at my gistbox my first gist was saved in August of last year. I think I found out about it through a blog like speckyboy or something though. It's such a great tool, and fits right in with moving as many of my tools online as possible.
&gt; MWC structures My question exactly. What's an MWC when it's at home?
Dude, I think there is a contradiction between "experienced [...] PHP dev" and "should be able to handle frameworks, OO dev, and MWC structures". And you're still probably going to earn six-digits :D. Have to move for a while from my place on the planet. 
making sure you've got a good deployment/rollback procedure is important, doubly so if it's mission critical stuff that is hard to follow. So getting your code in source control is a must!
Ha ha, well that's all the math I can think of. 
Ownership checks of this type belong more properly in the Model (in "MVC") or Domain (in [ADR](http://pmjones.github.io/adr)) layer. Your Controller (or Action) should invoke an application service from the domain layer, and *it* does the ownership checks. The action might be responsible for injecting the current-user data needed for the comparison, or the application service might be constructed with it via dependency injection in the first place.
Aye - but don't take this as a personal slight on your skills. Sometimes the best way to learn something is to make things in it and sometimes the best way to do that is to use a framework. So that's cool. But make sure you understand the inner-workings of how and why Laravel does what it does and, on the side, make sure you understand what's Laravel and what's not.
This is the reason I feel silly.
Bro, Manmeet is a SENIOR SOFTWARE ENGINEER. His advice includes use good passwords, an htaccess and security plugins. 
Thank you for the feedback &gt; There is no link to the extension library on the homepage. I only found it from your posts in this discussion. Right, we should add this! &gt; Similarly to the extension library, is there a theme library somewhere? Themes are currently on the extensions site as well. We need to make the distinction better. &gt; The extension library could have nicer URLs so that you can immediately see what's under which link. GUIDs do not make good URL parameters (see Google+ for the best-known botched URL system). &gt; The extension library pages should have unique page titles so that you can see what's on the page just from the title (eg. in browser tabs) Heh. Yes, we should improve both of these. 
That's obviously the best approach. But you cant do that every day. In the end you have work to do, and if you spend 2 hours a day trying to convince people you are right you'll fall behind work yourself. From my own experience conducting a 40 minute lesson like that to a stubborn audience is enough to drain my energy for the rest of the day
Don't establish hierarchy, establish roles. Obviously some hierarchy will emerge from said roles out of necessity, but I prefer "Person A's role is determining and enforcing a consistent standard" to "Person A is more experienced than you and you have to do what he says".
I really like how it looks. And, it seems to work well too! 
Except being the lead developer implies something else: that person is held responsible for some things related to the running of the team by management. This is not true of all the team members.
Much better, yes =)
I've been doing a lot of interviewing for developers lately - a lot. And I have to agree with the premise of this article. Here are some examples from people who's resume contained a "Senior Developer" title of some sort as the last position held: * a candidate who did not know the difference between protected and private * a candidate who did not know what EXPLAIN did in mySQL * a candidate who could not describe a proper many-to-many schema * a candidate who when asked to describe the factory pattern, described a singleton Real life folks. I couldn't make this up if i tried.
There is some great advice in this post already, so I'll just throw out the idea that you may want to tell your boss(s) that it may be time to rebuild the app. If it's as bad as what you are describing, then adding new features is just throwing good money after bad. Also, trying to maintain this thing is going to cost more in the long run than redoing it correctly. Any house built on a bad foundation will eventually collapse, no matter how much duck tape you use. Just my two cents.
Completely OT but I've seen this pattern so many times.. try { // code here } catch (Exception $e) { throw $e; } Why would anyone make such thing? It would not have any effect -- other than make your code slow
https://github.com/camspiers/statistical-classifier has support for svm.
Have a look at https://github.com/camspiers/statistical-classifier maybe you could contribute instead of making something new.
Alone that makes no sense, though OP might have omitted code. 
I'm sure he is talking about MVVC 
Your input has been acknowledged. 
Triple it? Don't be absurd.
As /u/pmjones said do it on the model. &gt; First, if I use Auth::id() in domain model then I'm using session in model, which is pretty shitty, difficult to debug and not testable in my opinion. Can't agree more here. Don't use Auth in your model, pass in the either the User object or the user's id. I like to pass in the object, but i like objects. &gt; And if I forget to do this valation on any one of the actions, there's a security defect. One interesting solution you could try is to use Eloquent's event bindings. &lt;?php /** * @link http://laravel.com/docs/4.2/eloquent#model-observers */ class PostObserver { /** @var \Illuminate\Auth\AuthManager */ protected $auth; public function __construct(\Illuminate\Auth\AuthManager $auth) { $this-&gt;auth = $auth; } public function creating(Post $post) { $user = $this-&gt;auth-&gt;user(); if (!$user-&gt;canCreatePosts()) { throw new UnauthorizedPostCreationException($user); } } public function updating(Post $post) { $user = $this-&gt;auth-&gt;user(); if (!$post-&gt;canBeEditedBy($user)) { throw new UnauthorizedPostCreationException($user); } } } 
~~This is great but isn't the image chart api being shut down as of April 2015? Source: https://developers.google.com/chart/terms~~ ~~Can this library build image charts without that API (or through another means that I'm not aware of)?~~ Edit: I thought the examples were image charts being created, but I realize that now they're just screenshots of the JS charts being made. 
&gt; That's just a matter of specifying them in the config? I thought it was, but today I also had trouble with it. I was sure i implemented that. Oh, well.. I'll get to that over the weekend. 
Don't use a DI container in your library. A project is generally where you see a DI container being used, which developers then wire their dependencies together with. Instead, use a factory for constructing your objects, and then let developers use the factory in their own DI container of choice.
I'm not sure I follow. 
Thank you for your dedication at replying to everything. For the sitemap, I believe a sensible approach is to have a service in the extension to submit sitemaps and have other extensions to register themselves as submitters. Google could be a built-in provider that would also serve as an example. For multilingual content, of course it is hard, but that is the whole point of using a CMS/Framework. Writing a articles/tags/comments system is easy if you take out the hard parts ;) For the permalinks, I also replied to SO. As for the roadmap I mentioned, it would also serve as a warning to newcomers. “Those features are not yet available, if it is a deal breaker, Bolt is not for you… yet.” I will continue to try and implement Bolt for my blog and will report back.
I would properly remove the "add" so its just stringColumn() / numberColumn() / dateColumn() Those are just shortcuts to addStringColumn() etc
&gt; As for the roadmap I mentioned, it would also serve as a warning to newcomers. “Those features are not yet available, if it is a deal breaker, Bolt is not for you… yet.” Since bolt 2 was a pretty big refactor, we're now just collecting thoughts and ideas on how to go forward. There will surely be a roadmap, and smaller, incremental updates. &gt; I will continue to try and implement Bolt for my blog and will report back. Please do. :-)
Though again, I would properly just use -&gt;column('Date', 'date') -&gt;column('Temp', 'number') -&gt;column('string') and then skip the shortcuts for those
I almost always prefer the non-abbreviated method name in cases like this. The tiny decrease in cognitive load adds up over time.
Keep this in mind: If you take all the best practises posted on this subreddit and reverse them completely it will probably be close to what you'll find out there in the industry. As it turns out it's possible to make a lot of money quite quickly by hacking together wordpress plugins with shitty themes. Most professional developers don't just not know what a DI container is but don't care and would be both professionally and personally offended if you were to have the audacity to suggest that they so much as exist as a concept. Sufficed to say don't show up and tell people how to do their jobs even if they don't appear to be doing them very well. The fact that the business can afford to hire you means they're doing something right and your ultimate purpose is to support the goals of the business. There is no point in writing great code if nobody will pay you to do it. To succeed in PHP development you have to hold two ideas in your mind at the same time: 1. Everything is awful. 2. It might not matter.
This is also spot on. If you become the guy who read Clean Code and was raised on Jeffrey Way’s screencasts and complains about every stupid thing you see in a companies codebase, no-one is going to like you. Complex business software, especially on the web, is never gotten right the first time. Technical debt is going to be there and grow at any company you work for. The best thing you can do is embrace the bad code, and instead of complaining about it, offer structured, minimal, and continuous code refactors as you are doing work (but never so much that it stops you from finishing sprints on time). It’s a rare skill to have and a difficult one to develop, but this will be actually impressive in the eyes of your senior coworkers.
i'm in the same spot atm its my 2nd job and im stuck at php4/5.1 some of out clients cant upgrade their servers long story :( Worked with a framework for about 4 years but learned alot now while using plain php so its not all bad. Using a micro-framework to route all existing functionality gives you the ability to extend the application with new functionality while keeping the old codebase. And it gives an nice base to update the old code to new code, the easy way is doing it file by file either way its going to take alot of time to update the code. 
I prefer constants if you're going to go this way -&gt;addColumn('Date', Type::DATE) -&gt;addColumn('Temp', Type::NUMBER) -&gt;addColumn('Mean', Type::NUMBER) or maybe something like this if there's behavior associated with the different types -&gt;addColumn(new DateColumn('Date')) -&gt;addColumn(new NumberColumn('Temp')) -&gt;addColumn(new NumberColumn('Mean'))
I hate abbreviations because they end up being so inconsistent, and sometimes unclear. Thus I would prefer addNumberColumn even it means typing a few more characters. Always, always, always favor code readability over code typability. 
I don't like this as it provides the opportunity to get the order of the arguments mixed up, as well as the opportunity to provide an invalid column type. Explicit methods eliminates both of those potential problems, makes the API more clear and understandable, and you get faster IDE completion. 
Active discompatibilization for development convenience isn't the way to go. Mind you, I couldn't be bothered to keep fringe projects compatible either. But for efforts like Wordpress it's not just indifference/neglience to retain support, it's kind of their go-to. Backwards compliance directly relates with their install base. Obviously, the article is spot on; minimum support shouldn't translate into promoting outdated setups. WP could easily declare a *recommended* version, or just provide e.g. gimmicky WP-support badges to shared hosters. Still not sure why the persuasion onus should be on project developers. If php-dev cared just a little, they could pause pulling a Python 3 for a second and rethink PHPs NIH license. Expanding the advertisment clause with an upgrade/expiry rule is really all that's needed. Better late than never. Canvassing over outdated PHP versions every few years isn't productive. Lobbying the right target is.
Thanks for the advice. After some serious consideration, I think that refactoring is completely within reason and that rebuilding would not be in our best interest. I fully believe this code base is good enough that it can be refactored into a well structured application. Also, the project has been stagnant for over 6 months and I'm pretty sure that won't fly with the stakeholders. My boss is, however, completely on board with me taking as much time (within reason) to refactor the code. I will keep this in mind and if it ends up being a larger monster than I realize, I will consider that an option.
Interesting (and kind of sad) quote from the [WordPress requirements page](https://wordpress.org/about/requirements/): &gt; Why not the latest, greatest, bleeding edge versions? &gt; We’re very aware that the latest versions of PHP and MySQL aren’t right for everyone, and that sometimes hosts can be slow or hesitant to upgrade their customers since upgrades to PHP and MySQL historically have broken applications. &gt; While sometimes we as developers miss the whiz-bang features that might be in the newest version of something, we find that with just a little extra work we can usually accomplish what we wanted to do without placing the burden on you guys. Innovation is seldom hindered by platform.
I've been working on it for over a year now, but very slowly since I don't have much free time for hobby coding. 
You had me worried for a second there, haha
It was sort of accidentally made a new feature so it was never announced as one, but it's *very* handy.
I wish there was a bit more structure and context to phptherightway though. It's kind of just a big brain dump. What the PHP community needs is an A-Z, start here / end there, syllabus. The syllabus can reference resources *like* phptherightway, but its sole purpose would be to provide guided structure and context.
Good question. I can't think of any other unintentional features off the top of my head... but there are probably some cool things the manual doesn't really mention much. I'm sure someone might chime in with something.
It shouldn't take any more than five minutes. It'll usually happen during code review. The reviewer will talk one on one with the author for around two minutes. If you're taking any more than five minutes then one of you is arguing for their choice without having a clear and valid reason. If it's hard to resolve then well post it in our dev chatroom and get their opinions.
&gt; discompatibilization I'm pretty sure you made that word up.
Disconceivable!
&gt; for development convenience isn't the way to go. PHP 5.2 stopped receiving security updates almost *four years ago*. It's not a convenience at this point, it's a necessity. Who among us would recommend using a major OS if it hasn't received any security patches in four years?
Preach, brother. I unsuccessfully made a push at work recently for PHP 5.4 as the minimum requirement. We ended up moving to 5.3 so we don't knock our users over with a feather ("think of the children!"). I may try out some of your arguments on them.
Quoting logical fallacies are great for logic. The real world does not operate on pure logic. It is more complex. Can I make a not purely logical statement? Holy hell! Push the required version up!!
Just tested. define() throws a warning "Constants may only evaluate to scalar values". Tested on PHP 5.6.3.
Wordpress is in such a strong "market position" that upping version requirements tomorrow would cause users to seek out better hosting, not to switch to competitors.
This was definitely announced though.
I myself have just started my new job as a junior PHP developer and would love to help out a fellow newbie phper :) Since starting I have been building my own framework to help me understand things better and it has really helped. Maybe you could try this and/or reading other frameworks. Reading other (good!) code can really help. There is a big emphasis on programming patterns, check out this link on [patterns](https://github.com/domnikl/DesignPatternsPHP ). If you haven't already check out MVC pattern, I think Laravel uses MVC so take a look at the source code on [Github](https://github.com/laravel/framework/tree/4.2/src/Illuminate). Databases play a big role in PHP so check out the PDO class in PHP. Also version control is very important when working with a team of coders so something like Github would be good to look at. They might not use Github but it's still a really good tool. Also use the Command line. Not only does it make you look like a badass hacker but it can be much faster and very helpful. Oh and when you are working in a team people you all need to stick to a coding standard, most follow [PSr] (http://www.php-fig.org/psr/psr-1/) standards. Good luck!! 
Was it? Where? It's [not on the list of new features](http://php.net/manual/en/migration56.new-features.php), isn't in UPGRADING or NEWS, and wasn't in the RFC that was originally voted on, nor the patch that was voted on (I used it at the time). I realise it did get in and did get documented, but this wasn't publicly announced aside from possibly in internals discussions.
It doesn't work for define() yet, hopefully [will be fixed soon](https://github.com/php/php-src/pull/954).
It's documented on the [constant syntax page](http://php.net/const). It's not in the migration guide because I straight up forgot to add it when I was writing the constant expressions section. I'll fix that now!
That's probably because it wasn't in UPGRADING. Still isn't, actually.
You appear to be trying to make this post sound smart by wallpapering it with big words. Be advised, that hardly ever works. I don't know where you learned this trick, but please stop.
That's a variable, not a constant.
It's a default value, which is subject to the same rules as constants declared in const statements.
I think the difference is that the javascript community acknowledges that javascript is horrible. The worst thing about the PHP community is how unwilling they are to acknowledge how bad PHP is.
If they acknowledge it's horrible, then why are they pushing it from the browser to the back end as well? Also, what exactly is horrible about PHP? The reason it's a dirty word is that there are so many amateurs writing code that the odds of any given project being an unmaintainable pile of spaghetti are pretty good.
If you truly have the ability to convince someone to use a specific design decision in under 5 minutes I honestly envy you. 
Maybe some of these extensions might help? http://php.net/manual/en/refs.utilspec.audio.php Failing that, just invoke `ffmpeg`.
The real problem here is hosts that insist on running ancient versions of PHP. Surely upgrading is not going to break backwards compatibility?
It's okay. I did too [until I read this](http://grammarist.com/spelling/gist-vs-jist/)
Don't be discompassionate
It would be nice if all projects adopted a mindset of continuously bumping the minimum version up to one previous to the current version. That way, project developers are able to use the fancy features they like and it maintains constant pressure on webhosts. There needs to be a constant give and take between hosts and developers. Hosts should never get complacent and developers shouldn't let them get complacent.
The defense of older versions seems arbitrary. Why not 5.1? Surely requiring 5.2 is going to leave some users out in the cold, right? Why not 5.0? Oh... some of the functionality requires at least 5.1, or 5.2? Go on, just work around those little missing features and implement them by hand instead. I've not actually been a huge fan of many of the recent progression in PHP (not a detractor, just not a big fan), but... giving people brand new software that's targeting 5.2 (for example) is, in fact, negligent - specifically "failing to take proper care in doing something." The very people who are 'stuck' on older PHP versions explicitly due to hosting platforms are also generally the least capable in terms of maintaining their own software properly. Any platform modifications they do (to CI, in this case) will be susceptible to more problems than the average developer. And the platform community will necessarily shrink as fewer developers will stick to working in 5.2. The platform community and maintainers - the very people who will be shepherding a project for people who need more handholding - will be fewer and fewer, and less able to provide updates, patches and any requisite hand-holding precisely for people who need it the most. It's a vicious downward spiral people will get caught in (and likely not even really realize they're in it).
"Requiring out-dated versions tells users that it's OK to run unsupported software. It sets a bad example." And yet, the majority of WP devs I meet will chide you for running even minor point versions behind the latest release - "backup, then upgrade!" is what I get told from WP devs a lot. And WP dashboard constantly bugs you to upgrade every time there's a minor point release. If the WP community behaved like the WP core dev team does - refusing to upgrade - we'd have a majority of people still running WP 2.4.
The actual output, as in the Javascript the library makes? That wouldn't be too hard to do. Edit: Added! 
yeah I guess the real answer is that the date 0AD, month 0, day 0 is actually the 12th month of the year before, and the 0th day is the last day (30th or 31st) of the month before that, which explains it.
There is some good advice in this thread, and some terrible. First off, do *not* go tell your boss right off that the app needs a rebuild. Bossman hired you to maintain a legacy app, not redevelop a fresh new one. If it's not advancing the business, your boss probably won't be too excited about all the neat new things you want to put in. At the end of the day, your boss is concerned with making money, not prettying up the codebase. That said, you have a tough road ahead. Start using version control and hack together some quick and dirty build system from what is already there. The absolute best thing you can do is to begin by deduplicating anything you have to touch. You're the only coder, so you're in a great position to do this. Use php copypasta detector to check any file you need to modify for duplicated code. In a large procedural app like this there is bound to be a lot of it. Probably one or two god files with all the functions in it. While you're in the first few weeks, you need to get to a state of productivity as soon as possible. Spend 75% of your time on knocking down that backlog, cleaning up as you go. Spend the other 25% of the time on manageable refactoring. Concentrate first on cobbling together classes out of the garbage that you have to wade through the most. Functions that seem to go together and mutate global state? Toss them in a class and make a global or singleton instance. Down the road you can make it less horrible by using a service locator or DI. Functions that have no side effects can be made static methods of topic-oriented utility classes. Kill global variables carefully and watch out for the dreaded double dollar sign. That shit was all the rage in 2004 when people thought they were really *clever*. In your first few weeks, if you estimate the amount of time a refactor will take, multiply the estimate by 3. If that number is more than 3 hours, you should take some notes, write some comments, and then put it on your to-do list and just deal with it for a while longer. If you make it past a few months, the app will gradually start to look less like a big pile of thrown together shit. Once you get to this point, it will be time to start considering patterns and frameworks and controllers and all that other shiny shit. Don't bother with it until then. Get to know the plate of spaghetti before you start trying to make a lasagna out of it. Don't get me wrong, frameworks and patterns are great, but slapping them onto a nastyass legacy app isn't going to magically make the codebase look or work any better than a dog's asshole. Read /u/pmjones book. Get PHPStorm EAP. It breaks once in a while but it is free and it's the best PHP IDE bar none. Maybe set up a bug tracker if you have a spare box and an hour. Bitnami has all-in-one Trac and Redmine stack installers that take all the ~~pain~~ fun out of setting them up. Good luck. I've been where you are and there is light at the end of the tunnel.
what is your role? freelancer or client? I found no problem with odesk as freelancer for almost 3 years, but my account on elance is suspended with 4.9 public feedback :(
As a freelancer, odesk's silly tools that track your time and activity to the second are just ridiculous. There's absolutely 0 chance a client is going to get billed for precisely 6 minutes and 17 seconds of work, nor would I ever consent to that level of monitoring on my workspace in any case.
&gt; Surely requiring 5.2 5.2 was what RedHat standardised on for many years. Until the recently released version 7, you were pretty much stuck with PHP 5.2 on the latest and great versions of an enterprise Linux distribution. That gives it a much larger install base, and it's the one that's "supported" by distributions. I'm not aware of currently supported distributions that shipped with 5.0. 
No. No. No. Virtuemart is the worst piece of software ever written by human beings.
Friends dont let friends use Joomla.
This is probably necroing a bit but could you explain a little bit more about the check to see if the page is in the cache before booting Laravel. This looks like it could significantly speed part of what I'm trying to do as well. 
In my experience nothing kills team morale faster than establishing hierarchy. Establishing hierarchy within a dev team should be actively discouraged. Establishing hierarchy is usually based on who is the biggest windbag - the quiet introspective guy in the corner who is a *killer dev* rarely gets the rank in the pecking order he deserves... And even assuming the hierarchy is established on the basis of skills and not ego, skills within a development team are complicated. The "Junior" PHP guy might be the team's expert in Angular, the Intermediate dev might spend her weekends becoming an expert in database optimisation. With a strict hierarchy (and I've seen this happen time and time again) the skills of those lower in the pecking order are often ignored. As for stubbornness, it rarely manifests in juniors. "Seniors" or veterans are more likely to be stuck in their ways and use terms like "I've always done things like this" and "standards suck". Juniors, good juniors, the ones you should be employing are eager to learn - the problem with them is often tempering their enthusiasm to keep the project on track. What you want to do is reward people for their specific expertise. Have thought leaders, sure, but "leads" and "bosses"... no thanks.
Tell that to the dimwits still using Windows XP
Price is based on experience and location. Either decide what you want there, or pick a budget and work from getting the best for your money.
This sounds like something a Docker container can encapsulate perfectly. I haven't checked, but is there a docker git repo already up? **edit** There is a dockerfile, and it pulls 5.6
There was a bug (or at least an inconsistency) in the code forbidding arrays in constants. It turned out to be easier to just allow arrays than figure out a better way of disallowing them.
Ah, that would be it. I remember that the RFC and patch did not permit arrays.
Again, for anyone knowledgeable, absolutely. For your average user, you're giving way too much credit to the care factor.
They don't care about money? Didn't they hear about the Sony hack? It's not a matter of if, but when they get hacked and have private info like passwords, emails or worse leaked.
To be fair you should never pass user-provided data to... pretty much anything. At least until you sanitize it.
&gt; I've pleaded with all of them, repeatedly, to upgrade their products. Noone wants to have the most brief discussion about it. More than one has responded by forwarding me a bill from a web developer with an expectation that I'll be paying it personally. They pay you to host so they don't need to worry about the details. They pay you because you claim to be the expert. Upgrading is not a choice. It's a necessity. And you presenting it to them as a choice is the problem. Pretending that it's OK for even a second to run insecure software is down right negligent. The problem is that it's not just the site that's at risk. Compromised sites threaten everyone. They put the entire internet at risk. Please step up and do the right thing. If not for your customers, for the world. 
&gt; For your average user, you're giving way too much credit to the care factor. That's your job. Your job is to make them care. Your job is to educate them. And far more importantly, your job is to protect them from the decisions that they are not qualified to make. Running insecure versions of software is not their problem, it's yours.
&gt; "unset($this)" can make the program crash I can only wonder what kind of code lead to the discovery of this.
/r/forhire
What's your starting point? How much php experience do you have? 
pm me, i'm a php developer.
Nah, the CMS developers have drunken the cool aid in a big way, just look at Andrew Nacin, the high priest of dogmatic backward compatibility.