I think I'm going to get it installed to day and evaluate it. Do you use the persistent/durable queue option? I'm curious if you've ever had any issues with data loss. In our situation, rebuilding the queue would take a lot of API calls would be a pain in the ass to write.
Oh you are right, I miss read "Adminer (formerly phpMinAdmin)" 
I would guess that the include_path for the script that is not running is different from those other scripts using the include. There are various ways to set the include_path. 
whats all this rappity rap about. you rhyming just to say words
A tool is only as good as the person using it. Thanks for the advice! I'm going to try to evaluate it vs Beanstalkd in the next few days. Right now, I'm looking at using the GearmanBundle for Symfony2 since it seems to be the standard Symfony implementation.
The call across all scripts is the same ( include_once 'Socket.php';). The only difference is the directory they are called from (same directories different folders)
Would you recommend learning php with laravel Or learning raw code then moving onto a framework? 
That was all Greek.
Thank you for replying. You have given me more information than any of the tutorials that I have looked through, including the one at the word press site. I do not deny that I am jumping into waters that are too deep for me. The word press methodology is very simple, and it was far easier to set up my first word press site then I thought it would be. This led me to believe that all aspects of the technology would be simple as well. They are not. The way that you describe things, they seem simple. Perhaps they are to you, but not to me. There is a disturbingly small amount of information for the novice user regarding this sort of thing. I realize that I have a lot to learn, and I am seriously considering not learning it because my interests probably lie elsewhere. Regardless, thank you again for posting.
They're free. -_-
System Administrators have to deal with idiot users.
You're requesting Socket.php from the folder that your script is in (which doesn't exist). You need to specify the file path of Socket.php in your include statement, either by specifying a path relative to your script, or an absolute path from your root directory. 
Not sure what you're struggling with. On your current site, go to tools and hit export. Set up a new site. Go to tools and hit import and find the file that you downloaded from the export. It's not a difficult process. You can ignore what I said earlier about the db name. I don't think it matters.
You don't want to do this, period, at all. You should use a deployment tool like Capistrano to handle this. You do not want people to just be able to deploy code directly to production over FTP no less.
That's really not the point at all.
I started coding html back in the days of PageMill and table-based layouts. I progressed into CSS layout design (and its limitations). I am primarily a designer, and I do not market myself as a coder of any kind. I learned to code because it seemed like a natural progression from my publishing background. I just end up doing tiny websites for people from time to time. I do understand that learning php/sql would take time to be proficient. I was just hoping that a tutorial for something as super-basic as posting a db to another server would be simple enough for someone with my level of experience and comfort to tackle with a bit of effort. It turns out that php/sql and html/css are two completely different beasts and that database stuff is completely outside the realm of what I am capable of learning. The fact that most (all?) tutorials expect a basic knowledge of the tech that A) is way beyond my knowledge level and B) is apparently not taught anywhere short of on-the-job learning. I looked fucking everywhere. There are no resources for someone at my level to accomplish this task short of enrolling in a course at a community college – and I'm not convinced that would even work.
[I don't believe you.](http://i.imgur.com/DwNZgZH.gif)
I'm doing that now. Thanks. Why the fuck isn't that listed anywhere (that I could easily find)? That should be the first damned thing on any tutorial about porting a site! The [wordpress tutorial for moving a site](http://codex.wordpress.org/Moving_WordPress) mentions nothing of this. Their references to exporting involve exporting the php database. 
\##php in IRC? how is this different?
When people misunderstand MVC as an "application architecture" they try to fit *every* piece of their application into one of those three boxes (M, V, or C). Doesn't matter if the hole is round and peg is square - they will jam that peg through. Once developers understand the MVC part of the application is really just the outer-most HTTP translation layer of their app, it frees them to build a better organized, robust "application architecture" that the MVC / HTTP layer merely interacts with on the user's behalf. It is for this very reason that Laravel 5 does not even ship with a "models" directory. It was unintentionally forcing too many people into thinking MVC was their application architecture and not their HTTP / UI layer.
The best practice is to use SSH/SCP, and turn FTP off on your server entirely. All modern deployment tools can use SSH. The is absolutely no use for FTP in the development process anymore.
Everyone knows what shells are. They're pretty common on the beaches!
Contact your new host and ask them to help migrate your site from the previous host. Almost all of them offer this service in some way.
The export doesn't contain everything. From the export page: &gt; This will contain all of your posts, pages, comments, custom fields, terms, navigation menus and custom posts. It will not include taxonomies (categories/tags) that aren't attached to posts/pages, settings, users, tables created by plugins, etc.. There is much more stored in the WordPress database than just the post content that is exported. A full database copy is the easiest way to ensure that your copied site functions the same as the previous site. Having said that, if your WordPress install is pretty simple and you don't mind re-installing and setting up plugins, users, etc., then an export and import will work fine. 
&gt; Why the fuck isn't that listed anywhere (that I could easily find)? That should be the first damned thing on any tutorial about porting a site! The first link that tutorial lists is how to export your SQL database using the phpmyadmin tool. It's literally the first damned thing on the very tutorial site you're complaining about. Literally 
Supervisor is pretty cool indeed. I like the web interface to see stdout/stderr in real time, and the restart buttons.
You're making your life hard by using windows. Harder still by using shared hosting.
More likely you are stuck with a legacy system which works and the business you work for doesn't want to pay x developers n months work to rewrite it to do exactly what it is doing now. Not only is it the financial cost of the rewrite, it is the opportunity cost while you are writing it compared to adding features to sell. 
&gt; Tell me... if I spend one week studying symfony... would I get better-cheaper-faster? No. On the plus side, you now know that curl is something and php is in your PATH ;-)
I would setup a git repo on your server. Have them push their code to that repo. Write a git hook, so if they push to a production branch it copies the branch to the production codebase, OR even better cd into the production code base and automatically git pull that branch. You dont need a full CI if this is the extent of your need.
Check again, their FAQ states: Q: Do you move Wordpress websites? A: At this moment we do not support moving Wordpress websites.
Exactly. "Model" is so broadly generic in current web terms as to be essentially meaningless, as I wrote in my book a few years ago. In modern PHP web terms, a ton of developers equate "model" with "database". However, using the word "domain" to represent everything that isn't a controller or view is also a little problematic because infrastructure services are part of your application, but they are not part of your domain, at least by classical domain driven design definitions.
I suggest reading Evans' book, as this separation is pretty much a core tenet of DDD proper. That said, design goals are not light switches, either: using active record doesn't instantly negate all your other domain-driven design. *That* said, the persistence separation is one of the most beneficial things you can do in any data-heavy application, IMHO, so opting out is really a poor choice, as you lose *so* much flexibility for very little convenience.
I'll check that website thanks 
1) What's the exact `include` call in a file that works? It it literally just `include_once('Socket.php')`? Or is there more to it? 2) Can you create a new file in the same directory as one of the files that works that says `require('Socket.php');` and see if that works? Try that. That will help us figure out where Socket.php is.
Absolutely, getting the job done is important, but if it's not done right, then eventually that could come back and bite you. With development, you always have to be prepared to invest time on your skills, because technology is always evolving. If you don't, that steady stream of work you're getting could slow to a trickle. Taking time to update your skills is an investment that you don't want to skimp on.
Love the Freudian slip in the headline.
This would require me to open ports on my Firewall, yeah?
Instead of buying Apple I can buy 2 used cars in Bulgaria (for summer vacation in hometown), one for daily use, and another in case the first one fails to work. Plus a normal laptop with same specifications. And still I have some money for fuel.
Yup. They may want to do more later, date handling sucks, and Carbon is nice. 
Can beanstalkd have multiple workers on different hardware? I would like to be able to scale. 
Here I can buy one normal laptop and 20 beautiful prostitutes to compensate the sadness. 
There's nothing to stop you using Virtualbox and/or vagrant within a windows environment.
Since no one else has replied to this I'll hop on it. I don't have very much experience with Rails but I can answer your question from a 50,000ft view. "Laravel is to PHP as Rails is to Ruby" is a saying because both Laravel and Rails are web frameworks. Essentially they both make organization, simple but repetitive tasks, architecture and other things easier. Almost everything that can be done in Laravel can be done in Rails and vice versa. 
supervisord keeps processes running and can restart them, but it isn't a monitoring tool. 
Symfony isn't really supposed to be used to develop by people who don't know what they're doing and it seems like since you're not familiar with basics like cURL and services running on port 8000 you might want to stick with a simpler framework.
Oh look a paradigm shift in programming. Today must be one if those special days that end in "y".
From what I gather, it seems that [Bolt](http://bolt.cm) might be a good fit for your needs. It's lightweight, Open Source, and you have full control over the content types (i.e. what fields go into what types of pages). http://bolt.cm (Disclosure: I'm one of the developers working on Bolt, so I'm obviously biased. Still, you should try it out because Bolt is awesome!)
Have you ever dealt with scaling issues?
Or switch to Ubuntu and run a Windows virtual machine when you need Photoshop. Vive la Ubuntu Revolution!
I know of no tool, but in a pinch, you could try catching \Exception and inspect the trace... wont tell you of ALL POSSIBLE exceptions that could be thrown, but it might help you track down a specific problem.
Yeah I don't get the deal with the whole Server and listen naming, it's not like this thing opens any sockets and runs an actual daemon.
I *wish* that were the theme.
Git can use SSH. But I would use Bitbucket plus dploy.io. In work I have set up Git on our own PCs. We push to Bitbucket. From there we deploy with dploy.io to the production server. So, now I can see who has edited what file when. Also, new programmers don't see the password, still they can push and deploy.
Something like this? interface File { public function getName(); public function getExtension(); } class Uploader { public function upload(File $file) { // .... do something with $file } } class SymfonyUploadedFile implements File { public function __construct(Symfony\Component\HttpFoundation\File\UploadedFile $file) { $this-&gt;file = $file; } public function getName() { return $this-&gt;file-&gt;getClientOriginalName(); } public function getExtension() { return $this-&gt;file-&gt;getExtension(); } } Or, if you'd prefer you could extend `UploadedFile` rather than injecting it into a new class: class SymfonyUploadedFile extends Symfony\Component\HttpFoundation\File\UploadedFile implements File { public function getName() { return $this-&gt;getClientOriginalName(); } }
Little help for your follow up article where you're going to write about Propel: Pro: * MIT license * PHP 5.4 or later * Propel is blazing fast thanks to code generation * Integrated Query-Builder * Both, model and query builder are IDE friendly (auto-completion) thanks to code-generation * Generation of model methods (getter/setter/isser) for all columns and relations * Database schema migration system * Associations are managed; you don’t need to worry how to handle foreign keys * Schema reverse engineering command * Perfectly integrated into Symfony as bundle * Customizable through yml, xml, ini etc * Well documented * Very well tested (over 3k tests) * Propel comes with common 'behaviors' like nested-sets, i18n, sortable, versionable, inheritance etc. * ActiveRecord (if you like it) * 3rd party visual editors * Community Con: * ActiveRecord (if you don't like it) * Declaring the models in xml only * v2 still in alpha Pro-hint: In v2 beta it will be a data-mapper like doctrine, but with native supported (optional) active-record interface.
I would suggest that this would be a good place to use the adapter pattern. So, you would create a File interface first that would define the methods required by the Uploader class (e.g. getClientOriginalExtension()). Then create an UploadedFileAdapter class that implements the File interface, which would convert UploadedFile's methods to fit your interface. You could then just typehint "File" in the upload() method of the UploaderInterface. 
I quite agree with what you've been saying here, but truth be told the point of djmattyg007 was to not use git in production (since the topic is the process used for deploying code to production), one of the reasons being that if your server security gets compromised, git tree is not to add to the list of the casualties. Sure there might be many things way more critical to your business/security/clients than git tree, but this one you can for sure avoid it to be ever compromised by not putting it there in the first place, at the price of an (arguable) deploying (in)convenience.
I read that Twitter moved off of the Rails platform because it couldn't scale enough. I wonder what platform they moved to. 
&gt; Macbook Air, which makes using VM's impractical Limited RAM and processing power. (PHPStorm + VM) / MBA = death.
Check out http://phpixie.com . You pretty much deecribed it word by word. Its also faster than any other PHP framework apart from Phalcon ( which requires a PHP extension ) as proven by Techempower Framework banchmarks. And also super easy to learn
HHVM requires something like 2 CPUs and 2GBs of memory to run/compile efficiently. An Air's specs would barely meet those requirements.
In what ways would you say Vagrant is more convenient?
https://www.shortcutfoo.com/app/dojos/git
Those of us on RHEL 6 are still running 5.3.3. It's perfectly stable, and perfectly secure. Red Hat backports every security fix until RHEL 6 EOL.
there's no official oci port, but it might be able to do something with the zend engine compatibility layer for extensions.
Where is the paradigm shift? All I'm seeing is a clarification of an original intent... did I miss something?
This is a great resource: [Learn version control with Git](http://www.git-tower.com/learn/).
I think github had some tutorials. 
As a PHPnoob, this looked pretty do-able. I don't understand the downvotes -- what gives?
&gt; HFS+ says that "a" and "A" are the same file. HFS+ does (in case-insensitive mode), so does NTFS (also only in case-insensitive mode), so does FAT, so do some other file systems. &gt; What if I have a filesystem/locale where "a" and "á" are the same file? I don't see how that matters? HFS+ is case-insensitive, by default anyway. Yes, case-sensitivity differences cause cross-platform issues, but that's not Apple's fault or Microsoft's.
http://rogerdudler.github.io/git-guide/
Highly recommend http://pcottle.github.io/learnGitBranching/
https://try.github.io
IMHO [git-scm.com](http://git-scm.com/) is the best resource for learning git. It doesn't really have videos, but there really isn't a faster way to learn that to play around with git in a terminal.
I've always loved code school. They have great videos and a virtual shell right there to try what you just learned. 
This is correct. The documentation is very nice and you can download the [e-book version (Pro Git v2)](http://git-scm.com/book/en/v2) for free.
All great resources have been posted. If you're looking for something in e-book format then check out Getting Git: https://www.makerscabin.com/git/guide
RHEL is maintained by Red Hat, which is a company that invests money and time into backporting security fixes: we are just a team of developers building this thing for fun and out of our own interest and free time. Additionally, we'll still provide security fixes wherever necessary and back into very old releases too: we just can't afford maintaining non-critical bugfixes in old versions. If you have a problem with using PHP 5.3 and Doctrine ORM, then you can just use the older and security-maintained 2.3.x or 2.4.x versions of it.
SQLAlchemy is actually much more advanced than Doctrine2 in my opinion, but we try catching up or planning new releases accordingly whenever a new JPA, Hibernate or SQLAlchemy version is released, we look at it and try fitting it into our evil plans (depending on whether we consider it useful) :-)
Laravel is for websites. Symfony is for applications. So, if you're building websites then Laravel would be the better option. 
My job is to come after programmers like you and fix things.
I run Windows in a virtual machine on my Linux desktop when I need it (which isn't often). I used to use it solely to access Photoshop which works great as long as you have enough memory available for the virtual machine (8Gb+). Haven't used Windows in any serious capacity for 2+ years. Checkout XUbuntu: http://xubuntu.org
No, this is not a user interface pattern any more than Laravel's facades are facades. While I agree that it's not an application architecture per se, calling it a user interface pattern is *worse*. A user interface pattern is a bread crumb trail, or tabbed navigation, or a slider (or to get more granular, the use of navigation dots on a slider). A UI pattern means just that: a pattern by which a user interacts with a website or by which information is conveyed to a user, not a pattern by which data is curried from the browser to the server and back. If we're going to attempt to clarify meanings here, let's not make them more confusing in the process, please.
Wow! You put a lot more work and info into this than I ever had! Bravo! &gt; $registered = UserState::REGISTERED; The biggest gripe I have is having to repeat the class name (here: "UserState::") every time the enum is used. In C, I create the type (usually with a typedef) and use the enum as a value: if ( registered == REGISTERED ) ... My own personal downfall is that I have been an ANSI C programmer for years and do not know enough of OOP (in C and PHP) to know the ins and outs of using the OO capabilities properly.
All else being equal, I like that a bit more too for its conciseness (I haven't done straight-up C in over a decade, but a decent amount of Obj-C for iOS stuff). Collisions will inevitably be a mess, especially since there's no concept of header files in PHP execution. Where `REGISTERED` could be defined in multiple enums in C so long as conflicting headers aren't both included (I think... the convention seems to be prefixing the values^[1] to avoid issues in the first place), you'd get naming collisions in PHP since the scope of defined constants is the request rather than the file. If enums could be treated as class properties^[2] then some of this scoping stuff goes away, but some issues may still be raised across libraries and I think there still ends up being ambiguous scope resolution^[3]. I very much like the idea of being able to scope enums much like properties or methods for the purposes of encapsulation (general rule: prefer `$user-&gt;isRegistered()` over `$user-&gt;state == User::STATE_REGISTERED`) but this would add a lot of complexity to the lexer rules (`User::State` now either means the state constant, not currently a valid typehint, or its enum, which is typehintable but not usable as a constant elsewhere - this is also a potential performance hit) or require a new symbol to indicate that the typehint is to an enum rather than a class within a namespace (`User\State`). I think the current proposals could address this by allowing an enum definition to include `private` somewhere in the syntax, and do some magic to scope its definition to the file in which it was declared...but this could still have resolution ambiguity. And it's kind of a C-ism that feels somewhat out of place to me. ^[1] Example from my iOS app: # wepay.h typedef enum { WePayModeStaging, WePayModeProduction } WePayMode; -(WePay *) initWithOAuthToken:(NSString *) token inMode:(WePayMode) mode; ^[2] e.g.: class User { private enum State { 'REGISTERED', ... } protected function setState(State $s) { ... } } ^[3] What if the above also has a separate `State` enum defined elsewhere? Which one is being typehinted?
[gitimmersion.com](http://gitimmersion.com)
Although I don't believe all security patches impact actual production environments all that often (in my experiences we don't use most of the functions that have the holes..) I do however whole heartedly approve of new programming features that improve my coding abilities. In the shop I work at when I arrived last year they barely even knew that there was a version higher then 5.3 ... Now however we don't even propose projects that are not on 5.5.20. And charge extra for anything less
Oh. Don't know why you were getting downvoted then.
Even the most basic of users can learn from this guide. It's a great, simple, and oddly gentle introduction to getting around with Git.
 &gt;there really isn't a faster way to learn that to play around with git in a terminal. Can't be said enough. I just started at a new job (where they use git) right before Christmas, and I wouldn't call myself a pro in any sense of the word, but I've learned more about it by just doing it and learning how to fix problems as they arise.
When I first looked the code, I was also confused what the server is. But just think it like bootstrapping the application. If you are familiar with Symfony http-kenel think it as $response = $kernel-&gt;handle($request);` // send the headers and echo the content $response-&gt;send(); // triggers the kernel.terminate event $kernel-&gt;terminate($request, $response); At-least think it as a Bootstrapping :) .
100% this month, as this is a part of release schedule. I hope to get it once I fix all critical bugs and merge all pull requests
Wrong. See my comments above http://www.reddit.com/r/PHP/comments/2t6cs6/conduit_the_middleware_for_php/cnwg3ua
As you may see Robo has comprehensive list of built-in tasks. It can be used for package development, testing, deployment, assets management, docker orchestration, and maybe some other tasks.
Yes, I did asked the same doubt. See answer http://7php.com/slim-php-framework-interview/#Is_middleware_really_needed_when_event_handlers_are_there
Baader-Meinhof Phenomenon. I literally just searched for all of this and set up my first repo today. Awesome. Glad OP got some awesome info cause it was surprisingly a difficult uphill battle. 
Honestly, I didn't read the entire comment previously.
Or better yet, install Archlinux and never have to go through the pain of dist-upgrading ubuntu ever again.
Doesn't clutter the host OS with stuff you need for a project and each project can have its own environment/extensions/servers/etc installed (and matched to the production environment)
Yes. It operates over telnet. 
Check out the [protocol docs](https://github.com/kr/beanstalkd/blob/master/doc/protocol.md) for more specific info about the sorts of transactions you can expect to see. Workers are completely independent, and only need the ability to open a socket to operate telnet.
Why have I not heard of this before? Gotta find a way to go to this.
I wish more people understood this.
How does this compare to deployer or rocketeer in terms of deployment-related capabilities?
I have this snippet of code for a long time now in my .bashrc and never really asked myself "what if I would do it in parallel". # PHP Syntax check directory phpl () { dir=`pwd` echo "running 'php -l' on '$dir'" for f in `find | egrep "\.(php|phtml)$"`; do t=`php -l $f` if [ $? == 0 ]; then status=`echo -e "\033[1;32mPASS\033[0m"` else status=`echo -e "\033[1;31mFAIL\033[0m"` fi echo "[$status] $f" done } 
No sorry, but Beanstalkd is a pretty low level protocol and runs over telnet, so if your boxes can talk to each other they can all connect to a beanstalkd server and pull jobs from there. 
Then you don't need the help or wish to offer it that much. 
No they aren't. UX involves so much more than UI, and deals with things far beyond the application itself. The fact that people are using the terminology interchangeably doesn't really change that. 
Not on topic (I honestly avoid ORMs as much as possible), would just like to leave a couple of thankful words towards dgaic, your contributions on stackoverflow have been extremely important to me when I was developing with Phonegap and jQuery Mobile. This dude REALLY knows his stuff when it comes to hybrid mobile development. His blog and answer history on stackoverflow are compendiums of practical information. Thank you very much for your contributions!
It's just a small mistake. Do we need to make a big deal out of it?
Not making a big deal, it just amused me.
Seems like a good resource for those wanting to clean up their coding practises. Not read through it all yet though, but so far seems very well done.
Yes, agree, I forgot the /s on that last statement. I personally work on UI - getting the technical aspects of the interface to work. Now *what* those technical aspects should be, and how smoothly they should work, involves looking beyond the interface and how people interact with it. Is UX "more" than UI? I would say it's not; it's something else altogether, a different level. It's about how people feel through an interaction, rather than what they have technically achieved. That's not to say there isn't a certain amount of overlap in what UI and UX developers need to understand. My brilliant UI that it just so straight forward and obvious to use, can stump some end users totally. That is when it needs to be looked at from a different direction, and usually the changes needed can be subtle and (to me) not at all obvious. But hand-in-hand, they work well. There is so much involved in web and application development, that it is just about impossible to keep your head at all levels at the same time - database, back-end processing, HTML, JS, CSS, and then the damn users to that come in to break everything ;-) 
What Macbook Air has only 8 hours of battery life?
UI design is a subset discipline within UX design. There is also another subset discipline called IA design and "I" design within UX as well. IA design is information architecture design which is how navigation and content relationships are structured. "I" design is interaction design, which describes the behavior of elements as users interact with them. Apple and Google, for example, spend a lot of time and money on interaction design alone, let alone everything else. 
Robo is more wide range thing. There are no specialized tasks for deployment, however, there are SSH, Git, Docker, and assets tasks that can be combined to write custom deploy script. 
it really really depends. I don't usually do the 'code me something' test for juniors at their first interview. First month of probation period is usually more than enough to understand. BTW you can find something here http://vladalexa.com/scripts/php/test/test_php_skill.html and I really like the best answer here http://programmers.stackexchange.com/questions/118886/how-can-i-test-php-skills-in-a-interview (it's the other way round but it makes sense also for you)
Brush up on best practises and design patterns. You don't need to know them inside out but try to understand them and the meaning behind them. So long as you understand the basics and ask questions when you don't know, that should see you through. Juniors should not be expected to know everything, but prepared to learn and willing to ask for help! Also research the company a bit, look at what they've built and try and read up on it a little. If you show a bit of self-motivation it will do you wonders compared to attempting to write some faux-throw-away-code.
why are the class names in the example lower camel case (theClass)? I was sure that most people use upper for class names and lower for method names...
&gt; this is not a user interface pattern I'm afraid Fowler disagrees with you. http://martinfowler.com/eaaCatalog/modelViewController.html : "Splits user interface interaction into three distinct roles."
 &gt; I certainly did not mean any ill will toward Doctrine in this comment. Yeah, no problem: I'm just a bit blunt in my way of expressing myself. I agree with everything here, I just needed to make clear that OSS developers can't put the same commitment into an LTS as companies/corporates, and that because nobody is really paying us :-)
Could you give them FTP access to a dev or staging server instead? This would allow them to push up code while you can get it tested before deploying it. 
They have their own dev area, they'd be pushing production code to us. I could have them push code to an FTP folder on our web host but then I'd have to go and manually grab it and put it where it belongs. That option seems prone to breaking things.
So I work as a contract developer. A few of the clients we deal with deal with don't allow for any sort of deployment strategy on our end but then again we aren't the customer. We have our own dev and testing servers and when we are ready to go, we push things out to their dev server. They then take the code and set things up on their staging server before deploying to production. This is far from ideal but it does keep things off the production server.
That's an interesting opinion; 've been involved in 500k-1M/month traffic projects on both platforms, and don't see how you've drawn that conclusion, but I'm interested to hear the reasoning.
&gt; But when it comes to thing like MVC, MVVM and stuff its a different "pattern". Correct; thus the title of Fowler's work, "Patterns of *Enterprise Application Architecture*" (emphasis mine), wherein MVC is described as a Web Presentation pattern that occurs within application architectures.
When I applied they emailed me a html template and I had to turn it to a fully functional mini poll system. (CRUD, votes etc). On the actuall interview I didn't have any technical questions though..
I have been able to glean that the C++ part is a PHP extension. However, the documentation is in Turkish (according to Google anyway). Is there an english version of the documentation? It seemed weird that the main page is in english, but the rest of the site is in another language. That aside, what does the PHP extension offer? What about the PHP-only portion of the framework?
Well the simplest way would be to use json_encode to assign some data from php to a js variable: &lt;script&gt;window.data = &lt;?=json_encode($data);?&gt;&lt;/script&gt;
I was ready to recommend [Regexr](http://www.regexr.com/) over this, the explanation panels are actually really cool and useful.
&gt; GRUD Groot Read Update Delete?
I was given FizzBuzz once as a pseudo-code problem, so that's a good one to have in your pocket. Another test was a working telephone directory, but the class definition was empty and I had to write the class to interface with the rest of the app. From what I could tell they were testing me on OOP and design patterns.
The first thing I would do is migrate your application to a MVC framework, no matter how big or small it is. Even the tiniest applications can benefit from MVC separation. At a *minimum*, this will give you a way to keep your templates/views (where the HTML lives) clean and tidy. Of course, you still have to make them that way, but now you have an architecture that at least supports / encourages this. Then, what you'll want to do is write your javascript as if all the data you need is already in javascript. Forget PHP at this stage. Create placeholder JS objects and array structures that your JS would utilize. Refactor and re-design the JS if needed, and then let that refactored/redesigned JS dictate the data structure it wants. Then, in your template where your HTML and super thin PHP calls are made (e.g. &lt;?php echo $user-&gt;name; ?&gt;), "bootstrap" your javascript vars with the PHP data; &lt;script&gt;var myNeededJavascriptData = &lt;?php json_encode($myPHPData); ?&gt;&lt;/script&gt; Here's a more complete example: **Controller** class UsersController { public function index() { $users = $this-&gt;userRepository-&gt;all(); return new View('users', $users); } } **View / Template (bootstrap javascript with php data in simple line)** &lt;!-- let's pretend our javascript will insert code here --&gt; &lt;div id="user-list"&gt;&lt;/div&gt; &lt;!-- hydrate the users var for use --&gt; &lt;script&gt;var users = &lt;?php json_encode($users); ?&gt;&lt;/script&gt; &lt;script src="/js/users.js"&gt;&lt;/script&gt; **users.js (no PHP calls - just a rough example, should use a JS template language like Mustache or Handlebars)** var html = '&lt;table&gt; yadda yadda yadda'; for(user in users) { html += renderUserRow(user); // pretend you've built this nice clean function somewhere } html += '&lt;/table&gt;'; $('#user-list').html(html); 
Well there's some db work that needs doing so I can't do 100% js. Then obviously I need to pass the fetched results of the db to js and therein lies the problem (which a lot of you have addressed).
They had me write pseudo solving a couple basic problems like finding averages and drawing an ASCII box. My biggest problem was the vocabulary. I thought I was about to fail the interview because I had never heard the word ASCII before but they were willing to explain it and then I had no problem. They also started asking me how to do a basic regex, but I was unfamiliar with that as well. I still got the job, they just wanted to see that I could do basic logic and weren't concerned with my lack of specific knowledge.
His example is working, you just can't see enough of his code to tell that. If you notice that the first line contains javascript, and assume that there is more javascript and php above it, then it's obvious; the first line ends with " '; ", which means he is storing js as a string in php, and then ending the line to insert colors into that string.
Why "no dangling commas" as a rule, anyway? What on earth is this protecting against? It's much better to always use a comma when the array is on multiple lines, then it's easier to add/remove items anywhere in the array. Maybe if he used proper indentation? $array = array( 'a', 'b', ); 
Am I the only one who thinks having 'else' on the same line as the closing brace is ugly? Instead of if (...) { // code } else { // code } Why not line them up? if (...) { // code } else { // code }
I introduced a couple coworkers to Regex101 as they were trying to do a bunch of Magento string replacement stuff. Pretty sure if they weren't guys they would've kissed me, they were so happy. Awesome tool.
Not really answering the question (sorry about that), but I'd just like to note that on Debian PHP is at version 5.4.36 so SuSE's "little support" isn't little at all.
You might be under the impression that Google is indexing all js now. That is untrue. They are taking steps and it will be a reality eventually, however I have seen several posts about how they aren't quite ready for full SEO of js apps. This especially applies to Angular. If you had suggested React or something else isomorphic, it would be a different story. You might be making a web app, but web sites like the one OP inherited still need SEO and crawlability.
Those are good questions - or at least, the questions I would have liked to have been asked back when I was interviewing and are the type of questions I am now asking as an interviewer. I detested puzzle questions unrelated to programming (ever hear the one about crossing a river with a goat, a wolf, and a cabbage? I got that one four separate times) or questions that were obviously lifted from a book on programming interview questions that have nothing to do with how their company actually developed software. They have their time and place but not when you don't bother putting any thought into your interview process as it relates to your company other than "ask what everyone else is asking".
I agree with pan069 here. When designing large service-oriented systems for instance, Symfony is more "industrial" in it's design, with all the existing bundles, the architechtural choices, and so on. On the long-run it makes for a more maintanaible system. That doesn't mean it couldn't be done with laravel, but laravel might not fit the job as good as symfony would. Laravel is really great though, but the scope is different. I think it's motto is pointing that out: "THE PHP FRAMEWORK FOR WEB ARTISANS.". I think Laravel was built on top of symfony components also because symfony is not the most productive on certain tasks. That's precisely why I said "You might want to start describing you're problem first.". =]
Correct. This was found very deep in a file I needed to work on
5.1.73 and No innodb tables all myISAM. I also don't use any joins in any queries or slow queries. I don't have load issues but I want to scale up the software for larger numbers and introducing this now would be a good idea. 
* [no-double-quote](https://github.com/dseguy/clearPHP/blob/master/rules/no-double-quote.md) Double quoted string without variables is not slower then single quoted (at least not with OP code caching). * [imported-collision](https://github.com/dseguy/clearPHP/blob/master/rules/imported-collision.md) This is just an excuse to make a "rule". 
clever name! yup. 
Do it! And come to my talk. :)
Miiight want to fix up your formatting a bit. [The original file](https://github.com/php/php-src/blob/php-5.6.5/NEWS) is more readable.
SQLLite does not handle concurrency well (much worse than mysql), and therefore would be a poor choice. Files also handle concurrency poorly. If you need a persistent cache you should probably look into [redis](http://redis.io/), to access redis via PHP [predis](https://github.com/nrk/predis) is an excellent library.
Looks interesting! It might be an idea to outline what this actually is on the README with a description of the goals, and similarities to other things like PSR-2. Also, maybe you could remove `?&gt;` from the code examples. We don't want people thinking they're a good idea.
More on the double quote myth http://nikic.github.io/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth
I like the idea of using tuple vs array as a tuple should imply the length of the array should not change. 
An array has one type and a variable number elements, a tuple has one type for each of its elements, of which there are a fixed number.
This is fantastic.
Using a filecache for that is a very bad idea. Reading from disk will slow down the system eventually, even if you have fast disks. What's worse is, if you start to scale horizontally (running on multiple servers) you can't use this anymore or you would need to cache the same things on all servers. You should really take a look at redis or memcached (or xcache/apcu for that matter, but these would still be limited to a single server). 
Yeah, a lot better :)
Thank you, a few people have suggested redis I'll check it out!
Yes, you can using php the 3 parameters of preg_match($re, $str, $matches); $matches will contain an array with 'slug' =&gt; 'poncho-carlo' 
That style *is* PSR-2's recommended standard. I agree that your example looks better, but I elaborated on it to show the entire standard I adhere to.
I thought there were limits to how much content you could store in a "cache" that's why i went for the filesystem cache
This question belongs in /r/phphelp, not /r/php.
The dev does mention that if you were to convert the data to a ~~more strongly typed~~ stricter language, hunting commas is going to be a pain. but, tbh, if you are changing language to a stricter language, dangling commas are probably the least of your concerns. as you (and /u/panoptisis) say, a dangling comma in a multi-line array is totally worthwhile. It doesn't break anything, speeds up later additions.
Memcache. Ridiculously easy to use and setup. Alternatively, it sounds like you might also want to consider setting up a small MySQL cluster: master for writes, slaves for reads. Lots of articles/tutorials online on how to set that up.
&gt;imported-collision[2] This is just an excuse to make a "rule". why is the following considered a warning? variables are distinct. function ($a, $b, $c) use ($d, $e, $f) { return $a + $b + $c + $d + $e + $f; }; 
I'd just stick with Doctrine's DBAL. [http://www.doctrine-project.org/projects/dbal.html](http://www.doctrine-project.org/projects/dbal.html)
I've worked on sites where PHP got mixed in with the javascript and even into the css... it's not pretty and it makes it all but impossible to untangle anything from being part of the server-side process. My personal opinion is, if you find yourself having to do this, someone's made some poor design decisions. Why not make an ajax call to a PHP file that sends whatever you need as json? Since it's going to be running as js anyway. 
Honestly, That sounds pretty interesting. I might. In the past I've used triggered git pulls using github webhooks for really small projects, but some tools for the projects in between would be great. I think my office will probably sponsor my attendance, so maybe I'll see you there!
Cool, thanks!
In that case, make sure you're keeping track of escaping, sanitizing and properly encoding anything coming from the server and being dumped into a script context. It's really easy to lose track of one variable and wind up with a huge script injection hole. Especially if users have ever touched it at all. 
 function error() { echo 'error'; } Had a laugh on this. Anyway, looks pretty CI'ish with some Laravel sugar on it. Why do you use your class aliases in all lowercase?
What has strong typing got to do with dangling commas?
I only knew about: (?P&lt;slug&gt;[a-z-]+) but apparently, these work too: (?&lt;slug&gt;[a-z-]+) (?'slug'[a-z-]+)
Let me rephrase: &gt; Am I the only one who thinks having 'else' on the same line as the closing brace is ugly? No, I also think it's ugly. However, I also think putting the braces on the same line (a la PSR-2) is equally ugly. I prefer this syntax... I could have been more clear about that.
"As you must have noticed, we give no recommendations, no comparative analysis and reveal no lifehacks." You could have put that in the first paragraph, rather than the last and saved us all some time.
This is really weirdly written. "Here it comes, almost impeccable framework according to predominant vox populi." UWotM7? Looks like throwaway content from yet another studio selling dev services.
Not sure a mobile device would be targeted for devs testing regular expressions.
Did some tags get stripped out of your post? I'm not seeing more than one language there, and no markup language. edit - nevermind, I didn't look hard enough and now I see it. edit part 2 - which i guess is kind of the point, huh.
333882225544466 22227777882555777
Hmm looks like it gets the job done.
&gt;333882225544466 22227777882555777 "Fuckin casual" That took me longer than it should have. Well played
SEO bate
I assume that part is a typo since the block above it said it was considered a warning. (Some bad copypasta.)
I've recently been on many interviews for senior positions and let me just say that most places absolutely don't know how to interview. I think it's shity to ask language specific questions (what function would you use to do x) without having access to a text editor. Also, being pelted with trick questions and brain teasers is just another red flag that this place is probably full of dicks. The best places feel you out and consider your personality and whether or not they want to invest in training you. Good luck
Just try to relax. Interviewing is stressful enough, so don't work yourself up trying to come up with the "correct" answer to a coding question. When my team interviews a candidate we are looking for someone who will be a good fit for the team more than the best programmer. Just go in a be yourself.
Found myself in pretty much the exact same situation 3 months ago. After you get over the shell shock of the horror of the codebase, and after some deep soul searching, you will come to realize a rewrite is not likely an option. Bottom line is that management will have no reason to assume the huge financial burden and risk of a rewrite when the current app is functional and profitable. http://www.reddit.com/r/laravel/comments/2o9d1e/convincing_php_naysayer_upper_level_to_move_to/ In my case, I have resigned myself to incremental refactoring (planned out over a very long time). I'm already a couple of steps into the plan, with a long way to go. At 3 months in with the codebase, while it is every bit as horrible and time consuming to work with, I know that this is my challenge and have embraced it fully. As is mentioned in my post linked, the Modernizing Legacy Apps book can't be recommended enough. 
With the plethora of domain names, does it really matter? Most people I know who are not developers, just type whatever into google and click the links until they hit something that looks like it might be what they want.
I agree, why rewrite when it works. Slowly refactor when you can and develop a plan to eventually have it how you want it.
Memcache +1
With the first example, things can look pretty jumbled, if I have several lines inside the if/else blocks, I'll space it like this: if ($thing) { $result = $thing-&gt;doStuff(); $thing-&gt;doOtherStuff($result); } else { return false; } Adding the extra spaces between the braces for added visibility.
Depending on the type of project 5 weeks may not even be enough time to even understand all the business logic you'll need to know to start on a rewrite. I just started a similar project. 6 code bases which diverged from a common base several commits back. No comments. The developer before me didn't understand the business requirements and ended up forking the code for each of the client's customers instead of understanding what was going on before making rampant changes. 
You can set the FTP root directory to the place they need to push it to, so that's the only place they can access, and either require encrypted FTP or use SFTP instead. It is a kind of outdated method of deploying code and there are better practices now but a *lot* of companies still do it like this and if it's out of your hands just make sure transport is encrypted and access is limited. From what I gather there are ways to set up some hooks on various FTP actions with some servers, if yours supports this, I'd set up a post-login hook that makes a backup of the directory they're writing to at least once per day, or actually even better, do a `git commit` on the whole thing just to at least keep better track of changes and allow some rolling back.
Not really on-topic for the sub, but it would be really cool if you could add support for [Java regexes](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html). They allow for a few unusual constructs (the `\p{Whatever}` stuff) and behave somewhat differently when dealing with multiline strings.
I wasn't criticizing. You really should try that link on mobile. Looks real wacky.
I'll echo that having a plan is crucial when slowly refactoring an ancient codebase, so you don't end up inadvertently spaghettifying it even more. Slowly refactoring is usually the only way to go though.
the url leads to github..
I use it on some of our large CSV processing scripts to remove lock files after they have completed or crashed. Anything you want to do after the request has ended really, but maybe you don't/won't have control of closing the request yourself. There was a couple of bugs in earlier version of PHP that caused it to sometimes not fire https://bugs.php.net/bug.php?id=61767 and https://bugs.php.net/bug.php?id=60909 so watch out for those. 
Overly normalised database? I doubt that is the real problem. If the framework is doing too many queries, then I suspect the real problem is there. Relational databases were never meant to be treated as name/value stores. 
Ah. The good old copy of remove_accents as it was used in Wordpress (https://github.com/brandonwamboldt/utilphp/blob/master/src/utilphp/util.php#L732 vs. https://github.com/WordPress/WordPress/blob/master/wp-includes/formatting.php#L822). If you ever have to create slugs in an inner loop, do yourself a favor and create these two translation tables once instead of every time the function is called. I've seen a profile only a few weeks ago where 30% of the page execution time was spent calling `chr()` in a different pasta from WP's remove_accents function. Also, I see a licensing issue with this, as the original comes from WP which is licensed under GPL and your copy is licensed under MIT which you're not really allowed to as your library now is derived from GPL code and as such has to be GPL too.
Hi, I am a developer on Mothership and we are gearing up to open source the platform, and we'd really love to get a feel for the interest and get some developers on board before we launch. If you have any questions, feel free to comment here, on the blog post, or send me a message. Thanks :)
&gt; sometimes you want to generate them, actually yes. For example when you want to send somebody an initial password via snail mail because you don't have their email address. That's probably the only one valid reason. &gt; (password reset) no. You send them a one-time-usable link that logs them in and forces them to type a password of their choosing. Sending random passwords in plain text is problematic because a) plain text email can be and is being intercepted and b) it encourages lazy user to not change the password
&gt; yes. For example when you want to send somebody an initial password via snail mail because you don't have their email address. That's probably the only one valid reason. Even then, I'd mail them a token, give them an easy to type URL, and that page would ask for token and postcode (as an example) and set up their account that way. That said, postal-only is a very edge case.
Ah yes, that line in there isn't actually doing anything, it's just a leftover from testing while I was checking state of objects. Mostly you wouldn't ever need to create an instance of the maverick class like that as the useful properties are available via other classes and static methods
You probably want to save the "last matchID" in a variable and check if the current one is equal to that. If so, output empty fields, if it's different, fill in the entire row. something like: for each value if ($matchId == $oldMatchId){ echo "&lt;html for emtpy row&gt;"; } else { echo "&lt;html for full row&gt;"; } $oldMatchId = $matchId;
Thank you for this. I've never heard of RandomLib before. Can someone explain me why using RandomLib for token generation is better than say: $token = bin2hex(base64_encode(openssl_random_pseudo_bytes($tokenNrOfBytes)));
For such use cases RandomLib may not offer much over manually calling openssl_random_pseudo_bytes(). But for example, if you need to pick a random element from a set (like pick one from 1,2,3,4,5,6,7,8,9,10) with any of the elements being equally likely to be chosen, then it gets tricky and RandomLib will help you out. And also, RandomLib hides the underlying randomnsess gathering from you, so you don't have to worry about it. If you go with RandomLib, make sure to use MediumStrengthGenerator and make sure your system has either openssl_random_pseudo_bytes() available or access to read from /dev/urandom.
Thanks, so it's more control over good random number generation. This should be very useful for games.
Ask them whats the point of reinventing the wheel? PS: Read slims sourcecode to get a grasp about routing
We are reinventig the wheel because the client said so. We tried to explain that the work is not working that way and that it will take a lot of time to build custom solution, but the client insist on plain PHP. I don't think I have a lot of time to read sourcecode :/. 
You don't have an idea how much happier I would be if this is a school project. This is real world work, and I don't have a lot of time for reaserch. Also, I don't need a best answer, I need one that can be implemented very, very quicly :D
He is informed that it is incredibly stupid idea. In the best case scenario he will get the code which is slightly below the average quality, since we will have to focus our time (my time in this case) on the routing and less the rest of the stuff. But at the end of the day, he have a last call, and if bad code is what he wants, bad code he will receive (I am not doing this on puprose - simply there is no time for me to write and optimize. When I make it work that it that - there is no turning back). 
Routers don't need to be complicated: class Router { protected $routes = []; public function bind($method, $uri, callable $action) { $this-&gt;routes[] = [$method, $uri, $action]; } public function dispatch($method, $uri) { foreach ($this-&gt;routes as $route) { if ($method == $route[0] &amp;&amp; $uri == $route[1]) { return $route[2](); } } throw new Exception('Route not found (404)'); } } $router = new Router(); $router-&gt;bind('GET', '/', function() { return "This is the homepage"; }); $response = $router-&gt;dispatch($_SERVER['REQUEST_METHOD'], $_SERVER['REQUEST_URI']); echo $response;
If someone wrote you a quick router implementation here it wouldn't be "written by your hands" though. ;)
It has been in development since around May 2013, and we had our first site running it around November 2013
You can still run C# on linux using Mono. It pretty much supports everything now. And also microsoft revealed that .net is becoming cross platform soon
&gt; You send them a one-time-usable link that logs them in and forces them to type a password of their choosing. Sending random passwords in plain text is problematic because a) plain text email can be and is being intercepted To play the devil's advocate here, sending a plain-text email vs. a URL with a token so the password can be reset on a webpage are pretty much equal. In either scenario, you have to send something to the user in plain-text, which both can be intercepted and used illicitly. The one difference of being time-based for the reset token is good, but if a malicious user can intercept the URL via email, then really all bets are off. Now, the real security to sending a URL versus a randomly-generated password is that in the timeframe between generating the new password and actually having the password reset, the new random password is at risk of being cracked - especially if the randomly-generated password sucks with respect to password strength. Really the focus should not be on whether you send a random password via email. The focus should be on the other layers of security - a time-based token that expires if not used, secret questions/answers (this one is arguable), resetting the password live on the site (assuming the user still knows their old password), off-loading authentication to a third-party service (eg facebook, et al). If, for whatever reason, you do have to send someone a password via email, then you need to be absolutely sure that you generate the best possible password that your site requires. Lead by example. PS. For what it's worth, I agree with the sentiment about a) not randomly generating passwords, and 2) not sending them via email. But, if a business requirement dictates otherwise, then I have to put my dogma aside for the business and do the very best that I can given the hand I'm dealt. 
Comments like these should be downvoted, and I'll explain why. Not only does in add nothing to the discussion, it also a mixture of [feigned surprise](https://www.hackerschool.com/manual#sub-sec-social-rules) and just being an arrogant dick, and bitter know-it-all. No offense - I doubt that this was your intent, but we'll have to at least try to be inclusive and polite.
Check your variables, they probably have a quotation mark in them. FYI, this is a very insecure way of building your queries. Look into named parameters.
Also hur dur rada rada rada. You might want to use http://www.reddit.com/r/phphelp next time you seek help.
nope, that is not the problem he is having. (with the other advice being good advice.)
Few questions: 1) May I know if there are any specific framework being used? I've read that Symfony components were used, but no mention of it as a whole so I guess you are not based on any framework right? 2) I understand the needs to be more future-proof than magento and alikes, but what are your opinions on Sylius, Thelia and Elcodi? Thanks!
Will definitely look into named parameters - appreciate the advice!
Understood - appreciate everyone's advice. The missing period got it to work the wrong way - now to go back and do it the right way with prepared statements. Thank you!
Well C# isn't that different really. Also as people already stated moving from a CMS to a framework is kind of overkilling it since you'll pretty much have to write your own CMS. Why not Wordpress or Drupal or whatever?
exactly the same code as posted in your example: var colours = [ " '; $html .= implode(' " , " ',array_slice($colours[$i],0,10)); $html .= ' " '; Your old coder was just bad.
I actually found the fizzbuzz to be an interesting test. I interviewed at Clickbooth in Sarasota and I was given this test. I ended up whiteboarding this: https://raw.githubusercontent.com/scottconrad/clickbooth/master/fizzbuzz_eval_elseif.php While the interviewer suggested.. perhaps rightly that this was more readable: https://raw.githubusercontent.com/scottconrad/clickbooth/master/fizzbuzz.php But it annoyed me for a few days, so I went ahead and wrote it in the 2 different ways above, omitting the print stuff which didn't matter, and saw which one was faster. The first one is, by about 15% or so because it doesn't assign a variable. I'd also skip angular and go with react. There are a ton of jobs for angular right now but react is really the right solution, it just needs another 6 months or so to catch up with angular IMO. This is coming from a guy that has 3 years of experience with angular.
A lot of these should be looked at for implementation into php7 core 
I love the idea and would totally use it, but you may be asking for upvotes in the wrong place. I think you want to get the syntax defined and approved by the 'official' PHP Docblock standard. I'm not sure if their [website](http://www.phpdoc.org/) or [Github](https://github.com/phpDocumentor/fig-standards/) would be the best place to propose it. While they are lovely, the Jetbrains guys are really not the right people to be inventing new features for PHP Docblock.
https://github.com/nikic/iter
&gt;PHP even allows you to import functions now. What?! Amazing! [Close this bug?](https://bugs.php.net/bug.php?id=62162) 
Sooo...when do you think it will be up and running? ^^^I ^^^WANT ^^^A ^^^COPY!. ^^^I ^^^CAN'T ^^^STAND ^^^OPENCART ^^^ANYMORE!
You need auth.net :) at least the DPM and Hosted CIM methods...
Well, a rare case, but you're not handling a false return from openssl_random_pseudo_bytes(), so if your entropy gets starved, this code will start generating the same token (in this case, a blank string). You're also not using the crypto_strong return flag, so you have no idea if you can trust the random generator, you're just blindly using the return of it. This is why RandomLib is useful, it takes care of these things for you. 
HOPEFULLY by the end of next month!
&gt; Even if the link is only valid once, if the malicious user gets to it first, then they can just change the password to something of their choosing, log in and change the email address on file to something that they control and the real user doesn't. Which gives notification to the user who was expecting the password reset email that something's not right. This allows them to raise the alarm that their account is being taken over. If the password in an email is intercepted and never changed, then the attackers can silently log in as the target without the target knowing. 
But that doesn't solve the problem. The fact is the 'else' is two spaces further in. It's awkwardly misaligned by half a tab. If you were using 2 space tabs for whatever reason it's even worse.
I still think this is a school assignment or something along those lines and he got you to do his homework. lol
Framework is doing no queries because rather than using the ORM there are a bunch of raw queries everywhere.
Version 1 is making money. Version 2 (undeployed) was supposed to be completed by the contractor, but he has left it an unusable and non-working state. It can literally take anywhere from 10 seconds to a minute for a REST call to it to complete...
I particularly laughed at reimplementing functions that already exist in the std library because they're so useless as they are. lol, php. lol.
No kidding.. A conference going on and the subs quality just drops..
I think we need some kind of FAQ on here as this question gets asked regularly. See https://www.reddit.com/r/PHP/comments/2ppwg1/new_php_dev_stuck_with_spaghetti_code_help/ https://www.reddit.com/r/PHP/search?q=rewrite&amp;sort=relevance&amp;restrict_sr=on&amp;t=year https://www.reddit.com/r/PHP/search?q=legacy&amp;restrict_sr=on&amp;sort=relevance&amp;t=year
Being a common practice doesn't make it a best practice.
relevant to vim: yup relevant to sh: uh huh relevant to php: nope
Does it support digital products sales, or the order pipeline goes forcibly through shipment?
what is Groot?
As of yet, it does support digital sales I'm afraid but it is certainly a feature we are considering for the future
Why not just give them a temporary password that forces a new password at first log in? In practice it's the same thing as a password reset link. And if you're worried about emailing, there's no security advantage to putting a password reset link in an email rather than a temporary password.
I'll look into it when the code is release, I might contribute in that area :)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Groot**](https://en.wikipedia.org/wiki/Groot): [](#sfw) --- &gt; &gt;__Groot__ (also known as the __Monarch of Planet X__) is a [fictional character](https://en.wikipedia.org/wiki/Fictional_character), a superhero that appears in [comic books](https://en.wikipedia.org/wiki/Comic_book) published by [Marvel Comics](https://en.wikipedia.org/wiki/Marvel_Comics). Created by [Stan Lee](https://en.wikipedia.org/wiki/Stan_Lee), [Jack Kirby](https://en.wikipedia.org/wiki/Jack_Kirby), and [Dick Ayers](https://en.wikipedia.org/wiki/Dick_Ayers), the character first appeared in *[Tales to Astonish](https://en.wikipedia.org/wiki/Tales_to_Astonish)* #13 (November 1960). An [extraterrestrial](https://en.wikipedia.org/wiki/Extraterrestrials_in_fiction), sentient [tree](https://en.wikipedia.org/wiki/Tree)-like creature, Groot originally appeared as an [invader](https://en.wikipedia.org/wiki/Alien_invasion) that intended to capture humans for experimentation. &gt;The character was reintroduced as a heroic, noble being in 2006, and appeared in the [crossover](https://en.wikipedia.org/wiki/Fictional_crossover) comic book storyline "[Annihilation: Conquest](https://en.wikipedia.org/wiki/Annihilation:_Conquest)". Groot went on to star in its [spin-off](https://en.wikipedia.org/wiki/Spin-off_(media\)) series, *[Guardians of the Galaxy](https://en.wikipedia.org/wiki/Guardians_of_the_Galaxy_(2008_team\))*, joining the team of the same name. Groot has been featured in a variety of associated Marvel merchandise, including [animated](https://en.wikipedia.org/wiki/Animation) [television series](https://en.wikipedia.org/wiki/Television_series), [toys](https://en.wikipedia.org/wiki/Toy), and [trading cards](https://en.wikipedia.org/wiki/Trading_card). [Vin Diesel](https://en.wikipedia.org/wiki/Vin_Diesel) voices Groot in the 2014 film *[Guardians of the Galaxy](https://en.wikipedia.org/wiki/Guardians_of_the_Galaxy_(film\))*, and Krystian Godlewski plays the character via [performance capture](https://en.wikipedia.org/wiki/Performance_capture). &gt;==== &gt;[**Image**](https://i.imgur.com/uEEYS56.jpg) [^(i)](https://en.wikipedia.org/wiki/File:Gotg_2.jpg) --- ^Interesting: [^Groot-IJsselmonde](https://en.wikipedia.org/wiki/Groot-IJsselmonde) ^| [^Groot-Jongensfontein](https://en.wikipedia.org/wiki/Groot-Jongensfontein) ^| [^Adriaan ^de ^Groot ^\(software ^developer)](https://en.wikipedia.org/wiki/Adriaan_de_Groot_\(software_developer\)) ^| [^Groot ^Henar](https://en.wikipedia.org/wiki/Groot_Henar) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cnykkdc) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cnykkdc)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
You appear to have chosen to license the code under the GPL. So basically anyone developing sites with this would not be able to prevent people from reselling those sites. That seems...like it might affect people's choice to use it?
Enlighten me. What more can I add to an audit trail with a token that I can't with a one time use password?
It may be the wrong choice and in that case we will have to change the license, but my understanding is that the codebase is essentially what sits beneath the site. When you run the installer you download the application using Composer, and then a skeleton theme that sits on top of it. The theme is where all your custom code goes, and effectively acts as another module for the application. The theme is editable and belongs to the developer, changes made to the theme for the sake of the client belong to the developer. I guess this is something we will need to clarify in th license!
With a password, until the user enters the password you have no idea if they're actually trying to log in or if they're trying a temp password. Your user logs would just show a login, followed by a user profile change. These are not stand-out logs. With a password reset token (and thus different URL) you know the intent, and can log it as such. You can thus have better logs for things like token re-usage, expired tokens, successful token usage and then the next log of 'user profile changed' makes sense just on the context of the logs. This introduces a better quality of information into your logs, adding value to your audit trail.
UPS!
&gt; Although I'm sure there's a way to have .htacess redirect all requests through the php tool! Yes, yes there is. The following rule will redirect anything to index.php: RewriteRule . index.php
Maybe write a Monty Hall simulator. Keep track of win percentage and see if it really is best to switch doors lol. http://en.m.wikipedia.org/wiki/Monty_Hall_problem 
I also work in a lot of legacy systems, in which I'm not free to convert the entire application to a framework. Typically I will do something like this to refactor. I'll extract all of the Javascript out into a separate file, then include that file. If the JS needs some data from the server, I will typically in the .php file include a `&lt;script&gt;` snippet and dump some data from php into js like so: &lt;script&gt; var whateverNamespace = whateverNamespace ? whateverNamespace : {}; whateverNamespace.var1 = &lt;?php echo json_encode($phpVar1) ?&gt;; whateverNamespace.var2 = &lt;?php echo $phpVar2 ?&gt;; &lt;/script&gt; That way all your variables are neatly encapsulated. Unfortunately your javascript will have to wait until the page loads to execute. If you're using jQuery this isn't a problem. Your other option is to separate out the needed data from your php page and load it into your javascript through AJAX calls.
How do you mean? Early access or after we open source?
Now I'm just curious. What was the reasoning for insisting that you write everything custom?
Never say *NEVER* about other people's use cases... Consider: * Assigning accounts to first-time computer users (e.g. in a K-12 school) * Providing password resets over the phone (the login may be needed to get to email and users may not have secondary emails)
Yes, that's pretty much it.
Thanks for this! Of course I didn't exclusively mean things like FizzBuzz, everything that expands knowledge was welcomed! In your opinion, what are the top 3 "must-knows" for the industry right now? I have been out of the loop for a while, and a lot has changed. Obviously knowing WordPress would be in the top 3, so you can leave that one out!
&gt;However, the world has changed since ZF2 was released, and the project needs to move with the times. With that in mind, we have gathered feedback from our users and core contributors to map the path forward. I seem to remember the same language used when ZF2 was announced. I see a new point release happened with ZF1. How much longer will it be supported? Not that I have a vested interest or anything... :/ 
+++1
Both cases can still be handled by reset tokens rather than an actual password. I'd assume in the lower end of K-12 students wouldn't get their own logins, and in the latter ends of K-12 students would be expected to know how to handle passwords. I know that when I was in school in the UK (in what would be the equiv of grade 6 in the US), account setup was done via each of us, in turn, creating our passwords via the teacher's admin account. (with them guiding the process, not giving us admin access). Password resets in such situations required seeing an IT teacher. At no point did the admins need to know our passwords, even a the start. In fact, for the second case, due to the unreliability of SMSes ([~5% of all SMSs never reach their target worldwide](http://lekab.com/wp-content/uploads/2014/06/How-to-Evaluate-Your-Companys-SMS-Supplier.pdf)), I'd want to send them a slightly longer lasting time limited token for sure. A password, even temporary, would be a bad idea. Secondary edit: Phone might mean via spoken word. In which case I would want to avoid such a situation due to the fact that such ability would introduce a nice social engineering hole in the password chain.
The hourly charge works on 'when your machine is online' not 'when your machine is working'. So, if your use case is to have something run once every 3 to 4 hours, and you can schedule your machine to turn on and off around that window, you can save a lot of money. Otherwise AWS servers aren't particularly cheap for small use cases. AWS' (and others such as Digital Ocean) hourly billing is usually targeted at bigger enterprises where you have a scaling demand. For example, your service suddenly needs more power because you're getting featured on a default sub-reddit, so you spin up new servers for a few hours to address the extra demand.
Yet I'm still maintaining a ZF1.11 app. FML.
You pay for each hour or part hour. Imagine starting 5 servers, waiting 1 second then turning them off - that would be 5 hours of cost.
&gt; How much longer will it be supported? Not that I have a vested interest or anything... It's going to be maintained for a while, but not officially by Zend (the company), just by the community and the CR team. Lots of folks are still using it, and security issues are still patched into it immediately. 
Look into RewriteLogLevel and RewriteLog. You can output exactly the info you listed with those two directives. You /could/ do a PHP based router - but it'd just be reinventing the wheel, and it would be difficult to get the same level of performance out of it. On that note; .htaccess files are slower than having the directives and rules in apache's startup configuration.
Also [Carbon](https://github.com/briannesbitt/Carbon)
My understanding is that RewriteLogLevel and RewriteLog are deprecated in favor of LogLevel. And I had a hard time getting that to give me the right level of detail - like one line per redirect, and one line per pass-through (no redirect). The alternative would be to write/find a parser of some sort for that log file, which probably makes more sense.
Right you are, TIL (: I haven't used LogLevel for rewrite logging before. Does it prepend lines with a related string you could grep for or something?
Normally I'd agree. This is the one instance that I don't as either outcome is acceptable so isn't an error.
current will use the iteration pointer for that array. It can be problematic if you're inside a loop. I'm not saying array_shift is any better, hence there is a reason some util classes have an "array_first" type function. An example where current fails: $a = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3, 'd' =&gt; 4, 'e' =&gt; 5]; foreach($a as $index =&gt; $value) { if($index == 'c') { $front = current($a); var_dump($front); //Outputs 4 } } $a = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3, 'd' =&gt; 4, 'e' =&gt; 5]; foreach($a as $index =&gt; $value) { if($index == 'c') { $front = array_shift($a); var_dump($front); //Outputs 1 but the array is damaged } } 
Write the code to run to a file, include that file. That's essentially what `eval()` does anyway - it doesn't actually write to a file, but it works identically to `include`.
&gt; `$this-&gt;routes[] = [$method, $uri, $action];` You could also do `$this-&gt;routes[$method][$uri] = $action;` and match by doing `if (isset($this-&gt;routes[$method][$uri]))`, if you'd like. 
...and it turns out my old server uses the previous version. With this in place in httpd.conf: RewriteLog "/var/log/httpd/rewrite.log" RewriteLogLevel 2 (and bounce Apache) I can do this: sudo tail -f /var/log/httpd/rewrite.log | grep "rewrite"
Hmm my bad, when I first looked at their Github for some reason I gathered that they had all their stuff in one repo, but I guess that is just the 'complete' platform.
It looks pretty cool, but scrolling all the way down made me notice that it does the exact same thing with the constants... :( I don't think I trust it now. Edit: it adds a particularly cool one: WEEKS_PER_YEAR, which is supposed to be 52, but because 52 times 7 is 364 some years have a 53rd week in their calendar.
 &gt; `if (isset($this-&gt;routes[$method][$uri]))` `if (isset($this-&gt;routes[$method], $this-&gt;routes[$method][$uri]))` You're welcome. 
It's not separate. Checking foo inside bar if bar is not set will raise a notice. Might not be needed here so much because GET and POST are likely to be set, but it's good to avoid such things in the first place with proper use of isset().
Never did. It goes back *at least* 13 years.
I'll look into it. Can't believe it as of now. Funny for me Edit. You're Damn right. I must be be confusing something here. 
Yes he did. I also told him in the github issue that his new code will only work on UTF8 input whereas before the code also worked on latin1 if that's any use for him. Of course his patchwork library has everything in it to transcode, so that fix would be trivial. It's funny. Reading his code and his webpage, I see a younger self doing all the bad things I have done a decade ago. The exception: back then everybody worked like this, so I was never ridiculed and my stuff was never posted on sites like reddit (which didn't exist anyways) for others to take apart. It's a learning process. As we make mistakes, we're getting better and better. Honestly, if my old code and webpage was met with the same scrutiny as today's new programmers and webpages are met with, I don't think I would have had the thick skin required to not just give up. I'm mostly referring to the critizism he got on his initial announcement thread here: http://www.reddit.com/r/PHP/comments/x3rbr/just_released_utilphp_lots_of_useful_functions/c5j3rzy which has lead to him deleting his account. Yes. Antony was right to critizise him, but honestly this would have been possible with slightly less harsh words
But then you get a CS grad who does know the absolute minimum programming, but doesn't know what oauth, rest, soap, authentication, request/response, csrf, xss, web servers, or anything else related to web development, is.
How long do you need the server for? AWS has the [free tier](http://aws.amazon.com/free/) for one year from signup, which includes 1 micro instance, 30gb of EBS storage, S3 space, and also a few other things. If it's only a temporary project, you could easily get it all for free for a year!
The line numbers have changed since you commented. [Here's a fixed link for the lazy.](https://github.com/brandonwamboldt/utilphp/blob/master/src/utilphp/util.php#L815)
&gt; it's not possible to use any other type of alternative method to load and run the plugin. I don't believe you.
Yo, I actually didn't delete my account back then, I deleted it much later for unrelated reasons and created this new account :)
Glad you think so! I definitely did expect my library to be so popular when I first created it!
Basically. While WordPress has a lot of flaws, working in other systems made me miss a lot of their utility functions. I decided to make a drop in library for other projects. Definitely not for everyone.
Yes, and PHP has been around for two decades, with this bug being fixed about a decade ago. I'd call that "briefly".
+1
Maybe PyroCMS. It's currently built on top of CI and most of the heavy lifting is handled out of the box.
You also pay for ebs storage. So when you stop a server you still pay for the hard drive until you terminate it completely (stopped can be restarted, terminated are gone forever). That will be literally pennies on the month with the default drive size though.
I use [Image Intervention](http://image.intervention.io) in one of my projects and I like the API. Might work for you too? 
Seconded. The language could happily exist without eval, and should.
I like this. Not the naming or bundling into a single class (as someone mentioned, amateur hour), but basically the extension of common tasks that should be part of SPL. I work mostly in Kohana nowadays which offers many of the same functions. I find the gravatar one interesting. Is it really that useful? I can see a few of these breaking regularly based on server configure and access, make sure that's documented (I'm looking at gravatar and is_https). Otherwise, neat!
&gt; also can anyone confirm this claim is indeed true? That is true. I agree that eval is a horrible solution in the first place, find another way.
Laravel has built-in authentication and the Eloquent ORM makes CRUDing users stupidly easy. When Laravel 5 ships, you can choose to enable it with a simple starter app that has registration, login, and password reset forms/controllers built for you if you need something quick. Plus it has commands to run database migrations for users tables, password reset requests, etc.
&gt; Separating components into individual, versioned projects. This is great. We'll start seeing a lot more of Zend's high quality components being used in other projects now.
Well I boought personal license 40% off, for 60$$$$$!!! Yatta!!
You could check out [Kohana](https://github.com/kohana/). I moved to it from CI years ago, and found it an easy transition. 
A proper compiler and a serious project system that doesn't force to a bunch of retarded "include" crap on every single fucking file? No? then IDGAF.
Another potential bad idea is of you set auto scaling to scale to frequently as it doesn't reuse the same instances. The bees with machine guns use case can be really expensive - try loader.io as an alternative in some situations.
Party! Just realised the RFC for changed from covariant to invariant return types. That's even better! Eg if I say FooInterface::make() must return a FooInterface then if you create Bar, which implements FooInterface, then Bar::make() must also return a FooInterface. That means it's much harder for Bar to violate the Liskov Substitution Principle.
Laravel is the CodeIgniter of 2015. Enjoy. 
This RFC purposefully omits reflection support as there is an open RFC about improving type information in reflection: https://wiki.php.net/rfc/reflectionparameter.typehint
Does it do that for all timestamps or just ones you define? If it's just ones you define are you overriding the getDates() method in your model to include your custom dates too?
That's pretty cool. I like the balance Laravel has where it takes the chores out of your hands but still allows you the control you want.
Yet another one ?
&gt; That means it's much harder for Bar to violate the Liskov Substitution Principle. Covariant return types don't violate LSP. LSP can be summarized as Child classes should accept more liberally, and produce more strictly. Meaning that the child must accept any argument the parent can accept. But everything it produces must be the same (or narrower) than the parent can produce. That's called covariance and contravaraince. Covariance is narrowing of the type, and contravariance is widening of it. interface Foo {} interface Bar extends Foo {} Covariance would be a parent returning `Foo`, but the child returning `Bar`. Technically the child's return is still 100% compatible with the parent's (and will work where any call to the parent works). Contravariance would be the parent accepting `Bar` as an argument, but the child widening it to `Foo`. That means anything the parent accepts, the child accepts. But the child can accept more. Parameters can be contravariant, returns can be covariant. Still following LSP 100%. In this case, it's invariant because it's hard to make covariant work with PHP's compiler (including edge cases around autoloading)...
I dunno, I've seen code where I can't see any alternative to eval. How would you handle a theme system where multiple plugins can extend the base theme class? (Eval is used to rewrite the classes on the fly to create an extend chain.)
Odd. Must be a weird quirk between Postgres &amp; Eloquent
[Glide](http://glide.thephpleague.com/) actually uses Image Intervention, it's not a competing library. Glide provides an nice HTTP based API around Image Intervention, similar to cloud image services like [Imgix](http://imgix.com/) or [Cloudinary](http://cloudinary.com/). For example: https://glide.herokuapp.com/kayaks.jpg?w=1000&amp;gam=.9&amp;sharp=8 Try the live example [here](https://glide.herokuapp.com/kayaks.jpg?w=1000&amp;gam=.9&amp;sharp=8).
Check the readme on the repo you posted. The second line is going to be your problem.
What are some other ones? I may be looking for something like this. 
I've been there before, it sucks. Eventually I stated to feel my career stagnating. I wasn't learning anything or being challenged in anyway, so I put together a plan to get out. My advice would be to start looking around at other opportunities, and when you go into the interviews make sure you have some questions of your own to ask the employer so you get a feel of how they do things and dont wind up in the same situation. Where are you based out of right now? Maybe some people on here know of some openings.
idk why but java devs just hate php more than other devs 
The selfie stick works.
This is only a problem in PHP specifically. In Java, if you have an `UploadsDirectory` that is held in a `Directory` reference, calling any method on it that would return an `UploadedFile` is going to be returning a `File` in the eyes of the consumer (because `Directory` returns a `File`, and that's what you have), and the compiler will not let you call methods that don't exist on `File`. interface Directory { public File getFile(string filename); } class UploadsDirectory implements Directory { public UploadedFile getFile(string filename); } class File {} class UploadedFile extends File { public void uploadOnly() {} } // ... Directory dir = new UploadsDirectory(); // Returns File in the eyes of the consumer, not // UploadedFile because Directory::getFile returns // Files File myFile = dir.getFile('myfile'); // Triggers compiler error myFile.uploadOnly(); PHP only checks the type on the way in, after that you can call whatever you want and if the object understands the message, it will respond. Just one example of the weird shit that happens when you start trying to do type enforcement in a dynamically typed language.
we would need a stable sort first
Maybe? We've hired several people who were quite accomplished Java developers but wanted to work for us writing PHP mostly because the company is awesome and there are lots of opportunities to do something really cool; maybe they just bottle up their hate deep down inside.
Well yeah, it is. 
Yea, it's unfortunate since I usually try to stick around for a few years before moving on to a different company. I've been working out of Manhattan for most of my professional career. It really is a great area for people who perform our line of work. I'm just hoping that I don't get blackballed for leaving too early or something.
I can already see many use cases for this: Are you human?: most assuredly indubitably yesssssssssss Are you happy with the custom service provided?: sure thing Do you agree to the terms and conditions?: aye, of course
Oh that's easy to explain; PHP gives them massive cognitive dissonance and they (fail to) resolve it by shitting on PHP. Basically is that: * They believe Java is _obviously_ a superior language to PHP. * PHP developers for some mysterious reason seem far more productive that Java developers. * Despite Java being a faster language, because of PHP's 'shared nothing' model it's actually easier to scale PHP. Which leads to Java developers just not having a fun time whenever they are working on web projects, with their projects running over schedule and budget while those 'stupid' PHP devs just get on with delivering stuff at a rapid pace. Rather than admit that maybe, just maybe, Java isn't a good choice for making websites/services with, they shift the blame onto PHP for being 'hacky'. 
I'd say there's a lot of smug Rails developers in the same boat. I use Rails at work and PHP at home. I like both tbh.
I am just low level worker, and the team leader is responsible for the project, and he is also a programmer, so he will know if I use some 3rd party library. 
What's the alternative? How would you allow multiple people to extend some particular functionality?
&gt; No, run away, Lol, thanks this cheered me up for some reason. 
It's in new hands but its built up from clueless developers from the CI channel over at freenode who couldnt tie their own shoe laces if their lives depended on it. CI 3 is still not released. CI 4 will most likely just be the same but with namespaces. There is no creativity, ingenuity, impetus, no far reaching ideas that Laravel has and continues to do so. CI is dead. Done. Let it go.
https://www.youtube.com/watch?v=7FPELc1wEvk
I'm always puzzled when some people hate on PHP for its lack of type safety and the late addition of namespaces, then go on to talk about how they love Node.js.
sensiolabs insight scrutinizer
ORLY I've never heard this before *sigh*
I may not have been clear - I've compared PHP frameworks to Grails - there are always differences, and some things are nicer in PHP, but I'm *usually* more productive at most tasks in Grails. Not always, but often. I suspect I would be in Play as well, but haven't used it in several years. PHP ORMS by dint of the PHP language have to use annotations in comments or extra mappings - things that can be determined by compile-time work in Grails (or run time reflection, in some cases). class Employee { String name String employeeId String email } That's a valid domain class that is processed by the ORM layer, an actual database table SQL can be made from that (or migration changes based on class diffs), and I can run things like def people = Employee.findAllByEmailLike('%@msn.com') There's nothing in PHP that can come close to that, for example. Doctrine1 was close, but the team felt it was better to get rid of this possibility altogether. Are there tradeoffs? Of course - there's a compilation step which is annoying at times, but the speed is generally worth it in production. Are there things that PHP is better at? Sure, I bet there are. But by the time a practice or technique would make its way in to a 'framework' of sorts, due to the nature of PHP as a language, it will more often than not expose necessary ceremony. I've looked at and followed all the major frameworks for *years* - they often end up in pissing matches over who has a better routing system or templating system, and usually leave the hard stuff ("turnkey generic security system") to people to fend for themselves. EDIT: Simply by having class member types - String, Int, Float, Date, etc - in a class instead of just "public/protected/private" visibility modifiers, this enables a lot of runtime stuff in frameworks and IDEs. If you think &lt;?php class Employee { /** * @Type String */ protected $name; } is similar... that's exactly the sort of stuff I'm referring to as ceremony. *hack* is interesting because they're building support for this in the language, and may lead to some newer interesting frameworks that take advantage of this, but then it's not really PHP anymore (yet?) 
If you consider yourself a PHP developer and *don't* hate PHP, then you probably haven't used it long enough.
Anorexia works too. 
PHP has been getting a bad rep lately. I don't understand why. I personally think that there is a lot of freshmen devs coming into the market, and they are carrying with them a lot of Python, mostly front-end javascript garbage, and framework hacks. There's too much emphasis put on the "coolness" of a language, and not enough on the practicality of getting something done. PHP is a great language to dev in still. Sure, it needs improvement, but it does a lot if used correctly. Oh btw Rails sucks! And it's not a language!
It's undoubtedly useful, and I really don't mean to be a jerk about it. After a while of doing this and digging into bigger architectures and whatnot, some of us get into code-perfection navel gazing. A lot of it is because we spend so long working in these environments, we thrive on elegance and design patterns and code without rough edges. In the end, getting something up that works is all that really matters, and it's not as though any of this introduces spaghetti code, especially for small projects. For bigger projects, you lose some things in the way of extensibility, distributability, and code control when you make monolithic utility containers like this. But for most people that won't matter - there are more types of programmers and more types of projects in the PHP community than many others, it's unlikely any one package/framework/utility will fit everyone's style or needs.
TypeScript solves a lot of those problems. I haven't written normal JavaScript in a long time. 
If you do open source Web development windows WILL give you a harder time. I say this as the open source guy in an MS shop. The tool makers just don't care as much for Windows and there isn't a terminal emulator that can come within a mile of the Nix offerings.
I use PHP daily, and with Composer and its autoloader, Twig and some basic guidelines (basically don't mess up the design and write one .php file to rule them all) I am very happy with it. I always thought that people hate PHP because it allows you to screw up harder than other languages.
What kind of feature toggle requires you to nest a class around an if?
&gt; This is coming from a guy who prefers to run Gentoo and KDE. Best combo ever!
Kindof, in a half-assed way: http://en.reddit.com/r/PHP/comments/2sx5x3/what_changes_would_you_like_to_see_in_php_7/cnw2q3q
I know it's sufficient (by the way cmder is better than Gitbash) it's not a pleasant experience though. All I know is that when I'm on windows all day at the office. Working with PHP, Node, vagrant, docker and SSH mostly. I find I have much less problems when I try the same on Mint or Ubuntu Gnome, they just seems to be tested better on those platforms.
Can't you just remove full image at the end of the script.?
How does that allow multiple people to extend the same code? I'm talking about a situation where one person extends a method to add/modify functionality, then a second person independently also extends the same functionality.
Why not use the decorator pattern? Your base Theme class implements ThemeInterface, and extending classes implement ThemeInterface and ThemeDecorator, so you inject the previous theme instance into them. For example: final class BaseTheme implements ThemeInterface {} class YoloTheme implements ThemeInterface, ThemeDecorator { public function decorates(ThemeInterface $decorated) { /* snip */ } public function createSomeThemeThing() { return '&lt;div class="yolo"&gt;' . $this-&gt;decorated-&gt;createSomeThemeThing() . '&lt;/div&gt;'; } } Create the BaseTheme and then add the decorators in whatever order you choose: $theme = new BaseTheme(); foreach($registeredThemes as $registeredTheme) { $registeredTheme-&gt;decorates($theme); $theme = $registeredTheme; } 
I thought Gentoo died years ago. I know they had some serious drama. That it is still around is encouraging to me.
I'm an Android/Java developer. I miss PHP every time my app crashes with a NullPointerException.
Because java is dying in the web world.
Do you really think that the "is this a string less than 45 characters that isn't blank" rule should go on the form or controller level? Personally I think that if the rule is a business rule, it should go either on the value object for that field or the entity.
Leave. You're not going to learn anything there, don't let money obfuscate you.
An experienced programmer hates every language, but for different reasons.
Because theyre still getting their news from slashdot
Sorry, I don't speak potato.
That's what I thought. Thanks for the clarification. Yeah we are currently using jQuery for the client-side (although I may take this opportunity to see what other client-side frameworks exist). I was just checking to see if someone had developed a framework that combined the server side PHP and client side (javascript/jquery/backbone/etc) into one development environment, however it looks like both are still developed independently of each other.
As much as I and lots of other developers would love frameworks like CI to be things of the past, they will continue to exist for a long time to come. I myself have to maintain and update an application during my day job that uses codeigniter and the fact that leadership of CI has changed hands is much needed news. We are planning to upgrade our application to CI 3 later on this year. Whilst I would never build a new application with codeigniter (I would much rather choose something like Laravel or Symfony), rewriting an application that was written in CI is simply not an option, and these upgrades that CI comes with (including the option to use composers autoloader) are going a long way to help improve the standards of current CI applications. Also it is important to remember that while CI makes a lot of mistakes in its architecture (magic getters / statics etc etc) the code one can write with it is still a whole lot better than almost any procedural project, a few of which I still have to maintain and fix bugs with from time to time. I think a lot of developers see CI or Cake or some other old framework and their instant reaction is to be over dramatic and scream and go "the world is going to end if we don't rewrite this project", sometimes you just have to work with what you are given.
Ah, well then I'd shift the blame to them . Long ass filenames is not really necessary nor a good practice. I'm sure some will disagree.
And I can bypass that completely by running OSX or Linux. Yes, Windows *can* do it but it's not native and and brings nothing to the table over the other two. Much like I *can* do .NET development on a Mac but it sure isn't ideal. That's what is the problem with any conversation like this. We're all pretty capable and damn near anything can do damn near anything if you really want it to. It's about what X can do with least amount of hoops to jump through.
I think you must live in a fairy land if you think all CI projects can just be moved to another framework in a few weeks. The CI project I maintain was inherited from a company in India, and has terrible code (read: it was made by an amateur). It is also a large project that we are contracted to work on, we do not have the choice to move it to another framework, the client isn't going to pay us to do that. Moving a simple project to Symfony or Laravel is all good and well, but moving something with over 100 models, lots of spaghetti code and large dependencies on the way codeigniter works is simply not an option. If we wanted to move to application over to Symfony it would probably cost the client in excess of $40,000. Something that is hard to justify to anybody who is trying to push a platform. It is all good and well saying "Symfony is much better than CI, I could move this in a few weeks" but sometimes you haven't got the time or funding. Sometimes it is just simply a bad idea. EDIT: I also just took a quick look at your post history and it seems like you have a real hatred of CI, so much so you are being rude / violent towards other posters on /r/PHP. I think if you actually worked for a significant amount of time in some real world situations you might understand why people still have to maintain these old CI applications. You have to balance the needs of your client with your want to produce clean and readable code. Building nice code benefits the client, but rewriting a code base barely ever benefits a client and just ends up costing them a large amount of money for 0 new features.
As others have said - refactor. I inherited quite a bad code base 5 years ago, and it's now lovely. Ended up writing a custom framework whilst refactoring (some unique requirements), and have extracted that and many other components that are now used in other web apps my company develops. Since then we've gone from a mess of procedural code, hardly any unit tests, to a sleek modern code base that uses best in breed third party components, where appropriate, and beat practises like dependency injection and other niceties.
I was referring to running a VM replica of your webserver in virtual box that runs your code independently of your host os. Then its irrelevant what os you develop on since you dont need to install php or .net or anything on your development machine
Thanks, this works. I just set the full image to go to a temp folder which gets cleaned out after everything is uploaded.
On Twitter, I'm repeatedly ridiculed for writing PHP. https://twitter.com/voodooKobra/status/494466665883910144 This is a fairly typical response (usually from C enthusiasts): Me: "Hey, I'm working on some project. Anyone see any vulns?" Person: "Yeah, I see a vuln: You're using PHP." I don't like language arguments. While there's always value in contrasting language features and keeping your horizons ever-expanding, nothing productive comes from them. All it does is foster an environment that promotes Impostor Syndrome and insecurity. As others have said, they believe the people who engage in these "my language/framework is better than your language" diatribes are acting on their own insecurity. If they are correct, it's a vicious cycle that accomplishes nothing. Better idea: Accept that no language is perfect, and if there isn't a way to solve a specific problem (or the existing solution sucks), research and write a (better) solution. Even if it means sending patches to the PHP core (and having to deal with the toxic jerks on the mailing list). This is far more beneficial than arguing with people who don't want to listen. As PHP accelerates towards its version 7 release and cleans up a lot of the cruft from the 4.x and early 5.x days, a lot of the criticisms of PHP will cease to be applicable. "Those who can, do. Those who can't, complain."
[**@voodooKobra**](https://twitter.com/voodooKobra/) &gt; [2014-07-30 12:56:54 UTC](https://twitter.com/voodooKobra/status/494466665883910144) &gt; Looking to hire a PHP developer who understands security? &gt; &gt; https://scott.arciszewski.me/work/ ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot%20Report) 
*snickers*
Yea, none of that is really the point of the saying. But thanks for the evenings entertainment by reading way, way, way too deep into an old saying. Also, here's another saying for you: even a diamond house built atop a cardboard foundation is a cheap house.
&gt; Want a bunch of threads? Not so much. How about pthreads? http://php.net/manual/en/book.pthreads.php
Now it's cool to write an endless stream of articles about it that only PHP advocates read, instead of doing something real about the perception. This is just another internal circle jerk where we sit around patting each other on the back saying "it's ok!" instead of examining the complaints to see if they're real or not, and doing something about them if they are. Take away your opponents ammunition, and you take away their argument.
Lately? PHP has had a stigma attached to it for nearly a decade now.
Both of these are great resources. http://www.laracasts.com http://daylerees.com/codebright/getting-started
We use it for collecting code coverage metrics on our dev systems - it stores it locally and then our PHP web driver system polls an end point to collect it.
I develop on Windows 7/8 and our production server is a managed dedicated server running CentOS 6. I've never had an issue due to different environments. I run Xampp for Windows and set things like memory limits high. Production has memcached and varnish, local doesn't. No issues. Tried Vagrant, hated it. Tried Laravel Homestead, hated it more. 
Just to be clear. The issue is actually the pathname. npm deeply nests folders and most windows utils have a 260 char limit for file/pathnames. This forces you to 'move' nested folders to a higher tree in order to delete them.
Whee! I drew this and Ren &amp; Stimpy is one of my major influences - thanks for the compliment.
&gt; I'm just hoping that I don't get blackballed for leaving too early or something. From that company? No problem. From other companies? Unlikely. It should be easy to explain to other employers why you left, and anyone worth their salt should understand. It also gives you the opportunity to ask informed questions in future interviews, which make you look good.
I've never heard that "saying" before. Actually I've never heard the diamond house one either. I guess this just goes to show Reddit is multicultural 
Actually, analogously, PHP would be more related to Windows than Mac, if we were to assume PHP libraries to (insert some other server-side language here)'s libraries = Windows programs to Mac programs
How so? 
You can catch it in PHP too, but it takes a lot more to cause a fatal error. On the other hand, I have an app right now that occasionally crashes and for the life of me I don't know why. It doesn't do it when in use, and everything works fine in the background, and the crash is deep in a third party library. Despite that, the app sometimes crashes, and there is no way for me to stop it that I can find. 
I finally broke down and even did a generic catch (I hate doing that) and it STILL crashes. I've read the stack trace in full, and still have no idea how to catch it if even catch(Exception e) doesn't. 
~~lol I tested your code, it doesn't work as you intended it to. It only indexes the last first row in each foreach loop and ignores the others~~ edit: nvm thought you were another guy And it's not that complicated, I just had comments on it so it looks like a mess It just searches for the id key in the second array, looks for the data subset in the other array with the same id, and merges the two together like an inner join would.
It's not because of some flaw PHP has, it's because you were doing it wrong.
http://php.net/array_intersect
I posted it lol, in case you haven't noticed.
Well, **you** never heard them before. I guess they don't exist then.
&gt; Java is a superior language to PHP in every way So Java has functions now? 
No doubt a more concise command can be found, but this works: (replace vendor/guzzlehttp with the path to the code you want to inspect) $ grep -rh 'throw new' vendor/guzzlehttp | tr -s [:space:] | cut -d "(" -f 1 | cut -d " " -f 4 | sort | uniq BadResponseException CancelledFutureAccessException CannotAttachException CouldNotRewindStreamException Iae ParseException RequestException RingException SeekException StateException TooManyRedirectsException XmlParseException \BadMethodCallException \Exception \InvalidArgumentException \OutOfBoundsException \RuntimeException \UnexpectedValueException edit: ahh you wanted to know about just a specific method. don't know on that one. :)
It just seems more ramped up lately. That's okay, though, because the less hacks there are with there hands on it, the more demand there is for real PHP experts.
Thanks for that link. Yes I completely agree with you that both languages (JavaScript and PHP) are independent of each other and are best to progress in their own direction. I think that's the reason why I made the switch a couple years ago to using a JavaScript+jQuery frontend and a PHP backend. Since I've been focusing on the frontend development over the past few years (and writing traditional PHP for the backend), I felt out-of-the-loop when it came to the PHP frameworks and for some reason had the idea that they began to "bridge-the-gap" with the development of the client interface (which I'm currently writing in Javascript and PHP).... in hindsight I realize PHP frameworks focus completely on the PHP side of it. A client-side MVC is the direction I'm pretty sure we'll be taking with this project, while using PHP as the backend and for the data processing. Thanks again for the info.
Mac is fine. They're all fine really, just Mac and Linux seems to have better community support.
Honestly I don't even remember why I referred to the variable globally lol, I guess I thought it wouldn't be recognized for some reason because it was inside the function scope. I know there are certain conditions where a variable wouldn't be recognized from within a function or OOP's unless you refer to them globally. &gt;That you return after all of that is also troubling, because again you've switched paradigms: if I'm getting a new array, then why go to all the trouble to change variables in-place? Which variables did I change exactly? I'm not following. &gt;Additionally, knowing so little about the language you're defending makes me feel a bit as if I'm debating a Christian about the Bible. I'm hardly a nuanced scholar in it either lol, I guess that evens out the playing field quite a bit :P
Not 40 off, but if you contact sales you can get 25% off at least.
It may be crappy, but it overcompensates for having the most libraries.
I don't disagree that it's not an easy thing to measure, and I'm sure it ebbs and flows even with individual developers over time.
That'd be a silly conclusion to draw. Not what I meant or even said at all. What I said was Reddit is multicultural. Ergo there are bound to be sayings each of us is familiar with that a portion of the rest are not. PS. Sorry for the downvotes. It's not me. I encourage discussion in all its forms.
Semantics is only one part of the problem.
unless you're doing windows-based web development (ASP.NET). Also Powershell is pretty damn awesome but it's just so *different* and new that a lot of people don't want to learn it. But yeah, I'm a Windows/Linux guy (mostly staying on Windows because of gaming) and working with tools that *should* work pretty easily but don't is a nightmare.
Once both indexes are created. array_intersect() can be used to "join". Still trivial. 
Thanks I didn't know that existed. I'll check it 
Really? Sounds even better!!
Trailing commas are perfectly valid in JavaScript, but old IE chokes on them. If you're supporting modern IE versions then you can use them just fine.
Imagine you're the person who receives the letter - written by a brand-new employee - basically whining about how he knows better and poo-pooing your systems, how do you think they'll respond? Do you honestly think they'll say "Golly, our systems are terrible we should re-structure our organisation around new employee #8574's view of the world", or would you say "What a tosser..." He may have all the valid points in the world, but a letter like this wreaks of know-it-all-ism and a smug sense of self importance - I would take one look and kick this guy out on his smug arse.
&gt; Imagine you're the person who receives the letter - written by a brand-new employee - basically whining about how he knows better and poo-pooing your systems, how do you think they'll respond? Do you honestly think they'll say "Golly, our systems are terrible we should re-structure our organisation around new employee #8574's view of the world", or would you say "What a tosser..." My thoughts exactly.
Not with JSON.
&gt;It should be easy to explain to other employers why you left, and anyone worth their salt should understand. It also gives you the opportunity to ask informed questions in future interviews, which make you look good. That's an interesting outlook. Then again I've always been told that speaking negatively about any company you've worked for in the past is often frowned upon during job interviews. 
Precisely
Your single use-case is not the point. Its the smartest decision to develop in an environment that's identical to your production environment.
&gt; I would take one look and kick this guy out on his smug arse. Oh noes. He was going to quit, and now he's been fired. Which means they're now eligible for employment benefits, whereas they wouldn't be (in most countries) if they quit. &gt; new employee #8574's He's not just some random employee, he's the first person that has been employed by the company in it's country i.e. the first person who has the technical skills to say what problems exist, and financially able to not care about losing their job. If the company doesn't want to listen, that's fine - but if they're going to quit anyway, what's the harm? 
&gt; it's too easy to write bad code and unstructured projects in it That's right, PHP requires some discipline. But once you have it, it's not an issue. &gt; PHP is -- by its nature -- coupled to both a database and an interface. It's not "by nature", it's by choice of some people. Needless to say, these people are not following best practices. PHP frameworks completely decouple this. &gt; Every PHP project I've ever seen Well, you're not looking at modern and good projects. &gt; The world is embracing RESTful services, reactive streams, and single-page applications. &gt; PHP is getting left behind 100% in that domain. How so? All of this is possible and is being done in PHP. &gt; But the caveman-level simplicity that comes with PHP means it has a very limited range of applications I agree that pure PHP is too simple for many things, but it's Turing-full language, so frameworks solve much of that. &gt; Java is a superior language to PHP in every way Honestly, I wouldn't take any 2 modern languages and say that one is superior to other in every way. There's always gotta be a use case in which one language excels.
+1 for laracasts hands down the best resource for laravel learning and has some great resources in there for making you a better php programmer in general 
Sounds like what you're looking for is a JavaScript framework... Look at Angular, I think you'll be pleased. 
Unfortunately, I don't think that works in Java. 
I find it makes me think before I try to run something. It doesn't take THAT long to upload. Especially since with git, you only upload changes rather than the entire thing.
Vagrant my friend. It's not without its shortcomings though.
&gt; Vagrant my friend. It's not without its shortcomings though. Oh, I am fully aware. There are also legitimate benefits to developing remotely and some projects almost necessitate it. My response was aimed at: &gt; Any *serious* web development should be done in a VM It's not always preferable or even practical to do so. In fact, I'd say the more *serious* you get the more you might not want to use Vagrant.
It's called array_column, at least where the children are arrays rather than objects. $myArrayIndexedByIdProperty = array_column($myArray, NULL, 'id'); Of course if children are objects just array_map() them to arrays first.
Your remote dev server is likely a VM still.... why are you trying to split hairs?
That doesn't really do what he was asking..
&gt;I've always been told that speaking negatively about any company you've worked for in the past is often frowned upon during job interviews. Definitely. You want to frame it carefully. You'll be leaving for negative reasons, there's no way around that, but it could be more "negative for you." Like /u/backwater_dev said, you want to say something about how it was clear there was no room for professional growth (and so on).
Only a bad craftsman blames his tools.
Post is garbage. OP is unwilling or unable to do any real work to help PHP, so he sits around drawing comics. Worthless.
Yeah. I (wrongly) interpreted "any serious web development should be done in a VM" to mean "any serious web development should be done in a **local** VM". 99% of the developers in my co-working office do this so I have some head-trash. I realize now that the distinction I was trying to make is not really necessary in this conversation.
&gt; Bottom line: PHP is a horrible language That's not the conclusion. You are wanting to add a feature (numeric index support) for no reason and that's just half your problem as a developer.
I don't disagree with what you're saying, I just think comics and/or articles about PHP hate aren't productive. Then they post it all here because they know there's no way to lose by making the statement that "php is fine and fuck those other guys!". The people who insist on writing them often don't have the skills to do anything else, and that's the real problem. If they'd just spend less time with self-pity, and more time with self-improvement the sky would be the proverbial limit for them. Unfortunately the community embraces and encourages self pity expression when it really shouldn't.
To clarify: you want the following result when joining the `typeA` array with the `data` one, correct? array ( 0 =&gt; array ( 'id' =&gt; 412, 'active' =&gt; 1, 'key' =&gt; 'itemName1', 'name' =&gt; 'itemName1', 'detail' =&gt; 'itemName1Detail', ), ) If so, then this bit of code will do what you want: function inner_join(array $left, array $right, $on) { $out = array(); foreach ($left as $left_record) { foreach ($right as $right_record) { if ($left_record[$on] == $right_record[$on]) { $out[] = array_merge($left_record, $right_record); } } } return $out; } I know you didn't ask for it, but I was a bit curious so I gave it a go. Assuming the names of the arrays you posted above are `$first` and `$second` respectively, then you would call it like this: inner_join($first['typeA'], $second['data'], 'id') 
Was this just a wild guess?
Okay, I'll bite: any serious server-side web developer should produce software that is somewhat portable. You *don't* want to be exactly locked to *extremely specific setups*. Before pushing out changes live you'll want to test it on a system that exactly matches, yes, but I'd argue that primary development shouldn't happen in a VM.
I'm actually involved with, and the company I work for is involved with Startups and the Toronto tech community.. There are so many meetups from Hackersnet, techinmotion, TOTechBash, MoMondays, CKX etc that happen collectively at least once a month you should be able to run into people with a similar background. If not, I'm around Yonge and College. 
But JSON isn't JavaScript.
*Disclaimer: I am a CakePHP Core Developer, though I mostly stay away from active framework development. Feel free to disagree with me, I won't go running to daddy /u/philsturgeon.* I'm going to continue to use CakePHP as I have in the past - Cake3 is definitely a large improvement over Cake2, just started a new app today and it was quite lovely - though I think it'll continue to get hate from the PHP community at large: - We don't believe in dependency injection. Well, you can implement it in your app if you'd like, but we already have enough of them (all the registry classes are an example) and it doesn't really improve much imo. - Some classes are still not refactored out. /u/gearvOsh mentioned pagination, which is something that was brought up but no one actually implemented. And tbh, pagination logic isn't so hard to reimplement - the new ORM handles that stuff quite nicely - if you need it in a task or the model layer. In some cases it just wasn't "sexy" enough for anyone to work on it. That's how framework development goes. Maybe we'll get to these things in our 3.1 - There will be lots of developers saying we still don't embrace the PHP community at large and rebuilt the wheel everywhere. Which isn't true except in places where it made sense - the ORM, our View layer. It's a monolithic framework and we made some decisions about how we want to write code based on community feedback and our own development experiences. A good example was we implemented a logger but made it PSR compatible, and our docs even show you how to swap it out with Monolog. - Static calls are usually used to configure stuff. I kinda don't like it, but it's easy enough to get around when I need to for testing. - Our docs are still kinda wonky. We did a bit of cleanup, but as with most large frameworks, you either have too little or too much documentation. I think we have too much, which makes it hard to follow. - We don't build in enough. Some people complain that we're too big of a framework, but some things are easier to do when they are built-in. We *still* don't have an official queuing library. Laravel does a good job here by providing decent integration for queuing, billing, user management, local development, etc. In the CakePHP world, we have some of this in the form of [friendsofcake](http://github.com/friendsofcake) but we haven't done a great job of polishing stuff. We can definitely do better. I personally hope we lean more on ThePHPLeague - the events and plates packages are solid examples with similar enough apis - in the future. - PHP 5.4 support. We're sticking to it since we told users we'd support it for 3.0. I believe we'll require 5.5 for 3.1, and 5.6 for 3.2, but don't quote me on that. Things I think it does better: - The ORM is a real ORM! Actually you could - and I do - use [CakeEntity](https://github.com/josegonzalez/cakephp-entity) for 2.x projects, but not a lot of people care to do that. Anyone familiar with SQLAlchemy from Python land will see a lot of similarities for the query building process (sans a session, but maybe soon) and the Table/Entity setup is a decent datamapper implementation. - Easier to setup "in the cloud". We've always been good about using the adapter pattern for stuff, and we made a few changes to make it simpler to do environment-based application configuration. I might be the only one who cares about that - yay not pushing secrets to the main repository! - but I'm a huge fan. Application configuration generally got better - or at least more centralized. - Our new [View Cell](http://book.cakephp.org/3.0/en/views/cells.html) and [Form](http://book.cakephp.org/3.0/en/core-libraries/form.html) classes - Our [routing layer](http://book.cakephp.org/3.0/en/development/routing.html) is exquisite. Honestly we stole quite a few ideas from Rails. Making restful apis is easier than before - not that it wasn't easy previously - and we've made some serious performance improvements both in actual route connection as well as reverse routing. - [Bake](http://book.cakephp.org/3.0/en/bake/development.html), the [DebugKit](http://book.cakephp.org/3.0/en/debug-kit.html) our REPL - based on [Boris](https://github.com/d11wtq/boris)! - and the updated [Migrations](https://github.com/cakephp/migrations) plugin - shout out to [Phinx](https://phinx.org/)! - updated StackTraces - inspired by [BetterErrors](https://github.com/charliesome/better_errors) - are all extremely nice. While everyone has been complaining about CakePHP, we've made it a lot easier to just get your job done, and I think we're going to continue on this path. What I think we can do better: - Simpler to follow docs, and more tutorials. - Promoting community packages/projects for certain things that are important for application development (Queuing, Vagrant). - Continue to use community projects with thin wrappers. We did good work with Carbon, but I want to see the same happen for our View Layer, the Event system, our Dispatch middleware etc. - Full HHVM support. They still have to implement a few PHP features we use, but we're extremely close. [/rant]
Windows guy here and I agree. However, I still get bitten by that damned Windows file path limitation (260 chars) when running a more complex Grunt or node.js installation with those insanely deep "node_modules" directories, even when running in a VM (i.e. shared folders)
**JavaScript** Object Notation is almost inextricable from all modern JavaScript code and (as the name would imply) it was developed explicitly for JavaScript before it was adopted elsewhere. For all practical purposes, it's considered part of JavaScript because it would be incredibly masochistic to build even a simple JS application today without relying on JSON. But, ok, if you want to be pedantic, fine. We can call it an open data format. 
[Don't be so certain about support for trailing commas](http://jsfiddle.net/hwbzqdwc/). Adherence to the specification is not nearly as perfect or uniform as you would hope. I've built a few complex JS applications and trailing commas almost always creep in and manifest as a gotcha somewhere--even in modern browsers using ES5+. As a rule, I don't feel safe using JSON dangling commas, and apparently [neither does PHP](http://php.net/manual/en/function.json-decode.php): // trailing commas are not allowed $bad_json = '{ bar: "baz", }'; json_decode($bad_json); // null
My other comment to another commenter at your level explains my position, but good luck emulating cPanel, memcached, varnish, and the exact setup as a dedicated production server that is managed by your hosting provider.
I generally work with PHP and Laravel. We use a lot of Artisan commands for CRON jobs. We have scripts that do image resizing, CSV file processing and similar things like file management and permissions changes. We run some WordPress and Magento and a previous developer's custom framework which is awful.
Thanks bud. But yeah, looking for something that can generate a method tree then find any exceptions in those. Wonder if I could get anywhere with xdebug...
&gt; *It's just this invisible "thing" powering my website. What if I need different software in the vagrant box? SSH just plianly wouldn't work. I can't visualise where vagrant sits in terms of my network.* &gt; *With Xampp I know everything is local and so it's port 80. With Vagrant, where is the web server? Where is Apache? How do I restart Apache?* Have you worked with virtual machines before? Vagrant is just a puppeteer controlling a virtual machine. Your Apache is inside that virtual machine, and you can SSH into it through `vagrant ssh`, or run `vagrant ssh-config` to see the SSH connection info if you want to set up a connection in PHPStorm or something. If you don't want to see the port number in your URLs, you need to move your local Apache to a different port or turn it off, then tell Vagrant to forward port 80 into the VM. Vagrant has prepared virtual machine images configured for specific usage scenarios with all tools already pre-installed. But for serious and complex setups, you will probably want to automate the installation/configuration using Ansible, Chef or something similar.
The JSON specification disallows dangling commas; they are strictly invalid. The ES5 specification (unlike the ES3 spec) explicitly allows dangling commas in arrays and object literals so now JSON is starting to seem dated.
&gt; you really have job security and you can essentially do what you want. Nope. If I'm understanding the situation correctly, OP can do whatever his boss tells him to and nothing else.
Thanks for this. I will have another shot at using it. I'm unsure if cPanel can be replicated though.. But at least I could try emulate as much as possible.
Linux vs. Windows isn't a specific setup. There a number of PHP features that behave differently on the two OSes. If you're developing an application and not distributable software, it's ludicrous to develop on Windows hosting and deploy to Linux.
Pedantic is my middle name. :)
If scalar type hint RFC also gets accepted will they update the return type rfc to include them as well? Otherwise we once again have disparity in expectations.
In fact laravel's is just similar, but does not have the same semantics. The one the OP linked to works as streams, whereas laravel's collection library sequentially applies the operations to the full collection.
Separate reply, following up on 'magic'. Eloquent specifically *is* using 'magic' - 'magic methods' in PHP. __call() looks to be invoked. User::find(7)-&gt;phone This would invoke the phone() method, but because you're not writing User::find(7)-&gt;phone() there's a magic method __call(). The one thing I really do not like about Eloquent, but it's just copying others, it's the pluralizing of table names. If you're talking about 'magic' ... that one drives me crazy. It's not specifically Eloquent - others do it too - but... to add so much runtime overhead for so little cognitive gain is, imo... just weird. 
&gt; We don't believe in dependency injection. Completely not true. We use dependency injection extensively. We don't believe in containers as they are glorified global classes.
I index it when I'm fetching from the database like: while ($stmt-&gt;fetch()) { $userObject[$id]['name'] = $name; $userObject[$id]['age'] = $age; [...] } Is this wrong and is there a better/faster/stronger way? I love to learn.
Wow thanks for the response 
Not sure what you're saying here. I agree I think. Dated?
Why would you need cPanel on your dev environment? cPanel is just a tool to manage services on the server you use, I haven't touched cPanel in years.... For with varnish... You dont need caching for development thats for the QA... But the engine that translates your server side code and pushes HTML should be identical. I just know I've run into issues in the past with this... So the solution is to set up an environment close as possible to production. This exactly why we have docker or vagrant. 
I don't think auto-resolution will work on aliased items in the container. You need to add the item under its fully qualified class-name: $this-&gt;container-&gt;add('session.storage', 'Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage'); $this-&gt;container-&gt;add('Symfony\Component\HttpFoundation\Session\Session') -&gt;withArgument('session.storage'); Haven't tested this though, so let me know how you get on!
Ok, but that you have that deeply nested a directory structure suggests an analogous problem like normalizing a database to 5 or 6nf (unnecessary and not performant)- or perhaps the directory names are ridiculously long. As a developer, to not consider platform cross compatibility issues is either pretty amateur/naive an oversight or deliberately spiteful. There are many comparably if not more complex software packages that don't have this problem.
&gt; Installs in under 5 Minutes 5 minutes is still pretty long for an install... &gt; Utilizes Composer Sounds like you are appealing to devs more than actual users &gt; PHP 5.3.10+ 5.3 is EOL, I would make a move and utilise newer PHP features Also the name? Why CiiMS, if you wanting a blog platform why name it essentially CMS? &gt; protected as a directory name WHY!? It was the last dir to actually look in for the main files, why not App/ or CiiMS/? Your formatting and indentation is pretty crazy in some places. I know it seems like a lot of complaints, but if you release something into the wild expect it, standards are way to high for open source software.
You're talking specifically Android code? Wrapping it with Groovy *might* give you a global try/catch fallback - I've had some luck with that where things weren't caught in other libraries. But... only Groovy 2.4 can apparently work on Android - still might be too new to give it a whirl in your situation.
Thanks for the feedback, &gt; 5 minutes is still pretty long for an install... Agreed. Automated installs can be done in [~30s](https://travis-ci.org/charlesportwoodii/CiiMS). The web installation is equally as fast. Would you recommend changing the statement to match the TravisCI build times? &gt; Sounds like you are appealing to devs more than actual users There's a focus on making it developer friendly. &gt; 5.3 is EOL, I would make a move and utilise newer PHP features 5.3.10 is the bare minimum it will run on. It runs perfectly well on 5.5/5.6. 5.3 support -is- was more of a legacy thing. CiiMS does take advantage of a few 5.5 features, some of which were implemented in PHP via compatibility libraries (eg [ircmaxell/password-compat](https://github.com/ircmaxell/password_compat) for password_hash). The docs just hadn't been updated to reflect the minimum requirements yet. &gt; Also the name? Why CiiMS, if you wanting a blog platform why name it essentially CMS? It's a play on words. CiiMS is built in Yii Framework. ~ 2 years ago it was more of a CMS than a blogging platform, and the name as stuck as it's moved to more of a blogging platform. &gt; protected as a directory name &gt; WHY!? It was the last dir to actually look in for the main files, why not App/ or CiiMS/? It follows the [Yii1 convention](http://www.yiiframework.com/doc/guide/1.1/en/basics.convention#directory) for the directory structure. &gt; Your formatting and indentation is pretty crazy in some places. :/ I bounce around between a couple different computers, and a couple different editors - apparently they don't save the files with the 4 space tab setup I have. I'll need to go back in and fix that. &gt; I know it seems like a lot of complaints, but if you release something into the wild expect it, standards are way to high for open source software. Not at all. The point of this post was to ask for feedback. =)
I live in Toronto and would be up for this. I do PHP 95% of my day :) ([Blog here](http://evertpot.com/)), and I'm back there in February.
wat 
Why don't you try: $this-&gt;container-&gt;add('session','Symfony\Component\HttpFoundation\Session\Session') -&gt;withArgument($this-&gt;container-&gt;get('session.storage')); Or, if you don't want to instantiate the `session.storage` use a factory closure: http://container.thephpleague.com/factory-closures/ $container = $this-&gt;container; $this-&gt;container-&gt;add('session', function() use ($container) { return new Symfony\Component\HttpFoundation\Session\Session($container-&gt;get('session.storage'); }); PS: I haven't worked with this library so....
&gt; Agreed. Automated installs can be done in ~30s. The web installation is equally as fast. Would you recommend changing the statement to match the TravisCI build times? I would say installation in under 30 seconds with an asterisk then add somewhere according to Travis &gt; There's a focus on making it developer friendly. Should that not be normal? Why make software that __isn't friendly__ to devs? &gt; It's a play on words. CiiMS is built in Yii Framework. ~ 2 years ago it was more of a CMS than a blogging platform, and the name as stuck as it's moved to more of a blogging platform. Sticking with the name may not be the best move, it's a little misleading. &gt; It follows the Yii1 convention for the directory structure. Never really looked into Yii fully, kind of glad I didn't, version 1 doesn't look too amazing. &gt; :/ I bounce around between a couple different computers, and a couple different editors - apparently they don't save the files with the 4 space tab setup I have. I'll need to go back in and fix that. Find an editor, fall in love with it, and use it everywhere :) &gt; Not at all. The point of this post was to ask for feedback. =) :) Also you updated your readme.md, now it states it must have a minimum of 5.5 / 5.6, if the minimum is 5.6 then chances are it won't run on 5.5, if it runs at 5.3 don't lie and say 5.5 you will potentially lose people (This maybe contradictory to my points above).
Yup that's the way to do it. Paypal offer [a simple example on how to process the IPN](https://developer.paypal.com/docs/classic/ipn/gs_IPN/) on your site - basically you set up a script on your server to listen for IPNs, and once received you can process them however you like. You can tell Paypal to send an IPN by using the notify_url parameter when sending the initial transaction request to Paypal. If you prefer not to write all the code yourself for digital delivery of products, then I used to use a service called E-Junkie for selling themes and plugins. They provide you with the Paypal button to put on your site, and then they take care of delivering your downloads, putting download limits on etc.
Stop doing shared folders. You won't get that issue anymore. You could easily use an sftp client like winscp in its place.
That doesn't apply to the situation in talking about (plugins made by different people).
/r/PHP is not a support subreddit. You've been posting a lot of support threads, apparently without reading the sidebar or the message that shows up when you post. Please visit ##php on Freenode IRC, or /r/phphelp.
&gt; mainly because if the parent has no constructor then a method call to it should error That's the only thing I can think of as well. I wonder if some of the voters would have felt better about the RFC if it had included a warning or notice instead of fatal error
In addition to that, one of the reasons why it was proposed was that a number of internal classes lack constructors, but the lack of constructor is not well documented for these internal classes. A better solution to fix this specific problem would be to give those internal classes empty constructors. The whole missing constructor thing should never happen in userland code, where you could just go read the freaking thing you're extending to determine if you need to call the parent constructor or not.
FYI: the league container package was previously known as [orno/di](https://github.com/orno/di) before moved to the league. May help when searching information on it.
&gt; where you could just go read the freaking thing you're extending to determine if you need to call the parent constructor or not. Because God forbid that, unlike all the languages many of PHP's half-arsed concepts have been inspired by, the language helps you. I'm not especially invested in this particular RFC but this is a language problem, not a userland problem or even a library problem.
Yeah, I meant '__get', though I was looking at __call when I wrote that. "Users table" vs "user table" - just saying it in English *sounds* like it's possessive, not plural. Presuming the ISO standard you're referencing is http://en.wikipedia.org/wiki/Data_element_name Reading it *seems* to be "if you are trying to follow ISO11179, you need to name this way. I also see "citation needed" on that same page. A little digging shows a working draft document from meta-data.org re: ISO-11179 which states "Lexical rules: a) Nouns are used in singular form only. Verbs (if any) are in the present tense." If this as really a 100% decided standard, I'd imagine database vendors might introduce ways of enforcing it. This is, at best, a preference similar to "tabs vs spaces" (fwiw, I'm in the tabs camp). Runtime overhead - the calls to figure out how to build SQL need to get the object name, then figure out what table name to convert it to, and if you don't intentionally set a table name, it goes through regex gyrations and caching each request to determine the 'appropriate' pluralized form of the word. Why not just always use the name of the class, and don't bother with runtime lookups to pluralize (and then singularize) nouns to fit some notion of "this is a bit easier for some people to think about?" It's certainly not easier for everyone to think about. What if you only had one row in a database table? Would you then make it singular? Then update the table name when you had more rows in it? The "support" for plural names is a crutch for some folks, and introduces inconsistencies which are cognitive overhead. "users" table - foreign keys to it are "user_id" (convention, of course). Just most linguistic rules to try to capture and think about. And... when you deal with people who don't deal with English as a first language, or want to use a different language to model their data... your run pluralization framework has to be modified or disabled. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Data element name**](https://en.wikipedia.org/wiki/Data%20element%20name): [](#sfw) --- &gt; &gt;A __data element name__ is a name given to a [data element](https://en.wikipedia.org/wiki/Data_element) in, for example, a [data dictionary](https://en.wikipedia.org/wiki/Data_dictionary) or [metadata registry](https://en.wikipedia.org/wiki/Metadata_registry). In a formal data dictionary, there is often a requirement that no two data elements may have the same name, to allow the data element name to become an identifier, though some data dictionaries may provide ways to qualify the name in some way, for example by the application system or other context in which it occurs. &gt;In a database driven data dictionary, the fully qualified data element name may become the primary key, or an alternate key, of a Data Elements table of the data dictionary. &gt;The data element name typically conforms to [ISO/IEC 11179](https://en.wikipedia.org/wiki/ISO/IEC_11179) [metadata registry](https://en.wikipedia.org/wiki/Metadata_registry) naming conventions and has at least three parts: &gt; &gt;* Object, Property and [Representation term](https://en.wikipedia.org/wiki/Representation_term). &gt;Many standards require the use of [Upper camel case](https://en.wikipedia.org/wiki/Camel_case) to differentiate the components of a data element name. This is the standard used by [ebXML](https://en.wikipedia.org/wiki/EbXML), [GJXDM](https://en.wikipedia.org/wiki/GJXDM) and [NIEM](https://en.wikipedia.org/wiki/NIEM). &gt; &gt; --- ^Interesting: [^Data ^element](https://en.wikipedia.org/wiki/Data_element) ^| [^Representation ^term](https://en.wikipedia.org/wiki/Representation_term) ^| [^ISO/IEC ^11179](https://en.wikipedia.org/wiki/ISO/IEC_11179) ^| [^Synonym ^ring](https://en.wikipedia.org/wiki/Synonym_ring) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+co0g1v6) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+co0g1v6)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
It's just nested dependencies, which are represented in the directory structure. If the node graph is deep enough, this problem occurs. Not massively long directory names, or massively long file names, and *still* you're purely only making excuses for Windows as a platform. Everyone else handles it without blinking. And the same happens in normal PHP code with composer, [like here](https://github.com/pdepend/pdepend/issues/129). It's completely and arbitrarily a Windows problem.
Data is just not a service, it's data... Service is something that can crunch through it and give appropriate result. Here's how Symfony dealt with it: http://symfony.com/blog/new-in-symfony-2-4-the-request-stack Even though request stack is more or less an easy solution to the problem it's still not the best one because you introduce a state to your services. Much better approach is to always pass a request in the arguments if it's needed.
Please explain it then, because I could make that work for a system that had different plugins made by different people. I'd like to help you understand how to do it too.
Well yeah it makes sense.. Thanks for the heads up
Here's a few of my Laravel bookmarks: http://packalyst.com/ Like packagist, but with a focus on Laravel. http://cheats.jesse-obrien.ca/ Laravel Cheat sheet http://laravel.io/forum Kind of like a Laravel focused Stack Overflow http://www.laravel-tricks.com/ - http://laravel-recipes.com/ Code samples https://laracasts.com/ Some of the videos are free and quite interesting, well worth a subscription though. https://laravel-news.com/ Laravel Blog https://github.com/ludo237/awesome-laravel4/blob/master/README.md - https://github.com/chiraggude/awesome-laravel/blob/master/README.md List of other resources
At the company I work for, we had an unmanaged dedicated server with LCN. Something went seriously wrong. We still don't know what it was. But the server kept running out of RAM due to PHP hanging somewhere, and when it runs out of RAM it uses the SWAP and crashes. This kept happening over and over, causing the (virtual) RAID to rebuild. Our main website kept going offline and losing us money. LCN denied any knowledge, claimed it was an application error (if it was, why did it happen all-of-a-sudden?). We think there was a hard drive error somewhere but never got to the bottom of it. I tried my best to debug it, spent days on it, asking people in IRC for cPanel, CentOS, Linux, PHP, Apache, posting logs and kmsg etc, to no avail. So my boss, the project manager, thought it best we switch to a managed host. I knew a guy from TSOHost and we got a quote for a new machine. Much beefier and had no issues since. By fully managed, yes we lost root access, yes we have to ask them to make changes (and they do make them, to a great standard). Their support is excellent. Any additional software, we just ask, and they do it, usually within an hour. They configured memcached, varnish, Apache/PHP to our config, everything. I'm a web developer. I love Linux and hacking around, but I'm no sysadmin and never will be. I don't want to be either. I like building web applications and whilst deployment is becoming more and more important for my job as I have just been promoted to a senior, I simply don't have the time or interest to know everything there is to know about running a secure dedicated machine powering over 20 websites. So I do think we get value from our host. They alert us if there are problems before we even see them.
There's not a real difference between 'managed' and 'unmanaged' - it's just 'who's doing the managing?'. In your first case, it sounds like no one was. You're now paying someone for the discipline of only allowing certain configurations to be setup and used. You may have had some weirdness with bad RAM or similar random hardware issue - it does happen. That you've not had the problem since is likely less about them managing it and more about 'restarting everything on a new machine', which almost always solves sporadic/hard-to-track issues (especially if they were hardware related). Glad it's working for you, but it's also *sometimes* the root cause behind bad development. I've worked with clients who had managed hosting, and the answer to problem X is "we need to install package XYZ" (very battled tested answer to the problem domain). "Nope, they won't let us - it's not supported". So, team insists on writing their own XYZ - poorly and with security issues - because that was OK to install, as long as it was something the host 'supported' (PHP files are OK, of course). If it's working for you, and you feel you're getting value, glad to hear it.
Which is more significant npm or Windows? Which came first? The path limit has been a thing since before npm and composer developers were born. They apparently weren't old enough to know better, especially in software as recent as this as those which should have a cross platform ideology. Stop making excuses for poor/lazy design decisions. They ignored a constraint, this is a bug on Windows. This is like me developing Windows software and saying fuck it, I won't bother with supporting forward slashes in path specification.
I just use the sftp client as a way of editing the files in windows. If I were smart I would take the time to master vim and then I wouldn't even need sftp clients. &gt; Definitely need an authoritative copy on the host machine for safety (I.e. Vagrant halt) Why does there need to be an authoritative copy on the host? I will admit that I don't use Vagrant, I just use VMware. For safety, I use git. I commit and push changes as needed to the fork of the repo I am working on. Your Vagrant startup script(whatever you call it) should be able to just pull in the fresh repos and backed up test DB data. Even your image assets could be in a git repo. Don't do this with a free service like github, but on your own gitlab instance it would be fine. At this point, if what I'm saying still doesn't sound right then it is entirely possible that your specific situation is unique. However, I would still try and think of ways of eliminating the windows issues and not just working around them.
Can run multiple simultaneous queries or do other things while you're waiting for the query to finish, or serve a response back to the user without making them wait.
You probably don't need to do `$this-&gt;container-&gt;get('...')` as often as you might think. Given that there is a `$this-&gt;container` property suggests there are some `ContainerAware` objects, which is almost always a bad thing. I'm not the right person to dispense advice on this, but I'd be interested to see how you are using it. Dependency Injection is always an interesting discussion :)
I'm not sure I understand... Is the session repository not a good candidate for the container? In this case it seems like we have a service that allows retrieval and storage of persistent data in a data store.
Again - this is by no means a settled argument http://stackoverflow.com/questions/338156/table-naming-dilemma-singular-vs-plural-names Many people who "know better than me" are having multiple opinions there. SQL Server also didn't see fit to support any sort of 'limit' functionality in their SQL for... 15+ years? It wasn't a "dumb thing to say" - it's the logical consequence of justifying plural table names based on how many pieces of data are in the table. I'm pretty sure my previous comment linked directly to a working draft - it's from 2011. The page you linked to actually links to the document I pointed out. Further more, another document under the 'DIS' column (presuming that's under current discussion) is from Jan 2014. Here's a link: http://jtc1sc32.org/doc/N2401-2450/32N2444T-text_for_ballot-DIS_11179-5.pdf Line 876 states: Nouns are used in singular form only, unless the concept itself is plural. Verbs (if any) are in the present tense. Line 1008 states: Note: In Chinese and Japanese, this rule shall not be applied because of no plural form of nouns and no distinction of verb tense. EDIT: So... adding potentially multiple inflection libraries is justifiable? Why not just use singular all the time? You'd be in line with what Chinese and Japanese already would mandate in the first place. In a master-detail table setup, I might have Order and OrderDetail. Would you have Orders and OrdersDetails? Or OrderDetails? Already you're having to understand more convention rules, instead of always using singular. Singular means none of these issues that you need support libraries for are even necessary. Singular is simpler all around and means you can spend more time thinking about the harder parts of your application. 
A number of people were likely traveling for Christmas holiday.
That jQuery code is definitely *not* JSON. Check [the spec](http://www.json.org/)—there are no functions, variables, or comments in JSON, keys must be quoted, semicolons are not a valid character, etc. Despite the acronym, JavaScript object literal syntax is not identical to JSON, it's a superset of it. JavaScript objects can be serialized to JSON strings, but that doesn't make them one and the same. They can also be serialized to XML or whatever other format you can come up with. This conversation is confusing because JSON strings are also valid JavaScript source code, but think about it from the perspective of PHP: it makes zero difference to `json_encode()` whether your array literal had a trailing comma in it, but you'll get an error if `json_decode()` is passed a malformed JSON string that contains a trailing comma. The situation is exactly the same in JavaScript (replacing `json_encode()` with `JSON.stringify()` and `json_decode()` with `JSON.parse()`). [Here's a fiddle that might make what I'm trying to say more clear](http://jsfiddle.net/mkantor/gq6r4z82/).
Well that is exactly how it works. It implements containerAwareInterface. I probably could remove it but there are some things that I need to get from the container. Such as template engine. So then i could do $this-&gt;render() as a shortcut for $this-&gt;container-&gt;get(template)-&gt;render() if that makes sense.. 
"but does have TOP, which is the LIMIT functionality." Umm... no it's not. Otherwise they wouldn't have added explicit support for it, just way way way after everyone else. Grab rows 500-600 from a 3000 row set. TOP, then reverse the set, then TOP again, then reverse? Quite clever! Oh, just make some stored procedures! Or... just use different tech. SQL Server is generally good technology, but they continued to miss the boat on some basics for years (just like some other vendors have on other features - no one is perfect). The point on SQL Server dig is... hard to trust guidelines from a company that doesn't provide such basic querying functionality in the core of the product. If they don't think that's important, why would I trust their guidelines on other aspects of SQL? "Oof. That's not that the justification at all. You're either being disingenuous or you are not very bright." You earlier wrote "... read more naturally (my table contains customers, not customer)". Sorry if that's "disingenuous". To me that reads as one of your reasons for pluralized table names. re: ISO line 876 - you're right - goodness me - I went to the ISO link you sent, kept searching until I found *something* with the word "plural" in it, then misread its context. My bad. I can't seem to find anything specific at all - I just find people claiming "it's an ISO standard". Please, really, honestly - point me to the ISO standard specification that indicates database table names must be in a plural form to be ISO compliant. "Nobody is going to be making their db schemas in multiple languages, so stop making straw man arguments" Not everyone will be using English though. Most toolkits that support plural do so based on English, and to support something else you're now having to use multiple libraries. If you're doing everything by hand... knock yourself out. You wrote earlier "I just don't see the appeal of singular". Obviously not. If you did, this wouldn't have gone on as it has. I don't see the appeal of plural at all. It introduces extra complexities that would be imposed on everyone on a team, for the benefit of only some who have problems with a consistent singular naming process. All technology choices involve some degree of tradeoff; I've just never understood why people would willingly introduce this extra complexity when there's more useful problems to be addressing. 
If something I've said makes no sense to you, I'd prefer it if you'd ask a question instead of responding like a complete idiot.
Yes it probably could. But then I would have to always register my controllers in the container. Wouldn't I? Sorry I'm a little confused here. What do you think would be the best way to do it? Or maybe typehinting every dependency would work just fine?
We mimic this by creating events and storing them in a queue. A daemon on the server picks up the events and distributes them to forked workers. 
I appreciate your comment. I am not sure if we've achieved clarity, but agree the situation is confused.
Definitely no misunderstandings. I already know the answer to the questions I asked -- my issue is that they even exist in the first place. I simply don't agree with many, if not all of the implementations you guys chose. Cake is over-engineered, that's all there is too it.
&gt; Why not? What's stopping the third person? Because they are independent developers writing independent plugins. Sorry I don't know how to explain it better but if you understood you'd realise traits make no sense here.
Could we change the name? "Moron" isn't a terribly nice word, something like "Newbie" might be better.
Alright. First, you make your contact form in HTML somewhere: &lt;form action=/send_msg.php method=POST&gt; &lt;label&gt;Your Name: &lt;input type=text name=name&gt;&lt;/label&gt;&lt;br&gt; &lt;label&gt;Your Email: &lt;input type=email name=email&gt;&lt;/label&gt;&lt;br&gt; &lt;textarea name=message&gt;&lt;/textarea&gt; &lt;input type=submit&gt; &lt;/form&gt; The crucial bit is the `action=/send_msg.php method=POST` part. That tells your browser that the data in that form must be sent to the `/send_msg.php` URL, and should use the "POST" method which is used for actions that change something (send a message, delete a file) rather than "GET" which is used for just fetching some information (get a list of results). Also, stuff done via POST doesn't have the details show up in the URL, unlike GET. So you'd send messages or log in using a POST, but maybe do a search or display an article using GET. Then, you make your `/send_msg.php` file: &lt;?php mail( "foobar@example.com", "Message from $_POST[name]", "Message from $_POST[name] at $POST_[email]:\n\n$_POST['message']" ); header('HTTP/1.1 302 Found'); header('Location: /some_other_page.php'); This will send an email to `foobar@example.com`, then redirect the user to `/some_other_page.php`. It'll have a subject of the format `Message from &lt;name&gt;`, and a body with `Message from &lt;name&gt; at &lt;email&gt;` on the first line, followed by the actual message.
It should be noted that the above code isn't production ready. There's plenty of validation and sanitation to be done as well. 
What do you mean?
Yeah that's what I heard jasonrichardsmith mention earlier. I'm going to check it out as it seems that it's been gaining a lot of attention. I realized a lot of focus will be on a client-side (JavaScript) framework, so I'll be doing a lot more research into that. One of the things I'm going to need to decide is whether the people who are a part of this project will work on both sides (PHP and JavaScript / Angular / jQuery); or have some focus on the client JavaScript / Angular / jQuery side and others focus on the server PHP side. Thanks
That's what a VCS is for. Your authoritative copy should be remotely versioned, not on the host or VM. In my experience, I always use grunt on the VM because there is too much that could possibly differ from grunt's behavior on the host vs on the VM - and on top of that it can create a bunch of NFS issues if mounting your shared folder via NFS. It's just been a no-go in my experience. 
Portable between distro's and versions, sure. Portable across the major three platforms? No way I'm going to waste my time with that and attempt to deal with the platform specific nuances in native and third party extensions/libraries. 
Non-blocking queries are a [pretty easy thing to do without a framework](http://php.net/manual/en/mysqli.poll.php). I think this is probably the least compelling feature it has. Other parts of it are more interesting.
It was the first foreach loop that he didn't have that I did, not the last. I was thinking in pure semantics and not necessarily efficiency per se. I failed to eliminate all middlemen that could be eliminated It's practically all the same methods if it were not for that. I guess it was just the comments
And then when the parent class is refactored in some way which requires a constructor... you intend to go find all its subclasses and add in the call? Possibly across multiple applications, some not developed by you, if you're writing a library?
&gt; Anyone care to discuss why this RFC failed? "ll quote @phil: "dumb automagic".
... you seem to be trying to make some kind of point, but I'm not sure what it is. 
Looks good and intuitive!
Solid list. I think anyone who has negative opinions of Cake 1 or Cake 2 needs to take a fresh look at Cake 3 and keep an open mind. It's got a huge amount of work put into it, and it's not the same as it used to be years ago.
So that http://3v4l.org/gmX34 is an error but this http://3v4l.org/OKbtP is not. Hardly consistent behavior. 
I agree so far.. I've making a "for fun" app for a few folks I game with. I consider myself more of a hobbyist than a developer. Cake really is the only framework I've worked with. I was toying with Symfony because I wanted to practice more modern paradigms in PHP, but felt like I was using a cannon to kill a mosquito and I ended up canning it. However, that could just be because it's a new framework I know nothing about. I ended up using the project to learn Cake 3. I really like the new ORM based model system. I also really appreciate that the array nightmare has been mitigated :) The one thing I'm really struggling with is validation. It's bizarrely different. I was simply trying to make a password/confirm password form and I couldn't figure it out. I just ended up making my own component to validate the passwords. Overall, I think it's really well done. Kudos to the dev team.
&gt; The RFC regards whether the chain of constructs up to \stdClass's construct should be called. From what I can tell you believe it should be. However in my opinion, since I did not define it, it should not be on the chain of constructs to be called. In both my example and your example, there are plenty of constructors that are called but aren't defined. parent::__construct() says call the constructor on my parent. But there are plenty of parents here without constructors. Of course, they *do* have implicit constructors. Those implicit constructors automatically call the parent constructor. So the only implicit constructor that isn't called is the one on the very first class in the tree. BTW, `\stdClass` is not the root of the PHP object hierarchy. It's a separate empty class type that doesn't have anything to do with this discussion. See http://3v4l.org/rYViq 
If you don't mind me asking, I'm curious how much they offered you. It can take a long time to convert a "ball of mud" into a proper framework, point being it can be changed. A toxic boss really can't be fixed.
Take a look at the [Forms with no Models](http://book.cakephp.org/3.0/en/core-libraries/form.html) docs. I actually used this myself yesterday, and while it took a bit of futzing to figure out, it makes a lot of sense. There was a *very* long discussion before we decided to go down the route we did, but it made sense in the context of an ORM, and now it's nicer with the base form classes.
If we can't get the date to make any damn sense, how do you expect this one to happen either? :/
I think this is PHP shenanigans, a RFC for PHP 7 proposed to fix this. EDIT: [This RFC](https://wiki.php.net/rfc/uniform_variable_syntax) should fix this if I understand it right, it's already implemented into PHP 7.
Has ran this on releases from version 1.0 to the current release of any popular frameworks to see what version they would be in if they followed strict semantic versioning? What happens if a security fix can't be made without a major version bump?
if someone "flips out", blames, and cant deal with constructive criticism, then i at least wouldnt want to work there, otherwise i would explain why their process is bad and hwat they can gain from a better process, and if they cannot be convinced, i'd rather search a professional environment again.
I think generally what happens is that the fix is hacked in to make it work on the old version (just bumping the minor), then a new major release is started with the proper fix. Basically what PHP does as their standard release process.
Thats what i thought too!
This is really nice, and very useful. I'm gonna integrate this into my Scrutinizer test suite, I really hope they integrate it in thieir service as part of the default toolset at one point
Thanks for the help mate! This is good stuff. That stackphp is all new to me, I'll make sure we include it in our custom framework. It finally starts to make sense now why the container could not find the class I wanted. 
I come from using CodeIgniter on every project, now it's Phalcon.
&gt; It should be noted that the above code isn't production ready. There's plenty of validation and sanitation to be done as well. No, the code is production ready. There's no escaping necessary for an email's subject, body, or destination. Nor is there any realistic way to validate those, but it doesn't matter, because you don't need to.
It's not necessarily for newbies, though.
What is there to validate and sanitise?
The only valid way to validate an email address is to send an email to it. So that is completely fine. In fact I would argue trying to validate it yourself in any way other than sensing an email is likely bad practice. And considering mail I'd safe from header injection on the body and subject arguments, no issue there. And considering the mail is sent in plain text, it shouldn't be a big deal if they inject HTML, as by spec it needs to be rendered in plain text if the mime type dictates. So while you may want to filter for certain things, there's nothing really insecure or bad practice here...
Yeah PHP's never been consistant with stuff like this; remember how you couldn't do $x-&gt;returnArray()[0]
cmon... www.3v4l.org
[count\(\)](http://php.net/manual/en/function.count.php) is already a PHP function, it'll throw an error.
Interesting, if you haven't found a way around this already, remember you don't have to instantiate a class before getting a constant from it. You can use the following from anywhere. echo MyClass::CONSTANT; 
To validate: That the fields are properly populated, for starters. You can also check that it's a properly formatted email address via FILTER_VALIDATE_EMAIL (FILTER_VALIDATE_EMAIL is RFC 5321 compatible, which supersedes RFC 2821) or equivalent, as well as provide feedback to the user if he/she has filled out a form incorrectly, e.g. "£" in place of a "@". Also whether it was successful in sending the email etc. To sanitise: When outputting the values back to the user if the user needs to correct any values. Also, sanitise the email if you require it to be in a specific format. 
In MVC frameworks, where exactly does the controller and model get instantiated? I have the classical basic MVC structure, everything is namespaced, autoloaded and I have a bootstrap file where I call all my libraries, but here is the thing, inside the bootstrap file my router accepts the `$_SERVER` array and pre-defined json routes, now it looks if a route is a match for the `REQUEST_URI`, and returns the class name and method name to instantiate, as describe in the route, but beyond this, I can't proceed. Does the router have to instantiate the controller and the method inside it? If not, then which does? 
&gt; your whole argument of "why should I trust them when they fell down on this one specific feature I didn't care to learn properly" is just really puerile and, if you really wanna get pedantic, a logical fallacy. You introduced an 'appeal to authority' by indicating MS and Oracle recommend pluralized table names (haven't seen that - proof would be nice) - I was pointing out that just because they are in a position of market power doesn't mean they make good decisions/recommendations. Could have made that point simpler, perhaps, but didn't at the time. Second appeal to authority - "ISO standard" - it's quite obvious I'm incapable of finding the ISO document indicating pluralized table names are the standard, but I did ask you for it, and instead I get insults. A link so I can see this for myself would be appreciated. 
I've ran it on symfony and laravel. I'll probably do a write-up on that since it is indeed an interesting topic. Funnily enough, when I ran it on laravel I discovered a BC-breaking change between minors (which should have been tagged as major). Hopefully tools like this can help developers prevent this sort of thing from reaching other developers. As for security fixes that cannot be made without a major bump, I am not sure if that really happens. Much like /u/Turtlecupcakes said, security fixes may end up being hacked in if they cannot be done cleanly, but most of the time security fixes are implementation changes, which, if you look at the ruleset, end up as PATCH.
Yup, exact, only the last inserted character is checked. We have to update and check for the `LEFT-TO-RIGHT MARK`, `RIGHT-TO-LEFT MARK`, `LEFT-TO-RIGHT EMBEDDING` etc. symbols. This is still a work to do. We don't want to define left-to-right and add a switch because inputs from users are most of the time unknown and the goal is to find/guess it. The tricky part is that we can have both directions in the same strings, but this is planned. I opened an issue to track this work: https://github.com/hoaproject/String/issues/21.
increase the font size from the settings :)
A write up would be very interesting. Laravel had a security fix release [4.1.26](http://laravel.com/docs/4.2/upgrade#upgrade-4.1.26) which added 2 new methods to `UserProviderInterface`. It seems like this should have bumped it up to 5.0, rather than being a patch release.
The search looks cool. At the very least I'm going to see what makes it tick! Thanks for providing the implementation to learn on (since I have no clue how I'd utilize this at the moment).
I think I'll use your suggestion. I was avoiding it but I think my design was wrong to try. Basically, I was trying to make a factory/provider class and wanted to use constants for some common values for a parameter. I moved the constants to the factory from the class but now I think it makes more sense to have them on the class and call them statically: $thing = ThingProvider.createThing(Thing::COMMON_PARAMETER); I think I overdesigned it, being too strict trying to make everything injectable, and forgot to be pragmatic. 
The Return Types RFC has already passed, it can't be changed now, and it predates the Scalar Type Hints RFC. So it's the Scalar Type Hints RFC's job.
yes. exactly my point. if scalar type hints are accepted then we end up with a situation where return types have one set of acceptable types and function parameter lists another. unless scalar type hints is modified to extend the return types rfc. anyway you cut it is messy. Such things should be considered in tandem not not separately.
Damn, thank you!
*sigh* Yes, if you *use* them like that, that's what they are. Hint: don't use them like that..... I don't go around injecting $app (or using App) in my Laravel applications - I bind implementations and instances to the container at the beginning of the request cycle, and then inject them throughout my application. On smaller projects, I don't go around injecting an instance of Pimple throughout my application (not even at the controller level). A container is a *layer* whose life cycle should be as short as possible and should have very clear boundaries whereby it doesn't leak down into layers below it. I don't see how you would **conveniently** (key word here) inject implementations to abstract dependencies without a container... Maybe you can point to an example of how Cake handles dependency injection without a container?
Yeah no. Not even close. Container is a tool to make dependency injection not a pain in the ass. Nothing more. It's also a gateway drug to service location in the wrong places if you're not careful. Maybe inexperienced people don't know what DI and containers are, but inexperienced developers are the problem, not the use of containers...
Thanks!
Will be nice if yes, but it all just seems roundabout way that's all.
Why would it be roundabout?
&gt; https://github.com/bcit-ci/CodeIgniter/pull/1900 If you look at the thread, they couldnt change this because it was in Ellislab's hands. Now, for a long while now. It's been in new ownership and it still has not been resolved. You are right in moving to laravel. The more things change, the more they stay the same :)
what part of the date doesnt make sense?
The form models are really nice. Is there a rule I can use to accomplish my password challenge? I need fields password and password_confirm to match in order to pass validation. The docs didn't make that any clearer for me...
Yes, look at this example: https://github.com/cakephp/cakephp/issues/5746#issuecomment-71444881
Run for the hills. A business / project like you described is at increased risk of imploding (incompetent leadership / management, unmaintainable tech etc), meaning your generous current salary isn't going to be something you can rely on, and then you're left with career stagnation. A career in development requires that you stay up to date and current, else you're going to have a hard time finding new jobs as the landscape changes (and it does change, faster than you think).
Well, it's going to be bit hard to suggest a specific solution. Everyone is different when it comes to how we learn and approach problems. But generally I find self-taught (I'm guessing that is what you mean by self though) people generally better at tackling task because they are willing to go out and find the answers instead of expecting someone to hand feed them. Maybe you can give us an example of a problem that you had been given, the way you approached it, and the time it took you to complete it? Other than that I am not sure. The only thing I can think of is maybe there is a better way you can approach and look at problems that would allow you to build the solutions in a more timely manner.
&gt;But if I look at other languages, mostly languages away from the web, we can see an entire ecosystem of IDE's, debug tools, compilers, standard libraries, ... that help those languages. Think Visual Basic, C#, Java, .NET, ... They all have tools that PHP, even after all these years, doesn't have. And I don't mean just IDE's. I hate comparisons like these because context is never taken into consideration. PHP's primary context and what it excels at is in performing CRUD-type tasks. For this, PHP has a fairly good amount of libraries, tools, etc and does its job reasonably well. Contrasting this, Java, .Net have a much, much larger scope that extends well beyond the range of handling single HTTP requests. As such they have many more libraries, tools, IDEs, compilers, VMs, etc to handle these capabilities. Furthermore, throw in the fact that Java is the darling of enterprise application development while .Net enjoys full support from Microsoft, a large organization with deep pockets, and you've got much more support and resources being thrown at these two ecosystems. As much as I want to see PHP improve and more libraries built, it doesn't make any sense to compare it to what goes on in the world of Java or .Net. 
how old are you ? how old / how many experience have 'the others' ?
Perhaps a conversation is in order. If an employer is willing to pay a premium price for a senior developer / architect, but refuses to follow the architect's advice, the employer is waiting money and talent. This will be a losing game for both of you in the end. Explain that you did not expect to take on the role of jr. developer and that if you do not get some autonomy you will need to reconsider the job.
There is also CodeClimate. They sponsored a traveling speaking tour (in the US) last year that was really great. https://codeclimate.com/
I don't *have* an approach when solving a problem. I think that's part of the issue. I just look at it and start writing code. Eventually it clicks, but it does take some time. Coding itself isn't the problem, once I found an abstract solution I just breeze thru the code. Whenever I start to think about a solution, everything just becomes blurry(?). I can't concentrate properly and it ends up taking forever. I'm genuinely asking myself if there's something physically wrong with me. Hell, maybe I should go see a doctor.
"self-though": No formal training of any sort. Just reading of the internet, books and asking stackoverflow. That's it. 
Alright, fair enough. The general areas in which I lack good knowledge is CSS3 and JavaScript. I had to do a presentation site not so long ago. Nothing fancy just 4 pages including the contact page. I used wordpress to get it up and running since, you know...4 pages. It took me bloody forever to get it finished(namely 4 days). It shouldn't take that long. Every 10 minutes I was googling "how to do this", "how to do that". CSS just files over my head. I have no idea why.
You mean self taught. Self-though doesn't mean anything.
Self taught. It's important to understand words and their meaning.
Before you even start programming, diagram your code using a dry board or a web service like [LucidChart](http://lucidchart.com). It will give you a invaluable outline for your architecture and help expose problems before you have thousands of lines of code already written. Also look through Github repos solving similar problems. It will illustrate the different approaches to the issue and the libraries used. If you're lucky you may even find a drop-in solution.
Hey Hywan, Your logo still looks like cock and balls.
Web developing in java is basically read a shit ton of docs on 20 different frameworks to spend a month configuring them all so that they don't crash on each other. Then you start developing without ever, ever tweaking your settings again even after the costumer changes the requirements.
&gt; and just in general take the path of least resistance, You mean the right path by which nature is defined?
&gt; Just because I have discipline doesn't mean others do. yeah, lets blame php for that
[Here is a plugin](https://github.com/lorenzo/piping-bag/) that implements dependency injection in your CakePHP 3 Application. I'm also aware of implementations all the way back to the 1.3 release.
TL:DR of twitter. I don't like PHP, why don't you start this tutorial and write every line of code you have wrote in your life from scratch?
I... didn't say that? PHP has definitely made a lot improvements, but there is still a lot of way to go and people should be able to say that without being called a hater.
The problem with that its not just that its stupid, its that its insecure ergo not working.
Would like to point out that `string` is a reserved word in HHVM hack mode, so these classes would definitely not work.
not what i said
You select all the redirects from the database. Nowhere the user is injected. A quick fix would be to add a WHERE statement where you only select the rows for a user The long fix would be to use something else than mysql_*, because it is deprecated (for a reason), and will not be around much longer. 
OK, you're a junior dev and you haven't evolved in 3 months...with your first programming job? Your boss is a fucking idiot. Junior developers--left to their own devices--will take a long time to learn and evolve and become better. Your boss should be helping you grow, not just saying that you're not growing. He gets to say that when you're a senior developer, juniors need hand-holding. Check out [PHPMentoring](http://phpmentoring.org) they have some great people there who are looking to help people just like yourself and depending on where you live I'd be willing to help you too (depending on timezones...no one wants to wake up at 4am to learn or teach). 
Not too complicated wordpress sites are often churned out as six week projects by digital agencies. A page a day is pretty goood if you're churning out a good standard on a junior salary.
If your problem is meeting deadlines then I would say you just need an extra effort and probably your boss is being unrealistic about what you can do. As other said, solving a problem (the part where you are stucked at) it's just the beginning, the next step it's solving the problem efficiently and then solving the problem for future appearences. The only way of learning to solve issues its... programming! there's not secret or manual, get a side project, learn a new language, read questions of other programmers... basically geek-on.
It will be from 5 and up though
Kittens work better than goats since the migration to lolcode
I would say that is such a broad question to the point of being unanswerable. How are you even expecting someone to quantify that? Lines of code? Obviously not a good metric as some feature you're writing could be much better written with fewer lines while some other feature could be much better written with a greater number of lines. Features implemented? Well this completely depends on the feature, some may take 30 minutes, some may take several weeks. It completely depends on the complexity. Not to mention the fact that you may have days where you don't code anything and yet accomplish lots. You may have days where you code lots and accomplish little because you've approached it incorrectly. It's going to be completely dependent on what you are working on, I don't think there's an "average php programmer" in this scenario. 
In what way does allowing you to silently call methods which don't exist, and not error help you?
Hire a server? Install PHP yourself... My Cloud hosting is currently on 5.5, honestly haven't been looking for a server since DigitalOcean has me covered there but no sure what hosts have 5.3 as default.
No, it's not. It shows a complete lack of attention to detail.
&gt; If your problem is meeting deadlines then I would say you just need an extra effort and probably your boss is being unrealistic about what you can do. This is interesting. Being a junior dev. (and self taught) OP might not know that is is okay to explain why they need more time for fear of looking incompetent. 
it self taught. wtf is self-though. it doesnt mean anything. no wonder your boss fails you. you can't even write english lol
&gt; In tech, it's the companies that persuade the developers to work for them. In any other business, it's the other way around. I wish this was my situation. I've built all kinds of apps, but I still struggle to find a constant stream of work. 
do you?
Did you compare PHP developers to nurses?
I plan on investigating what kind of effort that would take sometime after the 2.0 (CiiMS 2.0, not Yii2) release is finalized. Converting everything to Yii2 would be a pretty big undertaking for a single developer. With a few contributors I'd love to make that a reality.
I don't think your issue is at all related to programming. It sounds like you're missing key problem-solving skills, something that you're meant to learn over years of schooling. You need to understand many different approaches to solving a problem, along with when and how to apply them. This is ***the*** core skillset to all programming, and a requirement for most other jobs that are not menial labor. You may want to look into some community college classes on developing problem-solving skills.
Make less sense.
yes or no?
&gt; sanitization (plural sanitizations) &gt; * the act of sanitizing something, or something that has been sanitized &gt; * the process of editing a security-classified document in order to reduce its classification level ---- &gt; sanitize (third-person singular simple present sanitizes, present participle sanitizing, simple past and past participle sanitized) &gt; * (transitive) to partially free something of microorganisms by cleaning or disinfecting &gt; * (transitive, by extension) to make something, such as a dramatic work, more acceptable by removing potentially offensive material &gt; * (transitive, computing) to remove sensitive or personal data from a database or file before giving the public access to it &gt; * (transitive) to revise a document in order to prevent identification of the sources The "real-world" usages of the word are irreversible processes, FWIW.
The only two definitions of sanitization from Webster's dictionary: &gt; : to make (something) free from dirt, infection, disease, etc., by cleaning it : to make (something) sanitary &gt; : to make (something) more pleasant and acceptable by taking things that are unpleasant or offensive out of it Both require removing something. Not just making the "unpleasant things safe" but remove them. That's why we have different words. Because they are different things.
I just can't stand it when bad advice is given for seemingly good reasons. Sure, we should go around rejecting perfectly valid emails because some developer somewhere decided that it wasn't valid. Even tho RFC822 says its fine. Even tho the remote server says it's fine. But because your app has a buggy validator, it's not. And what does validating it gain? That you can say that you validated it? That you can preach "it's a good thing to do"? If you want to show the user a warning in the browser that what (s)he entered doesn't look right, fine. But to reject it when you can send it, is not cool either...
Depends on where you work. Some dev houses churn through developers, and never hire (industry) experienced developers so they can manipulate them and make it seem like your lucky to be working. My first impression is your boss is a dick. You are a Junior dev, you need to be molded. Has he offered to work with you? Is he even a developer? When it comes to problem solving, not code, but problem solving, I would hone your skills with Algorithms. http://en.wikipedia.org/wiki/Algorithm The rest is cake. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Algorithm**](https://en.wikipedia.org/wiki/Algorithm): [](#sfw) --- &gt; &gt;In [mathematics](https://en.wikipedia.org/wiki/Mathematics) and [computer science](https://en.wikipedia.org/wiki/Computer_science), an __algorithm__ (^i/ˈælɡərɪðəm/ *__AL__-gə-ri-dhəm*) is a self-contained step-by-step set of operations to be performed. Algorithms exist that perform [calculation](https://en.wikipedia.org/wiki/Calculation), [data processing](https://en.wikipedia.org/wiki/Data_processing), and [automated reasoning](https://en.wikipedia.org/wiki/Automated_reasoning). &gt;An algorithm is an [effective method](https://en.wikipedia.org/wiki/Effective_method) expressed as a [finite](https://en.wikipedia.org//en.wiktionary.org/wiki/finite) list of well-defined instructions for calculating a [function](https://en.wikipedia.org/wiki/Function_(mathematics\)). Starting from an initial state and initial input (perhaps [empty](https://en.wikipedia.org/wiki/Null_string)), the instructions describe a [computation](https://en.wikipedia.org/wiki/Computation) that, when [executed](https://en.wikipedia.org/wiki/Execution_(computing\)), proceeds through a finite number of well-defined successive states, eventually producing "output" and terminating at a final ending state. The transition from one state to the next is not necessarily [deterministic](https://en.wikipedia.org/wiki/Deterministic); some algorithms, known as [randomized algorithms](https://en.wikipedia.org/wiki/Randomized_algorithms), incorporate random input. &gt;The concept of *algorithm* has existed for centuries, however a partial formalization of what would become the modern *algorithm* began with attempts to solve the [Entscheidungsproblem](https://en.wikipedia.org/wiki/Entscheidungsproblem) (the "decision problem") posed by [David Hilbert](https://en.wikipedia.org/wiki/David_Hilbert) in 1928. Subsequent formalizations were framed as attempts to define "[effective calculability](https://en.wikipedia.org/wiki/Effective_calculability)" or "effective method"; those formalizations included the [Gödel](https://en.wikipedia.org/wiki/Kurt_G%C3%B6del)–[Herbrand](https://en.wikipedia.org/wiki/Jacques_Herbrand)–[Kleene](https://en.wikipedia.org/wiki/Stephen_Cole_Kleene) [recursive functions](https://en.wikipedia.org/wiki/Recursion_(computer_science\)) of 1930, 1934 and 1935, [Alonzo Church](https://en.wikipedia.org/wiki/Alonzo_Church)'s [lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus) of 1936, [Emil Post](https://en.wikipedia.org/wiki/Emil_Post)'s "[Formulation 1](https://en.wikipedia.org/wiki/Formulation_1)" of 1936, and [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing)'s [Turing machines](https://en.wikipedia.org/wiki/Turing_machines) of 1936–7 and 1939. Giving a formal definition of algorithms, corresponding to the intuitive notion, remains a challenging problem. &gt;==== &gt;[**Image**](https://i.imgur.com/ocGRdHK.png) [^(i)](https://commons.wikimedia.org/wiki/File:Euclid_flowchart.svg) - *Flow chart of an algorithm \(Euclid's algorithm\) for calculating the greatest common divisor \(g.c.d.\) of two numbers a and b in locations named A and B. The algorithm proceeds by successive subtractions in two loops: IF the test B ≥ A yields "yes" \(or true\) \(more accurately the number b in location B is greater than or equal to the number a in location A\) THEN, the algorithm specifies B ← B − A \(meaning the number b − a replaces the old b\). Similarly, IF A &gt; B, THEN A ← A − B. The process terminates when \(the contents of\) B is 0, yielding the g.c.d. in A. \(Algorithm derived from Scott 2009:13; symbols and drawing style from Tausworthe 1977\).* --- ^Interesting: [^Euclidean ^algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm) ^| [^Prim's ^algorithm](https://en.wikipedia.org/wiki/Prim%27s_algorithm) ^| [^Floyd–Warshall ^algorithm](https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm) ^| [^Borůvka's ^algorithm](https://en.wikipedia.org/wiki/Bor%C5%AFvka%27s_algorithm) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+co1ufgs) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+co1ufgs)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
thoughful argument for your case
&gt; "You're a jackass" cake. 
ohhh i get it now. well you are right indeed, if you are about to release a new version thinking of a new, new version would be a waste of efforts.
[I love it when drama leaks](http://reactiongifs.us/wp-content/uploads/2013/02/popcorn_stephen_colbert.gif?).
md5 is not a secure option for password storage. Best way to go about doing forget password is send a time-sensitive link to the user, allowing him to change his password right there on the spot to a new one. Any forget password feature that straights up sends you your password is storing your password in cleartext and you should change your password to a non-generic one immediately.
I know, I was there. Usually, though, it's not always a good idea to call individual developers out by name like this. For example, you should never say that Derrick is basically Sheldon, and that Rasmus is a horrible developer. I mean, that'd just rude, no matter how true it is. See? There I go, being rude. ^This ^is ^a ^joke, ^stop ^downvoting ^meeeee ^;_;
lol no
Pfft but @bro() it's working fine! 
Ah, annoyances. Like when you try to access a private property of a class. Clearly it would be better to simply have the interpreter return null, which is really what it's doing anyway, and devs can just assume the behavior. The important part is that they aren't annoyed with error messages anymore...
Try to draw out the problem on paper. No joke. Make a simple sketch of a diagram. Then you can visually see/make an answer. 
I wonder why that warning even exists. I'm having trouble coming up with any other software that specifically wants a timezone configured, but doesn't really since there's actually a default value and the warnings just get thrown to a log file that nobody reads anyway. ...and I'm also having trouble coming up with a a reason why you'd want to specifically configure a timezone for PHP. People that want to use UTC don't need PHP's help to set the timezone to UTC.
You can functionalize the loop pretty trivially, as I said.
No, it is an example of illustrating the perceived absurdity of an argument by taking it to an extreme conclusion. I categorically do not agree with the idea that "errors are annoying" is ever, on its own, a valid reason to remove something from a language. I'm not saying there are no reasons, but that particular argument can be dismissed out of hand IMO.
I've removed that line from the docs. Obviously still a useful function though.
This isn't PHP specific at all? This is possible in pretty much any language. There are a lot of problems with PHP, both as a language, a community, and an ecosystem, but a class full of unrelated random functions isn't some problem unique to PHP. Also, it's really not amateur hour either. That kind of cynicism confuses me. Sure, it's not best practice and ideally you're using a framework that provides all of this for you (e.g. Symfony). Sometimes you're just throwing together a random project or script and don't want a huge composer file with dozens of dependencies. Nothing wrong with that. In fact, that's how I've always seen PHP. A great language for just throwing things together really quickly (prototypes, one off scripts, etc). 
Very informative, thanks! I haven't looked too much into PSR-7 yet since I wasn't sure if it'd ever be finalized. You've done a great job of showing off the problems it solves and why it's approach is a good one.
Controller completion in the strings of my routes file is going to be *soo* nice. It's such a pain point right now.
Also, make it a point to daily visit: http://stackoverflow.com/questions/tagged/laravel-4 It's a great source of knowledge for exceptional cases.
Even worse: PHP 5.4.0 removed system(OS) timezone support if there's no timezone defined in the php.ini. Ridiculous. If there's no timezone in my php.ini then I'd expect PHP to use my system's timezone and quit bitching.
At the same time, juniors need to speak up if they need help.
&gt; Why not "steal" the good parts of successful other languages, in other domains, and port them to PHP (if it would mean an actual improvement)? Either in terms of new language idioms or external tools, such as IDEs, compilers, VMs, ... I think that that's exactly what's been going on in PHP (both internally and in the community at large) in the past few years. [Multiple][php-rfc-return-types] [RFC's][php-rfc-pow-operator] both proposed and fully accepted/implemented have [discussed][php-rfc-argument-unpacking] their [ideas][php-rfc-generators] in inspiration or compared to other languages. [Conversations have grown][php-async-jmikola-deck] and [tools have been created][php-react-inspiration] in the name of writing and using PHP in non-traditional contexts. External tooling? We've got one of the most well-designed and easiest to use [package managers][php-composer] that I've ever used. We have well-supported [standards linters][php-codesniffer], [code analysis tools][php-phpmd], and even user-land [parsers][php-parser]. I could keep going... Anyway, I think the point's been made. Sure, the PHP community could always use more internal and external inspirations, just like any programming collective could, but the current state of the community is far from uninspired or sheltered from external influence. [php-rfc-return-types]: https://wiki.php.net/rfc/return_types#fn__3 [php-rfc-pow-operator]: https://wiki.php.net/rfc/pow-operator#discussion [php-rfc-argument-unpacking]: https://wiki.php.net/rfc/argument_unpacking#support_in_other_languages [php-rfc-generators]: https://wiki.php.net/rfc/generators#further_resources [php-async-jmikola-deck]: https://speakerdeck.com/jmikola/async-php-with-react [php-react-inspiration]: https://github.com/reactphp/react#what-is-it [php-composer]: https://getcomposer.org/ [php-codesniffer]: https://github.com/squizlabs/PHP_CodeSniffer [php-phpmd]: https://github.com/phpmd/phpmd [php-parser]: https://github.com/nikic/PHP-Parser
As a former PHP dev having framework experience can be the difference between getting the job outright and being relegated to the trash heap. Finding people that know PHP are a dime a dozen, but finding those that know a framework like the back of their hand? Whole different story. Having experience with Symfony, Lavarel, CakePHP, Zend, or even Drupal will get your foot in the door
Since the beginning we built this thinking about startups and big companies, but it's an interesting point of view, why do you think this is a tool almost exclusively for open source projects?
Yet another thing I begged Taylor to do, that he argued against strongly, then ended up doing. :)
Indeed, I've taught a new developer how to do stuff recently and the continually most frustrating thing is a lack of knowledge of how to debug. Basically everything he asked I just said "I don't know, just **dump out the array**." Inevitably the question of "why isn't this working" can be solved by clarifying what "this" actually is and what it should be. Post values that aren't set like you think, array structures that aren't in the format you expected, objects that don't contain the value you thought they did. Just var_dump it and take a look!
I appears you misunderstood my point. Lets start with a little story: Imagine you acquire a library called "AwesomeLib" using composer. It has a class called `FooBuilder` which has no constructor and builds foos. It looks something like this: class AwesomeLib\FooBuilder { function giveMeFoo() { ... } } You have a bunch of code that instantiates this foo builder to get a foo: $fooBuilder = new FooBuilder(); $foo = $fooBuilder-&gt;giveMeFoo(); ... $iLoveFoos = new FooBuilder(); ...etc... But you have one module that does some batch processing and it requires foos but it reuses them. And because building foos are a bit expensive you decide to build a caching foo builder by inheritance. That way you can plug it in anywhere that already accepts `FooBuilder`. class MyLib\CachingFooBuilder extends AwesomeLib\FooBuilder { function __construct($cache) { // I can't call parent::__construct() here because that would be an error } } But one fateful day you do a `composer update` and AwesomeLib updates with a new minor version. This version implements it's Foo building differently a now uses a defined constructor to initialize the `FooBuilder` class. The `FooBuilder` interface hasn't changed at all, it doesn't need to, this is purely an implementation detail change. All the code above that instantiates the `FooBuilder` directly continues to work as expected. It's fine. Nothing has changed. This is abstraction at work. The details of how foos are built is contained entirely within AwesomeLib. But wait, now we have a problem. Without any warning or error (silent fails, yay!) our `CachingFooBuilder` isn't constructing the parent class properly anymore. Maybe, through random chance, it doesn't even crash, it just works improperly spitting out half baked foos. Imagine wasting an entire day tracking that down! &gt; On top of this, if you're expecting the parent to have a constructor, and it doesn't So what? It's not for me to know or care whether or not the parent has a constructor. It literally doesn't matter. There is no silent error because there is no error. The object is responsible for constructing itself, whether it relies on the implicit constructor or includes one. My only job is to ensure I always call it if and always when it exists. This proposal makes that one thing much easier. You're argument just has no weight. There are no negative consequences to things you seem to have issue with. Yet the alternative actually does have consequences in exactly the way you purport to hate. 
you sound like you need help actually. when was the last time you visited a psychiatrist?
&gt; A straw man argument attempts to refute a given proposition by showing that a slightly different or inaccurate form of the proposition (the "straw man") has an absurd, unpleasant, or ridiculous consequence, relying on the audience not to notice that the argument does not actually apply to the original proposition. Nope, sounds like you nailed it to me.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Psychological projection**](https://en.wikipedia.org/wiki/Psychological%20projection): [](#sfw) --- &gt; &gt;__Psychological projection__ is a theory in [psychology](https://en.wikipedia.org/wiki/Psychology) in which humans defend themselves against unpleasant impulses by [denying](https://en.wikipedia.org/wiki/Denying) their existence in themselves, while [attributing](https://en.wikipedia.org/wiki/Attribution_(psychology\)) them to others. For example, a person who is [rude](https://en.wikipedia.org/wiki/Rudeness) may constantly accuse other people of being rude.According to some research, the projection of one's negative qualities onto others is a common process in everyday life. &gt;==== &gt;[**Image**](https://i.imgur.com/vjoyFTn.png) [^(i)](https://commons.wikimedia.org/wiki/File:Unoffical_psychoanalysis_symbol.png) --- ^Interesting: [^False ^accusation](https://en.wikipedia.org/wiki/False_accusation) ^| [^Projection ^bias](https://en.wikipedia.org/wiki/Projection_bias) ^| [^Projective ^identification](https://en.wikipedia.org/wiki/Projective_identification) ^| [^Religious ^paranoia](https://en.wikipedia.org/wiki/Religious_paranoia) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+co25iua) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+co25iua)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
WordPress is not a framework. It's a blog platform turned CMS. I imagine a lot of jobs are looking for someone who can put together a site in WordPress (CSS where necessary, etc) or can develop plugins (or both). 
Glad to see the effort progressing. A couple points, though: * Streams and URIs really ought to be their own separate PSRs. What happens when we want to create other PSRs that use them? Will we make HTTP messages a dependency for them? Or worse: duplicate the interfaces? * Twenty factory methods is more than a bit excessive and bloaty; and having to create and throw away a dozen or more instances just to construct a simple message is so needlessly wasteful. Consider at least a standalone message builder.
&gt; having traumatic experiences with drupal FTFY
I think this may often be the case, but I know TechCrunch has some php engineers and they run on wordpress.
&gt; I know there are a lot of jobs asking for people with Wordpress experience Generally, a job listing will specify what framework or platform they need experience in. If you want to go after all those Wordpress jobs, you will need Wordpress experience and having it will of course look good on your résumé. However, Wordpress experience will generally mean squat when it comes to job listings asking for experience in virtually any other framework or platform. There are a lot of reasons for this, but it generally comes down to Wordpress sharing very little code and design with everything else out there: what you learn in Wordpress doesn't translate well to working with other projects. Compare that to, say, having experience in Laravel: because Laravel incorporates a lot of Symfony components, you may find some hiring managers will be okay with your Laravel experience in lieu of having direct experience with Symfony. You can even make weaker cases for that hypothetical Symfony job listing by having experience in non Symfony-derived projects like Yii or Drupal: Yii is an MVC framework and Symfony is an MVC framework, so you have some experience there. Drupal currently doesn't have a whole lot in common with other frameworks, but Drupal 8 will change that drastically and heavily incorporate Symfony components. Wordpress, on the other hand, is just stuck in its own little world. The only plus is that you have experience with working with an existing platform instead of just your own stuff. That's only really interesting when you're going after junior- and entry-level positions. At higher levels, your current experience in proper frameworks from other languages would be more interesting than your would-be Wordpress experience. If, after you specializing in Wordpress, you want to branch out from there, you will need to either learn other frameworks on your own or luck into a job that will let you transition from Wordpress development to something else on the clock. But Wordpress's lack of applicability to other PHP jobs is offset by the fact that there are generally a *lot* of Wordpress jobs.
I'm against this one. While it can be slightly annoying, the warning does have good purpose. Relying on the systems timezone is not a good idea because it can change without warning. For web based applications, where date/time can be important for any number of reasons, and which "run" over long periods of time rather than "instantly" (like most cli applications) or for relatively short periods (desktop applications). In a web-based environment, especially if you're on shared hosting (or hosting in $randomCountryBecauseItWasCheapest), having a stable, known timezone on a per-application basis is important and I don't think it's appropriate to fallback to the server system settings automatically. Relying on the system timezone might also not be a good idea if the application is ever hosted in multiple server environments (eg. testing vs production). Again, only a per-application setting really makes sense here. Timezones is one of those things that web developers think about a lot less than they should.
When I look on my db at passwords it just comes up all different things like 3e then loads of other letters and numbers. So it doesn't display passwords I mean how do you make the forgot password like you get on other sites where it sends you a email to click on then you set up a new password 
Regardless of that, one could argue that PHP developers are a lot _like_ nurses. They're always patching things up. :P But as /u/mattaugamer said: I'm comparing industries/sectors, nothing else. I wouldn't want to see devs dress up in nurses outfits.
What about password_hash this would stop brute attacks and they can't redo the encrypt code like they can with md5 well so I have read anyways. 
Hack is not PHP and Hoa is a set of PHP libraries, so why should we care about that (real questions, no trolling)?
I don't know any package but you can visit posting.ly. they are doing something like this with Fb and twitter.
This just brings back shaking memories of my (very) younger self building a whole html page by concatenating parts to a string along the way of a mess of a spaghetti copy-pasta php "code" and just ending with and echo of that variable. All that in a professionnal environment. AND feeling clever about it. Eww.
Yum!
less controversial view: default to UTC unless explicitly changed. Don't rely on underlying OS date setting. UTC unless otherwise manually set. 
Not sure where you got the idea that a "system timezone" will be used. The default is UTC and will stay being UTC. It just doesn't tell you that the default is being used (like with all the other ini settings...)
I know it doesn't display your password. But it's easy to reverse the algorithm. If you don't believe me, paste me a sample MD5 hash of your password. It's easy to make a forget password function. Pseudo-code is like this: 1. User go to forget password page and input their email. 2. Your controller passes the email to your model to check if account exist. 3. If account exist, create a new row in the "forget_password" table in the database with the datetime this forget password is requested together with a randomly generated string as token. 4. Send an email to the email with an URL together with the token as a GET request. 5. When token and requested date (set it to verify if the email was clicked within 24 hours for security) matches, allow user to set a new password.
Learn when to ask for help. If a probem is taking you longer than you would like, or longer than your boss might expect, then dont be afraid to ask him, or your peers for help with it. Its humbling, but you will learn way more by putting yourself out there, rather than trying to sort it out yourself and taking forever. Thats my tip. It will come, that you can be sure of, but it takes a little while and your dedication. Also, if you are struggling to keep up, you might want to look at spending more time out of work trying to keep up and learning the stuff you need for work. It sounds strange, but recently i was having a real issue working on a symfony project that was far more complicated than anything i had ever worked on before. The concepts were strange, abstract and might as well have been Greek. I was seriously stressed, close to freaking out and my work was suffering even more. I talked to my boss and took a week off to calm down and reset, but also catch up. I spent the week going over stuff that was causing me problems at my own pace, allowing me to relax in a quite place and calmly go over stuff until i felt comfortable. This industry is built on the learning you do outside of your work life. The people around you (just like everyone have meet in my professional life) are all self taught, putting in the time to become skilled and valued. Good luck. 
Here you go mate b2063ebb5ecda94b6d42d56391a58eb1
Well, I don't think it has to be fully objective at the start, RFCs can be updated and improved as the discussion goes on! This is more a suggestion and stood out for me compared to other RFCs. &gt; Also, it really is user experience. What else is a warning? A warning is there to guide the user when developing. Just like superfluous warnings confuse him. Why not add exactly that line? :) UX has best practices and even ISO standards. Point the reader in the right direction what YOU mean by UX. Sorry, about that name calling thing, a little bit more context would have been nice to realize the SO chat reference.
This should always be the go-to choice for date/time. If you want locale-specific times, then you get that information from the user - either via javascript in their web browser, or by giving them an option to select a timezone. End of story, period.
"I once built my own nail-pounding device which I used in a variety of shelf building projects"
YES to what everyone says but don't let the framework distract you from learning general PHP stuff as well. One day your favourite framework may die or you might get a job converting some horrid code into a framework - being able to show you know about "low level" stuff is useful.
Make sense. Having a `UtcDateTime` class in core would make this slightly more explicit.
I don't have too much experience in eCommerce, but I found Magento to be very hard to get into. Even after several weeks I didn't think I even scratched the surface of understanding its internal architecture or database structure. For small sites, I really like to use WooCommerce. Its modular and easy to customize. Sylius looks interesting and I'm keeping an eye on it for several months now, but I dont know if its "ready" yet.
Forgive me for my ignorance here, but why are system timezones considered unreliable? Because of daylight savings?
Alternate view: not all of my users live in the same timezone. Let me connect to the database, load my user's timezone, then set that as the default timezone for the remainder of the execution of this request. (oh hey, that's what I do now)
It depends. If the role your going for requires Symfony, then of course someone with good exposure to it will be better suited than someone who used CakePHP 5yrs ago for 4 months. However not everywhere uses the latest and greatest, some are stuck with legacy custom heaps of things they call a framework. Yes, it may still get your filtered through the process, but it won't really mean that your any better on paper. If you are good enough and comfortable be truthful on your resume and say just what you've put here. You've not had exposure, but you understand how they're used and the concepts and design patterns behind them. Then if you want bonus points, create a couple of simple things with one of them stick it on github and include it.
I'm actively working with http://sylius.org/ https://github.com/Sylius/Sylius It's symfony based, not stable yet, but integrates a lot of nice techniques. Give it a try.
There is an interesting distinction between skills that are valuable to business and skills that you actually want to use. I refer to things like Drupal and Wordpress (neither of which is a framework, but have been mentioned elsewhere) which are often very much in demand commercially, but are a dead-end professionally. You could be a dedicated Drupal developer and probably not have a lot of trouble finding work. The same applies to Wordpress, which has a huge amount of commercial work. Wordpress is popular in development factories. Advertising agencies and so on. Then there are the jobs in the middle, bespoke PHP applications, enterprise programming, general development work. These make up a large section of the programming industry. The other option is to work in something that you enjoy, something that is fun and new and shiny. I would say at a rough (very rough) guess these make up ratios of about 30%, 50%, and 20% of the industry. Margin for error of... you know... 100% or so. So really the question is what you want to do and what you are likely to actually get jobs in. That top "fun" percentage is the ideal, but there are fewer jobs. The mid 50% is basically... a job. Can be rewarding, can be a good experience, etc. Depends on the place. The bottom 30% is up to you whether you want it or not. Personally I'd avoid it. IMO these are career and developmental dead ends. You stop being a PHP developer and become a Drupal Developer, or worse, a Wordpress Developer. One thing people tend to forget about job markets is that you actually only need one of them. Whether you take one of three roles or one of fifteen makes no difference. 
Firstly, I'm addressing OP. But I tried to crack your hash too. Unfortunately, I am unable to crack this MD5 from existing rainbow tables because it's too randomized. My point is that, if it's a dictionary word or at least, a normal user password. Any online rainbow tables should be able to crack it easily. Your string is probably too randomized to crack. Which also probably means it's too complicated to remember anyway. Do post the string you used to hash as I'm curious. If you remember, that is.
Correct me if I'm wrong, but you're describing salting isn't it? In any case, I understand what you are trying to say, but I still do not endorse using md5 has a hashing method. If it's PART OF THE HASH, that's another story. But standalone. Huge no. Web development, you have to understand that there are definitely users using passwords like "password, [country], boomer23" and you can't avoid it. But you can avoid it getting reversed from a simple online rainbow table. My point is this. If you're storing your password as md5 hashes. That's not good. If you're salting, that's a little bit better. But if you're security conscious enough, you'd be better off using one of the crypting methods like the new password_hash or b/m crypt. With hashing, of course.
Also, if you don't want to install the binary, but just use the compiled binary in php-src/sapi/cli/php, you usually don't have a php.ini preconfigured at all. Then you either have to explicitly give the ini path to use or the single date.timezone setting via cmd flag to the binary, _which_ is annoying.
These two are interesting: http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time and http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time But yeah timezones and time in general sucks.
Line 6 should be one of the following: $roll += 1; $roll = $roll + 1; $roll++; ++$roll; What's currently happening is "$roll++" increments $roll, but since it's a post-increment operator the entire expression evaluates to the value before it was incremented, which is then assigned to $roll again since you have "$roll = ...". If you change the code to "$roll = ++$roll" (pre-increment) it will work, but one of the above is more clear.
Why not just: &lt;?php for($roll = 0; $roll &lt; 30; $roll++) { echo $roll.'...'; } echo "&lt;br /&gt;&lt;br /&gt;".$roll."!! Finally it got to 30!!"; ?&gt; 
Oh, I haven't gotten into it very much yet. I'm sure I'll be able to mash stuff together in one of the next lessons soon. Do you have any other PHP resources you could recommend?
Yeah thanks for telling me that I'll look up salt and hash tags when I finish work and try learn about that and learn how to code that aswell. 
Thanks, this also helps. So basically when I recall it twice, what I'm doing is resetting it. Then I go to run it again, and it's back where it was? I promise I'm not dense, this is just something that I need to click and then I think I'll have a breakthrough. Loops stumped me on JS before, and I slowed down on learning to concentrate on scss.. now I want to make a search bar for my website and I'm going to need this sort of thing. I gotta get this down.
If you're taking a course, I'd mostly stick to that as there's a defined lesson plan. OTOH, I don't think it really hurts to explore in addition to that. But other than that, the code of other projects, php.net, this subreddit, and Google.
Also, since you're learning I'd look into the [PHP Error Reporting Settings](http://php.net/manual/en/function.error-reporting.php) and maybe set it to E_ALL so you get more immediate feedback.
I'm not trying to find a different resource, rather extra resources. I learned HTML/CSS mostly from w3schools *(I know)*, then took the codecademy courses and found them to be lacking a bit. I expect to finish the codecademy course by this afternoon, I expect I'll still have much to learn though if it's like above. I will check out PHP.net, thanks. I guess I should have googled it all before coming here. Really, though, I needed somebody to explain why I'm wrong along side or rather than just giving a correct answer. I knew you guys could answer it no problem - *why your answer works and mine doesn't* is what I came here for :)
&gt; time in general sucks. I couldn't agree more! The reason I asked is, I'm not sure I'm convinced that system timezone setting is more unreliable than a PHP-specific timezone setting. A sysadmin is just as likely to change it in one place than another... perhaps. I don't know, it's never been a real issue for me.
What other platform exists where you can't edit your php.ini *OR* it isn't already configured (e.g shared hosting)?
Starting to notice that these great reference are all from PHP.net, of course! Thanks again.
If you need to ask, and I don't think you should hesitate to, then here is a great place, I think. Sometimes it's just hard to Google questions like this. 
Just one question, do you initialize your variables $myusername and $mypassword?
The number of times this would have saved my time-zone confusing ass, over the course of my career, is large.
Figured it out. I have a line (further up my code) as follows $mypassword = mysql_real_escape_string($mypassword); The function is returning NULL. Swapped to my own function now and all works well. Thanks all for your help. 
Thanks for the tip. After removing a call to mysql_real_escape_string() to sanitize my password and username everything works. appears bindparam isn't case sensitive. though good practise dictates to use one or the other and bindParam is preferable to I'll be doing that from now on. 
Does anyone else find that their productivity fluctuates? I finished a ton of tasks yesterday refactoring a bunch of code but today I haven't gotten diddly squat done. How do you get around this?
Does anyone else find that their productivity fluctuates? I finished a ton of tasks yesterday refactoring a bunch of code but today I haven't gotten diddly squat done. How do you get around this?
I've had a couple of contracting jobs where I didn't have access to the server's php.ini files, so there's that.
The try-catch around the PDO connection is recommended because the error message could leak information that would be useful to an attacker. Note that practice is followed in every example in the [PDO Constructor manual](http://php.net/manual/en/pdo.construct.php). (Of course it defeats the purpose if you just go and print out the error). 
Try Drupal Commerce; it's eCommerce and a CRM in one. http://drupalcommerce.org
It's the database whose comparisons are case insensitive. For many different reasons, your password should be stored in the database as a hash - IIRC: $hashPW = hash('sha256', $password); And really, you should salt your hash first. When storing the password initially: $salt = uniqid(mt_rand(), true); $hashPW = hash('sha256', $salt + $password); ... $query = 'insert into users (...., salt, hash) values (..., :salt, :hash)'; (uniqid is not considered cryptographically strong, but I think it's good enough for a salt, since its purposes is to be unique, not random. I.e. you could use sequential identifiers and it would be just as useful). Then when you check it: $query = 'select username, salt, hash from users where username = :username'; ... $hashPW = hash('sha256', $results['salt'] + $suppliedPassword); if($hashPW === $results['hash']) return true; Many think you should run the hash through thousands of encrypt cycles with a slow hash function such as sha256 or bcrypt. 
Also, if you add echo $roll; after line 6, you can see the value of roll for each iteration of the loop.
WooCommerce is good for a developer. They have hooks/filters for WordPress all through their code. Once you get a feel for it. And they have the best documentation I've ever seen. Your timeline question: Your first response should be a question. Who is doing design and theme building? Pages are not really an issue for WordPress. They need to be counted but it's just data entry. Often times we have our clients enter their own content as a teaching method. What custom functionality are we talking about? The point is to never give a timeline estimate without knowing as much information as possible. Basically, I would overwhelm your interviewer with questions. But do it nicely.
Salt is usually used when dealing with "low entropy" material (like password hashing). Among a few other things, it defeats the attacker's ability to attack on multiple hashes at the price of one and use of pre-computed lists / rainbow tables. &gt; Web development, you have to understand that there are definitely users using passwords like "password, [country], boomer23" and you can't avoid it. I'd consider it a sort of security vulnerability if you let users to go with passwords like "password" etc. Because of no matter of algorithm used to hash the passwords, it won't save the password if the initial passwords is such a poor password. (just to be clear) I emphasise I don't recommend anyone to hash passwords with plain MD5, but I merely commented that if MD5 was "easy to reverse" (which it is not). Plain, say, SHA-256 (or heck, even MD5) hash of the remember me token however is fine (you don't need salting nor stretching with it), because such tokens must be initially strong enough (i.e. 128 bits from /dev/urandom).
Thanks! To make environment specific configs, you can rewrite main.php to load a custom config. For example, declare an environment variable to store your environment, name, and copy main.php to another location. export ENV="env" mv main.php &lt;env&gt;.php # Repeat for each environment. Then re-create your main.php and configure it to be your loader, something similar to below would be sufficient. &lt;?php return require(__DIR__ . DS . getenv('ENV') . '.php'); The main.php file is a standard Yii config file and only stores the name, the params file location, and the db and cache components.
[PHP The Right Way](http://phptherightway.com) is a really solid resource for everything from a simple language overview to advanced topics like testing, dependency injection, etc. I can't recommend it enough. Also, while [Laracasts](http://laracasts.com) focuses primarily on the Laravel framework, it also has a number of series devoted to the more intermediate-to-advanced concepts like namespaces, SOLID principles, object-oriented code, etc. Access to all the videos is $9 a month, but it's way, way worth it if you're going to be writing PHP regularly.
One last thing: How do you save images in a post? Thanks!
Can confirm. If you have the ability to learn it (It is, with out question, the most complicated open source software written in PHP), is an excellent career move.
You don't have to sanitize if using prepared statements. It's one of the key features. 
I've never heard it called Fragment Caching, only Partial Page Caching. That having been said, if you're using Laravel and don't have access too Varnish. 
I see, thanks for clarifying.
Taking reddit's example. By default, it should have 3 tables. 1. Post table 2. Comments table 3. Users table Post table have your title, date, description etc. Comments table has your user_id, post_id, datetime, content. Users table has your username password etc. So you join everything together and you get a reddit thread.
Why do you have multiple tables for groups?
Because some people value whitespace to make things easier to read, I'd guess. That coupled with the fact that he's just starting out.
Each table stores different data for the group? I've changed the names of the tables to make it clearer
Sorry I never got a notification saying you commented on my post. It was just that I was following the tutorial on line on how to make a login that he said use md5 I'm really new to all this so I thought that was secure but now you and omg guy can't remember his full username. Have told me so I'm gonna learn about salting and some of the other stuff to use on my starter site to learn this. I downloaded this php security book to help Me learn some of the basics http://it-ebooks.info/book/2055/ And I also got this to teach me php,MySQL,jscript,Css and html http://it-ebooks.info/book/3344/ So hope when I read this and mess about with this starter site I'll have more of a idea what I'm doing and learning the basics of coding. 
haven't touched magento in over 4 years but during the time I worked with it I remember is was extremely convoluted, hard to understand and the documentation you find online usually is either outdated or has a mistakes. also a lot of its configuration is based on xml files that are all over the place. I had experience with WooCommerce recently and it appears more straight forward and beginner friendly but Magento is more of an e-commerce solution whereas WooCommerce is more of a product catalog / shopping cart with bells and whistles. 
Just FYI, it is not all of Magento that is no longer supported. It's just their Magento Go and ProStores that are no longer being supported. Magento Enterprise Edition and Magento Community edition are still going.
Right, I guess I should have done that rather than how I have it, before each iteration. **Order of operations**, Order of operations, *order of operations*... Im getting there :)
Sure, but that's the whole point. Automagic timezone detection is *bad*. It's not cross-platform, not even between Linux distros, which even makes your code unportable. So when the choices are either silently doing the wrong thing or asking the user to set a timezone, PHP asks you to set it.
That's pretty much how I was taught as well. Until I learned how to use XDebug, well-placed var_dump and echos throughout my code were the de-facto as I developed something new. 
Using `while` without the `do` is less typing, but I guess `do` is one of those constructs that either feels natural to you or doesn't. (Never used it myself.) --- Edit: Weird that this would get downvotes. I'd wonder what for, but experience has taught me that Reddit is a fickle beast.
Foreign keys enforce referential integrity, meaning if a row in the groups table is deleted, all tables that have foreign keys linking to any column in the groups table will be deleted as well. Omitting the On Update trigger is usually fine as far as I know (never used them) but you'd want the On Delete trigger to be set to cascade which will do what I described earlier.
That's exactly correct. I hate comparing programming to math, because it's more about problem solving than mathematics, but it really is just like it in that there's a specific order of operations to everything (like PEMDAS in arithmetic).
I'm glad you got the support you needed, but just as a heads up: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC Personally, I don't care very much, but most questions get downvoted to oblivion. In this case, your code had an interesting bug, so people hopped on it.
&gt; the most complicated open source software written in PHP Have you seen moodle? I don't think you've seen moodle.
Alright, thanks for the input. **Sorry to anybody annoyed by my post!** I searched PHP and went for the one with the most subs, next time I'll go somewhere better for beginners. Also, I did read the sidebar but somehow that important, integral part about not posting my noob questions here skipped by me. Oh well, next time I won't!
The most important thing is that it enforces data consistency. They're a way of saying, "Hey database, I want things in *this* table to always reference existing entries in *these other* tables, because my application assumes that's always true. If I ever try to do something that breaks that assumption, slap my wrist." Sure, you could enforce those invariants in your application, but I guarantee you that in a year and a half *something* will happen that means you need to touch a table directly to fix some problem, and if you forgot some of the invariants the database can tell you that you got it wrong. Secondarily, foreign keys assist tooling. At `$dayjob`, our main app uses 480 database tables. There's… *one* foreign key that I know for sure about. Certainly we have no more than three. Which of these tables references which columns in which other tables? Who knows! Navigating this data model is one part "instinct honed by practice" to two parts "educated guesswork". If I wanted to extract a valid subset of these tables for testing purposes, well, that would be a huge effort just to discover what all the relationships *are*. If we'd had foreign key constraints form the beginning, I could just chase those. So, please do future-you a favor and use foreign key constraints everywhere they apply.
it's taken from rails: http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching
log is your friend.
I don't know of any good ones.
[I use this](http://www.tutorialspoint.com/codingground.htm) when trying to learn a new language. It's down currently but it won't be down for long. It allows you to code and tells you were an error occurs in the code so you can fix it.
Code Academy is great for beginning a language but you have to go beyond it to really learn one. 
&gt; Don't use OpenCart. It's complete shit. To add to this: * https://github.com/opencart/opencart/pull/359 * https://github.com/opencart/opencart/issues/1269 * https://github.com/opencart/opencart/issues/1279 *this one especially* * https://github.com/opencart/opencart/issues/1534 * https://github.com/opencart/opencart/pull/1594 Daniel Kerr (the opencart maintainer) is hostile to security researchers.
Yeah, I'd glossed over that bit. Brain wasn't fully on.
&gt; The assignment happens after the increment, but using the a *result obtained before the increment* If Gary Bernhardt ever does Wat 2.0, this should definitely get a mention.
I think it's mainly the: $roll = $roll++; Should be just: $roll++; That just increments it by 1, each time.
Ok so we can mix both languages, it's a bit strange :-/. No we don't use Travis, we have our own CI: It supports more platform but not HHVM yet (because HHVM is not supported on Windows &amp; co.). This is planned in the roadmap. If PHP supports primitive, it won't be a reserved keyword for classes normally. It will introduce a huge BC break in several projects :-/. But thank you for the reminder. A discussion has started on IRC and we will decide if we introduce a BC break right now or later (if PHP decides to introduce it or not). Thanks!
You should also try and include the iterator in the loop declaration: $roll = 0; do{ echo "{$roll}... "; } while(++$roll &lt; 30); echo "&lt;br /&gt;&lt;br /&gt;{$roll}!! Finally it got to 30!!";
I'm actually surprised the almost no one mentioned Prestashop. IMHO it's seriously going up . it has a TON of features and despite the lack of extensive developer documentation its easy to understand. The system relies on simple architecture without heavy abstraction and middlewares , incorporates some MVC principles and it has a lot of room for extending of its capabilities. it's faster than Magento , and it's prefered choice for stores with a giant catalogs. I personally support a shop with 80k+ items , and there is no noticeable performance hit
Holy crap that's just irresponsible. Not able to take a tiny ego hit to accept work someone else has done to make your product more secure.
Last commit is from Oct 27 2013, it looks pretty dead.
Good to know. Maybe I'll give it another look, then. Thank you.
So what you're telling me is next time: $roll + 1;
http://3v4l.org/
/u/phpfatalerror said "complicated", not "poorly written".
Did you make sure your cache directory is not on your nfs share? It helps!
The whole hashing and salting is so interesting to read up about there is so many ways to implementing it. How salt works aswell where it adds random stuff before or after to a password to make it when it's encrypted that it can't be revered because the salt is completely random and some functions do it multiple times per password. 
Yes, this. People who deal with a sufficient number of different PHP builds no longer bother to install them. Also, on Windows the php.ini is in some crap location that is also shared for all PHP builds. At least that's what my last (admittedly rather cursory) attempt to fix it there yielded.
What about if you use php -a for the same purpose, is that what you're looking for?
That's just how the post-increment operator is designed..in every language that implements it. Nothing "wat" about it.
We work extensively with Facebook at my place of work and the downside of the Facebook SDK is: it's all static methods. Sucks for testing...
What he's telling you, is that next time you should use: $roll = $roll + 1; I don't want to start anything crazy here, but I love increment and decrement operators. I think they're easier to type and, for me at least, easier to read. Follow your $heart++;
The two are not mutually exclusive. :P
The book [Learning PHP, MySQL, JavaScript, CSS &amp; HTML5](http://www.amazon.com/Learning-MySQL-JavaScript-HTML5-Step/dp/1491949465) was one of the most useful PHP books I read as a newcomer to PHP. It's very basic but it teaches how you can start using PHP to do useful and interesting things. After making it though that book, I think [PHP Objects, Patterns, and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X) is a really good next step. It will help you learn to design, organize, and write your code to a more professional standard. It will also help you better understand the workings of a PHP framework. 
If you need to authenticate against AD, best would be to use a LDAP client. I can recommend Zend/Ldap and Zend/Auth to create a proper SSO implementation. Good luck!
Make it easy on yourself and use this great lib for dealing with queries and binding: https://github.com/auraphp/Aura.Sqlquery and https://github.com/auraphp/Aura.Sql
Google before you post a thread. It's faster to begin with. "Execute PHP Online" turns up at least 6 viable options on the first page.
I've been programming php for a couple years. I've been at 4 different companies now, none of them have been been CMS sites, they've all been stand alone web apps. 3 of them were proprietary frameworks, not sure if that matters to you. There definitely are jobs out there that aren't CMS jobs. Though, I think it might be important to mention that 3 of these jobs were at start ups.
Great :) Will be checking for some copies in my city
Thank you, thanks encouraging. I mention start-ups in OP not because I hate them but because I want to give people a clue on why I don't want to go down the usual suggestion for programming languages path (Python, Ruby).
&gt; Why is the warning shown on any PHP invokation whether I use date()/DateTime or not? It's not, it's only shown if you use date()/DateTime.
$roll++ is post increment, you want ++$roll, which will return the incremented value.
There's another mention of it in this thread, but I definitely agree with you there. Capable and pleasant product although not built on a fancy architecture. Maybe it'll get there tho. 
Well, let's see. Start with a fresh (Postgres) database, and make some tables: σ&gt; -- σ&gt; is my psql prompt, because σ means "select" in relational algebra. σ&gt; CREATE TABLE parent ( σ| id SERIAL PRIMARY KEY, σ| foodata VARCHAR NOT NULL σ| ); CREATE TABLE σ&gt; CREATE TABLE child ( σ| id SERIAL PRIMARY KEY, σ| parent_id INTEGER NOT NULL REFERENCES parent (id), σ| bardata VARCHAR NOT NULL σ| ); CREATE TABLE This is the simplest possible foreign key: one column in `child` references one column in `parent`. Now let's load some data and pretend it's useful: σ&gt; INSERT INTO parent (foodata) VALUES ('foo'), ('bar'), ('baz'), ('buz'), ('quux'); INSERT 0 5 σ&gt; SELECT * FROM parent; id | foodata ----+--------- 1 | foo 2 | bar 3 | baz 4 | buz 5 | quux (5 rows) That's parent records. Let's make some child records: σ&gt; INSERT INTO child (parent_id, bardata) VALUES σ| (1, 'throwxjk'), σ| (6, 'cite-reader') -- this makes it fail σ| ; ERROR: insert or update on table "child" violates foreign key constraint "child_parent_id_fkey" DETAIL: Key (parent_id)=(6) is not present in table "parent". σ&gt; SELECT * FROM child; id | parent_id | bardata ----+-----------+--------- (0 rows) Whoops. We don't have a `parent` with an `id` of 6. Postgresql noticed that we were about to violate the invariants we told it about, and stopped us from doing a bad thing. This is a *highly* desirable property of a database. Okay, let's make some real child records: σ&gt; INSERT INTO child (parent_id, bardata) VALUES σ| (1, 'throwxjk'), σ| (2, 'cite-reader') σ| ; INSERT 0 2 σ&gt; SELECT * FROM child; id | parent_id | bardata ----+-----------+------------- 3 | 1 | throwxjk 4 | 2 | cite-reader (2 rows) Now, to demonstrate the other way foreign keys can save you, let's try to delete a couple rows from `parent`: σ&gt; DELETE FROM parent WHERE id IN (1, 2); ERROR: update or delete on table "parent" violates foreign key constraint "child_parent_id_fkey" on table "child" DETAIL: Key (id)=(1) is still referenced from table "child". Here, Postgres noticed that we were going to orphan some child records, and refused to commit. Again, internal consistency is maintained. All of the major databases behave essentially this way, modulo differences in syntax.
At the places I have worked, we always have a small assignment/exercise (like a VERY small MVC app) as a first step. So, if you did okay on that you would definitely get an interview. One of the first questions of the interview would be about why you have worked with php for three years without using a framework. I see you have worked with Django - that would definitely be a plus for anyone technical looking at your resume. If you have any old small side projects - pick one and move it to Laravel. That will give you something to talk about at interviews.
PHP is great to get started with and there are a lot of application programming jobs out there. Full stack positions are pretty common though, so a lot of companies expect you to work with css/html/javascript as well, with javascript being more and more important - even for a back end developer. I can see how basic familiarity with Photoshop could be a plus, but requiring proficiency seems a bit excessive.
Magento is pretty much the de facto. Not only do they dominate the SMB space, beating both Shopify and Volusion, they beat DemandWare and Hybris on the enterprise side in terms of adoption. Since they're owned by eBay, they aren't going anywhere. It's a safe bet. The enterprise ecommerce world is unfortunately very closed off, and aside from Magento everything out there is SaaS where you just write apps. Magento has the advantage of being something you can run locally and debug, etc. That said, the concept of only building apps/themes is consistent in both enterprise ecommerce and SMB SaaS products in terms of being "the way it's done", so there's something to it. 
Edgy.
The difference between you, the junior dev, and them, the senior devs, isn't intelligence or "approach" -- it's experience. Go bust your ass for this boss. Stay up late in the whee hours of the morning. Do this for months. For years. Get it done. Then a few years from now, things that took you forever to accomplish will be a cakewalk. You'll have gained EXPERIENCE, you'll just know stuff, and you'll be the senior dev.
For third-party webhooks, use a service like [Runscope Passageway](https://www.runscope.com/docs/passageway). Never mess with production. Definitely get a staging environment. But you should always have a local environment to do development on.
Now this is a library we need! I wish you'd have some Excel formatting support.
So much better to go down the Linux/Mac path. Learn command line. Learn open source languages which are where all the innovation and quality and excitement is. Steer clear of MS and their 30 years of crap which the world is leaving behind.
&gt; where all the innovation and quality and excitement is This is your only argument and it's wrong. C# has always being receiving tons of updates, there is C# 7 is coming. Its static typing provides better quality. And of course there's excitement. I'm not saying you're wrong, Unix path might be better for some people, but it's not that easy to choose as you're trying to make it look.
Rather then moaning about it, I just remember that the string related functions are $haystack, $needle by H being before N in the alphabet (Alphabet...String Related functions etc...) consequently array based functions are $needle, $haystack. Works for me and stops me having to check the php manual everytime i use one of those functions.
Yes, and response times are still ~10 seconds (and memory usage at almost 100MB).
I'm not a recruiter but I'm a self-taught PHP programmer of at least 15 years, about 4 of which have been as a full-time PHP developer. What companies (and by extension, recruiters) are looking for, is two things: someone they can pretty much trust not to fuck up on one hand, and a good fit personality-wise on the other. Note that the first one doesn't have to exclude people who aren't rock star programmers. Some companies are fine with investing time and money to teach you how to program better (some things, as the clich&amp;eacute; has it, you don't learn in school!) or having your work supervised by a medior or senior developer. I'd say any sort of education you get from someone who knows what they're doing is going to help. Education is just part of the equation when it comes to getting hired; it's an important part, to be sure, but it's not like getting hired is out of the question, or for that matter, guaranteed, because you went to this school or that. It can certainly make a difference, but if you have a lot of stuff on Github, you can bet that people are going to look at that and not at your grades or your diploma. What school does is help you be able to get better stuff on Github because you've got a solid foundation to build upon.
About the Pro PHP Security book, I'd say do not bother with it (with a quick look, it gets too many things wrong). Instead, start from http://phpsecurity.readthedocs.org/en/latest/ and http://www.phptherightway.com/
I think the market speaks. More jobs for Ruby and Python and PHP. Less jobs for ASP. This is because MS language jobs are legacy maintenance jobs.
That should *not* be the case (the lack of stretching). For now, everybody should be using bcrypt (with appropriate cost setting) to hash passwords. Which can be easily done with password_hash().
The reasons I'm trying to steer away from start-ups is because of the working hours (easily over 50 if you're a starting member).
I have such a bad memory when it comes to these that I rely heavily on sublime text and autocomplete for most commands, like strpo-&gt;tab to strpos(haystack,needle). I usually also have [a cheatsheet](http://overapi.com/php/) open for quickly checking return types and whatnot.
Windows is a terrible choice for production servers for PHP. If your customer thinks Linux is not easy to manage I would ask why they need to manage it. They shouldn't be "managing" anything.
Ahh thanks very much that's the problem of being new I relay on things telling me the right stuff because I can't tell the difference or not. 
"because its my project and ill do what ever I want!" This guy is living the life.
i didnt even know there was a seperate mail logging for php ? the mailservers own log isnt enough for you? edit: checked config doc ... make sure a) that you touched it as the same user that runs your apache, or even better make sure both php-cli users and apache-user are in the same group and file has 775 rights b) that you have php 5.3 or newer :)
I am guessing they have their own server, even then then they should not be managing their servers. I think OP should get linux and throw in cPanel or something similar
it *is* frustrating yes, but it does seem highly unlikely that it will ever be fixed It's just one of the things you have to get to grips with when it comes to using PHP.. thankfully if you pick up a modern IDE to work with at least the *memorization* of the argument order becomes a non-issue. If you spent an hour debugging strpos because needle/haystack ... you could perhaps choose to invest an hour of your salary in a license for PHPStorm..
Vagrant. &lt;/thread&gt;
WampServer is a web *DEVELOPMENT* platform. I don't think it will be a secure environment for production
Well, I've suggested to use Linux in virtual machine, overall it is in Windows. My employer smirked. We don't want to argue with customers, especially if they are very big customers.
In the UK there are far more C# jobs than any other language. I imagine it's similar in other places. http://www.itjobswatch.co.uk/default.aspx?page=1&amp;sortby=0&amp;orderby=0&amp;q=&amp;id=900&amp;lid=2618
Awesome.Thanks!
Old habits die hard I guess. 
excellent. thanks for the tip.
I think OP is talking about WAMP as in a Windows + Apache + MySQL + PHP stack, not necessarily WampServer. That being said, I think pretty much all prebuilt WAMP stacks for windows will be development platforms, so your best bet might be to install the components you need by yourself. 
Ooh.... I use vim. Thank you! 
These are all very excellent steps toward optimizing the test suite layer of an application. I would also offer that the author may want to look inward into his app to see if there are code points he can optimize for better performance. To do that, he would need to profile his code using tools like xdebug + valgrind, or something equally effective. The same can be said for profiling his test suite too. Stuff like this is a never-ending battle, but is worth all of the effort. Without knowing how many tests they are running, and how their application infrastructure is set up though, it's impossible to say whether or not "8 minutes" is reasonable or not. This is where profiling is important. 
Approaches like this, while very useful in the right circumstances, often hide a deeper problem. If your test suite takes 40 minutes to run then you're likely testing the wrong stuff. If you're maintaining a legacy codebase and you're forced into having functional &amp; acceptance tests everywhere because it's impossible to write proper unit tests then fine, but I'd highly encourage people to look at the reasons why their tests are so slow in the first place before trying to find a few silver bullets to make them faster. The author of that article clearly understands this: &gt; We are now being more careful with our tests, keeping them quick with less functional tests and more unit tests. Somewhat relevant talk on the subject: http://vimeo.com/80533536
We have many thousands of tests, it is a very large code base of 600K+ lines of code. 8 minutes is acceptable for the full suite but during development we will only run a small set of tests related to the part we are changing which usually only takes a few seconds with the full suite being done by Jenkins on push. You are totally right though, we had spent time looking into speeding up the application before we looked into running tests in parallel but it didn't help enough. 
Are they strict unit tests or are you hitting external resources such as db and APIs?
It's still possible, just use X databases and environment variables to set the database per thread.
You'll inevitably have people telling you to push for Linux, but Windows CAN be a solid production environment if managed correctly. The biggest decision here is which Web server to deploy. There are Windows builds of Apache and Nginx available, ach with pros and cons. Apache works well, but Nginx won't perform nearly as well as it does on Linux. The [Nginx docs](http://nginx.org/en/docs/windows.html) say this: &gt; Version of nginx for Windows uses the native Win32 API (not the Cygwin emulation layer). Only the select() connection processing method is currently used, so high performance and scalability should not be expected. Due to this and some other known issues version of nginx for Windows is considered to be a beta version. At this time, it provides almost the same functionality as a UNIX version of nginx except for XSLT filter, image filter, GeoIP module, and embedded Perl language. Notes for Apache on Windows can be found in the [Apache docs](http://httpd.apache.org/docs/2.4/platform/windows.html). That said, on Windows I really think you're better off deploying IIS. Microsoft has a page about the pros of [PHP and IIS](http://www.microsoft.com/web/platform/phponwindows.aspx). The latest versions of PHP for Windows are available at [windows.php.net](http://windows.php.net/), and most PECL extensions have DLLs available for download from [pecl.php.net](http://pecl.php.net/). There are some caveats to running PHP on Windows. The 64-bit PHP builds are considered experimental still, and do NOT include 64-bit integer or large file support. Right now there's little benefit in running the 64-bit builds on Windows. The other issue is with any extension or code which may depend on POSIX, which isn't available on Windows platforms. That's about all I know about PHP on Windows. Good luck!
It'll be nice to ditch the "_ide_helper" file.
User state and cart state should be separate. As far as the cart is concerned, it does not need to know weather a user is logged in or not. Note sure what you mean by "The contents persist (in DB via a FK that is stored in a cookie)". I am assuming you mean the cart items that are stored in the session? Converting cart to wishlist, again your cart does not need to be aware of this. Implement this in the sign in page. When the user signs in, iterate over the cart items and put them in a wishlist db table. You'll need to check if the items don't exists in the wishlist. 
Windows Server is absolutely fine for PHP in production use and has been supported for years. Windows NT isn't inferior to Unix-like systems.
&gt; If you're maintaining a legacy codebase and you're forced into having functional &amp; acceptance tests everywhere because it's impossible to write proper unit tests then fine This is an odd way to look at it. It's not "Unit tests if you can, integration and functional if you can't." _It should be all of them if you have time._ Those functional tests can get pretty slow, but if its purely 40 minutes on unit tests then yeah, somebody f**ked up.
This was one of the things that made me feel embarrased for being a php dev. now lets fix the ?: operator so i can get this paper bag out of my head
Download source and compile with some switch. Ask in IRC #vim if not sure how to do it.
I'm a seasoned PHP developer and I can tell you that the number of good PHP jobs is declining fast. Python is the next big thing, thanks to Google. In absolute numbers, the number of PHP jobs is still high but there was a 9% decline in the past few years! You can check the statistics below: [What is the Best Programming Language to Learn in 2014?](http://www.sitepoint.com/best-programming-language-learn-2014/) 
Yes, it *should* be all of them all the time. However if you're working in a large legacy system littered in global state and procedural code and you therefore *can't* write unit tests without refactoring, then I'm not going to complain if you have to write lots of slow integration tests for everything first. The point I was actually trying to get across was that people should avoid reading posts like this and saying "I can just write functional tests for everything because I can optimise them to run somewhat fast" - and that they should instead look at how they can improve their code to allow them to write better, smaller tests in the first place, which will naturally be faster.
This is actually how I feel READING any programming books. I just need to take short online tutorials. I can't just pour through a huge, dry book like that. 
WAMP is just an acronym for a Windows/Apache/MySQL/PHP (or Python/Perl) stack, much like LAMP is just an acronym for Linux/Apache/MySQL/PHP(/Python/Perl). You're thinking of WampServer.
That I agree with entirely of course. It seemed like you were saying something a little different originally. :)
I haven't used invoker Since we use jenkins and output phpunit's output in junit format we can see exactly how long each method in each test class took to run which we then use to pick what to optimise. We even removed some of the slower test we felt were just not worth the time.
If you are JUST learning the basics of programming, sure, pick a language and learn the rudiments. But flash forward just a matter of months then choosing just PHP is like trying drive a racecar with only a seat and maybe a passenger mirror. It IS important to not get overwhelmed but understanding at least the roles and the basic functions of other layers is critical. If you are going to go down this road, and you actually got proficient at PHP and don;t have a clue about what the heck happens on the client, or anything about the ecosystem where your PHP is installed, they will laugh at you. Seriously though, it's good to have focus, but keep the other at least in the periphery and keep a look at them at least in passing to fill in the blanks. Over time ALL of it will come together.
Most people misunderstand me at first. I think it's my accent.
https://www.reddit.com/r/PHP/comments/2gn5z3/what_is_your_a_favorite_libraryframeworkpackage/ https://www.reddit.com/r/PHP/comments/25oj0z/whats_your_favorite_php_framework_exclude_laravel/
:)
moderators seem to have removed my post. Anyway, those logs show nothing. Also, the limit goes away when I run from the command line. So why the browser limit?
php and javascript work very well together. 
While it's getting better, Magento is still this monstrous beast of an application. No matter how much time you spend with it, it still has the power to drive you mad. That being said, if you *are* willing to dedicate the time to it, you *will* be able to get a job. 
I would say learn asp.net if you are not dead sure that you want to primarly work with web. With php there will only be web apps, but all softs of software is written with C# from CMS to Games. 
I have to agree on this. Although the level of companies that may use Magento would have the appropriate team of developers to properly maintain a large Magento codebase. After all Magento is not a toy for fast and small eshops.
I feel like if you're asking people to pay you big money for PHP training, **you should know the answers to these questions yourself**.
I think for me a lot of the reason I have trouble is because so many are written the way a phone book is--just as a reference guide. Chapter 3 - Arrays. Here are 30 pages of functions that work with arrays... that doesn't work for me.
Thanks for the feedback!
I can't watch the video from work but here's the answer... Say the following line out loud: Less than sign, question mark, php, line break. echo double quotation marks hello comma my name is dollar sign name period double quotation marks semi-colon. Line break, question mark greater than sign That's page one of the book. Imagine page 600.
&gt; there isn't a terminal emulator that can come within a mile of the Nix offerings. [SuperPutty](https://code.google.com/p/superputty/) is ok. I've [forked](http://github.com/avindra/superputty) since the author seems to have slowed down.
Laravel. Why? Because it has a great and thought out feature set. I like it. 
We've been using the pecl extension in production for about 3 years in production on aws. Never had any major issues and it's easy enough to compile! 
No, that code works.
Well yes, it wasn't a dictionary word or a common password. It was "id0ntbelievey0u" ;)
I'm pretty sure Dmitry voted against removing ext/mysql.
If you're in a position to use a PECL extension over a Composer package then you probably want to use the PECL extension. These are some _incredibly_ generalised statements, but: Composer packages are often built and improved more rapidly, and these days you see them having more advanced features, while PECL extensions rarely have namespaces or utilise much past PHP 5.2 functionality. I hope that will change over time, especially when Composer gets PECL functionality. It would be good to see them as popular and as well maintained as Composer packages have become over the last few years,
Dmitry voted against removing support for the long-deprecated hash comments in ini config files.
Removing a semicolon would create a parse error. Parse errors cause the script to not even begin executing. Setting the error_reporting level has no impact on whether or not errors are reported to the browser- all it does is define what kinds of errors can be reported. display_errors is the setting you're after. If you want parse errors to be reported to the browser, you have to set display_errors to on in either .htaccess, php.ini, or your webserver configuration file. Doing it at runtime will have no effect because the script will never run with a parse error in it, and the ini_set() command will never execute as a result.
Also, DO NOT DO THIS IN PRODUCTION. Debug locally. If you're not seeing any errors, you probably have a misconfigured setup: either you're debugging in production (DON'T) or you're using a production config in development (don't do this either - `E_NOTICE`, `E_DEPRECATED` and `E_STRICT` exist for a reason).
Should probably keep your own nose clean first.
You could also take a look to [ElCodi](http://elcodi.io/), developed over Symfony. Looks promising.
Sweet, 2 birds with one shot for me, a way to try php7 and vagrant for the first time. /r/php leave your laymans below for vagrant if you can. txs
The instructions on that page (and the linked install instructions) should be _everything_ you need. 
I actually have been planning to dictate some PHP literature such as PHP: The Right Way into audiobooks for a while now. I think what's most important is to do more than just read the words. It requires a deep understanding of the literature so that you can adapt things like code examples into speech (not just reading the symbols, but explaining the structures being used, and how they interoperate). As well, it needs to be dictated with great articulation and a slower pace, so that the information isn't presented so rapidly as to preclude understanding.
It's easy to consider it harmful for technical reasons, but OpenBSD's refusal to provide any support for a 12 month old release is exactly why the OS is extraordinarily hard to sell to business circles. I don't often run into an organisation that's happy to pay for an Operating System upgrade, including the thorough application testing involved, on every server they have. PHP has a three year release cycle. That means a server running PHP should be expected to run a minimum of three years without being forced through a potentially backwards compatibility break on a required update. And yes, I'm aware that concept is "considered harmful".
Can of worms: how to differentiate between $(var), $ (symbol) and dollar sign (str)
I've been using it professionally for over half a decade, it's pretty reliable. Unfortunately it seems that the latest version of the tool isn't online (I probably never pushed it... oops), but you can check out an early version on github: https://github.com/rlerdorf/WePloy (I rewrote most of it internally a year or so ago to be less of a hodgepodge of random crap and support some new features - I no longer work at WePay but if you're interested I can ping someone to see if they'll release the latest version) As for the DB changes... you can work around them easily enough with the right tools and some careful planning. `pt-online-schema-change` will be your new best friend if you're on some sort of MySQL platform (including MariaDB and Percona XtraDB). There may be a similar tool for Postgres. The implementation is wacky as hell (it's like a 20k line perl script), but the concept is straightforward (make a new table, set triggers on the old one to mirror changes into the new one, copy across the data, rename-swap the new table into place, then delete the old one) Some tips: * Adding columns is easy, just do it before you push code. If the code doesn't work right, it should be harmless to leave the column in place. You'll be populating them with a migration script * If you're using some sort of ORM, especially an ActiveRecord style one, it should be reasonably easy to add an on-the-fly upgrade script so objects upgrade themselves the first time they are loaded. This prevents the need to block off access to a table (and thus a subset of your website) until the upgrade completes. * Never do straight renames. Ever. Always break it down into adding a column, copying the data across (using the above on-the-fly upgrade when applicable), and once verified, deleting the old one. Unless you're hurting for disk space, the deletes can usually wait quite a while. * Index changes are similarly easy, but use `pt-online-schema-change` for them too. * Always use `pt-online-schema-change`, even when you don't think you need to because it's a change on a tiny table. I learned this lesson the hard way (as did Percona's consulting team). This applies double if you're running PXC or some other galera-based multi-master replication. * **Version your schema changes.** This means having some sort of `schema_changes` table, and inserting a row into it when you run your schema change script. Make sure there's a unique key so you don't accidentally run the same change twice (although the database will *probably* reject the change). Your change files should include the insert into this table as the first line, or a tool that executes them should infer the unique change name from the filename, or something to that effect. * Always, always, always have an `auto_increment` primary key. If you're concerned about people tracking your growth by watching this value, use a different value in your pages/URLs/etc. (something like a UUID or [PHID](https://secure.phabricator.com/book/phabcontrib/article/database/#phids) ([implementation](https://github.com/phacility/phabricator/blob/master/src/applications/phid/storage/PhabricatorPHID.php)) works well). Don't do something crazy like generate your primary key randomly and implement collision detection/handling (I've done this before - SO MUCH REGRET) Basically, break down your breaking changes into a scary and non-scary part. Don't run the scary part until you have complete confidence nothing will break. Just think about what you're doing beforehand - you don't need to be a DBA to not screw this stuff up (and I've seen DBAs screw it up) This style of schema management will take you pretty far, probably to the limits of the database software itself. I was already pushing PXC instances to their limits with this approach (well over a terabyte of data per), and the main flaws were really related to the development workflow rather than that of the deployment. Feel free to PM me if you need more advice. Maybe I'll turn this stuff into a blog at some point... I've been meaning to forever. Have fun!
Kiiiiinda, but only in some tenuous ways. Virtualbox is a piece of software that allows you to run virtualized environments. It is very similar to VMWare, which Vagrant now supports too. Vagrant is a nice little command-line tool that makes working with these virtual machines considerably easier. Network config, shared folders, etc used to be a PITA before this. Vagrant has had more and more features added, letting people share their boxes, so people can use share virtual machines with each other. http://code.tutsplus.com/tutorials/vagrant-what-why-and-how--net-26500 This is old, but I wrote this to outline what things are. Vagrant has changed a chunk since then, but it gives you the outline. 
Look into [OWASP](https://www.owasp.org/index.php/About_OWASP) and [OWASP pen testing](https://www.owasp.org/index.php/Web_Application_Penetration_Testing). [Zed Attack Proxy](https://blog.codecentric.de/en/2013/10/automated-security-testing-web-applications-using-owasp-zed-attack-proxy) looks interesting as well, if you are looking for an automated tool. This is **NOT** a simple topic so you'll have to do your due diligence. 
Why would that be?
$_SERVER[‘DOCUMENT_ROOT’] is not the filesystem root, it's the site's document root directory as configured in your web server. This also means it's not available from the CLI. ~/public_html is no more a URL than /var/www - they are both just directories (~ refers to the current user's home directory). Also PHP will accept Unix style directory separators even on windows, I personally find the constant to be quite cumbersome when / works either way. __DIR__ === dirname(__FILE__) and is less typing :)
I'm guessing your php configuration differs. Have a look in etc. 
Oh, it's a quandary. You know how coding books always have a section where they explain their font choices? It's always something like, "Throughout this book, italics will represent user input." I say that for these audiobooks, the announcer would have to say, "For variables preceded by a dollar sign, I will speak in a terrible Pakistani accent. For simply a dollar sign symbol, I will scream it into the microphone" and so on. You'd get used to it after a while.
Hmm, it seems to be simple enough, can't believe no one added it to public rainbow tables. But in anycase, just google for "md5 cracker" on google and you can find quite a few. Play with them a little and you'll get my point. In a database of 50,000 passwords, I'm sure at least 60% is dictionary word passwords.
And fpm isn't a "with nginx" thing. Even on Apache you should use fpm. Just ensure configs are the same (cp or symlink to apache)
Thanks but I checked that one earlier - you can cat the /tmp/whatever file out and see the data we're expecting to see.
Such is reddit.
What type of web apps were that for example if not CMS sites? Shops? Social Media sites? I'm programming with php for a few years too and the only things i made were personal homepages with content-editor for the owners. Would be interesting to know what people do who have a real job as a web developer.
Something I found when recording [for treehouse](http://teamtreehouse.com/library/standards-and-best-practices) is that writing for book/blog and writing for audio/video is considerably different. I had to rewrite my entire script on set in a mad panic because it was so completely impossible to record. It's hard. By the time you're rewriting it you're fucked. 
Yeah. I'll probably just start off with part of it to test the waters. Anything I did would be released cc-by-nc-sa as the other content is, of course. :)
Admittedly, I've not come across phpbridge so I won't comment on that. My 2 cents: 1. MySQL shouldn't be avoided. PDO is merely an interface for which you use to talk to MySQL. Look up ORM (Object Relational Mapping) too. 2. Not neccessary. PHP has a built in server as well, and I find it suited for short bursts of coding when you just want to test things out and not worry about breaking things. Fire up the terminal, navigate to your folder where your code lives, then type "PHP -S localhost:8000". Point browser at http://localhost:8000 and test away! 3. Don't use it atm, so I can't comment on that too. That said, I like to recommend thinking of a problem that you'd like to solve for a start. It should be relatively easy. Then, break that problem into smaller chunks, followed by Googling/YouTubing for tutorials/tips. I suggest doing coding challenges too. They're also a great way to learn things. Try [Project Euler](https://projecteuler.net) and [CodeEval](https://www.codeeval.com). Don't worry about picking up tools at this stage since you already have a working environment. More importantly, keep up the learning mindset! :D
Looks like snake oil to me.
it wasn't actually targetted at you, more readers who might not know docblocks do not affect code lol. The idea they should is mildly laughable though. We have typehinting now, I think if anything there should be tools to generate docblocks from function definitions, that would solve both without having to maintain two systems... 
I think it largely depends on what kind of job you want. If you're looking to work in the startup world there are probably a lot more opportunities to work in PHP without needing specific knowledge of a framework, compared to traditional businesses that probably have a framework they are stuck with, and then as others have said you'd want to pick the framework that will either give you the most opportunities if you really don't care what you work in, or pick the one you like the most and get good at that one, because those companies are usually going to have a specific framework in mind if they're looking for someone with framework experience.
If your going to do an application only pen-test it wont be worth anything as the environment (OS, server, firewall, certs, access, weak passwords etc) will have as much to do with the security as the code in PHP. Unfortunately this robust approach will mean there is no one tool to rule them all. 
you should try it.at first i also thought it is like a black box..i used to use wamp, but since the php version is lagging behind, i forced myself to learn vagrant..and i have to tell you it is a good choice..i will never go back to wamp stack anymore :)
Vagrant is like scripting virtualbox, i.e. you create virtual machines really easily and you can share them (by sharing the config script which can rebuild the virtual machine on everybody else's machine).
Turn on your error logs. Make sure, you have the following directive in your pool config: catch_workers_output = yes It allows all your php-fpm workers send their (error)output to the main error log.
We've been teaching folks for 2 years in other languages, but it's always good to get more perspectives. We try to stay humble about these things. Our course is less than half the cost of a 2-year degree from a local community college, and well over 90% of graduates find work within 3 months. I don't think "big money" is a fair way to describe what we're doing.
Can you elaborate?
oh jesus that typeface hurts my eyes....
Curious, if you are on AWS, why aren't you using SQS? 
&gt; If you're in a position to use a PECL extension over a Composer package then you probably want to use the PECL extension. Don't you mean, "want to use the composer package"? Your next paragraph seems to contradict the first. --- Side note, wouldnt PECL extensions run faster?
Just to clear up the first point, there are a number of extensions in PHP to interact with MySQL databases. There is an extension where all the functions start with mysql_* and that extension has become deprecated in favour of mysqli or, as you mention, PDO. It's nothing directly related to MySQL, simply PHP's way of talking to a MySQL database.
We did start using SQS initially, nothing wrong with it as a basic messaging queue. As our software increased in complexity we needed some of the more advanced messaging patterns that rabbitmq offered. Also amqp plays nice with tonnes of software, where as with SQS you're a little more limited. 
Hey I was going to link to http://verraes.net/2015/01/economy-of-tests/ but just realized they are the same articles ;) So yeah, everything doesn't need to be covered by integration/system tests, that's a waste of time (both for writing/maintaining them, but also running them).
In gonna get into HHVM. Thanks for sharing 
[Jenkins PHP](http://jenkins-php.org/) You don't have to use jenkins (or any build tool) but the tools contained in this build are the ones I rely on
Indeed. I have something that's command line based (basically PHPLOC, PHP_Depend, PHP Mess Detector, PHP Copy/Paste Detector and PHP_CodeSniffer) that pumps out some simple webpages. Maybe I should through it up on github if anyone's interested?
You also have Codacy https://www.codacy.com/ that I work for. Our objective is to go beyond basic static analysis by helping you tackle your technical debt and save time in each code review. We want to integrate in your current development process and take over the heavy-lifting of configuring all your tools. Discovering advanced performance bottlenecks and security holes is the next step for us. 
I would place a large wager that there are far more instances of mod_php in use in the wild than PHP-FPM, so not maintaining mod_php would be a horrendous decision. But yes, if you are running a production PHP application, PHP-FPM should be used.
Rapid development. 
* Rapid development * Widely deployed (nearly ubiquitous) * Backwards compatibility (if you have an existing codebase in it you don't need to switch language) * Easy set up (nothing's simpler for web pages) * Extensive, easily-browsable documentation
Its ubiquity.
Yes, a class will help me with that little push I need. Thank you!
Can you give me some example where you really appreciated what Scrutinizer found or in what way was the analysis more in depth?
1. Okay. I think i understand, correct me if I'm wrong but it's not MySQL that is deprecated, more like the mysql_ extension before datatbase controls? 2. I thought i recognized it and looking into vagrant yes phpbridge is going to use vagrant in learning cirruclium. 3. So the psysh is for executing single lines of code. This mainly is important (in assuming) for learning the syntax and other basics of the language? Also, what is wrong with XAMPP? I mean many places that walk through learning introduce that. It seems like a good place to start? Is it exactly that, a good place to start but vagrant is the next step? Thank you so much for the response. 
By "stronger" I mainly mean "stricter". Basically having things like interfaces, enforcing LSP and being able to avoid "thorough duck typing" if you like.
Got it. Python is of course also playing catch-up with more complete type hinting et al. And they only got clumsy [ABCs](https://docs.python.org/2/library/abc.html) for interface constraining. (Its relaxed semantics are more an acedemic userbase thing anyway). The Java OOP references just remind me of my forays into object oriented assembler back in the day (Neh, don't ask).
I strongly believe the "Widely deployed/Easy deployment" strength is what made PHP *the* web language. It's easy to use, yes, but being easy to manage for sysadmins(am one) and use on shared hosting made it what it is today. It makes me sad when fanboys of other languages dismiss it and say "lel, you can deploy a rails project in 3 commands dude, can't be easier". Maybe I can, but then I have to setup the new app proxy in apache. I also need command line. I also can't send the project to a neophyte and tell him to drop it in a sub directory and navigate to install.php to see the magic happens. I certainly could use ruby standalone and would love to. But 1. it's useless without additional gem or a framework 2. back to my point: can't share with others. There's also another strength that is often contested: Easy to learn = messy/bad code. Yes some devs will write ugly code, actually we all do at some point, but so what? If all code was perfect a lot of us would be out of a job...
&gt; style directory separators even on windows, I personally find the constant to be quite cumbersome when / works either way. Yeahhh... I have my doubts about that typeface too, but a couple of people suggested me to use a hand written typeface. I think I'm going back to my old typeface. 
+1 for embedded server. I no longer install a web server locally for that reason. I wrote a small wrapper for php -S to parse .htaccess and emulate rewrite rules my flow is basically: cd /path/to/project makeitso &amp; firefox http://127.0.0.1:80
If you let your customer dictate such a bad technical decision, you're doing consulting wrong. The WAMP stack is a hacky collection of ports made for lazy developers who don't [want|know how] to use a proper development environment. People stating otherwise have been one or more of the following: - very lucky - dealing with simple enough use cases - so inexperienced/incompetent they don't even realize how wrong they are As soon as you'll have a bit of code that has not been specifically tested and developed to be cross platform, you will regret not doing things the way they are meant to. Please be responsible and chose an actual production stack.
There is no better data structure in all of computer science and every other language ever than PHP's array.
Yeah. &lt;insert competitor here&gt; might be easy-ish to set up on most VPSes, but PHP will run on nearly every shared host out there out of the box, on virtually any OS. PHP is so ubiquitous that PHP website hosting isn't called that. It's just called web hosting. In fact, if PHP is mentioned at all, it's usually because the web host *doesn't* offer it.
PHP has a stronger OO system than _Ruby_?? This seems like an absurd statement to me considering that nearly every symbol that you feed into the Ruby interpreter can be treated as an object.
It's not. We're a dynamic language but we have strict type declarations. This has advantages over statically-typed languages and weak dynamically-typed languages.
Having strict inheritance and interface conformity doesn't stop you from being a dynamically-typed language.
XAMPP is pretty good for learning, but after a while you should move away from it, especially if you deploy onto UNIX servers. Windows isn't as strict as UNIX and therefore you will get some weird issues. Windows isn't case sensitive so a class or file of Test will be the same as test whereas on UNIX, they are treated as two different entities. There have been times when I have tested on my Windows machine and it works perfectly fine, but on the server, it complains about not being able to find a class or file and sometimes it can be a real head scratcher. Virtual machines will help with eliminating these inconsistencies which happen often.
*cough* Docker
[This talk highlights some of PHP's strengths](http://www.infoq.com/presentations/php-history) from the perspective of a C++ programmer. * Save, reload-the-page * Short feedback cycle * Optimizes most precious resource of all: programmer short term memory 
Static site-only hosting has less maintenance, security issues, CPU usage, memory requirements, and scales and caches easier. Also, what if you're a host dedicated to some other language?
So correct me if I'm wrong. The idea of learning the basics of the language (i.e. syntax) on a Windows is so that you have the leniency in capitalization while you are learning the very basics. Moving on from there, The idea of progressing learning on a UNIX system is so that you focus on the uppercase/lowercase difference so that in the future whether you're on a UNIX or Windows server the PHP should act and work the same? Like, if you abide to the strict naming policy of UNIX and make sure that each class and variable is unique. Your program should work whether it is running UNIX or Windows? 
&gt; don't have any professional background in coding &gt; Our first class starts in March and we're busy putting together the curriculum. 
&gt; Like what? Can you provide an example of a situation where the separate types would be beneficial? The APIs are much simpler and more intuitive. PHP arrays add all sorts of complications: do you work based on the ordering of the pairs, or based on the numeric indexes? Do you consider keys? Basic operations like sorting become more complex than they need to be.
All the stuff PHP can do other languages can do as well, but PHP makes this stuff much easier to find. Also, PHP does make some things really easy, actually. `mail()` and `file_get_contents()` come to mind.
- Lack of property and argument typehinting means I have to write verbose setter methods (just implement C#'s get/set syntax please) - Lack of native annotations/decorators/similar means I have to write more verbose everything - Lack of advanced reflection features like proxy classes means I have to rely on code generators - Lack of standard library abstractions (this will improve as more PSRs come out) - Lack of ability to mock regular functions - Inconsistent standard library (function naming, argument order etc) means I'm constantly spending time reading my editor's autocompletion or IDE's function help tooltip rather than just writing code - Verbose closures/lambdas - Database ORMs are crap compared to other languages (SQLAlchemy, Hibernate) - I'd like to see more non-PHPstorm static code analysis tools - `-&gt;` instead of `.` for object method/property calls annoys me to no end! A lot of my earlier complaints have been fixed and the language is headed in a very positive direction fast. In PHP 5.6 you can import namespaced functions, use `ClassName::class`, define a constant that relies on other constants and more.
This is what I like about it. It has all the tools to write good OO code.
&gt; DateTime implementation; Really ? PHP does that just fine, indeed, but how is it better that other languages implementation (except for JS...I sure know how bad it is in JS) ?
And the ASP.NET MVC framework as well as the old Web Extensions library have a bunch of web helper methods too. 
I agree. Having several optimised types will always be more efficient than having one general type that tries to do everything. This is one reason why Hack added collection types.
FWIW I don't think I ever manually convert an object to array or vice versa in JS. you can use forEach to iterate over both of them. The type system in JS is pretty inconsequential. I write JS every day, and I don't ever think "what type is this value" because it often just doesn't matter. 
They're not only more efficient, but more practical to use.
Powerful and very dangerous when used wrong but yes, it's a nice feature. 
Imho php is a horrible language BUT it does one thing very very well, better than other languages: templating. And that's the reason it became so successful i believe. Being able to do this: &lt;p&gt;foo bar&lt;/p&gt;&lt;?php /* some code */ ?&gt;....... so easily is awesome, and something you can't do out of the box with javascript or python. In fact i like so much how templating works in php that for my latest projects done in node i still use php for templating, via http requests.
It's something I've looked into, possibly down the line when Hack is a bit more mature.
Simple, it's pragmatic. It's simple for someone to get started with it(also it's negative side)
One short-answer variation: so you know what to expect.
..you DO only use PHP for template in regards to basic loops and variable placement right? You do keep all business logic out of your view right? Also, how much does setting up a separate sub-request impact performance? There is honestly nothing I can think of that can be done with PHP inside templates that Jade can't as well do...
PHP is agnostic in approach. It's both a strength and a weakness but what I love the most about the language is it's ability to empower the developer to write their app however they please. Don't want to use OOP? No problem. Don't much care for Traits? Never mind them entirely. So you want to setup strict types of function/method arguments? Go right ahead though not mandatory (limited unfortunately only to objects though) It's a language that you can roll your own tech extremely easily with little problem. As for the weakness of it: It also means everyone HAS rolled their own tech and most of it isn't especially wonderful, and full of problems ranging from security to stability. In my honest opinion, it just has one of the most forgiving approaches to Multi-Paradigm than most other languages out there. There's really only one or two ways to write a Ruby or Python application (arguably of course, im no expert), but with PHP, you can approach it in a made up way you invented if you wanted to
&gt; "Although the idea of dependecy management is not new and considered to be a fundamental development practice, it is not widely adopted by the PHP community. Composer ..." Compliment to PHP, always with a side of condescension. I can see the Ruby is still strong in this one.
i added it to my suite and it actually look about 10 seconds longer to run with slightly higher memory usage. 
&gt;-&gt; instead of . for object method/property calls annoys me to no end! Well, think of it as a tradeoff between a sensible concatenation operator and a small object member call... The . operator in php is concatenation, which I love. The + operator should absolutely not be used for concatenation, it's addition! And because the . operator is used for concat, it can't really be used for object members. Personally I prefer it this way.
Yeah, mutable datetime is not a nice thing to have. But in PHP 5.5 we have [datetime immutable](http://php.net/manual/en/class.datetimeimmutable.php) which is nice. About the date formats you mean that them don't follow ISO 8601 specification? If yes I think that the documentation is really good and the formats should be no big trouble.
Alright, second paragraph just seemed kinda misleading. Gave no reason why you would use pecl over composer.
In my opinion, **DOCUMENT_ROOT** should never be used. One of the best practices that I like to use is defining a SITE_ROOT relative to the location of a configuration file. In your bootstrap.php: &lt;?php define("SITE_ROOT", dirname(__FILE__)); // Composer loader, if you use it (you should!) include(SITE_ROOT."/vendor/autoload.php"); Now, any file that references bootstrap.php will have the SITE_ROOT properly defined. Hopefully you are using some kind of routing library so that all of your scripts get routed through the master bootstrapper. The advantage is that you don't have to rely on DOCUMENT_ROOT, and setting up multiple subfolders for different environments (e.g., http://example.com/dev, http://example.com/dev2, http://example.com/dev3) a lot easier. Because they each define roots relative to their own copies of the bootstraper file.
Nice example of reusable components. Intervention Image, Flysystem, Symfony requests. Very cool to see it all working seamlessly together.
Your right. I suppose my point was more about the flexibility of PHP and the community behind it. Compared to something like ColdFushion or ActionScript.
&gt; Okay. I think i understand, correct me if I'm wrong but it's not MySQL that is deprecated, more like the mysql_ extension before datatbase controls? Exactly this. MySQL as a product is fine; the mysql_* API is not. PDO is the way to go. Just wanted to make sure you got a clear answer on that, because it's important!
Thank you! I thought that was what it meant but I just wanted to make sure. Thank you very much! If you don't mind, do you have any thoughts about anything else brought up in this thread?
Yes exactly, let's say i do MVC, with M and C being handled by Node and V being handled by PHP, more or less this is how it works: Node handles an http request, does whatever it has to do, finally it makes another HTTP request to my parsing app done in PHP listening on localhost, passing a JSON object with parameters as the body of the request, then PHP does whatever parsing it has to do and sends a response to Node, then Node caches this response for following requests and gives it an expiration time, it all works pretty well. I don't know Jade but yes, i'm aware that template engines written in Javascript for Node exist, however, i just don't like them. Call me stubborn, close minded but probably the main reason why i don't like them is because they're not native features of the language, they are libraries that somebody who is not me wrote, and i always avoid using other people's code whenever possible, i'm not saying that's right, but that's just me. Edit: the caching part i mention is crucial, it would probably be too much overhead if i made a request to my php app with every request to node, so i cache the result and use it for a limited time, probably 10 or 15 minutes depending on the web application i'm working on.
I've never looked at psysh or phpbridge, so I can't really tell you much about those. I'd agree with the other comments about Vagrant and \*nix systems: you don't *have* to learn/use them yet if you've got XAMPP up and running, but it's likely that you'll end up deploying sites you develop to (almost certainly) Linux servers, so having some familiarity with how they work and differ from Windows is going to be important eventually. Vagrant's also useful because you can isolate each site you're developing in its own VM — it's common to work on different sites that have different dependencies, and being able to separate those out in environments that more closely replicate your production environments is hugely important.