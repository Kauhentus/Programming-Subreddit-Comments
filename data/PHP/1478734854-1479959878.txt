Why is it so hard to find and hire symfony developers?
You are correct. That is exactly what it says in the docs: http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration In the red warning box, it says "Warning Aliases for the above scalar types are not supported. Instead, they are treated as class or interface names." 
I can hear the sucking from here. 
It would be a good post if these lists were kept up-to-date.
How much will you pay me to work remotely?
If you're open to using Nginx, this is how it's done in the config for Laravel: (It's being a bitch on formatting here, so this may come out looking garbled) location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ /index.php$is_args$args; # Uncomment to enable naxsi on this location # include /etc/nginx/naxsi.rules } I also rolled my own to run on an IIS server with PHP at one point, but trust me when I say it's a giant pain in the ass to reinvent the wheel. You're better off just using an existing framework.
That said, what you're doing doesn't really look like an SEO thing. If you're using Apache and want to stay on it, just set up the rewrite stuff and leave it at that. Your function seems irrelevant to your main question, but I could be missing something.
If you quickly want something done: Laravel. If you care about programming: Symfony.
I personally prefer https://github.com/nelmio/alice, There are bundles for this too. In my company we use this for 2 things: - Repository tests - Integration tests Our entities are in packages so only those packages depend on it, small and proper fixture sets to test specific repository methods. I'm working on a test suite that collects all applications to be tested and simply collects our entity packages to create a database in a temporary socket that lasts until phpunit is done. Each test has its own fixture set and they can depend on a generic fixture set (such as a list of countries). The testing is done using Selenium btw. I don't really see a benefit using functional tests with the KernelTestCase/WebTestCase, as: - They don't deal with javascript - You're mainly verifying if your application is working, not what the internal state of your application is. When do you want to extend those test-cases? When you're building a vendor package for a bundle and you need to test your bundle functionality (which I hope is not a library or filled with dozens of controllers). 
My recommendations: - If it's open-source: XML, always. else: - If it's directly related to an object (E.g. mappings like ORM, validation, routes etc): Annotations. else: - Yaml.
In CodeIgniter, does `uri_string()` solve your problem? http://www.codeigniter.com/user_guide/helpers/url_helper.html
I've been using silex, httpfoundation and sometimes twig for quite some time. I love them. What other parts should I definitely look at and why? 
Its a problem in New Zealand, also. Employers STILL have a hard-on for bums in seats and brick-and-mortar.
Dont use .htaccess Use the apache config system and always have the IDE push changes to a vm - you can run a vm locally, but I never do.
There's a standard but people seem to not want to use it. That's a problem of those people, not the ones that recommend it. The simplicity of PSR codestyle is that the most common style fixers can just run it without any problems. Takes a lot of load off your work and reviews.
Not to mention I get fuck all done at an office. Last time I was working in a space with others I lasted 45 minutes before giving up. Funny how everyone goes somewhere else than the office when they really have to get shit done. (happy freelancer here) 
&gt; People don't know better. They'll just use whatever you tweet. It's almost like a religion, especially if you sometimes see reactions of Laravel users 
Wherever I am, I have headphones on with loud music and eyes facing a screen. Some places just think I'll work better with a 2 hour commute in the morning, I guess. Then I miss daughters bed time getting home late :( Unrelated, anyone find a sudden contact drought at end of year? Starting about.. now? Maybe it's just my region of the UK, north west. 
*Yet another* question from you that 1. should have been posted in /r/phphelp 2. doesn't have a thinnest ground behind In fact, there is not a single problem with handling URLs with frameworks. they just handle any method your web-server is able to provide, while all your questions are devised straight out of nowhere. &gt; accept a query-string such as "index.php?/foo/bar" in fact it's just index.php/foo/bar, without a question mark. Neither it's a standard method, but just a fallback. &gt; the CodeIgniter will return different values for current_url() function in both these cases and will do it for the obvious reason: by clicking a link you should land on a page that can be processed by the current configuration. So there is not a single problem either. So, in a nutshell, you don't have to handle different routing methods manually - **a framework already doing it for you**, making your app work in dev or production environment the same way. This the reason you are using a framework, after all. And finally, your question is not about handling URLs at all but about handling *access permissions.* That have to be handled not by means of tinkering with URLs manually, but by means of implementing a ready made ACL module.
For the built-in server: - Launch by passing a specific file to run, not a directory. - When you don't match a route, test with file_exists() if the file in $_SERVER['REQUEST_URI'] exists. - If not, show 404 page. - If yes, return (bool) false from your top-level code, this will trigger the built in mechanism for serving static files. You can leave the .htaccess in, it'll simply be ignored while testing, but it'll work when you deploy.
It's very hard to hire a technical person when you're non-technical. Try to have someone you trust conduct the interview, at least. Otherwise you're shooting in the dark. And this is bad, because the first dev you hire will be defining the entire tech culture of your startup. It's crucial.
DEFINITELY THIS. Having skilled persons doing dev hiring is crucial. I work in a tech company with now &gt;30 PHP devs, and we increased this number (and the quality of the new hires) only when a tech-specialized HR person was hired, and when we increased dev's involving in the interview process.
that's irrelevant to his problem. in fact he can use apache routing, nginx routing or none of them but everything should work all the same.
He is asking not for raw PHP but for CodeIgniter
The reason a final class is used, is that you won't have multiple options to use the constant. If you would have an interface, you could implement it and you'd be able to access the constants in multiple ways.
There's not many cases where you have to extend so that's not the problem. The problem is that you create multiple access points for your constants. 
&gt; you should leave it to the project to decide That's not what a standard is at all. Use whatever standard you like, no one forces you to use PSR-2. Meanwhile, the rest of the world will adapt to PSR-2 and you'll be the one left out.
Myself and my former employer both worked in absolute silence. Many days where not a single word was uttered other than "hi", "lunch", "bye". Unfortunately this means I can only work in offices or certain public libraries. Until I recently moved out to the desert I couldn't even get work done at home with all the neighborhood dogs, birds, landscapers, traffic etc.
As usual, the voting reflects not the value of a comment but the valaue of voters :)
Completely understood. I'm in exactly the same boat. I've been a software engineer/programmer for the past 18 years (uniface&gt;java&gt;php&gt;js/php) and have very little out the in the wild due to half of that being working for someone else and half being client projects. I use symfony and have also been onboard since 1.2 (which was awesome to find at the time in php!). However I'm so glad of the leaps and bounds made in design to where we are now. Do you have a go to CI/CD strategy that works well with symfony specifically?
Have you ever done any BDD (Behat)? I was almost convinced that I was going to start using fixture classes to populate my world, but then I realised if I was to use Behat (I really like the BDD methodology so I'd like to do this), each feature needs to be explicit about the data in the database. In fact, Cucumber, of which Behat is the PHP implementation of, recommends [cleaning out the database between each test](https://cucumber.io/docs/reference/state) (called a "scenario"). A feature would look something like: Scenario: Calculating the score for a foo with two bars Given I have a foo And foo has a bar with value 10 And foo has a bar with value 20 When I calculate the score for foo Then I get 30 That test only makes sense when only the necessary data is populated in the scenario method (i.e. first inserting a `foo`, then inserting two `bar`s, both related to the `foo` previously created). Now, if a fixture that creates the foo and the two bars in the database was loaded before the scenario was loaded, the test would look like: Scenario: Calculating the score for a foo with two bars When I calculate the score for foo Then I get 30 Looking at the scenario is just really confusing, there's no indication as to why the expected score is 30. I could do this: Background: Given I have a foo called foo1 And foo foo1 has a bar with value 10 And foo foo1 has a bar with value 20 And I have a foo called foo2 And foo foo2 has a bar with value 140 Scenario: Calculating the score for a foo with two bars When I calculate the score for foo called foo1 Then I get 30 Scenario: Calculating the score for a foo with one bar When I calculate the score for foo called foo2 Then I get 140 This is kind of like sharing the database fixture across all tests, but I still need to implement the logic for creating a `foo` with any given name in my feature context, which rules out of the use of a static database fixture. Apologies if you haven't used Behat before, maybe someone else that has has any thoughts? It seems the Behat way of testing isn't compatible with using database fixtures.
Most places I've worked have been open plan and shared space, so constant phone calls, chats, tea rounds etc. Started working with earbuds in (high recommend memory foam ones). Now I just use headphones to drown out any incidental noise. The interruption overhead is huge. I know they recommend hourly breaks from desk but I find it just too costly. If i have to do planning I'll move to another area or whatever. 
I'm having a pretty hard time looking for a job as Symfony developer. Most companies I've seen so far are shit and lead by idiots.
I don't see a reason why people should be using a class named object, smells like code smell to me. If a decision is made regarding this, look ahead to the possibilities in future, not to what people might be using right now in scenarios that are probably bad practices. I love having BC layers that work fine, but cases like this are not worth it imo. Besides, people can refactor it easily with the modern day tools. 
Look for good personality traits. A good dev who is accountable, respectful and does his job with passion will outweigh any junior developer who's just coding, because it pays well. I always put personality first when hiring, except if I'm looking for a very specific skill set in a developer. Hire him/her on a 2 week - 1 month testing phase to see how it plays in the team. You can't find out if he has good skills in a 30 minute interview.
Joel Spolsky wrote a [decent article on interviewing](http://www.joelonsoftware.com/articles/GuerrillaInterviewing3.html), and Jeff Atwood wrote a kind of [rebuttal](https://blog.codinghorror.com/on-interviewing-programmers/).
&gt; If you care about programming: Symfony. Could you expand on that? 
Formatting: location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ /index.php$is_args$args; # Uncomment to enable naxsi on this location # include /etc/nginx/naxsi.rules } 
I got it working and it works well. There is one instance where it doesn't work - if the file name has a space anywhere in it then the stream never starts. I'm assuming that it fails in the exec() command. Should I be wrapping that in quotes maybe? Not quite sure how to implement the fix in PHP. 
May I ask, to which question you are attempting to answer here?
Yeah I've found that this type of stuff actually works a bit better in Netbeans. Annoying. Have submitted a ticket to jetbrains and had it closed as "won't fix", because apparently it requires too much work. I don't understand why it can't just show a menu with all classes that have a library() method... just like it does for some other similar stuff where it finds multiple candidates.
I just tried to make /u/mattstoicbuddha's garbled config a bit more readable.
Ok, makes sense. though Nginx has nothing to do with this question at all.
Considering all the negative feedback every other editor gets (Netbeans the main target) from the PHPStorm zelots I'm yet to find anything that makes me want to spend £100+ every year on the IDE. Some things PHPStorm is better at and some things NetBeans is better at, certainly nothing that warrants the high price tag that comes with Storm. One thing I love in Storm that I really miss in Netbeans is the ctrl click on variables to see where else they are used, this is a great feature in old procedural codebases.
I wouldn't look at personality traits like "passion, respect". But I definitely look for conscientiousness and willingness to learn. Conscientiousness (one of the Big Five axes) is allegedly the best predictor of a work performance in any field. Agree with a test period.
Welcome to the industry.
I'm pretty much as anti paying for software as you can get, I used to run a warez BBS back in the day. This is the only piece of software I actually pay for. &gt; £100+ every year That seems high. Is that for all the IDEs or a business plan or something? An individual license to just phpstorm is way cheaper: https://www.jetbrains.com/phpstorm/buy/#edition=personal I just used a cracked copy before now, but am happy to pay for it now seeing I can. &gt; One thing I love in Storm that I really miss in Netbeans is the ctrl click on variables to see where else they are used, this is a great feature in old procedural codebases. Both phpstorm and netbeans let you right-click then "find usages". Is that what you mean? Although I've found that sometimes stuff gets missed, and usually just do a normal search through all files instead. I gave netbeans another go earlier this year, and it's still way behind phpstorm on everything aside from the thing I mentioned in my previous comment above. Noticed a few fairly fundamental bugs too. But if you're happy with netbeans, might as well just stick with it.
Do you have technical friends/contacts that you trust? Pay them to come in and handle the interviews or at the very least sit in on them. IMHO you shouldn't ever consider hiring someone without someone from your team (or a friend who is technical). You can give tests all day and ask questions on a sheet of paper but it normally doesn't take a decent developer long to route out one who doesn't know shit. Personality and dedication are important but if the candidate doesn't know shit or worse doesn't know shit but is good at BS-ing then they don't matter.
The only framework using `Object` as a class name I found is Yii and they already know about it and have issue to replace that in next version which is pinned in PR
I wrote a report for the Exakat Engine, to automatically enforce this coding reference. Results are discussed here : https://www.exakat.io/enforcing-coding-reference/
PHPStorm can not handle the highlighted issue either, in fact Netbeans handles it slightly better. A ticket was raised with JetBrains for this very thing and they closed it saying it would be too much work.
With modern frameworks you don't need that crutch.
Not if you count the kids.
If you go in with this quip length attitude instead of an open mind you're going to have a bad time. My experience is that you really need to judge off the techical folks and direct management of the team you'll eventually end up working for, not the HR pukes there to make sure all the 'i's are crossed and the 't's dotted.
Laravel has helped get a lot of folks using PHP that may not have otherwise done so but I think it may have cannibalized Symfony adoption a bit. If Laravel is the "easier" gateway to PHP application development compared to Symfony then it would stand to reason that the market has more Laravel developers than Symfony? Although, if someone is familiar with Laravel a transition to Symfony would not be much of a leap.
Honestly, I've been so busy over the past 10 years and going from project to project to project that I have not had the time to slow down and contribute something meaningful to the ecosystem. I'm finally starting to slow my schedule down a little bit so that I can contribute more. The curse of the freelancer lifestyle, or at least in my case, is that you are constantly taking on jobs and you get a sense of panic and anxiety if you are working on something that "isn't paying the bills". There are better ways to approach it and I'm working my way there. 
I think I sense a career change in my future. It only makes sense. Maybe I should refer to myself as a "short-stack" web developer?
"Use POST instead of GET While it’s not always possible to use POST, using GET can still be avoided when its really not necessary. This is because GET can be easily emulated. All a hacker needs to do is to add something to your address bar to hack your project. Though, GET is an easy way to do permalinks and pagination, use POST when using form submission, it's safer." If a "hacker" cannot hack you because you use POST and not GET than it is not a hacker.. I do agree if it's for cosmetic reasons but that is not the case here.. 
Are you a tech company? As in, will you sell software/tech service, or will you use software/tech to support your actual services. Either way, pay someone else to find you programmers, or pay someone else for their programmers. One bad hire can seriously set you back in this field, even when you are technical and know what to look for. From your very short post, I dare to assume that even you don't know what you need. Pay someone to find out who you should pay. 
Yes, thanks! `uri_string()` works great as it hands over the url without `index.php` part. I should have used this right from the beginning.
If programmers were hired for their personality, we'd all be unemployed.
I've been using PsySH for a while, and this tool is really great. I love the feature with `eval(\Psy\sh())` as it is pretty nice especially when you debug php console apps. 
* **Use OOP**: No thanks. Only when necessary. * **Make use of SQL Injection Cheat Sheet**: No thanks. All I need is to PDO param bind user input or use a battle-tested library that does this for me. * **Drop Unnecessary Brackets**: Please don't. Most of developer time is spent either thinking or reading code. By omitting brackets you are hurting readability through heterogeneity. Code formatting should be done not by developers but by the editors/IDEs. * **Use POST instead of GET**: Replacing GET with POST wont save you from script-kids just because they can't see the parameters in the browser URL bar. Do your homework and sanitize all input. * **Use mysql_real_escape_string**: mysql is deprecated/removed in later versions of PHP (for good reasons). One should use mysqli + param binding or the friendlier API of PDO to access databases. It's very sad to see people with zero technical knowledge copy-pasting outdated/incorrect info and posting it here to generate traffic. If mods could remove these links as soon as possible to discourage this practice that'd be great. http://i.imgur.com/UblG4Li.png
&gt; We want to know what skills should we test before hiring him/her. What about the skills that are needed for the job you want to hire the person for? Maybe ask one of the developers to attend the interview and ask technical questions.
Honestly, I don't have enough experience with DTOS or ADR to provide an educated opinion. I will have to do more research and experiment with both. Do you have links to resources that might help? I use a lot of what Symfony offers out of the box and do my best to stick to the conventions for extending the functionality.
I hate to burst your bubble but this is the norm, not the exception. Business stakeholders just want it to work and they want it yesterday. Develop the skills it takes to convince them otherwise.
Which crutch is that? All this is doing is emulating htaccess such that the app will run under apache or the php server. I don't know how it would be possible to replace /app.php/whatever with just /whatever without some sort of intervention from the web server.
Depends on the recruiter. Many of them are looking to build a relationship. At the startup stage if you have money you'll get some recruiters who really try to find a good engineer for you. I'd recommend negotiating their guarantee up. Make it so you get half the commission back if the hire is let go within six months. 
*shrug* We have a set of extremely profitable applications running on symfony 2 and 3. To me I get that learning the 'easier' framework makes sense from a standpoint of how do I become productive faster. However from a 'what actually has value / translates into more money for me' I'm going to shoot for the older less flashy but much more widely implemented in existing profitable applications option. To me it has parallels to the working for a startup / non-startup (not necessarily kludgy lethargic enterprise ) mentality. There are significant pros and cons in both, the death is in the details.
&gt; Drop Unnecessary Brackets Seriously ? Never drop a line just for dropping a line, especially brackets, for example: // This makes everything explicit and is BETTER. if ($foo) { bar(); baz(); } // This make the code less readable, and does not work as expected if ($foo) bar(); baz(); Never, ever, drop the brackets, it's stupiest thing you will ever do. Clearly, this post was written by someone that lacks a few years of experience, and wrote it just for the sake of writting something.
To me you should start the description from a productive standpoint that. Your original post was extremely off putting, I would even consider deleting it if you were ever to seriously pursue any kind of a job search using reddit :-p. If I ask a question along the line of 'Why do you want to leave your current position' or 'What do you not like about your current position/in a typical position' etc etc and I get 'Those guys were idiots' without any other information I'm going to assume the problem was more with you than them.
On your lame windows PC where you're the sole user of PHP built-n web-server, you just don't need to replace /app.php/whatever with /whatever. /app.php/whatever will do all right. Edit. Don't get me wrong. I appreciate the technical neatness of the trick. It's just off the line, useless. As long as you're using a framework, you just don't need it at all.
I dont' use reddit to find a job, I just use it as an outlet for my insanity. I like to think that I'm pretty constructive in my 'normal life'
It is and that's part of the problem here. Using docker is another option. Moving url interpretation to the code (that doesn't need to be there) AND suggesting using .htaccess are both bad practices. sigh, /r/php
I tried that multiple times. It seemed to ignore it. Managed to get it to work fine further down though :P
Both
1. /r/phphelp 2. obviously, you have to store requested data locally somehow, and then paginate using this local storage
True. When code misbehaves in production you better be logging those errors.
You could hire a local development firm to conduct the interviews. It would be well spent money
Cool, I was asking mainly for the test environment. I find it can be a bit of a PITA to test using Jenkins compared to something with more off-the-shelf ease like travis. Thing is I value the fact I can self-host Jenkins and it's quite simple to reason about, and I'm trying to be more cheap with some things, so I can spend on others :D
[Symfony ExpressionLanguage](http://symfony.com/doc/current/components/expression_language.html) allows you to define rules using a simple PHP-like syntax and will then allow you to run these rules and get a result. A good example [can be found here](https://florian.voutzinos.com/blog/using-symfony2-expression-language/) that shows calculating discount pricing with user-defined rules. Edit: Another one is the [Hoa\Ruler](https://github.com/hoaproject/Ruler) project which I am not familiar with at all, I just know it exists.
Rest API server. Pragmatic GraphQL and OData alternative, implemented as a single file PHP script supporting MySQL postgresql and SQL server. Recently added spatial support. Ideal for starting a SPA. See: https://github.com/mevdschee/php-crud-api/
It's not for you, and neither is the community.
This is exceptionally bad. Please don't encourage others to program in this manner. 
My contribution to that topic was literally to question this sort of bs: "Can't people just program, publish, vote and integrate the solutions?"... 
Trivia, no. Actual requirements, yes.
I've done this quite a few times as an interviewer. You need a quality tech person to find a quality tech person. I use a list of questions we go through and talk about them, they're trivial if you know your stuff and it shows, they're hard if you don't and that shows as well. Have quite good success rate with it too.
A millions times this. I've been working in web development since 1999. I know about a dozen technologies. I work hard and I'm tenacious when tracking down a bug. I've got an excellent understanding of the big picture when approaching a new project and excellent skills and experience working with and refactoring existing codebases. What I'm not good at is recall of technical details in an interview environment. Unless it's a question about programming that could be described in general terms, I'm probably going to google stackexchange for the answer.
My questions are more like "Describe the difference between GROUP BY and ORDER BY" or "How do sessions work behind the scenes". We talk about it (I'm not looking for definitions, encourage them to use their own words) and you see right away when someone is clueless and someone breezes through it.
tl;dr: Latency was halved, CPU load was halved. Things are faster, developers are happier!
Yeah, that is totally fine.
Ah, that's probably what the problem was. Thank you.
What does Stas ever vote yes too?
[removed]
You forgot to mention the increased glory ... so much glory ... maybe too much ...
very cool :)
&gt; Building a modern website from scratch can be a daunting challenge to even the most seasoned software veteran. If you're a software engineer, what the hell are you doing building a website in the first place? I wouldn't trust our iOS developer to build a great website because that's not what he does for a living, for the same reasons that I wouldn't build a great iOS app. &gt; And once you move beyond a static, purely informational site and add even the smallest bit of interactivity or server-side code, you have new issues to face: "Hey guys, know how I just said this was daunting? Here's a list of stuff that generally requires a team of people. I won't mention that though!" This is becoming absurd. You're addressing what is basically a complete web newbie and telling them that their first website needs to be scalable. It doesn't, because their first website is going to suck and nobody will use it. You're focusing on some really bizarre idea that modern websites are all huge SaaS's instead of mostly being stuff like Wordpress. I could count the number of my clients who have had to worry about any one of the things in that little list on one hand without using all the fingers. Pillar 1 is fine. Pillar 2 has a problem: &gt; frontend package manager If you get your site working with certain versions of JS/CSS frameworks, you will very likely just use the one version until updating becomes important if you get too far behind. The latest versions of things aren't always the best, or a good idea. &gt; site url structure For SEO it's a good idea to remove file extensions, but it's not even close to necessary. You can rank on Google with file extensions. For somebody just starting out, this is an unnecessary step. Pillar 3: &gt; persistent storage A software engineer may have an idea of how to go about this, but I'd suspect that offering 6 different DB choices does nothing more than confuse them. Pillar 4: &gt; build tool Unnecessary for the vast majority of websites. As with your earlier list, the number of clients who needed to worry about this could be counted on a single hand. &gt; css preprocessor The software engineer should be figuring out how CSS works, not using preprocessors to build it for them. These also aren't 100% necessary, although the are helpful. &gt; static code analysis If you use an IDE or a code editor like Sublime, you can get these built into what you're using. Yes, linting further down the line can help, but if you do it right, you'll catch it beforehand. This is also why you test code, instead of just throwing it up somewhere. &gt; asset revisioning Or just add ?v={random} at the end of the source when it changes. If you're changing it a bunch in development, just clear your cache; you don't need to run gulp. I don't have the energy to keep calling out the rest of it. Suffice it to say, you introduce this as what you need for a modern site, then you go on to misunderstand what modern sites are actually composed of. Combined with the buzzwords, it just makes you look like somebody who wanted to show how smart they were instead of write something for the audience they claimed it is for. 
BRB... time to switch
Judging by his submission history, he's either hiring a huge amount of people, or they haven't picked a platform yet
I love it! I just started development of a new project in the summer. After about 3 months of working on it I decided this might be the time to switch to PHP 7, while I was still in the beginning stages of the project. All I can say is my mind has been blown by the performance increase that comes with 7. It's a great step forward for the language.
Docker
Yeah this all came natively with PHP 7, why does tumblr think they cured cancer?
Sorry, I don't see that ... I see a well known tech company vocally leading from the front, encouraging others to do good things ... all good things ...
You've never read a case study? They never claimed they did a ton. They refactored and reported results. They have a crap ton of traffic and it's good to see that the results we see scales well. You must be a joy to work with.
It's understandable you'd want to avoid this, but even when you directly apply for a full-time job, you're signing up for a "paid test phase". This is why in most countries when you sign up for a developer job, there's a "test period" of between 1 and 6 months where the employer can fire you without specifying some elaborate reason. Only bigger companies can truly afford this, so small companies would be trying schemes that save them money, say like going through the "contractor" phase. You may not like it, but it's akin to saying "I want to drive on 5th gear, I don't want to go through the first 4". It's nice to want things, but the other side also wants things, they're not hiring people to sit pretty on a desk.
&gt; Would you be comfortable building a entire CMS from scratch? Do you have experience with Joomla or WordPress or Drupal? Would you feel comfortable rewriting any of those type of systems. &gt; Do you have experience with relational databases? Which would you use and why? Do you have experience setting up tables and deciding with fields need indexing to speed up searching? &gt; They should have experience and seem very comfortable making these decisions. Let me tell you, newbies are very excited at these opportunities, feel comfortable in their decisions and they can promise to write you a full CMS from scratch in several days. One week, tops. Hiring based on the amount of hubris of the candidate is a poor strategy. Likewise for your other questions. I've seen incompetent people seem comfortable in their ignorance, and I've seen great professionals asking lots of questions back and being unsure about their answers. It's not a measure of skills.
Pretty sure you can have 5.x and 7 coexist without having to manage things through Docker, but it could also provide a good excuse to learn or configure it if you're looking for one.
[KnpUniversity](https://knpuniversity.com/) is basically like Laracasts for Symfony. It's pretty great. [Code Review Videos](https://www.codereviewvideos.com) has some more advanced Symfony things on it, as well as some other cool stuff, like Ansible, React, Vagrant, TDD tools, BDD tools, etc. I'm currently subscribed to all 3.
This is not a graph, it's a table... Your post lacks enough detail to respond, but you can make a table in PHP. Go to /r/phphelp for more help.
You're on the right track, you should start using your Google Fu to bring your forward. This particular concept is URL encoding. http://php.net/manual/en/function.htmlspecialchars.php http://php.net/manual/en/function.htmlentities.php
Ever thought about moving your old projects to Eloquent? Datamapper ORM isn't actually using the datamapper pattern but active record as well. So it shouldn't be too hard top refactor your old stuff. 
I've thought about it, definitely. But they're all client projects, mostly local business websites (DataMapper/Eloquent is used on the back-end), and I doubt any of them would pay. I've redone a few of the sites recently for other reasons and converted them at that point.
I'm one of the biggest advocators of Laravel. I've been using it for years and try to support it in various ways (eg Spark subscription). However, /u/utotwel, I honestly don't understand why you bite? It can only leave a negative impression on your brand. I have a few large, yet self-funded, projects sitting atop of L5 and it makes me very nervous when you lash out negatively in "public" spaces like this. Perhaps "lash" is too strong a word, but basically referring to the comments in this thread that are currently negatively voted. I immediately think "he isn't demonstrating any maturity or restraint here, why would he in his codebase?". You might argue that the two aren't linked, but I am a strong believer code (and more so work ethic) is very much a reflection of ones nature. The whole "every comment line is three characters less than the previous" was a small but important factor for picking Laravel - it showed a pedantic attention to detail that I hoped was reflected across the framework (which it is!). I can't begin to imagine how the amount of criticism you receive impacts you (this is true for all opensource projects - the criticism will always take its toll). This comment comes from a good place, a place that supports and admires Laravel very much - I just don't want to see it's brand tarnished - nor do you I am sure. This echo's my feelings in the what turned out to be the "Graham Campbell" thread you started on reddit a few months back. tl;dr Don't bite. Protect your brand. 
Doesn't xdebug allow for its configuration to be modified via `export` from the command-line? Couldn't Composer disable xdebug itself when executed? 
If you've got too much don't worry, we have designated holes for the overflow.
Honestly surprised this hasn't had more reaction. Or are we over the PHP-is-faster blog posts.
Dude, you're pathetic. You cannot write a line of sane code *and* you blame someone else for that.
Why not make the parser object accept the parameters in the parse function? At the moment it's not possible to re-use one object.
Now I can be triggered even faster.
It had. https://www.reddit.com/r/PHP/comments/5c97e4/tumblr_engineering_php_7_at_tumblr/
Something Something Database *trigger* joke...
There are two possibilities, not sure which one is better: $this-&gt;parameterCluster = $parameterCluster; if ($this-&gt;parameterCluster === null) { $this-&gt;parameterCluster = new ParameterCluster(); } or if ($parameterCluster === null) { $parameterCluster = new ParameterCluster(); } $this-&gt;parameterCluster = $parameterCluster;
First, he missed the point of the question. For some reason, the majority of PHP folks is unable to comprehend a question that consists of several paragraphs of text, managing to get the question title only. So he did, making his answer about Nginx completely off the line. Then he started to praise Laravel, which is again off the line because to the extent covered in the question, CodeIgniter is as good as Laravel. Then he wrote a Laravel-based solution which is just as ugly as it can be, violating the very idea of using a framework in general and Laravel in particular. You can read my explanation in the comment I gave to him above. Yet he feels not a bit of shame for it, but dares to blame someone who points at his mistakes. 
Where does /u/mattstoicbuddha blame anybody for not being able to &gt; write a line of sane code ? Ah, now I understand it, it's your normal toxic assholish behaviour!
Yes, surely its me responsible for the whole /r/php that cannot answer a stupid question from a noob.
Obligatory "did you just assume my php version, cis scum"
Quite a novel idea - no replacement for a real debugger - but nice for quick hacking.
Is Leeds commutable? Try Sky Bet if so, they're always looking for PHP and JS contractors and I've heard the money is good.
Lol
For me it is rather not the amount of people but the number of times it will be run. One-time sketches I write looks extremely ugly. While the code that is going to be used long-term, I am trying to make as neat as I can, just for sake of it. For some reason I always keep in mind the future life of the code, it's readability and maintainability, no matter if I'll be the only user or there will be others. 
I second this. Anything that's a one-off run, I'll just hack together. The moment there is any indication I, or anyone else, will be using this repeatedly, I try to write everything in a manner that conforms to most conventions and explains itself entirely.
No.... more like a cummerbund.
Put the license in COPYING if you want it to be recognised.
Where would it be advantageous to use this instead of `getopt()`?
Having used this plugin before, I find xdebug's formatting of var_dump even better. And you don't have to be actively debugging to have it work so xdebug is worth the install just for that. 
Lua is the best choice. It's a very popular language in this niche (video game scripting). Also, the V8 extension is pretty useless because it doesn't let you expose PHP functions to JS code, but the Lua extension does let you expose functions to Lua code. So with Lua, you can define APIs accessible from Lua for your various game actions. And it seems the Lua extension is actively maintained, which is encouraging.
An expression language is probably insufficient for the OP's purposes. A game requires interactivity.
I don't know why your post was downvoted, this is a reasonable question, and it's not something you “shouldn't want” or whatever (embedded scripting has its niches).
Silex used to be pretty popular. Development has stagnated a bit though (last I checked at least). The new Microkernel approach from Symfony is also quite nice.
I'm going to give it a try. In the same vein, I'd like to suggest the following for people who don't have them [JsonViewer](https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh) for formatting JSON responses in to something readable. [XDebug Helper](https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc?hl=en) for the few times you need to debug from a browser call (Although you should try to do your debugging in Unit Tests for repeatability)
I think that about the "error" messages (like missing parameter) you could make your outputs based on this JS library https://www.npmjs.com/package/commander Also, you could add one more parameter to your parameter bag to ask if the parameter is optional or if it's mandatory. I think, IMHO, that would be a good add for the lib. PS.: I know this is not mandatory, and most of the times a controversy, but I think you should commit your composer.lock since updating your dependencies *might* break your code.
Cannot reproduce; rob /tmp &gt; cat script.php &lt;?php $times = 1000; $ids = []; for ($i = 1; $i &lt;= $times; $i++) { $newId = uniqid(); $ids[] = $newId; } var_dump(count(array_unique($ids))); Consistently produces (and that's not even using `true` for the `$more_entropy` argument): rob /tmp &gt; for i in {1..100}; do php script.php; done /tmp/script.php:10: int(1000) ... /tmp/script.php:10: int(1000) 
More like inversely proportional... The code at my job almost universally bad. It's mostly copy/paste from PHP 5.2.. There is some MVC but no tests, no coding stardards/PSR.. absolutely huge technical debt on every project. The manager -who was a developer 15 years ago- micromanages everything and stops most attempts to improve the situation. Pays well though. Meanwhile the code I write at home "has it all", even though they are mostly joke projects. These things rarely end up on a production server, and when it does there is ~10 monthly visitors, mostly friends I point to it.
X-Post referenced from [/r/programming](http://np.reddit.com/r/programming) by /u/domnikl [Advanced Curriculum For The Software Craftsman](http://np.reddit.com/r/programming/comments/5cerk4/advanced_curriculum_for_the_software_craftsman/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Do you work in my old job? Not in the UK are you…?
&gt; One-time sketches I write looks extremely ugly. I like that you called them sketches.
Looking at title, I've expected it to be /r/programmingcirclejerk sub...
I write lines of sane code daily, and I also don't treat people like shit. In /r/php I've yet to see anybody that can actually stand you on any thread, because of how you act and treat people. Keep justifying your behavior however you want, but the only person you're fooling into thinking you aren't a giant douche is you.
Extension author here. I actually wrote this extension when I was doing some contract work, and installing xdebug was not an option. I totally agree there many more powerful debugging tools, this is just one of many tools that help make developers lives easier :)
I call all of my functions 'function1', 'function2', etc. It saves time during the hiring process for other companies because they know how efficient I am :D
Old news, very useful in a handful of cases but as always, try to not use it in production. https://ocramius.github.io/blog/accessing-private-php-class-members-without-reflection/
Yeah, both those work. The very first version of the extension actually just added the pre tag's around the var dump for you. I then started running into trouble with super large variables (i.e. wordpress query results, and wordpress posts). Even with the proper indentation it was still difficult to parse. That is when I added in syntax highlighting, and "foldability" for arrays / objects. But for simple variables, view source is probably all you need!
Not the poor management though. And my current place has upgraded some of our major clients projects to PHP 7. It's not all doom and gloom in PHP. 
I like the idea of this. Now, let's see the implementation...
Oh agreed! We're a PHP agency and are getting there with our legacy clients / php 7 and real frameworks :) Loving mature PHP in recent years :)
I thought thats what the protected class was for. private just means you shouldn't be setting it, protected means nobody else should be able to get it.
It is a very bad idea, but oh is it fun! :D
Why the heck can you access private variables then? That seems like the opposite of safe.
Thank you for this! But how would I go about installing it? I tried loading it as a plugin but it gives me the error: "failed to load plugin descriptor from the file atom_theme.jar". 
Another reason to switch to node
[PHP the Right Way](http://www.phptherightway.com/) is excellent, as is Josh Lockhart's book Modern PHP.
This will be convenient, thank you.
Sorry. Check the repo again. I removed the .jar file and there should now be a .icls file. You can install it by following the instructions here: http://www.phpstorm-themes.com/content/help. PHPStorm will probably need a restart afterwards. EDIT: Once installed, go to PHPStorms settings and select the theme called 'Atom-test'
Cool, that is a neat way to get around the debugger!
But occasionally useful. Look if you're pulling a collection of objects from an external store - you just want an object with all its state populated. Fuck encapsulation for that.
They're actually there, just forgot to add them to the rendering of the page. Reported at https://github.com/Ocramius/ocramius.github.com/issues/101
Vim With some plugins and modification and suffering
The material theme is excellent, available from the add on browser. 
&gt; They're actually there, just forgot to add them to the rendering of the page. That sounds like the same thing as, *they're not there*.
Nope, I code as if future me is an idiot. So I tend to make things clean and commented. The only time I hack stuff together is if I am looking to prototype an idea.
After learning the basics of PHP (learn the syntax, used some functions, read the PHP documentation) you should start using PHP libraries and frameworks. I recommend using Laravel, CodeIgniter as PHP frameworks for getting started. (Zend Framework, Symfony would be great also but they are a little bit more complex). Learn about Composer and dependency managers in general. This is a pretty awesome way to add libraries that others implemented into your project. Have fun :)
I second this. Learn basics and continue to frameworks. I don't like Laravel but Nette or more grown Yii2 would be fine. 
and in PHP 7 you can do it this way: (function () { // do something with $this })-&gt;call($object); (This is my fault; I introduced `Closure::call`)
stop spamming this shit
This is handy for testing.
You don't even need magic, the documented way of doing this is [RefectionProperty::setAccessible](http://php.net/manual/en/reflectionproperty.setaccessible.php). I'm sure every programming language provides some way of doing this.
Yes it's really cool, just wish it was possible to tweak some of the colors a little more easily. 
You're right... Laravel is not the best framework out there. As you said, it's important to find the framework that you are comfortable with. My point was: start using what others implemented, don't stuck at writing vanilla PHP. But I guess this discussion is going a little bit off topic.
Well, I'm not looking for a simple "yes I can do that!" sort of answer. More about giving examples of websites and projects they worked on that utilized the various things I mentioned. Ideally they can showcase projects they created with these features. If they can't provide detailed answers, they probably aren't being truthful! Secondly, startups have to be very comfortable at firing people when it's not working out. I always suggest to clients to hire them for week to month contracts initially before hiring the full time. I have seen people lie or "stretch the truth", like you suggested. But it's usually known within a week if they haven't produced a thing! 
See the resources in the sidebar at /r/phphelp (where this question would have been more suitable, as per the sidebar here :o). 
I would argue that if you find yourself doing this a lot in tests, your OO design could be improved.
Why do you want to learn it? If work is telling you to sort out the wordpress site I'd give you different advice than if you wanted to build an app (and which kind of app makes a difference too).
This is a great response. Identifying the need behind the desire is important to provide quality advice.
I couldn't reproduce it on my own machine either. Considering unqid is basically a timestamp with micro seconds, faster hardware will be able to produce multiple ids in the same microsecond. 
Hey, can't break visibility if everything is visible.
This is a pretty good read about random generation in PHP: https://paragonie.com/blog/2015/07/how-safely-generate-random-strings-and-integers-in-php
I seriously cannot see a serious problem here.
This is a good article. Anyone using `uniqid()` should be very aware that it's not crypto safe. For the context of what I was doing that was not an issue. I was just incredibly surprised that something called `uniqid` doesn't even make a worthy attempt of being unique. The thing that makes it so strange is, I know it's basically a formatted `microtime()`. And I've read before that to ensure 'uniqueness' it actually halts execution for 1 microsecond (when not using `more_entropy`), so that the next one will not get the same result. Powered with that knowledge this result was very surprising.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Nahh, let's be honest. We both code as if current me is an idiot because future me is going to look at that shit and know we were right.
Also this uses the scope resolution operator, which is kind of cheating itself.
Readability, the customizable prefixes, and the simplified implementation of binding variadic closures to parameters to name a few
There are countless ways you can circumvent encapsulation protection in most languages. Either through reflection, source manipulation, unsafe casts, direct memory access, you name it. Heck you can load a class through a stream wrapper in PHP, which can do the equivalent of s/private/public/ on your source code, and then access it this way. There are extensions that do similar transforms on PHP source at runtime. But what visibility gives us is a clear expression of intent (this is not part of my public interface, so if you dun goofed, it's your problem) and it adds "friction" to doing the wrong thing over the right thing (i.e. circumventing visibility is more effort than using the correct methods to operate an object). It's just like real-world objects: can you open your phone and tweak it inside? Yes. But warranty is void if you accidentally break a connection or short your motherboard. "But I didn't know this cable is so fragile" would not be a plausible defense, as you didn't stick to the phone's "public interface".
There's a way to keep the fun without breaking encapsulation so blatantly, for example, bind()/call() for a given class can be permitted only in the context of a method of that class. Then if an object wants to open itself to closures, so be it. Not that it matters that much. But it's kind of awkward the bind()/call() functionality is so unrestricted.
And the result is the most convoluted PrestaShop code base yet.
[PHPAcadmy](https://www.youtube.com/user/phpacademy/) has alot of PHP tutorials for start all the way to building your own MVC framework.
Shameful ripoff of knp/menu 
Try and look at some PHP source code and go from there, go through each line and try and understand what is happening. I found Drupal in the beginning and began writing custom modules, then realised some modules contributed by the community needed fixes, helped out there, then realised Drupal itself had a lot of overhead and stuff I didn't need, so created my own CMS. For me my knowledge grew and grew, like others have said try and recreate things you see online yourself first. Logins, Forums, Generators, Blogs, Search Engines. When you try and make something yourself you learn something new at every step, you also learn a lot about the process of coding and why some sites do X this particular way as oppose to just learning how to code and that's it.
Checkout Aura PHP packages: http://auraphp.com They are completely decoupled packages, and you can mix-and-match them as you like. It's a bit more of work to get an app running, but the components really great. 
Unit tests imo handle an orthogonal concern, i.e. determine if a piece of code works as expected and meets functional requirements. dicto attempts to find architectural problems that might never surface in unit tests. How would you express constraints like "Codebase cannot invoke Exit" in unit tests? It's a different kind of problems that dicto could find, like complexity analysis, which also is something different than unit tests but stll valuable.
I see it like develop a) a native app for Android/iPhone or b) use the existing HTML5+JS frameworks there to accelerate development of an app. Both can be right approaches, but depending on the desired result / project at hand, one method will result on a better and/or efficient *product* or suit the job better.
There is actually a learn php for javascript developers, or is that the other way around? It's by o'reilly, but is quite old I think (unless they have updated it).
Lowercase the name first, then. That's what PHP itself does.
[removed]
As a Magento developer, I know just what you're talking about. I've been a PHP developer for a long time and I want to be quite clear here: I think every PHP developer, guru or otherwise, should be obsessed with making their web application as secure as possible. The danger is much greater than many inexperienced developers think it is. In Magento, as with all widely used frameworks, a number of serious security holes have been identified and patched, and a number of folks out there aren't patching or updating their stores. A web hoster has made a site called [MageReport](https://www.magereport.com), that can check your Magento installation for you, and when I Googled "Magento demo store", one of the stores featured on the front page of Google turned dark red and was wide open for serious and very widely known vulnerabilities. So it's not just the amateurs, either. Keep your WordPress/Joomla/Magento/*{insert framework here}* sites patched and updated folks! You *will* get hacked if you don't, even if your site isn't popular. I've seen folks trying to do it in our server logs.
I noticed that GitHub only seems to like COPYING, so I've started using that for new projects.
/r/phpsec might be a good place to look
It is at the core of a set of libraries that I maintain: wouldn't want this API to be restricted, as it currently allows stuff that would be unthinkable otherwise.
Repos that were manually copied due to a workshop. Specifically, via https://classroom.github.com/
Thank you! I will for sure look into it! 
`private` is just simple way to say "This stuff is available only to code from within given context". It declares implementation detail of type. So any objects which has the same time has access to private state of each other. And there is nothing wrong with that, this event does not breaks encapsulation (since all this objects has the same type and know implementation details of each other). You also should know that closures always has some context. So for example: class Foo { private $bar; public function magic(): \Closure { return function () { return $this-&gt;bar; }; } } For this reason static functions also has access to any private variable in same context: class Foo { private $value; private function __construct(){} public static function new() { $instance = new self(); $instance-&gt;value = 'private stuff'; return $instance; } } So there is nothing "magic" that you could manually set context of your closures.
You could access protected stuff using the same approace since it less "strict" than private. Private allows access only for code, which belongs for this particular type. Protected - for all instances of type and it's subtypes. Stroustrup one said that "protected was a bad idea in the first place". This is just a simple way to break encapsulation in type hierarchy. 
Stuff I do I know I'll have to reuse / maintain / expand on later I try to do as neat as possible. I hate looking at ugly code and would feel like a hypocrite for judging others' poor code if I did it too. When I know other devs are going to look at it (and I want / need to impress them) I try harder as well. This also goes for anything on github. 
What is the issue with else clauses? 
[PHPPanda](https://daylerees.com/php-pandas/) and [PHP:Composer](https://leanpub.com/composer-php) by Dayle Rees is the best!
I really like this. But I already have a job. Is there any way I can get involved without committing to it full time?
Read your post again and I stand corrected, we are on the same page :)
Can you elaborate? I've always found symfony and the service container to be well written and easily testable / maintainable.
How are you different from existing WordPress security plugins or web firewalls or services like distil or cloudflare? 
As we are early stage, we take every help possible. Who know's what can become from a part time involvment. ;) This means, please email me and let's talk.
It's a guestion we get frequently. I wount say that there are no solutions like ours on the market, but what I can say is that, there is a alot bigger need for solutions like this than current companies can offer. As distil is mostly protecting website from ddos and bots, and cloudflare as cloud based firewall has other cons. Our solution is directly meant to stop automated attacks which use public/zeroday-exploits and most common vulnerabilities targeted against popular frameworks. We will talk directly to people and offer full support, so website owners don't have to be afraid that they have no enough knowledge to configure or set up the solution in the right way. As I mentioned before, we are not afraid to promote our solution to be the elementary part of every website and this is why we are working together with webdevelopers and hosting providers to make it available from the ground 0.
So the img src is a already a PNG... Couldn't you just copy the src?
You might be looking for data URLs? http://dataurl.net/
But i want the hover effect as well.
If you really wanted, both URLs could be encoded as data URLs, but that probably isn't the best way to do what you want. A little more background on what your trying to accomplish might help. Edit: are you wanting a single PNG that behaves like that html with the rollover effect? Because PNGs can't do that.
I love Symfony. The problem is that they left the old code base (bunch of spaghetti and very buggy) and added Symfony alongside. To keep the old module developer APIs working, they built a bunch of "legacy" adapters. Also symfony is used for only like 30% of the application. I used to find my around PrestShop code easily, now I I don't know what's happening anymore. Spaghettti squared.
Basically yeah, it doesn't have to be png just the outcome is an image with isabelle moving up and down.
I like this explanation a lot. Good analogy!
What's the use case in a nutshell?
Well, I have my own company doing custom PHP development and security for us is an ongoing concern, but we don't really have any people specializing in security. I try my best to write paranoid type of code, but we are not yet to a scale that will allow us to have a proper review process (growing at the moment, and too much work). I have 10+ years of PHP under my belt, significant portion of it dealing with money (so security was an obvious issue), so probably qualifying for the Guru part, but not really looking for work. Maybe cooperation could be interesting, as we have some sensitive projects that do require serious efforts security wise.
Hi Psihius, let me know abit more of what you are doing via email. Maybe you know someone who would like to be a part of this journey. I know how time consuming it is to run a business and to actually grow it. Either way, let's talk :)
I guess the best security solution is to avoid systems such as Joomla, Wordpress, Drupal, Magento etc.
Unfortunately it's impossible because popularity is making them vulnerabile.
Any client side effect has to be html or js, php is just run on the server, you can't alter a client-side element from php. You could achieve this in different ways, with css or js for example. 
Just because it's popular, doesn't mean you have to use it ;)
Copying/writing parent class information information in an efficient way, simulating property access with the correct scope, emulating therefore property access traps (magic methods) in a consistent way. This is usually done in the ProxyManager library, but you can also look at GeneratedHyfrator.
* Inability to perform basic research with Internet access. * Mentioning "log in" like it's some triumph despite not being relevant to the question. * Doesn't explain why PHP itself has been ruled out as a suitable scripting language. * Uses the term "sub-scripting plugins". * Claims to be "doing experiments" but doesn't reference any prior effort beyond this anecdote and probably hasn't done any actual work towards this goal. * Generally the way the question is worded completely devoid of any relevant detail suggests their first thought was to ask Reddit instead of do any actual work themselves which is the hallmark of incompetence and/or procrastination and is not the kind of attitude displayed by someone capable of getting things done by themselves, but rather, a typical behavioural trait of "ideas men" who believe they could change the World some day if only they could find the right people to listen to their amazing ideas and do the work for them.
Well, I did vote yes on `Closure::call`, so I share a small part of the blame too. :)
Thanks! I was unaware of @ocramius earlier article. Not wanting to be a johnny-come-lately dupe, I added a helper to force call any private or protected method: function force_call($object, $method, ...$args) { return call_user_func(\Closure::bind( function () use ($object, $method, $args) { return call_user_func_array([ $object, $method ], $args); }, null, $object )); }
Strange that your github acts that way, mine definitely picks up on LICENSE 
Patchmanagement is part of the solution, but as you probably know how it is about patching websites (themes, plugins and modules stop working together especially when it's custom made website), it is still on work.
Making hacks like this easily accessible is a bad idea though ;)
But still, as we look at the masses, they are most popular among bloggers, development agencies and also freelancers. That's how Wordpress makes ~25% of the internet. Even if you as a web pioneer are aware of the problem with CMS, the clients are dictating and asking for Wordpress (because they are used to it and every webdesigner says it's the best!). 
Irrelevant, on 5.x you have larger problems.
&gt; I realized how big is a problem with defacers and so called hackers who deface shitty WP/Joomla! websites 4 fun and to spread malware and spam It's even worse when you deal with [carders](https://en.wikipedia.org/wiki/Carding_%28fraud%29). &gt; I decided to change the course of my company and in the end of 2015 we went all chips all-in with a web security. Welcome aboard. /r/phpsec is the epicenter of folks trying to make PHP more secure. We've had [some success in that category](https://paragonie.com/blog/2015/12/year-2015-in-review), but there's always more work to do. &gt; We just finished a prototype for our exploit focused WAF and we have made good contacts in F-Secure, AVG and Malwarebytes who support us in every way. Having worked with Snort, Apache's mod_security, nginx's naxsi, and Amazon's WAF before, I'd love to hear more about your approach. *Exploit focused* is particularly intriguing; are you going to update attack signatures and automatically block 1days? Are you going to employ machine learning and greylisting to classify any traffic outside the normal to detect 0days? There's a lot of fun stuff that can be done here (and a lot of it has been done in the past, but not open source, so it's lost to history). &gt; Long story short, we are looking for PHP developers who are also aware of the hacking problems and have the knowledge how to clean/fix and prevent websites from getting hacked. Also we are looking for Security Analysts who will work with public and zero-day exploits and who analyze malware samples from the wild to maintain and develop our Firewall and AV. (We started with Wordpress with obvious reasons, as the next step we are going to build a platform free version) Funny enough, I've been mentoring a couple of developers who might greatly benefit from some in-the-field experience outside of my purview. We can talk more about this if you'd like. &gt; Our goal is to make web security as fundamental and elementary as possible for every website owner without them to know how to configure and set up security solutions. The greatest practical security gain you can offer most website owners is to build [automatic security updates](https://paragonie.com/blog/2016/10/guide-automatic-security-updates-for-php-developers) into their existing frameworks and tools. The second greatest practical security gain you can offer most website owners is education: if you [teach them about application security](https://paragonie.com/blog/2015/08/gentle-introduction-application-security), they can pay their knowledge forward. You create ripples that move everyone towards better security. See also: [Decent Security](https://decentsecurity.com/#/introduction/). &gt; # Everyone can be secure. &gt; &gt; It is with those four words this website is founded. Computer, smartphone, and online security does not require a degree or years of experience. All it requires is someone show you the way. &gt; &gt; You've been sold a lie. You can't buy computer security. It is something obtained through configuration and knowledge. Tragically, these aren't even hard to do or obscure to learn. But no one makes money telling you how to use what you already have. What you need is someone who doesn't care about your money or looking smart by spouting off fancy words of no consequence - just that you not be a victim. The third greatest practical security gain you can offer is to make *the tools that people are already using* more secure: Find and fix XSS vulnerabilities, move towards *non-emulated* prepared statements, employ proper password hashing, remove trivial PHP Object Injection vulnerabilities, etc. However, none of those three lend towards a sustainable business model, so building a product that people can purchase (either one-time or most likely on a subscription basis) is reasonable. If you can do a better job than the incumbents, all the better.
Trivial to do in C++ as well. Visibility isn't about security, it's about forcing you to go out of your way if you REALLY want to shoot yourself in the foot bad enough.
Thanks!
A good framework will take care of those for you. Take a look at laravel. 
Somewhat strange but for me it's on the contrary. When developing for my boss there is a time pressure so I use all knowledge I already posses to create the best code possible in limited time. When developing I'm being a bitch and only except the best of the best just to figure new possibilities:p
Oh that's utter bullshit. PHPStorm is worlds apart from Netbeans. From start to finish the whole experience is different, and superior. I'm also a Storm payer after having used Netbeans. If you like beans use it, but to paint it as anywhere near the same is patently false. You may see only minor differences, but they all add up to something significant.
Yup. Why are you wasting time worrying about SQL injection and XSS when your framework should be handling that stuff for you? I'd have to go out of my way to add SQL injection capabilities to my app because it isn't possible using the normal functionality of the framework I use.
Contracts protect you from liability, but they won't help you make someone give you money for a service they see as failing, regardless of any technical explanation you provide explaining why it's actually their fault. 
This is why I forced my company to have the motto "pay for security updates, or find a new host". 
https://github.com/ziadoz/awesome-php#date-and-time
Are you trying to say this approach is not faster over reflection on php7? 
100% agree.. We do our best to make people aware of their own responsibilities and help them to be more aware and to act accordingly.
Thanks for getting really into the post! You are right, exploit oriented WAF is aware of the software versions used on the website and can detect if someone is trying to manipulate the site. There is more to it and in the future machine learning might be part of it. We have tried to find a way for automatic security updates, which is very hard to push massively, we can do automatic patching, but updates can very often mess the website up. But we are actively working on it. Educating people and our clients is something we do already, for this, we are currently using media and other sources. Websites have to be protected from owasp top 10 anyways and this is elementary. Our solution is indeed SaaS/subscription based.
No, I'm saying in 5.x you have bigger problems than squeezing out performance from things like this.
Unfortunately I can not give you any specific data yet. But from my own experience, some developers hardcode plugins to make them just right with the functionality, some custom made websites have some functions that are built based on the concrete version of plugins / versions etc. and after updating, it might not work with the rest (not just plugins, themes are also critical).It's not very uncommon that some older WP versions &lt;3.0 can't be even transferred to other server with higher php / mysql version because the software just can't adapt. There are many things to consider while pushing automatic updates. It's not so much about WP itself, it's about plugins and themes that make the website functional.
We have a working prototype which still needs alot of work. Please email me an I will tell you more about the solution and show you what we have. I have my own reasons why I'm not publishing WIP material. ;)
OP, are you the one who wrote Carbon? I use it on a daily basis!
It's a good start, but a few things, maybe you want to improve your article a bit. * Took me a while to find the actual code. I'd recommend to put it in the article where people can find it while they are reading the article. The examples you've provided don't contain much information regarding the performance comparison, makes it a bit confusing. * With such small values for the time to connect I'd assume there's a good chance the difference is caused by something completely different. * Also, where have you read that phpiredis is still beta? I can't find anything on their github page. * What doubts do you have about the code of redis? Would be helpful to have a bit more information there. It's a start, but honestly, I'm still not sure which extension I'd want to use. I'd love to have more information to make a decision as I'll have to make one soon.
I'm a bit confused. I would have thought you're showing a way that makes it easier to write unit tests with carbon, but instead you're just showing some examples of carbon. Nothing against carbon, but the official documentation give me a much better overview http://carbon.nesbot.com/docs/
There is a confusion here.. Its purpose is to do "Online Carbon API Testing".
Oh No! I am not.
Unstable much?
Thanks for the article and thanks for bringing up-to-date PHP packages to CentOS via your yum repos.
[This is false](https://github.com/benbalter/licensee).
&gt; Also, where have you read that phpiredis is still beta? No tagged / released version.
&gt; What doubts do you have about the code of redis? https://github.com/phpredis/phpredis/issues =&gt; 258 open issues, and (bad) feedback from some users of my repository (hit by some nasty bugs).
&gt; Mentioning "log in" like it's some triumph despite not being relevant to the question. It's not particularly important to the issue at hand, but it's not all that strange. &gt; Doesn't explain why PHP itself has been ruled out as a suitable scripting language. They did, actually. They wanted “limited” scripting functionality that can “take user input and interpret them in a safe way”. That they are aware that it is very difficult to do this with PHP (you can't really sandbox it) suggests they do know what they are talking about.
Oh, nice.
Look. I can tell you're much better with computers than with people so I don't expect you to understand.
That's unfair. I understand your objections, but I don't agree with all of them.
&gt; For now we have to consider it as "devel" (even if it works well, and seems stable) A single version can't be both in beta and in development.
I just stick with Predis honestly, its served me well and ive never ran into a single problem with it 
I've only briefly worked with Laravel, but my experience is that its easy to use and quick to set something up. You might say that's a good thing, but often these easy/quick ways are tightly coupled and therefore much less versatile than doing them the "hard" way. Once your project starts to grow you'll be in a lot of trouble. The obvious alternative here being the Symfony framework. It almost entirely consists of highly decoupled components, except for the FrameworkBundle which ties everything together. Most of the time the only framework-dependent code in my projects are the controllers, which is also entirely optional, but the helper methods are too damn useful. Another added benefit of using Symfony is that it WILL help you become a better coder.
Okay?
Yes, also some people seems to prefer Whoops especially on Laravel/Zend side
Laracasts.com
I've got bad news for you. If you're unable to use Google, then you may forget about software engineering at all.
You want a Youtube video where you could be looking at the code itself ?
Good things I'm not part of the masses then. Quality of quantity.
The documentation alone is seriously easy to get through. Spend an hour reading it front to back and start implementing a basic CRUD and you'll be away. 
http://www.phptherightway.com/ this will get you started, I highly suggest learning a framework like Laravel or Yii when you want to make a PHP application. You can follow lots of tutorials using those frameworks. like Laracasts https://laracasts.com/series/laravel-5-from-scratch
If you are in for a video tutorial this is the one I would recommend: https://code.tutsplus.com/courses/php-fundamentals I struggled a lot when going into the scripting language world after learning html and css. This is the one that did it for me. It's from 2012 but it is completely flat PHP, no frameworks. That allowed me to see common bad practices, best practices and why we need solutions like MVC and all that good stuff. 
It's similar to an [Abstract Class](https://en.wikipedia.org/wiki/Abstract_type) . Wikipedia doesnt have a page for interfaces , but you can see an example in the link
&gt; nothing else might be shared over different contexts why though ? Let's say you have class EnterpriseOrder implements PayableOrder { public int getPrice() { // ... } } class CommunityOrder implements PayableOrder { public int getPrice() { // ... } } class PayOrderService { public int payOrder(PayableOrder order) { // ... } } I see here the point to use a common abstraction to identify an entity that's going to be used and known by an interface. am i missing something somehow ?
I get the impression from your question you know the basics of what you have listed but have yet to dig deep. If this is the case you can use this learning process to put them all to the best use you can and really learn a lot more while still feeling like most of the work is based on you learning the framework.
For what it is worth we have not yet had any issues with phpredis with PHP 5.6 for sessions in a Redis Cluster setup. We haven't used the userland library at all, just the extension's session handler.
What are your favorite most used and loved composer packages? What do you use to get the job done quickly and painlessly?
The dd helper in Laravel was extracted into a composer package. It's now in every package I build as require dev. 
The most important thing I ever did was make the configuration automatically determined based on the host. This way code requires no modifications to from (multiple) dev to staging to production. 
Just tried that... it's far more awesome that I expected. Thanks! edit: I'm reading the source which is mostly symfony code and wondering why I use CodeIgniter and not Symfony... 
We also have stability problems with phpredis...
I don't really see the point of this article. You compare 10 ms vs 11 ms? Seriously? That's well below the error margin (especially since it's .. umm, what, 1 test?). You should compare other things: - features supported by each library - ease of integration - number of bugs - stability - memory usage for large sets - ease of installation (e.g. do you have RPM / Deb packages for them, do you need to compile them, do you just put a PHP file somewhere?) Optimization is not about having that "1 ms" faster response for a single query you do on a machine that does nothing. That literally is a waste of time.
1 Ms matters if you're trying to keep response times below 10ms. 
My question would be why?
"but at some point the cost of abstracting away the possible deviations begins to result in significant runtime cost." - Is actually a point that speaks for architectural tests that are not enforced by the architecture itself. Consider an open source project that checks for these architectural rules on every contribution. You can make sure that e.g. the given layering isn't violated without the need for a complete review of each contribution. Furthermore you make sure you don't overread any suppress errors, exits other bad practice php global methods. The ILIAS project is, as described, a legacy project: The given violations of a ruleset can be used as a todo-list for parts of the software that need refactoring. Furthermore it prevents architectural corrosion after the inital clean up. And I'm curious to discuss: How do you disencourage the usage of the database in a set of view classes? Do you work on an open source project? 
First of all I think that the two approaches are not mutually exclusive: The best way to avoid architectural corrosion is certainly to have a well defined architecture but architectural tests can give you additional information about the state of your project. I'm sorry I don't really understand your second example. But if we have a look at the first example: It helps you to not have write access from the view via these immutable objects. But only if the contriubtors actually know they have to use the immutable models and not the mutable ones. You could have an additional ruleset in your codebase that assists that architectural assumption (I make some minor assumptions about your codebase): ModelClasses = Classes in namespace: "Models" ImmutableModelClasses = Classes in namespace: "Models/Immutable" View = Classes in namespace: "View" View cannot depend on ModelClasses Only ImmutableModelClasses can depend on ModelClasses This way you could actually make sure your mutable model classes are not accessed by the view. Another possible approach is that if your model classes are only data containers with getters and setters you could define your rules as follows: ModelClasses = Classes in namespace: "Model" ModelSetters = Methods in: ModelClasses with name: "set*" View = Classes in namespace: "View" View cannot invoke ModelSetters I think the main focus is that the rules are easy to write and thus can be defined according to you individual architecture. Furthermore they are easy to read and can serve as some sort of documenation. The possibility to actually run this documentation against your codebase is a powerful thing, as you can directly see the state of you architectural documentation. EDIT: Formatting and Typos 
Because they're crazy. Plus, in some really narrow defined situations, it's faster. However, right now it doesn't support most of the widely useful aspects of PHP, so performance isn't great if it can't run your laravel/symfony/cakephp/etc framework. Pluuuus, if you're able to run HHVM in repo authoritative mode, then you get massive speedup with support for a larger set of PHP features... (Disclaimer: I have a love/hate relationship with the Peachpie project. It's a nice little toy right now, but I don't see it as serious until it can actually run a modern PHP app. Until it can, I'll be critical of any notation that it's a serious project)
You can still inject the mutable objects (again making assumptions about your architecture). Dependency injection doesn't save you from having messy dependencies. The view can get an instance of a mutable model class from a different dependency or get it through some static call or whatever. Maybe if your codebase is small and relatively young it is easy for you to check whether no view actually accesses mutable model classes but with bigger and older code bases this may no longer be the case. Saying the view can't get a model class because it is not injected is like saying we can't get a model class because we don't pass it in the constructor. That's somehow just an assumption. With the ruleset given above you have more control whether a class actually has some transaction with a mutable model class. And let's just assume you quit your current position, does your successor know that only immutable objects should be injected in the view? Again I think the approach is not mutually exclusive: The point I want to make is that architectural design does not invalidate architectural tests.
&gt; That you can switch between beans and storm without wincing in pain at having to use beans ever again says something about you I don't know why you're taking this so personally, or making personal remarks about me. All storm supporters are very zealot like when they talk about it and everyone else's opinions are invalid. I'm in absolutely no way saying Storm is a bad IDE, in my opinion there is nothing in my daily work flow that Storm does considerable better or any feature Storm has that Netbeasn doesn't that I think oh I really wish I had Storm right now. For my daily PHP work consists of the following: * working with frameworks Laravel, CI and Symfony * database access to MySql * working on multiple microservices at the same time * working with docker containers * working with tools in the terminal * working with pre-compliers SCSS and typescript Netbeans doesn't leave me needing in any of those departments it has it all (as does storm) so for me there is no logical reason to pay for Storm. Sure you might have other cases where Netbeans doesn't have the features you require but for me it covers all the bases well.
YAML for me. I used to use annotations, but the syntax is often just awful and it ruins my docblocks. It also means tieing your configuration to your code. I'll only rarely use it whenever I'm in a hurry and need to declare a route which I'll probably end up removing later on.
I consider myself lucky to have such a strong understanding of security from the perspective of PHP, but also as a whole. I began with PHP 3.0 and very shortly after moved to PHP 4.0 but I was learning and interacting with a community that was very hacker-minded. We'd all create new things, and share them with the whole group, and at the time I thought some of these guys were bullies because they'd always find a way to do things I didn't expect - from full blown hacking, to simply putting a bunch of O's in a shoutbox type thing I built to break the design of the site. As I said, at the time I considered these people bullies, but looking back, I owe them so much. I learned the importance of security from very early on, and had super smart people always trying to break my stuff, so I was constantly fighting that battle and gaining a better understanding of how to keep my code secure. I am no longer in contact with these people, we're talking 15 years ago now...wow, just saying that makes me feel old...but I wish I could go back and thank them for how they helped shape me as a security-minded developer. I'm not interesting in pursuing new opportunities but I echo your concerns and love the idea and goals you set forth. I wish you all the best with your endeavors!
&gt; All storm supporters are very zealot like when they talk about it Because everything about it is superior. &gt; and everyone else's opinions are invalid. Because they ARE invalid. To compare anything to Storm at this point in time in 2016 is simply absurd. There are no comparisons. Beans and Storm have plenty of shared features, but Storm simply does everything better. The whole experience is just... pure. The amount of time you probably waste just hitting the save button in beans alone racks-up time and irritation that is dead and buried in storm. The tab management is another first-to-mind feature that storm has that makes life easier / cleaner. Both of these minor features can be emulated in beans with plugins, but with storm has this stuff out-of-the-box just like everything else. Storm WANTS you to be productive, whereas beans just wants to be an IDE. storm just continues to add more and more little features that are so fucking sexy they give me a medically concerning erection... case in point is just recently I noticed storm can now automatically push / pull the IDE settings to / from a remote repo so you can keep your IDE settings automatically matched across all storm installs you use... no more setting up your IDE if you reinstall. Storm is the pro knife, and beans is the $20 knife kit you buy from the cheap shop. They look similar, but once you wield them the difference becomes apparent.
I'm curious about something. Why did you go for this approach instead of just using an existing router/microframework?
Because he is learning?
The original mysql driver for PHP is deprecated in the 5.x branches, and completely removed as of PHP 7. You can use mysqli, or go full-blown PDO as two alternatives. The advantage to using mysqli is that it would take less effort porting from mysql to mysqli a little less painful than PDO. An advantage of PDO is that people would have the choice of databases. I would also recommend using prepared statements in comparison to variable interpolation. Even though you are using `mysql_real_escape_string()`, your code could still be vulnerable to [SQL Injection](http://hacktutorials.tumblr.com/post/63371180086/sql-injecting-through-mysql-real-escape-string) attacks. Don't get me wrong: I'm not here to put your project down. These are just a couple of suggestions for how to make your project better. 
Not put down at all! This is exactly why I came here! Thanks a lot, I was worried about XSS even with escaped strings. I've used mysqli for another project: is it less vulnerable to XSS/injection attacks? Thanks again!
Awesome, thanks for the suggestions!
Thanks a lot for the tips! I'll be updating to mysqli or PDO as suggested, and start from there. Security first! PS: What alternative to the config.php is considered more secure? Thanks again!
Really love your story! I was actually one of those 'bullies' by myself. Always loved to find the way how to get around of things and eventually, when succeeded, felt like a god. Thank you so much for sharing and I really need all the best you wished! :) cheers
A decent IDE like PHPStorm makes this process relatively simple especially if you have decent tests written. PHPStorm will let you search your code for deprecated methods. This of course assumes that the deprecated method is properly documented as such.
A good deserializer like: http://jmsyst.com/libs/serializer has the following features that json_decode/json_encode do not have: * (De-)serialize data of any complexity; circular references are handled gracefully. * Supports many built-in PHP types (such as dates) * Integrates with Doctrine ORM, et. al. * Supports versioning, e.g. for APIs * Configurable via PHP, XML, YAML, or Doctrine Annotations 
Inside your github have a public or web folder (can be called anything though). Inside this folder you would all the files which are part of your url when browsing your site. In your case it would be - style.css - style2.css - go.php - index.php - form.php - img/ folder - admin/ folder - .htaccess - LICENSE Which will leave `readme.txt` `config.php` outside your webscope. Webscope is where the webserver have its document root, which means that directories and files before that, is not accesbile from a browser. Though not all hosts supports this, and if you uses one that dont, I would highly recommend finding a new one
You can call [PhantomJS](http://phantomjs.org/screen-capture.html) from within your PHP. Examples on the linked page.
As per the original problem, you could have used docfetcher or another indexing solution. Now you have created a situation in which somebody will need to port the old system into the new one, right?
submitted, thanks
Been meaning to try this out, how easy is it to get set up?
Is this basically like a bit.ly clone? Just curious, as there isn't a link to a demo site as far as I can see. I suppose I can put it into a VM and see, just thought I'd ask first! :)
[removed]
One thing that I find very slick about exponential smoothing is that you don't have to run through the entirety of historical data to get the next value for your moving average. You just need the last value for the moving average and your new data-point. _Everything_ historical is contained within that last moving average value.
My company has used [mpdf](https://github.com/mpdf/mpdf) with positive results. You give it HTML and it gives you a pdf. It does require certain things like inline-ing of CSS, but on the whole it is quite usable.
I use it for my Laravel application. It took a while, but well worth it! So easy to deploy now and revert back.
[removed]
I use FPDF, and it worked well for me, you can give it a try http://www.fpdf.org/
Ok so: what you're feeling is called impostor syndrome. Basically, it boils down to feeling not good enough because what you do isn't what "real" developers do. But here's the thing: “what makes someone a "real" developer?” Maybe people who write raw php with no frameworks are "real" developers? But to someone who writes C (which PHP is made with), the raw PHP dev would be a pretender. But to someone who prefers assembly, a C developer is being lazy and isn't a "real" developer. We make trade offs every day to balance functionality, ease of use, and simplicity. Programming is all about solving problems and building things. Nobody cares if you're using [Symfony](http://cmf.symfony.com/) or [Symphony](http://www.getsymphony.com/) - what they care about is what problems you solve. You could spend a year writing a library that would download cat gifs, be extensible and flexible, be scalable up to 1M req/sec, and be build to support PHP 3.2 all the way to PHP 7.1 (yay you did something congrats, here's your gold star) or you could just go to https://www.google.com/search?q=cat+gif (oh hey you solved my problem of wanting to get some sweet gifs for my newsletter). Both solutions have merit, both are valuable. Why you pick which solution depends on a number of things - but at the end of the day the 'why' is yours and not anybody else's. If you're building a cat gif empire, maybe CatGifEnterprise is the way to go. If you just want grumpy cat, maybe google is your solution. You want to write your own framework? _Cool, do that._ You want to build a website to aggregate the best cat gifs and help people find them, and it's easier to use a framework? _Cool, do that instead._ Build things because it makes you happy, not because someone tells you what the "right" way of doing things is - I guarantee that someone else out there thinks that person is a raving lunatic for doing things the way they do. Just keep doing things, day by day. Try to learn something new each day. And in a few years, you'll have a realization that "oh shit I know so much more than I used to". 
How does this compare to other deployment tools? I'm not adverse to one written in a different language -- the deployment tool doesn't have to be written in the same language as my project.
Other deployment tools definitely better, you should use them. 
&gt; Writing my own code I feel like I'm just stuck googling for best concepts hearing from 20 different peoples about how to approach problems This is actually a really good thing. This is better than just knowing how to connect pieces together without really understanding why or how. Searching for best practices and getting lots of different opinions is an instrumental part of growing as a developer. The great thing about programming is that failure is free. It's not like carpentry whereby you screw up and it costs you $2000 in materials. You can fail as many times as you need before you start understanding things. The first thing you should do is enumerate all of the things you work with when using a framework, but do not fully understand (e.g. IoC container, router, sessions, ORM etc) and then focus like crazy on those concepts - one at a time - until they make sense. Build your own IoC container, research what an IoC container should do etc. The key to getting out of feeling stuck or overwhelmed is to itemize the things that you are confused or unsure about, and then start researching them or tackling them one at a time.
Everything we do as programmers is done with us on the shoulders of those who came before us. Write PHP? The PHP engine is a piece of software that has been written and rewritten in the C language by hundreds of developers over more than two decades. Write C code? The various C compilers are pieces of software developed by thousands of developers over decades which allow programmers to write programs that run on operating systems. Write programs for operating systems? Operating systems are pieces of software written by thousands of developers over decades to allow developers to run programs without having to write instructions for the computer's native hardware in that hardware's native assembler language. There's nothing wrong with using a framework you don't fully understand. You don't fully understand PHP, or C, or your operating system either and you never will. Hundreds have come before you however and forged a path so that you can write a web service as a single developer without having to write an operating system, and programming language, and web server, and http layer and so on and so forth. There's nothing you can't learn about by diving into the source code however, so rather than feeling like you must understand every individual piece before you understand the whole, go ahead and use your framework of choice and let your curiosity drive diving into the codebase when you want to / have the opportunity to. In the mean time don't waste your time reinventing the wheel, when you can focus on building the stuff that will make your app unique. Most professionals use frameworks, libraries and packages so there's nothing 'cheating' about it.
To be fair, if you parameterize the latter query and explicitly bind to an integer (or, more accurately, a type that doesn't match the column definition), you brought that performance issue on yourself. For best results, enable [strict mode](http://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-strict) in MySQL (`sql_mode=STRICT_ALL_TABLES`).
looks like phpunit and/or codeception is always there on my composer.json
This is such a refreshing answer! So many times I see answers "just use [insert name of framework here]" when in reality that may not always be the best solution. "what they care about is what problems you solve." Yes!
I may be wrong, but can I go ahead and jump to the conclusion that you're either just starting out as a developer, or mainly hobby coding? (that's not meant to condescending, I'm just starting out myself) Let me first of all say that you're not even remotely the only person who feels that way while coding. I sure did, and still do - a lot. I've just started working - literally, about a month ago - at a company that exclusively works with Yii (1.1 - they're very slowly trying to shift into Yii 2). the reason I ask if you mainly develop as a hobby is: NOTHING drives understanding and learning quite like a deadline (or social pressure to succeed). I spent three months messing about with CodeIgniter on my own time, but learned more about development and MVC in general in my first week at that job. With the proper impetus, you WILL overcome those feelings, out of the sheer necessity of needing to make this thing that people are expecting by the end of the day.
&gt; mysql_real_escape_string http://stackoverflow.com/questions/110575/do-htmlspecialchars-and-mysql-real-escape-string-keep-my-php-code-safe-from-inje
&gt; popular because of the huge possibilities of ~~functions that are premade as plugins~~, which make it alot cheaper for developers to build the website for clients (and what makes the website many times cheaper for clients also) **underpaid developers working on shitty code to pay rent and food** Just stating the facts here. Wordpress is never cheaper in the long run, always makes a mess that have to be reverse-engineered by a competent developer for a hefty price. Unless you website fails and disappears after a few months.
Cool, I have a 4 letter domain that actually is a word in my language. This shit is expensive as hell.
Thanks. That's informative.
I need to learn codeception.. moving that up my list.
I really need to edit that in, but first, I need to migrate away from RST toward Markdown. I'm not fond of RST, and the early blog posts were written in it as an experiment. :) (This blog post is 18 months old now.)
Architecture is a bit like management and politics. You need to keep your big picture close to your chest, then split responsibilities well to different parties, and set things up just right, so you give them something they need, and they give you something you need in return. So the architect would be writing the "application" which is just a simple skeleton designed to hosts components with specific contracts, i.e. interfaces. And when your view interface says: function render(RenderContext $context, ImmutableModel $model) {} Then that's it. You say "that's somehow just an assumption" but having to implement an interface that says what's passed where is more than an assumption. And the way to cement this interface is to ensure controllers don't invoke the views *themselves* but they need to give their *mutable* model back to an app component, which makes it immutable and invokes the view. And how do we make sure controllers don't invoke views themselves? We keep all the APIs a view needs to do its job outside of it, and we inject it from the app again (the "context" above). The controller has no RenderingContext, and if it did instantiate one, it wouldn't render where it's expected, so it has no choice, but to cooperate with the app. Of course there are always some ways to circumvent this, say a controller may arrange things just so it saves a mutable model in $GLOBALS['model'] and the view reads it from there. But such deviations are easily caught during review and highly visible. Typically you're not trying to enforce architectural rules against *malicious developers*, you're rather trying to show a very clear path to the right architecture to *confused or inexperienced developers*. So as long as the easiest and most obvious option is the right one... they'll follow it. Of course, the weak side of all of the above is runtime performance. It's much cheaper if conventions are enforced before runtime, so we don't have to create a maze of interfaces and object wrappers. So an "architecture checker" in this context would ideally be a sophisticated type system for PHP, like Hack or TypeScript, which enforces rules on the source, without having any impact on runtime. But to reach the level of control one has through actual architecture... this is a ton of work, and I'm afraid that simply doing checks of the sort "class X should use class Y" are merely the first step in a million miles long journey. heck even languages with incredibly developed type systems can't express half the things you'd like to express in terms of architecture through types alone.
You **don't** have to know how everything works behind the scenes. Probably not even DHH or Y. Katz knows how everything in Rails is done behind the scenes. You gotta understand the core of it — how route dispatching works, how the container works and it goes on and on. If you get curious about something taking a look at the source code is not that hard and you can get a gist of how it works. Don't live with impostor syndrome. You're not. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
m not spammer
&gt; I should clarify: when I said "along the way", I meant "at any one of the 200 points in your application where you concatenated strings to build a query", not "somewhere else way up in the stack and hope it's escaped when you need it". Well I mean it both ways. The practice you describe of "200 points in your app where you concatenated strings" would just be bad architecture, but possibly also very bug-prone, with either interpolated *or bound* parameters (i.e. the "?" ones). Assembling queries in this scattershot manner typically involves a query builder, which will only make an actual string of the query as the very last step.
Maybe, but I don't think there's a strong correlation between using interpolation (vs binding) and security vulnerabilities. Any complex query will need to encode data in some contexts (table names, column names, LIKE values, REGEX values), so one should structure their code well regardless, and not discriminate against ways to put a value in a query.
If you read the name, *mysql real escape string*, there is not a single word related to whatever security, injection vulnerability or similar matters. Hence the answer: **this function is just irrelevant** to security matters. As simple as that. There is nothing wrong with this function itself. It's all right and doing its job perfectly, **only if used as intended.** While PHP folks tend to count this honest function as a sort of magic chant that protects them from SQL injections. And it's only when this function is used to protect from whatever injections *is* the very source of injections. 
Anyone using the [Opulence](https://www.opulencephp.com) php 7.0 framework yet? Currently at version 1.0 RC2. I'm personally working on twig implementation, after a handful of hours figuring out how things work I think I understand everything and got my twig view file to load.
http://php.net/manual/en/pdo.prepared-statements.php
Did they know you did this? If not, you're effectively changing their code without their knowledge and you could make it impossible for them to track down resulting bugs. What if the memorization you added caused the system to run out of memory? It just seems like a lot of this could have been solved with better communication. If they wouldn't allow you to help implement a solution, then it's not your problem. Getting involved without their knowledge and accidentally introducing a bug doesn't seem worth the risk.
Lol, you're a funny one :)
Of course, you are absolutely right. I enabled this in a way that did not affect production traffic (thanks to the flexibility of runkit) and then reverted it after I had collected the new timings and profiling data. The possibility of the solution would be suggested to the client and developer as a "low cost, high impact, &lt;risk to be determined&gt;" solution - and in this context the client has already reached out and is chasing performance improvements on all fronts. Though you are right, they did not specifically engage me to look at this aspect of it. I suppose the story should have talked about that aspect some more. It is a bit of a response/workaround to the politics and (sometimes) angst that surrounds the agency/developer-client-webhost relationship. Edit: I've added a little bit of context in the post that addresses concerns about consent/stability/risk
I was suggesting to just ignore the types, and bind everything as string, which is a good default for safety and performance. There is no need to try and bind with the correct type, because at some point someone will mess it up.
Just want to leave this here, it talks about this issue. https://www.youtube.com/watch?v=NXsWViTB238
&gt;The great thing about programming is that failure is free. It's not like carpentry whereby you screw up and it costs you $2000 in materials. Great point.
I think that a satisfying suggestion would be like this: - when binding by hand, there is no reason to stick to the string type only - use whatever type you find best, especially because there are cases when you actually cannot use the string type (BIGINT for example) - yet when creating an *automated* binding facility, better bind everything by default as a string and avoid binding based on the type detection. 
They're bound but still contain special characters that should be escaped when introducing literal values. I shouldn't need to explain this.
no [PSR-4](http://www.php-fig.org/psr/psr-4/)?? :'-(
I'm genuinely interested to know if there are situations where binding as string is bad, if you could elaborate, please. Otherwise it doesn't make sense to bind each variable to it's corresponding type, because a single mistake can cause bugs. And programmers make mistakes, always. Please note I'm not talking about ORMs that can automatically keep in sync your entities with the latest database version.
I've used DomPDF to perform similar tasks, I wrote a quick gist to illustrate how this would be done: https://gist.github.com/HelgeSverre/29b8228b61cd42cecf42737f3ad397e0
&gt; For the most part, it should provide the correct results (I don't know of any counterexamples off the top of my head, but others feel free to chime in). A real simple one, though ultimately demonstrates the point $id = mysql_real_escape_string($_GET['id']); $sql = "SELECT * FROM t WHERE id = $id";
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Any particular reason you went with the current directory structure? It smells an awful lot like CodeIgniter.
When almost every use of LIKE posted publicly I see looks sort of like this: $pdo-&gt;bindParameter(1, '%' . $_GET['email'] . '%'); ... I think we have a problem. And it's not "mere identifiers" when you need precisely one entry in order to inject SQL through unsafely interpolated data.
Are you one of the maintainers? (I'm guessing so?) I ask because I'm more than happy to give more meaningful feedback than just vague complaints on a Reddit post because I genuinely like deployer and want to see it grow and be adopted.
&gt; I just can't understand this project or what its for. Competition is good. HHVM was the main catalyst behind PHP7's performance improvements. It's good to have the option to compile to .NET.
What you did is quite reckless, and I wouldn't be bragging about it in a blog post. Your priorities were clearly wasting days of your time trying "smart" hacks, at the risk of destabilizing your client's server and corrupting their domain data, instead of contacting the original developers to improve their code. Next time just shoot an email and let the responsible people deal with it.
&gt; `$stmt-&gt;bindValue(1, '%' . $_GET['email'] . '%');` (with syntax fixed) It's all right. The very purpose of LIKE operator is to find multiple matches based on the user input. There is nothing you can find with this code that cannot be found with meta characters escaped. 
Agreed; I have used predis and predis-async with great success. Using snc/redis-bundle as well for Symfony. In fact redis + predis has been one of the few straightforwards thing I tried dev-wise those last few years.
Do you use docker4mac? What is your performance?
I was into this topic, and got at least one example: when BIGINT value is bound as string, it is received as FLOAT in mysql, and thus may lose precision. For big values it leads to bizarre consequences. Also, DBAs insist that there are complex queries for which the optimizer may take the wrong course based on the wrong operand type, though I was unable to extract a single demo from them.
XKCD have a comic about 'real programmers'. I do much the same thing as the OP. I use a framework and then go back to my own code. But each time I go back to my own code, I "borrow" a idea, dependency or even whole chunks of code from the framework. In this way, I increase my understand of why things work the way they do. Imitation is not only the sincerest form of flattery, but also one of the most efficient ways to learn. It's also a good way to have your own code that your comfortable with and solid, well-tested dependencies.
You're just trolling me now. 
Confrontational, but true. "Usually nobody but yourself thinks you are horribly incompetent." is some of best advice for nervous programmers.
By adding some namespace and cleaning up all the `require`/`include` that are smelly. What if you wanted to reuse existing libraries? E.g.Twig or RedBean?
Sounds like a great architecture, congratulations on that! You're taking away a lot of the use cases for architectural tests with such a well designed architecture. Still some studies have examples where even very recent software projects do not match the intended architecture [1]. Thus maybe an architectural test could bring up some issues even with your well written architecture :-) &gt; Typically you're not trying to enforce architectural rules against malicious developers, you're rather trying to show a very clear path to the right architecture to confused or inexperienced developers Unfortunately confused and inexperienced developers may come close to malicious developers in some case^^ &gt; Of course, the weak side of all of the above is runtime performance When running this stuff with HHVM (PHP 7?) most of the runtime affecting abstraction will be stripped away by the JIT, and furthermore most web applications are not that sensible to performance. So I think performance doesn't really matter here. &gt; a sophisticated type system for PHP, like Hack or TypeScript I think type systems are a tool for providing easy(er) to understand architecture and soft-enforce concepts but they are way more low level than architectural tests. One intend behind Dicto was also the transition of architecture. Let's say you wanted to just now implement the architecture where you can only pass immutable model objects to your view. Now by running the ruleset given above you could determine where you have stuff to refactore. Furthermore if someone of your development team wasn't aware of the architectural change (which is especially the case in open source software) then architectural tests that are integrated into a CI could inform him that he just introduced violations by using mutable objects in the view. Do you work on an open source project? I'd love to have a short look at your codebase :-) [1] M. Feilkas, D. Ratiu, and E. Jurgens. The loss of architectural knowledge during system evolution: An industrial case study. In Program Comprehension, 2009. ICPC ’09. IEEE 17th International Conference on, pages 188–197, May 2009.
I'd be more than happy to have contributors! I would love to learn lots in the process. Already did a pull request!
Thanks, I'll take a look into this further. I suppose there is never a unicorn solution that fixes all.
Yes, the correctness of the search results does matter. But it's off just topic. We're talking of SQL injection here
By introducing user input unescaped into such operators you're doing two things: 1. Valid input by users that contains such characters may be interpreted arbitrarily (from their perspective) 2. API clients that use your domain may notice the behavior and become reliant on it, or have to work around it by escaping on their own, making guesses about your backend. Leaking implementation details in your API / UI, especially unintentionally, is never good. And in some cases it may allow working around business rules, without having full SQL injection. For example, if for some god forsaken reason I was using LIKE to match a username in the database, then even if my input is trimmed, checked for length and so on, I could just type "_______" and it'll match the first username SQL will scan that's of that length on most databases, as this is a wildcard character. In the case of REGEX, aside from all I said, you can also get creative and DDoS the server with well-crafted REGEX searches. But of course, all of this is "delusions" and "superstitions"...
i use docker for mac as dev local env. i use debian in production. it's quite fast
Well, may be I am wrong, but I think you are nitpicking here. For the example provided, you don't have to supply a "_______" - an empty string could do as well. Or just 30 one-letter requests. Again - LIKE returning arbitrary data is not a bug, it's a feature. Either you deliberately let a user to select whatever row they *like*, or you're misusing this operator. If you don't want some rows to be found - then don't use LIKE. As simple as that. While REGEX and LIKE are potential self-DOS providers already, and to me it's a matter rather of design than security, whether to use them at all. After all, I've never heard of a successful LIKE-based attack, beside this kind of theoretical musings. Eager to see a real-world example. 
With symfony? Vendors shared over Volumes? Logs/Cache in a Volume? What means "quite fast" for you? I had symfony debug toolbar measuring ~10s each request with docker4mac. I changed AppKernel to write cache and logs into a non-shared directory. Also composer installs vendors in a non shared directory, now I'm down to ~400ms per request. Still room for improvements. Fastest DEV-Env I had with Vagrant and vmware-fusion Plugin (HGFS Kernel is the shit), but its not for free. Of course aside local installed web-stack.
Agreed. Whatever they want done, assess how long it'll take and then times that by 3. If they demand it be done quicker, be prepared to tell them no. Also, everyone with any kind of authority will tell you what they want done is top priority. They're lying. Unless the website is down, what your manager asks you for is top priority and what his manager asks you to do is higher still.
Resist the temptation to rewrite everything. Being comfortable with the codebase is nice, but not essential. Keep things ticking along with minimum fuss. Rewrite the codebase when you have a team to back up you up because however long you think it'll take to rebuild, it'll be many many times longer than that.
You didn't even read half of what I wrote, not sure what's your issue. But I'm done.
I think that OP's handle (i_regret_most_of_it) describes best how he should feel with that "solution".
thanks god! :) 
&gt; XKCD have a comic about 'real programmers'. For the lazy: http://xkcd.com/378/
Of course they can be, but you're missing the point! In the article: &gt; This column was fundamental to the site architecture - the client had been written into a corner by the framework developers and had no escape hatch. A framework forces you to do things their way, but a library doesn't. In this case it seems the framework didn't really fit the application well, since they were forced to do strange things like this to circumvent the framework. If you don't want to use a library anymore, just don't (find or write a replacement for it). If you don't want to use a framework anymore, more often than not you need to rewrite most of your application.
How is it awkward. Choose your root folder and namespace (for example "app" with root namespace App) and if the namespace of a class is "App/Foo/Bar" the file is stored in "app/Foo/Bar". I don't think there is any better way.
I decreased loading time by 80% on a WP site recently by installing caching. I also reduced images that were way to big.
Choose a small framework. A true win-win situation: simple enough so that you can stand a chance of understanding how it all fits together. Silex and Slim are two micro frameworks that springs to my mind. Personally, I would go for Silex simply because of its ties with Symfony and thus guarantees quality and a decent userbase. But pick any small enough so that you can concentrate on learning the ropes. Then, after a while, you will come to appreciate the work that the more fully featured frameworks does for you and maybe go that route. Knowing that you will have to invest time and a lot of energy to learn and understand how the work. But, for now: concentrate on learning the basics. And pick a small framework so that you get to learn good practices from the start.
Well done on that domain name! Good catch! :)
Same impression too, I thought it was a Codeigniter repository with less files :D
I've worked at a few companies (especially ~5+ years ago) where they had their own internal framework. Maybe I'm bad at reading, but I find no indication whether or not that's the case. Given that context, your comment seems like a weird takeaway.
Sending the customer a proposed patch would probably have been a much better solution, especially if you sell it well ("hey - by applying this patch here, you'll make your site much, much faster. Did you know how many people leave a site if it's too slow?"). Your hack, especially when using `strlen()` as your cache key is going to bite you, your successor or your customer later on. There are instances where trying to patch stuff at a lower abstraction level is a bad idea and I would say that this situation here definitely qualifies.
Going a step further and trying out a template'ing engine. Like twig or smarty. Trying a framework like laravel or symfony. A similar method can be applied to CSS using a preprocessor like sass. you can aswell structure your css and include it on demand. It makes it more manageble when it gets bloated.
The above reply has perfectly valid points, but if you are only discovering includes now, I assume the next game changer would be starting to look at CSS perprocessors like SASS. Depending on your career path, you can go in many ways after that. For now, I would recommend learning SASS, then learn how to use a task runner like Gulp or Grunt. Those should be your priorities and they do not take long to learn at all. 
Jekyll for static will blow your mind in terms of templating a static site. Build tools... I'm guessing you write normal CSS. Look at SASS, preprocessors and postprocessors, node, gulp, grunt, etc etc. Those will help your front-end life immensely. When your done, come back and ask for more, there is always more to know!
You're only really scraping the surface of what's possible for server side scripting. Most of them are game changers. Storing data in a database. Pulling it out. Using an web client to pull in data from facebook/google/other APIs. There is a whole world of stuff out there to discover.
This is just the tip of the iceberg mate. There are _lots_ of problems that PHP can solve. You're looking at things related to templating really right now, but what about adding real functionality to your site? Using databases to persist data? Translations? Processing data? There's a lot of stuff that will blow your mind if you're amazed by being able to include files ;)
Very good list!
&gt; I would say that solutions like CMS Airship can only help a few people...Wordpress / Joomla and other popular CMS are popular because of the huge possibilities of functions that are premade as plugins, which make it alot cheaper for developers to build the website for clients This will be your biggest challenge. People who pay for cheap websites are going to have a really difficult time being convinced they need these extra layers of security that is going to cost them more money.
Apt username. My eyes just got wider as I continued to read.
Interesting, that could definitely be an option, hoping there is another way still since maintaining 2 composer files seems somewhat error prone. Thanks for your quick response! :)
Normally you only have your frontend controller and a few assets in your document root, all other folders are one layer above.
Good advice. But even a frontend controller doesn't have to be in your public folder.
How would you do it without a front controller?
With nginx, something like: server { server_name example.com; root /path/to/pub/; location / { try_files $uri @app; } location @app { fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; include fastcgi_params; fastcgi_param SCRIPT_FILENAME /path/to/entry.php; } } No idea for apache but it shouldn't be too hard.
Indeed, u/EventSourced was the one that brought the problem of `LIKE` escaping to my attention.
Going to save this for later. I started developing a personal site to hone my skills and this was something I was really looking forward. Unfortunately, it took more than looking at the docs to get it working and I had to do a lot of research, mainly from sites just announcing it a new feature.
Actually, the Dev cache over a volume is good if you want phpstorm to understand your Symfony services. 
Suggestions!: * Use Composer * Use namespaces * Use PSR-4 * Follow PSR-2 (I see some mixed indentation for example) * Add DocBlocks * Add tests * Stop using globals, completely, full stop * Split out some of your logic into classes that actually should have these things in, for example, you form validation stuff could easily be a separate validation class on it's own, increasing it's reusability * Use the new array syntax (`[]` instead of `array()`) * Definitely look into dependency injection, and while you're at it, look at the benefits of pure functions too Good things!: * You're using PDO, great * You have translations in there, that's cool * Separate configuration is good, and PHP files are actually pretty good at being configuration files too It's nice that you're wanting to open source things, and I don't mean any offence by this, but this thing has a long way to bring it up to the kind of point where people would actually want to use it. This kind of thing usually gets flamed and down-voted to hell on here, but I think we as a community should be trying to help people - as long as what they are really intending is to use it as a learning experience - I hope that's the case for you. In reality, there are some fantastic open source projects in PHP that could you be contributing to to make better instead rather than reinventing the wheel. Considering your use-case, you want to make something lightweight that solves some of your basic needs. You could probably accomplish this really easily with something like Silex or some other PHP micro-framework.
Dzmitry, I'm a Florida-based expert Php/WP freelancer with the skills you need and will be glad to help with this :) I also replied from my Twitter account (IdeasLoop) with details and contact information. For direct discussion please call Scott 813.616.8032 or email scott@ideasloop.com Thanks :)
They could at least avoid the base64 overhead by using a proper blob column in the database and storing the data unencoded. 
 try { $stmt = $pdo-&gt;prepare("SELECT * FROM foo WHERE first_name = ? AND last_name = ?"); $stmt-&gt;execute([$_GET['first_name'], $_GET['last_name']); $users = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC); $args = [ json_encode($_GET), (new DateTime())-&gt;format('Y-m-d H:i:s') ]; $pdo-&gt;prepare("INSERT INTO foo_log (params, time) VALUES (?, ?);") -&gt;execute($args); } catch (Exception $ex) { // Handle error here. } Could possibly have a note for PHP7 being: } catch (Throwable $ex) { // Handle error here. }
Wordpress is a bottleneck in itself.
As the original author of runkit (but not its current maintainer, props to github.com/zenovich ) I am both happy you found it useful, and obliged to hope you focus on non-production uses of it. Not that it isn't stable enough for production use, but it breaks SO MANY fundamentally sound software development practices that, were I to have any say, it'd be forever relegated to debug/dev-only uses. (which in fairness, is {mostly} all you used it for -- This note is as much for other readers as you). Of course, it's out of my hands now. Zenovich found it useful enough to take over (and I thank him for that), and there are plenty of people who make it a serious part of their dev. *shudder* Happily, Sadly....
Dropped you a PM
That's a fair point you're making, and if you want to integrate closely within your application we actually also have something for that here: www.forestadmin.com The drawback is that we have to add support on a per-framework basis (given we're tapping into the ORM to build the admin) so it's limiting us as we cannot do everything at once. Hence, our experiment with Lumber, generating a lightweight app just to serve the admin.
We use the following products: http://insight.sensiolabs.com/ http://scrutinizer-ci.com/ http://docs.sonarqube.org/display/PLUG/PHP+Plugin All of them have their weaknesses and strengths and all of them work pretty well.
Cool, the lead dev at my company couldn't answer most of these. Doesn't believe in unit testing, even after many builds are rolled out then rolled back because of bugs that could have been found with unit testing. Barely understands object oriented programming, interfaces, traits, etc. Has literally said he doesn't see the point in maintainable code so long as it works. Bear in mind they've had 10+ years experience in PHP. As a junior I feel like I can't bring any of this up though so I just do as I'm told and cry myself to sleep every night.
A typo is when you make a mistaking in typing. In this case you just had no idea what the fuck you were typing in the first place. That is not a typo.
You could just get a proper job.
I'm Brazilian... You probably are in the wrong companies. Many use Synfony and laravel now, or maybe cake. But in the interview questions we never get complex questions, you get better positions by where you worked before or by your ability to convince the interviewer... You must be well related or you are nothing... 
This is the reality of the IT jobs in 85% of the world I risk to say. I'm almost 6 years in the field and I was never requested to do any sort of unit test of my code. They don't see that in the long run, a bad designed application costs much more. 
They're case insensitive.
Reads better, it does not.
Pretty hard to mistype '===' as '='. And I've yet to see somebody even mistype == as = and not notice it within 10 mins
I program as if I am speaking English, something PHP tends to forget sometimes. My goal while programming is to make it as readable as possible while still being optimized in terms of performance. "If something is true, do this." "If true is something, do this." Which one makes more sense?
Thank you for runkit! Seeing how the instrumentation is implemented has been very illuminating.
These questions will give you false confidence in a candidate without really demonstrating their value, while eliminating a number of good candidates for arbitrary reasons, like not remembering or caring what OPTIONS does in HTTP requests. Just give them a code test. You'll get the same effect, better, and you'll waste less time.
Usually you route everything through a sub-directory, ie. /var/www/mywebsite/public/index.php Making your vendor folder inaccessible directly, because it is located in: /var/www/mywebsite/vendor/ As well as everything above `./public` (unless you have a poorly configured server or you have vulnerabilities in your code - so, "in theory")
This site doesn't seem to provide the data to support your claims, but it's certainly interesting. You're seeing the same sequence of 52 cards, not just the same hand, correct? It's worth noting that &gt; It uses a pseudo random number generator that is not suitable for cryptographic purposes. This implies to me it uses the same absolute garbage PRNG that powers `rand()`, so collisions shouldn't be terribly surprising. If you manage to repeat this using a secure shuffling algorithm, I'd be impressed. e.g. $deck = ['AH', '2H', ... 'KD']; $shuffled = []; while ($deck) { $i = random_int(0, count($deck)-1); $shuffled[] = $deck[$i]; unset($deck[$i]); } var_dump($shuffled); 
Yes, I didnt make any of the data publicly available. But it is there. I meant I could pull it out of the database tomorrow and make it available here. Also yes, I am counting it as seeing the same sequence of 52 cards, not just the same hand. For the third one, I could change it to use that and restart everything. This was honestly one of the first things Ive really ever done in PHP, and I was just curious. But now you've got me even more curious about a secure shuffling algorithm so I will probably research it some and add it in there instead of using PHP's built in shuffle().
Yeah :- &gt; The horrors of filling code with var_dump and print_r are inexcusable nowadays. There are no absolutes - There are many situations where I print_r like a bandit because it's the quickest way to understand an issue. Maybe if the OP was open to other listening to peoples experiences he would learn something himself.
*Slowly raises hand...*
Hahah yeah, that looks broken.
If it helps at all, this is an instance of the [birthday problem](https://en.wikipedia.org/wiki/Birthday_problem), where the odds of getting a match can be surprisingly high.
also [this one](http://imgur.com/a/25210), AAKKK is marked as "three of a kind" instead of "full house"...
OT: Is that THE way you should walk through this Array? O_o
I respectfully disagree. Any developer that stumbled with CORS did the following: Search google, copy &amp; paste stackoverflow answer. Moreover, I give you 2 developers, one can answer that question and other cannot. Can you asses which one is better based on that question? OPTIONS is some magical, cryptic http method that no one ever need to memorize. I'd say if you have a question in your interview that by answering it all you need to do is memorize something you are conducting the interview wrong. Each question in an interview should be treated like a KPI. For example, I will never ask "what is object oriented" (because what information do I gain here?), what I will ask is: Please model Cat &amp; Dog. I'll follow up with questions, make sure you know what you are talking about.
This kind of a known fact. The `shuffle()` relies on PHP's rather unfortunate use of random functions, which is system specific and generally provides relatively poor level of randomness. It would be nice to see, if the PHP7's CSPRNGs could be extended to some of the other commonly used random functions like `array_rand()` and `shuffle()` like via an additional parameter or even in the default implementation. *Edit: Apparently [PHP 7.1](https://wiki.php.net/rfc/rng_fixes) will alleviate the issue* In the meanwhile, there are other libraries that can help with the fact. For example, my relatively simple [wrapper library](https://github.com/Riimu/Kit-SecureRandom) for different CSPRNGs provides alternatives for both of those functions in order to take advantage of better random number generation. Sadly, they're not quite a fast and efficient as a native implementation could be.
Just a quick note: That example code doesn't actually work, since `unset()` doesn't reset the keys. A `$deck = array_values($deck)` after the unset should do the trick.
I can't be that, the numbers are just too huge. The second person in a room has a 1 in 365 change of sharing a birthday with the first. That's a 3 digit number. There are `52!` ways of shuffling a deck, that's a number with 68 digits. Given a shuffle, there's a `(52! - 1)/52!` that you'll get a different shuffle if you try again. Want to try another time? just multiply it again `(52! - 1)/52!`. So lets do that to the power `108351`. I'm going to quote Wolfram Alpha on what that is `0.9999999999999999999999999999999999999999999999999999999999999986566643769169709286540564951556693408884700409861...`. That's the chance of not repeating your **first** shuffle in 108351 shuffles. But what about repeating the 2nd shuffle repeating? Or the 3rd? Well, that formula turns into a product from 1 to 108351 of `((52! - 1)/52!)^i`. Wolfram Alpha won't let me compute that, but we can calculate a lower bound using the smallest term in that expansion, that way we know our number will be **smaller** than the actual result. The smallest term is the last one, namely `((52! - 1)/52!)^108351`. So we have to raise that to the 108351st power. `0.9999999999999999999999999999999999999999999999999999999998544482419033307170905956753066119287546066174108889523`. That's the **lower** bound of the probability of no repeating a single shuffle in 108351 shuffles.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Oh, you're wrong on both accounts. 1. It is not about forgetting (though it is still the case). It is about **the belief**, that this function protects you from injection - so one just wouldn't bother with quotes. Let me tell you a story. Once there was a comment under the PDO::quote() manual entry, **suggesting to strip these friggin' quotes from the result**, in case you have to quote the identifier. Like here, ignorant people heavily upvoted this "piece of wisdom". I had to intervene and write [a comment of my own](http://php.net/manual/en/pdo.quote.php#112169). Unlike here, there are people behind the manual who have clue and so the notorious comment got deleted. The story is just to show you that most of PHP folks just don't understand string formatting, and take escaping as a protection by itself. 2. Compare the two following code snippets: Here is your escaping $name = mysql_real_escape_string($name); $surname = mysql_real_escape_string($surname); $foo-&gt;query("INSERT INTO t (name, surname) VALUES ('$name', '$surname')"); here is a properly implemented prepared statement $bar-&gt;query("INSERT INTO t (name, surname) VALUES (?,?)", [$name, $surname]); go tell me that this one is more verbose :)
Yeah, I wrote that inline and untested. I figured it might be slightly buggy, but enough to get the general idea across. Thanks for pointing this out.
There are a number of techniques you could use. The point was more that shuffling is based around a CSPRNG, not something that amounts to the current time mod some arbitrary value.
I believe the focus was on senior developers working on Enterprise product..that means 20-30 devs..so thats why the heavy testing questions..but would you really hire someone for a senior position who doesn't know the term polymorphism?..maybe a junior but even than he/she should know it with a little help
When you fail to catch an exception and a stack trace ends up on the attacker's machine, most people call that an information leak.
http://www.reactiongifs.com/r/mstk.gif
Yeah, sometimes good information gets "drowned" in announcement posts. Glad you're finding the video useful though!
Do you know what `docker-compose down` does? Why is it in your readme?
&gt; In it’s most basic form, it is injecting other objects into a class. It's injecting objects into an object, rather. We all know I'm nitpicking, but I can't help myself. 
&gt; If you ask "what's RESTful" I'll answer almost nothing according to Fielding [...] But I can tell you a lot what others think what RESTful is. And how they get even that wrong :) This is why probably the only correct answer to "what's RESTful" is "these days, nothing". 
No, but i have plans to add more vcs support.
You don't need that question mark. Check how to set PHP to handle all your URLs (through URL rewriting, like mod_rewrite on Apache, or otherwise). I'd suggest you deal with this sooner than later, because having your path in the query part of your URL is highly uncommon.
&gt; Which one makes more sense? According to the Wordpress developers using `if ( true == $foo )` should be preferred over `if ($foo === true)`. ... but since their style guide reads more like a coding comedy ... oh well ... i'd never use their stupid [Yoda conditions](https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#yoda-conditions).
Why not use the official PHP Docker image instead of making your own?
I can use google ...i prefer physical teacher over books
Anything...that is very good 
Can you be more specific?
I have read about this topic several times. My conclusions are: - Yoda conditionals are harder to read. - Don't do assignments inside your conditionals when you can avoid them (90% of the cases).
[removed]
Well, I didn't intend to criticize, just to express a feeling. You see, PHP is a whole new world nowadays. Composer, PSR, namespaces, autoloading, template engines that are more human-friendly than XSLT, ORMs to simplify routine database interactions, routing, exceptions, unit testing, middleware - all this is just a fraction, really. Frameworks look entirely different today. But personally I like your framework, it's simple and clean. 
&gt; I've used XDebug and occasionally still do, but a var_dump is often a faster way to get a quick answer about what's going on with a bit of data at a particular point. How is typing `var_dump` faster than clicking on the sidebar to set a breakpoint? 
What's magic and cryptic about OPTIONS? I'd say discussion about PUT vs. PATCH or how PATCH payload should look like will get you much deeper into the woods. 
/r/theydidthemonstermath
&gt; making the algorithm into O(n2) Indeed, just provided a the smallest change to make it work. For hopefully a more efficient implementation, I might direct you here (which also preserves the keys): https://github.com/Riimu/Kit-SecureRandom/blob/master/src/SecureRandom.php#L177 $array = ['A', 'B', 'C', 'D']; $result = []; for ($count = count($array); $count &gt; 0; $count--) { $element = array_slice($array, random_int(0, $count - 1), 1, true); $result += $element; unset($array[key($element)]); }
It's enabling XDebug that slows things down.
Much of Laravel is built on Symfony. I've considered moving to Symfony because I love their packages, however it seems that Laravel's greatness comes from the way it has pieced together it's Symfony (and other) packages.
Thanks... :|
I would say not writing into a PHP group :) ..but PHP is not the technology for Android..you can go trough the way of a PHP API and a React Native front end though
Your comment only makes sense where the developers have any say in deployments. This isn't true in many organizations, and it also isn't true for open source developers outside the organization.
So for someone like me: what makes this implementation more efficient?
PSR-2 does not mention anything about yoda conditions,
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
- you just said some strange rubbish. One don't have to have any voice in deployments to write sane code. - your suggestion to wrap every statement in a try catch makes no sense anyway. It would be just weird to pollute your code with thousands of equal code blocks. - your open-ended suggestion `// Handle error here.` actually welcomes to add something like `echo $e-&gt;getMessage();` AND leak the error message unconditionally. You see, it's deliberately inviable statement. WHAT would you suggest to put there? Everything you can think of would be at the same time superfluous and limited. You should learn how to handle errors properly and realize that blunt try catch is not the way to go. Honestly, some of your ideas are surprising me. Your problem is lack of practical experience. Your codes are full of snippets that are added out of some theoretical musings, but just inviable in the real life. Just like that useless try-catch.
Wondered the same for a long time.
We use Veracode at work. Works quite well, although it could be better at recognizing new instances of already-mitigated flaws. The system does seem to learn over time, as we do occasionally find new instances flaws in old code that hasn't been touched in ages. 
There are no absolutes, I agree. I do do the larger majority of debugging through xdebug. And if I'd be interviewing someone who confusedly stumbles his way through questions about a debugger, I'd not hire him. As long as you understand what a debugger is and when it's useful, and then choose not to use it because of reasons you can give arguments for, fine. 
&gt; One don't have to have any voice in deployments to write sane code. You just told me "you don't need this try-catch, configure your server correctly". I tell you that's not always possible, then you rail back with "Your problem is lack of practical experience." Throwing everything at the wall to see what sticks, eh? I've lost interest in continuing any discussion with you.
Yeah, but how will I explain to my manager that I'm taking longer to delivery my tasks because I'm doing TDD? He will tell you to drop it! Actually, now I started in a new company. People here are quite friendly and open minded. I'm slowly suggesting to us adopt some good practices, like a robust framework (laravel), unit tests, virtualized dev enviroments (vagrant) and so on. Let's see if they adopt it.
if you're building a web app, you build it the same way you would any other web app!
It's also really simple to do a [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Modern_method), assuming that you have a good RNG. A quick skim of your code looks like you're doing something similar.
The question is what kind of application you'd like to build. Is it an app that will be used in the browser or do the user have to download the app from the Play Store? You can develop a mobile web application in PHPStorm. There is no difference between a mobile web application and a regular web application, besides the UI if you don't make use of the responsive layout. If your question is what the best way is to build a native Android app: you can't do that with PHPStorm. The best way to build a native Android app, is to use Android Studio which is based on the IntelliJ platform, just like PHPStorm.
A few var_dumps and reading a stack trace is usually more than enough, if it isn't going test-driven is a good alternative to a ful-blown debugger.
_Disclaimer: I work at Pusher as a Developer Advocate_ Sure, there's no limit to the amount of connections you can open in **development**... But in **production** applications, many developers encounter latency problems at around the 10,000-20,000 concurrent connections mark (it also depends on message volume, of course). You can _totally_ solve these problems without Pusher but it typically takes a significant amount time -- time you could be spending on more features instead of infrastructure. Pusher exists as a service because we guarantee that events are published reliably, _in the order they were sent_, and with minimal latency, at any scale. Even if you don't necessarilly care about scale today, many developers like the peace of mind we provide. Aside from performing at scale, we have a solid dashboard with useful analytics and debugging tools, a responsive and friendly support team, and a bunch of intuitive and well-maintained client libraries. We also have a bunch of great learning resources (like this one 😂!). At the end of the day, we want you to do what's best for your situation... For smaller applications,_Sometimes_ it makes more sense to host your own solution and we get that -- I just hope I've managed to explain the problem Pusher solves. 
/u/colshrapnel: &gt; And the fact you still don't understand that your silly try catch is not enough is actually says about your real expertize more than you would like to leak out. You keep insisting "you don't understand" but what's really happening here is that I do understand, I'm just addressing a different set of nuance that you seem to be ignoring. But as you do not profess to be a native English speaker, I can't really hold this mistake against you. Should you *not* catch exceptions? Yes. Should your environment be configured properly? Also yes. If I left the try-catch block out, and demanded people do that, would my inbox be flooded with emails from people complaining about promoting "unstable development practices" (because an uncaught exception -&gt; app crashes ungracefully) and "creating information leak vulnerabilities"? [You bet it would](https://hackerone.com/reports/115422). I get *a lot* of stupid emails already. Instead of entertaining the "is full path disclosure a real vulnerability?" arguments with people with attitudes similar to what you're demonstrating here, I included a try/catch block. People who bitch about exception mode will now be hand-fed the solution to their stability concerns. Want to snuff out errors silently? Just leave a dangling catch block. &gt; you still don't understand that your silly try catch is not enough That you immediately assume that someone who doesn't agree with you 100% "doesn't understand" due to "inadequate experience" just makes you frustrating to deal with. It doesn't lead to better communication. It doesn't lead to mutual understanding. It doesn't even persuade people that they might be wrong. It just makes you seem like a dick. Twisting this further to provide a passive aggressive dig at anyones' "real [expertise]"? That's uncivilized.
If you end up seriously considering them, Veracode has a nice promotion/offer going on now for existing HP Fortify customers, you might find it advantageous: https://info.veracode.com/veracode-has-your-path-forward.html\ or - https://www.veracode.com/blog/security-news/what-micro-focus-hp-software-merger-means-future-appsec
 &gt; Despite some of the company's previous posts that e.g. hamfistedly claimed that PHP was the least secure programming language (and ignoring the really obvious sampling biases) Haha, I think that every company suffers the mistakes of their marketing team at times. Knowing many in the org personally I can attest that those who know their stuff at Veracode would never make said claim. :]
Something not right with that exact implementation. Ran it on a test set and it's dropping values somewhere (10 inputs, &lt;10 shuffled outputs). The number of outputs varies a bit too. $keys[$index] = $keys[$count - 2]; Should this be $keys[$index] = $keys[$count - 1];
&gt; they learned us 
Cool. That seemed to do the trick.
On a 1D array of 52 indices, this algorithm took ~ 0.2 seconds longer for 10,000 shuffles vs the native shuffle() algorithm (on my hardware). Not too shabby. (~2.6 sec vs ~2.8 sec). Did multiple runs, all in agreement. It would be much faster but I'm also testing for collisions in my loops. One note is that it doesn't return the same type of array as was input - 1D in, with implicit keys - 2D out, with explicit string keys.
PSRs are recommendations.
congratulations
It's my first job, want to put in at least a year before I leave. Also I do enjoy parts of the job.
I reserve my right to disagree with their recommendation for lower case booleans. 
A few people have already mentioned that `rand()` is a pretty bad RNG (especially on Windows). However, even if it had better distribution, you're still left with the problem of a small seed space. IIRC we use a 32-bit seed for the RNG, so you can generate at most 2\^32 different permutations. The actual number of permutations is approximately 2\^225. (This is why the PHP 7.1 changes to use `mt_rand()` for shuffling will only be a minor improvement.) State of the art high-performance PRNGs (xorshift derivatives) only have 128 bit of state space in total (unlike MT19937, which has a huge state space of 623\*32 bits), which means that even *if* you completely seed the state and the RNG has maximal period, you won't be able to cover all permutations. TL;DR don't use non-cryptographic RNGs for shuffling, unless you really don't care about the result.
Thanks, I fixed that along with a couple other corrections yesterday. :)
Good to know. Thanks!
haha, well someone must buy that stuff for them to stay in business. 
Etsy's [Phan](https://github.com/etsy/phan) is pretty interesting, though it's not especially security focused, and is PHP7 only.
Well, technically, the question would be read using 'equals' "If $variable equals false" "If false equals $variable" I personally find the normal way easier to read (if $variable equals false), specially when you add negated and/or complex conditionals.
Any reason why no composer?
We are planning on using that as part of the transition to 7 actually.
Life pro tip, don't ever assign values in the if. This is one-liner-code-jockey territory that is best left alone. Also, use fucking braces. The fact that PHP makes braces optional bothers me as much as the fact that JavaScript makes semicolons optional :(
There is also https://phpdocker.io/ that has options for PHP 5.6, 7.0 and 7.1 (beta at the moment), and a large array of modules to build in, as well as other common servers (mysql/postgres, memcached, redis, elastic-search and mailhog). It also adds a Vagrantfile to run boot2docker which you can use if you can't run Docker-Compose directly.
If and when you fix it, will you re-tally the calculated probability? I'm interested to see if the bug is causing skew in the data.
Save yourself too much trouble and use http://brew.sh/
Also may just wanna use docker instead
Or vagrant. Depending on your skill level. 
Well, are you saying Vagrant is for people with higher or lower skill level? Not sure. After trying to use Vagrant for a few months, and encountering countless glitches in host/guest communication, hard to find or missing Ruby configuration settings and just plain annoying slow startup... I frankly wonder why I ever tried it. And considering Vagrant is not intended to be used for production servers, it's mostly a pointless exercise IMHO. I just use Docket or plain VMs. 
You can use Angular JS-2 for front end part &amp; PHP for back-end APIs. About IDE, for PHP you can use any basic editor like Sublimetext or PHPStorm/Netbeans(anything on which you are comfortable) &amp; for Angular JS Visual Studio Code from https://code.visualstudio.com/
Yeah, Homebrew or Docker are your better options.
This.
Congrats! Which model?
No, it's saying "it works on my machine, but I understand why it doesn't at yours so I will fix it"
You clearly don't get the idea of Composer. If you want people to have the exact same versions of stuff as you do, include the lock file Composer generates. Or if you're really anal about it, just define a specific version in the composer.json and not a range.
&gt; Have you actually tested the random_string() function? I'm aware of the modulo issue and my function takes care of it. It's poor. Testing the RNG output of a function like that isn't easy, but doing a cross-comparison to using: $pos = random_int(0,$max_chars); Seems to show that your function has unusual bias output (comparing across 10 million runs of 32 characters). Further, though, your code makes the assumption that, by asking for $length, you get back $length of characters. It can also return false (which you do not detect), and $crypto_strong can be false (which you do not check). So simply put, rather than: $bytes = openssl_random_pseudo_bytes($length); [usage of $bytes under false assumption that it's what you expect] You need to do: $bytes = openssl_random_pseudo_bytes($length, $secure); if ($bytes === false || $secure == false || strlen($bytes) != $length) { throw new \Exception('Invalid/insecure return from OpenSSL!'); } But as has been noted, just ditch openssl from this context as you can't ensure non-repeating byte sequences from it across threads. Edit: [I've just done a frequency check using 669,876,224 characters of output](https://docs.google.com/spreadsheets/d/10luqu2e7kYHbJQXyqeDDsIcnQnl3ObImhIhLQxkezKw/edit?usp=sharing). The letters a-h turn up 1.95% of the time vs 1.56% for every other character. The output is biased.
Beautiful. 
The only comparison i can give is that both are package managers. Composer is for php projects while yarn is for javascript and meant to be a replacement for npm.
* They're both package managers. * Yarn seems to have a more 2016 style website than Composer. * Yarn lists more appealing features; * Offline-mode * Deterministic * Network Performance * Multiple Registries * Network Resilience * Flat Mode * The logic to the package manager is roughly the same ( a `.json` file listing the dependencies to install, and a `.lock` file) At the end of the day, they're pretty much the same — they're package managers. *(Most used packages (on GitHub) would only list the `composer` commands for an easy install as Yarn isn't that well established AFAIK - which may cause you issues if you're unfamiliar with the command line)*
[removed]
I'd upvote you a billion times, but I cba to make a billion accounts — *sorry!*
If you want to be a PHP programmer then you cannot code unless you learn the syntax and understand how to use it. You need to learn how to create the logic for a program and how to solve an error if any type of error occurs.You also need to learn how to use a PHP editor. You cannot learn these things unless you practice coding. You also need to learn the following things to become a professional developer: RESTful APIs, MVC Architecture, MVC Frameworks (laravel, cakephp, codeigniter), Regular Express Handling etc. 
If talking about "successful" then the word "PHP" in your question has no relevance. (Not dissing PHP, I just fail to see what it has to do with success) Also, how do you define success? Money? Happiness? Social justice? Doing good?
Oh my the site was redesigned. God damn that looks good.
Not many servers but a lot of developer workstations are Macs :)
Can you recommend a simple docker solution for mac? The one that just works, just like using in natively? * I’d like to mount any point of my filesystem, outside of `/Users` (i have a case-sensitive partition for projects) * I’d like to connect to containers using their names (how else would you connect to a mysql / redis backend?). I’ve done that using [gliderlabs/resolvable](https://github.com/gliderlabs/resolvable) on linux * I’d like to just use `docker` in Terminal, without needing to do any complicated setup 
&gt; Regular Express Do you mean regular expressions? 
I think the "Odds (Calculated)" might be off. For One Pair, it shows 2.37:1 and a calculated probability of 42.23%. The Wikipedia probability is the same (42.26%), but listed as 1.37:1.
&gt; It is easier to name the exception by its location than by the problem itself. This is not a good practice because the returned message will not be able to identify the cause quickly and simply. This is a false dichotomy. You don't have to choose one or the other, you can have both: // Location class SqlException extends \Exception {} // Type class UniqueConstraintViolationException extends SqlException {} And another approach (I prefer this one): // Location &amp; type class SqlException extends \Exception { const UNIQUE_CONSTRAINT_VIOLATION = 0b01010; public static throwUniqueConstrainViolation() { throw new self('Unique constraint violation.', self::UNIQUE_CONSTRAINT_VIOLATION); } } When you're catching an exception, you *often* care which layer it came from. For example, if you have a Regex class, and you want to log any Regex problem in some log file, if there are 10 possible error types that signify a problem in the regex expression, you surely want a single class, at least somewhere up the hierarchy, as an umbrella for the errors you might get, instead of checking for every single of the 10 exception types in your catch() statement. &gt; A logical exception shows a problem with the code. [...] Unlike a logical exception, [runtime exceptions are] not an error related to the code or its misuse, but linked to an error when executing the code. Yeah. Clear as mud. Thanks, OP. Or maybe the reason we have "RuntimeException" in PHP is because the SPL author copied the exception tree from Java, where the "runtime exceptions" are the part of the tree that's "unchecked" and the rest are "checked". But guess what, PHP has no "checked exceptions", so having a dedicated branch for it makes no sense. But apparently people just invent their own meaning to make sense of these exception names. &gt; Catching all exceptions with a try { } catch (\ Exception $e) is a very bad practice. That's poorly defined. Catching all exceptions is definitely not a "very bad practice". There are countless scenarios where if current method can't continue, you want to wrap things up, maybe log the problem at a specific place, before you re-throw again. But the author doesn't say this. For example imagine the following scenario: - A function opens a DB transaction. - It tries some complex stuff, calling into other objects, calling the database and so on. Something might throw an exception here. - You catch \\Exception, and in the handler block, you issue ROLLBACK to the transaction, then issue "throw $e" to rethrow. - If no exception is caught, you issue COMMIT. Is this a bad practice? Nope, it's pretty much the only reliable way of making sure your function doesn't make a mess of the connection state. In fact, in PHP7 you should use \\Throwable, not \\Exception. What's a bad practice is eating the exception, i.e. catching it and then doing nothing. Except in select cases, that is. But that's not the same thing at all.
Shouldn't unit tests catch these kind of bugs?
The collision risk of strlen is controlled by only caching large values &gt;~1mb and by prior knowledge of what values are affected in practice. As I wrote in the post, it's very fast but the most collision prone option. ymmv. And yes, there is definitely nothing 'proper' about any of it.
By writing code this way, there's no bug to catch ... that's exactly 1 reason to write this way. unless you're saying tests are given. This is an example where (in some languages) static analyse of your dev work can yield benefits before your tests. Thus streamlining your workflow.
My own rules for exceptions: Use them as a last resort. I always look first at these solutions: - Fall back gracefully: Maybe instead of an error there is a sensible default I can fall back to - Return a null object: Give the caller a null object that doesn't do anything but follows the expected interface - Return false|null: In case there is just one type of error &amp;&amp; I can handle it immediately in the caller &amp;&amp; I don't care about details - Return a result object: A heavy duty solution inspired by a Maybe from Haskell - an object that holds the result and a result message (and any other data, if needed) Only if none of these approaches is possible, I throw an exception. I'm seriously afraid of exceptions, because they put a huge burden on any future caller of the code and require almost inhuman discipline. One forgotten catch and it all falls apart. There's a nice article about exceptions that I reread almost regularly: https://blogs.msdn.microsoft.com/ericlippert/2008/09/10/vexing-exceptions/ It basically advises to redesign your code so you minimize the occurence of exceptions.
Evening colshrapnel, me again! Just a friendly reminder about your occasionally hostile tone (which, as readers here may not be aware, has had you banned from Stack Overflow twice, for a year each, that I know of). Normally you bully beginners, so it must be a surprise for you when you pick on an expert such as /u/sarciszewski. I have seen you apologise and act decently from time to time, and I do feel you've been getting better of late, so more of that please! 
This, and use brew services: https://github.com/Homebrew/homebrew-services Easy peasy.
Don't get distracted. 
[removed]
Apache is a software designed for Linux and shimmed to run on windows. I'd be surprised to see any WAMP setup match a LAMP setup in terms of performance. You'd probably have better results by running IIS, a web server made by Microsoft, purposefully built for Windows.
Check out [MAMP](https://www.mamp.info/en/downloads/) maybe? 
From a discussion the other week, the problem lies in the NTFS file system. Instead, check out something called Vagrant. It uses virtualization to run a Linux VM transparently. There are hundreds of preconfigured machines, including many for web development that already have the full software stack ready to go.
Do you happen to have quick access to the link for that post? I missed that discussion...
I too have used MAMP on OSX without issues 
Here you go. I was skeptical myself, which you'll see in the comments. https://www.reddit.com/r/PHP/comments/5bt1xb/php71_10_times_faster_then_56/
Thank you!
Learn structured programming befor OOP and frameworks. Hail to consistency in education process.
Why not XAMPP? I had assumed it was settled as the best of the bunch for Windows. Really though, you'll be better off with Vagrant in my opinion. Is this for WordPress? If so, check out Trellis.
Not sure if it applies in this case, but watch out for a bug with "sendfile" I/O support with Vagrant's mounted folders. I had to disable sendfile in Apache because small files were "corrupted" when read from the VM. 
Aha, I wager you're a bot! Consider me fooled for a minute. 
`/me sends comforting hugs` as usual. Bulk orders available to Russia at very reasonable rates. 
But you know that vagrant with virtualbox uses NTFS like any other solution? If you really want to have speed (file/dir sync - two-way) there is in my opinion only one solution: VMWare Fusion. You have to pay for the plugin for vagrant but its worth I think. Especially when you run thinks like Symfony2/3 with a lot of vendors/cache/logs and so on. Anyways coding on Windows is not very satisfying... Unless you use the full Windows Stack with IIS and co. Something to have a look on maybe: https://github.com/vagrant-php/ubuntu
I personally feel most are all on a level playing field as it really depends upon personal preference and personal needs. I absolutely love Laravel, it's the first framework I learnt and has always been my goto for most personal projects. Lumen is also great as it can be comparative to Laravel with some unimportant things missing. I have been using Symfony and Silex at work and although they are mammoth frameworks, they too work really well and have some great practices which any modern day programmer would be using.
What do you mean it doesn't run from a subdirectory? Where should it be placed then? That doesn't make any sense...
Nope. Looks like you just lost a bet:)
Well, you've failed one Turing test already - I asked you whether you meant "regular expressions" instead of "regular express", and you gave me [essay spam from the internet](https://duckduckgo.com/?q=Regular+expressions+are+nothing+more+than+a+sequence+or+pattern+of+characters+itself). In fact, your whole post history is essay spam. That leaves me with an interesting philosophical question: if I think you're a computer, why am I talking to you? `:-)` 
So, fun background story-- I've been using UNIX/Linux for almost a decade now. And sometimes I want to use software meant for the Windows platform-- and it isn't as good of an experience sometimes. Interesting to see the flipside where Windows people want to run software that runs best on Linux...
https://www.opulencephp.com/ for the record. First thought: Oh no, not another one! Next thought: lamdba/anon functions as callbacks - the example looks a lot like JavaScript :)
I meant like it runs at www.example.com, but not at www.example.com/foobar/
I know the theory behind Vagrant. But in practice for me it has been very slow, buggy and inflexible. In the time I've wasted dealing with why it wouldn't boot up properly, I could've mailed the VM image to someone as floppy disks. Over snail mail. 
Looks more like an ad to me
1. Using IoC, or a dependency injection container is not unique. Plenty of other frameworks do this. Likewise, code re-use is not anything specific to Laravel. 2. Symfony (not Symphony) probably _is_ more complex, but it is also modular (look at bundles), and to be honest, it is clear. I said it is more complex, but you may only think that it's too much to handle if you're new to PHP. Symfony is actually relatively straightforward. 3. Frequent updates are a good thing, but I'm pretty sure it's been updated more than 5 times! Likewise, other frameworks also receive updates frequently. Hell, Symfony has had LTS releases for a lot longer than Laravel has. 4. These are all great features, but again, they are available in other frameworks, and it's not even that difficult to thrown your own combination of these things together. This is all pretty standard stuff. 5. This is definitely one thing that is great about Laravel and it's community, I've never used Laracasts, but I have heard good things about it. 6. Meh, you can use these things with other frameworks too. I wouldn't call this a stand out feature either. That's not to say it's a bad feature, and it's nice if it helps you get that set up out of the box, but it's not that difficult to set up your own front-end build process. Essentially, Laravel does have some good features, but other frameworks also do have these. IMO, Laravel also has many things wrong with it, and that's part of the reason why I won't use it - because there are better options out there for what I usually tend to do, for the people I work with, and for the skill level that my team and I work at. I wouldn't say Laravel crushes it's major competitors, I'd say it fulfils it's role in the framework marketplace depending on your use-case well compared to other options that aim to be in that space.
Docker for mac handles all of that. You can use docker-compose to create an environment with multiple containers configured by a .yaml file. You can share the volumes outside of /Users and also can "ssh" to any container (with something like docker exec -ti bash container_name). I could use docker in Terminal without anything more than Docker installed 
Try [WTServer](https://wtserver.wtriple.com).
Thanks for giving me the laugh of the day (hint: PHPixie popularity in the graph).
Something like this? https://github.com/nikic/scalar_objects
i'm not an early adopter but i'm using 7.1 locally, it was so easy to install using brew, so I can detect any breaking change before it's released.
I suggest checking out Trellis. I switched to Trellis from VVV and don't regret it. Awesome for WordPress-esque work. If you are looking to do some general php work, I recommend laravel/homestead.
The first pie chart in clockwise order: * 5.6 * 7.0 * 5.5 * 5.4 * 5.3 * 7.1 Sorting pies in a pie chart by size makes absolutely no sense.
The fact that you said Symfony is modular (as if Laravel isn't) shows you know very little about the most basic Laravel concepts.
He said Symfony is also modular which suggests he was saying Laravel is aswell.
Please do elaborate, Laravel Creator. Symfony allows for modular application development with bundles. You can read more about it here: http://symfony.com/doc/current/bundles.html
The fact that you couldn't scrape some context from OPs similarly labeled **2.** really shows a lot more about the current situation. Work on your reading comprehension before attacking people.
Strange. Could you post this as issue on github with minimal reproducing code?
You could follow the example found here: https://daveismyname.com/blog/creating-a-blog-from-scratch-with-php
Use PHP under IIS. IIS uses FastCGI, which is, well.. fast! Use PHP 7 for an extra boost
How's vmware fusion better? Ideally he should use hyperv. 
My policy is that use of mbstring.func_overload is a configuration **bug** on the side of the consumer. Don't bother with this nonsense. If you do want to bother, only implement a check that throws an exception if mbstring.func_overload is enabled. I expect this will be deprecated in 7.2 and removed in 8.0, for what it's worth.
Vagrant itself can't be slower, b/c it doesn't run any of the LAMP stack; it just simplifies creating a VM.
Especially I like #4, which is &gt; Laravel 5.1 features a host of useful software tools including migrations, ORM, HTTP middleware (provides a convenient mechanism for filtering HTTP requests), powerful blade templates (and other innovative templates, like Twig), blah blah **most of which are Symfony modules actually.** 
You're looking for the `__invoke() ` magic method. http://php.net/manual/en/language.oop5.magic.php#object.invoke
I would only recommend doing this if you'll never initialize the class because it's super easy to type: $item = Class(); Instead of: $item = new Class(); and the bugs this can create are annoying as all get out (I know from personal experience :-)). 
The PR isn't a good solution. It's needlessly memory-wasteful. Consider adding `paragonie/constant_time_encoding` as a dependency, then doing this: &lt;?php /* ... snip ... */ use ParagonIE\ConstantTime\Binary; /* ... snip ... */ $bufLen = Binary::safeStrlen($buf); Outside of the helper methods for binary-safe string functions (even in the presence of mbstring.func_overload), that library offers RFC 4648 character encoding (including `Base64UrlSafe`, which is very popular among PHP devs) that doesn't [use table look-ups indexed by possibly-secret data](https://cryptocoding.net/index.php/Coding_rules#Avoid_table_look-ups_indexed_by_secret_data).
I know ... I was being an ass. Last project I did in PHP used CakePHP. I liked it because it was very much a PHP clone of Rails. If you become familiar with many of the paradigms in Cake, jumping on a Rails project down the line will be a ... wait for it ... piece of cake. You can pretty trivially create a blog with CakePHP.
Well, it is not actually a framework that makes your code better. But a lot of things that already exist in frameworks, which otherwise you will have write by hand. For example: - given you will use the engine for more than two blogs, it will be a nightmare to update its code, as in this example the **presentation is not separated from the engine.** - on a live site, error reporting won't help a developer even a bit, yet a hacker would be much delighted. In a nutshell, error reporting in this example blog is written out of very common yet childish [assumption that the developer is a sole user of the site](https://phpdelusions.net/programming#reporting_errors) - there is no distinction between users and their access rights - there is no captcha or other protection against bots - ... the list is actually infinite Yes, you can write everything else from scratch. But when you have the proper solution right out of the box or can install it by means of adding a line in composer - well, were is the difference. 
Well, for learning the link below is just excellent. Just don't stop on in and after finishing proceed with the links I posted. 
In your composer.json file autoload some sort of bootstrap.php file. eg. "autoload": { "files": [ "bootstrap.php" ] } In bootstrap.php do this: if (extension_loaded('mbstring')) { // 2 - MB_OVERLOAD_STRING if (ini_get('mbstring.func_overload') &amp; 2) { throw new UnexpectedValueException( 'Overloading of string functions using mbstring.func_overload ' . 'is not supported by this library.' ); } }
You're right I must have been thinking of the class and function having the same name. 
This is one of the patterns I use a lot when I write Scala code. In Scala, a `case class` can be instantiated as an object without the `new` keyword. Then again, this is because Scala uses some additional magic under the hood to make things happen. In PHP, though, you can get something fairly similar pretty easily (and I do this every now and then when I want to write more Scala-esque code because ... I'm weird). What I've typically done is define the class in a specific namespace, then also define a function *with the same name* in the same namespace that defers to the constructor. &lt;?php namespace MyNamespace; class MyClass {} function MyClass() { return new MyClass(); } Yes, you now have a function that doesn't follow typical naming conventions (the upper case looks like a class name ... but that's because it is!) But you now have the ability to replace `$obj = new MyNamespace\MyClass();` with `$obj = MyNamespace\MyClass();`
No! Heh, gimme an hour or so to get up. I've gotten vagrant to work. You just gotta install one or two things. Possibly just vagrant-winnfsd, though I don't recall off the top of my head. *edit* I kinda remember actually. So first you gotta install the aforementioned. Then, you might have to modify your vagrantfile. Will update soon. *edit2* And really, I can't say enough how much of a roots.io fanboy I am lol. It runs like *instantly*. And not just on the desktop. I can literally browse to my-local-up:3333 on both my phone and my iPad, and it instantly updates and stuff whenever I change something. Not only that, for some reason it seems to share state between all three browsers. It's nuts. But that's just for WordPress, and it requires Gulp in addition to Vagrant (among other things). But it's really cool. Couldn't imagine not having these capabilities, personally. *so many edits* I should mention that it also works fine with Laravel homestead. 
I'm not sure what point you're trying to make. Running a server through a VM running on your machine, is by definition slower than running a server directly on your machine.
This is mostly a glue library: Most of the heavy lifting is handled by Zend Framework's Zend\Mail API and PEAR's Crypt_GPG. What this offers is a simpler interface to hopefully make GPG easier for other projects to adopt. We use it in Airship: If you provide a GPG public key, your password reset emails will be encrypted with your public key. Then, even if your email provider is ever hacked, the attacker won't be able to reset your password.
Bundles are often abused for things they are not meant to do though, when they start dictating business/domain logic, they become terrible to use, maintain and customise.
rails is too easy, i cant take rails seriously. 
I've used Cake for quite some time, and i must say, its magic is often a curse.
Cool, thank you! Looks interesting. May I ask, what's Airship?
Airship is a security-focused CMS I developed for my employer: https://paragonie.com/project/airship It's free (GPL) and gives you a lot of out-of-the-box security wins.
&gt; https://paragonie.com/project/airship Hey, cool thanks.
Using a framework does not make you a bad developer. You're likely going to write better code and create a better product by using a framework of some sort.
Are you sure you need a real join? Often it's faster to fetch IDs from one query and place them into the next query using IN. This makes the internal temp table way way way smaller and usually faster when you deal with hundred of thousand rows.
If anyone wants to play a little spot-the-difference: * http://dev-lapras.pantheonsite.io/phpinfo-wamp.html (the fastest slow one) * http://dev-lapras.pantheonsite.io/phpinfo-centos.html (**4 times** faster) Not sure how helpful, but here's a "comparison" of sorts: http://dev-lapras.pantheonsite.io/comparison.html
At a certain point in time, at a certain point in your career, if you are not lazy and moving up the ladder, you find that Symfony is what you actually need, you amass the knowledge and various code bits, so starting a project usually takes even less time that other frameworks. There are certain things you need to accept - you really need to learn Sonata Bundle. It's awesome, but docs are a bit sketchy. Some things you need to pull together. Probably the best thing is have your own base for the projects with most used stuff already coupled and configured. That is a must if you want to work efficiently and save time.
Well I think it comes from two places: &gt;Only if none of these approaches is possible, I throw an exception. That's a rather absolute statement there that doesn't communicate the same thing as 'returning null is better sometimes' and &gt; I'm seriously afraid of exceptions, because they put a huge burden on any future caller of the code and require almost inhuman discipline. One forgotten catch and it all falls apart. That's true of any error-handling system in PHP - it requires the caller to take care and manually ensure all goes well. An uncaught exception murdering the system is preferable to letting a null/false that should be some other type slip by.
really, you think so 
No, I didn't find a tutorial either. You need to install php7.0, apache2 etc with apt-get and then creat a soft link from /var/www/htdocs to /mnt/c/link/to/your/files
Sure. If you follow the framework's guidelines and best practices, then *at a minimum*, you'll be writing more consistent code. If you're using a framework like Symfony, then you're also going to be very exposed to OOP'y things like dependency injection, encapsulation, polymorphism, etc. Being surrounded by these things will make you a better coder. And of course with a framework you're less likely to encounter a whole range of security problems.
Marketing, marketing and marketing. The reality is, it's an okay framework, with it's own, though strong, opinions and ways to do things. It's way overhyped and got some projects I know of in trouble later down the road because people who made decisions got influenced by it and about 1-1.5 later got into big trouble. Since they moved to pure Symfony and rewrote a lot of stuff. If you start a business heavy or just big project - don't use Laravel or any other framework that has strong opinions on things. Period. You will regret it unless you are used to do the hatchet job type of development and dealing with legacy issues. P.S. One more thing I thought of that it invoked in me - because I came into it at ~10 years of prior experience, my feeling was that the framework thought I was stupid. The docs are also done in a way that it is easy to learn for a newbie, but useless to a framework agnostic person who does not need handholding. I was googling 3/4 of the time rather than reading information in the actual docs.
That doesn't sound too complicated. Would you mind running that PHP benchmark script (http://www.php-benchmark-script.com/) and post your result, together with your CPU information? Thanks.
I find it strange too and yes I have been trying to figure out how to post an executatble example. I do you think making a fork of yii2-app-advanced would be enough?
@utotwel has done some great things with Laravel but considering Laravel depends on Symfony components I can't see how anybody can rate/choose it over Symfony itself.
I can see fastcgi is there for linux as SAPI, also opcode cache enabled for linux and not for windows, but I'm not sure if that could really have an impact when calling the single, "simple" benchmark script, assuming both tests are performed "cold" after a restart? Anyway, the comparison of the two phpinfo() would be better using the command line: "php -i" redirecting to a file and using diff (or WinMerge for example) to see the differences in plain text.
Methods (*inside* the class) that have the same function name as the class name, used to be constructors, yes. 
Thanks. That's actually quite impressive. Your CPU is around half as fast as mine (single threaded), yet the script takes only 50% more time. I wonder if PHP 7**.1** may have something to do with it. So this is under Windows 10, using the linux subsystem setup?
However, you can implement `__callStatic()` to allow `Class::anything()`. `Class()` straight-up is disallowed (or, I suppose more accurately, not resolved), as PHP parses that as a standard function call. &lt;?php class X { static function __callStatic($name, $args) { echo 'Call Static'; } function __invoke() { echo 'Invoke'; } } X(); // Fatal error: Uncaught Error: Call to undefined function X() (new X())(); // Invoke X::foo(); // Call Static
Vagrant creates VMs. It's not a VM itself. I assume you meant "But a virtual machine would be even slower." That depends on how you're measuring speed, and what sort of performance tuning you're willing/able to do. And whether you really even care. In using virtualbox daily for the past 5 years, the only performance penalty I've experienced is file I/O over vbox's shared folders, and that's only noticeable (albeit, VERY noticeable) on sites that do a huge amount of file system scanning, like Drupal. That's not the VM's fault though; if I put all of the files within the VM's own (non-shared) file system, each request loads as fast as I could hope for. It's possible that setting up a lamp stack directly on my host machine (Win10) might beat these response times, but it'd be an academic/negligible win at best, and it would come at the cost of not being able to almost perfectly replicate my production environment on my local machine. So, +1 for a local virtualized development environment that's orchestrated by Vagrant.
Are this the raw numbers? It's very interesting but we can't forget that people trapped in upgrate hell are a lot less likely to run composer update or even having access to composer. Also, a lot of development machines run newer versions of php and update composer a lot but the production servers can be older.
Yes. This is using the Linux subsystem on Windows 10. The same test using php5.5 takes between 4 and 5 seconds. 
I've been using Checkmarx for 5 or 6 years now and have found that their support of the various languages is about as good as it gets. Their ability to analyze actual source code rather than binary files means that any version of PHP (or other languages) can be inherently scanned/tested. They have a listing of current languages here: https://www.checkmarx.com/technology/supported-coding-languages/ PHP 7 support is probably something you can contact them directly about and hear back soon...I've found their support to be pretty responsive.
The question is, what actually you are trying to do is the right here. Or is it some kind of sharded setup? Or a distributed database? Or something else. There is MySQL NDB Cluster thingie, it may fit your bill and cover most, if not all, your needs. But it comes at a setup cost - you need a full blown cluster for it - 3 nodes absolute bare minimum for testing, 5 nodes to run any kind of production setup. 
Yeah...shared folders are terribly slow. Just rsync your files over or let PhpStorm or something do it for you. I don't notice any performance loss when I do this. It's certainly not slower than connecting to my production VM through the internet.
Sure it's documented behaviour but that doesn't really explain the "why". The real "why" is why *any* variable needs to be bound with `use`.
Wouldn't opcache solve a problem like this, since the files aren't being read every time?
IIS express works well. I use it daily at work. I'm also quite fond of the php dev web server. http://php.net/manual/en/features.commandline.webserver.php
Silex is a mammoth?
I ran the benchmark on WAMP and got 3.2 seconds. Perhaps its your machine? I'm running i7 4770 on win10 on SSD 
Maybe because building something from scratch can give a new developer a better understanding of the application they are trying to build, as well developing an appreciation for how great frameworks are when efficiency is a concern. I've always made the argument that when money/time is a concern, use a framework. However, it makes me sick to my stomach (not speaking to you neccessarily) when I see attitudes so harshly against proof of concept development. 
Looks nice.
Yes, I agree that it's a great learning experience. That was not his question in this particular comment though.
For me the performance suffers on string manipulation the most (&gt;2.4 sec) the others are pretty similar to yours. I'd use Linux for web server but I don't want to switch OSes or use a virtual machine. I'll see what I can do.
I actually LOVE that idea and your RFC. What are the arguments against your proposal?
Thanks for your work! I can think of several occasions where something like this would have been handy. Looking forward to checking out the plugin. 
Keep in mind file operations over the Linux subsystem are slow cause it has another file system bridge to go over. This could mean that large multi file sites will be much slower. 
&gt;The real "why" is why *any* variable needs to be bound with `use`. That's easy: Because otherwise you declare an innocent new variable inside (or outside) the anonymous function -- like the `$i` in a loop -- and it fucks everything up... Because another variable with the same name just happened to already exist on the other side of the boundary. The `use` statement makes it explicit which variables are "shared." 
If I were the maintainer of a popular library, no way I'd suddenly bump the required version up to 7.0, thereby immediately alienating over 80% (!!) of the users* You need the ecosystem to be compatible with both 5.6 and 7.0, then everyone will transition, and when usage drops below 10% you bump up to 7.0 for required version. \* Because of server infrastructure suddenly were incapable of using any of the new versions from any of the packages from Freek Murze. Even now when 90% of our infrastructure is on 7.0, we still cannot use any of his packages.
The distinction between constructors and functions is unfortunate in general, but on the other hand "stringly typed" callables are also unfortunate. In my code I never accept "callable" I just accept a Closure instance, as it's faster, safer and avoids some odd edge cases of scope when dealing with legacy callables. So one day when we get arrow functions, it'll be: // This $constructor = ($x, $y) =&gt; new Foo($x, $y); // Instead of this $constructor = ['Vendor\Project\Foo', '__construct']; But even today the syntax isn't that much of a bother. My point being, your feature is useful, but on the hand it's enhancement over a feature (legacy callables) that's no longer as relevant, or relevant at all.
What a heavily biased article. For starters, Symfony is as good, if not better, than Laravel! Why the hell is everyone hyping it so much? 
I would love to see outlined the common problems that Laravel introduces like Globals, magic, no separation between entities and persistence, etc
I'm just going to leave this here. &gt;The Laravel framework will stay at the top, because of the **huge interest** from developers and customers **worldwide** (By 2016 overview). Laravel is growing so quickly in the **PHP group** in view of its **unlimited quality** and **excessively included code base structure** and its effective yet **otherworldly** ORM i.e Eloquent.
I miss wrote that, silex is super lightweight and gives you so much control where as Symfony is a mammoth framework or at least seems like it from a beginners point of view.
&gt; For starters, Symfony is as good, if not better, than Laravel! Didn't you hear the news. Symfony and PHP are now just Laravel components.
I can't understand what is an article of such poor spammy quality doing on Smashing Magazine, to be honest. It reads like something that was cranked out for 2 bucks on MTurk.
So Laravel is the next CodeIgniter, eh?
&gt; Smashing Magazine Its SmashingBuzz, probably an "SEO-niche site" that cranks out shit to sell ads and links to other spammy seo fucks.
Oh, my bad. Phew, thanks for the heads up. Everything's back to normal, then :-)
wut ... rephrase that because I'm pretty sure that PHP is what Laravel was build on 
Alright ... let's just flip the tables and go develop with ROR ... 
Try an NTS build on Windows.
I am now trying to learn Symfony after working with Laravel (reason being, it's popular in a place I live in) and it just bugs me how much more time I spend doing trivial things. Want to create a single endpoint for registering users? In Symfony, it will take you adding/changing 25 files just to get to this point. Want to use seeds (aka data fixtures)? Figure it out yourself how to make them usable when you pretty much get stuck with raw php. Want useful abstractions for testing API? Do it yourself. Want LRU cache? [A few month back, Symfony didn't even have that component](https://symfony.com/blog/new-in-symfony-3-1-cache-component). I won't even go into more high-level stuff that Laravel nailed years ago. And it's not like Symfony is that much superior when you're making non-trivial architectural desicions like most of it's advocates claim. It's overreliance on php form builders make me cringe. Assetic got seriously stuck in 2011 (and it seems it even got butchered in 2.8). Configuration via Dependency Injection Extensions (for uninformed, they interpret all that pretty YAML stuff) are too obscure to deal with and requires meticulous documenting where in Laravel you just need a glance at source code. Symfony does have it's strong points. It has great build-in profiler, fully supports HTTP cache, has capable (though also more cryptic) security component and is a bit more natural to build multilingual apps upon. But, honestly, I just don't enjoy working with it.
[removed]
Generating html out of php is so 1997. You do realise there's an ecosystem of Symfony bundles that do all these things? Symfony's philosophy is to provide with a strong, long lived core framework to build upon. Features are provided as bundles. 
That is the exact reason I wish function autoloading was a thing. Then I could name functions after classes and call the function to get a new object without including that file first and without having a list of auto included files that always get included.
Oh, that's a lol :D Marketing :D First, Eloquent is an Active Record pattern, not an ORM. Second - it's definitely not the best feature wise. If we talk Active Record - Yii 2's Active Record layer and query builder is so much far ahead. Doctrine is in it's own league. The article is a piece of bullshit :)
&gt; Want to create a single endpoint for registering users? In Symfony, it will take you adding/changing 25 files just to get to this point. Is this hyperbola? Or maybe an attempt at humor? Assuming I did not use an existing bundle, to register an user I would start by adding a route. I use route yaml files instead of annotations so that is one file to edit. I tend to define services when I can so updating a services file would be two. I only have one action per controller so that would be three. In stead of a template file I use a responder file so up to four. While not necessary, I would have the actual registration functionality in it's own service so that make five. Probably use a form class and a data transfer object so six and seven. Maybe a database updater so eight. Can't really think of any more. And quite honestly, a more typical Symfony developer would probably only need two or three files. Just saying. Glad to see you learning Symfony. One thing I have found discovered that when learning a new framework is to try to avoid comparing it with other frameworks. Learn the ends and outs of it by itself. Once you become proficient then maybe you can make some valid comparisons.
We just recently upgraded one CakePHP 1.3 app, it took about as much time as writing it from scratch. 1 down, bazillion to go.
It's not a hyperbola. To get from blank slate to REST API with a single endpoint to register user (no email confirmation even), you'll approximately need 20-30 files to make reasonable changes in. I won't list all of them since that would be tiresome to articulate, but a few will do. For example, you may want event subscriber to hash user password without fetching encoder service manually from a container each time you want to set or change it (in Laravel, you just use bcrypt helper function directly). You'll want another event subscriber that would handle exceptions and return corresponding json response instead of html gibberish (in Laravel, this handler is already created for you to use and customize). You'll also need to [somehow process validation constraint violations to make a readable structure of it](http://pastebin.com/RNDJBm1F) before sending them to json response (in Laravel, there is no concept of such problem). When creating fixtures for loading test users in development environment, you'll discover that you need to build an abstraction first, because by default fixtures can't even figure out current environment or call an application service from a container (so you end up building big parent class that implements necessary interfaces and essential logic). And so on, and so on. Weeks of time wasted building boilerplate before you even get to write your business logic. And yeah, I think I am entitled to my own opinion. At least I actually tried building something in both frameworks instead of simply bashing "that other framework I don't work with" (note, that it's not a reference to any specific comment or person in this thread).
Using Symfony components does not mean it is Symfony. A whole ton of projects use Symfony components now...like PHPBB, Drupal, Composer, etc. The Symfony framework has decoupled its base layer into Symfony components. But, as a whole, the Symfony framework is pretty different than Laravel.
Much too opinionated, like a lot of Laravel.
What program is this from?
Would you mind explain the chart?
X is timestamps Y is seconds to render
In PHP, variables are (for the most part) scoped to one of three places: globals (i.e. the main script), the current function, or the current class method (which is a function plus `$this`). In order to for a function or a method to use a global variable, you can either pass it in as a parameter, or use the `global` keyword (shudder). Without doing one of those two things, you might as well have two different processes because the variables effectively don't exist in the other place. But loops, per your example, are totally different, as are other bits between curly braces. Scopes leak. Which is to say, if you create a variable inside of braces in a loop or if-block, it exists until you exit the current scope (the function, method, or global script). You can also really [shoot yourself in the foot](https://secure.phabricator.com/book/phabflavor/article/php_pitfalls/#foreach-does-not-create) if you throw &amp;references into the mix, as a result of how PHP scope works. This is in contrast to other languages, where that's an error. Simple Swift example: if true { let i = 0 } let j = i + 1 // compiler error, use of unresolved identifier i So, closures. They're special. Mostly just syntactic sugar, but with some special properties - and those properties lie within `use`. `use` is similar in effect to `global`, but instead imports a variable from whatever your current scope is, rather than the global scope. But like `use`ing a trait, it's closer to a copy-and-paste. This lets you bind a value at *definition time* for use inside a function, rather than its value at runtime. Which is to say, this: &lt;?php $closures = []; foreach (range(1,5) as $i) { $closures[] = function() use ($i) { echo "$i\n"; }; } foreach ($closures as $closure) { $closure(); } and &lt;?php function f() { global $i; echo "$i\n"; }; foreach (range(1,5) as $i) { f(); }; do the same thing. The critical difference in this stupid, contrived example is that if I want to run the closures from the first example a week later (because this is a daemon or the world's slowest query or something), they'll still echo the numbers 1-5. However, I would need to recreate the global state in the latter example for the function calls to produce the same effect. If the global variable `$i` changes value, type, or gets unset, my function no longer does what I had originally intended. And if that's what needs to happen because of the way my program is designed, sucks to be me. And if I run the closures in reverse order, i.e. foreach (array_reverse($closures) as $closure) { $closure(); } I get 5-1 instead of 1-5. So, that's all great, but why all the bullshit and not just inherit the values from the definition point? Because you're literally creating a new function, albeit not a named one. And functions always have their own scope, with access only to the arguments provided (and the superglobals). Just as a traditional named function doesn't have access to whatever variables existed in the global scope when it was first parsed, neither will closures as they are defined. This avoids issues around memory leaks (any values not explicitly `use`d don't have another reference to them tied to the lifetime of the closure itself) and forces you to explicitly opt-in to weird/unpredictable behavior that you'd get when any of the values currently in scope at closure definition time are a resource or a reference, since they may look completely different when the closure is executed than they looked when it was defined. It also creates a path for a lot of compiler and runtime optimizations, but that's mostly a side effect of having pure functions by default.
Do you mean the plot? Kibana! We only log the render time into a file, so I first had to import it into elasticsearch. Making the nice plot was the easiest part ;) We are in the process of moving more of our logging into our ELK stack. If you mean "what is the program that runs on your server", it's our home grown ecommerce system.
Cool, thanks
I'm still confused why you insist on being ridiculously anal. It's blindingly clear from context exactly what I meant.
Did you have php apc or any of type of opcode caching enabled in 5.3?
Yes APC. Now we have APCU and zend opchache. We switched from apache 2.2 + mod_php to apache 2.4 + php-fpm.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Are you using splunk, nagios or anything else with it? What is dumping the cpu %s to elastic?
I also prefer Wamp over xampp... I had some occasional problems with the later, and wamp also looks a bit more polished from UI perspective.
I'd map what my project needs. First start with the blog Article, what am I going to show? Title, Time/Date of Post, Author, Categorys blog Article is part of. Highlight image, WYSIWYG Content. Will there be comments? Nested? Single Level? Will there be any additional interactive features. Now think of website structure, will it be a One Page Site? Multipage CMS? Category tree layout? Then how do you manage all this content? How does the backend work, can you manage users, comments, blog articles, categories that sort of things. Once you have a pretty clear plan (I sketch wireframes) of what you want in your site, break each task into an order of what is needed first and then break that down. From there you research what you want and need to do and see if there is any constructive criticism to take note of. Many many people just follow a guide of how to do something and do not learn or actually research why the writer is telling them to do X or Y. Put in proper effort and you will learn a lot and become a much better dev. Just follow a guide and become like the rest of the mediocre. 
We have server monitoring with nagios and munin. CPU usage, ram, io, and so on. We dump the logs from apache and php to elasticsearch. I'm too cheap to pay for spunk et al.
Sorry for the delay. Here's the original thread I read with the NFS fix. You just gotta install the plugin and then modify that line in the vagrant file: https://discourse.roots.io/t/virtualbox-performance-in-windows/3932/8 This is for Trellis specifically, but I assume it would work for any Vagrant box on Windows (I've done it on a Laravel Homestead box and it worked fine)
I believe it's: Global is to normal function as normal function is to closure.
It's easy to use, fast to prototype, and has excellent documentation. Of course it's popular. 
Yeah. I haven't analysed which changes has to be made and since I got in the project after 2 or 3 years of its release, there's a lot to cover. But well, someone has to do it, sooner or later.
&gt; In ORM, they usually use magic methods like __get and __set instead of physical properties. &gt; Yeah, those from 2008.
It's a bit hard to understand what you wrote, but my take is that you think public properties are bad? Keep all your properties private by default. May be you can use some array to hold the arbitrary fields, and define properties for required fields (ID, name, email, etc). Additional fields can may be go to an array that you define a getter/setter for. Most importantly, stick to a pattern. I can remember the PHP mailer class having a weird inconsistent way to configure it. Don't expose any properties just because you want such objects in your tests. Any modern library can get you there easily with private fields. 
Do you have the same statistics for an in-house PHP API if you use one? Or is this only for rendering pages (which I assume are backed by database queries)?
Sounds like you are specifically talking about ORM model classes and not OOP in general so I'm going to address that use case. Listing your properties means anyone will immediately know what properties the object can have. It's a big waste of time to have to look at a database table to see what attributes might exist on the model. If you are using an IDE it can warn you when you access a property that doesn't exist. With the array of attributes it's easy to mistype the attribute name and introduce bugs. Yes, you could annotate the class with docblocks or something but [having explicit properties will also save memory](https://gist.github.com/nikic/5015323) so why not? It's worth mentioning its not an either/or thing either. You can have a static create method and defined properties. 
Thanks - yes, not a real dev :) My terms are all shit. 
Yeah, your would define all of the properties and then the ORM sets them with the results from the query. Check out [Zend/hydrator](https://framework.zend.com/manual/2.4/en/modules/zend.stdlib.hydrator.html), it's a library for creating objects from arrays like an ORM would. I usually put the timestamps on my objects because I use them in code. If you have columns that aren't used in code your could definitely leave them out. 
I'd bet that the mod_php to php-fpm switch was at least half of the performance improvement you're seeing.
I'd be surprised if switching web servers makes a big difference. Once you're running php-fpm, the web server matters very little. Maybe a bit more memory needed, but Apache can serve tens of thousands of requests per second in a proxy context (much more than any PHP app with a database backend could keep up with).
Right but that memory can be an issue when Apache goes hog wild on it like I have seen in the past. Nginx seems to be much better in that regard IMO.
Me too. Considering how much of Laravel boils down to essentially automated copy-paste, the irony of that marketing pins my bullshit-o-meter every time. 
Apache wouldn't have any reason to go hogwild on memory, if it's not got mod_php running. One can strip an Apache process down pretty small (not quitre nginx small, but still small). I'm not at all anti-nginx (and I support both Apache and nginx in my products), I just don't really think it's useful to have people assuming nginx is going to make a big difference in performance in the general case, because it won't. There are cases where nginx makes sense, and there are excellent reasons for some people to choose nginx for some deployments, but for most people and most deployments, Apache is just fine. It won't be the bottleneck, and it has a tremendous history of reliability.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Hashing the password in an event is bad practice. It should never even Enter the entity unhashed. Regarding your other "problems" symfony somewhat tries to hint you that you should work towards reusable code and architecture. Writing a listener to return a response as json? Takes 2 minutes to write and lasts forever. I also have to write my own variant if I would do it with normal pages. Symfony does not dictate business rules or domain logic while providing a good set of extension points. You probably have to process the validation constraints because again, symfony doesn't dictate what it should look like. Feel free top write reusable code that you offer your company can reuse. Oh and fixtures are not supposed trip know about their environment, the one setting up tests does 
Interesting stats but in terms of production I doubt these figures are even remotely accurate, at home and playing around with projects people are probably using 7 more and more but in terms of older larger codebases I'd say 5.* would dominate to a far bigger extent.
I never said t was Symfony. I just said I can't see, as a framework, how you can rate Laravel over Symfony as it's so reliant on it's parts. Drupal is a CMS, PHPBB is a forum they are not frameworks, you don't see them based on laravel do you.
nice to know, but why /r/php and not /r/laravel ?
oh ok. that explains it. Glad I could give some new information then. :-)
if it's for a school project, MAMP should be more than enough for your needs. www.mamp.info definitely easier to install than messing around doing it manually. edit: but coincidentally, there's an article posted in this sub, just 2 posts below yours: https://www.reddit.com/r/PHP/comments/5d6ijj/how_update_php_in_mac_osx/ http://afermj.xyz/update-or-upgrade-php-in-mac-os-x/ 
Is this the wrong place to post this? Or are posts like this not welcomed? Apologies I don't know where else to post.
Laravel as components... urg, it doesn't follow semver :P
Maybe https://www.quora.com/What-is-the-main-difference-between-Symfony-and-Laravel-PHP-Framework/answer/Th%C3%A9o-Fidry?srid=oklX will help you. Honestly the hardest bit I think you may have in Symfony when starting is that it may sometimes be hard to tell if you're struggling with a PHP concept, a specific component or Symfony itself. &gt;Want to use seeds (aka data fixtures) There is two differences between Laravel and Symfony here: - Laravel ships with Eloquent ORM, which integrates a migration system. Creation of the DB &amp; co. is done via those migrations in Eloquent - Symfony Standard Edition ships with Doctrine ORM, a very different from Eloquent. The database is generated from your entities configuration (so it's easier here to generate your tables that matches your entities). However it doesn't have a migration system out of the box (which you should use at some point if you want to change your schema once your application is in production). Which migration system you want to use is up to you. But switch from Eloquent to Doctrine and you'll have the same issue in Laravel. As for fixtures in Symfony, look at https://github.com/hautelook/AliceBundle. &gt;Want LRU cache? A few months ago, PSR-6 was not voted. Symfony was an early adopted of PSR-6 although they didn't release it ASAP. &gt;Want to create a single endpoint for registering users? In Symfony, it will take you adding/changing 25 files just to get to this point. Add a controller, register its route, use a repository to get the users and inject the users to the Twig template to render it. Hardly see any difference with Laravel and that side to be honest. &gt;It's overreliance on php form builders make me cringe Not sure what you're referring to. &gt;Assetic got seriously stuck in 2011 (and it seems it even got butchered in 2.8) Yes, unlike in Laravel, Symfony doesn't take a strong stance at what should be your front-end integration. If Laravel folks find it easier to get started with Gulp &amp; Vuejs and Taylor ok with keeping up with it, in Symfony this would cause more problems than anything. &gt;Configuration via Dependency Injection Extensions (for uninformed, they interpret all that pretty YAML stuff) are too obscure to deal with and requires meticulous documenting where in Laravel you just need a glance at source code. The doc is relatively good on it: https://symfony.com/doc/current/components/dependency_injection.html. So you shouldn't need to dig too much into it, although if you have do, granted it's way more complex than in Laravel. Symfony and Laravel DIC are two very different beasts. If you're new in Symfony, I 
Hands down to this great article where PHPixie is more popular than ZF2 and Symfony not in the top five pic'. 
In what way is Symfony a mammoth? Symfony is FrameworkBundle + Symfony components. The FrameworkBundle is just a glue with a Depenency Injection system, and Symfony components are isolated re-usable PHP components (from which Laravel is 50% based). A Symfony application can fit in 1 file if you want to and can be used as a micro-framework, don't mistake Symfony Standard Edition which is a full bloated edition fit to solve 80% of the cases for Symfony itself.
But I am planning to get rid of wamp as well and install the stuff individually. For example mariadb can be comfortably installed on win as a service, and that is even better as being a part of the package, and also php7 is easy to install. Apache shouldnt be a problem as well. 
No offence taken, I use both frameworks tbh :) The biggest difference in that aspect is Laravel is more accessible and allow you to develop more things without a deep OOP/design patterns/framework knowledge, whereas Symfony used to have a much higher entrance barrier (it got a lot better recently I think). Otherwise, they are just two frameworks on top of Symfony and other PHP components. It's the PSR-4 &amp; Composer era after all :)
I think you missed the point.
I might want to do that if I can autogenerate that file...
Where do you plan to host for production? If a Linux server, I'd highly recommend Vagrant. But yeah, that's pretty much what I did so that I could get Composer and NPM and stuff to work in my PowerShell. Still though, vagrant is super nice.
I'll keep that in mind. Thanks for your comments.
Honest question: why are we enforcing the use of spl_autoload_register() when it's such a poorly scaling solution? Considering there is some non-zero cost to each autoloader checking for the existence of a class to load, then chaining them one after another means the solution becomes slower and slower as an autoload has to go through a chain of failures until it reaches a successful autoload. It's an O(N) operation. Wouldn't it be better we take a step back and introduce a standard map mechanism in PHP, where multiple autoloaders can cooperate to produce **a single autoload map** which then can directly load the necessary class at O(1). Thoughts?
And where would you store this map? Do you regenerate it on every request? That's again O(n) operation and not every class is used on every request. Composer does this, but composer can write to filesystem.
If it works for op-cache, it'll work for locating a class, don't be silly. And I already described a basic invalidation algorithm above. I have the feeling you didn't read a thing. I use such an autoloader, but I can't make it as efficient in user-land, nor I can roll in other loader providers to make benefit of my cache. If it's turned into a standard feature, we all win.
I actually had no idea you could cast a variable to "unset". Considering that "unset" isn't really a type I'm not sure how anyone thought this was a good idea in the first place. 
The problem I'm pointing to is that spl_autoload_register() encourages chaining autoloaders, which is slow as a runtime resolution mechanism, but there's no built-in mechanism that builds a classmap for **all of them**. You can't do this today. It'd resolve the issue of increasingly slower autoloading as you add more autoloaders. Additionally no classmap autoloader can store the map at the PHP process memory (without serializing), which would be the most efficient solution.
Ideally it would generate the whole map at once. There's a big set of benefits of doing things this way. But it's a larger topic to get into here. &gt; Your version looks fine, but why it needs change to spl_autoload_register()? It looks like something that could work on top of how things work now. It can't because the current autoloaders don't return file to include, they directly included. So you have nothing to populate the cache with. Of course PHP can "detect" which files were included, but that would be a terribly hacky solution.
My guess is that it's a consequence of the horrible way the casting operators are implemented. `(int)` is not parsed as `(`, `int`, `)`, but as its own thing. This means that `foo(int)` is a syntax error. If you added a `(null)` token, then `foo(null)` would be a syntax error. So I'm guessing they went for `(unset)` to avoid this. But it's completely useless anyway.
No, OPcache stores constant data in shared memory.
Right, I forgot that, thanks for explaining.
I never knew `each` was a function.
If you have a file like, say, `autoload_classmap.php` containing something like &lt;?php // autoload_classmap.php @generated by Composer $vendorDir = dirname(dirname(__FILE__)); $baseDir = dirname($vendorDir); return array( 'Firehed\\API\\Dispatcher' =&gt; $baseDir . '/src/Dispatcher.php', 'Firehed\\API\\DispatcherTest' =&gt; $baseDir . '/tests/DispatcherTest.php', 'Firehed\\API\\EndpointFixture' =&gt; $baseDir . '/tests/EndpointFixture.php', ); OpCache effectively makes it so the file doesn't need to be re-parsed, so it's semi-free to do `$map = include 'autoload_classmap.php';` In any case, what you're describing is really a non-issue in modern PHP, since you'll almost never use anything other than the Composer-generated autoloader. So while you *can* chain them, you probably won't. What's more interesting is that for sufficiently large projects, it's actually more efficient to autoload dynamically anyway because the cost of calculating the path to the relatively few files you need ends up being better than loading a giant dictionary into memory.
I have no problem with any of these. 
It'd be better to get rid of it, rather than allow disabling it. The problem with the latter is 1) people won't disable it, and 2) code which depends on it will now only be broken *sometimes*, and therefore won't necessarily be fixed.
I've found some edge cases for `create_function` that 5.3-style closures don't really handle. In particular, through the use of `create_function` you can make dynamically make functions that are optimized for whatever input is passed to them. In some cases this might involve, among other things, [loop unroll](https://en.wikipedia.org/wiki/Loop_unrolling) code, in-lining function calls, etc. I suppose those are all micro-optimizations but micro-optimizations can sometimes make a big difference.
Hey! I'm a new programming wondering: Should I learn PHP or Ruby first and why?
Surprised at each(). I've found that unsetting an element within a while/list/each loop actually frees up memory. Doing the same in foreach does not.
https://github.com/technosophos/querypath
Yes you may. I'll have a look when I get back to the office. 
Well, I'm experiencing this issue: http://stackoverflow.com/questions/31883881/remove-square-brackets-from-docblockr-comment The square brackets are from docblockr, an Atom package simplifying documentation creation (you just type "/**", press Enter above the function, and it's gonna fill out the @params and @return automatically, quite convenient, actually)... Anyways, docblockr added them, I'll do a wildcard remove, should be easy enough with RegEx! I really don't know why I trigger error instead of try/catch constructs... I guess it just works, and I have left it that way! But I agree, try/catch and Exception throwing is more proper, it should be an easy modification to the code. And thanks for pointing out the square brackets issue, I somehow managed to overlook it :)
So just the average WordPress website with the average WordPress developer.
sizeof is an unfortunate name given that other functions copied from C does similar things as their C equivalent. sizeof does something completely different! Also, aliases are generally a bad idea (except for the_alias_of_andrea). Today I learned about the sizeof alias for the first time in my 15 years of using PHP! It's completely useless knowledge. Now I need to keep track of two functions and remember which one does what. Is one of them a language constrcut and the other a function? Or are there any other differences? (Rethorical questions, I can read the fine manual myself).
When I first saw TimThumb, I had code rage "you can't just allow arbitrary requests to pass through... This is a huge security problem!" of course I did nothing. This was apparently years after the fix was released, though 
Yea and it's made for XML
At least you have something to tell to your grandchildren right? /s
This is a good empirical evidence of "post-truth". Marketing and emotion trumps facts. Symfony doesn't exist anymore, it's but a patch in Laravel's codebase, because when enough sites imply it, it becomes the accepted reality.
He admitted to his mistake, got to give him credit for that!
Considered, but clue didn't fit my needs... but looks good otherwise!
Imagick php extension
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You can always emulate `create_function` by generating the appropriate code and `eval`ing it.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
salty much? You chose a username that really really represents your character, didn't you? But maybe it's just your undies that got twisted up, causing you some uncomfortable tension... Ever heard of posting things where the most people are able to help you best with? probably not... 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
And this way you can use things it doesn't support, like return type declarations, and you can also name the function as you please.
Hi, have you tried phphelp? /r/PHP is not a support subreddit. Please visit /r/phphelp for help
Great. So all Frameworks, CMS systems and php-related topics will move into /r/php. The average rate of real php-related topics will go down. people will stop reading and no one will get answers. Great way to make sure a sub dies. kudos. 
Debugging means fixing the bugs. Compiler-time exception handling is one form of debugging. You can debug code, especially web code (front or back end) without being able to step through the code during execution. Let me ask you this: Specifically, which programming language do you intend to use? And how do you intend to debug this code? Like what specific software? *edit* Either way the answer is yes you can do that. Just gotta set it up.
Nobody cares about your shitty site. That's not PHP.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
$myObject(); is not the same as MyClassname();
Ok, let's not call it debugging, but that is what I meant, stepping through the code line by line, inspecting variables&amp;call stack, etc. I use php with xdebug.
I really hope this is what's happening. And I really hope switching to FastCGI can solve this issue. Thanks! While I do have a basic understanding of thread-safe vs non-thread-safe, I still wonder why WAMPs come with mod_php _by default_.
I suggest adding to this RFC the removal of `&lt;&gt;` as an alias for `!=` because my coworker uses it constantly and I hate it
Interesting. I have gone down this path a few times myself but never ended up with a clean solution. Always find that it gets to be too verbose when building actual pages with all the nitty gritty details added. I end up using the heredoc notation and string concatenation. But maybe I'll get bored and give this a try. Can you explain how being immutable helps in this context?
If they are built on PHP, and can actively contribute to making a developers life easier, why shouldnt framework and CMS topics be in here?
&gt; Can you explain how being immutable helps in this context? Nope. I just prefer to build things that way because it might prevent nasty surprises. I'd build everything immutable if I could. Mutability is unlikely to be an actual problem here, however, because the likely use case is for objects at the end of the call graph to return `HtmlElements` up the chain without them being modified along the way.
I am curious to know why you wouldn't recommend this, just FMI!
I've used CQRS with and without Event Sourcing. The advantages of (how we interpreted) this patten really outweighed the additional boilerplate of having more models. It's just too often that in and out models aren't symmetrical and with CQRS this is no issue at all. Event sourcing didn't really affect how CQRS worked for us.
`create_function()` is terrifying. I can only imagine how many security hole ridden apps are out there that use this. :-)
Thank you!
&gt; Haven't used CQRS yet as so far The moment you add a search engine (e.g. Solr) you did that. &gt; Did you also use Event Sourcing Event Sourcing and CQRS are orthogonal.
&gt; The moment you add a search engine (e.g. Solr) you did that. You could hide search engine in a cache layer, it doesn't need to be exposed in your larger architecture.
And which class attributes are you exactly referring to? There are many classes...
No I haven't but I will. Thanks for the links. I suspect our code will break those tools. We've got some nasty business going on. Purging it with fire as quickly as we can.
&gt; So CQRS also means dividing your entities into read and write entities, right? It means having different *models* (read/write) for a single entity. The logical notion of an entity can't really be split.
So, with explicitly defined, do you mean something along the lines of "public $var = 'x'; private $var = 'y'"? That is, explicitly declaring attribute visibility?
I missed the `sizeof()` deprecation. That's one thing I actually **do** use, for the exact reason you mention. `sizeof()` seems more english readable to me than count.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Anyone know how to fix this annoying namespace issue in PHPStorm? http://i.imgur.com/SldHwdw.png Edit: Aside from restarting PHPStorm
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
- No unit tests - Public, undeclared properties - No class docblocks - Exiting the script immediately with `trigger_error` upon error. What if the client wants to recover and continue? - Magic strings - DirectedGraph: `$this-&gt;directed = true`, UndirectedGraph: `$this-&gt;directed = false;` These are the parts I would suggest you improve.
There ARE unit tests... PHPunit, to be exact: https://github.com/algb12/GraphDS/tree/master/GraphDS_Tests And please explain me "magic strings"? And do you mean by undeclared the visibility (no public/private/protected)?
Yep, I'm aware of the story, the rise and fall, of TimThumb.
Capistrano can deploy to thousands of servers in parallel, how does robo handle this?
You mix CQRS and specification pattern, isn't you? CQRS is [much more simpler idea](http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/).
 -------------------------------------- | PHP BENCHMARK SCRIPT | -------------------------------------- Start : 2016-11-21 18:46:48 Server : local.dev@127.0.0.1 PHP version : 7.0.12-1+deb.sury.org~trusty+1 Platform : Linux -------------------------------------- test_ifelse : 0.225 sec. test_loops : 0.273 sec. test_stringmanipulation : 0.406 sec. test_math : 0.264 sec. -------------------------------------- Total time: : 1.168 sec. This is on a ThinkPad with an i5-5200u (2.2 GHz)
And this, boys and girls, is why you need to keep your framework and plugins patched and updated at all times.
Use vagrant 
That would be a better title, I like reading stories like this though. We all make mistakes in our career, it's fun to rehash them with this kind of light hearted perspective.
It is not about the visibility (albeit you'll get that one, too). It is about declaring them inside the class body at all. You really should only use attributes that have been declared. This way you ensure, that it is clear which properties your class has and can use and/or provide (depending on the visibility).
Command and query separation by itself is useful to help protect against coupling to a framework. Request separation is more tricky and not always worth it. Just my humble opinion.
&gt; This is on a ThinkPad with an i5-5200u (2.2 GHz) Impressive. My CPU is roughly 70% faster (i7-4770k @ 4GHz), but only 30% better with the PHP script (0.89 sec) -------------------------------------- | PHP BENCHMARK SCRIPT | -------------------------------------- Start : 2016-11-21 19:01:28 Server : dev@192.168.1.22 PHP version : 7.0.12 Platform : Linux -------------------------------------- test_ifelse : 0.177 sec. test_loops : 0.265 sec. test_stringmanipulation : 0.266 sec. test_math : 0.187 sec. -------------------------------------- Total time: : 0.895 sec.
I'm surprised no one else has commented yet. But here goes my shot at it: Yes, your `openfiles` hard limit is the same as "FD_SETSIZE". You're also correct that the limit is only an issue if you're going to exceed it (which is almost absurdly obvious, right?). The soft limit is there to protect yourself, so that you can set a soft limit and avoid hitting the hard limit. You can do one a few different things. You can try to count open descriptors regularly by either using a system call to `lsof`, or try to use APD: http://php.net/manual/en/function.apd-dump-regular-resources.php I've never personally used APD but it seems suited to this kind of situation. But maybe you don't want to build another PECL extension into your project. The way that I'd personally handle this would be to catch the warning, and see if I can close other open FDs to free slots. See: http://stackoverflow.com/questions/1241728/can-i-try-catch-a-warning You could also set the `openfiles` soft limit to something like 1020 - you'd like still get a warning when you hit the soft limit, but you could trap that, and either decide to halt execution or temporarily raise the soft limit to let you process one or two more streams before terminating. All of this assumes you have some kind of structured list of your open streams and are able to close some. But then, if you're able to close some streams, you should be doing that regularly anyway and you wouldn't encounter this problem (maybe?). Or perhaps you can defer that stream for processing later. Whatever works for you. 
I remember it from years ago, actually I thought it had already been removed.
Introduce some coding standards to your projects, then. 
Ideally a cache would not affect your architecture, you could for example wrap a repository in a cache that fulfills the same interface.
I've tried. I mostly get told to stop complaining. I'm not the project manager so there's not much I can do. but yeah, there are no standards whatsoever.
well, it doesn't bring you deployment scenarios out of box, just tasks. Combining `parallelExec`, `ssh`, `git`, `exec` and others you can build sophisticated deployment scripts.
I often tell (the guys I work with) stories about my past mistakes. I follow up with saying "learn from my mistakes and save yourself the embaressment!". Your one story beats all of mine put together. Bravo!
Nice one.
Get a vps/dedicated, and you won't have to worry about this..
Except the WTF look of most people when they realize that PHP supports it at all…
TL;DR: * if you are building a CRUD-alike domain, then the good old write/read from the same model will just work fine * if you are building on top of a complex business domain, then you will likely want to switch to CQRS CQRS helps loads when it comes to RDBMS design, as it splits operational data from reporting data even before starting to design the system. Don't under-estimate this, because a lot of people get stuck with it, and you end up with a monstrous EER just for the sake of normalization. Now, onto the shameless self-advertising: I do actually teach these architectural patterns to companies with a relatively short workshop, and in my opinion it will take a bit of getting your feet wet in order to take a weighed decision. I just finished one of those workshops, and the conclusions were indeed mixed feelings, because it's a pattern, like any other, not a silver bullet. On one side, extreme flexibility, especially if combined with event sourcing. On the other side, additional complexity to be dealt with in any custom view of your application, and a lot more SQL than what you'd imagine (actually good SQL, especially if you use serious RDBMSs). Some good use-case scenarios: * blogging platforms * booking systems * tracking systems * insurances/policies * batch-insert operations * systems with a high load of writes or reads (because you can now split the responsibilities there ;-) ) Some really bad use-case scenarios: * CMS * a file manager * apps that just deal with saving/loading in general * anything that is a prototype and you are SURE won't land into production (hahahahaha!)
I love the idea of this. Some things that I routinely measure: - length (in seconds) of requests, grouped by endpoint - count of requests, grouped by HTTP method - count of requests, grouped by user - number of records in responses, grouped by user
Stop complaining
&gt; This is just meant that "any method that mutates state should not return any value" and "any method that returns value should not change state". Sometime this is just impossible (array_pop for example). I think you're confusing CQRS with immutable datastructures. It's perfectly fine to do a query, get an array or object, and then do whatever you want with it, as long as you don't persist or sync it back in the process. 
DigitalOcean &amp; ServerPilot will cover most needs.
I absolutely agree with you and think this is the best value of effort / benefit. But I've often read that people call this just CQS and not CQRS, as they think the R in the CQRS means you split your models completely into different read and write ones. Btw.: How do you work with a create method (let's say in a service)? Do you return the ID or the entity from the create method? I think, strictly, this violates the CQ(R)S principle, but for me this is the only useful way to handle a create.
&gt; I would find this way more useful if it enforced valid HTML - I shouldn't be able to add anything other than a ListItem to an UnorderedList Me too. I just built it over the weekend though :-) Expect something like a set of `Element\Valid\TableRow`classes for version v1.1. It'll probably disallow incorrect elements via typehints and a hierarchy of empty interfaces. In v2.0, I plan to completely rework attributes so they have their own classes like the elements do. Elements in the `Valid` namespace will enforce validation for both attribute types (but not values) and child element types.
&gt; Is it a useful architectural style to design large / enterprise applications or is it just an overkill? If you want to scale something, it most certainly is a great pattern, especially if you use event_sourcing as well.
I experienced just the same. Separating read and write models can be really useful, and I often use Elasticsearch as a "read model" / read source and MySQL as the write model. Just using a bit of CQRS goes a long way. Full CQRS and especially event sourcing and something like a command bus are interesting concepts, but not really helpful for my applications (too complex and you need to have good use cases to make full use of it). But just getting to know the concepts helps to improve your application design.
Symfony is a framework, built upon a foundation of Symfony components. But that's not all it is - it builds on top and adds a lot of things. For example, look at Silex. It is also a framework built with Symfony components, by the same folks as Symfony - yet it is a very different thing entirely. Laravel, like Symfony, builds on a base of Symfony components. But, it has plenty of its own things that are quite different from Symfony. Laravel is not a descendant of Symfony. They both share common building blocks, but they both use those blocks differently.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; having to acquire an access token through a fucking browser every time you want to make a request Can someone tell why this is wrong? It sounds wrong. I thought you authenticated once, then got a token you can use for the next requests.
Like I mentioned in another comment, Glide supports signed urls which do not allow a user to modify the parameters.
The "specification pattern" is a bit more specific than simply turning a method into an object. It typically encodes an expression of conditions. Without that, a more apt name would be the "Command object pattern", which... is not mutually exclusive to CQ(R)S, it's one of a few ways to factor it.
CQRS is typically part of a larger system, including layers which may return data from commands **before** it's passed to a command handler in a CQRS setup which **doesn't return data** from commands. It's rare and unlikely you'll have a full domain or API system which is *entirely* CQRS. At this point we're talking cargo cults and chasing silver bullets. Until you have a system so large that you have differently architected layers in it, this requirement of CQRS doesn't do you any good, so feel free to return id from a command (if anyone wants to object, they're welcome to discuss **the practical implications** of skipping this requirement in a typical PHP app, I'm looking forward to architecture warriors attacking this one). The most important part of CQRS is how well it suits with event sourcing, and the ability to have, basically, infinite types of infinitely scalable read models, which is irrelevant to the commands returning data. One can quote Greg Young saying "no it's not about event sourcing", but in the end I don't care what someone **said**, I care about a proper **engineering PoV** that says what's the value of CQRS without event sourcing. Precious little. But do avoid significant overlap between data returned from commands and read models. I.e. id and other critical information is fine. But if you start returning full entity models, then the commands are stepping onto read model territory.
You can do whatever you want with this objects, but you can't "save them". Read operations only reads data, you can then transform it but you can't "save" it. Maybe you could save into different data store, for example if you have some complex data aggregation. But this acts just like cache.
Unless the token has expired in the meantime and the service does not provide you with a refresh token I believe you are correct.
tl;rd Commands should not "read" data, but it may return result of operation. &gt; How do you work with a create method (let's say in a service)? Do you return the ID or the entity from the create method? Most of the time you neither have some identifier from your domain (email for user, number of product) or you could just use UUIDv4. I work with mobile applications so for some cases it is even preferable to use uuid in order to make your mobile app works offline. But sometime I just return some id of entity. Anyway, id of created entity of any other result is not read model itself. So for example, if you can just use this id to get data from read model - it's fine. If your write operation returns the same value, which read model can provide to you, you already have mixed concerns. 
&gt; Before you yell at me about overuse of static.. I know, that's not the point here. I wonder if you know what you're doing to yourself, or you simply anticipate the reaction. The latter is not the former.
IceHawk is a micro framework intended for building CQRS web application such as websites, micro services and APIs upon the HTTP protocol. Unique about IceHawk is its programatically separation of routing and handling for read and write requests, strictly aligned to the HTTP protocol verbs (GET, HEAD, POST, PUT, PATCH, DELETE). It also offers setup configuration options to initialise a web project from scratch and a final responding mechanism. The 2nd major release was (re-)build after 2 years of practical experience in creating eCommerce shops, micro services and RESTful APIs. IceHawk is written for PHP &gt;= 7.0 and published under the MIT license. As the main author of this project I want to share the result of our efforts with you and appreciate any feedback, questions and input.
&gt; I've never seen anything so absolutely retarded in all my life So make a universal standard that's better. If you're so convinced that it's bad, then there should be plenty of room for something better &gt; you can't directly authenticate an API request by using the actual username and password of the fucking account itself Actually, you can. There is a grant type where you can use the username and password. But it's for first party use, not for other people. &gt; Assuming all developers are too retarded to encrypt stored passwords in a secure way is an insult to the entire industry Well, considering that you should *never* **ever** store a password in it's "encrypted" state... also, the idea is that if you (Site A) are trying to authenticate against someone else (Site B), **YOU SHOULD'T KNOW THE USERS PASSWORD FOR THE OTHER SITE**. Basic security is that users should never ever simply share passwords for other sites. &gt; you're having to acquire an access token through a fucking browser every time you want to make a request Uh, you know you can store the access token, right? And the access token also comes with a refresh token, so when the access token expires, you can simply get a new one without going through the browser. Also, the whole point of going through the browser is that the user has to make an explicit action stating that they agree to whatever you're about to do. If I make a site, and people sign up. Statistically most users have one password for most sites. So, without the browser part I can just try to see if the password they gave me will work for their Twitter, Facebook, Github, Reddit and StackOverflow. If we did things your way, I could try and get permissions to use their accounts on other sites without ever asking them. Or them even knowing. &gt; And the icing on the cake is having to use one access token in order to acquire another, slightly less useless access token. This, again, shows that you don't understand OAuth. There are multiple ways to do authentication through it. One way is what you're talking about, the authorization grant. It's used for when there is in fact a server in the back-end, and uses one way of proving that you (the server) are who you say you are. The other is the implicit grant, which is for when there's no back-end server involved (Think a stand-alone front-end application), and has a different method of proving that you are who you say you are. &gt; Relying on client interactions for API access is quite possibly the shittiest thing I've ever seen in my life Relying on client interactions for API access means that you ensure that the client *knows and agrees* to have their account used. That's the important part. If I were Facebook, I would not want to open an API that let websites post as a user without having a flow that *guaranteed* the user hit an agree button -------------------------- Sorry, forgot to add a TL;DR TL;DR: You're looking at a security mechanism from a usability perspective. But it's a global security flow standard. What's important isn't how easy it is for you, as a developer, to implement, but rather **how secure is it from the security perspective**. Your ease of development takes a backseat to security issues
I assumed from the title that this was clickbait.
Try running php with iis. I run my startup with this combo and it is really fast!
Use something like forge or phpuppet and call it a day.
Just PM me your username and password and I'll store it in a vault and nobody else will see it honest!
You could do it in several ways but queries work really well as Specification.
I do. There's a couple of reasons. Generating images takes a long amount of time. Having a webserver have to hold web requests open for multiple seconds while images are generated is a shitty architecture, as it means that: * You can't easily control how many images are processed at once. *Hint* having more than 1 image processed per core being used is usually not a good idea. Having a well behaved queue of images to be processed allows you to monitor that queue very easily. That * You need to set a larger number of worker threads than is appropriate, as it is possible for a large number of requests for images to produce a large backlog of * It's really hard to allocate more resources to image processing. If the images are being generated by a background worker thread, and you realise that you need more image processing resource, you can allocate more CPU resources (e.g. by spinning up another background worker image processing box). If the images are being processed by the webserver, you can only allocate more CPU for image processing by creating more webserver boxes. Why should you need another instance of Apache/nginx just to be able to process more images. But also, there are really good security reasons to not use Imagick in an environment of PHP that is invokable over the internet. The ImageMagick extension has dependencies on a large number of libraries. As software inevitably contains bugs, some of which could be exploitable, having the Imagick extension is a separate process reduces the likelihood that a hacker will be able to able to find and exploit one of those bugs. If the images are generated by a background worker process, and you then check that the output from Imagick is a valid image before serving it to a user, exploiting any bugs becomes much more difficult. This is noted in the Imagick readme: https://github.com/mkoppanen/imagick#security
See below: https://en.reddit.com/r/PHP/comments/5e3m5p/server_side_processing_of_images_cimage_and/daaw12i/
Cool reference bro :)
How does this compare to fabric?
Standard Taylor. @return mixed|static @return mixed @param mixed foo @param mixed bar
Is there really a reason for still using flush() on webscripts?
So I don't know anything about this, but I went through the linked examples and I don't see much wrong. Just someone who is frustrated and who cares about details. https://www.drupal.org/node/2290261#comment-9405131 &gt; Summarizing what happened in the issue and on IRC: I need to yell at people to get them to listen to me instead of believing whatever Symfony says. I don't want to yell at people. That hurts people and hurts me. I am, again, out. I thought I can work together with people to get criticals fixed, turns out I can't. Too bad. You'll need someone else to do critical hours. https://www.drupal.org/node/1964922#comment-9177957 &gt; This should not be a question. The routing system innards should have been documented before commit as the menu was. But it was not because noone knows not even those who forced this pile of crap upon us. https://www.drupal.org/node/1609760#comment-6196670 &gt; It will not be rolled back. #62 is a patch to review, it does not involve architecture. The personal parts I am not reacting to. And, the work I am grateful for. Really. https://www.drupal.org/node/2110615#comment-7965505 &gt; If you want a discussion then leave yourself out of it because as long as you are there, no discussion can happen as you are given (I just don't know by whom or how) powers to even overrule core committers so there's no point in having any discussion at all. . &gt; Comments made about the D8 menu/routing system, both directly and indirectly aimed at its primary maintainer, Larry Garfield (Crell) This is the second time I see the name of Larry Garfield around a top contributor driven out from a community. There was also Paul M. Jones https://groups.google.com/d/msg/php-fig/w38tCU4mdgU/ww0kKM0vAAAJ And this paragraph from the anonymous, unsigned document explaining the ban sounds really bureaucratic and ominous: &gt; After careful consideration of this incident, in combination with other reports that we have received regarding your interactions with other community members, the CWG has unanimously voted to recommend to the Drupal Association that you be banned from attending future DrupalCons, including associated code sprints. **This ban will remain in effect until the CWG is satisfied that you have successfully completed the Action Plan that was presented to you on February 4, 2015.** I don't know. At first sight it all seems quite fucky to me. Edit: Here are thoughts from chx himself: [A fundamental cultural shift in Drupal Or My farewell](https://www.reddit.com/r/drupal/comments/5e8dcd/a_fundamental_cultural_shift_in_drupal_or_my/)
&gt; We are now looking forward to Linus Torvalds to be shown the door from the Linux project. He has long steered it abusively and has even been listed on many mass media publications as a verbally insulting jerk. Well that escalated quickly.
&gt; I know the solution is setting error_reporting(0); in system/sturtup.php, but who does that? A production server should never display errors. @danielkerr is right.
So this would be highly dependend on the answer. Hard to think of a generic solution as it could be HTML, JSON, XML or whatever response type.
Normally in a production environment you should disable display_errors not error_reporting, and log them instead.
The issue is more that even in a non-production environment, your error should not be outputting a password to the browser.
Yup. The quote is from the reporter.
It is very interesting topic actually. The poor guy who reported this bogus issue is confusing `display_errors` with `error_reporting`. He can be excused for that though, because most of PHP folks are to share the same confusion. It is not only ignorance towards basic PHP settings though, but rather towards debugging in general and *the importance of the stack trace.* Every time such unsuspecting fellow sees a trivial stack trace it scares shit out of him.
That's just how stack traces work, what's the alternative?
I think so. I'ts all about reporting the progress server side. 
The alternative is not outputting stack traces...
So I never send it to output on a production development. 
Less magic in cryptography parameters is a good thing. OpenSSL is saner here.
You're citing things from two years ago. Did I time travel, or is something flying over my head here.
also thank mr skeltal for good bones and calcium
They sat on their feelings for two years before they ban him? That's... so implausible. 
&gt; time to learn about exception / error handlers in php. having top level try catch makes your code ugly. You're not responding to my statement, but instead nit-picking something irrelevant, so I'll assume we agree. &gt; still it should be environment-aware. On a dev server I prefer errors to be displayed on-screen, with a stack trace. First, if you have this feature as a *setting*, then you risk something flipping the setting to the wrong value in production (case in point, this thread). That's not smart. Second, in 2016, with AJAX responses, dynamic images, scripts, and so on, half the time you'll have to hunt for your stack trace somewhere in the browser dev console as a bunch of raw HTML. A modern dev experience has a dev dashboard to display such information, filter it and analyze it. You don't need your app to barf its guts in the HTTP response, thus also risk leaking crucial information to attackers in case of misconfiguration. 
As it turns out yes, but from the title I thought it was a bait and switcharoo. The silver lining is that maybe I'm not the worst dev in the world. 
I have many other failures in my life, so check back occasionally, and you might catch another one!
what about echo "some " . "text"; vs echo "some ", "text"; // should be faster since no concatenation necessary
&gt; I am not sure which particular statement you are aiming at, so I'll be grateful if you highlight it. That you shouldn't leave uncaught exceptions bubble up to the default handler. It's irrelevant whether it's with a handler, or a catch block. &gt; Right. So your error handler should be able to handle it too, when asked. That's the point - environment awareness. While hiding certain parts of the error message out of someone's paranoia is not the way to go. I don't know what "hiding" means to you, but errors don't belong in your *output*, in no circumstance. It was fun doing it this way 20 years ago when PHP was just a template engine for our personal "web page", but not anymore. Heck, even CLI apps have a separate stream for errors.
I'm trying my hardest to to interpret his comments as problematic. How in the hell can they ban someone to this extent and offer these comments as justification? At worst he made a few comments that aren't stripped of all emotion and character. What in the hell are these people's social upbringing if these comments are stepping over some line? I don't mean that as an attack, but I really need to question their perspective and experience on this. Now, I want to be clear here: I do agree that when a person has an inordinately detrimental effect on a project action needs to be taken, up to and including a project-wide ban for **serious and exceptional** cases. But if the cited comments are meant to be an example of the type of behavior that the "CWG" will ban you for, they can go fuck themselves. Edit: So they also reference Douglas Crockford's removal as a keynote speaker from Nodevember in a way to defend their decision: &gt; The matter is far from black and white, but seems to follow a trend of inclusivity and no-abuse. Earlier this year the Nodevember conference banned JavaScript influencer Douglas Crockford from their event. Adam Morgan has written a nice piece to show you how stupid his removal was: [In Defense of Douglas Crockford](http://atom-morgan.github.io/in-defense-of-douglas-crockford) Nodevember gets some private complaints. Nodevember removes Douglas Crockford. The community is confused by this and asks why he was removed. Nodevember, to my knowledge, doesn't provide any actual answers. Members of the community are left to play detective and follow the hurt feelings back to the source... Apparently the way Douglas Crockford used the phrase "promiscuous" and "committed" is slut shaming: [tweet1](https://twitter.com/nebrius/status/697491096926945281)|[tweet2](https://twitter.com/ag_dubs/status/666026590774673408). I can only imagine folks like that would be cheering me on in the background as I set my NIC to promiscuous mode and bask in the empowerment it gives me. We would band together when I'm slut shamed by TCP and demand industry wide adaptation of UDP and it's non-committed nature. The "CWG" references that event as a precedent for Karoly Négyesi's removal from the Drupal community. Further discussion found [here](https://www.reddit.com/r/javascript/comments/50u77r/douglas_crockford_removed_as_a_keynote_speaker_at/)
I would say otherwise. &gt; Error No: ' in Doesn't look like a standard PHP error message (which is "PHP Fatal error: Uncaught exception"), so it's probably output from the handler.
The majority of PHP+MySQL powered websites likely are not set up to restrict connections to only the local machine.
Yes. But I'll be honest, I've had to do debugging on production in the past, for a project that didn't have any logging.
&gt; Over-stepping your authority and making threats of banning/unpublishing actions against other contributors: https://www.drupal.org/node/2391219 There's literally NOTHING I can interpret like so in his 6 or so comments in that thread. Can anybody help? I went through every issue linked and wasn't able to find anything toxic or offensive.
&gt; I feel like I should clarify that the framework or the request handlers you add to it are not the CQRS application. Here are the docs: https://icehawk.github.io/docs.html I can't identify where is the "CQRS application" in this.
Very well thought out and useful... Thanks!
Sure. But we don't live in an ideal world where everyone does everything properly, for a variety of reasons. They've got the opportunity to handle this more safely for those people, and they've chosen not to. So when this happens, and users are seeing the DB password, I think it's fair to attribute blame both to the sysadmin (if they even exist) and the devs. To me it seems pretty likely that many users of this software doesn't even have a sysadmin.
So if you were an oauth provider, you'd be happy for all users of your site to be typing their username+password (for your site) into every other site using oauth with you? If so, that's extremely negligent.
Edit: my assumptions in this post are incorrect. Here it goes.... Instead of: ``` DB\MySQLi-&gt;__construct( 'localhost', 'opencart', 'pass123', 'opencart', '3306' ); ``` Do: ``` DB\MySQLi-&gt;__construct( getenv('db.host'), getenv('db.database'), getenv('db.pass'), getenv('db.user'), getenv('db.port') ); ``` And you're golden. You can use something like https://github.com/vlucas/phpdotenv/blob/master/README.md for that. (On Mobile, so sorry for ugly formatting) 
The thing I dislike about the call_user_func version is that it is impossible for an ide to assist with that, leading to typo bugs. Also I'd love to not use a string for this call, but as far as I'm aware there is no variable type that can reference a class in PHP, is there? Edit: I'm definitely going to look into just migrating the project to PHP7. That is probably the correct path anyway. Edit2: how have I never used https://3v4l.org/ before? This is neat.
I doubt you can support that this: static::$bar::baz(); ... is syntactically more clean, and *more* flexible than this: $this-&gt;bar-&gt;baz(); You're not looking for help, so I won't go further, but consider that people who are suspicious of statics do it out of experience, including me. We've gone through our early years of programming by abusing statics and thinking it brings simplicity, only to suffer in the end, and learn from it. "Flexible" is not a word I'd use for anything static. You're essentially poorly recreating aspects of OOP from static classes. I'd be interested to hear what exactly flexibility you seek that an object can't give you, but a static can. As for PHP7, you'd be misled to believe it condones your particular chain of static calls. It has a new more generic evaluation of expressions that allow chaining of resolution operators of any kind, after any kind of expression. 
Well, there is none. :) You need to write the application yourself, that's why it is a framework, not an application. The responsibility of IceHawk ends on calling the request handler that was configured in the routing. From there on you're on your own. My example above: &gt;The request handler that was hit by the current request should then build the command that is passed into the business application (to a command bus or command handler). Those commands were not responded by the application, whether they were executed asynchronously or synchronously. was a try to explain that the response mentioned in the comment of the code samples (your first comment) has nothing to do with the result of command execution, but with result of HTTP request handling. I am currently writing a post for the website that proposes what to do next when the request handler was called. There I'll discuss the usage of commands and queries in the context of a "real-world" application.
Errors are generally put in logs, too. So, now you have logs that contain your login information. Genius. What if you enable errors for your site to see a basic issue and it starts outputting your login information? Most sites do not have 'maintenance mode', and PHP certainly doesn't have that built in. No ones mentioning the fact that the software previously didn't output this information, as jamesallsup in the github issue stated. I think this thread is one of the examples /r/lolphp would find funny.
&gt; &gt; I can't identify where is the "CQRS application" in this. &gt; Well, there is none. :) So your CQRS framework has nothing about CQRS in it? Can I remind you of your framework's slogan: &gt; There is no need to "bring" CQRS to the web, it is already there - we just call it HTTP. Now that we covered in previous comments that HTTP is *decidedly* not CQRS, and you saying there's nothing about CQRS in this framework, maybe you can realize that the acronym "CQRS" has *zero reasons* to appear anywhere on your site? Don't use buzzwords you don't understand. You'll attract people like me who criticize you, and people who might initially be happy because they get to use "CQRS", but once they learn better they'll feel cheated by your false promises. What you have is simply another web framework, with a very conventional structure, and there's nothing I see that says otherwise.
After switching everything to (the relatively well working) PSR-7 requests/responses, this feels like 10 steps backwards. No, thanks, I'll just keep my tiny layer converting from PHP superglobals to PSR-7 requests.
I recently submitted a link to a library I authored. I expect to have a second release with a major feature a couple weeks from now. Would it be considered spammy to also post that when it's ready? I don't want to become an annoying self promoter. On the other hand, I doubt anyone would ever hear about the new feature if I don't post it myself.
What's fabric?
Can you at least put the contents of the file on pastebin so it's actually readable?
Yeah, so now I have to write another tiny layer to do the same thing, with the same performance impact and annoyances, and none of the benefits of this package. I do need and require interop: it's what allows me to trash an entire HTTP routing framework and replace it with the next/newer one, if that comes up (Yes, I do decouple domain logic from frameworks, and yes, this happens a lot).
Better than the creepy starbucks cups, at least: https://usatftw.files.wordpress.com/2016/11/starbucks_green_cup1.jpg?w=1000&amp;h=572
&gt; can only access the database from a local machine anyways Then why even have authentication if you're relying on that...
Isn't this kind of pointless if these classes don't implement an interface? How will you swap out these objects for another implementation?
Surely if you are running OpenCart, you are paying for your own hosting in a non-shared environment
Yes. Surely.
Never followed Python ecosystem so can't tell for sure. It's PHP, so it's probably better for PHP devs...
He's right and he's wrong. Yes, that's what you should do in production. That doesn't remotely mean a developer of open source software should just assume everyone's done that. There's also the fact that not every OpenCart server is in production, and that doesn't mean there are servers that want to log passwords.
Am I the only one who is concerned about how this post is framed? I'm not disagreeing with him being removed if the community has judged him to be toxic, but is the right approach to basically make a public post airing the grievances and providing links to things people found disagreeable? I understand this is done as a warning to other communities about this particular person, but this seems a little too "burn it to the ground and salt the earth" for my tastes in regards to a persons professional reputation. 
drupal.sh is just someones blog. Chx chose to make this public himself.
&gt; I can also say that chx has been a genuinely kind and caring person, mentoring many people in the Drupal community and helping them understand the complexities of Drupal's internals. Apparently not if they are removing and issuing permanent bans. And as mentioned below, these are issues highlighted that are years apart. Has he truly pissed off people that hold years of grudges and dont know how to do the same thing the working group advised him to do, learn to show more empathy and compassion?
In case you forget it? /s
Ok, that makes more sense than what I thought. Thanks for clearing that up!
That cup reminds me of the hunter in the cabin story... 😦
&gt; trying to line their own pockets at the project's expense Well as another core maintainer, It would seem to me there is definitely some of this going around. Everyone has an agenda these days. 
Are they still expecting performance improvements or have they shifted all attention to improving the language and other things?
Are you trying to `LIMIT` the query? You might want to have a limit and offset in the query with a page number and items per page value passed with your `search` parameter.
Ahh I see. so Drupal.sh is just a random ass blog? My bad then, it kinda comes off as an announcement on an official looking site with an official looking url. And yea, I'd seen the drive documents, seemed weird that they only half of the conversation was there though.
you want to do if($_GET['submitBtn'] &amp;&amp; !empty($searchTerm)) 
Much as I'd like to believe it, the home page http://telegra.ph/ apparently lets you enter any text, title, and author you want. /me begins to prepare a series of "as written by" posts
Why wouldn't they be? That is the default behavior after all. You'd have to actively change it.
That is missing the point that displaying the database password on error is needless and stupid. It's such a simple fix that it's ridiculous to even argue.
The problem is two-fold. 1. You don't want to show system error messages to the public in production, and 2. you don't want to store passwords in your log files. So the fix in this case is to **not** display the error message, *but also* to change the actual error message to not include the password. Having a log of "could not to connect to database: credentials invalid" or something is completely sufficient to figuring out the problem. You could also use a debugging flag to then log the raw query, but you shouldn't do that in a production environment.
There is no "why".
It's not OpenCart's fault. That's just the standard PHP error reporting. It logs a trace-back of the exception so you can see what caused the problem, and if the functions happen to include the database password, then it is possible passwords would be included in the error logs. I'm not sure if there's an easy solution, other than protect access to your logs with the same level of security as your PHP files that contain the original passwords. You could also do special error handling of the database connect call to prevent it from throwing regular errors.
Great job man! You're right, working with graphs in PHP is a pain. Your code provides much needed order to the chaos. Thanks for sharing :)
&gt; Yeah, so now I have to write another tiny layer to do the same thing, with the same performance impact and annoyances, and none of the benefits of this package. You don't have to do anything. The extension wasn't written personally for you.
Not every situation hides the database behind an internal firewall. For example, Heroku databases are public-facing. Or, perhaps your host has a PHPMyAdmin interface. It is absolutely not necessary for this problem to exist. It just shows an incredible lack of security concern and inexperience.
I find it odd that creating a new supposedly blank object loads it with global state: $foo = new ServerRequest(); Ideally this would be an explicit factory method you opt into: $foo = ServerRequest::fromGlobals(); Likewise, the ServerResponse is just an inch from being far more usable if it accepts as input the stream to write to (by default STDOUT, but not necessarily). Also I can't find if ServerResponse has a method for writing out a body by streaming content (not from a file specifically). This means anything that's generated, and big enough, should be written out to a temp file before it can be sent, which is quite inefficient.
Glad to be entertaining :-P
post_max_size refers to any content sent through POST and if it contains plain variables (which are always in memory) it could bust the memory limit. Were you thinking of upload_max_filesize maybe?
You put an /s but somewhere out there is some esoteric system that parses the error log in order to implement a forgot password feature, print it on butterfly wings sent to the user.
Passwords shouldn't be logged, *period*. Even with display_errors off.
Same here, but only as presentation to the government. It wouldn't be hard to export to this format. I'm wondering if internally if my system has to store in double entry format. 
Apart from all of the other things mentioned, defence in depth.
What does going GA mean?
Catch the exception with the password in, throw another exception without the password in. You know, handle the exception that you don't want logged as an unhandled exception. 
Probably I'm from different country, but if your app handles money and have to present once in a while something to government... how do you want to export it if your data will be lost &amp; impossible to retrieve from backup?
Come on, "this comment" doesn't link *anything* at all. This way I can write something about you as well. Would you still call it a "context provided"?
Or catching the exception close to where it happens and throwing a different exception. 
Normally you want to log errors and display a message to user that something exploded, same way like when user inputs incorrect login name / password.
Brendan Eich, Douglas Crockford and many others would like a word with you.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Have you never had issues occur only in production, not reproducible in staging/test/dev? Stack traces are pretty much necessary.
watch my videos and training
Great to hear! Have been running the different RC's for a bit now and for me this is the moment to update my projects. Congrats to all involved, good work!
Wait...what...?! What year is this?
That's not a bug, it's a feature
Hmm.. no I wasn't. If someone sends me that much POST data I don't want it; if it's a file it doesn't go into memory.
You can't be serious
Not working: you still get `$e-&gt;getPrevious()`
What? You mean you **didn't** just write [this blog post](http://telegra.ph/Telegraph-is-the-most-reliable-source-11-23) saying that it's the most reliable source of blog posts?
Could you explain that? Are you saying that somewhere else the application could be programmed to go out of its way to seek out the password that is in an exception trace that got handled?
Serious question: what are you trying to achieve with these videos?
On pretty much every subreddit the sub name links to the sub and the reddit alien links to the reddit homepage. Here, the sub name - "PHP" - links to the homepage. 
It looks cool, but I'm slightly unsure of why tab completion wasn't working for the author: php &gt; $foo = new Date date date_date_set date_interval_create_from_date_string date_parse_from_format date_timestamp_get DateTime date_add date_default_timezone_get date_interval_format date_sub date_timestamp_set DateTimeImmutable date_create date_default_timezone_set date_isodate_set date_sun_info date_timezone_get DateTimeInterface date_create_from_format date_diff date_modify date_sunrise date_timezone_set DateTimeZone date_create_immutable date_format date_offset_get date_sunset DateInterval date_create_immutable_from_format date_get_last_errors date_parse date_time_set DatePeriod Typing DateT[tab] is enough to get DateTime completed for you, pressing tab again gives: php &gt; $foo = new \DateTime DateTime DateTimeImmutable DateTimeInterface DateTimeZone But yeah, there's a few issues with php -a (such as using home/end and having to var_dump/echo things), and this project does look like it solves them nicely.
I don't think this is specific to OpenCart. Any old CMS that logs connection errors and/or displays them on the browser in debug/development will have this "bug". Has anyone tried this with Wordpress, Joomla, SugarCRM, Magento, Drupal? Maybe not Wordpress as it already gets so much attention for poor security by the media, but some of these other CMSes might well be having this similar bug.
Post author here :) You're absolutely right, no idea why this wasn't working for me at the time I was writing that. However it still doesn't work for object methods in `php -a`, but it works fine for psysh.
This still doesn't fix the issue of a password being dumped to a text file. 
You don't need RES; disabling subreddit styles is available in the normal Reddit preferences. Thank goodness.
Visual Studio doesn't have bright cyan operators. Also you should really learn how to import and export settings.
Yes, anything using `debug_backtrace()` anywhere in the pipe that goes from config to actual DB can do that. Same applies also to other languages, btw.
I didn't make it, I only extracted it from Rider. &gt; Also you should really learn how to import and export settings. Is it possible to export only one specific color theme from IntelliJ? As far as I can tell it's only possible to export all or nothing. That's why I chose to describe this option.
Been using PsySH quite a bit lately, just wondered if anyone had a solution to a couple of queries I had: 1. I usually expect `Ctrl-w` to delete to the beginning of the current word in Readline-based stuff, but in PsySH it deletes to the beginning of the line (i.e. it does exactly the same as `Ctrl-u`). Anyone know of a way to emulate normal `Ctrl-w` behaviour? 2. Often I don't know the full namespace of a class I want to instantiate, so I have to do `ls -k --grep ClassName -i`, then highlight the fully-namespaced class name using my mouse and copy and paste it into the terminal. Is there a less clunky way of doing it?
Wrong, /r/php in its default style has php logo which link to reddit frontpage. Log out and you will see, maybe you messed up your custom theme.
&gt; I didn't make it You still posted it. That doesn't exempt it from criticism.
Yeah, I could write a book about all the crummy crap that was done...and lies used to justify things (if even bothering at all). I just like to get shit done and this gets in the way. In the middle of a fine tech discussion, an SJW will just come along and derail the whole thing because they do not like I to be capital as it might offend those who identify as purple penguins. Useless. Before Drupal I was the most optimistic person you could ever meet. That changed for a reason. I directly interacted with these people for years. Not a boogeyman, very real. The most hypocritical people you will ever meet. EDIT: also lmao already has ing in it. ;)
good info. A good debugger will save hours of coding debug statements and logger functions. Some more advice: * If you're running PHP-FPM, you need to switch the XDebug port from 9000 to something else, like 9001. This is because PHP-FPM uses port 9000 . Be sure to change it in your php.ini and also in PHPStorm. * When debugging, XDebug is the client, and PHPStorm is the server . PHPStorm is literally opening a port and listening on it
Create ~/.editrc if not already there, and add the following line: bind "^W" ed-delete-prev-word 
Thanks very much, that works :)
HA!
 &gt; Get ready for frequent wrap/unwrap action. Yeah, I became painfully aware of this not too long after I did some experiments. Maybe one day!
Yea, I just gave up on trying to use image based headers in most subreddits. /r/GlobalOffensive does a pretty good job though: http://i.imgur.com/9NKAPql.png The highlighted element links to /r/GlobalOffensive while the small Snoo to the left links to Reddit's front page.
I'd say PHP only because Ruby is harder, some things might look like black magic and make no sense at all if you are a beginner. I'd suggest Java, it's more verbose, but it's good for beginners to know exactly what they are doing
Yep. I have no idea what really happened there, I don't even use Drupal, but from reading that article without any additional details, it seems like a comical level of overreaction.
https://github.com/geekish/crap From README.md: &gt; I'm lazy. I tried to create global shell aliases for packages that I used often. It worked, but if I typed out the full package name, I would get monolog/monolog/monolog/monolog. I also tried to write a Composer plugin, but there was no way to override the incoming package argument. So, I wrote crap. I've been hoping that someone would write something like this for a while, but last week I finally decided to throw something together. If you're lazy like me, and typing `crap require package` sounds better than `composer require package/package:^1.0`, please try it. :)
We're not a PR sub.
Hell, less than a week ago he was [writing instructions in notepad and highlighting them](https://www.youtube.com/watch?v=TlXlqf3dbWo). Now he's using a laptop microphone which has the sound priority of `case fan &gt; crappy laptop keyboard &gt; guy in background &gt; speaker`, working with Dream Weaver to produce table-based layouts, and has toolbar laden FireFox to boot. I'd wager `php Training Part III` he'll jump to using Sublime Text 2, slap a transparent background on **HD TECHNOLOGY**, and somehow be running PHP 6. 
Yes that one is good too! I usually try to use that.
PsySH is amazing. I drop it in almost every new php project I start. Makes my life so much easier.
I actually don't like this solution very much unless your passwords are completely random strings. You could have the password show up in a non-password context and it would be obfuscated, which could potentially reveal the password. For example, if I know I can enter an invalid string into some input field and it will cause an exception that will be logged, I could enter a long string with the 10,000 most common passwords, and then see if any of them were obfuscated. Somewhat related - was doing some security analysis at a place where they output to their logs the username / password entered anytime a login was incorrect. They didn't see the issue with this until I showed them that I could search the logs for lines that contained "invalid login" and "gamil.com" and get the login for anyone who typoed their email address. I could search for any invalid logins with no capital letter and could often guess the password since we require at least one capital letter (they try "yankee", it fails, so I try "Yankee1" and it works).
Wow I can't believe (or maybe I can) they're using shell_exec() on api.wordpress.com
One thing that still sucks with PHP REPLs is the inability to reload new code without restarting the REPL. If you loaded a class, tried your methods, realized something is off and updated your source code, you can't just reload things because the class or function is already defined and cannot be redefined so you'll get an error. That's a PHP thing, not a Psysh thing, but it would help me to actually develop "from" the REPL.
So, they thought it was a good idea to allow the request to specify the authentication algorithm? Seriously, this is why you don't use WordPress. They have no clue what they're doing.
`shell_exec` isn't inherently unsafe...but the fact that they didn't escape anything is nutso.
I found it easy to follow. One improvement suggestion: In the CURL examples I would distinguish between CURL parameters, authorization and the actual endpoint address and instructions. The endpoint+instruction is the most important part but it's hidden at the end of the examples, sometimes even behind a scrollbar.
Nope, it's part of RES.
Is this bizarro world? You just repeated exactly what I said. The sub name is PHP and the PHP logo links to the reddit homepage, not the subreddit page. 
OpenCart isn't logging the password, they're simply including the traceback, which is typical for a lot of PHP code and frameworks since it's useful for debugging. This isn't unique to OpenCart. Logs often contain sensitive information, and the database password isn't difficult to get for anyone who has access to the server. So for most servers this isn't really a security concern. But if it is for your site, you should turn off the traceback in the logging information. 
I'd love to get XDebug set up at work, but our PHP is being served from a docker container within a VM and I don't know enough about PHPStorm, VirtualBox, sockets and other wizardry to figure it out :(
No, thats just ONE reason not to use wordpress. Personally, I like that functions.php ends up being such a clusterfuck that I can charge $90 per hour to fix your broken shit. Plus, make child themes people.
I literally just started a subscription a 3 or 4 days ago. Oh well, it's definitely worth it.
Wordpress: Please die in a fire!
If I read the history on this correctly, a lot of the complaint is the need to support ancient versions of PHP. "Working" is one thing, but is there really a reason you cannot implement a security feature with that feature only active on somewhat recent versions of PHP? I'm having a hard time seeing why some if version &gt; 5.x checksignature() Type check would have any downsides for anyone.
Yes but the framework does have the ability to not log the full stack trace in sensitive circumstances, there are many ways to go about this. Likewise, logs are often kept in a different location to the web directory and it's not unlikely that one could get access to the logs without having access to the web root. Poorly configured shared hosting for example. Regardless I don't feel this is a crazy critical bug, because the effects can be mitigated by a correctly configured server. But ultimately OpenCart knows it's target market, and has the tools to make this safer, so I feel they should.
[No, there isn't.](http://www.openwall.com/lists/oss-security/2016/11/21/3)
Why would this break BC? You just follow existing procedure for update to the first version with signature checking and only then start checking the signature for new updates.
That looks like a nightmare to maintain.
Great article. I'm also interested in a remote debugging guide in the future. :)
Well any signature system is going to mean effort of signing releases, but beyond that?