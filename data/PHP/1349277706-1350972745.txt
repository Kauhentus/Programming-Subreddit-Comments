It's not a good idea to create random primary keys for INNODB, especially if you suspect that you'll be storing millions of rows.
I didnt see any reasons why this framework is better than phpunit, did I miss something?
Lol true, that would be hard to explain. 
[Johnny Mnemonic](http://www.imdb.com/title/tt0113481/)
Wait for another sale. It was on sale just a few weeks ago for $50. If you're a student, they also just introduced a $30 student license. I know they just introduced it because I'm a student and when I bought it during the 50% off sale they didn't have the student license option XD
You're one of the most active and knowledgeable members of this subreddit, and I actually value you're opinion on most things. But it's a shame, because the way you go about it comes off as condescending and argumentative. I'm always torn between upvoting you for information or downvoting you for your tone. Just look through your own comment history, and how you reply to noobs and others (like bopp here) who are just trying to contribute to the community. Discussion in the comments is great, but arguing is just unproductive. Either way, it was immature to insult you, so I apologize for that.
I think this is the perfect time to share [ApiGen](http://apigen.org/). When phpDoc failed to update to support namespaces, I switched to ApiGen and never looked back. [The interface](http://api.nellafw.org/) it generates made me fall in love with it.
It wasn't intended to be condescending and argumentative. I was merely pointing out that since he brought his private thoughts into a public sphere, we're obviously going to discuss it. He didn't want that, but if he didn't, he shouldn't have brought it into that sphere to begin with. It's the same thing with pretty much anything. Take religion, as an example.. If you don't want to talk about it, then don't mention it in the first place. Now, since he did make arguments against using PHP for templating, obviously those arguments deserve to be met. Rather than reading what was written, he instead interpreted it as something I had never said, and was thus offended. 
That works well for iterative arrays - what if you were using an associative array. Example: list of database entries where they key is the PK from the database. Also Smarty implements the follow 1. **first** True if first iteration of loop 2. **last** True if last iteration of loop 3. **index** 0 based count of loop iteration 4. **iteration** 1 based count of loop iteration I'm not trying to be difficult - these are just some of the things I think about when making the switch to php templates.
Then you don't know many php developers.
I rarely remember argument orders for anything. It's not important, as everyone either has an IDE that takes care of it or just hits http://php.net/whatever and its answered.
Why spend all that time building something that will only ever work with one framework? A few Fuel, Laravel and CI developers are working on a system that will work with any PHP code thats happy to accept PSR-1: https://github.com/adrianmacneil/tala-payments
phpDoc supports Namespaces.
Except it isn't a dot com, it's a dot cm - another confusing problem with it
Maybe flashcards? I've never used it for programming, but I use www.memrise.com for language vocabulary, it might work!
The crusty 90s junk keeps it off the radar of those github-wielding, nosql-using ruby hippies! /s
I got it for $50! Every so often they have a half-off sale. 
I was looking through the code on [GitHub](https://github.com/bobdenotter/bolt/tree/master/app) and I was unimpressed on the "classes". They more so look like dumps of functions inside of "class".
Use an IDE with intellisense. I suggest PHPStorm over Komodo, Eclipse, Netbeans, Aptana, vi (I've used all of these except Netbeans). This will give you function names and arguments as well as name completion of both native functions and defined classes, methods and properties.
You're right, I didn't even notice.
Requirements are on 'Install' page. PHP &gt;= 5.3
You can still ftp a file to a site and hit refresh. Premise of blog post invalid.
Because who does not run their web servers on their phones?
I still upload a file to ftp and refresh. Even if you use something like Wordpress, you upload the plugin and hit refresh. What is this blog post talking about?
Recently I made a simple website for a client where their employees fill out reports every day and edit them if necessary. It also had a simple administrator page for viewing reports, editing users and sending notifications to user's pages. I finished the job in a week. I show it to my friend and he yelled at me for not using a framework or OOP. Why the hell do I have to code object-oriented. It was a simple job, nothing complex. It had only 6 php files and a database consist of 2 tables.
There's a place for everything. I've come across way too many situations in this very subreddit where a question like "how do I make a page with a form" was answered with "use codeigniter/symfony/fuelphp and OOP bla bla bla", and anyone who said otherwise was mocked and downvoted. Utter nonsense.
I was sort of poking fun at the way Wordpress uses templates, where a lot of stuff is actually named "the_functionname()". &gt; Bolt does seem simple but I personally prefer Concrete5 We're very clear about _not_ wanting to create a CMS that's the best solution for everything. What i'm trying to say, is that Bolt is not meant to replace CMS'es like Drupal or Expression Engine or Concrete, but rather as a supplement for sites where CMS'es like those might be overkill.
It's (sadly) not an established tool at my work ... but yes if they were reading news about php, they would know it.
It's an established tool in the PHP community. I don't know how you could even interpret that as saying that it's something which exists in every workplace. 
If I understand you correctly, this is the central point: &gt; Using PHP as your templating language amounts to a bet that the code you're writing will only ever be touched by people who know exactly what they're doing. Which I've debunked time and time again. If you make good default templates to *start*, then people will use good practice. That doesn't mean you need another whole *language* to do it, just be clean and consistent in the first place. Smarty and Twig are definitely no easier to learn than PHP - at least, from all of the designers I've worked with over my career. Maybe I'm just lucky.
Cool. I already thought about adding prefixes to service providers so that service definitions can be lazy loaded, too. But under this circumstances there is no need for it.
A pimple is small and contains a bunch of stuff; Pimple is small and is a nice little container.
and they usually are picked on, burst, and make a messâ€”and can leave scarring as a result.
I had never heard of Sitecake before. Looks like a nice little tool, so I'll have to check it out, one of these days. :-)
Thanks for the reply. No errors in the log file.
No problem, also just out of curiosity why aren't you using IIS7 on Windows? Apache is dirt slow on windows and is crushed by IIS7. Also if you are going to be staying on Windows try out Zend Server (they have a [free version](http://www.zend.com/en/products/server-ce/) as well) we use this at work and I find it to just amazing and I highly recommend it. It plugs right into IIS7 as well and you can be up and running fairly quickly! Also here is a fun read of someone testing Apache on Windows vs IIS7: [http://groups.drupal.org/node/234373](http://groups.drupal.org/node/234373)
Actually it does.
Very good comment. But I disabled xdebug for the actual run. I only increased the max nesting level in order to be able to test the script without disabling xdebug.
Does apache have anything in its error log at all? This is very odd if you have all of the configs setup properly.
i started to learn Jan 2012, now i'm working as a php programmer. Started from no architecture 1 page script to a DIY mvc framework, and now im started to lean against frameworks. I love PHP.
yeah, what url? if you are using vhosts, that's a whole config file in itself. can you load a test document from C:\apache\htdocs\index.php ?
And what do you have for your DocumentRoot in httpd.conf?
I have apache_2.2.9-win32-x86-openssl-0.9.8h-r2 of apache and php-5.4.7-Win32-VC9-x86 of PHP if this helps.
I can load c:\apache\htdocs\index.HTML and any html file i try will load but any .php will not load.
Have you tried using [XAMPP] (http://sourceforge.net/projects/xampp/files/)? That might make your life easier.
Couldn't agree more. Think of projects and then break them down into smaller pieces, you can then research how to tackle each smaller piece and that is how you start learning. You have no idea how many projects I have built that didn't go anywhere after I finished building them, but without them I wouldn't know as much as I do now. And once you get more familiar with PHP then start looking into OOP, it's the way to go for sure, but you need to know the basics first so jumping right into it may not help.
&gt; Also, when learning take the time to read up on proper OOP design I've been contemplating this recently. I'm very unsatisfied with how I approach problems, and my ability to actually design a solution that I feel calls for OOP, I also seem to completely miss major design decisions, or make things much more complicated than they necessarily need to be. What's the best way to learn "proper OOP design"?
After you install it, it SHOULD just work. Although you may need to install it as an admin user. Some other things you might want to check first though: Acess Logs: When you go to test.php, does the request appear in either access or error logs? If not, maybe IIS is running and intercepting the request. Or your apache process might not have permissions to write logs, which you will want to fix first. Add some html to test.php. This will let you see if apache is serving the page properly. If you see the html text but not the php text that just means something is wrong with how you installed php but apache is fine. You didn't really provide a lot of information so its a bit difficult to narrow down your issue.
Proper OOP design comes with many failed attempts. At least that was how I achieved a better understanding of OOP. I found that instead of attacking OOP generically, I went to learn design patterns. These really helped in providing context for OOP. As an example, I began to learn DDD (Domain Driven Design) for the first time a couple weeks ago. Still getting a grip on it, but it helped me to grasp why OOP works in that pattern. Hope this helps.
No IIS running...however I am not sure how to change the permissions on apache...I have a feeling we found it...
PHP-GTK! Just wanted to say it. It would be nice to reuse PHP code on mobile. This could be big, but hurry it up already.
I started learning 10 years ago. I still have that feeling that I know nothing.
Not to mention that symfony2 still comes with a large overhead. Silex also makes it easier to support multi domain projects where the code base doesn't change (too much) and you just have different designs with each domain. All I need to do with Silex is define domain specific settings in a provider and load them based on hostname. Twig namespaces are especially great for that. Example: index.php foo.com $app-&gt;register(new Promo\Provider\FooConfigProvider()); bar.com $app-&gt;register(new Promo\Provider\BarConfigProvider()); $app-&gt;mount('/', new Route\IndexControllerProvider()); $app-&gt;mount('/sub', new Route\SubControllerProvider()); Promo\Provider\FooConfigProvider $app-&gt;extend('twig.loader.filesystem', function($loader, $app) { $loader-&gt;addPath($app['twig.path'] . '/promo/foo', 'promo'); return $loader; }); Promo\Provider\BarConfigProvider $app-&gt;extend('twig.loader.filesystem', function($loader, $app) { $loader-&gt;addPath($app['twig.path'] . '/promo/bar', 'promo'); return $loader; });
Immensely. I'll have to take a further look at it. I've been focusing on it, but I keep feeling like I'm failing the concept.. just generally suffering from poor design.
Right now I don't have a lot of spare time, but I do have spare money. I'd like to try leveraging my more plentiful resource (I've never hired a freelancer/contractor before). If it doesn't workout I will just do it myself.
I've migrated all my servers to 64-bit only because of the year 2038 bug (all *Nix and certain programs under Windows are affected by this). Yes, there's only one client which webapp encountered this problem, but in my opinion it's worth the switch now. 64-bit php isn't affected by this bug.
Why? Is SQL suitable for a majority of business logic to be? In our case, SQL is acting as the app, because so much logic is in it. It's suitability as a language is mostly why I'm against it. If you believe in MVC for any reason, you'll also object to the M and the C being joined together. 
I'm not saying you're wrong, I'm saying you need a better reason than it's against a strict MVC architecture. It sounds like the business is fairly concrete on this. Keep in mind this will add a second architecture (one with SQL intermixed with PHP) in addition to the one they currently have; you need to overcome that as well. 
Is it for college or something else (high school maybe?) 
I'm taking an introductory PHP class at my local college, currently. 3 hours a week for class and aim to be reading, and "playing" for another 8 or more over the rest of the week, depending on time. I have had some experience in the past, but never too deeply. (installation/configuration and deploying php applications built by team members, but never an app I've actively participated in programming, or otherwise. For the class, we're using "[Murach's PHP &amp; MySQL](http://www.murach.com/books/phps/index.htm)" for our instruction, etc. Our Instructor believes (opinion) this to be "the least *lazy* example of php design" in all of the text books he's reviewed. I didn't fully understand what he meant by that, until I started doing the assignments, where I've found/run into issues with uninitialized variables, which in turn causes errors in display in some cases. That being said, the version of xampp the author recommends for use is 1.7.2 which comes w/ PHP 5.3.0. I've installed xampp 1.8.0 (at the suggestion of the instructor) which has PHP 5.4.4 and found the above mentioned issues. I have not tried the applications/examples, code whatever, in another version of PHP as of this point. I realize/imagine the initialization issue would likely not be resolved in a different PHP version... Uninitialized vars are still uninitialized after all, right? But, I digress. The book is descriptive, informative and so far, useful for a relative PHP Noob. Aside from that, I have some Lynda.com videos/docs, and I have a copy of SAMS Teach Yourself PHP4 in 24 Hours (bought it years ago, never really touched it except for basic reference) I think I'm kinda doing things "backwards" as it were with programming, since I'm starting w/ PHP, but it seems "easier" for some reason, than C, C++, C#... or Java (which I tried years ago, and still need to take to complete my program) Either way, I love it, I'm learning, moving forward with my career choices, and having a blast getting lost in a sea of variables, and functions etc. **tl;dr taking course in college, love it; averaging ~10+ hours a week in class, and personal.**
That's pretty much standard practice at larger companies. The whole job of a DBA is to make sure both Users and Developers don't mess up their finely-tuned systems with bad queries and junk data. To that end, stored procedures are a very common tool, you're simply not going to change their minds on this matter. Learn to work within the system - you might actually start to like it; an ORM is a poor replacement for a good DBA.
Having business logic in the stored procedures is very wrong. * It's hard to test. Both with manual testing and automated unit testing. * It's hard to version. Yes, you should be using database migrations, but that wouldn't stop a DBA from just updating the stored proc on their own without you knowing. * SQL is not a great language for writing business code in. It's meant for handling data, that's its domain. More general languages (PHP, C, Ruby, Java, etc) are much, much better for writing business logic in. * It's easier to scale out your application than your database. Need to grab a bunch of data back from the database and break it up into smaller sets that a queue can handle? No problem for your PHP app, good luck with that in SQL. Stored procs are great for simple, small actions (like maintaining timestamps, or the case of a field in a table) but never should you write complex business logic in them. Our giant Postgres database where I work has several hundred large stored procedures and they are a nightmare to deal with.
Do you work for my company? How I've dealt with it is, for simple things where it doesn't matter, just go with it. For things where it does matter, get the higher ups involved. If you don't have the support of management, however, you're screwed. But I just point out, reasonably, what I need and what I'm getting and how that's affecting my work, and have them back me up. Case in point, a stored proc makes my life much harder beause it means rather than popping in will_paginate and meta_search to handle filtering, sorting and paginating, I now have to implement all of that from scratch. This means my work takes longer and requires more testing, which directly affects the companies bottom line, all because the DBA refuses to give me permission to actually query a damn table. 
Thanks! Sure the development will continue. If you have ideas, new modules implemented, or just will to create them - please, contribute or ask me how to do that. Codeception is open for any patches, and yep, many developers already send them. 
i am learning by getting myself into situations where i have to use it and have to produce. make one or two little test apps to get your feet wet and then start taking on projects, jobs, clients, etc. that will force the issue for you. obviously don't take on the new Facebook or something that is way too large of a scale for you to do anything with, but also don't just keep playing in the shallow end.
I am a SQL Server DBA and have been for 10+ years. I thought I'd chime in to try to clear up a few things in regards to your post. In regards to SQL Server, the primary goal is to have as much of the database code cached as possible. There are 3 ways of doing this 1) Create a stored procedure, 2) create a properly parameterized query using sp_executesql, 3) use some external caching tool like SOLR which can cache results outside of SQL Server and only go to SQL Server when necessary. When you have a very high volume transactional database server, if the code being executed is not cached as optimally as possible, you could literally bring the whole environment to a screeching halt with one bad query. I've seen it at my last two jobs on a pretty regular basis. The devs would deploy code that they did not optimize properly beforehand, then we get the call that everything's slow and the site is down and we have to scramble to find out that somethings missing an index or not cached. For smaller systems, it really doesn't matter too much but for larger systems it's VERY important. EVERY single index and cached query counts. With that said, some of the comments in this thread have a point about the business logic. Ideally, you want as much business logic in your application code and out of the stored procedure. You ideally want all of your stored procedures / transactions to be set based (not line by line) and you want them as simple as possible. The relationship between the DBAs and the Devs is a delicate balance. You want to make sure the system is running optimally so you don't get the emergency phone call but you also want to make sure people making the application have enough flexibility / freedom to do their jobs. It's nice to just have a good working relationship between each other so you understand where you're coming from and what's expected. I hope that clears some things up. If you have any other questions let me know.
So if you have a large organization that has different teams writing code in PHP, C, Ruby, and Java. Where should the business logic exist then?
http://phpmentoring.org
Have you never been a DBA? Automated ORM query optimization is, by necessity, generally more inefficient than a well-tuned stored procedure. Especially since an ORM can't take full use of a given database flavor's particular niceties, due to the "lowest common denominator" support requirements. Both Propel and Doctrine suffer from this. I'm a huge fan of ORMs, but in the wild one does occasionally encounter need for something *else*. Or, as the OP is suffering from, it may not be a real option. Learning to be flexible will make you a better programmer.
The piece missing is your budget. Almost anything can be scaled these days with enough hardware thrown at it.
The api that is written in just one of these languages.
And it sounds like your code is probably rife with weird design practices and much more liable to be hackable than if an excellent DBA had done their job instead of you. ANd, if there are "billions of dollars" flowing through such a system, I can guarantee you someone, somewhere is silently thanking you that your system is so easy to swindle. ::shame::
It does on the command line
Not inside quotes
As a developer/DBA, I can tell you that if the DBA is NOT controlling the db in this way, then he isnt doing his job. Letting devs run wild on the SQL server... well, its not gonna end up looking pretty, and worse (for him), he's the one who will have to address all the perf issues. His reasoning will mostly go like this: 1) Stored procedures are useful on MSSQL, because it lets you control access to them from a security point of view. It also ensures the execution plan for the query is more likely to be cached effectively. 2) If adhoc queries are scattered thoughout various bits of software (some PHP, some compiled apps etc), then if there's ever a requirement to adjust the schema of the table, it really restricts the DBA's ability to do this. He first would need to ask you to amend/recompile your software. Even worse, should there be a bug in your software, it can stuff up data integrity for all other apps. By using stored procs, he can review the code himself, and by fixing a bug in a proc, he knows that all applications are instantly using the new sql. Its a different culture, if you've come from a 'free for all' scenario where you just hack away at the database, or embed queries in your code. Learn to enjoy the protection they're offering you, as their reasoning is good. Sooner or later you will encounter a problem in your software, and realise that after all, its a good thing they made you use stored procedures
If you must build sql dynamically, and its not working as expected, then echo the 'built' SQL statement out to response. It makes it much easier to see whats wrong. Just looking at a bunch of concatenated vars is usually much more difficult to troubleshoot
Stored procedures are pretty standard practice with MSSQL. You might even come to appreciate them because....using PHP and MSSQL together is a royal pain. At least it was the last time I had to do it a few years back. You couldn't even get the auto-incremented key of a newly inserted record without jumping through hoops.
Use PDO.
I have a plan for you. You will need a rope, a forged passport, a raw onion, and a brick. Let me know.
Using mysql_query is unarguably, unambiguously wrong, you should be using some form of prepared statements. PDO only takes a few minutes to learn, and is both simpler and safer to use than what you have.
I don't get the joke
I believe he went through the code and replaced all array()'s with []'s
Unnecessary hostility :(
WHy do you feel that mysql_query is so off? What's the value in PDO? Thanks!
Just force them to give the results back as JSON and you can claim n-tier!
All of the mysql_ functions are obsolete, using them safely is difficult and even discussing how to do it safely requires in depth discussions about character encoding. Moreover it's easy to corrupt your data trying to be safe. Those websites you see which turn a ' into \' are an example of incorrectly handled escaping. PDO wraps the database functions with a nicer interface, allows you to use different databases with relative simplicity, and removes any need to worry about things like injection attacks. See: http://www.php.net/manual/en/pdo.connections.php http://www.php.net/manual/en/pdo.prepared-statements.php
You're the kind of DBA that I like working with and I'm happy that you chose to comment with decent, rational arguments instead of the usual "but they're SPs, of course they're better!"
Awesome, thank you so much. I'm not doing any paid work but I am in the process of developing a pretty slick App. I'd like to store queries from my users and follow-up with an automated coupon after a pre-determined interval. Thank you again! 
This is not a PHP question. 
Do you know what acronym "ORM" means?
Ten years here. Still learning.
Well, I have written a php script that does this, and will share it here if there is no better way. Anyway I think this is a general version control topic and hence relevant to any type of software development...
Your submission has already been removed for violating the community posting guidelines. 
FYI, there is a difference between a dependency injection container and a service container. Pimple correctly claims to be a dependency injection container - not a service container. To elaborate, a service container is passed to an object and then that object gets its required dependencies from the service container. Thus the service container is tightly coupled with objects that require it, which is why there are arguments (which I agree with) that the service container is an antipattern. When using a dependency injection container, the objects still use "normal" dependency injection - they require the objects that they require. The dependency injection container is NOT passed to the object, but instead is used to get the dependencies to pass to the object.
I just realized an important reason we were using iframe originally was because this form we are bringing from offsite submits its data to our colleagues. Would this still work via your PHP method?
Yes. You can have the form submit to your site, then use curl to submit the data to the original site.
Yes, as Nick said, CURL can simulate a form submission (POST request) and give you the output back.
Fair enough, many (maybe most?) people feel this way. I however prefer my shit to be verbose + obvious. As opposed to say, [Perl](http://3.bp.blogspot.com/-tNB8Hq9j_RQ/T8ZrjaSFc-I/AAAAAAAAFuE/Z4blb6t9Vf0/s1600/matrix.jpg).
I would add that in addition to getting the contents of the page, you should also store them in a cache somewhere. Either dump the contents to a local file, or use memcache or xcache or something. But doing a GET request to this other site every time you need to load the content can get expensive. Serving from a local cache that you refresh on occasion is much cheaper.
If the content is (semi)static I agree. But I think this is not the case in OP's situation.
Thank you! Bookmarked!
&gt;mysql_real_escape_string Makes me think of: &gt;The moral of the story is, I chose a half measure, when I should have gone all the way. Iâ€™ll never make that mistake again. No more half measures, RiMiBe. If it's not a prepared statement, it's not secure.
In my head, I was thinking "If he is going to be using mysql_query, he should at least do it this way." Every time you see something like "Hey, it\'s Joe\'s Blog!", somebody is using single quotes.
&gt;it's more efficient in terms of time to use an ORM and then optimise when you need to, rather than shelling out on a DBA from the beginning. It sounds like you have the same anecdotal experience as the OP. Which is fine, of course. But you all don't seem to realize that there is such thing as Big Data. And Expensive Data - expensive to maintain, expensive to possess, expensive to handle. Not just financial data, but, you know, the *important* things in this world. And for that sort of work, you don't want to mess around with developer-tuning-as-you-go. That's when you hire a brilliant DBA. It's definitely a smaller part of the industry overall, and you very rarely encounter it in the PHP community at all, but it is out there. . For everything else - the other 99% of jobs ;) - I do completely agree with you 100%.
I think it's it a short step in *a* direction, one which takes you to the logical conclusion of that method. Writing your queries properly and escaping them properly is just as safe as PDO. The advantage to using PDO is that it somewhat protects you against programmer error.
**[Regular expressions are *not* for parsing html.](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/)** You want to use an xml parser for this.
My mistake if I didn't make it clear enough that that's where I was leading. I guess I should probably put something in there! Thanks
$sql = "SELECT * FROM users WHERE id = \"$id\"";
If it's just a form, why not duplicate it on your own site and just have the email sent to the other guys?
No. &gt; Our colleagues cannot edit any of their website on our behalf, so there is a cross-domain Same Origin Policy issue And the domains are different, so no cross frame JS allowed.
Incorrect. PDO can only be defeated if it's not using prepared statements (it's set to *emulate* prepared statements by default, which is basically just a sprint_f). The issue here is: mysql_real_escape_string() is a function that belongs to an API that is no longer recommended by its creators. The very basics of web app security require you to stay up-to-date. You're using a function that is outdated. You're using a function that has a history of security concerns. You're using a function that escapes special characters, not SQL itself.
PHP would be over kill for this, at least IMHO. You can load the content with a hidden iframe, then access the fame with window.frames[framename]. Assuming you have jQuery running, just do $(#content_target).html( $(window.frames[framename].body).find(content).html() ) You set that up to run on the onload event of the frame, and then you modify the form to target the iframe.
SimpleXML isn't for HTML. [DOM](http://php.net/dom) on the other hand is for both.
do i feel like an idiot right now?.... i sure do... watched the whole thing, waiting for you to show off some all new php 6....
Why do you need php for this? You can make a jsonp request to the client form action and plan accordingly on the response.
Like I said in another comment, it works though and is much easier to use than the somewhat unwieldy DOM extension.
Good thinking. You should also consider that you can learn a lot more from reading other people's good code than trying to figure things out on your own. [Here's a nice place to start.](http://www.aosabook.org/en/)
PHP6? Wasn't that made "obsolete" by PHP 5.3? I think the only thing waiting for PHP6 is rewriting everything to be unicode, which is a nightmare.
Speaking of swindling, [do you still defraud websites by promising to ensure that they are not delisted from search engines if they pay you $200?](http://thepeoplescube.com/current-truth/google-purges-the-people-s-cube-worldwide-t637.html)
Hrm... If you're looking to extract a form you're gonna have to be careful about the security measures they have on the site, they may not accept your form submission so you're gonna have to double check with them. Also if you're extracting, parsing and modifying the HTML from them, yes you can do it server side but remember you'll be waiting for the other server to respond before you generate your output. I think someone else suggested it, but you can do it client side using javascript (though because of the Same Origin Policy you can't use an iframe and edit it's content) BUT you can load that chunk after the output of your site has been generated so your users don't have to wait.
SkepticalMartian didn't say you couldn't, he implied that you shouldn't.
When dealing with csv files, I like to put this code: ini_set('auto_detect_line_endings', true); on the top of my processor. It makes sure that PHP is reading the file correctly. I don't think it's substr's fault your code is outputting that way.
[file()](http://php.net/manual/en/function.file.php) doesn't remove line endings from the last column, but you are removing them with substr(). The TBA lines get to keep their line endings.
You will find phpQuery is excellent for parsing HTML/DOM, even with invalid syntax.
I assumed that at one point, and tried removing them as well using substr on the entire line. Also tried a few other methods like unset for cols 12-13. Nothing worked. EDIT: I tried chopping down the TBA lines one last time in conjunction with workerbeej's suggestion, and this time it worked. Not sure why the exact same thing didn't work before, but it does now. Thanks.
I don't think they are trying to protect a dying role. Stored Procs are exactly where you want to store your business logic! That frees the app and web devs to use whatever interface they need to access the data while maintaining consistent results. What you need to do is let the DBA know what information you are looking for and let them develop the proper procedure for you to extract that data.
I would try this: $sections = file($fn, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES); The problem could be that the file uses "\n" and you are not trimming the line, so with adding "\r\n" in the implode will add a single new line
&gt; Also, why not just check for Ã½ and then substr those lines There are sometimes other uses of that character early on in the record, and in arbitrary positions, that must be preserved. I forgot to add that to my initial description.
Read it: &gt;PDO by default with MySQL uses emulated prepared statements. That means that on the client side, it basically does a sprintf through mysql_real_escape_string() (in the C library). Emulated prepared statements aren't prepared statements.
&gt;substr adds extra line breaks substr() doesn't add anything. This is a problem which is not related to substr(). This problem is related to the fact that file() will include the line endings when it splits data. Consider this: &lt;?php $text = "a\r\nb\r\nc"; file_put_contents('test_data.txt', "a\r\nb\r\nc"); $data = file('test_data.txt'); var_dump($data); outputs (note: you can't see the control characters, but you'll notice the quote for each element is on the next line): array(3) { [0]=&gt; string(3) "a " [1]=&gt; string(3) "b " [2]=&gt; string(1) "c" } One way to quickly solve this problem is to use array_map() to quickly iterate over and remove the extra \r\n. Ex: $data = array_map($data, 'rtrim'); var_dump($data); would output: array(3) { [0]=&gt; string(1) "a" [1]=&gt; string(1) "b" [2]=&gt; string(1) "c" } 
Your substr() cuts the line break off all the lines... except for the TBA lines don't trigger it. So when you re-implode at the end, you are adding a line break to a line break on those lines. You could pre-"chomp" all lines ahead of time, the PHP command for this escapes me (it's called "chomp" in perl and I always liked that term). 
I'll have to think about this for a bit, and follow up with my suggestions. But I like the idea and would personally love to see the end result. Please share with us if/when you finish it!
trim that mofo
If you can figure out how long it will take to scroll the whole page, then you could set that time in a refresh tag. Assuming the page scrolls at a certain number of lines per minute, you ought to be able to figure out how long it will take based on the number of lines in all the feed items before you render the page; this is important because you need to set the refresh header *before* you print/display *anything*.
Well, it's not PHP specific, but it's OOP specific, and PHP can of course do OOP: [Design Patterns](http://books.google.com/books?id=6oHuKQe3TjQC&amp;printsec=frontcover&amp;dq=design+patterns&amp;source=bl&amp;ots=lNmOBZ6LIH&amp;sig=ffTQqsDfmvf9qPrlJvLH-L4DjAw&amp;hl=en&amp;sa=X&amp;ei=Nm9vUJSCJbGG0QGEiYHoAg&amp;ved=0CC0Q6AEwAA) To be fair... there's a number of things in there that IMO PHP's flexible referencing and magic methods easily make unnecessary, but there's probably good stuff too.
Might be. I'll have to investigate a little further.
I don't really get why you would refresh the entire page. Is it to get new feed items displayed ? If so, you'd better go with some AJAX to make the RSS call and push the new elements in the scroller, while removing the old ones.
Well, I just thought refreshing the entire page would be easier and it really doesn't matter if the whole page refreshes or not. It's being displayed as a billboard. I am doing it to get new feed items though.
What about the extended ascii set... 253 375 FD 11111101 Ã½ &amp;#253; &amp;yacute; Latin small letter y with acute 
try this out, $num = substr($line,0,strpos($line,chr(253))); should print out just the numbers up until that character you don't want.. hit me back, you can reach me on gtalk cprogrammer919@gmail.com
Cool. I always love solving little challenges.
Haha I see what you did thar, you gentlemen sir! Do you realize you're a genius?
[rtrim()](http://php.net/rtrim). The php variant is slightly different, but I believe it is what you're looking for.
Morph Technologies provide six months industrial training in php in Chnaidgarh.Morph Technologies education division of SmokeTech Pvt. Ltd.( Software Development company in Chandigarh).
Ah I see, read the entire page this time, now it makes sense.
This looks pretty cool actually. Might give this a shot later today when I get home.
I would bind a event on the scrollbar in the scrollbox, and fire a new ajax request to refresh the list, once it hits bottom
Depends on how you handle your routes. Sometimes it's useful to abstract $_GET and $_POST when you want to embed parameters straight to the URL. I've made my own framework and found it less confusing just to abstract parameters. I don't do any pre-filtering, but API event hooks should be able to handle that scenario for you.
Going from top to bottom: &gt;A service is an instance, that goes by a particular name, that is meant to be shared amongst consumers, whether they just be other instances, modules or components (the architecture they are within will define what a modules or component is.) A dependency can indeed be what you define as a service. &gt;It becomes a service locator object/instance the moment a service container is passed into a consuming object for so that the consumer can use it to resolve required dependencies. Indeed. &gt;Sidenote: you could argue that DiCs (dependency injection containers) are a formal implementation of the inversion of control principle. I've seen discussions wherein people recommend either dependency injection or similarly dependency injection containers depending on certain factors, namely the complexity(quantity) of the application's dependencies. I would agree with your argument. &gt;auto-instantiation from convention or configuration &gt;auto-wiring of dependencies from convention or configuration Some DiC's do this, though, as you already said, there is not a formal definition for the implementation of DiC containers, and thus I've seen DiC's that do neither of these things and are thus quite simple - but I, as well as many others, would still very much so call them DiC's. Thus I disagree with this: &gt;In my mind, if your container is not doing either of those, then it fails to qualify as a DiC, and it should be more aptly named a service container. Thank you for correcting my terminology though. I was tired when making my original response and, not hearing anything of the service locator pattern in quite some time, confused service container with service locator. Service locator is indeed what I was talking about in my original post, not a service locator. Based on the terminology I see people using, a service container is a synonym for a dependency injection container, although the latter is the more common of the two terms. To clarify, the service locator pattern - not service container - is what many argue as being an antipattern, which I would agree with.
&gt;Or do I capture that and feed it into GET and POST objects that will sanitize that input for them? How are you planning on sanitizing the input if you do not know the context the data is going to be used in?
In Symfony the GET and POST arrays are wrapped into [ParameterBag](http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/ParameterBag.html) objects each of which are public attributes of the HTTP [Request](http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/Request.html) object. In Silex (Micro-framework based around Symfony components) the Request object is made available through dependency injection using [Pimple](https://github.com/fabpot/Pimple) (dependency injection container).
This still doesn't work. Is it possible that this error: "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near..." indicates a mismatch in the var type I'm sending to the DB?
Where I work, and on my own personal projects, we put all super globals in their own objects. Its not necessary because they are super globals, but its kind of like getters and setters.
I own PHP Objects, Patterns and Practice. It covers the following patterns: 1. Composition, 2. Singleton, 3. Factory, 4. Abstract Factory, 5. Prototype, 6. Interpreter, 7. Strategy, 8. Observer, 9. Visitor, 10. Command.
I prefer the Yii method, it's PHPish. Often I don't get to choose which framework I have to work with and it's a pain to track down where they are putting my params, but rest assured $_GET and $_POST is the first place I'll look.
Can you provide some features here as to how this would be better than PHPUnit?
Thank you. Very nice tool!
Fluff piece that's very light on details. Was looking forward to specifics :( Very cool if this comes to pass.
Reddit needs more commenters like you and me, you brilliant sir! Do you realize you're a genius?
I personally would not use referencing when capturing request superglobals, as often frameworks change the values for filtering/fixing/whatever.
If you already have experience in "other languages" including PHP, why are you trying to learn PHP? :D
LOL I see what you did there, you brilliant person! Upboated.
I guess it depends on why you are accessing them. I can't think of too many non-problem-causing scenarios where different developers are all accessing the superglobals in different parts of the application without coordinating. If you are abstracting the $_* superglobals into your own custom objects, you should just be copying the values out of them as soon as possible in the request lifecyle, and then everyone should access those custom objects. The usual reason for abstracting the $_* superglobal arrays is either to sanitize or somehow validate/massage the values (whether it's from $_GET, $_POST, $_FILES, $_SERVER etc), and if you're doing it by reference, then you have to do the sanitizing and filtering dynamically each time you access the data (since you are re-pulling from the unfiltered source each time), and with a non-changing value that doesn't make sense (especially if any of your sanitizing or validations are expensive, like IP checking, larget text re-formatting or validating, etc).. Sanitize and filter you data once while copying it from the $_* superglobal array into your own objects, and then access it from those objects for the rest of your request's lifecycle, knowing that any sanitation and filtering has been performed (and only once). If you have very specific transformations to do to those values for your code that may not be appropriate for other parts of the system, then subclass or copy those custom objects into more specific local ones that you've transformed for your needs (again, probably only once since those values shouldn't change). 
The majority of the stuff I have created has been closed-source for customers. My advice to you is not to learn to use the mysql_ functions -- They are outdated. Use MySQLi or PDO (MySQLi will be easier to understand). Feel free to PM me any time with questions :-)
In ZF it is not recommended to access $_GET and $_POST directly (even though parent is correct, they are accessible), but rather through the Request object that any controller method can access with getRequest(). 
What's your end game? What is the end result you're trying to accomplish? Someone might be able to think of a better idea than using an iframe.
Oh, thank god. I was thinking we might get 48 hours without someone writing a new framework. You've saved the day!
The problem with those is that it becomes a lot harder to do internal sub-requests. I prefer them wrapped so I can also unittest them. Globals are evil, this includes the standard superglobals ;)
Sure :-) I noticed that most of the PHP books I glanced at all made use of the mysql_ functions, and once you have learnt one way it is tough to move to another way.
Hello Reddit, this is a project that I am working on. However, I lack "support" from the community, people who suggest improvements report errors and such. 1. let me know if you have any suggestions how to improve the code 2. let me know if you are missing any functionality 3. let me know if you like the project :hi: 
Personally, I prefer using callgraph http://bit.ly/WD3Z2W. However, that is on the to-do list. It will be in the code by Monday.
Thanks that worked! So I can just call \Controllers\Thispage without using the 'use' keyword? Where Thispage is a different controller for every page
We can curb this disaster by^ developing PHProActive to manage Pimple(s).
I've been mulling over a hosted option, but a lot of the reasoning behind the way Codiad is built is to allow the developer to customize their environment. Putting it on a server and centralizing source would limit this without some major overhauls. Not ruling it out, but probably not happening in the near future.
Glad you like it. I just changed the case on the license file (as well as the install), thanks for the catch.
&gt;permissions problem Yes, my thought too, or some javascript lib mismatch, I believe I removed any permission limits but I didn't spend too much time on it.
Line 1 = $datetime is an array Line 2 = $datetime[0] = $row['Datetime'], thus $datetime is now array (0 =&gt; $row['datetime']) If you want line 4 to work, you need to change it to: $checkdate[] = (time()-strtotime($datetime[0])); But of course, you're going to have a problem with line 5 for the same reason. If you're not going to reuse these variables elsewhere, why not rewrite it as: if ((time () - strtotime ($row['Datetime'])) &gt;= 25) { That's the equivalent of all of those lines of code, in just 1 line.
Do not use the mysql_ functions. All of the mysql_ functions are obsolete, using them safely is difficult and even discussing how to do it safely requires in depth discussions about character encoding. Moreover it's easy to corrupt your data trying to be safe. Those websites you see which turn a ' into \' are an example of incorrectly handled escaping. PDO ace, awraps the database functions with a nicer interfllows you to use different databases with relative simplicity, and removes any need to worry about things like injection attacks. See: http://www.php.net/manual/en/pdo.connections.php http://www.php.net/manual/en/pdo.prepared-statements.php 
I'll also add that time () returns the current timestamp, in seconds. strtotime () also returns a timestamp in seconds, based on the date and time given. time () - strtotime () in the above will give the number of seconds elapsed. Your comparison to 25 is basically saying "Has it been 25 seconds since the submission was made?". If you want it to be 24 hours, you want to convert 24 hours into seconds. Using simple mathematics, you get: 86,400. This can be broken down as follows: 1 (1 second) * 60 (1 minute) * 60 (1 hour) * 24 (1 day) So your final line would be: if ((time () - strtotime ($row['Datetime'])) &gt;= 86400) {
I assume the destination is a folder in your doc-root, but you have put in an absolute path $destination = "/Images/"; should be $destination = "Images/"; There are other issues, this is probably the problem you were asking about anyway.
This is completely handled using 'composer'. If you're just learning Symfony then you should look into composer for your dependencies because it's fast becoming best practice. Check out all the projects you can manage as a dependency here: https://packagist.org/
Your customer relationship management system should allow you to run queries based on the parameters. As for actual sending of the email, you should already have a transactional messaging system in place that can be leveraged for outage and service notices. If not, take a look at a solution like Amazon Simple Notification Service. Also, wat.
 * convert IMAGE.PNG IMAGE2.PNG -average result.png
Have you ever made a singleton? They all share a few basic things: private constructor, private static property to hold the instance, and a public static method to create/get an instance. That can be a trait. Abstract classes are like interfaces with functionality.
Thanks, saw that too but didn't really understand it.
- 1) I can't speak for everyone, but the easiest way for me to learn any language is to find the code for a fairly simple project and read through it, make adjustments and eventually write my own version. Depending on how unfamiliar I am with the language, I might do that a couple of times, with increasingly difficult projects, until I'm ready to try my own from scratch, and then I look up functions as I need them. The more languages you learn, the faster this process becomes. - 2) wp_title() is a Wordpress function. You can check out the documentation [here](http://codex.wordpress.org/Function_Reference/wp_title).
Thanks
There is no W3C site which has anything to do with PHP. You might be referring to W3Schools but there's no affiliation between the two (W3 just means WWW). Not only that, but it is a horrible place to learn from, period. It doesn't teach you what you need to know, and what little information is in there is riddled with misinformation. You're better off to go elsewhere.
The other commenters are right; if you want to do anything (else) post-load, you are in Javascript territory.
This already has been fixed in the git. As well as implemented what Colonel-Rosa have asked. Might as well be worth getting the latest version.
This have now been implemented. http://f.cl.ly/items/1M3Y1i0R1x2L2U321F20/Screen%20Shot%202012-10-08%20at%2011.01.24.png or https://dev.anuary.com/8d50658e-f8e0-5832-9e82-6b9e8aa940ac/?xhprof[template]=function&amp;xhprof[query][request_id]=141322&amp;xhprof[query][callee_id]=1677
I agree with you here, you're providing a service "Webhosting" you're not providing "Code maintenance" it should be slapped in their face that their site is out-dated and needs upgrading. This shouldn't be your problem and should be told to your clients that you either sort it or pay you for the service of fixing it. It's completely ethical.
Yes I am using MySQL, the problem still exists after reinstalling the db schema.
As I've said, this issue should be already fixed in the latest commit.
I went through with it but got a ton of errors that I couldn't fix, I guess integrating zend version 1 is not what people do, but I'll definitely use this for future projects. Maybe I'm blinded by my immediate impressions but I really find symfony quite awesome.
Check out the concept of agile programming, extreme programming. Concepts like SRP, OCP, LSP, DIP, ISP .... It will give you a good concept on how you can apply patterns to write good object oriented models that can handle code changes easily. I remember reading a book by Robert C. Martin a while back that covered most of those principles and some coding patterns. Not written for PHP but it's about the concepts so you would easily be able to translate them to your PHP projects where possible. 
&gt;but what happens if you define an interface instead of using an abstract class? [...] You invite others to create god classes That's a completely unsubstantiated claim, and the author doesn't seem to understand the purpose of interfaces and abstract classes. &gt;While this, in theory, provides more "flexibility" for the future, every usage of this flexibility would hurt your software design -- a lot. Again an unsubstantiated claim, and again bullshit. &gt;Do you want to put some substance to your "argument"? How about he (the author) substantiate his claims? He's the one carrying the burden of proof, after all. 
If you want to process soap requests yourself why do you need PHP's SOAP client?
I don't mean the whole SOAP request, just the HTTP transmission part. 
Thanks for your response. Do you know any well coded projects that utilize interfaces, abstract classes and traits? Let me also ask you if my way of utilizing the three is considered ok practice. I have an interface for a database connection and an interface for processing database results where I list methods every database class should have. I then have an abstract class that has methods and variables defined that every one of my SQL classes use. Kind of that partial implementation you were describing. I then have classes for my various DB types (mysql, postgresql) that implement and extend the interfaces and abstract class. Finally I use traits in those DB classes to reuse methods that are also used in completely unrelated classes (re-used some code that is also used for logger code). Does that sound theoretically reasonable without me posting all the code?
 If you're looking for work I would say no. I won't say perl's dead but the job market for it isn't growing. 
I see thanks for the advice. But are there any benefits to learning it at all?
And what about the retrieveWSDL() method? Did you just add the curl auth part, or is the rest of it also custom code?
I do more development work as oppose to system administration so I'll definitely look into python and ruby. Yes I do already know PHP. Thank you for the useful advice.
I believe the site w3fools explains why, rather than just saying w3schools is shit. My college instructor always suggests w3schools for reference ..Im waiting until im done with his course to call him out on it though.
Thank you for the suggestion I'll look into it :) 
Learning something new is generally worth it. If your primary focus is web development though, you might want to check out python instead. You will find python used more frequently in web development than perl. Career wise, learning java might not be a bad idea. In any case, if you find yourself asking "I wish I knew more about X", go learn more about X and find ways to get paid for it later. 
why waste your time like that. Talk to them and try to work something out. There is no way I am going into work just to surf the internet. I can do that in the comfort of my own house, where I can click on to NSFW links to my little heart's content.
Ask for being able to work from home for 1 or 2 days of the week. And if it goes well work try to push for 3 to 4 days.
Hey, Thankyou everyone! I have tried the working from home and it is a non-starter =( and the flexable hours is like +1 hour on certain days... Its abit of a pain, as if im on a roll, I dont like stopping. The reason for asking, is to get an idea of the 'average' developing environment, if there is such a thing. I dont want to come across as bitching, as it is not the intention.
Have to agree, unless the surfing is 'research/training' or keeping in touch with current tech etc. My rule one is: Dont take the piss...
My problem is that I tend to work on my own projects about 16 - 20 hrs a week. If I go to work and use time I am sitting in the chair to research / work on something for home, that company is now legally owner of what I am working on, as I am using their materials. I've only had one company I couldn't work something out with, and I lasted there 6 months. I had worked a 20 hr day, and then asked to leave an hour early next week to pick up my sister from the airport, just to get yelled at.
I think you'll find most company have core hours which you have to be in the office for. If you're doing 9 till late every day you're probably overworked and the it's not a solution to ask them to let you work late. If you want to start late and work late, well you might be able to shift it a couple of hours but not much more. You need to be in when managers are otherwise they can't manage you and you need to be in when other people are so that you can communicate issues. Otherwise if they give you a problem and you need a clarification that's pushing it a day later most likely.
Take a look at [Symfony2's API](http://api.symfony.com/2.0/index.html). I'm not sure how extensively they use traits, but I really admire that framework's use of interfaces and abstract classes to make its code as modular as possible. In particular, look at \Symfony\Component\Templating\Loader\Loader, which is an abstract class that also implements an interface. It only defines the setDebugger method, while leaving the implementation of LoaderInterface's load and isFresh methods to its sub-classes. Conceptually, you can think of the Loader class like this: "Any class that wants to be used as a Loader has to conform to everything in the LoaderInterface, plus I've gone ahead and given any sub-class a default implementation of the setDebugger method, since that probably won't be too particular to any one implementation." It sounds like your ideas on how to use abstract classes, traits and interfaces in your database code is on the right track. Take some time to explore the [Doctrine API](http://www.doctrine-project.org/api/orm/2.3/index.html), created by some of the same people from Symfony, to see how they handled the issues you're dealing with.
It kind of depends on what you really hope to achieve (logging, something else) you could alternatively try to setup a proxy and hook into there.. Not super easy though :)
Will you be putting this presentation online after? I'm in Boston, but would be very interested in seeing this.
Yeah, I just did what you did using composer in less that an hour. It would have been worth persisting ;)
I realize its not what it was designed for, but it would be awesome. The situation you mentioned doesn't work so well when you're developing in a framework like CakePHP. Everything shows up as being from the Dbo query method or something like that.
&gt; ... the author doesn't seem to understand the purpose of interfaces and abstract classes. Tell me, what's the purpose of interfaces and abstract classes? &gt; How about he (the author) substantiate his claims? He's the one carrying the burden of proof, after all. He does not have to proof anything, because he's not claiming that his views are the truth. He even wrote a disclaimer ("This is of course kind of artificial. If using the language constructs in other ways works for you, it's fine."). You on the other hand just call his views bullshit and moronic, and saying your views are the real deal. So yeah, it's on you explaining why you're acting like a douche... PS: If you would ask him and let yourself get into a DISCUSSION I'm sure he would love to elaborate on his views. No need to agree with him though. PPS: And when you would explain WHY you disagree with his views, we could even have a discussion here, without having to talk about the third party.
&gt;Tell me, what's the purpose of interfaces and abstract classes? Check the top-rated comment in this thread. Now, I'm going to walk away from this due to your blatant disrespect through downvotes, aggressiveness and insults. I'd gladly have this discussion, but it's not going to be with you. If it's going to happen, it's going to happen with someone who is level-headed, understands how discussions and debates work, and doesn't take a differing opinion from that of a third party as a personal insult to himself. Good day. 
Â¡Buena suerte!
Have you considered a live stream?
No one wants to see me stutter and stumble over easy English words on the internet. I will, however, be putting a much longer series of articles going into much greater detail on my website soon.
I honestly do not understand why people want to hear some stranger talk about something technical, when the written word is much more clear and detailed! Regardless of what I feel, I've asked a buddy to bring his camera (iPhone with ghetto stand) and record me. I am sure to regret this within a day.
&gt;it's excellent resume fodder If this was the only thing on your resume, I'd notice it first, thank you for your time, and tell you we'd call you. Tell me, what good is something that never made it to production on a resume?
Cool, I'll be there.
Yup. First example I clicked on not only won't work because they haven't declared the $id variable (they declared $rowId then didn't use it) but is also vulnerable to sql injection. http://www.navioo.com/php/tutorials/Build_query_string_based_on_form_input_4.html
I don't know about you, but I tend to listen to presentations, debates etc. while doing the dishes and various other household chores. 
It's just about using a specific implementation of HTTP transport for security reasons in a large system. I just jave to figure out a way of making this happen.
I just took a look at the documentation for PHP's SOAPClient, and apparently it is able to download the WSDL file from a URL. So I take you reimplemented this behavior to make it use the authorization?
We said screw it and wrote a Java proxy.
Problem is here, that I am expected to fix issues with websites as they happen. Regardless of time...
I have always been told that abstract classes are created with the express understanding that they will not be instantiated. Not true for an interface.
Easily the best PHP book on patterns, oop etc. http://www.amazon.com/Objects-Patterns-Practice-Edition-ebook/dp/B003XQF3NW/ Edit: Not specifically PHP, but worth a read nonetheless: http://www.amazon.com/Patterns-Enterprise-Application-Architecture-ebook/dp/B000OZ0NAI/ And for Domain-Driven-Design (DDD): http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-ebook/dp/B0054KOKQQ/ http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-ebook/dp/B00794TAUG/
Go straight to the source. You'll learn patterns that aren't covered in books written specifically for PHP. With the exception of Memento, I have been able to easily port all of these patterns over to PHP. http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612
[PHP Object-Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117)
Good, but I preferred [this one](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1349792957&amp;sr=1-3&amp;keywords=php+object+oriented)
I would recommend Objects First with Java. Ok, yeah, it's not PHP. However it has a big emphasis on teaching OO right, and in a way which is clean and maintainable, and leverages the good parts of object-orientation. The concepts will be fully applicable to PHP (and other languages too).
[PHP in Action: Objects, Design, Agility](http://www.amazon.com/PHP-Action-Objects-Design-Agility/dp/1932394753/ref=sr_1_1?ie=UTF8&amp;qid=1349793575&amp;sr=8-1&amp;keywords=PHP+in+Action%3A+Objects%2C+Design%2C+Agility) and [PHP Objects, Patterns, and Practice](http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098/ref=sr_1_1?ie=UTF8&amp;qid=1349793587&amp;sr=8-1&amp;keywords=php+objects+patterns+and+practice)
Best way I learned oop for PHP, is ... learn Java. I know it sounds counter intuitive. But PHP ganked a lot of it's style from Java. And since java is a one paradigm language (OO with orthogonally with procedural), The amount of resources to learn the basics of OO are far more greater for Java than for PHP. The other benefit is you'll have a good language in your tool belt that fits some of the places that PHP sucks at: concurrency, long running processes, etc...
I'm not sure if it helps, but what about adding a meta redirect tag to the page with url including the hash you want. Like this: &lt;meta http-equiv="refresh" content="5;URL='http://page.com/#hash'"&gt;
it's probably pretty hard with php. i would guess your webcam has a little web server and the UI is using an ajax post move the camera. you'd have to duplicate the post in php and fetch the new image/data. 
&gt;The actual link href is '#'. That's because there's a click listener registered with the &lt;a&gt;-tag which cancels out the default behaviour and executes some code. I suggest you take a look there. 
That's a terrible idea. A query to the database would be much faster, not to mention more reliable. * You're going to waste a lot of time opening, seeking and closing file pointers. * Concurrency is also going to be a problem for you, as multiple requests might read and write to the file at the same time. If you add file locking, then that's going to delay each request until they all finish and you might end up with a race condition. * Each time you explode that string of IDs, you'll be putting all of that into memory, which is a massive waste of resources. In short, don't do it. This is what the database is designed to handle for you. 
Damn. I thought I was being clever. Thanks for your help!
What made you stop using CI? I like it a lot because if very flexible and has tons of docs.
This one's solid, with grounded examples that help you ease into it. Well recommended.
I've worked with CI a lot, problem with that is that I still get stuck on my old habits of writing a lot of the same stuff. But I'll go and give Symfony a shot
I might look some more into design patterns. I've read some things about them, but I always found it hard to understand.
I don't follow you
Yeah I'm already using exec/shell_exec but the problem is it's a one-off execution. I need PHP to be able to talk to a single persistent powershell execution rather than continually opening a new powershell session each time. I never saw this COM class though, this might do it if there's some sort of support for powershell..
Wait, so you DO have the URLs you need to request and all you want to do is call those in the background? There's plenty of ways to do that: * file_get_contents('http://www.foobar.com/rotate.php') would retrieve and return the contents of that page, provided allow_url_fopen is enabled * curl as mentioned by pluckythewhale if you want more options than you'll need * PHP sockets if you want to roll your own and need COMPLETE control
Interfaces don't lead to god classes - improper implementation leads to god classes. I see interfaces as simply promises. If something implements an interface it means "I promise you will be able to call x,y, and z without any problems." While abstract classes can potentially provide the implementation for these interfaces it is not a necessity. For example your interface can define methods that each object will be implementing differently. For example, you can have a "RequestObject" interface that defines various methods and a "JSONRequestObject" or "HTMLRequestObject" that defines how it will work. However, with an interface you don't need to worry about "will this object have the necessary requirements".
Why?
I recommend [Head First Design Patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124). It's written for Java, but Java is so stupidly straightforward (the language/syntax-- not actual Java programming, mind you) that you should have no problem translating to PHP. The book explains things in useful, simple terms.
Got the stream from the camera no problem, it's just /videostream.cgi at the end of the URL. It is javascript that controls the links which control the camera which brings me to my next question - can I call javascript functions from within PHP? That seems the easiest method possibly?
I'm pretty certain they're javascript functions but not sure if you can call those via PHP? I think there might be a cgi script involved too. The camera is a cheapy Foscam clone from ebay... can't find a product page, but I've posted the source from the UI page here: http://pastebin.com/0KtSmARJ
I wouldn't. OO is not language specific, and the best books on OO are not written using PHP as an example language.
&gt; can I call javascript functions from within PHP? You can't do that. Basically all PHP does is output HTML, which then again contains Javascript. PHP does not care about or understand whatever it outputs. The next best thing however is simply emulating what the Javascript is doing. All it does is call decoder_control.cgi or camera_control.cgi with certain parameters, depending on what you clicked. You can find out what you have to send by reading and understanding the Javascript OR by listening to the data that is being sent between your browser and the webUI while you are clicking the functions you want to emulate. Look at the brightness control for example: if you select the value 3, the onChange event of the selection calls **camera_control(1,this.value*16);** which then requests this URL: **/camera_control.cgi?param=1&amp;value=48** So you all need to change the brightness: function set_brightness($brightness) { file_get_contents('http://path.to.camera/camera_control.cgi?param=1&amp;value=' . $brightness); }
I'd have to agree with this sentiment. Reading through "Head First Java" is probably the best introduction to OOP design you can pick up for PHP. I've read through most of the PHP OOP books, and although there are little gems in them, none of them really pass along the concepts like that Head First book. You'll likely be amazed at how much PHP has borrowed from Java, and how much you can borrow in the way of best practices. BTW, it's also one of the best of that Head First series too. A solid follow up to that one would be "Head First Design Patterns", then perhaps to the real source "Design Patterns" by the Gang of Four. If you do go down the road of learning Java, avoid "Learning Java" from O'Reilly. It's certainly not an introduction to OOP, or even Java for that matter.
Yes, this is OP's only option, don't try to run/parse js, just look at what the js ends up doing.
Don't listen to him. He's just being a jerk. 
Patterns try to capture underlying truths, like axioms in mathematics. Frameworks are (mostly) attempts to implement patterns in code. Canned patterns and frameworks are someone elses idea of beauty. They could be yours too but I'm guessing that just using something beautiful isn't what you're really after. Writing beautiful code requires a deep understanding of the problem and an implementation that matches that understanding. It's difficult to implement beauty without understanding the underlying truth/patterns involved. You could get lucky, but how would you recognize it if you just accidentally created something beautiful?
Hmmm, I've written some very good PHP code for concurrency combined with long running processes. Long running being measured in seasons if not a couple of years at a time. It can be done, but you have to invest the time into getting it to work. I really should get some of that code out as a framework or something.
Hmm so far using pssessions, page loads 10 times faster but just need to figure out how exactly these sessions work and if they persist
Patterns are indeed hard to understand. It's not just you. But they are also one of the most valuable tools you can have at your disposal. Get a copy of (Gang of Four) Design Patterns and just read it. For many of them I had to go on-line and look up PHP implementations and write little tests for myself but it's been a very valuable exercise and I would recommend it to people looking to generally raise the level of their programming.
PHP can't simulate a click. You'll need to figure out the actual http request (if there is one) and make the actual request - assuming it's not some kind of applet that uses non-http sockets in which case you'd need to figure out the API for that.
In some ways you're right. Frameworks are not the be-all-and-end-all of web development because they are build to solve a very large range of problems - not necessarily the exact problems of your domain. For this reason Symfony2 and Zend2 are just ridiculously decoupled at this point. You can literally just pull out the bits you want and ignore everything else. For example Symfony Http Foundation will build you some awesome request/response objects with a full suite of tests, simple interfaces, nice docs, PSR-0 compliance - all that good stuff. You can include it with Composer and get right to work on the bits of your framework that ARE domain specific. Frameworks are all about building on solid foundations. For some - such as those people developing standard websites - a full stack framework might be the the most solid foundation. For others with a more unusual requirements limiting the foundation to only a few components may be the better route. If you believe all frameworks are great or all frameworks are worthless you're wrong. If you objectively evaluate which tools can give your project the best chances of success (and in tools I include full frameworks) then you're doing it right. 
Every time this comes up, people say use a framework. Using a framework is not a solution. Learning about OOP is a must before you start using a framework. Otherwise you're jumping into code without knowing why you're using it, what it does or why it's designed like it is. You'll write code that doesn't mesh with the system and it'll break or be huge. The trick with systems is to break them down into components. * Application * Page * Content * Image * Menu * Menu_Item * Database There's different ways of interacting with data * View * Edit * Admin (a catch all for Add, Delete, Create) You also have to think carefully about functions again. Ideally they should do 1 small job and properly. Normally this means it can be quite short (there's always exceptions but 100 line functions are way too long normally). There's also some advice: 1. In professional software being proud isn't always important. Sometimes beauty is possible, other times it just needs writing. 2. You can always refactor and optimize. Software optimization is not the first job or the second. You optimize later. This doesn't mean use bad methods intentionally, just don't worry about the precise performance until later. In terms of learning patterns to solve problems you don't have to limit yourself to PHP references. Java and C++ are both strong object orientated languages and there's lots on them. The beauty of the paradigm is it crosses boundaries. Learn to split the context away from the object and think in terms of how they relate to each other. For example, say I'm managing a movie website. I've got Movies,Trailers and such. All I really need is the relationship between the objects and it's possible to start a design for the system. A movie has a list of trailers, so I'm going to want to get trailers by movie `$movie-&gt;getTrailers()` and vice versa $trailer-&gt;getMovie(). I'll have properties to get for each one and I'll need to make sure the right people can edit them and add them. Say I'm doing a parcel delivery system for USPS. Companies, Parcels, Warehouses and such. The system has changed context, but the fundamentals are the same. The relationships between the objects are similar. `$company-&gt;getParcels()`, `$warehouse-&gt;getCurrentParcels()`. The other downside is that if you only use the latest in vogue framework you get stuck on it. Anyone still using PHP-Nuke? As soon as it goes out of 'fashion' you have to relearn a ton. Sure use a framework. But understand why it does what it does and what downsides there are as well as how to use it. I don't think you can't fix a bad developer by throwing them into a framework, but you can conceal their tiny portion of bad code beneath the rest of the system.
This makes sense. Every now and then I get to thinking that I'll look into frameworks and pick one that might suit my need. And every time I get so far and think that it's just not worth it in the long run. I am averse to spending time on learning something that's not fundamental, knowledge of knowledge so to speak, which I guess doesn't help. I have found that I can work much quicker and better using the tools of the language and building the various classes/functions I need as and when they are needed.
"I'm looking at you Joomla!"
I have found a light weight framework such as code igniter to be very helpful. It provides a secure, tested, stable platform to use as a good foundation while keeping out of the way for you to code any powerful applications you can think of in the way that you want - plus its so simple that the learning curve is almost flat, especially in comparison to a heavyweight like cakePHP.
&gt; That's on the developer. If they don't understand proper implementation what am I to do? As developers we all make bad design decisions. That's why we learn best practices, SOLID principles, and so on - to help us avoid bad design. What Kore proposes is just another best practice. &gt; I understand your argument, but just know that interfaces and abstract classes have their place. They are NOT the same thing and have different use cases. While you can physically substitute one for another that doesn't make it right. Interfaces have a certain use and abstract classes have a certain use. Don't try and use one in place of the other. That sounds all correct, but we are talking about software design. And there are no rules, just recommendations. And they change (remember the whole singleton disaster?) and always depend on context. Also IIRC `interface`s were only implemented in single-inheritance languages to enable programmers to aggregate multiple behaviors in one class. That's why Kore proposes to use `interface`s only when the interface you're defining will be used by all kinds of implementations (a `Caching` `interface` may be used by all sorts of classes, a `FormElement` interface may not). Just one last question: When would you use abstract methods then?
Yeah, that's right. That specific line might look a bit cryptic, but it uses a [ternary operator](http://en.wikipedia.org/wiki/Conditional_\(programming\)#If_expressions) which is a kind of condition wrapped in one line. This is how that line could be written without that whole ternary stuff: if (flip &amp; 0x02) { decoder_control(PAN_LEFT); } else { decoder_control(PAN_RIGHT); } Now the rest is easy. decoder_control is called with either the constant PAN_LEFT or PAN_RIGHT. Those constants are defined in the same file, just look for them :) Then follow it by looking at the function decoder_control: function decoder_control(command) { action_zone.location='decoder_control.cgi?command='+command; } decoder_control then sends that integer to another CGI script, just like before. So for panning left, you would want to HTTP GET this: http://path.to.camera/decoder_control.cgi?command=4 Now try it yourself :)
If you haven't yet used a framework, use one. You'll find plenty of suggestions in the other comments. Once you're familiar with PHP frameworks, write your own. This part is important! Even if you never use it, you'll learn so many valuable things about structuring PHP code.
Another thing to bare in mind is that these frameworks are in common use and their is some excellent documentation and support for them. This means that other developers joining your team who have previously used components in a framework that your project uses will be able to pick up your code more quickly. Some of the better php frameworks are very well written and you can learn an awful lot from them. My code in general has improved tremendously based on my experiences with the Zend Framework 1. I've heard great things about Symfony 2, but have never used it as we use ZF1 at work. I do intend to play around with it at some point though. 
On the other handy, *studying* (as opposed to naively using) a framework is a great way to learn how to organize an OOP project. Reading the docs, and the code, for components is a crash course in how to structure flexible, loosely-coupled, but powerful components that are testable and resusable. OP's complaint was that he was writing the same things over and over again. Switching from movies to parcels, he finds himself writing the same data-persistence stuff all over the place. He might do well to study a few ORMs of various flavors, and see how people have solved entity-persistence in the general case in a number of ways. He could adopt one of those ORMs wholesale, or craft his own. But playing with the, or going further and actually using them, is a great way to fully appreciate the pros/cons of their design and implementation. 
Those JavaScript links are most likely preparing some kind of HTTP requests and sending them to a server in the backstage. You can inspect what actually happens with some tools. Easy peasy! - Install Firebug on Firefox if you don't have it already, or use Chrome which has something similar built-in. - Open up the webcam page and summon the tool with F12. Go to the network tab (you might have to activate it in the case of Firebug, click the little arrow on the tab to show the menu) - Clear the contents of the network tab. Now click on the actual link and watch what is being sent over the wire. - Emulate this HTTP request from PHP. Check out the [PHP HTTP documentation](http://us2.php.net/manual/en/ref.http.php) or the [cURL documentation](http://php.net/manual/en/book.curl.php), according to your taste, for more details. Hint, you just most probably need a GET or a POST request. - It might be the case that your webcam has a password. In this cae you would need to do basic HTTP auth (what most networked devices do) or maybe you need to recreate the login and get a cookie. Depends on how your cam works. - Fun - Profit
Genius. I have it working thanks to you! Not sure if it's necessarily the best way, but with a combination of php includes and sleeps, I've got the camera moving to a set of predefined areas. The idea now is to have the script capture an image and save it locally on the server once it's reached one of those areas. Guess I'd better start a separate thread about that... :) Thanks again man!
with the right tools, it's soooooooooooo much easier and takes way less resources. It's just not worth it in PHP.
Your approach sounds very similar to the design philosophies around a number of web templating systems. In PHP, [Twig](http://twig.sensiolabs.org/) seems the closest to your structure that I know of. In particular, check out Twig's [Template Inheritance](http://twig.sensiolabs.org/doc/templates.html#template-inheritance). The idea of template inheritance in web programming languages certainly isn't new, however. [Smarty](http://www.smarty.net/inheritance), [Liquid](http://liquidmarkup.org/) with an [inheritance plugin](https://github.com/danwrong/liquid-inheritance), and [Django's templating engine](https://docs.djangoproject.com/en/dev/topics/templates/) are all nearly identical options for this type of template inheritance for PHP, Ruby and Python, respectively. There are even language-agnostic templating engines like [Mustache](http://mustache.github.com/) which provide template inheritance in a dozen languages.
I only have one question: When you say that functions should do one small job, how much is too much in one function? If I need to call a function from another class inside of a function, should I have that class function as abstract? Or do I pass the object to of the other class to the class function I'm trying to use? Still getting the hang on OOP, although I'm lightyears away from where I was 3 months ago.
I showed up, sorry I could hang out after and meet you but I had to get home. It was informative and the people are great thanks for the talk. 
Honestly, with only one post with very basic information like this, this really does say, "I just want some traffic ppl!"
The first example is a Twig template. The second is a PHP template. Please know that in Symfony2 you can use either type, so you'd need to take a look at Twig to see if it's useful to you. One of the really nice features is that Twig templates can inherit from other Twig templates. You can have a block of HTML that can be overridden or added to by a child template. Twig templates are also automatically cached by the framework, not sure if the PHP templates are or not. I'm still kind of new to the framework myself. There's [a page](http://symfony.com/doc/current/book/templating.html) on the Symfony2 site that provides more information on the benefits of using Twig vs PHP templates.
Could this be the issue? (http://stackoverflow.com/questions/2227093/php-fpm-returns-http-500-for-all-php-errors) TL;DR: Be sure `display_errors = Off` in your php.ini
I wanted to minimize dependencies and keep it simple. I already use Fabric for other projects, and I might move the phix-n scripts to a Fabric-based solution in the future. I'm not sure if PHP programmers would like that though since Fabric is mostly a Python tool.
I can see that, but getting traffic doesn't benefit me without feedback at this stage.
As drewjoh said, this is guarenteed to be a simple case of display_errors being off. Whatever packages you used to install the stack probably defaulted to that. You can change it in the php.ini file, or you could also put this at the start of your request chain: ini_set('display_errors', 'on'); error_reporting(-1); //note, this is ALL errors, including notices and strict mode, which you may not want. Alternatively you can create your own error handler, but that might be more than you're ready for.
The book "PHP Objects, Patterns and Practice" changed everything for me. Buy it on amazon immediately. 
All twig "benefits" are imagined. You don't have to be using twig in order to cache.
Actually I did read your post in its entirety and agreed, I was simply adding a note of interest; please don't assume it just makes us both look like asses.
Go for Symfony2, it's a good choice and with Java experience it's even better :)
I you store the pastes in files too you can name them using the IDs and use is_file() for checking if the ID exists.
short tags alert, don't use them ffs!
&gt;Is there any argument for using one over the other based on anything other than personal preference? fetch_object allows you to populate an object of a specified class (which might be useful if you have methods for manipulating the data, or if you need type hinting for something etc.). If none is specified, then a simple StdClass object will be returned. &gt; Is there a speed difference when working with a generic object over an array None that matters. At that point, it's pretty much just micro-optimization. &gt;are there different functional advantages, or are they pretty much the same? Yes, and yes. They do have different functional advantages, as mentioned above, however if you do not use that aspect, then they're virtually the same (apart from one being an object and the other an array, and you have different ways of accessing the properties). 
This has a certain whiff of blog spam. and at that it is bad advice and completely and utterly incorrect. Edit: Actually this is definitely blog spam. look at the url, completely unrelated to content of post.
&gt;beautifull Learn to spell first. Seriously.
Oftentimes I needed to use mysql/i_fetch_row() to fetch result rows whose fields would be indexed numerically, because the queries I was using would join tables on linked fields with the same fieldname. _fetch_assoc() and fetch_object() would set the array keys/object property names based on just the plain fieldname, so which table the field's data came from could be ambiguous. So Instead, I had to pull the raw, numerically-indexed result rows with _fetch_row(), look up the origin tables for each column individually from fetch_field/s(), and index the fieldnames with the table names included , so that the keys of identically-named fields on different tables would not collide with one another. _fetch_row() seems the only method to get ALL the data out with having identically-named fields on different tables colliding in the row object/array.
Meh. Build then bulk replace when re-factoring and cleaning up before going onto a production server.
If you traverse up the stack, you can see where the PDO query was being called (ie, findNewsItems).
I used [Smarty](http://www.smarty.net/) for a while and was pretty satisfied but Twig has a better syntax, OOP, and is strongly supported by [Symfony](http://symfony.com/). Definitely a strong choice 
If you are aiming for beautiful code, I strongly suggest you look into [Symfony](http://symfony.com/). You can use it or simply browse the documentation to get an idea of how it is doing everything. Key principles: * Highly encapsulated, everything has a job. * The model layer cannot do anything other than maintain data integrity. * Services are highly reusable and each do very little. * **A lot** is done via configurations and annotations instead of code. * A lot of configurations formats, template engines, and almost all providers can be overwritten. * Bundle (plugin) inheritance where you can override parts of the parent bundle. * Nothing is global, you pass references from containers to services * All code must respect [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md). And much much more. I learnt a lot about development in general while learning Symfony.
Never said it can't be done. It just sucks at it. pretty badly too when you compare the competitors. Enough to make it worth learning the competitors instead of doing it in PHP.
i prefer this one - http://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional/dp/0201633612
I apologize if this is slightly off-topic, but if you aren't constrained to a PHP-based solution and want to stick with Java, there is always the [JavaServer Faces](http://en.wikipedia.org/wiki/JavaServer_Faces) framework, which is an extremely powerful Web MVC solution. It includes XHTML page template support, described [here](http://www.mkyong.com/jsf2/jsf-2-templating-with-facelets-example/). [Here](http://www.jsftutorials.net/) is a page with a ton of tutorials that might be worth looking into.
For a small framewokr you might as well leave them alone. CodeIgniter wrapped iGET/POST to make globally secure input from XSS attacks. FuelPHP wrapped GET/POST to make HMVC requests easier. That would mean that the top request having /?foo=bar in the URL is identical to somebody making a HMVC request from controller A to controller B emulating GET. If you want to sanitise them globally then go for it.
Or, you could avoid using SELECT * and explicitly use column names and aliases. Also, you might be be surprised how much memory SELECT * can eat up.
I second this. It is a great book. 
&gt; I'm guessing my OOP idea is an alright plan? OOP is neither here nor there. It's one way of structuring things, there are many others; but it is certainly popular as the most widely adopted programming paradigm in general nowadays. &gt; The index.php page accepts a URL parameter A lot of frameworks for many languages do this these days, as part of a portal-based application structure. This term just means that `index.php` is used as the single 'portal' file, which is always handed the request. It figures out what to do by looking at the path of the request. In nginx, you can implement this with this line: try_files $uri $uri/ /index.php?$uri&amp;$args; And you can do similar things with apache mod_rewrite rules. A particular advantage of this is that it automatically gives you 'pretty urls' like `/path/subpath/action` that you can act/route on.
use PDO please ! please !!!!!
I would suggest using a function that generates a sequence rather than a random value. For example the `uniqid()` function generates unique ids (who would have thought \^\^) sequentially based on current time (. It also supports an added entropy parameter. you can then convert it from an hexadecimal number to base 36 to shorten it. echo base_convert(uniqid(null, true), 26, 36); Will generate an id which should be unique (and sequential).
Note that you don't need the AS but it does make it more legible.
I tend to use associative row retrieval because it is more descriptive in code. Performance isn't really a concern. The only thing I would actively discourage is using any method that fetches numeric and associative both in the same array since you're doubling all the results.
Calling other functions from functions is not a bad thing! Abstract functions are about whether there's a 'normal way of doing things. For example, there's no real default way a Vehicle moves forward, so it might leave it abstract. But a car normally has wheels, so it might implement the function and allow it to be overridden. If you're passing an object your saying to use the object in the method. If you call the method on the object, you're saying the object should do this. On specific cases it depends how you want to build your system and how many options there are. For example, some systems create 'Factory' classes which return objects to use. Others might use a static call. Factories are good if you have lots of options which you want to configure and then you need lots of the object, because you setup the 'production line'. But the extra class is pointless if you only need to change the odd thing on a case by case basis. It's a trade off :)
This is how things get over-engineered.
So many downvotes in the replies to this post. I'm guessing this is a highly controversial topic among PHP devs? Anyway, I think I don't plan on using a separate framework for this kind of stuff. I'm not building anything fancy, and the format for all my pages should be similar and simple enough that writing my own base class and having classes inherit from it should suffice. I just hope I'm not being myopic and shooting myself in the foot even though I don't expect the design to be amended much in the future.
I already use mod_rewrite for redirecting HTTP requests to HTTPS and to redirect any visitors of the root domain to the www subdomain. I suppose adding support for this would be a nice way to pretty up the URL. Thanks for the tip, I never knew how some sites were able to do this!
Ah yes, I in fact am free to use any framework available. Programming my website in Java would be nice, but I'm concerned about the performance of it because I have heard of bad throughput with JavaServer Pages compared to PHP (which really doesn't make any sense to me considering Java should be more heavily optimized than PHP). Also, I know from experience that Java is a memory hog, and I'm deploying this on an OpenVZ VPS where memory management is a bit strange and swap is nonexistant, and even my Java applications that use only ten megabytes of heap use a hundred megabytes of virtual memory. Apache/PHP doesn't seem to have as much of a problem with the memory management, so I prefer to stick with PHP.
Sadly, that's not always an option due to development environment restrictions :(
I'd also like to recommend using a library or API to do it. I personally love http://postmarkapp.com/ but there is also SendGrid.
An alternative would be to use your ISP's SMTP server.
Implying all it takes to spam is a local webserver. :P
If any PHP core devs are reading this, I'd like to suggest that a future version of the mail API come with a few more options and, especially, a debug option instead of the frustrating true/false. And not everyone has access to log files sometimes.
Do you have any concrete examples of the use of an inheritance-based templating engine leading to "over-engineered" code? The templatization of anything, including views in web applications, is a complex topic which can easily turn into a morass of repeated code fragments and massive conditional blocks. Some web engineers prefer the added structure of template inheritance in order to try and manage this challenge, whereas others don't. Includes may be enough for a given project. But I disagree with your claim that choosing to use an inheritance-based templating engine like Twig is a sign of over-engineering by itself -- it may be just the right amount of engineering for a complex job. The fact that OP's thoughts about his own needs for a view system had already tended towards template inheritance led me to suggest these alternatives.
Sadly, that's not always an option due to development environment restrictions.
looks pretty cool. how usable is it?
So you are saying that Java is better because it already obfuscated the heavy lifting behind some prewritten code that handles everything for the dev, rather than my having discovered it myself and writing the appropriate function and calling it __fork()... &lt;-- a simplification. Yes, if someone had already done the work I did, it wouldn't have taken me the week it did to accomplish my goal. But you still haven't suggested what the difference between concurrent processing vs. forking to achieve the same goals. Which I believe was your argument, not that one toolset already had the work implemented and the other didn't.
It depends on how many sub-divisions of your templates you might end up using. Although direct inheritance works well for simple layouts, such as header-content-footer, things start to get hairy quickly. For example, say you've written a bit of javascript code that should only be run on pages that contain a certain chunk of content, like a calendar. The ideal place for javascript is in the footer, but how does the footer template class know whether or not to include your calendar js code? This can be solved by slightly breaking your inheritance model and having your parent template class call some method on your content class, i.e. $content-&gt;getJsDependencies(); Now, content blocks can add js files to the footer. So then what happens if your content section gets big and you find yourself repeating a lot of the same structural code in several different content sections of your site? You might then decide to break your content template into several sub-templates, or "partials." Now, your calendar element is in a grand-child of your master template. How does it then communicate up to the footer that it needs your calendar.js code included? You could make your getJsDependency method recursive, but now you've completely obscured from the master template the source of that pesky calendar-old.js file which is causing namespace collisions and breaking your page. These are the types of problems that template inheritance tries to solve. 
have you checked your spam folder? I've fallen for this many times.
Postmark is great. You can also use Amazon SES. Dirt cheap.
Odd. Gmail spam cans most mail sent from my home server. I had to go write a specific rule for it, but it still get spam canned some times
Make sure your SPF record is set to allow the ip of your hosting server, make sure your server's public IP has a PTR record setup.
Odd.
I fully agree that using crypt() with Blowfish would be a lot better, But the idea was not to write a perfect solution as I mentioned but simply look at a way to split a string into 2 and scramble them. I opted to split into 2 then use SHA512, Then do the same to a key that sits between the 2 parts then use SHA512 on the final output. All that would be needed is to split that final string and store each part in a seperate database on seperate machines. Even with using Crypt the rest of the process would still be the same. As for the horrible idea... It actually makes sense to store passwords in 2 different places and while my very quick code is no where near as good as what RSA have announced or feature complete it is still one way that it can be handled. http://m.bbc.co.uk/news/technology-19896353
+1
I thought of that. This was for an abstraction library with no prior knowledge of the db schema, nor any authority to re-write any SELECT queries that get handed to it. 
Without ANY error message we CAN'T help. So any discussion about DO not use this and that, is useless.
It's not an amibguity in the //result set//, it's an ambiguity in the associative array or object that's returned from the fetcher function. From http://us3.php.net/manual/en/mysqli-result.fetch-assoc.php in the "Return Values" section: &gt; If two or more columns of the result have the same field names, the last column will take precedence. To access the other column(s) of the same name, you either need to access the result with numeric indices by using mysqli_fetch_row() or add alias names. Here's an example: mysql&gt; select orders.order_id, order_item.order_item_id, order_item.order_id from orders left join order_item on ( orders.order_id = order_item.order_id ) WHERE order_item.order_id is NULL limit 1 ; +----------+---------------+----------+ | order_id | order_item_id | order_id | +----------+---------------+----------+ | 2012872 | NULL | NULL | +----------+---------------+----------+ 1 row in set, 566 warnings (3.68 sec) There are two 'order_id' fields in the result - one from each table. In this case, they have different values. An associative array or object row only uses the short fieldnames as the result, so you'd lose one or another value when they collided while it was being built. Fetching a numerically-indexed row preserves the data. 
I thought of that. This was for an abstraction library with no prior knowledge of the db schema, nor any authority to re-write any SELECT queries that get handed to it. And yeah, I've run into memory limits before. 
*Never* blocks *any* of the emails you send out? You know that for a fact?
It only supports BCRYPT if you tell it not to use portable hashes. And the bcrypt version that it uses is an older one with known vulnerabilities ($2a$ instead of $2y$). I didn't mention that it used bcrypt, because that's not a mode that it normally is used in (that I've seen at least). Besides, if you're running &gt;=5.3.7, you might as well use password_compat or PHP-PasswordLib, both of which are far more flexible... 
I've used sendgrid for a couple of projects recently, the API is great. no reason to use anything else now
The phpass library will actually use bcrypt by default if it's supported on the system. Not all PHP installations supported bcrypt until 5.3, so the library would check for bcrypt support and use it only if it's found. Otherwise, it attempts to fall back to Extended DES / BSDi Crypt, and then finally to its own portable implementation. Of course, the library would jump to it's own portable implementation directly if told to. Also, there's some misinformation about the bcrypt prefixes. The $2a$ prefix is not any less secure than $2y$. The problem with 8-bit characters was fixed for $2a$ at the same time $2y$ was introduced. The $2a$ prefix is not bugged, but it does have a safety mechanism which will attempt to prevent checksum collisions with bugged hashes. $2y$ is not bugged, and does not have the same safety mechanism. The $2x$ prefix is bugged. The $2y$ and $2x$ prefixes are given for purposes of migration. Using $2a$ is perfectly safe and acceptable. I'm not sure if there are any other implementations of bcrypt outside of PHP which use these new prefixes. The only one I've seen which does simply aliases $2y$ to $2a$, otherwise they're identical. If your password tables ever need to be read by another system, it's probably best to use $2a$ in new implementations.
Nice, I was there but never made it to any of the unconferences, so it's great to be able to see it on youtube.
The symfony console is good. I know some other ones have consoles as well. - ZF - Cake - Yii
Any chance you're using a Windows server?
Are you saying you're basically doing something like this? class Page { public function printHeader(){ echo '&lt;html&gt;&lt;head&gt;&lt;title&gt;Something...'; } } class SubPage extends Page { public function printHeader(){ echo '&lt;html&gt;&lt;head&gt;&lt;title&gt;Something Else..'; } } 
mail() is a really really really slim wrapper around the unix sendmail command. You pass it raw emails and hope that whatever sendmail provider you have installed will figure it out. Rule of thumb. Don't use mail(). Use a library.
Yah I didn't feel like quoting the entire page :-p I like phpass for being small &amp; simple, and agree with the author of https://wiki.php.net/rfc/password_hash (oh look - it's the same guy *again*, he's all over the place!) that a simple core API would be really useful to have.
I've actually read through this site before. It's really informative and to the point. I'm good on the PHP side of things for the most part, but I'm inexperienced when it comes to scaling &amp;ndash; this when you usually hear cloud \*shudder\* and NoSQL thrown around.
there was a thread on here a while ago about password hashing with the included salt in the the hash, it was a really great method that allowed you to decrypt the pass anywhere as the salt was in the pass. I never found the thread again. :-(
Standard `crypt()` does that. Which all of the tools mentioned here use. Therefore, this does that for you... You don't need any special code. Just use `crypt()`, or a library that uses it. And you're done...
I thought I had responded to this post already, but I guess I forgot to submit it. Anyway, as I was going to say, the problem is very unlikely to be related to OOP and probably resides elsewhere. Now, based on what you've told us so far, it's impossible to answer where that place might be. In situations like these, however, it is a good idea to start using a profiler. I suggest you use something like [Xdebug](http://xdebug.org/) to generate a profiling output to view in something like kcachegrind (*nix/win), wincachegrind (win) or webgrind (web). 
Can't watch atm, but it seems to me that md5() (or sha1() if you're extra paranoid) isn't that hard.
Building a large and highly scalable application from scratch is pretty difficult to get right the first time. I would seek out any more experienced developers you know as a resource, even if it's just a quick code review or informal questions. Don't wait until your application is almost done to do this, as generally the architectural decisions you make early on will have large performance and scalability ramifications down the road, particularly in your schema design and object modeling abstracts. 
I think you would really appreciate the information when you get a chance to watch the presentation.
Aah, ok fair enough, I retract my statement.
Well, he really discusses why no hash method is safe by itself, and proceeds to include salts and iteration. The problem I see is that in order to provide an operationally practical hashing algorithm that is safe against powerful attackers, I need to get my own $1600 GPU in order to do the iterated hashing expediently. Otherwise, whatever system I'm using risks leading to a painfully slow login process. 10,000 iterations of a hashing algorithm? On my affordable virtual server? Dear god...
Github and composer sounds about right. I have a blog where I post snippets of code that I believe I might reuse one day. Unfortunately it's down now... time for a tumblr account. &gt;____&lt;
I love that book. I recommend it.
I built a large-scale application from scratch and made a lot of design mistakes in the beginning. The most important thing I can tell you is to keep your interface and your business logic separate via classes. Don't put any database calls or application logic in any of your scripts that output HTML. Keep all that in the classes. Your front-end scripts should only consist of object function calls and html output. This will enable you to duplicate the same business logic in a lot of different places, and make changes to the application logic in one place when necessary.
No, if you watched, I mentioned that bcrypt is really only attackable via clusters. Not GPUs. With that said, I also mentioned tuning it to 0.25 seconds. So it can compensate for slower hosts. The point that you so obviously missed was that just a plain hash is so broken it's not even funny. Instead, use an iterated hash, or one that was designed to be strong (like bcrypt)...
Stop using that, and instead use a better algorithm like PBKDF2 or (preferably) bcrypt... Especially that there's a bug where if `$stretches == 0` (or any falsy value) it'll return the same thing for every password. And if `$stretches` is less than 0, it will infinite loop!!! -- Side Note Why do people insist on inventing their own algorithms for this stuff? Standard libraries exist. Standard implementations exist. It's not difficult to do right, so why re-invent it every time? Cryptography is not easy. Stop trying to do it yourself. `&lt;/rant&gt;`
You say that like I can just stop and use a brand new system. I actually had to convert a site from Ruby to PHP and the already created database was using this hashing algorithm. I thought it was pretty good. I think it's better for sites to have different algorithms. If all sites everywhere used the same algorithm it creates one thing to break instead of many different things. That being said. There's nothing wrong with what I posted. It's not bruteforcable. And uh down voting me for it is against [reddiquette](http://code.reddit.com/wiki/help/reddiquette). I'm well aware of the so-called "bug". Usage: public function authenticate($password) { $correct_password = static::digestPassword($password, 10, $this-&gt;password_salt, PEPPER); if ($this-&gt;encrypted_password == $correct_password) { return true; } else { return false; } }
Except that you have no idea what my parameters are for the salt. You're just assuming it's a string. What if it's a random binary that isn't based on any character set? Furthermore just to crack one password you need to bruteforce not only the password but also the salt. This is only possible if you have a farm of GPUs. Even with no algorithm. Just a straight md5 or sha1 hash on a regular consumer GPU would take from a day to week for a 10 to 20 digit password. Add a salt and all of a sudden we're talking years. This is not practical unless cracking the password is a matter of national security and the government is willing to throw an entire data center against the problem. Plus the pepper which could really be any size string or binary clob and isn't stored in the SQL so even if the SQL database was pulled they'd still need the source code to get the pepper constant. We haven't even gone into the rehashing due to the digest plus the implode -- which is so arbitrary I don't see a brute force ever getting it. Total crap shoot honestly. I wouldn't expect this algorithm bruteforced even with all the computers in the world dealing with it all at once.
&gt; In other words, a string? Uh no. Using a brute force algorithm the program will try a, b, c etc in order. This uses distinct binary patterns defined by a character set. If we assume UTF8 as the character set every character in the string is encoded as 8 to 32 bits as per unicode spec. If the salt is indeed truly binary it won't match up to any character sequence unless by coincidence every 8 to 32 bit dissection matches a specific character. This is not likely if the binary salt is random. Furthermore brute forcing uses only a subset of the character set. &gt; Why? If I get the password hash, I can get the salt as well... Fair point. &gt; Salt does not change the time it takes to crack a single password. Uh. Bullshit. You have to re-hash for every possible guess at a salt. If the salt is known to be non-trivial (32 digits or more) than the whole thing takes YEARS. &gt; Security through obscurity at its best... Haha such bullshit. If you believe this than PBKDF2 and bcrypt are no different.
How much emphasis are you placing on testing? Because if you're not testing your application will most likely turn into a deck of cards ready to fall over at the slightest change.
Cool stuff. You should add a composer.json file and make it public available through packagist.org. This will gain your chance of this getting widespread.
I like github and bitbucket - yes those are helpful. So then if you were gonna use a framework would use just use git clone to get what you need everytime?
While correct, this really doesn't answer the OPs question about performance.
There is no reason for this. Something must be goofed up. Try looking at your queries (did you change them at all) or running a profiler like someone else said. I would suggest xhprof, but I am not sure it will run on Windows. Also try a test of just calling a OOP method to spit out some HTML then do the same thing with regular scripting. You shouldn't notice any change in execution time.
git clone for new sites or initial setup, or git pull after git cloned. I have usually three branches (master - qa - dev). I get master or production branch to the production websites everytime there is a code updates. But you can also cron to auto update. We usually have cron our dev servers to git pull every one minute. So, nobody actually has to ssh in and manually pull (most of the times). Depending on what framework you use and how their files and folders are structured in git, but I used git submodule (http://git-scm.com/book/en/Git-Tools-Submodules) inside of framework git and it works great, but if you make any mistake (sorry, hard to give you an example), at least for me, it became a nightmare. So, three different ways I use. The third one, I get help from my network administrator because I am not good at it... 1) clone framework to one location, and copy the files to your website or use .gitignore to bypass your git inside of framework. 2) git clone framework, and do git submodule to get your codes and other codes like themes so they can be updated properly as well -- tricky... especially under team environment 3) git clone framework under webroot, map your framework, and map your git cloned code from different folder (different location) (sorry, I don't know how to do this). I know there is a special tool far better than cron, but for the simplest ways for most of the websites, I believe cron servers job very well. I am sure there are super geniuses out there who can do million times better than what I have been doing, but at least that is how I have been doing. Complexity is awesome but when you hit the disaster, the simplest approach sometimes helps ton of time... When the sites go down, I don't have enough time to figure out what to do. Just quick copy and paste to do damage control. Very primitive way, but it actually is the fastest to recover any unknown issues or severe disaster. I had at least 5 disastrous moments when simple cut and paste method worked the best. Sorry for the long comment and my apologies if I made any mistakes.
Check out bitbucket for the free private repos
I believe if you employ the COM approach (new COM("WScript.Shell")) you only have access to RegRead() and RegWrite() methods. You won't have the ability to search/list keys. If you go with .NET (new DOTNET("mscorlib", "Microsoft.Win32.Registry") then you have the extra functionality, but people have problems loading assemblies and IIRC PHP doesn't support .NET 4/4.5 assemblies properly anyway. Incidentally, the COM extension is not built in with PHP 5.4 on Windows. It does ship with the php_com_dotnet.dll extension, but it's not enabled by default nor is there even a stubbed line in php.ini you simply uncomment to activate. There's still some minor setup activity. Now granted it's minor, but so is installing the win32std extension. :)
Usually formal training is a good solution but not many people have the time and/or resources to resources to do this. Also with formal education you will most probably be relearning what you have already learnt. I wish that there were more solutions to this problem. I can empathize with you. 
Would you comply with regulations if you used a new function, and then hashed that result with SHA? Also, if you used multiple rounds of SHA?
This is a little misleading. The NIST recommendations for SHA-2 is for "digital signatures, digital time stamping and other applications that require collision resistance," while the SHA-1 functions should have been discontinued for such use in 2010. This recommendation if for message/data authentication, NOT for password storage. BCrypt is not on the NIST recommendation list for password storage, however PBKDF2-based functions are. Notice I said PBKDF2-*based*. PBKDF2 alone is a simple key-derivation algorithm, not a password storage algorithm. It can be built into a password storage algorithm, which is the case for the Python PassLib [pbkdf2_digest](http://packages.python.org/passlib/lib/passlib.hash.pbkdf2_digest.html) implementation. I have a library which implements the same algorithm for PHP here: [PHPassLib](https://github.com/rchouinard/phpass/tree/3.x). These algorithms use PBKDF2 alongside SHA-2 digests to create a secure password storage hash which would meet state and federal government requirements. No, it's not a shame at all that the PHP functions wouldn't support the SHA family of message digest functions. It would be a shame if they did, because it would lend more credibility to the myth that salted SHA-2 hashes are good enough.
Noob here. Can someone explain the whole rainbow table thing? And also how someone could potentially get access to these passwords. Are they stored in mysql or something? If so how could someone get access to that? Thanks!
i disagree. although in most circumstances you are right. In some circumstances it is more benefical to store the salt in the pass. Its an important method to understand even if its not used all the time.
Exactly. What I'm planning on doing is creating a secure API that is completely independent of the interface.
Good advice. Thank you :)
Rainbow table is a method used in order to crack hashed passwords, it sounds like you're interested in hacking, in that case go to [netsec](http://www.reddit.com/r/netsec). 
That's very true, I barely know how to maneuver through git, but while working with one of rackspace's APIs, I successfully pulled down one of their open source libraries on github right from the CLI and was working with it in less than 30 seconds. There's a lot of junk files that come along with it, namely .gitignore and docs (not useless, but not necessary), but I can certainly see the appeal of portable code.
I ended up using psessions and invoke-command to make it work. I'm still looking into it but so far it's been going well and execution time is 10x faster
There are heaps of ways someone could gain access to your database contents. Exploits attacking all parts of your software stack. I could list a non exhaustive number and take up a whole paragraph, but that's not really useful knowledge on its own. This is precisely the reason we hash passwords in the first place - in practicality, it's irresponsible to assume that your database will stay secure forever. Look at the wiki article, or Google, if you didn't understand the video's explanation of rainbow tables. 
Get rid of the spaces between $DATA and the brackets. $DATA['key'] not $DATA ['key']
Yep, also keep you capitalisation consistant its making me twitch. $Result, $DATA, $time_start pick one..
haha this is an assignment for college...and i started it a long time ago..and now ive just come back to it..im incredibly sorry its in shitty order..i know it is..i myself would write rage comics over this badboy..as soon as its done i hand it in and set fire to everything around me that has been involved in this demonic piece of work so im never reminded of it ever again.. ever.
whilst ive got a helping hand...which im sincerely thankful for..as doing this by myself makes me feel like doing this.. (start 1.01 http://www.youtube.com/watch?v=87w655s3xKc) would someone be able to tell me how to make this http://www.goodtimedesigns.me/accessories.php look like this http://www.phpwebcommerce.com/shop-view-product-list.php 
No I didn't. You made your point above, in response the op. You could have left it there, but instead decide to make a sweeping generalisation.
try: print_r($DATA); on line 300 after the { This'll print out the array, make sure you're actually getting the data. If you're not, lemme know
well i considered posting the question after my title but didnt know the kind of response id get (due to being quite new to reddit) so i thought id let it linger..fortunately for me someone was willing to give me a helping hand.. whether i posted the question in the topic or not.. I know my code sucks im not here for boosts in self esteem on the fantastic code ive written..it is optional to help me or not..the only backwards-ass thinking is you posting in this and having nothing productive to say..why waste your time and look like a douche too?
php 5.5? is that even out yet?
that is some of the ugliest code I've seen in a while! 
just out of curiosity, I use a TEXT field in the URL shortner I just built! My only concern is that MySQL MyISAM has a 1000 max key length. An index is needed for lookup speed, so the question is, what field type and length should I use? any recommendations?
[http://www.phpacademy.org](http://www.phpacademy.org)
Awesome, thanks.
I use 2 setups. - I rent a server where I keep all of my projects. I have some dev and prod websites. I have an FTP server home on which my backups are made daily. I develop using notepad++ and the NppFTP plugin, straight on the server. - I have SVN and xampp installed on my PC. I log on some remote network through VPN to update my code to revision, develop on my local server, and then commit through VPN.
Use Firebug to double check it's not a DNS issue or related. Then do some profiling to see where the time is being spent, you should find the bottle neck pretty quickly.
Did you use a singleton? I noticed your main class is implementing Singleton, but I didn't read in to see what that means in this case. I've read that Singletons are not recommended in PHP.
Couple of years on this? Jesus this looks like a high school project, stick to known frameworks instead.
This one is a link about what you have asked, bro. http://www.slideshare.net/go_oh/singletons-in-php-why-they-are-bad-and-how-you-can-eliminate-them-from-your-applications
Singletons are global and by design hide dependencies. For example a User class may rely on an Sql class but you won't know until you switch to MongoDB (for example).
In general I disagree with you. Combining cryptographic functions is a non-trivial task that's actually incredibly hard to do without reducing the strength of the overall block. So it is something that should very well be recommended against in general. For example: http://crypto.stackexchange.com/questions/3753/can-i-combine-two-of-sha-3-candidates-cryptography-hash-functions-and-obtain-mor However, in this particular case I think your system is ok. Note that it will never be stronger than the strongest component. But it should never be weaker than it either... One thing that I would recommend though is to pass the password and salt into the HMAC as well as the hash. That way, you don't need to worry about bcrypt collisions (if there were any)... So, something like this: $hash = crypt($password, $salt); $hash = hash_hmac('sha512', $hash, $password); 
Seems like a dick moving using tor for a large scale scraping operation.
1 request every few seconds text-only is not overbearing.
This is great. I have mispronounced Magento as Magneto an awful lot of times. But that logo adds in a whole new meaning to it.
This should be top, not -12. OP is not asking for feedback, he is **releasing cool software**. It's like the auditions on X Factor where they truly cannot sing and are blissfully unaware of the fact, just embarrassing for all parties. &gt;Now we have decided to put it out there, and we hope that someone think, that this framework is as cool as we do. Seriously.
I think you seriously need to look at following a proper naming scheme (PSR-0 ideally) so you can avoid stuff like this: class PageFactoryDeveloperToolbarItemExectutionTimeCalculator extends PageFactoryDeveloperToolbarItem I'm all for descriptive names and classes with very specific purposes but that's pretty ridiculous... Secondly you should be aware that DRY is not just a code thing. Duplicating the entire functionality of the code in comments leads to one of two things: 1. Maintenance nightmares or more likely 2. Missleading, out-dated comments that nobody reads. e.g. /** * Get file from filesystem. * * @uses PageFactoryFileSystemTemplate * @uses PageFactoryWebAbstractTemplate::setContentType() * @uses PageFactoryWebAbstractTemplate::setExpire() * @uses PageFactoryWebAbstractTemplate::setLastModified() * @uses PageFactoryFileSystemTemplate::setContentFilename() * @uses PageFactoryFileSystemTemplate::cleanup() * @uses FileSystemFile * @uses File::fread() * @param string $file File UUID * @return void * @internal */ Why do you need a comment for all this stuff when the code is RIGHT THERE underneath communicating the exact same information. you appear to actually have comments FOR your comments which is a new one on me: /*****************************************************************// //****** File system HTTP GET request handler Class Methods *******// //*****************************************************************// /** * Dummy required build function. * * @see PageBase::build() * @internal */ I don't want to sound completely negative, it seems a huge amount of effort has been put into this. I can't just help but feel if you'd spent half the time you appear to have spent formatting comments on actually improving the code you would've had something much better to show for your time.
Did you just steal this? http://www.reddit.com/r/webdesign/comments/11dmfe/been_working_with_magento_theming_lately_my_brain/
Firstly you're right to be skeptical of your DBA's "if statement" claims. By the sounds of this mess the company should be skeptical of his continued employment. Michael Feathers wrote a book called Working Effectively with Legacy Code - it might be worth a look. While at its core it's really a book about automated testing it does describe many techniques for working with very poor quality code. The basic idea is that you probably can't tackle a big mess all at once and indeed you shouldn't attempt to. Instead you need to start looking for subsystems within spaghetti code that can be extracted to to classes safely and brought under test. If there's already an OO structure in place you have more options and may be able to refactor at an implementation level without affecting interfaces. It's a risky business but you need to remember you're the one trying to actually deal with the problem. The real risk-taker was the idiot that decided crating a gigantic cluster-fuck was an appropriate technique for safeguarding business critical systems.. 
Slower than normal, but okayish according to the blog post. Considering the many other (ab)uses of Tor, this doesn't seem so bad. Incidentally, it's a nice blog - guy should blog more often.
For the most part I agree that if you did something like md5(sha256(string)) that's going to produce a weak hash because you're going from a stronger algorithm to a weaker one. However if you're doing it properly [this post](http://crypto.stackexchange.com/a/328) seems to say it produces a hash that is at least as strong as the strongest of its two components.
Ever tried http://code.google.com/p/phpquery/ ? I used it once, not bad really. 
There was one video on Vimeo floating around about legacy/shitty code problems: Here You go: http://vimeo.com/47849625 I would go trough full rewrite. 10K lines are not THAT much. If You'll not do the same mistakes I am quite sure You could rewrite the code with up to 50% less LOC and much more maintainable code... After watching this video I decided to refactor one of my older PHP projects (PHP_Depend shows 90K LOC). There are stuff to be done but mostly I feel like I have successfuly refactored one of my old websites. Of course it is easier to refactor Your own code but it is not impossible. It will save much more time later.
Yes I tried that, didn't work. Trust me I WANTED to use SimpleHTMLDom because its dead simple to use, but I needed better performance. I was still encountering intermittent seg faults even when using clear(). 
Gonna jump into this feet-first on Monday. With this and some of the other suggestions I've received, I can't wait. If I turn a 30 second page load into a much smaller number, I'm pretty sure that I'll be heralded as a god. To me, the experience of dealing with this kind of mess is priceless.
I clicked on this link because the title made it look as if you might be the poor sod enlisted to work on the app I created before my disability became too bad for me to work, and I wanted to apologize. It's not, and you aren't, but I'm apologizing anyway, just because.
It's not really clear exactly what you're trying to accomplish, I think. Depending on the CMS, you'll want to look at their documentation for plugins, then download a plugin someone else wrote to see how things are implemented therein. More information / clarification on what you're trying to accomplish might help us help you a bit more.
&gt; Over 1TB of data is retrieved from the database on a monthly basis. Ask yourself what type of file system the data resides on. For example, under Linux, using [XFS](http://lwn.net/Articles/476263/) will usually result in better performance for large files (i.e., databases). Software aside, you may also want to look into the speed of your hard drive. What type of bus does it use? What is its RPMs? Seek time? What kind of RAID set up is it using? etc. If you're relying on 1TB/mo of data - which is a lot - then you, and your DBA, need to invest in making sure that the data is as accessible as possible. &gt; Millions of rows. Large tables. This can go several ways depending on certain factors: millions of rows can produce large tables (let's call that vertical scaling), or the tables themselves can be large, regardless of the number of rows (let's call that horizontal scaling). If the issue is vertical, there isn't much that you can do about that; that's the nature of the beat. One suggestion would be maybe to partition your table (not necessarily talking about [MySQL partitioning](http://dev.mysql.com/doc/refman/5.1/en/partitioning.html), but not ruling it out either). Does the table contain a lot of "historical data"? What I mean is are there lots of rows that need to be kept, but are not accessed very often? If so, consider moving those records to another table; almost like an archive. If the problem is more horizontal, as in you have many columns of various types, then you might consider normalizing your data into multiple tables/relationships. Does your table contain contact information, such as address, city, state, zipcode, phone numbers, e-mail addresses, etc? The city, state, and zipcodes can all be put in a zipcode table; phone numbers can be put in another table, etc. Another aspect to look at is your column definitions. What data types are you using for your columns? If you're using a lot of VARCHAR(&gt;200)? Do each of those columns need that much padding? Are you using a lot of TEXT/BLOB fields? MEDIUMTEXT, LARGETEXT? You might consider breaking those out into another table, and only grabbing them when you need to use them. &gt; The most used page takes 30 seconds to fully load. The initial page loads in 2 seconds while the iframe containing the bulk of the data usually takes about 28 seconds to fully load (it loads bit by bit). Users are constantly refreshing this page as they need live up-to-date data. You might consider refactoring the iframe so that it's not one call to the system for the bulk data. For example, you could use multiple AJAX calls to get smaller chunks of data and populate it one piece at a time. You should also give your users visual indicators about the loading of the page to help stave off their impatience. I know that when I'm loading a page, and it's sitting there seemingly doing nothing, I will refresh the page; conversely, if I'm loading a page that has some form of progress bar, I tend to be that much more patience (assuming the progress bar doesn't freeze for more than a minute or two). &gt; Our DBA reckons that the amount of IF statements inside IF statements is contributing to the slowness. I'm not sure I fully agree with that. From what I've read, PHP is rarely the bottleneck. Nested if statements do not negatively impact performance by themselves. *IF* the if statements are the culprits, it's because of the logic that they contain. You might consider revising nested if statements, if only to simplify your logic and make your maintenance less of a nightmare. *IF* your if statements are pulling from the database as part of its logic (i.e., if (sizeof($db-&gt;getAllRecords()) &gt; 0)), then yes your if statements are the problem... this made think of another point: by all means make sure you're not making the same exact database calls if you can help it. What I mean to say is that if you have a call to the database to get 1000 records, make that call once and then pass around the results (as an array or as an object; objects are better because they are typically by reference, and not by value - it saves memory usage). &gt; We all agree that the sheer amount of data we're attempting to render on the page is one of the biggest issues (a lot of data with tables inside tables). Unavoidable to a certain degree. Profilers show this to be one of the biggest issues, alongside queries. The problem with using tables in HTML is that web browsers typically will wait until the closing &lt;/table&gt; tag before it tries to render the table graphically. So, if you're echo'ing the table HTML one row at a time while you're processing the data, this can slow your down tremendously; instead, perform your business logic on the data first, then build your table (from scratch) after; keep your presentation logic to a minimum. &gt; Multiple JS includes that I'm afraid to touch, simply because the files in question are used by other parts of the app. I could put them all into one file and cut down on the number of HTTP requests, but then, I'd be forced to leave the other files behind, simply because some obscure page is also using them. This means duplicate code. Also, the 20+ HTTP requests in question aren't actually that big of an issue, simply because our DBA / server guy has some caching going on, which means that the majority of the files are served together side-by-side within 35ms. If you can, move your JS to the bottom of your page (above the closing &lt;/body&gt; tag). This will allow your page to render first, before it tries to do any of that fancy stuff. Alternatively, if at all possible, use a framework like jQuery that has the ability to defer any JS processing until the page is loaded (i.e., $(document).ready(function() {});). Some stuff you can't avoid without rewriting a lot of things, so this may or may not work for you. But, in the long run, it might be worth the effort. &gt; Profiled the main query on the page and found out that it wasn't using one of the 10 indexes that existed. It was using filesort. Couldn't seem to force MySQL to use the index we wanted? As a result of my prodding, the DBA took interest and suggested creating a temporary table for all data relating to today's date, which would allow us to work from a smaller subset of the data. I'm not too sure about temporary tables and their usefulness in regards to performance? How long will a temporary table last? Temporary tables will last as long as the connection lasts, or until you do a DROP TABLE on it. For the most part, that means it lasts until the page has finished loading. Temporary tables are okay, but they contain their own performance issues; mainly due to memory and configuration constraints. Your DBA should be aware of those. With that said, have you tried using USE KEY/INDEX and/or FORCE KEY/INDEX? Sometimes you have gently tell MySQL which key to use - sometimes, that won't work. Either way, make sure that you run your queries through EXPLAIN to understand which strategy it's trying to use, and tweak as necessary until you get both the performance and results that you want. Failing that, you will need to look into caching - more on that in a second. &gt; Before I made the sub data fix, we had queries inside loops. These queries touched tables with millions of rows, using no indexes. Always have indexes on your data. But! But, don't use indexes for the sake of having indexes; only index the data that is going to be used in WHERE clauses (there are other circumstances too). The reason for this is that you want indexes so that you can avoid hitting the table directly. If your indexes are near as large as your table, you've defeated their purpose. Again, use EXPLAIN to see the strategy MySQL is using for your queries to determine the indexes, and tweak as necessary. &gt; Page in question consists of 10K+ lines of code. 10k is a decent size of code, but ultimately, just having 10k lines of code is not the source of the problem itself. Keep in mind that even if you had 100 files with 100 lines of code, it still equals 10k lines of code. Hopefully every single line of code is not being executed - in other words, you have logic that may cause certain chunks of code to never run. The problem is going to come down to what those 10k lines of code do, and how they do it (queries inside of loops can be a huge performance hit, though unfortunately you might not be able to avoid that). There are strategies that can help relieve your burden: * First, cache your data. This can be done using memcache, redis, or even sessions. The idea is that you want to reduce the burden to your beast of a database. Ideally, you want to build your infrastructure in such a way that really the only time you need to hit the database is to update the data, and occassionally freshen the cache. * Second, and this pertains to your queries inside of loops, use prepared statements. A prepared statement, in a nutshell, is a pre-compiled query where only the values of your conditions change. * Third, and the upmost important of all of my suggestions, is that you need to rally your coworkers (developers, DBAs, managers, etc.) and get them all to work together for the common good. Having rogue employees running around re-inventing the wheel (squarely, I might add) will undermine any performance optimization you painstakingly put into place. * Fourth, don't let yourself get too burnt out. If you're miserable, constantly under impossible pressure, and not getting the support you need, you're going to write horrible code. It's just how it works; if no one else cares, why should you? It will happen. Take a step back every now and then, and just recognize the whole of the problem. Keep things in perspective, and just work on what you can work on. If that is not good enough for everyone else, refer to #3. Fight the good fight, and just make sure that you don't get buried in the avalanche. Good luck, friend!
php is a good place to start, I'll recommend a few things. Lynda.com php tutorial is a great place to start. Pick up a copy of O'Reilly learning PHP. Great book, once you have gone over that and made some basics scripts and a couple of sites, get the "programming php" and "php cookbook" form O'Reilly. That's how i self taught myself basically. That and reading a lot of tutorials.
Unfortunately i skipped javascript. I learned HTML first (To be honest if you don't know this you'll need to learn this first, it's not that hard) then, learn the basics of css. ^If you don't know these, the easiest place to learn i can suggest is lynda.com again, their html/css/php tutorials are just incredible for picking it up from scratch. Sadly the php tutorial does go over basics, but it doesn't teach you a lot of PHP's true OOP functionality with classes and such. But it will teach you basic syntax and functionality to get you started. Everything from building the page, to fairly secure database interaction.
I have done a little bit of html but thanks a ton for the resources. If the OOP functionality is anything like java or cpp I think ill be able to pick it up pretty quickly
maybe you're looking for something like magic methods, but i think you're going down the wrong road here. you probably just want to make a generic call to get_page_content(), then in get_page_content() look at the $_SESSION['SCRIPT_NAME'], next lookup the content for that URL in a database.
If you already know python, i would just stick with that, look into Django.
JavaScript is hugely important to learn as its the only language that runs in every browser.
PHP is the only real choice. C++ is a distant second. Don't listen to the others they are dilettantes.
I'm not 100% sure that I'm answering your question, but it sounds to me like you're a little confused as to how the MVC goes about auto-loading relevant classes. If this is the case... read on. All of the magic is done through a built-in magic function in PHP called __autoload(); Autoload takes one argument, that is the class you're trying to load. So basically, in the bootstrap of any MVC framework is a code block that looks like the following. __autoload() gets triggered every time you instantiate a class, so that's really where all the magic happens. public function __autoload($class_name) { if (($path = $this-&gt;_find_file($class_name)) !== FALSE) { include($path); } else { throw new Exception('Class '.$class_name.' not found.'); } } private function _find_file($class_name, $extension = 'php') { $paths = array('application','modules','system'); foreach ($paths as $path) { $class = dirname(__FILE__) . DIRECTORY_SEPARATOR; $class .= $class_name . $extension; if (file_exists($class)) { return $class; } } return FALSE; }
To be clearer, what I'm struggling with is how things are wired together. I understand the concept of a DIC, for instance, but I don't understand how components within it are called. And I can't seem to find an article or an example that shows a really complicated model layer. Most of my projects are very complicated involving multiple model interactions per request and I can't seem to figure out how to have these components talk to each other. Observers only pass messages. I need more than that for the projects I work on.
Install WAMP if you're on Windows or install your basic LAMP stack if you're on Linux. You should look into setting that up on your own computer. Actual PHP is very easy. I too was a comp sci student and it took me about a week to start making somewhat complex web applications.
&gt; but you won't know until you switch to MongoDB Why the hell aren't you reading the code you are using? There should never be any unknowns about any library you add to your projects.
Personally I host everything in bitbucket (free private repos) and just update using hg, then I can fork, pull and push as needed. If my hard drive crashes I do not loose my work, if they go down then every fork/pull I have made is a valid backup.
This is basically a php-like implementation with some enhancements. It should be noted that they aren't using the zend engine. There are enough differences that this will likely frustrate someone who is used to having php available with all its libraries.
You already know some web languages (Python and Java) so you can use those. The more important thing (that lots of people try and skip) is to learn the main web protocols: HTTP in particular. Learn this, and then experiment using Python to build some sites. You might want to try out Flask but I would avoid Django at least until you know a bit more. ps. learn Javascript too. pps. is there a particular reason you think PHP is a better web language than Python? The only advantages in my mind are that PHP is easier to host and find hosting for, but beyond that Python seems like a nicer language to me.
It all depends on what you want to version.. Including a zip and the source code of the zip is probably overkill. From a technical standpoint keep in mind that versioning binary files such as zips won't actually be able to store just the differences and will be forced to store the entirety of the file. If it's a frequently updated zip you'll be storing each and every copy into your version history. The trade off being the physical size of your repository will be larger because of it. I've seen repositories that do store the code zips, but they have an automated build system that unzips the zip and places the code where it needs to go. 
I am sure it has occurred to you that Django is Python and this is /r/php
Have a look to composer. :) http://getcomposer.org/ It allows you to download your zip after you have checked your project out. It's way more flexible and you have a constant naming scheme for third-party components (./vendor/&lt;manufactor&gt;/&lt;product&gt;/)
You should be using `crypt()` with `CRYPT_BLOWFISH`. Though, you should keep in mind that, when it comes to system's security, password encryption in database is only one of the steps.
PH7 looks far easier to embed and extend than Zend's PHP.
I think that this is the ideal tool for building web administration interface to your C/C++ application. Apparently this is what power routers web interfaces.
Properly used : yes
I'm trying to avoid service locators, but this is definitely relevant. Thanks.
If, for some reason, you cannot use something like Composer, then I would highly recommend storing the uncompressed contents of the zip file so that when the source is updated, you only store the changes. As /u/medicationforall stated, storing a binary file will more than likely result in a new file with each version. Plus, it'll be advantageous storing the source because it'll make it much easier to be able to see exactly what changed between versions - though, more than likely, you could achieve this by simply visiting the source control for the vendor themselves. Why store something that you could simply redownload at a any time from some other resource? Simply create a text file and put the location of the source in there for quick reference.
If you pass in the actual container, it's a service locator. If you pass in a service from the container, it's dependency injection: $foo = new Bar($app['domainBaz']); class Bar { public function __construct(\Domain\Baz $domain) { $this-&gt;domain = $domain; } } vs class Bar { public function __construct() { $this-&gt;domain = new \Domain\Baz(); } }
Let me simplify your first four points: &gt; use bcrypt. There, easy, done. 
Yes.
Good general info, thanks. How do you recommend saving salts elsewhere? 
Better alternative for learning to use prepared statements? Only alternative would be giving up programming as hobby.
Thank you so much for this!
Another point to make is that whenever the user changes their password, re-generate their salt along with their password. I don't necessarily agree with the idea of storing the salts outside of the database. If a hacker has access to the database, then really it won't make much of a difference about their passwords. With that said, you go with whichever strategy you deem fit with regard to the salts. You might also consider [PHP's native hashing](http://us1.php.net/manual/en/function.hash.php), or [crypt](http://us1.php.net/manual/en/function.crypt.php). 
[Mozilla Persona](http://www.mozilla.org/en-US/persona/) is something I've been keeping my eye on lately. It's not a solution for every app. But if you need to spin up an authentication/signup system pretty quick, this is a pretty simple way to go.
Thats a great primer for php! Excellent.
This would be the best solution IMO because you can see all of your bottlenecks and step through your code to see how many function calls you're doing. XHPROF is also another tool you can use: https://github.com/facebook/xhprof Also check out http://xhprof.io/ for a nice front-end GUI for it.
write a scraper/crawler, if ya wanna get fancy, link it to a db...
Check out this post from a couple days ago for a good look at hashing options. (TL;DR: PHP has some new functions that make it easy to use bcrypt. use them.) http://www.reddit.com/r/PHP/comments/11awtr/password_hashing_in_php_youtube/
wordpress and codeigniter doesn't have to utilize composer, as composer can download files (and extract them) automatically. Regardless if the origin have ever heard of composer. http://getcomposer.org/doc/05-repositories.md#package-2 Just sayin'
I think this is a OK source for people coming from other languages to php but not for total novices
I never had any problem. I use MAMP Pro to run PHP/MySQL and I can manage my host with no difficulty. It also manage your SSL like a charm. 
I'd heard the term mysql injection before, but never knew it was so simple to understand
xdebug and kcachegrind are certainly an option. Another one to look at is installing a separate copy of the code in Zend Server CE, getting Zend Studio (trial for 30 days), and learning how to do some profiling with it. It's convenient to profile the same code multiple times, with various changes, and compare the before and after runs, with full stack calls recorded. End of the day, it's going to be similar data than what you'd get from xdebug, but I find the interface to be more convenient than kcachegrind, and being able to click directly to code and jump around is useful. This notion of "well, I think this part is what's slowing things down", or "that query is probably slow because of XYZ".... why guess? Profiling tools are available - use them. Find the bottlenecks, develop a plan to reduce the speed, and get cracking. In many cases, it may *be* SQL queries, but there may be some inefficient coding going on as well that may be easier to fix than just adding more indexes. But in any event, don't just guess - profile and have hard data. 
I've run into very obscure issues with line endings in the host file, DNS in general, apache not telling what's wrong (had to dtrace to get the error), apache bench not working. Overall I'm quite happy with it. I have a decent unix environment and can install anything that's missing (GNU coreutils, git, most C libs) via homebrew. Oh, and the OS in general actually works and looks good.
I created the directory and used 755. The directory is owned as my user. I am also invoked it through the shell ($ php test.php), so there shouldn't be a permissions issue.
Almost none, really. I build my own stuff from source, and need only minor tweaks to my build scripts to make them work on the Mac. The one thing that occasionally bites me is the case-insensitive filesystem. This can create problems, especially with mysql. There's some setting like lowercase_table_names (too lazy to look it up) that sort of helps, but you can still get bitten. Bitten meaning, you do something that works fine on the Mac, and then when you run it on some linux box, it breaks because you mis-capitalized something, but the mac didn't care.
I do the same, though I'm running php-fpm behind apache. As I said in a reply to the OP, the only thing that ever bites me is case-insensitivity in the MacOS filesystem.
&gt;Essentially, interfaces create a simple means by which you can say "here are the methods that can be called on a class, which are guaranteed to be there, and guaranteed to have these parameters". can also be implemented using abstract functions and classes. I personally find myself using abstract functions/classes 95% of the time and interfaces 5% of the time.
Abstract classes require a point of common inheritance, though. If you want an observer pattern, you don't necessarily want a point of common inheritance. If you're writing database wrappers, you might want to be extending the underlying extension class, without a point of common inheritance.
&gt; People coming from other languages to php I don't think those people exist... Only the other way around.
Until you post your code to a paste service or a space guy opens your code. How to you guys solve the idention then? Always fucks up for me..
I second the issue with the case-insensiteive FS, especially when using autoloading. You can get the capitalization incorrect on the filenames if it is based on the class name, but when you deploy it to a Linux/UNIX you'll get missing class errors.
What are you opening the code in, windows notepad? Proper IDEs will recognize and properly open both tabbed and spaced files.
Surely it depends on whether you know what your target deployment environment is? What advantages does a VM have over OS X if you are writing an open source application, for example?
Does it work when you connect in with a regular sftp client (eg: winscp)? Do you have access to the ssh logs? Is there anything in there? Can you start up a second ssh daemon on a different port with a higher loglevel to test with? It will output basically every command it receives as well as any errors that may occur in effecting them.
Some people may have time to poor over tens of thousands of lines of code and actually take the time to *understand* that code, but I doubt it. I'd personally never get anything done if I needed to get that in depth with everything.
Don't be afraid to duplicate some code if it lets you unduplicate other bits. You can't just pull the legs out from under chair without it crashing to the ground. It still has to have legs. 
First of, thanks for the constructive criticism it is much appreciated :-) &gt; better separation of concerns (your user class for example does way too much and in general separate out code which interacts with the DB) All database interaction is contained in a Data Access Object which is written for the individual database, for example if you implementation uses mysql, you need to have a set of Data Access Object, which are designed to work with the mysql syntax. I know someone would say, that it is overkill and that us true as long as you are working with sql, however if you are working with mongodb that generic sql class does you no good. &gt; avoid singletons/use DI I believe that Singleton are good in some cases, I know that it is a bad idea if you are using TDD, and yes; there are some uses of Singleton in the framework that i would like to change. But in some cases I believe that a Singleton class is a better solution. &gt; split classes/interfaces/etc. into separate files rather than placing them together I'm trying to do that as much as i can, but some I like to keep somethings together, and the way in which the class loader is build, it really doesn't care where you put your classes, as long as they are in files which are in the class loader search path, you should take a look at it, I think it is pretty awesome: https://github.com/Corelib-org/Base/blob/master/Base.php#L390 I haven't have looked at symfony2 however i have done some work in symfony and tbh i found it annoying to work with. Once again thank you for the criticism, we have some issues and problems that your suggestion could help us solve. Thank you very much!
First of, thanks for the constructive criticism it is much appreciated :-) &gt;I think you seriously need to look at following a proper naming scheme (PSR-0 ideally) so you can avoid stuff like this: I don't see how PSR-0 could help me make that class name any shorter, from what i see my class name would just become, however if you have another take on how i should name those long class names, I would love to hear about it: Base\DeveloperToolbar\ExectutionTimeCalculator Regard to you comment about the "incode" comments, as said by SkepticalMartian, it is not for human consumption. And as fore comments like this: //*****************************************************************// //****** File system HTTP GET request handler Class Methods *******// //*****************************************************************// They work as a separator, which can be used to separate the code into groups and allow you to find those groups by scrolling down over you file.
I don't know anything about django, but we have a Codegenerator which generates everything (Data Access object, the models, page controllers and frontend for listing, editing and creating)
Also if You start to use this project You also could run automatic code refactor so it uses specific standard: http://cs.sensiolabs.org/
While you're right the name would still be long you get a couple of benefits from using a namespace instead of putting it into the class name. Firstly you can alias it using USE so you can say use Base\DevelopmentToolbar; $foo = new DevelopmentToolbar\ExecutionTimeCalculator(); Secondly when you're in a namespace you don't need to reference it so within the calculator class itself it would be able to reference any other class within DevelopmentToolbar without needing to specify a namespace. Finally PSR-0 was developed to allow inter-portability of components between farmeworks so if you're already using it you can much more easily implement third party packages into your code.
Tabs for indention, spaces for alignment.
HI.........
Novices are exactly the people this site was created for. PHP The Right Way was started as a combative measure against the thousands of old and outdated tutorials and guides teaching people the wrong ways to perform common tasks, such as interacting with databases. The entire goal of the site is to get novices using the correct methods from the start.
That's the new way to do error reporting in 5.5. You have to write four bullet points and then subtract 1 from 3 and then OR it with E_ALL and so on and so on. I know it looks a little pointless and cumbersome but I think if you give it a chance you'll love it.
Oh, sure, that's what I do as well. And it mostly works. But every six months or so I end up with a typo in a SQL table name or something, and I don't catch it until I deploy to the testing box running linux.
Yeah. The idea was to make it easier on a user. Currently get_user_input() is used. To keeping current functionality intact, I figured if it were possible, it would be nice to extend the functionality. But I agree with you and think I'll just remap the original function to a new one and call the function with different inputs.
None, because I just start up VirtualBox and load a Linux virtual machine.
We tried Phabricator a couple of months ago, but currently it is still under heavy development. The workflow is pretty flexible, it supports review (pre commit) and audits (post commit), but it's really hard to keep track of code review progress. It's also hard to see a big picture of the overall review process, and separating reviews into different projects is primitive. We're not using it anymore, we want to switch to some other code review tool...
You should be using a script as mail processor, for example mail_sender.php. That would be the action in your form. Inside that script, you read the $_POST variables (validating properly with filter_var, etc), and then proceed to create and send the email. On success, you redirect to a thank you page (for example, header("Location: thankyou.php");). On failure, same thing with a oops.php.
Yes regular sftp/ssh works fine. I tried with a log level of debug on ssh and it didn't tell me anything useful. I don't know of anyway to log the commands and output from a ssh session. bash based logging doesn't do much.
Non, I use MAMP Pro, keeps my working environment separate from what Apple provides, and keeps my hosts file clean when using vhosts.
I looked into that possibility once, but saw lots of horror stories about things breaking if you ran the filesystem in case-sensitive mode. Maybe it's better now, I don't know. I've gotten pretty good at just being careful, so it's only a very infrequent annoyance. Not worth the whole nuke/restore cycle, to me, anyway.
Yes this, it makes getting up and running so much simpler, and leaves me to get on with writing code.
I think a simple work around would be to enable the machines, or actually the applications running on those machines, to be compatible with each other's password hashes. Like adding metadata that defined the algorithm used. Might take more time to build and even more to actually deploy (depending on your database size), but **any work around is far better than having plaintext or decryptable passwords**.
This. I think the guy above you was just fishing for this reply, really. âˆš
If you are building PHP apps on a Mac then you suffer the same potential headaches as anyone building an app locally on a different OS to production: so don't let your systems be different. I use Vagrant to set up virtual boxes and develop locally to match my production environmeny: http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/
Thanks for the replies so far everyone. I am starting off with going over html and css, from there I'll check out all of the suggestions. I have another question now; what sort of developing tools or editors do you guys like to use? In school classes we stay away from using anything like eclipse which "assists" the programmer a little too much for our professor's liking. Since I am self learning web development, what do you guys use? Is there a general consensus about regarding which developing environment is "best"? Is it best to learn using a simple editor like Notepad++ over something analogous to eclipse? Thanks again!
Uh you do realize the PHP runs when the page is requested not when the link is clicked, right?
I disagree that his final point is nit picky at all. In fact you kind of explained why.
It is great. I use the standard version of MAMP (free) and that still fulfills my PHP/MySQL needs perfectly! : )
People downvoting you are bad, and they should feel bad.
Oh, well, yes... that :)
I think that's mostly avoided because it's not meant to nor will it ever be a production-ready server and for good reason... it's not meant to be. It doesn't have the extensions or add-ons (at least, last I checked) that you would need to make it such a thing. Any developer trying to do something meant for production with that server will (or should) realize pretty quickly it's a bad idea. Point taken though!
The whole point of the built-in server since day one was to test one-off scripts... never to run any sort of app. People use PHP for more than just web apps or web pages. There have been countless times I've used it... it's quite useful. I also have a variety of nginx and Apache servers.
You sir are a god among men, thank you.
It's an advanced feature, so novice web developers likely won't even realize it exists (hell, a lot of experienced web developers don't even realize it...). Most novice web developers don't even get into the CLI on that level and stick with a standard LAMP build.
That argument can be used to debunk anything making it pointless.
&gt; However the problem I see, is developers expanding on this, and using it as the norm. Are you suggesting that the internal developers are going to expand on this to make it a full blow production web server? &gt; I would happily take my comment back, if the PHP web server was production ready Tools don't have to be production ready to be valuable. Every other language has tools available that aren't production ready, that are meant only to be used in development. &gt; If you run Apache in production, use Apache in dev.... dev should match production... That's not how development works. In any language. From C on up. What it provides is simple and painless, and any professional will realize what it's for and use it appropriately. Can it be abused? Yes. But name me a language that can't be used to shoot yourself in the foot, and you'll be naming things that don't matter.
No, your test configuration should be as close as possible to production. Dev -&gt; Test -&gt; Production
I recently built an error reporting library in PHP. It's only 4,000 lines, and a good chunk of that is HTML/CSS/JS, yet most of the bug fixes for the last few months have been web server specific. Just last week I was having to work around IIS specific behaviour. I've had similar issues in the past with Ruby, Java, and others. I've been there and shipped code that I believed was tested, and then fell over randomly in production, and the issue was a clash in how my dev server and the one in production operated. Lesson learnt; it does help if development and production are as close as possible. Otherwise subtle differences can, and will, creep in and break your code. This is compounded by that fact that many small web developers do not have the time or inclination to have a like-live server. So no matter how much testing they do, these differences only show up when they deploy the code to a different web server, which happens to be production. That should not be encouraged. Besides how painful is Xampp really? Or one of the many alternatives? My copy of Apache runs automatically, and I can restart it with a single click on the taskbar (literally, just one). That is actually less work than the articles example.
Poorly written article that doesn't touch on anything about why people dislike using PHP.
&gt;PHP is not so much easy to learn, as it is easy to get away with not being good at. The irony really becomes apparent if you start looking at the Symphony 1 codebase.
Which is why SF2 was so warmly welcomed.
Why would he? He set out to highlight the good parts. This *is* just an opinion piece after all.
&gt; If you have the ability, use SSL at least for login. I'd say if you don't have the ability don't allow the user to login. Is there any good cases for this not to be mandatory? I always assume the person is in a cyber cafe sitting next to a hacker with Wireshark on.
Of course it works correctly when you add +2. Assume $page is 2. On "Previous page" you subtract 1, leaving $page at 1. On "Next page", if you add 1, $page will be set to 2, which is the page number for the current page, not the page following it. If, however, you add 2 instead of 1, it'll equal 3 (1+2=3), which is the page following the current one. 
Upvoted for misunderstood sarcasm :( 
I've seen that, PHP 5.5 isn't released yet though is it?
No they can't. I'll stab everyone before they get the chance to implement it. 
i like and i dont like this article. PHP is a web language. it is a script language. it started there, and all the whinging about it not being a language isnt going to change that. The web is a unique environment to build apps in. its not like C where you have access to hardware, its not like visual basic where you have access to a plethora of objects in software. Its a web language. It runs within limits and does it very very well. Some would claim its a hack, well yes it is, but so is the very nature of the web itself. Ive been working with PHP for over ten years now. Ive worked with some pretty smart people, and some people that think they are pretty smart. And it comes down to vanilla programming. Forget the frameworks, if you can code pure vanilla then a framework is easy to implement. PHP is a powerful language set, it offers a very large range of contructs to model into your applications and provides for direct and unique web constructs. My thoughts are that people need to recognise its place along with other languages of Javascript, HTML and CSS, that it compliments the web perfectly as it was hacked, then designed to do.
Just thought I'd point out that you seem to have confused things. PHP is a server side scripting language. This means you *do* have access to hardware. Hell, you could use C to code your web apps if you want. It's just not a language designed specifically for it.
That's all very well and good, but does not in any way negate what I said. Nor does it contest the PHP's built in web server. Unless you are positing that it will be easier for novice web developers to setup PHP 5.4 on a hosting environment and to run the built in web server over simply using the environment already installed.
Just because they are in PHPUnit doesn't mean they are integrated with your unit tests. You can use a 2nd configuration/test runner, which is what we do where I work. When testing web apps we still need to assert that certain things are true or not, so why not use PHPUnit and the framework it provides to drive that?
Yes.
Could use documentation. But it appears you need PHP with ext/gd and likely composer. git clone https://github.com/react-php/gifsocket.git cd gifsocket curl -s http://getcomposer.org/installer | php php composer.phar install php server.php
First: Utilize crypt() http://www.php.net/manual/en/function.crypt.php I've seen people implement classes that didn't even understand what it did. It was essentially guesswork on their part, and when they designed their app, the API failed them at certain times when they didn't account for something. So very important: know the classes you use. ESPECIALLY WHEN DEALING WITH AUTHENTICATION. Keep authentication as simple as possible. Way too many people make authentication a monolithic class - when in reality a small snippet is needed. Arguably, this is relative to your domain. There are many authentication libraries available that already take into account bcrypt, salting, etc. I'd suggest looking into some of these. Simplicity along with a good hashing algorithm like bcrypt will be sufficient. Remember - the more you add to an authentication process, the more that can go wrong. I hope this was useful. 
Thanks ! Great videos
I don't suggest PHP books. The language moves very fast. I suggest going through http://php.net/manual/en/language.oop5.php first, and making a class that includes everything on that page. Ignore most any comment, as PHP.net displays 5 year old comments. Then, install and try out http://symfony.com/doc/current/book/index.html , it's a very light framework that forces you to use OOPHP in the MVC style. Make a basic contact form that saves to a db. Then hit up chapter 6 in http://www.tuxradar.com/practicalphp - it's O'Reilly's content in there. Really, everything on http://programming-motherfucker.com/become.html is awesome if you want to learn X, Y, or Z language.
&gt; Like I said, the "proper" way is the way that comes naturally, and that's what should be catered to. No, you said it should have two versions, one for advanced users and one for beginners. That is what I was replying to. At no point did I say PHP is not proper language, and even then I don't understand why you took that idea so personally. It's just a programming language, nothing more. What I meant by 'proper', is that presumably the advanced functionality for advanced users, is the right way to go, the 'proper' way. Otherwise advanced users would not use them. So if that is the proper way, then why bother with a beginner version?
Basically what `crypt()` does for you already?
Vagrant is a MUST, especially if you have specific requirements that the environment must meet, but you do not want to burdon your host system with. If you bring in puppet it really starts to shine.
Silex. Micro framework built using symfony components. Easy to use and integrate with other things. Runs as a single .phar file.
Cheers, added a note about composer and also listed `ext-gd` as a dependency.
OS X only is going to make this pretty useless to most people. It should at least support popular Linux flavors.
Sounds like you've got the wrong idea here... just do something like function get_page_content($something = '') { if ($something != '') { //your new functionality here } else { // old functionality here } I know it isn't that elegant, but any old function calls will get to the else, while any new ones you make could pass some info you are going to use with $something. But if you are using a CMS system, why would you be changing the way it calls the page content in a plugin? It's a little confusing, but wouldn't you want to extend what it does in an object rather then rewrite it? I have no idea what i'm saying now, cause this really isn't making sense. 
I feel like it was un-needed as most people who criticize PHP already realize these good parts.
Proper is the way(s) that aren't full of security holes (register globals), don't have nasty invisible side effects (returning things that == 0 for both good and bad cases, and requiring explicit error checking to figure out which is which), etc. Some things are a matter of taste. Some are just *bad*. PHP is getting better, but it's filled with outright *bad* things that are still in the core. Yes, most of them were written years ago. Yes, the worst things like register_globals and magic_quotes are finally really truly gone. That doesn't excuse the crap that's still there, or the slightly-less-crappy things that are still being added.
Before someone says "what crap is still in core?!?!" and makes me provide sources, this woman is doing a better job than I can, and is not getting the attention that some of the other very-well-known articles are getting: http://phpmanualmasterpieces.tumblr.com/ Her most recent article is a little weak, as she's tearing apart a comment on the manual pages (though she does bump into a very weird behavior of PHP core). Look at all the others though. The amount of strange behaviors or why-is-this-in-core she finds is astonishing. I don't have the persistence to find all those things, but I have bumped into a LOT of weird crap just using the language day to day.
Maybe in a years time when ZF2's documentation matches the code and it's come out of 'beta' phase and sucks slightly less... then it'd still be too slow and bulky for most sites. LMAO. The 2.0 'FINAL' release is absolutely bloody laughable.
The Symfony community will mourn losing you.
Wow! This looks great! Good Job! Wish I wasn't on windows =(
You raised very good points here, I'm going to work on this, including increasing the trial time :)
Not really, it works.
Crashed once for me. Worked another time but got a Segmentation fault: 11 as soon as I tried to step/continue. This is with the CLI. Would love to have this working so I don't have to use a big bloated IDE to debug. 
[Fat-Free](http://bcosca.github.com/fatfree/)
well, yes and no, C gives you direct access to memory and stuff like that. The web is a very fractured place to build in, you use services now from multiple tiers, you tie all that together with local databases and services, PHP seems to have built its life around this aspect.
Please read the docs http://www.codebugapp.com/wp-content/uploads/2012/10/CodebugDocumentation.pdf Hope this helps if not let me know
codeigniter
I like Limonade an awful lot. http://limonade-php.github.com/
Check out the cache classes in doctrine/common. The interface: https://github.com/doctrine/common/blob/master/lib/Doctrine/Common/Cache/Cache.php All the classes that implement said interface: https://github.com/doctrine/common/tree/master/lib/Doctrine/Common/Cache
It's easier to browse them here: symfony.com/talks Having attended the Paris conference I can recommend a few good talks too * Dependency Management with Composer by Jordi Boggiano should be compulsory watching for anybody not already using composer * Realtime Web Apps with WebSockets by Igor Wiedler was fantastic and really opened my mind up to some interesting things I hadn't realised were possible with php. * wetter.com Had a fantastic talk about scaling the hell out of php with varnish and a few other cool tricks * Advanced Service Container Utilization by Richard Miller is also good but you would want a solid understanding of symfony2 before watching that. * Symfony2 search engine propelled by Solr by Xavier Briand should be great if it is anything like the talk he gave at Paris (the recording is from San Francisco.) It is useful even if you aren't using symfony2, it was more about Solr.
nice branding will give a look sometime
Even 8 hours seems too short. Half the goal of the trail should be getting people nice and comfortable (read: dependent) on the app. It takes a few weeks of use to become dependent.
Yep, multiply the demo time by ~1000. Make it 2 weeks so we can have a look when there's a spare hour to kill.
That's a pretty poor argument against a desktop application imo.
Wrong! It can't be fun and work at the same time. Hasn't society beaten the zeal of curiosity out of you yet? Grow up.
I think you're going about this the wrong way. I think you should prolong the trial period to a month, let the people get used to using your app and then charge them. 20 mins is way too low to make any kind of a connection to an app + it makes you seem distrustful towards your customers.
[Here's a little tutorial to get you started.](http://net.tutsplus.com/tutorials/other/using-htaccess-files-for-pretty-urls/)
Was looking for one recently myself, currently testing [Wave Framework](http://waveframework.com/) that has internal API thing going for it. From Quora http://www.quora.com/What-are-the-disadvantages-of-API-centric-web-applications
Just changed it, it now has a 30 days full trial.
I've just changed to a 30 days trial. This is my first mac app, you guys have to bare with me :P. Hopefully this will give enough time for people to try it out
Hmm gonna try this out. Looks good :D Edit: [Link for the lazy](http://silex.sensiolabs.org/)
Thanks a lot, glad it's working fine for you :) Yeah, the time limit was not a good idea, you guys make me see it obviously was constraining people from trying the app. On the title bar,I was actually thinking of that the other day. Good suggestions still 
My own! Works like charm, never cause any trouble and I know it inside out. **Writen by me for me!** 
Upvote for explaining to him.
http://www.addedbytes.com/download/mod_rewrite-cheat-sheet-v2/png/ rewrite cheatsheet, find a tutorial about "mod_rewrite" and use that cheatsheet. WARNING: Order of rules is important
Yes please! I love SublimeText, but I can't find a debugger that works well with it.
Yea how dare someone ask cash for software!
&lt;critique&gt; Strongly suggest proof-reading the website. &gt; and **your** set &gt;Codebug will shine on **the** new macs &gt;bandwidth ? &gt;Select from **a** 12 beautiful pre-define**s** themes which one fits you best. &gt; &gt;have a**n** php heavy Sketchy language makes me not want to install it. You could also align the text so it doesn't wrap in odd places for the features-list (like under the icon), and matches up with other features (compare 'p' elements for retina-ready and edit-in-place). Theres no 'about' page, either for the product or the dev. A link in the footer is the only thing tying back to 3heap. Makes me wonder why you aren't prouder of it, and want to talk about it more. The [panic-esque hover speech bubbles](http://www.panic.com/transmit/) don't fade out properly too. Might be a chrome bug though. &lt;/critique&gt;
Can't tell if sarcasm... =_=
 RewriteRule ^dashboard$ dashboard.php [L] Should work. Also, as narowelch said, sometimes Apache is configured that if you request /dashboard but ther is no file of that name it will look for /dashboard.html, /dashboard.php etc
Cheers :) I'm actually the developer of that, so if you have any questions then feel free to ask.
Well that's sure a bit of a difference :) Awesome!
Instead of mod_rewrite, you could create /u.php and call it with http://domain.com/u/12345/. No need for .htaccess. - '/12345/' will be in $_SERVER["PATH_INFO"]. That method also works for calling via /index.php. In that index.php file, you could do handle both users (mapped to /u/) and articles (using title mapped to the no directory case) - http://domain.com/u/12345/ -&gt; /u/12345 -&gt; user 12345 - http://domain.com/this_article_name.htm -&gt; /this_article_name.htm -&gt; article named 'this article name' 
hi to all...............
did you have to use google to find it too?.... nettuts search blows :(, and then i came to post it, and you are here with the link... i started using that tutorial, but then i sorta moved more to a php solution. i point all trafic to my index.php, then i use the following script to tear the url apart, and direct trafic where it needs to go. .htaccess Options +FollowSymLinks RewriteEngine On RewriteCond %{SCRIPT_FILENAME} !-d RewriteCond %{SCRIPT_FILENAME} !-f RewriteRule ^.*$ ./index.php top of index.php $request = str_replace("", "", $_SERVER['REQUEST_URI']); #split the path by '/' $site_array = split("/", $request); foreach($site_array as $key =&gt; $value) { if($value == "") { unset($site_array[$key]); } } $params = array_values($site_array); i use some include pages, and one of them is for my main content. on my "content" page i use the following code, to include the subpages needed. //check if any params are set, else redirect to news. if(!$params['0']){ $params['0'] = "nyheder"; } switch ($params['0']) { case nyheder: require("includes/pages/news.php"); break; case info: require("includes/pages/info.php"); break; default: echo "Page not found (404)."; break; you can then use further values on subpages, like news/new would include the news.php and on the news php i could use another switch for the second value. 
Well my whole PHP team is under Ubuntu and sublime is gaining some popularity because it can be used on all platforms and is less resource intensive than eclipse. I would say the argument is not so poor.
my man!
[CodeIgniter](http://codeigniter.com/) all the way.
I like it a lot too, but I'm not a fan of it's function based, support for &lt; 5.3/4 setup which essentially means that it can't be updated for future versions. I'm actually working on pulling out the more useful aspects of limonade and porting it over to a full fledged 5.4+ based microframework. 
http://www.openwall.com/phpass/
Object-oriented programming is a means to organize data structures - simple or complex, into a representable hierarchy of concerns. In larger projects, procedural code can get very messy and hard to maintain. No matter how many years you've had experience in it. MVC is a design pattern that organizes your application into layers. Very briefly: The M (Model Layer) is a layer which is used to conduct business and persistence logic. The V (View Layer) is a layer which takes data and presents it. That's it. The C (Controller Layer) is a layer which acts as a middleman between views and models. It's purpose is to essentially direct traffic: this means taking requests, sending it to the correct portion of the script, redirecting, etc. OO is a very worthwhile skill to have. It will make you a better programmer because it forces you to make reusable code. This means your code won't be so brittle, you can quickly deploy new projects using old classes/modules. I'd encourage you to learn more than just MVC as well - there are plenty of options! I'd suggest starting at the PHP manual with regards to OO. Work through each example and start to learn design patterns so you can implement OO practically. I hope this helps you.
MVC is a design pattern. [There are](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) [several good](http://www.codinghorror.com/blog/2008/05/understanding-model-view-controller.html) [places to learn more about it](http://codeigniter.com/user_guide/). Why OO over procedural is a bit fuzzier. The answers you will typically get are: * Maintainability - If you follow a good OO pattern, and think through your data model, it should be much easier for a new developer to quickly find the point of entry for a bugfix or feature add. * Re-usability - Since actions are typically specific to objects, you can code them in place there, then re-use them as needed. * Flexibility - If, in a procedural program, you need to add a feature that's very similar to an existing one, you usually end up with some spaghetti-y string of functions for re-use, or two functions that share 80% of their code. In OO, you can use inheritance to avoid this. Why not something else? Valid question. If anything, MVC provides a good gateway to OO and design patterns. Since you're already used to PHP, it gets that much easier. When using jQuery, you actually open the door to using any of (at least) 3 totally different design patterns. Basically, MVC in PHP is most likely your path of least resistance.
Could you elaborate on the splitting of the Domain Model and Data access object?
Kind off, that's the fundation of it. For example, calling http://domain.com/user/view/15 in the fine framework [Yii](http://www.yiiframework.com/) would be maped to UserController::actionView(15)
I think inheritance plays a very big role here. Essentially you can call the same function with the same variables and have it do completely different things depending on the context (ie. the object) without having to resort to complex branching or anything of the like.
Absolutely, another excellent benefit of using objects.
I built one long before most all the micro frameworks. Then rewrote it several times as the years have gone by. Despite having everything from an ORM to GD libraries, it's still the [fastest and lightest PHP framework](http://www.ruilog.com/blog/view/b6f0e42cf705.html) there is. However, [MicroMVC](https://github.com/Xeoncross/micromvc) comes with *zero* documentation outside of the heavily commented source. If you know what your doing, and can read code comments, then you might like to give it (and the examples) a try.
&gt; like debating with you why you should get a College education Yeah, I really fucked up by getting hands-on experience instead of buying into the social contract. Especially in an industry that prefers experience to a degree.
Okay, cool. I haven't used a PHP framework yet (although I tried symfony 1.4) but I've used .net mvc and that caught my attention. Cleared some things up actually.
&gt;No. Most users will continue to do things the "wrong" way regardless of how much the language holds their hand. One of the major mistakes PHP made early was trying to cater to the novice demographic. It gave rise to things like magic_quotes_gpc and register_globals. Don't dumb things down to the novice's level - bring the novice up to the professional's level. That's the wrong way to "fix" a language anyway. Proper language and API design is concerned with making it easy to do things the right way and difficult or impossible to do things the wrong way. Since doing things the wrong way is much easier by default, extremely careful language and API design must be employed to invert the relationship. The result is that doing things the right/easy way in C#/Java is still much, much more difficult than doing things wrong in PHP. People don't understand why all I/O has to be a damned stream in C#/Java for example, until they do.
Nah, he just needs to change the way he looks at things. A programmer should not fight against the way other people do things, he should always check it out and see if maybe it really is better. Otherwise some young upstart kid and technology could replace you some day. And if you hear a lot of people talking about OO and MVC, you should assume there's something to it (there might not be, but why risk it?). Better yet, don't just learn what OO and MVC are, learn *why* they are. Learn what problems they solve (not all of these are programming problems). MVC on a project with 1 programmer and 100 lines of code would be really dumb, for example. Every bit of knowledge is another tool for your toolbox.
You are right, if he is still writing programs of that size after six years he is not ready to learn OOP.
But of course. It's important to remember that writing code is only half of a Software Engineer's job.
You can read [this](http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html#a-simple-blog-in-flat-php) if you want see difference between MVC and procedural approach from coding perspective. Also check out the excellent [answer](http://stackoverflow.com/a/5864000/1218997) from [u/teresko](http://www.reddit.com/user/teresko). 
Very interesting. My code has evolved over time to be very similar to the procedural examples right before they add the Symfony2 libraries. It does become far easier to maintain code when all your functions are in one place and called when needed. Functions that interact with the database are cleaned/escaped. It's probably inaccurate to say the issues at this point boil down to syntax but I feel like I'm already observing many modern best practices, just not the big one of using objects and classes where I currently have functions and variables.
Thanks for this wonderful explanation! 
The conditional is the object you're working with. It applies to objects that are related to each other. Let's say Foo is a class and Bar and Baz both extend Foo. Then let's say Foo has a function called printStuff(), like so: class Foo { public function printStuff() { echo "This is some stuff!"; } } When you do $object = new Foo(); $object-&gt;printStuff(); Then the output is obviously "This is some stuff!". You can however overwrite the function inside an inherited class, so doing this class Bar extends Foo { public function printStuff() { echo "More stuff!"; } } and then calling $object = new Bar(); $object-&gt;printStuff(); then the output would be "More stuff!" However, if you don't redefine it in a subclass: class Baz extends Foo {} and call the same code $object = new Baz(); $object-&gt;printStuff(); then the output would still be "This is some stuff!" This can come in extremely handy. For example, I recently dealt with a shopping cart type system that needed the fee of an item to be calculated differently depending on the item. So some things had a fixed fee, some things were free up to a certain quantity etc. Instead of having to check what item I'm dealing with I can just do $object-&gt;getFee(); and that's it.
As someone who occasionally trains people PHP OOP, I would like to have permission to use this explanation on my next session.
Ehh I disagree with this as a blanket statement. You "should" be doing what works for your project, and honestly if you can avoid having to set up and configure (and run) a separate VM in your environment, great! OS X, combined with Macports or Homebrew, can be a perfectly suitable native development environment for lots of web-based projects, if you understand your dependencies well enough. (at least the same understanding that you would need in order to set up a separate VM for development). I've built many PHP and Ruby projects locally on OS X and have never had issues deploying to production Linux servers. Another poster has a good point about Apple updates breaking things, but if you use Macports or Homebrew then you can run your own server apps like Apache or MySQL and not rely on the ones that come with OS X. 
If you're just "assuming modules are available", then going from Linux to Linux won't isolate you from those problems. As long as your project's dependencies are properly resolved in both environments (dev and production), the environments don't necessarily have to match otherwise.
Who forked a branch up *your* ass?
I think this one would be even more noteworthy: if (!is_int((int) $id)) { // st0fz }
Grats to /u/ircmaxell !
Absolutely, use it for whatever you need :)
You explained MVC beautifully. Now it makes sense. Any easy to understand tutorials or articles to help beginners that you can suggest ? 
Then submit it, this subreddit is has a low submit rate anyway, these posts help liven it up.
I don't know OOP PHP, but I do know Objective-C. Objects are just... *really convenient*. The whole idea is to create new data types to fit your needs, with their own functions. Of course, if you're using jQuery, that's already OO. Well, it's not exactly OO, but it's close enough. Objects have their own data and functions, etc. I think that OO is a fairly arbitrary boundary, since all an object really is is some data and some functions. OO makes it simple to set that up. Objects are also useful to keep your code neat. It's like putting your books on labeled bookshelves and your clothes on hangers in the closet instead of everything all over the floor. As for MVC, the problem it really solves is frameworks. I'm speaking from an OS X development point of view, not PHP, so what I'm saying may not apply directly. MVC is model-view-controller, and all it's saying is that you should keep your model, view, and controller separate. Well, not "should"; it's just the definition of MVC. This means that you have some code about the actual data you're dealing with, some other code about how to display that data to the user, and some other code to coordinate the two. Not an example but close enough is the idea of CSS files and not using HTML tables for style. It's separating your presentation code -- your view -- from your content -- your model. There *is* a controller in this case: the browser! On the Mac, pretty much every application looks the same. The reason is simple: it's all built with pre-made UI elements. Those are built on top of the Foundation framework, which includes the strings and arrays and whatnot (nothing is built into the language). These pre-made classes all interact with each other, and the engineers at Apple (and NeXTStep, back when that was a thing) decided to make MVC programming easy. The methods and protocols are optimized to cater to that programming philosophy. An NSTableView, for instance, has a dataSource, which it queries to populate its rows and columns; it has a delegate, which gets a chance to respond when something happens. This means that your model -- the part of your program that has the data you want to display in the table -- doesn't have to worry about displaying the data. The model can just focus on producing it or calculating it or whatever. The table will ask the controller when it wants something -- note that this means that you don't need to actually write any code for the table, just the controller -- and the controller will get stuff from your model in the proper format. You can also much more easily have different people working on the model, the view, and the controller if you separate them. If they're all together, well, that's fine for small applications, but if you have a team of people working on it, it's difficult for one person to have to learn everything in order to make small changes in one part. So long as you have a consistent interface between them, that is! So, I wouldn't worry about MVC or OO unless you actually need it. And I'd recommend playing around using an MVC framework -- in some language, doesn't have to be PHP -- to see when it's a huge time saver.
no issues so far. I use Macports to install all the software I need and deactivated the software which ships with OSX. No conflicts or errors. It works.
as of PHP 5.4.0 **my statement** from above is false.
Looks very cool!
Codeigniter, for example, lets you create your own routes. [Here are the Routing docs](http://codeigniter.com/user_guide/general/routing.html), you could create something like $route['u/(:any)'] = "user/single/$1"; Which would map the call to the User class' single() method, and pass in the username as a parameter.
Here's my simple analogy: **OO** &lt;is to&gt; **proceedural code** ..as.. **defining functions** &lt;is to&gt; **copy and pasting**
http://www.phptherightway.com/
As somone who bought myself an OOP book and has been trying to motivate myself to re-learn, this has just done it. Thanks!!
http://news.ycombinator.com/item?id=4663919 for some better comments
[Relevant](http://www.reddit.com/r/PHP/comments/zrprk/the_new_secure_password_hashing_api_in_php_55/) 
This really doesnt have anything to do with OOP. You're merely comparing encapsulated programming with linear unencapsulated mess. It may be in some sense easier to encapsulate in a reliable way with OOP, but it is just as easy to use it as playdough. In otherwords "worst practice procedural programming" (most popular php projects) with "best practice oop programming" (relatively few php projects). For example, it's entirely possible to have a proceedural (or even functional) MVC framework. MVC is an architecture, not an OO design pattern. 
[Perch](http://grabaperch.com/) might be a good, simple option. 
Thanks, that really helps. Extending a class finally makes sense the way you've explained it.
Put data in a database, flat file, etc. Pull it out with PHP. Put that PHP code in your website. Format for display. There are upteen million ways to do this, if you want to be a better programmer, part of that is figuring it out. Play with different solutions, explore, learn, get better.
I just don't understand why they'd have to go in comments? What's wrong with just something like @Column(type="string", length=32, unique=true, nullable=false) protected $username; C# does it similarly, [SomeAttribute] public function foo() {} It's a different syntax that has a special meaning given it's position, and it wouldn't get stripped if you had something that yoinks comments. Further, it's not as 'ugly' as something like defining '$mapping' like he did. Metadata/Annotations are a wonderful thing, they just have no business existing in comments.
&gt;Comments should not be functional, that's why they're comments. That's the long and short of it.
This guy: [surreal cms](http://www.surrealcms.com/) You host static or even semi-dynamic sites on your server and when you want to edit them it uploads new files via FTP. you can select editable areas in the HTML.
It's a great way to learn, but be very careful deploying your own solution on public websites. There are so many easy mistakes to makeâ€”mistakes that even pros make from time to timeâ€”that are compounded when you're just starting out. Sanitising form inputs, accounting for password hashing, and other security fixes are obviously the big ones. Be absolutely sure you're confident in your code (and perhaps have someone experienced you trust look it over) before you launch or you might be putting your website (and hosting account) at risk. Good luck!
And solves my only complaint! :D
What would happen if the usernames contains characters that can not be used in the URL? I am hitting a similar issue as the OP soon.
Annotations aren't really comments though. They a specific sub-set of comments mainly designed to be consumed by automated processes (doc generators etc.). Why shouldn't your own internal processes be able to leverage them for this same purpose? Particularly in cases where it decreases coupling between components - i.e. doctrine. Why should my domain objects care about the persistence layer? They shouldn't. So it's got to be either annotations or config files. I personally prefer the former because I hate managing lots of config files.
Placing annotations within comments really doesn't bother me that much, but I think we would all prefer built in syntax for them. As for *why* we currently have them in comments, that seems obvious: comments are the only place you can put invalid syntax, and PHP won't throw a fit. The author's suggestion to use static properties really isn't all that elegant though. While it does stick to OOP principles, and it's no doubt *much* faster than parsing comments, it has a couple flaws. First, we currently don't have read-only properties, which means the static properties break encapsulation. This could be solved by using a static function. Second, and this is more important, you're defining meta data related to functions some where other than the function. There are many of us that feel that approach is awful. The author's arguments against comment based annotations really aren't that valid either. &gt; You can't use any of PHP's helpful linting capabilities (php -l). &gt; Try to var_dump() or debug_backtrace() an annotation. You simply can't. These capabilities are handled by the annotation parsing libraries. &gt; Your IDE can't link to classes in which an annotation is defined. There's nothing stopping any IDE from doing this. PHPStorm, for example, has great annotation support. &gt; Sometimes, developers set their editors (like vim) to automatically fold comments in order to save screen space. In this case, they may never actually see the annotations that are making your code work. Yeah, and I fold my methods/functions too, and they *really* are the stuff that makes my code work. &gt; However, annotations do not necessarily make sense to a developer who knows PHP perfectly well, because they are not native to the language A PHP developer sitting down to a new framework has *a lot* of new stuff to learn. Annotations are only a small part of it.
I agree on all the point he made. 100% agree and yet I still use them. In my business logic, there should be as little as possible framework glueing code. (annotations strip those outside)
Thank you very much, I will try it :)
At least in the case of Doctrine2 they *are* just comments/documentation. They have no effect on the internal behavior of whatever entity they're annotating. They're just documentation hints (configuration, really) for code that consumes the annotated code. If you don't like that sort of thing in comments, you're free to use external configuration files. 
It's a shame you've been downvoted. At least as far as Doctrine is concerned (I've not really played with Symfony2, so maybe they go overboard), the classes that get annotations are supposed to be completely oblivious the the code that consumes the configuration data kept in the annotations. And, you're welcome to put that configuration data elsewhere (config files), though that quickly becomes a chore -- much easier to keep the configuration/documentation right there next to what it's documenting. 
My First Year Comp Sci professor described a procedural engineer making a build and an OO programmer making set of 10 bridges along a river. The Engineer is going to measure the first bridge and build the bridge exactly to span it, then move to the second. The programmer is going to start with a basis of what the user needs, then study the deployment area, then build a bridge that works with the users requirement and the deployment requires then deploy it in all 10 spots. 
Comments should not alter what the code *does*. They are, after-all, comments.
why not ```php public/private function &lt;name-here&gt;($arguments, ... ) meta ['key1'=&gt;'value1','key2'=&gt;'value2'] { }
&gt; That's the long and short of it. That's the TL;DR
https://wiki.php.net/rfc/annotations
Annotations are stripped with all comments when using opcode caching. Bad.
1. I didn't add the ini settings for the OP's benefit, but for other people which might come across this post. 2. OP didn't want SSL/TLS. 
Persona's nice, but still pretty young. I wrote up a tutorial on using it with PHP if you're interested: http://websec.io/2012/10/01/Using-Mozilla-Persona-with-PHP-jQuery.html
Having a separate framework for just an API seems...backwards. The application should be the API - the framework you use should support this.
Is this satire? You're usually for "facades, decorators, bridges, abstract factories, DAO/DTO", objects, controllers, routes, etc. And you think all this Java-ish cruft is the "higher language world". And you think you're qualified to lecture people about over abstraction? AHAHAHAHA. 
This is a close version of what I tend to use: http://reat.space.qinetiq.com/ssat/docs/ssat_ssd.pdf I usually have a section that lists out the functional specification of the project. "It will do this, this, and this. It's web based, has an API, and a desktop app, and a phone app." I break down each of the functional pieces and what they do. (Section 3 of that document). I use that then to build a technical section to cover what needs to be used to build the functional pieces. (Section 5). I list out what each technical piece is, what it should govern, how it should be interfaced, and other specifics. So if I'm building an API, I might specify the actual API here, being a REST interface. The web app will be JS and require these other things (modal dialogs, REST client, etc). I usually have a section for what technologies will be used. List out the supported platforms (Linux, BSD, OSX, Chrome, Safari, Android), the languages used (PHP, Javascript) and the libraries (jQuery, Backbone, require.js). This keeps people from saying "Hey, I'm going to build this chunk in MooTools just because I found a tutorial for it" I also make sure to list out assumptions and potential pitfalls so they are documented. For example, if you notice that the project isn't fault tolerate but you think it should be, note that and you might need to change. 
gooby, plz.
I updated above to answer your first question, as for php 5.4, nearlyfreespeech only goes up to 5.3. I tried it and the result is the same.
What you mean to say is that annotations don't benefit from an op-code cache. And that would be mostly true. In general, annotations are compiled to some other PHP code, stored on disk, and that PHP code benefits from the opcode cache when it is included.
&gt;nearlyfreespeech only goes up to 5.3 Then dump your crap web host. &gt;I tried it and the result is the same. It's not about whether the code will run, it's about keeping the technology that your site runs on patched and up-to-date so your website won't get compromised due to some security hole in the software. &gt;I updated above to answer your first question, Your server environment is misconfigured. Also, you really shouldn't be following that tutorial you are using. It's ancient, uses deprecated functionality and uses false security measures. You're tons better off reading the stuff in the PHP documentation. Start here: http://www.php.net/manual/en/getting-started.php
Here's an article on the subject with actual, meaningful tests: [Charlie Somerville - There is no performance difference between ' and " in PHP](http://charlie.bz/blog/2-there-is-no-performance-difference-between-and-in-php) 
http://www.codinghorror.com/blog/2009/01/the-sad-tragedy-of-micro-optimization-theater.html It might be a different platform, and a slightly different focus, but the same thing applies here. 
Do you have a blank template you use, or are these crafted from scratch on a per-job basis? Aside: "Hedley Stokes" is probably the coolest name I've ever seen in software documentation.
With this token system and SSL I am totaly safe? :)
**Comments on the document:** That traceability matrix is quite neat for linking requirements and features. Not seen that before really. A good tool for larger projects. **Comments on documentation** Basically every part of the process from requirements gathering to design should be documented. Part of it is about gathering tools to put the work you are thinking about on paper. There's some good things to mention here: **Requirements** When I did my University project I started out at the highest level of abstraction. UML Use Cases are quite good for this. In very broad terms you can use Use Cases and Use Case descriptions to gather an idea of the requirements. Note the descriptions are actually the critical bit but people forget and just draw the shapes. You then need to translate that into actual requirements. Contract Specifications are good for this. Try and use of common language and terminology. There's actually an RFC documenting the meanings of SHOULD, MAY, MUST, etc: http://www.ietf.org/rfc/rfc2119.txt **Design** After this you can start with the design phase. Most designs come with various options that you can select from. Whether you split this into a proposal and then the resultant design or switch back and forth is difficult to know. Tools for design include other parts of UML (I tend to use Class Diagrams quite heavily, but they are all quite good). Entity-Relationship diagrams are obviously useful for database design. Other bits of design include how the project is organised. Choice of source code control, time planning and management. Note that there should be a single document for each deliverable, you can have system architecture design documents as well, but there needs to be design done for each deliverable. Obviously the system architecture specific requirements become top level requirements in the lower documents and so on. On the highest document you normally start with the Use Cases being business goals. **Implementation** This should detail issues arising, any problems encountered, location of the deliverables (source code, binaries, manuals, training guides, help files, API documents, etc) **Testing** Of course there's no point doing this without thinking about the resultant testing. If you're doing something better than Waterfall in terms of process, you should probably be doing the tests at the same time. For V-Model or any TDD based development cycle you can also write up tests that should be included. This produces equivalent layers of tests: Requirements Tests (which can be written after the requirements). If you can't write a test it's a good sign the requirement is badly written. Design Tests (which can be written after the Design is accepted). These should be much more specific to the implementation of the solution, but still high level. Unit Tests, which are written before the Implementation. These are the lowest to the system and very implementation specific. Learning to write good unit tests is also important. Code coverage is useful to ensure it's all tested, but 100% coverage doesn't guarantee every pathway is executed. There's articles on this though. **Miscellaneous** The other thing that gets forgotten is meeting notes. Minutes and other documentation are part of the design process. So they should be referenced somehow. HTH Source: My university project report, industry experience, evaluation of other work.
I presume load balancing, in which case, you're probably going to have a shared DB server. Shifting the session storage to the database is the easiest bet. Alternatively you could store session data on an NFS share.
In 5.3+ there is the short ternary but it doesn't work with isset. $somevar = $something ?: "a"; // $something truthy otherwise "a" In short, no, there's nothing built in to shorten an isset ternary
Glad to see that I wasn't the only person who thought this was ridiculous. He had to run it 7000+ times to get a very small benefit.
Most frameworks already have something similar in place. Silex: $isActive =&gt; $request-&gt;get('isActive', 0),
Personally, I'd go with memcached.
His examples aren't of people using too much abstraction. They are examples of people who don't understand the abstraction that's already in place, or they need new functionality but aren't allowed to update the existing abstraction, so they write their own duplicate.
Dont do this. Memcached removes stale data, and that might be a valid session. edit: removes data when it reaches its storage limits and is not stateful (as expressadmin pointed out) 
RRRRRRRRRR!!!!!! People c'mon. This type of behavior is causing PHP a bad rep. Just write ternary $x = $x ?: $y; $x = isset($x) ? $x : $y; or the plain $x = 0; if ($_GET["x"]) $x = $_GET["x"]; C'mon guys, stop the madness...
is this some new php-hipster thing i missed. from a login to sorting search results, sessions are way more convenient than plain cookies.
normally, the loadbalancer will always redirect you to the server with the active session edit: you can google for "load balancer affinity" to get more info. also "sticky session"
It removes data according to its expiration time. Obviously you'd extend that expiration time, just like you would normal sessions. Memcached is, as with most other things, perfectly fine to use provided you know how to actually use it correctly. 
A good option is using [session_set_save_handler](http://www.php.net/manual/en/function.session-set-save-handler.php). With it you can choose where and how to save the session, for example to a shared DB.
Yeap. These are probably the first functions I wrote in my framework: function get($key, $default=null) { if (isset($_GET[$key]) { return $_GET[$key]; } return $default; } Similar for POST and COOKIE. SESSION gets its own individual treatment.
rifle is fine.
Ah, the PHP way.
i think this may be the first time i've ever heard someone suggest a single point of failure as a good thing.
This makes no sense. What do you store in the cookies?
It purges the oldest
As an aside, Drupal has a very similar function with variable_get - http://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/variable_get/7 function variable_get($name, $default = NULL) { global $conf; return isset($conf[$name]) ? $conf[$name] : $default; }
Not just PHP: http://fliptomato.wordpress.com/2007/03/19/medical-researcher-discovers-integration-gets-75-citations/
I like how Kohana does it: $myvar = Arr::get($_POST, 'myPostVariable'); var_dump($myvar); // value if set, false if not set.
I advise against sticky sessions because if that server goes down then the user loses their session data when they go over to another server.
Well using a database for sessions you should be using memory (in MySQL) tables, which are not retained upon a reboot of MySQL. Session data should only be temp data that is needed for the session and not retained.
Yes, but SSL will be the real key factor. Just make sure your token is randomly generated and of decent length, don't use something like `md5(time())`. Ideally, you'd set all cookies with the secure flag enabled so that they're only sent over SSL.
[Sharedance](http://www.pureftpd.org/project/sharedance) was exactly made for this. No update since 2006, but it's definitely simple, fast and reliable. Basically, it's a socket listening to php session_handler and storing a key/data pair. Sharedance is used on very high traffic websites. You should really take a look at it. You could find here, some help on installing and using sharedance : * [A recent article](http://blog.secaserver.com/2012/08/php-session-sharedance-apache-web-cluster/) * [A kind of session storage solutions benchmark](http://www.binarysludge.com/2011/01/13/redundant-and-fault-tolerant-php-session-storage/)
I view CodeIgniter as a light-weight framework. Some will laugh at me for that, but I use CakePHP for most stuff. So yeah, CI is my light weight framework.
best I could do: $id = is_null( $x = $_GET['id'] ) ? $x : '1' ; isset() requires a variable, but I think $_GET items can only be a string or array. Using the $x assignment saves you from double typing a little. You will get a notice if $_GET['id'] isn't set, though. 
I agree, pretty mundane/entry-level stuff, in the grand scheme of things. I was tempted to add "I'm embarrassed to admit..." to the title.... opted instead for brevity. Thanks for the tip on phpsh.
Reading by itself won't help you a lot. Yes you could learn some basic stuff, but I think you should be writing, testing and expanding the provided examples. It doesn't matter if it's a book, a video tutorial or the php documentation. I read a lot of books when I started learning, but the most I've learnt was from video tutorials and online examples and last, but not least the php documentaion. This is of course my own opinion. 
gooby, plz.
Just wait til you discover phpsh
I've used phpsh, and I agree that if you really need a shell (who are we kidding here, OF COURSE we need a shell) that doesn't suck, this is the best approach.
Why not do both? Store sessions in mysql with memcached cache. So, basically * Read session data from memcached first, look in MySQL on a cache miss. * Write session data to memcached on every update. * Only write to MySQL if cache data hasn't been synced for 120 seconds or so. * Run a periodic script that checks MySQL for expired sessions. For every expired session, update from memcached and only expire the ones that are truly expired.
[DOLAN NO!](http://shitalekseysays.com/)
In case of session data, I'd still opt for a regular database table. Sessions data is statefull data which should not be stored in a temporary table. You use sessions in PHP to maintain state after all. You could choose to let a session expire after a year or even longer. I haven't seen much servers with an uptime of more than a year lately. When you'd reboot a server the sessions that are less than one minute old will also be wiped which is not desirable.
Your formatting is a bit dodgy. Generally you will want to indent are opening a curly bracket. For example: function doTheIndentation() { if ($x === $y) { if ($a === $b) { if ($c === $d) { // Indent as such } // Notice that this bracket closes on the same indentation as the if condition. } } return true; } You will also want to make use of blank lines. For example: $x = 10; $y = 50; for($i=0; $i &lt; ($x * $y); $i++) { // The loop and variable are separated out, drastically improving readability. } Is much better than: $x = 10; $y = 50; for($i=0; $i &lt; ($x * $y); $i++) { // Imagine this spanned across thousands of lines. Separate logical areas with blank lines. } Finally, and this is something many programmers do, format your SQL. It is code too and deserves to be treated as such. Other programmers reading your code will thank you for this. Compare: $stmt = $dbconn-&gt;prepare("SELECT x FROM y WHERE z = ?"); To: $stmt = $dbconn-&gt;prepare(" SELECT x FROM y WHERE z = ? AND w = ? "); 
Now I'm less respectfully disagreeing. You are right that comments changing execution is new but that is semantics. Comments have always been important and in a professional environment as important as much of the code surrounding them. This is also true in many open source projects as well. I will always reject code from devs that is not properly documented. In that context having comments effect execution is not a significant change because they were always vital to quality code and that is the end goal, not just execution. 
Yeah you shouldn't do it that way. Here is how I would do it. function check_username($username){ //This sanitizes your data $username = mysql_real_escape_string($username); $username = stripslashes($username); $username = strip_tags($username); //connects to DB $link = mysql_connect('localhost', 'username', 'password'); if (!$link) { die('Could not connect: ' . mysql_error()); } //Your query $query = "SELECT * FROM `brendan_bit470`.`user` U WHERE U.username='$username'"; //Runs your query $result = mysql_query($query); //Gets first row of results $row = mysql_fetch_array($result); mysql_close($link); //If results exist return true if ($row) { return true; } return false; }
Redis to the rescue! Stateful! Easy! Fast! Makes Excellent Pizza!
You're loading the whole row into an array just to check if it exists. I'd recommend using `COUNT(*)` in your query instead.
`mysql_` functions are deprecated, your code is bad and you should feel bad.
You can accomplish this by setting the session save handler to use a database. There are some libraries that handle that transparently. I've used Adodb's session handler (http://phplens.com/lens/adodb/docs-session.htm ) with success.
A unique hash to identify a user?
That reads like a historical document. And here's the letter the torturer's in the French revolution sent. It's basically a collection of bad, misguided and crazy phpisms from a decade ago: 1. die()ing on error - wut? your application has to DIE if there's a problem with a user query.... 2. you have to sql escape AND remove html tags and slashes... SQL cant handle slashes and html tags? WUT? - stems from the days when, for cago cult reasons, php developers thought slashes and quotes were something to do with security 3. opening and closing a db link to execute a query.... ? 4. mysql_* 5. return empty($row)? if(x) true else false is a sign that something should be simpler, as its equivalent to x
A couple of notes. I you do not need to call: $stmt-&gt;store_result(); if you are not looking to get information like rows returned. That being said since your looking for if a username exists or not, you can trim your code a bit and speed it up. Adding the LIMIT 0,1 will stop your query if it finds something so its not wasting time looking for more. private function checkusername(){ $stmt = $dbcon-&gt;prepare("SELECT `username` FROM `brendan_bit470`.`user` WHERE username=? LIMIT 0,1"); $stmt-&gt;bind_param('s',$this-&gt;username); if($stmt){ $stmt-&gt;execute(); $stmt-&gt;store_result(); if($stmt-&gt;num_rows===1) RETURN TRUE; else RETURN FALSE; } $stmt-&gt;close(); } 
* unless usernames are non-unique, it makes no sense to use a while to iterate the result set as the result will either contain a row, or won't. Add "LIMIT 1" to your query, remove the while, and test against the returned row (if any). * if($stmt) is terrible. If you're trying to see if the prepare() worked, assign the return value from $stmt-&gt;prepare() (which will be a boolean) and test that. * stop using the Mysqli library. It has an interface only a mother could love. Use [PDO](http://php.net/pdo).
Three options I can think of off-hand: * Store session data in the shared DB * Use ip hashing on your load-balancer to provide "sticky sessions." (no reddit, not *those* kinds of sessions...) * Use a distributed filesystem like Ceph/nfs
jesus christ this is 15 kinds of broken. strip_tags? stripslashes? old mysql library? error handling using die()? no error handling for the query execution? Connection details inside the function instead of a centralized place? trying to use mysql_real_escape_string() before establishing a database connection? using mysql_real_escape_string() and THEN performing transformations? No mysql_select_db()? Aside from being a horrible idea using a library you shouldn't be using, this can't possibly work properly as it is. You should probably stop offering programming advice until you learn how to do it right.
I used a head first book to learn AJAX and it was pretty decent. Its written in a weird way that is almost comic book like and the examples flow pretty well and are thorough. As long as you do the examples and write and test code it will be helpful, but I agree that reading will only get you so far. The best way is to just try making things and keep looking up things as you need them. Fwiw, I look random functions on php.net just about every day even several years after my first foray into php. Good luck!
Generally speaking, shells are a great way to do quick things without opening an editor. For example, if I need to see what the SHA value of a string is, or if I need to test a regex against a small block of content, or if I need to see quickly if a library works the way I think it does. It's fairly simple to require() a given library and try stuff without ever opening an editor and writing a file. PHP's built in shell tends to lose its effectiveness though since the moment you make a typo that causes a fatal error you have to restart the shell and begin again. One could argue that you may as well just write your snippet in a file and run that because of it. As filiped points out earlier, phpsh gets around this game breaking flaw. In other languages that commonly use application servers, shells are a means to interact with an application at a much lower level than is provided by the exposed web interface. The rails framework for ruby, as an example, ships with script/console (a wrapper around IRB, ruby's interactive shell) which allows you to easily access and manipulate all available classes in the project, as well as data without writing standalone scripts. It even has a sandbox mode that will track and roll back any database changes I make at the end of the console session.
How did you know he was using the Mysqli library, because of the store_result() function?
Uh... Why both? Sessions are temporary anyway, they don't need to be stored. 
&gt;However, 99% of the time you don't want a persistent store for sessions. Sessions are ephemeral by their nature and the performance of memcached over a full fledged DB for backing sessions is hard to ignore. I agree completely.
Several of the methods are from mysqli, or something written to look like mysqli. I'm 99% sure he's using mysqli though.
This looks to be an even worse solution than the solutions listed as "problems".
I was just curious, I'm still newer at programming and using PDO statements. When I saw that bit of code I just thought I'd never heard of that method before.
I think stackTrase means external to the SQL query, and either use a mysql_select_db() prior to executing the query or concatenate the variable with the SQL string to add the database name to the query. It's generally handy to put connection details, database names etc in a separate settings file to keep it all together in case you need to run it from a different database or a different server for any reason.
www.php.net.
PDO's main draw (past a better interface) is that while it won't automatically make your SQL multi-engine compatable, it does support more than one database engine. This makes it easier to create adapters if you want to support more than one RDBMS. It's also worth noting that PDO does in fact use the mysqli core libraries. Additionally, it's much easier to extend or modify PDO. You can actually tell PDO to return extended classes of its regular objects if you want, allowing you to easily add additional functionality without redefining the entire parent class. For a somewhat useless example, I can do: &lt;?php class MyAwesomeClass extends PDOStatement { function foo() { echo "this wasn't here before!"; } } $pdo = new PDO(connection_parameters_here); $pdo-&gt;setOption(PDO::ATTR_STATEMENT_CLASS, array('MyAwesomeClass', array($pdo))); $stmt = $pdo-&gt;prepare(some_sql_in_here); $stmt-&gt;foo(); // output "this wasn't here before!" $stmt-&gt;execute(); ...etc...etc... This allows for your abstractions to actually get returned directly by PDO, rather than writing a wrapper that uses PDO indirectly.
You can do it with a sugar built into the ternary operator: $x=($foo?:$bar) From the [comparison operators page](http://php.net/manual/en/language.operators.comparison.php): &gt; Since PHP 5.3, it is possible to leave out the middle part of the ternary operator. Expression expr1 ?: expr3 returns expr1 if expr1 evaluates to TRUE, and expr3 otherwise. 
I'm not a PHP expert either, but here's what I have that I don't see anyone else has mentioned: Consider wrapping the actual SQL functions in a try/catch block, that way you can safely log any exceptions and provide a friendly error back to the user without stopping the execution of the application. try { // Run the query here } catch (PDOException $e) { // Take $e-&gt;getMessage() and save it to a log, don't ever display it to the user return false; } This is kind of small, but $dbcon = dbcon::connect() seems to indicate that you are using a static connection to your database (and possibly a singleton pattern). This is fine and it works, but it encourages placing things into a global scope which is something you should not do unless absolutely necessary. A better alternative is to use [dependency injection](http://en.wikipedia.org/wiki/Dependency_injection). Simply put, instead of calling your database from anywhere with dbcon::connect() you simply "inject" your connection into the object that needs it when it is instantiated. My preferred method is to instantiate the object with the database connection included, like this: $object = new Object($dbconn); // where $dbconn comes from wherever you open your connection Then within the object: private $dbconn; public function __construct($dbconn) { $this-&gt;dbconn = $dbconn; } Now you can use $this-&gt;dbconn in place of $dbconn just as you would have before, but you've taken your database connection out of the global scope. Edit: updated $e-&gt;getMessage() line, and as mentioned below, this exact style of exception handling is only useful for PDO (which is a great way to implement a database, use it if you can!).
Something to think about: Your $dbcon-&gt;close(); statement only get's executed when returning false. If you return true, it never reaches that line.
assuming your errors are turned off and you're running at least 5.3, this will work. $id = $_GET['id'] ?: 1; edit: i repeat, this is (imo) **not** what you should do in production.
I agree. The tools used for this task (isset and ?=) is perfectly transparent to any developer in seconds. By trading those out for custom functions any developer will have to look up the logic somewhere else before continuing scanning the code, also you interlink all code using that function, related or not, something that can make refactoring harder. And to what gain? Saving eleven characters? Come on!
Yeah it frees up the memory and can can help avoid errors. From the manual "If the current statement has pending or unread results, this function cancels them so that the next query can be executed."
I like it. :) 2 questions because I'm in a hurry: Is it PSR-0 compliant and can it be managed via composer?
This would be good advice, if he was actually using PDO.
Testing small code snippets without having to create a test file and access it through the browser/command line.
I've been a PHP developer for years and I never knew that it had an interactive console. I'm sure a lot of people learned about it today after this post.
You mean like the PHP session functions do? Awesome.
if you think that's good, get a load of this: http://www.phpsh.org 
Upvote for Redis. It seems like the most sensible solution to me. It keeps data in memory, like Memcache and writes that data to disk so that it's persistent across restarts/problems. You can even control how often Redis writes to the disk, so once a second, every 10 seconds, once a minute, etc. 
So if this is not good: md5(time()), then what should I use? sha1(time().$username) maybe?
what is the reason for that?
Yes. This has been available for years and recently some people found it again and think they're big hax0rs now. Here's the thing: The *whole* php.net infrastructure is completely open. The source code of the site and its subsystems is open-source. There is no point in hiding the currently accessed pages in such a context.
Some people say that books are going out of style when it comes to learning how to program--in fact people are saying that about most any subject. From my experience, "googling" will definitely give you routes to achieve a solution. But for every solid bit of information that you find, you'll also have to dig through a bunch of misinformation--which is incredibly difficult to discern when you're just starting out. That being said, I love learning from books. There's something about physically turning pages, or folding corners for bookmarks that registers well with how I learn. Try [Murach's Guide to PHP and MySQL](http://www.amazon.com/Murachs-PHP-MySQL-Murach-Reference/dp/1890774561/ref=sr_1_1?ie=UTF8&amp;qid=1350636032&amp;sr=8-1&amp;keywords=php+murach). It's written to be incredibly beginner friendly, and will walk you through the basics. From setting up your development environment to building an actual, functional, and very well structured application. Take a look at the table of contents, as well as a few of the pages in there. I've crunched through a number of PHP/MySQL books and none of them have been as fruitful as this one. If you're diligent about it--two weeks and you'll develop a very solid proficiency.
nope, i do not feel like a big hax0r, but i'll respect the privacy of my visitors, so i do not log ip-addresses nor do i offer them to public. thasts one point. the second is: if i am a scriptkiddy and i am trying to ddos php.net or apache.org, why the hell do you give me the tools to actually benchmakr my attack?!
yeah but then i saw his username and realized he is a [PHP contributor](https://github.com/ircmaxell/password_compat) and knows his shit. 
The default value when the key isn't found is actually `NULL`. There's a [third optional parameter](https://github.com/kohana/core/blob/3.2/master/classes/kohana/arr.php#L275) to set the default value.
I care. It's a nice way to manage your libs, you can look at a project an instantly know where to find everything and Composer's dependency management keeps your project clean. &gt; in PSR-0 class names are case-sensitive, in PHP they are not What's your point? It's a convention, a sensible one to make up for a weakness of PHP. &gt; in PSR-0 class Foo\Bar_Buz and Foo_Bar\Buz are the same, in PHP they are no That's so the loader can deal with vendor prefixes. In PSR-0 you wouldn't name your classes like that anyway so I don't see how that's relevant.
&gt; so i do not log ip-addresses Your server already does this by default whether you're using apache, nginx or whatever. &gt; i am trying to ddos php.net If I am not mistaken, DDoS is more of an attack on the sites DNS servers to prevent domain name resolution and not so much an attack on the server itself. Client IP addresses in the log will not help facilitate this.
Yes it is PSR-0 compliant. If you look at the the composer.json file you will see. The file reside in the "src" directory. The full namespace of the file is: Voodoo\Core\VoodOrm 
My bad.
I was on the same exact path as you about a couple of months ago. I began with HTML and CSS, just like you. Although, I did take the time to learn JavaScript and jQuery after that. I would really recommend learning JavaScript because it would help you out a lot with learning PHP and it actually coincides with JavaScript. For PHP: 1. Start by installing [Wamp Server](http://wampserver.com). It should really organize things for you. 2. Next, go to TheNewBoston on YouTube and find the PHP tutorials. They guys from phpacademy does them, but there they are extremely well organized, and it'll give you a good start/basis. He explains Wamp and such to you. 3. Check out sites like w3schools when it comes down to the coding part, and it will provide great examples. 4. Use phpacademy tutorials for extra help. Don't worry about frameworks and such for now. Get the basics down, and get them down well. The directories aren't of much importance at this time. If you are really looking for help with directories this is the best I can explain it. Once you download Wamp, you will have a folder www and then htdocs or something in that order (I'm not currently on a computer with Wamp on it so I can't tell you the exact order). There you create a new folder to where your project is going to be saved. Now you create your PHP files and save them in there. After that, you go to localhost, and you will find your folder and files. In essence, PHP is super easy. I am high-end front-end designer/developer, but the trouble with front-end is that you can't make actual products, and taking the time to find people to do the job for me was a waste of time, and it was an opportunity for me to learn something new and useful anyways. PHP is great. Hope this helps. EDIT: Grammar and formatting
You are pretty silly to remove $remote_addr from logs. What if you do get hacked? You don't care about figuring out where it originated from? Not offering them to the public is fine, but not logging them at all is just asking for trouble.
in fact, german law dements this, you are not allowed to store private information (and ip addresses are private information according to the law) unless they led you do this, by submitting a form or so. also, every one who got hacked an got an ipaddress from the "hacker" i know can't do anything while the ipaddress is coms from a country with "intresting" laws, often poland, russia, china
Stay away from frameworks until you are very comfortable with the language. Some of them (e.g. Zend) have a big learning curve, even for experienced PHP folk. I started with the book "PHP &amp; MySQL Web Development" (the bestseller on Amazon). It's very good and slow paced.
Oreilly has a good selection of PHP books. * [Learning PHP5](http://shop.oreilly.com/product/9780596005603.do) * [PHP Cookbook](http://shop.oreilly.com/product/9780596101015.do) * [PHP The good parts](http://shop.oreilly.com/product/9780596804381.do) Start by doing small projects (a blog is a good start). I would not recommend jumping into frameworks unless you are really comfortable with the language.
Just took a look (not in depth and just at a few of the examples) and I got the impression they were critiquing some oversimplifications and pedantic about some wording. I agree that it would be better if these errors were corrected, but I still really think w3schools is quite valuable. The oversimplifications have value because it keeps the lesson terse and gets the information across without confusing a new learner with too much content. I think it's very valuable because there aren't very many websites that keep the information so concise while having such broad coverage over so many areas.
I would almost replace the third option with something like phpacademy. I've watched a few video tutorials and they are easy to understand and cover the basics as well as getting into OOP. I believe there are more sites for learning php out there, none that are coming to me at the moment though..
But you can block with iptables while you figure out the hole. I don't know german laws (silly american here), but I'd argue that if someone visited my site then they are already providing me with their information whether or not they submit a form. 
Honestly a better solution is using first/previous few/next few/last as most sites do, but for the current page use an input box so the user can type any page number.
I used the Visual Quickstart books too, they really explain things well. I don't know what they are like nowadays though... looking at the old ones now they would be full of bad advice.
&gt; I know when I started HTML/CSS they both seemed really difficult but I'm able to code those languages very easily after a year of work. Is it the same way with PHP? Your biggest issue right now is probably that you don't have programming experience. HTML and CSS are markup languages, they don't do any logic/work. If you want to be a PHP programmer, you have to be a programmer first. I would suggest learning Java, so that you learn how good Object-Oriented Programming works. From there, PHP should be pretty easy to pick up. On the other hand, if you learn PHP first, you'll be starting with one of the strangest languages out there. If you only know PHP, it's not as easy to learn other languages like Java, Ruby, or Python. 
Do you have an opinion on the topic at hand (logging IPs in apache/nginx/etc logs)? I don't care if they click "new identity", I can easily tail the logs and pipe IPs to a script that blocks the new IPs automatically.
&gt; in fact, german law dements this, you are not allowed to store private information (and ip addresses are private information according to the law) unless they led you do this http://www.out-law.com/page-9505 &gt; **A German court has ruled that website operators are allowed to store the internet protocol (IP) addresses of their visitors without violating data protection legislation.**
 foreach($arrayName as $key =&gt; $value){ echo $key . ":" . $value; }
that's a great learner's book, absolutely recommend it.
Please take a look at http://www.phptherightway.com to get a early handle on PHP best practices. The web is full of bad ways to use PHP, and if you get started down the wrong road, you're either going to have to backtrack to the right road, or just be bad at PHP.
It's not php so much as it is the influx of new programmers that haven't tangled with routing before, so they don't understand the existing system and eventually write their own. Far more people learn programming and web development by writing php (and if they're successful it becomes a production system that others have to deal with) than start out writing Grails. The people writing Grails are much more likely to have gone through a CS program first.
Maybe one of these will help you.... //Get the first array value echo reset($array); //Get last array value echo end($array); //Get the value of the current array pointer echo current($array);
I'm currently taking these online classes "Intro to PHP and MySQL"and find reading books about the subject helps things sink in better. We are building a recipe website using WAMP. Basically people can log in and post their own recipes and such. We have a news bar in the right hand side. Basically beginners stuff.
Heeey! There we go, thats awesome, thanks! Yeah thats simple and looks a whole lot nicer too. I learned something today. Brilliant. 
I highly recommend PHPMaster.com's [book of the same name](http://www.sitepoint.com/books/phppro1/). It's available as both printed edition or as an ebook. The language is very clear and concise, covers all aspects of building modern PHP applications, and best practices. Even as someone using the language for 9 years, I found the book tremendously informative, as are all the articles on phpmaster.com.
PHP and programming isn't easy. Especially at first. Not one source will give you everything you need. Not all beginner books are for beginners. I highly recommend the PHP and MySql essential training videos on Lynda.com. Try to keep it simple first. Start working with strings and numbers, then start working with variables then 'if' statements. Then arrays, then loops. Then jump over to sql and learn creating, updating, deleting, and reading. Then learn how to send data to php variables using html forms. Stay away from frameworks, and even objects in the beginning, just get comfy with the basics. 
Glad to be of some help. Just note that reset() and end() will alter the array pointer to those positions within the array.
How would you use this? Ignore my example above, I'm just curious. All I've ever done with arrays is either pick a key directly by its value, or iterate through it in a loop.
Say for example you have an array which has strings for keys and you want to know what the current key name is within a loop. You can use it to return the name of the array key for the current position within the array. Or maybe you want to know the array key of last value... // Example one foreach($values AS $value) { echo "The value of array key: " . key($values) . " is $value.\n"; } // Example two end($values); echo "The last array key is " . key($values) . ".\n"; Edit: corrections pointed out by snago added.
Your question has already been answered in this thread so I figured I would toss this out here: Why? What is the context?
But I want my hammer to make coffee and drive the car too.
 function get_db(...) { $db = new PDO(....); return $db; } $handler = get_db(....);
remember to break it up. Its a big offering. learn the OOP basics. even as a ten year seasoned programmer, there are things i havent used before. It becomes easier to read between the lines after you have worked with the basics for a long time, but you still end up doing things you havent done before. Have a think about the kinds of things youd like to do. For me it was more about images so i learnt EXIF, GD, Imagick. For me i dont use any frameworks, i find them limiting, and why (unless for fast turnaround) would you limit yourself. Build up a function library (even if you use frameworks), dont repeat the unessasary. Youll write some stuff you think is the bees knees. Keep it. And organise it. If its a number function put it in a class of number functions and so on. Youll reuse function on strings, numbers, arrays, files, objects, databases, and so on. you also have to decide on models of programming. a common web model is the (MODEL, VIEW, CONTROLLER) or a variant of it. This is the reading that will help you understand the more complex stuff a little faster. Everything else is going to be reusable code. There are other models you can use, but as a beginner start there. 
What about this? print_r($array); Edit: This is useful when there is more than one key, and it works with nested arrays. More a solution to avoiding the foreach, less a solution for single-element arrays.
Part of a CMS plugin. The template page calls a function for content, which splits up a string into an array with named keys. If the function is called without parameters and there is only one key=&gt;data element in the array then I want to pick that one no matter what it is. There are many ways of doing it. I was curious what the simplest route was. ;)
As **frtdys** points out, you can create a function if you wish to return the handler, but this is how I've done it: pdo-dbh.php $dbh= null; try { $dbh= new PDO(...); } catch (PDOException $pe) { // error handling } return $dbh; anyscript.php $dbh= require_once('pdo-dbh.php'); if ( !is_null($dbh) &amp;&amp; get_class($dbh) == 'PDO' ) { // use your handler } What you're doing here is very simple... you include or require the file that has a return statement, handing you the db handler object (or null, or an error message, however you want to handle it). [php.net/include](http://www.php.net/manual/en/function.include.php)
That should be `$sql = $db-&gt;connect();` You don't have a variable named `$DbConnect`.
I came here to say this. Thank you for beating me to it.
That should work ok, save the fact that you are mixing up the `$db` and `$dbh` vars. Some things to consider... Your `User` class only needs a single instance of the database handler object, so you should make it a private instance var rather than a method, preferably retrieved in the constructor. You certainly don't want it to be a public method. Also, your error handling (inside your try...catch block) should be more elegant. For troubleshooting, simply killing a script and displaying an error is fine, but in the real world, make sure you're logging these errors away and allowing the script to die gracefully.
as opposed to opening and closing the handler every time you do a query?
Ditch the books and try this: http://devzone.zend.com/6/php-101-php-for-the-absolute-beginner/ You'll have a much easier time and learn quicker. Keep in mind that this tutorial was made several years ago but still holds up. 
Of course they exist. 1) You don't specify if remote is allowed; 2) You don't specify which Symfony version the developer should have experience in; 3) You don't give any clue as to compensation. Per our rules, don't post job ads in /r/php unless they're remote, pay at least market rate, and aren't some boring monkey coding job. Your ad doesn't provide information on any of these, plus it links to a 3rd party site. You can try posting again.
array_pop($array); // this destroys your array, however.
is this the book you are referring to? http://www.amazon.com/PHP-MySQL-Web-Development-Edition/dp/0672329166/ref=sr_1_1?ie=UTF8&amp;qid=1350681150&amp;sr=8-1&amp;keywords=PHP+%26+MySQL+Web+Development
Work your way down the list on the left http://www.tizag.com/phpT/variable.php
I guess someone could write a script to scrape server-status and perform DNS lookups on each IP and determine where PHP developers are and what pages they're looking at. It's not like I know that a particular IP is Joe User at 123 Street in Townsville, Region whose blood type is O Negative and that he picks his nose and eats it. On the grand scheme of things, I think this is a really, hyper minuscule issue that creates no actual privacy threat. No need for tinfoil. edit: I guess the EU disagrees - http://curia.europa.eu/juris/document/document.jsf?docid=115202&amp;doclang=EN&amp;mode=&amp;part=1 &gt; ...the collection and identification of usersâ€™ IP addresses from which unlawful content on the network is sent. Those addresses are protected personal data because they allow those users to be precisely identified.
Here's an awesome alternative: http://www.phptherightway.com/
Thanks for the suggestion. I did not mention that, as the OP seems to be aware of that and was looking for alternative methods for working with arrays.
True. He asked a pretty odd question to start with so there aren't too many examples that make a lot of sense.
There's a couple of different things to learn. First off there's programming. Variables, conditionals, comparisons, functions, etc. You can learn these in any imperative language, there are even [interactive tutorials](http://tryruby.org/levels/1/challenges/0) that can get you started. Next up you should learn a "language". By language I mean the peculiarities of any particular language, it's built in constructs, and how to use the libraries it supports. Go read the PHP docs, invent some sort of "app" you want to make and dive in. From there you want to gain an understanding of the environment you will be working with - do you understand the REST architecture, HTTP protocol, how sessions/cookies etc work? Finally you should choose a framework to make your life easier. Hopefully by this stage you won't need to ask the "which framework is best" option as you'll be armed with enough knowledge to answer it yourself. 
On a related note, what's the easiest way to switch from his PPA to the regular Ubuntu build stream now that it's on 5.4?
Opening and closing connections multiple times throughout your script or having multiple simultaneous connections open to the same database creates overhead for your database server. But what if you want to instantiate more than one user object? ...or what if you have a variety of classes/models that connect to the same database? What if some of those classes are designed to hold *collections* of objects that can all connect to a database? You could potentially end up finding yourself opening 20, 50, or even 100+ ***different*** connections in the lifetime of your script. Ideally, you only want to open as many connections as needed (which is usually just a single connection per database). Here's what I like to do: *Create a class that's responsible for managing PDO instances by caching them in a [static variable](http://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.static):* class DBConnectionManager { /** * The static variable that stores your PDO instances which * will be available throughout your script. */ private static $instances = array(); /** * The static method that various objects in your script can * call to request access to a particular connection. * * Parameter $database refers to the particular database for which the * request is being made to connect to (you might have multiple databases * relevant to your application (e.g. a database for sessions, logging, etc.) * * Parameter $options is there in case you want to pass in specific PDO options * to the connection. */ public static function getInstance($database = 'default', array $options = array()) { /** * If a connection to the particular database doesn't already * exist in the static store, make the connection and store it. */ if(!isset(self::$instances[$database])) { /** * Here, you would retrieve database credentials from a configuration * file such as an XML file or PHP array based on the $database parameter. * I'll leave the implementation details to you. (I mean, you could even * hardcode the credentials right into the class if you wanted). */ try { // Let's say these variables came from your configuration file above: $dsn = "$driver:$hostname;dbname=$dbname"; self::$instances[$database] = new PDO($dsn, $username, $password, $options); } catch(PDOException $e) { // Handle error } } return self::$instances[$database]; } private function __construct() {} } Now you can use this in your models and not have to worry about manually keeping track of database connections: class User { protected $pdoconn; public function get_db() { if($this-&gt;pdoconn === null) { $this-&gt;pdoconn = DBConnectionManager::getInstance(); } return $this; } } So in something like this: $user1-&gt;get_db(); $user2-&gt;get_db(); $user3-&gt;get_db(); ... ... All user objects(or any other using the "default" database) would be reusing the **same** PDO connection rather than assigning a new one for each object. Moreover, you're also not tied down to *one particular database*. If you decide you want to connect to a separate database that's solely responsible for storing user session data for example: class Session { protected $pdoconn; public function __construct() { $this-&gt;pdoconn = DBConnectionManager::getInstance('sessions'); } ... ... } Again, the string passed in to *getInstance()* tells the manager class which database to make a connection to. Your configuration file could look something like (XML format): &lt;databases&gt; &lt;database handle="default"&gt; &lt;driver&gt;mysql&lt;/driver&gt; &lt;hostname&gt;hostname_here&lt;/hostname&gt; &lt;dbname&gt;dbname_here&lt;/dbname&gt; &lt;username&gt;username_here&lt;/username&gt; &lt;password&gt;password_here&lt;/password&gt; &lt;/database&gt; &lt;database handle="sessions"&gt; &lt;driver&gt;pgsql&lt;/driver&gt; &lt;hostname&gt;another_hostname_here&lt;/hostname&gt; &lt;dbname&gt;another_dbname_here&lt;/dbname&gt; &lt;username&gt;another_username_here&lt;/username&gt; &lt;password&gt;another_password_here&lt;/password&gt; &lt;/database&gt; ... ... &lt;/databases&gt; The DBConnectionManager is an example of what's known as a singleton factory class, and some may argue that there are better patterns out there, but this is just what I do as I find it useful and flexible for my needs. Going even further, you may also want to have a look at [persistent PDO connections](http://www.php.net/manual/en/pdo.connections.php) (#4) which actually keeps the connection open even after script execution ends. This allows multiple scripts to reuse the same connection which can improve performance if you have a lot of concurrent users in your application. Use with caution however, as there are potential problems that can arise when using persistent connections especially when used in conjunction with transactions. [This post](http://stackoverflow.com/a/3332106/1446794) outlines the disadvantages of persistent connections.
Dependency injection and inversion of control are concepts of object oriented design. What you are talking about is DIC, which usually (like in case of Composer) is a pretty name for service locator antipattern.
Keep reading. It gets worse. 
Notepad++ is actually pretty good. I prefer it because I haven't found another free one that doesn't slow me down. I'm considering buying PHP Storm because I tried the demo and it was fast, had good code completion and was good at finding the correct code when you try to find declarations for variables and classes.
Do yourself a favor and start off by learning Object Oriented Programming concepts.
I still use Tizag for quick reference. It's got nice, simple examples.
He didn't mention DI, DIC, or IoC anywhere in his comment. Composer is none of those things anyways, as it doesn't instance or reference instances of objects. All composer does is grab files and place them in a folder based on a list. It is, exactly as rich said, a dependency management tool. So, what he is talking about, is in fact NOT DIC. Why are you being a troll? You downvote his project for using a tool that clones repos for you and for being PSR-0 compliant as if either of those are bad things? **Only in PHP can you get called out for being an asshat who apparently knows less than he would like to about php.** Edit: Thought that rich97 was the OP. Above comments still stand - the contetxt of them changes a bit. teresko is still a troll.
Nothing should ever segfault. If your server is segfaulting, there is probably a software or hardware issue.
 function head($arr) { foreach ($arr as $k =&gt; $v) { return $v; } } otherwise you need to mess with the internals, reset(), current(), etc.
&gt; echo "&lt;img src='$path' width='$thumbnail_width' height='$thumbnail_height' /&gt;"; facepalm. This needs to go directly to /r/shittyprogramming, do not pass go, do not collect $200.
&gt; in PSR-0 class Foo\Bar_Buz and Foo_Bar\Buz are the same, in PHP they are no I think they did this to allow compatibility with PEAR namespaced libraries which is very prevalent in PHP like PHPUnit. 
Composer provides dependency management similar to bundler. I doesn't dictate dependency injection, IoC, or service locator patterns. I strongly urge you to reevaluate these patterns and Composer.
Hmm assuming you have Ubuntu 12.10 it should be in the process of removing the PPA from the sources list (like using software-properties-gtk) then a sudo apt-get update &amp;&amp; sudo apt-get upgrade.
That could be. I'm don't handle the server's software or hardware, so I'm not sure what the underlying problem would be on the server. Regardless, is there anything I could have done to recover from the memory problem / segfault? When you get those errors is it the end of the line?
Perhaps you can monitor your memory usage while the script is running: http://php.net/manual/en/function.memory-get-usage.php Free up memory when possible (use the disk if you have to). Exhausting memory should never cause a seg fault, so there is likely an underlying issue with the server. That having been said, there is no way to catch/handle a seg fault. It will immediately abort and not run any more commands. 
Leaving aside the issue of whether PHP scripts and cron jobs are the proper tool for the job (given the time your script spends processing data, this might be one of those rare cases where having a C program running as a daemon could be more suitable), I think you should reconsider whether to have a single script handle everything. A better approach might be to split up the work into independent jobs. Downloading the XML file, verifying its integrity and making it available for processing would be one job, to be run at a timed interval. A second job, run independently at a timed interval, would be to check for the presence of a new, unprocessed XML file, and if present to process and prepare it for pushing it to the online store. A third job, again independent, would be to check for the presence of a not-yet-pushed update file, and to push it to the store if present. A simplified step-by-step example: * `download.php` downloads the `inventory-download.xml` file, verifies its integrity, renames it to `inventory-verified.xml` * `process.php` checks for the existence of `inventory-verified.xml`, and if present, renames it to `inventory-processing.xml`, starts processing it, and writes the results to `inventory-processing.xml`. On successful completion, `inventory-processing.xml` is renamed to `inventory-processed.xml` * `push.php` checks for the existence of `inventory-processed.xml`, if present renames it to `inventory-pushing.xml` and starts pushing the data to the store, and on successful completion renames the file `inventory-[date]-pushed.xml` This example has quite a few problems, but the basic idea is this: by splitting the handful of jobs your script is currently doing into independent job-specific scripts that require no information about anything other than the job they are responsible for, you cut down on the need to check for external factors every step of the way. Plus, as a bonus, you're likely to cut down on memory usage while also gaining the ability to perform different jobs simultaneously (caveat: processing might require knowledge of the currently pushed version), and if there are any performance bottlenecks they become a lot easier to find. Doing things this way, your old problem instantly disappears almost entirely. Your scripts no longer have to worry (much) about what's running, and can instead simply focus on whether or not there's a job for them to do. Compare it to an assembly line in a car factory. You don't want the guy putting wheels on freshly built cars having to check up on the guy putting the windshields in. He should just notice when a new car arrives at his part of the assembly line, put wheels on it, check that the wheels have been put on correctly, and send it on to the next step.
Definitely a trade off. Interestingly the 7 series seems much faster. I'm not sure if they rewrote part of it or not. The benefits of being able to use integrated SCM and Projects outweigh the speed issues for me. I'm in a lot of different codebases on a daily basis so that's probably why. To each his own. If you think it might be useful give the 7 series a shot. You get a lot for free!
You just described exactly how I learned PHP around 6 years ago. I went through the exact same steps as you starting with the copyright year. Now it's what I do 40 hours a week.
Me too! That's one of the thing I really like about PHP, and its community in particular. I went from only knowing HTML, CSS, and barely any JavaScript to speak of, to where I am now: A full-time PHP developer. No formal training, just what I've managed to learn from books, friends, and online.
&gt;where you can create projects and the entire file structure is shown see my other post, this isn't actually a thing you can do. however I'd recommend netbeans as an IDE (IDE's have a very different purpose than a simple editor like Notepad++) or phpstorm I've heard is good. either way you are really missing the point here, you need to learn what is going on with those directories - everyone does it differently. jumping in to a framework or "editor that can create projects" won't help you. you need to be either exploring at a lower level yourself (I'd really recommend this) or working in an environment that provides a mentor.
There's really little need to reinvent the wheel.
These are micro optimisations and none-to-surprising results, either. Whereas speed should be taken into account at all times when programming, you also need to think about readability and maintainability. Just because something is 0.001 seconds faster doesn't mean it is always the right choice. Hardware is cheap, developer time is expensive.
&gt; Libraries with simple APIs that you can just pull in, call, replace if unhappy and move on &gt; I want things that do one thing and do it well Amen to that.
Because it isn't user friendly. In the first example it goes "13, 15, 16, 17...", and the user goes "Oh, there is no page 14." It isn't immediately obvious.
Don't use Dreamweaver. Even notepad++ is far better. Here's some well known and good php ides: PHPStorm, NetBeans, Eclipse. **EDIT:** Ok, also Sublime Text 2, but that's text editor. For begginer it's good enough, but, for example, you will be writing OOP-code in IDE faster (because of autocompletion that depends on object's type, for example). But some really good developers I know, actually code in Sublime, but they're never respect code style standards :(
Degree in computer science...
Just plug your ears and read it again.
To create a session/login, you don't actually need to do that much. Your code is pretty messy and over-complicated for no reason. Follow the template below and you should be fine. Although if you really want to dive into programming, ditch dreamweaver and use a better tool, indent your code better and aim for more readability. Readability = Sexyness! Ooh also, ditch the long variable names. Although that's a matter of preference so... :P I added a few comments as well that you might want to consider taking a look at. &lt;?php if (isset($_POST['useremail']) &amp;&amp; isset($_POST['userpass'])) { session_start(); /* * Using the old MySQL library is discouraged. Use PDO instead. * See top "Suggested Alternatives" here: http://php.net/manual/en/function.mysql-connect.php */ $db = mysql_connect('localhost', 'mysql_user', 'mysql_password'); mysql_select_db('foo', $db); $username = mysql_real_escape_string($_POST['useremail'], $db); $password = mysql_real_escape_string($_POST['userpass'], $db); /* * In your previous select, you forgot to include the 'id' column! */ $result = mysql_query("SELECT id, useremail, userpass, userid, userrole FROM users WHERE useremail={$username} AND userpass={$password}"); if (mysql_num_rows($result)) { $user = mysql_fetch_assoc($result); /* * Password is not hashed in this example, which it should be! */ if ($password == $user["userpass"]) { $_SESSION['MM_Username'] = $username; $_SESSION['MM_UserGroup'] = $user["userrole"]; $_SESSION['MM_Userid'] = $user["id"]; $_SESSION['MM_LoginFlag'] = true; header("Location: /login-success.php"); } else { header("Location: /login-failed.php"); } } else { header("Location: /login-failed.php"); } } ?&gt; &lt;html&gt; &lt;body&gt; &lt;?php /* * Quick comment about your HTML. the "id" attribute should be used to specify one specific tag. * Right now you are using the id value "login" for both the form and the div. * * Technically this is doable, but in the long run, it might cause you some CSS headache! */ ?&gt; &lt;div id="login"&gt; &lt;form id="login" name="login" method="POST" action="&lt;?php echo $_SERVER["PHP_SELF"]; ?&gt;"&gt; &lt;label for="useremail"&gt;e-mail&lt;/label&gt; &lt;input size="15" type="text" name="useremail" id="useremail" /&gt; &lt;label for="userpass"&gt;password&lt;/label&gt; &lt;input size="15" type="text" name="userpass" id="userpass" /&gt; &lt;input type="submit" name="submit" id="submit" value="OK" /&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; I didn't run the code but it should work without any problems. I hope this helps. 
I think frameworks like Symfony and Zend have the right idea. You can use it as it is, or you can forego the framework glue and cherry pick the libraries you want.
There's a new line before session_start().
For what it's worth, my personal favourite has been NetBeans. I didn't like Eclipse as much (although it has an awesome selection of plugins), and I've never used PHPStorm.
A much better solution is to use javascript to display the pagination in a carousel. Example: http://remylab.github.com/jpaginator/
I am trying to improve on working but ugly code, the homework is done.
You should not be improving things where your grades are set against those of other people through crowd effort. The simpler way to look at it is "if your professor knew you were doing it, would you get in trouble?" The answer, of course, is yes.
Dreamweaver actually helped me get started understanding code. You just have to use it less and less as a crutch over time. And it can be frustrating to not know how to manipulate it in the beginning.
&gt;All you need to ask him is whether it's okay for you to gather homework from the public. He said we could use code from any source, as long as it is cited, as we weren't taught what I am trying to do, we wouldn't be marked on it anyway. &gt;I wonder if you misunderstood me, or if you just don't want to face what's being said to you. I think you have some sort of mental problems. &gt;By reading, not requesting other people to write it for you. "Here's my code, what's wrong with it?" Are you stupid or something? &gt;I'm not really interested in a conversation with you. We both know why you refuse to ask your professor whether what you're doing is okay. He specifically stated that what I am doing is how we should learn. How do you "know" differently, is it because you are pulling it out of your ass? &gt;Your increasing emotional tone and increasing rate of insults makes very clear whether you know what you're doing is wrong. It pisses me off that my coding/learning time is being wasted by a troll.
&gt; &gt; We both know why you refuse to ask your professor whether what you're doing is okay. &gt; He specifically stated that what I am doing is how we should learn. How do you "know" differently So I notice you seem to still be confused by what I said, and what you wanted to see instead. &gt; I think you have some sort of mental problems. &gt; time is being wasted by a troll. Mmm. You done trying to get the last word yet? I'm still not interested, and you claim to be pissed off that your "time is being wasted" (entirely voluntarily.)
I run a case-sensitive file system on my hackintosh and case-insensitive on my Macbook Air. I use MAMP Pro for both, with PHPStorm 5. I have XDebug configured between the both. I use Safari for my PHP development testing. If I need a tool that isn't available in XCode, I use homebrew to grab it. In regards to your original post, I manage my host files and Apache config with MAMP Pro. I tend to use "*.localhost" to define my local sites. I also use GIT for version control and store all my repos on Dropbox to keep them in sync between my computers so I never have to worry about working with old versions of files that I haven't committed yet. -- As for negatives: A Case-Sensitive Mac is not a great idea. I've shot myself in the foot a few times with my hackintosh. I cannot install quite a few apps. In particular, Photoshop. I can run GIMP just fine though. A Case-Insensitive Mac is also not bad for development, but if you're developing with code that has an autoloader that lowercases filenames and you define "/models/User.php" in your environment, it will work on your local Mac and not on case-sensitive Linux. Never had an issue with MAMP's built-in PHP, MySQL, or Apache. The only issue I've had with it in development is when I used MAMP that had PHP 5.3.6. I now use 5.3.14 for my local development. (5.3.6 had some weird reference issues with closures)
&gt; Anyway, does it matter that a project, any project, is hosted on SourceForge? It probably doesn't, other than something like github makes it much easier for people to browse, change, resubmit code. The biggest thing I think when I see something on sourceforge, however, is that it's probably horribly outdated because everyone uses github now. I realize this isn't entirely fair, but 9 times out of 10 I find that sourceforge projects are either dead or relics of a bygone era of PHP development.
woppa! I just took his sql and changed it around. it was pretty late and didnt think that far. The password shouldn't be looked up in the SQL! my bad! 
if he really is trying to learn, then I've done something good. if he is just trying to get his homework done and doesn't give a fuck, then regardless of what you tell him he won't learn anything. Conclusion: always give people the benefit of the doubt! 
np! do whatever you like with it. Change the connection to whatever type you see fit. Although messing around with code is the best way to learn, so hit me up if you need any further explanation. Also, I just realized that you should change the SQL to: "SELECT id, useremail, userpass, userid, userrole FROM users WHERE useremail={$username}" The password checking happens at line 24, so there is no need to include it in the SQL!
Yes indeed :D
&gt; Students shouldn't be graded on a curve. And yet they are. Which means your choice has an impact.
Thanks again, sorry but what fields would need to be changed to connect to the database I specified? As it stands I am sticking with my horrible generated code because it works.
All choice has an impact, that's why its called choice... If your teacher grades you on a curve, then he's a fucking idiot and so is your educational institution for hiring him. Besides, why are yo so butthurt about it? for all I know, this code snippet here gave him more than what his teacher did. I know, cause that's how I learned. 
that you have to lookup yourself. I dont know what method you are using to connect to your database. Read on mysql_connect. It's super simple and shouldn't take you long to figure it out! 
Hmm, I see. Good point. I feel the same way about SourceForge most of the times. But I think one has to check if the project is actually alive or not and not judging it by where it is hosted. Anyway, I agree with you.
No they dont! Where the fuq did u get that from? That might be the case in some places in the US (?), but for the rest of the world where the IQ is above redneck level, students are not awarded grades based on a curve. Any semi-functioning educational system awards students based on their own work according to pre-set standards, not in comparison to others. Otherwise, a diploma loses its fucking meaning if its not measured against a set standard! 
That's still a singleton, it's just storing it in a different place.
&gt;This is getting boring, this fake skepticism. Dude I lived there. I have blond hair! Where do you get all your BS from? I attended KTH, SÃ¶dertÃ¶rn and Stockholms universitet. I know more about those systems than you ever will. So stop with the BS because you're butthurt! &gt; That's correct: the school level you're familiar with does not work the same way university does. I am a UC student -______-
&gt; Dude I lived there. I have blond hair! Clearly where you've lived and what color your hair is means you understand how the university system works. &gt; So stop with the BS because you're butthurt! Wake me when you have a point. &gt; I attended KTH, SÃ¶dertÃ¶rn and Stickholms universitet. &gt; I am a UC student -______- Wow. Almost as many universities as Sarah Palin. All UC schools are on the curve, by the way. I'm kind of bored now, so if you keep yelling without introducing something new or interesting, I'm probably not going to reply anymore. 
Wow, this nicely validates the system I wrote! The only difference is that I don't use a class. As an example, $vPage = array( 'css_files' =&gt; array('css/universal.css'), // Files to be linked. 'css_inline' =&gt; array(), // CSS code to be placed in the head. 'js_files' =&gt; array('js/jquery-1.7.1.min.js', 'js/universal.js'), // Javascript files to be linked. 'js_inline' =&gt; array(), // Javascript to be placed in the head. 'js_onload' =&gt; array(), // Javascript to be placed in a jQuery onload function. Multiple entries will be put into a single function. 'header' =&gt; array(), // Header content. 'content' =&gt; array(), // Main content. 'footer' =&gt; array(), // Footer content 'data' =&gt; array(), // Anything in this array will be exploded() into the local symbol table for the template file's use. ); Each of the above has an associated v_page_add***() function. There is also an "addon" function which references an array to add multiple items. So calling v_page_addon('jquery-ui'); will add the .js and .css files. v_page_addHeader/Content/Footer are multi-purpose. If a string is below 30 characters, the system checks if it is a valid filename and includes that file; otherwise, the content is added to the array directly. Functions: v_page_addon() v_page_emptyCss(), v_page_addCss(), v_page_addCssFile(), v_page_addCssFileInline() (loads a file but puts it as inline code) v_page_emptyJs(), v_page_addJs(), v_page_addJsFile(), v_page_addJsFileInline(), v_page_addJsOnload(), v_page_addJsBodyOnload(), v_page_addJsFileOnload(), v_page_data(), v_page_title(), v_page_titlebar(), v_page_addHeader(), v_page_addContent(), v_page_addFooter(), v_page_run() v_page_run() calls all the templates or content. Most pages use the same std_html, std_header, and std_footer templates (std_html containing the &lt;head&gt; section), but different pages can load up different things as needed. I should mention I did this because I got annoyed with systems like Smarty (PHP is already a template language, why did we need another written within it?). And the system is very fast. 
Again you submit this? To what aim?
Just checked OP's post history. Reporting as spam. 
Dude, that is a cut and paste from YOUR code. Problem 1 is that you use a ridiculous infinite loop to do something that takes simple math. if ($height/($width/$maxwidth)&lt;=$maxheight) { $thumbnail_height=$height/($width/$maxwidth); $thumbnail_width=$maxwidth; } else { $thumbnail_width=$width/($height/$maxheight); $thumbnail_height=$maxheight; } Done. No loops (and the gross lossiness of all the floor()ing) required. Problem number two is that you *aren't* making thumbnails at all. You're just providing the size of the space the browser will cram the image into. But it is still the exact same image as the full size one. A *thumbnail* is a *smaller, separate image* of a larger one. You're not making thumbnails at all. They way you do it, when the user loads the page, the entire image is sent to his computer, and then their browser does extra work to resize it for display.
What exactly are you trying to do and why?
As freexe asks, could you give us some concrete examples of URLs and substrings? It's reasonably likely that you can extract the relevant bit with a regular expression and then do a simple switch/case, perhaps with some elseifs to wrap things up.
Ahh, cool haha. Thanks. Can't believe that got past me.
sure. here's what I WAS doing before, when I didn't notice that the urls on this site are very, very dynamic. $cururlsku = curPageURL(); switch ($cururlsku){ //caturlz crown case "http://xxx.us/index.php/crown/crown-severe-duty-commercial-31-batteries.html": include("xxx.us/tables/pg1/31c.html"); break; case "http://xxx.us/index.php/crown/crown-12-volt-commercial-deep-cycle-batteries-921.html": include("xxx.us/tables/pg1/921c.html"); break; case "http://xxx.us/index.php/crown/crown-8-volt-commercial-deep-cycle-batteries-gc8.html": include("xxx.us/tables/pg1/gc8c.html"); break; ?&gt; For about 50 different urls/cases.
Basically there's products on this Magento site which are configurable products(basically just a product that can contain subproducts, like Main Product: Shirt, then Subproducts: Blue Shirt, Red Shirt, etc.) So for each subproduct, I have about 10 sets of attributes that I want to display in an attractive way. So I have neat stylized tables for each main product, which contains all it's subproducts. I have the php file to delegate the appropriate table (i use a button that runs a jquery popup to do it specifically) to the matching product. So for instance with this example it'd be like &lt;?php $cururlsku = curPageURL(); $pos = strpos("www.store.com/redshirt", "redshirt"); if ($pos === true) { echo "Red shirt product table"; } } ?&gt; I need to do the strpos (or similar functionality) because the urls are really dynamic, sometimes it'll be like store.com/index.php/redshirt, sometimes itll be store.com/index.php/shirts/redshirt, etc etc.
Hey, I tried to implement this, seems right to me but I'm getting this error Parse error: syntax error, unexpected ',', expecting ')' in /home/adamjmag/public_html/jquerytest/stringfind.php on line 10 Not sure why that's wrong? &lt;?php $string1 = "hi"; $string2 = "hi"; $string3 = "hi"; $value1 = "VALUE"; $value2 = "VALUE"; $search = array($string1 =&gt; $value1, $string2 =&gt; $value2); foreach ($search as $k, $v){ if (strpos("h", $k)){ echo $v; break; } } ?&gt;
Actually you DO have a comma on that line, right after $k. The syntax for foreach is foreach ($x as $a =&gt; $b), not foreach ($x as $a, $b).
The `foreach` syntax requires a `=&gt;` in between key and value, not a comma. foreach($search as $k =&gt; $v) { ... ... }
haha caught me before i edited that out :P thnks though.
Could you not post the attribute in question along with the jquery request? Or use regex to find the likely attribute?
I would add that this is exactly why you should post your problem not the problem with your solution. Your problem is that you need to know the attribute/subproduct, and your proposed solution probably isn't the best way of doing it.
That's because the arguments to [strpos()](http://php.net/manual/en/function.strpos.php) go in the order of `haystack`, `needle`. Your current code is trying to find the value of `$string1` and `$string2` *within* `$lame`. You have to switch the argument order to `strpos($k, $lame)` so that you're searching for `$lame` within `$string1` and `$string2`.
Wow. I'm stupid. Also if anyone else has any use for these concepts, a reason why my code was working is because strpos() will never return True, so you have to use !== false. Now I got it to work.. kind of? It seems to only iterate one time. Don't understand. Code if anyones interested &lt;?php $string1 = "hi"; $string2 = "hello"; $value1 = "VALUE"; $value2 = "VALUEZ"; $lame = "h"; $search = array($string1 =&gt; $value1, $string2 =&gt; $value2, "hi" =&gt; "hello"); foreach ($search as $k =&gt; $v){ if (strpos($k, "h") !== false){ echo $v; break; } } ?&gt; 
It's because `strpos()` is actually finding the needle in the haystack, so the `if()` evaluates to true, at which point you break out of the loop after the first iteration via the `break` statement. If you want it to echo all values in your array, you have to remove the `break` statement.
wow. i'm a fucking idiot, you rule, so hard. I thought this was going to be a 20-30 minute excursion, it's now cost me near 4 hrs. if you can't tell I'm pretty unfamiliar with PHP... I miss Python. Lol.
flock works well from my experience. I have a polling mechanism that runs once per user every 30 minutes. There are a few thousand users that this runs for and it can take anywhere from a few seconds to over an hour to run depending on the user. All scripts are launched at different minutes in that 30 minute span but flock works to keep the script running more than once at the same time for the same user.
They said that nothing should segfault, not that it is impossible. There are some that are well known and unfixed yet, like https://bugs.php.net/bug.php?id=51936 .
Yeah because nothing says efficient console work like having to require a bunch of files every time I make a code change I need to test.
My opinion is this should be fixed.
PUT is indeed designed to be used with multipart data. The PHP person that said otherwise is misunderstanding. This should be fixed.
I'm replying to you directly in the hopes that you'll see this. This is an excellent resource that spells out the basic syntax of PHP very simply. I've been writing in PHP for over a year now and I still found this very helpful, as it helps explain the very foundation of the language: Check it out: http://framework.zend.com/manual/1.12/en/coding-standard.coding-style.html You will naturally have a lot of questions when you start, and this is great! One of the best way to get answers is simple to Google it, like "PHP single quotes versus double quotes" and you'll find a link to both the [manual](http://php.net/manual/en/language.types.string.php) and [StackOverflow](http://stackoverflow.com/questions/3446216/difference-between-single-quote-and-double-quote-string-in-php) where you can not only get the answer, but get all sorts of conversation and comments behind it. Great stuff! I really hope you'll enjoy PHP, it does have a bit of a learning curve and there's so many ways to accomplish things that it's easy to get overwhelmed, but once it starts to click you'll realize it's one of the best (if not *the* best) programming languages for a website. You can write chat apps, blogs, calculators and converters, file uploaders, downloaders, and sharers, image manipulation tools (like adding a watermark and much more)... if you can imagine it, chances are you could implement it in PHP -- and it will be fast! If you want anything laid out for you you're welcome to PM me, I'm not an expert but I have plenty of experience and I'm sure I could get you pointed in the right direction. Good luck and have fun!
Several years ago we put in a request for this. The answer at that time was "PHP is only for web. You don't need it for web. Stop using PHP for non-web stuff." I hope they've changed their minds.
I don't think it's an issue / I agree with the PHP admin. Using $_FILES works very well in terms of parsing multipart data for you. Recent work with NodeJS shows not only the same, but requires you to put the stream back together yourself (or with a nice library).
It's a complex topic, but if you're going to do this in PHP+SQL, you should look up tokenization- that's what you want here.
No, you can't recognize where's name and where's last name (actually you can, but it's complex), you can store in one of the columns in database concatenated name and last name (and search against them), this will solve the problem. But you really need to read [that](http://www.phptherightway.com/).
The PHP bug tracker works largely through "triage". Age of the bugs doesn't necessarily come into it. If the bug is a lot of work to fix, and doesn't necessarily hold a lot of immediate value (things work well without fixing it), then it's unlikely to be fixed. That being said, patches are certainly welcome. There may even be one already, and it's just not been pushed through, because nobody has taken the interest to bug the right people.
...nope. str_replace &amp; strtolower &amp; same on db side
Try disabling prepared statement emulation. (You should do that anyway, regardless of the issue.)
"A bunch of files" Sounds like a problem with your app architecture
I recognize that it's not something that _should_ be done, but that doesn't mean that it should be ignored entirely.
Interesting article. A lot of expected results but some were surprising to me
No, it should be ignored entirely. If it's not ignored entirely then somebody will try and use it. The GET request ignores the body of the request -- every piece of software between you and every server expects that. Not respecting that will certainly cause many known and unforeseen problems.
It really depends on the audience: their market, their location, and their skill level.
There is no situation here. PUT is not a POST. PHP certainly should be making those decisions -- being overly and incorrectly permissive has been a source of bugs and problems for PHP forever. Trying to do something so completely wrong should be hard.
"Server semantics for GET, however, are restricted such that a body, if any, has no semantic meaning to the request." PHP *should* be making those decisions, and they've made a right one in ignoring the body for $_GET, but they've made a wrong one by ignoring PUT altogether.
Resource is defined in RFC2396 and is defined extremely vaguely. It does explicitly say that a resource can be "a collection of other resources." Point being that your definition is the way most people understand it, but I consider the OPs interpretation to be valid, if somewhat unusual. http://tools.ietf.org/html/rfc2396
&gt; The point is that $_FILES doesn't do anything for you if you're using the PUT method A image (usually) doesn't do anything with data if you send data to it using PUT. This is simply not using the tool correctly. &gt; PUT is the more correct verb to use in a lot of cases Not for PHP and not for HTTP REST (using 4 HTTP verbs is just one implementation). There's a continued opinion that PUT is appropriate, but it's not "correct". PUT is one way to do it, but incorrect in this case.
I'm wondering about this too. HTTP/1.1bis sounds a bit more constrained, and I'm not sure processing a multipart/ payload is supposed to be the standard behaviour. http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-20#page-14 Which OTOH isn't to say that you shouldn't be able to do it. But I personally feel this isn't the most urgent feature request. (Takes a decade until such extensions materialize on the majority of servers.)
All your saying that every HTTP method is exactly identical with exactly the same semantics! But that's not correct. PUT is for replacing the entire contents of a resource on the server. PATCH is for partially replacing it. Parsing data into the $_POST global is not supposed to apply. Not interpreting that data at all (but providing it in full in the script) is the right thing to do for any verb other than POST/GET. Those are the special cases. 
Looking forward to watching the video and the in-depth articles :)
&gt; multipart-formdata is not part of the HTTP spec, it's part of the HTML specification. It's only defined as valid for POST requests (it's not even valid for GET). This I didn't know, and you're right. This I consider a valid reason for not "having" to include it. I would still argue that it's a logical way to encode things in PUT, and providing a less kludgy way to do it would be a good thing, however.
I've had to write 3 large, massive-scale REST APIs with PHP. I've never had any problem with this and I agree with the admin. It's simple enough to parse the `php://input` stream for what you need and PHP isn't responsible for another organization's spec not adhering to contemporary RESTful practices.
Did you just completely ignore my last reply? I agree, putting PUT and PATCH data into $_POST is wrong. Technically, furthering that logic, $_GET should be completely empty for post requests. If you want to argue the semantics of the variable names, the system has always been broken. My point is entirely that PHP doesn't know the semantics of every request method that exists, and therefore shouldn't be attempting to determine if the data is relevant. Sure, $_POST is the wrong place for that data to go, but that doesn't mean the data should be completely ignored. Put it into $_REQUEST, put it into $_BODY, put it into $_INPUT, I don't fucking care where it goes, just stop ignoring it! 
&gt; The fact that the web server without custom code won't let arbitrary people overwrite your files with a PUT request is irrelevant. You misunderstood. Send your data to a dog, a pill bottle. None of these have an API that will understand or accept this data in a useful manner. That's what I meant by sending the request to an image. &gt; The core difference is that you use PUT when you already know the URI for the resource. This is commonly interpreted as "when you're editing." POST is suggested to be used when you don't know what resource you're talking about (ie, when you're making a new one) or when you're dealing with things that aren't a direct mapping to resources at all (an email form, for instance). Those are implementation choices. I think most people can recognize the difference, but hearing about what other people have done successfully is not the same as being required. &gt; PUT is (offtopic) the suggested methodology given in the HTTP spec. This is a suggestion. Yes. Technically, not required. &gt; As for it's not appropriate for REST, Wikipedia would disagree, as would pretty much every article I've ever read on REST. [REST](http://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm) [HTTP REST](http://cafe.elharo.com/web/why-rest-failed/) [GET/POST vs GET/POST/DELETE/PUT (HTTP REST)](http://www.artima.com/lejava/articles/why_put_and_delete.html) [A more recent look at GET/POST over HTTP REST](http://roy.gbiv.com/untangled/2009/it-is-okay-to-use-post) Ultimately you have to make an adult decision for yourself. Are you listening to someone's mantra about a technology you're clearly familiar with or are you making a technical choice based on evidence that you can point to? Either way, the debate is muddled heavily by the blogosphere, cult of personality, and almost no science (lots of theory). In a very practical sense, *I think* the web has done fine without strict rules about what constitutes HTTP REST and the benefits have been suggested, but not borne out in both small and very large projects I have worked on. That's my take. 
I agree that using PUT instead of POST doesn't create a lot of benefits. Using POST isn't horrible or an abomination. The main benefit is that caches have a better understanding of what's going on. Your articles actually accentuate my point, however. The first makes no mention of PUT. The second says that PUT is cleaner, but laments its lack of support. The third argues that they're put is no better than post in practice due to the statelessness of the web (an interesting argument), which comes the closest to arguing against me. The last basically says that PUT is better sometimes (but not always), and that POST is acceptable as a default.
Not necessarily full resources. You can replace only part. It's meant for making repeatable edits to a named resource. That often means a completely replacement, but not 100% of the time. True, MIME multipart would be technically better. The differences in the two formats are incredibly minimal, and PHP won't help you for either one.
Thanks for the advice. Yes, I am trying to learn PHP as I go, and it's more difficult than I thought. Anyway, I'm not struggling with a query, I'm struggling with query results. I guess I don't understand what the object is that I get back. I var_dump the results, and it looks good, then I try to do something with the results and it falls apart. I was just thinking there was some kind of add-on to PHP that makes it so that I don't have to run the query results through two loops just to get it into an array.
You should only need to go into one loop to get the data from the MySQL result?. I would give u an example but I'm on my phone at the moment. Check out the PHP.net site, the documentation is excellent and the comments usually contain loads of examples. Its easy to lookup functions. Use the search or try something like this http;//php.net/mysql_query or http://PHP.net/mysql_fetch_assoc 
If you're just uploading a file with PUT you can access the data like so: if($_SERVER['REQUEST_METHOD'] == 'PUT') { $put = fopen("php://input", "r"); // open input stream $tmp = tempnam("/tmp", "upload"); // use PHP to make a temporary file $fp = fopen($tmp, "w"); // open write stream to temp file // write while ($data = fread($put, 1024)) { fwrite($fp, $data); } // close handles fclose($fp); fclose($put); } Also asking for the file in a PUT to be auto-populated is fundamentally flawed because with POST the file is placed somewhere on the server by the HTTP daemon and PHP simply receives the file location whereas the file data in a PUT command resides completely in the HTTP request and hasn't yet had anything done to it. I think it would be unwise for PHP to automate this when it has historically been the pervue of the HTTP server.
Actually the pthreads extension is probably the best option (edit: as its an extension) at this point that I'm currently aware of (if anyone knows of better, please share). In the past I've gone as far as pushing big tasks to run as their own process in the background as well, and have scoured Stack Overflow a few times on the topic. Anyways here's the main pthreads site and at github. http://pthreads.org/ https://github.com/krakjoe/pthreads
Complexity of a framework &gt;&gt; complexity of basic php. Frameworks arent designed to make PHP simpler, they're designed to make certain functional tasks simpler (building websites, etc.). They often make programming much more complex so that the goals are easier to accomplish (in the sense of effort/time/etc.). Java developers however have, admittedly, been able to act to the contrary. Many "intermediate" developers have notably been learning the right magical symbol ordering required for popular frameworks without being able to understand the frameworks themselves. This is facilitated by advanced IDEs that generate substantial amounts of code and a considerable ecosystem of plugins. The same situation is true of web .net developers who use "components" extensively and have the complexities of the web hidden from them by their IDEs (postData, etc.) This however, is not currently possible for PHP frameworks (nor, certainly, is it desirable!). They are documented, taught and presented often under positive assumptions about a competent audience and not designed for IDEs. 
 $db = new PDO("mysql:host=localhost;dbname=db","user","pass"); $all = $db-&gt;query("sql statement here")-&gt;fetchAll(PDO::FETCH_OBJ); // $all = $db-&gt;query("sql statement here")-&gt;fetchAll(PDO::FETCH_ASSOC); foreach($all as $row) { echo $row-&gt;id.":".$row-&gt;name."&lt;BR&gt;"; } I skipped out the part about creating a prepared statement and passing in arguments - you should be doing that often. To get started with PDO basics, that above should give you enough to be able to query and get the results in about 5 minutes. "id" and "name" are assumed to be column names in the select statement - change as required. The FETCH_ASSOC version will bring back the results as associative arrays instead of objects, so you'd use $row['id'], etc. -&gt;fetchAll is great for small sets - for larger sets, you'd want to iterate in a loop using -&gt;fetch() 
&gt; PUT is inappropriate for REST. I did not mean to suggest that. Let me state again that PUT is an implementation choice for HTTP REST. PUT is not "correct" for HTTP REST, but one convention for specifying transfer states, as opposed to a technical necessity.
You should not be advertising the mysql_ functions even if its just for learning. Aside from being misused and deprecated, PDO is probably easier for a newcomer to understand what's happening. To the OP: look into PDO and learn how to do it properly and safely.
`mysql_` functions are easier for a beginner to understand because there's no encapsulation or scary `-&gt;`/`::` to wonder about. However, I agree - there is no reason anymore to even mention `mysql_` functions.
You're doing it wrong.
A talk on different testing solutions (unit vs functional / phpunit, behat, rspect, etc.). Should I use all/none? Etc. E.g. when does testing make sense, what type(s) of testing should I use, and how do I actually do it?
Storing search results? That's **exactly** what you should **NOT** be using sessions for. You're abusing the system. End of story. Sessions are a nightmare when it comes to scalability. First, they block. Second, you need a mechanism to keep multiple servers in sync. Third, they take up disk space. I ask why you need that. What are you storing server side that you can't cheaply look up properly... And that's why I've come to the conclusion that for most use-cases, server side sessions simply aren't needed...
Well, it's pretty simple. I store the username and a unique hash of something about the user that only the backend knows (and not the password). So the cookie looks like: `userid:hash`. It's not fakable, because the attacker knows neither the data used to hash it (because it's not public info) nor the secret key used to sign the hash. That gives me enough information to validate that the cookie belongs to the proper user, and they are authenticated... And best of all, it requires no writes on login or each page view. So it's MUCH more efficient at scale...
Downvote and guess because you have no idea what's going on. Way to go Reddit... And for the record, no I am not that dumb... I store the username and a unique hash of something about the user that only the backend knows (and not the password). So the cookie looks like: `userid:hash`. It's not fakable, because the attacker knows neither the data used to hash it (because it's not public info) nor the secret key used to sign the hash. When I need to authenticate the user (not every request), it's trivial to do so. And I don't need (or want to for that matter) to store anything server side. I let the client tell me who they are in a way that I can validate it.
why would anyone store search results in a session?! i was talking about filters for sorting them. i guess the most common usage for sessions are login information. how would you check if a user is logged in without sessions? you don't store sensitive information in a cookie. i'm not saying you can't live without sessions but alternatives are (depending on the usecase) worse.
There is a good discussion about sessions and REST on stackoverflow: http://stackoverflow.com/questions/6068113/do-sessions-really-violate-restfulness
No... please... no...
Ah, I see! I didn't realize that session data is rewritten after each page view i.e. even when you don't change any data (but that makes sense, of course - at least the session timestamp needs to be refreshed, otherwise the session would auto-expire regardless of client activity). Taking those writes into account, it changes everything. Thanks for explaining, and kudos for sharing your solution!
While the banner is a bit off-putting, /u/SRGoogleGuy knows his stuff!
Ah, sorry, I agree. I misunderstood what aspect you were calling crude. I assumed you simply meant that the functions were crude, or the idea of comparing modified strings for equality. I was considering the general case of two strings from anywhere where there are definite rules that can be implemented with replacement and case modification. Certainly, in that case, dont construct a parsing engine, tokenizer, or anything of the like would be complexity for its own sake. 
I'll work on something on that front. Whether it's a talk, or a series of blog posts, or whatever...
Wait, so you're talking about using PHP in the Android runtime? Or are you talking about using PHP to service content to Android clients? If it's the 1st, I don't think there's much to talk about, unless you want to talk about the development of PHP itself on these new platforms -- so that it builds and all of the API's work on Android. If it's the 2nd, I don't think that's a concern of PHP at all.
Mmm... scalar type hinting... yum.
I doubt if he can execute a simple MySQL query correctly in PHP that Kohana would be any help at all.
While it's listed there as "under discussion," there's no way that it's going to happen. Accessors, though, those are more likely. 
There's plenty to talk about :)
SQL is simple to use. Really. You'll get the hang of it in an hour or two, so don't worry. MySQL the application is very straightforward. In fact, using MySQL and PHP together is almost seamless - you would barely know you are using MySQL!
That's actually how I wrote it the first time, but people don't like functions around here. Which is fine since I don't like singletons anymore since they make testing with mock objects so hard.
You misspelled "[riddance](http://www.merriam-webster.com/dictionary/riddance)". &gt; The pace at which extensions in the PHP PECL repository is responding to the updates in 5.4, however, might be a bit a more lax. Ugh, tell me about it. So many of them have patches sitting in their bugtrackers to make them 5.4-compatible, yet the "maintainers" don't incorporate them into an official release. It doesn't help that most of PECL appears to be one-offs created by the PHP core devs. ---- The real advantage to using accessors, over `__get()` and `__set()` is that they are *per-property*; in your example they look roughly the same, since you've constructed a class with only one public instance variable. ---- PHP seems to be slowly accumulating core devs who have some idea of how to design a language (or at least copy one well), which is awfully nice to see. Perhaps one day soon /r/lolphp won't have to exist.
Really looking forward to the easy property accessors. One-line definitions for the field and its getter: private $foo { get { return $foo; } };
Might want to look into pdo -- same database, better functions. You can programmatically assemble your queries just like this, but can sanitize and bind params to the queries safely. As it stands, that query could fuck you. Additionally, if you look into how to create a nice relational db schema, you could be grabbing user data from other tables using the user id, no guess work or query magic involved. 
the idea is to work on a project in git -&gt; upload to github -&gt; have production app from web host download from github. or something along those lines
You write some very informative articles. Thank you! Out of curiosity, how well would you say the 5.4 features have been received / adopted? Specifically traits; do you think it has helped significantly in resolving the shortcomings of single inheritance?
I have done all this in java. I feel like I offended you with my post, and I apologize. PHP is confusing because there seem to be so many ways to do everything. And one way to do something doesn't seem to work with other ways of doing the same thing. I thought that because a single query requires at least 3 lines of code, that someone would have made a function that takes in a query and sends back the results because I have written that function for myself. Then I realize I need to put the results in array form to do anything with them, so I started writing a function for that. Then I thought: "This has got to be a function somewhere. There has got to be an easier way to do this."
And [peek](http://www.merriam-webster.com/dictionary/peek).
&gt; Specifically traits; do you think it has helped significantly in resolving the shortcomings of single inheritance? Scala and Javascript and Ruby and a number of other languages think so. Traits vs Mixins (composition) is not a PHP issue, specifically. http://www.visoracle.com/squeak/faq/traits-vs.html Traits encourage reuse and minimal refactoring on change. Traits give the same benefits that the new accessor syntax does.
`public $foo` lets the variable be changed outside the class; `private $foo` with a getter does not.
I'm aware of the difference, and my demonstration wasn't intended to show the same as yours. Maybe I should have used a different variable name to better denote that.
nice to see the developer listening to its users ;-) But this tool can not beat ZendStudio and its Debugger, but have good look with your software !
If you know ruby *well*, I'd say use it for webdev rather than PHP. The language is much neater to work in, as has *shittonnes* of tools and utilities for webdev, many of which totally eclipse what PHP has to offer. Even developing a PHP site these days I find myself using ruby tools to help me. 
I find w3schools as a quick cheap reference.
From [TFA](https://wiki.php.net/rfc/propertygetsetsyntax-as-implemented#read-only_keyword): class TimePeriod { private $Seconds; // This property has specified the read-only keyword and therefore is read-only public read-only $Hours { get { return $this-&gt;Seconds / 3600; } // Setter may not be defined } } // Results in Fatal Error $o = new TimePeriod(); $o-&gt;Hours = 4;