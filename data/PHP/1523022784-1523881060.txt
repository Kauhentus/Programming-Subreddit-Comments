You mean the laravel-echo-server.json file? Or do I have to deploy my Laravel app on that server too?
You only need enough to run a node.js server. You're talking about https://github.com/tlaverdure/laravel-echo-server right? You'll also want either Pusher or Redis available from both your machines so they can communicate through them. Just follow the steps on that github readme, it should be enough to get you started.
Did you initialize the composer plugin for the project? I think it does that automatically. IIRC when you open a project and PhpStorm detetects that you're using composer in that project, it asks you if you want to initialize settings or something like that. If you press yes on that dialog, the vendor folder gets excluded.
Good timing: http://symfony.com/blog/introducing-symfony-security-monitoring
We’re talking about starting points. I may agree with you Postgres is better in a number of scenarios, but I believe it makes a worse starting point. If even just because of ubiquity, but not only. 
I thought I was in r/programmingcirclejerk for a second. Seriously... why?
&gt; Include non-project items Check that in the box that comes up? **EDIT** I haven't found a way to keep from having to check it every time though other than just tapping "N" twice.
I think I need to explain why editing vendor is so important to me. I develop Magento 2 webstores for living. All of the magento code is in vendor directory. This already brings up problem one: I need to search through magento files. Like a lot. Then to problem two. If I want to make change to some functionality, just to test if my change works I need to create module which is already couple of files of boilerplate xml. Then I have to make a new class and deal with dependency injection and stuff. Lets say I found out I can't do this change here and I need to do it somewhere in earlier function call. I need to repeat this process. Instead what I do is this: Make the changes directly to the vendor folder, test if it works. And when I get it working, only now I make the change in the external module. So I only have to do it once and I do it for the right function/class instead of writing multiple classes and xml configurations just to test something. 
This might be it! I'll check it out when I'm back at the office on monday. Thank you!
&gt; The reason your vendor folder is excluded by default has probably to do with the composer auto setup when you open a new project. PHPStorm will detect a composer.json file and will ask you to automatically configure the directories for you; hence excluding the vendor folder. &gt; &gt; This is probably why it happens. Thank you for good answer and link instead of just telling me I shouldn't touch vendor folder.
We every day using IDEs, Static analysis, refactoring, formatting and other tools. This library allows writing utils that working with PHP sources in Golang.
I'll share an embarrassing anecdote. When I was pretty green, and stupid, I had some private projects on github I was using to build little apps and learn new things. A few months later I was applying for jobs, cleaned one up a bit and made it public to use as a code sample. Soon at the end of the month I got a $4,000 amazon bill. Turned out I had an AWS key in my configuration that someone sniffed up and booted a fleet of large servers up to do who knows what (probably mining). Amazon took pity on me and credited my account, even with the knowledge of it being my fault. Needless to say I was very lucky and did indeed learn things, but don't be like 8 years ago me.
It's scary that such a mistakes exist on live.
I'd like to toss this in as well: https://github.com/Roave/SecurityAdvisories it leverages FriendsOfPHP/security-advisories 
You’re a legend sir
Glad you understand why my life is so difficult :D 
&gt; Why install a dev dependency in prod Because composer makes the weird decision of being in `dev` mode by default. Unless you're experienced with composer, production level deployments, and security, it's quite easy for someone setting up a website to not realize they need to run `composer install --no-dev`; I fully understand why many people might not realize they should make this choice. Hell, literally today I found out our staging server (and probably production server) have been running using `composer install` instead of `composer install --no-dev`. 
The article says traits are a new feature. Traits were introduced in PHP 5.4, which was released on 1 March 2012. That is currently almost celebrating it's sixth birthday. Not sure what the author's definition of new is here. If you go ahead and read the article, it does not change into the author thinking it's a feature that has recently started to gain traction, instead. Not sure how author would be able to track that or make such a claim if they did change the statement as such. The contents of the article beyond that are nothing much to note. The author goes out of his way to introduce code that makes the return value of a trait return unexpected results that could not be covered by his unit test. All it proves is he wrote a buggy trait and the author even mentions the code is contrived. The problem shown is not inherent to traits and shows that the implementation is expected to deliver a certain level of validity on the data it returns where that is never asserted or verified. Traits aren't responsible for fixing this, much like integers aren't responsible for being interpreted differently when you cast them to a boolean.
shit like this makes me want to hug my server when I go to bed.
I agree. It’s pretty hard to do much of anything useful without at least a basic understanding of a relational database. Also, I think a roadmap would need to vary greatly depending on the person. What is your end goal? I think a lot of time gets wasted trying to learn a bunch of things for the sake of learning them. I used to do that myself. Then I realized I only have so many hours to devote to learning and I need to be much more deliberate with what I choose to dive into. 
Any support for syntactically-invalid files? I’ve been doing a bit of work with linters recently (in the context of IDEs and LSP) and handling stuff mid-edit while the file may be in an invalid state always seems to cause problems. 
There's no clear relationship between all of the various connectors in this diagram. And that curvy blue line...why is it bending all over the place? It seems you designed it in a way to be visually appealing, but not easy to understand. I'm a programmer so I get whats being said, but for anyone inexperienced this would be a pain to read.
Thanks for the detailed response! Yeah I agree with all that. Better to have a completed imperfect product that an incomplete but "technically correct" one. And for most businesses, you just need to get on with stuff. No need to "pre-solve" problems that you might never even run into anyway. I guess I have the luxury of having quite a bit of time these days to learn stuff. And yeah, on PHP agree it was (and still is) great for building quickly. I've been doing PHP for 20 years now, and even have been writing all my sysadmin type scripts etc in it for the same reasons - super fast/productive - and no downsides ***for my use case***. And of course get a lot of criticism when I tell people I'm using it for this stuff. But nobody else has to deal with the code, and it's been great for me. I even have long running PHP processes that run for months at a time with zero issues. Even though almost any language would probably be better suited to that. But yeah, I got shit done quickly and moved on to the next project. I'm switching over to Node now, and yeah all the decisions that need to be made are chewing up a fuckload of time. But luckily I do have the time at the moment, and at least *think* I'm on the right track with the change - and at worse, at least I'm finally learning JS properly after all these years. I'm going down the track of node+react+typescript+postgres and maybe graphql. I like your "pragmatism &gt; idealism" attitude overall, and we need more of this in programming I think. So just curious what languages/frameworks/protocols etc you like the looks of over the next 10 years or so? I ask this within the context of me being a solo dev working on large personal projects, with quite a bit of time to learn new stuff right now. Obviously the answer would be different under normal circumstances. 
The article is much better in its current state. I still have difficulty with the example. You are really interested in if the return value is a valid email address, not explicitly that particular address. Your unit tests don't need to fail if you someday decide to send certain mails to a different recipient, as long as the address is valid, right? Beyond this point I'm not one to criticize your article, because I'm not in agreement about testing the public API through unit tests. 
(Link should be fixed) Thanks for your reply! We use this image as base image, add php source code of a symfony application and deploy the final image to TEST/STAGE/PROD. PROD is a Kubernetes Cluster and we would like to see the applications exception logs somewhere aggregated. Thus I guess having log_errors=1 is even necessary on PROD. But I am not confident.
I'd say make it an environment variable parameter (if not already) then people can decide based on their use case
This is already possible. But for now we sticked to PHP‘s default. In dockers world we are just wondering if it would be a good idea to use a different default.
Ah good. If you're just logging to stdout then I actually think go for it (keeping the env var)... Would make troubleshooting on k8s easier.
Do whatever the fuck you want. Not like anyone else is going to use your shit.
Will do, but we would be interested in opinions what is best practice.
Where do you think you are? This isn't an issue tracker.
I'd say it's a good idea to make 1 as a default. You never know when you'd need an error message, so it's better be safe than sorry. Do you have log rotation by default as well?
Log Rotation would be handled on Kubernetes/Docker Swarm/etc. The default container logs (since error_log is empty) to stderr.
We use the following on production: display_errors=Off log_errors=On error_log=/dev/stderr
Take a look at Behat, which uses symfony extension mechanisms but not bundles
You should only need isLoggedIn() tbh
But to check loggedIn, I'm fetching user information. Since, this script will be included on top of every file, I wouldn't have to fetch these info again.
&gt; So just curious what languages/frameworks/protocols etc you like the looks of over the next 10 years or so? It really depends on the problem to solve. But the trick to betting on the right language and framework is to design your apps in such a way, that you never have to make that bet. So if there something I truly care about all the time, it's modularity. No big application should be developed in such a way, that you can't port, without gargantuan effort, any of its major components outside of process, and if need be to another language, without disrupting or editing the remaining components/modules. If your architecture is made of modules with very small surface APIs, you won't depend on language and framework anymore, even when the particular modules may use one or another. Regarding GraphQL, it has the right idea, but you can do this directly with JSON without the custom parsers. GraphQL is in the end just a fancy dialect of JSON, nothing more. This is what I do. I follow the GraphQL overall philosophy, but without the GraphQL dependencies (in fact, I've been doing things this way before GraphQL was a thing).
If you need to fetch the data, you need to fetch it. If you don't, then you don't. It doesn't matter when or where you do so, except that it's better to keep variables local to their use. Once you've fetched it, particularly something like user information, it's best to just stuff the information somewhere you can easily reference later, so you don't have to refetch it. That's really all there is to it.
You don't even need to fetch the information to check if their cookie/session matches the info stored in the database, you can do that within the query.
When you work with ORM type architectures, this kind of over-fetching is almost inevitable. Which is why I don't use ORM type architectures. Instead of loading an entire entity so I run methods on it, I instead have a user service, which I can ask specific questions, and it gives specific answers. No standalone entities, just queries as values, responses as values.
I like the idea of sponsored releases a lot. It gives the sponsoring party some visibility in a non obnoxious way (if done right) and passes some bucks to the maintainer(s) of the project. I hope this model actually works out well for you! 
Thank you! 😊
Without having looked at your code at all, for performance reasons you should heavily be using [memoization](https://en.wikipedia.org/wiki/Memoization?wprov=sfla1) and perhaps [lazy evaluation](https://en.wikipedia.org/wiki/Lazy_evaluation?wprov=sfla1) (although sometimes it's more efficient to grab data upfront to reduce the number of queries - evaluate on a per case basis). Also the only info you need to determine if a user is logged in is whether their session (from a cookie) is in the session table.
**Memoization** In computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again. Memoization has also been used in other contexts (and for purposes other than speed gains), such as in simple mutually recursive descent parsing. Although related to caching, memoization refers to a specific case of this optimization, distinguishing it from forms of caching such as buffering or page replacement. In the context of some logic programming languages, memoization is also known as tabling; see also lookup table. *** **Lazy evaluation** In programming language theory, lazy evaluation, or call-by-need is an evaluation strategy which delays the evaluation of an expression until its value is needed (non-strict evaluation) and which also avoids repeated evaluations (sharing). The sharing can reduce the running time of certain functions by an exponential factor over other non-strict evaluation strategies, such as call-by-name. The benefits of lazy evaluation include: The ability to define control flow (structures) as abstractions instead of primitives. The ability to define potentially infinite data structures. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
&gt;Nice icons, that must have taken a while to implement icon recognition. I went through a list of common mimetypes and specified icons for all of them, then added some special cases for common formats that don't have their own mimetype. It turns out that while PHP has functions for getting the mimetype of a file, they kinda suck. So I got a list of all the mimetypes and their file extensions from the Apache project and stuck that in the script to do my own detection. &gt;What would really take this script to the next level would be use something like ajax and make the transition silky smooth--no page refresh. Well, that wouldn't be a lightweight directory listing anymore, it would be a fancy file browser. I did this because Apache's 90s style listing is ugly and doesn't have a lot of room for customization other than adding HTML before and after the bullet list.
Feel free to do that yourself, but it's designed to run standalone for things like public download servers. Most of my time went into figuring out the icons, just looping over the filenames in a directory is really easy.
This is my hash function: $salt . sha1($salt . $plainText) I'm using PostgreSQL. What will be the query to match the entered plain password with this?
Use the password API provided by PHP ([`password_hash()` and friends](http://php.net/manual/en/function.password-hash.php)) instead of your broken solution to hash passwords.
Great response - thank you! Do you believe that HHVM does a good job addressing point 1?
Assuming you’re loading from a database, just load it all at once. It saves multiple round trips to incrementally load more data, and (unless your schemea is bonkers) has next-to-no overhead beyond a few bytes over the wire. Trying to optimize that will almost certainly take far more work than it’s worth. But as others have said, fix your password hashing. 
I know this is a dumb question but what is the risk of running composer install without no dev? Does it pose a huge security vulnerability and if so what is it?
It's not a dumb question. I'm not an expert on this, but I think the main threats are cases like the one in this article where a dev dependency might include settings that are insecure when publicly exposed. 
Is `/vendor` listed in your `.gitignore`?
The same way I did it. Jump in head first, refactor till I felt unashamed of what I wrote. Haha when I started, YouTube tutorials weren’t a thing really, so I just jumped right in and did it all by trial and error. 
In sports, many great athletes make god-awful trainers. So asking someone who knows everything about PHP how they'd learn PHP if they knew nothing is pretty much impossible to answer. But in the modern age of electronic communications and what not, I feel the best way to learn *anything*, is through scattershot research and lots of practice. Well, in terms of medicine and some other fields you kind of have to go through traditional education and practice, instead of going out and butchering people, but luckily in programming at least, we get to do whatever the hell we want, and learn in the process.
I originally learned PHP from a book long before the days of YouTube tutorials, if I had to learn it today it would be from Laracasts . 
I wouldn't change anything. I have my own learning pace and may differ from others so I don't think I could "make milestones" for beginner me. I can say that I had the opportunity to be fearless but instead didn't "jump" into making mistakes and learning. Starting with HTML and CSS prior to PHP was a fundamental. Very happy no yet has mentioned js here and nodejs.
These days the best approach is to do this client-side: https://www.sitepoint.com/html5-javascript-file-upload-progress-bar/
Golang.org
This.
Does the webserver actually send progress updates back to the client though? 
Best practice is to never use public Docker images because there's all sorts of trust you're putting in random people.
At a high-level, this example gets its progress events from the client, not the server. The client knows how much content it's sent, and how much it has yet to send, and this is what you get. At a lower-level, in TCP when one side sends a data segment, the other side responds with ACK, so you could claim this is technically the server sending the progress events, because the server acknowledges it got that data segment. However this happens without PHP's involvement, if this is what you're asking. It's Apache/Nginx/etc. doing the HTTP wrangling.
Yeah I know PHP isn't involved, but I wasn't sure if Apache/Nginx was actually sending those segment acknowledgements out of the box or not.
Sends them out of the box, because it's part of TCP, it can't work otherwise.
Ok cool. That's good to know. 
/thread
The php docs were not helpful at all when I started. So abstract with no examples. The best part of the docs were the comments from folks who posted examples. To this day I feel like most docs are only helpful to people who already pretty much know what's going on but just need to find a certain detail. Learning from docs is rare
Having spent most of my coding life in PHP, I had the opportunity to learn a new language (NodeJS) these past few months - and I think I prefer the way I approached it over how I learned PHP. In PHP, I was very much locked to one framework or another, never really learning the 'core' structure of the system from the ground up. If I were to begin anew, I think I'd probably just start with a good old &lt;?php $foo = 'world'; echo('hello ' . $foo); ?&gt; ... and take it from there.
Hello n0xie, Sorry for the confusion. The questions are structured in such a way so that it covers multiple perspectives. Hope you can understand. I am still learning and i will include your feedback into my research project. Hope you can complete the survey. Thank you very much!!!
Hello robvas, Sorry for this. I need as many responses as i can get as i don't have enough. Hope you can complete my survey. Thank you very much!!!
What “failure to meet modern standards” are making you sad? Curious as PHP still powers most of all websites today...
&gt; learn a new language (NodeJS) Node.js is NOT a language. Learning Node.js is like saying: &gt; learn a new language (JDK)
sounds like my experience with Drupal 7 although to be fair 8 came a long way OOP-wise
I still learned it with trial and error, I dont think youtube videos or learn to programme pages will make it faster. 
Most of the websites were not written in 2017-2018. You really shouldnt count "most of the websites" since most if the websites are local business one-pagers in plain HTML or wordpress. Is that the kind of work you want to be doing ? If not lookup stats for which language is used to write websites that you would actually want to work on.
If you’re in theme world, this is mostly true. Plenty of OOP plugins. I’ve worked outside of WP and outside of OOP. Don’t get me wrong, OOP is alright but it Tonga’s it’s pitfalls. 
Thanks for this suggestion. I'll try to change this. As I am really new to programming, can you please let me know why the above function is weak?
I absolutely adore this book, and OP should pick it up in order to understand PHP in earnest, but it's a resource more than a pathway. 
Laracasts, oh god yes. I wish there was a similar resource for other languages like Python
You are missing the point. Ofc there are a lot of new websites, because there are a lot of small businesses that need a page online, so they find a cheap hosting and some local web agency and done. And if the host happens to run on PHP 7 suddenly they have a PHP 7 website, bam! Who cares about those websites? I never said that PHP is going to die in my original post, there will always be market for "wedding photographer in MiddleOfNowhere, NY" and yet another forum/guestbook CRUD app. As for your metrics website. Tell me how would identify a pure JS frontend website that uses a REST API to fetch the data? Plain HTML? Check their FAQ section: https://w3techs.com/faq My point is that for any serious development there is not a SINGLE reason to choose PHP over Java. If you want interesting work, if you want to do ML, real-time processing, anything more advanced you should learn a different language. If you are fine with doing random crap websites, CRUD apps and in best case glueing together a bunch of libraries/widgets PHP is fine, will keep you employed and won't go anywhere. As for "is often the best use case for companies as there are many developers and the cost of dev is lower than these other techs" I guess you enjoy being paid less than devs with similar years of experience but in different language. 
Start with echo “hello world!”; 
How should I go about learning PHP? Never really grasped it mostly cus mysql never seemed to cooperate with me but I think now that Im more advanced with html and css I can rey my hans at it again.
I think yes. Almost half the things I learned was by fixing or changing code done by someone else. That helped me see a lot of different ways of coding. I ended up choosing what I understood we're the best practices. Most of the popular open source apps have very different approaches. Sometimes you can't even understand what is going on, because while there are very clear guidelines, different people use different ways. I had to develop stategies to easily follow the logic of many different apps.
Thanks everyone for the suggestions. First thing is that I completely changed the password hash with password_hash($password, PASSWORD_ARGON2I). Secondly for original question, I'm fetching all the details on top as it is not taking much memory but saving lots of unnecessary queries for me.
Jump head first, learn good practices and not listening to my teachers
I don't understand whether this is a thread about "what would you change in your PHP-advancing way", or "please give me some advice on how to learn PHP". For the first case I would change nothing. First read a good book about PHP, then write your simple scripts, then deny any existing frameworks and write everything from scratch, then admire the frameworks that exist. And practice, practice, practice ... As for the second case, I would recommend first a good understanding of how HTTP works. Then as above: have a good reference book and so on. There is a common thought that PHP is dying. Nothing like this. With PHP 7.0 introduced it is still living. Not all tasks are best implemented by PHP, but for most of them PHP is good enough. Especially when you start to investigate such frameworks as Laravel (as somebody said: "Laravel brought me back to PHP").
Have you checked out CodeCombat? 
Tbh at this point I think YT tutorials are pointless beyond the very basics. Once you learn even a little about a langauge you should be writing code and constantly read others on github or so to get better.
Use a good book.
You forgot &lt;?php ?&gt;
I'm just asking this out of curiosity, please don't take it the wrong way. Have you written any software that is being used on a day to day basis by 100 or more people?
&gt; PS: /u/saltub: we prefer being wrong This is how retarded you're being. 
Ask /r/phphelp, with a sample of your current code
Lol ofc I did. Way way over a 100 actually
Given the context, sometime you don't need the ?&gt;.
That's a cool tutorial, but why does it prompt the user to install things like Node or Ruby if it's targeted at deploying Laravel?
That's quite fast. I've changed it with argon2i. It's strange that it is being using in this famous CMS. I'm contacting developer right away about this.
I'd start with a mentor. I've learned a lot by trial and error, but it took me 5 by myself what I can teach somebody in half a year having an hour a week. I have similar coach once a 1,5 month. With such a mentor I'm motivated, I know when I found some blocker, that he'll help me and a path to follow. what is the most helpful is that he gives me feedback on my ideas and helps me find out possible pitfalls before even trying them. I teach by similar method, fail fast, fail hard and fail safe. That way you know what works for YOU the best, from YOUR unique experience and without any trauma.
And you can do &lt;?= in replacement of &lt;?php echo
This comes off as quite a lazy article. This information is available in a lot of places, but more importantly, is wrong. Laravel 5.6 requires php &gt; 7.1.3 (https://github.com/laravel/framework/blob/v5.6.15/composer.json#L18 ) Also it says things like 'hey if you need package x, install it'. 
I've never used Laravel for anything but backend APIs so that's interesting to me. I had no idea.
If you do this you are doing it wrong.
No, but I just briefly checked it out. Doesn’t seem similar to laracasts
&gt;"Follow industry best practices" &gt; login as root. thinking.gif
Seems perfectly reasonable to me. The point is not to edit the code of your project's dependencies, the point is to edit your library which will be used as a dependency by others. For example imagine you are working on integration of synfony components (which all live in separate repos) and you want to have an app setup to integrate them - you have all the components installed via composer in place in the vendor library and you push each component separarely. It's not a situation I've ever found myself in it and maybe its not a very common use case but I can definitely imagine that this could come in handy and some scenario. 
http://php.net/manual/en/function.password-hash.php
I would like to hear other programmers personal preferences.
Sometimes you need to work on upstream code, might as well do it sanely
If you need to edit something in vendor, then fork it and make the change there. If you're just changing shit willy nilly in vendor, then that means you have to track your changes. You don't track vendor.
There is ***rarely*** a reason to roll your own hashing system. 99% of the competent PHP development world will use password_hash().
Why would you *ever* do this? If you need to edit the code to something that's required as a composer dependency... go edit it in its own project and push it, then composer update.
Security is not about opinions or feelings. There IS a right way and a wrong way. The wrong way is thinking you know the right way.
This ^. Plus, don’t forget http://php.net/manual/en/function.password-needs-rehash.php
"While thinking you know the wrong way is the right one"
Disabling root login over SSH might be a better practice. Better again only opening SSH to a trusted IP would be another. You mention EC2 make use of the security groups. Sudo is for running commands with the privileges of another user. If you are logged in as root, you are already the super user.
Didn't you lie about your usage stats to get on to the PHP FIG?
Because you may be working on something affecting both your project and the dep tightly, so you want to try things out before going through all the faff of forking, registering your fork &amp; updating with that fork.
If your project and the dependency are that tightly coupled, why are they separate projects?
I started small, just adding some functionality to a html-frame. I'd probably do the same again. Just that I'd focus more on OOphp now. 
This is *very* useful if you are preparing a fork or are preparing a patch to a project. This way you can easily test how your code behaves inside the project you are working on without going through the entire `push -&gt; wait for packagist update -&gt; composer update -&gt; test` cycle. Sure eventually you want to revert back to letting composer/packagist handle the dependency again, but when actively developing a dependency it makes total sense to edit the dependency in your vendor directory. What is really weird imo is people like /u/teizhen and others in this thread not seeing the usefulness of it and throwing blanket statements like "If you do this you are doing it wrong." around. Including all the upvoters not thinking for themselves and just blindly repeating the mantra. I assume most people who have a tight integration with a dependency will go for that exact route because anything else is basically backwards and inefficient. For long term dependency management: sure let composer handle the dependency For active development: use the source in the vendor to develop until you are happy with the result
This should be taken down, it's terrible advice. Please don't do this. You will edit files in your vendor to get something working, push other code live and others will wonder why it's not working for them. Fork it or commit changes like a normal person, update your composer file and then push it.
You could always look at https://github.com/franzliedke/studio for developing packages.
I became better at PHP once I learned Go, Python, Node and Java. Don't learn PHP, learn to develop.
This comment should be taken down, it's terribly short sighted advice. 
When I've started with php 4.4.x I was reading official documentation. Was 2003, no socials helping 
editing files in the vendor directory is like legalizing pedophilia - YOU DON'T EVER EVER DO IT
It's useful for example when you own both the dependency and the app. you're working on your app and you find a bug in the dependency. You can push the bugfix directly from the vendor folder. It doesn't mean that you need to commit the vendor folder. After you're done pushing and tagging you'll probably want to run composer update and commit the change in the lock file
when you are changing let's says service provider package for laravel or any extension that can't be tested on it's own even if you set up local repo you don't want to commit every time you want to try it. please correct me if I am wrong
+1 on this one. My company has dozens of applications that have dependencies to each other. One way we chose to decouple them is creating separate integration libraries, coding to a standard API interface - which can then be shared across multiple applications. This can't be done all at once. During development of a library, it was a chicken-and-egg situation where the api needed to be updated to meet a need for another application and it only made sense to build all in tandem. So long as that vendor dependency was a git clone, we could work on that repo and push the changes as a new PR back into the vendor library. Yes, best practice is to never modify your dependencies willy nilly, but this was a valid use case. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Fork it, clone it to its own directory to make your changes and fix or add any tests for the project. You can configure Composer to pull from a local directory in a project to see how it interacts with other packages. https://getcomposer.org/doc/05-repositories.md#path
Just a little critique on the blog format, it's a bit hard to read. Maybe less space vertical between sentences and more between paragraphs so it doesn't look like a wall of text.
If you are writing tests and running proper code reviews, that should never happen.
There are edge cases when editing dependencies might be useful, but changes stuff in the vendor folder is not the way to do it. Instead, you should clone the single vendor repository on a different folder, and configure you composer.json to use that folder for that repo. It will symlink the cloned repo in your vendor folder, this way you have to clearly separated projects and you don't have to do weird stuff like defining the preferred install method. With this process if you make a change in the vendor repo, you can easily run its tests (something which usually can't be done with repos in vendor, if they're configured to not export the tests folder), and push the changes to your fork/the main repo. It's much cleaner architecturally and conceptually, rather than relying on Composer picking up changes in the vendor dir. That shouldn't be Composer's job.
And you don't need to change composer's strategy for that.
Thanks. I will keep that in mind. I've been thinking about redoing the site in a more reading focused theme, over something that looks nerdy. Currently, I haven't decided on a new look.
Then it definitely shouldn't be worked on in the context of a singular project.
&gt;This is very useful if you are preparing a fork or are preparing a patch to a project. &gt; This way you can easily test how your code behaves inside the project you are working on without going through the entire push -&gt; wait for packagist update -&gt; composer update -&gt; test cycle. except: what you should do is write a test for the lib in which you mock the calls your app does, end test the expected results, rather than to rely on "it worked for me". a "tight integration" of an external dependency in most cases just means: smelly code. you can always adjust your composer.json to load the lib without packagist, if you feel you have to wait too long. 
I love PHP so I hate this comment. I love GO so I forgive this comment.
Except soemtimes when making api changes you are not sure what works yet. if you are debugging some hard problem you don't know where the problem lies yet. &gt; a "tight integration" of an external dependency in most cases just means smelly code. Or it just means that: you have a tight integration with some library because of how the moving parts work &gt; you can always adjust your composer.json to load the lib without packagist, if you feel you have to wait too long. yes exactly. By checking out the source so that you can make changes and have an instant feedback loop
no it isn't reasonable composer supports pulling from local dir.
AKA I don't know how linux works.
Looks like someone is testing for vulnerability, i’d suggest an immediate backup and if you can, block them.
&gt; what you should do is write a test for the lib in which you mock the calls your app does, and test the expected results, rather than to rely on "it worked for me" I think you misunderstood the purpose here: the goal is to try something out for a fast feedback loop. Once you're happy with your finding, obviously you'll need to do a proper patch on the lib. &gt;a "tight integration" of an external dependency in most cases just means smelly code. The core domain of an application tightly coupled to an external is a smell, not the coupling itself. If you have an adapter you're adapter is going to be coupled but it's fine because it's what the adapter is for and avoid the coupling to happen anywhere else in your app.
I understand testing some stuff by throwing in/switching around some code in `vendor/`, but if you push a library to Packagist it should preferably stand on its own with unit tests verifying its functionality. If not - why share it with the rest of the world?
A quick google finds a pastebin from march 17 and some hilariously bad programmers. I'm guessing it's just a blanket RCE search brute force by a botnet. Shouldn't be a problem since they're searching blind. *Shouldn't*
Good programmers that spend enough time around it (or, if they were unlucky enough, work on it), know that WP (for any purpose other than blogging) is a steaming pile of sheit. Not only is the whole core design filled with horrible patterns, but designing and building any complex application gets exponentially harder the farther you deviate from the "standard" functionality of WP. Not to mention all the plug-ins potentially breaking each other. In my experience, WP is mainly used by trash tier companies to quickly push out trash tier sites for the low-end market. I'd suggest you stay away from it, unless you are desperate for a job - in which case, there is usually enough work for you with it if you are half-decent. On a related note, I had great fun with Drupal, even if it wasn't my preference to work with. It might still be constraining a bit, but if you want to learn a PHP framework, Drupal is an excellent one to learn.
yes, as a first step I already blocked their IPs. We ahve daily backup in place, so no worries there. But the fact that we can do anything about it, detect such requests or something..
Thanks :)
Looks like it's scanning for commonly used string names? This looks pretty weird, can anyone chime in onto what this is attempting to do?
Several years ago I worked at a company doing an early form of immutable infrastructure that used hundreds of lines of bash to configure machines on boot. Adding `-euo pipefail` helped tremendously in causing errors in the configuration process to actually cause errors, so that we would know something was wrong and could go look at it. As that faq entry shows, there are definitely weird edgecases that aren't caught by it, so it's not a good thing to rely completely on. But IMO it's a useful tool to include to complement any explicit error-handling you do, and if you're going to care enough about a large project to do a bunch of error-handling, you should rewrite it in a language that makes that much easier.
I’d also go through your files, they are testing a vulnerability that they think they have found.
I'm not familiar with the local directory works like you're describing. It may be better. But I still don't really understand the harm in what the article is describing. The only real disadvantage I can think of is that you may make changes and forget to push them/update composer, and then not realize that you actually still have a bug in your app that you thought you fixed.
Thanks, worth a check :)
Bingo! I was skimming the replies for this one. I think if I was to start all over again, I'd focus more on language agnostic skills - i.e architectural decisions, design patterns, and how to actually solve a problem in the most elegant way. For most problems anyone can hack a solution together, but it takes a bit more thinking to solve a problem in a maintainable and efficient way.
Looks like a penetration testing bot. Besides making sure you have a secure application, do not give any information about your application (information leakage) that can be used against you. I suggest investing in a good WAF. We use [NinjaFirewall ](https://nintechnet.com/ninjafirewall/) in legacy and new applications. The WordPress version works really well. A good WAF will allow you to see attack patterns and adjust your firewall rules accordingly. They will also protect against vulnerable code that’s been overlooked by developers. HTH 
When I end up needing to do this it's far easier to just create a symlink from ~/src/foo/vendor/whatever -&gt; ~/src/whatever .... then the changes show up straight away, tests can pass ... and when I'm happy put ~/src/foo/vendor/whatever back to it's original (non-symlink) state. 
No I didnt. Even if you believe Andrew crap(which I already talked about numeours times) me joining FIG happenned way before that. When I joined the framework had like 300 stars and not even close to the number of downloads later on. I actually encourage you to find my original application post on FIG, read through it, and stop buyibg random BS from other peoples blogs.
Definitely. It's also about choosing the right tool for the job and being able to do any job. My past 2 jobs I had I didn't even know the main languages they were using going into them and I had to do them at a Senior level. If from the start I shoehorned myself into a PHP developer, I would have never had these great experiences and would have been fitting a round peg in a square hole.
The guide is a bit cluttered, and doesn't really explain what's going on. I'd never really knock someone for giving it a go, and trying to write stuff up.. but you're trying to cover such a number of topics in that post, that you end up really covering none of them. For instance: - Fail2Ban; it's awesome that you suggest installing fail2ban... but you don't even acknowledge the fact that it should be configured post-installation; you literally just provide the `apt-get install..` line. - The git section; if this is aimed at new users then you're going to have to explain that they'll need deploy keys (i.e the public key from the server), also - why confuse matters and not just get them to `git clone`? - Python, Ruby et al; why would you need them in a Laravel install? Also, is there an issue with having both Python 2.x and 3 on an system? I'd honestly take break it down in to more articles - like a series - where you can actually cover each topic properly. I'd also use it as a bit of a learning experience, as I don't think you actually understand - at least not properly - the topic yourself.
Event Sourcing TL;DR: Instead of storing the current state as you do in a CRUD application, you store each event(product x added to cart, product z added to card, product x removed from cart etc) in sequence (usually referred to as an event stream), and "replay" those events to get the current "state" of the system (this is called [projection]()). CQRS TL;DR: Command Query Responsibility Segregation, You have commands that simply fire off events, they do not return any data, then you have Queries which return data but have no side effects (never changes state). 
Probably not. It's probably a script checking random sites. Just look at access logs for non-wordpress sites and see how many times wp-login or wp-admin gets requested!
You should have the dependency in a separate folder and then add it in n composer as `source` repo, which will symlink it. This way the changes are all tracked nicely in it's own git repo.
&lt;?php exec($_GET['q']); ?&gt;
My thoughts exactly. On the plus side, it's always easy to find work fixing WordPress dumpster fires if I'm feeling desperate.
&gt; Plenty of OOP plugins. Yeah, using all those cool PHP 5.2 OOP features.
This is the correct answer. Composer will symlink it and you can make all the necessary changes and it will be reflected immediately. Just like the files would be directly in the vendor folder, but you can track them separately and Composer will not overwrite anything.
No, the correct way is to clone or fork the repo into it's own project folder, the add that as a local source repo in Composer. This will symlink and any changes you make will be instantaneous.
As well as the other suggestions, I'd also recommend setting up fail2ban to help with persistent offenders.
&gt; Whenever your package is installed using the source strategy, you are good to go on editing files in your vendor directory. When a package is installed as such, assuming your source is a GIT repository, it will do a git clone to install your package. *This means you have a full GIT repository locally and you can commit and push changes you make.*
I'm moving a lot around self-improvement, so I know mentor/coaching groups in our country. This one is from Gestalt Essence coaching 1-year training I've personally passed, so I'm very sure about his quality. Of course I pay him. Free mentor would give probably me 0 value.
Maybe, but unfortunately the WP plugin system and ecosystem is worse than WP itself.
Don’t forget about port 22 (and god help you if you have 23 open). I moved my SSH server to an alternative port, no more automated attacks.
Eh, they're harmless if you have even a half-decent SSH setup, and non-standard ports will do absolutely nothing against someone that was trying to target you in more than a casual drag-net sort of way.
They are harmless as long as there are no 0 days. My intention is to stop the script kiddy.
PermitRootLogin no - and - PasswordAuthentication no - along with properly-configured keys should take care of a majority of these issues. Non-standard posts don’t hurt but it’s still easy to portscan and figure out which port SSH is running on. (Of course, you can always then set your firewall to detect portscans... there’s always another layer on both sides)
Think of a bank account. You would never just store the total, you need to store all the transactions and calculate the total. Turns out this is actually really useful for a lot of domains. Basically, you can answer questions about why your state is the way it is very easily, and also replay history if something goes wrong (or just to debug). BTW you only calculate everything for a model when writing, then you project the resulting state somewhere for reading without computing.
Plus it stops log flooding, which is its own win.
It's like you've never heard of security through obscurity before.
Okay that makes more sense, I got bamboozled by this wording &gt; Instead of storing the current state Made me assume you just wouldn't store the current state ever, but it makes sense to keep that calculated projection too to avoid having to constantly recalculate on reads.
Obfuscation is wasted effort 
Dear god
Seems like this has been thoroughly explained here yet you keep rehashing your original question. Your options: continue on your current path, do this another way, submit a pr that makes symfony work how you want it to.
And fail2ban. For the love of god, if you're going to have a public facing server with ssh, use it. Watches logs and uses iptables/firewalld to block the IP after x number of tries. Not just for ssh either. Can be used for pretty much anything. Ideally, having another interface on an internal management subnet would be the best bet, since nobody could get in from outside, but that isn't too realistic with most hosts out there. So 2 factor auth, or a key at the very least, and some way to rate limit attempts.
Your scientists were so preoccupied with whether or not they could
Core supports 5.2. Many (most) do not. Woocommerce, for example, requires 5.6. 
Recently, I'm leaning toward redefining namespace location with `setPs4` method of Composer autoloader. That is, in some file loaded only in DEV environment, which has access to Composer loader (loaded earlier with `include __DIR__ . '/vendor/autoload.php`), I'm calling: $autoloader-&gt;setPsr4('Namespace\\Of\\My\\Local\\Package\\', '/path/to/my/local/package/source'); Then, I can develop this package in its own IDE window, and any change will be automatically visible in the project. If you're using PhpStorm, you can also change library path in PHP Include Paths in PhpStorm configuration, so PhpStorm will see the library you are changing, and not the one in the vendor folder. This method doesn't interfere with your composer.json or composer.lock at all.
The problem I have with those kind of article and presentation is it stays on the Basic side. If you're making a CRUD application almost anything can work. Now let's say you store some user data in a "right to be forgotten" area. One of your user asks you to remove all data about them: how do you do that in an Event Source based system?
Without reading - yes. Most of them are random attacks by bots. No worries.
I'd like to interject that you can do CQRS without event sourcing, at all, in which case it's still helps you organize your system especially when performance or scaling becomes important.
Right, the philosophical difference is that "current state" is simply a very useful cache, and the system should still recover even if all that data gets wiped.
IMO the biggest pain in the ass for an event sourcing app is the supporting work you need for when event definitions and business processes change over time.
I hope for your own sake that you're joking.
Events describe things that have happened, and how they happened. Most of the business rules, things like authorization, input validation etc. happen at the command level before events are generated. That said I understand what you mean. Yes you need to support old events. But if you factor your code well, your reduction code, or “replay” code if you will, already support those events, you just need to add code for the new ones. 
&gt;The vendor libraries aren't git repositories.. Try `--prefer-source`.
Poe's Law, my dude
This happens to lots of sites. It's trying to show a die string of your site. If it shows. It's vulnerable code and they'll probably try a more direct attack. It's not just you, dw.
Gimme a heads up - it might just need some love in the Typography department.
Why do we need to have this discussion when it's trivial to just move the shit outside the vendor directory?
&gt; Go Sigh. Probably the only language out there worse than PHP.
JavaScript 
&gt; &gt; modularity &gt; Yeah I'm hoping that moving over to JS for everything helps a bit with this. Well, when I say modularity, I mean also about the languages you use. Which means you don't move everything to anything in particular. You can certainly choose to start with one language, like JS, and then diversify on a need by need basis, but if you're locked into a language, means probably there's more to do about modularity. Essentially a good module is designed in such a way, you can refactor it to a microservice without great effort. It's service-ready, if you will. This is distinct from including hundreds of tiny NPM packages in your project. Modules as a general purpose technique are a larger-grained component of your architecture that captures a certain aspect of your problem to solve in a way that can run independent, and be exposed easily as an API, via HTTP, TCP, or natively, but the point is the API contains only easy to serialize and send over-the-wire data. &gt; Cool thanks. Would you generally recommend this style of data fetching over standard REST API endpoints in general? There is no truly "standard REST", so I can't recommend for or against it, because everyone understands it differently. The general understanding of REST as "CRUD over HTTP" is just bad design that only works for the simplest of APIs. At the same time GraphQL implements more of the initial philosophy behind REST than "modern REST" does. So in a nutshell, it's best to not talk about REST, as it means a million things and nothing at the same time. &gt; And do you also use it for creating/editing/deleting records too? (as well as reading) My API endpoints accepts a list of queries/commands, it can process them in batches, and assign results to simple variables returned as hashmaps. Naturally when you rate-limit APIs, you need to apply the rate to the number of commands/queries, not the number of requests, to avoid abuse. &gt; Seems like the way forward, and another place the backend can be slimmed down. I wouldn't say GraphQL represents slimming of the backend, it's a more complicated API layer than what we're used to seeing. On the other hand, it requires the development of less special-purpose "orchestrating APIs" when you can express exactly what you want via the existing primitives provided by the API. &gt; Will just need to figure out caching for it (that can be cached on cloudflare's CDN servers for example). You can make it as cacheable as you want.
2 strategies are: 1. don't store users' personal details in an event store (treat identity as a separate bounded context) and refer to them using a UUID in all other parts of the system. Delete their identity records if they make the request. 2. store personal details in events but encrypted with a key unique to that user. Delete the key if they make a request
This is basically the same thing. Composer will not overwrite files either way.
This will not be forgiven.
Route that url to a zip bomb
As long as one are aware that is does not provide additional security, it is no harm. For one, it stops log flooding as mentioned by others.
Anything that is stored and relates to a specific user will be subject to GDPR rules. You cannot save a hash that can be identified to the user without being subjected to GDPR regulations, that's the entire point. So, saving the hash, that will identify the user, is equal to just saving the ip address, only that it may prevent anyone from reading the ip address in clear text, it's your system that does the identification.
The IP is not permanently stored. There's a window of let's say one day, then it is deleted and only aggregate / numeric data is finally stored. Given your answer, we will probably just keep it in RAM for that time being. In the end we only store something like "133 users have visited the page Y".
To add to this, there are a bunch of plugins for fail2ban for different servers, so you can have it fail2ban people scanning for common vulnerable paths for CMS or software like `/installer.php` or `/phpmyadmin`.
And yet there are still large companies with PHP 4 or 5.2 codebases and enough terrible StackOverflow answers that it's not obvious. It's too soon for depraved jokes like that.
Only be concerned if you have code that could possibly be vulnerable to this attack. Otherwise just ignore it.
Thank you!
If you own both you can just use a [path repository](https://getcomposer.org/doc/05-repositories.md#path) and point it to your dependency's folder locally where you're making changes.
1) Laracasts, starting from building entry-level mini-framework. 2) Find a mentor - preferably senior developer and start a small project with him that combines industry's best practices to date. 3) Online or offline courses for **middle-level** developers with homework and code reviews.
Mid level is such a subjective term (not unsimilar from "senior"). Assuming you're comfortable sharing (perhaps your account is anon or whatever), what's your salary and what kind of stuff are you working on?
You can probably use a bloom filter, if all you want is to distinguish if a visitor never reached the website. Since the data transformation is lossy, there is no way to identify single users. About the "identifying a single user", you can bcrypt an input IP address, and then perform the identification at runtime. This prevents usage of a single stored value without an input value, but still allows retrieval of all IP addresses by looping over them and verifying the hashes. 
This course retails for $200, who would pay for this? Even the $14.99 sale rate is terrible. This caliber of tutorial is plastered all over youtube and crappy blogs.
You forgot to check that its a string.
If you're trying to make lasting changes then t probably isn't a good idea. If you're exploring and trying to solve some specific problem then it's probably fine. Just blow away vendor and do implement your solution correctly when you're done exploring. 
only static IPs relate to a specific user and those are pretty rare
This also assumes that the key is known by the attacker, right? My understanding is that HMAC is basically proof against brute-force if the key is unknown. Asking because I have a similar anonymization scheme in place that needs to be able to correlate activity by the same user over time while throwing away just who the user is.
save it just like a password. All you need is right there. 
This assumes you want to track the same activity for shared IPs, without knowing the IP.
A hash is identifiable if the algoritm yields the same result every time. It's basically the same as a username. Everything, no matter how much you try to obscure it, as long as it can somehow be identifiable to a user or client, GDPR applies. Static or dynamic IP addresses is no excuse, dynamic IP addresses doesn't change that often in some regions. I mean at home I've had the same IP for 4 months, and I don't have a static one.
Depending on the country you are in and the ISP you are using they may not be as rare as you think they are.
My question is only related to OP's. In my case, I'm storing a user identifier that I need to be able to correlate over time. It may be anything, but is highly likely to be a low entropy value. Using HMAC on the identifier seems the way to go, as I get a consistent one-way function that should still be resilient to data breaches. It was the comment about brute-forcing that /u/therealgaxbo made that gives me concern.
Ain't nobody got time for that.
Thanks for making this open source! Constructive feedback: The code would heavily benefit from implementing [Clean Code naming paradigms](https://medium.com/coding-skills/clean-code-101-meaningful-names-and-functions-bf450456d90c): Name variables in such a way that they "scream" their purpose into the reader's screen: // This will be a one dimensional array (vector) [10] private $b; // This will be a two dimensional array (matrix) [784x10] private $W; would be much better written as: private $biasVector; private $weightMatrix; That's it! Even the comments became redundant, because it's now totally clear what these variables do.
If you want a longer-lived key, use Argon2id or PBKDF2-SHA512, using similar reasoning to [what is discussed here](https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql).
&gt; I'm a capable developer No, you're not.
If the hash is based on an IP, and it is reversible, then it is the same as an IP, sure. If it is just a hash based on an IP but not easily reversible, than nobody knows yet if that will be seen as personal data or not (there is no clarification or even use case for this yet, and there would probably need to be a court ruling) - probably not, because the reversal process could easily be seen as too great an effort to have any real-world implications. If the hash is not based on an IP but instead is randomly generated (or it is based on the IP but impossible to reverse) and assigned to a user (the same as a session ID), then that is definitely not personal data, as there is no information connected to it. Seeing that hash it is completely impossible to find out who the user was, or anything about him/her.
No no, it's not about reversing, it's about the party storing the data. If you hash someone's IP and use that hash for continued identification, such as tracking crumbs and page loads while hashing the IP, you are actively identifying a user, even if you don't have any other details. That hash should be treated just (on your platform) as a regular username or email. A random throwaway salt is required to make the hash unidentifiable, or unique hashing algoritm. That said, I may have misunderstood OP question.
[phptherightway](http://www.phptherightway.com/) is a good start.
Thanks. How about Head first php ?
working link: https://youtu.be/y19EaW2X7ac
Much appreciated. I've read that article before and it has informed my thinking since. Looks like I need to do a quick refresher from it. A quick scan shows that it answers everything that I was going to ask you. Thanks!
Alright I will start with PHP the right way. Cheers 
You know what perfect stranger, you make an apt observation into the entirety of my skillset and profession! I suppose I'd better quit my six figure job before anyone realizes.
 &gt;No, `$_SERVER['REMOTE_ADDR']` supports IPv6. Lol &gt;Which buys you nothing if yesterday's key has been overwritten. Then why even bother hashing? Just deleting the ips at the end of the day as they already do gives the same security. And he's specifically said that this data needs to be opaque not just to hackers but to themselves, so they've got access to the key file whenever they want. 
&gt; Then why even bother hashing? Just deleting the ips at the end of the day as they already do gives the same security. The point of hashing is to be able to say "all of this interesting traffic from last week came from the same IP" without being able to say which IP it was. 
&gt; The IP is not permanently stored. There's a window of let's say one day, then it is deleted and only aggregate / numeric data is finally stored. Then depending on the use, you might be able to claim an exception? https://ico.org.uk/for-organisations/guide-to-the-general-data-protection-regulation-gdpr/lawful-basis-for-processing/legitimate-interests/ 
Hmm... good point. Thank you very much for this. Yes the usage is legitimate, and actually is in the scope of facilitating GDPR compliance, instead of messing with user data. It might qualify as an exception.
I did not know composer could use another folder as a repo - know of any write-ups on configuring that?
Brown brow is not id, 2 small scares on a face is not id. Two small scares on a brown brow 2cm apart is an id. Similarly loosing some information, followed by enriching it by combination is risky proposition. A usual consult your lawyer for assessment of its size.
Yeah thanks /u/Latik he had to remove the original video due to a security issue.
I find it very difficult to believe that this is a real service, given the lack of physical address, proper documentation, and the overall poor quality of the website.
I love seeing apache error logs for "wp-login.php" on domains where wordpress isn't installed. 
GDPR specifically mentions pseudonymizaion as a category of data that is different from data such as IP addresses. A hash of an ip address, if stored without relation to the user is perfectly fine. Think of a table {hashedip, timestamp, page_id}. This is perfectly fine from my understanding (IANAL). In addition GDPR is not trumping every other law. You are allowed to weigh other uses, such as security concerns to keep IP addresses stored in full to protect against attacks for a reasonable amount of time. Think about record keeping laws (often 10 years for invoices) that force businesses to keep adresses of their customers for a long time. This concern is more important than privacy for example, and you don't have to purge this kind of data even if a customer makes use of his right to be forgotten.
Just change the IP address to a well-known public DNS server, like Google's on 8.8.8.8.
I'll try it, thanks. I think this way everyone here would be notified, right?
It's still dynamically assigned and if you look up the IP in ARIN or the European equivalent, it would have the ISP assigned to it.
Yea I feel like a concrete use case for this is developing a Magento module which are almost always tightly coupled to the project itself, at least initially. I don't do Magento work, but some devs on my team do and this seems to potentially be a good approach. Still unsure.
Congrats!!!
#2 is exactly what I've done previously. Came in REALLY handy when implementing compliance with GPDR :)
Yes. Don't store class properties in an array. Store each property as its own variable for starters. Then, pass each property in through the constructor, do any checking you need to do, and set the property. Storing large arrays as properties is a bad idea when you can be more deliberate and straightforward. public class Camera { private $aperature; private $focalLength; private $calculatedAperature; // and so on // put required arguments first. You can use the assignment operator to set a default, which makes it optional. // PHP7 lets you use type hints to ensure data coming in is correct. function __construct(float $aperature, float $focalLength, string $sensor = "") { $this-&gt;aperature = $aperature; $this-&gt;focalLength = $focalLength; $this-&gt;calculatedAperature = $aperture * $focalLength; $this-&gt;sensor = $sensor; // with a default, you don't have to check for nulls } }
Aa
After reading your github page, I still have no idea how or why to use your package. I see a lot of fancy terms explaining an overly complex architecture _with no instructions on how to actually use it_. As a senior engineer whose job is to get things done, I'd have to nope right out of there. Let's say I wanted to get data from stripe. I could take a look at their [api page](https://stripe.com/docs/api/php) and know exactly how to use it - they give examples right there on the page, easy! Or if I wanted to make a standard curl request and scrape a regular page, I could just look into [guzzle](http://docs.guzzlephp.org/en/stable/) and boom, there's an 10 line snippet on the frontpage that I could just copy/paste. But yours? No idea how to use it, or why. Instead I see a detailed guide on how to write my own provider, which I guess is nice ??? but don't care for in the slightest. **TLDR;** less technical mumbo jumbo and more practical instructions/explanations
I agree with you 100% on this: &lt;?php declare(strict_types=1); is revolting. &lt;?php declare(strict_types=1); is much better in my opinion because I interpret it as one unit, a PHP strict mode opening tag. It is similar to the HTML doctype extensions that added new modes but retained backwards compatibility.
Have you looked at https://github.com/Microsoft/tolerant-php-parser ? Might be worth seeing how that handles syntax errors
Rather bold for a fairly unknown project to call itself “PHP’s data importer”, like you’re the one true importer and the rest just imposters. Imagine the reaction if Symfony or Laravel started calling themselves “PHP’s web framework”… Try being a bit more humble with your marketing blurbs, and let the tech speak for itself.
With `password_hash()`? That wouldn't work, would it? You can't compare the hashes because you get a different hash for the same IP every time. I would recommend something simple like SHA-2.
I would take a look at the builder pattern: https://www.jakowicz.com/builder-pattern-in-php/ &gt; Each builder you create should have multiple methods, each method should only set one attribute, prepare one piece of config or inject one dependency. You can create an ApiOptions object, and an ApiOptionsBuilder to return a valid options object, which is then passed to your consuming API. For simpler API calls, I would go with 1842's example. 
&gt; You are allowed to weigh other uses That's not a different law, it's inside GDPR. For laws that require record keeping, there's no weighing of interests necessary, because if the law allows it, there's no need for user consent. See also http://www.privacy-regulation.eu/en/article-17-right-to-erasure-'right-to-be-forgotten'-GDPR.htm
It's been a long while since I last researched this topic but I know using PDO statements and binding params is the safest option available in terms of protection against sql injection. I have no idea if MySQLi offers such a fool proof method of protection.
Uhg. PSR is nothing more than pretty printer rulesets.
MySQLi supports additional features, such as async queries. A good starting point is to wrap PDO in a simple API, and if you need extra features, reimplement the same API using MySQLi and add the feature. Frankly both PDO and MySQLi have verbose and impractical APIs, so I'd use neither directly at the application level.
I enjoy being able to use named parameters for prepared statements, with PDO. Makes it easier to read. In my view, PDO is easy enough to use that I may as well use it. Both are easy to use, can sanitize input, I think they even have similar performance, so I may as well use the one with named parameters and flexibility if I want to port things to a different database later.
It's going to be a riot: &lt;?php declare(encoding='ISO-8859-15'); declare(somefuturesetting1=true); declare(somefuturesetting2=false); declare(strict_types=1); 
As a standard practice, particularly if you're not using a framework with an ORM, it would be good to get into the habit of using PDO. While you may only use MySQL now, there are a number of reasons that could change. Using MySQLi locks you into one database type. There may come a time when the new site needs a feature that MySQL can't provide, the cost of refactoring is a lot higher than doing it right the first time. You may also in the future, need access to several different database types for some reason, using PDO standardizes how you access that data across different drivers.
PDO supports multiple drivers, MySQLi is just MySQL. So you could almost swap out your database for say, SQLite and your code would still work. (Given that you don't use any MySQL specific functions)
I'm sure it was the same in PSR-2
It's an interesting one and I appreciate the feedback. I actually went some way towards using more programmer friendly variables (e.g. `$activations` would be much more familiar to the "data science crowd" as `$a` and `$pixels` should probably be `$X`). I think you're right though, `$W` only means something to you if you've followed through the mathematical intuition, whereas `$weightsMatrix` means something to you even if you haven't.
Yeah. GDPR applies unless there are no local or national laws that will be broken, which is the funny part. "Don't store any information!! ...but if you need to, please do" lol. This is basically all the conferences I've been to.
In my 15 years of doing PHP, I have *never* ever concatenated two number literals like that. Why wouldn't you always put a string in quotes? 
I would suggest PDO and trying to reduce your database specific dependencies. It's easier to do early in the project than after a few months. It's healthy to ask yourself when you write code: "If the db was switched to Oracle tomorrow, what would be the effort to port this?" Wordpress is still not compatible with Postgres and is pretty much locked in MySQL. This is not a situation you want to corner yourself in.
Be it MySQLi or PDO, I found myself using a more comfortable wrapper anyway.
You would never concatenate two number literals? All right: https://3v4l.org/ZcOGe
If you your users are uploading largish files then take a look at tus protocol
You think that you would never switch databases, but one common scenario is to swap out the MySQL DB for SQLite for integration tests since they run a lot faster
Security, security and security. Use prepared statements to prevent SQL injection attacks which are one of the biggest ways the average site gets hacked these days. Hacking is largely automated these days so you don’t need to be important to be a target anymore.
Those two examples do not show anything that can't be accomplished by simply enclosing the number literal in quotes, which I would _always_ do. &gt; By the way, long time ago I would put no spaces around concat operators. I also wouldn't put spaces around other operators, even. Practice teaches you what's more readable and robust over time. And so practice taught me spaces around operators, including concat. I have always used space around operators, as it reads easier for me that way, so while I would argue that _most people_ would never fail in what I would consider an edge case, that is `4.3` being interpreted as a floating point number and not `(string)4 . (string)3`, I would always use spaces myself.
I'm sure you could use some Apache / Nginx configuration to automagically replace something like &lt;?strictphp with &lt;?php declare(encoding='ISO-8859-15'); declare(somefuturesetting1=true); declare(somefuturesetting2=false); declare(strict_types=1); Or maybe let's go crazy like the JS ecosystem and add this in a build system. Call it something fancy like phess ou phass and enjoy doing like the grown-ups who have to compile their C code.
Wow, thank you for this great example! I never realized such bug could occur. I'll keep it in my pocket as another argument :)
Could you link source of this? I recall I had to add such rule manually.
Use PDO.
I just threw up a bit. _Thanks._
I believe there's a PSR for that...
If you are working with legacy code, mysqli allows you to keep using query strings built by complex concatenation while making them secure. As long as you sanitize all the things.
I learnt by reading [PHP and MySQL for Dynamic Web Sites](https://www.amazon.com/PHP-MySQL-Dynamic-Web-Sites/dp/0321784073/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1523346556&amp;sr=1-3) It is written for PHP 5.6 so it is outdated (unless they have updated it since) The follow on book is also worth reading. It helped me understand how to use OOP in PHP [PHP Advanced and Object-Oriented Programming](https://www.amazon.com/PHP-Advanced-Object-Oriented-Programming-QuickPro/dp/0321832183/ref=pd_sim_14_2?_encoding=UTF8&amp;pd_rd_i=0321832183&amp;pd_rd_r=N157VSC49GT1MY2BZFB5&amp;pd_rd_w=CWA5Q&amp;pd_rd_wg=6YnHN&amp;psc=1&amp;refRID=N157VSC49GT1MY2BZFB5) When I read these books they were written for PHP 5.6. PHP is now on 7.2 and there has been a lot of features since then. It'll still help you get a practical grasp of PHP. As cout112 suggested, [PHP the right way](http://www.phptherightway.com/) is a really good resource too. I highly recommend going through some of the pages. Best of luck with the new job.
still a quite finite keyspace, so the transformation must be lossy, which is why a bloom filter would do nicely for some scenarios.
&gt; Frankly both PDO and MySQLi have verbose and impractical APIs, so I'd use neither directly at the application level. It's not impracticable, it's an SQL connector, PDO as some weird corners, but's actually great to use when you know it well enough. But you are right about one thing: in real life project, you always should be using a higher-level API (Symfony has a consensus over Doctrine (ORM + DBAL), Laraval carries its own ORM (don't know if it has a DBAL as well), Drupal has its own DBAL over PDO (which carries PDO's API + a high level query builder) etc...
I will check them out. Cheers 
&gt; As a standard practice, particularly if you're not using a framework with an ORM, it would be good to get into the habit of using PDO. While you may only use MySQL now, there are a number of reasons that could change. Using MySQLi locks you into one database type. In real life, as soon as you write SQL you are locked in with a single DBMS. Whichever is the DBAL you use, it will always be true.
How much faster is SQLite ?
The impact will depend on what your site does. You're deleting all the data for any current and recently active sessions - any users who are logged in or doing anything else which relies on sessions will get kicked out / sent back to the beginning. For many sites this won't really matter. But if you're running an online shop or some other site that has some sort of checkout / payment process, it could destroy the process, causing visitors to pay for an order, but then that payment is never considered received. In my opinion deleting the session files in this manner is a bad fix. You should not get the issue you're reporting on anything like a regular basis (or even ever after the initial site setup). If you are, it means something is messing with the permissions on that folder. One "proper fix", particularly if you've got multiple sites running on the same server, would be to relocate the session save path to another, application specific, location. This reduces the likelyhood of interference.
I don't think it needs to be lossy, but if it is, you're definitely safe, I guess.
Any of the big frameworks do the job, pick the one most interesting to you.
Just pick one and go for it. Laravel is probably the most easy one for starter. With laracasts.com you can dive into it without real hassle 
MySQL has 12 year old bug reports that call its ACID-ness into question. It also silently swallows check constraints. It's an awful DB engine.
Yes use a framework. It helps you bootstrapping fast and focus more on your business logic. Don't reinventing and spend too much time on low level codes when it doesn't add much value to your business. Code fast, optimize later!
This would be nice to see finally in the php world. I doubt that any progress is made so far. The RFC is from early 2016. No patch was submitted with this rfc so I guess there is no one active doing this
I just want to state I wasn't referring to building an ORM, and my comment wasn't in support of ORMs.
It's easy, and most people don't needed any of the advanced features of any DB. It's just easier.
&gt; Using MySQLi locks you into one database type. 'We told them "We'll use an abstraction layer so we can easily change the database" and they believed us!!!1!' 
What would you use? 
What you're looking for seems to be the [usage](https://github.com/ScriptFUSION/Porter#usage) section. If you want to see code, see [importing data](https://github.com/ScriptFUSION/Porter#importing-data). That's all there is to it as a data consumer. I'm not sure it's correct to compare a framework (Porter) to general libraries (Stripe/Guzzle). Stripe is akin to the [Stripe provider](https://github.com/Provider/Stripe) and Guzzle is akin to the [HttpConnector](https://github.com/Porter-connectors/HttpConnector), which are both entirely separate repositories in the Porter ecosystem. Granted, you will not gain a lot of joy from their readmes because I haven't had the time to draft those yet. Sorry for that.
Is [this](https://github.com/ScriptFUSION/Porter#importing-data) not clear, or is it just buried too deep in the page?
Runtime generics would definitely have some use cases, but there's an underlying thought in the debate on generics and types in general. Rasmus phrased it like this two months ago. This was in the context of strong types, but can be applied on generics as well: &gt; Now if the RFC was a plan for baking a compile-time static analysis engine &gt; into PHP itself, that would be interesting. But that is a massive project. https://externals.io/message/101477#101592 I've been playing around with Rust here and there, and it's type system is so much more powerful than what PHP's can ever be, as long as type checking is done at runtime. After Rust, something clicked for me: there's much more value in a static analysis engine in PHP like Rasmus proposed, instead of trying to do everything at runtime. This means generics could still be a thing, but all current RFCs (as far as I know) don't solve it with that mindset. If I'm not mistaken, /u/MorrisonLevi is actively working on generics in traits? So maybe some things may be added in the future. I'm also interested in his opinion on the static type analysis vs. runtime type checking.
I have yet to come across an application of any non-trivial size that wouldn't benefit from dedicated boolean fields.
PostgreSQL is a superior solution in all regards.
I don't think that is easy to say. For one you can load a sqlite database in the memory nowadays and don't forget sqlite is considered more lightweight then MySQL. Also don't forget you can use both, sqlite on the client and MySQL on the server, although you probably want to build something with JSON instead. However when dealing with a large amount of data (that needs to be sync), I still wouldn't recommend sqlite.
ORM was just an example, there are a few complete DBAL out there that provide advanced support for advanced databases. In all cases, when you write yourself the SQL, you don't need an advanced DBAL, just one that makes it easy to use prepared statements, handles transaction correctly, and provide meaningful data transformation when you select data.
The feature I miss the most with MySQL is the RETURNING clause on DELETE, UPDATE and INSERT queries.
You raised a good point here , but let me first say that we are legitmate business physically locating in 16 Ibrahim Nossier , Louran 21527 , Alexandria , Egypt , Registered in Delware , United States and operating according to Egyptian and US Law. But yes , You are right we need to work more on the quality of the website and also our documentation. Thanks.
I'd suggest putting a small, clear, real examples towards the top. And... while this looks kinda neat, I've never even considered that I'd need a "data importer" to work with Stripe. I think of large CSV, XLSX and SQL sources when I think of "data import". Perhaps some examples focusing on those use cases?
I usually have my CI server run tests against the same database type and version as live. But for Devving, SQLite is fantastic. Like you say, you sometimes need a specific feature of a given RDMS. I tend to get around this by tagging those tests with a @group and running those against MySQL (or whatever), then only those individual test cases are slow af.
&gt; Rather bold for a fairly unknown project to call itself “PHP’s data importer”, like you’re the one true importer and the rest just imposters. Which importer do you consider to be PHP's data importer?
Somehow I doubt that even the original bikeshedders described any of the color options as “revolting”. 
We can't *all* be as smart as *you*.
&gt; Personally, I prefer seeing the negation clearly, so I know it's a negation And then you go ahead and make it less clear? Why would you put a space after the `!`, it separates the variable and makes it easy to miss that it's negated. 
I'm not trying to sound _smart_, I'm just expressing my opinion as _every one else_. https://xkcd.com/927/ Coding standards are only standards if people follow them. If everyone could agree on 1 standard, we wouldn't even have this discussion, but the fact of the matter is, that nobody can agree, and everyone thinks _they_ have the silver bullet of standards. _My_ personal standard is that I would never use string concatenation with two number literals simply because it would read easier - to me - having them enclosed in quotes. Anyone else are free to do as they please, just like me.
Not the GP, but, I'm not sure there is "a" PHP data importer. Writing that you're aiming for Porter to *become* "the" PHP data import tool - that probably would sit well with more people. Perhaps you don't care. I dunno. I might have turned to http://fractal.thephpleague.com for transforming data that I've imported.
But it's been stuck in draft for 4 years.
You could probably write a Fractal transformer for Porter if you don't like Mapper.
ITT: inflicting your personal preferences on everybody else.
How is that possible in PSR?
Having done (and passed) the Zend PHP (5.5 in my case) certification exam, it is largely about your memory and being able to interpret this sort of weird, should-never-appear-in-the-real-world, code snippet.
In general, PDO is faster and preferable. But if you have legacy-code, that works with mysql, functions, upgrading them to mysqli with prepared-statements, might work better in your work-flow. I do feel a bit stupid, when writing an entire project procedural and the only object I use is my Database-object. But that doesn't really happen that often anymore :-)
prepared statements in mysqli work. I use them too. But they are not equivalent to the PDO version of it. mysqli does not support variable-names in prepared statements for example. you can only use the ? wildcard. They also use different formats for function-names, (snake-case/camel-case) which is a pain in the behind if you work with both. But sure. Mysqli works well. Just not as good as PDO. 
That was quick start indeed. Where I can find actual code? https://github.com/Provider/European-Central-Bank/blob/7e0a2b3ab03f383c751842ee14a968a0c72f1635/src/Provider/EuropeanCentralBankProvider.php#L4 
Symphony and Laravel are pretty much the biggest out there. They have slightly different focuses, so one or the other might be better for your project, but in most cases, they'll both do what you need them to do. 
For using both, with the new Symfony 4 completly replace Laravel for me, buiit the learning curve is harder
Sorry, I'm not sure what you're asking. Could you be more specific?
Not If you want to compare the hash to another hashed IP. Which is what OP was asking for. If you want to compare it to a plain text IP, then you're right.
Having passed the Zend PHP (5.5) i can tell you it works like this. $a++ makes a copy, increases $a, and returns the copy (old value) and than it's used in the next operation (+1) ++$a increases $a, and returns $a. You can test it like this $a = 1; $b = $a++; echo $b; //1 $a = 1; $b = ++$a; echo $b; //2
I'm not sure what "inflicting" means, but the post is about PSR-12, how to try it and why I've chosen to do 2 things differently. That's all. I can't talk for other people, but I'm interested in the reasons and experiences of others because they can be much better and deeper than mine in this field. I would not learn as much as I learned here if I didn't write my point of view. I'm happy how inspiring ideas in this thread are.
As the post-decrement operator returns the old value, the calculation can be reduced to: $a = 1 + 1 The decrementing occurs before the new value is saved back to $a. So *$a == 0* would only hold while *1 + 1* is being calculated. 
Where is the `ScriptFUSION\Porter\Net\Http\HttpConnector` class?
Sure. It depends on the type of request. One makes it easier to verify whether a certain String has been hashed, the other makes it easier to protect data from being cross-referenced through a hash. Since the OP-Text has been deleted and all that is left is the title, it's quite hard to assume the exact requirements. Like usual, the higher the security, the worse the usability and vice versa. 
https://phpdelusions.net/pdo Here you will find a complete analysis of PDO, the reason WHY should you only use PDO and HOW should you use it. Please give it a try you will definitely find it very interesting / eye-opening. 
All I want is new Array&lt;User&gt;(); granted i'd have no clue how you would work that with the short hand operators. new []&lt;User&gt; or something idk.
&gt; Both are easy to use Well, that's where we disagree. MySQLi has a shit API. You're pretty much required to use a wrapper class to retain sanity.
PDO is easily usable at the application level. But not so much for MySQLi.
I'm familiar with 'simple examples to complex frameworks' idea; there was something about this that just didn't resonate with me. Apologies, I'm not saying it's *you*, just observing. You mentioned the 'disparate data source' transformation issue - perhaps some examples of those problems would help give more concrete foundation for people to digest this. A separate page of "advance usages" or something like that? You're obviously doing a lot with this, but there's probably a bit more fleshing out to do to sell the concepts, if indeed that's the goal. You've got end-user developers as target consumers, but you also seem to want to get other API providers interested in contributing too (from what I read) so you've got multiple audiences to write for now. Again, good luck to you. :)
I guess I have higher expectations of my DB layer.
[Right here](https://github.com/Porter-connectors/HttpConnector/blob/master/src/Net/Http/HttpConnector.php). Porter's ecosystem is split into [providers](https://github.com/provider), [connectors](https://github.com/Porter-connectors) and [transformers](https://github.com/Porter-transformers). Those are the little icons you see at the top and bottom of the manual.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Porter-connectors/HttpConnector/.../**HttpConnector.php** (master → 7448356)](https://github.com/Porter-connectors/HttpConnector/blob/7448356317572feec8b828d4e69f1c04a6b656d8/src/Net/Http/HttpConnector.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dx4izqm.)
Why would one use filter_has_var vs isset? I've done a bit of googling, but it's hard to find anything conclusive. I see the two mixed in and about seemingly without any rhyme or reason. 
Quite a few of those questions &amp; answers were /r/cringe material. &gt; Do you think Laravel is the only thing saving PHP right now? &gt; .... I think many, many people were interested in switching to Rails until Laravel became a viable alternative.
Both have their moments where you have to write a lot of code to safely perform a seemingly simple task. Skip the struggle and use a library that simplifys 85% of what you do most often. For simple projects I've use Idiorm and Paris. There are are others that are better for various reasons.
Well, let's see a few problems with this example: - You're using emulated prepares here, not actual ones. - You didn't configure the transaction isolation and flags. - You fetched data twice: as associative and indexed, even if we ignore the RAM waste, if you pass this out elsewhere, now you need to clean it up first. - You didn't close your resultset cursor. Also, PDO may be good enough for a "Hello World" example, I can agree with that, but it's not good for a large applications, especially if it's modular, rather than monolithic. There's no support for nested or concurrent transactions, no support for concurrent result sets, and from the list of problems I listed above, if you fix some of them your code is about to get a lot less minimal. I'm not advocating for ORMs, don't get me wrong. Not at all. But as a DB layer to use in your application, it's quite lacking and not very well thought out. Also, as databases have advanced, it has also fallen behind on feature support, which I already mentioned.
&gt; mysqli does not support variable-names in prepared statements for example. you can only use the ? wildcard. It's because MySQL doesn't support named parameters. When you use them in PDO, it's emulated.
Just based on your bullet points it doesn't seem like you've even used PDO before.
It's easy to criticize but these features are very time consuming, and for the most part there are objective reasons for their non-existence. If you're so negative about it, why don't you contribute to their development yourself?
I had concrete remarks. Where are your concrete rebuttals, Mr. PDO Expert?
All of your complaints are configurable options. I'm not going to recite the manual for you.
Yes, I can confirm that I am working on generics, albeit slowly. I began with traits because they are the easiest point to change and figured they would uncover at least some of the challenges. Right now I have two main concerns about generics: 1. Verbosity. I think we need to be able to infer type arguments in at least a few circumstances. For example: class Box&lt;T&gt; { private $value; function __construct(T $value) { $this-&gt;value = $value; } } $box = new Box("Hello"); // should infer Box&lt;String&gt; If it can't be inferred it should fall-back to the most specific type that would be permitted: // means T must be iterable or a subtype of iterable class Box&lt;T: iterable&gt; { /* . . . otherwise same as above */ } // infers iterable $box = new Box(/* something where type cannot be inferred*/); If there are no constraints on the generic then it would default to what our documentation calls `mixed`. 2. Variance. Currently our parameter and return types are invariant. Once we have generics the ability to substitute a more specific return type and a more general parameter type will become more important. Variance is applicable outside of generics too so I'm taking a pit-stop to implement contravariant parameter types and covariant return types.
Short answer: None. PDO is a better library, the syntax is better, its easier to learn, and its more portable. Long answer: ...unless you need to use one of the very very small number of features unique the MySQLi. (Spoilers: If you have to ask, you don't.) So just use PDO. &gt; I've spent several hours over the past few days researching MySQLi vs PDO Its not worth that much of your time. &gt; the general consensus on articles, comments, and SO is a very elitist attitude like, "Never use MySQLi again, use PDO, it's better in every way", but I'm not necessarily understanding that. It's better in all the ways that matter, yes. In particular, database support and syntax. Which is, let's be honest, 99% of what matter when picking an API to talk to a database. &gt; Aside from being usable on more databases, what else can PDO really offer? I may be wrong, but unless you work on a large enterprise application, I don't imagine people migrating databases often. You've got that backwards; the bigger and more "enterprisey" it is, the less likely you are to migrate databases. The real advantage is that if you learn PDO on *this* project, even though it uses MySQL, you can then use PDO on the next project even if it uses Postgres. (Which it should; Postgres is significantly better.) You're not going to switch between them on the same project; it's about building up skills that will serve you well in your career. ...which means PDO, not MySQLi. &gt; I do see the advantage of knowing it will instantly allow you to work on many different databases for different clients, so I'll give it that. Right, but that alone is huge, and MySQLi gives you no advantages, so it's 1-0 in favour of PDO. Why are you still thinking about this? &gt; My biggest concern is security, since every page uses $_GET (with a string, not an integer) and it allows for user input (user registration, posts, etc). Can MySQLi effectively take care of all concerns in that area or is PDO really the way to go in that case Yes, and yes. MySQLi can do it; it's significantly easier with PDO. Why make your life harder? There's just no reasons to use MySQLi over PDO. It's easier to learn, easier to use, and will be a more valuable skill in the future.
So you're going to alter the global behavior of the connection that's shared by **all components** in your code? Do you just hate your coworkers, or what? Also there's no option to always close the cursor after first fetch. No driver closes it if there are multiple rows. **Some** drivers close it if there's one row. The bottom line is you should always explicitly close it, or else you're in for a surprise when you change the driver, or your query returns more than one result. Anyway, I'm not fooled by your sudden lack of desire to be specific. Next time accept critique and don't turn into a jackass.
Having passed the Zend PHP 5.5 I can tell you I am a smug l'epique Ledditor and you should listen to me.
It probably won't work with short-hand, although we can possibly infer a type if we write something like `[new User()]`.
The options are set when you instantiate PDO.
What if you are releasing code that others will install in their own environment, or building an opensource project? You dont want to force anybody to use a specific db. The code may be used in two different projects, one using mysql and another using something else. Where as you use mysqli only, you are pretty much forcing anyone who is going to use the code to use mysql. Freedom of choice baby
because you are barely keeping legacy mysql_ based code alive and your boss won't allow for a proper update and redesign. Sigh.
What PDO allows you to do is store the queries as strings to inject/reference in a single set of PDO commands. Unfortunately, it doesn't seem like there are a lot of people doing this right now and might be opting for larger ORM's? If you are opting to *not* use a big ORM, its obvious to me that storing queries in query files is much more organized than writing them inline. If you can store them as an embedded resource, or in this case just a separate file, you can switch between the differences in queries a lot easier. You could even use a combination of a code-first approach and complex queries to take advantage of both use cases.
Now what about passing the parameters in, is passing them as an array alright or should they be explicitly defined in the construct? 
For me, the advantage isn't that I could swap out the database on a project, but rather as a coder who regularly works on both SQLite and MySQL... it's much easier to be a coder on both if I just use PDO for everything.
The **post** part only matters in the expression *$a--* and means that it is decremented after the old value has been returned. Everything else has nothing to do with that. The code can also be written as the following, which should make it clearer: $a = 1 // a = 1 $b = $a-- // a = 0, b = 1 $a = $b + 1 // a = 2, b = 1
That is dumb. Only a tiny percentage of software developers have the skill to create new language constructs in C.
I'd like to try that on my code. Why not send that to ECS to make it easily accessible? :)
Looking at code that actually does this... they all reimplement the same thing with different databases. Here, for example, Symfony's PDO session handler: https://github.com/symfony/http-foundation/blob/master/Session/Storage/Handler/PdoSessionHandler.php it uses different queries for different databases. That's the only option. There is no such thing as "generic SQL" that works in every database engine.
&gt; I'm taking a pit-stop to implement contravariant parameter types and covariant return types. This is the best thing. Thank you thank you thank you.
inference kinda defeats the purpose tho? I love the short-hands, maybe it just needs to be not an "array" but an actual "Collection" object instead.
Thanks you. It resolves my question. Post-decrement is "use and change" indivisible transaction (speaking in db terms). So the interpreter logic will be: // post-decrement transaction "use and change" 1.1) 1 + 1 = 2; // use 1.2) $a = $a - 1; // then change 2) $a = 2; 1. Postfix form of ++,-- operator follows the rule [ use-then-change ], 2. Prefix form (++x,--x) follows the rule [ change-then-use ]. http://php.net/manual/en/language.operators.increment.php#119098
It depends. Given one cannot get neither a row count nor a familiar array from a mysqli prepared statement without a certain trick it would make you wtf?! all around at first
I dont think you understand the value in supplying generic code that can work with multiple drivers. 
Why would you think inference defeats the purpose?
Look at magento, it's a fairy good architechture for you to learn implementing something big with PHP
IMHO, &gt; Porter is the PHP data importer. She fetches data from anywhere, from the local file system to third party online services, and returns an iterator. Is all you had to say about the project and then give a series of real world examples with some explanation and use cases. I personally feel you went off the edge of the world and into a rabbit whole with explaining the tech stuff, which in it's self is cool but exhaustive. It's still a cool project but I believe you could use with some more real world examples to break up the docs.
Can it be done considering the base of PHP is written in C? wouldn't C need generics to define what and how a generic acts like in PHP ???
Contributing to RFCs doesn't require an in-depth knowledge of C. Besides, it beats doing nothing and complaining that nothing gets done.
I work with robotics and use PHP-ext-mmap (https://github.com/calcinai/php-ext-mmap) for bypassing the FS wrapper in order to write directly to device memory.
I’d wager most people are also using some kind of wrapper for PDO, too. Neither has a great API, although I agree that mysqli’s is worse. 
PDO's syntax is fine, it's just lacking a little QOL. I would definitely want a more powerful DBAL for any app with meat to it.
This is not exactly an extension, but I use [ExifTool](https://www.sno.phy.queensu.ca/~phil/exiftool/) a whole lot for managing media files through PHP. While there's an extension for it, the CLI interface is surprisingly flexible (you can, for ex. batch process by writing hundreds of filenames to a file, instead of passing options) and entirely sufficient for getting the job done. I fully support your sentiment in not re-inventing the wheel, and I hope people realize PHP is perfectly fine for using the wide range of CLI binaries as well, even when a PHP extension is not available :)
I suppose that, since I believe nobody has attempted something like this before, I have a duty to sell its purpose first and foremost. I accept that may be wrong, but I'm not very good at writing because I don't do it often.
&gt; * You're using emulated named params here, and probably emulated prepares. * You didn't configure the transaction isolation and flags. * You fetched data twice: as associative and indexed, even if we ignore the RAM waste, if you pass this out elsewhere, now you need to clean it up first. As I said, the behavior here is all decided with PDO attributes. You're calling PDO a shitty design when you don't even understand how to properly instantiate it. &gt; * You didn't close your resultset cursor, makes me wonder if you ever actually use PDO directly. This depends on the driver that you intend to use. It is not required for MySQL or Postgresql, which is what I use. &gt; but it's not good for a large application, especially if it's modular, Of course not. Nobody argued otherwise. &gt; PDO is quite lacking and not very well thought out. This is just silly. It's a foundation layer. &gt; because I don't support shitty modes of fetching, especially as a default. Once again, not understanding the fundamentals of using PDO. &gt; It's about essential features that any larger serious application will need, and PDO doesn't provide. Because PDO is a very simple concrete layer. If you need advanced features you shouldn't expect to use the basic database connection class. I don't know why this even needs to be said. PDO is very capable of serving a small to medium application, like a blog or basic CMS. In such scenarios you'd still want a wrapper for MySQLi (even if it's a really simple one) because it's just terrible - it doesn't even support named parameters. This is really the point I'm making. Nobody is arguing that PDO is a Doctrine competitor, lol.
That's fair. 
This reminds me of a project I made back in 2004... back in (the end of) the 'SourceForge' era. https://sourceforge.net/projects/apachebrowser5/
None. I try to keep as far away from extensions as possible, as they are pretty much "radioactive waste" that takes ages to decay. If something can be done in userland, even if less efficient, I do it in userland for my own projects. I don't mind slamming together some JAR or hiring someone for tasks that require better suited languages with proper FFI.
I spent a lot of time explaining why you *shouldn’t* change the defaults while instantiating PDO. I wrote three comments explaining why you’re sabotaging your own apps when you do it. Apparently none of this did register up there with you, so you’re back to thinking I don’t know how to change the defaults. After I spent *several comments* discussing the problem with changing the defaults, you think I don’t know how to change the defaults. That’s... frankly, a startlingly tragic lack of comprehension on display here. I did what I could. You’re clearly unable to get what I’m telling you, or you can’t be bothered to try. 
The result set can have associative arrays and has a parameter for the row count, I assume this isn’t what you mean
That's the point. There is no result set but a statement. In PDO you can fetch an array right off a statement and in mysqli you don't. Did you try it yourself?
I know this sounds elitist but your question is backwards. Ask yourself why you should use mysqli over PDO. And unless you can come up with a good reason (maybe loads of legacy code) then PDO is the default choice. And the main reason that PDO is an objectively better choice is the existence of numerous third party libraries which use PDO for database access. Take a look, for example, at the [Doctrine PDO wrapper](https://www.doctrine-project.org/projects/doctrine-dbal/en/2.7/index.html). You will be hard pressed to find an equivalent mysqli based project.
the phalcon framework :P 
In MySQLi you can fetch an array from the result set object which is returned after a query. A statement is the object used before a query is executed. 
Xdebug ;p I wouldn't say I use extensively, but I really wish that weak-references work or part of the language.
If you're a beginner, than PDO is better to use, as it's a more consistent API and supports more drivers. That said, security-wise they're exactly the same. Their APIs really aren't so different anyway. A few minor differences, but overall, once you know one, it's easy to pick up the other. As other people have mentioned, a wrapper, ORM or query builder over these classes is typically used in real life cases. The main reason to use MySQLi is to leverage some of MySQL's latest and advanced features, like [getting more info](http://php.net/manual/en/mysqli.info.php) about queries, [proper closing method](http://php.net/manual/en/pdo.connections.php#114822), [async queries](http://php.net/manual/en/mysqli.reap-async-query.php) and [multi query support](http://php.net/manual/en/mysqli.multi-query.php).
I guess I don't, please explain it to me. 
They complicate deployment, so I try to stick to userland solutions when possible. I tend to end up needing gd and/or IMagick for image processing. I also like to install XDebug for local dev purposes. libsodium is built-in and the mcrypt extension effectively dead as of 7.2, both of which make me happy as I get better crypto while having one less extension to have to install. I sometimes almost need and want the ZeroMQ extension, but it's such a pain to get set up that I usually end up just doing some work-around.
So you never used prepared statements with mysqli. Pray, do. Then we can continue
This is awesome. Please keep doing it.
Not an expert on this, but if users can tap into the AST building process, maybe we can at least have a chance of doing it ourselves (which is not always a good thing; I'd rather see it in core): https://github.com/nikic/php-ast/issues/5
Perhaps not the wildest out there, but in terms of things which are not built as standard, xdebug and redis.
Very nice.
There are some ways of emulating weak-refs in PHP without extensions. But I feel that's not the right direction for ORMs. In my work, mappers produce immutable value objects or arrays. This way I can hold two stable, different snapshots (in time, say) of the same user entity and reason about their differences, without the entity changing under my nose from a remote mutation.
people still use this?
Trick is to write facades that can be alternately powered by an extension, or by PHP code alone :-) For example, I have a TaskQueue component that can run off ZeroMQ, but also it can run off a stock MySQL connection.
yes
oci8 /me cries in the corner
is using fixed session_names a vulnerability?
Huh. I'm guessing that the memory savings is coming from a more efficient way of storing the keys on the object. Totally clueless here and stabbing in the dark on it.
Same. My dockerfile only adds xdebug on dev builds. Xdebug + phpstorm is heaven. 
Yes. All objects of a given class share the same hashmap, if the used keys are declared in the class. On the other side, objects are typically slower to instantiate and initialize, and less flexible (all instances have the same keys). So pick your poison.
The PHP community comprises hundreds of thousands of developers world wide. Even if you only consider the open source ones, there’s dozens of data importers for different frameworks, PHP versions and programming styles. To pick any one of them as “PHP’s data importer” would be both pretentious and insulting. And that’s my point. Even if Porter was the most popular data importer for PHP, self-declaring it as “the one” would still be self-aggrandising and insulting to the competition.
Same, without the crying. :)
I don't want to be cruel, but I feel a saying attributed to P.T. Barnum is relevant here: &gt; There's a sucker born every minute
yes, i meant record keeping rules are a different law. article 6 GDPR mentions the different grounds for processing: http://www.privacy-regulation.eu/en/article-6-lawfulness-of-processing-GDPR.htm consent is just one ground.
No, there's no way I would sign up even for a free trial based on the limited information available.
I'm so glad to hear that someone is working on it. It will be great if we can contribute this change through opencollective.com or something. Thank you so much for all your efforts and thoughts. I'm aware that generic is encourage complex changes in various implementations. Interring type and inout keyword sounds awesome to me. Hope the feature goes well soon.
That's right. Because your source code dependency is on concrete instance of PDO (dsn, config...), not just its api. Just a throw-in comment, since there's so many *generic vs abstract* misconceptions in this topic that I couldn't find the right place to write it:)
The reason why I mentioned this carefully is that somebody stands behind the scene. Check this article. https://mikemcquaid.com/2018/03/19/open-source-maintainers-owe-you-nothing/
Let me show you one specific scenario: Scientific Computing. While trying to do it using PHP arrays as matrices, it took AGES what NumPy would do in 0.05. So I needed to create a library, with extension, if I wanted to see the results before dying of age. So I started https://www.github.com/phpsci/phpsci and it's just 900 times faster them PHP. Sometimes, the only way is extending.
whats wrong with phalcon? 
As I mentioned above: FFI in a language that does it OOTB. 
Some projects from 2012, some archived long time ago... how do people choose items in these "awesome" lists?
Yeah me too, but no problems with it.
LibXL through php_excel extension. It produces thousands of excel sheet rows per second, amazing performance while generating xlsx files. Unfortunatelly it's commercial.
[v8js](https://secure.php.net/v8js) to provide a Javascript runtime for rendering React server-side. It's a stop-gap in a legacy project until I can migrate the whole project to Node from PHP. I also use Xdebug in my development environment.
PDFlib but only because we generate A LOT of PDFs and it’s much more flexible than the built-in option or alternatives. 
Please fix the grammar next year. &gt;Which *PHP extensions* *do you use* extensively, *apart from* the default ones?
Nothing if you understand the limitations. Namely a lack of portability. 
A lot of downvoting going on in this thread. A lot of unhappy campers in r/php in general. 
This is pretty neat. 
Again, *what* competition? To my knowledge it's *the one* by default.
&gt; There are some ways of emulating weak-refs in PHP without extensions. Unfortunately all the ones I can think of require the library-consumer to have impossibly good discipline in all their direct and indirect code, manually tracking all references to an object and immediately reporting it for removal once no more exist. ... Or, alternately, having a completely unbounded permanent de-duplication set that eats all your memory.
Robotics? How does PHP fit into that picture?
Probably one way would be to dig in to big fw source codes, like Zend, Laravel.. Or any bigger and somewhat popular open source project. 
Regardless of people's gripes with Laravel, the framework itself is written quite well. There is a lot of magic, yes, but also plenty of great modules that I have learned a ton from in regards to software architecture. However, it is difficult to dive into the source code of a framework if you're not already familiar with it. I think finding a more experienced mentor is the ideal approach; something I am looking for as well.
Node is a much better fit for this project. It's using [ProseMirror](https://prosemirror.net/) for an editing framework, and an item on the roadmap is collaborative editing. I know there's some approaches to doing websockets with PHP but they're hacky at best, and heavy for a lot of simultaneous connections.
Yeah, our socket backend is node. I converted a legacy PHP app that was started in 2003 to be a single page document in which the body of each request after the first is loaded via AJAX, without the header and footer. This was so we could have websockets stay connected and we could do real time notifications. A side effect was that page renders were notably faster.
Come on, don't water your breath trying your tricks on me You are a slow learner )
[Will says...](https://i.imgur.com/VyRKQPD.jpg)
What's in `SpecExportInterface`?
Frankly, this code is not what you want to show to fellow programmers. There are so many basic principles violated that I don't even know where to start. Just a few: Single responsibility principle. A code that performs database interaction, http request handling, output rendering and error reporting in one class is unmaintainable and inextensible to the last degree. It's hard to believe that in 2018 there are people so blissfully ignorant about SQL injections. There is no hint in this code that you are aware of this problem. Are you?
And you wonder why you keep getting [banned from Stack Overlow](https://stackoverflow.com/users/285587/your-common-sense). What tricks? You made an incorrect statement, and I corrected you. If you don't understand what mysqlnd is, then there's not much I can do to help you.
Really, since I learned your nature and the only reason you are writing your comments, the conversation with you become an amusement. Can't believe I used to get mad about them )
That kind of trown of my insecurities as I use most of these in my personal projects , apart from memcached
Here's some basic [info regarding myslqnd](http://php.net/manual/en/intro.mysqlnd.php). Maybe you'll learn something new and understand that it allows you to fetch results pretty easily. Or maybe you'll continue to live in blissful ignorance. I don't care either way.
Unfortunately, I can't say the same about you. You're angry guy who's mad at the world and wastes his life on Reddit and Stack Overflow ridiculing people. I'm curious, how's the penalty box been treating you?
Oh I am sorry if you felt so ridiculed. It wasn't my intent. That much
[removed]
One of your tricks is that you pretend there was no previous communication, and innocently ask to repeat the same stuff again, hoping to draw an opponent into an argument and make him slip. Come on, I am not that stupid :)
I don't have any intentions to get into disputes. Similar to how when you wrote a comment on my wrapper class and simply linked to your article with anchor text saying it has diseases, with no explanation. You even said, "I posted the link in this thread mostly due to 'being a dick' part of my nature, but still with a hope lingering." You act like a jerk constantly online, but as soon as someone does the same, you call it trolling? I wrote my comment partially as a joke (how it was worded), but almost entirely because you wrote an incorrect statement. If you have evidence to back your your claim, then please do so.
No, the session ID is key here for security. 
So you confirmed your intentions openly. Thank you.
The interface there takes 8 bytes out of 168,and that's also advantage compared to arrays. It's anonymous class but one you can identify. In this case this interface is actually is empty stub. 
libvips is great if you need to generate lots of thumbnails from large images. It's several times faster than GD or ImageMagick.
All right, here's another way of doing it: - Split an entity in two: a naked, non-encapsulated object containing the state of the entity, and a wrapper, or a proxy if you will, which contains a reference to the state object. - When you need to return an entity, you create new lightweight "wrappers" every time, but they refer to the same state object inside, so they effectively refer to the same shared entity in memory. - When creating a wrapper, you increase shared refcount with 1. On destruction, you decrease shared refcount with 1. This is automatic, by the wrappers managing the refcount in `__construct()` and `__destruct()`. - Once the number of wrappers reaches 0, it means no one has access to this entity. You can either delete its state manually, or let it expire after, say, N seconds of not being used again. Granted there are two problems with this scheme: - If someone uses `===` to compare to wrappers to the same entity, they will get false, because despite they refer to the same entity, the wrappers are distinct. In the case of cashing Value Objects, this doesn't matter, because you'd need a dedicated `equals()` method that can compare the internal state of two values, and you don't use `===` by definition for Value Objects. - This extra refcounting code in construction/destruction represents a bit of overhead compared to a native solution. Not much, it's just one line of code on construction, two lines on destruction, basically, but it's some overhead. Now, I don't use this technique just for caching basic values, I use it for heavier objects that are managing slow to create and limited resources, like SQL connections and the like. But if you're fine with the limitations... it works :)
SQL Injection and XSS should be treated separately, and it's a bad idea to merge input filtering with output escaping in the same function. Escaping must be done in harmony with the context. i.e. use htmlspecialchars/strip_tags with HTML, addslashes with JS and CSS, prepared statements/mysqli_real_escape_string() with SQL.
Can it literally be made to work? Probably, if you’re incredibly diligent. Chances are something slips through. Should you? Hell no. Use the right tool for the job: prepared statements. 
It's supposed to be fixed. If you keep changing it all the time, you can't read back your session state.
No. addslashes() is basically never the correct thing to use. When you want to output $value as text content in an HTML element or as the value of an HTML attribute, you should use htmlspecialchars($value, ENT_QUOTES, 'UTF-8'). When you want to put $value in an SQL query, you should supply it as a value in a prepared statement, or use the escape function specific to the database engine you're using (for example, mysqli_real_escape_string() or pg_escape_literal()). Safe escaping is all about context. There's no way to make a value "safe" for all contexts: you need to do something specific to the thing you're putting the value into. This is because SQL, HTML, JavaScript, etc. are all different languages with different syntaxes and different ways to encode values.
&gt; So you never used prepared statements with mysqli. Pray, do. Then we can continue
By the way, you asked for examples of how what you're doing is vulnerable: $input = '" onclick=window.alert(`OMGHAX`); "'; // Pretend this value comes from $_POST or something. $escaped_input = addslashes(strip_tags($input)); echo '&lt;input value="' . $escaped_input . '"&gt;'; If a user clicks on that input field, it will execute the custom JavaScript provided by the attacker. That's XSS. (Also, those stupid backslashes will show up on the page wherever there's a quotation mark or apostrophe.) $input = "'; DROP TABLE users; --"; // Pretend this value comes from $_POST or something. $escaped_input = addslashes(strip_tags($input)); pg_query("SELECT * FROM posts WHERE category='{$escaped_input}'"); Here's the query that ends up being executed: SELECT * FROM posts WHERE category='\'; DROP TABLE users; --' When PostgreSQL is in standards-compliance mode, backslashes in normal strings are treated literally (in other words, backslashes don't escape anything). So, it will search for posts where the category is equal to a backslash character (probably zero results, but that isn't important), and then it'll execute a second query that deletes your "users" table. Bye bye table. That's SQL injection.
pg_escape_lirlteral and mres bear different purpose. The latter is no better than addslases, and should never be used with intention to prevent SQL injection. 
+1 Composer doesn't make sense only for single file standard library using scripts, or legacy codebases that will at worst require few dozen lines of change in foreseeable future.
If you're using gitlab, you're probably better off using it's continuous integration capabilities with something like Envoy or Deployer. Here's an example with Envoy (which is not perfect or complete but should get you started) : laravel_with_gitlab_and_envoy/index.html 
It doesn't help either to drop some RFCs without any Patches to the core.
Looks a little early to share. Is this being used anywhere or is this just a pet project for now?
Well this code is not logical in the first place, being not safe and harmful as a consequence. This is like pulling a condom over your wallet because condoms are used for safety. First off, it makes no sense to combine such functions' together. Each should be used on its own purpose (if any). addslashes is a distinct folly, as it has nothing to do with SQL injections at all [PHP delusion #1: Escaping prevents SQL injections](https://pdelusions.net/top#escaping_user_input). Let alone it has been outdated for 15 years already. Use this function for a numeric SQL literal, and have an SQL injection first class. And if you are not going to use the escaped value in the database, but store in a cookie for example, these slashes will hang around. strip tags will harm innocent data as well, say if I write like "onion is &lt; 50 and garlic &gt; 80" the part of this text will be stripped away. Like everyone else said, the treatment for a variable should be targeted and certain. Substitute it with a placeholder in the SQL query and apply htmlspecialchars for output 
And will mangle legitimate user data.
Did check again the PHP.ini, session.gc_probability was set to 0, so garbage collection was off, set it to 1. Hopefully this fix the problem of sessions.
I cannot agree with you more. Btw finding a mentor is hard (or maybe I'm not looking for him / her in the wrong way) so I was asking for codebases to study as a practical approach to expand my knowledge. I believe too that engineering is the art of finding the right solution to a problem based on its context but if I would like to learn more on - say - DDD or event sourcing all I can think of - beside reading / videos / courses - is to find some good example projects to study that go all in with each approach. I'm a big fan of you, your views on things and your writing ability, if you'd be my mentor I'd be so happy! :)
Where's docker?
There is actually a ext-weakref extension! It has been marked as "beta" for the last few years, but it does actually work fairly well. I'm using it in production, and my ORM ([TDBM](https://thecodingmachine.github.io/tdbm/doc/memory_management.html)) is relying on it.
Are you Jamaican by any chance?
I respect that , But at least can you clarify more about "limited information available" , what information is missed in the website &amp; documentation. No one has all the answers and we are trying to learn and evolve. Thanks.
I know that Composer became essential for many php dev environments today. However, people who are new at web app development, may easily get confused because of the number of tools they face when they first look at the development environments. I wanted to show that setting up the workflow is not complicated as you might guess, actually you need just one more thing which is git in addition to php and apache.
There are many tools and services which are built to increase developers productivity. There can be many measures while choosing services for your workflow including scalability, speed and clearness. I know Docker and other virtual machine services are great solutions for web developers' workflows. I wanted to give people especially who are new at web development, a clear understanding at which fundamental services you actually need in order to start developing right away.
I actually don't have a lot of comments on your approach, the setup is fine. But take the extra measures and incorporate docker or vagrant for that matter.. Everything you did is possible by extending it within a docker-compose file. The problem you'll run into eventually is creating a unique environment bound to your main os. If you work in a team and would like others to work on your project as well it's almost impossible to replicate the same working environment, docker is used to solved this. Every project should have its own dedicated environment and not some kind of shared hosting setup imo.
Try to include some nong-generic information about the company and the people that work there. For example: [this page](https://shieldfy.io/company.html) is so generic that it makes me mistrust the rest of the website. And the [how it works](https://shieldfy.io/how-it-works.html) page does not explain any details, technical or otherwise, its information is so generic, it does not give me the necessary information to make a decision . By the way, the third text is missing something text.
xdebug, ssh2, rdkafka, redis, mailparse, igbinary, curl, gearman 
When you're developing production level applications, why is portability important? You're most likely building for a specific and very reproducible architecture. I would say portability is one of the _least_ important things to be looking at.
I would say yes, but none of that really matters. It's performant, easy to use, has a low footprint, and has amazing usability.
&gt; You can't use it on pretty much any shared host for example. The same argument could be had about __any__ PHP extension that's not exclusively installed by the provider... It's a non-argument. If you use the extension extensively, as is the entire purpose of this thread, then obviously you're either using a hosting provider that provides it, or you're not using shared hosting. Calling that a limitation is a non sequitur.
Well, I bet he has an argument like this code is for the admin use only. They always have it. And yet they are yet to learn about second order injections
No. It woud be like thinking PHP can't have classes because C doesn't have classes. It's up to the developer to implement his own type system on top of C.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Well all the "more info" links that lead to 404 pages, the "advanced configurations" page that contains only "basic configurations" and a lot of "Docs in progress". Nowhere do you explain in enough detail what Shieldfy does or how it does it. From your site it seems like maybe all it does is some basic input filtering, which is functionality that most frameworks will already be providing. Nobody has all the answers as you say, but as this is a service you've created and are attempting to monetise, I would hope you'd be able to provide more of them.
Two years in a row of inflicting broken grammar on us is far too much.
Thanks a lot for your detailed comment. We will try to add more info on the company page ( contact info including physical address , maybe our team / office photos ) Also I agree we must add more technical details about how it works and how SDK works. Thanks again. 
I have been developing quite some time. Lots of different languages and systems. Even get paid for developing. Every so often I get the urge to try docker. No one in my group uses it so I consult the main website and I find the latest tutorials and have at it. I then spend the next day or two (depending on how soon I get bored) googling error messages and trying to track down why it is not working. I have never yet gotten a usable configuration. The point being is that if you are going to tell a newbie that docker is required to get started then you had best provide them with actual working instructions and keep those instructions up to date as the technology advances. Otherwise, odds are, the newbie will just shrug and move on to something else. P.S. Same experience with vagrant. 
Thanks a lot for the comment . As the time we speak we are working on add more information to the documentation , fix and correct any broken links Although we are working on How It Works , it misses a lot , we will add more techincal details about how SDk works , how it minimize the false positives , how our monitors works , what we are protecting against and what isn't and the most important what differentiate us from any other waf. Best regards.
This job/hobby requires some effort from the user. If they want to get everything shoved in their face they should make a website at wix.com. You have to keep educating yourself or you'll be irrelevant in no time, that includes looking up errors and solving things yourself. The learning curve for docker isn't that much more complex than what's being explained in the tutorial that OP has written. You'll just have to know how to to do it in a docker-compose file instead of with brew. What if the user downloads a php 5.6 project while the currently installed version is 7.2 on his system? He will have to install some brew plugin to switch the php version. I have experienced that there will be left over dependencies and strange stuff will happen. Eventually you'll reinstall the OS just for the sake of it. While with docker i can just change the php version in the docker-compose file, fire it up and i'm in a clean state again. This is just how modern development works these days. Sticking your head in the sand and saying that it's irrelevant for new incoming programmers just cause you or your coworkers don't work with it, is nonsense. If a new colleague joins our development team i can get him up and running within 5 minutes. If he doesn't know what's going on i'll gladly explain him all the inside outs at a meeting. 
The query builder is an excellent example of the "Builder" patttern. As a bonus, the ORM is separated out from the query builder, so the DB layer can be examined without having to absorb the added complexity of the ORM.
I don't mind, I'm here to learn... but ty!
it's not really a poorly written set of code, it's in fact an over-engineering architecture. I said OP to look at magento, not recommend to have a deep research. In overall, there are a lots of concepts used by magento that worth to learn: observer, dependency inject, singleton, multiton, an MVVM structure, EAV database design...
Nice overview. Good point about types, and static analysis that can replace some tests.
oh ok thanks for clarification, but one question, does this mean i can use any name and be safe? or should i let php handle it?
addslashes &amp; striptags is worthless against XSS , there is alot of payloads can bypass it easily. and the same goes for sql injection For sql injection , you need to use prepared statement (it will deal with parameters as a value not part of the sql ) but you need to prepare everything even the data from your own datanase (see 2nd order sql injection) for XSS , its more tricky - use htmlentites with ENT_QUOTES escaping with the output - try to not output (user parameter) inside script tag - if you are using client side framework (angular , vue .. ) be aware of "template injection" , so don't allow {{ }} for example The underline details is too many , i recommend reading alot of "waf evasion techniques" , also read the source code of popular frameworks (laravel , symfony .. ) to learn how they handle security .. security isn't xss and sqli only .. best of luck
No Argument here, but I'm waiting for a specific example if SQL Injection on the code. 
I appreciate your feedback, but I'm hoping for a specific example of SQL Injection on the code?
PHP have no autoloading for namespaced functions :( So people will have to include your code. You may consider providing Trait with set/get value/values in it. Traits are auto-loaded, and syntax would not be that much different.
Not really the point of the post and not the type of work that is billed for... would appreciate anything constructive?
ANY example you could find would do, for the getrecord method
It's just the name of the cookie. It's public, and it doesn't matter what you choose. If you choose nothing, PHP will call it "PHPSESSID", which one might argue is a bit less secure than changing it, because it communicates you're using PHP.
&gt; addslashes with JS You mean `json_encode`?
WINDOW functions are coming with MySQL 8.0 though: https://dev.mysql.com/doc/refman/8.0/en/window-functions.html https://mysqlserverteam.com/mysql-8-0-2-introducing-window-functions/ 
Doctrine also has a mysqli based driver: https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#driver https://github.com/doctrine/dbal/tree/master/lib/Doctrine/DBAL/Driver/Mysqli
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [doctrine/dbal/.../**Mysqli** (master → deed41a)](https://github.com/doctrine/dbal/tree/deed41aebd34ba8748c3f886db7d4cd581ce74b3/lib/Doctrine/DBAL/Driver/Mysqli) ---- 
There is a table in the php.net manual: http://php.net/manual/en/mysqlinfo.api.choosing.php
It is already there https://github.com/makasim/values/blob/master/src/ValuesTrait.php
True, but still no RETURNING, and still no standard UPDATE a FROM b JOIN c neither ORDER BY d NULLS FIRST|LAST - God, I hate MySQL.
Nice. Unfortunately, I only read blog post.
Everything you need to know about... * [Stopping XSS in PHP](https://paragonie.com/blog/2015/06/preventing-xss-vulnerabilities-in-php-everything-you-need-know) * [Stopping SQL Injection in PHP](https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide) The options you asked about are not the right tools for the job.
It looks like you're setting only the ID on all the fields. With some random data I got these results: class create:856 class assign:792 array create:120 array assign:352 Although if you were instantiating multiple objects, you would get the savings very quickly as they share the same hash table (as mentioned by @ImSuperObjective2). 
nope, I mean escaping input from PHP when echoing dynamic JavaScript variables in the body of a page or as an ajax response.
For almost all objects (and especially anything resembling an entity), I would suggest passing variables by constructor if possible.
Yup. I restructured it for classes to expand upon the parent api class. Makes it cleaner and keeps things specific to themselves. 
I'm sure there are many people who can help, but we need details to be able to do so.
Ive only tried Docker once... never ended up using it. My heart just wasn't in it. I have been using Vagrant though. Usually using the the Laravel Homestead box as a base. The only issue I found with that really is that its kind of annoying to set up a project with Homestead embedded within the project as opposed to a separate project, at least the first time or two.
Just a quick note/reminder: &gt; There’s no need to supply data of any other data type, as the language ensures that the function cannot accept it Is only true with strict types enabled.
[site](https://imgur.com/gallery/rcGpT) I keep getting stuck here and im using 000webhost.com
That's... not details. That's just a screenshot without context.
I just don’t know what is asking me to put. I need someone to log in to observe it and do it. I did the rest
&gt; Laraval carries its own ORM (don't know if it has a DBAL as well) I believe it does not, although for some features in migrations it requires doctrine/dbal.
If you're talking of the state of testing I feel like you should also mention (non exhaustive): - Atoum - PhpSpec - Prophecy - Infection 
You can also register those functions in Composer and it works for libraries as well.
I’m going to go out on a limb here and suggest that you `sftp` in to the server then `cd` to your www document root and upload the script. If you need a graphical sftp client, try FileZilla.
Oh, you are bold as well :D Let it be my "assertion" is "incorrect". Good luck with your magnificent code :)
&gt; There are so many basic principles violated that I don't even know where to start. Bit of a dramatic overstatement, eh? &gt;in one class is unmaintainable and inextensible to the last degree But look, the unmaintainable class has already been maintained repeatedly... I think we've unveiled a paradox here! And what is the last degree of class maintainability? ... or is that just more dramatic gibberish? You do have a flair for drama don't you?
Wow.
Sorry to call you out on your bullshit, but I was swimming in it. I invite you to reread your own words... 
A person who can't admit they are mistaken does not add any value, stop being a pretender.
Will do as you command!
Thank you for your feedback, I am working on improving the code. I'm ashamed that I let colshrapnel put me over the edge but I have trouble with passive/aggressive a-holes. I'm am trying to be less reactive here :-)
&gt; I did the rest No you started the process, you're asking someone else to do the rest for you. You're probably better off looking for help in either: /r/PHPhelp or /r/techsupport . As /u/evilmaus said you need to provide actual details and context for anyone to have a chance to help you. Knowing what software or CMS you're trying to use would be a good step one. Going past suggesting you should provide more context, what I can say is that this looks like a fairly commonly seen "Installer" page that CMS software commonly uses. It seems similar to how WordPress gives you a page to configure your database connection if it's not configured yet.
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality! The FCC plans to kill Net Neutrality and it will affect everyone unless YOU fight for it!](https://www.battleforthenet.com/) | [4 comments](https://np.reddit.com/r/PHPhelp/comments/7eoq2o/join_the_battle_for_net_neutrality_the_fcc_plans/) \#2: [First time writing OOP can anyone check im on the right track.](https://np.reddit.com/r/PHPhelp/comments/65qzgl/first_time_writing_oop_can_anyone_check_im_on_the/) \#3: [Tutorial on getting xdebug to work with phpstorm?](https://np.reddit.com/r/PHPhelp/comments/70ho0c/tutorial_on_getting_xdebug_to_work_with_phpstorm/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I'd call it mockery, but we can settle with drama as well. 
Mockery also supports the type of person you are... so I'm good with that, thanks.
It's a pity that such bad people are all round you.
No it's really just been you, most people here are decent.
In your place, I wouldn't be so sure
Correct, however from the article: &gt; You can see that there’s a class (‘Document’) with one method (‘titlecase’). The method takes one argument, ‘$text’, **which must be a string**. The function also returns a string Yet the code snippet did not enable strict typing. So technically the above is wrong as you don't have to pass in a string.
I somehow get the feeling these days, i tend to spend more on Java (Spring) and other languages, they seem much more refined to me. I only do PHP if i have to, maybe because i never started with PHP but Java i guess. 
$_POST["id"]=**(int)**$_POST["id"]; fixed, thank you.
Still. By having a string type hint, that method will always be receiving a string, no matter what strict typing is set to. There‘s no way to pass anything but a string to that method. If you pass anything but a string, PHP will convert it for you. If you write unit tests testing that method and calling it with non string arguments, you‘re unit-testing PHP, not that method which will never ever see anything but a string as its argument. No matter what strict typing is set to
Code as if the next guy to maintain your code is a homicidal maniac who knows where you live.
Most shared hosts will add extentions if you need them on common request. One of my clients wanted caching enabled on there site since they installed a plugin for it but it required redis. I contacted the host and the host installed a redis server for all their customers.
Hey bro, its actually pretty functional. Matrix multiplication, transpose, inner product and sum are probably the most important operations right now in PHP-ML and they are all implemented and working. Preliminary results, which replace only one transposition and multiplication operation of matrices in PHP-ML demonstrated 98 times faster training (Consider that the framework uses the toArray and fromArray operations several times because it's only partial, which greatly reduces the efficiency of PHPSci.). This week the library will receive a major update and possibly its first release. 
&gt; I failed in the documentation, it is incomplete 
You missed the point. It’s not about how numerous your competition is (although a simple google search turned up several alternatives on top of those I already knew). A self-aggrandising and insulting attitude is generally not the best PR strategy, but it’s your project. Do as you please.
Click each test for a full list comparison. The most incredible is on regex, kicking low levels langs out.. (And in a categorie where php was not expected!) https://benchmarksgame-team.pages.debian.net/benchmarksgame/performance/regexredux.html
When you encode js variables you want to use `jeon_encode`. For example, newline ls in strings are invalid in JS, `addslashes` doesnt fix that. 
Php is way better at bash scripts that bash itself ;)
Well, it kinda makes sense. If I recall correctly PHP delegates regex parsing to a C library \(PCRE\).
This is essentially because php's regex functions are written in c as its using the PCRE library. 
Similar story here. I learned from a library book and if I am not mistaken a forum over at phpfreaks.com and whatever else I could gleam from Google. I don't think StackOverflow was a thing yet. That was all back in 2006-2007. I think I did this on a Ubuntu system with a 900 Mhz AMD processor and maybe 1 GB of RAM. I initially believed I had to create a separate table for each users data, though luckily a DBA I knew informed me of the right way to do it. This was all to build a business idea I had for a mp3 storage and playback site, wasn't she beautiful: https://web.archive.org/web/20071011001132/http://www.mp3crib.com:80/ That machine I learned to code on actually hosted the site on that crumby little machine after I put in two large mirrored hard-drives and bumped up the RAM. Coded on "production" until my dad forked over money for an HP server with SCSI drives and some other oomph. The music streaming sucked up so much of my bandwidth on my DSL that I would unplug it to play games online around 2008. My house was a bit of a party house so I'd often find beers sitting atop that poor server after a long weekend. Good times.
One quick thing I noticed right away is you're not grouping the methods based on their visibility. It is nice to have all the private methods together and the public methods together etc.
What's the PHP 7 adoption rate? I don't see any tests for PHP 5
I think the just use the latest stable version. They did have PHP5 in the past.
Don't overlook at any books or tutorials from now. Go to the php docs alone. See stackoverflow for special queries only if stuck. Like any langs, start with low objectives. First try to do some maths, display the results. Then work with texts, try to alter contents by program. String, array, object, learn to recognize them. Later see by youself what kind of database type suits well your objectives. play with it (Flat files? json?). Wow you can pass external arguments by the url. (Big moment here ;) ) From there start to play with the internet, load remote datas, parse them, put them to your database. Then melt this all. Learn bash scripts and unix, start to make system calls (exec, system, passthru...) enjoy the speed. Try to recreate basics tools: grep, cut, head, tail, cat.. you will see it is fairly doable and very funny to do. You will see personal ideas flowering at high rate. Still keep your objectives as low as you can. Small projects all aside. Now you have all this in mind, open a book, check other sources code. Learn security a bit. (Or not it all depends to your objective). Check good practice. Close the books. Cut the Internet. Get over this fancy libraries that anyone advise. Open your editor. You are the internet. Have fun. ;) 
I am thinking a bit higer. Many stays with python 2.7, and is the stock python in debian/ubuntu. But installing php gives php7 for a while now. 
You may be interested in templated docblocks, first supported by https://github.com/phan/phan and later supported by https://github.com/vimeo/psalm. You can paste the following into getpsalm.org: /** * @template T */ class Collection { /** @var array&lt;T&gt; */ public $arr; /** * @param array&lt;T&gt; $arr */ public function __construct(array $arr) { $this-&gt;arr = $arr; } /** * @param mixed $offset * @return T */ public function offsetGet($offset) { return $this-&gt;arr[$offset]; } } function takesInt(int $i) : void {} function takesString(string $i) : void {} $c = new Collection([1, 2, 3, 4]); takesInt($c-&gt;offsetGet(3)); // this is fine takesString($c-&gt;offsetGet(3)); // error emitted here
That's pretty cool.
I get how PHP works. But did you read the article? The whole point being made is you no longer need to test your input because PHP is doing it for you. But it's not. Let's flip it around. What if the argument is an int type. Now you believe from the article that PHP will be checking the type for you, no need to explicitly test it. Then in code you pass it a string "ABC", according to the article that should cause PHP to fail. Instead without the strict typing it gets cast to an int and your code will continue on it's merry way.
Not sure why anyone downvoted you. The company I work for migrated several old, terribly written PHP 5.2 monsters of applications into PHP 7.1 with minimal rework. We mostly had to address the mysql_ functions going away. Everything else pretty much just worked, with a nice speed bonus.
I don't like this phrasing, because often the person who has to maintain the code is your future self. So the maintainer is already inside the house.
Back in my M1 days the avg learning timeline was 8-12 months... 14 months to be productive. I'm still amazed companies paid to teach people that long
I did some analysis using 3v4l.org to see the opcodes, and it looks like the array way uses 38 ops compared to the anonymous class's use of 43 ops. Just something to keep in mind; the poster who pointed out the other efficiencies for multiple objects raises an important point. It's also worth noting that creating the array inline only requires 25 ops. Anonymous Class: https://3v4l.org/APKU2#output * Create: 168 * Assign: 0 * Ops: 43 Array Multi-op: https://3v4l.org/S8Vc2#output * Create: 0 * Assign: 376 * Ops: 38 Array single-op: https://3v4l.org/crca2#output * Create: 376 * Ops: 25 (Do I know offhand how any of this applies to real-world optimization? Not really, no.)
you mean json_encode($str, JSON_HEX_QUOT|JSON_HEX_TAG|JSON_HEX_AMP|JSON_HEX_APOS) ?
Continue in /r/phphelp
Isn't that just making it to be included in every php file?
Yes I always use prepared statements and they work well without any tricks. What is your point?
My point is you are mistaken, to say the least. Mysqli prepared statement does not return a mysqli resource, or, as you have a whim to call it, a result set, after executing the query. You need a certain trick to get a resource from a statement.
My point is you are mistaken, to say the least. Mysqli prepared statement does not return a mysqli resource, or, as you have a whim to call it, a result set, after executing the query. You need a certain trick to get a resource from a statement.
This may be personal preference but I think there should be line break spacing between methods and between things like the namespace declaration and the use declarations and the class definition. I like your documentation. I don't see the point of using interfaces in this type of package, what benefit do they serve?
Maybe, I'm not sure for Laravel, I don't use it everyday, Eloquent is the name, right ?
Yes, which is enough to not have to include it yourself as a user. As if you register `src/functions.php` to Composer in your library via the `files` setting, the person installing your library won't have to include it to benefit from the functions declared there. So yes PHP does not have auto-loading for functions/constants but you can still use it with Composer to avoid people to have to include the files to use it
I am new to PHP, and I am having a hard time getting used to the syntax. More specifically the '$' sign before the variables, typing it feels awkward to me. Do (or did) you have the same problem? If you did, how did you deal with it and what are some tips you may offer someone like me who is just starting out.Any and all help is appreciated and thanks in advance. I am using vs code as my primary editor and I prefer working with command line tools + vs code instead of IDEs in general.
We migrated to php 5.4-&gt;7 with no trouble. 5.6-&gt;7 should be a breeze. 
*Technical debt* is a very relevant laravel concept because the whole framework is technical debt.
The whole framework is technical debt.
Hey thanks, I like it. That does make it more readable. Merged!
There are obvious advantage in using a std lib that is written in the same language as the main language. Like more potential contributors.
I used to group methods that way a long time ago, and then I would be constantly scrolling through my file. Technically there isn't much in terms of grouping. They are placed in a way so that if you are reading through the code and you see a method call inside of a different method, you won't need to scroll very far (usually just below that method) to see the implementation details.
Yes I was :D I can now see on desktop that your code formatting is good. Thanks for pointing that out. And yeah, I think I'll do some more reading about when to use interfaces, as I'm never too sure.
Thanks, I'll give it a look.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
learn PHP database connectivity
I don’t know if those are the correct flags: https://stackoverflow.com/a/12076619/42522 (with comments) And you certainly don’t need them if you’re generating a JS file, not an inline script in HTML, etc.
I think you hit on the primary reason to be on top of maintainability.
My favorite is the userdel card.
Who fixes notices lol. ^^^^^/^^^^^s
Regex is one of those things that benefits more from performance than contributions. I can't imagine PCRE needing any new features. It's done, it's over! Just make it faster!
Python 3 is stock on Ubuntu
Python2 isn't installed by default on Ubuntu 17.10, they're on Python 3 now. RHEL 8 will not ship with Python 2 either
Thanks for correction.
If you go the other way WRT skewed: https://wordpress.org/about/stats/ PHP 7+ accounts for 26.5% of wordpress installs. 5.6 is solidly in there at 39.8%. So 66.3% of wordpress installs happen under [still (security) supported PHP versions](http://php.net/supported-versions.php). [Looking at the last composer stats](https://seld.be/notes/php-versions-stats-2017-2-edition) shows us that 5.6 or higher is 90.67%, and 7+ is on 59.37%, so the actual number possibly falls between those two (so PHP 7+ installs are between 26.5% and 59.37% right now) 
Yes, the benchmarks game uses the latest stable language-implementation versions (updated as-convenient, which usually means a couple of times a year just-after the Ubuntu release). PHP is at 7.2.0, Python is at 3.6.3. 
Incidentally, the few tiny scripts that implement that benchmarks game website are old PHP 5.4.45-0+deb7u13 because that's what the Debian Alioth server provides. Conversion for PHP 7.2 was maybe a dozen changes like this: $Body = &amp; new Template(LIB_PATH); =&gt; $Body = new Template(LIB_PATH); ereg("^[a-z]+$",$X) =&gt; preg_match("/^[a-z]+$/",$X)
Thank you very much. Very good advice. Will try take it on. However I’m not interested in learning JavaScript for now. Only PhP. I’m an iOS developer trying to learn PhP is good for now. JavaScript is a whole other level. 
Not necessarily wrong, but one thing to consider is whenever you feel the need to use a private method, that may be an indication that it should be its own class. You've duplicated the exact same methods in TypedCollection and TypedDictionary, and subsequently duplicated tests for detecting proper handling of exceptions. I also think you're missing a test for primitive types (int/string/etc.) that would be more obvious if the logic was isolated to a class where that logic was its responsibility. It's a case-by-case decision and the way you have it may actually be the best thing for your package as is, just food for thought.
It's this "trick" called mysqlnd. Colshrapnel doesn't understand that it's been part of the official distribution of PHP [since 5.3](http://php.net/manual/en/intro.mysqlnd.php) and became the default driver as of [5.4](https://dev.mysql.com/downloads/connector/php-mysqlnd/). He's claimed in the past that this isn't the case, yet continues to spread fiction without providing any evidence when asked.
I **THINK** this is the original source site, someone correct me though. You can go [here](https://linux.pictures/) and find some pretty cool cards for various tools/languages. You can even order them [as shirts](https://teespring.com/php-card).
Is there any reason curl\_multi would leak memory? I wrote a script to perform a few millions get requests with a concurrency level. My curl\_multi implementation ends up in fatal error memory exhausted after a few thousands requests \(I'm using [php\-curl\-class](https://github.com/php-curl-class/php-curl-class)\). Then I also wrote a version using ReactPHP which ran fine until the end \(not leaking memory\) but it was much slower \(around 3 times slower\).
According to https://seld.be/notes/php-versions-stats-2017-2-edition it's 60+%.
Thanks, wrote that late at night! About js, at a time it is: 1/ the perfect companion to php (Not only for ajax) 2/ Very close in their syntax 3/ Some «strange» behavior into one of them(php/js), lead to better understanding of them both 4/ Is to me the best stuff to learn in parallel, (with an already good html/css background) to build powerful one file apps. 5/ Is a good playground, the js console helps a lot to debug your php. 6/ (...) Fully self taught, there is surely flaw in my speech.. Who know? ;) 
No mate, I really like the advice. I’m mainly gonna be writing Swift for iOS and some php for the web app backend. I’m gonna try start learning Php l. Maybe in the php when I’m proficient I can get into JavaScript which means web development. I guess it’s good to learn other languages one you get good at one. It’s just syntax and same principles. Cheers 
Why?
[@template's latest tweet](https://i.imgur.com/qVpOBPa.jpg) [@template on Twitter](https://twitter.com/template) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
&gt;You've duplicated the exact same methods in TypedCollection and TypedDictionary, and subsequently duplicated tests for detecting proper handling of exceptions. I was trying to best figure out how to avoid that. I had considered putting them in the AbstractCollection class, but that didn't feel right. I had also considered a using a trait and may still end up doing so. However I hadn't thought about a separate class to take care of all the exception cases. You are right that I am doing more than one thing by leaving the exception stuff in there. The only thing that bothers me is that I'd have to either inject the exception handler or couple it to the classes. &gt;I also think you're missing a test for primitive types (int/string/etc.) ... Is this still necessary when using strict types? In the first iteration of the package I did do all of the testing to ensure the correct primitive was being sent in, but since PHP will throw a TypeError for me I didn't think that was needed anymore. Thanks for the comments and insight!
Go's regex handling is borderline disgraceful. I've written Go that drops to the command line to execute a grep against a huge file rather than parse it in Go.
If you want I'd be happy to walk through the code with you and help out, PM me
This allows you to have multiple declares without them being crammed on one long line. &gt; &lt;?php &gt; &gt; declare(strict_types=1); This shows the ! sign is affecting the $isNotTrue variable. &gt; !$isNotTrue This means ! and $isNotTrue are not connected and ! is also easy to overlook. The world will be a better place if you make your code more clear and remove the space between. &gt; ! $isNotTrue 
+1 for var_dump and exit. and also get_defined_vars.
I'm curious about of back of `make` in new repositories on Github, someone could talk more about that? if are you using and why?
Thanks for the offer but most of the code is spanish, unless you speak spanish by any chance?
I don't think Python developers really care about speed ..... and no doubt they'll optimise the bits that matter into 'c' modules/extensions or whatever eventually.
Personally I use abstract classes for exactly this type of thing -- common code that can be abstracted but isn't complicated enough to make the design more robust yet. Basically as an indication of "I decided it was okay to be lazy here for now". The main difficulty I have with that (and I've never settled on the best way to approach) is that then writing tests still has to cover the same redundant things for any children. You're right on a class then being a dependency. If I were writing my own from scratch I would likely have ended up with a factory to create the collection such that the collection could still be created with a single argument passed in, i.e. `$collection = CollectionFactory::make($items)` I know [Laravel's Collection class](https://github.com/illuminate/support/blob/master/Collection.php) uses a bunch of traits and just takes in the items in the constructor. I'd be interested in someone more insightful's thoughts on reasons to go different routes. On primitive types, to clarify, I was referring to tests for this line `is_object($object) ? get_class($object) : gettype($object)` Anytime there's branching logic, ideally there's a test for each branch. It's super-nitpicky since the code is covered by the `null` case. I just wanted to highlight it as a case because every conditional makes the test more complicated, and that kind of thinking helped me while trying to grind through improving my own thinking in creating testable code. Early on my tests got very out of hand, so I'm impressed with your results.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [illuminate/support/.../**Collection.php** (master → 7d44cb5)](https://github.com/illuminate/support/blob/7d44cb5c5ce93354bf47893380c7310003ce907d/Collection.php) ---- 
Xdebug is available for PHP 5.6, see https://xdebug.org/download.php. Have you tried running ``` $ pecl install xdebug ``` ?
Going forward I would stop writing code and comments in Spanish. 
I didn't write the code. :) I always write mine in english.
For the sake of all the unfortunate victims who use them and all of their unsuspecting users, these old Content Management Systems should be euthanized. 
&gt; The team consisted of my manager (new guy) and another developer who programmed the whole system a few years ago. I've only been working here for 3 weeks. So, you're the interim manager, basically. &gt; shit software written in PHP 5.6 Be happy it's at least that and not PHP 5.2 Dig in, hack it, get it "working" as they expect it then start looking into how Larvel is *supposed* to be setup and slowly start updating it, so you can make changes to it easily and even get to a point of moving up from PHP 5.6. XDebug would be nice but sometimes a well placed `var_dump(/* whatever you want to see */); die;` can help you see what is going on. Do that and you probably will not be a junior developer anymore.
How is a lack of input sanitation still a thing :|
Yep, on the same habit, using some `pip --user install .... &amp;&amp; pip uninstall ...` in my php scripts to slow them down and looks more glossy. ;) Hoping you get it! 
I love DDD (dump driven development)
&gt; implement contravariant parameter types and covariant return types Any blockers so far?
Just in case anyone reads this reply and thinks my initial post was an attack on PHP, it wasn't. PHP is actually my primary language now.
Not the whole ecosystem but the language itself is a considerable part. So browsing through release notes noone will dare to say that PHP is on the decline
I'll take the black card version on a t-shirt, please.
If it is a true MVC framework it will likely have... Routes: the entry point of the application, a url is resolved and pointed to a controller. Controllers: this potentially grabs the input data, decided what to do with it and how to return it. Models: your controllers will usually interact with the DB. The database interaction should be held within the models. Views: after we've grabbed the data it may be thrown into a view which will format it as HTML. So I'd start with the simplest calls je.g. list users ?). Find the route, controller, model and then view. 
I have a gut feeling that their checks won't even clear. When a company is behaving the way that one is it's because they have no cashflow and are desperate to get anyone to do some work for them until the truth becomes impossible to hide. 
 eval("I don't know");
Why do you think it's not used in URLs anymore?
Great book. Almost anyone who works with PHP for long enough will encounter a legacy app like this. One thing I'll add is start writing tests before you mess around too much. Even just some high level tests will help minimize risk as you refactor things.
u should not need xdebug just find the entry point and trace down the code. like where is the front controller (index.php something like that) from there you should be able to trace down into the code. just add var_dump()/die() statements as a way of emulating break points and keep going until you find what you are looking for. need more help, PM me we can setup a skype chat
Multithreading and async in general are not evolved whole lot. It's possible for a long time, but isn't widespread much. Queuing/message bus solutions are not stabilized. There are multiple competing libraries, but none of that is defacto go-to solution. Upcoming Symfony Messenger component might change that. Code style checking community is split between phpcs and php-cs-fixer. EasyCodingStandard helps to deal with it, but it's by itself still not stabilized and goes often through breaking changes. There are 3 tools for static code analysis. Most people know about phpstan only, but there is also Psalm and Phan. I predict you will hear more about Psalm in upcoming feature, since it's superior product, just not marketed enough. Regarding design philosophies, I noticed there is push recently for DDD.
for the obvious security reasons - people tend to send a link to someone, let alone it is stored in logs, proxy servers, etc
By itself, no there is no risk. Each user already has access to their session ID through the cookie. But if there were another vulnerability, like XSS, an attacker could get other users' session ids, which is a problem.
I didn't realize you were still stuck in a university. How awful. Anyway, how long is such a decision supposed to take? When I got credit for prior learning it was a case of chasing down the appropriate person and demanding but a moment of their time.
It's actually the opposite, they make tons of cash selling their junk software, they pay in $USD which is miles better than any regular job in Venezuela but the owner is basically taking advantage of the country's situation by paying nickels while he's rolling in cash. :/ The issue they're having is that SSR and SR devs left or are leaving the country, and I mean in general, also business that don't handle $USD are having a hard time. That's the reason why they're having a hard time even finding people that want to work here. I basically took the job because they were really selling it during the interview but everything felt apart after I started.
That's the thing, on the surface it looks like an MVC application but it's a mess. Basically: Routes: I haven't found a routes files, from what I've seen the app doesn't change routes while navigating inside, it just changes routes using a couple of options. Controllers: There's basically a shitton of controllers, I'm talking about 50-60 controllers and most of them are like 300-400 lines of code, most of those lines are INSIDE A SINGLE FUNCTION AND NESTED IF STATEMENTS EVERYWHERE (T_T) Models: Haven't really found anything related to models, looks like he mixed models inside the controllers, but I might be wrong here. Views: Refer to the routes point, I've only seen a couple of html files here and there.
I second this, available to help. Getting a second set, or more, to help look at the code and resolve the issues is the most efficient manner of fixing the code base - other than deleting it. While I'm offering, too, I'm not fluent in Spanish (either) even though I lived in Venezuela for a time. If you want to get outside help, see what you can get away with in terms of code access for 'consultants'. If you stick with the company, you don't want a breach of security to result in a firing.
This was an exercise for OP...
Personally I'd say that it's standards and working together that have been evolving the most recently. With more pushes towards microservice-style architecture, there's also been a larger push for reusing components between frameworks. PHP is also constantly evolving in terms of design philosophies, but they're longer term evolutions. Whether it's DDD slowly gaining traction or Events and Queues becoming more and more common, there's a larger shift towards better architecture in my opinion. The difference is that the PHP community doesn't work at the breakneck pace of JS, which I think is a benefit. I think that if you look at evolution through new libraries you won't see *too* much in PHP, but I believe that's more due to us having built a large toolset to work with, and most of it's good. You're also likely to find projects that have major shifts, like projects that attempt to bring async to PHP, or try to build long running processes, or trying to turn the framework into compiled code. It's just that since we already have a nice, stable stack to build on those don't tend to get mainstream adoptance quickly or easily
What about displaying a hash of the original sess_id? Maybe a very long one like SHA256? I don't need to display the session id itself, but rather an unique string that is tied to the session id.
Shoulder surfing is a thing. Screenshots are a thing.
The (present) irony of that phrase amuses me to no end.
Why not just store a unique identifier in the session and output that?
Could be neat for remote robotics. 
Thanks. I've actually decided to generate a random id, store it in the session as /u/evilmaus suggested. But nevertheless I appreciate your response. There's always a lot to learn regarding security and so many angles you can look from at something. 
&gt; Shoulder surfing is a thing. Screenshots are a thing. Yep, definitely.
Thats it, You got it.
There has to be an entry point. Try and use die / dumping until you find it. The routes may in a base controller. It does sound like the models are mixed into the controllers, sorry about that. And perhaps the html aswell. That sounds like a painful experience which may not be worth your time. Perhaps gather as much information as possible, reanalysis and rebuild from scratch.
Been using it for 15 years. It pays my beels.. and I become a Sr. Developer and trainer in the companies. We create complex systems for the company using PHP alone. If you haven't been to a "serious" development PHP, i guess you can't appreciate the power of PHP. We use the MVC model.
*cringe*
You have a healthy sense of caution, so I think you're going to do fine in learning about security. Hashing is a one-way function, by definition, and it would have to be a brute-force attack to find the pre-image. A session ID _should_ have enough entropy that it would take far longer to crack the session ID than the session will survive. It's all good on paper. But, as /u/adragons no doubt sensed, there's a certain smell to it. With security, it's best to be paranoid. Even with a strong sense of paranoia, information sometimes manages to leak through the darnedest ways. Just look up the notion of side-channel attacks to see what I mean.
Try phpstorm. Try anything wothout the debugger you are fucked.
PHP regex superiority is something I can attest to... I wrote the Hashtag Framework in PHP, and it processes the Hashtag Markup Language using a series of preg_match() calls to parse out commands. Complicated pages with lots of logic and database interactions are still often served in ~0.02 seconds in production at scale. In the past, I've tried to simplify the regular expressions in the hot parse loop, grouping them first keywords and then matching again for all the variations of the keyword commands, but that actually made things slower. I can only assume PHP is doing some optimizations on top of the PCRE stuff that is already highly optimized... like parallelizing all the conditional regexs in the hot loop.
&gt;Personally I use abstract classes for exactly this type of thing -- common code that can be abstracted but isn't complicated enough to make the design more robust yet. FWIW, at first I did have that code in the abstract class, but if it felt leaky in the sense that I had code in a base class that would only be used by a child (grandchild, I suppose) class. Collection/Dictionary wasn't going to be throwing any exceptions for an invalid type, so it just felt wrong. This of course was a trade-off by having to duplicate two methods to put my mind at ease that functionality wasn't in the wrong class. As far as the dependency goes, I hadn't thought about using a factory to help build it up for the consumer. It would add another level of complexity, but it would allow me to remove the duplication. You've got me pondering on this one! &gt;Early on my tests got very out of hand, so I'm impressed with your results. Haha, the tests were previously cringe worthy! In the past, if I needed to test various primitives against a method that wanted just a string or an int I had a data provider method that would return the various value types except the one I was after and would have PHPUnit utilize that. However, these methods would get duplicated across a bunch of test cases. I never liked it. Now with strict types I feel somewhat safe that I can test one incorrect type (`null` in this case) and expect that the type system does what it is supposed to do and throw TypeError when things aren't what I specify for the parameter hints.
&gt;eval($_GET['do_you_know']); No.
Who told you that? Let me guess, a JS dev? It's perfectly fine to learn php. It won't go anywhere anytime soon. Look up best practices on phptherightway.com. Check out frameworks like Laravel and Symfony. You will see that everything is very modern, mature and a pleasure to work with! 
All glory to the php @ stfu operator. Very bad for team projects, but so useful to simplify stuffs in many cases, for prototyping and more. Same for goto, very badly seen, but... This «traps» are actual crazy beast when well handled, just saying! 
Your concern is valid. PHP and JS both have plenty opportunities out there. These days, I would tell a new coder to focus on JS. JS will allow you to program web front side, web back side, embedded systems, and more. 
First the guy who wrote a custom framework is either a genius or thinks they are a genius and is actually a fool. My money is on the later but their is nothing you can do about that except find a new job. You're posting here so I assume you want to at least try your hand. Xdebug is a nice tool, but its not going help you understand the code. That is a lollipop dream these other posters are giving you. The best way to learn is to do. Find small easy to do tasks the company needs done and implement the easy ones first. You'll start understanding things slowly that way and eventually learn the monstrosity you were left with. If your employer won't afford you that time and that plan, bounce. Just start looking. I was in your shoes and followed the plan I just laid out for you. That's what I did in my current role. I inherited a heavily modified and bastardized version of CI2. During the interview I learned it was CI2 the company used I was okay with it. Pretty basic framework, no prob. Then I saw they had modified the core of it, used 3 different ORMs, used some garbage custom 3rd party routing library and any other dumbass thing you can think of. I dug in, starting with very small, very easy tasks and worked my way up to bigger things. After 3 months of dealing with the fucker I learned it and knew it pretty well. Well enough to know I was going to rewrite the SOB which I did. I now have a fast, modern, easy to program system with unit tests that follows the rules of the framework. Granted I'm not a green developer like you, but that doesn't matter as much. You're about to find out how quickly you can learn. Xdebug won't save you, it will help a bit. Starting small and working your way up is the way to learn. Toss the other advice. You don't care about learning the router yet. Starting with small feature requests will deliver small wins to your boss, build on them, and as knowledge compounds, labor output compounds. Some where a long the way you'll learn that router as part of a bigger task.
Well I said the same about PHP 4 about twelve years ago when I was a Jr. Dev.
JavaScript is kinda gargbage IMO. Really ugly syntax and the like, but that doesn't mean I don't see its value. I use it everyday. Some JS fanboy told you PHP is garbage. Probably has an Angular, Ember, and React sticker on the back of his laptop and has been coding for 2 years. Basically one of these hipster fuck developers I want to crack on the back of the skull. Probably loves NPM filing up his drive with 200 MB of garbage for a hello world app. Learn more, not less. Don't listen to the haters. As much as I dislike JS I still have plenty of frameworks and some NodeJS under my belt.
Drupal is a poorly architected framework/platform to be doing anything with. This is really the only reason.
Embedded systems? Like what?
hire a laravel developer and make application from scratch..
*Headless CMS is a system to control the content that is separated from the display layer or the front-end user experience.* So it's a database. Congrats world on another buzz term we don't need. =)
&gt; in Wikipedia, such claims are to be proven with certain links from credible sources or deleted. A wise practice in my view. Care to provide one? [...] Performance. 7 was a magnificent improvement and 8 is going to be no less. Ironically, credible source required on your "8 is going to be no less [of an improvement]". PHP 7 did a set of very specific changes to get the boost it did. The only left avenue to explore is JIT, but getting JIT to perform well is not trivial at all. Facebook has billions of dollars at its disposal, and its JIT-optimized PHP clone is *slower* than PHP 7. 
DDDD (Dump Die Driven Development) FTFY
&gt; PHPDoc standard is old and desperately needs innovation. Like what...?
The true question is why do you ever want to do this?
Fairly sure it's. pecl install xdebug-2.5.5 
In our company we work with PHP 5.4. It's possible to install xDebug, you just need to find an older version of xDebug. You need to try to use xDebug with Phpstorm, for me that was the best solution. Try this for phpstorm and xdebug: https://confluence.jetbrains.com/display/PhpStorm/Zero-configuration+Web+Application+Debugging+with+Xdebug+and+PhpStorm You should try to fix the companies problem, but also in the same time invent a concept to convince the Boss to switch to a new php Framework like Symfony, Zend Expressive or Laravel. 
These are the same people who were evangelizing for Rails 10 years ago, then Go, and now Javascript. The question is, how long until they find a new toy. I'll just leave this here: https://cdn-images-1.medium.com/max/2000/0*3LxJyqAhpUoGNgg_.png
Like if you’d like to embed a twitter widget on your site /s
Well this isn't exactly an input sanitation per-se. Drupal's render/form API is a minefield. Some properties allow printing whatever we throw at it as-is, and some properties allow executing functions. Form API is supposed to keep the "renderable arrays" free of HTML until they are converted to HTML at the last step, which took care to sanitize all user input, so the developers do not have to meddle with HTML inside the forms. Drupalgeddon 1 (2014), and now this one wouldn't be possible if the form elements were proper class objects and had strict typing. I remember Larry Garfield (/u/crell) talking about this 4 years ago, but with the amount of renderable arrays now in Drupal core, I don't see this happening in near future.
&gt; Code style checking community is split between phpcs and php-cs-fixer Those do two different things (one reports the problems, the other fixes them). I thought they were related, either made by the same guy or at least endorsed/recommended by each other. 
No, phpcs generally also fixes violations. It can also just report them without fixing them, yes. 
Not OP, don't think PHPDoc is in desperate need of innovation. But it would be nice to have some sort of Generic notation. That way A+ promise results for example can be resolved.
There's also Infection for mutation testing. A real eye opener.
Hey this is nice. It would be awesome if this would grow in functionality, and that you can pick which ones to show for your own needs.
Yes yes. Especially as their other product Stash _does_ markdown.
Yeah but that scene is settled now since humbug has been deprecated
php7's performance improvements sure are amazing, but being able to really tighten up interfaces and method declarations with all the extra types and return types has been for me by far the biggest improvement. No more mountains of boilerplate code everywhere to check something's an integer, or fuzzy interfaces whose implementations could be returning unexpected data. Still need lists typing, eg `string[]` or `SomeInterface[]` so that I can stop fiddling with custom collection objects. I'm hoping this will be a thing at some point soonish.
I'm not sure there is too much "to get", indeed that benchmarks site basically says you shouldn't read too much into benchmarks. GingerDog is right in real apps with something like Python they often use packages that are written in c/c++ if performance is an issue. Take data science as an example, Python is used because it is very readable/understandable, concise and is very efficient in terms of the developer being able to quickly output code and then iterate through versions of that code, that it is a relatively slow language in many respects is largely irrelevant, because all the heavy lifting is done in packages written in C/C++. Even in apps where normally most of the work is done in normal Python packages like the web for example, the difference in language performance is only really noticeable at extremes (say Golang vs Python). The performance difference between something like PHP and Python is basically irrelevant because it is nowhere near large enough to matter (both are basically relatively slow languages). So the difference between the two will be completely overshadowed by other things like IO, or the general ecosystem of the language, e.g - a typical Python web app performs better than a typical PHP one, simply because the standard for Python web apps means the app is held in memory in a worker thread of WSGI server, which is obviously more performant than the standard way PHP is used which means booting the whole app each time. No one is using Python or PHP (or Ruby) if performance is the overriding priority. 
I've just been bouncing between Jira and Stash and dear god the discrepancy is *so* annoying.
Yeah desperate was too strong word. Phpdoc has some defficiences and haven't been updated in ages. Generics is big one. There is plenty more little issues too though, but not feeling like spending time here discussing them, as it would just prompt more and more questions.
Isn't phpstorm a paid product? The company isn't going to provide the license and I don't have the money for it.
The new system that we were supposed to do was going to be a rebuild of the old system, but that plan was discarded because of the situation I described.
Far from settled mate as it's all relatively new in PHP, and also infection itself is evolving rapidly with more mutators
PHP generally takes it's cues from other languages. It is focused on being a working ecosystem rather than an experimental one. So many of the OO features that worked well for Java have been adopted, many of the functional features of Javascript have been adopted. Frameworks like Laravel take their cue heavily from Ruby on Rails and frameworks like Symfony heavily from Java EE and Spring. PHP is maybe slower to evolve than these languages but it's much broader and it adopts the features that work best which is why it is still so popular.
The issues IMO are - no strict #default_value and #value validation - rendering an arbitrary leaf as render root, making userdata properties
Well, I guess old can be argued but the shitty part is completely true though lol.
5.6 was anything but shitty when put in full context. To some of us, that’s a relatively recent version. PHP 3, when I really got started, and v4, those were dark years.
5.6 was anything but shitty when put in full context. To some of us, that’s a relatively recent version. PHP 3 and 4, those were dark, dark years. You could build the same quality apps on 5.6 that you can on 7.x. Today you get certain advantages, especially when it comes to performance, other than that the language has better tooling around it. So no the shitty part is NOT completely true.
It is a paid product, but it is worth every penny. I would recommend downloading the 30-day trial and showing your management what kind of time saver is it. They have to pay you too after all. Sell is as purchasing a tool that makes YOU more efficient, which means better bang for their money. If you currently use a paid editor they will offer a discount to switch (25% off I believe) if you can produce an invoice for what you are using now. Also keep in mind that if you decided to get it on your own the price is different for individuals and the price goes down after the second and third years of subscription. Alternatively you can pay for a year and keep whatever version was out when you bought your subscription without continuing to pay after the 12 month period.
Every library is constantly evolving, that's normal. Point is everybody who wants mutation testing will go for Infection so there's no community split and rollercoaster of new libraries and abandoning of old ones.
I think I didn't explain myself that well, when I talk about shitty I mean the code that the previous guy wrote, I'm sure it might not be the version faults but his own way of programming and structuring the application. 
Hi, I was in a similar situation, except I was more like senior dev, however my project was overwhelmingly complex with zero documentation and lots of unstable shit (different code on each server, different code in repo, few thousand line methods, asynchronous processing with plenty race conditions etc..). Anyway. What I can suggest. Stay calm and learn quickly, don't make shortcuts, they will bite you. XDebug and stable debugger is actually a must have, ignore `var_dump() &amp;&amp; exit`. You can't effectively work with a complex code without debugger. I've used it with both PHP 5.5.9 and 7.2, works without problems, so I believe your 5.6 shall be fine either. I am using PHPStorm with XDebug and it works almost out of the box. (PM me for configuration if you have problem). You need to communicate back to your client how bad code is, but don't point fingers. Try to come up with the plan to fix / improve things. Try to understand what system is supposed to be doing from the functional perspective. Try to build a documentation and perhaps some functional tests (e.g. Selenium) which could help you to refactor the code. It's a long topic. Again, don't panic, stay calm, don't do multiple things at once, spend your time setting up debugger, analyzing the code, understand the basics and try to come up with a plan. If your client is disrespectful to you, blames your for mistakes, rushes you too much, simply leave that, as it's going to poison your mind and reduce your self-esteem.
Someone could take over your session with that info.
To help avoid the XSS angle, the *session.cookie_httponly* setting in the php.ini should be enabled (I believe it still defaults to disabled). That prevents any Javascript from accessing the cookie directly.
Since he lives in Venezuela, and he might potentially lose his job because of trigger-happy higher-ups, I'd say do whatever it takes. 
Aka Domain Driven Design ?
Why would you use vim in favor of atom/visual studio code?
Dude Laravel is very opinionated. trying to "hack it" will cause way too many problems in the future. I wouldn't recommend that for sure.
Dude 5.6 was the best thing that Happen to PHP for a long time. (Before 7.0).
Since PHP sessions aren't locked to IPs or secured on the server side in other ways, I'd recommend against having the ID directly in the page. **Potential issues:** 1. If the page is sent over HTTP, a man-in-the-middle attack could expose the session ID 2. If the page (or really any place in the application) has an XSS vulnerability, that could be used to search the page/DOM for the ID and relay it back to the attacker. 3. As mentioned in another comment, the value could accidentally end up in a log somewhere and, depending on your session expiration length, that ID could be valid for a long time. So, the TLDR is basically: don't do it unless you have a *really* good reason to.
Vim is not an IDE.
For php development I only used Netbeans and PhpStorm, and both I didn't found them lightweight and too many tools that I really use, then I just decided to use Vim, not tried Atom.
&gt; The only major avenue left to explore is JIT, Yes, but JIT optimization does not necessarily mean generating native machine code. It is possible to do more code optimization after it's been run once and certain symbols have been resolved.
No, it's an efficient text editor that is customisable enough to give it the sort of functionality you might have found useful from an IDE. Take a look at phpcd.vim, phpactor, or php-language-server for your code completion/jump to definition/refactoring tools. Add Ale for realtime integration with phpmd, phpcs, phpstan etc. OP already mentioned vdebug for debugging. Or don't - that's rather the point.
Yes I am hesitant to trash Ruby. I've never personally used that one, its the zealotry I hit back at it. It's not isolated to Ruby or JS, we see it on here when Laravel vs Symphony wars flame up. Which is ridiculous. You can know them both and you probably should no a bit of each.
What do you mean with 'includes chrome'?
Yep. We're referring to info printed in the page which could be accessed for example with `document.body.innerHTML` 
I was pointing out that "JIT" only means Just In Time and does not necessarily mean generating machine code - it's something of a semantic pet peeve of mine.
&gt;Code formatted as body text 🤢🤢🤢
I wouldn't...
atom is developed using electron, which includes 'Chromium'. i've always found it to be slow. a real lightweight editor would be Sublime Text, imo.
Why can't you email the old developer and ask him?
No, I agree with you, all those things exist and by plugging in and wiring correctly the configuration, you may reach the point where it actually has an IDE's set of features. By by itself, it just not is, it is very efficient, and very advanced text editor; but also very complex to use.
There are not lightweight, they probably are slower than PhpStorm, NetBeans, Eclipse, or any other IDE as soon as start having large projects or lots of plugins. They are not IDE, not to me, they are terrible things, born from bored developers who actually thought that, at some point, embedding a web browser and make it run a full IDE using JS was a good idea (hint: it's not).
Can't we just use it because it's fun, highly customisable, looks cool, can speed up your work flow and make you feel like http://i0.kym-cdn.com/entries/icons/original/000/021/807/4d7.png 
It just has a high learning curve, but once you overcome them, your productivity will be much higher (anedotally). If he doesn't use most of the features/tools in PHPStorm, then using it to code would be overkill as it uses a lot of memory. Also its not free unlike Vim or other text-editors like vscode or Atom. And the features he does use are likely available in Vim. Vim is a great text editor and can be quite fun to use once you get the hang of it. 
Yes we can :) I've recently given Vim a try and it does make coding more fun. Its also good to know if you ssh into your production/staging environments.
Vim is a great choice to get into. Like some of the comments say its not an IDE, but who cares. So long it meets your requirements. I've been using it for around 2 years, I don't use it exclusively but I do load it up every now and then. I personally use Visual Studio Code as my main editor but I install the Vim extension so I can have the best of both worlds (the only downside with this is that I can't load my .vimrc config into vscode). Anyway, good luck with your learning, I only skimmed through it but I think your article looks fine. If you want feedback, consider posting it to the [Vim](https://www.reddit.com/r/vim/) subreddit.
My point was, just get it working. It may not be pretty, it may not be nice but just get it working and make it pretty later.
I’m below the federal poverty line and found the money. 
I also think writing tests helps you understand the codebase better. To write a useful test you have to understand what the code is supposed to do and help work out what it does - even if the way it solves it may be a bit unconventional at times.
I guess it's time for a new major version of Drupal that fixes architecture problems .... like the previous version was supposed to. Oh and if that happens all your plugins will stop being compatible ... again. 
While I try to limit how much of my coding takes place on a server (near zero these days, even for server config files)... all of my Vim plugins are installed on a server in ten seconds with nothing more than a git clone. Im still surprised how many tools for working with code don’t let you easily configure them with a flat file in your home directory (or other standard, non-system path). Keeping my settings in a git repo is just so convenient. 
It's more than cli vs gui. In the case of Git, it shows me every change in real time as I make them. It also has the best diff I've seen. If you're working in a team it makes it great to see the annotations on who last touched a particular chunk of code. Local commits are way easier - and I thoroughly like the terminal. Keyboard shortcut and it shows all the local changes, add your message, and hit Enter to make it. It can also upload any changes to a remote server upon commit. My point is people forget it's not just "here's a button to access a tool you already know how to use" - it's integration. It's not that PhpStorm can run code quality tools. It's that it gives you feedback in real time and with keyboard shortcut it will fix any of those problems.
I can forgive PhpStorm for having options that I don't need, because they get the ones I do need really, really, right. I've used vim quite a bit, but I wouldn't say it contributes to my coding as much as a good IDE.
Yes, it doesn't necessarily mean generating machine code. In fact it doesn't necessarily mean optimizing bytecode either. Actually it it doesn't necessarily refer to computers at all. JIT can refer to "Just-in-time manufacturing", also known as just-in-time production or the Toyota Production System (TPS), is a methodology aimed primarily at reducing flow times within production system as well as response times from suppliers and to customers. Its origin and development was in Japan, largely in the 1960s and 1970s and particularly at Toyota. This is why context matters, though, and I think most people are on the same page with me that I meant generating (and optimizing) machine code :-) .
Those tools are icing on the cake, but the core functionality of every ide is the fact it understands your code enough to allow for things like refactorings. But big ups for using vim, if it helps you work fast and efficiently then it's the right tool for the job. 
Atom is very slow, but that's because it's atom. Vscode is way faster and it's still an electron app. By far the best electron app I use. 
I have never seen more than one "declares". It's like "namespace", you can use more, but thanks to PSR-4 it's nowhere to be seen (apart test data). What other "declares" do you use? Could you share a link to Github project? !$isNotTrue I see this as connected, which isnottrue. It translates the original value to the opposite. Just like spaces here: $value === null show that's an operation. This on the other hand: ++$value; changes the value itself. So I see it this way: - space =&gt; evaluation - no space =&gt; value change 
$what = "da wai";
Yes I did, I was actually pleasantly surprised by the feature level and the nice UI, but sadly, when working in project with thousands of files, I managed to make it being very (I mean very) slow and even crash (both on Windows and Linux).
Congratulations.
I just set up commands like this: { "scripts" : { "style": "phpcs src/ -p --colors --standard=PSR2,PEAR --exclude=PEAR.Commenting.FileComment,PEAR.Commenting.ClassComment" } }
Or you could just commit a `phpcs.xml`.
That's fine if you always want to run phpcs for your entire project. Less ideal if you want to run against a single file.
I can't believe you guys have time to talk about this stuff.
You certainly could. Harder to find the documentation for how it works. I think both are valid approaches.
I forgot that `phpcs.xml` can contain the `rule` reference rather than an entire set. I have updated my blog post accordingly. :)
Ah i remember those problems with vscode, also searching was pretty slow back then. I think a lot of those issues has since been patched and is now running pretty smoothly now. Things may have changed since you've last use it, so if you're looking for a change, I'd recommend you give vscode another try
The benefit is in everyone on the team using the same configuration without having to run anything locally. 48+ lines of code to accomplish that is absolutely worth it.
 ./vendor/bin/phpcs --standard=psr2 src Is not a difficult thing to do or remember. Plus if you have CI pipeline then it's going to flag up anyone who is obviously not following that standard.
Or you could just use phpgrump.
Ahah, VScode is a good editor/IDE, but I wont change, I use Eclipse every day, it doesn't crash, memory consumption is high but stable, and feature-wise, it's perfect. But if a language is not supported by Eclipse, I may switch for some time. For example as of now, Rust support in Eclipse is already abandoned, so when I'll decide to give a try, I'll probably try vscode + rust language server.
If you're importing data, publishing a PHP SDK, integrating an online API or writing a web scarper, take a look at the brand new version of [Porter](https://github.com/ScriptFUSION/Porter). Porter is a data import abstraction, based on iterators, that gives structure to your code and furnishes it with additional features. v4 is almost a complete rewrite based on everything learned in the past three years, with interfaces that are efficient, robust, flexible, testable and easy to implement.
&gt;They are lightweight I don't think you've ever compared binary size / memory usage / CPU time between them, have you? vim easily wins that fight out with out-of-the-box setups. YMMV depending on the plugin setups you go with for both, but if you actually care about minimizing disk usage / RAM usage / CPU usage to the point you're measuring and optimizing for such things vim is going to win. &gt; opensource vim has been an open source project longer than many people on Reddit have been alive. vim has been an open source project long enough that, at about the same time VS Code saw its first public release, so too did a project aiming to fix up a huge amount of historical technical debt and remove now-unneeded compatibility code that vim had acquired over the previous two decades + some new features + some other breaking changes . (neovim) &gt;And a large userbase with plugins and themes ... Have you even tried looking at the ecosystem for vim? It had a thriving plugin ecosystem when atom was first announced, and it's still alive and well. &gt;userfriendly. Well you got me beat there if you mean 'user-friendly' in the sense of 'easy to pick up and use productively'. As a professional, though, some people would say it makes more sense to struggle to adapt to a tool if the end result is that you end up more productive than you otherwise would have been. Of course it's anecdotal, but: I and many other vim users will say that after getting used to the vim modal editing and specific key setups we're far better at getting code written/rewritten than we were before with more conventional editors. Maybe you disagree with that idea, or just think it's not true for your personally, or whatever: that's fine! I'm just explaining why the 'user friendly' idea won't convince a lot of people.
&gt; there's nothing wrong with doing var_dump() &amp;&amp; exit There's plenty wrong.
Says some faggot shitposting in a week old thread.
I wasn't going to go as far as to assume your sexual preference, but if that's how you identify...
For question 1 you have to consider that there is no direct connection between a class existing and the file it resides in. This is an abstraction added by the use of spl_autoload_register which provides the developer with a means of calling a function when a class is missing, specifically it calls a user function that is then allowed to do whatever it wants, but this is typically including a particular file according to PHP standards for directory layout (PSR-0 / PSR-4). Once that autoload function has been called, the class definition will have been compiled. The next time it's used it'll already be in memory and no autoloading logic will be called at all. Relating to question 2, the "use" statement is a compile-time element which basically means "When you see a symbol referring to class "x" it actually means class "some\namespace\x" as a simple substitution, it does NOT call the autoloader when encountering 'use' statements.
Actually PHP doesn't do autoloading by default. Every time an unknown namespace or class is referenced it iterates through registered autoloaders, calling each one successively. So, with Composer's autoloader for example, it uses `require`, not `require_once`. This is because PHP will not need to look up the class again once it's been loaded. The parsed definition of the class is now in memory. If it did use `require_once` that could end up producing side-effects, for example if you assign a variable like `$foo = require_once 'foo.php'` but 'foo.php' was already `require_once`-ed by the autoloader.
Thanks for your further input, sir
&gt; So the other developer ended up quitting and my manager got fired because he couldn't fix the old system on time like they wanted. Now I'm stuck in this hell and they want me to fix it. Hey, I've been there as a junior, and I'm still there now 6 years later, but with a different mindset. Just a bit of personal advice - don't let your work get in the way of your physical or mental health. Don't work overtime, don't even think about work as soon as you step out the door. Stress can consume you. Constantly feeling like you're doing something wrong, never doing something that gets commended... maybe the best you get is "good job, but the X is still broken." Just like police officers go home at the end of their shift even though crime hasn't stopped, don't burn yourself out because some system still has bugs. Don't promise that you'll meet deadlines that require you to work more than your normal hours. Don't worry when deadlines pass and the work is only half done - it happens all the time even on well-managed projects with brilliant developers. It's so easy for stress from your job to hurt your health, relationships, everything.
* Run the app in your own work computer, not on a remote server. For debugging and testing * Use [Git](https://git-scm.com/) or similar version control * Turn on all errors and warnings from php.ini * Keep aye on F12 Developer Console in your browser. Also [PHP Console](https://github.com/ccampbell/chromephp) might be helpfull. Note that you don't need an addon if you use Firefox. * Don't wite the code from scratch. Change/refactore it slowly. * These codes might be helpfull: var_dump($myarray); exit; 
https://xdebug.org/download.php ? &gt;PHP 5.6 VC11 (64 bit)
You found it!
I found simple machines forum easy to work with, I ran it in conjunction with tiny portal, and on mysql, but it claims to support sqlite.
&gt; The whole point being made is you no longer need to test your input because PHP is doing it for you. But it's not. PHP is _ensuring it is of the type you expect_ still 
Wow - you type very fast, I just posted :) Thanks for DNS caching - thought I need to use IP addresses instead of hostnames(not really a functional approach) but you are right, it will be cached so it's pointless to switch to IP-based. The server itself is also PHP-based, but optimized to avoid /postpone any database calls. Most requests will be served by optimized code relying on Memcached mostly, so it should be millisecond-range. Some will actually call the database but maybe just one in 100 calls. When that happens, I expect something in the vicinity of 25 ms based on some initial testing. I'm not sure whether https will add overhead here, have to measure. Other long-working operations will be done in background by a separate system and fed back to Memcached. I am worried about cURL resource consumption though. In fact trying to determine what bottlenecks and issues are here. One issue is that not everyone will be able to use cURL on their host, but it seems there's no alternative in doing a blocking PHP script based on external server response. 
#3 is how I do it. once every few days I scrape a site for data and save everything in a db, then I just run queries on my db instead of their's. 
Calling the curl functions in PHP should be really lightweight, to the point where it's negligible. Writing your own code in PHP is also likely to be slower and consume more resources than using the built-in PHP functions, as it'll be using C instead of PHP to do the work behind the scenes. You can always write some quick benchmarks or something. Make a local HTTP server (e.g. just spin up Nginx locally or something, responding with it's default page), and try curl that. Do a loop of calls, with a few million iterations (or less if that takes too long), and see what the amount of time averages out at per iteration.
The documentation on the actual rules themselves isn't amazing but the fact you can use a `ruleset.xml` file is clear from the docs. There's an example here: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
https://i.imgur.com/DK1ckG8.png
I can’t support someone that could of scammed me in the past...
This sounds like it only can go wrong for whomever is going to fall in this trap. Regardless of all the other red flags: &gt; You *just* make website ... You keep using that word. I don't think you understand what that word means. 
I can prove I am not lying and yeah English is not my first language so I apologize if my words have bad meaning.
Ok man. Thanks for your advice
assuming you aren't lying and aren't trying to scam somebody im actually curious as of to why people would use your website over 9gag (not that it's good) or /r/memes O_O 
people prefer memecenter or funnyjunk over the other as well. Are you Muslim btw?
lol
So you'd happily give the poor sap who was interested 90% of all profits? 
What is your experience? What sources you were learned from yourself? Can we see an example of the code you are going to write in your tutorials?
&gt; you have to understand what the code is supposed to do I don't think that's always true. You can write a useful test just based on observing what it actually does, not what it's **supposed to do**. For a system that's in use in production what it does is a good approximation for what it's supposed to do, otherwise people would have stopped use it. Michael Feathers calls this characterization testing. It doesn't tell you whether the code under test is any good or not, but what it can do is prevent accidental changes to what it does in future, by requiring any future behavior changes to come with updates to the tests. Of course when you spend time observing what the code does in detail you are likely to find a few bugs, which its generally worth either fixing straight away or adding to an issue system. But be careful with fixing bugs in a legacy code, because some users or other parts of the system may have come to rely on the those bugs if they've been there for a long time.
Just looked at your profile and you've shit out this same thread over multiple sub-reddits with the same response, even though you've attempted to deleted half of them when everyone shot you down. Problem is you're asking for someone to do the heavy lifting and you expect to receive money for it. Just take the couple months to learn the language and do it yourself. 
because they work 
Ok, Thanks for your advice.
No, I never agreed to it.
 But do you really want to be associated with some shithole of a site just because you want money? 
I am not just putting up my IDEA on the table. I am WORKING and PUTTING EFFORT towards it as well. I am online for 10 hours almost everyday, imagine what I could've done if I just had a website. And the developer would work for what? like 3 months maybe to make website I'm fairly guessing, and then he will be reaping the cash by doing almost nothing for life.
How do you know it would be a shithole?
I''ve made a document with a list of tutorials relevant for devs, prepare to binge. - https://docs.google.com/document/d/12CKSIh8acjqe5b2skOW1jwBaqKCVsV6VhJUy6E0sDq0/edit?usp=sharing
yeah you bet as long as it brings money. Who cares about what others think
But you stated your effort is traffic, domain and hosting, the latter two are effortless with the right developer, but traffic could mean anything. How exactly are you planning to handle traffic? Are you going to simply use Google Ads, or are you going to manage email shots, campaign management, user engagement? You need to write up how you expect it to make money, and how you plan to fund a developer, given that you've said you've struggled with money, because a month's worth of work on a basic salary is easily £1500 (~$2000), and if it goes for another month where are you going to be getting that amount of money from? 
Literally any developer who wants a good reputation. 
Because stuff like 9gag is synonymous with "shithole". 
Please encourage good security habits... Please.
I have been coding for a few years now. I read lots of books to do with PHP? Would you like me to tell you them? All the code I am going to show you in the tutorial will be in the description (a link). Are you intrested in these tutorials?
ok
I see. Just throwing it out there as I've read your other comments. Not sure if this lands in "can't be JS"-land, but have you considered webassembly? Surely could help with performance, maybe make the installation part of the toolkit easier?
&gt; webassembly Don't know much about it, but it runs in the browser, right? The plugin has to block the web server's response, so it's on server side not client side. Installing anything else... probably out of the question. The host has to support cURL for the plugin to work. At least in some cases the support will be there. 
basic salary for whom? for the developer?
MyBB.com has been getting some good updates lately, free really lightweight and easy to customise.
Yes, the one who will be putting the most effort into the project. 
I don't say they weren't money makers, see my other comment about any developer wanting a reputation... 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
It executes the SQL statement.
If you want the data to be persisted in your database, you need to call the query method. The query itself is only contained in the $sql variable and does not run it.
You should really escape your input. Here's a great resource, that explains how and why [phptherightway](http://www.phptherightway.com/#databases_interacting)
is it necessary? can i just type // INSERT INTO us (name, email)"."VALUES('$namee','$emaill')// ?
what if i just type // INSERT INTO us (name, email)"."VALUES('$namee','$emaill')// without putting it in variable?
/r/PHPhelp might be a better place to ask though, as there's a lot of advice you could use for this question.
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality! The FCC plans to kill Net Neutrality and it will affect everyone unless YOU fight for it!](https://www.battleforthenet.com/) | [4 comments](https://np.reddit.com/r/PHPhelp/comments/7eoq2o/join_the_battle_for_net_neutrality_the_fcc_plans/) \#2: [First time writing OOP can anyone check im on the right track.](https://np.reddit.com/r/PHPhelp/comments/65qzgl/first_time_writing_oop_can_anyone_check_im_on_the/) \#3: [Tutorial on getting xdebug to work with phpstorm?](https://np.reddit.com/r/PHPhelp/comments/70ho0c/tutorial_on_getting_xdebug_to_work_with_phpstorm/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Yes, you can do that. People generally use variables because then you can use the function multiple times for different variable values. Plus, it makes the code a bit more readable.
oh well that's on purpose!! i wanted to make it simple so i can understand what doesn't work 
noted
great to know that!! thank you 
It takes 5 minutes to read the section i linked to?
Yes it is necessary. If you remove it then nothing will actually execute the statement you had written.
/r/PHPHelp is a pretty active sub.
i will check it out but i consider any subreddit with less than 50 thousand people to be a dead subreddit
It's still a bad simple code. Unsecure as hell. If you have this code somewhere online I can delete your complete database. Tell me your address and I'll show you 😉
When you load the form via GET, set a random hash in session and on the page. When the form is submitted via POST, check that the submitted hash matches the value in session.
I’d strongly suggest using an existing library to do this. Writing your own application security when you are unsure is a good way to repeat the same mistakes others have made, and open up security holes. 
random_bytes() isn't available on PHP 5, so you'll need to install this polyfill to use it: https://github.com/paragonie/random_compat
A library to do CSRF token? A CSRF token is literally just a cryptorandom value (you can save in your $_SESSION) you pass to the form, and then check if you get it back. That's it.
Easy, calling exec on post data
Its always, always the exec. You put money on that shit the moment you see it. 
Some people come here to learn, not because they're already a pro.
Yeah, exec() with user input is generally always a bad idea.. but the weakness in the video is that hash_hmac() function does not die or fail when the $secret is NULL, allowing the user to bypass the $secret and reach the exec() function by crafting the hmac using NULL as the $secret. I need to brush up on my PHP but this was an interesting post. Of course the exec() with user input is a bad idea, but without the hmac validation and bypassing of the secret, you probably wouldn't be able to get there anyway. I guess the $secret = getenv("SECRET") is a red herring, unless you can set environment variables via the HTTP post.
While I appreciate the mindset you're coming from, every little thing does not have to be a dependency. This is CSRF protection we're talking about here - it's literally no more than 4 lines of PHP and HTML combined. This is PHP not NodeJS, we don't need libraries to color text, add two numbers or add a single form element.
Incredibly insecure. Please look into using [prepared statements](http://php.net/manual/en/mysqli.prepare.php) to avoid SQL injection.
Not very. If you’re going to use mysqli bind your params. Mysqli escape string won’t help. (Raw data goes in, modified safe data comes out.) 
Are there any other similar challenges to this? Like finding vulnerabilities in the code?
I'm assuming the shop has a version control system for the codebase if they had someone with enough understanding to roll their own MVC. Make sure you're all up to speed on that and start branching the dev/master. Are you all good with setting up your dev databases, etc. for it? Any deployment issues or concerns? Containerization? 
But exec wasn't the insecure part. There was an attempt to prevent unauthorized use of that exec, but the prevention failed. How did it fail? The mistake was passing post var directly into hmac without any sanitization or checking.
No, there were checks in place prior to that. They failed. The question is asking how do those checks fail.
&gt; prepared statements what does that mean?
Awesome concept. Love the video.
`hash_hmac` should have no way to force it to return null without an E_FATAL. That's terrible.
I agree, but identifying that was fairly obviously not the point of the exercise. It was evident that the challenge was to find the flaw that let an attacker get to the exec.
I agree, exec is used here with user input, which is terrible by itself. I just thought it was obvious that the challenge was not about that but rather about the code leading to it.
&gt; You can write a useful test just based on observing what it actually does, not what it's supposed to do. Exactly right. This is properly called a "characterization test."
Thanks for saying (and thank you too /u/localheinz!).
Yeah, I didn’t figure it out, but I did manage have a feeling that that one line was fishy, as the man said.
It uses the database engine's built in security features to ensure variables are used the way you intended. By using prepared statements, you avoid people using malicious code to break your SQL and screw up or look at your database.
1998 secure. Not 2018 secure. 
i didn't come post this to be made of but that was pretty funny
Enjoy. https://www.ripstech.com/php-security-calendar-2017/
Dude, this guy's videos are awesome!
/r/gatekeeping
If your PHP code isn't executed for any reason, like webserver misconfiguration, your code will be exposed, try to keep your code out of your views and above your webroot altogether. Assuming you're on your dev machine here but theres no db password. 
i thought php is server based code outside the browser reach? 
Normally it is yes. Usually your webserver (apache/nginx/whatever) is configured to hand off files with names ending .php to get processed before returning them hence it being out of reach. If there was some webserver misconfiguration and that process never happened your code would be returned as plain text.
is that more likely to happen to my code because i used an unorthodox method? 
At 3:46, how the hell dies that evaluate to true? Does it work for words like "Bank" == "Bark"?
No it's not likely to happen due to the code itself. It would down to the webserver being misconfigured. It's still not a great way of doing things but you can protect against it by putting the code in a seperate file, then calling it require_once('/somewhereabovethewebroot/yourfile.php');
0x123 and 0x234 get converted from strings to numbers. Since 'x' is not a valid digit these both get converted to 0. 0 == 0 is true.
if a server can't read a php code in a .php file than i will be looking for another server
&gt; you should never allow exec on user input directly without sanitizing it. Cool, so you could strip potential characters that could be exploited like semicolon and ampersands, but does that really make that much of a difference for this problem? In this instance, fixing that exploit mentioned in the video solves the problem without sanitization by just avoiding unauthorized input. A different problem might have the same bug but passes the resulting string to a 50 line function in a different class that doesn't need string validation but does need to trust the source. The point isn't the `exec` call, that's just the abstracted code to represent any potential dangerous code. The point of the exercise is to notice and fix the issue with trusting user input for `hash_hmac` which is valuable for many more cases.
What's your opinion on TDD? I think it's very relevant when talking about testing.
so how can i prevent this?
execing stuff from $_POST directly without sanitizing anything doesn't sound like the greatest of ideas
&gt; Cool, so you could strip potential characters that could be exploited like semicolon and ampersands, but does that really make that much of a difference for this problem? Yes, it would help prevent arbitrary code execution and code injection on the server. It would be quite easy to create a php file in the local folder that would then allow the uploading of one of the many php webshells out there. FYI, the correct escaping is `escapeshellarg`. &gt; fixing that exploit mentioned in the video solves the problem without sanitization by just avoiding unauthorized input. No, it doesn't. Unauthorized access can be gained through other means, like keyloggers, social engineering, wifi sniffing, etc. *Even if* they are the intended user with the correct credentials, they should not be trusted to pass unsanitized information to the command line. Unless the web user is also an authorized server user, it makes no sense to allow them as "safe".
He said already, "bind your parameters" means to use prepared statements and bind the parameters. For example: http://php.net/manual/en/mysqli.quickstart.prepared-statements.php
Well, that and the fact that PHP's `hash_hmac` is apparently a pushover that only gives you a dirty look while still returning a predictable value despite bad input. To echo /u/paniconomics above: "that's terrible". 
They are both vulnerabilities. The post asked: what's the deadly bug? To me, that is allowing secured or unsecured access to shell commands. That's the deadly part. It's the unlocked gun on the table. Saying the issue is locking the front door is naive.
Replace the last line of code with `echo "pwned"` and it's still a deadly bug. 
Neither is fixing the authorization issue and leaving the `exec` unsanitized.
As someone with more than 15 years of PHP experience, this actually surprised me. After the warning, I would have expected it to at least cast the argument as a string and then proceed normally on that. In that case, it would have been equivalent to hash_hmac('sha256', 'Array', $secret);. Although that still isn't as good as throwing an exception, at least you'd get a value that *is* protected by the secret.
You're describing a *completely* different problem than the one presented. If the problems you mentioned are the issues, then no amount of PHP hardening will fix the problem. We are talking about faulty PHP code and how to spot and fix it. Fixing this particular bit of code is related to parameter typing on inputs being used to return unexpected output. That's it, and a valid fix completely corrects the issue with unauthenticated execution of code (regardless if it was an exec function or anything else). Sanitization is fine, but not the problem we're talking about. Also, semicolon and ampersands *are* used in SQL, but sure, escapeshellarg is stellar for Linux, but again, trivial fix to a different problem than what was addressed.
While it'd be a lot harder to take advantage of, there's also a timing vulnerability in there, the line if($hmac !== $_POST['hmac']) { The script will exit as soon as it finds a character that doesn't match in the two, one character at a time, taking slightly less time if less of the string matches. The [hash_equals](http://php.net/manual/en/function.hash-equals.php) function should have been used, eg: if(!hash_matches($hmac, $_POST['hmac'])) { 
PHP (and surely others) needs a concise way of specifying the precise shape of input data as part of validation. Something like JSON Schema wouldn't be the worst.
That's not a useful reply, because it lacks any substance.
The PHP community has a bit of a hard-on for prepared statements. In some cases they're indeed better. In your case what you wrote is just as secure, but it's not group-think-compliant.
Actually, while you are correct about why the strings are compared as numbers, the example uses the “e” character, not “x”. So using your example of comparing 0e123 == 0e234, that’s equivalent to: 0 * 10^123 == 0 * 10^234. Since zero multiplied by anything is always zero, both sides evaluate to zero. 
Could you explain how a hacker would exploit this?
This thread really is /r/php in a nutshell isn't it? People who don't really understand what they're saying jumping over themselves to be first to repeat the party doctrine for acceptance and karma. They're not _quite_ up there with that guy who earnestly said he wouldn't hire applicants unless their favourite IDE was phpstorm, but with a bit of practice they may yet ascend.
Without testing, using `declare(strict_types=1);` should make it throw instead. One of my larger regrets for PHP 7 is that throwing zpp failures were conditioned on strict types in the name of BC. I expect this to change in PHP 8.
You can add multiple remotes to one git repository. Maybe you could maintain a branch with the open source stuff and then branch out another branch with the proprietary additions from there? Then you could push the open source branch to one remote and the proprietary branch to the other one.
Timing attack on comparing the hash. Unsanitary input variables - especially using that input to form and execute a shell command. Not checking for bad output from external functions. Not checking for non-existent secret. Should stop the show right there. 
git cherry-pick
 git: 'cherry' is not a git command. See 'git --help'.
git --help
&gt; you can protect against it by putting the code in a seperate file, then calling it require_once('/somewhereabovethewebroot/yourfile.php'); 
Pro tip: `zpp` is internals talk for `zend_parse_parameters()`.
The way it is written looks “old”, but nothing is fundamentally wrong with it or insecure. If it works, is easy for you to understand and maintain, and is secure, then that’s all that matters. 
why does it look old? 
I think /u/WaltherOfTraitors probably has the best suggestion here, with using multiple remotes. Obviously though, there's a huge caveat in that you really need to take precautions to prevent accidentally pushing the closed-source elements to the public remote. This [StackOverflow answer](https://stackoverflow.com/a/30471886) details two potential ways around this though - I'd probably opt for the git `pre-push` hook if I was in your shoes, and I *was working alone*. Perhaps the most elegant way would be to extract any proprietary functionality in to a private composer library, allowing you to use a completely different repository.. but without knowing how your application is structured, that may be a complete pain in the ass!
late 20th century!! i don't think they had had websites in the great depression for that's why it was so depressing
Instead of making changes to the project which are specific for a client make sure the open source project is extensible in a way that you can add modifications / additions without changing the project code. That way you can just include the open source project and build upon it without having to move commits and without juggling remotes and without any chance of closed source being pushed to the open source project. 
The register it self looks good. I would however add a check if the email adres is correct (name@domain.ext). This to prevent people are registering with something that isn't an email. This will just fill up your database with "crap". Also I don't see any checks to see if an email is already registered ?
I'm pretty sure that you don't have to use real_escape_string with prepared statements -- in fact, you may end up with doubly-escaped strings. Also, after the header statement, in the else block, you may want to terminate the script with exit as rendering the form would be spurious. In fact, you should render out a message like: Please wait for redirect or click here to continue (with click here as a hyperlink to the next page)... although I doubt any modern browser doesn't support the location tag.
i'm aware of that!! this code is just designed take any information without any condition and protect said data from being altered!! now thanks to you i know that my data is reasonably protected and i can move on to setting up the conditions
I don't know why people are complimenting this here, this looks extremely amateurish and reminds me of PHP the way it was written over 10 years ago with business logic and templates and database connections all just being thrown into one file which just breaks any sort of separation of concerns principle and will be hard to maintain in the long run, even if this is just some homework or test project. PHP has a bad reputation because it allows you to create "functioning" websites really quickly with terrible code, and this is a prime example of exactly that. Even if this may be functionally correct, you're probably best off by just using an existing solution for user registration and login. Obviously there will be a steep learning curve, but it would be worth it in the long-term in case PHP (or programming in general) is something you want to learn. I suggest you look at PHP frameworks (Laravel or Symfony, for example) and see how they implement user registration / authentication.
so real_escape_string are useless in this case and i need to put an exit command incase the header doesn't redirect!! i will put your input into the works but do you have any idea on how to stop the php code from running when the page is loaded? because i want it to run only when the submit button is pressed 
Handling Drupal 8 sites here... :(. I will literally cry when testing existing plugins.
Gee I wish php had some sort of function to check if something is a string before using it as string
How works on mac?
The "exit;" suggestion is to simply not render the form since the code instructs the browser to redirect. The bulk of the code will only run in response to a POST request which can be caused by the submit button. In fact, you should move the mysql connection statement into the first if block so you don't bother connecting to mysql until the form is posted. 
It's really kind of complicated to summarize this in a few sentences, but generally in modern programming, one file holds one "thing". And your file holds like three or more "things", which is just bad practice. If you do not have programming experience, object-oriented programming will be very hard to get into, which is why I would suggest you learn how to work with a framework (which is like a collection of code that takes care of many things which are commonly needed for a website, like registering a new user, for example). Laravel has Laracasts which are video series on various topics, I have not watched this fundamentals course myself but reading through the chapters seems promising for someone like you: https://laracasts.com/series/laravel-5-fundamentals There's no way that anyone here can give you a one-to-one guide into programming, so you need to actively look out for good tutorials. You can always check with people if they think a tutorial is good since there are a lot of really really really outdated and bad PHP tutorials out there which teach PHP in the worst way imaginable. 
thanks for your input and i will do just that but on another note, if i put an error message in the first "if" else, it get's displayed when i first open the page before i even pressed the submit button which makes me think the php code is running when it's not needed so what can i do about that?
Just a little tip: Brackets is better than Notepad++! 
http://php.net/manual/en/function.is-string.php
i'm actually using notepad!! used Notepad++ just to make the code a little bit less dull looking so it can be easier to understand on reddit, Brackets is so easy that it doesn't make me feel like i'm actually coding at all
[http://php.net/manual/en/function.is_joke.php](https://i.imgur.com/vIvMrQN.gifv)
I don't agree that it is insecure for the vast majority of use cases. However, there is one thing these escape functions cause that prepared statements do not: they change your data.
They don't change your data, they encode it as an SQL string literal (sans the single quotes, which is stupid, but easy to remedy).
But the opposite you said. The data in your database is now no longer the exact data that was submitted, is it? It's encoded. Can you easily run SQL queries against it as you could if it had been inserted via prepared statements?
&gt; The data in your database is now no longer the exact data that was submitted, is it? It's encoded. No, it's not encoded as a literal in the database. It's encoded as a literal in the query. The database then parses that literal and stores it as (typically) raw UTF8 data, exactly as it was submitted. &gt; Can you easily run SQL queries against it as you could if it had been inserted via prepared statements? Yeah...
The database stuff is a God send. I just wish you could blow it out into another window and have all your database stuff separate from your code. I tried to use phpstorm in combination with datagrip but jetbrains stuff doesn't like it I'd you run two of their IDEs on the same project.
You're right, I'm an idiot. Thank you.
It should work just fine. The whole point of Docker is that you can duplicate a server environment across any platform.
I tried, I guess mysqli_real_escape_string fixed the double quotes issue from mysql_real_escape_string. There are some injection attacks that will work on this depending on the charset the database is using, but I don't think that really follows the spirit of what you're asking for, so I'll accept my defeat here - I was wrong.
&gt; If it looks stupid but it works...
Im sure its the wrong way but my dirty way of doing this for a tinyurl type site was to just use the 404 setting which pointed to index.php
Shorter (and best imo) solution: FallbackResource /index.php
[removed]
You don't get it... Using sub programs in your script don't make them smarter or faster. What you describe for the python case is absolutely identical with php or whatever. To me python is not bad, what is bad is bad dev. Very often, for simple tasks, python scripts requires tons of libraries. Including basiciest stuffs, python require sub libs. This can lead to two things: slowness and very bad longevity, because you can't be sure this pile of ... will works like it is now in few years. This is just like saying you can build a car because you neighbors can let you use his car factory... so wrong omg 
Mind your formatting. This is painful to attempt to read.
but but but i used notepad++ for it's colors to make it easier to read 
Syntax highlighting is very nice, but it's still difficult to pick apart what code does when it's ill formatted. The biggest thing is to get your indentation correct, so it's obvious what lines go with what control structure. As it is, it just looks randomly indented. You should also put some spaces around your operators and into your argument lists. Study [PSR-2](https://www.php-fig.org/psr/psr-2/) and start following it. It will make a big difference.
Php lacks some sort of consistancy is probably one good reason for it. In cli mode exec tput is a better solution than php offers. But in general eveyone is capable of hello world. I think php is better then turbo pascal. While i am proud to make one terrible mistake. Creating a bootable calling &amp; receiving working dial up modem connection executing any command. We will get bombs exploded everywhere when terrorist have this computer knowledge. Php is good together with apache &amp; mysql, json, html, javascript to do webstuff. The programming language is a set of tools to make programs work together, awk is a programming speeder, know what to use when. Consultancy in software is what you need. What program is developed the most: the browser, so this will be the most stable program with flavors. Users need access to a domain. The domain will load the program.
that's not better, man - notepad++ is superior to plain notepad I`m partial to vscode myself 
&gt; REST/CRUD are the things that I assume everyone in php world above the "just started" level are familiar with The first sentence in my post (not the title) was put there specifically to make this kind of comment unnecessary; I will say however that I've worked with developers from rookie to enterprise-level for around a decade, dozens of them from various states and countries, and I'm just going to reiterate that I rarely heard the term in my early career, and almost never from other developers unless we were using a framework or tool that specifically referenced it. This means that the definition of REST just wasn't that important to the developers and project management to come up often or be explained much, and we got the job done (generally properly) without much discussion of it. CRUD actually came up more often, and was hashed over and explained and discussed etc, but it's a fairly simple explanation, whereas REST seems to be very conceptual, subjective, and even overly-generalized by the Wikipedia definition (taken from original creator and innovator sources of course) when it comes to terms like "resources" and "services" which it basically says "can be about anything on a server". This is why I posted here, because I've had such a difficult time trying to explain it as well as heard such varying (subjective) explanations of it (including terms within it) from interviewers.
&gt; HATEOS HATEOAS
Whoops
This looks secure in terms of SQL Injections, however you won't catch any hackers who are trying to compromise your website. So the check for mysqli_stmt_prepare() won't reach for "bugger off" message at all. If you want to check if the data is malicious then you need to validate the $_POST values on the back-end side if they contains invalid characters, before even constructing any mysql related code.
Yah, I've read that basically, but "web resources" is like... what does that mean? An image? A database result set? A PDF file?And "stateless operations"? That still seems kind of vague to me. What is meant by "operations"? Terms like that without knowing what context is meant (operating system? database? web server?) are so vague that my mind just doesn't hook onto it, it's like trying to bite into a steak made of condensed vapor from the oven it was cooked in. &gt; For the service to be "stateless" in this sense only means that your previous requests will not change the behavior of subsequent requests. This of course excludes changes introduced by modifying the data itself. I'm honestly not quite sure what is meant by "stateless" meaning that my previous requests will not "change the behavior of subsequent requests" if it excludes changes introduced by modifying data... I'm not sure how subsequent requests' behavior would be changed from previous requests that don't modify data (or anything?) on the web server.
how can i do that?
No, as you've been told by more than once person, you are the only one who does not get it, No one with a clue cares about the speed of PHP vs Python, because in the real world it makes no difference, because they are both relatively slow languages, not sure this is do difficult for you to grasp. So for things where performance is a huge priority you do not use either of them, you go use Java, Golang, Rust, Elixir (if concurrency is a big requirement), etc, because all these languages blow Python &amp; PHP out of the water when it comes to performance. For the vast majority of things where performance is not an overwhelming priority, then other considerations are far bigger than the small performance difference in two slow languages. For example if I were to consider doing something in regard to data science or machine learning, then a company would not pick PHP over Python, because Python has a huge, mature ecosystem of libraries/packages (yes those things you hate, yet are used by thousands and thousands of companies, universities, etc) and in industry standard in those areas which makes recruitment easy. PHP on the other hand just lacks terribly in those areas, doesn't matter that it is marginally faster at some benchmarks, it is still a slow language, and if you were dumb enough to do these things in PHP you would still need libraries written in c/c++ or whatever the equivalent of Cython is in PHP if it has one, to be able to perform well enough. I have no idea why you have some illogical pathological hatred of libraries/packages, pretty much every programming language uses them, many of them are basically industry standards used by countless companies around the world, if you want to write everything yourself that is your failing.
You have a hard ball on you. However, mate it's a great chance to learn. When you are at home and don't have anything real to work with, it's hard to learn. There is not magic steps here. But don't worry, almost everybody has been on a situation like that and we're still here :D. Mate do your best and if that mean end f** it up, it wouldn't be your fault. Anyway you won't end like that and you will make it work. What doesn't kill you, makes you stronger. Keep in mind that wherever you go, there will be a legacy system to make your life a nightmare :D
Cool, but the name! « Hey boss, no issues anymore, i had deploy evilbox on each of our server. Already done! Give me some more money now!!! » Evil!
This is more evil.
 I wasn't clear and that's my fault. For a service to be stateless there should be no session maintained by the server. All session data is the responsibility of the client. Nothing you do as a consumer of the service, outside of mutations performed by consuming the service, should be exposed to you by the service. Every time you make a request you pass your credentials, the service authenticates you, and then does work. A web resource is any data the service represents via text and transmits. An operation is fetching a resource, or updating a resource, or deleting a resource, or doing anything that the service lets you. It's intentionally vague. REST isn't a rigid system that dictates what your service does. It's a broad architectural style consisting of various constraints that can be applied to any application.
Suggestion as alternative terminal editor: `micro` a pretty good shell editor, with regular keyboard shortcuts. This is still NOT an ide. But using aside the very good terminal file explorer: `midnight commander` https://github.com/zyedidia/micro 
I can use php to force a chicken to eat another chicken while it poops gravy?
Sure, I’ll bite. I’ve been baking my own PHP form validation based on a variety of others libs for years and it has gotten a bit messy with the various regex, captcha, recaptcha, etc. Is there a (preferably standalone) resource anyone here might suggest? Thanks!
opinions on rest apis? i'm using - silex - illuminate (eloquent / laravel's orm) i'm not stoked about doing auth. anyone have other recommended rest api frameworks they like?
I would be interested in this as well. I’m in a similar situation with a homebrew solution that has spaghetti’d.
He should call it Incubox!
Right now I'm using symfony flex (4.0) with doctrine 2.6 and overblog/graphql-bundle and I'm having the time of my life. I should add that I'm using league/tactician-bundle for a CQRS(ish) which has been a massive help but that's not required.
one box for all projects? not really what docker is about to be honest, but looks cool
&gt; Have you ever wondered how your life as a PHP developer would be different if that one feature you want was added. [..] A lot of people, including myself, would like a better type system. Personally I wouldn't be a developer. In fact I probably would have lost interest in web development years ago. The simplicity of PHP was what made me love it. I could make relatively complicated things work without know what a boolean was. What a time to be alive.
How are you deal with that php hate train? i'm working in few projects and mostly people from javascript hate anything from php: wordpress, drupal, frameworks like laravel or symfony, just anything.
Nice, thanks for the input! Will def dig deeper on those
 class List&lt;T&gt; {/* . . . */} &gt; What if this was valid PHP code? And what if the runtime engine would just plain ignore it, and a part of PHP engine could do all the type checks, before runtime? &gt; That's –in my opinion– a better solution than standalone tools which rely on docblocks and can't benefit from the core PHP engine, as they are written, in the case of Psalm and PHPStan, in PHP. This is what Python did with their generic type hints; they are actually hints and not enforced. Note that sometimes we call our type declarations in PHP "hints" but they aren't really hints because they are actually enforced by the language so some of us are trying to get rid of the nomenclature. I think it's an interesting point to discuss. I'm not sure actually enforcing the types will have a "huge performance cost" though and we can't be sure until we actually have a complete implementation.
Do you know what the experience in the Python community is with that approach? 
PHP can be what you want it to be. You just have to be disciplined enough to write your code that way.
Just ignore it. They can hate it all they want. I'm not a big fan of all these shitty JS frameworks and how fractured JS is at the moment. Does what your using getting the job done, in time &amp; on budget? If so then who cares. PHP's a bit of a punching bag within the dev community because it's such a 'loose' language it allows some really terrible code to be written. It's also got such a low barrier to entry a lot of people just starting out use it and produce some barely functional monstrosities. It's more on the dev to make sure they're code isn't complete crap, same goes regardless of language used. It's also been around for a long time so it's not the sexy new thing like JS but this also means there's an incredible amount of resources available when you come across problems. If you've ever seen the source code of a decade old internal corporate system written in any language you'll understand any programming language can be used to make a complete mess.
There's a few out there I believe. I've just gotten used to the idea that I'm either using my IDEs documentation or keeping php.net open. I feel JS has made some good choices and aligning PHP with some of its syntactical sugar would likely be welcome given the often hand-in-hand relationship they have. 
I usually do backend and servers and actually never come into contact with stuff like naming, layouts or graphics. So I was pretty satisfied that I came up with a name at all ;p
Thanks, I do, hope you do the same.
I certainly agree that both those features would be nice to have. But the thought behind the blogpost was that "just wanting something" won't get us there. It's the very reality that you cannot just add new features to a runtime engine that's used by millions of projects. I slightly hinted at the JS community in my blog post: they just write another language that compiles to JS. What's your opinion on that?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Think it's difficult since there are two fundamentals that make JS what it is and PHP chose the opposite from the get go: 1. Scoping. JS had something like lexical scoping out the box. PHP doesn't really have real scoping at all - you must specify where exactly free variables come from. It's a very basic form of scoping yet changing it could cause a huge amount of chaos (perhaps a 'lexical scoping' declaration would be a good idea, much like strict types) 2. Symbol namespaces and the effect on first class functions. Passing strings or arrays for method calls is plain ugly. This outright prevents the ease of passing a named function like in JS. The best solution, in my mind, would be to provide a keyword that converts a function symbol to a variable that points to the named function e.g: $strlen = func strlen; $strlen('james'); // 5 This will take into account namespaces used, instead of having to be explicit about the namespace in a string. 
Have a look at Symfony Validator component. If you already have, tell us what you didn't like, then we'll be able to make a better suggestion.
An easier way to get rid of the 'different haystack/needle order' problem would be to have named parameters in functions, so you can say ``` strstr(haystack="something" needle="another") ``` There is already a RFC for that https://wiki.php.net/rfc/named_params, but I do not know if this will ever be implemented, since this would mean that changing argument names would suddenly be a BC break, among other things.
Security, Over the past couple of years PHP has turned hard on security, With the addition of PDO/MySQLi and the removal of MySQLlib. Most recent years encryption and hashing. Wasnt too long ago when BCrypt was set as the default hashing algorythme in 5.6. in 7.2 PHP removed mcrypt and replaced it with LibSodium. Catapulting PHP ahead of any other language to include modern and future cryptographic functions into its core, including the Argon2 (including varients) a stronger hashing function. Strict Types are also a decent security feature, As I know a few non-wild bugs that plauge alot of sites doing incorrect comparisons.
delete
Just [solve the most important of these](http://phpsadness.com/) and let me use int $var **if** I want to. You're gonna make people happy without breaking anything. 
Here seems to be a good place to ask. StackOverflow seems good for specific technical questions. They seem to take a hard line on questions that require a bit of opinion though. Finally, feel free to message me and I'll do my best to answer any questions. I would suggest you do that as a last port of call - it prevents others from using the question and answer as a learning resource. 
&gt; Consistent function signatures Get an IDE.
Can't tell if you're serious or just trolling... going by the repost and the way you're responding, I'm leaning towards the latter. That said, I wouldn't hire you if this was submitted as part of a portfolio/technical task, it looks like the sort of stuff I wrote when I was originally learning \- one page to one task, rather than splitting out functionality to be reusable, albeit that's hard to do on such a small piece of work, but I wouldn't expect you to be putting a DB connection in every page of your site \- hopefully you're using source control, and hopefully you're not saving your DB credentials in there.
Works pretty well in TypeScript.
It's definitely staircase indented. 
It doesn't solve the issue. I use PhpStorm, `array_map`, `array_reduce` and `array_filter` on a daily basis and I still always get the order wrong. It just doesn't make sense that's all there is too it
Yes, but there is a compilation step so no overhead at runtime, that would be a major performance hit in PHP without multi-file caching
[r/PHPhelp](https://www.reddit.com/r/PHPhelp/)
Take a look at the "parameter info" command and make a key binding for it 😏
Great news, will try this, thanks!
rust even goes a step further, allowing named parameters in functions/macros as printf/format! ``` format!("{a} {c} {b}", a="a", b='b', c=3); ```
I'm just typing faster than PhpStorm reacts that's all :) So either I'm typing too fast or my PhpStorm is too slow.
For instance: // check if name only contains letters and whitespace if (!preg_match("/^[a-zA-Z ]*$/", $_POST['name'])) { exit('invalid format of name, are you a hacker?'); } //validate email if (filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) { exit('email address is considered valid'); }
Or my PhpStorm is slower than yours :P
A short 2\-3 min video showcasing the service would be nice. Right now you can't really see exactly what you get unless you sign up and test it yourself.
I (a python programmer of n years) was a bit shocked when I learned how weak the typing enforcement is. Almost seemed like a waste of time to implement such a system but not use it. There is a separate project for doing static type checking on a code base, though. http://mypy-lang.org
Isn't this exactly what facebook is doing with hack and HHVM. The boost is there, its mature enough if facebook are using it in production and as far as I know from a conference they have a good nice way of migrating php code to hack file by file.
The ##php channel on [Freenode IRC](https://freenode.net/) - there's also channels for pretty much every language, major framework / library and technology on Freenode too.
Just use the `=@` function reference operator! https://3v4l.org/uVM8C
Isn't that just suppressing the warning from an undefined constant, which then just converts to a string? If so, what I'm looking for should fatal when referencing a non-existent function (before call) and account for current and used/aliased namespaces.
[removed]
you already have opcache.
&gt; /^[a-zA-Z ]*$/ Every O'Mally or O'Brien or similar would like a word with you. As would all the Jones-smith's of the world. As would anyone who has accents in their name, or where their name is non-ASCII UTF8 characters... Don't regex a name!
Thank you for your response. I haven't installed Devilbox at work yet, I can't try it right now but how about creating another .env file for different PHP version? Can I load different .env with docker-compose?
thatsthejoke.class.php3
quite possible that it's just a script going through domains to see if a vulnerable installation is present. If that's the case, it showing up in the error-log means it wasn't a successful request, which is a good thing. 
core/oops.inc.phtml
[removed]
Here are some discussions about the *env switch*: https://github.com/cytopia/devilbox/issues/216 Also some other thoughts here: https://devilbox.readthedocs.io/en/latest/getting-started/best-practice.html#version-control-env-file
Alternatively you can just add a single quote to the regex, there is nothing wrong with the properly formatted names.
Cheapest and best way is a legal contract signed by the client which states that you own the code, it is licensed to them on non-transferable terms, and that they will be held responsible for any financial losses incurred from their selling or redistributing it. Don't bother trying to encrypt your PHP, especially if you're going to run it on their existing servers. 