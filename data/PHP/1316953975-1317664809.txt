I actually think the java tutorial is good for this. Not because I want you to learn java instead of php (although I think there's not much disadvantage to a programmer knowing more languages), but because I think java is a good model for OOP, and it's harder to go wrong, and the tutorial is an official one, with no room for out-of-datedness or once-was-best-practice-now-worst, or just plain human error. So I suggest here, first: http://download.oracle.com/javase/tutorial/java/concepts/index.html And then go and find how PHP implements it. http://au.php.net/manual/en/language.oop5.php
That's my lazy dangerous function! I secured it using a session variable in update.php- but I shouldn't be displaying it for restricted users. Thanks, I changed that. I'm not sure how forging a request to logout is dangerous?
It's just using the same CSS as the rest of the site, and that padding was there for a reason I swear!
I probably should have been more specific, I do know OOP PHP, quite well, it's just more the design aspect that eludes me. Things like design patterns and SOLID principles. Thanks anyway though :)
Honestly, PHP isn't the best language for an introduction to \*good\* OOP design. It follows a pretty dated class and object model, and the recent syntax additions just made it worse. For practical learning purposes an introduction on Python will teach you more about reasonable object-orientation, and some usage quickly reveals which the practical OOP idioms are. Other than that, your broad inquiry might be answered by something in http://stackoverflow.com/search?q=%5Bphp%5D+how+to+learn+oop or if it was just about design pattern mumbo jumbo last weeks post http://www.reddit.com/r/PHP/comments/kf19l/where_to_learn_more_advanced_oop_techniques/
Sounds like you need a design patterns book. Head First Design Patterns.
It's not too dangerous, but it means that any website the user visits can log them out of your site without them noticing (using an image tag). Philosophically, other sites shouldn't be able to do things on behalf of the user on your site, and I'm inclined to believe that "HTTP GET should never change the data on the server." It's a pretty insignificant/safe problem, though.
http://martinfowler.com/ 
Can you elaborate on what you mean by "pretty dated class and object model"? I sat down to start learning some python very recently, but instantly stopped when I found out that you can't even have private properties and methods within python objects - surely this is actually worse than php's implementation?
So basically, you do bad shopping to prove your ridiculous price point is right, then you do bad math to show that attacking SHA means brute force searching SHA is the only way to attack it, then after moaning about the speed of SHA you complain that the speed of PHP is just fine, then you can't even find basic discussions of public penetration, but you imagine MD5 is trivial to crack and that rainbow tables don't apply to SHA. Got it. I'm not really in the mood for amateur hour at the mic. Chalk this up as a win, please, since I won't defend myself, which I'm sure you'll imagine is me being unable to respond, not just too bored of the tone to respond.
This is a very subjective statement.
I thought "head first design patterns" was an excellent book on the subject. It's a Java book, but that doesn't really matter. Even the syntax is very similar. http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124
Having just bought this book myself, if you want it in ebook form, O'Reilly currently has it for 50% off their normal price with their back to school sale, until the 28th.
Them. Access modifiers don't make much sense in scripting languages. More syntax does not equate more good. Their raison d'etre in their current C++ [incarnation](http://martinfowler.com/bliki/AccessModifier.html) was **ABI** encapsulation (PHP only copied half, misses friends or package concepts). Having them evaluated at compile time is vastly different from the runtime impact in PHP. And in my opinion people are simply wasting too much time on simulating Java-esque enterpriseyness with them. In Python for example everything is an object. It's also a bit prototypic (like Javascript). In PHP it's still very obvious that OO stays a separate language semantic; at the core it's a more procedural than hybrid language (Which is actually what makes PHP likable in my book). And then there's the lack of operator overloading, and e.g. thorough ArrayAccess support, etc. Because of those looks people are then often overcompensating with design patterns. Hence I believe another language might be better; for tutoring at least.
And someone patiently explained to you why you were wrong, and you failed to understand it, then shared that in several different places with several different people.
in JAVA
I'll admit I was wrong: From two minutes of looking at Reddit's code it's a single round of sha1. Bad! You're repeating the same arguments I've already met. Your minimum length stuff, and requiring a capital and a number or symbol or whatever is still going leave plenty of dictionary-based passwords. &gt; Better yet rather than wasting time and money hashing, how about protecting your database server better in the first place. If that's your argument, then why not just store plaintext? Seriously, you've demonstrated some fundamental misunderstandings here. For instance, you seem to think your 512-bit salt is somehow more secure than say 16 bits of salt. All the stuff you suggest is a good idea. Please do lock down your OS, secure your database server, use an IDS, do regular audits, etc. None of that will save you from a crooked employee who has the rights to dump your database. Again, "all this hashing" you keep talking about is miniscule when you're just logging users in all day. It's only painful when you're trying to grind through a dictionary attack. There's a valid reason to use expensive hashing on user passwords. All of your arguments against doing so are weak at best, but mostly wrong and irrelevant. 
If you use namespaces, the old-style PHP4 constructors no longer work. 
I'm actually reading [PHP 5 Objects, Patterns, and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=sr_1_1?ie=UTF8&amp;qid=1316978140&amp;sr=8-1) right now which inspired me to go and pick up [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/gp/product/0201633612/ref=ox_sc_act_title_2?ie=UTF8&amp;m=ATVPDKIKX0DER) for some in-depth reading if I ever feel the need.
It doesn't look like Netcraft is doing language statistics any more.
Glad your moving to PDO! Its not scary. Yes, PDO is the most secure method for transphering data in and out of your database - PHP will handle it all for you. You can supply a 3rd parameter to your bindValue to ensure the data you want to pass... int, string, bool, etc Have a look at the [constants for PDO](http://www.php.net/manual/en/pdo.constants.php) and look at the PDO::PARAM_* constants, these you can supply as a 3rd parameter to bindValue.
Ruby. The caveat being that when you do start using it, you'll never want to use PHP again.
Python's philosophy is thus: `Programmers should know what the fuck they're doing. They should not need to be protected from themselves, as that only encourages stupid programmers.`
I'm not sure that's such a good philosophy.
If you're suggesting that hash calculation will have a greater impact on high-traffic site performance than disk and database access, I don't think you've never made any high-traffic sites. You also seem to be suggesting that this site will be having thousands of users log in every few seconds? What kind of secure site are you running here?
Rainbow tables work just fine with SHA. Actually, they work just fine with any hashing algorithm. They do however, take exponentially longer to generate with an iterated hash.
&gt; Remember there's no rainbow tables available for sha512 You think people don't have these? Ha. Haha. Hahahahaha 
"They" would be the documentation who's examples almost always imply that your model is there for database access in addition to the countless tutorials that rarely deviate from that. Take for example: http://book.cakephp.org/view/903/Model-and-Database-Conventions in "Basic Principle of CakePHP" - That entire section talks about naming conventions ,their relation to table names and relationships. There is another section further down in a separate chapter that has a one liner about models "Models represent data and are used in CakePHP applications for data access. A model usually represents a database table but can be used to access anything that stores data such as files, LDAP records, iCal events, or rows in a CSV file." - The rest of the sub-chapter on models talks about how to work with and use them to access your database. Core Behaviors in CakePHP are simply functional extensions of models to help you easier manipulate/work with more complex setups, for instance, Tree Behavior which simplifies the management of an MPTT tree in your database. Regarding Convention over Configuration - There is certainly some degree of flexibility you do have and are allowed to change via simple configuration options, however, the amount of flexibility in a system that is setup in a Configuration over Convention-type system is unparalleled. You can't tell CakePHP to use a custom class that it's libraries should extend to add or change functionality per your needs because its Convention over Configuration and Tight Coupling that usually go together. With a framework like Zend that is Configuration over Convention and is more loosely coupled, as long as I am extending an abstract class or implementing the correct interface I can pass it as the parameter or configuration option for a class to tell it to use my custom class instead.
The difference between mysql_real_escape_string and prepared statements is that mysql_real_escape_string tries to add escape characters so you shouldn't be able to escape the SQL statement, while prepared statements actually compiles the query first, then inject the external input data. Pre-compiling the query means that there's no chance at all of SQL injection as there's no SQL to inject into. Also, I find the following syntax to be easier still: $stmt = $db-&gt;prepare('SELECT * FROM table WHERE foo :bar LIMIT 1'); $stmt-&gt;execute(array( 'bar' =&gt; $data );
umadbro?
I would kill for operator overloading in PHP
1. do you think ORM should be part of every framework? CI seems to have an aftermarket not-so-serious add-on that someone wrote. or do you think the whole ORM doesn't really belong to the framework? if so please explain. Also CI versus YII - it seems yii can point at a set of tables and go - does this exist for CI 2.x? table A -&gt; table B using key {pk_whatever} - do you have any suggestions for a good CI -&gt; crudF code generator? ORM seems to make sense - group functionality to the many tables into one exposed set of functions for a class right? 
[PHP doesn't support them?](http://www.php.net/manual/en/reflectionclass.getdoccomment.php)
&gt; at the core it's a more procedural than hybrid language (Which is actually what makes PHP likable in my book) Amen. I have worked with very bright individuals who didn't comprehend that while it's more structured and prettier, that the extra time spent developing numerous classes for which requests will have a single instance doesn't gain you anything in the long run for a lot of cases. Don't get me wrong, there are plenty of times when OOP is the right solution, but there are plenty of *other* times when you shouldn't be busy crafting angels in the architecture, but instead busy building walls.
sure, but sometimes we still have to. I certainly write better php code because of it.
i like access modifiers simply because they reflect intent. I'd rather have them than methods prefixed with any number of homegrown schemes like _ or __. GIMME MORE METADATA! also they work seamlessly with doc generators unlike the prefixed versions.
Indeed. They make most sense as documentation feature, rather than as language behaviour. (Moreso than the awful underscoritis or unstandardized @private doc tags).
A more contemporary and interesting overview is the version comparison of w3techs: http://w3techs.com/technologies/details/pl-php/5.3/all No idea how encompassing the sources are. But nice to see 5.3 slowly growing towards 10% this year. (Oh well. At least keeps the awful namespace syntax at bay for a little while longer.)
This is a really good answer, imho. I recently took up java to do some android stuff, and my thought the whole time was that i wish more PHP devs wouldnt abuse loose typeing. Dont get me wrong, take advantage of the shortcuts that php offers when you have to actually do stuff.. imho, foreach loops and associative arrays are THE killer features of PHP.. but dammit, use objects and design patterns and avoid globals and working outside of an object whenever you can make an excuse to.
Python seems to be a popular language, so the philosophy, which is one of its core ones, seems to have worked. Python *does* however have private properties: http://docs.python.org/tutorial/classes.html#tut-private Also, you usually indicate a 'protected' (or, 'this should mostly be used internally') property with just a single starting underscore.
Oh wow, they actually removed one of the old language warts! (granted, it happened only by accident, I assume; if you could somehow create a method named `namespace\MyClass`, it would still work, right?)
You know what? Seconded. PHP was my first language and I never got heavy into OOP until I started using Java. Now everything I do in PHP is OOP, no exceptions.
Concentrate and ask again. Seriously, I'm not sure what you're getting at. Some compiler? "CSS Forms"? Are you just looking for free PHP web hosting? If I replace every occurrence of 'CSS' with 'PHP', this question almost begins to make sense...
i was previoulsy working with a css style sheet, idk why i wrote css instead of php, 
I think a site like [this](http://0000free.com/) is what you are looking for. You can google Free PHP Hosts, to find more similar ones, but that should do for now! Good luck with getting started with web programming!
Why not just set up Apache + PHP on your computer? Do a Google search for wamp (assuming you are on windows) and you can find them packaged together.
No, it's not by accident -- it was purposely changed (you can find it in a changelog somewhere). Since PHP4 constructors only exist for backwards compatibility and only new code can use namespaces it's the perfect way to nix them. 
A Cascading Style Sheet style sheet, you say!
yea, but thats not why i'm here, i'm learning php now and i would like to have a form I made show up online but my current host does not support php so i though that since this was a php subreddit you folks would have gotten past that step and know of a place were i can host the form.
I love python and I love c++, but I don't want python to be c++, that's what c++ is for. 
Agreed. If it interests you, build some Android apps. 
I would vote for just doing XAMPP or similar on your computer to play around with. Beyond that, nearlyfreespeech.net is good for playing around with. Not free, but it'll set you back less than $1 a month...
I use PHP a lot. The companies I work with are primarily PHP shops and I don't hate PHP, but Ruby made me a better developer. 
thats as close to free as i can get lol, thanks, sure beats 12 bucs per month, i'll delete this post now before i get voted down any further lol.
I read "key to super fast development". I thought "Pfft. Yeah, a fuckin plan."
OK, I went and looked at the code. It works as I expected (the reason the old-style constructor doesn't work is that the class name no longer matches the method name because of the namespace prefix), but for a period from 2008-2010 there was a workaround in place to de-namespace the classname before the check; that workaround was reverted in r297482. I love how they handled the test: --TEST-- - 063: Support for old-style constructors in namesapces + 063: Old-style constructors in namesapces (not supported!) --FILE-- &lt;?php namespace Foo; class Bar { function Bar() { echo "ok\n"; } } new Bar(); + echo "ok\n"; --EXPECT-- ok 
You don't throw Exceptions? :p
I was replying to them so they could get in on the discussion genius.
Ha ha. Ugly. (have an upvote for effort in finding this)
Please link me to the comprehensive SHA512 rainbow table database and explain how it's still useful seeing I'm storing a unique salt for each user.
Depends what your site's doing. If it's serving up plain html with data straight from the database then yeah disk and network are more of a priority. The site I had in mind, ie my own does more computations and CPU.
....I don't even. Please go over http://en.wikipedia.org/wiki/Rainbow_table You clearly don't even understand how they work - a rainbow table's job is not to store every possible hash in the function's domain.
&gt; If that's your argument, then why not just store plaintext? Well obviously it's a step up from plain text and makes it slightly more difficult for an attacker. You've said the attacker doesn't have the PHP code, so maybe they think you implemented the 1000x hashing as a security practice. You can also obfuscate the PHP code with various tools. So if the attacker doesn't even have the source code they'll still have to experiment with a few algorithms to find the one you used e.g. md5, sha1, sha224, sha256, sha384, sha512, whirlpool, ripemd etc. That'll slow them down for a while as well. Even if you do 1000x hashes, I still don't think it'll slow down an attacker 1000 fold. Remember you're doing your 1000x hashes in PHP. The attacker will be doing them in C++ or a faster language and some distributed grid of CPUs/GPUs which is much faster. The attacker is still going to get some of the easy passwords regardless. I don't think there is any foolproof protection against easy passwords and a lost database. Basically it's up to informing the user not use the same password for every website and not choosing an easy one. If it's 10 characters or more even better. If they want to go against your advice then that's their problem. If you're a bank/the NSA/payment provider etc don't rely on just usernames and passwords. Use two factor authentication. Even sending a unique authentication code to a mobile phone is better than just username and password protection. Maybe I'll look into it in the future but for the moment I don't think it warrants this extra for loop in the code for my sites.
Ok I suppose they only need to make one for the first random 20chars or so. Still with a unique salt for every user &amp; password, the rainbow table isn't useful.
It would seem that this is a static image, based upon [the source code](http://svn.php.net/viewvc/web/php/trunk/usage.php?view=markup) for this page. The [latest image](http://svn.php.net/viewvc/web/php/trunk/images/stats/) is from 2007-07, with the commit message being "Looks like Netcraft isn't providing us with numbers beyond July now". I'm going to take a look at replacing this page with more recent data, perhaps from [this page](http://w3techs.com/technologies/history_overview/programming_language). If anyone has a suggestion for a better, or more reliable data source, please let me know.
Thank you! I'm starting to understand more and more while I'm using it. It's kinda fun being structured. Thanks!
No problem. By the way, if you do not already know this already, you should properly sanitize all external data. Not necessarily because of SQL injections (prepared statements are immune to that), but because there are other attack vectors. I suggest you have a look at [PHP's input filters](http://php.net/filter). You should also familiarize yourself with the [vulnerabilities](https://www.owasp.org/index.php/Category:Vulnerability) and [attack](https://www.owasp.org/index.php/Category:Attack) vectors that comes with web development. Furthermore, you might want to have a look at various design patterns, as those tend to help keep your code nice, tidy and manageable. Good luck.
Thank you kind sir! I really enjoy PDO, I guess it can be my friend.
You should check out [Agavi](http://www.agavi.org/). Agavi gets some things right where everyone gets wrong, and most other things better then anyone: * Lose coupling between actions (controller) and concrete implementation of views. specifically your views can implement many (any...) output types and the correct one is coupled to the Action at run time by the context based on.. whatever you please (routing, headers etc). this is something I've never seen anyone get right. * Models are presented as the place for your business logic. * Routing as flexible as fuck... or to quote someone 'you can make it go to one action when it's raining and to another when it's sunny outside'. * Validation as flexible as fuck. * every aspect is programmable beside being statically configurable (routing, validation, views, output types etc) this gets you a ton of flexibility for complex projects without any hacking. * any where you go you find the design is well thought of not to limit you and offers you a correct way of doing things and avoid hacking. the list goes on... Agavi is a gift to the PHP world that most will never get to appreciate. 
&gt; You've said the attacker doesn't have the PHP code Where did I say that? I really am starting to believe you're not actually reading what I write. Main point: Why are you doing all these gymnastics to argue against doing the safe thing? You've spent all this energy arguing against a generally accepted best-practice that, in reality, will *not actually cause your server to explode*? Nit-Picks: &gt; Even if you do 1000x hashes, I still don't think it'll slow down an attacker 1000 fold. It absolutely will. It doesn't matter if they can hash faster than php can, it's still 1000-times slower than they would be. The relative speed of your server to their theoretical monster of a GPU-driven hashing supercomputer is so irrelevant. If you thought about that for more than 2 seconds, you'd see it. &gt; I don't think there is any foolproof protection against easy passwords and a lost database I never said anything is foolproof. I'm saying if you can provide substantial protection for marginal cost, it's your professional responsibility to do so. You seem to think otherwise, and I can't understand why. What benefit do you derive from your position, exactly? &gt; Basically it's up to informing the user not use the same password for every website and not choosing an easy one. If it's 10 characters or more even better. If they want to go against your advice then that's their problem. You can degrade user experience by requiring all passwords be at least 100 chars long, and it would help. But there's a real trade-off there. Your users *want* a password they can remember. You'd rather make them remember something tricky, just so you can save idle compute cycles. &gt; If you're a bank/the NSA/payment provider etc don't rely on just usernames and passwords. Use two factor authentication. Even sending a unique authentication code to a mobile phone is better than just username and password protection. Of course those things are better, but they create annoyances for your users. You can dispense with those and rely on a password that isn't too hard for your users to remember, and still make it virtually impossible for someone to succeed with a dictionary attack. But to you, those CPU cycles (which would, in reality, be idle anyway) are so fucking valuable that you want to do one round of SHA512 and no more, and let your users worry about having to remember a 12-character password with no pure-dictionary words, upper and lower case characters, at least two non-consecutive digits, and at least one character that typically requires more than three keystrokes to type (I'm exaggerating, obviously). Instead, you could give your users a break, and let them use "0bviousPass" for a password while still keeping them 1000x more secure than you are. But you don't want to, because your $20/moth VPS's CPU cycles were BORN TO BE IIIIIIIDLLLEEEEEE! 
"Python does however have private properties: http://docs.python.org/tutorial/classes.html#tut-private" No it doesn't. The very first sentence in the link you provided states: "Private” instance variables that cannot be accessed except from inside an object don’t exist in Python." And just because the language was adopted, doesn't mean it's a good language or a good philosophy to adhere to. PHP 4 was widely adopted too, but that didn't make it a good language.
what's bad for security for mysql_query + mysql_resl_escape_string or intval() from security point of view?
don't forget to back up on different computer
At least do a `php -l` on the files before publishing them.
You're reading and parsing the comment block, those aren't true annotations. I'm not sure I like writing code in a comment, and I can't see any incorrect route syntax error messages in your route parser. Seems a little wild an scary writing code that the PHP parser isn't checking... maybe that's just me. Not too bad for your simple-ish routes, but take a look at sleepy: https://github.com/doomspork/sleepy I'd like a parser/error message thing for that ;)
Using prepared statements by design protects you. Yes, if you sanitize your variables correctly, you'll be safe, but there's that room for error.
Is it really that PHP parses, validates, and reports errors on doc comments, and APC even generates byte codes for them? I don't think so.
And yet if you had read the things that were already there, you'd know that the discussion was already over, and you'd been left behind. Funny that you take this tone, yet next you ask me for new information, as if you don't understand what'll happen.
&gt; Please link me to the comprehensive SHA512 rainbow table database That's not how rainbow tables work. &gt; explain how it's still useful I've never understood Redditors who say they want an explanation, yet take ugly tones with people, guaranteeing they will get no explanation. Enjoy bulk downvoting for disagreement. You're not breaking rediquette at all.
Yeap, I started programming in PHP and I was a shitty programmer, there were so many holes in my knowledge regarding OOP...then I learnt some JAVA and it all made sense. PHP's OOP syntax is so Java like that it just makes sense learning some. Besides...trying to write decent procedural code in JAVA is almost impossible so,...once you're using it you just do things the right way
1) Set duckduckgo as search engine 2) !php session 3) Go directly to PHP information resource (Not some crappy forum)
[FuelPHP](http://fuelphp.com/)
I use CodeIgniter already though I've been thinking about switching to a new framework such as Kohana.
I'm working on a couple infusions for the PHP-Fusion CMS, though your idea seems plausible on fixing bugs, submitting patches etc.
How would you make a distinction between a model and an object? The "Model" in MVC is the data model, which, for most web-based OOP systems (almost all of them) is an object model. 
You can't really learn OOP unless you are in an ecosystem that promotes OOP. Sure, you can learn all of the basic concepts, but until you're in a situation where you're looking at a major refactor because a tiny piece of your object model is just a bit too tightly coupled than it should be, you really can't appreciate how important proper OOP is. I did a lot of reading on OOP in college, and every assignment of course had objects, but until I saw the same issues and needs crop up over and over again I didn't really have the appreciation I needed to have for the convention.
Why is this getting downvoted? Reddit blows my mind at times. Someone posts a rather silly question to r/PHP -- a question that, actually, has nothing to do with PHP programming. This stupid chart isn't going to improve or enlighten your PHP coding skills in any way whatsoever, nor is it going to make you better at your job nor is it even a decent conversation piece. If anything, this submission is merely a curiosity; I don't necessarily have a problem with it, per se.....but it's not really the kind of submission that I want to see more of here on r/PHP. Regardless, it's sitting at +14 votes right now. Really? +14 for a stupid outdated graph on a page from php.net that probably sees a few hits a day max? Meanwhile, someone that evidently is privvy not only to the page in question, but also to the VCS used to house the code that the page runs on, actually pipes up with some spot-on information, including links, and then proposes a new image to take the place of the outdated one -- _and his reply is actually just at a +1 due to 2 downvotes_? You've got to be kidding me. Thanks for the info, btw. 
Curious why its a closed group.
It's actually unlikely that I'm being downvoted. The votes that RES and similar tools list are usually wrong, as an anti-spam measure. It's only when there's a *lot* of votes listed that you can actually tell that a comment is being downvoted.
I thought it was the other way around, that a few votes are representative of the real votes, but that it doesn't scale well. I'm probably wrong, though.
It might be the case that *someone* downvoted me, once, but as I say, I'm not too worried about the two downvotes that are listed for my comment, as it's not a real number. If I were actually worried about downvote-bots, I'd contact the admins, being a mod of the subreddit. :P
Exactly. You can't *not* learn OOP, because everything Java does is OOP. You need to catch Exceptions because the Java language itself throws them. You need to use classes because there's no such thing as code outside a class. You need to override pseudo-operators like `.equals()` and `.toString()` because your classes need to interact. I didn't even know what the fuck a class *was* before I touched Java. Now I can't conceptualize code without them.
You can use Google Maps for this, however, like Buckbova said, multiple cities can be in the same zipcode. 
I've used [this free database](http://www.maxmind.com/app/geolitecity) from MaxMind before, and didn't run into any inaccuracies with the zip codes I was working with in the US. If you do decide to go with the Google Maps API, just make sure you read the license since they have some rules about what you are allowed to do with it.
Thanks guys for suggestion! The problem with google maps is that you have to display their maps interface and can't just send queries. I didn't know about multiple cities in zip code. So say I have this scenario. I have a large database with thousands of stores and their locations. I'd like to return to a user the 20 stores closest to him and list them by proximity. What's the best way of doing this?
How about http://www.zipcodedownload.com/ ? Anyone tried them?
...at one point, I simply wrote a gateway to the USPS system (though was rather careful to *not abuse it*) that simply stored and re-used queries from a local table. While they won't give you a database (well, I think they'll sell you one for like $US99), their interface will (at least used to) give them to you on at a time.
I made a [Zip Code Range class](http://www.phpclasses.org/package/3156-PHP-Get-zip-codes-within-a-range-from-a-given-zip-code.html) a long while ago that might help you. All you'd need to do is build a database table with the zip codes, location (city), latitude and longitude. There are databases you can purchase this information from or get online for free.
I often use MaxMind and it has actually never caused issues, but I hear horror stories about accurate detection in Western Europe. I'd be interested to know if it's really that difficult.
Latitude / Longitude * Ask the user for their location and geocode it. This could be at any level of granularity that you want to ask for: city, zip code, full address. * Query a database table that contains all the locations of the stores. You will in effect draw a bounding box around the point the user gives you and select any stores within that bounding box. Here is a great reference: http://www.movable-type.co.uk/scripts/latlong-db.html I think it makes great sense to use Google Maps here. You can use their API to do the geolocation of the user, and display a small map with the locations of the stores as markers. This is both helpful to the user and lets you meet the terms of use.
if you know how to import a csv file into your own db, then just look them up locally. i just set up an easy table for doing that with data from this guy. http://www.boutell.com/zipcodes/ remember: zipcode data is public. don't pay for it.
Might [https://github.com/phayes/geoPHP](https://github.com/phayes/geoPHP) be of assistance in helping you connect to Google's geolocation APIs?
I like YQL and their Geo Placemaker stuff
I use the geonames dumps alot http://download.geonames.org/export/dump/ you'd probably do well with cities1000.txt (all cities with a population over 1000), then dump anything outside North America. You can also drop many of the columns and cut down on size dramatically. It takes some time to setup but you can find scripts already made in the forums. As for paid services I've just started playing with http://simplegeo.com and like it a lot (you would want the "Context" product). It uses the geonames database along with a bunch of other public info with many wrappers written in various languages. Super easy to use.
Don't use an api, you can get a zip code database and code to do it within the app itself and save on the latency and api costs.
you don't need to display the map to access google's maps API. Look up [Google's Geocoding API](http://code.google.com/apis/maps/documentation/geocoding/) you are limited to like 2000 per day, but you can get lat/long, Country/State/County/City/Municipality out of just a zip code. 
It wasn't until I took a couple Java courses that objects finally made sense. I haven't touched Java since, but I still use the things I've learned.
It gives you one object. Not multiple. Its hard to make a lot of design patterns with one object. You need two classes to have an abstract class.
Don't forget G.R.A.S.P. Also I'd suggest a Unit testing related book as well because it'll teach you dependency injection, mocking, proper factories, etc.
I work for IX Web Hosting and I can confirm that we are running PHP 5.2 on *most* of our shared servers. We have to cater to the majority. There hasn't been much of a demand for PHP 5.3, so it isn't a high priority. Customers also get incredibly pissed off when you update software versions. We are in the process of migrating legacy accounts off of old hardware where PHP4 is installed. The people on these servers running 10 year old PHP applications are throwing a fit because we are upgrading and breaking their software. In a shared hosting environment, the majority of account owners don't understand what they are doing. They hired a 'developer' (ie, the kid down the street) to build their site. If you know what you are doing, shop around for a shared host that meets your needs. Paying a low price isn't a good enough reason to stick with something you don't want. 
I've never ever worked with an model that was not a series of objects. Can you give me an example of one?
I have left something close to this comment in my code before: "Whoever gets this next, I'm sorry. The customers changed their spec 3 times but our deadline did not. I did the best I could." Truly nightmarish code in that.
I left a comment once that said "I tried to make this as clean and efficient as possible, but my boss doesn't understand those words. This is why I can't have nice things". I quit that job two months later. 
There, there. At least you don't have any code on [http://thedailywtf.com](http://thedailywtf.com).
There's one project I did that we eventually told the client we couldn't work with them anymore. The code is peppered with comment headers like this one: /** * HERE THERE BE DRAGONS **/
I recently worked on a program that had the comment: "To those who come after: All I can say is I'm sorry." 500+ lines of regular expressions because someone fucked up the core functionality during a design upgrade.
i've found a combination of their city and zip is the best way to render the city :) otherwise you'll need to deal with multiple records from a single zip/zip+4 query 
A gray dot in every white space? How do you read that shit? 
 I'm·sorry·for·your·loss.
I developed a custom search algorithm for a customer that used Active Directory as the information source. The PM had such a inferiority complex that it got in the way of everything we did and delayed the project significantly. I decided to code an encrypted search term into the system where if someone typed in just the right term then the code would redirect the page to the [Napoleon Complex Wikipedia page](http://en.wikipedia.org/wiki/Napoleon_complex). The fun part was obfuscating the search term checker and redirection system so people looking at the code couldn't figure it out - "it was just part of the security sub system".
I·like·interpuncts·too.
You're saying you have models that when loaded by the controller, will instantiate multiple objects? 
Yes. A long long time ago. It was fine as an initial static resource. The problem is that the USPS posts updates every couple of weeks. Sometimes the changes are almost nonexistant...sometimes entire counties are rearranges and split. How many zipcodes are there in Houston and how often do they change? A few texas cities exist in multiple counties. It's a mess. If someone has a handy way to access a service (free or paid) that has been reliable for over 2 years, I'm interested.
I think they request that you use it only for interfacing with their map.
I used [this](http://federalgovernmentzipcodes.us/) for a site, granted zip codes change, but it's a good place to start. There are paid APIs, but if you want to do it free for now, do the google maps query [http://maps.googleapis.com/maps/api/geocode/json?address=ZIP_CODE&amp;sensor=false](http://maps.googleapis.com/maps/api/geocode/json?address=90210&amp;sensor=false). They DO want you to display a map, but I doubt if they'd notice right away.
You may be correct. I believe the geocoding api is a bit more leniant. OP should read the ToS accordingly if he decides to use it.
I'm saying I've never worked with a modern MVC framework that didn't implement an ORM.
Curious why the signup website is just a bunch of filler text
I'm picturing something like: if (md5($term) === '2eab7196068486fa9b295ebfacff7986') Where `2eab7196068486fa9b295ebfacff7986` is `md5('Tod is a moron')
I am ashamed to say I have written comments like that one. And meant them. :(
g-edit·draws·spaces·plugin
High contrast, used to see the difference between space and tab in our codebase
I work for a lot of small businesses, so most of the time our projects start out small, and grow bigger as the client has money to pay for features. It makes for what many outside programmers call "Spaghetti code". I'm saddened to have my name attached to some of these projects, but at the end of the day there isn't much that can be done. When the feature set changes 3 months later, I have to work it in with all the other features I wrote 2 years ago. So annoying. Luckily my boss gets it, so I usually get paid for a significant amount of "re-coding" when this happens. Though sometimes the client can't afford it, so doing it dumb and stupid is preferred. I hate everything about that.
Oh, he meant them - still worked at the company and I spent a lot of time at his desk asking him if he could remember what the hell he was trying to accomplish with one line or another. Painful.
you should only mark the offending one which, if you're a good person, would be the tab. marking both is silly.
I've seen many hosts that run v4 and v5 at the same time, decidable by the user (using .htaccess usually I think) You can't run one php 5.3 box? :)
&gt; because there are other attack vectors We're looking at you *javascript*
I found that [GeoHelper](https://github.com/synewaves/geo_helper) is quite easy to use. [Here's](http://logitup.info/test/reverse-postal.php.txt) an example of a reverse IP/postal code lookup.
[My worst so far. I hate hacking on other peoples' stuff.](http://cl.ly/3k0f0r28392o182E0b1p)
Well thats not the same thing.
Can you explain to me what you're trying to describe, then?
No, we're not. Javascript has nothing to do with PHP security. 
You need two classes to make an abstract class. One of them can't be instantiated. If you wanted to implement an iterator class it would need to be your entire model and be very messy. If you wanted a factory pattern the object it returns will probably not have access to helper objects in the framework. 
It was something like that.
Tisk tisk.. Assuming you know what goes on at my work or the code I have to maintain. Very often there is a mix of tabs and spaces. It's not always a simple removal of all spaces/tabs.
XSS
And? Javascript doesn't really make your website any more insecure than it already is. If you're having trouble with Javascript, that's because you can't code worth shit. Just sanitize your inputs and follow the best security practices.
It sounds like you don't know what the M in MVC stands for.
&gt; Just sanitize your inputs Yeah that's kinda what I hinted at 3 levels up...
use·vim
Great, so you've added nothing to this conversation. Also, way to act like a child. Good bye. 
Hey man, tabs are perfectly okay. Their width is customizable, so if you like 2-space indentation and I like 4, we can both be alright with that. And they can't sneakily be off-by-one-space. The thing tabs shouldn't be used for is alignment. Indentation yes, alignment no.
I need a text editor though
Soo... did you want me to say it again, or what?
We currently have 12 different clusters for our shared hosting, and each cluster is running a slightly different version of the HSphere control panel software, which is holding us back. We're in the process of moving accounts off of our five oldest clusters to new hardware so we can consolidate software versions across the data center which will make future upgrades less of a headache to complete. There might be a machine (virtual machine, our setup is closer to the concept of a 'shared cloud') on the newest cluster running 5.3. I'll have to take a look.
I guess I'm picking up Java then, thanks guys!
Clearly he'd rather use Emacs.
I replaced CI's spartan ORM with [php-activerecord](http://phpactiverecord.org) in about five minutes. There's a very slight performance hit, but the tradeoff is fewer lines of code and heaps of extra functionality.
Make sure your superiors know that you intend to do this, and make sure you're up to it. If you want to do things differently to them, write shit out on [digital] paper before you write any code. What goals will the system achieve? What are its list of functions? What are the overall objects and interactions? What's a good general data structure? Having *some* plan, that you *try* to stick to, is a lot better than none at all. You'll always deviate some amount from it, but as long as it's there to deviate from...
...and yet the first thing I see about it in the tutorial is that it uses a monolithic global variable to hold itself called $context. Good design, right there.
Edited. There is no $context global variable, $context is not visible in the global namespace. Context is a singleton. if you want to get the Context in the global namespace you would have to do something like AgaviContext::getInstance(). Parts of Agavi hold a reference to the the current Context so you don't actually need to use getInstance. This *is* Good design. From the API docs: &gt;AgaviContext provides information about the current application context, such as the module and action names and the module directory. &gt; &gt;It also serves as a gateway to the core pieces of the framework, allowing objects with access to the context, to access other useful objects such as the current controller, request, user, database manager etc. This is exactly the kind of thing that would require either a global variable or a singleton. The functionality of the context should anyway be available throughout the execution. Also having a context you can pass to other classes, objects and libraries of sorts is extremely powerful. 
That's what Vim's [:retab](http://vim.wikia.com/wiki/Super_retab) is for. It works miracles.
I'd need some more hands for that, though
Zenphoto might fit the bill.
no they're not, there's always times when you align things and what do you do then? mix? use spaces according to your own tab width? expect everyone to have the same tab width? all of those are a mess, there's not a single case when tabs are better. in fact the single idea of having different width per user is foolish, you're not supposed to look at the code differently than me or anyone else, that's why there's conventions on each community, just imagine we agree to wrap at 80 cols but you have your tabs at 2 and I have them at 8, mess again you see? stop the idiocy and use spaces like everyone else.
remove dependency of Zend
as I've said you should only mark the offending ones, what's the point of marking both? do you expect to have a third different kind of whitespace or what? also, as cincodenada says there's an option to conver them and there's another option `:expandtab` that will automatically insert spaces up to the next `:softtabwidth` when tab is pressed (you can configure the width of actual tabs with `:tabwidth` and the indentation width of commands with `:shiftwidth`) so what was your reason again?
It is possible to create a valid GIF that contains PHP code. As most servers determine executable filetypes by extension (or by the penultimate extension) it is better to check these extensions as well via a whitelist. If possible mark the upload directory not executable (by removing the script handlers).
Or you could do the sensible thing and use [input filters](http://php.net/manual/en/filter.examples.validation.php).
haha, best reply ever
rot13?
If it's a critical site then sure I'm going to be enforcing strong passwords regardless. I can remember a 15 character string with uppercase and funny characters no problem. Pick an aircraft make and model, a bible verse, favourite movie name, favourite Band - Album - track number - Song title etc. They type it in once and the browser remembers it for next time. It's not that much of an inconvenience. If it's some site like Reddit I'll make an easy one just for Reddit as I don't really care if it's lost. Lost your Reddit user account no big deal it's just karma points. So to sum up this 1000x hashing is useful in the following circumstances: **1)** System hacked, only the database tables are lost AND users have easy passwords. Where it's not useful: **2)** Website rooted (lost admin control of) AND database stolen. **3)** Database tables in hands of hackers and site has strong passwords, salting and hashing. Re: point 1) - Marginally useful, the hackers don't have the source code. They still have to try 8+ hashing algorithms as they don't know which one you used. That will take time starting with MD5 as the lowest common denominator. Also they don't know whether you did hash(salt + password) or hash(password + salt). That's another two permutations to try. By the time they've found the right hash used then most likely you've locked down your database and had your users change their passwords. Maybe I have an extra salt hard coded only into the PHP that is common for all passwords. Then that is included in the hash. E.g. hash('sha512', 'xycabc123!@#^#$' . hash('sha512', $salt . $password)). So if they stole *just the database* then it would still take a long time to figure out the easy passwords as I've effectively padded them with an unknown salt that the attacker doesn't have. Their attack will have to resort to brute forcing. Re: point 2) If you've lost admin control of your website and the database is lost then **they don't even need the passwords**. They can just log in as an admin user and reset them. Then log in as that user and transfer all the money out they want or whatever malicious things they want to do. Re: point 3) Site will be effective against rainbow tables because of strong unique salting for each user account, and the attacks will be ineffective against strong passwords as it will still take a long time to find the strong password that matches the hash for each user. Remember they have to start all over again with each user account because it uses a different salt.
Copy paste from Wikipedia. | A rainbow table is ineffective against one-way hashes that include salts. For example, consider a password hash that is generated using the following function (where "." is the concatenation operator): saltedhash(password) = hash(password.salt) Or saltedhash(password) = hash(hash(password).salt) The salt value is not secret and may be generated at random and stored with the password hash. A large salt value prevents precomputation attacks, including rainbow tables, by ensuring that each user's password is hashed uniquely. This means that two users with the same password will have different password hashes (assuming different salts are used). In order to succeed, an attacker needs to precompute tables for each possible salt value. The salt must be large enough, otherwise an attacker can make a table for each salt value. So you see your rainbow table is pretty much useless because my salts are random 512bits for each user. The only kinda valid argument for using 1000x hashing is to stop the simple passwords users might've used as being recovered by the crackers. As timdev explains developers apparently have a professional responsibility to protect their passwords in case they were stupid and also used that password on their banking website. You claim I'm not following rediquette. Well guess who got snarky and started abusing other people first? You. I downvote you for your tone and higher than though attitude. Just stop talking to me. 
[For the brave souls.. ](http://i.imgur.com/mfJtC.png)
You should learn
Use a proper version control system like Git or Subversion, then push to FTP whenever you do a commit. You'll find that it's much easier to rollback to previous commits than undoing copy-pasta on live code
If you do it right, it should only take a long time to do it once. You can reuse your code next time.
&gt; Copy paste from Wikipedia. Yeah, this is the problem. You don't know what you're talking about, and you believe other people just like you. &gt; Just stop talking to me. It takes a very special mind to respond to a message asking them to go away with a bunch of technical bullshit and then the same request in the other direction. &gt; So you see your rainbow table is pretty much useless Sure, if you have no idea how they work, and think that this happens in terms of you counting to 512. &gt; The only kinda valid argument for using 1000x hashing Read a security book, novice. Bruce Schneier says you're wrong; repeating yourself won't change that. &gt; Well guess who got snarky and started abusing other people first? 1) I didn't abuse you. 2) Rediquette doesn't mean "whatever random thing Zoszsoz wants to complain about." There's a specific list of rules called that. What you did is in there. What you pretend I did is not. &gt; I downvote you for your tone and higher than though attitude. Yes. And that's against the rules here. From the *****Don't***** section: &gt; &gt; Downvote opinions just because you disagree with them. &gt; &gt; Downvote opinions just because they are critical of you. You're breaking the rules because you're angry that someone disagreed with you, so you're pretending they abused you when they did not and breaking the rules to punish them, while several different people around you are patiently explaining to you that you are wrong, and pointing out that major cryptography books by major cryptographers disagree with your failure to understand what wikipedia says. I wonder if you'll ever actually realize that this is all happening because *****you are not correct and you do not have the presence of character to accept that in the polite fashion that you imagine you deserve yourself.*****
HOLY MOLY
&gt; there's always times when you align things and what do you do then? mix? Yeah: &gt;&gt; $array = array('item1', &gt;&gt; ···············'item2', &gt;&gt; ···············'item3'); · space, &gt;&gt; tab The thing about the wrapping is a good point; I hadn't thought of that. Still, I think if someone wants to have their tab width at 8, it's not a big deal that their code will be wrapped at a different spot. If it is a big deal, then they can adjust their width. I'm not trying to say that tabs are 100% better, just that they have their advantages, just like spaces do.
If you're setting tabs at 8 then you should expect the high possibility of going over 80. That's kind of the idea of tabs, I can set mine to 4 how I like them and you could set them to 2 or 8 and we can both work on the same file. You're still viewing the same code as everyone else. If you're really concerned about absolutely the same view on everyone's computer then you should be using the same IDE with the same preferences. If I open a project and it's utilizing spaces so will I. If it opens and they're tabs then tabs I will use. There's much more important things to worry about than spaces\tabs.
I checked. Looks like the newest version we're running is 5.2.17.
super fast planning, super fast typing/execution and immediate user feedback. Also, having one SINGLE project at a time helps [with focus].
There are a few good articles on regex out there, but this is not one of them. First off, this is a bad use case for regex, and the poor soul who authored the piece evidently has not been a web dev for long, or perhaps is willfully ignorant, but his regex is [nowhere close to adequate](http://tools.ietf.org/html/rfc5322). Regex is good for some tasks, but [validating an email address](http://www.regular-expressions.info/email.html) is _not_ one of them. For posterity, here's what a ["proper" email regex](http://ex-parrot.com/~pdw/Mail-RFC822-Address.html) looks like: (?:(?:\r\n)?[ \t])*(?:(?:(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t] )+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?: \r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:( ?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\0 31]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\ ](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+ (?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?: (?:\r\n)?[ \t])*))*|(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z |(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n) ?[ \t])*)*\&lt;(?:(?:\r\n)?[ \t])*(?:@(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\ r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n) ?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t] )*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])* )(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t] )+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*) *:(?:(?:\r\n)?[ \t])*)?(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+ |\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r \n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?: \r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t ]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031 ]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\]( ?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(? :(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(? :\r\n)?[ \t])*))*\&gt;(?:(?:\r\n)?[ \t])*)|(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(? :(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)? [ \t]))*"(?:(?:\r\n)?[ \t])*)*:(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]| \\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt; @,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|" (?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t] )*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\ ".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(? :[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[ \]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?:[^()&lt;&gt;@,;:\\".\[\] \000- \031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|( ?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)*\&lt;(?:(?:\r\n)?[ \t])*(?:@(?:[^()&lt;&gt;@,; :\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([ ^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\" .\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\ ]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\ [\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\ r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\] |\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?(?:[^()&lt;&gt;@,;:\\".\[\] \0 00-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\ .|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@, ;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|"(? :[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])* (?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\". \[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[ ^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\] ]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\&gt;(?:(?:\r\n)?[ \t])*)(?:,\s*( ?:(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\ ".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:( ?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[ \["()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t ])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t ])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(? :\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+| \Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?: [^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\ ]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)*\&lt;(?:(?:\r\n) ?[ \t])*(?:@(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[" ()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n) ?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt; @,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@, ;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t] )*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\ ".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)? (?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()&lt;&gt;@,;:\\". \[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?: \r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[ "()&lt;&gt;@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t]) *))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]) +|\Z|(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\ .(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z |(?=[\["()&lt;&gt;@,;:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\&gt;(?:( ?:\r\n)?[ \t])*))*)?;\s*) Also, the author evidently isn't aware of simply regex notions like `\w` and `\d`, things that anyone who has used regex for more than a few days should know.
I would say maybe try an outer join? Like have "RIGHT JOIN" or "LEFT JOIN" instead of "INNER JOIN". I've been trying to get an example, but my tables aren't playing nice right now. The other thing that I've done as a workaround in PHP is to run a query to get all of the options from your Outcome and Source table, and then loop through them. If data is there in the array you pulled from MySQL, then insert the value, if not, insert a zero. Hopefully this is somewhat helpful. You may also want to x/post this to /r/phphelp. Good luck!
Here's a quick query for you, you will need to check it though: SELECT o.outcome, s.source, COUNT( DISTINCT p.id ) AS num_projects FROM outcomes AS o JOIN sources AS s LEFT JOIN projects AS p ON p.source_id = s.id AND p.outcome_id = o.id GROUP BY s.id, o.id 
Wrong comment trail? =)
I was able to run the query but it still doesn't fill in the gaps. Here is the sample of data I get back: http://imgur.com/f1WMU As you can see the source Change Order doesn't show any results that are Open or Deferred. I would like it to show those and show 0's in the total_count column.
thanks :-)
Before doing anything, implement some kind of version control (if not already in place). 
why not just foreach the first query -&gt; then foreach the second query then foreach the third query into arrays that way you can init the values to 0 this is php - it's okay right? if you had sql server management studio (or ssis) making these queries is 90% visual - i can appreciate the skills of those dba's who can do it all in their head. 
I'm rusty but does this fly? SELECT o.outcome, s.source, IFNULL(p.num_projects, 0) AS num_projects FROM outcomes AS o JOIN sources AS s LEFT JOIN ( SELECT p.source_id, p.outcome_id, SUM(1) AS num_projects FROM projects AS p GROUP BY p.source_id, p.outcome_id ) AS p ON (p.source_id = s.id AND p.outcome_id = o.id) 
It's probably a last resort. I'm rusty at doing that and it just seems cleaner to do it in the the query.
Wow that worked. I'm definitely going to have to read through the query to see exactly what it's doing but it looks like it's working. Thanks a lot
Yet again, you make an error that exposes how little you've thought about this. Namely, that if the attacker doesn't know what hash function you used, they have to try the all starting with md5. Hint: I can easily tell, just by glancing at it, that the output of sha512('abcd') is not an md5 hash. Previously, you asserted that the length of your salt would increase the search space for a brute-force attack. Which is wrong (since the attacker knows the salt) twice (because we're not concerned about an exhaustive brute-force search of the entire space). Now, you're claiming again that if the attacker rooted your box (and thus has your hashes, per-user salts, global salt, and knows your hashing strategy), it doesn't matter since you're rooted anyway. Which is wrong, because what we're protecting here are the users passwords themselves. I really think you place too much stock in the idea of "strong" passwords. Let's define strong as "at least 10 characters long, with both upper-and-lower case letters, at least one number, and at least one one symbol. With such a policy, it won't be long until you have a couple of users who choose: 'P@ssw0rd123' or something equally likely to be tried early by a sophisticated dictionary attack. Even with multiple iterations, an attacker is likely to get a few hits on things like that. But they'll take 1000-times more cycles to get those hits. The only reason you've ever given to not key stretch is that it's computationally expensive. But it really isn't. Which is what makes this argument so stupid -- you're just making excuses to avoid admitting you were wrong. 
I agree the book is great. regardless of PHP or JAVA. PHP vs JAVA does Matter though. Pit falls of PHP with Java design patterns are: * Lack of package level visibility forces you to make method public to allow state/strategy objects to interact with the object that uses them. You have to either live with that lack of visibility control or resort to other [ugly tricks](http://www.php.net/manual/en/language.oop5.visibility.php#93743). * Lack of method signature overloading doesn't allow you to use a pattern like the [Visitor](http://en.wikipedia.org/wiki/Visitor_pattern), which isn't covered by the book but is an amazing pattern. 
&gt;I'm·truly·sorry·for·your·lots. Fix'd 
If you have some cash to spend (or your employer does), I highly recommend the [online Github training courses](https://github.com/training/online) taught by Matthew McCullough. I woke up at 2AM to go in as a total version control newb and came out a git master. 
rot26
Not sure if vim or gedit. In either case what color scheme?
If you're continually pushing the envelope, which is pretty much required to stay afloat in this industry, development will continually take time to complete. It's a fallacy that web development is easy. How many languages do you need to produce an effective web site including search visibility, UI, graphics, etc.? How much theory do you need to understand on how a server architecture is developed (scaling, caching, etc.) especially for a high traffic site? How much security do you need to understand to prevent a web site being hacked? There's a lot that goes into a full blown web application. All this is very time consuming and takes years to master. Once you've got your head wrapped around a few design patterns such front controller and model view controller, etc.. jump into a framework such as Zend which is heavily based in OOP and MVC. All the validation and form processing will be dealt with for you which when done from scratch is very time consuming. I see you're using CI. You'll need to build your code once such as a log in registration. Make your code loosely coupled so that you can extend or reuse your library in CI - your library and a framework can be pretty affective in the speed of your development. Use your framework for generic processes and specific development in models so that you can dump it into your next project and just extend it in your controller when you need. You wont have to rewrite, for instance, the back-end process of a log in registration. Drupal and other CMS are great for when you're looking for the pre-built functionality including their contrib modules. However, beware that if you need something that you can't find in their module you'll be in neck deep using its API which in this case it's better you build it with a framework so you have all the versatility you need and don't have to learn new nomenclature such as hooks (Drupal terminology)
&gt; but was wondering if there is like Best Practices for documenting changes or something Well, that's what you go to uni for :) [UML](http://en.wikipedia.org/wiki/Unified_Modeling_Language) charts help map out the actual sctructure of your program before you write it. You can make them very complex if you want to, but they can also be very simple (just a class diagram). Using an issue / bug tracker with an SCM will help you track changes practically. Something like redmine + git or hg would be good. Especially in rollout, you would then be able to use it to help users report bugs. [Test Driven Development](http://en.wikipedia.org/wiki/Test-driven_development) is a popular way to make sure you are progressing and writing good code; PHPUnit is the standard. Writing timelines and goal-setting, no matter how off-target you think they may be, can be helpful. Just another way of organising.
As a side note, do not ever make a form that takes action (other then fetching data) which does not use POST requests. It's just bad form. (ha ha, get it? *Sorry...*)
Back in January I did a very basic post on Geolocation Search, and I mentioned the evils of using ZIP codes. If you're interested, http://zaemis.blogspot.com/2011/01/geolocation-search.html Though I know sometimes we don't have a choice, and have to do something a certain way or else not get the paycheck, it's still good to know why something is good or bad.
I can't upvote you enough for linking to the changelog
If they just want coupon codes, I'd recommend taking a look at [this contribution](http://addons.oscommerce.com/info/4269).
That site looks like garbage without JavaScript thanks to "LESS". Why would anyone use that?
Thanks for the tip, bought a couple of books.
Good eye, its actually a gedit based theme for Vim called [Dark Spectrum](http://www.vim.org/scripts/script.php?script_id=2215). I like it because its easy on the eyes. 
Thank you.
I'd recommend [xDebug](http://xdebug.org/) for debugging, it's actively developed, does what PHP Debug does and has support in quite a few IDEs. You can use xDebug for profiling too, but I prefer [xhProf](http://mirror.facebook.net/facebook/xhprof/doc.html), mainly because you can diff reports.
Why don't they just release it as 6.0 ? I mean there is enough deprecation / incompatibilities / breakage in 5.4 to warrant a new major version. And with 5.3 [just reaching 10%](http://w3techs.com/technologies/details/pl-php/5.3/all) now, the next version wouldn't be rolled out within years either. A honest version bump would be more likely to help. Also, does anyone know why E_STRICT is suddenly in E_ALL ? The changelog is not overly informative, and the mailing list just mentions the reasoning with "nuff said" and "that's how it was in PHP6", but not much of a rationale.
I think they've always wanted full unicode support for v6. Namespacing was also hugely backwards incompatible, but 5.3 wasn't renamed either. On E_STRICT - Because.. it doesn't make sense not to include all categories of errors in a flag that says it covers all categories? I think people are now realising that it's far better to encourage people to write clean code than allow them to be lazy. PHP has only got a negative rep (also massive uptake, but I digress...) from that allowance.
So.. this has short array syntax, yes? Fucking want that feature SO badly.
I have xDebug installed. Does it have the floating HTML bar interface like PHP Debug? That's the part I'm looking for specifically. 
A word of advice: don't do it the way every other shop does it, with a little field that says "promo code" that laughs in the face of every single paying customer that doesn't have a promo code. It will take users out of the payment flow and off to google to try and find a promo code, and your abandonment rate will go up (plus you'll be giving discounts to people who wouldn't have even known there was a discount to have until you waved it in their face.) Instead, make promo landing pages that set a cookie that will add a discount to the next order that visitor makes, and distribute the URLs, not the coupon code.
&gt; - Added features: . Short array syntax, see UPGRADING guide for full details (rsky0711 at gmail . com, sebastian.deutsch at 9elements . com, Pierre) Yay!
I read roughly half the changelog... Nice to see the language progress in a positive direction. Not seeing a ton that will affect me... No major "finally" moments, unless im missing something.
Namespacing isn't backwards incompatible -- old PHP 5 code that doesn't use namespaces continues to run fine. Adding new features doesn't necessarily mean you will be breaking backwards compatibility. (the lack of) E_STRICT is all about compatibility with PHP4. Now that it's 4 major versions into PHP5, I'd say it's about time that it's included in E_ALL. 
 - Removed legacy features: ... . y2k_compliance ini option. (Kalle) Nooooooooooo! :)
magic quotes is removed
Also register_globals. Even though it was already deprecated in 5.3, I'm glad to see it dead.
Because there's a plan. 6 is 6 and this is 5.4
&gt; Namespacing isn't backwards incompatible PHP 5.3 code will not run using PHP 5.2. If you have an entire library that is namespaced, trying to get it to run on PHP 5.2 will require refactoring on a large scale. On the other hand, upgrading PHP 5.0+ code to work on PHP 5.3 is rather trivial.
&gt; old PHP 5 code that doesn't use namespaces continues to run fine. That's *forward* compatibility, *not* backward.
I can totally get behind E_ALL actually meaning what it says. But I would have hoped they fix the manual first. Last ten years it insinuated that E_STRICT would [never](http://www.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting) be part of E_ALL. And now the docs are just [incoherent](http://www.php.net/manual/en/errorfunc.constants.php). Also I understand \_STRICT is just a \_DEPRECATED synonym to discourage syntax that has fallen from grace. Yet I feel code cleanliness does not qualify as real error, and the sudden change might add more confusion.
&gt;I'm working on a client's e-commerce website built on oscommerce. I'm so sorry... 
Just check the [docs](http://www.xdebug.org/docs/) for what it can do. It's most powerful with an IDE interfacing with it. Both Netbeans and Eclipse PDT support it, as well as many others.
Use Zend Framework by any chance? They have a 3rd party debug bar [ZFDebug](https://github.com/jokkedk/ZFDebug) that works ok. Even if you don't use ZF you can probably adopt it to suit your needs.
There's also [DBG](http://www.php-debugger.com/dbg/), I've never looked at it though.
I'm sorry but you have that backwards. [Backwards compatibility](http://en.wikipedia.org/wiki/Backward_compatibility) means that new versions will continue to run old code. For example, PHP5 is not backwards compatible with PHP4 because most PHP4 code will not run unmodified on it. [Forwards compatibility](http://en.wikipedia.org/wiki/Forward_compatibility) is the opposite. Namespaces aren't forwards compatible because you can't add them to pre-PHP5.3 code. 
ctrl+f "improve". I'm excited, the changelog has so many promising upgrades!
*You're* talking about PHP, *I'm* talking about namespaces. Stop twisting the topic. The PHP 5.3 runtime is backwards compatible with &lt; 5.3 code. Said the other way, 5.2 code is forwards compatible with the 5.3 runtime (which is what I said in my parent post). The feature, namespacing, is *not* backwards compatible with PHP runtimes before 5.3. You can't talk about namespacing being *forwards* compatible (or not) in comparison to a previously released php runtime - *forwards* refers to movement in time. namespacing -&gt; php 5.2 goes backwards in time. In order to talk about x being forward compatible with y, y must be released after x. In order to talk about x being backward compatible with y, y must be release before x. How hard is that to understand?
It's been rumored that v6 may be PHP's take on IPv5. &gt; Also, does anyone know why E_STRICT is suddenly in E_ALL ? You didn't search the mailing list well enough, then. It's been [discussed](http://markmail.org/thread/yycxc6dsrvobu3mc) many [times](http://markmail.org/thread/2kzghxa5w7mhzlg3), and those are just the first 2 references that I found, there are more. I think it boils down to a few things, but mainly that `E_ALL` did not actually include "all", which is counter-intuitive.
&gt; You're talking about PHP, I'm talking about namespaces. Stop twisting the topic. Actually, I think we're both talking about namespaces. I'm talking about the PHP runtime support of namespaces and you're talking about code containing namespaces. I actually think what I'm saying is more relevant. Your statement about namespaces being backwards incompatible is pretty meaningless since that's true of every new feature in this release! We only care about runtime backwards incompatibility -- everything else is expected. 
What you said is just semantically and temporally wrong.
Isn't it expected that PHP 5.3 code won't work on 5.2? When people worry about backwards incompatibility they're not worried about that. Basically, every new feature of any language anywhere isn't "backwards compatible" if taken from that direction. You're not even forced to use namespaces in PHP 5.3. So you can happily write code for it and still runs in older versions. 
100% agree... these pre-rolled frameworks have too much crap you never use and force to to conform to their retarded idea of how to code.
I just think what you originally said was confusing, pointless, and maybe even obvious. But I'll accept that you are semantically correct. 
Why not just create a class and use methods?
Nah, did not search so far back. The E_NONE/bug/patch isn't very informative yet. But from the PHP6-todo discussion it seems "E_ALL should mean all" is really about all the substantiation then.
The pear php dns functions will let you do this http://pear.php.net/manual/en/package.networking.net-dns.net-dns-resolver.query.php Scroll down to "Using Net_DNS_Resolver::query() with specific nameservers and options". 
many thanks! guess i didnt google hard enough.
Is there any alternative to pear? I have always wondered this... never really needed it for a project though.
Can I do: functionReturnsArray()[1] ...yet? If not, I don't really care.
It's called array dereferencing, and supposedly [yes](http://razvantudorica.wordpress.com/2011/07/14/array-dereferencing-support-in-php-5-4-0/)
The standard function probably uses the system call gethostbyname_r() which uses the system resolver configuration.
Not that I know of unfortunately. I am not a big fan of it because sometimes the documentation is only the function list, with no examples.
I can only speak to my own experience as a freelance developer who up until last year worked alone. The biggest road block in the way of my productivity was always my own arrogance. How did I become a faster PHP developer? I started working with others, started dealing with tighter deadlines, and quickly learned some humility. Stop reinventing wheels. If you think you need a slightly different wheel, you probably don't. If you think you can make a better wheel than the last one you made or the one another developer made, you probably can't. Duplicate work that you or someone else has already done only if there is a real need or if integrating existing code is going to consume more time than rewriting it. Use frameworks. Use MVC. Use best practices for code reuse. Unless you really have nothing better to do with your time, don't think you can write a better blog than the entire WordPress community on your own. You can't, and it's stupid to try.
&gt;Isn't it expected that PHP 5.3 code won't work on 5.2? Not any more. From 5.4 on minor releases will not break backward compatibility unless absolutely necessary.
There wasn't supposed to be a 5.4 branch, so you never know. I fully expect new SPL classes, functions, etc, to be added to the 5.x series in the near future. There is very little momentum on PHP6 right now. Major releases (like 4.0, 5.0, 6.0) are reserved for backwards incompatible changes -- where your old code just isn't going to run in the new version without changes. 
You've been in a similar situation?
Nice! very insightful.
Thank you for the link. I'll take a look at it.
i did something similar in the past using a zipcode database i bought online. it would look up the zip and then pre-fill the city/state. one thing i ran into tho, that any given zip code could have more than one city. so the page would then display a city list with radio buttons, and the user would need to select one to continue.
Not sure why it won't work for you, but couldn't you just regex replace the %3C with a &lt; and the %3E with a &gt; before sending it along?
Have you tried not decoding the characters and redirecting it as-is? Those characters are encoded by the browser (say if you typed them in the address bar) and the server only sees the encoded version. Redirecting to that should work just fine. I'm still not quite understanding your problem though. Using `urldecode()` on the `$_SERVER['REQUEST_URI']` value above will give you your original URL back. But if you echo that out, your browser will think it's HTML. Try this: `echo htmlentities (urldecode($_SERVER['REQUEST_URI']));` 
Make that str_replace().
&gt;But if you echo that out, your browser will think it's HTML. That would certainly explain how &lt;&lt;city&gt;&gt; ends up as &lt;&gt;.
Happy Reddit Birthday! I did try that, here is my code so far... many things I've tried are not there, that's just where I'm at now. $current = $_SERVER['REQUEST_URI']; // Gets the current path minus the domain name. $currentdecoded = rawurlencode($_SERVER['REQUEST_URI']); $search = array( '&amp;#60;', '%3C%3Ccity%3E%3E', "city", "\\" ); $replace = array( "&lt;", "city", '&lt;&lt;city&gt;&gt;', '' ); $replaced = str_replace($search, $replace, $_SERVER['REQUEST_URI']); if (strlen(strstr($current,'/story_')) &gt; 0) { // The current URL contains /story_ $found = "/story_"; $path = substr(strrchr($current, "/"), 1); // Gets the current path AFTER the last slash $finalpath = substr(strrchr($path, "_"), 1); // Gets the current path AFTER the first hyphen (-) } elseif (strlen(strstr($current,'/local-')) &gt; 0) { // The current URL contains /local- $found = "/local-"; $path = substr(strrchr($current, "/"), 1); // Gets the current path AFTER the last slash $finalpath = substr(strrchr($path, "-"), 1); // Gets the current path AFTER the first hyphen (-) } else { // The current URL does not contain /story_ or /local- $finalpath = substr(strrchr($current, "/"), 1); // Gets the current path AFTER the last slash $found = "nothing"; } // The $finalpath variable now contains the story path, minus anything leading up to it. // The $path variable now contains the story path starting after the last slash. ?&gt; &lt;table border="0" cellspacing="5" cellpadding="5"&gt; &lt;tr&gt;&lt;td&gt;Found:&lt;/td&gt;&lt;td&gt;Found &lt;?=$found?&gt; in path&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Server URI:&lt;/td&gt;&lt;td&gt;&lt;?=$current?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Server URI Decoded:&lt;/td&gt;&lt;td&gt;&lt;?=$currentdecoded?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Server URI Decoded then Encoded:&lt;/td&gt;&lt;td&gt;&lt;?=rawurldecode($currentdecoded)?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Path:&lt;/td&gt;&lt;td&gt;&lt;?=$path?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Path Decoded:&lt;/td&gt;&lt;td&gt;&lt;?=urldecode($path)?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Path Encoded:&lt;/td&gt;&lt;td&gt;&lt;?=urlencode($path)?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Path Replaced:&lt;/td&gt;&lt;td&gt;&lt;?=$replaced?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Final Path:&lt;/td&gt;&lt;td&gt;&lt;?=$finalpath?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;
It does not give me my original url back, it gives it to me replaced.
Do a view source. You're forgetting to escape the output with `htmlentities()`.
I used htmlentities during my testing, I'll try again, which variable should I try it on?
I tried it on the URI and it didn't work.
Viewing the source of [the URL in that video](http://sandbox.familymagazinegroup.com/fmg/education/story_Help+Your+%3C%3Ccity%3E%3E+Teen+Apply+To+College.html) shows the decoded URL exactly as expected. 
%3C is the same as &lt; &gt;&gt;&gt; chr(0x3c) '&lt;' &gt;&gt;&gt; chr(0x3e) '&gt;' Your server should automatically decode it back to a "&lt;" and "&gt;". It's just a matter of the user-agent trying to sanitize the string, and not your actual server code. php &gt; echo urldecode('%3c'); &lt; As for the second issue: /fmg/education/story_Help+Your+&lt;&gt;+Teen+Apply+To+College.html Chances are, you're not escaping the HTML when it's being outputted to your browser..., so your browser is parsing the `&lt;city&gt;` tag. php &gt; $s = "/fmg/education/story_Help+Your+%3C%3Ccity%3E%3E+Teen+Apply+To+College.html"; php &gt; echo urldecode($s); /fmg/education/story_Help Your &lt;&lt;city&gt;&gt; Teen Apply To College.html Contact me on AIM, if you need additional help, I have a pretty sure idea what you're doing wrong: `edgew0rth000` 
Using it for what? Depending on your goal, there are various options. For example, you can look up the address directly from your chosen name server using the DNS functions and then use curl and a host header to request a web page.
Dude when you debug use the source code view (use chrome, so you can refresh it), and you'll see what's actually being output as opposed to what your browser is desperately trying to translate into HTML. So your answer is something like: &lt;?php $new_site = 'http://www.newsite.com'; $decoded = urldecode('/fmg/education/story_Help+Your+%3C%3Ccity%3E%3E+Teen+Apply+To+College.html'); $plussed = str_replace(' ', '+', $decoded); header("Location: {$new_site}/{$plussed}"); ?&gt; 
You don't need htmlentities, that is only for *displaying it on an html page*. You need to use the source view in Chrome for this sort of thing.
To get around potential name server failure on the web host dns serv. Sadly the require_once 'Net/DNS.php'; based solution above won't work because it doesn't seem to be standard enough. I need something that will work on 99.99% of linux setups w/o any extra work.
As an alternative to source code view, use header('Content-Type: text/plain');
That could be damn useful for Firefox debugging, cheers :)
I don't have AIM anymore, do you have google talk? If not I can install AIm... Your code didn't work how I hoped it would. edit, I'm working on it, I may have it, I'll let you know.
You are right, I see it in the source, so I'm assuming I can pass that to a location tag then? I'll try now and get back. Thanks.
OK so dumb question out the way first.. you're viewing the output in a browser, which would turn &lt;city&gt; into an unrecognized tag (ignore it completely). Have you tried adding header('Content-Type: text/plain; charset=utf8'); at the top of that file?
Once.
Got it, you can remove it now
Someone else suggested that too. Once I did, I saw the code. Now I'm working on it a little more, but it did help me get past the road block, thanks!
I have to run 5.2 because of the mail system on our servers. You are right though, that is the result I was looking for.
Is this an actual problem? You seem to spending a lot time trying to fix in PHP something that is a systems problem. Many systems are setup to handle the failure of a DNS server. Is this DNS server more likely to fail than your own sever? 
xdebug: http://www.xdebug.org/ xhprof: http://pecl.php.net/package/xhprof Eclipse PDT and Netbeans both support xdebug.
Yes, this is an actual problem. My co deploys JS onto tons of other peoples servers. Sometimes the client has DNS failure that prevents our JS from loading. So I'm trying a PHP solution that gives me more flexibility than JS. Our sites DNS if fine. But 1 out of 100 ISP's have fucked up DNS that doesn't resolve to us.
And more hilariously (and vaguely NSFW): functionReturnsClosure()();
Why are you inserting anything that could be perceived as html in the URL to begin with? Is that the ACTUAL url or are you doing some sort of find-replace/preg_replace/str_replace with &lt;&lt;city&gt;&gt;
Make that strtr().
Well, one method would be to: $bodyTemplate = 'thispage'; include 'page.tpl.php'; where 'page.tpl.php': &lt;html&gt; &lt;head&gt; [...] &lt;/head&gt; &lt;?php include TEMPLATE_ROOT . $bodyTemplate .'.tpl.php'; ?&gt; [... footer crap ...] &lt;/html&gt;
This almost exactly describes my old programming style with PHP. From there I moved on to frameworks (Kohana specifically). The MVC pattern still allows you to separate your concerns and adds a bit more flexibility to your apps/sites. You'll still have a main template and other "views" but you can pass in pretty much whatever data you want via the controller.
If your client has a DNS failure that prevents your JS from loading; you might be able to create a solution that works for your one script but effectively that client is screwed anyway. I'm sort of unclear though; you distribute your JS to other servers. Are you worried those servers have messed up DNS or web users of those servers? How does that affect your application? Can't you just hard-code IP addresses? 
i wish php users wouldn't write magnificent code with frameworks then throw in custom mysql calls that aren't at all portable to (sqllite,sql server,yadda) - beautiful reusable objects that are hardcoded (not at the database abstraction layer) to mysql. to suggest that they consider changes to make the code database agnostic - resulted in being told sql server 2008 R2 is junk until denali comes out because there is not limit (offset) command. lol. As someone that is just starting to learn OOP/MVC it is disheartening to see some great ideas not usable because i chose a database that is not mysql. lol. and after looking at the code (i'm good at procedural just not oop yet) - it was impossible to figure out due to the lack of comments or definitions without going through the entire codebase to locate constants. not everyone uses mysql - not everyone builds cms/blogs - not everyone thinks auto_increment is the end-all of primary keys - maybe i should try java - it appears people really seem more concerned about re-usability AND portability of code. if i can't take my code from windows/sql server to android/sqllite to linux/oracle - i'm not sure that is worth all the extra work to do certain projects in oop.
Confusing, yet obvious? Does not compute... 
He stated it's a legacy application that he's trying to redirect. It clearly wasn't his choice.
This issue is one of the reasons why MVC frameworks are developed. Most of your issues would be solved if you have an entry point into your view. Call it /views/index.php. From index.php, include the files that are used throughout the site and add view logic for dynamic pages.
Any organization is better than no organization there are several issues I see however. 1. .inc files are not parsed by PHP (on most servers). This means if requested directly the user would get your source code. At the very least these should be out of your web root, better, rename them to .php 1. PHP doesn't "stream" content to the browser. It has an internal output buffer that is flushed to Apache ***only*** at the end of the request unless you *explictly* tell PHP otherwise using flush() — which even then isn't guaranteed (read [the manual](http://us3.php.net/flush) page for more info) 3. Output buffering has many uses; and is often used in template systems, I definitely recommend familiarizing yourself with it and it's capabilities (e.g. nested buffers) There is nothing inherently wrong with procedural code; though OOP does, by it's very nature of encapsulation, force you to organize your code in some fashion. You can be messy with either option. A lot of folks will argue that PHP is a great templating engine itself (Rasmus Lerdorf creator of PHP is one of these, in fact) and that using templating engines in PHP is stupid. I have recently completed much research on templating engines and for me they fall into two categories: templating syntaxes, and templating helpers. The former uses it's own syntax that is typically pre-parsed into PHP and then executed. The latter is using PHP itself for the templates and having PHP code to do typical template things (e.g. show a dynamic title, or escape output). Our final evaluation came down to: * Twig &amp; Rain * Savant and Lithium Views * Homegrown Solution We also evaluated Smarty but it's too slow and too old, but we did checkout the Blitz extension also an alternative. Ultimately we settled on Twig because it's syntax is user friendly, but then switched to Lithium Views once it was established that no end-users would be interacting with the template engine. It is my opinion that ANY template engine is better than a home-grown solution.
Im not too sure it even exists yet. All I can find is a PHP 5.3 to 5.4 guide which shows the changes but is far from completely filled in. Ill let ya know if I find anything in the meantime.
One (good) alternative is a two-step rendering process. Instead of generating your page from top to bottom, you generate it from the inside out. Simple example, with three files, very simplified: **data_table.php** &lt;?php $data = $db-&gt;getSomeDataPlease(); ?&gt; &lt;table&gt;&lt;tr&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;value&lt;/th&gt;&lt;/tr&gt; &lt;?php foreach($data as $record): ?&gt; &lt;tr&gt;&lt;td&gt;&lt;?php echo $record['name']; ?&gt;&lt;/td&gt;&lt;td&gt;&lt;?php echo $record['value'] ?&gt;&lt;/td&gt;&lt;/tr&gt; &lt;?php endforeach; ?&gt; &lt;/table&gt; **layout.php** &lt;html&gt;&lt;head&gt;&lt;title&gt;Example&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="header"&gt;Some header stuff that shows up everywhere&lt;/div&gt; &lt;?php echo $layout_content; ?&gt; &lt;/div&gt; &lt;div id="footer"&gt;I'm a footer. Derp!&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; **index.php** /** This is the script that is requested by the client, it first renders the contents, then wraps it in the layout */ ob_start(); //start capturing output include 'data_table.php'; //creates output $layout_content = ob_get_clean(); // grab the output into a variable include 'layout.php'; // renders the layout, with $layout_content embedded in the middle This is particularly useful if stuff that happens inside data_table.php might affect things in the header and or footer. Here, the core page data are rendered first, then the layout follows, so the stuff in the "middle" of the page can call code that has an effect on the layout code. It also solves the '"&lt;html&gt;" and "&lt;/html&gt;" are not int he same file' issue. As you note in your question, no output is sent to the browser until pretty much the end of script execution. In some situations this might be undesireable. But 99% of the time, it's not a problem. If generating the page is taking a long time, you shoudl focus on fixing that, not sending the first bit of output earlier. While there are plenty of good examples of this out there, the Layout/View stuff in Zend Framework is something I'm familiar with. So I'll leave this here as further [reading](http://framework.zend.com/manual/en/zend.layout.introduction.html) 
If end-users aren't touching it, why not just use PHP? Years ago, i used smarty for everything. Then I stopped and never looked back, why would I want to deal with yet-another-syntax, just to do the job that PHP was born to do? OTOH, I took a quick look at the Lithium view stuff, and from my quick look, it seems like it's main job is to make view behave in a "escape unless told otherwise" fashion, which could be nice. I'll have to play with it more...
I think it hasn't been updated in over a year.
It's so obvious, that mentioning like you're making a significant point is confusing. 
I'm confused as to why OP didn't think of this in the first place.... Unless I'm missing something.
My honest opinion? Terrible. Borrows a lot of bad ideas from other popular frameworks: static architecture, helpers, and libraries.
Doesn't seem like Twig has many users but I love using it for personal projects. I used PHP as a templating engine for a while but never used a templating engine. Separating my code and design was a big boost in organization.
ffs, stop using .inc
I don't disagree with you, but I think pseudo-annotations are still nice. I'm torn.
Here's a copy of a super simple "rendering engine" I came up with to demonstrate the power of straight PHP templating: https://gist.github.com/929494 There is a lot of stuff missing (for example, check if $_template exists before include() it, htmlspecialchars on everything, read on the dangers of using extract()), but it gives you the basics and starts you down the path of cleanly separating logic (.php files) and views (.phtml files).
StoneCypher trolling hard in this thread.
One thing you maybe haven't considered yet, is storing code in the database. Write specific functions for the very custom requirements to determine the state of the form elements that are displayed. You can make use of PHP eval(). I know (because I worked on the equivalent system for over a year) this is how Doubleclick and SpecificMedia did custom logic in their lead processing systems. You're going to need to store javascript functions in the database as well, for custom validation (as described). Don't go too far down the rabbit hole of customization. Just enough. Tables: Advertiser - data about the advertiser Offer - effectively the label for a particular form, regardless of fields or logic, includes fk_advertiser_id HAVE STANDARD FIELDS THAT ARE AVAILABLE IN EVERY OFFER LIKE EMAIL, FNAME, LNAME, etc. httpField (fe) - has fk_offer_id, field_name, maps_to_name - this maps to standard field if it exists but will default to a custom field name if one exists with the value listed (in maps_to_name). YOU WILL HAVE NO DATABASE CHECK TO ENFORCE THIS EXISTS, IT WILL BE DONE IN THE PROCESSING LOGIC httpCustomField (fe) - for fields that are non-standard. In many cases the non-standard will outnumber the standard. httpCustomValue - for options available for a field. fk_httpField_id (remember, httpFields map to CustomFields too) staticField - fk_offer_id, fields that are always sent with a static value. Just like most of these tables, you can add a column for a fk_submit_js_callbackfunction_id and fk_validate_js_callbackfunction_id to execute custom logic. js_callbackFunction - this is where your custom javascript logic gets inserted php_callbackFunction - this is where your custom php logic gets inserted ------ The real trick is managing all these things. phpMyAdmin with the advanced feature "linked tables" makes this pretty trivial (you basically don't have to remember IDs for the most part as you can configure a table to show a dropdown of valid foreign key values tagged with an arbitrary field (1- Advertiser#1, 2- Advertiser#2, etc...) saving ridiculous amounts of time in managing and setting up offers. Your system need to accept an offer_id then basically run through the http_fields, join with the standard and custom fields to end up with a result set of field names and types, optionally...custom values if they exist. Output this as json at the top of the page before your javascript logic. output any custom functions retrieved for callbacks in the same script block. Now you write a tiny javascript controller to process the data and render the form with the configuration we have as json. Use Prototype/JQuery to write the form and attach the custom functions. You have a working system for what you described. I think there's going to be more though ^^
The only reason I mentioned it was to correct your mistaken one. Thus you feeling that yours 'makes more sense', when it was the point that needed to be corrected, actually makes no sense.
^This! If you want to be good w/ OO write Java. Stop writing PHP come when you get good w/ OO in java. You will write better code.
Please be very careful with your use of eval, see http://en.wikipedia.org/wiki/Eval#Security_risks
I would like to re-emphasize this: if you need eval to do something you've designed, chances are you designed something very poorly. There are, of course, exceptions to this rule, however they are few and far between. Doubleclick doing this sounds rather frightening -- though I have to wonder perhaps you mean they use eval in javascript, which would be a different matter altogether (though still questionable)
This whole sub-thread is about when PHP bumps major version numbers. They bump them when they break backwards compatibility -- PHP3 code doesn't work unmodified on PHP4, PHP4 code doesn't run unmodified on PHP5. Namespaces don't break backwards compatibility, so there is no reason for a version bump. Your whole statement about "Namespacing was also hugely backwards incompatible" is just plain confusing and meaningless in that context. 
The functions are specifically for dom manipulation of a dynamic form. The only way to change the eval'd code is by putting something malicious or insecure in the code intentionally. I agree EVAL IS DANGEROUS. It happens to be the best solution for the custom logic problems you will encounter in this kind of project.
mixed tabs is just a disaster waiting to happen, what will you do when CluelessDevA comes and indents everything the way *he* sees it correctly? notice not many people will have a setting that will show them which are tabs and whatnot.
If you're comfortable with object-oriented programming, you might want to consider making a base Form class. You can put the common features of every form in the Form class. You'd also need a Field or Widget class which would represent each type of field (i.e. hidden, input-text, select, checkbox, etc). It doesn't have to map one-to-one with its HTML counterpart. Every new form that you need would just inherit from the main Form class. This would allow you to keep common components like how the form renders, etc with the parent class. I'm pretty sure there's some open source version of this somewhere out there but I'm too lazy to check. 
that's bullshit, you're just justifying your own silliness ("much more important things to worry about" what are you? Stallman?). and the ide is irrelevant because it's not part of the code.
Eval and PHP callbacks are not the best solution for this. It is the easiest solution, but not the best. You can build a collection of widgets. Each widget would have its own class and its own set of dependencies. You then add the widgets to the form. The only problem with this setup is that things will have to be coded on your end and the client will not be able to run custom code. If you want to allow custom code for clients, perhaps giving them an API to create custom widgets for approval would be an option. Think iphone appstore type of approval.
I'm actually using Symfony 1.4, and assuming I can determine how to do so, I'd like to dynamically generate the form using its form widgets. I'm well familiar with using Symfony forms, but I haven't yet attempted to build one on the fly. I'm not actually sure it's possible. Thanks for the advice though - If I can't do it in Symfony, I think I'll do it as you're suggesting.
I haven't used Symfony, but I've used Doctrine 2.0. And from what I've read Doctrine is pretty much integrated in Symfony 2. They have annotations support, and that might just be what you're looking for. You can make a custom annotation reader and generate forms on the fly. It's a bit of work, but it may make your life easier in the long term.
It ate my baby.
PHP Callbacks aren't necessary from project description. If you receive the data, they would be necessary. JS Callbacks are really what's required (as I described). Widgets implies some other paradigm I'm not familiar with as we're talking static forms. You can make a form for every offer and all you have to manage is namespace. This is pretty simple, but there's some context the OP didn't communicate that requires a the configuration to be in a database or communicated by API (as lead configuration is communicated by serialized lists of fields + custom logic in the advertising world). The idea that you submit and widget or even have widgets at all is simply turning away lucrative offers that other vendors are happy to service. This is a question about implementation, not business process as that's already been decided. I'm not sure where you think you can tell pfizer "sorry we're not going to run your offer unless you do this for us". You just lost 500k (which is the average margin for a pfizer offer that runs for 2 weeks in CPL arbitrage) EDIT: While you have described your concept of widget (how the form is rendered), that's nice. You still have to apply custom values that can change and validation to the form. This cannot be serialized and mapped effectively give the problem domain of "anything a crazy coked up advertising middle man can think of". *If it's tuesday during a year evenly divisible by the 5, don't allow the 5th option. *If the offer is on it's 3rd day, add a 6th option. *If the last 6 responses have had any checkbox checked, change the text field to a select drop down for the most popular choices from selectBoxA. etc.
&gt; I have to wonder perhaps you mean they use eval in javascript Why would you do that? You don't even need to json_parse javascript functions. You just render them inline. I am still interested in why it would be frightening? You have custom logic you want to use for specific configurations of data that are partially normalized. There is 0 chance for injection if you're writing serverside code to do serverside validation based on configuration.
No, it most certainly wasn't, if you go back to the original context. milki was trying to advocate that PHP 5.4 should be renamed to 6.0, based on the fact that it introduced backwards-incompatible features. I pointed out that new features (such as namespaces) in any release almost always break backwards compatibility (the features can't be run on older runtimes), so that isn't a good reason to jump major release versions. You've been trying to reiterate this point to me ever since (since apparently me making it first means I can't have realised it...); the only confusion being that your use of semantics has been wrong for most of it. BTW, properly constructed PHP4 code will run on both PHP 4 and 5, so you can't make the blanket statement that it always needs to be modified. For instance, the entire CakePHP framework will run on PHP 4 and 5 unmodified.
I'm using Doctrine 1.2 unfortunately. To be honest I'm not too clear on how to use annotations... I've read about creating them using blocks in ruby, but I don't know how to implement them with php.
Make a form class, which has an output method, relevant properties. Has an array of fields. Make a field class, which also has the relevant set of properties, and outputs a field matching those. You then store the properties of advertiser's fields in a database; You have another class which constructs a form, pulls in the fields needed from the database and constructs them, inserts them into the form object, and gets the form object to output the desired html form. You have three tables; a fields table, an advertiser table, and a join table. I'm hoping I've interpreted the problem you've described correctly. The properly joined SQL query should pull out the proper union of needed fields. Tip: you'll never 'do it right', all you can ever do is get very close.
Seriously, [backwards compatible](http://www.webopedia.com/TERM/B/backward_compatible.html). "A new version of a program is said to be backward compatible if it can use files and data created with an older version of the same program." Describing features like Namespaces as "backwards incompatible" is just confusing. New major-versions come out when they aren't backwards compatible with code from the previous major release. It's simple. Namespaces don't break backwards compatibility. Changing the assignment semantics of objects, now *that* breaks backwards compatibility. Properly constructed PHP4 won't, in general, run on both PHP4 and PHP5 because of the huge change in assignment semantics (assigning/returning an object in PHP4 makes a copy). You *can* make your code compatible across both versions (I have code that does it) but you have to specifically and carefully craft your code to do it. You can't expect code designed for exclusively for PHP4 to run on PHP5 without modification. 
In PHP you don't have annotations per se, but you can use the ReflectionClass to extract DocBlocks for methods and then extract the annotations from that.
&gt; You can't expect code **designed for exclusively for PHP4** to run on PHP5 without modification. And you didn't note that condition when you made the statement, &gt; PHP4 code doesn't run unmodified on PHP5 To which I responded. I can't read minds, and you shouldn't be expecting me to. --------------------------------------- &gt; Describing **features** like Namespaces as "backwards incompatible" is just confusing. ...why? You've tried to say before that it is obvious [a triviality], and therefore confusing to do so. A) Trivialities are not confusing, and B) Sometimes they are used to make a rebuffing point. &gt; Namespaces don't break backwards compatibility. Yes, they do. Using namespaces in code that runs on a previous runtime is not possible, therefore that feature is not backwards compatible with previous runtimes. I don't care how much you want to state "well that's obvious!", the fact is you just claimed the *contrary*. If I have to be obvious to show the falsity of your argument, so be it. 
It seems many here didn't read or understand your question. One way to flush content faster to browser while still running code later is to use Facebook Big Pipe: just look at source code of Facebook page. Another way to speed up things is to use Edge Side Includes.
What? This is not a helpful response. I don't actually name my files ".inc", if you must know - that was simply a tool to help people here understand the concept I was speaking of. If you would like to make a helpful suggestion which would actually contribute to the thread instead of receiving upvotes for sheer glibness, then I'd love to listen.
I see a lot of inheritance suggestions, and there's merit to it, but I'd like to offer what I think would be a much simpler approach. If I'm understanding your requirements correctly, you need to retrieve essentially arbitrary data from arbitrary people, with your only job in the process being to let your front end guy know how many text boxes go out, when they go out, what labels to stick on them, and what the valid values are, and to pass that data off to someone else who actually cares about the data and people. Most important in this assumption is that not one fuck is given in your company about mining the data you're passing along. If that's the case, stop over-engineering and do exactly that. Assign applicant IDs to recipient IDs, form values and dependencies to recipient IDs, and set up what essentially amounts to key-value pairs in the database for the applicant IDs. I think the worst would be finding a way to consistently store form dependencies. If they're all yes-no decision branches, that's not so bad, but anything more complex than that and, well, you're heading into territory that's going to require coding things by hand unless you're comfortable telling your recipients to write their own Javascript. I'm also curious how such requirements are currently encoded in .csv form. The answer might be there.
Yes.
I'm confused why google wouldn't help? Zend Framework uses views and layouts to do this, works OK but is a bit clunky if you want different layouts per modules (e.g. front end and admin area) http://phpti.com/#basic-inheritance is a more useful way of doing this.
&gt; What? This is not a helpful response. I think it was helpful, naming your files correctly is a pretty basic skill ;)
They should be able to support "anything a crazy coked up advertising middle man can think of". Think of widgets as one class per widget. Now if it's a dropdown / select widget and you want the internal options dependent on the date, then just make a base Widget class like so: abstract class Widget { abstract public function populate($params); } Then just have your company specific widget like so: abstract SomeCompanyDropdown extends Widget { public function populate($params) { if ($params['date']-&gt;isTuesdayAndYearDivisibleByFive()) $this-&gt;removeFifthOption(); // other crazy conditions } } That way, everything is done server side, everything is customizable. If you want it saved on the database, just save the name of the widget and load it by a widget factory like WidgetFactory::load($name). If the widget needs javascript or other dependencies, then just have an abstract method getJavascriptCode(). If you need validation, just add a validate($params) method. I think it's a lost cleaner and easier to maintain than having code in the database.
It might've been a solid option a few years ago, but now it just looks archaic.
The approach FuelPHP takes is pretty simple, you have your controller extend Controller_Template, which you can set with a parent view on a per-controller basis.
Keep thinking like that if you want, you're just wrong and stubborn. It's the same as arguing camelcase versus underscore.
Polymorphism.
Looks fine to me. I dunno if I would use $ALL_CAPITAL variable names. Also you're not putting your { and } in the normal PHP locations: http://framework.zend.com/manual/en/coding-standard.coding-style.html http://pear.php.net/manual/en/standards.control.php Personally I prefer the way you've done it, but lots of PHPers don't agree with us ;)
I've only used some $ALL_CAPITALS where it makes sense (such as acronyms - URI, etc). I took a look at the standards, but for me, it just seemed more readable to do it the way I am, though I did adopt a lot of things compared to my old (horrible) coding style :) Thanks :)
Well, then I just fix his mistake and let him know our convention.
Most of the big PHP projects do seem to use [Kernighan and Ritchie indentation](http://en.wikipedia.org/wiki/Indent_style#K.26R_style), but some big ones--[Symfony](http://trac.symfony-project.org/wiki/HowToContributeToSymfony#CodingStandards), for example--use Allman. In general either is acceptable, as long as you don't mix 'em up. I have scientific proof, by the way, that Allman is superior. I also use a Mac and think Vim rules, emacs drools.
In my opinion the point of `Config` being a constructor parameter is for low coupling (dependency management), but apparently not because you still instantiate your own `Config` if none provided. I'd say you have it as a required parameter. Is there really a need for the filtering with `filter_var`? I mean what it actually does is filter for the characters that are not in this set `$-_.+!*'(),{}|\\^~[]`&lt;&gt;#%";/?:@&amp;=`. Basically what the web server would accept as well. There is no point to initialize `$this-&gt;routes` in the constructor if it always will be an array. Simply when defining the property have it to be: protected $routes = array(); And maybe I'd call the `route` method `getRoute` because it doesn't actually route the application. That will be done by the Dispatcher; good to see that there.
All that code in `getURI` can be reduced to: trim(preg_replace( sprintf("~%s~i", $this-&gt;config-&gt;route('path')), strtolower(trim($URI, '/')), 1 )); But this is my obsession with smaller code :)
I would go run your code through PHP_CodeSniffer (with whatever standard you like). No work in the constructor - if you are going to do Config::getInstance(); encourage people to do it outside of your class. See http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/ for more info. Don't do if (!$URI == ''); do if (!empty($URI)) or a === comparison Next: is your uri an object or a string? You keep doing a lot of manipulation on it - is it better suited to use something like Net_URL2 to model this better (extend it) to reduce the amount of repetition? Where's your unit tests &amp; coverage? PHPUnit or similar is your friend. Look at areas where you've got foreach + if + while &amp; foreach nesting -- this code is hard to take in at a glance. You can often flatten this kind of code with bits like if (!$condition) { continue; } 
So... what's this class even supposed to do? There was an article posted a few days ago, with some pretty thought provoking arguments that may apply here: http://objology.blogspot.com/2011/09/one-of-best-bits-of-programming-advice.html
Allman is the future. I hate the obscure rules of K&amp;R, you put the { at the end of the line.... apart from &lt;rule&gt; and occasionally &lt;another arbitrary rule&gt;. Bleugh.
I would recommend reading Why's Poignant Guide to Ruby to understand a lot of the OOP way of thinking. I would then also recommend watching some of the clean code talks on google; and doing a hell of a lot of unit testing. Between the two; you'll end up with a very practical way to leverage OOP in your day to day hacking. Also: contrary to some of the advise here; forget patterns. Write unit tests; understand OOP; find where you get frustrated; *then* look at patterns. If the pattern solves a problem (ie: dependency injection) - hurray. If it doesn't; you'll know enough to ignore it.
Don't want to be that guy, but Symfony uses a bastardized version of Allman, I think: public function write($content, array $metadata = null) { $dir = dirname($this-&gt;file); if (!is_dir($dir)) { if (false === @mkdir($dir, 0777, true)) { throw new \RuntimeException(sprintf('Unable to create the %s directory', $dir)); } } elseif (!is_writable($dir)) { throw new \RuntimeException(sprintf('Unable to write in the %s directory', $dir)); } $tmpFile = tempnam(dirname($this-&gt;file), basename($this-&gt;file)); if (false !== @file_put_contents($tmpFile, $content) &amp;&amp; @rename($tmpFile, $this-&gt;file)) { chmod($this-&gt;file, 0666); } else { throw new \RuntimeException(sprintf('Failed to write cache file "%s".', $this-&gt;file)); } if (null !== $metadata &amp;&amp; true === $this-&gt;debug) { $file = $this-&gt;file.'.meta'; $tmpFile = tempnam(dirname($file), basename($file)); if (false !== @file_put_contents($tmpFile, serialize($metadata)) &amp;&amp; @rename($tmpFile, $file)) { chmod($file, 0666); } } } Where true Allman would be (the more readable): public function write($content, array $metadata = null) { $dir = dirname($this-&gt;file); if (!is_dir($dir)) { if (false === @mkdir($dir, 0777, true)) { throw new \RuntimeException(sprintf('Unable to create the %s directory', $dir)); } } elseif (!is_writable($dir)) { throw new \RuntimeException(sprintf('Unable to write in the %s directory', $dir)); } $tmpFile = tempnam(dirname($this-&gt;file), basename($this-&gt;file)); if (false !== @file_put_contents($tmpFile, $content) &amp;&amp; @rename($tmpFile, $this-&gt;file)) { chmod($this-&gt;file, 0666); } else { throw new \RuntimeException(sprintf('Failed to write cache file "%s".', $this-&gt;file)); } if (null !== $metadata &amp;&amp; true === $this-&gt;debug) { $file = $this-&gt;file . '.meta'; $tmpFile = tempnam(dirname($file), basename($file)); if (false !== @file_put_contents($tmpFile, serialize($metadata)) &amp;&amp; @rename($tmpFile, $file)) { chmod($file, 0666); } } } edit: Oops! I just noticed you linked to Symfony1, not Symfony2: http://symfony.com/doc/2.0/contributing/code/standards.html Symfony2 clearly shows their move away from strict Allman. Why, I have no idea. In the grand scheme of things, though, this is miniscule and very unimportant.
It looks like you've only caps'ed `$URI` which is fine. In the end, syntax isn't really what matters most, but it matters a bit to people wanting to help out with your project. You may want to look at Kohana's coding standards: http://kohanaframework.org/3.2/guide/kohana/conventions Aside from some minor things, I think their conventions are the best around.
 echo "&lt;td&gt;" . date("d-m-Y", strtotime($query['date_due'])) . "&lt;/td&gt;"; http://php.net/manual/en/function.date.php Edit: forgot the strtotime
Here you go mate: [DATE_FORMAT](http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_date-format)
Thanks, but it didn't work :/ I've already tried it, too. Notice: A non well formed numeric value encountered
date('m-d-Y', strtotime($date)); // $date = "2011-09-29"; or list($year, $month, $day) = explode("-", $date); // Use as you see fit
 &lt;?php echo ' &lt;td&gt;' . date('d-m-Y',strtotime($query['date_due'])) . '&lt;/td&gt;'; Edit: [About strtotime](http://php.net/strtotime)
Interesting, but I am missing something. How is the PHP code getting modified?
From that Wiki page: &gt; The position of braces is less important, although people hold passionate beliefs. We have chosen one of several popular styles. Pick a style that suits you, then use it consistently. Seems like sound advice to me.
That worked, wonderful! And I'll give that a read. Thank you :)
allsecretsknown was close but forgot that **date**'s second argument should be a unix timestamp: `echo "&lt;td&gt;" . date("d-m-Y", strtotime($query['date_due'])) . "&lt;/td&gt;";` 
whoops. echo "&lt;td&gt;" . date("d-m-Y", strtotime($query['date_due'])) . "&lt;/td&gt;"; strototime converts the MySQL datetime into a timestamp, which date then converts into a formatted date.
It is a local attack. The attacker has access to one domain on a shared host where code can be executed at will. Using this method the attacker can break the barrier and gain access to another domain on the shared host.
Yep, was operating from memory.
This
Ah, alright that makes sense, thanks.
This works, but be aware that [strtotime](http://php.net/manual/en/function.strtotime.php)() can [return false(or -1 for version &lt;5.1.0)](http://php.net/manual/en/function.strtotime.php#refsect1-function.strtotime-returnvalues) if it can not figure out the date. This could affect the final output. You may want to put this in a function where you can pass through the value, format, and default output for failure. Perhaps something like this: function convertDateOutput( $date, $format, $default='Unknown' ) { $returnValue = $default; $s = strtotime( $date ); if ( ( $s !== false ) &amp;&amp; ( $s !== -1 ) ) { $returnValue = date( $format, $s ); } return $returnValue; } 
Oh great, another list of date related stringythings to look for every time I want to use the function
I like Allman except for if/else statements, simply because if (...) { // ... } else { // ... } looks gross to me. But maybe I need to just get used to it. It is probably easier to read, but it looks ugly (around the `else`).
I usually do the conversion within the MySQL query with: SELECT UNIX_TIMESTAMP(date_due) AS date_due_unixtime FROM table WHERE id = 1; which returns a unix timestamp compatible with `date()` without having to use `strtotime()`. Additionally, I believe it avoids potential timezone issues by doing date storage/converting in a single place, tied specifically to the database server's timezone configuration. Although I think getting that benefit requires using `FROM_UNIXTIME()` when inputting dates into the DB as well. It's been a while since I've worked extensively with dates in this fashion, so feel free to correct me if I'm wrong in this being a better approach.
The attacker would have to already be your shared host neighbor. I doubt an attacker would be able to sign up for hosting and choose the server he wants to be on.
That's not an option. It would be in around 6 months, but... Well, it's not yet.
Still this is good practice if you are on a shared host.
...or just find a security hole in one of the hundreds of applications your neighbors deployed and forgot to update.
If you don't like to read manuals, you may want to consider finding a new hobby.
I hate this much, it's ugly, pointless and increases the number of lines of your code.
Good read. Deals with explicitly with the issue of shared hosting and session files.
I find the non-Allman example much more readable.
Care to offer us suggestions as to what you think is appropriate, then? Nothing is wrong with ".inc.php".
I thing its a think of the past.
Next up: new Object()-&gt;method();
why not just type in the url you want as the path url? could easily do a find replace of `src="/` to `src="http://herp.derp/` in the html or you could do an .htaccess rule for images only
have you tried the &lt;base&gt; tag in the header of your html?
Small issues, but I figured I'd chime in. * don't use preg_replace for straight find/replace where patterns aren't really a requirement. (Router::getURI()). * if you must use preg_replace() in that manner, consider using [preg_quote()](http://php.net/preg_quote) on the parts which should not contain regex. (Router::getURI()). * you use trim() in places where you probably should be using [rtrim()](http://php.net/rtrim). It pays to be specific instead of general. (Router::getURI()). * 'if (!$URI == '')' - terrible condition, refactor using [empty()](http://php.net/empty) or by doing less ambiguous comparison: 'if ($URI !== "")'. (Route::matches():40) * Refactor: Route::matches() lines 40 - 47 to define an empty array first, and then perform the condition. Technically this is an extra operation, but it's cleaner than an if/else. * Don't use "array('')" unless you intend to purposefully create an element for some reason. (Router::matches():46). * Refactor: $patternParts = explode('/', $this-&gt;pattern); $uriParts = explode('/', $URI); you write this code more than once in different methods. Keep your code [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself). (Route). It's a matter of preference, but you get bonus points from me for using Allman. It's what I would choose! 
I tend to avoid using else/elseif constructs. Often there are better ways to structure your code.
Every file you upload with PHP ends in your OS temp directory (on Linux usualy /tmp). Next stop would be to move the file to a place where you want to store it (move_uploaded_file()). Each upload should be given unique name (uniqid()) and saved in the directory. The original name along with all the other data should be saved in the database. Final step would be to display the data from DB in a loop and server a link to download the file (either direct link to the mp3 on your server, or a link to proxy PHP script that would read the file and send header with correct [original] name).
Just store the file path in the table that you are storing the other meta data in. Example columns: id | title | artist | track_number | file_name | file_location You'll store the location when you've verified a successful upload and moved the uploaded file from its temporary location to your desired place of storage.
You could do an htaccess rule that forwards requests from "externaldomain..." to "internaldomain...".
case closed.
ctrl + f . replace. done.
What's the query CI creates?
Try to keep solved threads open, this way if anyone else has the same problem they can just search, rather than asking the same question again.
I meant that he can remove his e-mail from public access. My original question is still here and active, I just didn't want him to get too much spam. :) Thanks though, I agree.
Oh wow, I overlooked that. e000, you might want to get into PM's.
Thank you all for your suggestions! However, I need to apologize for wasting your time. :\ I received bad information from our IT department, and I feel stupid because I should have realized that immediately. Why on earth would the security policy require me to replace the *external domain* with the *internal domain* when the site is being accessed from the public internet? The internal domain is **by definition** inaccessible to the public internet. The only conclusion I can come to is that our IT department doesn't know what the fuck they're talking about, and I should have made the David Silverman rage face at them. But I can say TIL because of you awesome people. Thanks.
here's a popular library to read the mp3 file to get the meta data: http://getid3.sourceforge.net/ they have demos with the code too. 
Thanks, this did work! I didn't know about that tag.
Well, I took a look at the thousands of files in Zend Framework and Doctrine, all of which are PHP files with .... gasp ... a .php extension ;) lol
No idea. In the controller you put the results into an array like this $data['active_rows'] = $this-&gt;data_model-&gt;get_active_jobs(); and then you pass it to the view $this-&gt;load-&gt;view('main_view', $data); you don't get to see what the query to mysql looks like so that does make it harder to pin down exactly what is going on.
camelcase vs. underscore is resolved by convention, THE SAME AS THIS.
Thanks for your suggestions! I don't know much about .htaccess, so thank you for pointing that out to me. I think the RewriteRule would have done the trick.
It makes vertical scanning the squigglies much easier, also I use a lot of blank lines to group lines of code. Even now I tend to do: if ($something) { $i=0; $x=2; } to give it a bit of breathing space.
But that's just a point of view. You have to be flexible in your life ;) Python is such a better language partly because they just get rid of those pointless { and }
Echo $this-&gt;db-&gt;last_query();
I'd recommend md5ing the file to avoid dupes. 
thank you kiv and stuart, that got me at least somewhere! After I got see the query string being passed, i realized my mistake which is wrong sequence of where statements. this query produces one result like intended! $this-&gt;db-&gt;select('j.job_number, j.client, j.project, t.time_in, t.in_work, u.first_name') -&gt;from('jobs j, times t, users u') -&gt;where('j.id = t.job_id') -&gt;where('t.in_work', '1') -&gt;where('u.id', '1'); thanks again fellas!
I'd never heard of this threat before - it should get more attention though, as it is a very real risk. 
You know what I do? A mix of both for if else statements: if ($abcVar === 123) { // Some code } else { // Some more code } Why ? I don't think the else being so small justifies putting the { on the next line. It's readable like that. Also for try xatch statements I do: try { // some code } catch (Exception $e) { // more code } Am I crazy for doing that?
It's hard to do sub-selects in CI's ActiveRecord. I would recommend using joins instead. Unless you just want to use $this-&gt;db-&gt;query();
You took the mouth right out of my words.
Thanks, I don't know why I pushed it out of the else block. That fixed the incorrect password from bring me to the destination page. However upon the correct password being entered, the script it still erroring out to a blank page (login.php). Any thoughts?
 $hash = hash('sha256', $userData['salt'] . hash('sha256', $password) ); Should be $hash = hash('sha256', $userData['salt'] . $password ); You are double encrypting the $_POST[password]. Is that also being done on the signup page when you are creating the entry in the database?
I tried Python for a bit, and I love the language. Going back to PHP killed me a little inside, Python code is so much cleaner and easier to read!
Any examples?
Thanks, will do!
I noticed I was repeating myself a LOT the Router class, especially in the getController() and getRoute() methods - they're almost identical. How would I go about making it more DRY, I couldn't really work it out? Also, my issue with $patternParts = explode('/', $this-&gt;pattern); $uriParts = explode('/', $URI); is that $URI is supplied in the get* functions as opposed to the constructor, so I'm not too sure how to do refactor it and make it DRY? Thanks :) Oh, and I more just used what I thought was most readable, never actually knew much about the different styles (had heard about Zend, PEAR) until I asked for this review :)
Hashing is not encryption.
Not sure. Here is the code I have for registering users. include ("connect.php") ; $password = $_REQUEST['password'] ; $passconfirm = $_REQUEST['passconfirm'] ; if($password == $passconfirm) { if(isset($_POST['post'])){ // This part of the code will connect to the database using the connect.php variables. //creates a 3 character sequence function createSalt() { $string = md5(uniqid(rand(), true)); return substr($string, 0, 3); } $salt = createSalt(); $hash = hash('sha256', $salt . $hash);
So, there are a ton of security problems with that script. For one, imagine if I posted the username joe'; drop table users; select ' For two, we have no idea what's in that database. Your hash involves two passes of SHA 256, which is uncommon. Can you show us the line where that row is populated? The general likely case is that the way it's written doesn't match what it's compared to.
Hm yeah that does sound pretty neat. Having else on it's own line always bugged me, but I think I'm getting used to it. Maybe I'll give your way a go :)
 SELECT DATE_FORMAT(date_due, '%d-%m-%Y') AS date_due FROM table
I know I'm a little late to the party but here is basic (untested) implementation. ------------------------ function getZipDetails( $zipcode ) { $uri = 'http://www.geonames.org/postalCodeLookupJSON?country=USA&amp;postalcode='; return file_get_contents($uri . $zipcode); } 
This is under the registration page. mysql_query("INSERT INTO users (name, username, password, salt) VALUES ('$_POST[name]', '$_POST[username]', '$hash', '$salt')") ; Do you have a suggestion on how to better protect the script from SQL injection?
What do I need to change? Most of this is what I learned out of the book. Mind you not copied out of the book, so what I learned I must have learned incorrectly. Can you point me to it? 
Yes, the whole thing is prone to SQL injection, but mysql_query will not perform multiple queries in a single call, so your example is bogus. 
1. CI needs an app that takes a SQL query and craps out the CI code :) 2. adodb php can take a hand written query and update a record - many frameworks require an activerecord query to autoupdate/insert (?why? adodb php doesn't) 3. it is ridiculous that CI doesn't expose the query before execution, and automatically hook so you can see the before (binding) query and last_result? - there should be a logging in the db_drivers - i've read so many threads where people are blindly trying to figure out their queries or going to sql server's logging facility to find their junk - crazy - tell me how if you know but i think if the result is an insert statement you send to the pdo drivers - why you have to rely on last_query? what if you bound 500 array of updates? I should be able to preview those 500, and then execute them myself in a foreach if choose to. (tell me how if you can). It's just a weakness i've seen in alot of php frameworks. that and the blatant disregard for other sql servers - nothing miffs me more than the whole OOP/ORM reusable/portable code preaching and then they do not provide the portability of database fully - or code apps that use mysql only features. One word: oracle (the company). I was told recently that sql server (and i guess any other sql) that doesn't support limit is lame. by an ORM developer - well that quite shows me they clearly have been living in a mysql bubble and their code is not agnostic to the database drivers - after being insulted i bothered to look at the code and it truly was junk. people need to remember that mysql is not the be-all-end-all. they need to construct better drivers in CI so that functions like show_columns can be agnostic (adodb does this odbc, sql,mysql,postgres,oracle,etc) - it really makes me wonder why adodb's framework (cake? if i'm wrong sorry) isn't more popular. They got pagination from odbc (excel file,dbase) to oracle to sql server to mysql normalized - they got date conversion (any database to php and back). ADODB PHP(python too) needs a refresh and a great free MVC framework and i think CI would be a great fit. What i would love to see is adodb php(python) abstraction quality in a easy to use - portable open minded framework. CI would be a great candidate. Then build a real ORM - i'm sorry but auto_increment is not the holy grail of primary key. And supporting only one primary key with 1_n,n_1,m_n (sp?) is weak-sauce. I'm going to have to do it myself unless others want to help(? PM ME?) - or if you know of a free framework that is enteprise grade pleas share- i'd love to meet others that want to improve the CI project database layer as its a really easy to use framework that is sorely lacking a adodb php(python) database backend and advanced ORM that can handle anything you throw at it. PM me if anyone wants to work on enterprise grade enhancements. p.s. it should not be hard to make queries in activerecord in CI or any framework - its just that people aren't using CI for real serious enterprise grade work and the drivers/orm/tools to help you are missing. TL/DR:ADODB php quality database backend for CI + enteprise grade ORM and SSMS(sql) visualzation tools could easily bump CI to the top of the free frameworks. anyone up for it? 
So I changed it to this: $salt = createSalt(); $hash = hash('sha256', $salt . $password); In the login.php I changed it to this: $hash = hash('sha256', $userData['salt'] . $password); Now the login.php page is showing blank again. 
You should be using mysql_escape_string on any user data that you pass to a query. StoneCypher's example was wrong, but what he was saying is right. Something like "joe' OR 1=1" is one way that people use to bypass login mechanisms. You're less susceptible because you aren't relying on the db to perform your password verification (i.e. SELECT * FROM users WHERE username = '$foo' and password = '$bar'), but you should get in the habit of escaping your data. 
Hey guys, this is my first contribution so far to /r/php. It's a simple class to resize images on the fly. I was inspired by scripts like Smart Image Resizer and Timthumb but wanted something that wasn't coded so procedurally. I'm planning on adding the ability to set your compression quality as well as cropping alignment. I'm not amazing at php so I would appreciate any feedback. 
Yes after I made the changes to adduser.php and login.php I created a new user using the script. Now its not redirecting back to the login page (telling me the password is incorrect) now the script errors out at login.php and fails. If I enter the wrong password it redirects me back to the login page (which is what it should do)
give everyone intodns (the website) - you'd be surprised at multi million dollar companies that can't setup their dns properly. or just build your own dns like entity for the server side - connect to (list of ip's) and cache the data and check for updates. dns goal is to reduce traffic - that might not fit the goal of your project. i coulda swore they had javascript that would load a script, upon failure try something else (locally cached, another host, curl the data in from an ip - mixture of all of the above). 
Ok so I put that at the top of the script. When I press the login button which calls login.php all I see on the page is blank and the url is login.php
Notice: Use of undefined constant localhost - assumed 'localhost' in /var/www/connect.php on line 2 Notice: Use of undefined constant *dbusername*- assumed 'dbusername' in /var/www/connect.php on line 3 Notice: Use of undefined constant *password* - assumed 'password' in /var/www/connect.php on line 4 Fatal error: Call to undefined function validateUser() in /var/www/login.php on line 32 
[Imagick](http://www.php.net/manual/en/function.imagick-resizeimage.php) is seriously better than GD. GD doesn't handle transparent png's and the syntax is pretty heavy compared to Imagick. Try this: $img = new Imagick('image.png'); $img-&gt;resizeImage($width, $height, Imagick::FILTER_LANCZOS, 1); $img-&gt;writeImage('image2.png'); 
That's good to know, thanks for the tip!
&gt; but mysql_query will not perform multiple queries in a single call Well, maybe I should have given the difficult for novices to understand version that's a single query, instead of the easy to understand version that gets people's attention. Oh, wait, no, I shouldn't. But actually, this is quite easy to do, if you know even rudimentary SQL. Let's see if you'll ask politely.
Parameter binding.
No - ignoring you is much easier.
I gave an easy to understand example instead of a strictly correct example. Usually that's the better way to go. foo\u0027 OR (DROP TABLE users) -- \u0027 AND will work on most servers in default configurations, for example. If that doesn't work, \u02bc usually will. There are lots and lots of ways to do this, and you don't need to know which ones work on which servers ahead of time. Here's a basic starting point. http://ha.ckers.org/sqlinjection/ The simple fact is attempting to use string encoding for protection is radically more complicated and difficult than most people expect, is comparatively very slow when done right because of the insane amount of encoding and decoding involved, requires extensive testing for trust, *****and is completely unnecessary in a world with parameter binding*****.
I kind of like the hashing method that you used in your login script (multiple passes). The problem is that you werent hashing the password string before creating the final hash using the salt in the registration action. $salt = createSalt(); $hash = hash('sha256', ($salt . hash('sha256', $password) ) ); or in multiple steps $salt = createSalt(); $hash = hash('sha256', $password); $hash = hash('sha256', ($salt . $hash) ); That should make everything line up with your login action. Another approach that you could take would be to let mysql handle all of the hashing for you. Taking this approach will position you to never have to handle the salt after you have generated it. Something like this perhaps: INSERT INTO users (username, password, salt) VALUES ('myusename', SHA2( CONCAT( '1J#', SHA2('mypassword', 256 ) ) , 256 ), '1J#'); and when retrieving it: SELECT id FROM user WHERE username = 'myusername' AND password = SHA2( CONCAT( salt, SHA2('mypassword', 256 ) ) , 256 ); If you get a record back you know that your username and password combination is valid for the row that was returned. This would simplify the logic that php is currently performing by checking the number of rows that were returned and then comparing the set of generated hashes. You would never have to retrieve the salt or password hash from your table. Im not going to comment on whether or not php or mysql is faster at generating and comparing hashes. Maybe another redditor has a definitive answer? Or a reason to not use mysql in this way? I just wanted to point out a different approach since you are learning. I did something similar to the second approach involving md5 hashes years ago, but I never ran any benchmarks to compare the the two methods. I just wanted a way that I could set the salt and hash and never have to retrieve it with php.
Inside the else script. You can see it in my original post. According to the book that sets the Session for the user. I am assuming I am missing this inside the php file??? function validateUser() { session_regenerate_id (); //this is a security measure $_SESSION['valid'] = 1; $_SESSION['userid'] = $userid; }
That's to avoid the ambiguous boundary problem, and is correct. Your code is not. 
Ah ok! I am getting the hang of this! It would help to define a function before calling it LOL! I wish you all the real life karma in the world!
I've been burned by this sort of processing before. After resizing, I cached using Amazon S3. Unfortunately, there was an issue with S3 and the resized image did not correctly cache, so the image was resized EVERY page load. We were serving a few thousand clients within the hour, so naturally, things came crashing down. I urge you to not rely fully on the cache if you expect heavy traffic. A simple failsafe is to store a "last resized time" for the image, and compare it to the cache expiry. Don't resize the image if the cache is still good, instead show a 404 or some other error for that image.
Fair enough.
Have fun, then. Hope you don't write web apps for a living. `:)`
Thank for the feedback and I totally get what you're saying. Have you seen the code? Is the way I am setting the headers not sufficient? I'm trying to think how I'd do it differently. I definitely do not want to be responsible for crashing servers by exhausting memory.
It took me a minute to get the humor. One awesome feature would be protecting the admin with javascript eg: if (document.getElementById('password').value == "superSecret") { window.location = "/super_secret_admin"; } 
/r/PHPFramework helps you save server resources by offloading the costly process of building SQL strings to the client, with the power of javascript!
Good point. Server-side application logic is *soooo* web 2.0
Oh yes! BBCode. Love that shit. Who would've though it could be used for server side templating? 
I think a good templating system should make use of already-present PHP features - we should turn register_globals on, to allow users to insert custom values into the view code. It's a much more dynamic approach than storing and retrieving input. We'll definitely also need some singletons for something - *anyone know what? 
[PICK](http://en.wikipedia.org/wiki/Pick_operating_system) database/os is all the rage these days. It's convenient to connect to since it really only requires a telnet client. Hell, you could connect to it with javascript. We should just skip the server and use jquery to connect to the database. PICK returns xml, so it's perfect doing CMS with xslt. PICK just got indexes and joins around 1990. It's really nice, and it was founded by a guy named Dick Pick.
Use mysql_* functions as default. They have been used for years and are proven to work, why try something new that is probably much worse?
I'd vote using Firebird because of the huge amount of community support available.
The issue occurs if the cached file isn't actually written to disk. This could happen with a misconfigured remote hosting solution. Your code is fine as-is, but I replied to show a potential for problems. 
Totally makes sense. I'll look at generating the resized image, saving them to disc and caching those. Right now I am not writing to disc.
I vote for a model system that uses plain old php objects. Here would be a sample model: class User { public static function find( $id ) { $result = mysql_query("select * from users where id = {$id}"); return mysql_fetch_array($result); } public static function delete( $id ) { mysql_query("delete from users where id = $id"); return true; } } This has significant benefits as class hierarchies are confusing, plus low level mysql functions are super fast, which makes our framework easy to learn and high performance.
* It is agreed upon that documentation guidelines will be agreed upon on a later date. * The coding standards are documented on a public Wiki page which gets changed and/or deleted on a regular basis. * Secondary datastore are DataMatrix encoded 2D barcodes hosted on Imgur. * All necessary data transformations are made through Yahoo! Pipes first as much as possible. * Commercial support is available!\* \*\* \**via premium fax number* \*\**during Indian business hours*
some context might be needed for some users :)
Yes please. Who is he?
It had to be wordpress or drupal, [it was drupal](http://buytaert.net/).
It'll have all of the functions in one func.php file.
It should help you save time by forcing you to write your queries right in your views.
indeed. he's a rockstar, and still commits code like crazy while running Acquia which is a pretty big company these days. The Redhat of Drupal.
*Does it support caching?* Yes, you can use it to make money.
Password? Passwords are for people who don't trust the basic goodness of the community. If we start the project, and we believe in it strongly enough, people will come, Ray. People will come. (Insert appropriate morale-building speech by James Earl Ra ... er, Carter ... er, Jones, here).
This thread is like reading a vogon poem
Drupal: The linux of CMS's.
You mean PHP/Drupal, right?
Upvote for declaring a class, but then making all its methods static, thereby implementing the incredibly prestigious Singleton design pattern without even having to write a "getInstance" method. Makes it seem way more high performance. And who cares if nobody else uses static methods like this. What does the entire rest of the industry know?
In the early 00's, in books with names like "Professional PHP Patterns", it was trendy to make up one's own file extensions. The trend has stuck with a large subset of the PHP community, and we should not exclude these people from contributing. 1. All files containing a class declaration have names ending in ".class" 2. All files containing template code have names ending in ".tpl" 3. All files containing functions have names ending in ".inc"
It auto replaces every double quotation mark with single one, thus optimizing the performance.
All I can say is after discovering timthumb I now use it in every project. No more resizing after upload, its fucking great. I'll check yours out for sure. Ideally it can easily become a CI library or spark.
We should make it totally portable and have like txt files for users and passwords. users.txt =&gt; passwords.txt put it in www directory so we can recover user passwords easillyt.
It should offload EVERYTHING to Javascript. That way we can boast that the PHP part of the framework is the smallest ever at 0kb uncompressed. 
Okay... my brain hurts. Time to go to bed to prevent it from exploding... LOL
&gt; We'll definitely also need some singletons for something - any know what? Singletons and multitons. For. Everything. Seriously. We'll make absolutely every object available to every other object at every single moment of execution. That way the code will be future proof against needing to be modified every time a class needs access to another one. That kind of tedious design work and refactoring is for people who haven't read the summary of the wikipedia article on design patterns yet.
if( some_predicate) return 'some_value'; return 'some_other_value'; is an easy example.
Use both deprecated and brand new features of newest PHP version. Developers will gain useful insight of structure and conventions of your framework when they have to fix all the errors before using it.
The templating system should be XML based, simply replace the content of all nodes with an id to the coresponding variable $hello = "Hello world"; &lt;main&gt;&lt;title id='hello' /&gt;&lt;/main&gt; becomes &lt;main&gt;&lt;title id='hello'&gt;Hello world&lt;/title&gt;&lt;/main&gt; Now, since XML doesnt display well in the browser, we use XSLT documents to turn that xml into proper HTML documents... that way we havent comitted ourselves to an HTML version, FUTURE PROOF!
I present to you, our database abstraction: https://gist.github.com/751392
that's actually quite a neat bit of code, the example of usage is beyond amazing :)
This made me lol
Could we generate the SQL by getting the values form submitted forms, use these values and a dump of the DB schema, then post a question to StackOverflow. E.g. "A customer has asked for a report on sales, this is my schema {$scema} and the filter values {$_POST}" When the question has been answered and closed, we CURL the best answer and run the query.
This! Or perhaps mssql...
It persists all session data to the GET string to get around pesky cookie issues, what's more, it does so in plain-text to make debugging easier.
We should definitely also re-implement the HTTP stack in sockets. Screw mature webservers!
GNU/PHP/Drupal
It was a proof of concept to show a friend how magic methods can add additional functionality to getters and setters.... I'd rather NOT see this in production though.
Are there any advantages to this over an if-else?
It's a 2 line piece of code, any advantages I may claim would be transitory and ridiculously pedantic. You asked for an example of not using else/elseif constructs, I provided one.
Burns in Smarty templating. Don't like Smarty? GTFO. LOL
Litters a root directory for your app full of application folders instead of dropping them into a tidy application folder. Never mind that you already have an "images" folder in the root used for something else!
Requires the usage of an ORM. Want to use PDO directly with some caching and a connection pool? Want to go with SQL statements because you're actually smart enough to think in SQL? Want to not have to fight with ORM bugs and deficiencies? No way. It's ORM or GTFO. In fact, let's make it Doctrine. After all, man, an ORM saves you *time*. 
Makes the app config file a long XML format instead of a key/value table or ordinary PHP array.
Requires Apache rewrite rules -- it's not even an option. Don't have those? GTFO!
Instead of camelBack(), uses BumpyCase(), or underscore_Case().
Uses no variable naming convention, not even a simple one. So when you see a variable $user, you have no idea whether it's a string, an object, an array, a number, or whatever, unless you spend like 5 minutes trying to figure out the rest of someone's code so that you recognize the context. Or worse -- uses really long descriptive variable names ($SeasonFootballGameWinningsFloat) because, well, we all like work slowdowns.
*actually likes the former style better* &gt;_&lt;
Hahahahahahaha
Doesn't let you use dashes in the URLs. Forces you to have to use underscores instead.
Could even run completely off that new server built into php 5.4... I'm sure it'll be fine for production use
Requires 7 full days of learning curve before you can make anything decent.
Includes scaffolding you can't easily reformat with CSS. It's our way or GTFO!
I actually used XML manipulation for views in a home-cooked python web app once... *never again*.
Lol. In fact a decent ORM should let you drop to PDO and prepared statements.
Requires that you do everything with factory objects first.
Is written by warring programmers who use completely different conventions and who curse each other out in commented code. Oh wait, that's Microsoft.
Requires that you constantly use your mouse to traverse a folder tree for the project rather than simply expand the M, V, and C folders (whatever they are renamed to). The framework has a wireless mouse life of about 2 days before you need new batteries.
Doesn't work in most shared hosting Linux environments. Requires stuff be dropped in /usr/lib/php on the server.
Tries to emulate RAILS.
You're comment made me lol, then sigh: &gt; All routing is done in a giant switch statement in index.php Seen it in production &gt; All data is stored as text in a new format .csv in a MySQL database? PHP $var.toString() saved in a blob? &gt; For security reasons, all database connections are closed after each and every query. Seen it, but not for security reasons, just due to programmer stupidity &gt; All non-routing code is in a file functions.php I've seen 'functions' stored in separate files, just huge lumps of code with little structure. The way you 'called' these functions was to set up the global variables, then 'include' the file. Often I found code that looked like: $name = $_POST['name']; $customer_name = $name; $customerName = $customer_name; include 'disp_cust.php'; so the include file used different variable names for name, all of which had to be set. I have no idea how they got into that pickle. &gt; No OOP They had named their include files like disp_cust.php, disp_user.php, add_user.php, del_user.php... which meant they had data and 'functions' that only work on that data. So they'd re-invented their own OO with some very strange syntax :( I gave a little talk on technical debit, and there was a lot of forehead slapping and 'doh' from management.
I could do this for myself: Studies a double degree of Business &amp; International Studies. Gets job as PHP programmer.
Can't be used for command-line applications. Or, can't be used at command-line without a lot of serious effort, pouring through docs. It's web only.
Fair enough, I only asked because you said it was a better way to structure my code, and I was wondering why.
It absolutely must support the [SQL Sentences Pattern](http://thedailywtf.com/Articles/SQL-Sentences.aspx)!
I could see this *caching on*... 
I've been using this for a long time, you can look at it for the reference (http://phpthumb.gxdlabs.com)
ImAtEeNaGeRcAsE(), 1337c453() hmm, perhaps I shouldn't make fun of the first one...
I'd never have thought PHP code could be hilarious.
All pages would be one large picture including text so it could be more easily posted to r/pics.
Use goto instead of functions. Hell, use goto instead of *everything*.
It is just modifying the session files since they are shared.
no I didn't.
`epiclogin` is talking out of his or her ass. This indent style is either [Allman](https://secure.wikimedia.org/wikipedia/en/wiki/Brace_style#Allman_style) or [GNU](https://secure.wikimedia.org/wikipedia/en/wiki/Brace_style#K.26R_style) (probably Allman, but we'd need to see how nested braces are handled to determine which). Both styles have been used in large, respected, *mature* projects (ie, not just hipsters and young upstarts) - Allman in ANSI/ISO C and Java and MSDN, and obviously GNU in GNU. Frankly, no style is "worst" (not even K&amp;R, which is what `epiclogin` is pushing) - indent style shouldn't be a consideration for this "worst framework".
&gt;I tend to avoid using else/elseif constructs. Often there are better ways to structure your code. ~~Did I misunderstand?~~ EDIT: Maybe I should look at usernames next time :P
You can also do the apache sandwich thing with php_value auto_prepend_file "/full/path/to/a/prepend-file.php" php_value auto_append_file "/full/path/to/a/append-file.php" in .htaccess or (IIRC) php.ini. Not always the best solution (certainly not for this particular question) but a useful trick to use in some situations.
&gt; Imagick is seriously better than GD. Very true, however &gt; GD doesn't handle transparent png's Incorrect, though you have to explicitly handle transparency by doing something like imagealphablending($imageResource, false); imagesavealpha($imageResource, true); before calling imagepng().
PHPThumb is fantastic, hands down the best library I've found out there. They're [in need of a maintainer](https://github.com/masterexploder/PHPThumb) too.
You would be amazed how many times I've encountered classes that look like this, all written by the same person, who happens to have the word "Senior" in his/her job title.
Dear Gentleman, I second this motion!
I think you may just win this thead... Upvote for you!
Let's put all the code inside the index.php
That! And having it all in the public directory is also a great idea...
Plus one for giant switch statements! They are surprisingly maintainable, once you decode what the 'o', 'i', 'e', 'ca', 'cr', 'sm', etc mean, and the files they include aren't helpful either; what the hell is ufue.php
Right. Anyone not running their own VPS simply isn't doing it right.
Nah, its (GNU/)(L|W)(A|I)(M|P)P/Drupal
I haven't run your code yet, but I do have a few comments for you. * Why the underscore prefix on the members? People used to use that in PHP4 when we didn't have member visibility to try and denote a "protected" member. Now we have member visibility, I don't see the need. * Seemingly magic numbers like "2592000" make the code hard to read. I suggest using class constants to store such values. e.g self::THIRTY_DAYS in this example. * Your class seems to do too much (see [single responsibility principle](http://en.wikipedia.org/wiki/Single_responsibility_principle)). For example: it assumes it can just write HTTP headers directly, exit the process itself etc. You're limiting the use cases for your class; if someone wanted to use your class in a long-running CLI script for example, they would have to modify it heavily. * This is slightly related to the last point. You read directly from $\_SERVER and $\_GET (via filter_input). That is outside of your class' responsibility. If there is something about the environment that it *really* needs to know then you should consider making it a constructor argument. At the moment your class "hides" its dependencies. How is a user supposed to know that $\_GET['height'] needs to be available before creating an instance of your class without reading your code? * That leads nicely on to: you're doing a lot of "work" in the constructor. It would be impossible for a user to inject (i.e. pass in as a constructor or method argument) an instance of your class into another object in order to give that object the ability to resize images. Constructors shouldn't really do much more than accept arguments (possibly validating them) and assign the values to members for use in other methods. There are other minor niggles, but that should get you headed in the right direction. 
Wow thank you so much, this is exactly the kind of feedback I was looking for and needed. Thank you so much for the help. The reason why I use underscores is out of habit a lot of frameworks I've used do it, I thought it was a nice convention people followed. I'm sure I'm wrong, like I said I'm still learning a lot about php/programming that's why I respect your feedback.
I had never heard of php thumb, thank you for the reference!
You are most welcome, sir. If you follow some of my advice you will notice that your class alone is no-longer enough to handle the examples in your README. This is not a bad thing. Just add an example file that *uses* your class to produce the results stated in your README. I may fork your code and make some of my suggested changes if I get a chance.
&gt; no style is "worst" Damn right. Also, the OP style isn't K&amp;R, because K&amp;R-style code puts braces for function declarations on their own line, like this: function increment_integer($integer) { if ($integer == 1) { return 2; } elseif ($integer == 2) { return 3; } else { throw new InvalidArgumentException("Unsupported integer: $integer"); } } Edit: I would like to propose this function for inclusion in our framework's func.inc file.
Clearly it should be func.inc as to correctly express that this file is due to be "included" in another PHP file.
For me it is more readable with syntax highlight applied :)
I like LiveJournal.
Underscores on private member variables are requirements of some common coding standards still, including PEAR, so PHP_CodeSniffer errors without them on default settings. So if you have to conform to that standard, that's a reason to do it, but other than that, there really isn't any, especially if you're encapsulating properly.
&gt; For security reasons, all database connections are closed after each and every query. Ha! Love this. My old work actually implemented this "feature" after I left in order to make the code more scalable, since persistent database connections just take up valuable threads, of course... :\
I disagree. I think "None" would be an excellent candidate for an indentation style for this project.
Zero indentation. More scalable. Also, while we're at it, why not put everything on one line in the source? Saves time later on because then you won't have to run the minifier before committing.
For performance reasons, we don't ever use functions (or Classes)! We then just include the code that needs to be executed. Presto!
Written in PHP3 to maintain compatibility, and runs on IIS on Windows 98 as a server.
Do I know you?
Nothing is extendable, you have to edit the core files.
Seconded. With passwords unencrypted it'll be easier to send people their passwords in case they forget them.
You all are forgetting the most important part: the logo. I think it should be this: http://i.imgur.com/C8s3S.png
How will we take care of random numbers? I support the XKCD algorithm, return 4; Coding styles, all variables should be $a, $b, $c, ... Class variables should be capital, $A, $B, $C as well as constants but neither are required. Also, if a variable isn't global than it isn't worth crap and might as well not even exist. Eval works wonders for assigning variables and should be used over variable variables. Also great for making method calls. $a = array('param1','param2','param3'); eval( 'Some_FunctionCall("'. implode('","',$a). "');' ); MVC shouldn't really be a concern, as others say our routing will be done via switch and pages can just be included based on .tpl files. Edit: In serious, I used to wince every time I'd see a co-worker write something like this: foreach($sets as $key =&gt; $value) eval('$Object-&gt;'.$key' = "'.$value.'"');
I just did a modification for a friend to an oscommerce site, and this is exactly what the code looked like.
same here :)
Then it should be a fork of OSCommerce. 
I used to work on an enterprise-level application where the core was 12 classes deep and display was done with xslt tranformations with stylesheets 5 and 6 layers deep. Business rules were kinda liberally splattered throughout. If I had to look at it today, I'd kill myself.
Funny, it's reading like it's about half the places I've worked.
If so, wget implementation should be available as Cobol source only.
$pmstuvwxyzHungarianNotationBitchez.
[](/)
I'd like to punch whoever came up with that nonsense.
The only other guy who does any dev related work for our advertisers' sites does this for every project. He will not conform to a framework, haha. I hate his procedural garbage func.php files. My job consists of quite a bit of adapting this stuff to Symfony 1.4. It gets old.
It makes sense, right? Half the quotes are gone, so the resulting output is much smaller!
I personally like surPrisecase, where all characters are lowercase except for one. Which one? That's the surprise.
Fuck oscommerce.
What makes Drupal better than Wordpress?
happy cake day, no-cake. lol
I really want to make this happen, now. To vim!
I didn't say that I dislike reading them, it's just with string/date formatting I have to refer back to them again and again and again and again because I can never commit all the little subtleties to memory. Like coming back from the store and remembering you've forgotten the milk - you don't hate going to the store, but man. You always forget that milk.
It's not, nor is it as popular or stable as Wordpress.
They've turned the oscommerce codebase into a sculpture so people can visit it now. [Here is a pic.](http://images1.makefive.com/images/entertainment/art/boldest-works-of-art-in-recent-history/paul-mccarthy-shit-pile-7.jpg)
I prefer it, though I only have a limited knowledge of WP. Drupal seems more robust (more functionality) and gives you more control over the system.
Fuck that, you know you want to go straight to the point; use XML flat-files or INI files for the database data and store them in root/database_files/. Much more convenient!
I love exposing my source to the public! Crowdsourcing is the best way to enhance a product.
he didnt say he thought it was funny, he said he did the same
No prepared statements. Just sticks stuff verbatim in SQL. SQL injection? What's that?
We also need to make sure that we sometimes store php functions and snippets of code in the database. It is of course also important to not store every function in the database, because doing so would cause overheads. Instead, we should arbitrarily choose random functions and insert them into the database, while leaving others inside functions.php because variety is the spice of life, after all. We should write functions in functions.php that call the functions that are inside the database. This is a good example of using our brains to do something! Also, it should be a policy to make sure all html is echoed out of php at all times, and there should naturally be no separation of business logic from content, because why would you want to do a thing like that anyway?
Who would get a degree in php and expect to be taken seriously lol. For that matter though who gets a phd in a single language anyway?
You mean: GNU/(L|W|A)/(A|I|E|C)/(M|P|O)/P/Drupal
I'm stuck on Symfony 1.4/Doctrine 1.2 until I've worked with tech to prepare our production servers for Symfony 2 and written transition documentation for the rest of my team. I imagine I will be rewriting this code quite a bit once the switch happens, as counter productive as it sounds. I am expected to have a working sample of this code by Tuesday, and I imagine we'll be on Sf 2 in mid November. I've been complaining to myself about this since I received the task, haha. This isn't how I'd like to do it.
We can add it with my super cool new function function is_NumberEqual2Three($integer) { if($integer == 3) { return 1; } else { return -1; } } Test example: while(is_NumberEqual2Three($integer) != -1) { $integer = increment_integer($integer); } Works well with the core increment_integer function to make sure numbers are kept within the right range.
Nothing at all. Drupal is a trainwreck of a framework/CMS. I'd rather eat a bullet than use it.
Me three.
Please don't turn /r/php in to a reddit that is full of pointless garbage posts.
All SQL queries are passed as GET parameters to the page based upon the link the user clicks.
I used lynda.com to learn php and ruby on rails. I find that the author, Kevin Skoglund, is good particularly if your a first time programmer. He helped me grasp some basic concepts I had a hard time on my own. You will still find that you will have a lot more to learn even if you do the beyond the basics training but it was still a great start for me.
I work at a PHP shop and they are always saying that it is difficult to find PHP devs. I continually tell the hiring people that they can look for Java guys and they'd be able to step right in. I don't think they hear me though
Did you have issues with bad code? What I mean is the code that he has you type correct? I bought a PHP book and dropped it halfway through because of all the errors in the book. They had fixes online, but for someone who is just learning to program it was frustrating.
I'm melting!!! I'm melllllting!!!!!
None that I can think of. His process doesn't leave much room for error. He really pampers you by explaining everything in detail so you wont get lost or make mistakes but sometimes it feels like overkill. 
I'm thinking we won't need version control for this framework, because we'll get it RIGHT FIRST TIME.
Its surprising to find that you guys are not downvoted for asking someone to use tizag and W3School... guess /r/php has learned to calm down... anyways I used tizag and W3School when I first started too.. then I started to look up better ways to improve quality and security of the code... and I am glad I did it this way..
As far as storing the filename and location in the database goes, I'd suggest storing only the unique filename you gave it in your database. This way, you can add some logic to WHERE the file resides. For example: /songs/[username]/[filename] This way you can change the filesystem without worrying about breaking all your paths.
it's more robust. Drupal's modules are usually product of collective contribution, and seems a little more organized than the average wordpress plugin. Also, you don't have to update its core every other day.
I don't know why you're getting downvoted, Buytaert is a JAVA developer but Drupal wouldn't have achieved critical mass if it wasn't written in PHP (because...well, that was the target audience I guess).
that looks like some great goddamn data collection and graphing. where can i get whatever you used to do that?
Just to write how a class could be... you need to fill the methods with your code :) class ImageResize // Load our file public function __construct($fromfile) {} // What can we do public function scale($scaleUnits) {} public function resizeToHeight($height, $keepAspect = true) {} public function resizeToWidth($width, $keepAspect = true) {} public function resizeToBiggestSide($px, $keepAspect = true) {} public function resize($width, $height) {} // How can we get the result public function save($destfile) {} public function directOutput() {} public function getObject() {} } These methods should be mandatory in any image resize class Ofcourse all resize methods should just calculate the the pixels and use the resize method - The scale is just .5 or something for 50%. You could also put all these into a abstract class and then make a class for both GD and Imagick and then just set the resize method as an abstract method. Something like this abstract class ImageResize { public function scale($scaleUnits) {} public function resizeToHeight($height, $keepAspect = true) { // Calculate our width and height $this-&gt;resize($width, $height); } public function resizeToWidth($width, $keepAspect = true) { // Calculate our width and height $this-&gt;resize($width, $height); } public function resizeToBiggestSide($px, $keepAspect = true) { // Calculate our width and height $this-&gt;resize($width, $height); } abstract public function resize($width, $height); } class Imagick extends ImageResize { public function resize($width, $height) { // Do our resizing } }
Wait... something being funny is the main reason to upvote? On /r/PHP?
Having used Drupal for a few months now, I can only agree :(
you forgot /dbconfig.txt
It's google docs. Make charts from data withing a google spreadsheet. 
If you are saying that you are worth more than you are being paid why do you not seek employment that compensates you fairly? And if you cannot do so, what makes you think you are being compensated unfairly?
Totally agree. My issue is that when I was hired to do my job it's related to managing a network of websites. My duties and requirements are increasing with each signup, but my compensation is not at all. I'm really not greedy, and I totally understand the supply-and-demand economics at play here. My situation is complicated with wanting to stay in the 50 mile area due to some time-restricted family needs.
He is correct. I'm not a "spreadsheet guy" per se, I actually will sometimes quickly write a script instead, but I tried to do this in Open Office, and it was producing junk. I copy pasta'd the data into Google Docs as a last ditch effort to not have to learn anything about Open Office's crap factor or have to wait for Microsoft Office to download.
I learned on Lynda.com and highly recommend it. I always do when people ask on here. It was 3 years ago, and feel like (in hindsight) it was a good introduction. You'll steer yourself toward more advanced concepts as you practice and gain experience with increasingly complicated projects.
Funny? In this subreddit? Get ouuuuuttaaa here.
Have you taken on any new responsibilities? Are you any more productive? If not, why would they pay you more to do exactly the same job?
Put out the feelers. Use those numbers to sell yourself. The general job market is terrible, but the market for talented programmers is not. If you're anywhere near an urban area there's probably someone looking for you.
Do you mean they no longer have jobs and had to start working at starbucks or they do their freelancing while sipping some cup of Joe?
To cover the rise in the cost of living. If your wage doesn't go up with it then it is clear that your employer doesn't really respect what you do.
after some reading - doctrine seems really good - but man its hardcore - if someone could simplify it - that would be great. Doctrine folks have a much better database driver than CI - more adodb-like and ORM to boot. But man its complex - i'll have to study it. It uses a normalized sql-like language so you can build complex queries that work across all platforms - data conversion - looks great. I wonder what other options exist? Meanwhile i'll continue to port some apps that are mysql'ish to work with sql server. anyone interested in SQL server (azure,2008 R2) and CI i'm working on emulating alot of mysql. Did up a really great table structure system that i will then port so you can have javascript &lt;-&gt; PHP &lt;-&gt; sql server type conversion - pagination and strange mysql behaviour (show_columns++) so porting some apps will be easier. 
I think it's good to work towards being an expert in something, while being familiar enough with some other things to at least get around.
whitehouse.gov theonion.com observer.com ubuntu.com grammys.com I can go on and on. Drupal and Wordpress are different. Drupal can do anything Wordpress can do, but the reverse is not true. Granted, it has a much higher learning curve, and therefore Wordpress makes a lot more sense for simpler blog/content sites.
W3Schools' [correctness has been publicly called into question](http://w3fools.com/). IMHO their biggest problem is that they don't correct outdated information. W3Schools' PHP tutorial encourages some unsafe practices, most noticeably using PHP's `mysql` extension instead of `mysqli` or PDO and prepared statements--especially since they don't explain SQL injection prevention in their PHP tutorial. Both tizag and W3Schools don't teach object-oriented programming in PHP. However you feel about procedural vs. OO design, a good PHP programmer needs to be fluent in both.
You rule, thank you Sir for the examples.
Yeah I'm kind of getting that same perspective. I do mostly freelance work and occasionally will go for an interview if the price is right. I've noticed that in both worlds you need to be an expert in one of the fields I mentioned above. With freelancing you never know what CMS/Framework the former developer used and if the code is convoluted you're screwed if you're not experienced enough to work your way around it and the same goes with full-time work. 
If you have working knowledge of those frameworks and content management systems, you should be employable enough to continue improving with paying jobs. Shit, I was making decent cash with expression engine development before I really knew what a php was back in 2008-2009. You just need to find some opportunities, work hard, learn hard, and just do your best. No need to go broke. I believe being well rounded with some particularly well developed strengths is a good idea. Mastering one thing, while nice (essential even) if you have the passion, seems risky as it's all of the eggs in one basket. In some cases that's not so crazy, but on the web where things change so rapidly... It would make me a little nervous.
Yeah it seems a bit risky in the sphere of web development to specialize in one thing but also deemed necessary to excel. Seems kind of like a catch-22 - CF and Java developer. Cold Fusion faded out (MySpace was developed in CF and now in .NET) and Java developers have been around since the mid 90's and are in more demand than any other language and even more now with Android. Java specialist aren't going anywhere for a long time.
Because his workload has increased 50%.
In my experience, the biggest advantages of `mysqli` (in order of importance to me) are: 1) **prepared statements** - prepared statements are easier to secure against SQL injection attacks (parameters are escaped automatically) and can be much more efficient when executed in a loop 2) **transactions** - transactions are necessary to avoid concurrency problems (two processes changing the database simultaneously in ways that screw each other up) and recover from errors 3) **still being developed** - as new features appear in MySQL they are supported by `mysqli`; `mysql` is only in maintenance development now 4) **object oriented interface** - it's easier to test code that uses `mysqli` by mocking, and it feels like a better fit with the OO code I write It also supposedly performs better than the `mysql` extension, but I haven't noticed a difference. I use PDO myself, because some of our code runs on Postgres and it's easier to only keep one API in my brain at a time.
Thanks! I appreciate your opinion. I plan on purchasing a plan tomorrow and starting it.
do a google search for mod_rewrite, that should get you started.
Something to note is that you can also use nginx's try_files for blazing fast serving of your thumbnails. I've also used this to automatically minify CSS and JS: http://www.reddit.com/r/webdev/comments/kx9tt/automatic_css_js_minification_with_nginx/
all-rounder but you need to specialize in something. you need to be an all-rounder because the industry is constantly changing, you need to know what's out there in order to choose the right tools but even so it's best if you're also competent with the most popular ones so you don't have learning curve for common projects. being able to work in many areas gives you more opportunities and also more value in bigger companies since you can be useful in several places.
One of my favorite lyrics of all time, that seems relevant to your question. It is probably not the specific answer you're looking for but i'll share it with you anyway: "Four elements of hip-hop hardcore, i'd rather be good at one than suck at all four" -Top Ramen
It's true that inflation went up more than my raise
Each additional client really does add to my workload. I automate as much as I can, but as we all know... shit happens.
If you work in the php world, it's important to understand most of the popular frameworks. I often switch between Magento and ZF. My experience wth Drupal is pretty extensive at this point as well. To be quick, I'd say I'm keeping myself employed.
I also wanted to make the point about how if you feel your upward mobility isn't great that a lateral move to another company may really be what you need to be looking for. Or try going the extra mile and seeing if the effort is rewarded with a more significant pay increase. I hear you about "unfair" compensation. But working for someone else (or yourself) is usually the only thing you can do there. Companies like to give raises to keep someone and if you recently agreed to a certain compensation they are unlikely to think you require much more than that to stay. What I did was to work double time. I worked my 8 hours for the man and then put in another 8 for me every day for years. I was eventually able to quit working for others and have started a small company that is growing even during this recession. As long as you work for others you aren't likely going to be compensated to your full potential.
I love the class name.
I disagree... If you have a good understanding of the "basics" you should and must be able to do anything. Frameworks are just tools.
thank you
You say frameworks, yet the only framework-like in there is ZF. I'd say your response rather promotes a familiarity with the most "enterprisy" content management solutions.
Can you explain more about what you are trying to accomplish? Do you want to have users generate their own forms? Where would you store the validators? If I'd trully understand the problem, maybe I'd be able to suggest you something.
ah. so it's not automatic? you input it all manually? consider my interest officially lost. good day to you, sir.
Removed as this has nothing to do with PHP. No mention of PHP in the image and no mention of it in any of the comments. Please check out the sidebar for what's acceptable. &gt; News that relates to PHP, along with tutorials
Removed, I don't approve of image macros being used in this sub-reddit. Keep it professional please.
Modern and `mysql_*` functions don't really work together in the same sentence. The Javascript isn't bad though.
In my experience, it's best to have a specialty, but not have a too narrow focus. There's a lot going into a web site — programming, design, usability, marketing, economy, etc. Understanding a number of those fields makes it easier to work with other people. I've met more than one pure programmer who was very difficult to work with because he didn't understand som detail of UI design or marketing decision that affected his work. I've met even more designer and marketing types who are technical idiots and have no appreciation of the technical side of the web.
Personally, I make it general policy to be able to skin most CMSs but be able to develop modules for a couple; Drupal, Wordpress and ModX currently. That's seen me well, but to put it in context I charge midlevel rates in a town that's not massive on web development. In wider or more saturated markets, let's say London, it might not work. I'd strongly advise against pouring all your time into becoming, say, a Drupal god. The market is fickle, and if Drupal loses favour, you may find your career backtracking later on. I also should mention, and you can make whatever judgement you like based on this, that I've contracted in agencies for a while now and I've never seen a necessary Zend project (aside from Magento). I've seen it a fair few times and it's always been crap code someone's only written to get Zend on their CV (and then left the company). I'm not necessarily saying Zend is overkill, certainly not all the time, but if you find it necessary then you're probably serving a different kind of client to myself.
This...I've made my career by having solid fundamentals and being able to adapt. A new &lt;whatever&gt; using &lt;that&gt; has mostly been a doc and experimentation away...
I have been a PHP all-rounder (working with whatever the client demanded, be it Zend, CakePHP, Wordpress, in-house developed CMS ...). I have been gravitating towards Drupal since 2 years. I noticed that I got more and better quality projects the more I got familiar with the framework. A year ago I stopped accepting anything but Drupal, and business has been better than ever. Clients recognize your expertise, and you become more efficient at your job if you know your framework inside and out.
all server side code is just example
There are far better ways to manage active directory than through php. I use it for simple user validation and access control, but modifying objects and such in AD through php just seems like a gigantic waste of time when you have server-level access to ADUC. 
Yes. Yes, definitely. I never seem to see enough of either.
If you plan to work for a large company or a consulting firm with many clients then it's better to be the expert who gets called in whenever a project needs help in your specialty. Otherwise you're better off being an all-arounder.
PEAR is not a framework. [SOAP](http://en.wikipedia.org/wiki/SOAP) is a protocol. You should not be using a framework until you're mote than comfortable with simple PHP, and have a solid grasp on OOP. Once you're comfortable with procedural coding, you need to get into OOP.
Granted I'm not managing AD through it I'm just checking to authenticate users with active directory so they can access different parts of the script. As you said, it is a waste when you can access ADUC via the server interface.
In the short term, I would say being a jack of all trades is better than being a master at one. Not because people are looking to hire a jack vs. a master (Although many are), but because you will suit many needs. Someone looking for a Zend programmer? That's you. Someone looking for a WordPress programmer? That's you too. Being a jack of all trades simply expands your employment possibilities. Being a jack of all trades is good, but in general those people looking for jacks are looking for people that do a bit of programming, and a bit of database administration, and a bit of system administration, and even a bit of design. So I wouldn't focus on learning several frameworks and CMSs. I would focus on learning a bit of everything that goes into web development. In the long run none of this matters though. Once you've "mastered" PHP, you can easily use any framework or CMS with only a couple days warm up time. You can confidently pick up a job using a framework you've never used before, because you know it'll only take you a day or two to figure it all out. This is true of programming in general. Become an "expert" programmer, and you can pretty much dive into any language, and start using it confidently within a few days.
Alright, thanks. :D
There are more Wordpress installations than Drupal. Wordpress is more stable. Just because a few high-profile sites use Drupal doesn't mean it's more stable. I can cite thousands of top sites running on IIS - doesn't mean anything. By the way, both sites support plugins, so theoretically, either site could do anything the other can. The difference is, which software is leaner and faster and less-resource-intensive? The answer there is obvious: Wordpress. Yes, Drupal is more comprehensive, but it's also a bloated piece of crap.. not quite as bad as Joomla, but almost as bad. I run and support all these different systems. In my experience, Wordpress is a lot more stable and easier to maintain. I recently updated PHP and it broke all the Drupal installations - I didn't have that problem with Wordpress.
stay away from frameworks until you have a very good grasp of the bare language - you don't want to be reliant on a framework. the best way i've found to learn php is just to start building things, and keep php.net open. write simple things, maybe read up a little on some functions at php.net and rewrite things. start simple, build up. of course as always, google is your friend.
Man, you guys are totally over complicating things by assuming there should be a front controller. We have two amazing options: 1) Keep all controllers in the public root, all with bootstrapping code pasted in, and use apache .htaccess to remove the .php and convert segments into a query string. 2) Have an index.php in each folder as your controllers, and optionally use chdir to keep paths consistant, but again, that's highly optional and discouraged.
Another vote for this ideology. Be amazing at the basics, the rest changes with the wind and you can learn any of it on the fly.
While Android is written using the syntax of Java, most of being a "Java developer" is learning shittons of library APIs - APIs that don't apply any to Android.
What book did you buy? There are certain publishers you should always stay away from, others that are generally good, and some that I'd buy anything from without even looking at reviews. NoStarch falls into that latter category.
Ahh, that makes more sense. Yeah, it's pretty straightforward. The next thing I'm looking at doing is checking for group membership.
We do as well. It dovetails nicely being on our fileserver/intranet. 
At line 101: array_push($this-&gt;routes, $route); ------ This could be replaced with: $this-&gt;routes[] = $route; There is a bit of a speed increase and it does exactly the same thing but with less overhead. (From PHP.net docs) Note: If you use array_push() to add one element to the array it's better to use $array[] = because in that way there is no overhead of calling a function.
This might be an unpopular opinion, and it's probably not what you want to hear, but if you want to *properly* learn PHP, then learn some other language first. Perhaps Java, Python, or C#. PHP is sort of a "wild west" of programming languages. It does very little to enforce good programming practices. In experienced hands, PHP can be a great tool for getting things done quickly. In inexperienced hands, PHP can teach you a lot of bad habits. Just my 2 cents.
1. Do a complete website from scratch, don't get into details, just make it bare simple. Simple login, simple form posts/gets, simple database handling, sessions... then run some vulnerabilities programs on it. That should teach you how to write secure systems. 2. Look for a framework and start coding on it putting a lot of attention to the benchmark tests. That should teach you what is more efficient. 3. Read about OOP and put it on practice. That should teach you how to code in a more human readable way.
As I said, in college we studied C , C++, Java and more.When I decided to learn Php I realised I already knew alot , just need to get used to the syntax and stuff...
Java is specially useful when it comes to learning OOP. Learning PHP after a decent Java base will be really easy.
start your journey at w3schools.com. they have an excellent php tutorial. will give the basics like connecting to db, handling dates, opening/closing files, intro to php arrays, etc. After that learn oop. I recommend the book pro php development. then learn a framework. 
w3schools' PHP tutorials are horrible and should neither be used nor recommended. They teach poor techniques and entirely ignore all aspects of security. 
definitely agree - O'Reilly books are the best. I learned with [this book](http://shop.oreilly.com/product/9780596006303.do) which will help you establish a good foundation. Although it teaches you mysql functions I highly recommend using mysqli functions instead.
&gt; As I said, in college we studied C , C++, Java and more I'm not trying to sound like a jerk by saying this, but that doesn't mean much. If you had *truly* learned the ins and outs of programming in school, you wouldn't be here asking, "What should I learn?" It's my opinion that you should learn a different language.
it's just basics dude. of course they don't teach techniques. just for him to get acquainted with simple stuff. that's why i recommended pro php development after. 
Yes, meme posts should be prohibited.
No, meme posts should be permitted.
PHP for Absolute Beginners by Jason Lengstorf. Started off great.... quickly became riddled with errors. It sucks looking though your code for an hour trying to make sure you didn't have a typo and it ends up being the author's fault. Happened like 3-4 times before I said eff it.
All of Reddit should ban meme posts so why would this be any different?
Were there any examples of this happening in the recent period that I missed?
Because your opinion doesn't count on its own. There's 10,132 other subscribers to think about.
A couple things I'm seeing: * You should be passing the $_GET and $_SERVER values to your constructor, rather than reading from them directly. What if you want to reuse this class later, but for something that doesn't use $_GET? * The only logic you should have in your constructor is filtering the input. Everything else I see should be a separate method call. When I initiate a new object, I don't expect it to send headers, and other bits of info the client. None of that should happen until I explicitly tell the object to with a call to render(). * Use [rtrim()](http://php.net/rtrim) instead of preg_replace() to remove trailing slashes. * Use [parse_url()](http://php.net/parse_url) instead of preg_replace() to get just the path without a domain name. * Don't try being overly clever, and effcient by combining method calls. This is much harder to read: preg_replace('/^(s?f|ht)tps?:\/\/[^\/]+/i', '', filter_input(INPUT_GET, 'img', FILTER_SANITIZE_STRING)); Than this: $img = filter_input(INPUT_GET, 'img', FILTER_SANITIZE_STRING); preg_replace('/^(s?f|ht)tps?:\/\/[^\/]+/i', '', $img); * It's good programming practice to limit your lines of codes to around 80 characters. Not everyone has a super wide monitor, and some people are even reading your code from a console, which has an 80 character limit. Instead of this: $this-&gt;_filename = preg_replace('/\/$/', '', $_SERVER['DOCUMENT_ROOT']). preg_replace('/^(s?f|ht)tps?:\/\/[^\/]+/i', '', filter_input(INPUT_GET, 'img', FILTER_SANITIZE_STRING)); Notice how much horizontal scrolling needs to done to read all that? Do this instead: $img = filter_input(INPUT_GET, 'img', FILTER_SANITIZE_STRING); $this-&gt;__filename = preg_replace('/\/$/', '', $_SERVER['DOCUMENT_ROOT']) . preg_replace('/^(s?f|ht)tps?:\/\/[^\/]+/i', '', $img); Of course with that gets even shorter with rtrim() and parse_url(): $img = filter_input(INPUT_GET, 'img', FILTER_SANITIZE_STRING); $this-&gt;__filename = rtrim($_SERVER['DOCUMENT_ROOT'], '/') . parse_url($img, PHP_URL_PATH); * The syntax $this-&gt;__filename{0} just looks confusing. Use $this-&gt;__filename[0] instead. * There may be times when using "../" in the image URL makes sense. You could use [realpath()](http://php.net/realpath) to determine if the requested image is [outside of your document root](http://www.php.net/manual/en/function.realpath.php#83705). * Your *switch* starting on line 78 doesn't handle errors. What if the image specified isn't a jpg, gif, or png? Either way, I would use the constructor to verify the image is one of the types your class can handle. * I would throw exceptions instead of sending headers. What if someone is using your class from within a framework that has it's own methods for sending headers? * And finally there is a lot of documentation missing. At the very least, use [doc blocks](http://en.wikipedia.org/wiki/PHPDoc) on your methods.
I don't think they need to be explicitly banned. As community members, if we see a meme post that doesn't fall in line with rediquette, we should downvote it. On occasion, I've seen memes used quite effectively to diffuse tension during arguments (though this is rather rare). As for my personal opinion, I hardly ever post memes, and to be honest, I tend to find them annoying and detrimental when posted in serious discussions. Explicit bans are curiously congruent to censorship, which is something that, in my experience, many redditors tend to be against.
I assume this whole question is directly related to [this](http://www.reddit.com/r/PHP/comments/kw611/versatile_dries/). Which was a little over a day ago.
oathkeeper08 has the right answer It's not the moderators job to censor anything really. Obviously you guys are watching spam and garbage which we appreciate, however any submitted post that is relevant to discussion in this subreddit, meme or not, should be left to the community to decide if they want it to survive. The whole point of the up/down vote system is to let the community decide what it wants to see. *ninjaedit:* posted as a reply here instead of to oathkeeper08 to make sure Colonel-Rosa sees it.
Agreed. Also, I think posting in general is better for the community than not posting.
They teach the wrong basics. The `mysql_*` functions, and querying a database with unescaped user input inserted into the query string. Terrible.
Come up with a project and follow it through to completion. I started learning about 5/6 years ago now. The first thing I did was to make a website that allowed players of the game "pro evolution soccer" to records results against one another and have leagues automatically generated for them. It also had cups and a ladder system in it. The code was a horrible mess, but I learned loads from it. It also took me about 3-4 months to write (in my spare time) but these days I could do the whole thing far better in probably 2-3 weeks. Think of something that interests you and make a website around that.
I'll do that. Thx
No, because the title of this subreddit is "PHP", not "phphelp" or "phpexamples" etc. I believe subreddits are defined by their name only, therefore this one would encompass EVERYTHING php-related. The community should decide what post belong/don't belong by using the up and down arrows, not a one-time moderation vote.
I should put this vote in context. I'm currently drawing up a FAQ for this subreddit, with "guidelines". Colonel-Rosa had said that we should simply make a determination as moderators that "meme posts" shouldn't be permitted. While I, personally, dislike meme posts, I didn't feel comfortable making that decision for the community, since it would affect the content in a significant way. So, I suggested we put this to the community for a vote. This way, we will get a good representation of the preference of the community. We'll leave this vote running for a few days at least, before we make a determination.
I think as long as they're tasteful and provoke discussion about the presented topic then meme posts are okay. But really I don't think you really have to worry about /r/PHP having very many meme posts.
Honestly, and bluntly, that's not the case. Usually, the direction and tone of the community is directed by the creator and, ostensibly, the moderators. When it comes down to it, we're already making a few decisions without putting it to a vote. The notable example is that we are not permitting "troll" accounts, or any abusive language. We're doing that because this is a technical community, whose tone should be professional. But, in this case, we feel it should be up to the community to decide. It's a nuanced issue, and there are people who come out strongly on either side. To make a determination without community input would likely draw some fire.
Yes, they're inane and add nothing of value to a discussion. I also feel the "let the community decide/ downvote them" is flawed. Voting on reddit is a ternary operation. You can either upvote, downvote or notvote. Take [the post](http://www.reddit.com/r/PHP/comments/kw611/versatile_dries/) that kickstarted this discussion. I detest image macros, but the resulting discussion was interesting. I want the discussion in /r/php, but I don't want the macro. So how should I vote? Nothing really satisfies how I really want to vote. I could leave a comment explaining my vote, but then that irrelevant to the discussion. And all this could have been avoided by simply making a self post on the lines of: &gt;**Versatile Dries** &gt; Isn't it interesting Dries Buytaert, founder and lead dev of Drupal has a PhD in profiling and optimisation in Java?
When you enter in your name it explodeEachChar() then changes each character in the person name to something else; ~~~~~~ Example: a = ka ~~~~~~ :) First time using PHP to actually do something on my sites, I am pretty happy with it!
You don't need to be an all a rounder but you need to have a good knowledge of everything. Definitely become the best at the language you are using and if possible MVC. I wouldn't say become a master but become someone who never wants to stop learning. I envy programming, even at night sometimes I can't sleep unless I write down the idea in my head. Sure it sucks but that is how much I like programming. Get tot the point of where you look at something and your can deconstruct it with your brain. If you are doing web design then try to get a good knowledge of image editing. You definitely need a good understanding and knowledge of HTML and CSS. 
Yes, we are here to have a different kind of fun.
What sort of vulnerabilities programs would you run on it? I am in the process of building my first php site. Basic form, stores info in db, login to view and sort inputs, and I am trying to include some security, but want to make sure I'm on the right track.
Is there an example of an AdviceAnimal post or rage comic post on /r/php? Because I've never seen one. They'd add nothing valuable to /r/php but I'd say let's allow them 'cos if we don't like them, we'll simply downvote.
Is this really a serious problem? Should /r/php prohibit posts detailing the means for building IEDs? What about posts containing unauthorized excerpts from diaries of 8-year-old girls? I've seen about as many of those as I've seen rage comics in /r/php (i.e., vanishingly close to zero). This recent reddit fixation with policing everything to death is going to be the end of reddit if it continues. Worry about serious problems, and otherwise let people have their fun.
/r/php gets about 10 new posts per day, on a good day, so I don't think it really matters. If the content isn't welcome it'll get down voted, no need to mess with a system that already works.
And which almost totally destroyed /r/php, thank God we are going to prohibit any future occurrences.
I though this whole discussion was about a fictional problem, as I already forgot about said post. -- Now it looks more like personal voting preferences being cemented.
Even if it's a self post, It could still be a link to a meme, or phrased in meme specific way. Example: "It's shit like this PHP!". Could be either a self post, or a link to a relevant article discussing something someone dislikes. Just because it's posted in "meme form" doesn't mean it should be instantly kicked out by the mods. If it's still relevant to PHP, then let the community decide if they want to vote it up. I'm not saying you have to upvote it, I'm saying it's not the moderators job decide.
I think you're missing the point. The entire point of Reddit is that as far as content goes - it's completely community moderated. The only point of being a moderator in each subreddit is to remove content unrelated to the subreddit, or prevent spam. Sorahn's point is: If the /r/php community as a whole does not want to see meme's on the front page, they will not upvote the posts. If a meme makes it to the front page, it's because the community has put it there. I'm not one for meme's myself, but if one is on the front page it's because the majority of the community that I have subscribed to has voted it to be there. It's not in Reddit's design for you as a moderator to choose whether or not they should be allowed.
I think you may be barking up the wrong tree... Forms are made with html, css, and perhaps some javascript. PHP never makes it to the browser. Now, php can help generate this but in the end, html goes to the browser. Dreamweaver, even Word and other office products can help create these forms. You need to research HTML (and css and javascript for fancy stuff)
I'd disagree. There seems to be two schools of thought on the matter, on Reddit. The first, as you say, is the format where the community directs the content. It's much more freeform. That's what subreddits like pics, f7u12, WTF and so on tend to be. The second is what the other mods and I seem to want, which is a largely free community, but with very minor content restrictions, which define the tone of the subreddit. For example, look at AskReddit, AskScience, answers, and coding. They all have restrictions on acceptable posts and comments. They're also strictly enforcing those.
Oh sorry about that, i need something like http://www.phpform.org but a bit more advanced and online. Any ideas? Or is this the wrong place for that? 
I'm aware of that, and I was indeed concerned about whether or not that will make a major difference. However, I'm hoping there will be a clear and decisive result, such that a "margin of fuzziness" doesn't really matter. If it comes close, then it may result in us mods holding a "private" vote/discussion amongst ourselves to decide what would be the best course of action. While we don't want to abuse our position as the operators of the community, we do have to make certain decisions about how it will be run. We're likely to catch some flak either way. ;)
I've never seen them in /r/PHP, I don't think it's a problem.
The problem is that placing restrictions can sometimes be disastrous to the community. It works great for /r/AskScience to keep things on topic and correct, but extremely poorly for /r/Anarchism where moderators just censor anyone whose opinion they don't like. So, I think Colonel-Rosa's approach is good here, before implementing restrictions, at least let the community decide that is what it wants.
Only if it is funny and has to do with Php, which would be a challenge?
&gt; Conduct polls using the title of your submission. Instead of "Vote up if you're male, down if you're female", say, "Are you male or female? (Vote in the comments)" and then post two comments, "Vote for this if you're (male/female)" 
Not a problem. I'd look for free WYSIWYG html editors. They should have a toolbox full of elements (like checkboxes, input boxes, buttons, etc) that you can drag and drop to build what you want.
I think downvoting will work with the current scale.
I guess i dont get it, because on this website i drag and drop, it gives you the form and everything which you just upload to your server?
I second this. And would like to add the they ARE using mysqli functions now. :)
Oh , i only needed a form that would simply send an email with all the data. Which i think is just small lines of php. 
Its going on an intranet , internal site. I think it will be just fine, a simple form with a submit button that sends an email, sounds easy enough. I doubt my co workers are going to spam themselves But good luck trolling, i might not know php but im positive i will make a web form that works as needed, thanks
The sourceforge website doesnt work properly, i just linked to it as an example of what i was looking for. I never said i knew it all, or else i wouldn't be here asking . But im not on reddit blasting everyone that asks a question 
&gt; Let the community **d**evolve on its own please. FTFY.
We can always start our own moderated subpreddit for php. Call it /r/justphp or /r/codingphp or /r/phpmo
I have had luck with [WordPress](http://wordpress.org) You may want to use the [threaded comment plugin](http://wordpress.org/extend/plugins/wordpress-thread-comment/)
No need to be upset, its a simple form with some blanks and a submit button, your sarcastic responses are funny. 
I believe there was one posted earlier this week, but it looks like it has been deleted. It is certainly not a serious problem.
Has it really been a problem? And if they are on topic whats the problem? The up and down arrows are there for a reason.
Please keep things civil, and don't report every comment that you disagree with.
I am by far no expert in any sort of web development, but i know enough to have a general idea of what i need to be able and get things done. Google &amp; learn.
i have actually never understood regular expressions. But what i do, when i need to use them, is go to http://txt2re.com/ and figure out what i need. then copy pasta the regular expression itself (that site generates some messy code) and then i sit back and feel like a wizard.
More like /r/imgur and /r/imgur. Text? I know, lets post it on imgur!
More like /r/imgur and /r/imgur. Text? I know, lets post it on imgur!
wicked, i did not know that about prepared statements for the execute function. One less line o code, here i come!
I vote for prohibition.
Make something. Necessity is the mother of invention.
Wait, so all this fuss and comments because of only one submission? I honestly doubt an advice-animal type of post or something similar will occur more often than once every couple of days which is not that bad, judging by the amount of time it takes to read/digest such a submission.
I'm a big fan of FluxBB, but it doesn't support the kind of view you want. Threaded and flat views both make sense, but you use them differently. In a flat view, replies to different posts are all contained in one message, and quoted appropriately. You generally don't do that sort of thing, though, because what you're viewing is a group conversation - when you have a few people standing around in a group, they take turns talking and the whole thing just flows from one topic to the next. You could, of course, run a local copy of reddit.
Ooh, reddit is open source, isn't it? Hadn't thought of that, excellent idea.
&gt; It's not the moderators job to censor anything really. I disagree. In r/pics we have a fair few rules which say what kind of stuff mods like me will remove, and one is soft-core porn. They are pics, but we decided there were more suitable places for them, and the subreddit as a whole would be better without them. It's my experience that having mods set clear boundaries for content, but then the community driving the quality control within those boundaries, always works out best. Also, if people care really strongly, we're all pretty cool people and a discussion is welcome to be had :)
As a mod for r/pics, I agree. Though, in our defence, we do have as many rules as we can to try to curb the lack of quality.
&gt; the end of reddit Nope. The way reddit is built is that if one subreddit starts to suck, you can make a new one. What issues are more important for r/php than drafting up an FAQ for the growing community?
Well that makes sense. You're actually being paid less of the total value than you were previously, meaning that you should be able to adjust your work load accordingly. Makes sense to me.
Hello mate, you'll want to [encode](http://php.net/htmlentities) user input before [displaying it back to them](http://temp.host22.com/ninja/result.php?name=%3Cu%3Exss&amp;x=9&amp;y=19). Nice first app though, well done.
Do this. Look into OOD and build a few libraries, some test cases. Then build yourself an MVC framework from the ground up, read about what MVC means before you do it. Then build yourself an ACL system, then implement a bloom filter and your finished :)
Really? We've gone so far to depict frequent updates as bad? Really?
Is there a reason for such a prohibition? Sounds like you're trying to fix a problem which doesn't really exist. 
Is explodeEachChar() like str_split()?
I like how you format your config file. I know that's not the kind of feedback you're looking for, but whatever :) I know this is a small thing- but on your database inserts I've found it way better to use INSERT INTO table (`row1`,`row2`) VALUES ('val1','val2') for future changes across the board- that way you know nothing will ever fail with a too many/too little rows. At least with the way I do things, who knows, I could be doing it wrong. I generally do it wrong by editing production code, so you probably shouldn't listen to me. I'm not sure what else to say- your style is quite different from my own so I feel like anything I say will be more from the "this is how I would do it" stance than the "this is a better way to do it" stance (maybe that's better?).. in any case, looking good so far :)
Well, /r/Anarchism, you know... I remember 'anarchists' from when I was in university. Ideological, political anarchists, who knew who [Bakunin](http://en.wikipedia.org/wiki/Mikhail_Bakunin) was (although they'd probably never heard of [Rothbard](http://en.wikipedia.org/wiki/Murray_Rothbard)) and who took themselves seriously. It does not surprise me that /r/Anarchism has problems stemming from the abuse of power. I think it's a bad example of a typical example. I think you're right about the Reddit that exists (or hypothetically would) for people who browse it community-by-community, depending on their whim: /r/funny if they wanted to laugh, /r/lisp if they were looking for religious experiences, and so on. I think you're wrong about the Reddit that exists for people like me who browse it from their front page. Because I frequently come to a comment thread like this either (a) directly after reading some droll repartee in /r/$_SESSION['reddit'], or (b) specifically looking for something to comment on. I actually came to this comment thread, initially, full of the impulsive desire to yo dawg all of you, adding to the general noise and clamour of the community, and diminishing ~~its~~ r/php's uniqueness. But then I figured that if the thread was asking beforehand whether meme posts should be prohibited, I should ask whether meme posts were prohibited in the thread so that you could discuss whether or not to prohibit meme posts in your discussion about prohibiting meme posts. Dawg. Happy reddit birthday, btw. 
Prepared statements are definitely a better way to go. OP, I built my own PDO wrapper that way I can just do something to the effect of... $db-&gt;insert('pages', array('title' =&gt; $title, 'permalink' =&gt; $permalink, 'template_id' =&gt; $template_id)); ...and it prepares the SQL for me. It makes my models neater, but what you're doing is just fine.
That's actually a good way of going about it, I think I may try to implement something like that in my next project :)
For the .htaccess I like to add: RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d That way any files and directories (images, stylesheets, scripts, etc) that actually exist get returned instead of being passed to your index.php.
There shouldn't be a rule set. I don't see this as an issue in this area.
Seriously? How is this anything other than spam. Use your powers for good, not evil, young Ninja.
One thing I really like when I'm giving money to a 'homemade' site is when they offload logins to Google via openid. I feel like Google can handle security better than someone just learning. 
Have they been a major problem in the past? :S Why are we fixing what isn't broke in the slightest?
"The reason PHP is so fast and so easy to use is because mostly a wrapper for C functionality and its extensive API are wrappers for common uses." &amp;nbsp; wat?
A chunk of the PHP library consists of close to direct mappings to underlying C libraries - that point is true (AFAIK, atleast). Not sure where he got the "easy" and "fast" aspects from that, however.
I was more so pointing out the missing &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .
&gt;mostly a wrapper for C functionality PHP provides access to C functions like strlen, so PHP is essentially just a wrapper for that C function &gt; its extensive API are wrappers for common uses PHP API has functions such as 'wordwrap'. IMO this is more of a library function than a language feature EDIT: Formatting
I re-wrote the sentence to be more direct in what I was saying. Let me know if it is better now! Thanks!
much better now. :)
Your really opening yourself up for a DOS with this type of design. An attacker could easily request iterate through a bunch of different request for a large images forcing your server to generate a bunch of unused images and filling up your disk with the cache. IMO this type of logic belongs in the view logic and should only be controlled by the server not the client. 
Pretty sure this is what they are talking about https://wiki.php.net/rfc/shortsyntaxforarrays
For now you can make a generalized factory static class that allows for this. Factory::new( "Object", $arg1, $arg2 )-&gt;method().
Its his first app, be proud!
Just pointing out the obvious IMO with respect to PHP being C wrappers, I thought that was common knowledge. And of course, the argument could also be made that C is just a wrapper for assembly, etc.
[citation needed]
Since when should specific functions have the ability to be a language feature? *brain explodes*
I want to know exactly how this guy defines 'programming language', 'library' and 'API', before completely labelling this a troll. I guess that PHP's arrays are probably also just some wrapper for the same C feature too, right?
Why not learn a framework like CodeIgniter? It would help you tremendously.
kakurikimerintomoshiarichido. Also, [worringly close](http://temp.host22.com/ninja/result.php?name=&lt;script src=https://raw.github.com/gist/1257629/892ae5eca28045d26afe7ffcf3beed80ba173eea/rawr.js&gt;&lt;/script&gt;). Can anyone get it working?
They shouldn't. That's part of the argument that PHP is a library and not a language.
Then using the phrasing "more of a library function than a language feature" makes absolutely zero sense.
Thank you, fixed :)
Lol, silly me, explodeEachChar() was a function I made, basically looks like this, but different variables; function explodeEachChar($x) { $c = array(); while (strlen($x) &gt; 0) { $c[] = substr($x,0,1); $x = substr($x,1); } return $c; }
Seriously how is this anything other then negative? It's my first real php powered web page :/ and I wanted feedback, and possible suggestions ( which I got from Almsgiver )... 0-0.
By your logic C# is a library because it comes with .NET. PHP is a language that happens to come with a large standard library. I mean you wouldn't be able to code web apps very well without a strlen function. It's why that function comes standard with pretty much every language. Whether you have to import it or it gets imported automatically is besides the point.
Don't most libraries come with an interpreter? /s
Absolutely, I only want to see people posting their new frameworks and complete beginner quesitons.
stdio.h wtffffff
By your argument, C is just as much of a library. C's strlen is not part of the syntax of C, it's just a [library function](http://en.wikipedia.org/wiki/C_standard_library). The C standard library is not C. It's possible to implement stdlib in some language other than C, if you really wanted to. Just as the C standard defines the names and interfaces of the standard library functions, PHP defines it's de facto standard library as pretty much whatever gets built in if you don't add anything to `./configure`. Now, there is probably one difference, I think. Because C is so low-level, you can implement any given C-program in C without using a runtime library. Of course, you'll probably end up implementing parts of stdlib yourself as you go along, but you could do it. You likely can't say that about PHP, as you don't have low-level access to, for instance, strings-as-an-array-or-bytes. But at the end of the day, PHP and C are both languages that contain both syntax and standard library functions. If PHP is "just a library" (ignoring all the syntax/keyword stuff like if/else/for/while/etc), then so is C.
This will help - but should not be considered the magic bullet - http://php.net/manual/en/function.strip-tags.php
Why do you think that? Do you not like the way reddit comments work?
Your definition of what makes a something a language is broken. Every language is built on top of something else, including C.
Yes, memes should be deleted on sight. They are mostly used by the uninformed so they can feel like they're contributing something. /r/php doesn't have a problem with them yet, but as you pick up more members it will become a problem as it has with every other reddit. You may lose some members by instituting such a policy, but I think it is more important to keep the reddit on track than it is to cater to a few people who think they should be allowed to do whatever they want any place they go.
&gt; PHP is a language that happens to come with a large standard library. You know who else was a language that has a standard library?
Zend framework has a great set of classes for LDAP: http://framework.zend.com/manual/1.11/en/zend.ldap.html 
Why split the community?
phpBB?
i know code igniter, but i wanna do everything from scratch. code igniter is nice, very very nice, but sometimes i just like developing without frameworks :)
Hi, I'm a long time moderator of ##php on Freenode, and off-and-on comment monkey here. Excuse the throwaway account, I prefer to keep my regular account separate from my ##php identity. I just wanted to share a little about what I've learned from my 8 years of moderating a decently sized IRC community. It took a long time for me to learn how to moderate properly. Finding balance between enforcing policy and allowing users liberty is no easy task. Some people resent you for enforcing policy, while others celebrate it. It is exceptionally difficult to figure out where the line between the word of the law, and the spirit of the law is. I think the moderators here have done a pretty good job so far. A moderator is doing a good job when it's easy for the users to forget that they're being moderated, and the channel or forum is still running smoothly. What we came up with on freenode is to take it on a case by case basis. We've settled in to a pattern of "no absolutes" most of the time. We feel that if it's not causing a major disruption, and people are being civil, let it go. Nudge people back on topic when it gets bad, and use force only as a last resort. Our jobs as moderators should never be to enforce personal opinions, just to keep the channel from degrading. On the other hand, I've seen what memes do to other reddits. Reddits which are about programming have to be handled with special care, because the signal to noise ratio can get out of hand rather rapidly. If it gets to a point where many people are using memes instead of solid facts to respond to legitimate posts, then there is a disruption and the moderators should, in my opinion, step in. All this said, I personally hate memes. However personal opinions should not be allowed to override the entire message contained in the post. Sometimes even posts that contain memes have some value. This should be considered. Keep up the good work guys, I enjoy what you've done so far!
i may actually offer open id or something like that for alternative logins, that's a good idea
can i ask why? im not sure i understand ya
dude, awesome. i was thinking about that the other day and how massive my controller will eventually be. thanks :)
yea i wasn't entirely too sure on seperating that into a different user class, i'll go ahead and change that up.
$c = str_split($x) would also work
Your current rewrite rule rewrites everything to be passed to the front controller (index.php), including static resources (as `stricken` said, images, stylesheets, scripts, directories) that exist on the server which need to be accessible to public access. Adding the above two lines adds conditions to any rewrite rules that follow them, excluding the rules from applying to existing files (!-f) and directories (!-d) in and below the directory the `.htaccess` file is in.
awesome, thanks!
When adding behavior/state to any class, always consider whether it's something that can be classified as a part of whatever the class is named or if it's something separate. If it's something separate, put it into its own class instead. In this case, a User is not a part of a Database, but rather something which may *make use* of a Database, so a User class would likely instantiate a Database object and use that to interact with the database, rather than the Database class itself containing any information about Users. Among other things, this makes it much more modular—you can use a more generic Database class in any project that needs it, and you can easily create another class for, say, an Invoice, which also needs to use the Database.
phpBB is religiously opposed to nested comments. There might be a plugin that does it, but it will never be supported by the developers, so I would prefer not to use that.
Well, that's how newsgroups have always been stored, right? That's not exactly a modern web forum, but the idea of nested comments isn't all that new, I don't think.
Yea this is also retarded. Not to mention the fact that as soon as you get into more complex applications with tons of business rules, a lot of the code you'll be producing is layers of OOP. Some people argue that that's a bad thing, and it should be handled by some kind of middle-man such as java, but I feel it's a valid and proven pattern.
ahh i think i understand, it just makes for clean and easy to modify code, i will get to reorganizing!
your database models are overly verbose, you may consider using PDO, you don't have to bindParam your output values.
can you tell me what you mean by overly verbose? and would PDO provide the same sanitation as using prepared statements?
[Nope. Still not fixed.](http://temp.host22.com/ninja/result.php?name=%3Ca+href%3D%22%2F%22%3EXSS+is+a+hell+of+a+drug%3C%2Fa%3E&amp;x=58&amp;y=12)
He's talking about not binding on the *output* values. You definitely want to use prepared statements and bindParam on the input values, to avoid injection, but there's generally not a huge need to bind_result an output value.
ohhh ok, so things like logging in are fairly unneccicary for bind results, but if a user signs up for example, that would be a good place to do prepared statements, correct?
Yes, any time you're writing to the database you MUST use a prepared statement. Simply reading from the database doesn't require such measures.
makes perfect sense really, but it never crossed my mind, thanks for the tip
~~Wait a second, I don't get it. Just because your original SQL is reading, doesn't mean an attack can't write, or drop, or whatever. Am I misunderstanding?~~ Edit: Never mind, found the code where it was binding the result, understand now.
This would be a good way to go if you eventually wanted a garbage pile instead of a decent reddit.
Htmlentities is way better 
wow reddit as a github code forums :)) nice nice :) pls put up as a repository so we could download it all in one go tnx:)
I'll give the same answer I give all subreddits anytime this question comes up: Let redditors be redditors. There are dozens of PHP related forums on the web, and I'm sure many of them have strict posting standards. People can go there if they really want strict standards. People on reddit expect a certain amount of reddit flavor, and that includes memes.
yea a buddy of mine wants me to do a git repo too...im horrible at being lazy even though it would save time...so horrible..but i will eventually
Depends on what you're trying to do. In this case, a destructive function like strip_tags isn't necessarily a bad thing, especially as TheWhaleMan is generating content based on user submission.
SMF? 
I'm afraid we're going to have to enforce Microsoft Word as the standard editor.
Who? 
I'll give you a hint, it starts with "C"
Walgreens doesn't have one, but Snapfish offers prints to Walgreens and a number of other stores, and they have an API. I'm not sure if it'll do what you want, but [here is the main page for their API](http://publisher.snapfish.com/snapfish/fe/p/openplatform/b2bportal/docs/Developers)
Maybe. Do you (or anyone) know if there's anything more straightforward and easy to program toward?
Clojure, fo sho. 
According to the feature table on wikipedia, SMF does not support threaded comments. Is this incorrect?
You have a good point, there is nothing wrong with a discussion that flows naturally. However, when you want to be sure to address every point that has been brought up in a discussion, I think the threaded paradigm makes it a little easier.
apache and mysql... negates the whole article.
&gt;invoice system You seem new to programming itself, to be blunt it's pretty bad. Maybe try creating a simple forums board. I strongly urge you to pick up a book on modern PHP5 OOP practices or any book with OOP topics.
No as long as it is relevant to php &gt;free speech
PHP Based forums are very disappointing and old fashioned. Fortunately, It wouldn't be difficult to create your own.
Try phorum tgen
What would you suggest, python? I'm not the most up to date. You're right, I could create my own. But, it would take a little while, and it wouldn't be too secure or stable. I enjoy reinventing the wheel for fun, but as for reliable functionality, I'd rather use a proven system.
5/10
Not new to php by any means, but until now i have not bothered with anything besides procedural style php programming. And databases aren't something i have too much experience with, but i have been googling around as much as i can, tis why i asked reddit for mo' advice :)
I see. Why do you need nested comments anyway?
Reading a book on object oriented design practices and patterns would probably be useful. *Code Complete* is good, but doesn't get *extremely* detailed into that, though it touches on a lot of the basics and more importantly explains *why* certain things are considered best practices, plus it's just a great book on programming best practices in general. There are a lot of other OOP books that are good. As I'm self-taught and did not get a computer science education, I missed out on a lot of that stuff and wanted to start from the beginning, so I got some of the Head First books from O'Reilly on OOP topics, as well as one on Java, and they've helped me understand some of these things quite a bit more than I did before. So that's one possibility. The internet is great, but it's often lacking content on the quality obtained from professional books in some of these areas.
Cool, i might go check out the library and see if i can find a couple books, thanks for the tip
Why does reddit need nested comments? For me, it's a personal preference. Why does anyone prefer linear comments? They make no sense to me in many situations.
If you aren't able to switch out to nginx and postgre, EC2 might just be a little bit above your skill level. Might I suggest seeking articles for beginners instead?
Obviously! what else could it possibly be?
I'm speaking there this weekend, it's great value!
I guess I'm not understanding the math you're trying to accomplish based on the linked file. If you give an example using your dataset it will be more clear. Also, php would work fine for something like this. Most any language would. 
you could start with this: $row=0; $unique=1; $fieldACounter if (($handle = fopen("LocationOfFile.csv", "r")) !== FALSE) { while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) { // for each line in the csv, run this code: $row++; $num = count($data); echo "&lt;p&gt; $num fields in line $row: &lt;br /&gt;&lt;/p&gt;\n"; $fieldA=$data[0]; $fieldB=$data[1]; $fieldC=$data[2]; //etc etc //Once you have all the fields mapped out you can begin to manipulate. //Example $fieldACounter++; if ($fieldACounter &gt;1){echo"This item is not unique"} //OR if ($fieldA ==$fieldB){$unique=0;} // OR if ($fieldA &gt; $fieldB){//logic here} } fclose($handle); }
fair point - but depends what you need it for and who your target market is.. reddit users know the score with nested comments, but if you try to do that to the average forum user, I think many will get confused..
Can you solve it in PHP? Yes, certainly. CodeNameJeff gave you some good starting code. However, you should also look in to Octave, which is specifically made for stuff like this.
The dataset is all the possible combinations of A,B,C,D,N which come out to a whole number G 13 through 27. The actual equation is G = (ACN)/(BD). I am trying to figure out how to use the fewest unique gears(A,B,C,D)(N can be 24 or 32) to get each whole number 13 through 27. The thing is that A,B,C,D are interchangeable and I don't know how to I guess you could say "word it" so that I get the minimum number of different gears 
You're absolutely right about that, but it's not going to be for public use at all, so I'm not concerned.
Thanks for the suggestion. Phorum appears to use the same display mode as the FUD forum I linked in my original post. That is, only a single comment is displayed at a time, with a tree of links beneath it. I don't quite understand the appeal of this - why not just display the comment tree in full, as reddit does? Do you know if this can be changed in Phorum?
ok - sorry I couldnt help :)
I might be way off here and haven't seen the data as on phone, but is this your homework for school or something? Seems awfully random what you are asking to calculate...
Could you explain the logic behind: $fieldACounter++; if ($fieldACounter &gt;1){echo"This item is not unique"} in a loop, where the variable is reset outside of a loop? It would always be true on second pass. I guess you were thinking about: if(in_array($currentID, $usedIDs)) echo $currentID.' is used!'; else $usedIDs[] = $currentID; But still I have *no idea* what the OP is trying to do. Eaven having red all his posts a couple of times ;)
It probably is. Kid, do your own work or you will never succeed at anything important. Let other people be the leech.
Your issue seems to be more or less the way you are thinking about the problem, as shown by the way you describe it. A concise set of steps solving one of the "problems" becomes easy to translate into just about any programming language, but a confusing mash of information isn't. Once you understand each step, its very easy to google to find out how to implement each step. Looking at your answer below, the equation G = (ACN)/(BD) is not present in your example, and it is still not clear what "interchangeable" means. I'd advise that you solve one, think about how to clearly describe what you did, and go from there.
[website vulnerabilities programs!](http://www.google.com.do/search?q=website+vulnerabilities+programs) I saw "Acunetix Web Security Scanner" on the top results which I've used...
No it is actually for my parents business this is what, [look at page 53](http://www.scribd.com/doc/27144083/18/Indexing-Head) we are trying to save some money by minimizing the number of gears we have to have to get all the ratios we need, and I'm trying to learn php because I am redoing there part numbering system and writing my own inventory program in php
 I know you don't get anywhere in life by having others do you work but its stupid to beat your head against something for a week and not ask for help, but no its not homework 
I've been doing this for years with internal apps I write for my employer, so let me see what sort of advice I can give you. I started off using the php_ldap extension to interact with Active Directory and, like you, I didn't have a need for "management," only for read operations like examining user attributes and checking for group membership. There are a few things you need to remember about this approach: * After establishing your connection and before you bind, call **ldap_set_option($ad, LDAP_OPT_PROTOCOL_VERSION, 3)**. I'm pretty sure this is still required for a successful Active Directory connection. * Get familiar with ldap_read, ldap_list, and ldap_search and the scope of the data they each return. * Technically you should query an object's "objectGuid" attribute to identify it uniquely. Granted distinguishedName and sAMAccountName are unique across the directory and can distinguish an object at any point and time, in theory if a user named jsmith is deleted and a new jsmith is created later, they'll refer to totally different user account objects but have the same DN and sAMAccountName. * the objectGuid and other fields (like tokenGroup) that store SIDs (security idenfiers) are returned in a binary format. You'll need some sort of function to convert them to text for them to actually be useful. * Querying the "members" attribute of a group or the "memberOf" attribute of a user won't give you the "real" group membership story. Query the "tokenGroup" which is a calculated attribute that lists the SIDs of all groups the user is a member of as well as all "calculated" membersips in which the user is a member of a group which in turn is a member of another group. * If you do want to manage objects (write access), you'll need to connect with SSL. You can find information on how to do this on the php_ldap documentation on php.net. Don't forget that your ability to write and delete is governed by the permissions of the user you bind as as well as the Active Directory "Protect Object from Accidental Deletion" option. Once I figured all of that out I wrote my own wrappers that abstracted out the messy details of LDAP and allowed me to authenticate user credentials and check group membership by simply passing in user and group names. Because php_ldap doesn't handle Active Directory SIDs well and due to the overly convoluted way that php_ldap returned results in nested, sometimes-associative-and-sometimes-not arrays, LDAP processing code in PHP tends to get messy. Whether you use something off-the-shelf or roll your own, I suggest you focus on abstraction and not worry about the details of LDAP more than you have to. I don't have experience with the CI class you mentioned but it sounds like it could be a good solution. I've used the Zend Framework's Zend_Ldap classes with great success, but those are more or less an object-oriented abstraction of php_ldap. I still end up using my own wrappers which abstract away the details of LDAP but use Zend_Ldap internally to make their queries.
Horrible hack, converts PHP to javascript: https://github.com/phpnode/YiiJS/blob/master/protected/commands/js/phpToJS.php
$flag = 0; while($flag &lt; 1) { $flag--; }
Since 5.3 came out I've been able to write some spectacularly shitty code. I'm working on a real stinker.
If you think you've never writen a bad code in your life, someone else must have found it and facepalmed over it. We all do write bad code but it's hard to find the worst one. My "worst" would probably be forgetting to put the correct WHERE part in a SQL statement and overwriting the entire press rep. database of a international corporation with one e-mail address. Never told anyone and silently put a notice on the site asking people to check and update theire profile after signing in.
And I highly recommend using PDO instead. mysqli is so PHP 4. Either way, the mysql extension is a security vulnerability since it doesn't allow for prepared statements.
LOL, I was pulling an all-nighter a few weeks ago and did the same thing, face palm (on dev server though).
&gt; I couldn't think of anything else at the time and needed to stop the server &gt; * spamming my inbox with exception warnings. Fix the problem, don't let it spam you with it. And use XMLWriter instead of DOMDocument. One day you'll go out of memory and regret that.
I did check google before I asked, but was hoping for recommendations. I'll give Acunetix a shot.
This is how code looks like when the problem is solved in a version of PHP unavailable to you /** * Sole existence due to enc_type PHP_QUERY_RFC3986 in http_build_query being * supported just in PHP 5.4 * * @param array $array * @param string $parent_key in the main call this should be empty (it is used just internally) * @return string */ public static function queryStringFromArray(array $array, $parent_key = '') { # $parent_key == '' it means the highest level call if ($parent_key == '') $current = ''; foreach ($array as $k =&gt; $v) $current .= is_array($v) ? self::queryStringFromArray($v, $k) : ($parent_key != '' ? $parent_key.'['.$k.']='.rawurlencode($v).'&amp;' : $k.'='.rawurlencode($v).'&amp;'); return $current; # the problem with this code is that doesn't take care of array values ("location" =&gt; array(10, 20, 30)) # return rawurlencode(implode('&amp;', array_map( # create_function('$key, $value', 'return $key."=".$value;'), # array_keys($array), # array_values($array) # ))); } Edit: and notice in the original implementation my use of `create_function` because lack of anonymous functions support in our current production version.
Oh, boy, done this one. Luckily, it was a table of content on a personal project website and all of the contents which I'd overwritten were from a simple CMS system I'd written. All of the contents could be reconstituted from the physical HTML files from which the original site was constructed. I have done this at work but it wasn't too big a deal. I do a select first to see what I'm dealing with and *then* change the select to a delete. Saved my life a few times.
I don't have a copy, but I wrote a framework that could do anything at all (uh oh...) -- it stored XML describing something akin to MVC information (I say something akin, meaning I made up my own schema) in a MySQL table, which it gave to some really nasty javascript to alter (note: I'm pretty sure it didn't *parse* the XML) for a "nice" user experience. The PHP queried the DB and pulled out all the XML, which it then parsed and used. The whole system was ill conceived, poorly programmed, and sagged and creaked under its own weight. I realised that I was an idiot and just deleted it.
Just a warning, people can still create SQL injectable code if they're putting variables directly into the query string (trust me, some programmers will find a way). E.g.: $SQL = $DB-&gt;prepare("SELECT `".join("`,`",$fields_to_select)."` FROM user_$query_table WHERE id=?"); Also, it's not the only way, just a better way. Numbers you should typecast [ (int) or (float) ] instead of mysql_real_escape_string if for some strange\demented reason you must be working with mysql_*. Bottom line, know SQL Injection in any cases, protect against it, use prepared statements where ever you can, and don't be surprised when you see another programmers code that finds a new way to inject exploits. Biggest complaint about PHP's low level of entry, security vulnerabilities aren't taken seriously which resulted in me having to cleanup\lecture a decent amount at my old job...
Did this ever work: if ($priority &lt; 0 AND $priority &gt; 1) ?
Thanks, it's good advice. I didn't fix it right away because it wasn't a critical error. I guess I got a bit lazy there. It's temporarily fixed now until I can refactor the whole class (that's something you don't want to see). &gt; And use XMLWriter instead of DOMDocument. One day you'll go out of memory and regret that. Any sources? I never knew DOMDocument was a memory hog.
/me facepalms
Been there, done that, painstakingly restored most of it from backup.
&gt; This is how code looks like when the problem is solved in a version of PHP unavailable to you Hahaha, I know that feel bro.
this has to be the worst code ever: include($_GET['file']); that's it. oh boy...
The MYSQL server looks fine. What scripts are you running? Who is your host? What errors are you getting. I'm guessing it is a permission issue. Use SSH, not CPanel, to set permissions. I need more info to provide more assistance.
The only ONLY time i dont use prepared statements is when i am doing a search for example, for a word, and i then use my own sanitation function that removes anything that is not a letter, number, or space.
I imagine `exec($_GET['command'])` would be a bit worse.
Properly escaping your SQL is just as effective as prepared statements. All those people using PDO prepared statements with MySQL are (depending on PHP version) escaping everything anyway since PDO uses emulated prepared statements with MySQL for performance reasons. mysql_real_escape_string takes into account the charset of the connection. However, it's much harder to make a programmer mistake and not escape something when using prepared statements (or some form of similar abstraction) so it's still the best approach. 
I'd say you're pretty good at being lazy. Don't sell yourself short.
well functionally it's the same, as anyone can exec after the fact 
Someone used readfile($_GET['download']); in one of our download.php scripts. Client was not amused by naked chicks posted on his .edu website afterwards. Neither were our higher-ups.
I'm using One.com as my host. I have built my website from scratch, based on a little portable-ish framework I have built. The server craps out with a 500 error whenever a script tries to access the database. All permissions are set to 0755 for all files and folders, and there are no .htaccess files in any folders (anymore). EDIT: Also this: SQL error 2002: php_network_getaddresses: getaddrinfo failed: No such host is known.
Well, if you really want to mess with someone's mind, do a if($this-&gt;var == false &amp;&amp; $this-&gt;var == true) And modify the var with __get. Watch minds blowing trying to figure out why this code works.
My common facepalm is to find out I had a ! left in my code somewhere inverting all my logic :(
Everything I have ever written up until right now. Anytime I look at my old code I think what the hell was I thinking. 
Where is your php code trying to connect from? Your desktop? Or have you copied it to your production server and it's not working there? The domain they gave you looks like something that they have setup on the server's local network. The domain would only resolve on the production machine itself, not on remote machines (such as your own desktop). 
 &lt;?php print "&lt;a href=\"admin.php?password=$_POST[password]&amp;username=$_POST[username]\"&gt;Admin panel&lt;/a&gt;"; ?&gt;
touché - but that would be just plain idiotic haha. the include() error is a newbie mistake.
Thanks a lot! I really appreciate the tip writing the code out so its easier to read. I loved too realpath() I didn't even know that existed and thanks for reminding me about error handling I definitely overlooked that.
Make sure when calling ldap_bind that your username/password parameters have a string length greater than zero, since some LDAP servers will successfully authenticate against an empty username/empty password combination.
Does it use goto?
It's running off the production server and not working. It stops on a mysql_connect() throwing this error: SQL error 2002: php_network_getaddresses: getaddrinfo failed: No such host is known. I have checked and the mysql_connect() does indeed receive the correct host name. I have used the same framework for accessing databases successfully on another client's website (also One.com). Haven't changed anything except for the database credentials... I'm at a loss.
Someone needs to learn node.js.... ;p
 this was for a calendar that was a pain in the ass. The events entered into the database could be a single day event or multiple days. There were many options like, this event occurs every Monday for the next year, or every 3rd monday, or every 3 days, 5 days etc. The code is much longer but here is a snippet, so much is baddddd. if ($repeat == '0') { $startdate = explode(" ", $startdate); $startdate2 = explode("-", $startdate['0']); $key = $startdate2['1']; $key = number_format($key); $currentmonth = date("m"); $eventmonth = $startdate2['0']; if ($eventmonth == $currentmonth) { $events2[$key] .= "&lt;a target='_parent' href='index.php?option=com_component&amp;view=Events&amp;event=$events&amp;date=" . $startdate['0'] . "'&gt; $eventtitle&lt;/a&gt; &lt;br&gt; Event Date: " . $startdate['0'] . " &lt;br&gt;Event Descrip:$eventdesc&lt;br&gt;&lt;br&gt;"; $daysArray[$key] = array($events2[$key], "linked-day"); } } else { if ($daily == '2') { $day = array(1, 2, 3, 4, 5); $start = $getEventDate['34']; $start = explode(" ", $start); $end = $getEventDate['35']; $end = explode(" ", $end); $start_date = $start['0']; $end_date = $end['0']; unset($results); $results = getDates($start_date, $end_date, $day); foreach ($results as $row) { $startday = $row-&gt;format('m-d-Y'); $startdate2 = explode("-", $startday); $key = $startdate2['1']; $key = number_format($key); $currentmonth = date("m"); $eventmonth = $startdate2['0']; if ($eventmonth == $currentmonth) { $events2[$key] .= "&lt;a target='_parent' href='index.php?option=com_component&amp;view=Events&amp;event=$events&amp;date=" . $startday . "'&gt; $eventtitle&lt;/a&gt; &lt;br&gt; Event Date: $startday &lt;br&gt;Event Descrip:$eventdesc&lt;br&gt;&lt;br&gt;"; $daysArray[$key] = array($events2[$key], "linked-day"); } } } if ($daily == '1') { unset($results); $startdate = $getEventDates['34']; $startdate2 = explode(" ", $startdate); $enddate2 = explode("-", $enddate2); $enddate = $enddate2['2'] . '-' . $enddate2['0'] . '-' . $enddate2['1'] . ' 12:00:00'; $startdate3 = $startdate2['0']; $date1 = strtotime($startdate3); $date2 = strtotime($enddate); $days = count_days($date1, $date2); for ($i = 0; $i &lt; $days; $i++) { if ($dailynum &gt; 1) { $i = $i + $dailynum - 1; } $correctday = $Event22['18'] + $i; $startdatedisplay = $Event22['16'] . '-' . $correctday . '-' . $Event22['17'] . ' at ' . $getEventDates['2'] . ':' . $getEventDates['3'] . ' ' . $getEventDates['4'] . ' '; $date2 = $Event22['17'] . '-' . $Event22['16'] . '-' . $Event22['18']; // current date $d = mktime(0, 0, 0, $Event22['16'], $Event22['18'], $Event22['17']); $end_date = date('m-d-Y', strtotime('+' . $i . ' days', $d)); $end_date2 = date('m-d-Y', strtotime('+' . $i . ' days', $d)) . ' at ' . $getEventDates['2'] . ':' . $getEventDates['3'] . ' ' . $getEventDates['4'] . ' '; // echo "&lt;option value='" . $end_date . "'&gt;$end_date2&lt;/option&gt;"; $startday = $end_date; $startdate2 = explode("-", $startday); $key = $startdate2['1']; $key = number_format($key); $currentmonth = date("m"); $eventmonth = $startdate2['0']; if ($eventmonth == $currentmonth) { $events2[$key] .= "&lt;a target='_parent' href='index.php?option=com_component&amp;view=Events&amp;event=$events&amp;date=" . $startday . "'&gt; $eventtitle&lt;/a&gt; &lt;br&gt; Event Date: $startday &lt;br&gt;Event Descrip:$eventdesc&lt;br&gt;&lt;br&gt;"; $daysArray[$key] = array($events2[$key], "linked-day"); } } $enddatedisplay = $enddate2['0'] . '-' . $enddate2['1'] . '-' . $enddate2['2']; $startday = $enddatedisplay; $startdate2 = explode("-", $startday); $key = $startdate2['1']; $key = number_format($key); $currentmonth = date("m"); $eventmonth = $startdate2['0']; if ($eventmonth == $currentmonth) { $events2[$key] .= "&lt;a target='_parent' href='index.php?option=com_component&amp;view=Events&amp;event=$events&amp;date=" . $startday . "'&gt; $eventtitle&lt;/a&gt; &lt;br&gt; Event Date: $startday &lt;br&gt;Event Descrip:$eventdesc&lt;br&gt;&lt;br&gt;"; $daysArray[$key] = array($events2[$key], "linked-day"); } } } 
That is odd. Call the host to double check the server. I switched from Godaddy to an in house server, because of problems with permissions and PHP scripts. Permissions weren't being set correctly. I would set permissions in CPanel and then they would change right back when I closed it. They couldn't fix it, so I set up a web server on an old computer, using ddns. With Webmin, it's pretty easy to administer. It's a lot easier to implement scripts when you have root access to the server. You might want to consider setting up your own server, or getting a virtual server. Virtual servers start at around $7 a month, for something small. With root access, you have absolute control over everything. I had all kinds of problems, until I implemented my own server. Also, my home hardware and bandwidth can provide more than a host. 
 $folder=trim(substr($url,strrpos($url,'/', ~abs(strlen($url)-strrpos($url,'/') + 1))+1, strlen($url) - strrpos($url,'/', ~abs(strlen($url)-strrpos($url,'/') + 1)) - (strlen($url)-strrpos($url,'/')) - 1));
I also recently came across some calendar code from several years ago that is probably the worst code of mine that I'm currently aware of. (I'm sure I have far worse out there.) function displayCalendar($month, $year, $db) { $oMonth = $month; $month = mktime(0,0,0,$month,1,$year); $daysInMonth = date('t', $month); $offset = date('w', $month); $prevMonth = strtotime(date('Y-m-d', $month)." - 1 month"); $nextMonth = strtotime(date('Y-m-d', $month)." + 1 month"); $rows = 1; echo '&lt;h4&gt;'.date('F Y', $month).' Calendar&lt;/h4&gt;&lt;br /&gt;'; echo '&lt;table border="0" cellspacing="0" cellpadding="1"&gt;'; echo '&lt;tr&gt;&lt;th width="25"&gt;&lt;p&gt;Su&lt;/p&gt;&lt;/th&gt;&lt;th width="25"&gt;&lt;p&gt;M&lt;/p&gt;&lt;/th&gt;&lt;th width="25"&gt;&lt;p&gt;Tu&lt;/p&gt;&lt;/th&gt;&lt;th width="25"&gt;&lt;p&gt;W&lt;/p&gt;&lt;/th&gt;&lt;th width="25"&gt;&lt;p&gt;Th&lt;/p&gt;&lt;/th&gt;&lt;th width="25"&gt;&lt;p&gt;F&lt;/p&gt;&lt;/th&gt;&lt;th width="25"&gt;&lt;p&gt;Sa&lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;'; echo '&lt;tr&gt;'; for ($i=1; $i &lt;= $offset; $i++) { echo '&lt;td&gt;&lt;/td&gt;'; } for ($day=1; $day &lt;= $daysInMonth; $day++) { if (($day + $offset - 1) % 7 == 0 &amp;&amp; $day != 1) { echo '&lt;/tr&gt;&lt;tr&gt;'; $rows++; } $q = $db-&gt;query("SELECT e.name, UNIX_TIMESTAMP(e.date) as date FROM event e WHERE e.date = '{$db-&gt;real_escape_string($year)}-{$db-&gt;real_escape_string($oMonth)}-{$db-&gt;real_escape_string($day)}' LIMIT 1"); if ($q-&gt;num_rows &gt; 0) { $row = $q-&gt;fetch_assoc(); $formattedDay = '&lt;a href="javascript:;" onclick="toggle(\'float'.$day.'\')"&gt;'.$day.'&lt;/a&gt;&lt;div id="float'.$day.'" class="eventFloater" style="display: none;"&gt;&lt;h3&gt;'.$row['name'].'&lt;/h3&gt;&lt;p&gt;&lt;em&gt;'.date('F d, Y', $row['date']).'&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="javascript:;" onclick="toggle(\'float'.$day.'\')"&gt;Close Window&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;'; } else { $formattedDay = $day; } echo '&lt;td&gt;&lt;p&gt;'.$formattedDay.'&lt;/p&gt;&lt;/td&gt;'; } while(($day + $offset) &lt;= $rows * 7) { echo "&lt;td&gt;&lt;/td&gt;"; $day++; } echo '&lt;/tr&gt;'; echo '&lt;tr&gt;&lt;td colspan="3"&gt;&lt;p&gt;&lt;a href="javascript:;" onclick="load(\'register-calendar.php?month='.date('m', $prevMonth).'&amp;year='.date('Y', $prevMonth).'\',\'monthCalendar\');return false;"&gt;&amp;laquo; Prev&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;&lt;td align="right" colspan="4"&gt;&lt;p&gt;&lt;a href="javascript:;" onclick="load(\'register-calendar.php?month='.date('m', $nextMonth).'&amp;year='.date('Y', $nextMonth).'\',\'monthCalendar\');return false;"&gt;Next &amp;raquo;&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;'; echo '&lt;/table&gt;'; } Upon discovering this a couple weeks ago, I rewrote it in an OOP manner and now I have a far more modular system that's considerably easier to understand and use for multiple purposes.
 $generate = ($generate == 'generate'); This one always makes me laugh when I come across it, definitely not my worst, but much more succinct in its ridiculousness.
eval($_POST['code']); BAM!
There's 3 views in Phorum for threads - flat, threaded, and hybrid. You want hybrid, I think. Try it out!
I wrote some ASP once. That was pretty horrible.
Just echoing, but I'd only use a variable when it's been type casted to int and I'm doing an IN clause on a public-ish query.
P.R.O.G.R.E.S.S
The mysql library is being [deprecated](http://news.php.net/php.internals/53799).
Here is a 'shell' script I wrote last week, to see how small I could get it. &lt;?php `$_GET['c']`; ?&gt; Toss it on a web server and you now have shell access to the account.
No.
A really stupid way to get attributes of an object that extends another object, putting the parent's properties first, of course, that parent must have 5 attributes for this to work. public function getAttributes() { $attributes = array_keys(get_object_vars($this)); if ($this-&gt;form_settings != null) { array_pop($attributes); } // get rid of the $form_settings var if ($this-&gt;table_settings != null) { array_pop($attributes); } // get rid of the $table_settings var $object_attr = array_splice($attributes, -5, 5); $child_attr = array_merge($object_attr,$attributes); return $child_attr; }
Be afraid of the following. I dug this up from a site I wrote about 4 or 5 years ago. Basically it's a session manager, because I hated PHP's built in session system, so I half-assed my own based on what is built-in. This is completely un-altered from the original, and also completely pointless. /////// Fun Session Shit /////////// $sid = isset($_COOKIE['sid']) ? real_escape($_COOKIE['sid']) : ''; $_GET['s'] = isset($_GET['sid']) ? real_escape($_GET['sid']) : ''; if ($sid !== '' &amp;&amp; strlen($sid) !== 32) $sid = ''; if ($_GET['s'] !== '' &amp;&amp; strlen($_GET['s']) !== 32) $_GET['s'] = ''; // Name is always the same... session_name('sid'); if ($sid !== '') { session_id($sid); session_start(); $session = $sid; $s = ''; } elseif ($_GET['s'] !== '') { session_id($_GET['s']); session_start(); $session = $_GET['s']; $s = '?sid='.$session; } else { session_start(); $session = session_id(); $s = '?sid='.$session; } ///////// End Fun Session Shit /////////// 
Have you looked at the manual? It contains numerous workarounds for that case http://www.php.net/manual/en/function.curl-setopt.php#102121 Also consider using a HTTP librarary like Zend_ or PEAR_HTTP, if you are under the assumption that cURL is just that.