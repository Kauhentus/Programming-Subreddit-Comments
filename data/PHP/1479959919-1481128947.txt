It's not impossible to make safe, but search GitHub for the function and amateur projects will feature disproportionately in your results.
Check out Laracasts. They have sales going on now - https://laracasts.com/sales/2016
I use it in Airship, and I'm [relatively sure this isn't exploitable](https://github.com/paragonie/airship/blob/aa218dc07be80f00bfe484695a0717ec76c4762a/src/public/index.php#L105-L122).
See this is what I'm talking about. Not in a hot code path. Not appearing to take user input. Escaping anyway. Significantly different from [one of the first GitHub search hits](https://github.com/BDeliers/GestionRaspberry/blob/101c0f524298a1b114fbb3f80ea5ee834cb1a71b/GestionRaspberry/actions/commandes.php). Of course, it's been "secured" !https://github.com/BDeliers/GestionRaspberry/commit/3332ae18b56a9d8c075ddcdad1bf78bc9e555e52 PS Can you make me feel less stupid and show me where ROOT is defined?
/preload.php
I don't understand what any of this has to do with changing `string(10) "mypassword"` to `HiddenString` in the stack trace.
I do exactly the same. It's a very minor point, but your &lt;title&gt; text on https://github.com/paragonie/airship/blob/master/src/error_pages/old-libsodium.html is wrong.
&gt; I'm betting /u/AiiiiiiLmao means something more like "flush output as it gets generated." Indeed. &gt; For that you can call $response-&gt;setContent($myInvokable), where $myInvokable is a closure, or an object with __invoke() defined. Therein, you can generate your output piecemeal and echo each piece (or write it to STDOUT, or whatever else you like). If I just echo it (and it's not buffered by the caller) or send it to STDOUT it'd be unfortunate leak of abstraction, because the purpose of this extension is supposedly to get away from globals. Well the default context of echo, STDOUT, and writing to STDOUT via other means *is* a part of the global nature of a response, it's not different than dealing with $_GET, $_POST and so on. Ideally any wrapper around the global request/response mechanics would provide a thin encapsulation layer which allows one not just to supply input from alternative sources, but also direct output to alternative sources. Otherwise all that's left is the fancy syntax change. And it's not much of a win, to be honest. I have a similar minimal wrapper around "RequestReader" and "ResponseWriter", much like your two object, in userland. The sole purpose I did it is so I can run my PHP in alternative setups, say, a persistent process with a server, or a persistent process communicating with a server over named pipes (FastCGI style). In this context the invokable would preferably work similar to a simple iterator (or *as* an iterator), where each time it's invoked it returns a string, part of the output, and when it's done, it returns null. Where that string goes can then be decided by the caller. Using echo might work, if it's explicitly documented the output might be captured and redirected, and that direct writing to STDOUT (via fwrite etc.) is not allowed.
Lolz, by custom theme i mean other than standard theme of that subreddit, like classic reddit theme. You are still on burn.
I'll keep it in mind, but are there no more options?
I wouldn't want to be your client, if you bill your clients for removing anything that isn't done in your personal favorite way.
Thanks, but I was referring to the `ls` built-in command within the PsySH REPL ;-)
I'm just being nitpicking about the status code but 202 Accepted would be better if there is no other content to show(which there shouldn't be).
&gt; This is more a problem of perception rather than a problem with PHP itself. It's one of those articles where the author is fighting a non-specific collective straw man, who doesn't like PHP. The solution is: go back to work.
The real question here is why are people constantly porting functors and monads from other languages as if it'll automatically make their code better.
Thanks for your explanation. But... I think many of the explanations I've seen, including this one, suffer from the same problems: - The explanation copies terminology and function names from Haskell and co. which are redundant in PHP, or only serve to confuse (i.e. "unit" is superfluous, we have a constructor. "fmap" is superfluous, we can call -&gt;map($fun) directly). - Once the definition of the primitives is given, the tutorial abruptly ends, leaving us with a big "what was that about" in our heads, as no examples are given. And when examples are given, they're *always* the identity and maybe monads, very rarely the list and IO monad. As if it's literally impossible to give another example, which speaks poorly for a concept touted as universal. Another thing is, in OOP languages we already implement variations of functors and monads, without calling them so, so the concept of flattening, mapping and wrapping values in objects are not foreign to OOP programmers. There are a bunch of high-order function equivalents in OOP languages, like dependency injection, strategy pattern, chain of command and so on.
&gt; You are right that it is difficult to extract and explain a single piece of the puzzle without seeing the rest. The question is what do we need Haskell's puzzle for in PHP. And the answer is frankly... nothing. PHP doesn't have Haskell's problems. It has its own problems which are solved in a way more similar to the imperative OOP languages of its class. &gt; Re fmap() it is important to understand that fmap() is a generic function, hence it can be composed with other functions, etc... while $F-&gt;map($fn) depends on $F. What's important about it? All it does is call the method... so we're still dependent on $F-&gt;map($fn). You don't need to naively compose functions in PHP. There's ecosystem and facilities built around it. You can instead put together statements which map output to outputs in whatever order and fashion you prefer. This is not Haskell. &gt; Re List I don't know whether, again in the context of PHP, it helps understanding given it's already built in the language. Well, "null" is also built into the language so we don't need Maybe, either. &gt; This is how IO works, namely it doesn't apply functions, it composes them for later application and thus builds up the computation of the program. Right, but why would we need to use the terminology from Haskell for this? In an OOP language, we call this simply the "Builder pattern", or the "Specification pattern" or a bunch of other variations of it. &gt; However it is interesting to see these mathematical patterns in their full generality. The problem is these patterns exist to serve a purpose. Haskell requires monads in order to escape its own limitations of maintaining state and applying effects. This is a problem PHP doesn't have. And this what's lacking in most functor/monad tutorials as applied in mainstream imperative languages. There's no purpose to them. &gt; Not as many knows that lists can be mapped over precisely because they are Functors and thus anything that is a Functor can be mapped over. Lists are not "functors". They can be expressed as functors, but they don't have to be.
What does this give me vs say [Xdebug](https://xdebug.org/)?
for production https://sentry.io 
So just checking im not missing something completely obvious here but on Linux I always end up downloading the .tar archive and having to extract it etc... Not that it matters much but I can be lazy... PhpStorm doesnt have an internal updater right?
i've heard prestashop is moving to symfony. Not sure.
Of course it should. Corrected, thanks.
Somebody mentioned Jetbrains Toolbox a few days ago in this subreddit.
Will maybe give it a try. Is something provided for versioned API's? /api/v1 -&gt; /api/v2 or similar?
*cries*
I'm really sorry but there will be no patches this time from the previous major version.
I'm afraid that won't happen because this hasn't received all that much publicity in the end even if there have been a few threads here and there. Would need to be on the front page of HN or something like that for them to really feel compelled to reply.
Ubuntu-Make installation: https://wiki.ubuntu.com/ubuntu-make
I just extract the tar to a new directory and then update my symlink to the executable. This way if something breaks I can just change the symlink back and I'm good to go.
&gt; Opening multiple projects in one frame Thank you JetBrains! I've been wanting this ever since I switched from Zend Studio years ago.
Cool! First time I'm seeing semantic highlighting. Just enabled it and loving it so far! Although some code tends to look like a unicorn vomited all over it. Maybe it's an indication I should refactor it. Also really awesome that they worked on the version control tool window. The old version control window was really slow for me. Most likely because a combination of pc specs, the whole codebase being loaded through smb and symlinks everywhere. Now it's just \*poof\*, instant. Plus it looks more slick, in my opinion.
/r/programminghorror/
Is it just me, or are you failing to account for the fact that the call can fail? Your `continuum.php` appears to return a non-zero if it fails, but you'd never know if that happened. Also: Why shell_exec at all? You aren't actually using any shell features, so why needlessly include all the potential for more explotability? 
I swear as a programmer these days I just scroll through the 'this supports...' nodding and thinking "I don't have a clue what any of these are and why I would need them".
The documentation is in Spanish?
si
Aww yes, the backward engineering. I like the spirit.
Does anyone know if [parameter hints](https://youtu.be/ZfYOddEmaRw) like in IntelliJ IDEA will be a added to PhpStorm as well?
I can guess the work flow: 1. Google: how to get date and time in PHP. 2. Copy and paste first entry in stackoverflow. 3. Run the program and realise the format is wrong. 4. Google: how to replace characters in PHP. 5. Copy and paste first entry in stackoverflow.
Shouldn't `Maybe::map` return `new static(new Nothing)` instead of `new self(new Nothing)`? ^(since it's not final)
This code is so terrible that it actually took me a second to figure out what it was doing. I mean, it's pretty obvious, but my brain could not comprehend that someone would create something like this, so it refused to accept it. Wow. Just fucking wow.
@op: I hope you didn't find this gem in a project you have to work on. For someone who thinks the code is a neat trick... Please use DateTime::format() for stuff like this: http://php.net/manual/en/datetime.format.php Even date($format, strtotime($dateTimeString)) would do the job. RTFM: http://php.net/manual/en/function.date.php
Codecourse on YouTube is awesome! Thanks for this. 
for admin /r/django is the best try it once. i know symfony and django for admin i prefer django.
The directions on shampoo are just for light reading while taking care of business.
Plain old `date('YmdHis')` will do it.
You're saying we have a programmer who is proficient with Googling, copying and pasting, but they can't read code, so they just keep adding snippets until they sum up to the results they need. A fascinating discovery.
The CWG started looking for a way forward in 2014. This led to the "Action plan" (https://www.drupal.org/node/2504989) as posted. The "Ban chx" issue on https://www.drupal.org/node/2825885 has some extra information. Note that the request to ban came from chx himself.
&gt; these modern formats gives you HATEOAS support out of the box (the famous "graal" heralded by Martin Fowler in his "REST maturity model"). I'm not asking what imaginary powers Martin Fowler will give me if I collect all the chaos emeralds, I'm asking what are the actual benefits of all this stuff. "Self documenting, self discoverable" - do you mean, **for real**, I can just tell you "I provide an API at this URL" and your client will just somehow make use of it without writing a line of code dedicated to my API? Because this is what the web is, indeed, but it's not what this soup of formats is. BTW, the REST maturity model was authored by Leonard Richardson.
&gt; Integration with mysqldump and g_dump utilities Do they mean pg_dump?
Or for PhpStorm only, I use this [phpstorm AUR package](https://aur.archlinux.org/packages/phpstorm/). 
As you say there's no magic, you still have to write code for your client. But the cool thing about HATEOAS is that all further operations, sub-resources, resources properties, next/previous page, etc. will be linked directly in the JSON response. This is what the web is, but for machines :) Here's an example for one of the most recent formats, hydra: https://www.hydra-cg.com/spec/latest/core/#using-hydra 
One law for functors is `map f . map g = map (f . g)` where `.` is function composition, i.e. `(f . g)(x) = f(g(x))`. Knowing that lists are functors, this law basically expresses the fact, that you only need to iterate a list once, even if you perform multiple transformations on the values in the list. Say you do some kind of accounting software and you have a list of prices of items. You might want to first give a discount on every item and then calculate the VAT for the remaining value. You could then do this in one iteration over the list, by applying the discount first and then calculate the VAT directly for every item, instead of iterating a first time to get the discount price and then iterate on these prices to get the VAT. This might be fairly obvious when the example is presented like this, but imagine a real world situation where you might or might not give the discount and maybe also have some other transformations on the price, maybe even depending on item properties. Would you have seen the possibility to first stack all required transformations and then apply them at once to every item? Knowing that list is a functor makes this a lot more obvious to me.
That's dope... I really like that
/r/badcode I nearly threw up in my mouth. 
And thank you for using it! :)
Just so you know, you could do the exact same thing without Carbon and just one `date` call. Carbon is awesome, but completely overkill for what is being done here. 
"Obtain long date for the data to send".
If only he would have figured out that's how the first argument to date works too.
I'm in charge of this project now... I was just doing a code review... The are plenty of things like this =/
May god have mercy on your soul, you innocent child.
Thank you for the idea! Please vote at: https://youtrack.jetbrains.com/issue/WI-34033
This is decidedly not the web for machines, unless you have to write a separate browser for each site you visit. All I see is a bunch of over-engineered formats that are solutions in search of a problem. Flash in the pan and forgotten before they even get used for something interesting.
Was the recommendation to ban him in response to the issue he created requesting it?
Swagger support gives you a nice human-readable documentation, a sandbox and the ability to instantly generate clients for a bunch of languages using https://github.com/swagger-api/swagger-codegen JSON-LD allows to improve SEO just by embedding the API response in a &lt;script&gt; tag in the HTML code of your website, example with the API Platform website: https://search.google.com/structured-data/testing-tool/u/0/?hl=fr#url=https%3A%2F%2Fapi-platform.com%2Fdocs%2Fcore%2Foperations JSON-LD also allows to aggregate data from different sources (cross your API's data with data from DBPedia for instance) with tools like Apache Jena https://jena.apache.org/ Hydra makes your API auto-discoverable. It allows to generate admin without writing code. Example with AngularJS: https://github.com/api-platform/admin Example with React: https://github.com/Simperfit/api-platform-on-rest To get a working admin for all resources exposed by your API, you only need to configure the URL of the API. Using API Platform, you just have to write some PHP entities representing your data model and to add one annotation to each one to have a basic CRUD API compatible with all these things. And if you don't like hypermedia formats, you can also use plain old JSON (or XML) while benefiting, it's anyway easier than writing your API by yourself. Is it more concrete?
To be fair, I hate PHPs documentation. That being said, this is a hopelessly clueless programmer.
What's wrong with the docs? They're not super easy to search, but Google will usually find what you're looking for over their search.
Use the EAP. I can't afford a license right now either. If you're on a Mac, just `brew cask install phpstorm-eap` if you have the `homebrew-versions` tap.
Repost: https://www.reddit.com/r/PHP/comments/5ep5l4/5_variables_in_php_how_to_declare_and_name_a/
Hmm, they does seem to be easier than I remembered. Maybe they've been improved, or maybe I'm just a better programmer than before! I still don't get the purpose of "User Contributed Notes." For example, on the strstr func page: http://php.net/manual/en/function.strstr.php The most upvoted user example doesn't even use the strstr function. I find this section to often be unhelpful. Overall the site has improved though. And it's a hell of a lot better than Golang!
The CWG should do its business in public with full transparency. Then we wouldn't have half baked summaries floating around the internet leading everyone to draw their own conclusions. It would also prevent the very real issue of some people outside the CWG, somehow been, "In the Know" 
I really wish my vendors directory was still part of the php libraries. They should be. They shouldn't really be included in the project files at all... As if they're sources you should be editing. Phpstorm &lt; 2016.3 handled this better in my opinion. I know they did this so that they files weren't "included" twice. But, I fell like it's backwards. 
Thanks. I'm on Arch but I'll give it a try anyway.
Tests passed!
Yep, you're right. PhpStorm is awesome and I will definitely buy the licence soon. I use the key as a temporary solution.
Now that is just unfortunate.
I'm not sure it's helpful to downvote this. Sure, it's overkill, but it is relevant to the conversation! Not saying that you are specifically.
Do you mean the User Contributed Notes? That's the same conversation I just had with another guy on here. TBH I hadn't looked at the documentation in a long time. I'm a much better programmer now, and it all makes perfect sense.
No, I think he means all the early PHP 4 and late PHP 3 "tutorials" that every "developer" put on their blog that were crappy then and just downright wrong now.
Anyone else getting "php_network_getaddresses: getaddrinfo failed" when running phpunit tests using the new Docker interpreter with a container that runs within docker-compose that links to separate containers for db/etc?
We're using JSONAPI heavily at work and it's in fact wonderful. They've solved many of the usual hurdles of writing complex APIs by normalising a flexible yet perfectly defined request and response format in a manner that's easy to implement, and to understand. 
Oh. Shit. Accenture isn't like that *just in my country* ?
Offline?
Python docs are pretty sweet.
So... `$dateLong = date('YmdHis')`
I'm pretty high (hence why I deleted it, I didn0t want to go on a chat BUT) yes. Offline. You can download the whole PHP documentation in a `.hlp` file that's searchable and linkable. lemme google it, ~~I shall be back~~ [here](http://php.net/download-docs.php) It.. it was one of the best one-week vacation without internet I have ever had. (not counting the years I was a blissfull hcild, ofc)
`my coordinates are: str_replace(" ", "", "Norte: 46° 32\" 59'") ...`
You probably haven't seen the Java docs if you think php is bad.
Ahhh, that explains why my `ls` doesn't have `--grep`! I've looked at PsySH and thought it was cool, but only really played with it via `php artisan tinker` thanks to Laravel making it a part of the framework
&gt; To be fair, I hate PHPs documentation. Uh, what? Of all the things to hate about PHP, you hate arguably one of best perks of the language? The PHP documentation is phenomenal. If you can't understand how to manipulate `date()` by looking at the PHP docs, you might just be retarded.
Dates are almost unbearable in JavaScript without moment.js
Y-m-d H:i:s is still just as easily sortable, but *much* more human-readable.
How did you possibly get 15 seconds in that test? Under my very crappy windows environment I get 0.00030 / 1.25677 / 0.00755 edit: _Submitted on 07.28.2008 by Chan, Kai_ oh, down vote time I guess...
Unless it is .Net
Like how I am reading this...
One of my favorite blog entries on the subject : http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time
Yeah, who uses spaces as indentation?
This is the work of someone who doesn't understand the code they are writing. 
The logic is a bit circular. Since it takes 4 lines to format the date, better move it into a function. 
Have a question: basically when would this be useful?
I'm not sure wether the dispute process in public would be very conductive to the mediation efforts. The CWG does (or did) publish meeting notes however. 
So.... the API Platform most useful only for cases when you can map resources directly to your data model on server? CURD-like APIs? I work with API development for about 5-6 years and this approach never worked for me. Yes, this speedup stuff a lot while you are working on small projects, but nowadays for CRUD-like apis I'll get firebase instead of writing my own api. p.s. Somebody please explain me value of hipermedia? For last year I tried to use it but developers who working on client side never found it valuable. They just don't care.
As a data scientist there are three things I hate: timezones, currency conversions and taxes. 
&gt; Ano ( ͡° ͜ʖ ͡°)
Or just: return date('YmdHis'); Edit: during my shower, I realized... this renders the entire function pointless, as instead of calling `$mydate = get_LongDate_amdhms();` you can call `$mydate = date('YmdHis');`
Phpspec support finally!
Okay, that's a terrible function...But it actually works. I don't know about you guys, but I've seen far worse. Just some days ago, I tested a job candidate. He wrote this as a solution to one of the tests: if(getStatus($isWinter){ echo $isWinter; }); When he had to debug some functions (simple 3-liners), he just switched the true and false return statements, thinking he "bugfixed" it because it now returned true. He had plenty of time to do the tests, we didn't ask him to write this while we were watching and he had access to internet to Google. On his website, he claimed to be a PHP developer.
Voted! To vote click the Up Thumb next to "Voters" on the right underneath the details table.
Don't compare Californian salaries with South American ones and assume they're underpaid. South Americans don't pay $3k a month in rent. A newbie who hacks drupal/wordpress makes twice the average wage, in Romania. As a senior, I work 3 days / month to cover the rent. Less than 2 days to cover a whole month of food delivery.
I've been using Sonata for almost a year now and it's both love and hate. The love is for all the awesome work that is done that will save you so much time. The hate is for it being slow (although this is probably more Doctrine ORM related) and sometimes hard to adjust to the needs of a project but overall everything can be done since it follows the bundle best practices. The docs could be better but then again, I should contribute more to it myself to make it better.
ugh I agree, spaces instead of tabs? What monsters.
si($qué){}?
Sonata could be great, it's very powerful. The utter lack of decent documentation makes it useless though...
&gt; the frameworks that make them powerful (i.e. Rails) and their popularity are fairly new-founded Ruby on Rails Initial release 18 December 2005;
Look, same as [xdebug](https://xdebug.org/docs/all_settings#file_link_format) and [Symfony](http://symfony.com/doc/current/reference/configuration/framework.html#ide)
Or even `$this-&gt;unit(new Nothing)` and the `unit` method should use `new static `
Very true even on new functions the user submitted examples seem to predate them, it's weird. /s
The option to attach to the current project appears only for action File-&gt;Open and not for File-&gt;Open Recent.
I found PHP's documentation one of the most comprehensive ones out there. Basically every function is described in detail, with very simple examples. The comments often add their own examples and notices as well.
Previously all files under vendor were duplicated in the project tree and in the php libraries. We've decided that this duplication doesn't make any sense and removed them from php libraries but they still behave in the same way. For example, refactorings won't affect them.
Thank you for noticing! The site and the blog have been fixed. 
I think it would be much better, lock down who can contribute but still have it all out in the open.
I started writing this post with examples in PHP, but I soon realized that the concepts were language-independent and that by switching to a fake generic languages I could focus on the concept rather than the implementation. Given that this a place I know better and is much smaller than /r/programming, I've prefered to get a first feedback from /r/php before sending it to a bigger subreddit.
I thought the same. I tried to get into it but it was a pain as soon as I tried to do something that wasn't intended by the bundle. In the end, I wrote my own CRUD generator bundle (based on SensioLab's one but with less redundancy, and once that integrates with a generic admin theme I use) and it's been a good compromise since it's easy to customize. 
A single article in a well-known language, personally. You could give examples in multiple languages, though?
Can you point me in the right direction please? Because I can't find the option... =/
I've created the following draft with the examples in Java: https://medium.com/p/f82f4accf266 Do you think it'd be useful to change the main article to look like this draft? In case of a positive answer, will it be removed from /r/PHP for being an article written in another language?
Te la encargo, papi. Bastante mal me sentía al ver el comentario en español como para ahora, esto.
In Fowler opinion, it utterly depends on usage. Sometimes it's quite easier to use: ```if ($this-&gt;getCurrentDateLong() == ...) { ... }``` then: ```if (date('YmdHis') == ...) { ... }``` especially when the given method is used more times. Since in the first way, you don't have to read `YmdHis`, instead you can read the method and from then on know what type of date string does it return in all project or space.
&gt; e la encargo, papi. Bastante mal me sentía al ver el comentario en español como para ahora, esto. jajajajaj una pija todo el código ameo
So basically extracting some code (assertions in this case) into a separate class? Tests are code too, you should use the same oop principles as in your main application source.
Yeah. Judging by the snippet, I figured the author probably assigned it to a variable, like: $mydate = get_LongDate_amdhms(); // call useless function fopen($mydate . ".log", "w"); // or something like that. If they can't even format a string properly, I don't expect them to use classes either.
I get paid 1k per month, and my rent is almost 200 dollars... Im single so im fine but i cant support a family 
To me, the draft is more readable than the original. It's mostly because I've seen enough Java to understand it - the pseudocode makes me pause momentarily why I mentally deconstruct the syntax. Not that it's impossible to understand, just a split second interruption. As for the post being removed, I doubt it, but I'm not sure you'll get too many upvotes.
I have indeed. I use the feature heavily. But I think the route cause is the ability to create tags doesn't work anymore. Normally when a tag is created I see a green bubble in the bottom left corner that basically says the tag was created successfully (the same dialog bubble when a merge is complete, or a push was successful, etc.); however, now I don't even see that bubble. Additionally, when I open a command prompt and run git tag, I don't see the tag in the list. The push may still be working, but creating tags doesn't. If no issue is created by the time I get home from work tonight then I'll create one. Thanks for the response!
Good, thanks for your feedback! I'll ask other people to see if they share you sentiment, in order to make the swap.
Handling dates yourself is generally a huge time sink and will almost always be wrong in some convoluted and hard to spot way. I won't touch them. Store everything server side as utc iso 8601 or unix stamp and use a library/language core features to handle (except in the simplest cases).
first stack overflow is actually: &gt; $date = date('m/d/Y h:i:s a', time()); You have to skip over 4 other sites that explain date formatting before there's a stack overflow result if you google "how to get date and time in PHP" though. 
If you just want to have debugging of runnable files (files where you can something like `php file.php`), it's actually pretty simple. Set up a remote interpreter for PHP in PHPStorm, and it should detect that the remote PHP Interpreter has XDebug. Then, you should be able to right click a file and hit debug. Honestly, this guide seems a bit over complicated...
yeah... I don't know about that, things in the vendor directory are "external libraries" by any definition. in &lt;2016.3 I would initialize composer which would set up the libraries, then I'd simply exclude my vendor directory.. I feel like that is exactly how it should be.
&gt; It makes PHP (of all languages!) seem like it's loaded up with self-congratulatory, elitist assholes. ^^^ This. So much this.
&gt; $name = "Daniel"; echo "My name ends in an '$name[-1]'. Nice!"; Oooo. I hope we get to have Pythonic substr soon. 
here's my set up with working completion the way I'm describing the workflow. http://imgur.com/a/W3hs4
That's actually my use case, I'm doing stuff like this in `php artisan tinker`: &gt;&gt;&gt; $repo = App::make(\My\Fully\Namespaced\ProductRepositoryInterface::class) &gt;&gt;&gt; dump($repo-&gt;find(123)) Would be nice if I could just type the first few characters of `ProductRepositoryInterface` followed by `&lt;tab&gt;` and then it'd cycle through all the possible values.
Everything in UTC seconds since 00:00:00 UTC on 1 January 1970. Math on time becomes so much easier. Your 'date' becomes an integer in the database. All difficult syntax shenanigans is shifted to returning or displaying the proper format. All bets are off for microtime, that's pro level attention to detail. But, don't listen to me, a stack-overflow cut/pasting hack that makes a little spendin' money from time to time.
Yeah I hate having to quit out and go back in again and then cycle through my history to find the sequence of commands I'd been running. With my work setup I'm running it inside of a Docker container so if I accidentally hit `Ctrl-d` twice then I've lost my command history when I go back in again, which really sucks. More of a limitation of my development environment than the REPL, but it'd be nice to have a built-in `reload` command or something so that I didn't have to quit out in the first place.
There's probably some good money to be made in a tax service. Trying to keep up with the complexity and changes is a nightmare. Turning it into an API call would be a godsend for small and medium sized ecommerce sites.
Thank you for the explanation. Could you please create an issue at: https://youtrack.jetbrains.com/issues/WI to get notified about the progress?
&gt; So many hours. My life has been wasted because of time... lol. true on so many levels XD
"which is already available in plain text on the server anyway" - it does matter if the password is stored once on the server or if it's stored in many places (eg if you have daily log files). If you move old log files away from the server, you also have the password off site.
I usually write my test methods to describe behavior, so generating methods that match the individual methods on the class is not very useful to me. Meaning I might have test methods like "it fails when x is invalid" and "it does the thing" instead of just "test Foo" and "test Bar". Related to your second question, I've been trying out [kahlan](https://github.com/kahlan/kahlan) lately and have found it to be much more enjoyable for writing tests like that. 
That's an interesting concern. I personally work with simple assertions that are quick to visually check if they are valid or not, but even in the more complex cases I tend to think they are tested as a by-product of the tests that are calling them. (Basically if I change an assertion I should probably see something failing somewhere.) It could very well make sense to verify that the most complex of assertions are actually working as intended. But then, should we also check the assertions that are inside each individual test (and not bundled together in this kind of "assertables")? I personally think the old *"comment the production code and see the test fail"* should cover most of the cases in which you're modifying an assertion.
Yes, that was the point I was making.
Ok. This is all just a weird thread since lots of PHP code and frameworks include the traceback in the logs and I've never seen anyone complain about it before.
Well, at least it's useful when working with list arrays and byte strings.
I completely agree. I wonder how much it would slow down the load time of `tinker` to scan all the files in the application directory. I imagine scanning `vendor` would end up taking some time.
The main question is; where is this superior to array_slice()? It's more concise, but not necessarily more readable. And it's also not particularly great, given that in PHP we have no separate arrays and dictionaries. I.e. take `[-1 =&gt; 1, 2, 3, 4, 5]` … What will `[1:3]` do? Take 3 elements starting at offset 1? Take elements from offsets 1 to 3? Take 3 elements starting at entry with key 1? [offset 1 means here the second element, i.e. `0 =&gt; 2` from that example array.] In PHP array indices refer to keys, and they're not necessarily identical to position in array. Having `[1:3]` now refer at something starting at the offset 1 would be quite inconsistent.... So… it's hard to get intuitive semantics here.
Like any great piece of PHP tech, it's great in features, but documentation is crap. Put your hand down, scour the internet and docs, read their code. Accumulate knowledge, it get's easier. Btw, same problem with symfony forms and how to override their blocks in more complex cases - docs basically give you a very dry example with no fu@@ing context on what's happening and basically feels like "Happy coding, MOTHE@@@R!". After a few hours of head bashing you get your stuff working. Until the next form, where you get hit in the proverbial balls again and take a few hours to sort it out. After that, well, quite good actually.
It won't be that significant; and regarding that, we just may implement an extra opcode for it, just like we do for strlen() currently, with it still using function call syntax. [Hint: it isn't worth it though]
Tldr 
`substr()` does exactly that; do we really need a syntax to save 6 chars? Is there a clear benefit I'm missing? [While `$foo[-1]` is also just `substr($foo, -1, 1)`, it is trivial to add, not needing new syntax or opcodes … so it's not really comparable] If we'd have something like partial strings in PHP, I'd see this viable for performance reasons, but currently? no not really. 
Hmm is there an opcode for count()? I find myself using this a lot more than strlen(), especially due to Unicode. 
Oh I'm not arguing that...it's not really a worthwhile feature. But one could have said the same thing about adding support for negative indices. `substr` takes a `length` though, not an end index. But it's pretty trivial to convert either way.
&gt; THIS IS **SHITTY** JOB RECRUITING SINCE I DON'T PAY AND AM JUST **SOLICITING FOR FREE** HELP! ^ There, I fixed that for you. Seriously, asking for free help for a commercial project based on "talking business" when finished?
I am just some random guy who has been working on a project alone for a year now... I need a partner/s for motivation and to finish faster. I don't have friends for that. By talking business I mean percentage according to contribution to the project.
It's worth noting that in the entrepreneur subs on Reddit, there are frequently posts from "ideas people" who are looking for developers willing to work for free in the faint hope their enterprise will turn a profit in the future. Maybe one in a thousand is worth a developer's time, but in general, a person of a reasonable skill level should usually turn such offers down. The best approach for you may be to expand on your idea - there are a lot of social networks out there, and you have some big players in the market to displace, as well as the inertia and network effects of those existing players. What are you planning to do differently? 
If you need code reviews done, I've opened a channel on freenode called #coderev.io. There's usually a few people online (though not many and mainly during European hours). I'm not really spreading this channel just yet, but the idea is to do code reviews collaboratively, for free, to share information and give insights to people who don't have access to code reviews not colleagues for example. I can't offer you free help for your project, but I (and others) can help by providing feedback and perhaps a different kind of PoV to problems.
Nice, but I know of at least two tools that essentially do that already and more. `Keepa` adds a price history right into Amazon and emails you when it drops below a threshold. No coding required.
In case you didn't see the comment above. &gt; appears only for action File-&gt;Open and not for File-&gt;Open Recent 
Is this a paid position?
Post at /r/forhire if it's paid, if it's unpaid don't post at all.
Why not? For example you have multiple projects which use the same libraries which are in vendor/myorg/mylib. You don't develop library and project separately but edit both at the same time till You got functionality right and then commit changes in separate repositories 
That's also right. This is one of the most important things why people need to use battle tested open-source frameworks. I mostly use Symfony myself and I am quite confident I will not have such problems with it.
Thank you very much. :)
I'm not entirely pleased with the fact that parser limitations dictate new syntax additions like that. It's like "that's too complicated to implement, let's use the less intuitive syntax instead". If we'd ever get the null conditional member access, it would be inconsistent because then you'd have the question mark coming after the variable name, e.g. $foo?-&gt;bar. Types and variables are of course different things. Thanks for the detailed answer.
&gt; What if you could make a website that consists of all the possible social networks possible? &gt; &gt; I think I found a way to make it without being too complicated. Pro tip: you haven't.
I downloaded the visual studio theme from phpstorm-themes, the first one. It had some problems, but I liked it (could not bear the darcula palette). It requires some modifications tho. I finally realized something, maybe the beautiful class names in Cyan dont belong to PHP, because it is not so typed as C# etc, so you dont see them often and you start asking yourself is this the right theme what i've done etc. Shots : http://imgur.com/a/NwLWm (note the string color not orange (modified). Also note that variables are purple by default, which is never shown in screens. Also note that by default a lot of things are straight white, like when you use android studio and think IDE is not working because of that) (Oh and JS is super ugly, you should take some time for it (but cyan divs are gorgeous)) 
I quickly checked your comment history and it says you've been working on this for a year and you find it discouraging to work by yourself for that long. I understand you. I think you need to read how to create a MVP (Minimum Viable Product) and run with it. Don't try to reach your full vision from version 1, this is a recipe for failure. Also you need to realize that the most important asset for a social network isn't the code making it up, but the mindshare of its users. And you can't get mindshare by simply promising "the best social network". Think about someone pitching you the best bar ever, but it's always empty... who would go there? Getting a social media going is a lot more of a business/marketing effort than a programming effort. You need to have a solid plan how to get your first few thousand people in, and it won't be with "more and better" software features... 
Reading the issue that /u/HiddenIncome linked does give the picture that your solution was probably technically superior but there were valid reasons to not go with it when you were absent and even commit access couldn't be gained according to their story. I'm guessing there's more to it than that but I didn't really get a good sense of the actual injustices that you suffered during the process...
``` function showColor(?string $color) { ``` Wow. This is kinda ugly. Why not doing it like Swift with `String?` also way better to read...
&gt; # PHP DEVELOPERS WRITE BAD CODE &gt; &gt; **Short Answer:** &gt; &gt; You're kind of an idiot, but not completely. &gt; &gt; **Long Answer:** &gt; &gt; This statement, although incorrect, does have some element of truth to it. &gt; &gt; [...] &gt; &gt; So you see, it's people like that, that give us PHP Developers a bad name. Don't tarnish *(sic)* us all with that brush. I get it, I do. And in a way, I agree with him. Just because there are bad PHP developers out there, doesn't mean PHP developers write bad code. And I agree, don't tar us all with that brush. Having said that, I think he's wrong, because I know for a fact that there is much, too much PHP code out there that is so bad and insecure, I can't believe someone charged good money for it without breaking down, apologizing tearfully and asking for forgiveness, and anyone reading along who has had to maintain "legacy" PHP code will know exactly what I mean. I want to reiterate this. There is *shit code* out there written in PHP. Real, real bona fide awful crap. What's more, I suspect there's more bad PHP code on production sites than code in other languages. Both in absolute and relative terms. The fact is that there are many people out there who can do a bit of HTML and CSS, use Google to find a tutorial on how to build a contact form in PHP, and presto: they are now a PHP developer and will build contact forms for you if you pay them to. Or the guy at your local small business, who being the resident IT oddjob, sort of transitioned into becoming the company intranet builder/maintainer, and hacked together some horribly unstable and insecure PHP tools for the coworkers to use. See, it's so much easier to do something like this in PHP than it is in Java or .NET that it makes perfect sense that so many ignorant (can we start using this word instead of "bad" please?) programmers use PHP. I think that drawing the conclusion from this that PHP is bad is a fallacy (edit: in fact I think this accessibility is a *good* thing), but I think it's also a fallacy to go on and draw the conclusion that because PHP isn't bad, its users must not be bad either. In fact you can have the exact same line of reasoning for Photoshop. Photoshop is good, it's just that many people are using it to create crappy things. Nobody in the professional multimedia creation and editing community seems to be asking people not to tar them with the same brush as amateurs for using Photoshop, because it doesn't make sense. I too am tired of all the hating on PHP and its users because it's unfair IMO, but I do think there's a good argument to be made that PHP developers write bad code. I agree with him that this doesn't make all PHP developers bad, and doesn't make PHP bad, but that's a different discussion.
I like dark backgrounds, but that was kinda hard to read before I bumped the font size up.
It will only work for the latter. `$a[-1]` on an array is a valid key, not a reference to the last one.
Damn these overloaded arrays. 
&gt; Wow. This is kinda ugly. Why not doing it like Swift with String? also way better to read... This basically describes the state of PHP's syntax ever since its creation. But the feature is more important than the syntax. Maybe one day we might get a cleaned up syntax to go alongside the old, with alternative opening tags, like "&lt;%np", say for "New PHP" or something... A man can dream :-) &lt;%np use Vendor.Project.Bar; class Foo { private bar: Bar?; public constructor(Bar? bar) { this.bar = bar; } }
Imprimí todo el código, prendelo fuego y empezá de nuevo.
* /r/phphelp * ` $uploaddir = './';` refers to the [getcwd](current working directory), not the temp directory explicitly so you may wish to verify destination directory with realpath(), or use absolute paths by manipulating the contents of the [\_\_DIR__ constant](http://php.net/manual/en/language.constants.predefined.php) (commented edited for usefulness) * wondering what framework or snippet told you to add server-side verification check of MAX_FILE_SIZE into client-side generated code (i.e. don't trust user input ever) * if file A is larger than post_max_size, $_FILES does not contain accurately representation of files submitted. p.s., when in doubt, use copy instead of move_uploaded_file
Okay, so no upload errors. I think the issue is that you're placing the file in a different directory than you think you are. Try looking at the output of `realpath($uploadfile)`. Your files should be there.
LogFilename.php accepts a filename that is then passed thru 'date'. It is not clear from the phpdocs this happens, and I'm not sure wether this something the LogFilename should do. Or at least 'create' isn't the most obvious method name. Logger.php Uses $levels that do not refer to psr log's constants. It would be nice if it did. It also uses LogFormat as a static dependency - I can't inject another one to create a custom logformat (e.g. I'm missing the timezone in the default date format, and might want to add a {servername} to the log). Various phpdocs are just 'mixed', 'array' or simply missing - getting these more accurate helps using the code. Some remarks about your tests: testSettingPropertiesInLogger uses an actual local filesystem. If I have my permissons incorrect the test will fail - I would disagree with that. testLogLevels doesn't test if the filtering actually works, just that no errors are generated. testWritingArrayToFile test wether the result contains Array. The PSR says you may substitute {placeholders}, it'd be nice if you did so.
Thank you! I was able to get it to function properly with your help!
Thank you for taking the time to look this over and give me feedback. * I do care about performance. I'm not sure of a way to overcome the reading/writing with [Flysystem](http://flysystem.thephpleague.com/api/) using S3. * That is true and bad. * Interesting point. I intend to think more about this and try to find an ideal solution. My first thought was, I could keep a log file locally and then copy it to the other filesystem, but that doesn't sound good either.
Thank you for giving me some feedback. If you would like to create these as issues or an issue, that would be awesome, if not, I will probably add them. Or if you would like to do a PR, that would be cool too. I'll definitely add the `interpolate` method as you mentioned at the end.
S3 really is the wrong tool for the job here, even ignoring how easily this could run up a fairly hefty bill. What's your goal in trying to support it? There may be a more appropriate tool to use instead. 
streams...
Hmm. Interesting point. Thank you.
Thank you. As someone else mentioned, it doesn't appear like Flysystem supports locking files, other than the local adapter.
Daniel is everywhere!
Nothing wrong with that. Sounds like you're learning a lot from the project, which is really valuable! Plus you seem to have a great attitude when it comes to receiving feedback, which is also a great skill to have. (and let's be real - there's no shortage of logging libraries already)
In any case, whatever system you use, it has to have the ability to append data to the end of the log file. So that way you aren't reading the whole thing into memory and re-writing the whole thing again. I think that's possible with SFTP.
Now check out Guzzle for the next level up!
If the older CPU does have a larger cache as you hinted at that could explain it. However you'd really need to use some perf tools to get an idea of where they are spending their time.
Good idea. I'll strace a request on each with high time resolution and see if anything stands out.
This is true, I completely missed the part where OP mentioned they want to use S3. I think if you want to store logs in S3, a good approach would be to store them locally, and transfer old logs to S3 once per day whenever you rotate your logs (could add a post rotate script in the logrotate config, if you're on Linux and are using logrotate). Definitely don't write them to S3 in real time, that'll be slow and expensive. 
Well strace isn't going to work because it adds overhead on every call and the E3 executes that overhead faster. In a browser the E5 TTFB is 167ms; the E3 is 318ms. Stracing the call on the E5 is 548ms; E3 557ms. The E3 executes the overhead of strace faster and the execution times equalize. What other perf tool would be good to profile with that doesn't add so much overhead but shows the system calls? I could print this out and throw a dart at it :) http://www.brendangregg.com/Perf/linux_perf_tools_full.png
Please keep emojis away from your titles. It's obnoxious.
Don't see any useful packages under you gh account though
Holy shit T.I.F.L
Or just use DHC chrome extension if you like speed or productivity
Ever since I found [Postman](https://www.getpostman.com/) i dont think I've ever made another cURL line ;) 
&gt; you can test it on url shorteners, sponsor gateways, advertising clickthroughs That... Actually comes in handy. I usually just google for a url-unshortner when I want to know where the link takes me. 
I guess you need to spend a lot more time on the command line.
Time for group hug :-)
you might want to try https://www.reddit.com/r/PHPhelp/ and please format your code some some tags as this is currently very hard to read
It's not formatted correctly for reddit. Edit the post and click "formatting help" This will show you how to format so that it is treated as code.
4 spaces on each line would be better for this A block of formatted code goes in here 
I test my APIs with powershell. What am I missing out? 
&gt; for example using double backticks So this is how it's done... I've been looking for this ``forever``. God damn.
Can you elaborate? Is there a proper implementation of file_get_contents()?
Yes [there is](http://stackoverflow.com/questions/2445276/how-to-post-data-in-php-using-file-get-contents). You can use it to post data, similar to cURL, only it is not quite as reliable.
I spend all my time in command line lol
I've been burnt by this as well... It seems file_get_contents will randomly NOT follow redirects.
You can curl your own code with a content length of 0 to run multiple threads in parallel as well…
They aren't the same. Zend publishes their own. Not having seen Zend's, I don't know what the differences are.
I'm not quite sure I understand the benefits over cURL... can guzzle handle loading ajax and javascript? That's honestly my biggest (perhaps only?) need that cURL can't do for me. 
Okay, I'll go with the one from phparch then, thanks :)
&gt; is it possible for you to edit the code or tell me exactly what to copy paste into where? You know, people actually get paid for this kind of stuff. If you're not going to go through the effort of *learning* anything - "noob" or not - you should at least offer to compensate someone for their time. Your appreciation means exactly jack shit.
[It goes deeper](http://httplug.io/)
And wait till the day you get to use wget.
Also the ability to cache easily with Guzzle
Caching?
If the use case is headers, I suppose a better abstraction boundary would be to create a "HeaderList" object, then you can forget about a few more things and use a domain-specific API for dealing with headers :-)
What are you asking? Are you asking us to tell you what you need in order to achieve this on your own? Or are you asking us to just hand you a bunch of code you can copy and paste? If it's the former, you'll want to look into PHP (duh), Javascript, NodeJS, Socket.io, and how to run a server through something like DigitalOcean. Use Vagrant for local development. Laravel and Pusher if you want to cheat and have something up in less than an hour. If it's the latter, you can go to hell. Pay someone, or do some research. In either case, a [simple Google search](http://lmgtfy.com/?q=php+realtime+chat+room) can go a long way.
Thanks for the response. I'll check out my options with SFTP.
Thank you :) When I first wrote it, I wrote it to write locally, then tested other options. Then posted it here and learned a lot. Still debating on scratching the project. I also think, that you could have unlimited log files and directories on S3. So, it could have a directory for the year, month, date, and write a bunch of log fils in there. Or find a way to move them over after writing locally.
Thank you. I don't necessarily want to use S3, just thought it would be fun to have extra options; then I learned file locking is necessary with log files :)
Thanks for taking the time tot leave me some feedback. It is truly appreciated. I think the end is near, for this project.
I assume Today I Fucking Learned. 
[What have you tried?](http://mattgemmell.com/what-have-you-tried/)
I think FlySystem has an append() method by the way.
If i understand correctly, instead of loading lets say 8 images one by one you load them together? How does that effect server resource usage?
I gotta say, I really like the direction PHP is heading.
I'm not a PHP expert, but I know quite a lot about OAuth and OpenID Connect. I've been thinking about learning "modern" PHP (it seems to have evolved a lot since v 4 when I worked with it last). To do so, I was thinking of writing an OAuth/OpenID Connect "filter" that starts the request to a provider and processes the result. Questions: 1. Does PHP already have excellent components, so doing this will only be for my benefit? 2. Are there certain web frameworks that this filter should be integrated into? 3. When the response is consumed and an identity is created, are there certain constructs in PHP that should be hooked into (e.g., User.isMemberOf type stuff)? 4. When making API calls from a PHP web app, are there certain client side frameworks that the token should be made available to (e.g., cURL and Guzzle)? 5. To share the resulting module, is there a place for PHP like Maven Central for JVM languages to share the resulting binaries? TIA! 
UNIX
Why would you save logs in .text and not in MySQL?
Neither option is expensive (relative to the cost of the certification), so if you are serious about passing then get both. When I took the exam, I used uCertify to help study. Their software ran you through mock tests, and at the end of each on tells you what questions you got wrong and why - it prepares you for the format of the questions and lets you figure out for yourself where you need to focus your revision. I thought I was prepared for the exam before I took the uCertify mock test, I failed harder than I thought I would and spent 1-2 hours every day for the next couple of weeks before the test just using their software to be ready, and it was worth it for me. I just checked out their site, and their format may have changed and the PHP guide is over double the price ($250, while I only paid $100 a few years ago) but I found their service significantly more valuable than any other study guide.
&gt; you can go to hell Well, that's not very welcoming now, is it?
https://github.com/FriendsOfPHP/pickle Discovered this morning, allow to install php extensions with composer.
No particular reason. MySQL was the first thing that came into my mind.i 
Let me give u a simple little hint, TCP.
We've started rolling out Uuid keys (via [ramsey/uuid](https://github.com/ramsey/uuid)) in preparation for making some of our applications work offline. v4 seemed like a good fit for the transitional stage, since you've got the choice to either reuse the v4 ids, or remap them during persistence.
when saving it, do you save it directly, or have some handler to check if it used before or not? i know checking that uuid will need extra resources, but random is random, it's still bothering me sometimes
&gt; Decouple your package from implementation Doesn't guzzle do this?
After years and years of PHP getting shit on, I finally decided to give Ruby on Rails a shot. Just out of curiosity and for fun, nothing serious. I found a good tutorial on YouTube and just watched it. After a while I was left really confused about how this was any better or even different aside from the obvious syntax differences of Ruby v PHP. What this guy on YouTube was doing was exactly what I do when I'm setting up a Laravel project. And Rails is just a web framework for Ruby, right? So it's not like it's that much different in principle from a PHP framework. Am I missing something? I realize this is a biased place to be asking, but I was kind of looking forward to trying Rails out and now I'm not sure there's a point at all.
Okay.
...so what happens when I use a different version of httplug in my library?
It's far from being a competitor to WP but I'm some sort of happy that it displays blogposts and has at least some of the functions, WP offers
That's because after years and years Laravel is really similar to Rails. In the beginning Rails offered: Basic separation of controllers/views/models (something not all PHP code had at the time), Migrations, Active Record, Integration with JavaScript and AJAX (which changed later because it was too obtrusive), RESTful controllers (something debatable now), Asset Pipeline (which is useless now since even Rails developers are using Gulp/Grunt/other JS tool). So all the benefits of Rails were replaced by better tools or cloned to other languages (Laravel), except Ruby, which is an elegant language, but sometimes it's too permissive for my taste
I've been a windows developer all my life and I've finally had the opportunity to nearly complete my linux workstation (ubuntu box w/ fairly good specs + new ultrawide 29" IPS monitor to work on [black friday]), although lacking a new desk (stuck using a weird table) + 2nd mechanical keyboard atm. What's your current setup look like for working on a native linux box? On windows I have virtualbox, vagrant (running ubuntu php 7 lamp stack manually setup), phpstorm, sublime text 3, chrome, and git. I guess my biggest question is do you still work with vagrant although you're natively working on linux?
[Here](https://github.com/marcshake/tff3/blob/master/main/mysql.php#L159-L173) you seem to be using `mysqli` but you are checking for existence of `mysqli_real_escape_string`, wouldn't it always exist if you are using `mysqli` anyway? In the else block, won't you end up with double escaping if magic quotes are off (first `addslashes`, then `mysql_real_escape_string`)? In any case you should switch to prepared queries instead of escaping. Looking at your install scripts, you seem to be using the `utf8` charset in MySQL. Note that it does not cover the whole of Unicode and for example can't store emoji characters. The actual UTF-8 charset is called `utf8mb4`.
pthreads is only supported on the CLI now, it's not really suited to the web.
Also note that escaping does not protect against SQL injection. Switching to prepare statements is **very** important.
Please vote for https://youtrack.jetbrains.com/issue/PY-17836
Watch out for leap seconds though.
The issue will be fixed in PhpStorm 2016.3.1 which will be released in a couple of weeks. Please stay tuned.
So the big thing i found with it is making post requests, im in the process of creating a syslog server and i needed a way to ship logfiles do i figured the easiest way would be through POSTing them
I didn't know that. When changing from utf8 to utf8mb4 do I have to fear some consequences? I mean, I am using the software at my homepage right now and there are already over 1000 blogposts. Are they ruined when changing the encoding?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
http://pressxordie.com/wp-content/uploads/Inception-Squint.png
Async in Guzzle is really great. I've been using the 'Pool' method of doing async queries for a few weeks now, and it's made a tremendous difference in my speed and workflow. For anyone interested, take a look at http://docs.guzzlephp.org/en/latest/quickstart.html and Ctrl+F for 'Pool'. I think it's a really simple way to get your head around it. Build up a list of requests you want to make, feed them into a pool, then define the success/failure handlers and it just magically works.
&gt; Time for group hug 😁 FTFY 
For that you can use a custom repository: "repositories": [ { "type": "path", "url": "*path to bundle on filesystem*" } ]
If you want an [in-depth answer to your excellent question](https://github.com/php-http/httplug/issues/120)…
[removed]
This definitely needs more upvotes.
Sorry, meant something else (or I didn't understand it correctly on the fly). I'll try to explain it by example Let's pretend I have the following code $logger-&gt;log('Start'); return $guzzleclient -&gt;requestAsync('GET', 'example.com/example') -&gt;then(function (ResponseInterface $response) { // Do something with the response }) -&gt;otherwise(function (\Exception $e) { // Do something with the exception }); If I wanted to add a logmessage `Stop` or `End` or whatever, I would need to do this in both `then` and `otherwise`. What I'm searching for now is sth. like this $logger-&gt;log('Start'); return $guzzleclient -&gt;requestAsync('GET', 'example.com/example') -&gt;then(function (ResponseInterface $response) { // Do something with the response }) -&gt;otherwise(function (\Exception $e) { // Do something with the exception }) -&gt;everytime(function () { $logger-&gt;log('Stop'); });
Yeah, that would be nice. You could workaround it by calling something like '$this-&gt;handleRequest($this::FAILED/$this::SUCCESS)' inside both fulfilled and rejected, and then calling $this-&gt;fail()/$this-&gt;success() inside handleRequest, and ending with something like $this-&gt;logWhatever(); It's not super clean, but it would at least prevent code copy/paste. 
Can you give an example?
Using "framework tools" to get around framework-enforced resource management and convoluted process boilerplate by automation "magic" is a huge red flag to stay away...and not just for a few years. Just stay away. Django - django-admin Laravel - artisan node - npm Every couple years when I think it's totally sane this time, I am disappointed.
I see what you're saying. Well, it appears Guzzle doesn't support this. AMPHP supports `try`/`catch`/`finally` and React supports `$promise-&gt;always(...)`. You could try using [middleware](http://docs.guzzlephp.org/en/latest/handlers-and-middleware.html#middleware): https://gist.github.com/assertchris/4bddcbaeec93a3a6625c9be3763e162a
Is it possible to use this to synchronize two apis? Like on one side i have Scoro, on the other side is a custom build finance managing tool. They both have their own apis. I need a solution to check both of these for changes and sync them. Cheers
Thanks for the great feedback. I use stylish chrome extension to widen github for me. You've helped me realize I was blind to the fact that the instructions were not easily seen by those w/o the extension. Thanks again.
A few lines of bash. Composer install, run migrations, switch the symlink.
Are php 7.0 extensions (redis etc) generally expected to work with 7.1? Or do I need to wait for them to be updated, as with the 5.6 -&gt; 7.0 change.
No problem and good luck.
I use this method and it offers the best flexibility in case something goes wrong. It takes 3 minutes to download, extract, and flip the symlink. Not too hard at all.
There's no universal solution -- every project is different. Personally, I'm against using VCSs for that: they introduce [vulns](https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/) and unreliable when trying to switch files in use on a live system. The most common option is a bunch of bash scripts to build, backup, package and deploy.
`stream_set_blocking()` with `mode=false`?
If you use Capistrano it does all that for you. It also has rollbacks. Would recommend this over the manual route.
It depends. For small projects you could use https://deployer.org/ This is they deploy start for one little project of mine: task('deploy:project', [ //checkout, configure, upload 'local:deleteProjectDir', 'local:checkoutCode', 'local:configure-app', 'local:upload', //build 'remote:composer', 'remote:artisan-migrate', 'remote:artisan-cache', 'remote:npm-install', 'remote:simLinks', 'remote:update-parts', 'remote:restartPHP', ]); 
Can't really share them, but it's simple enough to create one in a couple of hours. The process consists of checking out a branch, running build tools (composer, npm, gulp, what have you), running unit tests, creating an archive, uploading to a remote via scp. When done, a remote script runs unpacking the stuff, running migrations and bundled postinstall scripts, doing sanity checks and switching to a new build. [edit] I'd advice against self-inflicted vendor lock-in when using platform-specific or language-specific tools. 
&gt; THIS IS A DEVELOPMENT PREVIEW - DO NOT USE IT IN PRODUCTION! That means either waiting until 7.1 is official or going with 7.0 and doing it again in a month or two. For someone who just wants to do it once and be done with it then I'd recommend 7.0 or waiting a month or two for 7.1.1+ otherwise early 7.1 bugs will be more likely to bite and require multiple upgrades or headache in a short time frame.
To be fair I was worried I was thinking too much like a stubborn old engineer who was sticking to the familiar for the sake of it. Always interested in branching out and trying out "new" things for a side project or two to see what sticks.
Yup, I hear ya. If you *truly* want to expand your horizons and you're ready for a trip down the rabbit hole, check out Erlang, and read about the "Actor model" (which Erlang implements). Now that's something different.
It depends. The biggest factor is cross-user scalability and ease of setup (repeatability/documentation). For my personal projects I've always just used a local instance of apache, mysql, php, etc. It's worked well because I'm not trying to share these with anyone else, any servers are ones that I have sole and complete control of, and I don't have to juggle multiple vagrant environments. At my work there are half a dozen or so of us with a complex environment, many services to replicate, etc. We still use Vagrant because it's really easy to ensure everyone, using Mac or Linux, has the same execution environment on the same version, and if anyone corrupts their environment it's very easy to just destroy and recreate the environment. I would also recommend using Vagrant for freelance projects where the host may have different environments and constraints than my local PHP (e.g. PHP7 vs 5.6). This is more of a 'do what I say, not what I do' because I was already doing it "wrong" for existing projects and haven't had a strong enough need to change that, but that could change and if I had to do it from scratch then I'd still recommend Vagrant. Irrespective of the above, one thing I will still do locally is install PHP. This allows me to easily run `php -r` for quick tests and running misc scripts locally outside of the vagrant environment. Might do the same with MySQL, but rarely install apache or any other service (memcache, redis, elasticache, etc) outside of vagrant. Edit: Other tools, like git, composer, npm, gulp, grunt, netbeans, etc still get run outside of vagrant due to file performance constraints. There's potential for some conflict with things like npm but it's very selective issues you may not run into.
Nope! Not at all. Over the years, I've found myself becoming increasingly hostile to the kinds of people who list out their ~~needs~~ demands, and expect to do none of the legwork. Is it fair? In some cases, probably not. People who are new development may not know where to start, which is why I at least listed out some things to look up (and purposely left out direct links so that they can do a little work on their own). But will I apologize for calling them out for expecting people to do free work? No way. Newcomer or not, I've seen guys in our line of work get burned by this exact kind of thinking too many times for me to not be a dick about it. The downvotes are probably justified, but this is just one of those things I probably won't budge on. I just can't welcome this kind of attitude towards development.
And then we found [Carbon](http://carbon.nesbot.com/docs/).
what is it? unix timestamp is not affected by it
uCertify sounds great! I'll probably purchase the Study Guide and Practice test, and see where I stand.
5 days would be someone having a bad week. they choose an extended time to show a pattern of behavior.
I disagree that VCSs introduce vulnerabilities. I would consider them safe to use as long as: 1. your repo directory isn't in your webroot (that is, `.git` and `index.html` aren't next to each other in the same directory) -- this point is by far the most important; 2. your web server isn't configured in any other way that exposes your repo directory (setting up `deny` rules in Apache is fine, but it is best that Apache not be able to get to your repo to begin with); 3. you aren't putting sensitive information such as passwords and API keys in your repo (which at this point should be common practice anyway); and 4. your production environment is reasonably secure. I realise that #4 can be a bit of a rabbit hole, but I would say that if you don't trust your production server, then git could certainly make things worse. If you are on a shared host or you don't have a competent, certified server admin, you do have to be... careful. The benefit of git specifically is that you can deploy to production by tag, roll back effortlessly (if migrations are involved, you need to be more careful), and never have to worry about anything getting out of sync. I use git for most of my projects and deployments have never been easier.
Honestly, this is a silly comment. The link you cite is NOT the way to set up your site with git. The best way I've found is setting up a bare repo with a post-commit hook. Basically, [this](https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps). With regard to switching files, you can set up two (or more) checkout folders, alternate between them and switch a symlink once checked out. Or more simply you can set up a temporary 503 while the hook is running. 
Dear god... we've become civilized. What's next?
Oh that's a great idea! Thank you :)
I've been using Git hooks, the post-merge hook accomplishes a lot of what I need to do. I can run everything I need in there like clearing redis cache, unit-tests (in staging), checking for database deployment scripts etc... I used jenkins for a smaller project with a large team once and it just seemed a bit much. Our current code base is of a decent size and does a lot, but the git hooks seem fine for a small dev team.
One can dream...
I think a VCS is only good for "version control" and not the right tool for deployment. Not every webserver has installed a git or svn client nor any permission for anything else. I deploy a zip file and install it with a tiny php script (deploy.php). Via ant script I pull the (latest) version from my repo (git, svn) and create an artifact (zip file) from it. On the webserver I start php script (php deploy.php myapp_2016-11-29.zip) which extracts the zip file and renames the old folder. At the end the php script starts the database migration.
The part of each request that's made concurrent is waiting for a response. What that practically means is we're checking if every response is back in a while loop before continuing, so there's no increase in server resources. If we were loading images, we'd download them simultaneously then render them one at a time.
If you are creating a lib then you should not depend on Guzzle directly, but on the HTTP Client abstraction (php-http/client-implementation) and you inject a concrete HTTP client implementation (like Guzzle or whatever you are already using in your project. Your lib would probably also depend on the PSR-7 messages implementation (psr/http-message) like guzzlehttp/psr7 or zendframework/zend-diactoros package. The whole idea of that project is to not depend on concrete implementations but abstractions.
As others have said, you are testing too much. You don’t need to inspect whether the spam filter was called (that means no `expect`), just ensure that the result of the call is used. Create your mock, ensure it returns given value and inspect the results of your job. That’s it. You need to only test three things: * If the message is a query (has no side effects), you only need to assert the results are as expected for given input * If the message is a command, you need to assert the nearest side effect is visible (i.e. using a setter on an entity needs to reflect in the value returned by the getter) * If the message is a command and the class has dependencies, you only then need to expect messages passed further to those dependencies (if you send an email, you expect an event to be dispatched) I think your case falls under the [what not to test: outgoing queries](https://gist.github.com/Integralist/7944948#what-not-to-test) Here is the whole talk from [Sandi Metz on testing](https://www.youtube.com/watch?v=URSWYvyc42M)
Unix timestamps ignore leap seconds outright, that's why midnight is always a nice round number. In some use cases this might be important.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This seems really cool and all, but what's wrong with using memcached for sessions when you have multiple web-nodes in your infrastructure? I'm genuinely asking that too; I know why file based sessions falls apart, but it seems like memcached based sessions would be the go to for a built in solution. Each web-node having an instance of memcached and each node's PHP being configured to push to every instance.
If you are using GIT, as many do, pulling the build you want with GIT is a very comfortable way to do it. If you exclude config-files from your repository, you can update that way too. 
Maybe the Symfony Cert ? https://sensiolabs.com/en/symfony/certification.html
There is a specific PHP certification exam - Zend Certifier PHP Engineer http://www.zend.com/en/services/certification/php-5-certification Symfony Certification also covers common php questions, but is more specific framework (Symfony) related.
Floppy disks via courier to your hosting provider. 
How do you force when to download and render? Is that some JS trickery?
They don't have an updater for major versions on any platform.
This looks awesome! Good job!
Thanks for sharing this! I'm also extending the offer through today for Giving Tuesday :)
There's no reason you can't. I just haven't had time to flesh out a Memcached handler yet. The idea behind this project is simply that you can use native sessions, but can choose the data store or even layer data stores for better redundancy. So yes, use the filesystem. Use Memcached. Use an in-memory cache. Use Redis. Use MySQL. Use whatever is best for the project - but when you interact with it in code, you're still just interacting with $_SESSION like normal.
I wouldn’t say its framework agnostic, since some of it code requires Laravel. I understand that those classes are not required, but nevertheless it’s at least a code smell. You could instead create truly agnostic library and separate projects to integrate it with laravel / symfony / whatelse. This way the `BotManServiceProvider` would be extracted to a separate project, with proper dependencies (laravel), leaving the original library clean of hidden dependencies. public function __construct(Request $request, DriverManager $manager) You are using a `DriverManager` and a `Request` to select a `Driver` instance. In my opinion this would be a job for a factory, leaving the `BotMan` dependent on `Driver` only The `DriverManager` has a list of classes implementing the `DriverInterface`. I would instead take a `Traversable` of `DriverInterface` instances in the constructor, so the class can be reused and extended with different implementations. This would require a change to the interface itself, so the `matchesRequest()` method would take the `Request`. Please use Guzzle, it’s an industry standard. Your code doesn’t need special control over the HTTP layer, so a generic lib instead of your custom one will do. Same for caching (/u/chiisana already mentioned it). Your main interface, the `DriverInterface` is overly complicated. There is no need for a public `buildPayload` method, this is just an implementation detail. Move it to your base class and don’t require other vendors to implement it (it’s not used anywhere in the code, sans the base class). EDIT: add tests. This would require you to clean up the code.
First of all - thank you for taking the time to look through my code. I thought about switching to Guzzle, but every time I used it in other open source projects, I encountered some issues because of the version fragmentation of Guzzle. Would you consider it safe to use the latest 6.x stable version of Guzzle as a dependency? Regarding your thoughts of my `DriverInterface` - you're right, the `buildPayload` method is only used within the abstract `Driver` class. So instead of having it inside the interface, I could go and add it to the abstract `Driver` class instead, as all current drivers need to pre-format the request data in some way. Any help on this project is really appreciated! :) Thank you for the valuable feedback! Edit: I added a BotManFactory and got rid of the DriverManager inside of BotMan - https://github.com/mpociot/botman/commit/dea34504bc3c70427384b5cfe1b3c97cba737aad
Yes, but the collection part is used as a standalone dependency and is not related to the Laravel framework as a dependency itself. See https://github.com/mpociot/botman/blob/master/composer.json#L22
Thanks for the reply and sorry I'm not clear (hard to convey the entire message on phone). The reason is not that use of Collection is bad, but rather the use of the globally registered collect function call to create a Collection. Since there is no guarantee other people's project won't already have collect() registered for their own purpose (and potentially behave differently than what you'd expect). IMHO it is often a better idea to call the constructor per normal as opposed to depend on Collection's helpers. 
I'd like to add that it would be nice to have support for Doctrine Cache as this is a widely used cache package.
Ahhh..you're right. I'll replace the `collect()` function usage with the proper constructor! Thank you :)
Okay...so I tried to switch to Guzzle - but since Guzzle uses closures (the default handler), it's not possible to serialize the `BotMan` object, as long as the `Driver` has the Guzzle Client as a property :/
I had the pleasure of working with these guys, and it truly pushed my programming knowledge ahead by light years. Between them collectively, they have so much to share, its a great buy.
Hey, I love PHP, seriously. It's the language I use every day, and it was the language i learned to program with. but please, think twice before building a bot with PHP. The language just isn't meant for it. I'm not saying don't do it, but do look at other languages first.
Personally I love http://symfony.com and have both implemented more advanced api authentication directly, as well as used the [FOSOAuthBundle](https://github.com/FriendsOfSymfony/FOSOAuthServerBundle) for a more generic and standard approach and [HWIOAuthBundle](https://github.com/hwi/HWIOAuthBundle) for a full integration with all kinds of 3rd parties, including I believe OpenID. 
Should in case, the OP decides to try out capistrano, i wrote a guide some time ago http://lanreadelowo.com/blog/2016/02/15/deploying-php-web-apps-with-capistrano/
I'm inclined to agree with /r/rocketpastsix's sentiment. To everyone else: If you're a new developer and looking for any sort of role model, Sebastian Bergmann has consistently been excellent. You'd be hard pressed to find someone better to learn from. Anecdote: A couple years ago when I opened an issue to PHPUnit suggesting they publish PGP signatures of their .phar, Sebastian not only did that (which involves software famous for being [not user friendly](http://www.gaudior.net/alma/johnny.pdf)), but he retroactively published and PGP-signed the SHA1 hash of every .phar ever released and updated the documentation to explain how to use this information. Oh, and that was all done within 24 hours of my initial suggestion. I have not read this book, but if he's one of the authors, then I can almost guarantee that: 1. It's good. 2. It's useful. 3. They're probably woefully undercharging for it.
Thanks for sharing :) I never liked the hassle of installing php extensions - this'll save my time :)
A lot of these tips are subjective&amp;mdash;especially if you're looking at a poorly run company. I know too many MS-first shops that believe certifications are important in other fields as well. Additionally, I once interviewed at a place where engineers interviewing me badgered me for using an IDE. Something something vim master race...
Here is an entire thread discussing it, with people doing benchmarks: https://www.reddit.com/r/PHP/comments/5bt1xb/php71_10_times_faster_then_56/ There's no reason I'd *lie* to you, is there. I'm just sharing my experience. PHP is very much usable on Windows, but it's simply drastically slower in some key areas, like the weight of user function calls, and file IO. Some of this seems to be lack of optimization on PHP's side, and some seems to be OS specifics (Windows doesn't cache small files as aggressively as Linux does).
It made me laugh when I hit that point in the article. Developing PHP on Windows is bad enough but people are actually deploying on Windows machines as well? I don't believe it, absolute madness 
It's simple: - If you'll just repeat the name of the method/class, then don't write a description in the doc comment. - If you won't also provide additional parameter type information or description for the parameters, skip the entire doc comment. - In some cases the purpose and use of a class/method won't be so obvious, then write a doc comment. In my practice, my most comment-heavy code tends to be interfaces. Almost all of the file is just doc comments. And classes are scarce on doc comments (especially when they simply implement a set of interfaces, which are already documented). BTW: /** * This is a doc comment (PHPDoc). */ /* * This is a block comment. */ The former is preserved at runtime, accessible from the Reflection API, and is read by IDEs as documentation. Block comments, like line comments, are ignored.
Ik now they're autogenerated, but basically it says exactly the same as without the generated codeblock (unless obviously something needs extra clarification). It's not a huge deal to generate them, but it does require to think about it and a little extra time. Also it takes up 3-8 extra lines of code. Not having them when they add nothing would mean less lines of code and therefore probably an easier overview of the code that does matter. As for the IDE autocompleting. When you use PHP 7's strict typing, including function return type, I don't think the IDE will need any extra info from your doc comment. I just tried to challenge the status quo by thinking about why we're doing this. While I see all the benefits when I was still using PHP 5, I wonder at it's need in PHP 7. 
It really really really depends. I try to be as explicit as possible (e. g. I always compare boolean values in `if`s. Truthyness is the work of the devil, people!), which already makes my code really self-documenting. But whenever I have a piece of code that I have to think about myself I document my intention. That makes it all pretty easy to understand. Regarding docblocks, as long as the parameters and the return for a function are self-explanatory I don't comment them. As soon as there's the smallest possible catch to think about I document everything.
You should probably turn off warnings on your website [ /search/?q=nothing&amp;go=go ] and fix the according search code block.
Search and Replace makes this so freaking easy..
vampire variables? wvvvvwvw
Let's make sure we are downvoting for the right reasons. Downvoting isn't supposed to be for showing you disagree, but that a comment doesn't add value to the discussion. The language isn't meant to run long running processes. a majority of the libraries (with the exclusion of the React stuff) are meant to die after a request, within seconds. PHP is not natively asynchronous, which is a must for a lot of bots, and makes heartbeat checks difficult, without using something like guzzle's async stuff. PHP isn't great with websockets either. It's also very resource intensive. From my past experiences, something that should only take 300-400mb of ram and like 20% CPU on a C# app, takes 2gb and 400% cpu in PHP. It's just not meant for long running processes.
Wordpress plugin? I see get_option
The first example could include other metadata like `@since`, and provide a place for things like `@deprecated`, etc. In your example with `@param` and `@return`, the real advantage there in PHP 7 is giving a description. Without that, it's probably not all that necessary. Personally I like to add them to everything for the sake of consistency. There's a source of information on every method / property / class that you know where to look for consistently.
Just got my student license :)
Or WP malware
Usually i don't really understand most of these "look at this horrible code" posts. I think they're generally a bit elitist. But this one is really fucked up. What's the purpose of this ?
*twitch*
$blahBlahBlah
Git is Great. Don't auto-deploy to production. Not until you know what you're doing. Below is (I hope readably, new to R) a PHP deploy script we use for auto-deploying on the development and staging servers. It gets a webhook event from GitHub (in this case) which it then reacts to if it matches what it's looking for in a branch. We use git-flow and will deploy different places for dev and staging with a fully build out version of this. Sorry for any mis-indentations, etc. NOTE: it is not entirely secure by itself. We have other controls in place around it. Don't forget security (mainly for DoS with constant deployments, ha ha). NOTENOTE: You'll have to install git on the webserver and setup git key based auth in the user running as your webserver (preferably read-only on your repo). You can have this deployment script to whatever. Another variant of this goes through a complete build and dependency and upload to CDN type tasks. &lt;?php ignore_user_abort(true); set_time_limit(900); $repo = '[DA_REPO_NAME_GOZ_HERE]'; $branchMap = array( 'API' =&gt; array('path'=&gt;'/var/www/API/') ); $path = '/var/www/API'; $runpath = '/usr/bin/git pull'; $delivery_id = $_SERVER['HTTP_X_GITHUB_DELIVERY']; $github_event = $_SERVER['HTTP_X_GITHUB_EVENT']; $github_sig = false; //$_SERVER['HTTP_X_HUB_SIGNATURE']; putenv("PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin:/opt/aws/bin:/var/www/.local/bin:/var/www/bin"); apache_setenv("PATH", "/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin:/opt/aws/bin:/var/www/.local/bin:/var/www/bin"); if ($github_event == 'push') { // let's handle this $gitEvent = json_decode(file_get_contents('php://input'), true); if ($gitEvent['repository']['name'] == $repo) { // made sure we're receiving for our repo // setup based on the branch $branch = $gitEvent['ref']; if (strpos($branch,'API')) { $path = $branchMap['API']['path']; } else { echo('not a branch we want'); exit; } chdir($path); echo("Git'ing....\n"); $didit = exec($runpath.' 2&gt;&amp;1',$output,$returnstatus); if ($didit &amp;&amp; $returnstatus == 0) { echo('done!'); } else { echo(print_r($output,1)); echo(print_r($didit,1)); echo('bad update, error with git'); echo($returnstatus); } } else { echo ("invalid repo, path, branch, runpath, or something else."); } } else { // fail, not handling github events other than push right now echo ("invalid GitHub Event."); } // DOH ! 
Thank frak for S&amp;R. 
also thank mr skeltal for good bones and calcium
Even in this instance, with the lack of asynchronous programming, a bot runs the risk of not returning fast enough. If it were asynchronous, it could check each of the `listenTo`'s in parallel, instead of going through them one at a time.
Yep, that is what this is. Not really a fair example of bad code in my opinion as it looks like a programmatically "prettified" version of some obfuscated code, specifically a plugin someone was selling to "members only" here: http://www.warriorforum.com/warrior-special-offers/1726-daves-easy-keyword-plugin-much-more-wordpress.html
I think it is this http://www.warriorforum.com/warrior-special-offers/1726-daves-easy-keyword-plugin-much-more-wordpress.html
I like to utilize PHP's type juggling. I'm using docblock to specify how I'm treating input argument, not what data type it actually is, because I don't really always care. For example, when I receive input from HTTP which is not 0, "" or null, I don't care it's not `true`, it's truthy and I treat is as such. /** * @param bool $isThatSo */ public function doStuff($isThatSo) { if ($isThatSo) { } } If I used `bool` type hint, I would have to cast the value to boolean manually EVERY damn time before I can use that method. There are other reasons for docblocks instead of type hints too: e.g. nulls, voids or mixed types
I think it's actually the AdBlock Widget: HTML_CODE; } global $utopia43_version; echo "&lt;small&gt; &lt;a href='http://ActiveBlogging.com/adblock/'&gt; Dave's AdBlock Widget v$utopia43_version&lt;/a&gt; (WordPress Plugin) - &amp;copy; 2008-9 D.Pankhurst - from &lt;a href='http://ActiveBlogging.com'&gt;ActiveBlogging.com&lt;/a&gt; &lt;/small&gt; &lt;br /&gt;&lt;/div&gt;"; } if (is_admin()) { function utopia43_menuAdd() { global $g_utopia43_file; add_options_page('AdBlock','AdBlock',9,$g_utopia43_file,'utopia43_menu'); } add_action('admin_menu','utopia43_menuAdd'); } add_action('widgets_init','utopia43_init'); ?&gt;&lt;? But that's why you shouldn't use obfuscated code unless you're the one that generated it and the hash checks out.
https://www.drupal.org/node/938406 was public although it predates the CWG. The *community* could work on these issues in public but the CWG can't.
Ew, who put html strings in their php like that?!
You can still store as a unix timestamp. But you often also need to store the timezone or at least calculate various timezones when displaying/editing. Thats where carbon comes in. An example of how it can get complicated: A user in Timezone A creates an event which is being physically held in TZ-B. A user in TZ-C is invited to physically attend while a user in TZ-D is invited to phone in with a conference call. All users see this event in your application which is a calendar/event app. A users calendar will typically display dozens of events from many different timezones created by users from many different timezones. Your app will need to calculate schedule conflicts and warn your users. Users will also receive reminders on their phone and email at various intervals before each event. For me with this app, Carbon was very useful in doing all the relevant time and date conversions. I highly recommend it as a time saver. 
I'm writing PHP so I already am.
You'd think the imposter syndrome would eliminate this. I think instead the cocky arrogant folks just exacerbate everyone else's imposter syndrome.
Probably it didn't work because you're using `mysql_query` or `mysqli_query` which only accepts one query, not two queries and a comment like your example. Anyway, the correct answer is to use parameterized queries. Probably worth reading through the DB section of http://www.phptherightway.com
 $sql = "INSERT INTO $business (product_service, price, comment) VALUES ('$product_service', '$price', '$comment');"; mysqli_query($con, $sql); I've been injecting into the $comment variable.
Reddit never disappoints. 
I've used Laravel. It's nice. But it just comes up lacking with modern technology. In five years, if you have been a PHP developer this whole time you will be antiquated -- chop shops that maintain legacy infrastructure. Modern web is moving forward. Progressive web apps, ng2, etc. Server side scripting languages are becoming antiquated (at least, for UI -- as a backend the choice is more fluid imho) Case and point. He can be sad.
Another resource is ParagonIE's [Preventing SQL Injection in PHP Applications - the Easy and Definitive Guide](https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide), which, in case you're thinking "that's nice, but I just want to learn how to program and I can make myself safe from SQL injection later.", shows how easy it is to be safe and how easy it is to use EasyDB, the easy PDO wrapper for making easy things easier, the easy way. Don't brush this stuff off until your client - or your client's customers - suffer for it.
... So really no different from the average WordPress plugin, then?
Go ahead and skip to front-end. Go ahead and use bare Javascript. Go ahead and cry harder because you'll miss PHP.
Many were saying this 5 years ago, many will be saying it in another 5 years.
The obfuscation technique that I always wanted to implement in php is using numbers and math expressions for the variable names. For example, you can do stuff like this: &lt;?php //make a variable with a numeric name, technically invalid ${ 10 } = "foo"; //access said variable using the maths echo ${ 20 / 2}; //10; outputs: foo //another one, this time named via hex ${ 0x14 } = "bar"; //20 //and accessed by binary echo ${ 0b10100 }; //20; outputs: bar //or other nested variables and variable-variables $foo = 10; $bar = 20; ${ $${ $foo } + $bar } = "!"; //30 //and accessed by bit shifting operations echo ${15&lt;&lt;1}; //30; outputs: ! //final output: foobar! [Example](https://3v4l.org/v5amW) and I always kind of wondered how stuff like a refactoring or de-obfuscator would work when it isn't just a simple string replace for variable names.
Is serverside Javascript/Node really an answer to 'traditional' server languages being antiquated? 
[removed]
Might be worth a quick read through this as it explains it pretty well: http://www.phptherightway.com/#databases_interacting
&gt;you'll miss PHP lol.
WordPress doesn't really support a better way of doing things in a lot of cases.
Short answer: The `fetch` method fetches the next row in your results. If you have three rows, you would need to call `fetch` three times. Each time you would get the next row in the set. That might look something like: while ($content = $getContent-&gt;fetch(PDO::FETCH_OBJ)) { echo $content-&gt;name, ' ', echo $content-&gt;content; } Long answer: 1. You might want to change the names of your variables. They're a bit confusing at the moment. I would recommend something like this: $query = "SELECT name, content FROM content WHERE page = :page"; $statement = $conn-&gt;prepare($query); $statement-&gt;execute(array(':page' =&gt; $page)); $rows = $statement-&gt;fetch(PDO::FETCH_OBJ); 2. I would recommend changing that `fetch` for a `fetchAll` and swap out one object at a time for all the rows as arrays (this is much easier to work with). The last line should look like like this: $rows = $statement-&gt;fetchAll(PDO::FETCH_ASSOC); 3. Now you have an array of your rows you can loop over them (and apply conditional logic) like any other array: foreach ($rows as $row) { if ($row['name'] == 'badname') continue; echo $row['name'], ' ', $row['content']; } Hope that helps!
Yes sure, that was just an example thread. But there are many all over the place, either from the employer or the employee's perspective. I wouldn't value certificates high therefore, of course it doesn't hurt doing these if you really want, but I think one can spend their time / money better.
Scott didn't contribute any code to libsodium: https://github.com/jedisct1/libsodium/graphs/contributors , but he's one of the top contributors to libsodium-php: https://github.com/jedisct1/libsodium-php/graphs/contributors
yess! love it
Why would you need to serialize the `BotMan` object? I think your Laravel is leaking…
Well. I made a branch based on your input. https://github.com/marcshake/tff3/tree/tff3.5 First of all, there's a public path. Next on list is rewriting the whole stuff to use prep-statements. Thank you all for your kind tips :) Really helpful
I'm aware of that, but it was long forgotten about in that respect for some very good reasons. I work regularly with .NET, PHP and JavaScript, and of the 3, I find working with javascript the most difficult to do "well". 
Are there any performance benchmarks comparing it to other excel generation tools like Apache POI?
This is useful: /** * @param callable&lt;MyApp\Namespace\Entity&gt; $callback * @throws ActionNotSupportedException * When attempting to set the entity created_at within the callback */ public function create(callable $callback); I tend to treat most other comments as an apology.
I dev on Windows through a combination of not liking Apples UX/UI and Linux being banned by our security team (something about meraki not working with or some shit). We used to used WAMP style stack for development and Centos in QA/Production environments. It led to fun and games. I now have 2 setups for different projects, a nice Centos VM which runs just fine, the other using Windows Hyper-v for Docker. The main problem I have is that nearly all documentation for anything PHP related is centred around devving on an Apple or Linux device. Trying to get PHPStorm to play nicely with docker on windows was a farce in particular. (eg, I run all my unit tests from a bash terminal through a docker container). 
Awesome work! I'm very pleased to see that phpexcel is moving forward!
Don't write the comment blocks manually, let the IDE do that with templates instead. If you ever need to explain more, just add to the automatically generated template. If you do write the comment blocks manually, just skip them if you feel like they add nothing.
You can use sqlite3 mode, it takes way less memory but at a cost of speed. Basically it uses sqlite3 to store the data instead of native PHP because it's more efficient. I don't remember how to enable it, check the docs. I guess on PHP7 the memory usage will decrease drastically.
The is a good reason to avoid comments as much as possible (don't take this to the extreme): when the code is changed/updated, the comments might not. Then you have a comment that doesn't reflect the code. Or code that doesn't reflect the comment. And which one is right? It's not always obvious. I found myself several times on cases where by writing code in a slightly different way, there was not need of a comment anymore. 
The incremental improvements are always nice. But what really impresses me is that back in Oct of 2012, a new release process was implemented: http://symfony.com/doc/current/contributing/community/releases.html And they have followed it. Year after year. Release after release. No wonder the Symfony components form the basis of so many php applications.
Awesome, I just finished implementing the old version, and not looking forward to more refactoring, but awesome either way. It is a kick ass package! 
I appreciate the author is looking for things to write, but there's no value in article that simply replicates widely accessible parts of the PHP documentation, like this: http://php.net/manual/en/migration71.php And more specifically this sub-section of it: http://php.net/manual/en/migration71.new-features.php On the bright side, the author's blog has animated dots connected by lines, which, without a shadow of doubt, verifies his credentials as a wizard class scientist and programmer.
&gt; On the bright side, the author's blog has animated dots connected by lines, which, without a shadow of doubt, verifies his credentials as a wizard class scientist and programmer. https://github.com/VincentGarreau/particles.js/
try Robbert'),('service', 'price','comment or something along those lines
Dont forget to mention that you need an additional docker VM for just running docker since you require a linux kernel(same story with osx though), and then run docker instances inside that. I was (forced) to do this once also, wasnt alot of fun to me. Lets not start about fileshares and the performance problems on either side(pick your poison) Anyway, noone said it wasnt possible ;)
Docker runs natively if you have Windows 10( =( ) now.
Thank you. This is probably exactly what I needed. I'm also considering doing it with just javascript but haven't made up my mind yet since there might be other stuff I need to do than just that. but this looks promising
Have you tried [mPDF](https://github.com/mpdf/mpdf)? It's the best library I've worked with. But it will always be less powerful than native tools (as wkhtmltopdf).
Agreed. Adam's an awesome teacher and really knows his stuff. His screencasts are always super polished. Well worth the money.
Perhaps `implode()` is what you want?
Sorry im not great with php, where would I put that in?
&gt; Obviously, if you don't have time to try out [Hacklang](http://hacklang.org/) or you're not sure how to get [phan](https://github.com/etsy/phan) running and checking out your programs that way just do one thing, *one thing*: upgrade to PHP 7. Yes, please.
Actually, you can skip the 'trim' param, since the [default action of array_filter](http://php.net/manual/en/function.array-filter.php#example-5545) is to remove [empty](http://php.net/manual/en/function.empty.php) values.
Whitespace is not "empty" in this context, so trimming is required.
Please watch this programming tutorial, as narrated by a very stoned man who can't program.
I have a folder "config" and there's a config file there. As I'm watching everyone else trip over themselves trying to stuff configuration in exotic and hard to manage places, my sites just work.
Shout for Mark Baker's other project: https://www.kickstarter.com/projects/1817732114/the-phpdiversity-rainbow-elephpant 2/3rds of the way towards its funding target with 8 days left if anyone wants to help out.
A little markdown goes a long way: $line1 = "{sin_prid___addline1}"; $line2 = "{sin_prid___addline2}"; $line3 = "{sin_prid___addline3}"; $city = "{sin_prid___citytown}"; $county = "{sin_prid___county}"; $postcode ="{sin_prid___postcode}"; $country = "{sin_prid___country}"; if (!empty($line1) || !empty($line2) || !empty($line3) || !empty($city) || !empty($county) || !empty($postcode) || !empty($country)) {echo $line1,','$line2,','$line3,','$city,','$county,','$postcode,','$country;} else { echo "";} Also you're using the wrong concatenation operator. PHP uses a period(`.`), not a comma. Change this: echo $line1,','$line2,','$line3,','$city,','$county,','$postcode,','$country; to echo $line1 . ',' . $line2 . ',' . $line3 . ',' . $city . ',' . $county . ',' . $postcode . ',' . $country; and you should be good to go. Check out the PHP manual's [string](http://php.net/manual/en/language.types.string.php) page, specifically the "Variable parsing" section. As mentioned elsewhere [implode()](http://php.net/manual/en/function.implode.php) would work here as well. 
https://wiki.php.net/rfc/generic-arrays Don't know about it's status... couldn't find any recent discussions.
Really looking forward to trying out the Workflow component ... and updated documentation ;) 
That was the rationale given for this feature, yes.
The purpose of "iterable" is to have a common super-type covering both materialized lists (like arrays), but also iterable streams (say, live cursors from a database, or data accepted over a socket). So iterable and typed lists address completely different needs. BTW, generics are coming in a future 7.x release.
I'm wondering why isn't it simply called PHPExcel2 or similar. It doesn't have to be a completely different name. Would PHPWord become PhpWordProcessor one day :P ?
an hour or two....0.o
echo works with commas, consider this a kind of variadic ...$args
"Hey man, you wanna get high and code some PHP?" Sure, it seems harmless now, but soon you'll be smoking crack and stealing your mom's purse money to pay for another EC2 instance running node.js.
PHP 5 still exists? ^(&lt;/feigned ignorance&gt;)
&gt; When the code is changed/updated, the comments might not. It's possible, but this is why we have version control, tests, and peer review to catch these issues. Just because someone else does a bad job doesn't give excuse us to do the same. For me, docs are there to give intent, both for current and future work, especially since it's hard to tell what's going to stay simple, and what's going to change over time. While this applies to smaller projects as well, in systems that span multiple years and developers, it's important to capture that intent. In the following method: /** * Calculate and return the tax portion of this line item. * * @return float * Tax portion of this item. */ function calulateTax() { return ($this-&gt;amount * 0.1); } I know that the method will only return the tax portion, and may return something other than GST (10% in Australia) in the future if we extend support to other countries. EDIT: Still can't format properly. :/ More coffee required.
It is possible and it happens. But you are right, that's why we have all that other stuff. And I agree with you. Just it's something to consider that, occasionally, if you need a comment maybe you should write it differently. 
I don't know because I have used it only for writes, but I guess so. Prior to version 7, PHP hasn't been efficient at all to store in memory data structures. 
Been using PHP Excel for years. A few weeks ago I wondered why I hadn't seen an update in a while... Hit their website for PHP Excel and almost zero mention if the new project. I really had to dig to find something, and ended up finding the new project from the old projects git hub. 
I have not! It looks good! Thank you for the recommendation 
Are there plans to make phan an option in the php executable? Like or maybe replacing the lint option?
Friend of mine was hyped about Microsoft bot framework. Maybe with this PHP has a decent answer?
This is super interesting. Thanks for sharing!
my pleasure \^_^
I don't get it. Progressive web apps and ng2 aren't a replacement for PHP, they're a complement to it. For the back-end, there isn't an alternative that isn't a scripting language (except maybe Java??). A lot of large companies and startups are still choosing PHP as the best choice for a back-end among all of the available options even when building a new system. Rails is great but doesn't scale well for large sites, Node.js is fast for serving simple API data but gets cumbersome to deal with all the asynchronous promises and callbacks if you're trying to use it for a complicate back-end system. PHP has the best balance of performance and features for a lot of situations (often paired with also running Node for serving some API data from a shared database).
The README is pretty overwhelming (a lot of stuff to read) - I find your unit test to provide a much easier digest of what the query builder is doing: https://github.com/atk4/data/blob/develop/tests/PersistentSQLTest.php
I agree, I also worked together with Sebastian, and he's really a nice guy (to be with) and has lots of knowledge to share.
Tell them it'll make it twice as fast. (Well, for the server-side portion of page load times.)
Awkward as hell but hilarious too.
If it's a completely refactored version with BC breaks, why does it not require at least PHP 7 as minimum? :(
They are switching from VM's, which are slow, to containers, which are much faster. It doesn't have to be Docker; that's just the popular face of containers.
Why not use Flysystem? https://github.com/thephpleague/flysystem
Won't make a noticeable difference for most of my clients. All *very* low traffic.
[removed]
It's not just about peak RPS (which they probably don't care about if it's low traffic), it's also about per-request latency. Google did the research and every millisecond DOES count when it comes to user engagement.
Probably because Excel is a trademark, so it's safer to use Spreadsheet. Plus, it can export to multiple formats other than Excel.
I think you mean low latency? Not to nitpick.
Checkout Prince XML. A server license is just over 4k, but I'm using it in a corporate environment for generating all of our documents from quotes to order confirmations and paperwork. It works flawlessly. Plus you can use the free version for your dev environment the places a watermark in the upper right corner of the pdf. I've tried mpdf, dompdf, fpdf, and a few others and I'm glad my boss was willing to pay for Prince! Their support is amazing, and I'm sure if you'd reach out to them Mike Day would give you a discount code for purchase. I've literally generated thousands of pdfs at the same time with the solution. Disclaimer I am in no way affiliated with this company, just a very satisfied user. Tldr princexml is amazing! 
Oh Paul, How I wish I had read this hours ago!! My upgrade went very poorly. I updated PHP and forgot about pecl. This was causing php-cgi segfaults in dmesg. I finally realized pecl ssh2 was causing them and upgraded which got rid of the segfault, but I ran into the problem you described. I finally gave up and ripped out all the ssh2 stuff and replaced it with phpseclib. I don't know if that was a good idea or not but it's done. Now I'm seeing a few zip.so segfaults. I did upgrade pecl's zip so I'm not sure what's going on there. Those weren't the worst problem I ran into. The worst was that suddenly I was getting File not found errors in apache's log for items that should have been processed by mod_rewrite and passed on to php. We had a large handful of legacy php files without extensions because the original implementer didn't know how to do pretty urls. In .htaccess it was doing FileMatch/SetHandler. It had been this way for years without issue. Suddenly, php files are being sent to the client as text. I rolled back the yum update, I verified the configs hadn't changed with etckeeper, I even restored configs from yesterday before the upgrade and I couldn't fix it. I ended up renaming them all with .php and writing mod_rewrite rules to handle it maybe slightly more correctly. Took me a great deal of time of pulling my hair out to get to that point.
It's exactly that on Github, but I couldn't change title of the Reddit post after submitting it :)
It just uses a different approach. BTW - there is schema building add-on here: https://github.com/atk4/schema.
If you have to de-duplicate an array of 10M strings, you're in trouble already. 
Thanks so much for the help
[removed]
No, he doesn't 
really? My reason for doing that is that it is set up so much like a paid course, I was afraid people would assume there was a signup or something was very helpful being able to use October CMS to create it all
I think the peculiar feelings are quite specific to /u/colshrapnel/. If something is free, certainly it doesn't hurt to point out it is. Especially in Laravel, where the most popular set of courses isn't free. Thanks for your work and sharing with the community.
They tuk er jebs.
It's not a library but I recommend wkhtmltopdf.
If this is the case you should put a disclaimer that on what basis are you claiming the statements
That you are using it or not Symfony is a standard. It is not THE standard but you can't avoid it or its ecosystem if you are seriously considering potential frameworks. Forgetting to mention it and putting PHPixie, a framework with almost zero usage developed by a single guy (and no contributors) vs. a popular community driven framework just show how much this article is a joke. This article is just a very very biased subjective opinion without any facts or the least bit of objective approach. I'm sorry if I sound offensive, but I find this kind of article offensive and misleading.
Seems interesting, checking it this weekend.
Probably because there could be other file extensions that have an undesirable closing tag... he did say "old file". I've seen a lot legacy code with a ".inc". But to your point, if you executed this in a directory that had ".html" or ".phtml" files with bits of PHP mixed in the middle, it could remove the closing tag mid file which will eventually cause a fatal error when PHP encounters the HTML.
It was bad. I have other things here that would send shivers down your spine. Slowly replacing it all. Do you use the zip pecl module? dmesg is showing a handful of these. php-cgi[27326] trap invalid opcode ip:7f6dd01325d0 sp:7ffea1d520d8 error:0 in zip.so (deleted)[7f6dd012c000+1a000] 
No, it's not. 
Using computers is cheating.
It's quite difficult to test due to different approaches. How would you test: $sum = $users-&gt;ref('Order')-&gt;ref('Line')-&gt;sum('amount')-&gt;getOne(); Against ORM: $sum = 0; foreach(Users::all() as $user) { foreach($user-&gt;orders() as $order) { foreach($order-&gt;lines() as $line) { $sum += $line-&gt;amount; } } } 
Is this even a question? It's just a framework like any other. It simply does all the legwork so you can concentrate on the specific problem at hand. 
Im intrigued! Do you have any plans to support any major frameworks? Symphony/Laravel or the like? Agile Data seems extremely useful and I understand I can use it alongside my existing project but if I wanted use it wholly I'd still need to reimplement a bunch of basic features like auth, etc.
&gt; But to your point, if you executed this in a directory that had ".html" or ".phtml" files with bits of PHP mixed in the middle He checks for php opening tags at the beginning of the file, so this is not the case. Besides that, executing what I suggested it wouldn't have any effect on html or phtml files and besides that executing php in files with html extension is ninja stuff.
I would say that it depends. You want to first learn a lot of the basics and 'harder' parts which frameworks like Laravel solve for you. This way you will have an easier understanding of why certain things are happening. Most of the time I would say that using frameworks is just common sense: you don't want to spend time on problems that other, way smarter people have spend more time on.
Hey Fox. Yes I'm looking for people who can help me integrate Agile Data into the major frameworks. I'm also working on various extensions and my next project will be around UI (http://github.com/atk4/ui) but I'll announce it properly a bit later.
This kind of thinking won't help you build great stuff.. The tools are there for you and your projects. I've met my share of programmers that want to do everything themeself, including WYSIWIG editors etc, it just wastes time and the community is so much better at it as a whole. If you are just starting with programming I think you should not start with Laravel and learn the basics first, and at least try to make your own framework, for learning purposes, so you can understand some of the choices made in other frameworks. 
Being young and bright-eyed is great, isn't it? :P I remember somewhere circa 2005 writing my own framework and template system. It worked but...there were much better alternatives. The best one I can remember is my boss asked me for a contact form for our website. Instead of a 5 minute job, I spent 3 days writing generic form generating class with validation, which went nicely with our in-house CAPTCHA, or as I liked to call it in our meetings, "that piece of shit".
I've made a service for deploying PHP applications. It is still in beta, so for now you can deploy 3 PHP projects for free ;) Feel free to contact me with any questions. Would love to get your feedback.
&gt; ORM are not designed to work with multi-user data shared inside same tables either. Can someone explain to me why this is?
I did it exactly for bga9's reason. There are a lot of files that are just using the old way of working with php directly in .html and .phtml. But your approach is better indeed, filtering by file extension would spare checking a lot of files and regex checks. 
&gt; Do you use the zip pecl module? Sorry, I do not.
Ya learn something new every day!
If I had to guess, I doubt it, at least not anyone else's. Some of their code [leaked](https://gist.github.com/nikcub/3833406) years ago and it looks like they'd rolled their own at that point.
Wasn't aware that rule existed. Good thing to know.
&gt; I'd still need to reimplement a bunch of basic features like auth, etc. Why would using a third party DAL require you to reimplement auth?
you're charging for a beta? 
The verification email hasn't shown up, tried twice (and checked spam, etc.)
This is my assumption. Back when FB was first written, there weren't many frameworks, and the ones that did exist weren't used much. That was back in the 'best practices' days. As in "Its best practice to sanitize your input with magic-quotes before building your SQL statement as a string." Its comical to us now, but back in the day that kind of shit was cutting edge programming.
Well, not reimplement *all* of auth but certainly there would be the need to write a new [provider to retrieve users.](https://laravel.com/docs/5.3/authentication#introduction) &gt; Providers define how users are retrieved from your persistent storage. Laravel ships with support for retrieving users using Eloquent and the database query builder. Additionally there are many other Laravel components that would need to have new providers written for them or reimplemented because Laravel assumes the user is using Eloquent for basically everything. [Take a look at what needed to be built just to make doctrine a drop-in replacement for Eloquent.](https://github.com/laravel-doctrine/orm/tree/1.2/src)
Very nice! Glad you posted this, I can learn from your techniques.
&gt; The less we pile into the framework monolith, the better. Totally understand that. And totally understand that a less coupled approach is the better way to build everything. And, for me personally, I'd use Agile Data exactly as you described -- in tandem with the built-in functionality. However I think we are talking about two different things. My question (and response) are in regards to supporting the lowest common denominator for popular frameworks IE supporting the opinionated approach Laravel currently implements. You're talking about how to handle using Agile Data as if I built my app from scratch (no framework) or was using a framework that didn't have DAL included. Furthermore its one thing to say "why not just use this alongside built-in functionality" to an individual. Its another thing altogether to say "I put out this integration library that replaces Eloquent with Agile Data for 85% of this framework but you (the user) have to use Eloquent for this other 15% -- which means you need to implement Eloquent's model interface and Agile Data's on all the classes that interact with both systems. Sorry ¯\\__(ツ)_\_/¯ " If there is going to be support for a framework it should be full support -- implemented as seamlessly with the framework's (opinionated) approach as possible -- regardless of how you personally think it should be implemented.
https://getcomposer.org/doc/03-cli.md#remove Use `--no-update` to disable the update.
$$$
I can probably get a much bigger boost by combining &amp; minifying css &amp; js and using kraken.io for images but again, nobody wants to pay to make those changes and the lead developer doesn't like too many extra steps involved in updating these projects. I'm already tempting fate by using OOP. :'( 
Okay so it is in the docs, I essentially told it "remove no packages but update all dependencies" which seems counter-intuitive. I feel like the update should only happen if you specify a package name.
And now you're back to knowing jQuery but not Javascript. Frameworks are not an alternative to the language they're implemented in.
&gt; so you can understand some of the choices made in other frameworks. Not only that, but also so you can appreciate what a framework is even doing for you. It's hard to know just how amazing some of the tools at our disposal are, without having first tried to solve the problems yourself.
Conversely, MySpace was a garbage spaghetti custom version of ColdFusion delusion. The problems with their code, compared to the lack of problems with Facebook code, was a major component costing them the war. Users were well and truely aware that MySpace code was garbage. They were sick of it being so very shit. They left in droves overnight.
&gt; Now I have some free time and would like to refactor some of my old projects to improve them and learn a few new skills in the process. Have I got the book for you: [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp). I am the author, but you don't need to take my word for it -- read the reviews linked on that page (the one from [SitePoint](http://www.sitepoint.com/modernizing-legacy-applications-php-review/) is fair), and of course ask around. Hope it helps!
That's the behavior I'd expect as well. Maybe file an issue on Github? They're pretty responsible in my experience.
Indeed - this is a really critical point. Having a monolithic application is completely orthogonal to using a framework (although I can't imagine any other approach without one). Having a framework often includes certain structure and abstractions "for free" that can make it easier to transition out of a monolithic architecture if you're inclined to do so; if not, most good ones will make it reasonably easy to include third-party components that can do it instead. Modern techniques yield development efficiency and, typically, reliability. Where tools live is more predictable and those tools are easier to re-purpose for similar tasks. Much less grepping through a project's `include` stack to figure out where a problem originated from, etc.
Is delivering features to customers cheating? It's silly to think that using any kind of tool that makes your job easier or faster is in any way "cheating" as the concept of "not cheating" in programming would imply that your employer expects you to build features but they need to be incredibly difficult and take a long time, or in other words, "not cheating" would mean finding the worst possible cost/time case and basing every project on that.
yep. Also in case with Agile Data - "amount" is not necessarily a physical field. It can be SQL expression and it would use the formula.
Using PHP is like giving yourself a handicap! (I joke, I joke, I'm not a PHP-hater, simmer down)
Mainly because of the way scopes are handled. Most ORM use a static class as a factory (e.g. Order::with()). The only way to apply a scope (permanent condition) is if you extend Order class. In Agile Data an object represent RecordSet, so you can add additional conditions at any time. For example, automatic condition can be placed on all the models when they are being linked with SQL persistence, that creates system-wide rule by restricting currently logged in user to only be able to create, access or delete records that belong to him, even if you do not explicitly specify the condition.
Without a framework, you're building the innerworkings yourself. This means the next dev is going to have to try hard to understand all of the various components that make the app work, _in addition to_ your domain logic. With a framework, the next dev can come in understanding how to utilize the "tools in the toolbox" and jump right into domain logic. _It isn't just about you_. Look at the frameworks consider things like: * Does this framework allow me to deliver more value in less time? * How long would it take me to build what the framework provides out of the box? * Is the interface for what I need to use intuitive? * Am I not wanting to use a framework out of fear or the burden of learning something new? If this is the case, then you really should experiment with new tech either watching videos (like Laracasts.com), building an experiment or something else. Not learning new tech as a developer is like a construction worker that is afraid to try a new power tool. It doesn't make you less of a developer, but makes you a more valuable developer because you can provide your clients/work more value than ever before. Use Sublime, PHPStorm, or Notepad++ if needed. When it comes to PHP, I highly recommend PHPStorm.
It completely depends. If you want to write production with a team on big projects that will last a long time then yeah, you need to learn frameworks and OOP. But, if PHP is just the tool you use to accomplish your job, then maybe not. I am a data scientist who builds proofs of concept that then get incorporated into a popular SaaS product line. My code never hits production. I need to make good enough code to show what is possible and that is all. Ill let the pros optimize it. Just understand this - if you don't write great, programmer friendly code, don't expect to get a great programmer friendly job.
&gt; `// Holy shit, is this the cleanest fucking frontend file you've ever seen?!` I mean, it's certainly not the messiest. Almost makes me miss 2007. *Almost* 
I've heard Paul speak at Laracon and he's _very_ knowledgable in this field. I haven't read this book, but based on his speaking I'd imagine his book is worth the investment.
I don't really see a problem with using a micro-framework for any task as long as your code's commented, organized and is consistent throughout. This seems like an obvious jab at people who don't use laravel, so I'll just say a full stack framework doesn't stop a bad developer from being bad.
The universe implodes.
Should arrive soon. Sorry for that. 
&gt; // Holy shit, is this the cleanest fucking frontend file you've ever seen?! I really hope that's in jest, because holy shit, no. No it's not.
also because myspace allowed you to inject css into your profile. so it was just a garbage pile, on fire. so here's facebook, with no customization, and just photos, and it was like a revelation. real names also helped, as well as real relationships rather than the random pile of "friends" pulled from your webring.
"There are two kinds of startups in the world. There are the ones that gained some traction in the marketplace with a codebase that everyone working there was vaguely ashamed of. And there are the ones that failed. There is no third kind." — Dan Milstein
This is, that amateur then eventually becomes the expert, training and guiding the new amateurs. It's ok.
Except when it started, facebook used nicknames - and your friends were invites from you webring; Other than that, yeah - the css injection was shitty.
Ding ding ding! Myspace let users customize their profiles, which resulted in some really horrendous pages! Now, I don't know if that's the reason WHY myspace died. I know I used both for awhile, but eventually quit logging into myspace.
fast: You should oop because you get your sanity back. You don't need a fucking framework. is it easier to start new projects and demos? fuck yes. do you need it? fuck no. Can you make a custom one that goes alone with standart and shit? bet your hairy ass you can.
Spaghetti code may "work" but compared to clean, decoupled code it's difficult to change. Sometimes the proof of concept lands in production in order to be first to market but refactoring undoubtedly follows when it's desired to start changing things to follow the whims of the market.
Learn about why frameworks were created in the first place: https://symfony.com/doc/current/introduction/from_flat_php_to_symfony2.html Can you give us an actual sample of the code you write now?
Nullable! 😍 Now we're talking!
Yay, and looks like it's already available on [heroku](https://github.com/heroku/heroku-buildpack-php/blob/master/support/build/php-7.1.0). No waiting this time!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
So what's next for PHP internals team? Seems like we have a lot of huge features in the language now. PS: This is nice `rand() aliased to mt_rand() and srand() aliased to mt_srand()`
Obviously I'm not helping your problem here; I'm compounding it. I too am a developer with 10 years commercial experience who would be happy to mentor someone. I've signed up for a system here in the UK where you go into schools and run a programming club but so far I haven't had a response... 
&gt; I know OOP has been the thing for lots of years and over the last few years frameworks have been "the new way". This isn't a "new way", this is just common sense. Why you want spent time to support your own framework? Just use one that already highly promoted. &gt; What benefits do I gain by spending a week or two learning a framework and what MVC architecture etc provides over just sticking with the old static abstracted PHP development process? MVC is not an "architecture", this is one of solutions of simple problem: how to make application logic to be independent of UI (HTTP, Cli, CRON, Queue and so on). Basicly you just move out all UI staff in separate layer. This is just **separation of concerns**, something like **decomposition**. It reduces complexity and risks. Forget about MVC, this is just buzzword nowadays. All this crappy articles about MVC will just misguide you. Separation of concerns is the goal of MVC, so instead of "implementation" you should understand goal. First you should learn about stuff like coupling and cohesion, inversion of control... Or even maybe you should have understanding why separation of concerns is important, why global state (global variables) is hard to maintain and so on. MVC, OOP, Frameworks is just a tools to solve this problems. Without understanding of this problems it just to hard to understand solutions and why you need it. Before OOP it is better to learn about [structured programming](https://en.wikipedia.org/wiki/Structured_programming) and [design](https://en.wikipedia.org/wiki/Structured_analysis#Structured_design). "Classes" in PHP is the only way to "cut" state into pieces. Something like modules in other languages. Most of the time devs who uses frameworks write good old procedural code without any "OOP ideas" 
Here are docs. https://deploykit.co/docs?utm_source=reddit&amp;utm_campaign=beta_announcement&amp;utm_medium=banner
https://wiki.php.net/rfc#under_discussion
Because it's such a bad thing to pull in a good framework like Symfony (I would pull its' components in either way) and actually get work done instead of spending hours finding all the components I need and putting those together. But of course I'm just a dumb redditor.
Bought! Thanks! I'm in the same boat as OP.
Spending hours? You will be up and running in less than an hour if you know what you are doing. Installing a framework won't be much faster. But it will save you a lot of headaches down the road. I write code to write a specific business problem. Using a cookie cutter framework is almost never the right answer.
I have run into framework specific problems many times, in every large project that I worked on in the past. A framework saves you time if you work in an agency that does throwaway projects. But for large projects (that live 5-10 year or more), it is rarely the right thing to use.
What in particular do you think is missing?
Which DI container will I use? Which PSR-7 implementation? Which PSR-6 implementation? Will I use a cache that maybe does not follow the interface? What do I use for session handling? Which DBAL/ORM will I use? Should I follow ADR or MVC? Which templating system is the best for my use case? Which DB migration system will I use? Which error handler? I put great care into which components I pull in. If they are not chosen by someone else (but of course still replacable by me) it will take me a lot longer to choose all those components. And setting up a framework literally takes about 10 minutes.
Here is a free introductory video tutorial for Symfony: https://knpuniversity.com/screencast/symfony
Great stuff!
[I like this for DI](https://github.com/rdlowrey/auryn), but use whatever you think is best. Screw PSR-6 and 7, they are bad. Use something specific for your problem, write an adapter if you need a 3rd party component (as you always should). DBAL/ORM should never even be part of a framework anyways, persisting the domain is NOT what a framework should do (Symfony gets this, they removed it from the framework). Screw ADR, never seen anyone talk about it outside of reddit. MVC is not possible in a request/response environment anyways (see ircmaxells blogposts on this). All you need is an entry point into your application (controllers). DB migration is also not something a framework should care about. Yes it will take longer to pick components and that's a good thing. You should think about what you are trying to do and what problem you are trying to solve..
Eh? Why?
Is there an easy way to find out which extensions support PHP 7.1?
https://www.reddit.com/r/PHP/comments/5fwxkk/php_versions_used_in_commercial_projects_2016/
Wonderful update! I love the Nullable Types features. Keep up the good work guys! 
Shameless plug: I just put a little [PHP ORM framework](https://github.com/tivoh/torm) on GitHub. &gt; Because we definitely need another ORM framework. &gt; *-- No-one ever*
Absolutely; this release wouldn't have gotten out the door without Joe :)
&gt; Adopt Code Of Conduct Yay!
Sounds like we're at the same point in life, what is this programming club system? I'm interested in offering my services as well.
That's a pretty good sign, given that over [60% of PHP sites at large](https://w3techs.com/technologies/details/pl-php/5/all) are using 5.4 or below. 
No. You don't build everything yourself, you just use well documented components that the next dev either already knows or can pick up easily by reading the docs (like he would with a new framework).
IMO the result of good collaboration doesn't necessarily mean that everyone's concerns or ideas are implemented, but that they are discussed among the team. There should absolutely be a defined objective that the team can use to filter out what's relevant/necessary and what's not.
There are definitely times where you don't necessarily need to use a framework, but it still seems worth the effort to use a framework where the different components are already wired together then trying to do that yourself.
Have you ever worked with Symfony? It is very slow and can't even work properly without caching because of all that additional garbage
Then you certainly don't use it as advertised. class Idea extends Eloquent This is from their homepage, even the first snippet that you see is bad... I'm sure you can write good code on top of it if you ignore eloquent, don't use their service locator, don't extend the base controller, don't use facades etc... My point being is that the framework makes it harder to write good code, not easier.
"good code" is relative to the developer. Using eloquent, Laravel's queueing and other mechanisms we still obey SOLID principles.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'm wondering how many times this particular package is going to be posted. Enough already.
1. /r/phphelp 2. The simplest way would be a page with automatic refresh.
No it is not relative. You can't obey SOLID with Eloquent. [Please educate yourself](http://softwareengineering.stackexchange.com/questions/119352/does-the-activerecord-pattern-follow-encourage-the-solid-design-principles). An entity that know how to save itself is a violation of the SRP. Eloquent also abuses the extend keyword. 
A few things to note: This would allow for ValueObject to automatically be cast, for userland implementations of String, Integer etc classes, and for automatic conversion to expected argument types. # Expected Argument Types: If your function will allow either a Collection or an array, but you expect to work with a collection, you will have to convert it within your method, and then work on it as a Collection, so type-hinting isn't possible (except docblock based), and your method now has added complexity, it doesn't / shouldn't need. # ValueObject If you expect a value of `Currency` but can pass around integers / floats, this will be able to convert any int / float to a Currency object as you'd expect. So that you can then use it as an object. For example. `$currency-&gt;format()` # Scalar Casting A commonly requested feature in PHP is the ability to use Strings as objects, so you don't nest your methods like strtoupper(str_replace($string ... )). This will allow you to cast your functions arguments to convert any ordinary string to a String object type, which can then be used as an object. This will allow: ``` function uppercase_me(Str $string) { return $string-&gt;toUpperCase(); } ``` or however you wish to mess with them. It will allow for string chaining, without having to cast your own string instances everywhere, which is the only way available currently.
Thanks for all the effort, everyone! I like that PHP is getting more and more strict. Getting rid of the regex code evals, mcrypt extension, too few arguments exceptions, and everything can help to prevent unpleasant surprises. Waiting for the 7.1 in ondrej repos. My blogs and hobby projects get the 7.1 love as soon as possible. I had them tested in RC6 and none of the BC issues were hit.
indeed. looks like that is all amir has posted in the month his account has existed.
No xDebug yet though. Deal breaker.
Compile it from github source, master branch.
I've started compiling [instructions for installing PHP 7.1 on various operating systems](https://www.colinodell.com/blog/2016-12/installing-php-7-1). It seems some of them don't have final release packages yet, but I'll definitely update them once they do.
Is this related to the old autoboxing RFC? https://wiki.php.net/rfc/autoboxing
gonna be spamming f5 on https://hub.docker.com/_/php/ all day
Thanks! Here is another goodie: https://gist.github.com/romaninsh/8cfbd6b18669489643eefbdfdbd9f9b3. Replacing SQL stored procedure with UNION logic fully expressed in domain model. Includes sample queries. Some things just can't be cached. Improved performance at least 5 times.
Your work? Seems to be very secure.
It's similar yes, but not really the same use case. The major difference is that autoboxing always casts a primitive value of some kind (say integer) to the same class (say `Integer`), allowing you to use primitive objects as though they were objects. Whereas with this proposal the conversion depends on the type hint, the same primitive value may be converted to any class that supports it.
As one of the Phan authors, I just wanted to mirror Sara's comment that there aren't any plans to merge Phan into PHP. Beyond what she's said, we're also hoping that more tools like Phan get created (now that we have an AST and such things are possible), and it'd be premature to say that Phan is the one-true-analyzer.
&gt; Meh, it's nothing major really, just a number of small pains that add up. Yes, exactly. PHP 7.0 was also nothing major, in terms of BC breaks. I'm glad we can move forward without a Python 2v3 situation. Odd that some people here think this isn't a worthwhile discussion. 
whats the bottleneck? have you tried to identify the problem with the blackfire.io profiler? let me guess ... you're using a vagrant VM with NFS/shared folders?
It is similar, but not the same. What they have there is a way to convert all objects to that type, whereas my concept is to only convert parameters to that type. Also, my system will not allow you to do `1-&gt;addOne()` like their example shows, but instead will allow you to cast a parameter of `1` to an object of `IntType` for example. Which will be a class like so: ``` Object(IntType) { value =&gt; 1 } ``` You then can act on that array, as if you always had an object of that type, but it will not infer anything magical at use. So, doing `1-&gt;addOne()` would be a syntax error, as it currently is, but doing `$int-&gt;addOne()` would treat it as though you had done `new IntType(1)` to begin with, but instead you only had to pass into a parameter the value `1`.
Yeah thats pretty much the face of it. This _should_ be more efficient than the autoboxing proposal, since its only where its used and desired, not all literals.
I understand you inspirations but you're essentially asking for something similar to autoboxing/unboxing. The performance implications of adding this as something that'll be commonly used throughout PHP are really bad. For simple ValueObject casting, I use a variation of this: interface ValueObject { static function fromValue($value): ValueObject; function toValue(): array|string|int|float|bool|null; } And it "just works", so changing the syntax to cast doesn't seem like it changes much.
Can you rate my readme using those points? For example, is it ok to dump the whole default configuration with reference in that case, or is it too much noise for you? * Quick description: check. It may be a little cryptic, but it has a narrow target audience * Demo link: n/a, it’s a library. * Install steps: there’s an one-liner * Usage: another one-liner. There are sensible configuration defaults shipped, so it works out of the box * Contribution notes &amp; development: that’s not my goal (i’m not looking for contributors), so I skipped this entirely * License is set both in `composer.json` and in `LICENSE` file, but there is no mention in the readme. Is this enough?
To answer my own question: ~~it looks promising~~ [No](http://lists.alioth.debian.org/pipermail/pkg-php-maint/2016-December/015881.html ).
The latest thought would be that a __cast method wouldn't be required, instead it would work based on having a Castable interface, with this, it would just use the __construct() method, which can be statically analyzed, and already is by IDEs, it would just mean extending the analyzing to a subsequent method.
Definitely use a `cron` task for this. It's what the tool was built for. [Here](https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps) is a great DigitalOcean Community article walking you through creating a crontask on a server. It assumes you're using a VPS, but you should be fine to follow the directions described in the article in a shared hosting environment, assuming of course that you have SSH access.
A page that automatically refreshes still requires a client connection... Use `cron` for this.
I wrote a small library for building lexers. As this is my first published library I'd love to get some feedback. It's also available on packagist: https://packagist.org/packages/silentbyte/sb-dynlex
This would be analyzable, indeed. Although it can't do what collect() does, which would require support for union types. BTW, I think prefer the dedicated __cast() method over this. 
I feel as if this entire RFC is designed to fix the problem with Laravel's Collection by changing PHP to fit Laravel, rather than the other way around. I mean, I have a very similar library, which works as-is: function name(array $collection) { return Lists::sum($collection); } There's also array_sum, but my point is, the whole use case is kind of forced.
What you are asking for is to convert native datatype on the fly, satisfying your object model. Why not just use the object model right away? It is not like you have hundreds of `new` in every file. Unless you are trying too hard to be an oop genius or just doing it wrong. Sorry but the whole thing is juvenile to me. 
Uniontypes are currently analyzed using docblocks, which it will be able to extend to. It would be able to analyze the docblock for the constructor for any union types. As for the __cast() method, it was pointed out to me that any variance from how a cast is performed and how an instance is initiated would be a bad idea. Thats why the idea was altered to use the constructor.
&gt; Why not just use the object model right away? It is not always possible to. For instance, the properties given to you in a closure, you have no control over (potentially), and so have to convert them within the closure itself. This is often a simple `new Something(...)`, but it happens all the time. This is a way to allow code to be cleaned up. It also allows for typehinting in places it wasn't previously possible to do so, due to the lack of union-types. I can now effectively hint that I accept either an instance of a class, or a string.
What if I am a magician? :O https://d2x3wmakafwqf5.cloudfront.net/wordpress/wp-content/blogs.dir/54/files/2016/07/41.gif
&gt; IDEs analyze them but PHP doesn't Apologies, I thought you were still talking about your IDE not being able to interpret the union. If you do not typehint the constructor (leaving it in docblocks for example), then it will work the same way that PHP currently works. It will try to initialise the instance for you, and if it would be accepted when you do `new Instance(...)` then it will be accepted here. If it were to throw an exception, then the TypeError will be thrown, as currently happens with invalid types being passed through. &gt; It's a poor practice to restrict constructor signature in an interface This wouldn't restrict the constructor signature to adhere to the interface, instead it would be more that the interface can only be used on classes with one **non optional** parameter in the constructor. The argument made previously, was that if the constructor accepts multiple parameters, there is no way to pass those parameters through based on the parameter you have. class Something implements Castable { public function __construct(string $a, int $b = null) { // do something } public function __cast($property) { return new static($property); } } The only thing you could do there would be to act with the same assumptions you can make if the property is null in the constructor. That is, its either optional, or you new up in the constructor. My thinking currently is that if the constructor has more than one required fields, it throws a runtime error when it comes across a class that tries to implement castable.
"Mocks always have stubs." $mock = $this-&gt;getMockBuilder(Mock::class) -&gt;getMock(); $mock-&gt;expects($this-&gt;once()) -&gt;method('mock'); Where do you see stub here?
Should have. And now it's fixed. I think that's great :)
&gt; then to pass it to something else that requires a string Anywhere that requires a string afterwards would work the same way as it currently does, by invoking the __toString() which does the unboxing here.
Well, maybe a client connection is the point. To me, “a system that reads temperatures and other values from a database” sounds like it could be a web page that would be kept continually updated while on-screen.
Use `\s*$` at the end so it must be at the end of the file?
Okay, you make a very good point about conversion from array to object. 
CoC's are just a way for bored talentless SJWs to harass people.
I can't understand the value proposition, can someone explain it? It's a cloud server where they'll run "composer install" for Symfony for me?
I'm a user of Platform.sh and they're great. Configuration is all in a yaml file so changing disk space, adding redis and Apache Solr, or configuring the web server all are just a commit and push away. Git branches each get new servers or with github integration, each pull request gets one instead. Just pushing and sending QA the link to pr-123--somehash.us.platform.sh to test changes before the merge is a really pleasant workflow.
It would seem many people here feel threatened by them.
2) It really depends -- for people who don't use Sublime, it's just clutter. 6) In general for libraries, which will probably be extended by end users, nothing should be **final** unless there is a very, very good reason. Also, for the same reason, **protected** is preferred to **private**.
I don't agree that protected should be preferred over private. Occasionally I use protected methods where it makes sense to do so, but I don't remember the last time I used protected for member variables (not only talking PHP here). P.S. Thanks for the quick fix!
Before heading to php.net/, let's give a big round of applause for all PHP people that are making PHP great again! :clap:
What do you mean by casting multiple types?
https://php-shift.com/
From what I understood form the presentation is that the key selling point is the easy way to also have branches deployed on an accessible URL. The branches will have also a copy of the db which can be synced. This allows you to test and develop with real production data. Which seems awesome when hunting a bug down which you cannot reproduce locally. Also they configure the server from your configuration, so you can setup only the services you need (mysql, postgres, reddish etc.)
It's not about rad, it's about DX (Developer's Experience). Flex is a tool that wraps around composer and bundle management. It allows a more new dev friendly interface to install certain bundles via composer and automatically adds/removes any composer scrips, bin files, and config that is required. The main idea is that the community defines, for example, what kind of admin system is the best to use and this tool will install that admin system when you ask it to. This tool will make it easier for new (and experienced) devs to manage bundles, requiring no more changes in the kernel to enable them (making generated kernels possible). Source: I was at the presentation @ SymfonyCon
Rather that saying it supports immutable objects would you mind extending on what kind of immutability it is? How much is supported and in what way?
It's not out yet.
Well, yeah I get that. The point is that nothing should be managing your manager. I get that it's just one thing, but it sets a dangerous trend - imagine if every other software project just "wrapped" composer... we'd end up needing a new project to manage the projects that manage composer, which has the job of managing projects.
In [your example](https://gist.github.com/alexbowers/9520c8df746249ecae2d9c7aad2e54ae) you cast from array to Collection. But what if I want to cast from another object to Collection too? e.g. a List class
Ah. I see. There are two possibilities here. First, if using the Castable interface, then whatever is accepted when you do `new Collection` would be accepted when casting. It effectively does that for you behind the scenes. Secondly, if using the __cast() magic method, then whatever is accepted by the magic method. It is entirely down to the developer to accept what they want. If they can convert a List to a Collection using their constructor, as well as an array to a Collecton, then both can and will be cast.
Forge provisions servers on DigitalOcean, Linode, etc. it's not really a PaaS. It helps you build the servers, install SSL, configure sites, manage daemons, etc but you still own the servers on DO and have full root access to them. That keeps it very affordable ($15 a month for unlimited servers managed) because my overhead is low. Platform / Heroku / whatever else is a lot more expensive ($130 a month for a 4gb instance on platform vs $20 on Linode). However, they are providing more hand holding for you. 
This is literally my experience with my own projects. Two my most popular an best earning sites are mostly procedural php code with no frameworks, no ORM and very few third party libraries. They are very fast, minimal, I know every line in there so for me it's easy to work with them, but I know I would be totally ashamed if I needed to make the sources public. They are full of hacks and bad practices. When I try to create something more technically sophisticated, it usually ends with dozen daily visitors or I just abandon it before it's even finished. From what I have seen with both my own and some client sites, code quality and trendiness has very little to do with project success and over-engineering does more harm than good.
Thanks for posting this, I've been looking for a better ecommerce solution lately. Sick of magento's complexity and hard upgrade process, disliked prestashops source code, and won't ever touch wordpress again.
Good job, guys. Looked great last I checked it out 
Cool, I think this would be useful.
Are you talking about this? https://wiki.php.net/rfc/immutability
Could someone explain the real value here? Is it mainly for return types? I was fine with "$foo = null" for arguments. 
Generics would be nice!
I would personally love to see security improvements on a few questionable functions. For instance, we should remove parse_str's ability to set arbitrary variables in function scope. 
According to php's official documentation, this is recommended practice and doesn't break the code: http://php.net/manual/en/language.basic-syntax.phptags.php
Inheritance is breaking the encapsulation of your class, so that's a very good reason to make things final and private by default, *unless* your class is specifically *intended* to be extended. Now, in application files I do skip final and use protected, but this code is not reused by other applications, so the people who work with the code are expected to be more familiar with the matter. With libraries, you want your contract with users to be very specific, to avoid wrong use.
Your "optimized" queries seem to be [correlated subqueries](https://en.wikipedia.org/wiki/Correlated_subquery) which can get extremely slow on big datasets. I don't see any point in using a library that generates correlated subqueries. Right now I use doctrine and when these types of aggregations get too slow for doctrine I write custom queries similar to the optimized versions as suggested in the wikipedia article I linked above. A lot of what your framework does fixes issues I don't have. The crud component that you show off in the 1st youtube video is cool but I could never use that in production. I get the impression that you sacrifice a lot for minor performance gains which is ironic because you completely missed the mark on the sub query optimization EDIT: Also SELECT * FROM table WHERE table.some_id IN (SELECT id FROM other_table WHERE other_table.condition = 1) is in many cases much slower then SELECT * FROM table WHERE EXISTS (SELECT 1 FROM other_table WHERE other_table.condition = 1 AND table.some_id = other_table.id)
Congrats, really hope it kicks off and ends up being a better alternative to Magento, OpenCart, Prestashop, etc.
Thanks for noticing and +1 :)
I've updated post.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Framework has been updated
&gt; I figured it was time to learn how to do PHP professionally. ... I want to learn *why* it works This may not be *quite* tuned to your situation, but I've had people tell me my book [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp) helped them transition from less-OOP to more-OOP practices. Your mileage may vary on that one, but there is a 45-day money-back guarantee.
think there's an rfc for official support for something like this https://wiki.php.net/rfc/debugging_pdo_prepared_statement_emulation_v2
Wow, reading this thread and your responses is so surprising to me. As a student getting into software development, I've always kind of seen you as a pretty chill man even in the face of critics. But boy was I wrong. Are popular developers usually this condescending in real life? Is it normal to call people "no-lifes" when you're criticized? and then this comment: &gt; when I literally get up every single day and do whatever the fuck I want for the rest of my life basically Nahhhh, you do know that Laravel is not always going to be the number 1 framework in PHP right? As much as I love Laravel its funny because you wrote [this post](http://taylorotwell.com/php-developers-who-have-inspired-me/) about two years ago and you said you wanted to be humble like Fabien Potencier . Maybe you changed your mind about wanting to be humble but seriously, you're not God. All you did was create a framework which has been done by so many people before. I'm not trying to bash you and I've always thought you were unfairly criticized but maybe people that criticized your attitude were right all along.
Write your own framework, not necessarily for use, but to learn from.
&gt; Hi, if you are looking to become a professional PHP developer, you would never be coding in plain PHP. As a professional PHP developer, this is not true.
WOW! The intention looks very promising. However, both proposed RFC and the discussion looks rather disappointing. The guy named Matteo Beccati from the list really have no clue, and when I see such people discussing RFC, I feel that there is noting good to be expected. Either way, for the moment, the current proposal has two major drawbacks compared to the solution discussed here: - it works for the emulated prepares only. While obviously you need your SQL in either mode. - it spits the data right in the stdout which makes not a slightest sense. Also, there is a bug, https://bugs.php.net/bug.php?id=69356 and I am not sure whether this new functionality is prone to it as well. 
I simply reject the somewhat common notion in open source that maintainers must always be perfectly polite no matter how rude and condescending other are. Sometimes I say things I regret in the moment. Maybe the constant annoying comments you get kinda wear you down over time. For example, on Thanksgiving the first tweet I saw was an unprovoked "Fuck You Otwell" from someone I don't know and have never interacted with. 
In Laravel You can use this: https://blog.piotrows.pl/en/laravel-simple-query-debug/
The thing is.. OOP is way more than inheritance, in fact good OOP actually avoids inheritance as it is a form of "hard coupling", composition is almost always preferable. But OOP in itself isn't actually ask that useful. But it lets you look into SOLID principles, these lead to Design Patterns, one of which is MVC (sort of), which is what most frameworks push you into. Basically frameworks take care of some boring stuff, routing for pretty urls, dependency injection, a place to put your classes (M) templates (V) and logic (C). It gets you on the right path without you having to learn why. You're free to focus on your business logic, and the templates. It's always better to know why, but sometimes seeing it all work together first can be helpful. If definitely look into SOLID, and don't be scared to dive deep, the terms aren't super intuitive, (Liskcov substitution? Just means code to an interface not a concrete class, which lets you compose your classes and swap functionality super easily - Don't say "ingredient 2 of my FruitSalad class is an AppleClass but an IFruit *interface* allowing you to keep your fruit salads varied) I hope this helps slightly. Took me years.
The PSR 7 interface (http://www.php-fig.org/psr/psr-7/) provides "with'er"-methods to transform Request and Response objects: e.g. $message = $message-&gt;withHeader('foo', 'bar'); How would you implement such a method for a immutable properties?
7.1 is out. I'm using php7.1-fpm from the same ondrej/php and it's working without any issues.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This question comes here all the time... Maybe just look into the previous topics on self.PHP?
Nice statistics! :) But besides that: Just sad. :-(
/r/learnprogramming is probably the best place for this info tbh
It's really interesting how people always throw at me that question with PSR-7.We are dealing here with another issue, you can have public properties and still have getters, modifiers whatever, it's just that those properties don't have to be protected by encapsulation anymore. I'll be honest, at the moment, if you were to implement PSR-7 with patch referenced above, it would be ugly because for every modification you'll have to manually construct another instance. We are still trying to find good painless solution for that. But that will be definitely be another RFC. 
I usually have multiple `php -S`s running on my dev machine. I wrote this script to: 1. run in background 2. redirect logs in a separate file and accessible 3. restrict starting duplicate server in a project
I am curious, why don't you ask why there are different frameworks Q. Why there are different car makers and different models? Why not everyone are using same car, same clothes, same food? A. Because a monopoly leads to rot and decline. Everything you have i this life (Twig included) is because of competition and reinventing the wheel. Q. Why this subreddit always talks about not reinventing the wheel? A. Because before reinventing you ought to master the old way. And in case you are, you wouldn't come here asking for the advise. Most likely you'll fail anyway. But if you succeed, you'll move our civilization a step further
There are a LOT of *really old* tutorials out there, not just on W3Schools. I've been thinking that someone at phptherightway.com or even php.net should add a section near the top of the docs where we can hope newbies will read, that explains some things to watch out for to identify ancient tutorials, so if you look up how to make a login page and find [this shitty tutorial](http://www.html-form-guide.com/php-form/php-login-form.html) you'll know to run screaming and ignore everything that page tells you. Like using the `mysql_query()` function.
Different templating engines have different goals which can result in different advantages and pain points. For example, I really dig Twig's block functionality but I also like that ZF3 templates use native syntax. I also like Mustache because it gives me the ability to use templates in PHP and JS. 
First time I see this. Could you please get a backtrace from a core dump? (with debugsymbols installed please)
The only problem I see is there are a lot of copy and paste developers who might take the answer at face value or with very minimal modification to fit their code leaving these vulnerabilities all over.
Sounds like a personal problem
$id = "'; delete from cart; --';
Agree, even though most of the "vulnerable" code shown looks really gross, we don't know whether the variable is being cast to an integer or checked before it's even used in a query. Also there's lots of "secure" PDO examples shown as vulnerable: &gt; $pdo-&gt;prepare("UPDATE users SET avatar=? WHERE id=22 ")-&gt;execute([$u]) ; &gt; $select = $bdd-&gt;prepare('SELECT words FROM forbiddenWords'); Nice project by whoever made it, but I don't consider it completely accurate. Better would be to "hall of shame" people who still use old libraries.
The variable might be filtered still. A simple cast to int for example.
You can't be and that's also not the point
How is this not the point? If it's not injectable sql code it should not be considered a "sql injection" and shown on a page listing sql injections. There are many examples like this that make the accuracy of these statistics questionable.
Why would you risk your database? Is a prepared statement so much trouble that it's not worth doing when you filtered or cast the variable? Does that suddenly make you immune to injections in a way that prepared statements cannot?
Ok i now see your point
Why not just use Monit?
Such ignorance is just amazing. How does it matter where $id comes from? Ever heard of 2nd order injections?
You shouldn't use W3Schools for anything. Not only is their name a bit shady their documentation is outdated or just plain wrong on a LOT of stuff. Their CSS docs are... ew.
It matters because if it isn't susceptible to injections it's not noteworthy. These are statistics about SQL injections in PHP code. If they are supposed to be at all accurate then you HAVE to ask yourself the question if it's actually injectable or not, otherwise these statistics make no sense at all
When googling, I've found it helps to only show results within the last year.
You are just mistaking this statistics. It is not a ready-to-exploit pen-test result. Nobody claims that. This is just picture, how bad the situation is. And the fact that there are a lot of people in this sub do not understand that manual formatting approach is deliberately vulnerable is baffling.
I'm with /u/Padarom here these statistics don't represent a correct picture of SQL vulnerabilities but show how many people are using the older APIs. The user might have sanitized the input and not posted that part of the code. If you sanitize the input using the older APIs is perfectly safe. Using the older APIs doesn't automatically imply that the code is susceptible to SQL injection. 
I actually love the PHP documentation. I'm an intermediate web developer at best, and don't do it as a career yet. But the documentation is very easy to follow, and I almost always find the answer I'm looking for simply by looking at the function definition and reading a few examples in the comments.
It's a real disaster that you guys with such ancient views have a voice here. An the exact explanation, why the situation is such bad. I just can't believe I see that stuff in 2016 in a supposed-to-be-on-a-cutting-edge sub.
&gt; Prepared statement is more resource intensive Citation needed.
W3Schools kicksass, that's why it always shows up at the top of Google search results with stack overflow etc.
Great course, only criticism I have is that the mobile layout leaves something to be desired.
my professor recommended w3 schools
Someone at phptherightway is *you* :-)
Schools often are very out of date. I'd ask why that resource over others and try to figure out their understanding. Then go find even better quality based on what they are looking for and recommend those to the professor to suggest instead.
Your newsletter is Awesome. Thank you for your efforts. Signed up :-)
I am not stating that the queries are perfect. You can still fine-tune them, convert into joins or use some more advanced logic. The goal is to make those usable with almost no effort on the user's side. If you have all the time to fine-tune every single query, that's great, but in most projects that's a luxury. On the point with "where exists" - if it's not just "all talk", we can try and get that implemented together, reach out to me on gitter.im. 
Monit is great but that nor any other centralized supervisors were not a good fit for my purpose: firing up a temporary web servers for different projects 
Twig is the best template engine I have used for php ... + it has a C extension written to make it more faster.
You can probably use w3schools as an example for good SEO - that's probably the only thing they are actually good at. 
I see lots of hate for w3 schools. I used to buy into it. Now I realize there was just something about it that made my brain easily hackable into believing they were bad. Now that I am looking at it more objectively they are clearly one of the bets resources out there to lean about HTML and CSS. I'm sure people could point out specific flaws, but you can do that with most things. The big picture is they are very helpful in a way other websites fail to be. I know they don't provide any official information and, just like most websites, can and do post outdated or bad information or advice sometimes.
Sounds like fraud.
Also PHP.net says the parameters are indeed passed by reference: bool mysqli_stmt::bind_param ( string $types , mixed &amp;$var1 [, mixed &amp;$... ] )
There are a lot of great resources out there if you search around. Around 4-5 years ago www.w3fools.com was formed specifically because of how incorrect all of the information on w3schools was. While they have since improved apparently, they used to post random snippets that barely resembled javascript and would never actually run. I still have a chrome extension installed that hides them from all search results.
I wrote about what I've been working on for the last year really hard - on a static analysis tool for PHP whose objective is to discover bugs in your code without actually running it, bringing PHP closer to compilers of statically typed languages. It uses information available during parsing of PHP code - typehints, phpDocs and reflection. I've been using various development versions of PHPStan over a year for watching over production code at a company I work at. It saved our asses from deploying a bug into production several times :) It's also already used by several other prominent startups in the Czech Republic. When compared to other similar tools, its advantages are: speed, extensibility (to define "magic" behaviour of classes implementing __get, __set and __call) and customizability - it can check only what you tell it to. You can find out more about it and its philosophy on Medium (https://medium.com/@ondrejmirtes/phpstan-2939cd0ad0e3), or check it out directly on GitHub (https://github.com/phpstan/phpstan) - of course it's open-source :) I welcome any feedback, thanks! 
The gist of it is that it is unsafe because it is easy to make SQL injections possible by not properly escaping and sanitizing the input SQL. Instead, you would use safer mysqli_* functions or PDO/prepared statements. Or you could go for a database abstraction layer like Doctrine DBAL that provides intuitive abstractions that can be used uniformly in your application without you having to write SQL.
&gt; Frameworks like CodeIgniter seem to have fairly arcane opinions on templating. "arcane" That's an.... odd word to use. Did you mean "antiquated"?
This is why you use Python; it never changes. Jokes aside, there are so many terrible, terrible PHP tutorials out there. But the PHP docs are pretty decent. 
Could you maybe explain / name such use-cases? Because your examples in the RFC (Email, File, Currency) are just normal ValueObjects which work perfectly fine with immutability through encapsulation.
You can add this tool into your CI server and enforce specific rulesets to ALL branches / commits. :)
Looks great, thanks for the good work. Will definitely use it. :)
Yup. All this hate of this is pretty funny to me. I use them all the time... not that they're great, plenty of other resources out there as well, but they're fine. IIRC at some point they refused to rename their site to remove the W3 part and people got their panties in a twist over it. Lots of bitching and "dae think w3schools is the worst?" posts everywhere for like a good month after that. 
&gt; Needs a big "Not Actually Accurate" disclaimer at the top, because you can't tell if an SQL statement is injectable automatically. Plenty of people make scripts only they can use, or transform the information so that its not a string. aren't mysql_* functions deprecated in php 7 though? these people must be using php 5 I, assume?
w3 is good for sql and that's it. MDN for html/css/js, PHP docs for PHP
I've become very reliant on this. It's not uncommon to come across a thread that's... 10 years old. As good of a search engine as it is, its over reliance on "popular links" is starting to show a weakness. But when you have sites like stackoverflow saying, "we answered that years ago, don't ask again." What can you do?
I'm pretty new to PHP (2years in) but switching to PHP 7 has made my troubleshooting time cut in half just because of relevance of fourms and activity in the community. Sorting by posts with in the last year was a must before that for me.
Native prepared statement requires an additional roundtrip to database server, so formally it is. But heck, seeing this argument is just devastating. 
What site do you think is better? I personally like the W3Schools site better than the official PHP documentation, even if it is outdated. But that's just my opinion/preference.
Ok, got you in the context. I didn't "ridicule" anyone with the comment above, but just illustrated the point in the context of this thread: "yes, the situation is that bad as it is shown here. For the proof you can visit /r/phphelp". Clear enough?
It works because PHP checks for a start tag and an end tag in the file and silently error corrects the missing end tag on parsing.
Repeating the name of the method/class is great for fooling QA people that require documentation, right?
Very much of it depends on management. Management says they want documentation but their actions say otherwise.
I think PHP7 requirement isn't insane, especially for non-production tools. It's almost 2017...
This isn't a text editor. So you don't have to mandate a particular text editor for everyone you work with.
Other people replied to this with correct points 😊 Also, PHPStan is already smarter in certain situations - for example PhpStorm doesn't know the result type coming from an array_map call, PHPStan does 😊 And in some ways, PHPStan is stricter - PhpStorm looks what type you assign to a property and analyzes according to that, PHPStan looks at and enforces the type in the property's phpDoc and will tell you if you assign something different to it.
Awesome tool and I love the CI integration point made in one of the comments below. Can you however tell me how this is different from Esty Phan (https://github.com/etsy/phan)?
Also it doesn't exist in PHP 7.
Lol? Run 7 on CI, meltdown on php 5 production. 
The Mozilla Development Network runs circles around W3Schools as a CSS and HTML reference. You're missing out! 
Running different version on dev, ci, and production, then surprised if it blows up in your face. lol?
Here's a best practices question. Say that you're doing the right thing and using prepared statements through PDO. But obviously a malicious user can't know this, so they attempt an SQL injection that gets placed into a an insert statement. For example, let's say that you're adding a user to a DB, and they try to inject a drop table command. Since you used a prepared statement, you're safe from the command, however now the string that you're adding to the database is a drop table statement. How do you normally deal with this? Do you just add a user to the database with the name "DROP users?" One solution I've been thinking about is using a library to check if any of the variables that will be bound are valid SQL, and if they are, to just throw an error. But is there a better way?
Your code doesn't have to run on PHP7, PHPStan does.
Bobby Tables needs an account too, right (https://xkcd.com/327/). I wouldn't really care. These strings are arbitrary, and as long as I'm careful to sanitize in output, I should be OK. 
Wow, that guy's code on GitHub has 126 stars: https://github.com/simfatic/RegistrationForm
You're too kind, thank you! :D
Thanks, comments like these make it worthwhile! :D
not unlike [PHPStorm running inspections „offline”](https://www.jetbrains.com/help/phpstorm/2016.2/running-inspections-offline.html)
I shall do my best to not disappoint. 
The thing is, 5 years ago they truly were *terrible*. They didn't just have a few mistakes, they had *loads*. It's very clear the authors had only the most basic surface knowledge of the topics. Take a look at w3fools.com in the wayback machine and see. 
I’m curious, why would you use php builtin server instead of php-fpm, especially if it isn’t as simple as running one command, but instead needs additional tooling?
No, I meant "archaic". Though arcane - "understood by few" - isn't entirely inappropriate. 
If you've got a better idea I'm all ears! Would just like to keep my db clean. 
Start on a project of your own. If you don't have any inspiration for something completely new try to build a copy of an existing site. If you get stuck use google to find what's wrong and how to fix it. Good luck!
How do you handle long running processes? I have a report that we run regularly that takes 10+ minutes to complete but someone has to sit and run it in a window as it doesn't seem to like being run at the command line. Right now we just have a special instance of a server that is configured to run scripts for a really long time and any requests to a specific route only run on that box. I'd like to hand off the report to a queue and have some process run it in the background like having the endpoint store the initial parameters in JSON, storing the requests in the DB, do some preliminary filtering into a staging table, then running the individual records (or chunks of them) in a secondary queue until they're all done, then once complete kick back an email to the original requestor. I'm not sure if I'm overthinking it but I can't seem to find any best practices or examples of such a thing. Any suggestions? 
I'm actually reasoning. I'm not saying it's stupid because it's stupid, I'm giving a reason why I say that. You're the one just saying everyone's wrong over and over again. Too bad RES ignoring doesn't prevent me getting push notifications on my phone :/
I appreciate the irony of your arguing semantics in a discussion over syntax.
The only major PHP framework I've ever known intimately (as it's the one my company uses for its online system) is ZF1, although I have had the pleasure of toying with twig before. from my limited experience with the latter, I still prefer the pureness of Zend's templating: all it is is PHP wrapped in angle brackets and minimal markup that makes it blend astonishingly well with HTML.
&gt; it doesn't seem to like being run at the command line May be you have to be a little less servile towards a script and just fix it?
Well, if you have that much spare time - why not. You see, it's hard to suggest whatever solution for a task you consider pointless. 
What you actually said is just "we cannot know if it's vulnerable". So it's just a pointless remark. A useless blab. A usual internet comment without any value, just for sake of it. And surely I am wasting my time joining this conversation. It is not your remark that is bewildering but the voting on it. 
In my sample code I might skip it unless I'm utilising it for a specific purpose (Maybe by default an endpoint returns HTML, but with an `Content-Type: application/json` request I'll return a JSON response), but I try to make sure I set it for real code. More specifically, I try to have a `ResponseFactory` that my controllers use to return the correct response, with a `json(array $payload, int $httpCode = 200);` or something similar method, so that if I've missed the `Content-Type` it's easier to add in
I may forget it on a chalkboard interview as I never set it the in the actual code, because Symfony is doing it for me.
mysql_* were removed in php7
It currently requires too much user interaction to configure the batch process to make this feasible and previous to that would randomly timeout or just stop running on extra long reports for no apparent reason which never happened in browser. Believe me I tried to troubleshoot but the timeout issue was not easily reproducible and changes to it ended up requiring more direct interaction anyway which negated any scheduling. Hence my inquiry.
Well, you have just convinced me to give it a try and I will :)
Under the hood anonymous functions are created as classes &amp; objects. Clousure part is implemented as arguments on the constructor of such clases. While normal arguments are arguments on __invoke(). Explicit clousures would only make sense when there is nested verbose code with multiple clousures defined in it... In other words when clousures are added ad hoc to existing codebase without any regards to good practicies. But that is also strange, since enclosed values for the purpose of clousure are frozen. Nothing will happen to them, so only reason why one would need to have enclosed values explicitly... would be situation when there are variables with same name at different lexical scopes. But can only happen by developer own actions. To optimize for 0,0001% and break 99,9999% of legitimate cases... PHP :D
[removed]
&gt; But when you have sites like stackoverflow saying, "we answered that years ago, don't ask again." What can you do? - Flag the duplicate for moderator attention, and mention that the previous answer in unsafe. - Flag the previous answer for moderator attention, and mention that it contains unsafe code.
BTW, if you are using the plugin, please share your feedback about new security inspections here: https://twitter.com/kalessil/status/805750613522923520
For PHP, php.net is the absolute best. Why? It is the literal source of truth as to how things should work (until the PHP Language Specification is stable and ready for consumption.) It provides expansive coverage of the available APIs and lots of comments from developers on usage of said functionalities. Also, no ads or confusion with other web vendors. For front-end web tech, the [Mozilla Developer Network](https://developer.mozilla.org) is the best resource for available APIs there. Very detailed supported directly by the specifications with lots of detailed tutorials to help you take advantage of using the various platform features. What is it that you like the W3Schools site better? FYI outdated docs are not the major issue with PHP in terms of API coverage as it doesn't change too heavily often.
&gt; &lt;?= __('Hello'); ?&gt; Just to be that guy, I find the above looks tidier when using PHP as a templating tool alongisde HTML.
If you use PDO, query() will also execute a PREPARE statement in MySQL. Check the general log. So the extra roundtrip is *always present* with PDO.
IMHO, you should ALWAYS return the correct content-type, not just for json, but for everything. And the correct HTTP code as well.
&gt; it seems like a lot of people enjoy twig every time it comes up A lot of people enjoy smoking, but it doesn't mean we should make smoking mandatory for everyone. I personally don't like or need twig, and would hate if every framework started using it by default.
You have the documentation to refer to if you're stuck, remember that. Start simple and work up. Codeacademy walked you through some of that, but now's your time to work alone. If you know the semantics of PHP, all you need to do is do a bit of Googling or searching around the docs for anything you're confused about. Your goal isn't to work with the knowledge you have, it's to build up from that knowledge.
PDO always performs the roundtrip for PREPARE. Even in query().
Hello /u/pchpcompiler, You only seem to ever post content related to Peachpie. Please take note of the Reddit rules regarding self-promotion: https://www.reddit.com/wiki/selfpromotion &gt; "It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius
You could have a variable that's user-input dependent but not direct user input that you could consider safe. It's not a black and white issue. Is that usually the case on SO? Nah. We're programmers, though, so we gotta nit-pick and argue cause it's fun as hell.
Correct, and still true
Just out of curiosity, why zf 2 and not 3?
JsonResponse FTW. 
You should, because otherwise PHP will set `Content-Type` to `text/html`, which is wrong. It would matter a bit less if PHP didn't do that.
We ran into this when our sysadmins installed Google Pagespeed wholesale without telling us or letting us test and then random websites just stopped working because it does things like add a Head tag if it's not present....
I only use the site for a quick look up for HTML and CSS tags. Site is helpful as a reference only.
I think it's something easily overlooked on a test since most modern day frameworks tend to handle those details (as they should) 
Great. It seemed so simple that I was sure something was wrong with this approach. Thanks!
I was going to say the same. You cannot know that all browsers will make the same assumptions. In the case if json, some might pick up the file extention or try and magically guess, others might default to text/html. Browsers can even be picky over application/x-javascript and application/javascript. Save yourself a QA headache and explicitly set Content-Type correctly. Phillip.
And how does a framework know what you want to return?
I don't do it manually but I use frameworks/tools that will do it for me.
Here is a list of things that are blue: * The color blue * A Bluejay * A cup that isn't red * Chris Hemsworth's dreamy blue eyes That's 4/4 blue things! Wait, why is a cup that isn't red on there? It COULD be blue, but the simple fact that it is not red does not mean it's blue. Just because a variable is concatenated with an SQL statement does not mean it's injectable or an example of SQL injection. It can go into a list of `bad practice` examples, of course, but it's entirely misleading to label it as injection. Injection: $id = $_GET["id"]; $delete = "DELETE FROM cart WHERE id='$id'"; Not injection: $id = 1; $delete = "DELETE FROM cart WHERE id='$id'"; 
I do and include charset=utf-8 with the Content-Type header. I also set the Content-Length header.
Yep, I prioritize speed over memory consumption. I even turned on gc_disable(), aka the famous Composer optimization :)
That doesn't seem at all reasonable... a status code is for exactly that 
I did these courses, for PHP and SQL. After That I found job in my current work and i work here for overe 11 months :P
Looks well enough, but one thing I don't think makes sense (literally) is why the constructor is writing to $this-&gt;standardDeviation. The method it calls to perform the action is already doing so at the end. And why return it at the end of that if it's written to the public property? In short/overall, I would recommend not having two ways to do things. It always seems like a good idea cause you're like, "someone may prefer to use it this way," but it just makes things more confusing. Constructor args, in particular, are valuable real estate for dependency injection. Avoiding this habit now will save you lots of trouble down the line. While I agree with /u/chadicus on not using a public properties and having more descriptive names on methods, the value (if any) of PSR-2 is highly subjective.
Nope. You're making assumptions. What if the dev is an external consumer of those API? What if you hired him for a rewrite\refactoring? You are not giving good reasons for not using status codes. The only acceptable reason for me is "it's legacy; we will refactor it". https://twitter.com/heiglandreas/status/801137903149654017
As a casual non-professional web developer, I couldn't care less about the looks of my app on Edge or IE. It's like trying to find a medicine for someone who has pain because he frequently and deliberately hits himself with a hammer.
What is the average salary for those PHP developers that are hard to find?
oh I feel you. And like i said, I think you're unfairly criticized a lot of times but you can dismiss others without bragging about how much your life is better than theirs.
Anyone building an AJAX-based application. Granted the raw network calls don't care about the content-type header, but many libraries will do some amount of automatic parsing based on it. 
Nice one guys!
And unless you tell the candidate that they're expected to be debugging, it's a dick move. Sending them off on a wild goose chase when they have an actual task to be working on is stupid. Yes, of course it happens on the job, but that's far less time constrained. 
I always do this.
&gt; And in some ways, PHPStan is stricter - PhpStorm looks what type you assign to a property and analyzes according to that, PHPStan looks at and enforces the type in the property's phpDoc and will tell you if you assign something different to it. PHPStorm currently does that. Could you convert this to a PHPStorm Inspection in fashion?
Just because they're internal doesn't mean it's right and proper to be more lazy.
I'm handling the building of boxes and I told Taylor I'd take point on issues if he'd reopen them on the Homestead repo (Which he did :D)
I still don't understand. They make a call which asks for a JSON response, and in that call, they don't set the content type? But then you're talking about a call made from javascript, so why are you posting in a PHP forum?
What sick freak sets the Content-Disposition header, but not Content-Type?
200 OK...lol, jk it's not OK.
hehe right!
jQuery, for one. I do very little front-end work these days, and when I do I normally just use XMLHttpRequest directly, so I don't know others off the top of my head.
But depending of your coding style (not everyone likes static typing after all), it take a huge burden off your shoulders which is not negligible. So if it's fine for you to alienate yourself from &lt;PHP7 for that reason, I think it's a good idea :)
You also have https://github.com/phpbrew/phpbrew which does a super great job ;)
It's kinda what the ADR pattern + middlewares push for (https://github.com/pmjones/adr). In Laravel it's rather easy, in Symfony with https://github.com/dunglas/DunglasActionBundle it is as well.
My JSON returned without a content type for about two years. It didn't break anything, so I never thought about it. I could see how this would be pretty easily missed, as most JSON digesters don't need it. You definitely SHOULD set the header though.
&gt; - 'declare(strict_types=1)' is missing: deprecated, to be dropped Why deprecate it?
PhpStorm released a similar inspection and I thought about not duplicating functionality.
gave it a try but the parser seems to crash with too much recursion. have about 6000 classes so maybe it's hitting some limit
The bell curve was the reason why I made it into a class. I made them into functions and changed the `$sd` to`$standardDeviation`. I also used [this](http://stackoverflow.com/questions/5434648/z-scoresstandard-deviation-and-mean-in-php) as a good starting point, but the array map was slower than a `foreach`. 
I don't post our stuff much here, other than in the context of a comment, but this post was really interesting and I think /u/assertchris did a phenomenal job, so I decided to make an exception, hope you'll forgive me
Long and mildly pointless post follows, but I thought it might be nice for some people who've not come across ADR to get a feel for a use-case where MVC is maybe not as solid a mental model: I see there is a talk by stefan priebsch referenced in that adr link, I was quite influenced by a similar talk from him quite early on with my web-dev career and use an ADR-like model. I used a system of domain 'workflows' which take a data-request and transform it into a data-response, doing the whatever-it-is it needs to. I then have web / cli / queue based routers as appropriate to transform a whatever-request into a common data-request and web / cli / log / whatever views, which transform the data response into a whatever-response. So the router knows which workflow / view transforms the incoming data. This used to solve a common problem for me where I had an HTML-response for a route, but also an XHR (usually JSON) response for the same route. The templates could often be shared between JS / PHP and you can hydrate them with data wherever. A lot of the stuff I wrote in this period was used at a webhosting company I worked for and this also solved a rarer problem where setting up hosting could be web-form driven (by clients / support staff), CLI driven (by sys admins) or queue-driven (by everyone during busy periods). We managed to share a surprising amount of domain-logic by inserting seams around workflows and data, instead of traditional response/request. Also, comprehensive functional testing was dead easy. Feed data in, what data comes out? These days I work a lot in MVC frameworks and I often find the seams to be in weird-to-me places. I still tend to use laravel controllers as what Uncle Bob refers to as interactors in this video: https://www.youtube.com/watch?v=Nsjsiz2A9mg (a much bettererer, more considered overview of this kind of thing)
Well, I'm not here to change your mind, but I'd be interested in hearing your reasons for initially making that choice. &gt;just saying that there are reasonable explanations as to why some people don't necessarily follow them. That implies that there exists such reasons, and if you're willing to share, I'm interested.
the problem with regular functions is that there is no autoloading mechanism. Maybe it would be better to put both methods on a static class?
Thanks for your kind words, sir.
Thats the point man, you know the basics so now start applying them in applications. Think about what you want to do and try to do it. Look up implementations of the solution as needed, and break apart what it is its doing.
I'll try to reproduce and put a ticket on github 😀
&gt;I thought it might be nice for some people who've not come across ADR to get a feel for a use-case where MVC is maybe not as solid a mental model To be honest, if you are using an event-oriented architecture, you have a CommandHandler as an "clean" application entry point, and then your controllers or commands becomes just a protocol adapter, in which case ADR might be overkill.
With Composer, you absolutely can [autoload functions](https://getcomposer.org/doc/04-schema.md#files). As long as you don't have any side effects other than declaring your functions, this is perfectly acceptable.
Set your HTTP headers correctly. There's no good argument aside from laziness not to. Be a good steward of the internet. 
That's a fair enough point. Assuming that the only people who are reading my code are the ones who know what theyre doing is a mistake I should try to avoid
TIL: if I ever build an API I should always set the content type header for the response or I'm going to piss off some people. 
The client (depending on language / framework) has to jump through hoops if you don't. You've never had to write the client side? 
What if you just wrote one PHP file to handle each different request? Then, you could somehow map URLs to PHP filenames. Make sure each file performs validate() and authorize() functionality at the top, and let the response code intermingle with the template body after that. It's a bold new paradigm!
&gt; Does this structure exist in other frameworks? As others have noted, you have very closely described [Action-Domain-Responder](http://pmjones.io/adr). The action takes the request input and passes it to a domain element (which does the "heavy lifting" of validation, security, database interaction, etc). The domain element returns a payload, and the action passes that payload to a responder, which builds the response from the data in the payload. As far as framework implementations, you can check out [Radar](https://github.com/radarphp/Radar.Project), among others.
Just FYI, not doing so can effectively allow cross-site scripting, if any user-defined values are in the JSON response, as the attacker could upload some data that convinces a browser with content-sniffing to treat the result as HTML. If the attacker can get this data returned in response to a normal GET request, they can send their target a link to the JSON endpoint, the target's browser interprets the JSON as HTML, the attacker has embedded a script tag, now bad things are happening in your user's browser because you forgot to set a content-type header. Food for thought.
Great question to ask for interviews. I wouldn't not hire someone that did it wrong, but I would use it to gauge their experience/level of skill. Of course if they have 8+ years of experience and they're doing that.... Red flag 
I actually remember this. Seems like you've come a long way. As /u/Lighnix says, I can't see myself using this anytime soon, but this looks really nice. Starring this so that I can keep track of your progress.
Very clean, good documentation, no mystery/magic, all the necessary requirements, etc. So far, after a quick install and a browse through some of the main code, the structure and documentation, I have to say I'm quite impressed (for what it's worth) by this framework. I'll build a sample implementation of a base project I use and get a feel for developing in this framework - but I've got to say that, on the surface and in the clarity of the code - this looks like a contender!
Congrats on the release. As others have said, looks very polished and well thought out. The time taken does show! If I did have one nit-pick to add (being constructive I promise!), it's on your home page, under the "Fast" topic: &gt; Written in PHP 7. &gt; Handles 500 requests/second on a cheap 512MB server and 2,000 requests/second on a modest 8GB server. I would say it's written _for_ PHP 7. Secondly amount of server memory really has nothing to request throughput, it may effect concurrency - but memory alone is a poor metric vs. result in my book. So I would drop that statement or re-word IMHO.
Not true with apache2-mpm-itk or apache2 peruser.
&lt;?=_('Hello')?&gt; is even shorter. If you don't use gettext you can do: use MyTranslation\my_gettext_function as _; to overwrite the function.
I would guess because its syntax is cumbersome, its processing is slow, and it didn't build on top of already well established templating engines like Smarty but reinvented a less efficient and slower wheel? At least that's why I don't use it.
W3Schools has a great "quick start guide" style, that's why I like it. However, I still use php.net as well, I just don't really like it all that much. For example: I can usually find what I want to find much more quickly on W3Schools.
Looks nice. Congrats. If I ever get access to proper internet, I'll give it a try. I only can access the net on my phone atm so can't really do anything with composer. I usually try to download an archive to my phone then move the file to my desktop. But sometimes it's hard to track down all the dependencies that way, lol. Anyhow, congrats once again!
What I'm really expecting, is people to know more than just PHP. I need people that understand at least conceptually how the communication between a browser and webserver works. (other than "ehh, I get the $_POST thing that's sometimes filled". 
JQuery works just fine without a `content-type` so I never had to worry about it.
Since the evolution of PHP 5 to PHP 7 developers always refactoring the code base of it. And they are successfully optimized the speed and performance oF PHP 7.Like Nodejs, PHP 7 also introduces Type declaration and Return Type Declaration function getTotal(float $a, float $b) : float { Its good now to migrate from PHP 5.X to 7.1 if you have the optimized version now so why don't you upgrade to it? Laravel and symfony Quickly changing it's shape and trying to become the next big framework as symfony introduces 3.2 with lots of improvement in Added PDO and Doctrine DBAL adapters in **Cache**, Decreases the number of mandatory dependencies in **FrameworkBundles**, Symfony versions now support Twig 1.28. Improved support for one command apps in **Console** Talking About Laravel, As Matt Stauffer said the new 3 best features introduced are **Scout**, **Notifications**, **Image dimension validation rules** and much more. So 2017 will be going the best for PHP Frameworks.
I cheer for a steady progress in PHP-PM development. I also hope that PHP one day can shift to Node-like servers so AJAX and page reloads can finally be annihilated. It's 2016..and soon 2017. I have a side project written in JS using MeteorJS and it feels absolutely amazing writing real-time web apps.
Not having an LTS is a good thing
Sigh. The amount of ram does not define the number of requests a server can pull _per second_ on a server. I could be doing 100 requests per second - all in parallel or in series one-by-one. Its still 100 requests per second. Thus the "amount" of RAM should not be used as a determinant for throughput as per my original statement. If anything you would be using server cores in your example - allowing the OS to dole out compute cores to FPM processes. None of this is RAM bound. Anyway. I'm done. 
One of the hardest component to understand but also one of the most useful's in symfony is the form-component in my opinion. Anything similar available in here?
I have no use for a new framework, Laravel, Symfony and Zend are what I work with professionally but its always good to see something a little different come along. On a slightly off topic note, you say you've been working on this "PHP 7 framework for nearly 3 years", how was this possible with PHP7 only being out roughly 12 months ago did you manage to get your hands on some sort of super Alpha version of PHP7 to start this? How was that to work with without any documentation? 
Yeah, screwed a handful of unit tests for me.
Wow, I like it but that's pretty much a BC break.
If you don't specify it's json, browsers may sniff the content and interpret it as html.
there was a discussion about this on internals and it was decided that it was not BC break http://externals.io/thread/453
[removed]
&gt; There's also no support for microseconds in DateIntervals (you can now have 2 DateTime objects which are not equal, but the DateInterval will say there is no difference). DateInterval has an added "f" property so you'll be able to tell the difference with DateInterval &gt; There's still no way to set Micrseconds alone (either using -&gt;setTime() or a new function, eg. -&gt;setMicroseconds()). in PHP7.1 setTime takes a 4th arguments the microseconds
Is there a good source that outlines the security risks of this? Would be good to read up on!
It might be now, but one refactor by a junior and it won't be save anymore. And it won't show up in the code review because it's in a different place.
Yeah, I've been made aware the documentation hasn't actually been updated yet - which is broken in itself. More reason why this should have been an RFC with a longer discussion period.
I knew reddit devs are bad, but this thread is shocking...
To me it's the opposite, active record feels really messy to me
None that I readily know of. I consider this one of the many variations of injection. You should try to consider injection as a generic vulnerability that can happen whenever you combine or mix content types. In those situations there's nearly always some exploit to make a parser/interpreter do something unintended. Doesn't really matter if you're injecting javascript, html or sql -- fundamentally it's the same exploit. Mitigate it by being strict in your handling and avoiding concatenation whenever possible.
It's common OOP best practise. Here's an excerpt from Clean Code by Uncle Bob: &gt; Classes and objects should have noun or noun phrase names like Customer, WikiPage, Account, and AddressParser. Avoid words like Manager, Processor, Data, or Info in the name of a class. A class name should not be a verb. Controllers are still classes and as such, should be nouns. CakePHP is a good example of this. If you check out their getting started tutorial you can see they name their controllers as nouns. This then maps nicely to your models. You have a `PostsController` and a `PostsModel` and a `PostEntity`. http://book.cakephp.org/3.0/en/tutorials-and-examples/blog/part-two.html On the Laravel controllers page you can see they stick to this rule of thumb as well. https://laravel.com/docs/5.3/controllers They have a `Users` controller and a `Photos` controller. Both are nouns. :)
Even though the class is called Controller I consider the controller more like a function rather than a class..so basically a class just hold a bunch of controllers..so if you have a method which accepts a request, than gets some data from your model and renders a view..it is a controller..but correct me please if I am wrong..there are so many opinions on MVC that it is hard to choose from :)
Very nice! I'll definitely give this a play with in the next few days and see what I can come up with.
Which is why it's better to favor composition over inheritance :) . And this is also why I was thinking about Carbon and Chronos libraries to see if this change does not affect them too. TBH I didn't check
Ah fair enough, +1 to the OP for using SC already
SC? 
It's extremely hard to read the source code in your blog post...
For clarity, some guys don't advocate sanitizing inputs and manual formatting, but just question the results' accuracy - that's their point. But that's somewhat too narrow-minded. The fact is that either you are using placeholders in the query or you are in danger. So in essence they end up actually advocating insecure coding.
The looks really cool. Only thing I "miss" is jobs. Is that something you plan to add, or is there a reason for not implementing it in the standard. (I can think of a few reasons)
The technique of taking advantage of that is called 2nd order injection. This SO Q+A has some information about it: https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection I wouldn't recommend throwing an error if it looks like SQL injection. It could be part of a person's real name for example and you're making their life hard. You're better off being smart about it and remembering that data that's in your DB still came from the public, so treat it as such.
source control or 'version control' depending on what part of the world you're from
Chronos is already working on PHP 7.1 with all tests passing (https://travis-ci.org/cakephp/chronos/jobs/178487741 and https://github.com/cakephp/chronos/pull/107) 
&gt; the documentation hasn't actually been updated yet - which is broken in itself. It's an open source project and that includes the documentation. If you see something needs updating, and you think it's important - perhaps you could update the documentation yourself, rather than complaining about it 'being broken' on reddit? 
The ability to view the 'rendered' PDO query is coming in PHP7.2 https://wiki.php.net/rfc/debugging_pdo_prepared_statement_emulation 
Great job! Looks really nice at first glanse. My first reaction was "great, just another PHP framework", but you seem to have a good reason for why you've written it and released it. What I think would be a great thing is include a "how it is different from other frameworks"-section on the website. For example how does it differ from Laravel, or Symfony, or Slim etc. Just make sure it doesn't bash the other frameworks because that will generate you a lot of bad-will. Do a sweet and short comparison with both upsides and downsides :)
For what I can tell from the test... Chronos just ignored the microseconds all together ... I'm not sure if you can consider this as being a fix.
Regardless, for a project like PHP, updating documentation should be part of the standard process of making changes for core developers. I did try to contribute to PHP before but only managed to get as far as being ignored when asking for wiki account RFC karma after being informed my PR would need an RFC, and that's kind of put me off. I've got better things to do with my time.
The following is only my opinion, not canon. I know Doctrine is very powerful, but its code base is a bit of a mess and I wasn't a huge fan of how you interact with it. Twig is powerful, but I'm not a fan of having to learn new syntax for front end work. Blade has simple syntax, but too many dependencies. None of the DI containers offered intuitive interfaces with bootstrappers, or few dependencies. The same goes for routers. Laravel's validation library is powerful, but I'm not a fan of all the magic strings for the rules. I favor code that gives you intellisence over code that constantly makes you go back to the docs just to remember the syntax. Plus, once I decided to go PHP 7+, it became even harder to find quality libraries. I had the benefit of learning from the mistakes of frameworks that have been around for a long time. Some of their clunky internals are simply a product of years of gradual feature additions and bug fixes. I decided to set out from the start to account for the difficulties some frameworks have encountered when adding new features. When it comes down to it, I wanted to write a framework with well-written internals, intuitive interfaces, and independent components. However, I know some people will want to use another library instead of mine in certain cases, so I made sure it's easy to swap out my libraries for others without having to worry about dependencies. 
I don't care what year it is. I don't say I'm sanitizing inputs manually. I've been working with Laravel and Symfony for years, not only on application level but also by extending the core, so I don't usually write manual queries anyways. I'm not saying sanitizing inputs is necessarily secure, I'm saying we have **absolutely no idea** where that variable comes from, so we can't decide whether it's secure or not. Only because it's not a prepared statement it doesn't make it inherently insecure and injectable. My argument is not that this is secure code and I want to defend it. It's just that that one line snippet is not enough to decide whether something is secure or not, so it should not be mentioned at all (without further evaluating the context) if you want to find out how insecure code is
&gt;The disruption (split?) of PHP-FIG. You're now my hero
I agree that ActiveRecord provides a very intuitive syntax. However, its drawbacks are when you need more complicated caching strategies, when you need to change underlying storage mechanisms, or if you don't want your entities to bleed into your business logic. For relatively smaller apps, ActiveRecord is a great choice, but I tend to think the repository/data mapper pattern is easier to deal with when working with large or already-established codebases. Again, just my opinion.
I like this idea. I've added it to my Trello board as a todo item.
I wish I were cool enough to have an early build of PHP! No, I started writing Opulence as a PHP 5 framework. However, in the beginning of 2016, I decided PHP 7 provided too many useful features to pass up. It's the way of the future. When you scan the source of some major frameworks, they're constrained to the features of whatever version of PHP was out back then. I didn't want to lose things like return types and scalar type hints in the internals, especially considering I knew PHP 7 would've been out for ~1 year by the time I released Opulence. I'd have loved to require PHP 7.1 so I could use nullable types and void return types, but that'd be way too restrictive considering it only came out a week ago.
The same as in 2016. Symfony in my case, as it's a framework used in our company.
So it's not a language because it only takes 15 minutes to learn? 
It's slow and the syntax is awkward but most importantly - I don't think I need a special template language in php, I don't see the benefits of them. Back when dinosaurs roamed the earth, I used templatepower, but now I don't use any of them, I just use php in my views, that's it. It's fast and flexible. I mostly work with cakephp and codeigniter, when I use frameworks, and they don't push for any template language. If I really had to use one for some odd reason, I would prefer smarty I guess. I'm not saying nobody should use Twig or any other tool/library, if you feel it makes sense and helps you - great. But it shouldn't be pushed as default for everyone on most frameworks.
I'm afraid I don't follow. I'm certainly not making anything up, and I like to think I know why not to use those functions. Am I missing your point? 
What are you actually doing for your living? Looks like you produced some high quality php code with documentation, that's usual something you need a lot of experience for :-) gl with your framework!
The reason everyone is advising against mysql_* at this point is the fact that it was removed in PHP7. No newbie should even know about it at this point. You got the conclusion right, but the wrong way. Using mysqli doesn't make you secure. Both of these are equally insecure: mysqli_query("SELECT * FROM users WHERE username = '{$_POST['username']}'"); mysql_query("SELECT * FROM users WHERE username = '{$_POST['username']}'");
Thanks for the compliment! I'm a senior software engineer at a startup in Chicago. Currently, I write backend code in .NET Web API, although I've been writing PHP since 2000. I studied math and computer science at the University of Illinois at Urbana-Champaign. I'm also a commercial pilot and certified flight instructor, so I fly on the weekends.
I agree with you on a lot of points, but not the conclusion. Sure your code is a lot cleaner than Doctrine's. It's brand new and a one-man project. How clean will it be 5 years from now, after you've accepted contributions from many volunteers, and you've had to fix bugs and design flaws while maintaining backwards compatibility? Assuming it'll be maintained 5 years. And that you'll maintain backwards compatibility. Will Fortune ever be supported by my IDE/editor of choice? I think it would have made more sense to contribute refactorings to tools like Blade. My main concern with your preference for code quality over other benefits (such as inter-operability and stability) is that you're likely to either abandon or want to rewrite the project once the code is no longer shiny and novel. 
Can't you also just generate an arbitrary `DateInterval`, and see if it has the `f` property? That seems like a quicker and cheaper method than Reflection. Not that I have a copy of PHP 7.1 on hand to test this or post my own snippet.
Given the amount of work it is and how complex it is, people needing this should just use Symfony Form component don't re-invent it ;)
Great job! One thing I will say (which is very commonly overlooked) is that your page could really do with a dedicated print stylesheet.; especially within the Docs section. There are people out there who print documentation pages.
Oh wow. Awesome. Thanks 
Would love to hear more about the 4 bugs in a single line of code
btw, one other thing: you really **shouldn't** call it "MVC framework". It's not really containing ant aspects MVC architecture. Only some building blocks and misnamed component "Views" which should be called "Templates" (and no, they are not the same).
You can use cache if you think 0.005 seconds is too much and store the end result. Or use a reverse proxy, or a CDN. I rather have ease of development, I guess we have different kinds of projects and preferences :) Besides...comparing a local PC with a web server is quite useless as the web server can be way more optimized. If they're not idential a comparison is useless.
This framework looks very promising. I will try it out by using it to develop a web site's backend. Also I requested a docset for Dash (https://kapeli.com/contact). They use a voting system, so the more people request it, the more likely we will have it. UPDATE: it seems there is a windows alternative to dash, which uses the same docsets: https://velocity.silverlakesoftware.com
Because there's no benefits on having an LTS for developers. This post was written with Symfony in mind, but the LTS part is something conceptually similar for every single framework using LTS: https://stovepipe.systems/post/symfony-versioning-and-compatibility So before you start downvoting: &gt; What version to use &gt; &gt; So, you might be wondering: What version should I use for my project? &gt; &gt; I recommend always using the latest release if you are working on a project. Doing so, you will have all the latest features, fixes and documentation at your disposal. This means that you will most likely never use an LTS release, which might seem counter intuitive. &gt; &gt; My reasoning is that all fixes done in the LTS are merged into newer releases if the issue is present. Moreover, the LTS will reach its end of life at some point at which you need to upgrade anyhow. Upgrading earlier will help since not a whole lot is changed compared to the LTS appart from the BC layer. Also, you need to consider that there are two years between LTS releases. If you wait, you will need to do a lot of catching up when you decide to upgrade. The flipside is that new feature might have security vulnerabilities the LTS doesnt have. This is a common reason to use LTS releases. However, to me it does not weigh enough to justify it. &gt; &gt; Also consider that Symfony is a framework, not an application or operating system. Whatever you made with Symfony, you are most likely continuing to develop and maintain. So sticking to an LTS release will prevent you from using the newer features. This seems to me the opposite of continues development and something you want to avoid. &gt; &gt; So, when use an LTS? If you know your application is end of life and you only want to benefit from the security patches. Sticking with an LTS release might be your best option. You can still have a long support period with little effort. Any other situation and you are better off with the most recent release.
So this is nothing more than a "My framework is better than X and Y" post. The reason they are split is simple: you can download and use them independently. When developing you have everything in 1 repository, following 1 release schedule. It also means that you have all issues and PRs in 1 repo. I'm sure there are pros and cons to both strategies regarding usability and maintainability. If you would've written this out, I'd definitely like the post, but this is just throwing an opinion out somewhere without actual arguments.
So it's simply a php http framework?
new RCE every day? ;)
&gt; Because there's no benefits on having an LTS for developers. Looks like we're building projects only for us haha. Didn't read the rest, you're just wrong or arguing only from the point of view of a developer. LTS gives a project a predictable lifespan by minimum effort for maintaining. Thats what customers/po's want (at least mine). So I still stick with my downvote: Having a LTS IS good!
&gt; What are your favorite changes that came in PHP in 2016? PHP 7, by far. &gt; What do you think about PHP 7 and 7.1? It's my favorite change that came in PHP in 2016 (or was it 2015?). &gt; PHP 5.6 active support is about to end this year. What problems do you think will occur while upgrading to PHP7 and 7.1 as it comes? Mainly the MySQL stuff. The Ubuntu LTS release support length will decrease my level of anxiety. &gt; Do you think Frameworks like Laravel,Symfony, and Yii will help keep PHP a major programming language? I mainly use composer packages and have moved away from monolithic frameworks. Also, the PHP standard library seems to include more and more awesome functionality over time. &gt; Which framework do you think will be the best: Symfony,Laravel or Yii? None. Maybe Laravel? Like I said, I am more a fan of discrete packages instead of monolithic frameworks.
&gt; Routes, Requests, Request Handlers, and Responses (RRRR, if you will). You might like [Resource-Method-Representation](http://www.peej.co.uk/articles/rmr-architecture.html). (As a side note, I refer to it in the ADR paper, but I thought it was more a subset of ADR.)
What a brilliant idea! Give me for ~1 day to prepare it. Thank you for both feedback and the idea)
I think it's working out ok for both Laravel and Symfony.
Good advice delivered in the worst way possible
I was referring to rotharius indeed.
Eloquent ORM would probably be adopted in much greater numbers, if it were not for the subtree split notice. "[READ ONLY] Subtree split of the Illuminate Database component (see laravel/framework)"
Shouldn't be hard at all. Look at [this doc](https://www.opulencephp.com/docs/1.0/orm-units-of-work) for an example of how to create your unit of work, data mappers, and repository classes. Unfortunately, since PHP's PDO library does not implement an interface, you'll have to use Opulence's [database library](https://www.opulencephp.com/docs/1.0/database-basics) along with the ORM.
it looks to be related to xdebug.max_nesting_level i bumped it and things started working.
I've not seen PHP used yet in Finance, you usually see the .net and Java stuff there. Is this PHP code base being used to power actual trades, or is it mainly for the website presentation of the company. I'd be curious to learn more about how it's being implemented (without divulging proprietary and/or sensitive info of course)
Need a library/3rd party solution that could help me create a simple REST search solution which needs to search thousands of columns between 2-3 different SQL tables. I don't want to kill the mysql server so something that maybe could help index this data and quickly grab it would be nice. Also google isn't an option as I need full control of the data. edit: hmm looks like elasticsearch may be what I'm looking for
It isn't my project. I got added to the project sometime after release
Don't use a linter for blade templates (don't know id any is available though).. But moving that to the CI level sounds kind of awesome. Would try that out
It's used to power the backend of a secondary trading market. I cannot get into specifics, though, due to NDAs :-)
very impressive! 
What kind of unit tests are you running lol
&gt; a lot of your intended audience has given up on frameworks for some years now and moved to "assemble stuff from composer libs" approach. I'd be interested why you think that? I know there have been blogs about it and some people doing it sure, but I think the vast majority of PHP devs are using some type of framework. Business is booming for PHP frameworks, not slowing down.
What's the reason for the [hashing wrapper](https://www.opulencephp.com/docs/1.0/cryptography#hashing)? Why does it have `$pepper`?
Haha thanks! Life is too fun to let it slip past you.
Here's a not-that-great writeup: https://dunnesec.com/category/attacks-defence/content-sniffing/
So, this is actually intended for horizontal reuse, but disguised as an abstract class? Why do you not just make it a trait then? That's actually what they're for...
Why do you even need a pepper when you already have a proper salt?
Hmm, using a trait might not be a bad idea. I think I might create one and let people do it that way. Thanks for the good feedback!
It's probably just 4 tickets covering the same problem.
Close! It returns `f`, I just converted it to a `bool` for my own sake :P function is_fractions_supported() { return isset((new DateInterval('PT0S'))-&gt;f); } I also do like/recommend nyamsprod's answer too, as well as the static caching!
Awesome, just the answer I wasn't expecting but got anyway! Thanks for taking the time to respond. :) Like the use of static caching as well. Also micro-optimization question warning: but what would be faster? $is_supported = property_exists(new DateInterval('PT1S'), 'f'); or $is_supported = isset((new DateInterval('PT1S'))-&gt;f); If you happen to be in the mood to benchmark this kind of silly little thing.
I was running full-blown Laravel at &gt; 500req/s on PHP 7.1 with opcache just yesterday.
Hey Taylor. I haven't benchmarked this yet on PHP 7.1, so hopefully my numbers have gone up some. Not sure how big a performance gain 7.1 brought, though.
 function is_fractions_supported() { static $result = null; if ($result === null) { $date = new DateInterval('PT0S'); $result = $date &amp;&amp; isset($date-&gt;f); } return $result; } var_dump(is_fractions_supported());
PHP 7.1 Backward incompatible changes https://gist.github.com/odan/66ee17943ee9118599e4a390d2fbb484
I think this "2nd order injection" is more something like a big myth. If you use PDO and Prepared Statements for _ALL_ your queries and thus make sure that really EVERY parameter is non-trusted (e.g. values from the database, from the $_SERVER array, etc.), then still no SQL injection possible. Many people make the big mistake that that they treat something "as secure" and other things "as insecure". But if you use PDO + Prepared Parameters for all your queries, something like "2nd order injection" is just impossible.
Nope, we do exactly the same.
I learned something. Thank you very much!
Looks like it's an issue when sending mail - so if you don't have other users using your server it doesn't look like an emergency.
I'm not so sure is this in an interesting article or an ad! RIPS is neat but far more expensive than what most developers can afford on their own. 
Ok, phew. Yeah its just me. Basically a test server honestly. 
This is subjective, but if they're static class methods, they can be used as functions, but also autoloaded, which plain functions can't. I personally don't use functions for this reason, just static methods.
Checking for incoherent or inconsistent tabs vs spaces is easily the fastest way to tell if a code base is going to be shit. It's one of those things that takes 2 seconds and a keyboard shortcut to clean up in any modern IDE, if the people writing the code don't care enough to do that to make things easier to follow you're in for a bad time.
I don't understand `intval()`. Can someone explain to me these examples from the [manual](https://secure.php.net/manual/en/function.intval.php)? echo intval(042); // 34 Why? echo intval('042'); // 42 This makes sense, but only if the item above is also 42. echo intval(1e10); // 1410065408 Either 1e10 means 1^10, or the hex value 1e10. Niether are 1410065408. Where does this number come from? echo intval('1e10'); // 1 This is 1^10. echo intval(420000000000000000000); // 0 wat echo intval('420000000000000000000'); // 2147483647 Max int value on 32 bit system, sure. echo intval(42, 8); // 42 echo intval('42', 8); // 34 Again, wat? I would love to understand this function. Any info would be super useful!
130 to 150 here, depending on text. It doesn't matter all that much. Programming is less about typing and more about problem solving. If you want to save time, it's probably better to learn more features and shortcuts in your IDE and see how it can help you bootstrap new code or new sections or refactor easily. The guy next to me does about 50 to 60 and so did my boss. It never really slowed them down noticeably. 
Honestly, unless you have the entire problem already solved and know the functions/structures like the back of your hand, your wpm won't be a factor (unless you are a 2-finger typist, and even then it's probably negligible).
Here we go with the wishlist https://www.amazon.de/gp/registry/wishlist/3MLR4BB204U60
It's not really _that_ complex, but it can't be simple if you want to do it right. Security is simply complex. If you have any ideas on how to make it simpler, let me know 
WPM doesn't matter when coding at all. Just memorize where your braces, brackets, quotes are etc. I average 120wpm, peak 150wpm, low 100wpm.
I don't remember seeing a "why" I should change my code based on the inspection. It would be nice to have, especially with new dependencies as I'll have to update 190+ packages...
Automatic output escaping is the biggest benefit. Twig also has template inheritance and features a nice sandbox. Teaching our designers to use twig is a lot easier than teaching then PHP. Don't forget that twig pretty much guides (forces) you to not have logic in templates and prevents you from doing stupid things like calling weird PHP functions or explicitly make queries.
My issue with Symfony's security configuration is that it assumes all authorisation is tied to URL routes. It doesn't appear that there's any way to use another abstraction. I'd much prefer a system that just works with an arbitrary resource ID, and let me define what that resource ID corresponds to.
I'm at around 60-70 wpm and I think it's more than enough and faster typing wouldn't significantly speed up my work, programmers spend most of their time reading and thinking, not typing.
Invest time in learning your OS and IDE shortcut's. Additionally, add to their list of shortcuts if they do not have one for a common task. Also learn how to implement macros/code snippets. You have no idea how much quicker you will be if you don't have to reach for a mouse. Windows is awesome for navigating the OS without a mouse. PHPStorm is highly configurable and already has a ton of advanced features to make coding really fast. Laracasts has an awesome series on PHPStorm. In fact I have a good series too: https://youtu.be/lHeYW2-BOHo I really hate having to reach for my mouse.
Some kind of test that compares two timestamps.
Sounds like dutch
Which inspection was it?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The actual writing of code should be the least of your problems
Yep, I'm glad I skim read that, what a waste of my time. I hate these articles that are thousands of words long but state something so obvious that everyone knows anyway. TL;DR use asynchronous calls using Guzzle instead of synchronous calls, its faster......
you still need more data to define your work "big data"
You're welcome! 
While this is cool and all, I'd much rather they give us some more simple ways to do user authentication. That's one of my biggest gripes with Symfony. I have to install some massive package like FOSUserBundle to get anything more complicated than storing hashes in security.yml
I have implemented a number of different authentication methods in Symfony. Things like API tokens, OAuth, JWT's, 2FA, etc. To add a super simple authentication scheme where you pass a token linked to a user account, is like at least 4-5 new classes and configuration in 3 places. It's a very powerful system, but it's overly complicated when you have simple needs. I don't believe we have the best we can get. I haven't had a chance to play with the new [Guard Component](http://symfony.com/doc/master/security/guard_authentication.html) yet, which is supposed to alleviate this stuff. So, it could be better these days.
&gt; The same can be said about Symfony Forms too. Symfony forms are weird at first but they're immensely powerful once you get the hang of them. I've had some pretty rude ideas for forms and it pretty much always works out how I want it to, without having to hack anything.
Right. The point here is that it's a complicated topic, but it doesn't have to be for the developer. Many other complicated topics have been abstracted away in Symfony to provide a nice clean interface, where you don't have to know the details. I don't know why auth should be any different.
Wow, think of how lightweight and nimble that would be! It allows total decoupling between modules as well, which sounds great. I can't imagine _ANY_ downsides.
Ah, nothing more confidence inspiring than a name like "Uncle Bob". :)
Man, these guys continually solve problems that I never knew I had.
 Current file name is suggested for a new class name Thank you very much. 
I can get 120WPM with 99% accuracy on most tests I've taken. I do not have "proper" form though. I start on home row, on F and J. But, it gets a little weird. I use all 4 fingers on my left hand, and exclusively press shift with my left pinky only, ever. I only use the middle finger on my right hand, and press space exclusively with my right thumb. I don't necessarily stick to the "this finger can only press these specific keys" rule, it just slows me down. My fingers just instinctively go to the key I want and I'm honestly not even sure what finger is pressing it. Trying to be forced to type the "proper" way in school was a pain in the ass, because I've always been much faster with my own way. Honestly though, it's not that common that I'm just sitting there spamming the keyboard continuously at max speed while coding.
Some examples can be explained by the doc: *The base parameter has no effect unless the var parameter is a string*. If you don't use a string, the base is detected as usual (see the [Integers](http://php.net/manual/en/language.types.integer.php) doc). echo intval(042); // 34 because 042 (octal) = 34 (decimal) Providing an integer so the base parameter is ignored; a number beginning with "0" is in base 8. echo intval(1e10); // 1410065408 This is because of the 32-bit limitation: 1410065408 = 10^10 - 2^33. On a 64-bit system you get 10000000000 as expected. echo intval('1e10'); // 1 The base used to convert the string is 10, so "e" is an invalid value and the analyse stops after the first "1". echo intval(42, 8); // 42 Providing an integer, so the base parameter is ignored; 42 is a number in base 10. echo intval('42', 8); // 34 Providing a string, so the base parameter is used; 042 = 34. It's still weird how big numbers are processed: echo intval(1e10); // 1410065408 echo intval(420000000000000000000); // 0 echo intval('420000000000000000000'); // 2147483647
:o I need to try 7.1
Fixed. Thanks for letting me know! 
A serializer, lol
I'm waiting for this one: https://youtrack.jetbrains.com/issue/IDEA-162686#u=1476695478994
It's mainly a matter of having opcache properly setup and configured.
I find typing speed to be important only when working on the command line, and on things that the Shell cannot autocomplete. 
The best advice I can give you is to go and use MySQL, but spend some time reading documentation about indexes and how to use them, and the 'EXPLAIN' operator. These two things will get you to a point where MySQL can do all that with ease.
Try Symfony and see for yourself
I know the feeling. Still have nightmares about S2.1 and trying to implement my own authenticaters. The actual authentication code was easy but wiring everything up was bad. Trying to maintain was even worse. The Guard component does indeed do away with much of this nonsense.
Symfony ? who uses symfony ? (i really wanna know who uses it though)
130-150 WPM or CPM? Because I have around 110 WPM (and around 560 CPM) and statistics say that 99.9% of all users are typing slower than me. So if you have 130-150 WPM, you would be out of all those statistics?
A lot of people do. Because it is great.
Thank you)
i dont see a reason why i should switch