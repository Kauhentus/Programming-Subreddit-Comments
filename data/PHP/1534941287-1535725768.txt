Do you know any other Json api format besides Jsonapi? Haven’t found any well known. Indeed rather not think of one in house format ;)
There is a list on laracon.us
I didn't know that developers cared about test coverage of other libraries. If the library works, then why I should care about test coverage?. It smells to gamification. And about PSR compliance. I don't want to sound "heretic" but. PSR-1 and PSR-2 are a good practices, but I don't think it should be a standard. It's good for a practice but bad as a rule. Anyways, it's better than nothing. PSR-3, PSR-6, and PSR-7 I like the specification of interfaces, it marks a clear rules but again, it depends in every situation or case, and it's prone to be broken. However, PSR-4 (or PSR-0) sorry but no. PSR-4 is build on top of the limitanting of the Composer's autoloader. The Achielles's heel of PHP is the use of include. In PHP, every php file is a new project. So, PHP lacks of the concept of "application". It's good and bad. In the good side, PHP developers shouldn't worry about "hot install". In the bad side, the amount of php files impacts the performance considerably (even if we use opcache). For example, in Java, it works in the basis of :one class = one file. In Java works because you don''t deploy simple classes but a whole packages. In Java, there is not a performance hit into use a single file versus multiple files,so it's not hard to find a java project with thousand of files. A library could be distributed AS A SINGLE JAR. In C#,its simple: you could program a class in a simple file, or many classes in one file. A library could be distributed as a SINGLE DLL. 
As a (PHP) developer you should use the right tool for the right job. If the project has needs that match more with WordPress then use WordPress, when the needs are more Drupaly, then use Drupal. See yourself as a PHP developer, not as a WordPress/Drupal/Symfony/Laravel developer. If you see yourself as a WordPress developer than it seems like you are pretty inexperienced and my advise would be: take the job to gain experience with other software.
You shouldn't settle in a simple technology. If you could earn money and earn experience in a new technology (new for you) then it's fine. 
Damn, Thanks for this!
Thank you!
Is it me, or the "modern" way of coding is impractical?. For example, I understand what is the reason behind Interface, however, I am found a lot of code that a big part of the code are interfaces while another part of the code are a simple wrapper to a function or simple is doing nothing. For example use Illuminate\Database\Seeder; class DatabaseSeeder extends Seeder { /** * Seed the application's database. * * @return void */ public function run() { // $this-&gt;call(UsersTableSeeder::class); } } 
&gt;Will my experience on Drupal counts If I switch to frameworks like laravel? no
Just wanted to congratulate you on having the courage to post your code and invite comments from what is often a hostile audience. Hang in there. &amp;#x200B; And yes your code has some serious issues. I guess you are not actually using the UserRepository anywhere since your posted code has no chance of working. It is perhaps an example of why testing even basic code is useful.
you should move to Drupal even if it was a lower pay ;)
I plan to implement those auth soon :D 
Most of you folks are butthurt, however this works for me and it can help the newcomers learn symfony because of the simplicity. For the rest of you folks complaining, how about you make the improvements, raise an issue on the code point to the problem, stop talking about the issues and be helpful by showing me where the improvements need to made. I don't have time to read poems. &amp;#x200B;
https://i.imgur.com/DK1ckG8.png
that link gave me some comfort/ help.
Odata, Swagger, Jsend to name a few. I don't mean to sound rude but I don't think you looked very hard.
 \&gt; It creates a new table for each event.. &amp;#x200B; Something is wrong with your setup :-\\ &amp;#x200B; I'm using prooph, you can take [https://github.com/ShittySoft/trivago-cqrs-es-workshop-2017](https://github.com/ShittySoft/trivago-cqrs-es-workshop-2017) as an example setup. You can also follow my tutorial at [https://www.youtube.com/watch?v=RfnySciLUhc](https://www.youtube.com/watch?v=RfnySciLUhc)
We are using ES, but without a library. It's not that hard to implement it yourself (if you educate yourself first). We also had ocramius for a few days of onsite consulting which helped a lot (I wrote about it [here](https://patricklouys.com/2018/04/03/a-few-days-with-a-software-consultant/). 
Hey, with regards to autoloading, your opinion is fine but it is also very backwards. You should almost certainly be using an autoloader (even if you roll your own) in 2018. It just makes your code much more clean and less prone to dealing with manually managing class dependencies. &gt; The Achielles's heel of PHP is the use of include. In PHP, every php file is a new project. So, PHP lacks of the concept of "application". It's good and bad. In the good side, PHP developers shouldn't worry about "hot install". In the bad side, the amount of php files impacts the performance considerably (even if we use opcache). This is all wrong. You should give composer another shot. Not using composer is causing you a lot of headaches you're probably not even aware of.
Something I considered, though I need more time researching CQRS as that's my weak point in this endeavor.
Is it just me or does that ring alarm bells? &amp;#x200B; \` $sql = 'INSERT INTO \`' . $tableName . '\` (' . implode(', ', $columnNames) . ') VALUES ' . $allPlaces;\` ​
You'd have to read the code in context. Here is the line I'm referencing: [https://github.com/prooph/pdo-event-store/blob/master/src/MySqlEventStore.php#L210](https://github.com/prooph/pdo-event-store/blob/master/src/MySqlEventStore.php#L210)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [prooph/pdo-event-store/.../**MySqlEventStore.php#L210** (master → b240fc5)](https://github.com/prooph/pdo-event-store/blob/b240fc5944ae32a5254b43c0643efbf813854012/src/MySqlEventStore.php#L210) ---- 
It's fine to make up IDs for resources not directly mapping to e.g. a. model. Model! = resource. However: after a few years with jsonapi quite some issues emerged regarding how you can format the result. I ultimately gave up and embraced GraphQL which covers it all abd more. Also much better insight what fields are really in use and better client side tooling (e.g. Apollo client with auto-generated TypeScript comes to my mind). Sure, it's something different and less REST but as someone said: use the right tool for the right job. 
Not precisely an answer, but there was one project were like the idea of even-sourcing, but it didn't seem worth the mounting infrastructure cost from program logic changing over time. So instead I just made it event-driven, where yesterday's events are more like a kind of logging, as opposed to a permanently legal storage format.
- APIs With Laravel - Design Patterns With Laravel - Embrace The Backend
Oh wauw., I have bene googling all wrong. I search mainly 'json api standards', but that clugged mainly jsonapi... terrible googling skills, but thank you very much for these options. I will check them out. Hopefully there is a nice laravel PHP client/server package for one them.
Haha, google fu is its own skillset. Good luck!
Thank you for your reply! I'll indeed just have to work arround it :)
Yeah, that strategy makes one stream per aggregate: kinda useless.
I can understand that jsonapi can give headages. Maybe embrace also a less 'strict' format for flexibility. Thank you for your insight with jsonapi
You're not going to find many repos to do something so simple because it's really about 10 minutes worth of work. Simple user table with ID, password and username/email whatever else you need. Registration creates a new user object that's persisted to the database with the data given, hashing the password. Login takes the identifier (username, email or whatever) and password, looks up the record by the identifier, compares the hashed password to a hash of the submitted password and either rejects the login or sets a session variable with the user data. If you need something more complex than that, you'll have to explain it better to get any real suggestions!
Yeah, I'm looking through your container to see how I can re-wire what I have. Just through the first hour of your workshop. Appreciate you sharing this.
if your registration and login is 10 minutes of work; you are doing something incredibly wrong.
That's fair, thanks for the reply. I've done a similar simple login to what you describe. I guess I was hoping there might be a stable solution out there that made use of session variables, and maybe some e-mail integration. Even a well written tutorial would be great so I could see how others handle that type of thing. Like you said, I can do this on my own without much guess work. Just looking to stand on the shoulders of those that came before! Thanks again!
Almost every system is going to require more than that, but all this guy said was registration and login - and that's registration and login at the very basics. No validation, no access control, no nothing but registration and login. If you think the basic concept of registration and login needs more than that, you're doing something incredibly wrong.
Symfony is a popular framework that is composed of lots of decouple components that can be used independently. Have a look at their Security component, it might be what you are looking for: https://symfony.com/components/Security
&gt;no WAMEN You're a sexist, misogynist pig and everything that's wrong with the technology industry.
&gt; Would be someone so nice and link my a list of the topics, so I can see what I want to watch in the first place? &gt; &gt; &gt; &gt; EDIT: If you want something done, do it yourself: Why did you earnestly expect someone else to do all that for you?
"Secure" and "10 minutes of work“ shouldn't coexist in the same page. OP, building a secure login system will take way more than 10 minutes. You seem blissfuly unaware of the depth of security issues within a login system. 
I missed the joke.
The Reddit admins practically gave away the details of an account I had and deleted many, many years ago (but they didn't) to hackers who used the account details to send out bitcoin extortion emails. This is not the first time this has happened to the Reddit admins and I have no doubt it will not be the last. At this point I really do think YOU should be asking yourself why you are commenting on reddit without a throwaway account. It's YOU who are not taking your personal data hygiene seriously enough. &amp;#x200B;
Yeah, well, you earnestly believe laravel is a good thing so you're gonna miss a lot of things in your lifetime.
Post a link to a list of the talks? I don't think the guy is asking for a lot. You seem angry, you ok?
&gt; but it might be because I'm using the MySqlAggregrateStreamStrategy Yep. Use the MySqlSingleStreamStrategy. By default that will put all events into one stream, event_stream. If you still want to keep separate streams but each aggregate type be the stream (as opposed to each aggregate itself be one), set your configuration up for the event store with each event store repository defined, and you can tell it a stream_name to use. So User aggregate in users_stream, Order aggregate in orders_stream, etc
The couple of hours you would spend implementing this yourself could be used learning to develop using Laravel, Symphony or another framework that has registration and login out of the box. Work smarter not harder!
OP never said anything about 10 minutes of work, you're mixing his post up with my reply to his post up there.
Write one. See you in 10 minutes.
If it takes you more than an hour to do what I described in my first post, I sure hope you're not salaried.
You’re storing the actual change itself rather than the result of the change. Instead of updating the users table when they change their username, you store a ChangedUsername event. To get the current state of the user you replay all of these events. Bank accounts are a common example. Each Withdrawal or Deposit is stored as an event. You start with zero and replay all of the events to get the current balance. There are optimization’s so that you don’t have to literally replay every event, every time, of course. 
Podcasts. go to the phproundtable.com site, and listen to all the ones that take your fancy. Obviously there's loads of others, YouTube etc, but i find this one particularly approachable
Is he free?
\&gt; which is not a database resource and has no id generate one, e.g. use a uuid \&gt; but you want to prevent creating a duplicate endpoint why is using a different end point an issue? your actual reporting logic should be separate from you controllers anyway so the controller would just call the report with a different output type for a different end point. the json endpoint can provide links to related csv end points. it's really no different than the json providing links to images etc
Oh i got that email! So that's where it came from huh. You can check the bitcoin address they use, and you'll see they've had a few successes (just over 2 bitcoin when i looked last night)
Exactly. The bank transaction example is as common as the car example for factories, but I think it's the most apt example that people can start wrap their heads around the topic. Here is some material: https://martinfowler.com/eaaDev/EventSourcing.html https://www.youtube.com/watch?v=8JKjvY4etTY - Greg Young speaks on this topic fairly often. https://www.youtube.com/watch?v=rsSld8NycCU - Netflix talking about how they used it.
I've spent more than one day reading documentation on sessions alone.
I don't think you can trust the sandbox here... Probably has memory stuff blocked for sandboxy reasons. [This run](https://3v4l.org/lehgX) shows the peak memory usage go *down* after using the variable...
You can try [Aura.auth](https://github.com/auraphp/Aura.Auth/tree/2.x) if you want to use a standalone component .
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [auraphp/Aura.Auth/.../**624fc819c7f329f8a269a219cfabe252573005a2** (2.x → 624fc81)](https://github.com/auraphp/Aura.Auth/tree/624fc819c7f329f8a269a219cfabe252573005a2) ---- 
The same happens on my local installation: PHP 7.2.2 (cli) (built: Jan 31 2018 19:31:15) ( NTS MSVC15 (Visual C++ 2017) x64 ) Copyright (c) 1997-2018 The PHP Group Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies I thought it is some kind of optimization because this code shows a change on the ammount of memory being allocated: &lt;?php $m1 = memory_get_usage(TRUE); $b = str_repeat(' ', 500000); $b .= str_repeat(' ', 500000); //$b = str_repeat(' ', 1000000); $m2 = memory_get_usage(TRUE); echo $m2 - $m1;
If you wish develop a custom solution check the OWASP site and the OWASP testing guide 4. Testing guide could help you to develop a secure system, guide contains a methodology for doing penetration tests on web app, you could test your code and evaluate it security. https://www.owasp.org/index.php/OWASP_Testing_Project
Hmm to make the rest api overall 1 whole, but maybe I’m thinking wrong about it
I guess I understand, what id the event fails to transact? Is the event still logged? I don't really see how this is any better than a change log...
If you use the quick preview button it shows you the memory usage in the title line. PHP 7 starts to account the real usage at 12-13 MB. A blind guess is that PHP7 either pre allocates some memory or re-allocates previously used memory excess memory which memory_get_*usage doesn't account for.
Pretty underwhelming to be honest. Sad that typed property didn't make it.
Events are past tense - they already happened successfully. This is where [CQRS](https://martinfowler.com/bliki/CQRS.html) comes in. If a Command fails then it's up to you what happens - maybe an Event is raised and handled by another system - it might even be part of your business rules. The bigger idea is that your aggregate's current state (in /u/nanacoma's example - User) is derived from the events that happened - not from a static source - CRUD. You get a change log for "free" by using this concept, but the benefit I've seen is by being able to answer questions that haven't been asked yet. If you read/watch some of the material I proved above you will see. Also this: https://eventstore.org/docs/event-sourcing-basics/business-value-of-the-event-log/index.html Piggy-backing off /u/nanacoma's example again - The user tries to change their username: Command executes: `ChangeUsername` Command fails - you have some options here. Is it important that you know when a username change has failed? If not then just return the error, or maybe it is.. Raise event from the command `ChangeUsername` and store it on the aggregate: `ChangeUsernameHasFailed`
Yeah but bug fixes and performance updates are also included
Possibly. And it might be a big ball of mud - which might be why they might be looking to migrate to a different system rather than clean it up. Then again, if I had worked with legacy PHP code, I wouldn't have made a post about how I was looking to learn PHP to deal with legacy PHP code. 
Number 3 is just wrong. What you are describing is the is\_iterable (it guarantees you can use foreach on it). is\_countable only guarantees that you can use the count() function on it.
 It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! 
 In my experience 95%+ of times I've run out of memory were either a long-running cli script (cron, daemon etc...) allocating more and more memory while never allowing garbage collector to free the memory.
You're always welcome to join internals and contribute to bringing more features to a release.
I have all sorts of logging actually: to file, to log database, emails. All of it. Maybe part of the problem is actually there: too much logging, and information gets lost in it.
 Pretty underwhelming right.
Found this more informative [https://github.com/php/php-src/blob/php-7.3.0alpha1/UPGRADING](https://github.com/php/php-src/blob/php-7.3.0alpha1/UPGRADING)
## [Lowlight](https://github.com/Loilo/Lowlight) The one I've just published: There was no syntax highlighter written in PHP and *targeting the terminal*, so I forked [highlight.php](https://github.com/scrivo/highlight.php) and made it output ANSI escape sequences. Works nicely to output code snippets in environments like a Symfony CLI. ## [Fuse](https://github.com/Loilo/Fuse) The one I've been working on for a while: I was missing a fuzzy search library based on a really good matching algorithm, so I ported [Fuse.js](http://fusejs.io/). Ultimately, after finally finishing it, I've never used it in production myself. Quite some people seem to find it useful though.
Thanks! That helps to clarify the subject.
Thats a stub, if you not going to implement a seeder just delete it.
safe navigation operator / nullable chaining would probably be top of my list. no idea how close that is to reality. (and no, i'm not remotely capable of hacking php internals to help.)
why do we want minified php?
My understanding is most of the work for this release was put into speeding up PHP even faster which is why there aren't many additional features.
Dig the style of the post though. Kudos to the author. 
First, try memory_get_peak_usage() (I think? On mobile, but it’s something like that) Second, newer versions of PHP can indeed optimize out some stuff like this - it will perform dead code elimination. I don’t know enough about the internals to know if that’s what’s happening here, but if it is then doing sometime with the variable you’ve assigned to after the second memory check could make it clearer. 
How do we feel here about aws vs gcp vs azure, etc for php? I'm about to start a new project and need some guidance. Consider my experience level on the novice-but-not-a-total-idiot side. 
m
Sounds like you don't have much experience in the field, good luck with your career!
The first example isn't right, a trailing comma is allowed in function *calls*, not in declarations.
I'd generally recommend against passing `true` to memory_get_usage(). Unless you are familiar with how the ZMM allocator works, the value will not be particularly meaningful.
JSON throwing exceptions is nifty
Seriously? Damn. What is the reasoning behind that?
&gt; on traits to declare code as "copy-paste", as you said. You must understand than copy-pasting code has some costs. Even with traits, cost is that when you have shared code you can't just change it. &gt; how defining two properties and two getters in a trait is a symptom of bad decomposition. "could be" symptom, and I talked about shared code in general (which is copy-pased using traits). Again, I don't like generalized solution in places where you should not generalize anything (and I also not like getters, because it's hard to control how they are used. If you use getters to just show some value (i.e. `echo $user-&gt;getName();`) then it's ok, but someone could use same value in business logic, which breaks encapsulation (could not be a problem in many cases, but again, this just creates additional conditions where this could be appropriate or not). &gt; I don't do this to write less code, I do it to read less code. You could replace this trait with single line without traits: class Product { private $id; } Again, I don't usually need getters for ID field. And again, I would prefer to not have code which I don't like to read at all. &gt; you need to watch for unwanted side effect in every single link between classes The problem is shared state. In case of classes this links are usually defined using method calls with specific contracts, and this easy to handle. Your traits from the other hand contains some state. &gt; I feel like you have a preconceived opinion about traits being bad, because they can be badly used You right. I would like not to use approaches which can be easily misused (for example, `protected` keyword for properties is forbidden in my code base on static analysis level, but yes, protected methods are still allowed). Personally I use traits only while refactoring legacy as temporal solution. &gt; traits does not have anything to do with how you write rich entities or not. Yes and no. If I use "rich model" concept (but I would rather name it "OOP" as of opposite to anemic domain model), I don't need any of your traits, they just not help with anything. Just take a look at your `EntityTimestampableTrait`. &gt; but there are huge limitations to this approach. This is very interesting, I would love to hear some of them. 
Well, forgot to mention that it is not ordered list. All of these four are important to me and these are my main criteria. Thanks for your reply. 
He has a unique way of talking on stage. However it feels like if you watch just 1 talk you have seen all other talks.
The sad part is I have a highly documented, unit tested open source library on github with no stars and it feels bad man, it feels real bad.
Node can have lower baseline latency by nature. It can scale, but expect it to be harder to get right, you will need some background knowledge. If you handle your apps bottlenecks right, then php should be easier to scale.
This horrible advice from start to finish.
Probably that variadic function calls are list-like, while function declarations are not (by dint of the variadic arguments being collapsed into a single parameter). Personally I'd have preferred to allow both...
why be mean when you can be nice. come on 
Hey, Zomgnerfenigma, just a quick heads-up: **seperate** is actually spelled **separate**. You can remember it by **-par- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
&gt; Use Microframeworks Over Monolithic Frameworks Also migrate your classic app to ~~SPA~~ PWA, it is more secure by nature. 
Silex is not maintained anymore - please correct it to Symfony 4
Do both just to be safe.
maybe I did not express myself clearly, but what exactly you find "horrible"? And again, this is not advice, this just some thoughts on how you could write less code and still have loosely coupled system.
This "checklist" has a number of... "weird" issues. Scanning through it's contents, I would not recommend it. Some of the examples / links don't seem to related to the item they're under. For example, under "Use a SAST" is a link to Codacy, which appears to be a team review tool and nothing to do with static analysis. Some of the suggestions are also questionable - such as "Use micro-frameworks over monolithic frameworks". I've never considered this to be a security related thing. Yes, micro-frameworks contain less code, but you can also end up pulling in more, less well tested libraries in place of many of those features. In my opinion you cannot say one is better than the other in terms of security. Using an ORM also has nothing to do with security in my opinion (I'd even go so far as to argue that introducing such "magic" in to your application can make it harder to review for potential security issues) Some of these issues cancel each other out. For example, if you use secure session settings and SSL, session fixation attacks aren't possible. Some of the information it points to is seriously out of date. For example, the OWASP Wiki PHP configuration page recommends suPHP and Suhosin, both of which are unmaintained and don't work with current PHP versions (additionally, what suPHP does is already implemented by PHP-FPM). Some of the OWASP Wiki links are even empty candidates for deletion. As more general issues, I think this checklist tries to be a little too exhaustive. There's no importance given to anything and it uses far too many acronyms, which makes it harder to digest. It looks to me like whoever compiled this checklist wasn't actually looking at what they were doing, which especially for a "security checklist" is absolutely terrible.
If you're using type hints and version control some of the docblock tags are useless now, such as `author`, `parameter` and `return`. Other tags are still useful though, such as `@todo`, `@deprecated`, `@see` and `@throws`. One of the biggest benefits of using docblocks is that it forces developers to write some documentation. If every other method has a docblock most developers will at least create a quick one, just out of guilt... http://docs.phpdoc.org/guides/docblocks.html#list-of-tags
Hey, inotee, just a quick heads-up: **existance** is actually spelled **existence**. You can remember it by **ends with -ence**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
https://www.phoronix.com/scan.php?page=news_item&amp;px=PHP-7.3-Alpha-1-Benchmarks pretty good results in general even though those benchmarks were done early during the dev cycle.
recently updated this, everything should be working now. 
Stupid ~~dog~~ bot!
How is writing less code good advice? Using third parties for everything is fuel for nightmare and asking for trouble in the future.
I agree that using correct type-hinting, `@param` and `@return` are useless, code is self-documented. Nevertheless, you still use them for documentation purpose, if the parameter you have to provide is subject to subtleties you cannot express otherwise. And, to be honest, there's a lot of things you cannot type-hint, since generics don't exist, you cannot explicit `iterable&lt;SomeClass&gt;` for example, neither `string[]`... There will always be use cases in the current state of the PHP language where you will need those PHPdoc bits.
Another note, they can be useful in reflection. See ORMs.
done thank you
Why would I want trailing comma’s? 
In our company, we only write docblocks for information that is not applicabe to the code itself. * @return MyClass\[\] * @see * @return Collection|MyClass\[\] * @throws * @deprecated
A comment that simply restates what is plainly apparent is worse than useless: it wastes space, making it harder to see the code. ``` // Sets $x to 5 $x = 5; ``` Many of my doc blocks fell into this category once I annotated my methods. By and large, the method and argument names were chosen to be as descriptive as possible, so it's _usually_ apparent what the method expects, does, and returns without additional commentary. Just like anywhere else, when it isn't readily apparent I add commentary. With that said, PHP's type hints are still inadequate in a few ways. You cannot hint for union types, the version of PHP that I'm still on doesn't have nullable return types, and return type covariance is not yet a thing. Whenever I'm not able to fully document these expectations in code, I add a doc block to elaborate. And to be clear, while the type-safety of using type hints is nice, I primarily use them for documentation purposes. After all, they _cannot_ get out of date. Unlike comments. 
Aha... I forgot about variadic functions for a second. I was mostly looking forward to using this to achieve cleaner diffs; but I'll only get it for calls then :(
Thanks for the feedback! The first things I thought about when I read your message was streams (https://flysystem.thephpleague.com/docs/usage/filesystem-api/, "Using streams"). With streams, you would be able to create your file in chunks and send them along the way to your file storage provider, without having to store them in memory. I'm not sure every provider support stream though. In case yours don't, your solution of using a local file and them upload it is probably a good alternative. I personally usually uses local files anyway. PHP does it by default for uploads for instance: uploaded files are stored in a temporary directory in the app container, by PHP itself. I manipulate them to upload an optimized version of these files on my file storage provider. This is not much of a problem in terms of scaling because everything is temporary (the state will be shared in the end) and related to a single request.
I understand that and honestly I would. But the amount of discussions you have to have in internals before anything can happen is just unreal. Look at the dozens of great RFCs that never get anywhere because people just cannot find a compromise. They have to have it their way exactly or they'll just vote against it. &amp;#x200B; I was involved in the discussion on arrow functions and man it got old really fast. Levi closed the RFC because he got so tired of it. Now why would I invest so much of my free time in an RFC, write prototypes, have endless discussions, just for the whole thing to get shut down without a second thought? &amp;#x200B; I have a job and when I invest my time into other projects I want that to pay off. This project is not doing that for me.
Thank you everyone. I'm getting the message that we haven't reached a consensus as a community, and are therefore in the realms of opinion. This is what I expected Thanks for your input
But one you track into the repository, the other you doesn't
`.env` files are handy for development, but should be avoided in usage in production systems. `.env` mimics environment variables the application has access to. However in a production system you would want to properly use environment variables with a full stack to create a secure, scaling web application where environment variables are set per container from service discovery and other technology in the stack.
* `@param int $foo Specifies the fooness of the bar, valid values are between 0-100` * `@param Collection $stuff Collection&lt;string&gt;`
Second on what /u/Handsome-Matt is saying here. These configuration values should be loaded from things like your server config - .env files are just a handy way of making those variables portable on your local machine or VMs.
No. The repo may be private today but if it is every accidentally made public or its code otherwise made accessible to people who shouldn’t have it then all of the credentials in that file are now compromised and must be cycled.
1/ Please don't use sentences like `you must understand` which implies that you are by definition right and I'm by definition a learner. You can be wrong too. 2/ I think we can summarize your whole answer by the `I don't like` you used a few times. You don't like it, that's fine :) . It does not mean it's a terrible idea in its concept, it just means you wouldn't do it yourself. What matters in the end is whether it works and it's maintainable or not, which I would argue it is. 3/ ``` class Product { private $id; } ``` is not a valid entity in Doctrine. The trait has much more information in it. It does not matter if the trait has a getter or not, even without getter the trait is still more than a simple property. 4/ `The problem is shared state` A trait does not define any shared state, this is simply incorrect. It defines properties which are duplicated, without any shared state between them. 5/ `If I use "rich model" concept, I don't need any of your traits` The most important part of my traits are the properties, not the getters and setters. You can definitely have rich-models handling their internal state in an elegant way while still using traits to define their internal state. 6/ About the limitations of rich-model: I love the idea of rich model, because every time I write code, I tend to prefer the code that is the most understandable when you read it's usage. I love having great names for methods in my entities that express the business and not key-value accesses. I'm with you on this level. A good example of that in a project I'm working on is the following: in the projects, users can create projects (entity Project), which are analyzed by analysts (entity User). An analysis (entity Analysis) needs to be proposed to a user and accepted/refused by this user on the creation of the project. To do this, I have the following methods: ``` public function accept() { $this-&gt;status = self::STATUS_ACCEPTED; $this-&gt;decidedAt = new \DateTime(); } public function refuse() { $this-&gt;status = self::STATUS_REFUSED; $this-&gt;decidedAt = new \DateTime(); } ``` which match nicely the rich model idea. Where I think the limitations are is when we need more than just changing the internal state of the entity. For instance, when an analysis is accepted, I would like to send a mail to the project owner, create a notification to the analyst, etc. An entity is not able to send a mail all by itself, as sending a mail requires a service. Therefore you have two possibilities: you can either inject your services in the accept()/refuse() method or have a more global service (something like "AnalysisWorkflow") that will both call your accept()/refuse() method and do the rest of the job. The first method is a nightmare to manage and understand (IMO, injecting services in your entity is definitely not a good idea for testability and usability). I think it is counter-intuitive and in total opposition to encapsulation and separation of concerns. Note that ocramius does something a bit different but related to this in his slides, by injecting a callback in the "authenticate" method of the User. I find this much worse than having anemic models. I prefer the second option by far, but it forces you to introduce a second object managing the state of your entity. It diminishes the usefulness of rich model because of this duplication in state management. This is why I think it's hugely important to have a pragmatic compromise on this level. Having a setter in an entity is *fine* most of the time. Expressing your business logic using nicely named methods is much better, and I try to do it where I can. But I'm pragmatic and I think trying to have *only* rich models managing their own state is not an ideal. But hey, that's my opinion :) .
Let me start by saying that while I consider myself reasonably comfortable with the Symfony request/response handling process, I have only dabbled with middleware oriented frameworks such as Slim. So there will be some speculation and perhaps some outright errors in the following. &amp;#x200B; It can be instructive to examine the evolution of Symfony's action dependency injection capability in some detail. &amp;#x200B; Right from the release of 2.0, Symfony allowed you to write action methods with a signature of action(Request $request). The current request would then be injected automatically for you. Remarkably similar to what the PSR15 middleware spec has. Doing so not only allowed Symfony to supported nested requests but also worked around some initial difficulties in explicitly injecting requests into constructors. The Symfony dependency injection container used to support nested requests with something called scopes which drove many developers crazy. &amp;#x200B; At the same time, S2.0 allowed action signatures such as action(Request $request,$id). And what would happen here is that if your request had a parameter named id then the value would get copied into $id. It would save you a line of code and perhaps make things a bit more readable. Even here you had to be careful as there was no way to know for sure if id came from POST parameters or GET query parameters or from part of the actual url. But overall it worked okay. &amp;#x200B; So far so good but at some point they introduced the ability to make signatures like action(Request $request, Blog $blog). A bit special processing would allow what was known as a parameter converter to figure out that the request parameter id was actually the id of a blog entity and then to actually pull the blog from a database(typically) and inject it. &amp;#x200B; This was the point where I personally became somewhat uncomfortable. For CRUD apps it might save you a line of code but lots of stuff was going behind the scenes. Parameter converters are still available and plenty of people use them but not by me. &amp;#x200B; Up to this point, everything injected was request specific. Basically for convenience. Not really something you could use constructor injection for. &amp;#x200B; But then, not too long ago, Symfony started to allow signatures like action(Request $request, DatabaseConnection $conn); Database connections are not request specific. So why does Symfony allow injecting non-request specific dependencies? Couple of reasons. &amp;#x200B; Up until recently, Symfony controllers were not defined as services in the container. You could do it but it took some extra work. Therefore, injecting dependencies like database connections into a controller constructor was a bit of a pain. Symfony controllers instead used a service locator approach to access dependencies. &amp;#x200B; Things evolved and functionality was added to allow services to be "autowired" by examining the constructor's signature and injecting dependencies accordingly. Controllers now became services by default. However, this in turn revealed a bit of a problem in that, by convention, Symfony controllers tended to have multiple actions. Injecting all dependencies in the constructor inevitably leads to injecting dependencies that are not used by all actions. It also tends to lead to constructors with large number of dependencies and could impact testing and what not. &amp;#x200B; This could be resolved by limiting controllers to one action but that approach is not very popular in the Symfony community. Instead the action injection capability now allows injecting exactly what is need for each action and saves a bit of boiler plate code along the way. &amp;#x200B; So now we can finally get back to the original PSR15 question of why PSR15 middleware does not have more sophisticated argument injection. The bottom line is that for request specific information, injecting the current request is all you need. Keeps things simple and reduces the amount of magic going on behind the scenes and makes testing easier. And for non-request specific dependencies, constructor injection does the job rather nicely. &amp;#x200B;
&gt; Use value objects and refactor your code to be self explaining. So you want to wait for an exception to find out you did something wrong?
Your backend must be microservices-based running on some exotic apis and infrastructure for maximum security
Two examples I can think of off the top of my head: * There are plenty of valid cases for mixed types and since PHP doesn't support union types you have to rely on doc blocks to hint them. * I am not a fan of annotations, but PHPUnit requires them for some features with no alternative that I know of.
I vaguely recalled them being useful for PHPUnit but couldn't put my finger on what it was
I really like [data providers](https://phpunit.readthedocs.io/en/7.3/writing-tests-for-phpunit.html#writing-tests-for-phpunit-data-providers). You can write one test and throw dozens of different scenarios into it.
Not exactly. You don't particularly want to put an .env on the server unless you're lazy about it. You can pull those variables in from say, your apache or nginx configuration.
I've found that storing a baseline config and/or multiple config overrides for each environment to be practical (if less *secure*). So you have: config.php -&gt; extended by user.config.php or user.config.production.php or .env -&gt; symlink to correct config .env.local .env.staging .env.production When deploying the correct config is chosen via deploy script configuration. this can also be applied to .env files One reason I like this approach is because it allows you to add new config values without having to redeploy / reconfigure infrastructure. 
Keep the ones that add something not expressible by the code itself (whys, rather then hows); Update the ones that can now be turned into code; Delete the redundant ones so they don't become outdated over time.
Is there a way to see what's wrong with the plugin? Because now there is no way of improving the plugins, just viewing the score.
You shouldn't use an \`.env\` file at all. It's an antiquated system. &amp;#x200B; Your deployment and service discovery tools should inject these pieces of information in to your production environments based on the settings you configure there.
The maintainer of the plugin has access to the full results with all their details. As much as we would like to give the details to everybody, we can't do that because it would be abused by bad actors.
TIL PHP doesn't support return type narrowing… u\_u
Can your IDE parse `Collection&lt;string&gt;` PHPStorm can `Foo[]` &amp;#x200B;
iirc there is an RFC that wanted to discuss introducing this in 7.3. With 7.3's scope now set it is probably delayed to 7.4 or beyond.
More importantly : HEREDOCCCCCC https://ayesh.me/Upgrade-PHP-7.3#heredoc-nowdoc
&gt; You don't like it Yes, but this isn't something like "I don't like to put newline before opening curly brace" thing, this is more like "I don't like goto's because most of the time they make control flow harder to grasp on, and so I would prefer not to use it at all even if in some circumstances this could be useful". &gt; Please don't use sentences like you must understand which implies that Not a native speaker, always fun to lean this kind of details. Thanks. &gt; is not a valid entity in Doctrine. Not, it's valid. Doctrine doesn't require any getters or setters from version 2.2 I think (and getters still used only to not trigger lazy load of whole entity, this will be fixed in 3.0). And if you are talking about annotations, my IDE could add it for me (right now I even use yaml to store mapping). &gt; It defines properties which are duplicated, without any shared state between them. Yes, but again, this properties could have few more rules applied to it, and changes of code in trait could lead to inconsistencies between object invariants. Again, not a problem if your entities doesn't contain buisness logic and used as anemic model. &gt; The most important part of my traits are the properties So you are replacing one line of code with one line of code (yes, I understand that there are annotations, phpdoc and so on, but I don't see problems with that). And cost for this is that you now bind to specific names of properties which could loose semantics in context of specific entity. &gt; For instance, when an analysis is accepted, I would like to send a mail to the project owner, create a notification to the analyst, etc. Yes, I remember when I faced this for the first time. I tried to solve this by using double dispatch, but this is just makes things too complicated, much easier to violate SRP and OCP. But then I discovered domain events and this solves almost all my problems: public function accept() { $this-&gt;status = self::STATUS_ACCEPTED; $this-&gt;decidedAt = new \DateTimeImmutable(); $this-&gt;recordThat(ProjectAccepted::occurred($this-&gt;id)); } This events just stored inside entity, and will be dispatched on `postFlush` event, where transaction is successfully committed. Then you could just listen for `ProjectAccepted` event and you could send email to creator of project. Even more, you could have whole processes described like that (when someone accepts your project, some tickets should be reassigned to someone for example), then there are Sagas and so on... This has some downsides (without proper infrastructure it is hard to keep track of events and debug them, but this is solvable in a multiple ways), but flexibility, ability to unit test complex processes, it just worth it.
Hey, fesor, just a quick heads-up: **buisness** is actually spelled **business**. You can remember it by **begins with busi-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
&gt; If every other method has a docblock most developers will at least create a quick one, just out of guilt... I rather have people not write docblocks if they're gonna document every single method like: /* * Gets the thing, because things have to be gotten */ public function getThing($id) { This adds nothing and just makes you have to scroll more when reading code.
&gt; Either you're validating (and throwing exceptions) in your method or in the constructor of the VO that is passed to the method. In both cases you can document the acceptable values in a docblock. But the VOs provide some benefits in that they are re-usable, easy to test and can generally be named sensibly. It's the best of both worlds. Even with your positive number object you may have a max allowed number. Let's play with the RGB example in the link you posted. It's easy to know that the maximum value is 255 for any of the three attributes, if you know what RGB is. But sometimes it's not that obvious and that's why I feel it's important to document that the value needs to be within range. There are obvious scenarios, and then there are the opposite. I personally try to be consistent and just default to include docblocks describing the deal. Let's say you have an interface for `Human`, and you want to add `Teen`. You can give `Teen` `Age`, but only `Age` between 13 and 19. Teen accepts age but throws if the age is not within range. This is again quite obvious, I guess I'm trying to say it's not as apparent for all scenarios.
Is there a reason for limiting users to 5 subscriptions?
I recently tried to create an infrastructure for a Symfony app in AWS. I didn't use service discovery but instead attempted to set environment variables based on output values from terraform. It was surprisingly difficult to get it to work -- the only way I found to create environment variables readable by nginx was in the nginx config itself, and of course cli scripts such as crons don't have access to this, so a separate solution was needed. I managed to make it work in the end but it was difficult and convoluted enough that I've decided to simply use .env files, generated by terraform, in the future. 
Great response. Thank you!
E-mails are expensive, haha. No, the reason is that we just launched the site and want to keep our possibilities open. We can always increase the amount, that's much easier than decreasing it.
I'm not so sure. In one in implementation you may have actual usernames for identification, and in others you may have email addresses. They still use the same interface, but you can't know if you're supposed to set an email or a username in that scenario. In that case, if you try to set a username that's not a valid email you'd have an exception instead while executing or testing later on. Then it's up to the implementation to add a comment saying "hey, this is supposed to be an email, we chose a different path - so to not have you come back and change it later when it doesn't work we tell you now". The original comment is there for consistency, and to explain that the implementation may chose. Again these are simple examples but I feel this show use-cases that are relatable. In that case the interface comment would instead explain that it's a unique string identifier, human representation if you will, for them to identify with. There are times where the automatic comments are duplicating and that I agree with, but for consistency the comment tags are always there.
I dont know where you are getting your info from, I see RFC links but I dont think any of this has been approved. Specifically, as others have pointed out: `is_countable`. I smell fake news
Type hinting helps (some) with "what" a method requires or returns. Documentation is still needed to explain "when", "where", "why", and "how" a method should be called -- because having to poke through someone else's "clever" code to figure that stuff out sucks.
mysql likes to do loose conversion of strings&lt;&gt;ints unlike other sql servers - so it is dangerous!
Keeping passwords in repo? Sounds like PHP developer.
I’d add the inline docblock @var which is a must for auto completing and, more importantly, refactoring instances coming from a container (eg. Doctrine repositories in the app)
That's cool. The reddit commenters can guess and then cross-reference your site ;)
Unpopular opinion: I prefer docblock typing, as it has the same IDE effect (error reporting, autocomplete, refactoring), without the limitations of PHP (lack of generics, unions, typed arrays) and without the runtime overhead. Basically I write PHP as if it's TypeScript.
I found it LOL.
I'd be fine only receiving notifications for major score increases (i.e. a change in the colour) if it meant I could subscribe to more.
The general idea is that you would be running your web application in a container and then pass the environment variables to the container upon running.
Hmmm. Most of the Symfony applications I build are for a client whose servers are all relatively basic (think Plesk VPS instances). I assume this type of configuration is too advanced for this kind of setup.
What about console commands on prod environments? Would the console even have access to apache/nginx environment configs?
Symfony 2/3's paramaters.yml files weren't (supposed to be) tracked in repos either.
There was a great PHP roundtable episode not long ago about the various options for secret management, including config.php, .env files, environment variables, Hashicorp vault, and so on. I strongly recommend it. https://www.phproundtable.com/episode/securely-managing-secrets-in-php
Most VPS's will let you still set an environment variable, you may have to log on the the machine and do it manually but you should check if you can accomplish it.
Also see [Cost and value of DocBlocks](https://www.reddit.com/r/PHP/comments/8hd7qb/cost_and_value_of_docblocks/). 
May I suggest you put the index second on the table result? I'm on mobile and there is a horizontal scroll, with lots of secondary information in the middle. Turning the phone doesn't use the full width either.
Said who?
It's not better or worse than wpvulndb because it does a different thing. wpvulndb shows you known and verified vulnerabilities in a WordPress plugin. CodeRisk uses the static code analyzer RIPS to calculate the risk assessment automatically. Human verification is more precise but it is limited to only a very small percentage of all plugins and there is a high chance that bugs are missed. An automated scanner is not limited in such a way but the results are unfiltered and it does not search for logic bugs. So wpvulndb and CodeRisk complement each other very well to provide different insights into the security state of a plugin.
Also [WinNMP](http://winnmp.wtriple.com) - Nginx MariaDB Redis Php 7 development stack for Windows - has virtual hosts for Nginx, with domain names like project.test .. and is free
If you put the variables in `/etc/environment` they are available in both webserver and command line.
i have a docblock on everything. every function, method, class, property. i know some people consider it overkill, but phpstorm makes it so easy to add one (type /\*\* and press enter), and 9 times out of 10, there's a \*bit\* more i'd like to explain about the method over and above the method name even something "obvious" like "get item by id" i'd still explain what happens on null values, or something like that. and that makes my codebase very consistent. instead of 3 undocumented methods then one with a big docblock (which is more jarring to me than "wasting space"), they all have one. it makes it just that much easier to drop a bit more info about it. and again, it takes all of 5 seconds and i've been thankful for them way more times than i've been annoyed by them (never) &amp;#x200B;
I may be missing something but what's wrong with a .env file on production if it isn't in your public accessible dir? Much in the way that larvae sets up its projects
I couldn't imaging a scenario where its not unless somebody gets access to your server then its game over anyway. Or its accidentally commited but .env should always be in gitignore anyway. Maybe its not recommended in case you accidentally set up your server incorrectly but as long as it isn't in your public dir I can't imagine it being any less secure than having it in your apache setup or whatever.
Has RIPS been analyzing Drupal and its community modules as well?
Great talk as always but also bold move to tell that framework is an unimportant detail at Laracon ;) Other than that, I would probably not want to work with that guy, he would irritate me for sure. 
Isn't that a global file though? If I have multiple Symfony installs on the same server that's going to cause issues right? I'm yet to see a convincing argument why setting these variables at a server level is _better_ than using `.env`. Are there any real advantages?
I don't use them anymore. There's a few details others have pointed out that your hints won't cover (especially the contents of a collection), but I find a lot of doc blocks are still even longer than the code ought to be. Type hinting doesn't solve everything for you, though. Making sure you define good, clear interfaces and have well organized DI will bring much more clarity. If your types are shitty, like `(DataValue $value`, or you're passing around IDs eg `(int $uid`, you're going to need that doc block a lot more than if you had `(User $u`
Portability. Should you decide to run your app in a container, you can run your codebase on a read-only system and load config into environment variables via whatever method the provisioning layer makes avaialble.
The only tiny advantage of not using an .env file is that the file will need to be loaded and parsed on each request. The extra overhead will probably not be noticeable but it is there. Having said that, I too run multiple app on a single server and I just use the env file.
This is actually a good idea, I'm going to give it a shot, thank you! &gt; A quick alternative is to just spam SHOW PROCESSLIST while your process is running, which will also show the size of the resultset. Eh, done that. Unfortunately it is useless when you have between 0 and a thousand simultaneous connections, too much data to process by eye. &gt; Another route I often use is to use "strace" to detect unexpected patterns. I'm not familiar with `strace`, but I will look into that too, thanks for the hint. I was actually thinking if there is a way to debug a PHP process somehow, but I don't have that deep of a knowledge of Linux tools like perf or strace as you mention. Definitely something that needs to be under my belt though. Thank you!
I said **there are optimization’s so that you don’t have to replay every event**. You basically take snapshots of the state periodically, or projections, and only replay events as needed. The point of ES is not *how* you get the data from the database. It’s about having the ability to determine *why* your data is in its current state. Event sourcing is the ability to show not just that the account is overdrawn, but also why the bank account is overdrawn by examining *the events that lead up to the overdraft*. The purpose of structuring your state this way preemptively is that you don’t necessarily know you need this information in the first place.
The main problem is putting your production .env file in your repositoty or sharing it around. Once you are in a larger team that env file has more potential to leak... Our CI/CD downloads our .env file from a secure s3 bucket that only our lead devs have access to it and our ci/cd tool... You can do the same with your config.php file, its no different just using environment variables are easier to use as most standard libs have ways to access environment variables so you don't need to implment anything to read them except for what evee dotenv library you use to load the variables. Its just that little bit more security when you know who has access to environment variables, if your server is compromised thats a different story, no matter what you do they have access to everything so your kinda stuffed.
Some frameworks will cache the config though, so this isn't always the case :P
It's my greatest frustration with the language. It really seems like it ought to be there, right up until you try to do it and get an error.
The idea behind the `.env` files is to get your [environment-specific data out of your code](https://12factor.net/config). This doesn’t mean you can’t version control it. You just do so separate of your project code. When you deploy your code you will need to somehow populate and make available those values so that your app will have access to them. It doesn’t matter how that gets done, as long as it’s secure. So if you want to use `.env` in your project root, go for it. Personally I build a file for Apache that uses `SetEnv` that gets included in the `VirtualHost`, which is stored outside of the project root. This is done as one of the last steps of my deployment stage in Jenkins; separate of the code deployment meant stage. You do you, though. If you prefer to keep your config coupled to your app, and it works fine, then who cares what others think. Just keep it secure (outside of the document root). Using `.env` is simply one way to achieve the same thing. 
If you configure the environmental variables in your web server, they will be in the `$_ENV` super global 
Do not put secrets in /etc/environment! This makes the environment variables available to every local user on the machine! This is worse than .env which can at least be secured to being only readable by your application, but don't do that in production either. If using Apache + PHP use SetEnv and secure your Apache config. In containerized environment use Vault.
A config.php file *utilizes* the values in a .env file, and gets committed to source control, a .env does not get committed to source control. You probably don't want your server creds flapping in the breeze in a public git repo ;)
Yes, if it's shared by multiple developers....
What do you mean?
One example, The author of phpdotenv [On the readme](https://github.com/vlucas/phpdotenv/blob/master/README.md) &gt;phpdotenv is made for development environments, and generally should not be used in production 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [vlucas/phpdotenv/.../**README.md** (master → 54d599d)](https://github.com/vlucas/phpdotenv/blob/54d599d414f8cf3f6129e287acaf44b610486aa1/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e4qg156.)
Here's how Azure gets environment variables for WordPress in wp-config.php: [https://github.com/azureappserviceoss/wordpress-azure/blob/master/wp-config.php](https://github.com/azureappserviceoss/wordpress-azure/blob/master/wp-config.php) ```php $connectstr_dbhost = ''; $connectstr_dbname = ''; $connectstr_dbusername = ''; $connectstr_dbpassword = ''; foreach ($_SERVER as $key =&gt; $value) { if (strpos($key, "MYSQLCONNSTR_") !== 0) { continue; } $connectstr_dbhost = preg_replace("/^.*Data Source=(.+?);.*$/", "\\1", $value); $connectstr_dbname = preg_replace("/^.*Database=(.+?);.*$/", "\\1", $value); $connectstr_dbusername = preg_replace("/^.*User Id=(.+?);.*$/", "\\1", $value); $connectstr_dbpassword = preg_replace("/^.*Password=(.+?)$/", "\\1", $value); } ```
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [azureappserviceoss/wordpress-azure/.../**wp-config.php** (master → c312799)](https://github.com/azureappserviceoss/wordpress-azure/blob/c31279929027d0e72cc6adabc453edc6420ec6e5/wp-config.php) ---- 
Why must anyone commit a config.php ? cat "config.php" &gt; .gitignore
This is something that I wasn't aware of. Thank you for the heads-up! Looking forward for techniques to get rid of it.
What can you do when you find a plug-in with huge risk?
The problem is its name imo. config.php is a well-know file name. I automatically think it's an important file, loaded somewhere before everything, it should be part of the application, in production or not.
One thing we always write docblocks for, are class variables. The reason being that we cannot type hint them (yet). Once class type hints are added, we can de a simple refactor. 90% of other cases don't require docblocks, unless they are needed for static analysis or IDE autocompletion.
I store secrets in an encrypted file. He only thing I feed from the environment is the master password to that file. 
Overwriting your whole .gitignore file with php source code probably isn't what you want to do. :)
Oh, you've just overwritten all your existing .gitignore entries. Use `&gt;&gt;` to concatenate.
It only needs to be made public for a few seconds to lose it completely. There are bots sat there waiting to grab your secrets at a moments notice, because there can be big money involved. 
It would not. As with any solution, there's no one-size-fits-all. Personally I prefer those kinds of tasks be run by CI in the first place, in which case the runner has access to the config needed.
It was more an illustration of the usefulness of doc blocks. `Collection&lt;string&gt;` isn't the same as `string[]`, but if I would've said `array` I agree with you :) I use PHPStorm and `Foo[]`, very useful!
I don't think that the given example of "Intuitive Syntax" is really intuitive. I would never think that Entity object's responsibility is to return a paginated collection. Where is this intuitiveness?
The article is 100% nonsense. Symfony comes with same features but with tons more yet the article makes it like Laravel is unique. Laravel is popular only because of 2 reasons: 1. It has very limited features which makes it easy to learn; but it is the same as if you said "bicycle is better than a car because it is easier to learn it". Makes no sense, right? 2. The magic of accessing anything from anywhere. It makes it easy for beginners but the **worst** thing some framework can do. There is very good reason why "*single responsibility principle*" exists and Laravel breaks it. &amp;#x200B;
What does this actually solve that the other options presented doesn't?
Starting to use event sourcing is not an easy task. There are a couple new paradigms to get used used to when coming from "classic" modelling. When I started out I had a great mentor who had already used event sourcing for a good number of years. Even with this mentor it was a somewhat uncomfortable journey. However, after the initial phase, it's not an immensely valuable tool in my toolchain. It's not for everything and not every event sourcing problem requires the same tooling. Because it was often a big expense to setup for smaller stuff I created r/https://eventsauce.io, which is a fairly straight forward library for event sourcing. It comes with an event generator and test tooling so you can get started quickly. It doesn't come with persistence and queueing adapters, because implementing those yourself makes sure you understand what happens under the hood. This might seem odd, but the internals of event sourcing should be known to those who use it. They're very important. There are example adapters/bindings in the GitHub repo ([https://github.com/EventSaucePHP](https://github.com/EventSaucePHP)). The development might look stale, but it's not. I've been using this ever since the inception and I have not found parts that require change. This will change when more people use it of course. For now, it's small enough to go through the source and see how it's make / how it works. It's even small enough to insource and take full ownership over. I've documented the project fully (r/https://eventsauce.io/docs/) &amp;#x200B; My advice would be to use if for (business) process modelling first, it'll be a very good fit. Aggregates tend to not live as long, which makes sure your mistakes won't hit you back as hard. After a while you can transition into the rest of the event sourcing field.
In regards to production quality, my latest videos have improved a lot.
echo "config.php" &gt;&gt; .gitignore.
You seem to not have much idea about global complexity and instead just repeat what you have heard and believe is true. Relying on 3rd party libs for trivial things is increasing the complexity and invite issues. Web developers nowadays are feared from writing code which is no good thing. Critizing OP for not using oAuth makes no sense too and its no ‚bad practice‘ to not use it. Selfmade ‚common‘ user authentication can be just as fine. Get out of your bubble!
See [this SO answer](https://stackoverflow.com/a/17492103) for a more thorough explanation.
Because the .ENV file is usually not committed to the version controll system and only exists on the server, this means you can swap out config without having to mess with version control, also it does not expose your credentials to third parties (github, gitlab, bitbucket, teammates that should not know production credentials etc). Creating the .ENV file or environment variabels can also be a part of the Continuous Integration process (many CI tools support editing env variables through the web interface for instance, like Laravel Forge)
If you have coworkers that do that then don't work at a place that hires retards and flunks.
A type hint doesn't explain why a piece of code does a specific thing, that's what you should be using docblocks for
We enforce full docblocks for a few reasons. &amp;#x200B; 1) They are helpful for junior devs as an aid to parsing less immediately apparent code. 2) They are helpful to \*you\* the programmer to type out your function descriptions and variables, it acts as another sanity check you're doing the right thing. 2.a) They're helpful when doing a code review, to ensure the function does what the programmer meant. &amp;#x200B; There is no real overhead in having them and they're useful, I see no reason not to enforce descriptive dock blocks, always.
/r/Drupal
Congrats :)
`.env` files are slower and more dangerous (then .php files) because the content of environment variables is visibile to all other system processes and could be send via a crash report to foreign servers. Some devs place the `.evn` file into the `public/` or `webroot/` directory and make secret data visible to the [whole world](https://www.reddit.com/r/PHP/comments/80gr0p/many_laravel_applications_expose_their_credentials/). Just google for: `"DB_PASSWORD" filetype:env` [Google](https://www.google.ch/search?q="DB_PASSWORD") I suggest place a `env.php` one directory above the application root directory. Kepp the file `env.php` out of version control and load it within your `config.php` to extend to default settings with the secret data for the specific environment.
The plugin maintainers have access to the full results, so one thing you can do is to tell the maintainers that they might want to check them out. You can find more information at the bottom of the about page: https://coderisk.com/about
We have not started to analyze Drupal modules for CodeRisk yet but we want to add more systems in the future. In general it is possible to analyze Drupal modules but at the moment you have to include the Drupal core as well.
These are some of my older videos. The production value have improved a lot in my latest videos.
I recently developed my first library: Typed Enumerations. No library I found did it as I'd like it to, so I made my own: a simple, lightweight, efficient and extensible typed enumeration library. Type hint your enumerated options in an efficient and strict way to eliminate unintended side effects and bugs introduced by typo's. It provides an interface as well as an abstract class that implements it. You can simply hook into initialization and booting fases in an OOP way. Everything can be found here: [https://packagist.org/packages/youngsource/typed\_enum](https://packagist.org/packages/youngsource/typed_enum)
The internals mailing list has been down for about a week :(
Mailing lists in 2018 😂😂😂👌
Oh, thanks! Are there any other ways to stay up to date with internal developments?
Linux kernel uses email, too. You info lack, padawan. 
Just because others use it too, doesn't mean it's a good method. A few years ago (hell, even today), people are still using http, doesn't mean you should too.
Did you search why they use it or you are just saying what you think? 
Thanks for pointing that out - that was my mistake including it in there. I've fixed it and added a couple of other examples to that section to make it a little clearer.
Well most of the programming books have some form of exercise at the end of each chapter. But what do you exactly mean by exercise?? Best practices in web dev or exercises about using algorithms in php?
As long as at least two entities use the same technology, neither one can stop using it because the existence of the other justifies the existence of the self. I can tell you are one of these super smart """REDDITORS""" I keep hearing about :\^)
&gt;Raise event from the command ChangeUsername and store it on the aggregate ChangeUsernameHasFailed Can you please explain how that new event is "stored on the aggregate"? Do you mean persisted in the event store?
&gt;it's not an immensely valuable tool in my toolchain "not" or "now"?
That is exactly what I meant. I actually thought about editing that line after I submitted it, but I thought "Meh, the event is directly related to the aggregate - so that's probably a fine way to put it.." 
I'm literally saying, just because developers for the Linux Kernel are using mailing lists, doesn't mean mailing lists are a good idea to use as communication channel. 
.env is just a development alternative for using real environment variables in production. The advantage of those being that it's easier to manage in container based production environments and doesn't require file access.
Well, personally I have read some php books and coding books in general, but most of them aren't that useful tbh. Like the previous person asked, what are you struggling with? If it's just syntax, you can find most of the information online. Best way practising php is just start to coding a lot, that helped me the most, but people are different.
Maybe "eloquentability" is a better name for what Laravel does?
&gt; Best way practising php is just start to code a lot The problem is that newcomers often don't know what to code. So they are started yet another blog or something like this. But for example, if you are new to network programming, your first exercise probably woud be "Let's build ping server". New to system programming - some exercises like "let's display all USB devices". But again, this isn't about language. And in order to suggest any excersies we need to understand OP's current knowledge level and what topic he really want to digg into.
Yes you are absolutely correct.
☝️Poll in the link
What? I don't understand why you're asking this question. Each access modifier has specific use cases in different scenarios.
What's your preferred utensil - s fork, a spoon or a table knife?
why there is a distinct none option? Shouldn't it be a public/none instead?
A spork. Can worl as a spoon, a fork, and a table knife.
I've done some work with JAVA(simple desktop apps), have learnt HTML,CSS,JS, BootStrap and wanna move to the backend, I had in mind some simple :"manage my shop project, where I put the sales manually, it gets saved to a database and then it displays daily sales, monthly sales and after a while I can start developing it better"
Nothing to do with containers, those are an entirely different concept that are completely unrelated to the problems which the .env file tries to solve.
Because it tests your units? What is your argument that it *is* a waste of time? The past, what, twenty-five years or something have built the idea that testing is general is important, so the onus is on you to make the argument.
It is not a waste of time, because a good test-set proves that your code is healthy and of good quality. True, it costs extra time, but it makes up for it, when you test all of your code in the blink of an eye (so to speak). And how about those extra developers in your team (now, or in the future). They also will know that when they start coding, the code they work on is of a well tested quality. And if they deliver the code they write with unit tests, you know that too. It is like documentation, if it isn't there, your solution is not finished yet. :-)
It's not a waste of time. If you write good tests.
The benefit is to be able to completely change the implementation of something and still be sure the system works as expected after the refactor
Your question has been answered a million times in very elaborate details. Don't waste the time of the community, please inform yourself. Here is the entry point to the discussion: https://martinfowler.com/articles/is-tdd-dead/ If after that you feel like your software wouldn't benefit from testing, don't bother and move on. You're not the target group for Unit Testing then.
Explain to me how you would verify that thirty or so classes (each with fifteen or so methods) haven't changed after refactoring something, all in less than a second? Then explain to me how you would get your colleagues to do the exactly the same tests when they test their refactorings?
This is pretty scary.
Symfony security core includes security voters and can be used outside of the framework itself. 
Need for no Framework...
You can use them as independent libraries with out any framework
codeception sounds like it should be the opposite of codependence
How much of Symfony would I have to install to use them?
I've looked at this. My only concern was there being too much magic which would keep me from being able to really learn about how event sourcing works. I went through this years ago when I started to learn about OOP and adopted CodeIgniter as my framework. This slowed my learning down enough that I'm weary of using packages that are too hand-holdy for concepts I'm not comfortable with. With that being said I'm going to give it try with a proof-of-concept so I can make a fair assessment.
You only need to run `composer require symfony/security-core "^3"` You'd want version 3 because version 4 requires PHP 7. You can also look at the security-acl component, but it looks like it might not be maintained anymore. You can read more about the security component here: https://symfony.com/doc/current/components/security.html
&gt; Explain to me how you would verify that thirty or so classes (each with fifteen or so methods) haven't changed after refactoring something, all in less than a second? I know they changed. They were refactored. Some functions are probably gone and new ones created, otherwise the purpose of the refactoring was so trivial it wasn't worth doing.
This response is one of the problems with the idea of unit testing. Rather than focus on the practical issues (your post is effectively a link), you froth about your own opinions that you read and attack the notion that Unit Tests are not useful. SMH
This is exactly the reason I write unit tests. Many times my proof of concepts become a large part of whatever project I was PoC'ing. After it works I write tests for them and start refactoring to something less "bull-doggish".
most developers are arrogant a\*\*holes. but thanks super
Then what is the solution if you have console scripts that need to access environment variables?
Typically the process, from a code perspective, would be the ChangeUsername($aggregateId, $newUsername) command is executed (via the command bus), and gets routed to the ChangeUsernameCommandHandler. The Handler then calls the event store repository and "loads" the aggregate, which means all events for $aggregateId are replayed, in order, onto the aggregate to get the aggregate into its current state. Then the Handler would call the changeUsername() method on the aggregate. The aggregate determines if the changeUsername command is allowed (maybe it is an illegal name like "admin"? Maybe it's the same as the current username? etc). If it's allowed, it emits the UsernameWasChanged event. The Handler saves the event ("store on the aggregate") via the repository's save method, the event is published and any event listeners listening for that event react accordingly
Hear, hear
A good reason against them is the fact that they are limited in space. Int Max is quickly reached and then you’re out of options. Apart from the fact that they increase the learning curve to understand what is going on exactly. If you have a lot of flags or your flags are very dynamic and can be extended, string arrays or associative bool arrays are the better choice. A good reason for them is space and performance. They are faster to check than e.g. string-based Flags in an array of eg an associative array of bools. Most common bitmasks can be stored in 1 byte or a tinyint, which can make a huge difference in eg database size for big databases. MySQL can check bitmask flags in queries directly. If you have few and they are quite fixed, using bitmasks absolutely makes sense
NIce. I've been feeling like I should make more tuts on the YT for PHP..
i think its main purpose is to check if every thing works as intended after some one comes lets say after 1 year and edits the code
Extremely relevant! https://github.com/phpexpertsinc/thrive/blob/master/BitPrefs.php I made it 6 years ago exactly, but it's still pretty useful today.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [phpexpertsinc/thrive/.../**BitPrefs.php** (master → 9db3872)](https://github.com/phpexpertsinc/thrive/blob/9db38723320ff14168607759f93e6e642010813f/BitPrefs.php) ---- 
Been testing this for a while and it’s amazing news to see it reach a global BETA. Slightly frustrating that there is no memcache/redis support in this or any of the second generation run times on App Engine, as building a 10 factor app with no file system writes makes that a must, but hopefully this is something they’ll fix before GA. To anyone thinking of giving it a try, I can’t recommend it enough. For a PHP developer used to free reign, especially when it comes to file system usage (when the default stance for most frameworks is to write files), it can be a little tough to ween yourself away from this or replace it. However, when we first switched, our whole company fought me tooth and nail for months (I’m the single DevOps guy for a 10 man development team) as they hated the drastic change, but within three months all but one guy had spoken me privately to thank me, saying it’s the best thing we’ve ever done. I agree with a few comments on the price not being the cheapest, but it depends if you are comparing to a VPS or a fully managed and complaint enterprise setup. For the same price as cluster of VMs that hosted our front end sites that we had to manage ourselves, we now run our entire business stack on App Engine for the same price (~£2000/month for a £250m business and most of that is Cloud SQL to be fair), fully managed, PCI compliant &amp; supported 24/7. What has been a nice surprise too is that the engineers at Google delivering the product and associated tools have been happy to work with us directly, to the point of taking our feedback on board and giving technical insight into the new runtime, even though we are quite a low volume customer in their eyes.
Refactoring a class, by definition, shouldn't change the public API.
Your main choice should probably be between PaaS (Platform as a Service) or IaaS (Infrastructure as a Service). IaaS is the classic VM/VPS with perhaps LAMP installed and PaaS is somewhere you just upload code and the provider handles the runtime stack so you don’t have to. In my opinion, this is most important during the life of your app rather than at initial setup, as with a PaaS security is taken care of automatically. One bad example of IaaS was a supplier of ours set up an app about 4 years ago and boasted it has nearly 100% uptime, but they’d installed Ubuntu 12.04 on a VPS and never updated it from the day it was installed. Compounded by the fact they’d used 3rd party repos for PHP that didn’t exist any more, it was a security nightmare. Can’t speak for PaaS on Azure/AWS in terms of ease of use, but we chose App Engine because it has the best support model. We got stung with Elastic Beanstalk with Amazon only offering fix advice to do it yourself if their built in automation failed, where as Google with have a senior engineer fix it for you within minutes with Gold Support.
Do it man :-)
Note: I already have it setup so I can execute a php script by typing it's file name. I can do "whatever.php" and it works correctly, but what do I have to do so I can just type "whatever"?
Can't you just rename it to not include the extension? At least in Linux what determines how the script gets executed is the first line with something like #!/usr/bin/php which is called shebang.
Is there more information available about RIPS? Your website gives a list of what it detects but not how it detects it. It also mentions that the results could be entirely inconclusive as there is no guarantee that what it detects is actually exploitable.
Zend Permissions ACL https://docs.zendframework.com/zend-permissions-acl/ Zend Permissions RBAC https://docs.zendframework.com/zend-permissions-rbac/ Before you start screaming "no framework", these are standalone components. 
I know at least _some_ annotations (i.e. `expectedException`, `expectedExceptionMessage`) can be substituted for method calls in the test method (`$this-&gt;expectException()`, etc). Is this not the case for other annotations? 
No, I wish it worked that way but that's not how Windows works.
If I want to create a PHP library, and I import from another library and I want it all to be within one file, I would minify it so the file isn't too large. Also, I wonder if minified PHP runs faster, with PHP being an interpreted language after all, because PHP converts the file to op codes each time you run it (unless opcache).
Most are, but even if one of them comes in and demands free labour like "explain to me why X is not a waste of time", we add a community should try to be as supportive as possible and at least point them into the right direction.
Well yes, if you have multiple installs on a single server that's a different issue.
Honestly IDE just generates them for me for everything via single key combo - I manually add only what it can't generate - @see, union types and stuff like that. So we end up with full blocks anyway and honestly it's a nice visual separator. I'm so used to doc blocks that without them code just looks wrong :)
Also see [Questioning PHPUnit Best Practices](https://thephp.cc/news/2016/02/questioning-phpunit-best-practices) by [Sebastian Bergmann](https://github.com/sebastianbergmann).
&gt; In my opinion this contributed to making the language greater and more powerful by spreading itself on a wider set of systems and developers. I'm not following the logic here. The language is better when there are multiple supported versions at once? It just seems like more versions of documentation to confuse developers. "Use this function/object/keyword/operator." Syntax error. "Oh, I guess you're on a different version than me." What use is that? I welcome a single standard version which people deal with. It's for the best.
&gt; I've always had the choice between at least two supported major PHP versions This claim is provably false. Using information from the [PHP Wikipedia page](https://en.wikipedia.org/wiki/PHP#Release_history) (ignoring PHP/FI due to lack of immediately available information): * PHP 3 was supported between June 1998 and October 2000 * PHP 4 was supported between May 2000 and August 2008 * PHP 5 was supported between July 2004 and December 2018 * PHP 7 is supported from December 2015 onwards So periods where 2 or more major versions were supported: * May 2000 to October 2000 * July 2004 to August 2008 * December 2015 to December 2018 This means that between October 2000 to July 2004 (a period of almost 4 years) and August 2008 to December 2015 (a period of more than 7 years), only 1 major version of PHP was supported.
&gt; I've always had the choice between at least two supported major PHP versions What are you talking about? PHP4 was dead for *8 years* before 7 was released. If you were using PHP4 3 years ago you should be ashamed! PHP4 was killed 3 and a half years after PHP5 release, and PHP7 will have been out for 3 years by the time 5.6 goes EOL &gt; Should I just refuse to do the work unless PHP7 is provided? Yes. If you're a professional, act like it and tell your customers you won't deliberately make an insecure out of date system for them, and they need to upgrade. If they're too cheap to do even that then cut your losses, quick.
I would dispute that PHP 7.0 too "edgy" now. 7.1 and 7.2 have been released as stable also, so I'd say 7.0 has had time to mature. What problems are you having with converting your codebase(s)? 
TIL PHP 7.0 is still “edgy”. 
&gt; more versions of documentation to confuse developers I guess confusion is still a good fuel for the community. Look at Python, it has two reasons to get developers confused :D 
If I look at the ecosystem rather than the official agenda, PHP5 is still 80% of the installs. Does this mean refusing 80% of the jobs until the adoption of PHP7 gradually takes place? 
didn't specify the minor version but I'll edit
Nope, you're simply misinformed.
I wasn't claiming information of any sort in this version enumeration, I was only listing my own experience. The post has been edited to make this more clear, sorry about the misappropriate use of "supported". 
Thank you, this makes much sense!
# DO NOT POST IN WEEB THREADS
99% of code written for PHP 5 works on PHP 7. If you really need mysql_ functions (Which had been widely discussed as being outdated at least as far back as 2005, I might add) then you can write a wrapper in 20 minutes. What reason do you have to want to stick with PHP 5?
I recently gave up on a CMS called Concrete5 because it doesn't seem to be stable on 7.anything, and at least as I recall the supported fix was revert to 5.x. In this case it wasn't a client requirement so I walked, but you can't always do that. I wonder how many other packages out there are like that. It was extremely broken on 7.2+ because it looked like one of their core classes was named "object", which magically turned into a reserved token. Blame for that one is squarely on the PHP devs - adding reserved tokens that used to be valid identifiers is pretty odd.
then I would suggest to learn SQL (postgresql or mysql) without PHP. Tasks like you described could be done without any PHP involved (and actually this kind of stuff could be done via simple google spreadsheets) &gt; after a while I can start developing it better So what exactly is your goal? What id "better" and why PHP?
Well, I thought PHP to make the calls to a database and then display it on the page. I know a little bit of MySql, but I don't know how to put it all together
I would add unit tests *because* it's a demo, if the goal is to teach.
You don't want to work for a company that is running an outdated version of PHP and has no intention to remedy that. I wouldn't take a job where they won't : * Use up to date software (which means at least PHP 7.1) * Use TDD or at least Unit Test important libraries * Use continuous integration * Use continuous deployment or have some "one click deployment" system. It's fine if they tell me they're working on it or that it will be up to me to make it happen, but if they just tell me "no" I'm out. 
i don't know how to unit test surprise. :)
[https://symfony.com/doc/current/form/unit\_testing.html](https://symfony.com/doc/current/form/unit_testing.html) sorry for giving you doc link, but this should really get you started, especially since you are running a symfony app. if its hard to grap (totally fine) start with simple unit testing, youre taking giant steps: [https://symfony.com/doc/current/testing.html](https://symfony.com/doc/current/testing.html) once you get the hang of unit testing (using test doubles, stubbing, mocking, making things testable in a sensible way, you will without a doubt run into untestable situations), you'll know what--and how you want to test forms. do this hand in hand with the phpunit docs and youre fine [https://phpunit.de/documentation.html](https://phpunit.de/documentation.html) &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Thanks for the insight!
wait a minute.... you think i can use data fixures for unit testing ?
my form is set up in a laravel type of way, which is why i can't really understand this tutorial. 
With a registration form, you will not need fixtures, since you are creating the data. That tutorial isn't specific to testing a registration form. It is about using the headless client to test your form on the frontend. You also have the option to just test your form object -- [here](https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/Tests/Form/Type/RegistrationFormTypeTest.php) is an example from FOSUserBundle, testing their registration form.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [FriendsOfSymfony/FOSUserBundle/.../**RegistrationFormTypeTest.php** (master → d41c5a9)](https://github.com/FriendsOfSymfony/FOSUserBundle/blob/d41c5a9b95075e6bd95ffa11746514e3e9630539/Tests/Form/Type/RegistrationFormTypeTest.php) ---- 
this is somewhat making more sense now, that example kind of an eye opener. Finally something that is practical, however, the way my code is set up. I don't have the formtype method, im not even using it. take a look Its set up similarly to the way a laravel developer would have it, if they were developing a sign up method. [https://github.com/EliHood/symfonyormexample/blob/master/src/Controller/UserController.php](https://github.com/EliHood/symfonyormexample/blob/master/src/Controller/UserController.php) can i still test it without the form type thingy. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [EliHood/symfonyormexample/.../**UserController.php** (master → af88224)](https://github.com/EliHood/symfonyormexample/blob/af882240a429952fe825a53e196e03076d993643/src/Controller/UserController.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e4t6fr9.)
I think it's a negative in Python as well, but it kind of happened more organically. The reason the change to Python 3 was/is slow is because a substantial portion of the third-party libraries were written (very well) in Python 2 and then abandoned to various degrees. Regardless of the reasons for each split, having the split is a bit annoying.
yep I wouldn't do that for a startup, but I'm more worried to see it come with a package of different environments
That will get you on a the right track for testing with fixtures. Using that bundle is the way to go.
I feel you :-) As /u/AllenJB83 points out, [this won't be painful for very long now](https://seld.be/notes/php-versions-stats-2018-1-edition)
stop being an a\*\*hole, a\*\*hole.
Maybe there's an niche market for emulated consoles :D
but i want to be testing real data though that interacts with the database , would this still be useful or no ? if not, what do you recommend :)
Thanks, tried to demonstrate that but only got downvoted, couldn't have done it better :-)
You're looking for functional tests, take a look at the symfony demo repo: [https://github.com/symfony/demo/blob/master/tests/Controller/BlogControllerTest.php#L64](https://github.com/symfony/demo/blob/master/tests/Controller/BlogControllerTest.php#L64) &amp;#x200B; In the linked example, a [commenting form](https://github.com/symfony/demo/blob/master/src/Controller/BlogController.php#L93) is tested. It also contains various comments explaining what is happening. It's a useful repo to learn from.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [symfony/demo/.../**BlogControllerTest.php#L64** (master → 4363061)](https://github.com/symfony/demo/blob/436306118bf202af7ea015d8dcfb3676ebbe2b14/tests/Controller/BlogControllerTest.php#L64) * [symfony/demo/.../**BlogController.php#L93** (master → 4363061)](https://github.com/symfony/demo/blob/436306118bf202af7ea015d8dcfb3676ebbe2b14/src/Controller/BlogController.php#L93) ---- 
&gt;https://github.com/symfony/demo/blob/master/tests/Controller/BlogControllerTest.php#L64 doesnt help but thanks 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [symfony/demo/.../**BlogControllerTest.php#L64** (master → 4363061)](https://github.com/symfony/demo/blob/436306118bf202af7ea015d8dcfb3676ebbe2b14/tests/Controller/BlogControllerTest.php#L64) ---- 
This will allow that as well. The SQLITE database that you create is a real database, that exists in a file within your application. You can write real data to it using Doctrine, the same you are doing with (I assume) mySQL. This is a very common testing method for testing database interactions with real data.
Unfortunately you have to learn to think for yourself and use the resources at your disposal to reach a solution. You ask a very broad question which is covered in pretty good detail in the official documentation. It makes me think you didn't put in any effort on your end. If you have more specific questions, or are running into problems trying to implement the information from the documentation, then we can help there.
You can still test this form using the methods from the first link I sent on KNPUniversity. Using the headless Client and DomCrawler, you can fill in the form data and submit the form. Then test that the created user exists in the database with the form data you submitted. 
dude, thank you so much you for guiding me in the right direction, been asking folks on stackoverflow, and reddit, but getting no where really. I'll just use this [tutorial](https://www.thinktocode.com/2018/06/14/symfony-unit-testing-with-a-database/) as a guide to unit test databases within symfony. Thank you so much for clarifying everything. 
you smell like doo doo. 
 This is a strange question. Please define "top". Yes, Facebook is probably the most distinguished. Why is this important to you?
**Programming languages used in most popular websites** The most popular (i.e., the most visited) websites have in common that they are dynamic websites. Their development typically involves server-side coding, client-side coding and database technology. The programming languages applied to deliver similar dynamic web content however vary vastly between sites. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Non-Mobile link: https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^207742
That sounds like an OSS problem indeed.
thanks again. 
Twitter was originally written in PHP. It no longer is, but for a long time it was.
Cool. Well, I'm glad we've established your age and level of maturity. Good luck. 👍
The ones started by hobbyists when PHP was the hobbyist's pick e.g. Wikipedia (started in 2001 in Perl, ported to PHP in 2002) Facebook (started in 2004) Vimeo (started in 2004) Etsy (started in 2005) Tumblr (started in 2007) 
I thought twitter was ruby not php?
be nicer next time. 
pornhub
Slack : https://slack.engineering/taking-php-seriously-cf7a60065329 Also Flickr.
PHP is used on over 83% of the top 10 million most popular websites. Dot Net is at around 13%. Java/Scala is at 2.3%. However, if you were to look at the top 1,000 websites you are likely to see Java 4:1 but this is partially due to legacy code that meets the business objective and little perceived value to rebuild it. You are also more likely to see Perl and Haskell 2:1 on the top 1,000 most visited websites. Sources: https://w3techs.com/technologies/overview/programming_language/all https://w3techs.com/technologies/history_overview/programming_language/ms/y https://w3techs.com/technologies/market/programming_language https://w3techs.com/technologies/topsite/programming_language
&gt;maybe they starter migrating or something Looks like they're using Go as well, so maybe they're using microservices for some of their infrastructure. &gt;based on their job page now, they still use it :D And the Zend framework as well. Old-school :)
Wikipedia, in Alexa's top-10, runs on MediaWiki which is written (mostly) in PHP.
I am so happy to see you care about licensing. It is amazing how many start ups or acquisition deals get totally mucked up because of licensing issues.
Wow .. I never expected it...
thanks for this info
amazing how based on a single career page you can "reverse engeneer" their stack
False advertising. Read top line of description. Viewed source. Experienced emotional pain. 
Oh yeah, I like to do that in interviews (I'm a contractor). I'll hunt down staff on Linkedin, look at career pages, even try and find Github repos so I can get an idea of what they are using so I can bring it up in the interview.
Well, this week I recently performed a MAJOR refactor of the database structure for a large, *very* important application at my workplace. Since the entire codebase was unit tested with approximately 98% coverage, it took me about a week. If I didn't have those tests in place there would have been *no way* it would have ever happened, and it's something that needed to get done for at least 6 years.
Twitter is on Scala now for the backend. 
If you want to import a library you should use a dependency manager like Composer, not be copying in files, let alone modified ones. Minified source code would make it tougher to debug library code by dumping out variables and modifying it to see how it works, doesn't sound like fun at all.
That's not an RFC, it's a blog post.
Any future serialization mechanism should offer some some crypto by default IMO. Certainly easy to do in userland but if it was built into the future function itself that would have real benefits. secure_serializer_set(string $secret); secure_serialize(...) secure_unserialize(..., $alt_key = null) Once it's set, internally HMAC the serialized data with HS256 and attach it to the end, and refuse to unserialize the data if it doesn't match.
It's a [Request For Comments](https://en.wikipedia.org/wiki/Request_for_Comments) - a proposal is laid out and feedback is explicitly being requested to improve it (or tell why it might be a bad idea). It may not be an official "RFC" proposal for feature implementation at this point, but it's not at all uncommon for authors to draft RFCs and publish them for development before (deciding whether or not it's worth) going through the formal RFC process.
What part(s) did you find magical? I'm a very anti-magical programmer, so this kind of surprises me. The parts are deliberately simple enough to go through and the parts you need to implement yourself are there specifically so you know the internals, and know "how and why" things work the way they do.
It's more of a "router".
I confused it with Tumblr.
Fair enough, but please note I'm not saying "don't use .env or config files in production ever." I'm just saying to secure your secrets, to which putting all your variables in /etc/environment is antithetical. You can either give your console scripts access to your secrets directly, or require that anyone running them must supply the secrets via flags or env vars or some other method. It's a trade-off between security and ease-of-use.
Darnit, I was hoping I would blow everyone's mind with this one!
released a new version with php7.1, improved docs geynerator, custom template and so on :)
Well, OP didn't actually provide any arguments to counter, so you kinda *have* to just point to the general body of essays over the years and say "do some research".
"RFC" implies intent, it's not a stationary you just write your words on.
String (of minimum length) would likely be the best way to go. Less hassle and as long as the code isn't exposed as plain text it's as secure as pretty much any other part of the site. Sounds like a job for composer tbh, create one when it's composer init'd and store it in a class somewhere. 
&gt; which magically turned into a reserved token [Nothing magical about it](https://wiki.php.net/rfc/object-typehint#backward_incompatible_changes). And even before that is was already a truly stupid idea to name classes `Object` as it was already soft reserved.
Kinda useless then, too bad :( I fixed that, thanks!
Wow, thanks!
&gt; Kinda useless then, too bad :( I fixed that, thanks! https://wiki.php.net/rfc/is-countable
I really like PHP but dont get me wrong... these websites decided to go with PHP because they didnt have any other choice. 
I am worked in big companies. They usually use a lot of technologies such as c#,java, php and even perl, and sometimes, at the same time. It's really rare to find a company that marry a single technology. Even Google uses PHP (or it used) however, it's main core is c++ Top Websites?. Wordpress ;-)
In a nutshell. Let's say that you are a programmer, you earn $$$ by programming. So, evil companies such as Google, Microsoft, Apple, Oracle, and PHP decided the next thing -Evil companies: Tthe lifecycle of our stuff will be between 2-3 years, take it or dead with it. -Programmers: Oh noes! so I should keep me updated and over-work. -Evil companies: haha. However, and I will repeat myself, we (as a programmer) earn $$$ by programming. If the technology turns obsolete, then it will ensure us more work, and work is money. In the past, companies purchased a couple of programs per decade!. Now, they must keep updated and it means a renovation of the software and it means more money in our pockets. In sum, what is good?: technology renovation. What is bad?: companies that keep legacy-software (Java EE 1.3, I am watching you). 
But I don't get it, is it edge good or bad? or both? http://www.joshuawright.net/slack-wyrm-334.html 
*RFC* implies a formal process of which this is not a part.
"Self-documented code" is a wishful thinking. I explain. For example, let's say that we are doing a "select * from customer". The function could be called: - selectCustomers() - listCustomers() - fetchCustomers() - findCustomers() - getCustomers() also getAllCustomers() or getAll() - And so on. There are so many ways to write the name of a function and they are not synonyms. They share part of the behavior but they are not the same. In Rest is even more cryptic: - /customer/ - /customer/lists - /customer/data - /customer/search - /customer/messages - /customer/somejson.json All of them do the same. 
 package includes: \- 1500 MB of Disk Space, 100 GB Bandwidth \- Host your own domain (r/https://www.yourdomain.com) \- cPanel Powered Hosting (you will love it) \- Over 500 website templates ready to download \- Easy to use website builder \- Free POP3 Email Box with Webmail access \- FTP and Web based File Manager \- PHP, MySQL, Perl, CGI, Ruby. \- And many more.. 
There is even coding standard sniff for that: https://github.com/symplify/codingstandard#block-comment-should-only-contain-useful-information-about-types
&gt; Any future serialization mechanism should offer some some crypto by default IMO. Too many different responsibilities in one place. Better to make sure that it's easy to *chain* the two jobs and that all official documentation shows them being used together. 
There's 2 main reasons I see for the large apparent gap between 5.0 and 7.0: * PHP 6 - A significant amount of development time went into PHP 6 (According to [this LWN article](https://lwn.net/Articles/379909/) PHP 6 was first discussed around 2005 and considered to be potentially still in development in 2010). The vast majority of features from what was going to be 6 were instead rolled into the 5.3-5.5 branches. * Changes in the PHP development process - Around 2010 the PHP developers worked on [formalizing the release cycle](https://wiki.php.net/rfc/releaseprocess) and [voting on changes](https://wiki.php.net/rfc/voting). This has made PHP much more stable and predictable in terms of what can be expected from releases and avoiding "half baked ideas" being pushed in. Based on my reading of internals discussions, my current prediction is that we'll see 8.0 in around 4 years - give or take a year. There's no explicit "this is a big PHP 8 feature" RFCs yet, but there's been some discussions, plus there's the JIT branch that Zeev &amp; co are working on privately.
Bad bot
Thank you, joske79, for voting on tobozo. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
Are you sure about that? Because I am 99.99721% sure that tobozo is not a bot. --- ^(I am a neural network being trained to detect spammers | Summon me with !isbot &lt;username&gt; |) ^(/r/spambotdetector |) [^(Optout)](https://www.reddit.com/message/compose?to=whynotcollegeboard&amp;subject=!optout&amp;message=!optout) ^(|) [^(Original Github)](https://github.com/SM-Wistful/BotDetection-Algorithm)
It's a very interesting approach, reading target process VM and, via the knowledge of memory layout of involved Zend Engine data structures, deducing the call stack. &amp;#x200B; Nice work. &amp;#x200B; I wonder, though, if there are 'lack of synchronization' related issues ? For example a target process data structure might be in an inconsistent state while it is read or the call stack could change while it is unwound.
how would that deal with rolling across multiple servers?
so, when u access my website from http, everything is working, u can see a background video, when u click 'buy' there's blur behind it and u can acctually click "X" to close the dialog. &amp;#x200B; but on https, non of these functions are working; &amp;#x200B; [http://soundk.it/issafuego](http://soundk.it/issafuego) (working) [https://soundk.it/issafuego](https://soundk.it/issafuego) (not working)
so, when u access my website from http, everything is working, u can see a background video, when u click 'buy' there's blur behind it and u can acctually click "X" to close the dialog. &amp;#x200B; but on https, non of these functions are working; &amp;#x200B; [http://soundk.it/issafuego](http://soundk.it/issafuego) (working) [https://soundk.it/issafuego](https://soundk.it/issafuego) (not working)
Make sure the video source is https.
first of all your help request is not related to php at all, you this should be on another subreddit. anyways open your website on your browser and inspect your page, you will see a bunch of errors in the console like jquery should be loaded using https instead of http, start from there and you will solve your problems
This has nothing to do with PHP and is a question for /r/web_dev, but it's very common so I'll answer: Usually, errors on your web site can be easily diagnosed by opening your browser's developer tools. In your case, here's the first error message that you get in your Developer Tools console: `Blocked loading mixed active content “http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js”` The problem here is that you can't have a website where you load one resource from https, and another part from http. In your case, the https site doesn't work because you load the HTML content from https, but try to load the jQuery JavaScript from http. The browser correctly blocks that attempt, because mixing secure and insecure contents would render the entire site insecure, because now any could be injected in your site contents. Here's what to do: 1. Disable http for your site. It should only be accessible through https. 2. Don't load jQuery from `http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js` but from `//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'` (note the removed https, telling the browser to use whatever protocol it's currently using) 3. You have some other errors in your HTML markup. You might want to fix them for better compatibility. You can use the "view source" feature in browsers or any HTML validation in your IDE to find the errors. 
Mailchimp
Basically, if you’re loading the site over HTTPS, *all* content has to also come over HTTPS. CSS, JS, images, all external content has to also go over HTTPS. 
Beginning PHP is a book that will take you from the foundations of PHP and guide you along as you take your first steps into building a useable PHP application. It is an ideal starter guide if you are new to the PHP language and want to get started quickly with a practical project. Starting from the basics such as what are variables, if statements, connecting to a database right through to building a custom framework and web application. Beginning PHP is also a good starting point for anyone who has explored PHP or similar languages in the past and is looking for a refresher into the syntax of PHP. More details at [https://daveismyname.blog/beginning-php](https://daveismyname.blog/beginning-php) or check it out on amazon [Amazon](https://www.amazon.co.uk/gp/product/1789535905/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=daveismyname-21&amp;creative=6738&amp;linkCode=as2&amp;creativeASIN=1789535905&amp;linkId=be05c503f45aa2d7634838863f8c9ed4)
Thank you for pointing that out. I didn't realize FB was using Hack as a transpiled language. I have to think through why they'd do that; it seems convoluted to me. Why wouldn't they have just targeted LLVM IR with Hack, instead of transpiling first to C++ and then to object code?
It's not a security issue. Normally using phpdotenv to parse .env files and loading everything into environment variables is triggered on every page request, so that's a lot of overhead you should avoid on any production environment. Laravel however has a caching mechanism to prevent that, so you're actually fine using .env files in production if you're using Laravel.
Just try both for a bit and see what you like better. You are in a very bad location if you want an unbiased opinion, heh.
Wikipedia is entirley PHP
Both Laravel and Symphony are great frameworks and depends on your requirements/project/task. Generally, Laravel takes the best components in PHP and combines them together hence the Facades. The idea behind is, if a project inside laravel becomes abandoned the Facade acts like an API and can later be changed under the hood. Btw, Laravel does use Symphony for some components like request and others. I won't worry about all of those dependencies exist in both Symphony and Laravel is normal. If you look at some of the javascript(NPM, Yarn) stuff it can pull hundreds of different repositories. Eloquent is an Active Record Pattern, Symphony uses Doctrine ORM to interact with the DB, but you didn't like Eloquent you can install thru composer Doctrine inside Laravel. Both are great for prototyping or small sets of data but 95%+ of the time you end up using Eloquent/Doctrine query builders to build queries for performance, memory, CPU and implement caching(Redis/Memcache) to scale. Personally, Learning both is a great option because it gives more opportunity to learn new things and in programming you're always learning something new everyday. Whether one is easier/better is a personal decision of the developer/team/company. You seem to understand the under the hood process, which is the most important. &amp;#x200B;
interested to know what part of google uses php :)
PHPstorm would interprete it as Type: class Collection So when you use the method PHPstorm can tell you the function expects a Collection. Anything after the name of the variable is a comment, and phpstorm uses this.
Congrats 
What topics does it contain? Just the „basic“ stuff or also things beyond? I would probably buy it.
Same, is it available as an ebook?
post an amazon link at least.
Just placed my order via Amazon. Cheers. 
I am hoping there's a critical CVE on PHP 5.6 on January 1, 2019. Actually not really, since instead of paying the cost of upgrades, they'll just blame us when their PHP 5.x sites get hacked and go to a different company.
He did, and the comment was already removed. I bought an ebook copy from the Packt website, seems like a good book.
&gt; You should never refuse to work. You should either do what you are told or get another job. But if you are told to do something stupid, make sure you get it in writing along with your objections. Always CYA. If they won't do that, find another job. At least then you'll be able to use them as a reference, instead of being blamed for your bosses stupid decisions, fired and given a poor reference to future employers.
Good job !!! What is the payment on one of these things? Do you get on going royalties?
Can't wait to see where this goes! Everyone should watch Julia's talk about rbspy: https://www.recurse.com/events/localhost-julia-evans
Explain to me why explaining that to you is not a waste of time?
Mostly websites that are older, say mid 2000s. If any of those projects are still alive today they probably have grown to such volumes (LOC) they are stuck with PHP for the foreseeable future. AFAIK most dev shops in my area are no longer using PHP for new stuff, but still maintain some older projects they have not yet converted. PHP jobs seems to indicate this too, 95% of PHP jobs are WordPress, Joomla or Drupal. There is almost no jobs available in more interesting job positions, as they all tend to seek people who like to work with Python, Java/Scala/Clojure, JS/TS, Erlang/Elixir Ruby or in the Android/IOS stack, Kotlin/Java, ObjC/Swift or Dart (Flutter). There are also some places seeking C/C++ but those are more rare (in the web context).
PHP ternary logic is the holy grail of bad design. It works like no other language i have ever worked with. But hey, PHP7 made the "??" operator right associative, you know for consistency.
Symfony with a "f" please :D 
Amazon has it available for Kindle.
Not my claim, see [this comment](https://www.reddit.com/r/PHP/comments/9a52rm/php_56_end_of_support_is_seppuku/e4szngn/) Aslo I never expressed any idea about what the PHP Group should or shouldn't do (only questionned what choice should I make), and I'm not elitist enough to judge companies on the amount of legacy code they have compared to the average hipster startup. 
A CVE would a be a good reason to send a strong upgrade hint indeed. 
r/https://php-vote.com of course ! :D 
Active installations: 700,000+ and a five star rating ... ugh.
Good job!
&gt; It's seeming to me though, that Laravel could possibly just be Sym[f]ony with more components layered on top (to put it incredibly bluntly). That's really not the case; Laravel's using Symfony components where it makes sense to not re-invent the wheel, but the framework itself feels much different to the Symfony framework In the end it's not hard to try out a Symfony project and see which one works best for your way of writing code
Thanks Neebur
Congratulations on releasing. I have to ask: what are your goals for posting this here? There are so many obvious issues with it that are likely to be pointed out on this forum, that you have to know it is going to get put down. Was this just to learn? 
Actually there is a formal process. Please see [https://wiki.php.net/rfc/howto](https://wiki.php.net/rfc/howto) &gt;1. Email internals@lists.php.net to measure reaction to your intended proposal. State who would implement the feature, or whether the proposal is only a “concept”. Proceed with an RFC if feedback is not negative or if a detailed RFC will clarify the proposal. Mail list subscription is at [http://php.net/mailing-lists.php](http://php.net/mailing-lists.php). (Reminder: always ["bottom post"](http://php.net/reST/README.MAILINGLIST_RULES) your replies. Never “top post”.) &amp;#x200B;
In my experience laravel is much more opinionated (especially the docs). Both are good frameworks and I would argue laravel is a good choice for prototyping and/or short-term apps. Symfony is extremely configurable and comes with less features out of the box. Eloquent, as you say, has good intentions but often gets severely overused when your app grows. It is however very efficient for simple CRUD operations.
Yes. Symfony is a PHP framework, [Symphony](http://www.getsymphony.com/) is an XML-based CMS. Both written in PHP! 
Cheeky! `;-)` 
I found this proposal very hard to read. The misuse of terms like user land and soft and hard references makes it hard to understand for somebody that comes from a different background.
Do you cover composer and psr 4 autoloading?
&gt;Why wouldn't they have just targeted LLVM IR with Hack, instead of transpiling first to C++ and then to object code? That is a great question and not one I have the answer to. If I were to guess, it probably has to do with custom optimizations that they haven't figured out how to fit into the compiler process?
Fuck off man, if one has a different opinion it doesn't mean that it's hate. Quit your SJW bullshit.
Thank you. 
[removed]
Their needs being "we don't want to learn another language".
php is so vast....the question is always where to begin.
That's awesome bud, thank you for your contribution to the next generation
Broken linky? 
&gt; empathizing with the C5 guys who had working code that suddenly broke And I am saying that even if it only was soft reserved in 7 they still had *3 years* to fix the issue http://php.net/supported-versions.php. So saying that something suddenly broke is just plain wrong. No matter your perception of time.3 years is not sudden.
 1: I'm over at GoDaddy and when I redirect HTTP and WWW. to HTTPS, they don't redirect, and it says "Safari cannot open the page because too many redirects occurred"; I redirected it thru GoDaddy CPanel (not .htaccess, but it doesn't work thru there also), my website works when u type in r/[https://soundk.it/issafuego](https://soundk.it/issafuego) | but it's not working on r/[http://www.soundk.it/issafuego](http://www.soundk.it/issafuego) | I need to fix this somehow, thanks. ​ ​ 2 Prob: when I type in [soundk.it/issafuego](https://soundk.it/issafuego) it gets like this [soundk.it/issafuego/](https://soundk.it/issafuego/), How can I remove this slash at the end? I already succeded to remove it but than none of the images aren't working, Idk where 2 look for help anymore :/
I haven't used the core Hack language, only what they expose of it through their SDK to write extension code that runs on the FB platform. The SDK is a subset of the complete Hack language and syntax-compatible with PHP; I understand the core language is not compatible with the reference PHP interpreter (as was true for HipHop). My guess is that the Hack probably has a C++ foreign function interface to allow running native C++ functions from Hack code. It makes sense to me that a lot of their code base, like their graph traversal routines for OpenGraph, would be more efficiently implemented in something other than a PHP-derived interpreter which has very definite opinions on memory layouts for data structures. FB is using Python for their machine learning functionality, especially in ad targeting. All of the productive work in ML right now seems centered around Python and NVidia (Tensorflow, Keras, NLTK).
&gt; My guess is that Hack probably has a C++ foreign function interface to allow running native C++ modules from Hack code. I'm fairly certain that's true and is one of Hack's main selling points. &gt;I can't think of any reasons why they wouldn't compile Hack to an object code and rely on their toolchain for linking, it still seems error prone to me. Maybe it's some constraint imposed by the Hack interpreter, or transpiling is just simpler than coding a proper compiler front-end. I'm fairly certain other people using hack have been compiling it to bytecode just fine, I'm assuming FB has some part of their process that requires changing something done in C++ *by hack* but is simpler to deal with than trying to port their entire codebase directly to C++. &gt;FB is using Python for their machine learning functionality, especially in ad targeting. All of the productive work in ML right now seems centered around Python and NVidia GPUs (Tensorflow, Keras, NLTK). Ah, that makes sense. I only know of their stack for the main website and chat operations, but I've been tasked with ML work before and 90% of it has been Tensorflow in Python.
Just added to my queue. Looking forward to the read.
I'm interested in your experiences with query builders. Can you tell me more please? Is latitude best one? Why is pg-builder not recommended to use in production? Etc
Can we get a peek into the htaccess? Basically, what the browsers are telling you is that they are stuck on a loop. Your server keeps redirecting them. That's a sign that the redirect configuration is doing something wrong. As for the /, is that a folder on the server? Or a rewrite? Either way, when the images don't appear when you force remove the/ is because the browser is looking for the images in an unexpected place. Most likely, the images are inside the folder, and removing the slash makes the browser look in the higher level. One alternative would be to fix the locations of the images. 
.htaccess is empty, all redirection was happening from official Redirect inside cpanel (included wild card) and I only redirected http://www. (with or without www) to - https:// 
Whoops :p Corrected !
Please use /r/phphelp. This is not a support forum
Please use /r/phphelp. This is not a support forum
I mean, ajax?!? Why not using websockets?
it was a joke ! come on
Thanks for giving such a feedback. I'm glad that you have liked it.
Oh boy, this is wrong on so many levels...
Was thinking to create it using websockets. You are right, AJAX will be a problem if number of online users and message senders got very high. Will create next project using websocket. Thanks for your valuable feedback
Can you please explain so that we can provide better services?
Wow that's a great step to help the beginners an I guess you have also learned a lot of things to publish this book, wish you a very bright future ahead.
I know that Larevel is also developed using Symfony framework. So I think Laravel contains all the features of Symfony + the extra features and functionality. So Laravel has more features and functionality than Symfony.
Thank you! 
Writes arbitrary content to a file.. nice 
I figured if I went to /r/laravel I would get one set of opinions all in favor of option X, so I thought I would try the generic PHP sub for another set.
Thank you so much. Actually, this PHP script is created by my brother.
This is why our community gets a bad name. I'm sorry if the author is wholly inexperienced, but spreading this "code" is a really bad idea, for all intents and purposes.
Thanks for regurgitating the API documentation of a random location service. The world is a much better place now. Seriously, though. The blog posts you keep sharing in this subreddit don't seem to show off something new, teach the reader anything beyond basic documentation repeats, nor open up any discussion. What is driving you to write and share these blog posts? In their current form, I don't believe they add anything for the readers. Something more specific to the post linked in here: please look into other sources of IP addresses. That single server variable is hardly the only possible value and it may give you unexpected results when people use proxies.
Thank you for your suggestion. And I will share new things for Reddit users keeping your suggestion in my mind. 
I was really suggesting to not keep doing that. I understand using a personal blog to keep track of what is learned can be helpful and by all means let people find your blog and have it be useful to them, but please understand you are not writing significantly interesting reading material for this community. I don't want to discourage you from writing articles, but don't write a snippet of code, call it an article and post one every day on Reddit and expect there to be interest.
So what types of post should I write and share? Should I develop PHP scrip and then share ?
I strongly, strongly suggest you or whoever the author of this code actually is take some time to learn about proper web application security. Here is a good resource to start with: https://www.phptherightway.com/#web_application_security - I suggest paying extra special attention to the section under "Data Filtering".
Its just an option. I personally like things all in one file because it is (in my opinion), simpler and faster. I create lots of custom personal PHP backend stuff, and I like it all in one file because I am too lazy to setup composer for each project. Its much easier in my opinion to just copy and paste something. Especially if the project is very small and I don't want to waste the time to use composer. But, if you want, SuperSQL is available on composer as well, so that is another option. 
I solved problem no1, now I only need to remove / at the end of the url so it's not /something/ (it's directory), I need it to be /something
Facebook would be one
i just told on you. 
you copy the claim as a part of your argument, which makes it your claim too. &amp;#x200B; when you make a post complaining about the absence of support for older versions, then you are implying that people should provide one, your passive aggressive "should i refuse to do the work" is a device to underline the complaint, hardly an actual question. there is nothing elitist about saying a company which is behind several versions and waits till after EOL is piling up legacy, no matter if ancient megacorp or hipster startup.
&lt;html&gt; &lt;div class = border&gt; &lt;head&gt; &lt;title&gt;Insert Kidz&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="keywords" content ="kiwi, new zealand, ormiston, sports"/&gt; &lt;meta name="description" content="Kiwi Kidz Club"/&gt; &lt;meta name="revised" content="16/08/2018"/&gt; &lt;link rel="stylesheet" href="style.css" type="text/css" media="screen"/&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;h1&gt; Kiwi Kids Athlete Club &lt;/h1&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt; &lt;a href="Index.php"&gt; Home Page&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="Insert.php"&gt; Insert Page&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="Display.php"&gt; Display page&lt;/a&gt; &lt;li&gt; &lt;a href="About.php"&gt; About Us Page&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;form enctype="multipart/form-data" action="display.php" method="post"&gt; &lt;input type="submit" value="return" /&gt; &lt;/form&gt; &lt;?php include "connection.php"; echo "&lt;form enctype='multipart/form-data' action='display.php' method='post'&gt;"; echo "&lt;select name = 'First\_Name'/&gt;"; echo "&lt;input type=text/&gt;" $sql="SELECT DISTINCT First\_Name FROM $tablename"; $result = mysqli\_query($conn,$sql); &lt;?php } } else{ echo mysqli\_errno($conn) . ":" . mysqli\_error($conn)."\\n"; } echo "&lt;/select&gt;"; ?&gt; &lt;input type='submit' id='cbtn' name="cbtn" value="display kidz" /&gt; &lt;?php if (ISSET($\_POST\['cbtn'\])) { $First\_Name = $\_POST\['First\_Name'\]; $sql="SELECT \* FROM general WHERE First\_Name ='$'"; $result = mysqli\_query($conn,$sql); echo "&lt;table border =1&gt;"; echo "&lt;tr&gt;"; echo "&lt;th&gt; Kid'z ID &lt;/th&gt;"; echo "&lt;th&gt; Kid'z First Name &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Last Name &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Parents &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Address &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Suburb &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Phone &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Birthday &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Grade &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Fees In Total &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Fees Have Been Paid &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Fees Amount Paid &lt;/th&gt;"; echo "&lt;th&gt; Kid'z Fees Date Paid &lt;/th&gt;"; echo "&lt;/tr&gt;"; } if ($result) { while ($row = mysqli\_fetch\_assoc($result)){ echo "&lt;tr&gt;"; echo "&lt;th&gt;".$row{'ID'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'First\_Name'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Last\_Name'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Parents'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Address'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Suburb'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Phone'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Birthday'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Grade'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Fees'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Has\_Paid'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Amount\_Paid'}."&lt;/th&gt;"; echo "&lt;th&gt;".$row{'Date\_Paid'}."&lt;/th&gt;"; &amp;#x200B; } } else{ echo mysqli\_errno($conn) . ":" . mysqli\_error($conn)."\\n"; } ?&gt; &amp;#x200B; &lt;footer&gt; &lt;p&gt; Copy right reserved by Ormiston Senior College &lt;/p&gt; &lt;a href="mailto:######@###.###?Subject= Information Required"&gt;Contact Us&lt;/a&gt; &lt;img src="Ormiston\_Logo.png" alt="Kiwi Kidz"/&gt; &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt;
[DOMDocument](http://php.net/manual/en/class.domdocument.php) has always been enough for me.
We've used DiDOM at work for a recent project and it worked really well.
[Goutte](https://github.com/FriendsOfPHP/Goutte) 
If you are against pulling in a lot of unused dependencies (I agree with you on that part) then Symfony Flex would be a better choice. I just checked Laravel dependencies and I don't understand why things like these should be a part of the framework: * dragonmantank/cron-expression * erusev/parsedown * ramsey/uuid * symfony/debug * symfony/var-dumper * tijsverkoyen/css-to-inline-styles 
Not sure why you'd use this over Maxminds' free data sets. Probably based on their DB, in actuality.
You're just storing chat messages to a text file?!
https://github.com/GoogleChrome/puppeteer I've used this and found it to be pretty useful!
The two authors will typically split an advance, which could be as low as $1000 ($500 per author) or as high as $5000 ($2500 per author). After that advance is covered by sales the authors will usually split a 10% royalty on sales less returns, paid out quarterly. 
Not a PHP solution but I've gotten incredibly far lately using Chrome Dev Tools console and some JavaScript. The browser has already one the hard work of turning whatever garbage was served into a useful dome, with the benefit of the DOM I'm scraping being totally JavaScript-aware as well.
Hi mate, /r/phphelp should be able to help you with this.
I stick with Goutte all the time. uses BrowserKit\\Client to make the request, and then returns a DomCrawler\\Crawler to move around pages. I been using it on some price checking projects and works fine :)
Yeah, but you can't really automate that. What if you're tasked with scraping a site with 10,000 pages?
Bit of a sidetrack, but &amp;#x200B; &gt;then learned the basics of model-view-controller thanks to Opencart, &amp;#x200B; OpenCart is not a good reflection of an MVC codebase - it's the opposite if anything. Please, for the sake of yourself and others, disregard anything you learned from OC. &amp;#x200B;
Headless browsers in nodejs? PhantomJS?
Not sure why I'd get a down-vote just for throwing an idea out there, except that it's not PHP. Sure it's not a general solution but in certain instances it's very powerful. No, within the browser I can't spider additional URLs. But I can do things that are dependent real-time DOM manipulation by JavaScript. I don't see how you'd ever get that in pure PHP land. For example I recently created a Twitter bot that's about 15 lines of JavaScript. You go to a particular individual's twitter profile. You fire up the console and run the JavaScript. It starts following that individuals followers at a random enough rate to get around Twitter's protections against this kind of stunt. Those clicks are very dependent on what Twitter is doing via JavaScript to update the DOM as it goes so doing it in-browser was the right way to go. Basically Twitter only loads so many followers at a time. So it follows some, then initiates a scroll, which loads more, and on and on and on. 
Hello? I didn't come here saying "Opencart's the greatest!" did I? All I said is that's where I saw MVC implemented in a way I understood. Everyone has to start somewhere, right? And regardless, I'm a LOT happier I looked there than, say Wordpress. Now... If only I could find a framework based on Opencart... /s
Yes, because what matters are the concepts. When you know your concepts, and another framework du jour arrives, you'll look at it and say "Ah, got it - Active Record Pattern. Here we go again."
No, according to him if two massive technologies use a mailing list as their means of communication, you probably want to pause a reflect on *why* before you go slagging off that means of communication just because "it is old"
Without getting into details, likely the last bit you’ll need is a bind mounted volume, which will let the container serve your local source checkout 
I still use and love simple html dom
Wow. Get off your high horse. You're the one jumping all over the place here. All I ever said was that's where I learned what MVC was. Like, what a controllers role is, versus what a models role is. Nowhere did i say I carried that forward or apply it to anything I do now. You just had to hop into this thread to bash Opencart just to be on a high horse when it had literally nothing to do with the question. At all. Thanks for spelling out your experience with Laravel and Symfony, though, much appreciated.
1. Docker pull php7.2-fpm 2. Docker pull mysql (Follow the docs on volumes to make data persist in the mysql container, I created a separate container called mysql_data for this.) 3. Run the mysql container Include -p 3306:3306 in your run command so you can access the db server from your host. Name it db. docker run -d --name db --volumes-from mysql_data -e APP=db -e MYSQL_ROOT_PASSWORD=YourPassword -p 3306:3306 mysql:latest 4. Run the php container Mount your local drive with the -v option. Name it app. docker run -d --name app -e APP=app --link redis:redis --link db:db --link pgdb:pgdb -v ~/Documents/Projects:/Projects php72-fpm:latest 5. Docker pull nginx 6. Create a Docker file and your nginx configs locally, copy them into the container inside your Dockerfile. Build the web container. cd /folder/where/that/Dockerfile/is docker build -t web:latest . 7. Run the web container docker run -d --name web -e APP=web --link app:app --link db:db --volumes-from app -p 80:80 -p 443:443 web:latest 
Obligitory https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
Fairly new to development, whats an HTML DOM parser? Thanks for any replies
Thank you
I once built a scraper / parser project that did more than 4 million page scrapes on a single run. Pretty astounding it didn't have a memory leak seeing as it was 2011-ish and headless browsers weren't really a thing yet.
This book is free and walks you through everything in detail: https://www.shiphp.com/books PS: I did write it, but I believe it answers your question.
Funny answer. But it's even funnier that the author is wrong and obviously inexperienced in working on anything that isn't official and corporate, or else he would know that DOM parsing is very limited when the html is frequently broken and people tend to write code in unlimited nested, unlabeled divs, spans, etc. I have a lot of experience scraping, and many, many times I have found the the simplest and least error-prone solution is to use Regex. If I'm trying to get a price, why fuss with 75 layers of tags, trying to find the right path when a simple regex to find "Price &lt;bold&gt;$" does it better and faster with lower overhead and memory.
Second this. 
It takes a bit more effort to setup, but we are using selenium and this php wrapper https://github.com/facebook/php-webdriver to crawl and extract content from sites.
How do you pronounce that?
Get a LEMP docker stack from https://phpdocker.io/generator Put it in your root directory and read the readme file.
Goot, it rhymes with boot and not out :)!
Cool, thanks 😁
yup because its simple and faster. Gotta use database in the next version
The Symfony DOM Crawler.
Cheerio (I believe it is spelled like that, its an npm package) has my preference. It's basically server side jQuery, same api. 
Please don't mix your interpretation of the situation with reality, also when you perform an analysis, use empathy rather than judgmental values to get to your conclusions.
Here's a little demo/skeleton you might find useful. For simplicity, it focuses just on command-line stuff rather than a full webserver set-up. https://github.com/DHager/docker-php-library-demo
Can some explain how the example of the db query showing tasks in alphabetical order is easier in laravel than vanilla html/php? I counted 20 lines jargon of what is essentially a select query with the results then echoed out? Not trying to be mean? I am assuming Laravel is for massive projects, where it allows you to streamline certain operations? 
I’ve always wondered the same thing, I haven’t really ever seen Laravel particularly well leveraged on any of the implementations I’ve seen, and it’s pretty heavy weight to bring into a project, unless you’re actually using it for something.
Okay mate, whatever you say. I was just trying to ward you off making some of the mistakes I made earlier in my career
Massive projects usually means dozens to over a hundred developers so abstractions help keep things moving well. If the db archetects moved to aurora on AWS and changed the table names then they just need to get the team in charge of the database abstraction layer the changes but the code you write stays the same. Also on small to mid sized projects it should help with creating reusable code where joins or fields that should be always omitted are inferred. The uniformity also allows new members to the team to ramp up faster and read the existing code easier. 
Can you please further elaborate the question? If I understand correctly you want an example of DB query in alph. order? `App\Task::all()-&gt;orderBy('name','desc')-&gt;get();` Eloquent or even `DB::table('tasks')-&gt;orderBy('name',desc')-&gt;get();` Query Builder is the same as `SELECT * from 'tasks' ORDER BY 'name' DESC;` Very similiar but what you get with Laravel is : * Automatic SQL Injection prevention * You don't have to write `$conn-&gt;query($sql);` and `$result-&gt;fetch_assoc()` and similiar * Ability to effortlessly chain functions i.e. `-&gt;where()-&gt;orWhere()-&gt;first();` * Much more out-of-the-box functions such as `-&gt;first(), -&gt;pluck(), -&gt;exists(), ...` * Some specific functions are much easier i.e. `-&gt;join('contacts', 'users.id', '=', 'contacts.user_id')` * \[ELOQUENT\] Get back an array of objects (in this particular case and array of Task objects). Then you can call functions found in that Model * Implement relations [https://laravel.com/docs/5.6/eloquent-relationships](https://laravel.com/docs/5.6/eloquent-relationships) I'm not sure if I got the question right and there is much more to Laravel database part that you can find in Laravel docs but I just outlined some of the changes. &amp;#x200B;
Go with Symfony. It is hard to write down all the reasons why, but a few: 1. Laravel allows you to access everything from everywhere. That's why beginners love it, you can easily make something work. But after some time, you will really have trouble with that approach if application becomes more complicated; the code will inevitably start to stink. 2. Personal example: I used Doctrine 1 which allowed me to access repositories from entities. I did abuse that (well... because I could :) ); took me lots of time to fix issues I made. And that's just for ORM; Laravel is **all** about that approach. 3. Laravel forms are joke compared to Symfony; check this one example: [http://symfony.com/doc/current/form/data\_transformers.html](http://symfony.com/doc/current/form/data_transformers.html) You can easily make compound forms (i.e. made out of multiple HTML fields but still having one PHP value) with ease. Very very useful, ask for real-life examples. 4. Speed; while it cannot be argument against something, the difference is just too big. Laravel docs (pretty much static site) loads in about 800-1200ms. My hobby project, 100% dynamic, loads in about 150ms or less: [http://dev.srbijanocu.com/en/](http://dev.srbijanocu.com/en/) 5. Datamapper is far superior than Active record. I worked with AR first (doctrine 1) and was reluctant to switch to DM pattern (doctrine 2). But after few days of learning the difference, I would never work with AR again. Because it doesn't allow you to do stupid things (like I did), you are forced to make different approach; you will be surprised to see how much better code it becomes. I really could go on; if interested, ask and I will explain the architecture. Most Symfony users knows just the basics; routing, entities, services... That's why they think other FW's can compare to Symfony. But once you figure the architecture of Symfony like tagged services, service containers, service locators, security voters, custom annotations, form-guessers... you can easily understand why people from JAVA come to PHP.
Recently used this to do some light parsing and manipulation, worked really well for me. https://github.com/ressio/pharse
django has more powerful admin for free 
I use DomDocument directly. And XPath queries. Goutte uses Symfony's DomCrawler which uses DomDocument. So does QueryPath. Abstractions can be helpful but I never found it difficult to get the job done without a library.
tampermonkey / greasemonkey UserScript + some code on your local webserver tracking the progress
I'm honestly not persuaded of the need of this. It's a good idea (as Nikita suggested) to fix up some bullshit unserialize() does (like PHP_Incomplete_Class), but why introduce yet another serialization mechanism? In the end you're anyway only supposed to unserialize your trusted structures directly. Otherwise you should validate it manually first. At which point you don't need a more secure direct unserialization. Anyway, such a "secure" unserialization could be implemented via reflection in userland. Possibly not the fastest, but then you can couple that with an extensive validation logic ensuring data integrity, solving also your issue with destructors operating on unexpected and dangerous data. As - as it turns out - a lot of the destructor code is still potentially dangerous _after_ the unserialization, when the unserialized value gets normally destructed. It's not always only due to throwing.
Isn't it bad practice to have SQL in the controller? 
I love the "free" part. Not free as in beer, or even speech. Free as in your free to that pile of dog poop on the side of the road. 
It's probably not a good idea to have a non-trivial amount of SQL code in the controller, but it seems fine to do that in a tiny blog post about something unrelated. 
No I'm saying how is the laravel method easier than just doing a quick sql query in php and outputting to screen? 
The RFC can be split in 3 parts actually (maybe it should?): \- the supersceding of Serializable by \_\_serialize()+\_\_unserialize($data). Serializable is really broken: the two describes issues are major ones IMHO, because they break the semantics of serialization (breaking references cannot be OKish) \- the specific behavior of destructors (i.e. disabling them/emptying properties on errors) - this can be implemented separately. It could provide an effective security mitigation by closing the door to a range of security issues IMHO. \- the $nested\_objects argument + validation\_callback option. This is aimed at replacing the validation that Serializable allows in userland thanks to allowed\_classes (e.g. calling unserialize with allowed\_classes=false). This is required if we want a real alternative to Serializable (which we do want, see first item.) The most obvious item that should be fixed in PHP core IMHO is the first one. The last two would also be important to improve the security implication of using unserialize() (or at least not make it worse).
For your specific example you’re probably right - it is just as easy, but then a simple SELECT and ORDER BY is one of the most basic things you can do. The main benefits are around everything else eloquent gives you. For example each Task returned will be an object. If I setup relationships on my Task model I can directly query these... anywhere in my project. For example to get the user assigned to a task I might write. $task-&gt;assigned-&gt;name. You could write a SQL query for each of these pulling out the required data where ever it is needed, but that gets messy and hard to maintain / test. It’s a different way of thinking but once you embrace it you won’t want to go back.
No, nobody is "curious" about *that*. Go away forever.
Yeah, I tend not to litter SQL around either. It makes for messy codebases. I can totally understand why one might not want to belabour that every tutorial though.
You have been given a code to get the data from the database, App\Task::all()-&gt;orderBy('name','desc')-&gt;get(); Before continuing with your silly claims, it would be at least *polite* to provide a code that you think is better to let enyone see whether your claims are true at all. 
The entire framework is bad practice.
&gt; For example each Task returned will be an object. Not arguing ORM here, but Eloquent is a pile of shit &gt;$task-&gt;assigned-&gt;name You couldn't write that unless you inspect the table because all the properties are invisible. And even if you do write that you can still get this: $user-&gt;name = "laravel"; echo $user-&gt;name; // "laravel sucks because magic" They weren't happy with standard __get magic, they had to inject another entire layer of magic on top of that. Like, use a debugger, the property does not exist, till you find it in the attributes then it does exist but it doesn't matter because there's another magic getter waiting to jump out and stab you.
I would rather use the Cloudflare IP Geolocation, because it's much faster and it's dead simple to implement. 
Seems like a bad time to be in the Laravel admin panel business...Congratulations on releasing!
Nice work..and nice promotion effort
Because in the real world you barely ever just select and print to the screen.. also it makes it very difficult to have different classes build a query if you try lump it.
I have a csv file which contains some data, I need to submit this data to a website in a form. I need to do this for 1000s of entries. Is there a way in PHP to automatically submit this data?
You can try with curl.
Are there any tutorials of this? I am not familiar with it
There‘s plenty of tutorials, do you know if the submit form uses POST or GET?
Writing an OAuth component is not an easy task. The PHP League component is reliable, I used it on some projects, but it's an API, the hardest thing on your side is the controllers implementation. For this, you have to understand fully the OpenID connect specification, that's where I started from the very first time, and where I read documentation every time I need to do maintenance on OAuth related code: the spec! Please read carefully https://openid.net/connect/ and https://openid.net/specs/openid-connect-core-1_0.html
Although most sites use csrf which will make that impossible
Isn't it like shooting in dark? What if there are some unknown fields getting inserted in database which aren't shown in form?
This is not a support forum. Please consider using /r/PHPhelp for **PHP** related questions.
Are you submitting the data inside the CSV or submitting the CSV as a "file" that is usually uploaded in the form?
Use guzzle, it’s easy and straightforward to post data to urls. 
Reading from csv and submitting it into form
You don't need CURL for POST either.
Oh right. Yeah I guess that makes sense.
Is it safe to assume that the column headers in the first row of the CSV related to fields in the form? When you submit data you would be saying like \`name =&gt; column\[0\]\` where column 0 is always going to be the name. If you know a specific column is always going to be X (name, age, address, whatever) and you know there is always going to be this field in the form, then there isn't any shooting in the dark or unknown fields. :)
Sounds like a job for JavaScript
One more question... Suppose I want to submit some comments on a post, so how would it know on which post it's commenting?
Basically I need a automaton tool. Do you know any?
It should have a `post_id` field or such to link them.
I will try this and will let you know if it works :)
You don't need an automation tool. You just need like 25 lines of code.
In fact he doesn't even need to code, Postman Runner can do the job. An assuming he has not really experience at all, GUIs are a better choice for beginners and small tasks, unless he wants really to learn to code in PHP.
I have used the PHP league oauth2 library extensively, it is a really good one BUT the documentation is really scarce. I came across this library in a project that was already implemented so I did not have much problems - but the documentation is definitely for someone who really understands the oauth flow as the library only provides you with the abstractions and not the implementations. When implemented I came to realize that that was actually a good thing and it was really easy to extend it. &amp;#x200B; For any questions about how to implement it you can totally DM me or maybe I can put together a simple article to go through the major things that you need to implement. Once you get the gist of it it is really simple to implement oauth grants.
https://i.imgur.com/DK1ckG8.png
Wouldn't uploading it directly to the database be faster?
Yes, it's doable even if the form has CRSF, probably captcha can block this. However, this sounds fishy, as in illegal. If you were asked to do this and you do not have permission from the site owners to do this, you should refuse to do it. This action may have legal consequences not just for the people who put you to it, but for you yourself. If you still decide to do it, at least use a proxy (/TOR).
/u/taylorcodes is the creator of Laravel, that's why he said that.. ;-)
Sounds either: a) dodgy b) you are over-complicating the situation The former because if you were being asked to process data from a CSV into a system, you would be given the access/tools to directly parse the CSV...not gaming a form into automated submissions. It sounds like a breach of ToS. The latter because, like above, if you are wanting to process CSV data, pushing it through a form seems convoluted.
I maintain the package and am aware that the documentation requires an update. If you have any questions about the package and how to implement it, I would be happy to assist. The examples in the library might help too. They are focused on the Slim framework but should help getting you going. I am assuming you are talking about the server rather than the client here by the way. If not, please ignore :D
(Also directed at OP, /u/k1ll3rM) OpenID Connect != OAuth 2 OpenID Connect is a protocol for authenticating end users on a website in order to outsource the need to store personal data belonging to the user to the OpenID Connect Service Provider. It uses OAuth 2 internally but the _OAuth 2 client_ == _OpenID Connect Relying Party_ and the OAuth 2 Server_ == _OpenID Connect Service Provider_. But someone offering for example a single page app with an API may also make the API server the _OAuth 2 server_ and the end user the _OAuth 2 client_ thereby implementing OAuth 2 itself, not OpenID Connect.
Agreed. It has been proposed that we create a _quick start_ guide in the past so this is something I'd definitely be in support of. I likely won't be able to create this in the next week or so but will look into it. In the meantime, if you have specific questions please feel free to DM me.
if your needs are relatively basic, you should consider using something like oauth2_proxy instead of implementing your own solution. 
Can we create a photo editor web app in php?
Although that seems very useful and I will probably use it in the future, what I require now seems impossible with that. Thank you for the suggestion though
It's exactly my problem with most frameworks. They are bloated with lots of dependencies. Most libraries are added for a single function, sheesh.
&gt; Why did OP's scanner rate it so poorly??? Because it has a lot of security problems. &gt; Here is the scanner: http://rips-scanner.sourceforge.net/#features Just for clarification, this is **not** the scanner that we use for CodeRisk. The open source version is RIPS 0.x, and it was scanned with RIPS 2.x, a complete rewrite.
A little of the former, a lot of the latter. DI Design is one thing, and then DI Frameworks build on top of that and provide any sort of automation and other helpers to make it happen. You could write an entire codebase using just Design (almost all code should be, along with Law of Demeter), but then you'd still need to create your own instance/definition factories, and that's step one toward a DI Framework.
Fast than what?
I like how Laravel can result in very clean controllers. For writing maintainable code it's great and developing small aps using it is a joy. It uses a lot less bad practices than it used to but Laravel projects get so damn slow so quick. I have not had much success building anything more complicated than a simple webshop that wasn't slow as hell or a complete resource hog. Half of the best bits are just wrappers for existing Symfony stuff. My advice is to check out Laravel to learn about MVC programming is you don't know already, then switch to Symfony.
If you're at all familiar with Laravel, check out their package Passport which is essentially an implementation integrated with Laravel which uses league's library. I needed to implement OpenID Connect, and that was a good place to start for the OAuth2 parts.
I am not using Laravel sadly, that would've been much easier.
Yeah I guess I just assumed that since he's posting in /r/PHP he knows some amount of programming.
Bummer. Point still stands though, read through the Passport source code to see their implementation. Should help quite a bit.
Ah, the great architectural geniuses of /r/php strike again. Unqualified blanket statements like this are the hallmark of a junior developer who likes to declare everything is terrible without a sense of irony or perspective. Yes, there are some parts of Laravel that can be abused to do some pretty awkward things. But show me a framework that isn't used to do the same. I've seen some utter monstrosities in just about every popular PHP framework while auditing or consulting and I've worked with some extremely well put together Laravel applications that have been able to expand far beyond their original specification without significant growing pains because the team developing it had experience with the framework and knew how to architect software regardless of the underlying platform. The crimes I've seen committed with Symfony and Doctrine would make a sailor blush.
For simple CRUD applications, it's often more appropriate to place the query logic in the model with clearly named functions that can be called from the controller, for anything more complex using some kind of repository or query object as an intermediary to return plain PHP objects is often the better route. But this is obviously a contrived example for a blog post, and while it would be better if the author made this clear and perhaps linked to other resources on how to structure applications, sticking such a small query in the controller for demonstration purposes shouldn't be a capital crime.
If nothing else comes up I will probably have to something like that.
Yes, templates use the data they get to determine what to display, but they dictate what data they need. A template that check for a boolean value to decide on what to display for true/false values dictates that it gets this boolean value to be able to perform it's work. Having view models separates your domain models (that are used to actually make changes to your domain) from the view models that are built only for presentation purposes and can combine data from multiple domain models. Templates need some kind of input. Using a View model allows you to have a single place where you define the default values, add some helper method to make thew templates easier to read and remove all that "view only" related stuff out of the controller. As far as I can tell, your issue is with having the view model specify who is going to populate it, and I kinda agree on that part, but I see it as a RAD way of doing things. You can use view models without presenters and just populate them from your controller and pass them to your template. 
Ah. I would have known that, I just don't tend to read usernames!
Think `git`. Git stores all the changes that happen over time. If your replay these all, you get to the latest _state_ of your application. That's basically EventSourcing.
We use it quite happily in a rather large project
Le super smart """""REDDIOR""""" has arrived :\^)
Any security experts here ? As an average PHP/JS dev this looks a bit experimental. Is this kind of thing the future, or a fad ?
True, but since people are just people, they can and will make mistakes. And the lucky poeple that have automated tests will know when they did break something.
Did you ever bought fruit? What do you do before you buy it? You tests it, by looking at it, or even squeeze it a bit to feel if it is ok. What if you just bought it, and brought it home. The cange is, you will end up being disappointed. Well, Unittesting is like that "looking and Sueezing" so you get not disappointed. An owl was a wise animal, the others said, until they found out he was against unittesting... ;-) 
https://i.imgur.com/DK1ckG8.png https://www.google.com/search?q=site%3Areddit.com+inurl%3A%2Fr%2Fphp%2F+learn+php
W3Schools is, or historically has been, plagued with outdated and wrong information. It's strongly recommended that people do not use it. Does it matter if you learn PHP 5 instead of 7? For the most part the core of the language is the same. Newer versions have increased performance, security measures, and feature sets. If you are just starting out it shouldn't be too much of an issue to learn 5, essentially all of the knowledge learned will be transferable. Best places to learn PHP7? I'm partial to Laracasts as a go to. I'm not sure how much of the stuff there is free though. A quick Google sheet there's a free 7 lessons for PHP7. There are places like codecademy that may prove useful as well.
Sounds like a different kind of password. 
Yes, different things, sorry I mixed both because I might be under the wrong assertion that the original question author was using it for Authorization Code flow and identity provider usage. That's one of the most common use case. That's why I always advise people to read *carefuly* the various RFCs and documentation.
Oh, I'm pro-test here. I was responding to the above comment. Specifically the "I know they changed, they were refactored" part. Your tests are your confidence when refactoring. Refactors shouldn't break tests. Of course that last line is more of an ideal that's hard to achieve. People are people and will couple their tests to their implementation, or sneak in untested features that break silently when refactored. The skill of not writing brittle tests comes with experience, and in my experience, rewriting and deleting brittle tests has taught me a lot, so I'm glad I wrote them in the first place.
Thanks!
Thank you for the reply, I’ll definitely check it out!
I will recommend this website: https://www.phptherightway.com/ . It’s not only language itself, but also covers the best practices with PHP. 
It depends on the crowd. In my case I have developed it for our organisation as a LAN chat system and in this case accessing file is faster than accessing sql Database. Obviously it will be not a good choice to use AJAX when you have heavy traffic on your server
&gt; I'm not sold on Eloquent Eloquent is the ORM layer provided by default with Laravel. Symfony comes with Doctrine. So this would be more of a Eloquent vs Doctrine comparison. Try both and use whatever works for you. They both get the job doen.
You'd do better in /r/PHPHelp and by asking specific questions, with examples of code you've written.
Thank you, didn’t know about that thread
It uses a popular (more or less) Browser extension called "MetaMask" which is a a crypto currency wallet software for ethereum. As ethereum uses private and public keys like the most crypto currencies, you can sign and verify messages with that keys. As far as I can see, the backend gives a message to the user, the user signs the key with that browser extension wallet and the backend then gets a signed message. From now on, the backend can always verify the users identity with the obtained public key. You do not need to know much abouth ethereum or crypto currencies at all. I would call it second authentication method modified to a single authentication. Like you would use just your Yubikey to login. 
Not a security expert here, but: &amp;#x200B; When an user own a meta mask wallet (most of the time this is how crypto wallets works), they also have a private/public key par. (Were the public key, is the wallet address). So, the server send you a message and you sign it with your private key (you're the only who should have it), then you return the signed message, and the public key (your address). your address is your user, and the signed message is kind of a "temporal password" (who was set by the server when he chossen the message to be sent) then, the "crypto magic", (not 100% sure here) is just a function who can get the public address from the signed message + the origin message, something like: \`publicAddress = getAddress(signedMessage, message)\` This is kind of the same as SSH key's works. So, they're just using Meta Mask who provides private/public keys and emulating some kind of SSH protocol. As long as you have SSL in your site to avoid a man in the middle, you should be safe. SSH keys has been everywhere for years, sysadmins use them to log into servers (password-less), internet certificates use them, people use them to sign documents, and to verify identities, so, the only experimental part is the protocol You can verify mi message here: [https://github.com/dziungles/php-metamask-user-login/blob/master/server/ajax.php#L66](https://github.com/dziungles/php-metamask-user-login/blob/master/server/ajax.php#L66) (is using the message and signature to get the address and then looking if those match the address user has sent to us) &amp;#x200B;
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [dziungles/php-metamask-user-login/.../**ajax.php#L66** (master → 07d2469)](https://github.com/dziungles/php-metamask-user-login/blob/07d24691db937de9eb12dd146c4e82f66b6ccddb/server/ajax.php#L66) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e4x0f41.)
This just work similar to as SSH key's do. Nothing new. As long as the protocol they use (SSH protocol has a lot more stuff's inside, I just know the basic of how it works) is secure, then it should be more secure as passwords. Nobody can steal your account looking at you while you're typing your password, also, your password is not store in a database, so, you're safe to database leakage. This method as nothing to do with etherium.
Best of luck, fam.
To be fair at that time I hadn't dug into the library yet, so when you advertised the library as a quick-start and opinionated library (on the site and on the github) I made an assumption that this is going to be magical. That, along with the YAML configuration for creating Events/Commands on the fly, made me think - "I'll bookmark this and come back later" only for the reasons stated above. I am working with it now to see how it feels to work with. I did find the documentation a bit light on the Event/Commands side to the point I had to look at the generated code to make sure I have everything I need. Also your documentation says to implement `SerializableEvent`, but that no longer exists so I'm implementing `Event` for the time being - assuming this is something that got removed during a refactor - haven't dug into the commit history yet.
Haha I actually decided not to go with it. The whole install entire os BS didn't make sense to me or I didn't understand it. Why made you say that btw?
This is sweat! Your templates are very opiniated and I would certainly do things differently, but what is really really cool is that you can edit the templates since they are simple Twig files. What would really rock is the ability to refer to a remote template from the command line. Something like: ``` phint --template https://github.com/my/phint-custo ``` Anyway, I'll give it a try!
Here's a similar discussion that might clear things up: [https://laracasts.com/discuss/channels/eloquent/db-queries-should-be-in-model-or-controller](https://laracasts.com/discuss/channels/eloquent/db-queries-should-be-in-model-or-controller)
&gt;Just for clarification, this is &gt; &gt;not &gt; &gt; the scanner that we use for CodeRisk. The open source version is RIPS 0.x, and it was scanned with RIPS 2.x, a complete rewrite. Would it be possible to open-source the new version?
&gt; will have gained a working knowledge of concepts such as the Model View Controller (MVC) design pattern What you say MVC does it mean we will have more users not understanding what MVC is. Did you maybe mean separation of concerns?
Yes, it should be. Right now there are no good ways to do `&lt;` or `&gt;` in PHP on untrusted strings.
/u/SaraMG, would it be possible to add collections, async, a sound static type checker, and other features a la Hack to PHP? &amp;#x200B; Obviously, I would love to see PHP **become** Hack, but I know that won’t happen.
yes
Laravel Nova - Error too expensive [https://stackoverflow.com/questions/52043636/laravel-nova-50-error-too-expensive](https://stackoverflow.com/questions/52043636/laravel-nova-50-error-too-expensive)
Thank you very much for this! I will take a look at this and DM you if I have any questions. 
Actually FIDO2/WebAuthn supports single-factor too now, I think that's ultimately the better approach rather than relying on ethereum.
Ya, definitely when taking in lots of data. But when you are looking for a single piece of data like a price, not so much.
envfiles are useful for dev environments and should be git ignored. On production, youd replace them by actual env vars set elsewhere. For instance, services like heroku and netlify allow easy env var setup through their UI, which is more practical than submitting a new commit or SSHing into the machine
lots of people here use laravel, and laravel is written in - wait for it: PHP
&gt; SSH protocol has a lot more stuff's inside I'm sorry, but can you do better than "stuff's"?
[Ex php veteran ](https://bruno.id) and current blockchain developer here. I have an intro into metamask here: https://bitfalls.com/2018/02/16/metamask-send-receive-ether/ Intro into Ethereum here: https://bitfalls.com/2017/09/19/what-ethereum-compare-to-bitcoin/ Bottom line, arguably more secure than your typical server setup of any kind, but delegates all responsibility for protection to the user. If their computer gets compromised, they're toast. But imo, that's how it should be anyway. 
The irony in this comment.
please be respectful
In this Ethereum example, the private key is automatically provided by MetaMask, so the user doesn't need to generate a special private key just to log in. It also opens the doors to different web apps utilizing Ethereum as the main payment method. Maybe in the near future crypto wallet browser extensions will become a mainstream thing, then there will be no need to use passwords or third party login providers like Facebook or other centralized services, as the ownership of the Ethereum wallet will also allow to access personal accounts on different apps.
Thanks, that looks good!
Thanks!
There is "syncing". You can have as many "accounts" with MetaMask as you want, and it comes built-in with the Brave browser. I promise you it will be much more mainstream than WebAuthn because of a far greated scope of use - it can apply to much more than authentication. MetaMask itself supports both importing of private keys for the sake of reusing wallets from outside of MM inside of MM, and exporting private keys so you can take your MM-generated account(s) elsewhere. I'm super skeptical about all things cryptocurrency and my job is basically 80% talking companies out of using blockchain, and I still say the above with utmost sincerity, having been deeply involved with the tech for over 2 years now. This will become the new authentication and identification norm. I invite you to screenshot this reply and come back to it in 3 years.
That's exactly [how Ledger works](https://bitfalls.com/2017/09/08/hardware-wallets-like-ledger-nano-s-work/). Only this has the added benefit of being useful for a plethora of other stuff as well as you can take your complete digital identity (or identities) with you, and it's fully unalienable and completely restoreable.
If you have any question, feel free to open up issues on the repository. I'm always looking to improve the documentation, so if things were unclear for some reason: let me know and I'll try to clarify them. The docs are light on the command side because for the core of eventsauce (or event sourcing in general) you don't really need them. The events are pretty light because they're relatively simple object that only need to map to json somehow. If there were any parts in particular you had to find out and think that could be clearer, also please let me know.
Now add 50 more entities. How would you structure this?
 &gt; And the deployment is so easy - you just upload your script! That can be said about pretty much any language. I compile my go binary and I upload it and it works. But with PHP you have to make sure that you have the same version of PHP or things might break. &gt; sample websocket chat which is a long-living process How else are you going to do websockets without a long living process? Even if you use a 3rd party library, something has to be running constantly. &gt; This is why Ajax, when it was introduced, while giving so much good stuff to end users, made the life of PHP developers so complex I'm not sure how it made it more complex. Instead of rendering html, you just passed json. Instead of submitting forms and it reloaded the page, it would just send an ajax post call. What did that change on the backend? You are still verifying the input and returning a result. It actually made the backend so much easier since I was doing less there. Now all I use PHP for is backend rest apis.
So it’s using Cryptocurrency keys like they were OpenPGP keys? That seems odd.
This post is ver sloppy about use of an important technical term. PHP is not stateless. That isn't a property of the programming language at all. HTTP as a protocol is stateless. A PHP script that is called in response to an HTTP request is only stateless from the perspective of the user. Internally it deals with state in all the same ways that any scripting language does, in fact, PHP is a bit sloppier in dealing with state than a lot of languages are. Beyond that, HTTP being stateless is entirely a property of the way the protocol is defined and makes no statements about how state is managed in other parts of the application stack. Presumably you have some kind of datastore that your app interacts with (or else why would you bother using PHP instead of static html?) and you have to be able to effectively manage that state as well. When people say "PHP script is short lived, dies after the response is returned" it means one specific thing and nothing more than that. It means that there is not a long-running process that keeps alive an app (as is the case with, e.g. Python's WSGI protocol) waiting for the next request. That's not actually an advantage except in the sense that it automatically releases memory so if you have a memory leak you might not know about it (or care about it) for a while. Spinning that as if it's some kind of unique advantage to the language is non-sensical. It's a quirk of using mod_php with Apache, mostly. 
Ummm
Nothing in this article is exclusive to PHP. You could literally substitute in "python" and nothing changes.
&gt;Every time I see Node.js code of sample websocket chat which is a long-living process I can't help myself and shudder because of this global "subscribers" variable which holds all the open websocket connections - I just see how this async long-living complexity explodes in hands of young and fast-typing developer. &amp;#x200B; What complexity? it's basic pub/sub and most of the libraries that provide a websocket server abstract away handling subscribers, you just pass in the appropriate topic, the library will remove them from it when the connection drops, there nothing to handle. Wether it's global variable depends on the implementation surely, but not anything I've ever seen. Nor is this exclusive to Node, Ratchet built on React PHP is one example.
Ok great. Then again, I don't compile a binary and upload it. It has to go through an entire ci/cd pipeline, grabs all the dependencies, runs all the unit tests, integration tests, then compiles and deploys. The same thing happens with any PHP deployment we have, except the compile step. If you're literally changing one file and uploading, you're doing it wrong.
Use Docker Compose to simplify and template this..
Not even [the official documentation](http://php.net/manual/en/function.opcache-compile-file.php)?
Oh for sure. I learned using Docker run, though, and I think it helps to know what’s going on behind the veneer that docker-compose provides.
"WHEN its turned on". Like I mentioned above in the post, if its not, PHP will interpret the files every time it needs to be executed.
To be honest, I haven't had the need to look up PHP's online docs for a while now because of ZealDocs.
Erm… sessions, anyone? Those are state.
Yes, this is ridiculous to say. It's clear the author doesn't really know what they're talking about. PHP is more than capable of running long-term processes. It's not the language that determines this stuff.
You're after https://secure.php.net If you have HTTPS Everywhere installed, you'll always go straight there.
Thanks. I think it's going to be either Simple HTML DOM or regex, this time around. It's for scraping simple prices from hotel websites. Points about most HTML being broken and consequently difficult to scrape duly noted. 
That discussion doesn't really give any reasons for or against, just personal opinions. Also the opinions seem to lean towards not putting it in the controller.
Ok thanks
you see your problem is that you’re trying to apply this stuff to the real world. gotta cut that out right away.
Man I don't mess with regex, simple dom all the way! Good luck =P
To be clear, I do not think having a deployment pipeline is a bad thing or anything like that, I just think you missed the point of the article about the ease of use of a language that is very easy to deploy. Obviously this doesn't matter as much in your case (or mine), but for a new developer it is much easier to learn a language without a compilation step. As for your last point: only a sith deals in absolutes.
a solution looking for a problem
I can say 'Yes' but with two tips: &amp;#x200B; \- Use a defined workers for every task related to image process (resize, change color, compression) \- Monitors this workers &amp;#x200B;
You shouldn’t still need that extension in 2018. 
# [Streaming JSON Encoder](https://github.com/violet-php/streaming-json-encoder) Streaming JSON Encoder is a PHP library that provides a set of classes to help with encoding JSON in a streaming manner, i.e. allowing you to encode the JSON document bit by bit rather than encoding the whole document at once. Compared to the built in json\_encode function, there are two main advantages: - You will not need to load the entire data set into memory, as the encoder supports iterating over both arrays and any kind of iterators, like generators, for example. - You will not need to load the entire resulting JSON document into the memory, since the JSON document will be encoded value by value and it's possible to output the encoded document piece by piece. In other words, the Streaming JSON Encoder can provide the greatest benefit when you need to handle large data sets that may otherwise take up too much memory to process. In order to increase interoperability, the library also provides a PSR-7 compatible stream to use with frameworks and HTTP requests.
Why? You haven’t shown the slightest bit of respect to anybody else
Even more interesting when you think about how it is essentially just HTTPS with a stronger key that persists with the user's device. It generates a new certificate first time you visit and then uses that to verify you, which could theoretically be used for encrypting the traffic, as well.
Me thinks you should read the docs on what some of those functions do
I dunno, have you gone into detail with Laravel Nova? Its not really an admin panel. Its the basis of a whole data management framework. It goes way beyond a fancy interface to extend. I don't think it really replaces the need for basic admin interfaces that can be used as project starters.
Actually the code is split by contexts (Managment/, SnackMachine/). I'm not saying this is perfect but I guess it can scale good by adding more context. 
I disagree the Controllers fit the UI - they should be present in the Infrastructure layer. Controllers shouldn't be the first clients of repositories - it's the lacking Application layer with it's services. It's debatable about the ORM Annotations in Entity classes but I prefer keeping my mappings in Yaml/Xml. I have an open, rusty draft DDD project - it still needs a lot of work but I think the basics are there (Production context): [\[Bitbucket\]\[ddd-gelato\]](https://bitbucket.org/tszymanek/ddd-gelato/src/418e183bc88e41a0c61452121515ac7e0558eb79/src/TodaysGelato/Production/)
Looks like http://news.php.net/php.internals is back online again 🎉 I hope that externals will also soon update..
I found http://externals.io/ to be a bit more readable.
Is this a trend to copy some articles and publish to your fancy-ass website and post it to reddit? I mean, it would be okay and interesting if the author would add something new to the existing articles, but no. He just copy-pasted the code and that's all. &amp;#x200B; A good source for design patterns would be, for ex: [https://designpatternsphp.readthedocs.io/en/latest/README.html](https://designpatternsphp.readthedocs.io/en/latest/README.html) &amp;#x200B; &amp;#x200B; &amp;#x200B;
&gt; fancy ass-website *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
18+ years of experience, copies and pastes code using images.
Images makes it harder to accuse with plagiarism. though for such a website one don't need any proof, it smells like a usual Bangalore-based plagiarism-driven self-promotional website from the first page. 
I agree with presence of Doctrine annotations in Domain layer is quite weird. My last attempt to apply a DDD I created yaml configuration for those mapping. Unfortunately the future 3.0 version of Doctrine will ship a native Yaml driver anymore (maybe someone will port it as an extension), which left only PHP and XML configuration mapping. IMO, Controllers is one of the first entry point of your application. In this context this is a HTTP Controller returning HTML, it relates to the UI then. I think we can add a depth more, if you have for example a Console command as another entry point of your project. I had HTTP Controller returning rendered Twig template but also a CLI command. Instead of making a "UI" folder at the root, I made a "Port" and inside I created "UI" and "Console" to split the different entrypoint context. All the logic go to the Application layer, which Port will depend on it.
Hey, you're going to want to ask this question in /r/PHPHelp - this forum is for meta discussion about the language, not support.
http://php.net/manual/en/function.function-exists.php
i think you meant `phint init --using packagist/project` :)
It's a matter of preference. If we would want to go deeper, you could also make your Controller framework agnostic like [Matthias Noback did](https://matthiasnoback.nl/tags/controller/), use it as a service and perhaps inject and return your own response interface object handling different outputs - if you want that reusability and no code repetition. I think it's achievable.
We do have some maintained open source projects on our Github account but it is rather unlikely that we will open source everything.
Sweet!
Don't forget the cool buttons with Comic Sans fonts: [http://coursegalaxy.com/images/coursesforyou.jpg](http://coursegalaxy.com/images/coursesforyou.jpg)
Not a big fan of relying on a custom autoloader tbh
Then use this on smaller projects and refactor into something else if and when it starts to become a problem. One size does not fit all in a lot of cases.
How is this a custom autoloader? I Still use PSR-4 autoloading :-)
This is what the [Entity Attribute Value model](https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model) is made for. You keep a set of attributes (a column), a set of entities (a form) and a value (the answer). For each form you store a row for each answer for each column. It scales easily and can be extended without considering previous forms (as long as you don't change what a specific attribute means).
https://i.imgur.com/DK1ckG8.png
EAV has so many drawbacks that it shouldn't be used under as silly a pretext as "making an HTML form processing easier". If there are no concerns about reading the data back, a stupid JSON file would be much simpler.
He wants to get certified 😂😂😂👌 In 2018 🤣🤣🤣👏💯💯
Does your DBMS support a JSON data type? 
So many drawbacks, eh? Like what? If you’re going to put 100M rows in your table, put it under load, and expect to search quickly, an EAV store is a perfectly acceptable solution and at least thousand times faster than jamming a JSON packet into a field. And, in my opinion, easier to deal with than running MongoDB.
I have it it for 5.6 I believe. I didn't study from their guide. Instead I just went through all the topics the exam covers: [http://www.zend.com/en/services/certification/php-certification](http://www.zend.com/en/services/certification/php-certification) &amp;#x200B; The company I used to work for paid for it at the time. I don't believe it's a waste of money. It'll definitely push you above some people. But know that framework knowledge seems to be valued higher by most employers.
Check out the serialize and deserialize functions.
In what circumstances is a database implemented but there are no concerns about reading the data back? Have you ever had to alter a large table when it’s under high volume writes? EAV is not a silly trick, it’s a perfectly valid solution to OP’s challenge, in my opinion. You don’t have to be grouchy about it.
The original poster has given reason why storing the data in normalized form may not be suitable for this project. Which is why the EAV model makes sense, because it's highly adaptable to the different structure of each object being represented.
there are no high volume writes. there should be serious reasons to step back from a normal form. I don't see any in the OP, beside a lame whim. If you want to help the OP, not just to show off, then ask them about prerequisites, what are these 100 items, what are these 4 options, what will be the usage. And do it in the proper subreddit.
**and** delete here.
Yeah, I'm currently in a State Government shop that is moving to mostly PHP so in trying to get a leg up any way I can. 
"I am too lazy to create a proper database design and looking for a shortcut" is anything but a good reason. It always fire back. But for a typical PHPer, who never cares how their code would be maintained, the simplest short term solution is always the best.
You could serialize the form data and store it in a "form submissions" table as Json with a processed field as a Boolean. Also date fields for when the record was created and processed. You then have a separate process that queries for all the form submissions where processed = 0. Then you loop over each unprocessed row and store fields in their respective tables. I also have a feeling you can normalize your data so you don't need one big table. This approach would allow you to scale as you add and remove fields. Because your processing script would be the only place that needs to know what to do when a new field is added, or one is removed
Feel free to suggest a different technical solution that matches the requirements of the original poster.
Chances are OP needs to look at what data is being stored and do some normalization. A kvp table will bite him in the ass, When his system needs to scale and he ends up having to do confusing joins to get related data from the kvp. OP probably would benefit more from NOT having one giant table down the road
I have the php certification and it did indeed help me. I learned by going through each of the exam topics and it proved to be enough.
There are no requirements (yet). This is inappropriate subreddit (still). 
If you look properly you will find concept of each pattern and implementation is provided in multiple languages. If a person learns from not so fancy site too what matters is material and how simple it can be understood. Your reference may be another great point of source to learn.
Not sure what you mean by copy and paste. It took me almost year to come up with explanation of concepts of all pattern to learn in simple way and implementation in multiple languages. I provided the code in image so that learner will write the code (instead of copy and paste) to have better learning. Also yes I am from system side and did this with my limited knowledge of HTML to share it with others.
No, you did not came up with explanations and stuff. You just copied the text from other sites. See my comment below.
I always used as reference the design patterns of Go4 book, but if I'm in a hurry: [https://sourcemaking.com/](https://sourcemaking.com/) [https://github.com/kamranahmedse/design-patterns-for-humans](https://github.com/kamranahmedse/design-patterns-for-humans)
Erm, you're right, it does not. I'm doing ng2 now which uses .service.ts as naming pattern, which confused me. I'm actually using FeatureController in php. But I do name my routing files feature.routes.php (Slim routings)
Most companies don't value a PHP-cert that high. Most companies in the microsoft world want certifications for the Gold membership. But if you want to get certified, try to do with your employer.
What is the best way is essentially a how to do question. And must be answered only after questioning the OP, to address *their* own problem, not some problem someone else had some time ago. The current question is too broad to offer a non-standard solution right away. The only answer possible is there is no bloody "best" way to do anything, everything depends on the particular task. 
 &gt; Unfortunately the future 3.0 version of Doctrine will not ship a native Yaml driver anymore (maybe someone will port it as an extension), which left us only with PHP and XML configuration mapping. That should have been a push to "just use xml" ;-) Here's some help: ```xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;doctrine-mapping xmlns="http://doctrine-project.org/schemas/orm/doctrine-mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://doctrine-project.org/schemas/orm/doctrine-mapping vendor/doctrine/orm/doctrine-mapping.xsd" &gt; &lt;entity&gt; &lt;/entity&gt; &lt;/doctrine-mapping&gt; ``` If you are using a decent editor, you shouldn't even need the documentation to fill this out, just CTRL+SPACE through it.
&gt; The docs are light on the command side because for the core of eventsauce (or event sourcing in general) you don't really need them. I was under the impression that event sourcing was pretty clear on the idea of the Commands raising Events.. commands are the verbs - the action that is happening where as Events are the things that happened. So on persisting you would call a Command -&gt; `ChangeUserName` - this would execute any business rules and raise an Event based on the outcome - `UserNameChanged` or `UserNameFailedToChangeDueToLength` (if it matters to your business).
What is this? Almost every link that I click leads to a 404. Not sure what the purpose of this is?!?!
I agree with you, doctrine annotations are infrastructure/persistence concerns that the entity/business model should not be aware of. The entity shouldn’t care that it’s stored in SQL tables using ORM, documents using ODM, or whatever. I can’t speak for other designs, but at least in DDD it’s a horrible idea to use doctrine annotations. 
because its hard to have compassion when everyone is attacking you, i just want to feel loved and respected. 
Definitely. That post history is... yikes.
As a developer – I got it a couple of years ago. My employer funded it, basically for bragging rights, to show their clients that "we have certified (=experienced) developers". It was pretty straightforward. Language features, web platform specifics, b.s. questions about the fourth argument in str_replace, and so on. As an interviewer – having it would show me that you know the basics and features of the language. So a big plus for a junior/medior (I'd say that if you can pass it, you are above junior already). It wouldn't show anything about your architectural skills, so a very small plus to a senior.
Can you please stop posting these?
Stop spamming your low-effort tutorials here please. Anyone who doesn't already know how to send a POST request with cURL should be in /r/PHPHelp anyways.
I got it a few years back. Just another thing to out in your CV. Nobody ever asked me about it or even brought it up.
With all due respect please note that... There are a lot of developers who like to visit a website or blogspot where they can easily understand. And even can make a community by commenting. Please stop discouraging others who want to help the learners. If you can't encourage them at least don't discourage 
So it means that if someone willingly repeatedly post url of a particular website which he does not own... Then what gonna happen? The site will be banned on reddit? Gonna experiment on it
You may be right. I always have the option to block posts from this user. Had a pretty lengthy and respectful thread with the author on one of his other posts, so my previous comment wasn't really out of the blue. I do recognize it's not really fair of me.
Appreciate it. I'm currently listening to the podcast you were on a couple of weeks ago. Is that workshop you talk about going to be available online?
&gt;I disagree the Controllers fit the UI - they should be present in the Infrastructure layer. Controllers shouldn't be the first clients of repositories - it's the lacking Application layer with it's services. I didn't introduce a application layer for simplicity but for larger projects this will definitely make sense. Could you please explain me why controllers shouldn't access repositories directly? &amp;#x200B; &gt; It's debatable about the ORM Annotations in Entity classes but I prefer keeping my mappings in Yaml/Xml. I also wanted to use YAML/XML but as I stated in the README both approaches lacked autocomplete and refactoring at least in PHPStorm. &amp;#x200B; &gt; I have an open, rusty draft DDD project - it still needs a lot of work but I think the basics are there Nice work keep going!
&gt; Is this kind of thing the future, or a fad ? This exact design? Closer to a fad. The idea of passwordless authentication? It's a few years away from being mature enough to actually consider, but when it is, it will be the future. We're more likely to see something similar to FIDO2 and WebAuthn than anything blockchainy. Anything "blockchain" should be assumed to be total bullshit unless proven otherwise.
I also tried to use xml (not yaml of course ;) but I like annotations better. With annotations you don't have to write a property name twice and you have better refactoring. &amp;#x200B; Do you have better experiences with xml in the context of ddd or are annotations also fine?
I also don't like persistence logic leaking into my domain model but I chose annotations because they had better support from my IDE. &amp;#x200B; Do you have a specific example where annotations was the wrong decision?
Most of that is "on the table", but it depends on how we bodge it into PHP.
Annotations are fine, as long as your code matches the domain terminology. Avoiding coupling with the ORM would still be better, as you will hit the limits of the tool when you progress further.
Why is your *jsonSerialize* method returning an array instead of... json??? o.Ô
There's a lot of issues with this code. One: - Keep it consistent, modern PHP uses camel case, not a mixture of snake and camel. - jsonSerialize() needs to return json, not an array. - toArray() needs to return an array. - I hate how you put `private $var, $varOne` do it on separate lines. - Type hint. Use a class to determine what currencies and their decimal places and type hint with that. - Type hint with other things like bool, int, string and so forth, use `public function setTaxable(bool $isTaxable)` (I believe it's `bool`) and so on, use `public function something(typehint something): something` to show what it should return, accept and so on.
Yep, like Vaalyn said, its not meant to return JSON string, it just lets you customize the JSON structure. One example where this might be useful is if you want to hide certain data serializing a JSON object. You can essentially white list what data can be serialized. I sometimes do this when building APIs. I also do stuff with verbosity settings. You can do something like this: public function toArray() { $property = get_object_vars($this); switch ($this-&gt;verbosity) { case 0: $property = [ 'id' =&gt; $property['id'], 'name' =&gt; $property['name'], ]; break; case 1: $propertyImages = $property['property_image']; $property = [ 'id' =&gt; $property['id'], 'name' =&gt; $property['name'], 'main_telephone' =&gt; $property['main_telephone'], 'order' =&gt; $property['order'], 'rate' =&gt; $property['rate'], ]; break; default: break; } return $property; } public function jsonSerialize() { $property = $this-&gt;toArray(); return $property; } That is a trimmed down example, but I let the client specify a verbosity mode so they can control the amount of data returned. Just a bunch of different stuff you can do with it, its nice.
I'll concede on your other points, its not PSR-2, and it doesn't use type hints. Though the later is a PHP 7 thing and this code has been around for a long time. So two things: 1. Maybe we haven't gotten around to that. 2. Maybe that isn't the point of this thread? It's about design patterns, not coding standards.
This is a sliver of a larger series of classes we have to adapt hotel inventory and meta data from various sources and convert it into our own structure, which we then distribute out to various websites. I picked the smallest possible class out of about 20. To display the full adapter and how it solves our internal would require a series of blog posts and is completely outside the scope of a small reddit post. The scope of this post was actually to learn from the /r/php community in regards to how you all use design patterns to solve problems in your code. No one in here seems capable or willing to participate in the function of the thread though. I have gotten 3 responses so far: 1. A person who didn't understand jsonSerialize 2. Another person who didn't understand jsonSerialize (despite the answer having already been posted in this thread). This person also didn't understand get_object_vars. The remainder of their post was also so woefully not pertinent to the subject that they deleted their post. 3. Yours. This leads me to two thoughts. One, I should have never posted an example and merely asked the question. Two, reddit sucks.
Chill dude
Hmm that's interesting, it would be interesting to know how the laravel caching system works and weather there could be any type of data leaking in there. Some homework for myself I guess!
JsonSerializable basically lets you customize what happens when you call `json_encode()` on an object. It does so through the `jsonSerialize` method.
1. I'd suggest using [PSR-1](https://www.php-fig.org/psr/psr-1/), don't use snake_case in PHP. 2. I highly recommend using return types and typed arguments so you'll discover bugs much earlier, with PHPStan's staic code analysis, for example, and not at runtime. You'll also save a lot of boilerplate typing: public function set_tax_rate($tax_rate) { if (!is_numeric($tax_rate)) { throw new \LogicException("Tax rate must be numeric"); } $this-&gt;tax_rate = $tax_rate; } should actually be public function set_tax_rate(TaxRate $tax_rate) : void { $this-&gt;tax_rate = $tax_rate; } with a custom TaxRate Value Object. Save yourself some typing, don't do the type checks by hand. 3. Your Fee class should not use setters, because it clearly is a value object. Use a static factory method that's calling a private constructor, for example. That way, you can't ever put a Fee object in an inconsistent state: class Fee implements \JsonSerializable { protected $type, $applied, $description, $fee, $is_taxable = false, $tax_rate; // comments are a hint that you need to put more effort in descriptive variable and function names. Your code is prose, screaming the purpose aloud to the reader. No need for comments. private __construct( Money $fee, bool $isTaxable, ?TaxRate $taxRate, string $type, string $description, ) { ... } public static create( Money $fee, bool $isTaxable, ?TaxRate $taxRate, string $type, string $description, // PHP 7.3 finally allows trailing comma in function arguments ) { return new self(...); } 4. Your Fee class isn't an adapter. It's supposed to be a value object, or a Data Transfer Object, a Plain Old PHP Object, or an Entity. The adapter would be the code that transforms this object to a similar, but slightly different object. One example would be if you'd have a `Payment`class that converts a `Fee` to a `Payment`: class Payment implements \JsonSerializable { public static function fromFee(Fee $fee) : Payment {...} }
Hi, give us the link 
I've asked, because I feel some misconception here (not only related to adapter pattern - probably the usual abstraction vs generalisation), but you're right I didn't get the idea of this post. Ok then. Here's a simplified code showing how I've used *factory method pattern* to encapsulate configuration and object that depends on its immutable representation: abstract class Application implements RequestHandlerInterface { protected const ROUTER_KEY = 'app.router'; private $config; final public function handle(ServerRequestInterface $request): ResponseInterface { $this-&gt;config[static::ROUTER_KEY] = function (ContainerInterface $c) { return $this-&gt;router($c); }; $container = new Container($this-&gt;config); return $container-&gt;get(static::ROUTER_KEY)-&gt;handle($request); } final public function setEnv($name, $value) { $this-&gt;config[$name] = $value; } abstract protected function router(ContainerInterface $container): RequestHandlerInterface; } I could do that with abstract/injected factory, but this class is skinny wrapper and it doesn't need to be tested separately so I traded off for simple constructor.
YOU ALL FUCKING SUCK.
That sucks, but I understand that you need to make a profit.
You got this. Enjoy the growth, understand that it's just impostor syndrome (I have it too) and be amazing at your job! And if you're not right of the bat, you will be soon! 
Jusy stay humble, learn from others, teach others when appropriate and debate solutions respectfully. Never stop learning and teaching.
Hey. Stop thinking about all this junior/senior/lead title garbage. Developing software is about solving problems. You’re a senior problem solver. When you’re greener, it’s just about getting shit out the door in a working state. When you are seasoned, you will give the same amount of output, but with much higher quality. The best thing that can happen is to be surrounded by people better than you. If you are humble, they will make you better. Take a deep breath. Stay humble. You’re going to be fine. 
I know how you feel. I just went through the same thing in October. Imposter syndrome is a bitch and will hang out often. All I can say is listen, be honest, and learn. Also I’ve done online lessons for specific things that you’ll be working on to sharpen the tool. I’ve learned more in 8 months than I did in 5 years just from discussion and reviews and logical thinking. Oh and remember to have fun with it. 
Good stuff
Thanks man. I guess I’m being kind of hard on myself because I’ve never been in a really structured environment. I’m not used to committing on a consistent basis since I was the only one using it or doing anything, running unit tests, or having people criticize my code. It’s always been basically “do it however you want with whatever systems you want as long as it works and we the whole team tests it”. It worked great and gave me flexibility in making my own approaches and organizing how I wanted but didn’t prepare me at all for working with others or doing things the “right way”; I’m being hard on myself about the “right way”, my code is structured well, I comment, I take logical approaches, I just don’t do traditional team type things like daily reports, follow a common dev cycle, etc..
I’m definitely excited about being able to learn new things, even outside of code I’m looking forward to seeing how others organize tasks for example. 
Thanks. I think I’m letting the “junior” get to me but also just nervous about the team stuff. I like what you said about being around people better than you. I’ve always thought I’d rather be a small fish in a big pond then a big fish in a small pond. It’s just going to be quite the transition. 
I knew posting here would help me realize these thoughts are normal, even though I mostly knew that. 
Which is fine, since now you're gonna learn all that! Congratulations again.
Good luck brother, you'll do great. Learn as much as you can from the team and don't be afraid to ask questions. You'll make mistakes and break things like we all did our first time in that team environment! It's expected - just breathe and keep improving!
High confidence + some skills &gt; low confidence + high skills... in the end. One word of caution. I truly hope the place you’re going is awesome, but not all dev shops and teams are. You aren’t used to a more formal coding practice - but that may be the least of your worries. One job I went to, I thought I was pretty good going in, and the team and stack looked very promising - but after a few months on the job I realized that my enthusiasm was basically reviled by many of my co-workers... mainly because even though they had more skills than me, their behind the scenes methodology was crappy patches, lazy programming, mistakes that later became bigger problems, and a general lack of motivation and ethics. They looked good on paper though, to the bosses without technical backgrounds. We had one “really fast bug fixer guy” - he finished tickets faster than practically anyone. I checked our one of his self-merged PR’s and turns out he just put “@“ in front of 70% of the problematic code lines - yep - all he did was suppress errors from appearing in the logs. And his best buddy, the lead dev, said nothing. And I got written up for trying to upset the Apple cart and make things better - because I made other devs there look bad. I want to believe this kind of political jockeying is not the norm, but definitely be cautious and try to learn as much as you can as fast as you can, and resist the urge to publicly point out crappy code. Too many software businesses value fast and cheap over good code, and too many devs would rather keep their low-effort high paying gigs going. Bottom line: because you’ve been self taught, self reliant and self motivated, and the sole focus of progress, you probably have more skills than you realize, and more skills than many of the guys on the team you’re joining. Don’t let me scare you though, I doubt you’ll have any problems fitting in and contributing. One thing you probably haven’t dealt with too much on your own - merge conflicts. Brush up on git and ask specifically about their code review and production push process, documentation, and testing.
Imposter syndrome &gt; the Dunning-Kruger effect, hands down 😀. All the best! 
Holy shit, are you me? Similar story: one of two backend devs at a small company for 5.5 years, went to university in computer science but mostly self-taught in web dev... also starting my first new job since graduating, next week. To be honest though I don't think I'm quite as nervous as you are, because I'm pretty confident in my skills at learning new tech/tools. That's pretty much been all I've been doing for the past 5.5 years. I think in your position, if you're hired as a Junior, you have a lot of leeway for getting comfortable and learning on the job. If you were hired in a Senior role (which I have been in this next job), they would definitely have been expecting more of you from the get-go. Any new job is a going to take some transition time, don't freak out, you're not alone in this sort of situation!
LOL go on. you'll have your shit banned no matter how many accounts you're gonna spam from
&gt; I also wanted to use YAML/XML but as I stated in the README both approaches lacked autocomplete and refactoring at least in PHPStorm. With XML you should have auto-complete. At least with Symfony and the Symfony plugin you have it but even without thanks to the XSD file phpStorm should be able to pick up the XML schema for auto-completion and validation.
I've got the same thing, but to me that's normal. School taught me nothing practical, and I had to learn many things by myself. My employer knows this, and takes on him and his team to teach me , because I've got the right profile, and I'm valuable. Not yet, but soon. The business will make more money out of you than you will cost, except in the early times, but that's an investment, you'll get better!
How would you go from feature-based to Domain driven? Isn't the major difference creating a Domain namespace, and splitting your routes/controllers out of the domain into a UI/API namespace? If so, I'm gonna keep an eye out for feature projects.
Wow I'm amazed, this kind of exactly sounds like me about 1.5 years ago. I've moved from a small company where I had been the only dev (and basically also ui designer xD) for many years and where I had been working from my home office to a software/web dev agency with real office, real teams and stuff. And I exactly know what you mean with "not exactly following standards" and rushing things instead of using a proper staging set up and all those things. I had the same thoughts you are having now. I didn't start in a junior position, but man have I learnt a crazy amount of things while working in a team amongst other devs with different experiences. So my advice basically is to just enjoy learning from your team mates and also share your experience which them. As long as you are open to learn new things, discuss and also give your opinion you'll have a great time adapting to standards and workflows. For me doing this frightening (and it really was for me!) step into this new job was the best decision I could have done! All the best for your future :)
I was in your same situation for significantly more years. I am definitely Junior. Nobody is as god as they thought. If you spent time at your old job envying and dreaming about better standards and tools then you should have no trouble adapting.
&gt;I didn't introduce a application layer for simplicity but for larger projects this will definitely make sense. Could you please explain me why controllers shouldn't access repositories directly? Repositories are part of your domain model (as interfaces, which are then implemented in the Infrastructure). The application layer is a boundary between the outer world and the domain. It's the place where you translate the input into things that are understandable inside the domain (it should reflect the Ubiquitous Language of your Context). I see you're fetching things with plain integers (for ids) or strings. You shouldn't rely on the persistence mechanism for generating Entity Identity, 'cause there are times when you require Identity before persisting. Vaughn explains this in detail in his red book.
Doctrine's annotations in domain/business models are good examples of misuse of annotations, also routing annotations in controllers. They both suffer the problem of crossing boundaries of layers and violating SOLID principles. The ideal way to handle mapping is like how fluent API works in C#'s Entity Framework, you can check it out with this link and see how it works: http://www.entityframeworktutorial.net/code-first/fluent-api-in-code-first.aspx 
Well, those patterns are not the current standard for a reason ;)
Just came to say I was in exactly the same position. I worked for a smaller agency for 6 years where I made my way from jnr to lead but over that time there were only 2/3 developers there so it wasn't really "lead" as such. I moved to a start up a few months ago with a proper dev structure - code reviews, VC, Agile etc and I have improved 10x as a developer already. You got this. &amp;#x200B; Your statement "I’m excited about the growth opportunity since I believe I’m a senior and not a junior " is probably not true though. As others have said dont focus on snr vs jnr etc but most companies would expect Senior Devs to be experienced in version control, deployment etc which it doesn't sound like you are. This time in 6 months you will look back and see how more you have learnt.
In all probability, the new company won't do things the way they should either. So don't worry about it. Presumably you had an interview, and presumably you passed. So they know your capabilities, and they're confident that you are the right fit for the job. &amp;#x200B;
I was kinda in the same position; I started as literally the only developer in a start-up that was ramping up to get bigger, but progress was slow. Over the course of 6-7 years I thought myself full-stack development with LAMP, with whatever CSS/JS/HTML tricks I needed to make something work. When we grew and started hiring more developers in following 5 years, I was put in charge as lead, since I had worked there the longest. I thought I wasn't good enough, that I didn't really have the skill-set to lead anyone. imposter-syndrome, exactly what you described. The thing is; the skills you need in a team, you will learn in a team. You can be confident in one set of skills (as a developer) yet stay humble in other aspects (working in a team). I'm assuming that you were clear about this in the hiring process, so you were hired with this knowledge and expectations have been managed. Stay humble, learn take criticism as a positive way to self-improve and know when to ask for help. With 5 years under your belt, you'll be able to help in the technical work, while balancing that with receiving help in other aspects. Just be aware that after 5 years of working "solo", you may have picked up and ingrained some bad-practices. Again, take the criticism and learn from other people.
Yes!! :) I wrote about it cozz I’ve been trying to understand how we got to the current way of doing things. I think it’s important to know our history, what worked and what didn’t, so we don’t try something we already tried before. :)
It's like programming archeology!
[removed]
Just do your best. I'm in a similar position right now. Tomorrow I have a 3 hour on the job taster/interview with "real engineers". My role hasn't been full-time developer for over half a decade. I'm looking forward to dealing with the unknown, and not knowing. I could look like a jackass, I've been very up-front I'm not a full-time coder, and I've not done what they do full-time. Maybe that's a growth opportunity. If not, there is always the next day!
Don’t worry, be yourself and you’ll be fine. Trust me. Don’t overthink this, just be excited!
Oh, I’m confident in my ability to learn. I’m just not confident because of not already practicing those habits or already having some of those skills. That’s a great point about juniors having more leeway. 
Oh, I’m confident in my ability to learn. I’m just not confident because of not already practicing those habits or already having some of those skills. That’s a great point about juniors having more leeway. 
Did you write this guide just for the sake of this thread or did you use some previously written text? This was comprehensive and I'll definitely save this post for reference! You should consider publishing this somewhere!
Just do your best, in the end, it's only thing you can control in this world
He actually did the madman
Just wanted to let you know I did exactly that. Started self-teaching, helping out a company with some development which ended up with me doing full-time php development without any guidance for a few years, and then moving to a junior developer position at a bigger company with lots of code. So I know how you feel, I remember being quite intimidated the first few weeks too (and still sometimes). But it worked out great, would absolutely recommend going this path! Remember you're a junior. You'll need to learn stuff, and that's no problem. They know that too. You won't be judged on your knowledge, but on how you progress in learning. So ask a lot of questions, and don't be afraid to make mistakes. Just don't make the same mistakes again and again, make sure you learn from what you do. 
Completely agree with this, it seems like it fits much better in Userland. I've always hated the serialize function, as the output it produces is much bigger than it really needs to be. You can create a much better implementation in Userland, even if you need to use Reflection to do so.
This is very concise and very very true. Moving to a place with code reviews can feel awful but it makes you a much better coder in a short space of time. As long as you listen to feedback as constructive, even when it doesn't always feel like a positive interaction.
I agree with previous posters on not getting too caught up with the titles but I suggest you drop your mindset of being a senior. Convince yourself that you're a junior and and don't connote any negative feelings toward that. Go in there with a humble mindset and a willingness to learn and re-learn things you think you might know. You're being hired a junior dev so no one is expecting anything else. Your colleagues will see soon enough where you actually stand by the way you solve problems, learn new skills and by the code you submit. If it's a good place you could well be looking at a new position in a year.
Not really a wonderful breakthrough, but what do you think? How would you do this?
That quote is out of context. Keep reading.
This should be posted on the walls of dev shops everywhere. 
The parent poster implied it's because of "security", but it's not. It's because of overhead in loading the file. &gt; In production, the actual environment variables should be set so that there is no overhead of loading the .env file on each request. However, if you're caching the file as you should be then there is no issue here.
I tend to experiment with a bunch of things on my laptop and end up re-installing my OS quite often. I got tired of going through the initial setup of my LEMP environment every time so I ended up scripting it. This script will create a Code directory in your home folder and any folder inside \~/Code is served up via nginx at {foldername}.localtest.me. Disclaimer... this is the script that I use for my local environment and may not be suitable for your needs. Use at your own risk!
I just want to say I'm in the exact same position. I just started last week at my first job ever directly after high school all self learned. Never done any code reviews or worked with scrum ext. But I'm hired as a junior and they don't push me hard on completing tasks or coming up with smart solutions. Just go there and get to know your coworkers and when you feel unsecure about something just ask and they will probably be happy to answer. They also work in a completely new framework that I never learned called silverstripe and I'm pretty much a newbie when it comes to that framework and have to learn and Google allot at work. If you go there and put your best into the work you do for the first weeks and learn from others you will catch up quick and you have earlier experience that will help you allot.
Here's a sneak peek of /r/laravel using the [top posts](https://np.reddit.com/r/laravel/top/?sort=top&amp;t=year) of the year! \#1: [20 Laravel Eloquent Tips and Tricks](https://laravel-news.com/eloquent-tips-tricks) | [34 comments](https://np.reddit.com/r/laravel/comments/8c2tpf/20_laravel_eloquent_tips_and_tricks/) \#2: [Laravel 5.5 released](https://laravel-news.com/laravel-5-5) | [29 comments](https://np.reddit.com/r/laravel/comments/6wyhul/laravel_55_released/) \#3: [Laravel 5.6 has been released!](https://twitter.com/laravelphp/status/961268622609002498) | [14 comments](https://np.reddit.com/r/laravel/comments/7vx60d/laravel_56_has_been_released/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Just spend a day or two to learn Docker and use that.
Lordy, that really is a massive vuln. Good spot to the finder (sigh). 
Why is that?
Ha, I'm going to steal that! Nice. 
Obligatory https://xkcd.com/1698/ Imagine the desolation if someone gained access to packagist.org and decided to re-route something like Symfony or Guzzle to their own repo that had a tiny callback in it and an secret backdoor. 
I'm self taught and have been working as a solo dev in a non-software development company for the past few years. If I were in your position I would make sure that I made my background clear to the people that I'm working with. I'd tell them: * I've got a lot to learn about working in a formal developer team. Please feel free to correct me, point out issues, and give me pointers so I can improve. * Some things that may seem obvious about working in a team to you all may have never crossed my mind. My goal is to be a productive member of the team, and for me that will involve learning the basics of working in a team of developers. * I've done my best over the years to work with best practices, common tools, and official standards. I've likely picked up habits, methods, and experience that worked well for me as a solo dev but won't fit well into this team environment. I'd appreciate it if you all could help me identify and correct these. I chose that wording to be as neutral as possible. Obviously it would be best to tweak it. From my perspective it's simply important to let them know where I'm coming from and what that means.
Yup, and some of them are public accessbile.
Turns out I understood, I just didn't understand. If you're going to make it public, why not just use packagist.org?
Don't know, I just found some installations of Packagist with open registrations containing private (not accessible without key) repositories.
Awesome, thanks for letting me know, will check it out. I use different stacks at times and decided to make this app. Just sharing the tool that can be used independent of installations and will include features that don't necessarily involve stack but also to work with development related things e.g. ftp deployment, and few testing tools. It's an ongoing free project used internally. Also takes care of vhosts enabling for mamp, and added for wamp to the final first version today (to be updated after its download page is ready) as well as configuration file detection in custom directories that can be anything e.g. c:\web c:\dev etc. I'm hoping on having time to throw in many thing that can help to start/continue a project in seconds, instead of manually doing same things over and over. E.g. mysql backups for deployment, git init and sync with remote. I think it will move beyond the stack in the near future.
I think jell is North 'Murican spelling, and gel is British spelling (even though North 'Murica also uses `gel` but for other contexts). 
Ooh, I didn't know that - thanks. Learn something new every day... Anyway, good post. I'd add an addendum to "Don't die on mole hills", which is "Keep your powder dry". The practice of code reviews can sometimes be subject to bartering - I'll give way on item 1 if you give way on item 2. It encourages everyone to give way on something, to prevent folks with the strongest personalities not backing down on anything. 
It's certainly a trade-off, but I would (naively) say that all projects could benefit from this. The flexibility that Event Sourcing lends you is that your Model isn't bound to it's persistence. With a typical CRUD system your Model/Entity is usually identically matched to a database table. To be clear, I don't consider myself an expert in this area, so I'm 100% open for correction. If we were lean on the standard `Blog` example, let's say you have a customer who wants a blog with a few extra features that don't exist in current packages. In one reality you decide that CRUD is the most pragmatic approach to get the job done and in the other you decide Event Sourcing is the right answer. The customer comes back after a few months and says "We really need `undo` functionality." In the CRUD reality you create a log of changes and use that to leverage any future changes, but in the Event Sourcing reality you create new commands and events that can take you back to a previous state. In the CRUD reality `undo` only works moving forward, but in the Event Sourcing reality you can theoretically use `undo` on all existing posts. Again, the standard trade-off: simplicity vs flexibility. Also, if you are keeping a detailed changelog than you are already pretty close to event sourcing. If your change log is detailed enough to build up the current state of the Model (`User`) than you basically have this situation: Changelog = Event Store and Model = Projection. In my reading, I've frequently seen projections updated in parallel with the Event Store or rather immediately afteer. The projection being damned close to, or exactly, what you're already use to in a standard CRUD app. 
I always wondered why would someone name "adaptation" of pattern (which means that someone just took part of the original idea) the same as original idea. If you look into [original MVC description](https://heim.ifi.uio.no/~trygver/2003/javazone-jaoo/MVC_pattern.pdf) (you may find it interesting to read Xerox PARC emails about MVC from 1978-79) you will find no similarities to Model2 in how this components interact with each other. Especially Model-&gt;View communication. And what I found strange is that Mediating controller MVC or MVA were already known that time. Yes, GRASP came up with it's Controller pattern a bit more later (2003 as far as I remember). I think that we just need to forget about MVC (Facebook has flux for example, which is essentially the same as MVC but made right from data flow perspective).
That's not my understanding. While CQRS ABSOLUTELY exists without Event Sourcing, Event Sourcing does not exist without CQRS. HOWEVER, this is still a new pattern for me. My understanding is that you have a Read Repository and a Write Repository, but Frank's package ([EventSauce](https://eventsauce.io/)) does not stress this at all. Being that I'm still new in this area I can't give an authoritative perspective. The idea being on read you execute commands that raise events and update the aggregate as needed. Then when the aggregate is at fully at it's fully new state with all events applied (reconstituted + new events) you persist the in-memory events so on the next read you get the correct current state (write). Frank's library doesn't stress a read repository and write repository. Actually a single repository does both. Is it pragmatic or overly simplified? I don't know. Been thinking about blogging lately, and if I decide to I'll surely post my experience in this endeavor.
Your post is very similar to [my post](https://www.reddit.com/r/webdev/comments/8khn93/self_taught_developer_feeling_horribly/) a few months ago. I've been at my new job for a couple months now and it's been fine. I think as self taught developers we get scared because we think everyone else is a really good programmer (I think it's because we read a lot of online stuff and books that is posted or created by super competent developers and we compare ourself to that) but I'm finding that the truth is that most other devs are pretty average.
Signed releases anyone? 
(/me coughs) \[Action-Domain-Responder\]([https://github.com/pmjones/adr/blob/master/ADR.md](https://github.com/pmjones/adr/blob/master/ADR.md))
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [pmjones/adr/.../**ADR.md** (master → 5c6c043)](https://github.com/pmjones/adr/blob/5c6c0436ea58e9665c253a53688be99cf71fbe75/ADR.md) ---- 
Do people not?
Yes
Thanks for this, I like that you put "avoid ego" at number 1. There's often a lot of ego involved in workplaces.
I have to explain the difference between the main file and the lock file for both NPM and composer a few times a month to the same people.
:(
You should really check out Docker.
In the Pluralsight course they also used a fluent API so you can separate your mappings from the domain and you're still able to use refactoring tools from your IDE. As we don't have a fluent mapping API in Doctrine I'll give XML-Mappings a try and report my findings here. Thanks for pointing me in that direction!
I still don't think I need an Application Layer in this context as long as my domain doesn't depend on the UI or Infrastructure layer but when things are getting more complex one should definitely introduce an Application Layer. I think I'll give UUID's a shoot. I just don't know how to store them efficiently because I don't wanna use a VARCHAR. Does Vaughn in his red book explain this?
This library is wrongly named, this is not a mock, it is a stub. What you need for your tests is a just a mocking component like PHPUnit's one [https://phpunit.de/manual/6.5/en/test-doubles.html](https://phpunit.de/manual/6.5/en/test-doubles.html)
I feel like everyone is so hesitant to hit the DB or the cache in a test. Yeah teats should be fast. They should be as isolated as possible. But personally I’d rather just hit an in-memory DB or a test DB in the container than spend all my time mocking out a repository?
&gt; When installing or removing dependencies in a Automatic-enabled application, your Application can perform tasks before and after the execution of Composer tasks. Can you please explain in brief how it's different from [Composer scripts](https://getcomposer.org/doc/articles/scripts.md)?
Great article. I liked it.
I'm not sure I fully understand the author's intention here. Is the order model supposed to have setters? But not the shipment? If not, how does this work in a typical CRUD case? What are the rules to decide which models do have setters and which don't? How would things like altering a shipment work?
I think the editing side of things is better suited to JavaScript. But the services, storage, etc on the backend is what PHP is used for. 
There are no such things as Anemic Domain Models. Whatever is presented in the article as ADMs are actually DTOs. There is nothing wrong with using Services + DTOs as an alternative to Domain Models. Disclaimer: I'm NOT a software architect.
your acronym is incorrect in the title
I just spent two weeks migrating a 'rich' method to an 'anemic' service, since the internals of the method now required a dependency the model did not have access to. `$order-&gt;complete()` reads nice, but it also means Order now needs all dependencies needed to complete itself. If there are constraints that go beyond what is locally available in the Order model, the Order model now needs access to all of those.
ORM is just the mapping to persistence, it has nothing to do with whether you allow property setters (anaemic/crud) or use domain methods to update the model.
With CRUD/Anaemic models you use setters. It's just like updating a DB record, your business logic is spread out to wherever you use the setters. With Rich Domain models you never use setters, your business logic is encapsulated by the model itself. E.g. // CRUD $user-&gt;setStatus('unemployed'); $user-&gt;setEmployer('Reddit'); // user is now inconsistent being unemployed and having an employer // vs rich domain $user-&gt;acceptJob('Reddit'); // inside this we set Status $user-&gt;quit(); // again set status in here and delete employer 
Models should take care of their own data. Nothing outside of the models should be able to change these data. Avoid setters for **every** models. That's basically the message. Code your behavior (acting on data) where the data is, in the same class. 
Rich domain models works only in specific domains, but when adds cross cutting concerns, validation, authorization, logging, 3rd party sync it become a pain to inject all those dependecies into "domain" objects, and serialization/deserialization also is hard, orms do not support these rich objects... I'd recommend to use Anemic Model first and augment it with only trivial behaviour which do not requires any external dependencies. And do not listen that it's anti pattern - it's not! Data is data, behavior is behavior.
This is what a service is for, managing two or more aggregates. Order should never know about anything outside itself.
I don't know what's a rich method... and I don't know what your dependency is. If it's another model, well it's normal that some models are dependent to each other. Be careful though that this dependency is really **needed by your domain.** If you need a dependency which is not domain related, you have a problem in your architecture / understanding of the whole model. It is true that having behavior and data together force you to be a bit cleaner architecture wise, you can't mix everything you want in (bloated?) services. `validation constraints that go beyond what is locally available` Again it's difficult to know without context but if the validation constraint go beyond what is locally available, either way you create a new dependency (again, if it's make sens in your domain!) or you create a new model to handle this case. 
Thank you!
Narrowspark Automatic improves composer in many ways and is much more powerful like a composer script. \- It can configure package for your project like copy files, register provider/bundles to your application (if the configurator exits for this task and the package supports automatic). \- It can generate projects based on your skeleton answered questions \- It adds a parallel downloader with the possibility to skip old package tags (for a faster download)
Logging, authorization, 3rd party sync should not be injected in domain objects. Look at your behavior: what does it do? Most of the time it format / modify / read / write data. Data and behavior are always linked.
Nice read, but, I'm still not a fan of 'Rich Models'. My issue with the 'Rich Model' is when you get to more complicated use cases. If a model needs to talk to different services in order to run and you end up hiding implementation details in lower levels. A debugging nightmare. IMO, if you need to make changes to other services it should be done in the controller (on afterthought, possibly for me, could be equal to a service layer?). That way you can see on a high level what is actually happening when you are running that command. For me, the only dependances I pass into a service are the ones it needs to create a model for a 'fetch' method. For example, if it was a block of text, maybe a Database Service (to get a connection), and an I18n Service to map multiple translations of the said text. And then, I tend to only call fetch/search methods. Any validation is usually done on the setter, as IMO, a model should be in charge of ensuring its content is correct also. And if you don't want part of your code to change a property, for example, an id, then I don't add a setter. My only caveat is I include a Json Serialise method on all my models. Mainly just to ensure, the model is only giving out the data it needs to give out when rendering. As a stretch example, a User model would only return Display name and maybe an id. Not say the password field (like a said, a stretch...)
&gt; it become a pain to inject all those dependecies into "domain" objects You shouldn't be injecting things like auth, the domain is the center of everything and doesn't look outside. The application layer guards the domain, for example: the domain can transfer funds from one account to another but only if there are sufficient funds (domain rule). You could have two applications, 1. a banker who can move funds anywhere, and 2. a user who can only move funds from their account. The domain cannot know about these.
&gt; Any validation is usually done on the setter, as IMO, a model should be in charge of ensuring its content is correct also. What if two setters/properties can disagree? E.g. `::employer` and `::employmentStatus` if setEmployer does anything more than set a property then you are wandering into rich model land.
If you need to set both then, both values are passed from the Controller into the Service then the Service tells the model to set each one. &amp;#x200B;
why not move that logic into the model?
Mainly because it means if there is a bug or need to change the implementation method in part of that code, I have to navigate down at least 3 layers to find it. If then there are multiple steps to set the employer, and then multiple steps to set the status, you open a massive rabbit hole. Then you also break the separation of concerns, because you are asking your set employer method to set the employment status too. If you move it up a layer you have the implementation on the second layer down making it easier to read. &amp;#x200B; &amp;#x200B;
First off, I enjoyed your writing style. Bit hyperbolic but that's okay. Secondly, the reason that Symfony (as well as most other frameworks) tend to use anemic data models is that their applications are primarily CRUD and there really is not much "business logic". Your startup presumably want to to actually to actually start taking orders as quickly as possible which means they actually need persistence and form generation and validation and what not. All of which you get pretty much out of the box by following the standard practices. Does not really matter how great the your domain model is if you have no orders to send it. But the real problem with the article is that you skim over so many real requirements. For example, you rather proudly note that Shipment::create sets a warehouse property. Something the anemic designer forgot. But how the heck is the shipment model supposed to know which warehouse it will end up in just based on a list of orders? You also talk abut how your Shipment::create adjusts the inventory. I'd have to see the complete design but I'm not so sure that I would want to rely on shipments for inventory control. Plus, I'm not too fond of the notion of having a Shipment::\_\_construct method as well as a Shipment::create method. Seems all too likely you would end up with inconsistent state. And this brings up a fundamental problem with these sorts of "introductory" type articles. Life is complicated and trying to boil things down to the fundamentals is really hard to do. What I would like to see is a link to a full featured, working in production, real application which shows your ideas in action. Without such a link, the article is fun to read but of very little actual value. &amp;#x200B;
But you are open to two different services manipulating the model in different ways. You either have 1. a model that can be in a bad state because it relies on external service**s** calling setter**s** to manipulate it, or 2. a model that is consistent because anyone that tries to `setEmployer` also causes status to be updated at the same time.
DTOs and ADMs are from different realms, no? \- Entity, DTO, Value object \- Domain model (anemic, not anemic)
Good catch! I'll need to fix that.
&gt; Event Sourcing does not exist without CQRS. It does. See `git` &gt; The idea being on read you execute commands that raise events and update the aggregate as needed. Not on read, but on _write_ you reconstitute the AR and then apply the latest change, which raises and event. (i.e. you "log" that a thing happened) On _read_ you have several options depending if you use CQRS or not. You could read from a projection (i.e. a DB). You could read from the event stream (i.e. you listen to all the events and have "something" creating state of that). The most basic pattern would be to reconstitute the AR and use that as your current state to generate some ReadModel. (or use the AR itself as a ReadModel or more commonly "entity" or "model"). &gt; Frank's library doesn't stress a read repository and write repository. Actually a single repository does both. Is it pragmatic or overly simplified? Because you don't need to split the two. Yes it makes a lot of sense to do so, but it's not mandatory at all.
Not really, because you shouldn't have 2 different services editing the same model. And if you need to make a change to that model, you should tell the service to do it. IMO, Your controller should be in charge of handling multiple services; your service should be in control of handling the model; and the model should be in charge of making sure the data is correct.
First of all thanks for the article. `public function complete(Order $order) {` `...` `$this-&gt;shipmentRepository-&gt;save($shipment); }` I always feel uncomfortable when see some "save" repository calls in domain models. Looks like an entity knows about persistance. I know that the idea is about that we keep pretending that we have collections/repositories and know nothing about persistance layer but it still looks not ok for me just because "save" is not a part of domain ubiquitous language. &amp;#x200B;
I did this certificate about year ago and right after I passed I realised that is waste of time and money
&gt;Data is data, behavior is behavior. It depends on how "object oriented" (in the Alan Kay sense) you want to be. The rich domain model approach is very OO. I agree with you that a rich domain approach leads to large objects with lots of dependencies. But, ideally, the big outer object is composed of smaller domain-specific objects. That should keep things testable/mockable, etc. At the end of the day, I do agree with you, though. Having data and behavior being separated is generally better. It's much easier to reason about, design, and test code that is mostly plain-old-data being shuttled through pure functions. But, like I've said before here, PHP developers are just now discovering OOP while the rest of the community is trying to leave the bad parts of OOP behind and embrace more functional approaches. So, we'll continue to see PHP become more and more like old versions of Java.
For your example, I think it'd be fine to have `setEmployer` modify both fields. It's still a **far** cry from a rich domain model. Actually, just to nitpick your example, you don't need an `employmentStatus` field anyway. You can just have `getEmploymentStatus()` return `UNEMPLOYED` when `::employer` is null.
&gt; Logging, [...] should not be injected in domain objects. So how do I log? Dispatch an event and add a listener for every single thing? Or move responsibility of logging to the caller and risk losing coverage?
If follow DDD and use Rich Domains then you should inject, somehow, authorization. If not how these Rich Objects will now is this operation permitted or not for a given user? Also objects should somehow have a context about which user is working on if system is multi-tenant this become more complicated. Okay if these Rich Object will be lets say Deep Domain Rich Objects so how would be possible to use them? Create new objects which wraps these Deep Domain Objects and augment with authorization (Decorator/Proxy Objects, etc.)? Real Bank Accounts domain is complex topic and question "sufficient funds" is not so simple to answer and write down as method to Rich Object. So okay, as I understood there should be Deep Domain Layer of "domain" objects, and Application Layer of "application" objects (which controls how these interact?) And on top of that maybe some Persistence Layer (ORM, instantiation, serialization/deserialization)? And how to know which domain rule belongs to whom? How would we separate where rule goes? To application layer or domain layer?
If it looks like a DTO and quaks like a DTO... Plus I have never heard of anemic domain models until now. I give you that you can have the term "anemic models" (still no different than a DTO) but as soon as you have "domain" in the name you have to have... domain behavior.
Yes, I think "Clean Code" videos/books began that OOP movement in PHP world, and it's crazy how it spreads. You must use that - not that - it's anti-pattern - it's bad - you've lost encapsulation - wrong abstraction - you should move that there-here. We'd missed that PHP is not long-running process and every abstraction must be instantiated on each request, we must de-encapsulate everything when writing data back to databases, to endpoints, to files. The most missing point is that today is almost no one uses or creates proprietary libraries (compiled) and OO inheritance was only way to extend it. Today you just fork a library make a change and submit PR. Internal projects contains full source codes in git, if there is a need for change just replace a line in a code. There are no need for sophisticated method invocations (inheritance, state patterns etc..), switch statements and if statements is enough for 90% cases. But yeah, it's not smart enough to use that in projects! :-)
Well, I also disagree with almost all of your complaints as well. So I guess I'm just very disagreeable. &gt; We'd missed that PHP is not long-running process and every abstraction must be instantiated on each request Irrelevant in most cases. Most of these abstractions (classes, inheritance, encapsulation) are cheap or free. Not to mention, PHP in the wild is bytecode cached, so you're not actually recomputing all this stuff on each request. &gt; The most missing point is that today is almost no one uses or creates proprietary libraries (compiled) and OO inheritance was only way to extend it. Today you just fork a library make a change and submit PR. And if your PR is rejected, now you are maintaining your own code *and* a modified upstream project. Bad plan. &gt; Internal projects contains full source codes in git, if there is a need for change just replace a line in a code. There's a difference between extending or specializing something and changing something. &gt; There are no need for sophisticated method invocations (inheritance, state patterns etc..), switch statements and if statements is enough for 90% cases. The issue is not that these things are "sophisticated". I've seen inheritance chains that are anything but. The issue is that inheritance is often the wrong abstraction and just makes the code less flexible in the future. Plain old data is best, but interfaces are also appropriate in many circumstances. I try to avoid inheritance except when creating custom Exceptions.
Maybe because of this ? [https://nova.laravel.com/](https://nova.laravel.com/) 
Well, everything depends on situation. If loads are high enough then "cheap or free" become a hassle. If PR is rejected then you probably are using wrong library for a task or there was already a way to do what you did. I've seen too much sophistication for OO extendibility for no reason in projects (private, not libraries or frameworks) and asking why is that? Almost I hear that it's just in case if someone's will need an extra feature.. That's why I'm against "OO for everything" in general and courage to look for simpler solutions at first. OO is not bad per se, but definitely over-abused and everyone has it's own "OOP thinking" view and it's hard to discuss because of different people different understanding of what OO is and what concepts means. And I hope someday this madness will end and we'll not hear statements like "hmm, this code seems not too OOP.. we need to refactor this.." or "You are using Anemic Model anti-pattern here, it's bad.." No, I'm not using OOP everywhere and if from OOP perspective it's called anemic model anti-pattern, but from FP perspective it's a best practice then.. whom is more correct? 
Why are you complaining about having to go down multiple layers then? If there’s only one service per model then your structure is Controller —&gt; Service —&gt; Anaemic Model But you could instead just go Controller —&gt; Rich Model Maybe I’m misunderstanding but it seems like it’s the rich model that solves your problems, not the anaemic model. 
The dependency definitely is part of the domain. Unfortunately we are using doctrine entities (not my call) which - afaik - don't allow injecting dependencies. If I weren't using doctrine I'd still prefer a service layer, with read-only views for querying my domain, and command dto's for interacting with it.
In simple use cases yes it would, no problem. But as soon as you get to a complex model with a lot of data it gets to be a very big class. if then you need to add something to that class, then it gets even longer. If you are splitting your code into logical steps its easier to maintain in the long run. 
OOP is about behaviors that act on the data, you cant separate the two. If you insist that data is data, behavior is behavior, then you aint doing OOP at all. 
My understanding is that DDD encourage putting that in services. Some frameworks have used more complicated solutions, like an AOP framework that can intercept the domain model's method call. Those solutions tend to have costs associatedwiththem,like performanceandcomplexity
Yup I agree with you. The article is good in general, except that the domain models ain’t supposed to be aware of persistence logic. This repository save method should be called in the application code/service instead. The rich domain models favor putting domain logic in the entity classes, but not anything else. Application and persistence logic should still be kept out of the model. 
FP does not encourage Anemic Model. Idea of Anemic Model refers to object with mutable state, but without any constraints or any other rich behavior. FP is all about immutability. Immutability allows you to make assumption that data will change only when you will get it back from a function and therefore avoid "spooky action at a distance" that is hard to trace. Also, PHP seems to be strongly gravitating towards Domain Driven Development which encourages strong focus on communication and language. OOP and FP are there just ways to make abstractions that are expressive and understandable even for nontechnical stakeholders i.e. domain experts. This includes OOP idea of rich mutable entities that mimic actual business language and enforce business constraints. And immutable value objects for things that do not have any identity like dates. &amp;#x200B; So, we encourage both abstractions (OOP and FP), but each used in an appropriate situation.
no
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; If loads are high enough then "cheap or free" become a hassle. If you need performance so badly that inheritance is noticeably slowing down your code, then you should have dropped PHP a **long** time ago (probably should drop it when you get the chance anyway). &gt; OO is not bad per se, but definitely over-abused and everyone has it's own "OOP thinking" view and it's hard to discuss because of different people different understanding of what OO is and what concepts means. For sure. OOP is a very nebulous concept. That's why I specified in my original comment that I was referring to the Alan Kay concept of OOP. Mostly, people just seem to mean "inheritance as subtyping and code reuse." &gt; No, I'm not using OOP everywhere and if from OOP perspective it's called anemic model anti-pattern, but from FP perspective it's a best practice then.. whom is more correct? To be fair, PHP is not a functional language. You can borrow concepts from FP, but chances are you have to have some weird mix of both.
I'm glad that you and several others also feel uncomfortable about this! This is my biggest gripe with ORMs in general. The data models are responsible for their own persistence. This means you have code that can mutate the global state anywhere that the models are used. They kept telling us that globals are bad, but these self-persisting objects are no better than globals! &amp;#x200B; What I always do, in basically every language I use, is create a Database class that wraps around all of the ORM/database junk. Its API takes and returns plain-old-data objects and only converts them to-from ORM models internally. This way, I know that all persistence only happens in my one database object, which can easily be stubbed out for tests, etc.
I think it’s a difference in implementation of the status. In that example, the service would take care of determine the employee status and I wouldn’t put it as a field in the model. This way the status is determined by logic not a database, table, decoupling it from the model. And then the model doesn’t need to know what the employment status is. All it knows is the employer or if we were to extend the examples employers.
 `First off, I enjoyed your writing style. Bit hyperbolic but that's okay.` Thanks! `Secondly, the reason that Symfony (as well as most other frameworks) tend to use anemic data models is that their applications are primarily CRUD and there really is not much "business logic". Your startup presumably want to to actually to actually start taking orders as quickly as possible which means they actually need persistence and form generation and validation and what not. All of which you get pretty much out of the box by following the standard practices. Does not really matter how great the domain model is if you have no orders to send it.` In that case I think Symfony should state it: the framework with Doctrine can be used for mainly CRUD applications. Now I work in startup and I can tell you that managers want to add so many (complex) functionalities that the CRUD application become quickly a big ball of mud. I worked as well in an e-commerce and you don't want some pure CRUD framework supporting a whole logistic system. The startup has a business to grow, I agree, but I don't think it's more complicated to, at least, follow some good design. I'm stop speaking about the whole DDD here. `But the real problem with the article is that you skim over so many real requirements. For example, you rather proudly note that Shipment::create sets a warehouse property. Something the anemic designer forgot. But how the heck is the shipment model supposed to know which warehouse it will end up in just based on a list of orders?` `You also talk abut how your Shipment::create adjusts the inventory. I'd have to see the complete design but I'm not so sure that I would want to rely on shipments for inventory control.` `Plus, I'm not too fond of the notion of having a Shipment::__construct method as well as a Shipment::create method. Seems all too likely you would end up with inconsistent state.` `And this brings up a fundamental problem with these sorts of "introductory" type articles. Life is complicated and trying to boil things down to the fundamentals is really hard to do. What I would like to see is a link to a full featured, working in production, real application which shows your ideas in action. Without such a link, the article is fun to read but of very little actual value.` I globally agree as well. However this kind of article to me is good to create the discussion and see what the experience of others developers about the subject. It can help juniors to understand some different concepts as well. Now I would like to describe in detail a whole complex application but I don't have one. I work on some, but of course the code is not open source. In short: what can I do else to try to explain some important development concepts? 
That's interesting. What do you mean by "the rest of the community who is trying to leave bad parts of OOP"? Any recommendation for functional language? I never really dived into it (I know the basics) and I need to do so :)
I mean that most modern languages are adopting more and more lessons from functional programming and shying away from some aspects of OOP that haven't actually made our jobs easier. Adopting lessons from functional programming means including immutability at the variable binding level (C++ has `const`, Rust has `let` vs `let mut`, Swift has `let` vs `var`, Kotlin has `val` vs `var`), and focusing on pure functions (same input always gives same output). Instead of having data objects able to change their own state, you pass data into functions and get new data out without changing the inputs. Bad things from OOP include inheritance (because it's very inflexible once it's more than 1 level deep) and mutable state (such as with these rich domain models). Rust is a good, soft, introduction to functional concepts since it makes it painful to have a lot of mutable data, and there's no inheritance. I also really enjoyed working with Elixir and Clojure, but Clojure might be off-putting with its horrible start up time and weird syntax.
Hmm, I don't use Laravel so didn't know.
`In short: what can I do else to try to explain some important development concepts?` It was a genuine question I ask myself as well. A small working application will have the same default: some shortcut which doesn't happen in real life. If you don't want shortcuts you need the pressure of a real business behind your application. Otherwise how can you know what to implement? Even though: let's say that we have this application full of logic, domain entities, aggregates and whatnot ; I could describe why the anemic domain model is better. To do so I would need to describe everything else, otherwise people won't understand. What do you have at the end? More a book than an article. Something like Vaughn Vernon's Implementing Domain Driven Design. You want to have a very complete view on the subject? This is your book (and Evan's book as well of course). &amp;#x200B;
Probably because there is no practical use for it. After all, it’s a joke. 
If you're anything like me, Rust will blow you away. I did a smallish backend project in Go for about 4 or 5 months and I enjoyed it, but then I tried Rust and it became my favorite language almost immediately.
&gt; If follow DDD and use Rich Domains then you should inject, somehow, authorization. If not how these Rich Objects will now is this operation permitted or not for a given user? If there are multiple aggregates involved, that would be handled by a domain service, would it not? For example, a withdrawal from an account might be handled like this: //application services $accountID = $this-&gt;session-&gt;get('account_id'); $withdrawalAmount = $this-&gt;input-&gt;post('withdrawal_amount'); $currentUser = $this-&gt;authentication-&gt;getCurrentUser(); //domain repositories $account = $this-&gt;accounts-&gt;find($accountID); $bankMember = $this-&gt;members-&gt;find( $currentUser-&gt;bankMemberID ); //domain service, handles validation requiring data outside of the Bank Account's concern if (!$this-&gt;transactionGuard-&gt;canMakeWithdrawal($bankMember, $account) ) { $this-&gt;notification-&gt;error('You are not authorized to perform this transaction'); return $this-&gt;redirectToMainMenu(); } //handles validation only requiring data the Bank Account is aware of, such as balance and account status $withdrawal = $account-&gt;withdraw($bankMember, $withdrawalAmount); Of course, this may be a naive implementation, but I've done similar things in large projects using DDD and consider this methodology successful in keeping domain logic in the domain layer. 
PSR-8 is not yet accepted, so releasing v1.0.0 of your package is very risky Imagine how foolish you'll feel if the interface changes between now and then?
Shameless self-plug: [https://ayesh.me/Upgrade-PHP-7.3](https://ayesh.me/Upgrade-PHP-7.3) I started this back in April, and have been keeping up to date since. I was slow for the past 2 months, but I will update the post soon too. 
Changes to (persistent) state aren't the only relevant things to log. For example, in my current project there are strategy objects that take into account a lot of data (not all readily available) before committing to a simple choice... without logs on those decisions we lose critical data. We might be able to break those strategies up for the sake of architecture, or we could retroactively try to retrace the decision whenever we need to; but either way would be a lot of effort for a net loss. Pragmatism is often an excuse or a crutch for bad craftsmanship. For the record, I always try to solve these issues without mixing logging into domain objects first. I welcome any advice on this but the arguments against anemic models I'm aware of (so far) simply don't hold in all cases.
&gt;Unfortunately we are using doctrine entities (not my call) which - afaik - don't allow injecting dependencies Alternatively you can pass the required services to the methods. So you have a bit of a middle ground: it's a rich model but you need to inject the related services to do a given operation. 
IIRC, it's only ORMs that follow the ActiveRecord pattern that do this. Data Mapper does not. 
Then simply release 2.0 and all is good in the world. 
Indented heredoc will be useful purely because I deal with a lot of old code which isn't indented *at all* (don't ask) with a lot of heredocs - trying to tidy it up is a pain in the arse without being able to indent them. 
Is this package FreeBSB Hug Compliant?
This works for that basic use case, but what about if I have a form e.g. with a person's details (first name, last name, phone number, address). How does it work then? &amp;#x200B; &amp;#x200B;
It might work for you and it might be nobody else ever has to read and understand your code in the future. This rarely (almost never) happens. But my advice: Follow the fig standard. Note: get a proper IDE and put code comments in doc blocks above methods if you want to easily see, even from other classes on cmd-hover if your methods change data. Use setter methods to change properties.
Assuming I understand what you’re asking, you’d need to setup the ODBC on the server that you’re remoting into, and then use the server’s “desktop” to do the work of pulling the data. To rephrase a bit, an ODBC configured on your computer won’t “pass through” the RDP session.. f
You could use a ssh tunnel. That would let it pass through. 
Why can’t you connect directly to the server?
Can you SSH into a Windows server though?
Not natively, but if the OP has permissions to install programs, you can add ssh support.
Unless someone forces AR style methods into a data mapper ORM. And then you're in hell with weird persistence bugs. 
This whole proposed setup does seem like a very specific Rube Goldberg Machine.... 
No, but I think I get what you're doing here, kind of keeping class methods/behaviors separate from closed functions. I typically structure my code files themselves to keep my "helper functions" at the bottom and my class methods above them. For instance my C# code files tend to be code-collapse grouped as: 1. (private) internal variables 2. (public) Class Properties 3. (public) Class Methods 4. (private) helper functions
RDP sounds like a terrible idea. Do you *have* to use RDP?
Do you have the ability to install programs or services?
Aha. ODBC passing through is what I was hoping would work.
Not me directly, I can ask them to.
Yeah, its a Linux box connecting to a windows server to query a flat file db through ODBC. I think the best option might be for them to query and feed me a file on the Linux box.
It seems it would make more sense to set up SSH as a service on the Windows Server. It's trivial to tunnel a database connection through SSH.
I'm not a windows server guy, but will ask them. Very comfortable at a Linux shell prompt.
If someone ever has to read your code not knowing your personal conventions will think you're just an undecided jerk and probably change everything to camelCase when there's some free time to do it
Just wanna say, this is some of the most productive discussion I've seen on here in a while. Thanks for the post and having the balls to have an opinion and declare it!
According to this, PSR-8 has been abandoned. https://www.php-fig.org/psr/
Always camel case imo
Follow the project's established standard. If you're creating a new project, use the standard that makes the most sense to you. If you want to get into a flame war, tell people from other projects why your standard is superior.
My question would be why do you have a class with no data? Wrapping a bunch of functions in a class is not doing OO - it is just disguised procedural programming. We will sometimes create helper/utility classes which only interact with injected data, but this is usually just to take advantage of auto-loading and will have all the functions static so the functionality is available without needing to instantiate the class. Doing this makes them a bit more of a pain to write tests for, but at least we are not fooling ourselves that we are dealing with actual objects. I generally find that the syntax of calling static methods is sufficient to distinguish them from calling methods on constructed objects without needing a change in function naming structure. 
are you on windows? /r/n
PHP provides a solution for this. Use PHP_EOL. It will use the correct line ending for your system.
Thanks! Just trying to pass what I learned ;)
You should have proper form handling (validations) and then if you need to do something you should provide the validated data for a model to act on it. 
Awesome summary!
Damn shame
Just refactor that part out into a new class so you don't need to switch the existing class between camelCase and snake_case.
If a method is not modifying internal state it is probably a utility method, make it private. If you are using this functionality from outside the object (you need it to be public) than you should probably extract this to a domain service object.
&gt; \n is creating some sort of corrupted whitespace which causes a fatal error on the PHP script. **it doesn't.** FYI, https://i.imgur.com/DK1ckG8.png
*whoosh* PSR8 was an april fools joke.
They set RDP up for you so you can set up the server. Its just for you to look at personally, your application would never access the DB through RDP. Thats not how RDP works. RDP is just what windows admins use instead of SSH for server administration. It sounds like you are expected to use the RDP connection to set up the database to be accessed with ODBC from another server. And then use PHP to connect directly to the db with ODBC.
No it's not. Imagine a CLI app where auth is the fact you have root on a machine. There is no user.
lol listen to you two with your strong opinions on a non specific imaginary example. What about `UNEMPLOYABLE` ?? How do you derive that?
This seems like an XY problem. You're trying to write these variables, but if all you're doing is trying to get the data into PHP it might be better to write to another format, like a JSON file, and then reading that in the regular PHP file.
This isn't difficult. If you have a model with a bunch of public setters then it is possible for a developer to call one and put it into an inconsistent state. That is a simple fact. 
You're probably talking about an Aggregate Root. Usually this is just one entity but you can easily have multiple entities living under one aggregate. E.g. User model is a root with Address models inside.
That’s difficult the way I went about it was trying to look at logical next steps then separate the big next steps into chapters 
Natively since Windows 10 Fall Creators update &amp;#x200B; [https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/](https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/)
I implement it like ``` interface Authorization { public function isAllowedToX(); public function isAllowedToY(); } interface SessionAuthorization { public function __construct(User $user) { ... }; public function isAllowedToX() { return $this-&gt;user-&gt;isAdmin(); } public function isAllowedToY() { return $this-&gt;user-&gt;isBlalbla(); } } interface CliAuthorization { public function isAllowedToX() { return true; } public function isAllowedToY() { return true; } } ``` For very complicated domains the authorization may return specification objects instead of simply true/false.
the workflow seems very wrong the RDP server should write the data to your Maschine or Provide a Simple API. i would advice you to write a Small GO / python HTTP Server which fires the query on request and returns the data. &amp;#x200B; if you a PHP only guy you could install IIS / PHP on the Win Server but that would be a massive overhead
&gt;no Is the correct answer. It's been abandoned so seems a pretty pointless exercise. &amp;#x200B;
&gt;This release is all about web developers. huh
Hang on. You're writing some values to a file, which will be used elsewhere, and you're writing them as a dynamically generated .PHP file that can be "include"d elsewhere? That's not the way you do things. Write them as CSV or Json or XML or somesuch. Loading an XML file into PHP as an array is a single line of code. Dynamically creating PHP scripts is not sensible, for all sorts of reasons. 
Indeed. Having a PHP script fire up an RDP connection is just wrong. RDP into the Windows server, and write yourself a scheduled task that regularly dumps the data you need and puts it in a file on either your machine or the Windows server. Then your PHP code can fetch it. &amp;#x200B;
Twig and Symfony are creating thousands of PHP files dynamically. So Blade and Laravel do. (Not that I am supporting the OP, who is apparently doing something unnecessary and overcomplicated, but one should make such generalized statements with a caution :)
It's not faster, once op-code-cached, there's not a single difference. It's also not simpler, it only creates bugs. e.g. you completely disable `\_\_DIR\_\_` and `_\_\FILE\_\_` with it. If anything, it's slower, as you _require_ the application to load all files at once when with autoloading it only ever loads what is actually needed per request. Composer is set up as quickly as running `composer init` in an empty folder, it's surely quicker than setting up minified dependencies and loading them correctly. You save money with, what, 20 bytes of white-spaces you save per file? Maybe you should just switch hosters. I get 2TB of webspace for like 5€ a month.
Since PHP7, op-cache is implemented and turned on by default.
Different thing altogether (but point taken). For the record, in the days before Ajax, I was doing dynamic DOM updates by having PHP code that generated dynamic Javascript. It worked really well.
What is going on [here](https://3v4l.org/1In1t)?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This is an underrated comment. DDD and the separation in meaningful layers combine concepts of object-orienration and functional programming: making rich abstractions, separating them from implementation details and isolating and minimizing side-effects.
Imagine that you made a node server that restarted after every request, every request that is made, you completely set up the server, process the request, and tear it down. PHP makes the data sent to the request available via what we call superglobals, they look like $_SOMETHING for example $_GET, $_POST etc, and a special pair called $_SERVER and $_ENV which deals with information passed from the host such as HTTP headers, system configuration etc. Data is sent back by pushing it to the output stream via commands such as "echo" or in more complex cases, using file IO to the output handles. 
Ok so PHP can handle multiple requests and creates a thread for each one? 
There are 3 typical "backends" that are used with PHP, and each handles requests slightly differently: * mod_php (Apache module): Runs as an apache module - loaded for every request, regardless of whether it needs PHP or not. Obviously lives and dies under Apache's direction. Scripts are run as the same user as Apache (barring additional modules or "workarounds") * PHP-FPM: Manages pools of "request handlers", much like a web server. Each pool can be individually configured (including php.ini settings). Using this method (with Apache), Apache doesn't load PHP at all, which can improve resource usage. Also allows scripts to be easily run as users other than the Apache user. * PHP as server: The PHP script itself is the application server and handles connections directly - see for example [php-pm](https://github.com/php-pm/php-pm), [thruway](https://github.com/voryx/Thruway), [Ratchet](https://github.com/ratchetphp/Ratchet) From the PHP scripts point-of-view, there's basically no difference between running via mod_php or PHP-FPM (there may be some differences in the contents of $_SERVER and access to Apache specific functions, but these won't be noticed by 99.9% of scripts). Under both these options, PHP runs in the traditional request=&gt;response, shared nothing "mode" - A single PHP script execution handles a single request and knows nothing about any other requests (without using outside storage such as sessions (which are just a combination of cookies and files), cookies, files or databases). For typical day-to-day web applications, mod_php / PHP-FPM is generally used. "PHP as the server", while isn't a new concept, isn't as popular (other than because it's not the traditional way PHP scripts run, why bother coding up an application server when you don't need to), but is still a very viable option depending on your project requirements.
This is a good explanation, but an HTTP server is already possible through ReactPHP or AMPHP and is comparable to NodeJS in form, function and performance.
Yes.
It also means you have someone knowing when things should be refactored or not :) In my experience it's the hardest part because this is where you need someone good at it and with experience which is usually the hard part to find.
And [vice-versa](http://www.cgi-node.org/), Node can be used as CGI handler!
Speculating but in relation to jobs maybe? I know here in the UK they're always advertising jobs for developers who know a whole bunch of Javascript frameworks, MySQL, OO-PHP (specifically Laravel or whatever the flavour of the month is), CSS, SASS, HTML5, Linux etc. Although dedicated Javascript engineers seem to earn more but I guess you'd need to know everything inside out to get those jobs.
It's a php release, so it's a useless remark. I don't think it'd very likely the next php release is all about sysadmins.
I think it's also worth mentioning the concept of a front-controller, since that is quite common and seems more or less unique to PHP. &amp;#x200B; With a front-controller you force all incoming requests to a single file, typically index.php, using a web server module like Apache's mod\_rewrite. That single file will then determine if the request is for an actual file/folder or if it as an application route and handle it as such. &amp;#x200B; Here is a little more on implementing it: [http://blogs.shephertz.com/2014/05/21/how-to-implement-url-routing-in-php/](http://blogs.shephertz.com/2014/05/21/how-to-implement-url-routing-in-php/)
A lot of missing pages. Have to work yet. 
Was thinking the same
My day job is 100% React, NodeJS, Javascript. All my personal projects are PHP based on Symfony. 
Awesome, welcome to the club. Don't see too many people from node world coming to the lamp world. Have fun, because you will.
Not where I live.
It is where I live, maybe it is the same for OP as well.
This makes me a little bit sad remembering every day that at my work we use a custom PHP framework that doesn't use MVC or anything like that, at least it (mostly) uses OOP.
That's what I am talking about, exactly. There is not enough information only to someone who didn't finish reading the question thinking they know the problem already. Do not show off your lack of experience so openly. 
Shameless plug in 30 s gifs: https://www.tomasvotruba.cz/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs/
I’ll teach you PHP if you teach me nodejs &amp; React...
There's two assumptions that can be made based on the information given: he didn't write the \n properly, or he's using the wrong linebreak. This posts covers scenario #2, and your post covers scenario #1. You're both making assumptions. Don't show off your asshattery so openly. As an aside, using PHP_EOL is preferred over just hardcoding \n into your program, so the comment is still valuable.
This is Golang application which do all the heavy work to parse user HTTP request into PSR-7 form ([https://www.php-fig.org/psr/psr-7/](https://www.php-fig.org/psr/psr-7/)) which is community standard for HTTP messages in PHP frameworks. Then it passes serialized PSR-7 request over long pooling socket to your PHP application. This allows you to run same script for multiple requests to gain a lot of free performance, write lambda function or do other stuff. Application manage everything from PHP creation, supervising, description and memory control. We are using it as replacement for Nginx + PHP-FPM on production.
Hi guys, I'm running a few home-made PHP apps that are constantly being used by work colleagues, etc. &amp;#x200B; I've noticed that PHP sessions are very short (10mins max) on shared hosting plans due to, I beleive, server garbage collection removing session files. &amp;#x200B; Any tips on overcoming this? Should I create my own session management than using native PHP? I want to prevent users to have to re-log for a good few hours. &amp;#x200B;
Coming frome nodejs check out swoole https://www.swoole.co.uk/docs/ I'm using it right now for some microservice applications in docker. 
If you are coming from a nodejs background "PHP as server" has the most direct parallels with how many people use nodejs with something like express.
Yes, also there are whole businesses running based on web scraping. For example, many product price comparisons use scrapers to get their data. And in this case the speed of the scraper is critical.
Just a note about the superglobals - you generally never have to touch them in your code. There are wrapper classes that do that for you, and you use those classes as a more consistent way of accessing that data. Even then, there is some pre-processing that PHP does to some of the input data that you sometimes want to avoid. For example, the names of any GET or form POST fields will have special characters converted to underscores, so `payment.amount` comes in as `payment_amount`. That can really catch you out when dealing with some payment gateways (grrrr). But again, use a wrapper to parse the input stream instead of leaving PHP to parse it into superglobals, and you can avoid some of these little nuances. 
How isn't his any different than manually creating the variables in a PHP file? 
I told you not to show off your inexperiencedness too openly. *There is no such scenario as #2.* At all. There is not a single problem that could be caused by a line break character in a PHP script. Neither a fatal error nor even a notice.
what if I remember it as e before i? How the fuck this hint is supposed to be any useful if there is no logic, no rhyme, no pattern offered?
Hi Patrick! Care to read the sub rules written right in the submit form https://i.imgur.com/DK1ckG8.png ? 
Would you not use behat for such a test?
I'm using "\n". When I open the file in notepad++ the literal characters \n do not appear. The file is written with the desired line breaks. I get a parsing error when attempting to include the file. If I manually type *the exact content* of the written file then it works. If I remove the line breaks then it works.
You have been told already. JSON. Your problem is likely not the linefeed character but a silly assumption that any text can be written to a PHP file and will never cause a syntax error. So you need someone who will be able to write a file for you that can be actually read back. so JSON is the solution. though you will have to learn arrays to use it 
I think my description of layers as upper/lower etc was a bit of lazyness on my point. What you describe is very similar to what I use.
It’s still a fun project. It’s nice to occasionally let go and see what happens.
My apologies, did not know. &amp;#x200B; Can we move the post somehow?
Where I work we mainly use PHP but some apps are in other languages from Node, to Go to C++ it’s always either been a concept or a better tool at the time, I learn and try understand a lot of languages so that I don’t isolate myself, though I tend to focus career wise it is always good to understand the others.
I'm sorry.
Yep, mostly PHP last 15 years. This is me trying to solve something only knowing enough about it to be dangerous. LOL. Thanks
Like I said, it is not linebreaks. I don't know where did you get the idea that you could write a free-form text into a PHP file as is and expect it to be always syntactically correct but well you are wrong. The idea is stupid to be frank. Like you've been told in many comments already, use some format supported by PHP, JSON preferably. 
Yep. I wrongly assumed RDP was more like SSH.
Now, just delete here and ask there. Hint: there are PHP configuration options that let you to change every single session parameter. Save path and garbage collection included. 
Is this SEO spam?
Well your problem is neither linebreaks or PHP syntax but illiteracy multiplied by stubbornness.
Alright dude. I'm trying to learn exactly what's causing the issue. No need to be an ass. You're just saying "it doesn't work", followed by jabs and insults. *Why* doesn't "\n" work? What is it actually doing compared to what I think it's doing? Why is invisible formatting causing this file to crash? Then you're saying something *doesn't* work when it *does* work. Can you see how that would be confusing for someone who isn't that experienced?
Well, the question was about Node vs. PHP, not raw PHP vs. PHP packages. Most PHP jobs pay better than most Node.js jobs, simply because Node.js is a rather "new" technology and most Node.js developers are frontend-devs that have been put into a backend-position, where backend always pays better than frontend, but switching from frontend to backend won't automatically give you a pay rise if you don't actually demand it.
It also gives you this great case in Laravel: $model = Customer::where(...)-&gt;first(); $randomModel = $model-&gt;first(); $sameModel = $model-&gt;first()-&gt;first()-&gt;first(); So we get into a situation where first() is INFINITELY chainable. So if you're returning from a function a collection, then calling first on it, great. But if you end up with a Model instead of a collection, you get the first element in the whole database table. Which you can then call first() on to query the DB again to find the first element... and so on.
Did you make the recaptcha? If not, stub it.
For?
I will look into this, thank you.
&gt; but is still a very viable option depending on your project requirements 
reCaptcha !== Captcha. He probably didn't make reCaptcha.
Reddit, and r/PHP in particular, will make you feel like you're in the minority. I do not believe that you are.
I before e except after c, or in “a” as in neighbor and weigh.
thanks for the replies and advices, i will try to stick to camelCase() in future 