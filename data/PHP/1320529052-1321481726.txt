Ok- but it certainly answered a problem I have with PHP projects all the time. My guess is it will help someone else at some point as well.
At least - unlike most misguided attempts to wrap PDO - he's extending it rather then calling it from his own class.
It's not a "PHP project". It's web development. And, this post won't help anyone, because it's been removed.
Her examples fall into the ridiculous failure of the new (5.3) ternary shortcut. &gt;$favoriteColor = $_GET["color"] ?: "pink"; If $_GET['color'] isn't set, you end up with warnings being thrown in your code for referencing an invalid variable and/or array reference. There's been great argument since 5.3 was released about how useless '?:' is due to the fact that it doesn't silence 'undefined' warnings like isset() or empty() would, so putting it to any real, functional use is nearly impossible. You can't say $option = $_GET['option'] ?: 'default'; without getting errors.
Well shoot. There were a couple of good links in there. I guess I'll repost on webdev
I really do hate this limitation, but to say '?:' is useless is a bit of a stretch. It's primarily useless when you're attempting to check and array or object key that could potentially not exist. I still use the operator while calling functions and such: $bar = $foo-&gt;getBar() ?: 'N/A';
$option = isset($_GET['option'])?$_GET['option']:false; Its not impossible. 
But then you're not using the shortcut, which is the whole point. test ? true : false is significantly different than true ?: false
If you're code is written where all you are doing with a GET variable is passing it to another variable your code is crap and can probably break or be hacked. You will always need some kind of validation which is going to be a lot more than isset(). Your point only applies to get and post variables. There are many instances where it will work fine. When I first started with PHP I didn't care about the E_ALL errors. Now I always do. PHP is a simple language. Its not like Java where you need to declare you're variable types and convert them. The fact you are complaining about is that an unset variable won't return false with error reporting turned on and you need to use isset() instead. In many languages it would terminate the whole program. Its not a lot to ask for a programmer to check for a variable to be set before using it.
Please remember to not go crazy with ternary operators. If you can't fit your whole operation easily within 80 cols (with proper whitespace) then use an if statement. 
&gt; Your point only applies to get and post variables. No... &gt; The fact you are complaining about is that an unset variable won't return false with error reporting turned on and you need to use isset() instead. No, I'm complaining about the fact that they added a shortcut which has very little use for what people actually want to do with it. It was touted as a replacement for other languages' (e.g. perl) use of "var = this || that", except that it really doesn't fulfill that function at all. It's another instance of php core gaining a shortcut which adds complication to the language, but adds no significant benefit. Another example is 5.4's [array shortcuts](https://wiki.php.net/rfc/shortsyntaxforarrays). It was added to "make PHP look more like another language" - that's the only real "pro" in the list. It removes the need to type 'array', but it complicates the language for no tangible purpose. ?: can easily be accomplished with "$var = x; if (!$var) $var = y;", but that's just too much typing for everyone. I am against adding broken or useless features in *any* piece of code. One of their cons for the short array syntax is that "Patch may be difficult to maintain in future", but they added it anyway just because typing "array" is so difficult that they'd rather spend extra time maintain a convenience feature for the next ten years.
Or Sendgrid
A whole article on the ternary operator? No wonder PHP is a laughingstock.
When doing this, is the compiler/PHP smart enough to immediately put the result of $foo-&gt;getBar() into $bar if it returns true? Or does it do: $foo-&gt;getBar() returns true Runs $foo-&gt;getBar() again to get the return value puts true into $bar
Cool I didn't know this existed... but when do you need it?
Please 80 columns isn't really necessary any more, we have widescreen monitors now. I still keep mine fixed at 120, but that's more because of GitHubs limitation than anything else.
I think he wanted actual words. If you use certain words it can also raise your chances of getting flagged as spam.
You're right, because only PHP has [articles](http://cprogramminglanguage.net/c-ternary-operator.aspx) written about the ternary operator...
I still prefer to stick to 80. It's plenty of space to get things done and forces you to keep your code more concise. It especially helps when writing javascript. For example, here's some javascript sprite animation code I wrote recently. It's much more readable when each line is constrained, and there's almost never a reason to go past 80... even when using crazy amounts of white space to line things up. https://gist.github.com/1342396 That said, to each their own. There are much more important battles to fight in the realm of code than 80/120 cols. 
It runs it once. 
I thought it was a bit silly to do a whole post just on the ternary operator, but after thinking about it I figured there was some ambiguity that could do with some publicity. Unfortunately, the ambiguity I was thinking of isn't shown in this post. Specifically, I was thinking about the fact that nested ternaries are evaluated left-to-right, whereas most everything else is evaluated right-to-left. If you have a nested ternary that looks like this: `$a ? $b : $c ? $d : $e` then at first glance, you might expect it to evaluate like this: `$a ? $b : ($c ? $d : $e)` since everything else goes right-to-left, but it actually looks like this: `($a ? $b : $c) ? $d : $e` In other words, the result of the first ternary encountered is used as the condition for the second, rather than having the second ternary only be evaluated to determine the return value for a result of false on the first. That wasn't one of my best explanations, but hopefully it gets the point across. ETA: Oh, and I should point out that ternaries can easily become unreadable even when there's only one of them, and they should be used with caution given to clarity. Nesting ternaries just seems like a silly thing to do, and I imagine it would almost always look like an unreadable mess at first glance. Computers don't have any issue parsing a couple newlines and braces, but humans can have issues parsing single, information-dense lines of code. Please think of the humans.
var_export() and error_log()
completely agree on nesting ternaries. it becomes unreadable very quickly
If a SET CHARACTER SET query is used along with that, depending on the character set used, mysql_real_escape_string can be vulnerable. Or, at least, it could be. I haven't used mysql_real_escape_string in some years. They may have fixed it by now.
Nice, I made a really tiny wrapper around Memcache that also uses memoization, I really love the pattern, http://demonastery.org/72/tiny-memcached-wrapper/ Used like this: $value = $c-&gt;cache('key', '30 seconds', function () { return 'Data'; });
Definitely similar. The difference lies in the fact that I separated the timeout setting from the access function because I like to keep those definitions in one place and not alterable dynamically at runtime. Also the fact that I haven't tied it to a specific memory storage because we use different storage strategies for different types of data we cache.
Yeah my wrapper definitely has a very limited use in comparison, but I just personally like the expressiveness :)
I've gone of that because I wanted the domain to be able to pass around parameters as well to those functions, or methods. There is still a method like yours in there $blog_post = $store-&gt;access('key', $id, array('BlogPost::findById')); :)
I had considered adding parameters as well but it would end up being pretty ugly when using it with anonymous functions (I have a thing for them as you can tell lol): $value = $c-&gt;cache('key', '30 seconds', $param1, $param2, function ($param1, $param2) {}); Although of course you can use 'use' to pass data through to anonymous functions which is really handy, which is exactly what I did when I used it for my blog :) But yeah, nice one :D
compact() is awesome to use with function returns. Do not use extract on untrusted data. I rarely use it myself because I worry other programmers will see the function and use it on user input.
This needs more upvotes.
This sounds more like Apache is forking or starting additional threads when these requests are coming in, and so your server itself is running out of memory while trying to handle all of these. If you're running on a VPS then this is particularly likely as they usually don't have a whole lot of RAM to begin with. I don't know enough about Apache off the top of my head to recommend how to approach it but it sounds like you need to change the way incoming requests are handled. See http://httpd.apache.org/docs/2.0/mpm.html for more info on that, but hopefully someone else will be able to point you in the right direction :) *Edit: particularly the http://httpd.apache.org/docs/2.0/mod/worker.html should help if not being used already*
Thanks! It very well could be my apache config. I've been trying and trying to tweak it but im still getting this. I've got the level 9/best vps plan through HostGator which has 4.4GB ram so ~100 pretty rapid connections shouldnt take it down.. Edit: Anyway, I've googled non stop with no luck. Chatting with HG support now, we'll see what happens. If we find &amp; fix what's causing it i'll be sure to post it in here so hopefully anyone googling it in the future can actually get some results.
Ah yeah I would expect that with 4.4GB ram you probably wouldn't be hitting it that quick even with a forking MPM :) But yeah good luck! Will be interesting to see what the cause is after all.
php is itself a good template engine so that makes this automatically retarded, just like every other php template engine. 
Use nginx.
i know r/php looks down upon w3schools(security issues) but i started off from there, just the basics in syntax and sql. the biggest and hardest jump for me was from functional / hardcoding to OOP. i always read that stupid.. car analogy or dog. also youtube has alot of tutorials that helps alot, i personally like videos from the user phpclass. hope that helps!
theres also method_exists($class, $function_name); so you can use something like this to check if function exist. if(method_exist($class, $function_name) { $this-&gt;$function_name(); } 
Apache config seemed to be the issue! I'll know for sure tomorrow (i use stumbleupon ads to stress test as literally with the click of a button you can have hundreds of stumblers pouring in... instant advertising system; little pricey though $0.05/person) but yeah StumbleUpon is a bit slower at these odd hours; mainly since my campaigns is targeted just to one semi-smaller interst. Basically, I changed my Apache settings around and raised the limits a lot for a few select parameters after doing just a little research on it; and that didn't help at all. After much more research (HG support didn't help much at all, told me to send in a ticket) i found out that my settings were quite off from what they should be. For example, ServerLimit and MaxClients need to be equal to eachother if over 256; and they were not equal to eachother. Lowered the timeout time, Max threads i believe it was and a few other things. Seems to be good to go but i'll confirm that for sure tomorrow.
You can also let your email be hosted by google apps. If it's a personal/non-profit site, it's even free! I think you'll be able to use your own tld for the email then. Don't quote me on that though.
Vanilla PHP is a reasonably good template engine indeed, but it doesn't provide easy and clean ways of doing things out of the box. Just take output escaping for instance. It is tedious writing htmlspecialchars every time I want to output something from a DB. What reason is there not to use a utility class like this? It's not that I agree with all the design choices made here but it clearly simplifies some part of the templating, without adding lots of overhead or complexity.
I saw your template engine a while back and liked the general idea. I tried writing my own solution, with some differences from yours, but clearly is your idea in a different packaging (https://github.com/runfalk/Litter). One key difference is that modification is never done in place in Litter, it always returns a new object with the modified value. I got inspired by your template inheritance gist and did one with super() support as well; without using a magic token. I'm not really fond of the use of static methods in Chano over all, since it permanently modifies the state of the class. For most use cases this is fine, because it's only used once; when outputting a template. I do like the idea of your templating engine. The documentation is thorough and simple to follow. I do however question the necessity of some filters/function and the lack of some. It's a good project. Be proud.
Heh, Litter looks very nice - I like the way you are trying to interpret everything as an iterator, and also inspires me to add more error checking. Thanks for sharing that! My first thought of template inheritance had the template name in the extending block like yours do, but for me it was more important to preserve the variable scope for the parent template - that also made it necessary to use the magic token. I agree completely that its a trade-off using static functions / variables, but wanted to avoid the "$c = new Chano(); $c-&gt;extend()" noise. I might regret that later on :) Am interested in which filters you miss? Oh an thx! ;)
Check out the high performance example httpd.conf that installs with apache - or google it.
The reason I killed the scope was that I wanted the controller to pass one Litter instance containing an array with all data the view might need. That instance is of course available to all parent templates as well. My philosophy is that generally there will only be one Litter instance that always will return new litter instances when accessing data. There are of course times when the view might want to create new instances; for instance when doing a foreach loop n times. I am considering the equivalent of your ::with($val) for that, since PHP's new sucks balls. The filter I miss is a way of creating a group iterator (like -&gt;group() in Litter) from the current value, for outputting a list of items, say three per row and ceil(n / 3) rows. I do not like that there are two functions toggling outputescaping, autoescapeoff/on, why not just -&gt;autoescape($on = TRUE)? Glad I inspired you, as you inspired me!
One you should do is to check the size of each children in Apache and from there calculate how many clients you can actually spawn without crashing your server. If you raise it without knowing this, you will hit an OOM (out of memory) condition and the server should start killing processes, probably the children of worse (a database). Also depending on what you are doing with PHP the children can grow at any size and they cannot reduce their memory usage until they die. For example you app can use around 30MB, so if they don't die soon enough you will be serving a lot of requests even if it is only static content and take up a lot of memory, also you don't want them to die too soon as "forking" is an expensive operation (slow). You may want to raise just a bit the max clients and also set how many requests they should server before they die (please don't choose unlimited).
It's important to look for recommendations on good books, however. Like online blogs and tutorials, there are countless books (unfortunately, seems to be more common in the PHP world) which are just as bad or even worse. 
You are neither getting errors nor warnings with that. You are getting a *notice*. - Notices are debug messages. Suppresing them with isset/empty is only advisable if you certainly don't need to debug said option *ever* again.
A PHP noobie can make a WordPress plugin, just not very well. The better you are at PHP the better your plugins will be. WordPress plugins aren't anything special though.
Not good at all. Wordpress is heavily used because it doesn't require a high skill level to put something out, and the documentation is pretty good for the novice. Now the quality of the plugin will probably be determined by the skill of the coder, but that's another matter. ;)
did you unlimit before starting apache? back in the days we had to unlimit (csh) and perhaps increase file descriptors if not dynamic or hardcoded before starting apache daemon or you might run into both problems. (note i haven't done hosting in like 8-9 years). 
the simplest wordpress plugin I've ever written has looked something like this: function blah( $content ) { $content = str_replace('porn','pr0n',$content); return $content; } add_filter('the_content','blah'); I think that's about the most simple version. If that made sense to you, then you're good to go. The codex is very useful: http://codex.wordpress.org/Function_Reference/add_filter
Judging by most WordPress plugins, not very.
depending what you want to do.
Zing!
WordPress is well documented so just jump in. It's helpful to look at the code of other plugins you're trying to emulate (but the simpler the better). You'll make mistakes and if you're like the rest of us you'll look back at your code a year or two from now and shudder. But if you never get started, you'll never get started.
Sadly, this is true. And that's the main reason why rest of the dev world sees PHP developers as a lesser kind of programmers. There is so much crap in apps that are considered "good examples of PHP" that when you see it, you'll turn 180deg and walk away. In WP case it's mostly due to its &lt; PHP 5 roots (is the newest version a complete rewrite or are they still lacking any OOP model?) and lack of coding standards that would have to be obeyed by contributors (aside from core I guess). But to answer OP's question: I'm betting you're thinking about taking a job where writing a WP plugin is in requirements? If so - spend an afternoon or two with the code and you should be ready for simple stuff.
&gt;is the newest version a complete rewrite or are they still lacking any OOP model? Nope. [Drupal is making more strides in this than WordPress, however.](http://drupal.org/node/1263478)
&gt; Suppresing them with isset/empty is only advisable if you certainly don't need to debug said option ever again. That's about the silliest thing I've ever heard. You check your variables to ensure that they're valid and don't cause issues with your code. If your code is throwing *any* errors, you have something wrong which needs to be addressed. Invoking the error handler is slow, and the error handler is invoked even if error reporting is off or set to a low value.
There is NuSphere PhpDock, it does not require you to change any of the code so it would work with MYSQL. I would not recommend this though. I would imagine code execution speeds would be pretty slow. I would port the application to a language which would be better suited for it. Learn Python, its pretty easy to get your head around if you already know PHP.
I appreciate any help, thanks!
If it's to distribute to desktops as a packaged app, you could look at the likes of [Titanium](http://www.appcelerator.com/products/titanium-desktop-application-development/).
So, the 'Cannot allocate memory' error sounds a lot like an APC issue I've seen recently. In certain versions (at least on RHEL/CentOS), there's a bug that will incorrectly keep objects cached indefinitely and thus, exhausting APC's memory limit. Are you using APC? If so, the fix is to set the TTL to 0 in apc.ini which tells APC to clear the cache as soon as it's exhausted.
Glad to hear you've sorted it out! :)
Thank you, using Y instead seemed to do the trick.
I switched to gmdate like you suggested. It was a quick fix by just using Ctrl+H replace.
Or [PhoneGap](http://phonegap.com/) [Comparison between Titanium and PhoneGap](http://savagelook.com/blog/portfolio/a-deeper-look-at-appcelerator-and-phonegap)
what does using php have to do with abandoning cross platforminess? PHP is cross platform by all definitions of the word i've heard. 
i know that's what it is.. that makes it inefficient, but still cross platform. especially now that php has the embed sapi makes you feel good to try to talk down to somebody on the internet though i bet. EDIT: there are other alternatives as well. like a phar file with a php embedded webserver. then you just have to bundle the runtime and access it via the browser. 
Standalone executable != "compile to machine code". None of my python scripts are "compiled to machine code" until they get executed on the client's machines
I'm quite aware of the pretend-everything-is-an-error and microoptimization memes. But as a matter of fact, scripting languages do not depend on initialized values. NULL is a perfectly legal value too. The notice in PHP in particular is a development aid, not something that has to be avoided at all costs. I'm also coding heaps of `isset()`s in my code, mind you. (It's pointless, but don't have a more professional error handler/manager either). But mostly for library code, not everywhere, as that's just severing debug options. Once you used xdebug post-factum to trace which of the 20 isset-silenced variables was undefined (what a notice would have old you on the spot), you might change your mind too.
&gt; Once you used xdebug post-factum to find out which of the 20 isset-silenced variables was undefined (what a notice would have old you on the spot), you might change your mind too. I don't know about you, but I use isset() and other functions for validation *before* an error, not to suppress a problem. I've been writing and debugging PHP since the 90s, and doing line debugging since DBG was released in 2000, so these are hardly new concepts. Not throwing errors is not micro-optimization. In worst case code, it can be pretty significant (running PHP 4 classes on PHP 5.3 with thousands of E_STRICT and E_DEPRECATED messages thrown in just a *small* app exection.). Best case it means that you know what you're doing, and that when an error IS thrown, it means that something is wrong. Knowingly leaving error-throwing code in a production-level release is unacceptable without extenuating circumstances. Every error needs to be logged, especially in production, and they need to be sorted through and resolved. The only difference is that in production, you *never* show them to the user, while in development you *might*.
Most people would call a python script cross platform even though it generates .pyo files on the machine. I just think you're taking it beyond what most people consider cross platform. This is why i prefer working on web stuff incidentally. let all you folks deal with that stuff so i don't have to.
i realize you are describing the "pure" definition of cross platform. More so than was intended by the question i think. My apologies. Not sure what you think when you have somebody you don't know calling you buddy in this context, but it's rarely friendly.
Notices are *not* errors. The classification is not just for decorative purposes. There are actual coding bugs covered by it (unquoted strings AKA auto-declared constants). But undeclared variables don't *always* constitute an *error*. Pretending so leads to the typical isset-error-suppression constructs. E_STRICT and E_DEPRECATED also belong in the notices class. Many are genuine problems. But others very much debatable language degenerations (like constraining method signature polymorphism, or disavowing runtime pass-by-reference [in a scripting language!] because the memory leak couldn't be fixed). Going back to the example at hand, it's the exact case where I would *not* resort to error suppression with syntactic workarounds. If the expected parameter is not present, I do not want a *silently* injected default. I want to be able to enable the debug error level, and be notified of this exact occurence.
Good enough.
If you aren't making use of any PHP 5.3 features then Roadsend might be an option for you, http://www.roadsend.com/home/index.php?pageID=compiler The new in development compiler project also looks really good, but I have no idea what the status of that is so far.. http://code.roadsend.com/rphp
I don't know if there's anything that will take your native PHP code and allow it to work as is on a desktop but look into WinBinder and PHP TGK, they might accomplish what you're looking for. http://winbinder.org http://gtk.php.net/
Your Python code isn't a standalone executable either. It requires that the user has a Python runtime installed. Or you could bundle a Python runtime with your app. But either way, your code isn't a standalone executable; it requires that a Python interpreter exists on the system.
this is good, but it seems to be turning the entire page into a screenshot, instead of locating an image on the page to use which is more what I want. I appreciate the help anyways!
You probably want to use the curl library to download a web page's source, and then use regular expressions to search for image link(s).
No you can not use Postmark for affiliate marketing. Its for transactional emails. A transactional email is an email sent in response to an event started by the receiver on a 1:1 basis -- ie. "Sign up for an email list" can not lead to "send this user 1 email every day for a week" -- it can lead to "send user a confirmation email, one time". 
Okay. Thanks for the clarification. :) Yeah, some affiliate marketing is really crappy, where you get offers you didn't sign up for even after you unsubscribe. With the guys I deal with, they do the whitehat thing of following proper unsubscribe and no-spam policies.
In the age of social media, there are many sites that explicitly state what image should be used as a thumbnail. You may want to check out [this](https://developers.facebook.com/docs/opengraph/) for information on the og:image meta tag. 
I'd use the [Document Object Model](http://www.php.net/manual/en/book.dom.php) to avoid the hassles of parsing HTML by regular expression. This would get the biggest image on a page $url='http://en.wikipedia.org/wiki/Otter'; $ch=curl_init(); $timeout=5; curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,$timeout); $data=curl_exec($ch); curl_close($ch); $dom=new DOMDocument(); $dom-&gt;loadHTML($data); $biggest_pic = ''; $max_area = -1; foreach ($dom-&gt;getElementsByTagName('img') as $element) { $area = $element-&gt;getAttribute('height') * $element-&gt;getAttribute('width'); if ($area &gt; $max_area) { $max_area = $area; $biggest_pic = $element-&gt;getAttribute('src'); } } echo '&lt;img src="'.$biggest_pic.'"&gt;'; You would probably want a more sophisticated way of determining the best picture in order to avoid getting banner images, ads, etc. If it's present, pirateNarwhal's recommendation to use the `&lt;meta property="og:image"&gt;` element is the best idea.
Isn't there a PHP variant that runs on the JVM? I would use that. IME, every PHP application that was made "standalone" meant shipping with its own webserver and browser.
The benchmarks make sense - micromvc doesn't do much, so it can do it fast; zend does truckloads of stuff - so it does it slower.
Install xdebug and walk through your code using an IDE's debugger.
Your original question - "creating images from links" - made it a little ambiguous whether this was what you wanted.
I'm confused on why one would even do this? I suppose you might do this on some things that are not going to be tweaked and are really just an interface for something. But if one is going to bum their code then why would one convert an ever-changing PHP application to a must compile application? Especially if one is going to be running this on a server which is presented with HTTP? Maybe I am having trouble understanding this because I have never been in a situation where I have felt something built with PHP could be better built with something such as C. Not and be easly continuously tweaked, that is.
I appreciate the link!
PM me in the morning, i wrote one a while ago. fetches the best pic like facebook or reddit.
Just to reinforce your suggestion, it is actually impossible to parse a HTML document with Regular Expressions (see pedantry, Chomsky's Heiarchy of Languages). XPath is what people who want to use regexes usually need. 
http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454 Seriously, never parse html with regex.
Well until you show me an exploit that can get around mysql_real_escape_string this all just hearsay.
I made something like this some time ago: https://bitbucket.org/saibotd/redditmag/src/8d62de2088bb/index.php
Download free php newsletter script to start your email marketing campaign
easter_days(). I use it all the time.
I use Propel a lot :)
Greetings PHPit This is a utility that was written to help us refactor a huge (~7500 file) sprawling codebase. I have cleaned it up a bit and open sourced it in hopes it may be useful to someone else.
Interesting project, i would like to use something like this on a project of mine with roughly the same number of files. But i am having trouble with it actually running. So conciser this a bug report. http://pastebin.com/JCP0wvy4
Worked here with the same options, care to share your phpinfo() output?
Facebook did that preciselly because its hard to automatically pick the best image to represent the URL (and favicon is too small).
Ahh -i option needs a string so try -i 'beta'
http://pastebin.com/fKvhJPMw Didn't make any difference, as far as i can tell. 
http://pastebin.com/fKvhJPMw
I've checked in nicer argument parsing, try pulling and trying again 
I personally like in_array(). Its nice there is a built in function that lets you forgo searching an array for a value. preg_match() is also nice for authentication. Also, mail()
Looks cool. You may also want to checkout [CodeSniffer](http://pear.php.net/PHP_CodeSniffer)
Ah.. i pulled the changes, but it didn't work. So i decided to take a look at the code, it looks like that your system('find ... command requires that the directory end in a final slash or it wont find anything. Very odd. I added the slash to the path on the command line and it worked as expected. This could be easy to validate, use is_dir() and add a slash if one is missing before passing it to Path::find()
Understanding this conversation w/ 1/2 the comments removed is so hard!
I apologize. I removed my comments after I realized that I was fighting against windmills here. I suppose PHP programmers will never change. Oh well :-)
It's totally depressing, I know, but what's the synopsis that I missed?
We did, but it died midway through our project. We could not get it to work. That was a long time ago tho so it might be in better shape by now.
I'll try and fix that as soon as possible, thanks.
Than you know already a pleasant domain specific language. And it's as expressive as you build it :)
Not much. In short, I was explaining the pros and contras of platform independent code; And how freezing PHP code eliminates platform independence (since the code is being stuffed inside a binary chunk). All in all, I was stating that PHP isn't fit as general purpose language.
Thanks again for all your help. I'm seeing some strange behavior in Active Directory, but I'll ask that in the /r/activedirectory sr. I can't thank you enough. If I can get this worked out, it's going to be invaluable!!
Try this - http://developersrants.com/tutorials/php-beginner-a-quick-dirty-ajax-contact-form/ I used it (improved it a bit) on one of my sites so I know it works.
Agreed. Also, the source itself is pretty easy to follow in case you're looking for rarely used or undocumented hooks/filters
I'm a self employed developer, working contracts/freelance. There are a lot of up and downsides to it, but personally I'd rather not go back to full time 9-to-5. benefits: * constant new challenges, work is always fresh and interesting * great experience seeing how different businesses work * freelance work often lets you set your own hours/location * a lot of working from home, I pretty much never commute anymore - and if/when I have to, it can be outside of rush hour. * pay can be good drawbacks: * LONG hours. Sometimes you end up working what seems like ALL THE TIME. * Conversely, sometimes there's not much work and you get a little unplanned/unwanted downtime. * Getting paid is sporadic and unreliable. Especially larger companies won't hesitate to make you wait for your cheque. Those are the main ones for me. 
Thanks for the lists :) Yeah, the new challenges part is definitely a big draw. It seems like every week or month I'm learning something new about PHP, and that's been happening pretty consistently for the last three to five years. I'm married, so I'm wondering if you have any anecdote on how this has affected your personal life as well.
My other half has been very supportive, during the first year or so especially it was quite difficult, there were weeks where we'd be living in the same house but I'd be locked away working and she wouldn't see me. It didn't really cause any problems with our relationship, but that is mostly thanks to how understanding she was. Had I been with someone more demanding there could definitely have been serious issues.. For me, it's the hardest part actually, maintaining a balance between work and private life - it's very easy to swing from one extreme to the other and it took me nearly a year to get a sensible balance, up to that point it was tricky. The new challenges part is my FAVOURITE part about it, by far.
FrenchToJD() Converts a date from the French Republican Calendar to a Julian Day Count
Not enough information. Are there errors on the screen? Is there anything in the Apache log? Do you have write permission in the directory you are attempting to write "entries.csv" into? The more information the better.
Sry....unable to locate the log file...or ever it's directory. I was under the impression that it would have been installed in /usr/local/apache2, but it's not there. There should be write permission to that location, but I can put it somwhere else, just in case. The error I get is HTTP Error 500...Internal Server Error. If I could get some direction on where my apache log file may be secreted away, I'd be more than happy to post any pertinent info.
I haven't been in a 9-5 situation since mid-2006. I have tons of "stories" but I'll attempt to sum up the reality: Your first year or two will be considerably difficult, make sure you have the stones to weather it. 1) The most difficult puzzle is, as sync0pate described, consistent [and enough] cash-flow. That took me about a year to "think" I had it down, then your clients go upside down, stuff happens, and another year goes by for it to be somewhat solid. Further, the economy is bad and your clients will use that to drive price down, not stroke a check on-time or play a new game called, "chasing money". Out of my 50 or so clients, I chase 20%, every month. Regardless of contract, threats, shutdowns, etc. 2) long hours. Your comment about the personal life/marriage is one thing you worry about? You'll find out exactly how compatible you are once money starts tightening up. I've been with my woman since high school (`98) and we've not been the same since, oh...mid-2006. On another note, this is most likely my fault, I pull a consistent 12 hour minimum day, 6 days a week. 3) sites like freelancer/odesk/etc, sound good in theory, I made about 50% of what I needed to and worked 200% longer for the first few months. After that, I started to see benefits of using those services (3-5k projects). And then, I found out that there are literally, zero protections, when you run across an employer that goes 1000% outside of project scope, because he/she can and/or demands it. Remember, at the end of the day those sites are only intended for slave labor. I use them myself for the same purpose. 4) have 6-12 months of your "nut" in savings before you jump ship. i know you've read this and have been told this 100 times over. do it. 5) benefits are expensive. accountants/lawyers are expensive. base business/contractor insurance isn't costly, however don't go down this road without it. 6) LLC, immediately. most states are less than $250 to file it yourself. 7) There are ups/downs. Dealing with them is important, they come and go much more rapidly when you are out on your own. Like every hour on some days. As for the benefits? That's simple: Everything you've ever heard about being on your own. Working at starbucks today? yes. Fucking right off tomorrow? yes. Behind on 2 projects and gonna pull a 28 hour coding extravaganza with a 4 pack of redbull? yes. 
Logs are usually under /var/log
Saw the problem when I looked at the logs. Thanks. It was permissions and I left an "r" out of fwrite
jsyk, you can [generate the opcodes and see for yourself](http://codepad.viper-7.com/).
Your script will potentially break if someone submits anything with a comma or quote in it. Luckily there's [fputcsv](http://php.net/manual/en/function.fputcsv.php) to the rescue.
Mine are somewhat esoteric: [debug_zval_dump();](http://php.net/manual/en/function.debug-zval-dump.php) // not entirely useful, but fun as a curiousity [__halt_compiler();](http://php.net/manual/en/function.halt-compiler.php) // some cool uses [date_sunrise();](http://php.net/manual/en/function.date-sunrise.php) // for the WTF factor
Can I get an idiot's guide on how to use it? Primarily where I should put it within the script.
Seems interesting, but would it be possible to get some info about it? &gt; PHPLinter. Static code analyser. &gt; V2.4 &gt; A simple fast lint and score for PHP files. That really doesn't help me at all to determine what exactly it does, and neither does the simulated man page. Yes, I know what a linter is, but how does this script differ from a simple `php -l`? Perhaps some sample output...
PHP doesn't support DSLs.... ? Care to link to what you mean?
 fputcsv($fp array( $_POST['name'], $_POST['email'], $_POST['telephone'], $_POST['contact'], $_POST['service']; ));
Where I work we treat Propels Query and Active Record classes as it where a DSL.
Agree with everything here, for me doing bits of freelance on the side of my job, the biggest issue was motivation. I could quite easily get home after 8/9 hours at work and not give a single fuck. 
start with &lt;?php instead of &lt;?
For future reference, php.net *is* the idiot's guide to using functions. Looks daunting now, but it's fairly straightforward once you get used to reading the function arguments.
Thanks for the insight! I'll definitely be keeping all of that in mind. The LLC thing was definitely new advice (I've never known how much that costed), and I didn't know you could even get contractor insurance. It sounds like you do short-term contracts. In my head I was mostly referring to "long term" contracts (6 months, 3 months, or whatever). Do you have any experience with those, and would the majority of your advice still stand?
What if the height and width aren't specified in the source? Or the image is inserted into the page as a background via CSS (like flckr)? Unless you're programming to a standard (like a meta tag) then you'll just need to build a solution for each site's implementation.
yeah lots of em are slow and the code is crap. so id say not very
I get that, but I don't want to really delve into it too much, as I'm unlikely to use php more than once or twice a year, and it's always simple things like this. 
Well its an attempt to imitate the behavior of pylint. It try's to analyze the code to look for various infractions and code smells. It can be used to enforce coding standards. You could say it try's too measure "readability" For example it counts methods in a class and issues a flag if a class contains too many methods (currently &gt;50). This is an indication that the class in question does too much. Perhaps it's function could be split between more than one class. It counts these flags and scores the file anywhere from 10.0 down to minus infinity. We have a rule that if a file drops below 0 that should trigger a code review. We also have a subversion hook that scores all checkins. The information gained can be helpfull in analyzing problematic areas in the code-base, but the linter will never replace a human eye.
Ah, thanks for the info. It sounds similar to [PHPMD](http://phpmd.org/).
The small project focus is where it's at for us people who can't feasibly complete a large project yet. That would involve too much disappointment and ego crushing. When you take on the small project you get short term gratification, the option to choose a specific challenge, and sometimes an opportunity to actually use what you've built. It feels great. One thing I'd recommend is using an API to one of your favorite sites and figuring out how to do some cool things with that data. It could be anything really, and it could be useful or pointless, but it's nice to just have data handy. I'm always at a loss when it comes to filling a database with something I care to work with... It's one of those things that takes time, but as you work, you need something *right away*. An API can sometimes solve that. Anyhow, I'm glad that was useful for you to read. Good luck moving forward!
Yeah...still can't get it... I feel exceptionally dumb right now.
Easily renewable if there are no requests for it.
You just replace your `fwrite` with it.
that's what I did....threw up an error that it couldn't figure out what array I wanted to use EDIT: unexpected T_ARRAY in /var/www/process.php3 on line 6, referrer: "MY_IP"
A friend sent me this regarding my question: &gt; What you want is to download [XAMPP](http://en.wikipedia.org/wiki/XAMPP) for each platform, pick a random 127.x.x.x address for your app. 127.22.33.55, for instance, and a random port (because they may have port 80 running via skype or a browser). Then, rig your app so that it starts at http://127.22.33.55:15572/, for instance. Then create a bat file that 1) starts xampp; 2) opens up the browser to that page, and 3) closes xampp when the commandline window is closed. Voila. Crossplatform, self-contained PHP project. There are a few commercial apps that do this at steep premiums fyi.
But you do want us to take the trouble of helping you?
You really haven't done any helping, now have you? I'm saying it doesn't really behoove me to master something that I will use on a very rare occasion, just like I wouldn't expect you to master home automation programming if you just want to turn your television on with your smartphone.
No, I think it was due to the last array element having an additional ; fputcsv($fp array( $_POST['name'], $_POST['email'], $_POST['telephone'], $_POST['contact'], $_POST['service'] ));
Ahh....I should have caught that.... After I master java, I'll have to learn me some webdevelopment stuff.... HTML was pretty simple, and this seems moderately straightforward....I just should probably start at the beginning and not in the middle. EDIT: Still not working....same error.
The most I have been able to get it to do with fputcsv is place the names of the fields into a nice CSV (name, email, telephone, contact, service,) every time I press submit on my form. If I try to tell it to use an array based on the names of the inputs from my html data, it shits a brick.
Oh it's a loser's game for sure. From what I can tell Reddit uses the "biggest image" test by default, and it often does a lousy job. Take [this story](http://www.reddit.com/r/webdev/comments/m3kxw/create_a_realtime_multiplayer_html5_game_with/) for instance. Definitely the biggest image, and definitely a lousy choice. Reddit has some special cases on their thumbnail grabbing (I think Flickr is one). If you know in advance that you're only going to be pulling from a small group of sites with a consistent format this will work. In general Reddit gives up if they can't find an image. Fortunately almost all posts are either Imgur or self-posts.
I've actually been working on something rather similar, but totally different:P I am generating documentation and project tracking records from the code as well as testing for db usage, etc... I love this kind of stuff!
My last stint with contracting taught me two really important things: 1. Don't do it if you have a young child. You want to spend more time with them? That's cool, and I did too, but it *won't* work the way you're hoping. 2. Your partner might not understand what you're doing. In my case, my girlfriend thought working from home meant 'money was magically generated without me working' so I could help with our kid constantly. I literally did not have to power to explain to her that I could not change a diaper in the middle of a skype meeting with a client. I shit you not. I tried like a son of a bitch to get through to her (And her family), but if I was home it meant I needed to be doing baby stuff. Not working. When you get sucked down the path, your work is fucked. I was fucked. Holy shit, my chest is pounding recalling how stressful that was. Sitting in my office, chatting with a client, when suddenly a knock on my door. "Yeah..?" "I NEED HELP WITH A DAIPER CHAAAANGE" FUUUHHAAAA Don't let that happen. If you have a similar situation, even potentially, wait until the kid is in daycare or school so you have a stable working window, or just ensure your partner is capable of being a parent while alone. Holy shit. Or just get an office out of the house. But that gets costly pretty fast... Whatever you do, don't do what I did.
Yes, since split isn't the same as explode. Coming from perl, I always loved the name split/join yet explode has less overhead as it isn't regex. Yet in PHP, split was pretty much in limbo between explode and preg_split.
This is the most common answer, and also the least correct.
I'm still figuring out the &gt;sacrifice ten of my first born part.
eh im a linux admin and deal with this junk daily but windows is like Chinese to me, i would just have to google it like a boss.
This is counterproductive. The important fact that there _is_ a standard with significant community buy-in and people should to follow it. Or else, what's the point? PSR-0 is more than good enough to handle the next generation of frameworks and libraries. By allowing perfect to be the enemy of good we're ultimately going to hurt the idea of standardisation for the unenforced parts of the PHP ecosystem and we're all going to be stuck in the same stupid hole that PHP is just beginning to dig itself out of. To address the issue you observe with case sensitivity, I guess it's made complex because window's filesystem is case insensitive, MacOS's can be either/or whereas the rest of unix-like OS's use case-sensitive filesystems. &gt; How could you make the autoloader support PHPs identifier rules flawlessly but retain compatibility to the PSR-0 legacy filename scheme? I would argue, given the above facts, that you can't in a nice way. Case folding may work, but it seems like you're introducing magic in an otherwise straight forward system, instead of having a non-onerous restriction on the developer when it comes to naming classes. EDIT: I'll reference some discussion about this case sensitivity issue that I've come across here: * http://www.serverphorums.com/read.php?7,395747,395747 * http://www.mail-archive.com/internals@lists.php.net/msg54069.html * http://blog.ircmaxell.com/2011/11/on-psr-0-being-included-in-phps-core.html?showComment=1320352154922#c3109269535167910791
This is stupid. I already know this. I use XOR all the time in my PHP. I built my house out of XORs. Why would you submit something like this to r/php? Waste of time, -1.
Wha...?!?!
In b4 h8erz!
I'm very familiar with this operator but I've never run into a situation to use it. The example shown is also kind weird and not very practical.
I actually have a mini party for myself when I find a reason to use XOR.
As long as you have no whitespace, other than a single new line (/r/n or /n) after the `?&gt;` you're fine. No editor I know of automatically adds whitespace other than a new line to the last line of a file. You'd have to do this deliberately. Also, "crashing to a white screen" is the behaviour for a production system when an error occurs that you have not handled. On a development machine, it should be configured to explicitly show the error message, or you should have some other easy way of viewing PHP error messages. You should be testing your code on development machines before putting it on a production machine. I am not saying that you shouldn't be omitting the closing `?&gt;`. It's a good idea. But leaving it in really isn't the disaster you make it out to be. There's no need to call people amateurs for doing it - if you are uploading code to a production system without testing it on a dev server first, then I could call you an amateur.
Logical XOR in C is somewhat forgotten also. The most canonical form I have come across is: &gt; !!a != !!b
I can't say I have ever used XOR, but I can't say I've ever had a situation where I could use XOR either.
My problem is that I inherit a project and accidentally add a white space at the bottom after the ?&gt;. Thus, I end up with the white page. My editor is gEdit on Ubuntu Linux and it doesn't normally trim the whitespace at the end of the file. So, when this occurs, sometimes I literally have to follow like 40 files until I find the one that has this issue. If developers would just stop doing this, it would solve the problem for all of us.
There is no reason you shouldn't properly close a file. Being lazy is no reason to not emit proper code.
It's actually more proper to NOT use the closing tag in script that is all PHP and not mixed with HTML. [This](http://framework.zend.com/manual/en/coding-standard.php-file-formatting.html) was the closest thing I could find to support it so far. &gt; For files that contain only PHP code, the closing tag ("?&gt;") is never permitted. It is not required by PHP, and omitting it´ prevents the accidental injection of trailing white space into the response. Not sure why you're getting so much push back on this.
Why risk having headers sent early? Not closing PHP files isn't being lazy. http://www.php.net/manual/en/language.basic-syntax.instruction-separation.php "The closing tag of a PHP block at the end of a file is optional, and in some cases omitting it is helpful when using include() or require(), so unwanted whitespace will not occur at the end of files, and you will still be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at the end of the parts generated by the included files."
That's what I meant. By introducing more logic into an autoloader it just adds complexity. And I'm aware that almost everyone else is fine with just being cautious to avoid the pitfall. Yet its a strong personal preference to not use mixed-case filenames (it feels so anti-Unixish), or preserve the language semantics. I'm still going to frown on this in two years, when it actually became widely established (right now PHP 5.3 is at 16% server saturation, and barely half the frameworks follow that scheme yet; but it's spreading of course). So yes, indeed the worry is if it's worth the effort to use local adaptations.
Agree. This is an officially recommended coding convention.
I've used it for checksums and stuff like that, but was pretty much just translating C or C++ into PHP and not really understanding what was going on behind the scenes. I use bitwise shifting a lot for doubling/halving numbers but have never really found a need for OR/XOR. This example shows a way that makes sense, unlike the way it was always described to me, but yet I can not think of a single time I would have needed something like that.
It's just not useful that often. How often do you need to check that something is true and something else is false OR something is false and something else is true? It also always has to evaluate both sides - there is no short circuit. The result depends on both (it's false if their truthiness matches and true if it doesn't).
I'm interested in how you "accidentally" added white space characters to the end of a file (other than a new line, which PHP ignores). I don't usually find myself accidentally adding random characters to my code anywhere. When it comes to white space, I keep to a style. Some people are pretty strict about not adding unnecessary whitespace to the end of *any* line. As far as I'm concerned, if I've done something stupid I'd prefer to be notified about it with a warning or error than for it to be ignored - random characters being added at the end of a file could be a sign that random stuff has changed elsewhere. I set error_reporting to report basically everything while I'm developing.
The next paragraph down says: &gt; Indentation should consist of 4 spaces. Tabs are not allowed. This is not a guide that all PHP programmers must follow, these are just style rules for contributing code to that particular project. It is an absolute requirement if you are a Zend Framework contributor, but other projects are free to use other coding styles. Omitting the `&lt;?` is a good idea, but it's not the law.
It's officially recommended for those who are contributing code to the Zend Framework.
No, not law. I didn't mean to ever imply that be any means but it is widely accepted and encouraged.
If you're "on your own", get a basic liability coverage and llc both as a cya. It's a good mix [short/long]. I just got done with a 6 month engagement. And yes, everything I said still stands, you're effectively being in business for yourself, in my opinion/experience, as all of the contracts that I've signed are still, employment at will. Ie., the can term the contract at anytime. So, you're only as good as your code/skills/personality/insurance/bs when things go wrong. 
yup. Same will apply after the honeymoon period of freelance wears off. I constantly have to place reminders and play tricks with myself to keep a solid motivation. however, some days...not a single fuck at all. and then, last month, someone told me I HAD to watch breaking bad. not a single fuck given for a week.
Sorry bro.
XOR has the excellent ability to invert a boolean while still employing [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself): $var ^= true;
If you get the idea to do something, change your mind, and don't properly clean up your hacky shit left over, then you've made a mistake. PHP has done nothing wrong. The Browser has done nothing wrong. *You* **the developer**, who failed to be responsible and intelligent about your code that you wrote did something wrong, and that is why your shit is broken. edit: this can be taken all over. It doesnt matter if it's a trailing `?&gt;`, or an errant `print_r()`, don't leave shit laying all over your code.
Not to sound rude and stuff, but this is a newbie coding style convention. Spaces after the `?&gt;` php end marker are a problem of newcomers. It's a very legitimate problem nonetheless. And I often recommend this myself therefore, and I also did strip the end tags for shipping some code. But I see it as a sign of low quality code regardless. ("If you can't even keep track of whitespace, then how well-written could the rest of code possibly be?") Anyway, I believe the actual solution is establishing a simple commandline script to clean up scripts. It's a simple glob+file_put/get_contents+preg_replace issue really. Hmm, can't find it again (that's why I'm saying it needs to be established as *common* script), but a simple perl thing might do: perl -e 's/[?]&gt;\s*\Z/?&gt;/;' -pi $(find "$@") Okay, just chops one whitespace line off. You'd need to run it twice or so. Needs a *real* script.
[`spl_autoload_register()`](http://php.net/spl_autoload_register) is better because you can queue up autoloaders, which is excellent when you're handling multiple libraries.
Hm. Yeah, I can see the value in that, although I have my own custom MVC framework that I like to deploy, when possible, so I don't normally have to import libraries.
This headline makes it sound like this is some special operator uniuqe to PHP. 
I think it's safe to say that pretty much all the reasons that will be listed here could be cured by non-lazy programming.
I like writing filtering functions where there's a flag parameter to invert the filter. Usually it's just a matter of XOR'ing the main comparison logic with this flag.
Contract work is like fast food. Some of it good and some of it is iffy, but most of it is just unhealthy in the long-run. Mostly because fast-food is meant to be fast and cheap. You don't open a chain of fast food restaurants unless there is a clear demand for it and obviously freelance/contract work for PHP is pretty abundant in demand. So it' maybe profitable for the developer, but there are a lot of problems inherent to the client. What you have to watch out for, like many here have already warned, are the ones that make a lot of promises right off the bat. This is usually someone that walks into a fast-food joint thinking "Boy I'm starving I'm gonna order everything off the menu..." That just isn't realistic. A burger is cheap and filling, but it's not going to replace a steak dinner. You want to avoid contract work where the proposals start off something like "I want an ebay clone or an amazon clone, etc..." Those are just starry-eyed clients that think a developer can write code that magically produces money -- obviously not the case. If the person offering the contract work (the client) doesn't seem to have a clear objective they're probably not worth your time. As you've already noted there's a lot of contract work out there so try to pick wisely as the demand is high. Since the supply is also increasing this inevitably lowers the price as per the laws of economics (demand and supply). Things you want to look for in good paying contract work are probably among 1) Objective proposals with complete specs, 2) Reasonable deadlines or mile-stones set for the project, 3) Clients that don't just accept bids based on price, and 4) Clients that are willing to meet or at least talk on the phone. Having a client you can't get in touch with is probably a contract developers worst nightmare.
All the major email services attempt to email relay spam by confirming rDNS (this is called fcrDNS or forward-confirmed reverse DNS). Basically the domain name of the sender in the "From" email header and the domain of the originating Mail Server in the header signature is compared with the reverse DNS look up and then the resulting IP address is checked with forward-confirmed reverse DNS (making sure that the round-robin effect of domain-to-ip and ip-back-to-domain is a full loop). Additionally, of course these services rely on their users to notify them when they've received any suspicious emails or spam emails and can black list ips that send out bulk spam or relay emails. **First**, check that the IP address your mail server is on (these would be ips pointing to your MX entries in the DNS record) is not on any of the major email black lists (you could try mxtoolbox.com or similar). **Second**, make sure your PTR/MX and SPF records are all correct and that you have rDNS setup properly (not all rDNS is fcrDNS btw). **Third**, if you're putting the email address of someone that is not on the domain of your mail server in the "From" email header you are likely to get your emails flagged as spam since most email services can easily check that the mail server sending the email and the email address of the sender are not coming from the same domain (the signature looks like a relayed email message without proper forwarder headers). This looks like a spoofed email. The reason is this isn't an actual relay, but a faked header. So don't do that unless you intend to actually relay the message through another mail server in which case the header will be signed correctly by each mail server. Instead just put a from no-reply@yourdomain.com sender and you can set reply-to headers accordingly... Hope this helps
Woo I've found some code that scores -28 what is my reward/punishment? On a serious note it looks like a quite interesting project, I didn't have any issues running it over our (small) code base, and the reports were pretty clean/simple. I can see how it could really help a code base in decent a state.
Not forgotten, just mostly useless. I mean, the best example the author of this article could come up with to show its use is checking if only one of two directories exist. You would almost never need to do that in practice. *Bitwise* XOR can be extremely useful for flipping a given flag, but in PHP XOR really has *very* limited uses.
lets see if I remember computer science I from high school correctly: XOR 32 on an ascii character will change your lowercase letters to capital letters and vice versa. TL;DR: XOR is magic.
As someone trained in math and not CS, this is what first popped into my head (Python): for i in range(1,101): if i%15==0: print 'fizzbuzz' elif i%3==0: print 'fizz' elif i%5==0: print 'buzz' else: print i I can haz job? ps - check out Project Euler if you haven't already. 
something is wrong - firstly downloading the thing doesn't have the system folder! so i have download the real codeigniter and dump your files into it? 
is PDO compatible with MySQL?
I may have misread because its almost 6 AM, but I don't think I saw anything pertaining to binding variables to queries...
Doesn't every programming language have an XOR logical operator called "not equals" usually written as "!=" ?
You don't need help. You need to *learn* [URL](http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax), PHP and web development.
Blow up all the variables!
This is the dumbest thing I've read in 2011!!!
What's next? if: the forgotten statement?
You spent many hours reinventing the stable, widely accepted wheel because you couldn't figure out how to operate it despite lots of support and documentation. :(
That's because it is. PHPMD stands on top of PHP_Code_Sniffer, which the author admits to trying "years ago" but not being able to figure out.
Yes it is. I have accomplished the problem this author seeks several times. And I have numerous console and gui PHP apps that run flawlessly on all platforms. 
This is a very good point... What's the difference between XOR and "not equals"?
The example: if(is_dir($dir1) XOR is_dir($dir2)) { Is exactly the same as this: if(is_dir($dir1) != is_dir($dir2)) { What's the advantage of using "xor"?
Sure thats one way of putting it. I had a lot of fun doing it so that's not really bothering me. We did try many solutions and none of them worked for our needs. In the case of CodeSniffer it ran out of memory when we tried to get it to work on the whole codebase, no matter how high we set the memory limit. Like I said that was a few years ago. 
check: http://php.net/manual/en/pdo.drivers.php
excellent analogy and points.
In the case of this example, nothing. In other examples, XOR (exclusive or) would check if exactly one of the two operands result in a true expression, while != (not equal) would compare the two values. $a = "foo"; $b = "bar"; if ($a XOR $b); //false if ($a != $b); //true
It's discussions like this that make me love Python! (I don't actually use Python. I just like the clean look better than PHP.)
You misunderstood what I was saying; The binary isn't platform independent (Linux binaries don't run on windows, etc). But i'm ***really*** not going to reiterate this.
 $var = !$var; makes more sense to me
!= only works for booleans in that case. if(strlen($a) XOR strlen($b)) echo "exactly one of the strings is of zero length.";
That's a [bitwise xor](http://php.net/manual/en/language.operators.bitwise.php) and completely different.
I hope it comes in framework form.
Looks like it might be due to no comma after $fp.
Agreed, but the idea is that if you can avoid explicitly referencing the same variable twice in one statement, you should.
Didn't notice that. geauxtig3rs messaged me afterwards that he had it working, so I think the found it on his own.
The repo only contains embr files and doesn't come with code igniter. To setup embr run the installer script, this will grab CI for you. 
Great article. Very few people realize the importance of standards. Sometimes names of functions, variables etc may sound to be trivial issues... but they're important if you are looking at taking your program further ahead.
...if you only ever work with English characters. And assuming that is a bad idea because sooner or later you'll have to work with unicode and your bad practice of XOR 32 will then bite you in the ass.
Fuck DRM. *close enough*
Very Cool! I started working on something similar a few months back: https://github.com/blanc0/php-cachelib but haven't had the time to pick it back up. Job well done, sir. 
In and of itself, that is not dangerous, but it is ill advised. Wherever you use $_SESSION['something'] in the future, you'll have to sanitize the data at that point and time. Why not just clean it right at the beginning where you assign it?
Well I was wondering if there were any other vulnerabilities besides simply output sanitizing that I was not considering, like a buffer overflow or something.
In a sense, yeah, that's what's going on. That's an even better **tl;dr** than I could write! :)
As far as my understanding of sessions go all that will happen is that this will dump some post data to a file somewhere on the server without it being executed or anything. So in theory it should be safe. But I'd probably wrap session in a session management class so when you find out that this is actually extremely inadvisable (as with everything in life) it's only a single change in the session class rather than all over the application.
There is more than just output sanitizing for XSS vulnerabilities. There is also sanitizing for SQL, and just general validation to make sure it is what you expect (a regex to match email addresses, or a valid date, or something) so when you use it later you don't have to keep checking.
Good point, I have added "and only used in parameterized PDO queries."
but what do you sanitize it for? Every format you can possibly imagine? csv, xml, html, sql. I feel you should only escape/sanitize in the part of your business logic where you know the target format and don't do it preemptively. 
i don't think that one line is exploitable by itself. strip tags should sanitize enough for output that is not an HTML attribute. the bigger issue i have with it is i consider $_SESSION to be trusted, since it cannot be influenced by a user. your example is making it untrusted.
PHP strings have no limit to their length.
Tell them you're switching internet providers at the moment, and have to work offline, and are therefore fucked. And fuck them (pinnacle).
But only that variable.
Wow! Seriously looks like a lousy product! Yeah, I'm partial to OpenCart too.
Why even ask this? Quit wasting our time. Sanitize it! Like duh.
I'm trying to enumerate the potential vulnerabilities present in the line. Most are old and obvious, but there might exist something more subtle or new.
This isn't going to be easy. If you want something with a GUI, then you're looking at bundling with a lightweight, PHP-capable, local web server that runs like on an exclusive port like 31236 or something. You'll also have to bundle with a minimalist yet capable web browser. If you don't go the webserver/web browser component route, there's PHP-GTK, but it's kind of buggy and difficult in my experience. A better route would be to make a Google Chrome shortcut for Linux (GNOME), Windows, and Mac. In Chrome you can do this under Wrench &gt; Tools &gt; Create Application Shortcuts. Once you have the shortcut built, [create an installer](http://www.flexerasoftware.com/products/installanywhere.htm) that checks to see if Chrome is installed. If not installed, have the installer tell them that Chrome is required and that they should approve to download and install it. Once they approve to download and install it, copy out the application shortcut to their desktop that you previously generated for each platform from the "Create Application Shortcuts" feature in Chrome. The end user can then launch the shortcut, which loads a special version of Chrome, which then connects to your web product on a remote server. Sure, this requires a remote web server connection. If you want a local web server connection, ship with like nginx or something and host it on a custom port like 31236. As for a database, always use a local copy of SQLite, or a remote database of your choice if connecting to a backend website. As for product licensing because of the F/OSS licensing restrictions, that gets a bit tricky for commercial products. You may have to issue the stuff as F/OSS but sell the media and support commercially.
Definitely. Maybe even use a framework with form validation baked in so you can forget some of these things but they happen anyway. &lt;shamelessFavoriteFrameworkPlug&gt; Use Yii, use Yii!!!! &lt;/shamelessFavoriteFrameworkPlug&gt; I'm not really trying to start a best framework thread, I'm just stirring the pot. Seriously, most solid frameworks have some sort of data validation and sql parameterization baked in, so many security things are already taken care of. Not an excuse to get lazy, but a great helper or backup plan. 
Interesting idea. Can you clarify what this rule means: &gt; S2 Unsecure use of: `include` I've tried the setup a few ways, and I can't seem to figure out what it means. Also, it repeats the same error 20ish times.
Clearly you're mistaken. What should he sanitize it for? HTML, SQL, CSS, XML, JSON, or something else? Don't go sanitation happy, it will end up screwing you up in the future. 
what do you guys think about foxycart? my friend recently started using it and he seems pleased, but then he's not super experienced.
i am kicking myself in the face right now
This is also why the defang_unicorn() function gets so little love too.
Why? Never realized how simple it is? xD You didn't use a gigantic chunk of code to do this before, did you? &amp;#3232;\_&amp;#3232; 
So, does this product call back to home server on every single request? Does it then wait for response from home server before continuing with the process? That seems like an incredibly stupid, faulty and potentially costly "feature".
Here's what you do: 1. Run wireshark/tcpdump to see what a 'valid' response is. Get a couple to make sure it doesn't change over time OR look at the source and see how it determines what a valid response is. 2. Set up a VHOST on your local machine that always returns a valid result. This is probably completely against the TOS for the software, but this kind of DRM is stupid.
I'd just just use an ssh tunnel and call it a day. Though IMO you should not have to tunnel through your host just to develop on your local.
Typically you would have it in some sort of config file. And that config file would be located outside of the web root. You don't want inline, because you only want the credentials stored in one place. That way, when you later update user and passwords you only need to worry about changing them in one place.
i don't want to talk about it! stop looking at me!
&amp;#3232;\_&amp;#3232; 
Good point. I just don't see a case where you would set some arbitrary data without knowing what/where it will be used.
Many plugins written for WordPress fully utilize the OOP model. Some devs even release libraries/frameworks to allow other plugin authors to take advantage of the various design patters and other OOP benefits. [Example](http://wordpress.org/extend/plugins/toppa-plugin-libraries-for-wordpress/) The point is that you can write good or bad code in ANY language. A well designed and implemented PHP script would impress a fellow developer more than a poorly written Python script.
Well, to keep my answer a bit generic.. The place where you'd deal with $_POST, is generally a controller. Saving it to the database and escaping it for sql, should generally happen in the model, and escaping for html/xss generally happens in a view. So even if its not about encoding for every possible permutation, I think it's important to keep the escaping for whatever in the correct layer of your application. I feel this should generally be "escape right before you really need to".
Let me give you some pointers. Years ago I recommended, purchased, and heavily modified pinnacle cart for a company I was working for that exclusively sold online downloadable products. You can request and receive a copy of Pinnacle's code base, they unencrypt 99% of it, with the exception of like one file. You can recreate what this particular file does on your own. I'm not being vague on purpose, I honestly don't remember the specifics. They do require you sign an NDA in order to get a copy of their code base, and I wouldn't advertise to them that you're recreating this file, but in all honestly, it's something like 30 lines of obvious code. In hindsight, choosing Pinnacle was a horrible decision, but it was done early in my career and I didn't know better at the time. I've since learned that lesson. Also Magento didn't exist as a solution back then, so the only alternative was osCommerce(which incidentally was a huge nightmare and what we were trying to move away from). I would be happy to talk to your client for you and tell him my professional opinion of Pinnacle if you need it. As well as provide references of where I used it, and the extensive knowledge I learned from it. Anyway, good luck!
I'd say you are absolutely correct in your plan to build a new site using a framework. Code Igniter is really easy to pick up due to it's good documentation. If you're looking for a challenge Zend Framework will keep you perplexed and overwhelmed for a few months but if you can get through it you'll never be daunted by another framework again (with the possible exceptions of Symphony or ZF2). Basically all commercial development worth doing will be done using a framework rather than simple php pages so it's worth tackling sooner rather than later. You could also look at general/meta coding books like Clean Code or The Pragmatic Programmer to help you understand more about how to build "beautiful" code rather than simply functional code.
Here is the next question, if I do not have access on my host to a location outside the web directory. Is it possible to place it in a subdirectory and protect that directory with a .htaccess file?
Does one need to know what ugly code is in order to appreciate beautiful code? How long does it take to start appreciating beautiful concepts? I was trying to remember how long it took for me to take this step, and really have no idea. Being that OP has a math background, he probably has a leg up in terms of abstract concept appreciation. 
I can see two valid reasons to wrap PDO: 1. Creating a lazy-loader for only opening a DB connection when it's needed 2. Adding helper methods such as select(), update(), insert(), etc that uses a custom built db abstraction class based on the PDO driver. 
Why not work directly on the server? Most good text editors allow you to open and save files over SSH. At home I like to use JEdit with the FTP plugin for this. This might be a dangerous with a live server, but it would solve your local files problem. Just a thought.
Find a few videos on git or hg. Also look at the videos for SICP as well as just the book!
Yes. Strange host, though.
It's sensible to write a database layer. It's possibly even sensible to *extend* PDO. It's not sensible to wrap PDO.
I don't think so. I remember before I knew a lot about PHP looking at open source libraries and without really being able to articulate what the key features were I could tell they were about a million times better quality than anything I was doing. Ideas that have fancy names inside programming communities like DRY, SRP, loose coupling, orthogonality, the law of Demeter, etc. all make something feel like it's been crafted rather than hacked together even to the layperson because most advanced coding practises are there to help keep complicated system components understandable without an intimate understanding of the overall architecture.
its kind of a weird situation. I'm on a decent platform but I'm hosting many sites in the same account, the other sites are in subdirectories of the main domain set up with the account, so technically I do have access to directories above root for the domain I'm working on but they exists in the webspace for the main domain still.
&gt; Why not work directly on the server? &gt; This might be a dangerous with a live server, 
Well, I do it all the time on my live servers because I'm careful, some people aren't. And he may be able to set up a dev server under a different/sub domain which would solve the localhost problem.
My experience in the eCommerce game is that few cart systems seem like they were designed by people who actually run a store, or are in the business of selling things. There's always some fundamental gap. But a system that doesn't seem like it was designed by people who actually develop software? Yet the product itself is developed software? How perplexing...
&gt; Well, I do it all the time on my live servers because I'm careful, some people aren't. **You're not.**
Glorified paypal add-to-cart buttons. Not for a serious ecommerce site. Works ok though for smaller-scale stuff, considering its limitations.
Except that yours changes the type of the variable from bool to int, while his does not; perhaps that's inconsequential most of the time, but it is a significant difference. While DRY is desirable, I believe type juggling -- especially in a language such as PHP -- is worse than any marginal benefit from the DRY.
Wait, really? My example returns an int? 
1. you need to be a life cycle coder who can take the reigns and project manage - otherwise don't bother (or get a team of folks together to work out the analyst/management/coding aspects) - otherwise i could just go to odesk and get a $15/hour indian outsource to get a specific module coded poorly. 2. don't offer a blog/cms/website as a portfolio - show real applications please. 3. learn the robust workspace - multiple frameworks, multiple platforms, and definitely multiple databases. those of us who can afford db2,oracle, or sql server probably have more cash to spend than dude with dreamhost account and mysql. 4. Assisted coding - man i'd pay for the ability to ask questions on specific web aspects and get quick responses and or solutions - either tutorials (show me how to use yii) - be on call (sms/im) for quickie questions - [dead serious i'd pay right now for this - yii - xampp win32/sql server, 1 day of 1:1 tutoring via teamviewer - you lead - i ask questions - you show solutions - recorded] - plus ability to ask questions via im/sms and get a timely response when i'm stuck. (if you are out there pm me btw) - i'd bet you could make a grand in a day or two here easily if you really knew your isht. speak english - sorry if you are not well written - find a partner that is well written/spoken - using google translate to communicate is lame. $100/hr is no problem for an ACE - but quite honestly when i went looking for yii coders i got a bunch of lame hacks or outsourcers who wanted to outsource even further and i've seen the quality of outsourcing it's so bad it's not even funny. Are you an ACE? do you have a portfolio of B2B applications? if you are just going to be a hack then you might as well resign yourself to fight against $10-15/hr indian dudes (literally in india) and that is no way to make a living. Bidding is quite lame - a price for a project is just that if you are an ace and you can really do the project in 2 days - charge $5000 - if you have to charge by the hour you set the project duration to # of hours a day times your rate - thus i'll go find someone who can get it done in 2 days and charge me $5G rather than wait a month so you can make your hourly rate - i'm not sure if that makes sense but as a coder we all know when you are rocking out you can work for 2 hours and get 20 hours of work done. bottom line - i don't care as long as the work gets done and is quality.
Is $_POST['something'] a value that can be whitelisted? If so, that's the way to go. Otherwise, I would filter before adding it to session.
Mistakes I often find new programmers making are among asking "what's the next step?" or "what program should I make?" ... Steps are pretty simple... while(true) { read('a lot'); write($code); test($everything); read('more'); rewrite($code); read('moaaaar!'); rewrite($better_code); drink($coffee); // You should stock up on this sleep(); } And that is the secret algorithm to learning... it just takes time as you can see (especially don't forget the last step)... and it doesn't always seem like you're getting anywhere while using this algorithm some times, but don't forget an education is not a destination, but a way of travel. Usually learning how to program and the reason you write programs aren't mutually exclusive. You learn programming because you want to learn, you like it, or because it may be a requirement (school/work/etc...). However, you write and develop software because you or someone else has a need for that software. As far as time can tell us every remarkable programmer that wrote remarkable software did it out of a basic need. UNIX was written because some engineers at Bell Labs needed an operating system that would allow multiple users to share a system. The programming language BASIC was developed because someone wanted to write software in a syntax **humans** might actually be able to understand (instead of the then prominent assembly language)... Linus Torvalds wrote the linux kernel because he wanted a UNIX-based operating system that allowed people to freely modify and use its code for whatever purposes suited them. Rasmus Lerdorf wrote PHP because he needed an easy way to generate dynamic content for his personal home page. Everyone that writes truly useful software writes it because of some underlying need. Not because they want to learn or because they are following the steps in a book or the instructions of a teacher. You can learn very well writing useless software. How useful your software will be will not reflect, in the least, on your education or vice versa. You said you wrote that first website to check your schools course registrations... I'm sure you had a need for that or found it useful. Even if that need was very basic and simple... that's all you need! So my best advice is just keep writing software you find useful and you will enjoy working on it more as you progress (I see so many new programmers give up in the middle of a new project out of frustration -- but mainly it's because they didn't really have a need for what software they were writing so they lost their drive and motivation easily)... If you really had a need for that software it will motivate you to keep working on it and improving it and along the way you will still learn a thing or two. Best of luck! :)
Foxycart is aight with me, it has it's minuses but the support is good. 
It is ridiculous. Name another product that requires that for doing local development work. I can open the firewall port, but then I have to add security measures as an exception just for this task.
Ah, you get it. Yep.
Never tried Presta yet. If it doesn't have an MVC, I don't want to use it. So, I'll have to check it out.
Thanks for telling me this, but I already know this. I'm 44. I've been coding stuff since 1978, and was finally hired as a programmer when I migrated out of sysop stuff back in 1996. I've been booting up on Linux since around 2000, and using SSH that same year too. I'm ashamed that I didn't use Linux sooner than that, actually. Currently I run Ubuntu Linux 10.04 on my laptop. I haven't used Windows or Macs since around 2000. But, you didn't know this, so that's okay. The fastest technique for editing that I've found has been to use the FireFTP plugin in Firefox. However, think about it -- think about reading and saving a file like 1500 times in a day as you try to build something as complex as a theme or plugin for an obscure product catalog product. Why wait an extra second or two on each file save when you don't have to if you can get it all working locally? It's a major slowdown compared to working locally on your own computer. SSH would make it even slower because it involves encryption too, not just file transfer. So, no. I will not stand for this. I want Pinnacle Cart to see the light, listen to us developers, and change their product so that they provide some kind of developer workstation mode where we can build plugins and themes locally without having to install this on a hosting account or install some kind of funky DynDNS solution with our workstations.
I'll look into it. Here's what I'm hoping for: - fast - free product -- don't mind paying for plugins - or, if not free product, at least fairly affordable ($200 USD or less), even if the plugins are like $20 USD to $30 USD a piece. - can develop locally on my hard drive and not be required to develop on a public server or over a DynDNS account - MVC (hopefully minimalist MVC) - doesn't use Smarty -- PHP Alternative Syntax is a templating engine that's good enough! - not over-architectured like Magento is - a *real* plugin event system -- one that works similar to WordPress with event hooks and callbacks, and doesn't require that I cut/paste snippets of code into core files, and doesn't require that I run diff commands so that I can integrate stuff properly without breaking something - secure 
Not certain. I have two versions. One is IonCube encoded. The other I just received and is, I'm told, mostly unencoded. I would suspect that even the unencoded version has encoding on the licensing part. So, I'll have to check this out. On the IonCube version, I know at least that you can't access the admin without it being licensed. I don't know whether it does this check on every page in the admin.
Ah, reverse engineer it. Yeah, I may end up having to do that. Seems crazy to have to do that. I wonder if someone has done this on the web and shared the licensing faker hack. 
With all due respect, that's slow. SSH is nice, but it's slower than FTP because it adds encryption too. Either way, both ways are fairly slow compared to working locally on one's hard drive. You have to remember that I'm on high-speed DSL. My download speed is 1Mbits to 1.5Mbits. My upload speed runs anywhere from 380Kbps to 500Kbps. This is all that is offered in my area. I don't even have the option of Time-Warner high-speed Internet. Besides, I've got a buddy on TW and he complains all the time about outages that last an entire day, while most of the time my outages are only like for 2 hours every 6 months, if that. 
Ah, thanks Nodren. After making my initial post about the IonCube-encoded version, I just received the 99% unencrypted version today from my client for purposes of working on it for a theme for him. I'll see what I can do with it, to get this hack to go through. Thanks for the tip -- you give me confidence that I can make a local workstation hack for this.
In this case it's not a production rollout. I'm working in a staging folder. But the point is that it's slooooooow to edit a file directly on a staging server. Some may say, "Meh, it's just 2 seconds, perhaps 4 seconds sometimes." But save a file 1500 times, and that all adds up. I refuse to code stuff for people this way. That's just ridiculous. I won't stand for it. If I can't code it locally and push it to staging, test, and then push to production, then it's a project I don't need to be doing.
They really do bite the hand who might recommend them in the future.
Self-taught professional programmer here. Right now you're writing code to solve real problems and reading up on theory to cover all the bases, so I'll start out by saying you're probably going to do just fine. That said, I'd recommend: * **Bone up on version control** - Specifically git. Not because git is necessarily better than it's DVCS competitors, but because it's more prevalent. [*Pro Git*](http://progit.org/book/) is free and good. Keep your own projects under version control. Check out something that interests you on Github. Which brings me to... * **Read code** - Reading other people's code–even bad code–is a great education. You'll learn new techniques and form opinions on what's good and what's bad. Examine the code of that framework you're using. When you come across some code that solves a problem that interests you, read it until you understand it. * **Learn javascript** - PHP's domain (server-side Web programming) and Javascript's domain (client-side Web programming) go hand-in-hand. There are lots of good starter materials out there (e.g.[*Eloquent Javascript*](http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CCcQFjAA&amp;url=http%3A%2F%2Feloquentjavascript.net%2F&amp;ei=9dm5TqfXJ8rZgQfw3unjCA&amp;usg=AFQjCNFsIg0hgvBEsGQPsQOn6R6nu7dWEA)) and some toolkit like JQuery ([*JQuery Fundamentals*](http://jqfundamentals.com/)) and try to determine where Javascript provides a better solution than PHP. There's nothing like working with AJAX to really develop your HTTP chops. * **Understand how the Web works** - What us a URI? What makes a good URI? What's a router? What makes a good router? What is [REST](http://en.wikipedia.org/wiki/Representational_state_transfer), and why do people care? When should you `GET`, `POST`, `PUT`, or `DELETE`? How do cookies work? How does authorization work? If you're going to be a Web programmer, this is important. * **Really understand relational databases** - Know your [database normalization](http://en.wikipedia.org/wiki/Database_normalization). Long after PHP is gone, programmers will care about high quality data models. Poorly organized data will kill you on any life-sized project. * **Talk to other programmers** - You can learn a lot while sharing a beer with a fellow traveller. Look for [meetups](http://php.meetup.com/). Attend, make friends, and ask stupid questions. * **Write code every day** - This is the most important thing. Always be working. If you don't have a big problem to solve, solve little problems. Automate something that you do every day. Write a little program to check the weather. Just solve problems constantly. So how are you going to have time for all this? Easy. Solving problems--real problems--will eventually get you a job. When you have a job programming, you can think about this stuff for at least 40 hours a week. Until then...it takes time. And don't give up on the accounting. I became a programmer because my non-programming area of focus had a wide range of problems waiting to be solved.
BTW, they ionCube a bit more now. Here's what I found: example.com/content/classes/class.iono.php example.com/content/classes/class.doba_retailer.php example.com/content/admin/admin_security.php example.com/install/templates/outer.php example.com/install/templates/step-2.php example.com/install/templates/step-1.php example.com/install/templates/step-4.php example.com/install/templates/step-3.php example.com/install/index.php example.com/install/update/index.php example.com/install/install-commandline.php example.com/install/install-standalone.php example.com/install/install-server.php example.com/install/class.installer.php example.com/admin.php example.com/login.php 
It's not a downloadable product. It's a hosted solution, only.
Sure. It is just a good "real world" example to teach students and have them learn how bitwise XOR and other bitwise operators work in a way where you can easily see the change. The XOR variable value swap trick to not use a temporary variable was my personal favorite trick when I was in school.
There is no good real world examples for XOR because it is never used except in math.
Have you heard of lemonstand? They have a free developer version to build plugins, themes, etc.
Not sure what you are talking about, you would be working from your local hard drive. Its just http traffic that would get tunneled, which while slightly slower wouldn't be too bad. Maybe I was not clear, you host it locally, and use the tunnel to give yourself the IP address of your host.
Ah, I didn't realize. Thanks for clearing that up! :) 
That is taking DRY to an extreme I've never encountered before!
At the expense of obfuscating the code? No.
I'm not saying that all the code in WP and it's plugins is crap, but the ratio of crap to good code is sadly high.
Also, check out sendgrid.com.
&gt; ~~Why not just clean it right at the beginning where you assign it?~~ ~~That is even less secure. When you come to use `$_SESSION` you are then trusting that it is already sanitized, but `$_SESSION` is just user input just as `$_POST` is. I could just send you an unsanitized session variable with my page request.~~ Disregard. It's been a long day. You should only sanitize data *at the point of use*, e.g. when inputting to a SQL query (parameterized queries does this for you), HTML output (htmlentities), writing to files (htmlentities, addslashes, etc). Note that sanitization is different to validation, which should be done at the point of input (i.e. before you assign `$_POST` to the session).
Wut? You could send a cookie value with your request, but with regards to session, all you could do is change the session id cookie, not any values in the session itself.
I don't get it. If they have a 99% unencrypted version, why the hell are they sending out the encrypted version at all
Session data is only user input in the situation presented in this post, it is entirely server side otherwise.
Well, it's not like it's a super-crazy idea, it's only a XOR. I mean if I can use if($a ^ $b) instead of if(($a &amp;&amp; !$b) || (!$a &amp;&amp; $b)) then I'm going to. I don't think this is much different.
The way CI does it (or did it last time I used it) is to firstly use a standard PHP array as the config. That way the server will never output it as plaintext even if you do somehow call the file. Secondly in the index file (only point of entry to the application) a constant called VALID is defined and this is checked at the top of each library so if a file is called outside the normal application flow it will die. The way ZF does it is to put everything except the index file (and static content like CSS) inside the public folder - the public folder being the webroot for the application - and everything else outside the webroot. 
I'm sorry dude, but you are using regex to parse RSS! This can't go well. RSS and ATOM are both XML, so you may use an XML parser. Here are some very basic implementations: RSS: https://bitbucket.org/saibotd/hackerhub/src/e590b3012b45/rss.php ATOM: https://bitbucket.org/saibotd/hackerhub/src/e590b3012b45/atom.php Also you ma use [SimplePie](http://simplepie.org/)
WHY YOU NO USE XML PARSER TO PARSE XML
All this.. just makes me want to use PHP as my templating engine. That's what it was designed for, right?
If that's what LastRSS.php really looks like, I am ashamed for having used it in the past, and no wonder it doesn't work today!
To stop people from modifying it. Just because something is written in PHP doesn't mean it is open source.
There are other inconsistencies. Such as the fact that multiple separate class names can map to the same file (\foo\bar\baz, \foo\bar_baz, \foo_bar_baz all map to the same file). And the fact that the current reference implementation (and C patch) will fatal error if the file does not exist, which completely nullifies the standard stack-based autoloader in the core. I think it's a good initiative for the frameworks/projects to do on their own. But I think it doesn't belong in core (PECL maybe, but not core) at least at this time. One of the arguments being used already is that "php already is a kitchen sink language", but I'd point out that's a fallacy based on [Broken Window Theory](http://en.wikipedia.org/wiki/Broken_windows_theory)...
Any data structure in every language has a limit to it's maximum size. PHP does not put a PHP_STRING_MAX constraint on strings (like PHP_INT_SIZE), however, there is no such thing as infinite memory either.
lol, you're confusing the logical xor with the bitwise xor, too. In your example, the first line will result in an int, while the 2nd line will result in a bool. For PHP, `xor` is the logical xor operator while ^ is the bitwise xor operator. For all intents and purposes, this is the same thing: if (((int) $a + (int) $b) == 1)
That is a limit of the computer's memory, not PHP. My statement stands strong.
Some people may have some reasons why not but all technology fails. Generally the problem you are describing is what include is for. The only thing is to keep track if you want "include" or "include once." Pretty easy.
Not a problem at all. This is probably how most people get started with PHP. If the file's name or location ever changes, then the page will return an error, instead of including. If you're careful about that, then no, I'd encourage it. Five-hundred lines of anything, when dealing with websites, is usually a symptom of poor architecture.
So according to [this](http://de.php.net/manual/en/function.include-once.php), include_once seems to be the only option here, right? Having the same segment multiple times would of course make no sense. Thank you!
&gt; "This is probably how most people get started with PHP." What would be the logical "next step"?
For what you're doing, it doesn't really matter. People use include_once when the included file contains a function, because if you define two functions with the same name (or the same function twice), you'll get an error. 
Did it pass or not? It looks like it didn't pass the vote? This should require 2/3 majority in my opinion.
Thank you. Follow-up question: the segments need no head or body tags, just the content?
Tiniest possible performance hit. Don't include 1000 files per request. But you probably want to look into all 4 choices you have: include require include_once require_once It's most certainly what everyone does when creating webpages!
The voting phase lasts at least one week (See [RFC:Voting](https://wiki.php.net/rfc/voting). So we won't know until next Monday at earliest. But there's been at least 2 people (including myself) who have called for the vote to be cancelled due to the RFC still changing: http://news.php.net/php.internals/56118 and http://news.php.net/php.internals/56192 So only time will tell what happens...
Yes, you can include whatever you like. Just make sure it's a proper html page in the end.
Depends on what you're trying to do. Between CSS, Javascript and PHP, a web application can do nearly anything you could in a standalone client. Most people just want to be able to display the time, a visitor counter, maybe store user information, etc. Are you trying to learn PHP, or are you trying to build a website?
Right. When you do a PHP include, you're basically pasting the code from the included file into wherever you're calling include(). 
I already "know" and use PHP, and I use includes and requires to build up elaborate sites. I was just wondering if there was another way.
You want to move towards seperating php code and html. You should strive to have as little php in your html as possible, basically just simple echoes, loops and if statements. Do the work for this outside your html. That way, it's easy to work with people who are pure designers, and it's easier to switch out and combine parts of your site.
Another way to include other content?
One point overrides all other points: This isn't really a concern for the core. The core provides the autoload facility; the end user provides implementation(s) for it. And I think the built-in implementation assumes too much about the environment (hirearchial file system, etc), so making it a "standard" would further diminish platform agnosticism which is something PHP needs to avoid.
I couldn't agree more with your assessment. I don't understand why there's so much development on OO code in the PHP core. That is not the place for them and the API's tend to be terrible and then we're stuck with them forever. The autoload system is great because any framework can hook it it's own implementation. Providing an implementation locks us into it forever. PHP developers shouldn't be wasting time on re-implementing code that exists at the framework level. There is so much more core code to be worked on. I understand that different developers work on this stuff, but it just increases the size of the code base, bugs reported to issue tracker, and so on. For example, why are there dozens of different [iterators](http://www.php.net/manual/en/spl.iterators.php) in the SPL? Does anyone actually use these? It seems with every releases there's 5 more iterators while the old ones continue to have long standing bugs. Why is some developer pushing out more and more of these? Most of them could be written in PHP and would be safer to do so!! Plus, a framework could put them into the proper namespace rather than polluting the global space. Then there's the DateTime class, which is fine, but it's ridiculously minimal. I don't use it. I have a value-style Date and DateTime classes with significantly more functionality. I just need datetime functions to implement it. The only classes the SPL really should have are SplFixedArray and SplObjectStorage (and maybe LinkedList) -- everything else can and should be implemented in PHP code. There seems to be focus lately on putting more and more framework-like code into PHP (and having it written in C) and that just seems backwards to me. I think the success of PDO is to blame; they make one "good" abstraction and now everything needs to be built into the core.
You want to do this for reusability. Have a header? Footer? Main Nav? These are the sorts of things you would include so that changing it in one place changes it everywhere.
How you format the config file makes no difference on whether a malfunctioning server can serve it as plain text. That is why you take it out of the web root. Personally, my config file is a standard class. Makes things more consistent to me, as the rest of the application is also object based.
The performance hit is negligible. Use these functions. Generally you would use `include` or `require` for content that you shouldn't just copy/paste every time. For example, `header.php`: &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;?=$title?&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;? require_once 'nav.php' ?&gt; &lt;h1&gt;&lt;?=$title?&gt;&lt;/h1&gt; `footer.php`: &lt;/body&gt; &lt;/html&gt; `index.php`: &lt;? $title = 'Welcome!'; ?&gt; &lt;? require_once 'header.php'; ?&gt; &lt;p&gt;This is my website&lt;/p&gt; &lt;? require_once 'footer.php'; ?&gt; `contact.php`: &lt;? $title = 'Contact Info'; ?&gt; &lt;? require_once 'header.php'; ?&gt; &lt;p&gt;Phone: xxx.xxx.xxxx, Email: xxx@xxx.xxx&lt;/p&gt; &lt;? require_once 'footer.php'; ?&gt;
Lets not forget the built in web server.
it's in your best interest to hack it for performance reasons too, I've had pinnacle's servers drop our site before too, mainly because it takes time to talk to their server and get a response back, time that should not be wasted on each page load. If you remind me what file is still encrypted, I can hopefully tell you how I went about reverse engineering it.
they only send the 99% unencrypted version out to those who sign an NDA. They are very secretive about their code base, and it is most definitely closed source.
I agree that this definitely needs more community consultation and consideration before even being put to a vote. I support the idea in principle, but I've voted against its inclusion in this instance, because the implementation seems poor.
Usually a dynamic Content Mangement System and/or a framework-based system that separates text content from business logic.
This is a good explanation of separating content to keep it DRY (Don't Repeat Yourself) and reusable, however, people who open a tag in one file *&lt;body&gt;* and then close it somewhere else (or possible not at all) *&lt;/body&gt;* deserve to be stabbed in their sleep. And those who use XML incompatible short open tags on portable code deserve a rusty blade, too.
When you include(), it will pretty much copy/paste the php file right where the include command is. So, it could be all HTML or all PHP, or a mix. Edit: Try to make your includes have some kind of category or purpose.
The only two choices which should ever be needed are include() and require(). Needing the other two (include_once, require_once) is an indication that your code flow is probably broken.
That's not as uncommon as it should be.. Use an htaccess-type control to deny access to a subdir. Put define() statements in a .php file, require_once it where you do your other includes.
&gt; XML incompatible short open tags Could you ELI5 that very briefly?
Not really. The server will have to do some disk access to pull all the various files together, which is why people will say there's a small performance hit, but it's standard procedure. It won't be something to be concerned about until you're getting dozens or hundreds of requests per second.
I was going to ask you to explain to me in simple turns what ELI5 means but luckily I Googled it instead. Short open tags (not to be confused with PHP short (echo) tags) is code that use &lt;? $x = 5 - 3; ?&gt; as opposed to &lt;?php $x = 5 - 3; ?&gt;. These short opening tags are disabled by default on most PHP interpreters, mainly because they cause issues when they try to parse XML as such: &lt;?xml... Therefore, your code is likely to break on certain servers (and could go unnoticed, exposing source code and confidential data such as authentication credentials) if you don't get into the habit of always writing full &lt;?php opening tags.
&gt; The autoload system is great because any framework can hook it it's own implementation. Providing an implementation locks us into it forever. I think I should point out [this page](https://wiki.php.net/rfc/splclassloader) and specifically, this sentence: &gt; In the mid of 2009, several lead developers started an initiative called PHP Standards Group (aka. Framework Interoperability Group), which is mainly focused on interoperability between different Open Source projects. Thus, all that the [FIG](https://github.com/php-fig/fig-standards) is concerned with (and by extension, the PSR's) is frameworks; if you're not a framework developer then you're not within their purview. This is also the reasoning behind this whole exercise: all of these frameworks were implementing their own autoloader logic, and so this is the answer to their problem of providing interoperability between all of them. I'm not saying it's _right_, just pointing out that what you perceive as a pro is actually seen as a con (to the FIG).
Many frameworks have already implemented PSR0. There doesn't seem to be any good reason to add this to the PHP core and freeze its implementation. If there's an implementation issue that needs to be resolved, it's easy for the FIG, the frameworks, or end-users to resolve that directly. Baking it into the core provides no advantages. If the FIG wants to promote a single PSR0 implementation across all the frameworks, they should just do that. 
Again, I'm not arguing _for_ or _against_ it; just attempting to provide some insight as your initial response indicated that you weren't aware of the FIG's relationship with PSR.
Again, I'm not arguing _for_ or _against_ it; just attempting to provide some insight as your initial response indicated that you weren't aware of the FIG's relationship with PSR.
Nothing wrong with that - PHP is a language oriented for the web, and the built-in webserver is for development purposes only.
The divisions of a page/template/script into multiple files should be logical. So, for example having separate files for a site header, site footer and the body of a given page makes sense. Having separate files for 3 different blocks of content that ONLY appear on the same page doesn't. They should all be in a single file. Having a separate file for a block of content that can appear in the body of multiple pages, and the content that appears only one one does make sense. The fact that you are asking us about this makes me think that probably there is no logical division of this page and you are making a bad choice breaking it up. Certainly 500 lines is not a lot for a single file, not remotely.
This should do the trick: $formattedDate = date('YMd', strtotime($result['date_value'])); Check out the following for descriptions of what this bit of code does: http://php.net/manual/en/function.date.php http://uk3.php.net/manual/en/function.strtotime.php Hope this helps.
Who needs regular expressions? Just have MySQL give you the date in whatever format you want using DATE_FORMAT - failing that, use date() / DateTime to convert it to your preferred format. I'm totally assuming you're doing something sensible like storing the date/time value in a datetime field here by the way. And if you're not, perhaps you should start doing so =) Alternatively PHP can parse a string (in a specified format) to produce a time
The simplest is probably: `date('YMd', strtotime($theDate));` 
If the date you want to reform is stored the long way in your database, reformatting the output with PHP is trivial: echo date('YMd', strtotime($row['datetime'])); [String To Time](http://us2.php.net/manual/en/function.strtotime.php) [Date](http://us2.php.net/manual/en/function.date.php)
In this case your client is correct and you are wrong. You should stick to standard DATE/TIME/DATETIME/TIMESTAMP columns for the database unless there's a very good reason not to. You are advocating switching to CHAR/VARCHAR/TEXT fields to be used for DATE. That is a bad idea. It sounds like in this case they are DATETIME columns, it is really trivial to reformat those however you want in PHP. Look into: [strtotime()](http://php.net/manual/en/function.strtotime.php) [date()](http://php.net/manual/en/function.strtotime.php) There's almost certainly a better way to do it but off the top of my head (assuming you have the DATETIME column named 'foo'): $output = date('YMd', strtotime($row['foo'])); Would give you exactly what your client is asking for. This is almost the kind of thing I'd expect to be asked during a job interview to test for basic PHP/MySQL knowledge and skills. EDIT: Also of course there is a way to do it with regex but you needn't bother, as I demonstrated above. When it comes to dealing with standardized data like date, time, etc. you probably don't need to resort to regex.
Big Thanks!!
I didn't originally make the system -- one of my co-workers did. But thanks
You're welcome, sorry if my response was kinda harsh. :)
Ok, got it. Thank you
I don't see what the big whine is, really. Implementation in core doesn't mean that you have to implement it in your code. It's not being forced on anyone any more than any other SPL functionality. Or mcrypt, or mysql, or postfix... It's an extension that you choose to use, or not.
Tell me something I don't know
I see a lot of suggestions for using strtotime, which will work. However, if you have any access to manipulating the SELECT query, you can do something like: SELECT UNIX_TIMESTAMP(date_value) AS date_value_timestamp FROM foo WHERE ... This will give you $result['date_value_timestamp'] as a Unix timestamp straight out of the database, ready for manipulation with the date command.
I disagree with that argument. It's an instance of [Broken Window Theory](http://en.wikipedia.org/wiki/Broken_windows_theory). Basically "I can cite a place that does this, so we should keep doing it". Prior mistakes shouldn't ever be used as justification for future mistakes. Make decisions based upon merit and merit alone...
I find that to be one of the most ridiculous analogies I've heard in a very long time. "There are modules which you aren't forced to use" does not equate to "Broken Window". Just because **you** choose not to use a certain module does not make it a 'mistake'. I find that this proposition definitely has merit. Adding functionality that people WILL use, and is more performant than they can do themselves, is hardly wrong. Given the proposition, I'll most certainly implement it as I'm already doing this in code, and anything they add in C will certainly be faster.
Oops, you're right. My bad.
In your query you could do something like SELECT DATE_FORMAT(your_date_column, '%Y%b%d') FROM . . . That should output directly from mysql in the format you want. Might be a little prettier than doing it in php. Although the strtotime() thing would work just fine. 
Only problem with SplClassLoader is that the very people that are proposing it are most certainly the same not going to use it. It's a valid point nonetheless. A bad standard can be better than none, if there is enough demand. And as written elsewhere, a large amount of developers are keen on using it (unware of the glitches though) and most importantly the convenience it brings. That's a legitimate measurement of if it should go in. And now that some cruft gets retired (magic quotes, etc.) I would even go so far and say there is space for new ~. It's just that the current implementation is not tested at all, and it's only rushed for political reasons. (Wouldn't be the case if the real and natural uptake was strong enough. But alas PHP 5.3 is still only at 16% server saturation, so that's not practically happening.)
http://us3.php.net/manual/en/book.dom.php
"Re-throwing Exceptions" example is all wrong. That's not re-throwing an exception, that's throwing a NEW exception. Re-throwing an exception is: try { foo(); // throws Exception } catch (Exception $e) { throw $e; }
Thank you for the great reply! I'm definitely still working on/in accounting till I finish school and get some solid work experiences. Do you have any recommendations for learning about how the net works? I've looked up some piecemeal information on the subject while setting up my Apache server etc. but I've not came across any all in one teaching materials on the subject. 
It's all good, mang.
Thank you! I'll definitely look into learning Code Igniter/Zend!
Oh. Well, my bad, feel free to mentally replace all my examples' `^` with `xor` then.
Thank you, even though it's not the silver bullet shortcut that I'm hoping for I'll keep on cracking at it. It is often hard to keep myself motivated when things get tougher, you are correct that the usefulness of a project is a key determinant on how much work I put into coding. 
I didn't make it, somebody (in this very thread!) recommended it and I hadn't looked for an alternative.
Curious, why are you doing it this way. I haven't seen a reason to do it like this ever. Make a pointer to a file and save it like a normal image should be saved. 
there are more than a handfull of reason to do this. one example would be writing a form validation class, where any array of 'rules' is passed to a constructor: array( 'input_name' =&gt; array( 'required' =&gt; array(), 'email' =&gt; array() ) ); ... when looping over the 'rules' for each input ('input_name' in this case), instead of using a switch statement, you can just call the method directly. do you really think that you should have to call every method in a class manually? the constructor should never call methods? please.
Thanks for replying. I'm not 100% sure on the details of the source db but I know the image is stored into the db with another application (non-web related); I have no control on how the image is stored.
Your code looks fine to me. Maybe try variations of the header line - I tend to use: header('Content-Type: image/jpeg'); when outputting a JPEG and I know some browsers are fussy. Might also be worth double checking $student['Face'] is correct, could it be $student['face'] or similar? Everything else looks like it should work though.
Perhaps it has to do with a NULL byte in the image causing the DB layer to interpret it as an end-of-data indicator? Something like that? I forget the details on how PHP handles them.
Thanks for the suggestions &amp; for looking over the code. I tried different variations of image/*** in different browsers, same output. I also tried ['face'] and it just gave me a blank page. Thank you!
If the field type is timestamp, as it should be, then do the formatting in the SELECT query, [as was already posted](http://www.reddit.com/r/PHP/comments/m6hnc/reformatting_date_from_mysql/c2yjh9u). SELECT DATE_FORMAT(reportdate, "%Y %b %d") FROM mytable http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_date-format
Interesting, thank you for this, I'll look into it.
I think RobertThree is on track, try the SQLSRV drivers instead of the MSSQL. I believe they are more modern. Drivers: http://sqlsrvphp.codeplex.com/ Ref: http://ca.php.net/manual/en/book.sqlsrv.php
Ah, Thank you! I will try this.
Make sure the image isin't stored encoded in base 64. generally blob image formats include utf8/multi byte characters that apache might have a hard time outputting. 
Thanks, I'll see what I can find out. I didn't even think about the format from when it was originally stored.
Output the field without sending headers. If it's base 64 encoded, it'll be ascii characters and perhaps indicate so. If it's raw image data, it'll be a bunch of gibberish multibyte characters. If some form of data cleansing was performed to the input (ie addslashes), you'll need to reverse that. Good luck. 
Yeah, I'm not sure why she's doing "if (!file_exists($filename))" in the catch block... why not just check for that first before trying to use file_get_contents()?
So: #ifndef _STDIO_H_ #define _STDIO_H_ which you see at the start of almost every .h file is "probably broken code flow?" This is essentially the C equivalent of PHP's include_once or require_once.
Found this in the php docs for mssql_query looks like he's removing something with substr &lt;?php $db=mssql_connect("server","user","pass"); $d=mssql_select_db("NorthWind", $db); $sql = "SELECT Picture FROM Categories WHERE CategoryId=2"; $res = mssql_query($sql); $row = mssql_fetch_array($res); $data = $row['Picture']; header("Content-Type: image/bmp"); //remove the ole header $data = substr($data,78); //print the pic in the browser echo $data; mssql_close(); ?&gt;
Can't be that, he said it does display the top part of the image.
Image data is not multibyte, that only applies to character sets. ~~.. are you trolling?~~ 
I would look into [Dynamic Image Generation](http://www.webcheatsheet.com/PHP/dynamic_image_generation.php) using the [GD Library](http://php.net/manual/en/book.image.php) if you want to generate them. But if you are just trying to load them dynamically you can do that pretty easily. if($company == 'Reddit') { $image = 'reddit.jpg'; } else { $image = 'default.jpg'; } then in the HTML call the $image variable &lt;img src="&lt;?=$image?&gt;" alt="Alt Text" /&gt; (edited for formatting)
Might want to cover use of error_reporting() so if hes messing around he can get better info on where a script is taking a dump. Also of interest probably would be interaction with databases, making graphics on the fly with GD, and also any template engine you happen to favor so he doesn't have piles of HTML laying around with the PHP and generally making things a mess to dig through later.
interactive debug session
Also, nested tries? WTF the code is awful. It's ridiculously complex for the simple stuff it does. 
Not sure if the post is meant to be a troll or not, but from a Technical Director at a digital company... that doesn't seem kosher. I left a comment but it seems to have been ignored and rejected. There are so many things wrong with even that short example.
You mean xdebug?
Meh its just blogspam. Look at their post history.
Use the modulus operator, "%" : if ($count % 13 == 0) { print "&lt;br/&gt;"; } or similar.
Show him how he can reference any data from a form, regardless of where it is located on the page. Show him how you don't have to mix design and programming unless you really, really want to do so. Show him how there is a vibrant PHP community that can help him answer questions quickly instead of spending hours looking through white papers and long-dead tech forums. Show him the promised land, my friend. I've got a .NET day job and I miss PHP.
Sorry for the typical "I bet I'm a better programmer than this person" rant that articles like this always trigger in these online discussions, but... I can't believe a brand new article about error handling fails to even mention the ErrorException class. &gt; However good of an error handling framework you have in place, there will always be problems at run-time. Of course you don’t want these errors to show up in the user’s browser. This is where exception handling enters the picture. Exceptions allows you to handle errors and exceptional situations gracefully. Exception handling isn't the solution to this problem at all. Turning off error messages in production is. Exception handling is completely irrelevant to this issue. try { if (empty($name)) { throw new NameException(); } elseif (empty($email)) { throw new EmailException(); } else { echo "Name is " . $name . "&lt;br/&gt;"; echo "Email is " . $email; } } catch (NameException $n) { echo "A name was not provided."; error_log($n-&gt;getTraceAsString()); } catch (EmailException $e) { echo "An email address was not provided."; error_log($e-&gt;getTraceAsString()); } Exceptions are not a replacement for goto that you can just use for flow of control if you're in the mood.
He is not; when a browser interprets binary data as textual data it has to guess what character-set the data is encoded with; if it guesses UTF-8 then mutli-byte characters may be present.
mabye is just me, but I see a zapper in the code.....
+1 for error reporting, I'm currently supposed to be integrating someone's system and have spent an hour fixing notices from code like `$_POST[userid]`... They obviously have never turned error_reporting higher than the default.
Yes, usually it'll take a cue from the http headers, meta tag, or browser default setting in that order. For image data this makes no difference of course, so it's not an issue (there are no "gibberish multibyte characters" in image data). I may have misunderstood in that I thought he suggested the headers were related to base64 ascii characters, which might include the header somehow.. Regardless, if it was encoded in any way you would still not see the top part of the image and not the rest. Even if the headers were already somehow set it can't hurt to set them again, it'll just overwrite the current header (by default).
Have you checked the image field is large enough to hold all of the data? Try printing out strlen($student['Face']) and see if that matches the size of the original data, and compare it to the table field size. Tried different browsers (older versions of IE _required_ a capital T in "Content-Type")? Maybe you can find a clue by opening the browser-saved "image" with a hex editor, or try opening it with an image viewer?
Upvote mostly for your username.
yep, or one of the better ones
Well, apparently I didn't read the OP, I was suggesting he does exactly what he did here: http://i.imgur.com/0f5Zn.png Notice the question marks? Browsers interpreting it as a multibyte character. If somethings wrong with encoding at a certain point of an image, it'll output the top portion of the image until it's screwed up. for instance, if somehow in a image, there's a double quote(") and an addslashes sanitation was performed, data would be displayed until the image syntax was broken with the \(slash).
I wouldn't have to worry about scripts that create endless loops or very large arrays or things like that taking down the whole server, would I?
Runkit hasn't been maintained in many years. I would avoid it at all costs for anything except research for core modifications. Don't *ever* use it in production code...
Not currently, but that might change soon.
You are passing `empty()` a string literal, and it is there to test variables. empty($name=trim($name)); I'm presuming this would however work.
Apparently I entirely misinterpreted your earlier post, my apologies.
you should'nt be surprised by this since php has so many things screwed up.
if *at all possible* try to pull these out and display them from a directory rather than the database. Even if you have to set something up to run every morning to extract it or something. PHP and databases are *really bad* at storing blobs and/or globs. (Essentially, they're so large they'll slow down everyone else's connection, and even the most powerful servers will have noticeable slowdowns with moderate traffic)
Speaking from the position of someone who's tried to implement sandboxing in PHP for use in a hostile environment (security community), I can say that no, you will not ever get it to be secure. If you wish to implement sandboxing, do it at the system level with chroot jails. Even that is not perfectly secure, so you must ensure that the system you're running this on is expendable, and not connected to anything that isn't.
`empty()` is not a function -- it's an operator and is similar to `isset()`. The only reason it exists is to operate on variables -- you don't need it for anything else. For example, you can say: if (!trim($name)) echo "I'm empty" You don't need `empty()` there! The not operator gives the same result. Where you need it is when a variable or array key might be undefined. For example: if (!$name)) echo "I'm empty" if (!$foo['bar'])) echo "I'm empty too" If `$name` is not defined or the key `bar` doesn't exist in `$foo` then the PHP interpreter will fire a warning. In those cases, you can use the operator `empty()` to test if the variable is empty or doesn't exist. 
Wouldn't that just essentially evaluate to "empty(1)", as the assignment is executed and returns 1, which ends up becoming a parse error, as it is not a variable?
switch ($field_company) { case 'Reddit': $image = 'reddit.jpg'; break; case 'facebook'; $image = 'facebook.jpg'; break; default: $image = 'default.jpg'; }
TIL that empty() runs isset(). Somewhat ashamed now to admit that for years I've been writing code like this: if(isset($x) &amp;&amp; !empty($x)) { ... 
No. Assignments return ~~the variable which was defined~~ the value which was assigned. (Thanks, judgej2.)
The implementation doesn't cover every use case, and that makes it a feature, rather than a bug?
well didn't THIS turn out to be an ignorant response? :D
You're trying to use a screwdriver to pound nails. if (!strlen(trim($name)))
This is what a cheap Dreamhost account is for. Proxy from your server to there.
Maybe the firewall is blocking HEAD requests? In which case it is stupidly configured.
Ah. I stand corrected. 
Plus, how else are you going to run an operation on a potentially undefined variable without a notice other than passing it by reference (i.e. the reason why you can't pass anything but a variable)? And of course aside from using the error control operator (@).
Yeah, that's because the variable being passed to empty is being checked by reference, so it's able to check if it's set AFTER it's passed. If the var isn't set, it's empty and naturally empty returns true.
Plus, $name could be equal to " " which is a single space, which isn't empty. However, a zero-length string is considered empty. Therefore, it won't always return the same result and still depends on the initial value of $name leading UP to that line.
You know what I do? I store ALL of my dates in UNIX timestamp format (as long as I don't need anything down to smaller than a second). Store it as an integer in your database (specifically "BIGINT" format for MySQL) then you can use the date() function to format it however you want without first having to use strtotime() to convert it to a UNIX timestamp. If possible, convert the field to an integer and just use UNIX timestamps for everything and, instead of directly outputting the contents of the field, just pass it through date() on the fly as the page is generated so it's a piece of cake to update the format sometime later. 
Do you have any aversion to storing time as a UNIX timestamp (integer) instead of a DATETIME field? I find it more efficient, since you can pass directly to PHP without a strtotime() conversion and still directly compare/sort by BIGINT formatted fields (storing the UNIX timestamp) at the database via SORT, etc. And then, if you need to output directly in a query, you can still format it via FROM_UNIXTIME() in MySQL.
Which you can download [here](http://github.com/ambiversive/asg/).
The network admin just disabled their gateway antivirus and now its working. So, something with the configuration of that must be affecting the headers. Also, I did not get to test this script from a Windows machine inside their network, just on a linux machine, if that would somehow make a difference. 
I don't think I've ever used empty...
Actually you can't take a reference of an undefined variable either. Both `isset()` and `empty()` are implemented as PHP opcodes directly and are not function calls. That's why when you attempt to use them on something other than a variable you get a parse error rather than a runtime error. Using the error control operator is a performance nightmare because the error is still generated and it's only silenced by the operator. 
Just curious, in terms of storing text does this apply as well? I.E. text vs. blob? I've always heard that it's better to store text content as blob rather than text.
I refer you to the second sentence of my comment: &gt; You should stick to standard DATE/TIME/DATETIME/TIMESTAMP columns for the database unless there's a very good reason not to. There are reasons to use any of them, it really depends on what you're doing with them.
empty() is not a function -- it's ~~an operator~~ a language construct. Minor correction there. See the [notes](http://php.net/manual/en/function.empty.php#refsect1-function.empty-notes) section.
Except they're not the same. Empty also errorlessly tests the existence of a variable. Your code will error if $name is not set.
 if (!trim($name)) echo "I'm empty" Be careful! If this code is supposed to check to see if $name is an empty string, this is the *wrong* code to use. I see people doing this all the time, but "!" or "if($name)" is the *wrong* way to check for an empty string in PHP. The problem is if $name is something like "0" (a string containing the character of a zero), that statement will echo "I'm empty" because PHP attempts to convert the string to a boolean, which means "0" becomes false. This is correct: if (trim($name) == '') echo "I'm empty" Or without the trim() this is also correct: if ($name == '') echo "I'm empty" (Those are two single quotes by the way, not a double quote, but double quotes work fine too.)
it depends on how you want to use it. You can't search and sort by a blob (because it's stored in binary), so if that's important to you, you can't use blobs. Also, if you store text in a blob, you still have to tell your script how to use it (ex: utf8 or whatever), so that's an extra step there, too. If you have ridiculously large amounts of text, you might want to look into blobs, but if you plan on having that content searchable, sortable, or even easily read in phpmyadmin during development and troubleshooting, stick with text. As far as I can tell, the increase in performance of a blob is mostly speculation and opinion, and even when people have numbers to back up the claim, they're often negligible. (Saving split seconds while selecting millions of rows). But if you want my opinion as someone with over 10 years experience dealing with DBs every single day.... don't put text in blobs, you'll regret it for many reasons other than just the minute bit of performance increase you may or may not even get.
If you wish to stay ignorant, then stay ignorant. But PHP got this right. I suppose you want to join the PHP bashing parade, but before you do make sure you are bashing an actual problem.
&gt; is the wrong way to check for an empty string in PHP. Yes but my code is exactly equivalent to what the `empty()` function does and that is the entire point. That being said, your warning applies equally to that function, `empty($test)` will return true if `$test` contains `'0'`. 
Gotcha, thanks.
Yeah, I realized that after I posted it so I edited it a bit to make it more clear that that's wrong *if* you were trying to determine if the $name is an empty string (""). Almost anytime someone writes that code, that's what their intention likely would have been. That also brings up the point that empty() is also not the correct way to check to see if a string is empty (""), because of the same issue with the string "0" being considered "empty".
One problem solved, more problems created. Multiple Inheritance has a bunch of its own issues (shit like [diamond problems](http://en.wikipedia.org/wiki/Diamond_problem)).
Almost all these replies are missing a key point and are perpetuating a really common bug in many PHP scripts... If you are trying to determine if trim($name) is an empty string (""), all of these are the **wrong** way to do that... if (empty(trim($name))) if (empty($name = trim($name))) if (empty($name)) if (!trim($name)) if (!$name) The empty() function will not tell you if a string is empty! Code like "if($name)" or "if(!$name)" will also not tell you if a string is empty! The problem is if $name is something like "0" (a string containing the character of a zero), those statements will be true because PHP attempts to convert the string to a boolean, which means "0" becomes false. The only correct way to determine if a string is empty is to check it against "" or '' (either double or single quotes is fine). So these are correct: if(trim($name) == '') if($name == '') Use the first one if you want to trim it first, use the second if you don't need to. Never use if($name) or if(empty($name)) when name is a string unless you actually intend for strings like "0" to evaluate as false (which is rarely the intention of this kind of code).
Using strlen() is also overkill since you don't really need to count the characters, you just want to know if trim($name) is empty or not. So that uses more overhead than is needed. if (trim($name) == '') This is the most efficient and correct way to do that.
This is the same sort of stuff that prevents `funcThatReturnsArray()[0]` from working correctly?
That strikes me as likely being bad coding... 
Not necessarily, though it often is. In practice, multiple inheritance is bad coding already (though not always) - In my own experience, I have yet to see where multiple interfaces do not suffice for the problem at hand.
I don't think you should misuse interfaces in this way. Just because you can do something it's doesn't mean that you should. Implementing something like this would screw up source control, confuse people and generally make life harder for yourself.
I'm pretty sure I've received notices when using if (!empty($foo)) about $foo not being set.
Are you sure, or just guessing? I would assume that the length of the string is already stored in the data structure, making it a simpler operation.
I guess that doesn't come up for me since I always initialize my variables.
So if `empty` and `isset` are language constructs like `print`, why is it that they need parentheses and `print` doesn't?
Oh? So you never test for the existence of GET/POST/COOKIE/SESSION variables?
I'm pretty sure you haven't. It's the exact scenario it's used for.
I believe CI can optionally store all Session data in the database instead of SESSION.
Because PHP.
I've thought about doing that, that was until I learnt about PHP's maximum integer size. As you may know, on a 32 bit platform the maximum size an integer can be is 2147483647, which when treated as a UNIX timestamp is 2038-01-19 03:14:07. Any number passed to PHP's date function that exceeds this value will produce an incorrect date. Therefore I've opted for keeping every date in a database as a DATETIME, and when it comes to formatting the date in PHP, I've used PHP's DateTime class. The constructor of this class supports a number of different date formats, just like the strtotime function (except it supports date values beyond January 2038) and has a format() method that is identical to the date() function.
Does it not pass the *value* of the variable, rather than representing the variable itself?
&gt; I would assume You guessing too? 
&gt; I would assume You guessing too? 
Because `empty` and `isset` are expressions that return values and `print` and `echo` are statements which do not.
It's because empty() doesn't just test for truthiness of a value. It also checks first whether the variable with that name has been declared, just like with isset(). So obviously, it'll only work on a variable referred to by its plain name. Think of it as syntactically the same type of language construct as isset().
Actually [`print`](http://php.net/print) always returns `1`.
Fair question, I'm just assuming it would be faster, but it could be tested if someone wanted to take the time to see for sure.
it was news to me too. this causes no errors: &lt;?php error_reporting(E_ALL); if(!empty($x)) echo '$x is not empty'; else echo '$x is either empty, or !isset.'; ?&gt;
So many people do this. It drives me nuts when I'm working on a project and I see if (isset($x) &amp;&amp; $x != 0) or something similar. I even bring it up and change it in the code base and people still do it. empty() needs more love.
Tell me what the better ones are, or I'll track you down and give you a pink belly you won't soon forget.
You're a buttplug.
Yes but I explain the basis of my guess.
In the back corner of my framework, code that hasn't been touched in a long time. 
I just 86'd like 14 instances of it in the script I was just working on. Thinking of you, bro... :)
Wow, you're right. I too stand corrected. php -r 'function test(&amp;$arg) {$arg = 2;} $var = 1; test($var); var_dump($var); test($var = 1); var_dump($var);' int(2) int(1)
Yeah, that's why I cast UNIX timestamps to a floating point. That can handle significantly larger numbers.
Cool trick brah. Terrible example though. Who would hard-code a change on your live server with what should be SCM'd?
I read that and also introduced a few reasons of my own. BIGINT (for UNIX timestamps) works VERY well for me in the context of PHP, if you would please refer to my last comment ;) 
No. Runkit isn't good for anything. If you use it on any production system, you are almost certainly doing it wrong.
This is the most correct answer.
Do you really need elseif/else if you're throwing an exception on the statement before?
You can make a wrapper: function is_empty($var) { return empty($var); }
No, I mean: &gt; ... **passing** it by reference ... i.e. Say your code is this: // $myvar is not defined. error_reporting(E_ALL); funkyFunc($myvar); function funkyFunc(&amp;$var) { if (!isset($var)) { echo "Not set!"; } else { echo "Set!"; } } No undefined notices are thrown because you've passed an undefined variable by reference (note the ampersand in the **parameter list** of the function definition). Try it out. **Edit:** To clarify, you're right, but we're talking about two things. 
Or just use `strlen`.
 php &gt; $x = null; php &gt; echo isset($x) ? 'yes' : 'no'; no php &gt; echo empty($x) ? 'yes' : 'no'; yes php &gt; 
I wasn't trying to be a dick, but I honestly could have sworn I've changed code from if (!empty($foo)) to if (isset($foo) &amp;&amp; !empty($foo)) for that very reason, but I guess I'm mistaken.
You can have MySQL perform SORT on DATE/TIME/DATETIME/TIMESTAMP fields as well. If you're storing a timestamp it should really be a TIMESTAMP field.
Use a encrypted cookie. Send the cookie to auth server for authentication, once authenticated, then set the cookie to authenticated.
The most important thing about PHP: `php.net/&lt;function&gt;`
I wasn't saying that isset() and empty() give the same result, but that they have the same syntactical rules, being language constructs that accept a variable referred to by their variable name.
&gt; You can have MySQL perform SORT on DATE/TIME/DATETIME/TIMESTAMP fields as well [I know.](http://www.reddit.com/r/PHP/comments/m6hnc/reformatting_date_from_mysql/c2yrhrt) See: &gt; and still directly compare/sort by BIGINT formatted fields And: &gt; If you're storing a timestamp it should really be a TIMESTAMP field. Why? Not arguing or anything, just curious. I use this all the time and I'm interested/open to alternative viewpoints in case there happens to be a convincing reason why I shouldn't use UNIX timestamps. Also, I know that if I want to store a date in MySQL coming from PHP, I need to pass it as a string (i.e. '2011-11-10') and it gets hairier if I need to also include seconds. Instead, I can just be like: $stamp = time(); $query = "INSERT INTO table (stamp) VALUES ($stamp)"; dbquery($query); And... I'm done. Also, if I want to fetch it: $query = "SELECT stamp FROM table WHERE stamp&gt;" . time(); // Get timestamps that are set after today. $result = dbquery($query); $stamp = (float) mysql_result($result, 0); echo "That stamp is for: " . date("F j, Y g:iA", $stamp); And as you can see, there's really nothing I need to do to it. I don't need to constantly filter my timestamps through "strtotime()" in order to start working with it. Also -- an empty field is simply 0.
Me too! I mean, no one **WANTS** to write extra code like that, and I swear that I didn't start that habit for absolutely no reason... but it kinda looks like maybe that's the case. :) Contrary to what the title of this post asserts, I'd say the empty() function just got a little awesome-er in my book.
Are you serious?
No dickery assumed. Considering the code I've actually written which I absolutely refuse to show publicly then it's not much of a stretch to have written if (isset($foo) &amp;&amp; !empty($foo)) That said, pretty sure it hasn't been necessary since sometime in version 4 when I started programming PHP, I cannot say from before that. 
Not that it's really an issue in this case, but be mindful that before PHP 5.4.0 E_ALL doesn't actually enable all error reporting (it lacks E_STRICT), and that most E_STRICT errors are raised at compile time and will not display if you up the error_reporting level in code like that.
TIL. I admit I wasn't expecting that result; I know that PHP references are merely symbol table aliases but you'd think that would still trigger an error at call-time. 
Oh, that's ugly: print print 'x'; 
Doesn't it return 0 in the impossible chance it fails to print or something? It doesn't sit right with me to think of: function print($x) { echo $x; return 1; }
That [will work](http://schlueters.de/blog/archives/138-Features-in-PHP-trunk-Array-dereferencing.html) in the upcoming PHP 5.4 release.
I don't use print, but if it's anything like echo, I'd take it the answer is because print takes multiple comma-delimited arguments: print 1, 2, 3, 4; // sensible code with obvious intent vs. empty $x, $y, $z; // nonsense code
This is like a db schema 101 conversation. If you want to learn when you should use date/time/datetime instead of timestamps there are plenty of places you can read up on that. You do not need to tell me the virtues of timestamps, I already recommended them. As for why you should store timestamps as timestamps in your db as opposed to bigints I can only reply; /dopeslap. 
&gt; **Return Values** &gt; Returns *1*, always. http://php.net/print Also, I don't think `print` can be expressed as simply as a wrapper for `echo`. The two have a measurable difference in efficiency (negligible, but measurable nonetheless), and I'm pretty sure it's not just from one of them returning `1`. They are probably built differently behind the scenes. EDIT: After further investigation, there are claims that `echo` can be anywhere from 12% to 80% faster than `print`, and that it can take multiple arguments like so: echo 'Hello', 'World'; I have no idea if this is better or worse than standard string concatenation with `.`, but it is a thing that you can do. On the other hand, it turns out that since `print` returns something, it can imitate a function -- you can pull stunts like $required_condition or print 'Error!'; that you wouldn't be able to pull with `echo`. (I would like to note that this last example is a horrible way of programming and is not actually how you should handle errors. It is just an example.)
This is actually how I assign `1`s to all my variables. for($i = print null; $i &lt; 10; $i += print null) { echo $i; }
Use CSS and make the layout fluid. Your 13 is way too big for my EEE PC, and way too small for my 23" desktop monitors.
Actually `print` only takes one argument ever. This is one of the differences between it and `echo`.
If you don't know what you are doing, it's probably VERY unwise to let your users execute their own code on your server.
My (small) company uses a centralized password for storing both our passwords and any client passwords we are currently working with to avoid them being sent around in e-mails all the time, written on post-it notes, stored in a text file, etc. * Passwords are encrypted with each user's public key and then stored. Only the public key is stored on the server. * Users are each given a keyfile containing their private key, symmetrically encrypted using their plain-text password. * Users login with their username, password and keyfile. * The decrypted private key is stored for the session in PHP's session handler, encrypted with a random value stored client-side in a cookie. * When a user attempts to view a password, it is decrypted with their key, output, and immediately forgotten. Perfect? No. But it does mean that given any two of the application database, user's password, or user's keyfile you are unable to read any passwords. It also has the added benefit of invalidating all key files when the user changes their password. There is a larger possibility of a compromise while the user is logged in, but it's still a fairly small window for attack. If the server is fully compromised and no one notices long enough for them to intercept the user's credentials, they will be able to read the data, but that's kind of unavoidable. Given a proper IDS and reporting you can at least limit the potential damage in this case.
Are they recommending an authentication standard, providing an authentication service, or just mandating that you separate the services? Your web server can still store session information, but it will have to redirect unauthenticated users to the login server and then do some token passing to discover the user's identity. [CAS](http://www.jasig.org/cas) and [Shibboleth](http://shibboleth.internet2.edu/) are two single sign-on (SSO) packages. I can't speak Shibboleth, but to approximate CAS: 1. App server needs authentication; redirects users to the login server with a "service" parameter (URL the login server should redirect back to, after auth) 1. User logs in 1. User is redirected to service URL, with a one-time-use ticket in the URL 1. Web server issues an HTTP request to the login server validating the ticket and receiving the username of the logged-in user At this point, the login server has told you which user is logged in, and you can start the session and store that username for future requests. A cursory Google search for CAS auth in CodeIgniter brings up [Ion Auth](http://benedmunds.com/ion_auth/) via [this Stack Overflow question](http://stackoverflow.com/questions/5694970/cas-authentication-library-for-codeigniter).
In my particular circumstances, I have no use of dates prior to 1970 or after 2038. Also I have no concern for the data size of the BIGINT field storing my timestamp, so I therefore have no use for the other formats provided. So there is no "when". I often use timestamp to encompass date-only for practical purposes and that's all I care about; development efficiency, quick conversion computationally and simplicity overall (less moving parts). Thanks for helping me think about the topic though. Albeit indirect, you've proven to me that I should sustain my crusty old ways. 
variables in the url are called GET variables. try searching for "php get var tutorial". you access them in PHP like this $_GET["variable name here"] so for your question, a quick example would be something like this &lt;?php if($_GET["variable"] == 1) { echo "this is what happens when it is 1"; } else { echo "this is what happens when it is not 1"; } ?&gt;
[Here you go!](http://www.w3schools.com/php/php_get.asp)
Basically you just do a link &lt;a href="http://www.example.com/function.php?var=1"&gt; If you are dynamically trying to populate that $_GET var than you would do something similar, but i would recommend not just echoing out the HTML. Its good practice to keep your view code out of the methods. echo "&lt;a href=\"http://www.example.com/function.php?var=" . $dynamicVar . "\"&gt;"; Then in the PHP you do; if(isset($_GET['var'])) { if($_GET['var'] == '1') { doSomething(); } if($_GET['var'] == '2') { doSomethingElse(); } } else { return false; }
So if my URL was example.com/function.php?variable=1 and I had this code: &lt;?php if($_GET[$VARIABLE] == 1) { echo "1 is true"; } else { echo "1 is false"; } ?&gt; It would display "1 is true", correct? 
I can confirm this.
Variables in the url are done via key value pairs in the form www.yourwebsite.com/page.php?key1=value1&amp;key2=value2&amp;keyn=valuen So to access the value to have to use the key in the get array &lt;?php if($_GET['key1'] == 'value1'){ echo "1 is true"; } } else { echo "1 is false"; }
FYI, in case anyone tells you to use register globals: punch them in the face and use $_GET instead.
To me it makes sense to function the way it does (since I learned it this way anyway) because I think of it this way: Final say on if I'm passing a copy of data or a reference happens in the function context, not in the passing context of origin. Really, a notice doesn't happen until you try to actually **do** something with data that's not actually there. I know in the normal sense of references, you can't really reference a variable that isn't defined, since there is no data to reference to. And you're kinda "doing" something with the variable by passing it in the first place. This could just be a sort of hack (maybe a good one, but maybe bad, depending on your philosophy and emphasis on efficiency/speed vs clarity/completeness and where you balance between that gradient). I like and use it occasionally, as it allows me to work with vars when I don't know if they'll be defined or not. I generally always define EVERY variable and code 100% of the time in my dev environment with error reporting set to E_ALL, but this can be useful when dealing with variable variables OR when testing/debugging and you've got a lot of echoing/dumping going on with test vars and don't need notices cluttering up in places where you don't need them while you're looking for notices where you **do** need them (in the core of your real working code/unit test). So yeah... Not sure, but I use it. 
TIL! I've been waiting for this! I've come to love this about JavaScript and have wanted the ability to handle return values directly like that for quite some time now. 
Your code is very close, it would be if($_GET["VARIABLE"] == 1) not &gt; if($_GET[$VARIABLE] == 1) Also, I have not seen this mentioned in this thread yet, but since you are putting variables in the url you have to remember that users can change them very easily. You have to assume that someone is going to try and put an SQL injection or some other type of code injection into the URL to try and screw up your site. ***Sanitize everything that comes from the URL and use predefined identifiers when possible.***
Are you?
Interesting. To remember this, I think of it this way: While you can get the value of the result of the operation of "$var = 1", it *shouldn't* be returning the reference to $var. Why? Because returning a value on that operation is for convenience (yes), but more importantly, assignment can include *multiple* variables like so: $var1 = $var2 = $var3 = 1; So then PHP will pass the literal 1 to the function (if you used the above line as a parameter) instead of a reference because, of course, which reference are you going to use? $var1, $var2 or $var3? 
I'm not even using SQL, but I can see why that would be a problem. Defining variable types would probably eliminate the risk right? 
Do you know C? TBH, I don't really. But I can show you that the [parser looks to have a specific token for `print`](http://lxr.php.net/opengrok/xref/PHP_TRUNK/Zend/zend_language_parser.y#795). It also looks like the implementation changed slightly from [5.3](http://lxr.php.net/xref/PHP_5_3/Zend/zend_compile.c#zend_do_print) -&gt; [5.4](http://lxr.php.net/xref/PHP_5_4/Zend/zend_compile.c#zend_do_print), but I'm unaware if that impacts the return value (looks more like refactoring work to me).
This really is the best response. To explain: It sounds like they want to abstract the server that holds the data associated with account logins away from the regular web server hosting the apps. This allows you to do that and allows the web server to verify that the user is logged in using trust/encryption between servers to verify where the request came from and that indeed THIS user is who the authentication server says he is without necessarily exposing the user's actual credentials to the potentially compromised app server. Good idea. Yet another layer of protection. 
No. I'd say keep that at #1 in your mind when you do start working with SQL or any database in general. You need to research and tackle that when you get there. For now, you can work directly with $_GET. As long as you just check for **predetermined** values that people can't just inject on their own. You will need to really learn to filter and control input coming into your page as you get better. More importantly right now since you aren't using databases, you should **absolutely avoid** including anything from $\_GET, $\_POST or $_COOKIE going into any of these: * include() * include_once() * require() * require_once() * fopen() * file_get_contents() ... or ANYTHING that accesses your file system, especially anything that executes (like passthru() or exec()). 
As can most major frameworks, afaik. I don't know why you'd want to use a database though, would be a major bottleneck on runtime performance.
I'm sorry, but you've not given enough information on how you want authentication flow to be set up. The microsoft article is about scaling, not security.
Thanks for the warning. I will look out for that in the future. But in my current case, I only want numerical values in that variable. So as long as I strip out anything that's not an integer shouldn't I be safe? 
If you're trying to be so precise, you should probably be using ===. 
The way I do it is to setup an .htaccess file in a directory where the config file is stored and full contents of the .htaccess file: Deny from all Oh, and always always always name your files with executable PHP code with a .php file extension!
Sure. Easy way is to just check a predetermined number (i.e. $\_GET["var"] == 1). You can also cast it to an integer so you know the value will always be numerical like so: $var = (int) $_GET["var"]; And then just work with $var instead of $\_GET["var"].
these are the best solutions, imo, if you can't put it outside of the DocumentRoot.. however, the problem scenario is a misconfigured web server. it may not honor your .htaccess, it may not parse your php (so its source (which now includes your db credentials) is sent as plain text), so forth.
Indeed. But at least if it parses a PHP file, you will get nothing from requesting a .php config file, since presumably it should only contain a few variable declarations. So adding the .htaccess is just another measure that is best when combined with other needs like hiding other files. 
Turns out `empty()` cannot contain an assignment. Is has to be passed a variable. But won't this return a reference? $var1 = $var2 = $var3 = new stdClass;
just trim the variable first. $name = trim($name); empty($name);
As many people have posted, what you're looking for is $\_GET. Something which works in a similar way to $\_GET is when you're submitting the contents of a form, which you can capture with $\_POST. But, of course, $\_GET won't read anything submitted via form post, and $\_POST won't read anything submitted via URL variable. I've had a couple of projects where the same information could be coming in either via $\_GET or $\_POST: this is where $\_REQUEST comes in handy. $\_REQUEST will capture both $\_GET and $\_POST (and $\_COOKIE). But again, sanitize sanitize sanitize.
I've personally used NuSphere which is really nice. In the IDE you can move the execution point around, reset/change variable values, call random bits of code and it all hooks into the browser using a plugin so it's seamless. I assume Zend Studio has something similar. XDebug is OK, it's very basic. Very very basic.
&gt;miniPHP Studio is an easy-to-use toolkit for developing native Mac OS X, Windows, and Linux GUI applications and then &gt;miniPHP Studio is currently available only for Mac OS X am I missing something?
Ok, so on deployment from staging to live all your classes have to be rewritten to implement a "live" interface. And this is a good idea because? Aha, just seen the username *penny drops*
It looks to me like the software, miniPHP Studio only runs on OS X, but the applicants you develop will run on OS X, Windows and Linux.
Are you in the process of making a windows version of your app?
True, but even a floating point number passed to PHP's date() function that exceeds 2147483647 will still produce an incorrect date.
gui apps in php? 
Yes, it isn't a new concept...the php-gtk project has been around for a long time, for instance.
&gt; Added class member access on instantiation (e.g. (new Foo)-&gt;bar()). Finally.
Obviously, this is pretty much the key phase for PHP 5.4.0: *please* test your code against this release if you have a chance and report any bugs you find. The news post links to the change log for this RC relative to the betas that have preceded it, and you can also read the [upgrade notes](https://github.com/php/php-src/blob/PHP_5_4/UPGRADING) that are forming the basis of the [upgrade guide in the manual](http://php.net/manual/en/migration54.php) (still very much a work in progress). The plan at this stage is that the next release will be on November 24: if a second RC is needed, it'll occur then.
Thats true. I realized it doesn't matter to me, ultimately, because that represents a date in 2038. I feel that by that time, timestamps will probably still be I'm use in the same format and floating points will likely be standard and PHP, if it even exists (or any language that takes a UNIX timestamp) will have been upgraded to accept it as a floating point. 
but why??? "when you have a hammer, everything looks like a nail" php is NOT the tool for gui apps :)
Yes, I think so (can't test on my ipad) because "new" instantiates and returns a reference to the object and object assignment in PHP by default returns references. All three will contain **the same** reference and that will just be passed along, I think. So you're still not returning a unique reference to any of those vars but rather just passing align the reference *they* were given. Will test later. 
Thanks a lot for posting this. PHP is a great language and the ability to create gui apps is a great convenience. Other tools have been around, like the php-gtk project, but knowledge of new tools is a must. There have been a few rather not-so-successful attempts in this area though.
Hopefully by 2038 all systems and servers will be running on at least a 64 bit platform, which will fix this issue with the maximum integer size. The only reason why it's currently as issue for me is that some of my projects deal with dates set in the future, and although 2038 seems like a long way away, it could potentially be a very serious bug of my code.
People have been writing GUI apps in Python, for example, for ages.
seems fairly under-capable compared to titanium desktop, but interesting nonetheless.
Because for people familiar or most comfortable with PHP is easier to learn one API than new language and gui toolkit on top of it, not every piece of code is military grade. Pointy Haired Boss of BigCorp: - Great, we already have PHP developers, let's use it for our next flagship product! WRONG Some power user in his basement somewhere: - Sweet, my little password generating app would benefit from it! TOTALLY The fact that there will be mission critical code based on it is a different matter, but this is like blaming knives for people being stabbed with them.
Ruby is also becoming popular in mac dev. However, typically this is done using a bridge to OSX's cocoa framework, granting these languages access to almost everything that developers can do in Objective-C. Three years ago someone was working on [just such a bridge for PHP](http://www.slideshare.net/wezfurlong/hot-chocolate-you-got-cocoa-in-my-php), but it seems to have dissolved. This thing... Don't expect to see anything useful written in it.
Just want to point out, your column names ARE there, in addition to numerical indexes. If you want to have JUST the names, use pg_fetch_assoc()
You get my vote for var_export(). Used all the time to transfer data
&gt; Changed silent conversion of array to string to produce a notice. Also this. Any time you try to convert an array to a string, it means you messed something up and should be notified. I can't believe I never really realized that this wouldn't elicit a notice.
I'd hate to see the codebase managed by his team. Holy crap.
Is that really something new? [I've seen it before already](https://encrypted.google.com/search?q=notice+array+to+string+conversion&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:unofficial&amp;client=firefox-a)
Want to make cross-platform GUI apps with PHP? It's simple: 1. Go on a Windows, Mac, and Linux workstation. Install Chrome. Connect to your remote website in Chrome. Click Wrench &gt; Tools &gt; Create Application Shortcuts. Save those shortcuts somewhere because you'll need those files. 2. Get a copy of [InstallAnywhere](http://www.flexerasoftware.com/products/installanywhere.htm). Learn how to make an installer in that for Macs, Windows, and Linux. Have the installer ask the user if Chrome is installed or not. If not, then tell the user the program requires Chrome to be downloaded and installed, and offer to do that for them. Once Chrome is downloaded and installed from your installer script, have it copy out the application shortcut you made. These installers are clever in that they can actually edit files before deployment. So, for the application shortcuts you made, you may need to change the paths in these files. 3. The user then clicks the icon that the installer made and it launches Chrome in this "application mode". You can even set the size of the screen via Javascript. 4. If you want something truly local and not require a remote server connection when the app runs, then you need to switch to SQLite database and bundle with that. As for the web pages, switch to a bundled copy of nginx or other cross-platform PHP-capable web server running on a strange port like 23832. The alternative port is important because you should not assume you can simply use port 80 -- it might be used by the guy's other web server on that computer. In fact, you should have a settings file with your app so that one can change the custom port. 5. You might not need the PHP. You might want to investigate if Chrome in "application mode" will let you interact with that SQLite database locally, or let you set a setting in web storage so that you can extend the limits on the web storage database that's part of the Chrome browser (and which is SQLite based). If you can extend those limits, you might find that you can build the entire application in jQuery with a mix of some remote web server calls occasionally (as necessary, such as for getting flight information), and perhaps you'll have to mix in some Chrome-specific APIs for extra things that Chrome extensions can utilize. 6. Don't forget that Chrome gives you awesome webkit animation and 2D canvas drawing tricks. They have 3D stuff too, but it's not going to be ready until all operating systems support it. Currently my Linux workstation doesn't support the 3D stuff in Chrome. 
My understanding is that PHP previously rarely reported it, while now it will always do so.
I'm not sure why it's formatting that way there, I'm aware of the column names being there.
How does it handle threads? Is there a concept like EDT (Event dispatch thread) in Java? How to handle long running tasks? I was not able to figure that out on the project-website. 
I never used such code, but not because I knew about empty (I didn't), but because it looked unsafe to me to assume the interpreter will always check AND clauses right to left and not evaluate the left hand statement if the the right one is falsey. 
I don't understand the problem then. Your result is exactly what I would expect.
I'm wondering why it's not coming out in such a way that i can do the following: $a_result_row = $arr[0]; $to_user = $a_result_row["username"];
seriously, we can finally chain now with out simple factory methods. Also makes it easier for IDE's to follow.
Just watch out for circular links.
Oh, you mean a full array with every row? pg_fetch_array/assoc doesn't work that way. It only returns 1 record, or "false" if there's no more. $qry = pg_query_params(....); while ( ($row=pg_fetch_assoc($qry)) ) print $row['to_user'].'&lt;br&gt;'; 
Ohhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh. That makes way more sense. That's EXACTLY what I was looking for - thanks!
No problem. :)
http://stackoverflow.com/questions/2630428/is-there-a-pure-object-database-for-php
&gt;miniPHP Studio is currently available only for Mac OS X (Intel 10.4 and newer). &gt;Development of Windows and Linux versions is ongoing. It only runs on and compiles apps for Mac OS X, but the Windows and Linux versions are in development and are coming in the future, as well as cross-compilation capabilities.
The poster's question seems to contradict his link. It's like he's relating this, second-hand, or is a middle manager or something of programmers, not really understanding the technology. Here's my guess on what he's asking for. He's got these PHP intranet web apps in his company. Now the security team comes along and wants him to not authenticate locally, but connect to a central system. It appears that the central system is Microsoft based. So, from that, I can surmise that he needs to authenticate his users against a Microsoft domain. That's a piece of cake: 1. Bring up a Windows NT IIS server used purely for authentication purposes. 2. Stick an ASP page on that web server that emits the contents "OK" and nothing else. 3. Set the authentication on that page to Windows NT domain authentication, but via Basic Auth. 4. Use a workstation browser to connect to it. You'll be prompted for your username and password to the domain. You'll get a response back of "OK" if it works, or an error code if it fails. 5. Once that's proven, change your login form of your PHP web app. Instead of it authenticating against MySQL, have it take the user/pass, build a Curl script that works over Basic Auth to reach the Windows NT IIS Server, passes the domain login, and checks for an OK response. If they get an OK back, set a session variable or encrypted cookie value saying the user is authenticated and let them use your application. If it fails, then the user gets a response back on their screen that the domain login didn't work. I've used this technique countless times in companies. No ActiveDirectory APIs to fight with, no LDAP servers to setup, etc. It's a piece of cake.
another similar compiler is is [roadsend](http://www.roadsend.com/home/index.php?pageID=compiler)
There is no multithreading support in 0.4.0 but it's planned for implementation in the future.
&gt;easy-to-use toolkit for hammering screws with chicken bones
The date() and strotime() functions sometimes have Y2038 bugs in certain versions of PHP. A better routine would be: echo "Original Date: $sMySQLDate&lt;br /&gt;\n"; $dDate = new DateTime($sMySQLDate); $sNewDate = $dDate-&gt;format('YMd'); echo "New Date: $sNewDate&lt;br /&gt;\n"; 
So potentially the stable release could be as soon as some time this month?
Thank you for this. let me do some reading. I was recommended Radius but never used it... What the sec team wanted was separation of web, auth and database servers, their reasoning was if one gets breached it would not compromise the others. I have use 2 servers in the past: web and mysql where they were not on the same server but the authentication and session information is stored on the webserver. When they said they wanted a authentication server separated from the web server that is where i am confused.
Hmmm. It's always left to right and it stops when a required condition is not met 
can you back that up with some real world reasons, because another language does it better or before is not a reason either....
You could do something like $companies = Array('Reddit'=&gt;'reddit.jpg','Facebook'=&gt;'facebook.jpg'); $image = $companies[$field_company]; But that's all dependent on if arrays are viable in your case or not. And for more protection $companies = Array('Reddit'=&gt;'reddit.jpg','Facebook'=&gt;'facebook.jpg','Default'=&gt;'default.jpg'); $image = empty($companies[$field_company]) ? $companies['Default'] : $companies[$field_company];
That's how I got the job I currently have over the other candidates so it worked for me.:)
How old was the interviewer? When I mentioned Reddit during my interview, my current co-workers responded very positively. I also mentioned other sites like Stackoverflow and various blogs. Just mentioning reddit is probably not the best idea though.
Grab Mongo or Couch and an object-oriented interface library, or use http://www.php.net/manual/en/mysqli-result.fetch-object.php
If it is a bad thing you probably don't want to work there :P
I've made simple iPhone and Mac applications in Cocoa, but I'm a *lot* more familiar with PHP. That's why tools like PyObjC exist.
Environment variables anyone?
Reddit is (mostly) a place for bright individuals. (Depending what subreddits you lurk/post on)
For Facebook... you have to use their tools. Twitter and RSS feeds are just XML or JSON documents you can parse with PHP. 
Did the same thing, he asked how I keep up with dev and design news. I spewed out 2 sites, reddit/prog and webd subreddit, and then another site. He nodded. I got the job, been here 3 months now. Don't worry so much.
any ideas how to get my RSS feed? I googled some tutorials, but they seem to be outdated as facebook constantly changes settings and layouts. 
That's a big "depending", though.
No. Reddit it a place for "pseudo-intellectuals". These are people that think they are smart, and act like it too... but are really no different and no smarter from the rest of the population.
I would say the guy was mid to late 30s, not too terribly old. I basically told him that besides Reddit, I just go to Google and search for things from the last week. He seemed alright with that.
There are Redditors that go for information, and then there are those that go for funny pictures. I currently work with about 30 people that just go for the pictures. It is a little less desirable.
Then you're probably fine. Hacker News is probably another good site to mention even if you don't browse it that often. 
Lambda the Ultimate's a place for bright individuals. I don't understand most of the stuff they say on there.
Well, you got me there.
Amazingly misleading.
IIRC, facebook doesn't offer RSS feeds for user profiles any more. If you want to get wall posts, you'll need an OAuth token, and you'll need to use the graph api.
I have this code, it's working for a page, not sure if it'll work with users, the thing with facebook is that RSS won't work if you request them with PHP, so you have to set first a fake user-agent so FB thinks you're a user and not a bot (weird, right?, rss it's intended to be processed by software not by humans) $doc = new DOMDocument(); ini_set('user_agent', 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3'); $feed=file_get_contents('http://www.facebook.com/feeds/page.php?id=XXXXXXX&amp;format=rss20'); $doc-&gt;loadHTML($feed); $arrFeeds = array(); $count=0; foreach ($doc-&gt;getElementsByTagName('item') as $node) { if($count&gt;2) break; $itemRSS = array ( 'title' =&gt; $node-&gt;getElementsByTagName('title')-&gt;item(0)-&gt;nodeValue, 'desc' =&gt; $node-&gt;getElementsByTagName('description')-&gt;item(0)-&gt;nodeValue, 'link' =&gt; $node-&gt;getElementsByTagName('link')-&gt;item(0)-&gt;nodeValue, 'date' =&gt; $node-&gt;getElementsByTagName('pubDate')-&gt;item(0)-&gt;nodeValue ); array_push($arrFeeds, $itemRSS); $count++; } 
He probably wrote, "Visits Reddit. Must be into porn."
Thanks for the input, either way, I was practicing with a free hosting site (webs.com), and as it turns out it doesn't support PHP on free accounts. So i guess i won't be able to utilize any of this until I obtain a payed hosting account.
Runkit should definately not be used. I think suhosin is capable of blacklisting/whitelisting funtctions. If you want to restrict users from doing anything dangerous I'd recommend just whitelisting functions and restrict everything else. As said by others, this doesn't prevent users from making infinite loops, or maybe do rogue requests on other servers.
I've built custom small scale shops before with no problems. The obvious con is the time it takes to develop a stable shop as opposed to just using an established off the shelf product. But on the pro side, you get exactly what you need. My best advice is to check your math well and make sure to have a good testing system in place. 
Indeed - we've allocated 6-8 months for the full cycle! We reckon it will take a lot less, but with existing projects and as yet unforeseen curveballs it's probably realistic.
"Uses the internet. Must be into porn."
More interestingly, it's based on wxPHP. Anybody know what's up with that? (Only found win32 dll binaries from 2008.)
If you're on Windows, research WAMP. If you're Linux, research LAMP. You don't need a host if you're just practicing.
I worked for 2.5 years as the web team lead for a company which ran a reasonably high-volume electronic goods retail portal. The code was entirely in-house. Here's what I would say: 1. [PCI Compliance](http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard) is unpleasant. This can considerably complicate the checkout process because you need to ensure that you're not storing your customer's credit cards in local session information in an insecure manner. For example, if you want to collect payment info, and then present a summary page with a 'Purchase' button. Will your gateway support taking the cc info but not executing until this next step happens? Or do you need to somehow store the CC locally for this step (this increases your PCI compliance requirements significantly). You _cannot_ trust `$_SESSION` or `&lt;input type="hidden"...&gt;` for unencrypted CC numbers. 2. You don't mention it, but for us this one was a doozy: Couponing, Bundling, &amp; Discounting can be _very complicated_. Your product managers will constantly ask you to provide combinations your system wont support. ("Let's do a BOGO sale, but make sure to exclude items 10, &amp; 14, &amp; 15", "Let's do a Buy-one-get-50% IF the customer is BUYING a product from category A, and only give them 50% off if the second product comes from category J", "Let's generate 50,000 $3 off coupons to give out to our customers in a newsletter tomorrow", "Let's do 7 days of sales, where the sale changes each day at midnight"). 3. Record keeping &amp; long term archiving. You need to have a plan for what data your system is going to store about every purchase, and for how long it's going to stay in your front-end-supporting database. You can't just dump data into a purchase and purchase_items table for years. These tables will quickly grow to a point where it will be unmanageable. Identify which information needs to be kept short-term for customer support and which information can be moved out to an external, long-term reporting system. (In fact, your CS shouldn't even be touching your production live purchase tables. Your CS tools should be accessing replicated purchase data somewhere other than production). 4. Abstract the payment gateway communications from the rest of your purchase logic. You will likely eventually change payment gateways (better rates, or your old company gets bought out by some other company, or they just stop processing payments because of a network failure for 4 days without notice). Having an abstracted payment gateway layer will allow you to move between providers without having to re-write your whole purchase flow. Do _not_ expect different gateways to have even remotely similar record formats. 5. Make sure you are handling your _CURRENCY_ formats correctly and consistently. This is especially important if you have to deal with any kind of percentage-based value manipulations (discounts, taxes, etc). Floats and currency types are not the same. Do not end up in a [federal pound-me-in-the-ass prison](http://www.imdb.com/title/tt0151804/) because you're rounding taxes funny. Personally, I would highly recommend _not_ writing your own purchase system. It's an incredibly complicated beast when you get down to the nuts and bolts. If it we're me, I'd setup shop at [Shopify](http://shopify.com) and be done with it.
Check out http://magentocommerce.com if you're looking to host it. It's free and open source.. and absolutely amazing. Another great option could be to go with a SaaS eCommerce solution like http://shopify.com.
Would you employ a Redditor? Someone who does no work and browses Reddit most of the time?
You don't have the time to set up something like opencart, but have to time to write something from scratch? That doesn't make any fucking sense at all dude. I think you are vasty underestimating the amount of work it takes (having written one from scratch myself).
Check out one of the free options that run on top of WordPress, maybe. Like [WooCommerce.](http://www.woothemes.com/woocommerce/)
I say fork OpenCart. It really only needs a better plugin system. You can probably intercept the critical MVC junctures and the database read/writes to provide one. On [this page](http://voloreport.com/considering-a-plugin-architecture-for-the-faster-php-mvc-framework), I talk about how to tack on a plugin system onto something. Be sure to read my comment responses on that post, too.
And friggin slow. Go with OpenCart.
XAMPP for Windows and WAMP for Mac are good, free packages that will be running in 5 minutes tops.
I would recommend doing a Drupal install with [Ubercart](http://www.ubercart.org/). Both have modules that will make handling purchases and other things begotabu mentioned much easier.
Well, they might be reading this post after going to.redditin the hope of finding you. Now they can check your history.
Thanks, begotabu. 1. Our existing purchase system allows us to store partial numbers (i'm even sure why now i think!) and the payment gateway deals with full details. Hmm, AFAIK, all of our payment facilities use $_SESSION for storing data until the checkout has completed...i was intending to do similar - can you expand on secure alternatives? 2. Yes, we'd thought of this. If we do do it in-house, i intend to clearly explain that the system will have limitations and that we won't just be able to download a plugin! Simple discounting will be initially available until we can roll out additional options. 3. A good point. We do have existing tables for orders, order items, payments etc, going back a fair while now...archiving is probably long overdue. 4. We've had out PG for as long as i've been with the company, and i get the feeling that they're all we'll ever need. 5. Boom! Something that i'd left off my list and obviously a biggie, thanks! Shopify pops up a fair bit so i'll definitely check it out.
Yes - i see your point! But i'm assuming that there's significant overheads with any new system, including design issues as well as coding and setup which could/would drag on over months, and so am wondering why i just don't do it myself and not have to worry about upgrades/compatibility/etc. That's a couple of mentions for opencart as well as shopify, so i'll have a look at that too.
Many payment gateways support a two step transaction: Capture &amp; Execute. So you immediately initiate a transaction with your payment gateway as soon as you are given the CC information, but tell your gateway not to execute right away. They return to you some sort of auth key, which you store, and can then use at a later time to actually execute transaction. You then partialize and scrub the sensitive data from your machine (presumably it's only been in memory), and present whatever the next step of the purchase process is. Alternatively, you encrypt the crap out of everything, and figure out some way to keep the encryption routine and keys secure even if your server is compromised.
if it really is just a small site and you need a bit of help, pm me and we can figure out what your problems are likely to be, I can take a look at your database / server and point you to the most likely issues if you want. A lot of the time it is database queries or poor database design which can be fixed relatively easily, and you can get yourself going at 100% again while you code up a new solution. PM me and we can skype or something.
Agreed, magento... not even once.
Or Jigoshop, which Woo forked. Others include Shopp Plugin, WP-Ecommerce. If you are using WordPress for other parts of the site, the commerce solutions on there are fairly good now.
Another great product to check out is ZenCart
After growing tired of OS-Commerce, I built my own ecommerce plugin on top of WordPress. It was a lot of work, but worth it if you feel you are going to be customizing every part of the platform you are looking at anyway. Our plugin worked well for me for a few years, but now I'm starting to use other WP plugins on new sites. After setting up 10 or so sites on our system, it's becoming a bit much to maintain them all (find a security whole in one and you have to patch the others). We didn't develop it with all that in mind. Having our own code was good because we could write custom functionality more easily since we knew the underlying system. But then we wrote custom functionality making it hard to sync all the different instances. I'd say check out as many solutions as you can. Try to find one that is coded similar to your style and extendable and really consider using an existing solution before you go off on your own. There is a lot of moving parts in a good all purpose shopping cart/ecommerce solution. 
But, to be clear, PCI compliance is a _lot_ more than just "not putting cc numbers in session variables". 
I just realized I mistakenly typed right to left instead of left to right. anyway, this maybe true for PHP, In other languages it could raise a compiler or runtime error, I like to keep my code looking safe to avoid bad habits creeping. One could argue that a good approach would be not to commit to any particular order of evaluation - this will allow the CPU to extract more instruction level parallelism from the code and evaluate both conditions simultaneously when it has resources.
&gt; Development of Windows and Linux versions is ongoing. BTW, the developer is redditor [andrejkw](http://www.reddit.com/user/andrejkw). If you can't wait there is also [WinBinder](http://winbinder.org/) for Windows. * [PECL page](http://pecl.php.net/package/WinBinder) * [project page @ SF](http://sourceforge.net/projects/winbinder/) But it's been a while since it's last updated.
Are you kidding me? You obviously don't know many cart products. It is a fork of OsCommerce. It is spaghetti code. The plugins for it amount to comparing files, integrating new code, and prayer. Better to use OpenCart. It's not perfect, but it's capable and has a slightly better plugin system.
I completely agree with everything this guy said and I have been in a similar place as him to have built a custom cart. It is a bad idea don't do it! The amount if complexity is unreal. He didn't even mention sales reporting and shipping problems that also come up. There is so much more to writing a ecommerce site than you think. just take our word for it: bad idea! 
I work with CodeIgniter a bit at work. There are a lot of things that can be done "The PHP Way", or "The CodeIgniter Way", and sessions definitely fall into that category. I found the need for this tool absolutely hilarious.
&gt; presumably it's only been in memory I'm assuming that the capture and execute steps are done before a single page view then?
To each their own, but there are plenty of people who agree with me and the amount of chatter and libraries proves a lot of people don't like the way sessions are handled by CodeIgniter.
Hey, it was about four years ago when I last compared different products. At the time, ZenCart was at the top of my list. Things change, people learn. I appreciate the info, but I appreciate it more with a little tact.
I never said I disagree with you. I found it hilarious that CodeIgniter's sessions are so backwards that people have to find a way to code around them. I think you're assuming I said things that I didn't say.
I've run a lot of large and small scale ecommerce systems - my view is if ecommerce is not central to your business (I.e. it is tagged onto other activity rather than the sole focus) go with something like shopify and spend your time developing your core business. If it is central but not a huge operation (at least several $million) then better to get something off the shelf and customise that. It really makes no sense to code the whole thing from scratch and you will most of your time replicating solutions to problems stuff like open cart has already solved. Using an established solution opens you up to enjoy lots of other community enhancements and often gives access to people already experienced in the code. Writing it yourself exposes you to lots of headaches (PCI is a great example) and will obv take a lot longer. Patronising bit: the best business people overcome their instincts to do what they feel like doing to do what is the sensible solution (boring but true!).
I am the lead developer of an online and brick &amp; mortar store. You're looking at this a little sideways. The difference between re-coding a solution like OpenCart and either bending OpenCart to your desires/skinning it are beyond night and day. We took a standard OpenCart install and rewrote about 1/4th of the code base and did a full custom template. It took 2 people (a designer and myself, a programmer) 3 weeks to complete from start to finish at full time. If I had had to rewrite the code base that 3 weeks would have become months. The overhead difference between creating a new system and modifying an existing system are wildly different. If you can ever use an open source solution as your basis, even if you walk away with nothing more then it's framework, you will save an incredible amount of time. If you have any questions I'd be happy to answer them, just PM me. Edit: For upgrades we review OpenCart's code changes and only implement security changes. But honestly at this point (3 months into a live store) we have found and fixed everything they've had to change thus far. You can simply ignore upgrades (outside of security patches) and just implement the ones you want/know that won't break customization. *Excelsior!* I'm off to find more wine!
Oh dear god - thanks for reminding me about coupons, bundling and discounts. I hate how creative customers can be sometimes ... "let's generate coupons for our female customers who did shoping for more than X in the last 3 months, but make sure the code wont work for items that are already at discounted price"
No. In processing the checkout step where you receive the credit card details, you immediately pass the full number off to the payment provider in exchange for some execution token, which you can safely store in session. You then immediately sanitize the number (replace the 3-7 digits with * characters for example), and ensure you aren't storing the raw number anywhere. Then you can continue processing further page views (typically the last 'purchase confirmation' step). When all further steps are complete you then use the execution token to tell the payment gateway to complete the transaction. 
"Unemployed. Offer position in porn."
Oh yeah. Discount precedence. That's a nightmare.
Oh come on.. don't be a sissy :D
Here, try my solution. This is a drop-in replacement for the normal session handler. I also wrote a simple class if you message me in person i can give you the rest if you want to also use mysql as well for session pooling on load balancers. https://gist.github.com/1360305
Should you be commenting on this subject if you have been out of the game for 4 years?
I have installed, hacked and hosted several small magento stores. First it seems great. Then you start realizing that sometimes it just can't handle core things right like calculate taxes ! Then you look closely at the changelogs and you realize that each new version doesn't add cool new things, it just fixes A LOT a bugs and introduces A LOT of new ones, yeaaaah. That's how you end up hating what seemed an impressive software.
Thanks
Can someone point me to an explanation for CI's choice of encrypted cookies over native sessions?
You're projecting, not everyone who uses Reddit is incapable of being productive.
And this, ladies and gentlemen, is why I've never bothered trying to make a shopping cart myself. Seems so simple at the outset, but as soon as you start analysing it it becomes very complicated. I'd much prefer to find a decent open source cart (if such a product exists - I'm quite surprised there doesn't seem to be one OUTSTANDING example of an open source shopping cart written in php) and go with that if possible.
Redditor [davemg](http://reddit.com/user/davemg) is also a developer of miniPHP Studio. He has answered a few questions throughout this post.
We do have a version of [miniPHP Studio for Windows](http://exvision.net/miniphp/classic/). It's based on a custom version of WinBinder with many enhancements.
Unfortunately wxPHP is long dead. We're actually using our own extension called wxBinder. It's built alongside miniPHP Studio and is bundled with the latest release for Mac OS X.
I agree it is a bit slow out the gate. But adding a PHP cache(APC/xcache), storing other cache files in a tmpfs mount, makes it quite a bit faster. &lt;2 sec page loads even on pages pulling in multiple products from multiple categories. I haven't tweaked anything on the db side yet, so there is still room for improvement. Yeah it is a lot bigger vs. opencart, but it depends on the business size as well. If you want to setup a simple cart with basic selling then OpenCart is probably better. But the way I see it if you are larger business you probably want to go a Magento type route. So far I see there are more plugin options on the Magento side plus dev support or finding new devs with some knowledge when the company grows. For example as far as I know OpenCart doesn't have a web api you can make calls against. While Magento has a web api that is separate from it's extension system that you can integrate with other apps. That to me is a huge plus since we want to integrate with our other systems as well. Is Magento the best written software out there? Maybe not, but I can't complain too much since overall it works well and has features that would have cost us a couple thousand dollars from some other solutions. Looking at the code there are parts that are pretty damn clean and once you get how things work it is relatively easy to start modifying stuff. 
Have you tried this new thing I've found? It's called [Google](http://google.com) Here's an example of what it found: http://www.phpclasses.org/package/951-PHP-Class-to-parse-BBCode-.html
Computers can only process one thing at a time.
Oh you're a funy one. Also, this is a question for /r/phphelp Feel free to downvote this comment also.
check out the database drivers if you want a real laugh. i love the sql server driver that has primary_key=false; hardcoded in because they were to lazy to look at everyone elses' AR/DAO/ORM models to see how it was done - mysql way or highway - true sign of quality framework. if you strip out a bunch of code from YII you get CI with a bit more flexibility. if you stripe out a bunch of a bunch of code from cakephp you get the same thing with less bugs. 
This is [seriously old code of mine](https://github.com/meltingice/Osimo-BBCode-Parser/blob/master/bbparser.php), and I don't like the way I did it anymore, but feel free to use the regex in your own parser.
what does this have to do with php? yes we know javascript rules and node.js and chrome app is far more efficient than browser -&gt; xamp -&gt; mvc -&gt; sql i'm not seeing the php in your criticism?
secret post from Origin/EA?
I don't know if they have one, but one concern about using native PHP sessions is scalability. Take a basic scenario of load balancing. Typical load balancing setups run in a round robin fashion. You have the possibility of every request you make hitting a different server. With PHP sessions this means that each server has to keep your session data in sync with the others. If you've ever tried to keep physical data in sync between servers you'll know that this is a pain. Especially with data that can change quickly. Cookies allow that burden to lie on the browser and greatly simplify your architecture. If you're storing a shit-ton of data in your session you should re-evaluate what you're doing with your sessions. --- Keep in mind I'm not defending CI at all. I manage a CI app and I have my own gripes with it. But the default session handler is not one of them.
that has not been true for a [while](http://en.wikipedia.org/wiki/Superscalar). 
Looking at your comment history, you can do better than that.
Why not use Session's database storage instead? Also you could have just overloaded the Session class with MY_Session and saved yourself from having to modify your source. 
In theory, yes. I think in practice we all expect an RC2, because this doesn't quite feel baked, but if we don't get any significant bug reports, it could go straight to a final release.
Bad assumption on my part, no problem.
Yeah this is a huge bitch to do. I wrote a regex based one a while back for my last job and wish I had code to post for you. It was similar to this guys though. There was a PEAR or PECL package that was supposed to this stuff as well, but I could never get it working. You could try searching around for that. Too bad vbulletin or the other forum softwares don't give you an api you can call to do this automatically since they obviously have the code hiding somewhere in their system.
I assume there is a work around to the session issue though. In load balancing setups I assume that you can tell the client to hit the same server every time and write a fall back to use a db if it fails or something http://stackoverflow.com/questions/994935/php-sessions-in-a-load-balancing-cluster-how
Not sure if you know, but PHP has a PECL extension for bbcode: http://www.php.net/manual/en/ref.bbcode.php
Came across NBBC a while ago, but haven't really played with it much. I liked how it was extensible when you want to add your own tags http://nbbc.sourceforge.net/
This is one I picked up a while ago on teh interwebz somewhere, and has proven itself quite useful. function BBCode($str) { $charset = 'ISO-8859-1'; // whatever charset you are using, default is ISO-8859-1 $str = htmlspecialchars($str, ENT_QUOTES, $charset); $search = array ( '#\[b\](.*?)\[/b\]#is', '#\[i\](.*?)\[/i\]#is', '#\[u\](.*?)\[/u\]#is', '#\[s\](.*?)\[/s\]#is', '#\[h1\](.*?)\[/h1\]#i', '#\[h2\](.*?)\[/h2\]#i', '#\[h3\](.*?)\[/h3\]#i', '#\[h4\](.*?)\[/h4\]#i', '#\[box\](\n*)(.*?)\[/box\](\n*)#is', '#\[color=(.*?)\](.*?)\[/color\]#is', '#\[url=((?:ftp|https?)://.*?)\](.*?)\[/url\]#i', // URL With Description '#\[url=(www\..*?)\](.*?)\[/url\]#i', // no http:// '#\[url=((?&lt;!http://www\.).*?)\](.*?)\[/url\]#i', // no http:// or www. '#\[url\]((?:ftp|https?)://.*?)\[/url\]#i', // Simple URL '#\[img\](https?://.*?\.(?:jpg|jpeg|gif|png|bmp))\[/img\]#i' ); $replace = array ( '&lt;span style="font-weight:bold;"&gt;$1&lt;/span&gt;', '&lt;span style="font-style:italic;"&gt;$1&lt;/span&gt;', '&lt;span style="text-decoration:underline;"&gt;$1&lt;/span&gt;', '&lt;span style="text-decoration:line-through;"&gt;$1&lt;/span&gt;', '&lt;h1&gt;$1&lt;/h1&gt;', '&lt;h2&gt;$1&lt;/h2&gt;', '&lt;h3&gt;$1&lt;/h3&gt;', '&lt;h4&gt;$1&lt;/h4&gt;', '&lt;div class="box"&gt;$2&lt;/div&gt;', '&lt;span style="color:$1;"&gt;$2&lt;/span&gt;', '&lt;a href="$1" title="$2" target="_blank"&gt;$2&lt;/a&gt;', '&lt;a href="http://$1" target="_blank"&gt;$2&lt;/a&gt;', '&lt;a href="http://www.$1" target="_blank"&gt;$2&lt;/a&gt;', '&lt;a href="$1" title="$1" target="_blank"&gt;$1&lt;/a&gt;', '&lt;img src="$1" alt="$1" /&gt;' ); $str = preg_replace($search, $replace, $str); return $str; } Enjoy :)
Not really built in, as this is a PECL extension.
Markdown anyone?
Didn't notice that, editing my original comment for clarity.
Grab a decent book on the subject, I used [PHP and MySQL Web Development](http://www.amazon.com/PHP-MySQL-Web-Development-4th/dp/0672329166/ref=sr_1_1?ie=UTF8&amp;qid=1321122608&amp;sr=8-1) years ago to get started. Alternatively, [Lynda.com](http://www.lynda.com/PHP-training-tutorials/282-0.html) has some basic PHP intro videos. And you can find both of these options for free by searching around if you want. 
I don't have a programming background, so I chose to get started using the Visual QuickStart books. Some experienced programmer friends of mine told me not to waste my time with them, but I really liked the approach the books used (and now I'm the lead developer where I work). They show the code in the book and highlight the changes as each lesson gets more complicated. Back when I was reading the books, there was a very basic one that barely scraped the surface of MySQL databses, which is the one I had. A friend of mine bought the slightly more advanced book, which was a little longer and taught more about working with MySQL databases. That book is a little more advanced, so keep that in mind depending on your level of programming experience. Once you have that basic foundation, the Internet is the only resource you'll need. I rely heavily on php.net, Stack Overflow, and random blogs.
The solution is to use the DB for session storage or have a load balancer that respects "sticky sessions". But that's config that can fail or require maintenance. Cookies just work.
My girlfriend runs a moderately high traffic Arts website that she took over from her brother when he passed away. Before he died he was planning on setting up a storefront for all the artists to sell on, each would have their own login to upload/edit items and manage shippments, etc. He was ready to pay a local company over $30k to do so. I built one using Codeigniter in about two months. It handles: * Admin section and super admin * Profiles for sellers * Inventory * Sales * Shippments * Breadcrumbs (multiple origins for each item) * Coupons with unique constraints. Basic coupons don't need any config, they have a percentage or dollar value off, expiration date, and usage count. A complex coupon can be tied to a new method in the coupon class so that when a code is entered, it will run that method to evaluate. Easiest way I could think of doing it. If you want to see it in action, www.escapeintolife.com/store . Feel free to PM me with any questions. edit: no idea why formatting isn't working for me now.
NBBC is great, unfortunately it generated warnings under E_STRICT the last time I tried it.
i learned everything at www.killersites.com...the tutorials are excellent!! 
&gt; If you're storing a shit-ton of data in your session you should re-evaluate what you're doing with your sessions. This is especially true if youre using CI's sessions, because cookies have a size limit of 4k. If you go over that limit, CI doesnt throw an error... it just returns false when you try to access your CI session.
Markdown is so much nicer than BBCode.
Hey, kind of random, but how's your health? Did you get the medication you needed?
Or you can just pick up Kohana and call it a day.
I am so sick of these posts. Just use google. Or better yet, search /r/php for one of the thousands times this question has been posed. http://www.reddit.com/r/PHP/search?q=learn+php&amp;restrict_sr=on 
this kind of of post are tolerated, so you will see them all the time. the quality of posts on r/php compared to other languages are pretty low. 
Indeed. BBCode is a lot of headache when you try to scale or integrate with other software (eg in a CMS environment) that are unable to interpret the same codes.
BBCode is like HTML with squarer tags. It still confuses the hell out of most users (and I mean the ordinary, non-tech users).
i do not believe kohana has serious enterprise database drivers - i may have been looking at an older branch but it looked like CI where they decided mysql is god and built the drivers around mysql. i've tried several frameworks with sql server and had to fix them all: Cakephp - 1 bug (very small strToLower so 'NULL' is not send to a datetime NULL without apostrophe should be sent. oracle = good to go. CI - oracle and sql server drivers are ghetto - no ORM - fail YII - Relational ActiveRecord and pure active record - works the relational active record is very nice but not necessary - not as good as cakephp - 5 bugs in the current release that prevent sql server didn't bother with oracle. cakephp - beautiful - but too high level for me. If i want to rock some lower level code - well you just don't want to go there. solid drivers - they spent their time at the sql server fest to hone their drivers in - they present the oracle/sql drivers (and postgres/mysql) all with the same functionality - solid drivers for all supported db's in 2.0 doctrine2 -&gt; wow - a little too deep for me but these guys really nailed their drivers too - coming from non-oop i can say it is quite awesome you can use their DDL and code a query like "select * from whatever where id=1" and then use (whatever their term is for DAO/Active Record) to update programmatically - most AR/DAO systems do not have their own DDL so if you write your own query - you are on your own to handle update/insert/etc. i'd love to use this but its a little too complex for my brain. Kohana - this should be forked - but i'm not seeing much (and please prove me wrong i could have hit a bad fork or dated branch) seems like it has stubbed PDO and then uses mysql drivers - quite honestly everyone should be using PDO. period. Unless they are going to get medieval like doctrine2 and have their own DDL language that can be used against any of its well written DB drivers. cakephp/doctrine2 - definitely enterprisey - yii - pretty darn close - most others -&gt; epic fail. I don't want to turn this thread into why each database is better than another but i've never been letdown by oracle or sql server and i agree they are overpriced but i'm not writing another blog/cms/forum so i need transactions to work - with any database that can do them - automatically - i need ORM when i want it - I'd love to be able to have a DDL so i can freely port my application from SCALE-UP SQL server/scale-out oracle w/ xampp win Then move to mysql(or postgres) lamp to ios/android sql-lite - heck maybe even AWS/NOSQL/MONGODB if the project is right. sessions - for some projects /tmp works fine - sql is nice but a bit of overhead - last time i checked the CI sessions were having problems when 3 ajax calls would come in and the session would refresh on the first ajax call and the other 2 would subsequently fail - not good. hopefully they've fixed that. 
http://www.youtube.com/user/phpacademy
The VQS books aren't bad. I always recommend the HTML one. For PHP, there's a nice extra-thick For Dummies book on "PHP and MySQL Web Development."
Greatest text editor ever.
How much programming do you know? php is not a stand alone language. You will also need to learn html css and javascript at minimum.
I use WAMP for windows, works much, much better than XAMPP imho.
I found [this](http://tuxradar.com/practicalphp) pretty useful in the beginning, but since then I find reading source code of things I like and hands on practice works well for me as far as learning new skills and better understanding goes.
That is surprisingly simple and should be easy to maintain. Does that capture nested bbedit tags?
I would definitely agree with this. My coworkers often think of clever solutions thanks to their CS backgrounds.
&gt;You will also need to learn html css and javascript at minimum. Got em'.
This is downright *dangerous*. I could input: [color=blue"&gt;&lt;script src="evil.js"&gt;&lt;/script&gt;&lt;span style="color:]some text[/color]
Seriously guys, stop with the regex solutions. Regex is the worst possible tool for this job.
I do, but then almost instantly wonder what bugs are hiding in it, that are going to be a pain in the butt to find! It's always easier to deal with when the bugs are apparent immediately. :)
The Zend developer zone [PHP 101](http://devzone.zend.com/article/625) tutorials are great.
Most of the time, when developing something complicated, I'll hold off on executing my code, and instead just follow the logic paths in my head, looking for errors. This produces this feeling much more frequently, and generally produces better code, because I'm not chasing errors to fix things.
So true!
Your path in #7 should be /usr/local/pear/bin/ not /usr/local/bin/
Your .htaccess (or mod_rewrite) is not properly configured. Here's something I got from stack overflow: &gt; "Well, a trivial way to see if mod_rewrite in particular is working is to do the following at the top of the .htaccess file: RewriteRule ^ http://stackoverflow.com/ [R,L], and then seeing if, when you visit the site, you get redirected to StackOverflow." http://stackoverflow.com/questions/3602557/htaccess-not-working Start here and let us know. **edit:** See if any of this helps: http://stackoverflow.com/questions/3738881/codeigniter-2-0-friendly-urls-not-working-on-mac-os-x-snow-leopard
As with learning any language, a book is the best place to start. I started learning PHP with PHP and MySQL for dummies. Laugh if you want, but that taught me all the basics I needed to know, and springboarded me to learning from online tutorials a lot better and faster and doing my own little experiments to learn even more by myself. In my highschool CS class I was done with all the PHP assignments when everyone else was wrapping up the first. Reading a book is the honestly the first thing you should do.
It's an even better feeling when you finally solve a problem that you have been working on for a long time. Usually it is some trivial error like a typo. Damnit.
Yeah, forgetting to use ; at the end of something is one annoying error! Or just forgetting some )))))) in a function...
Hmm, I never thought of that. I've mainly been using it in CMS systems where the admins have little to no knowledge of HTML, and even if they did, it's THEIR system. I haven't really made it available for normal users. Thanks for the warning though :)
I think it does, yes. But read what Disgruntled__Goat has written -- there could be some dangers in using it.
Yes, when I'm making something, I usually don't check for the most trivial problems that can/will occur. &amp;#3232;\_&amp;#3232; 
Dude get an IDE.
Perhaps strip_tags() beforehand?
I almost always think "there's no way I got that 100% right, I must have executed the wrong file".
I have had issues in the past with .htaccess not working properly on mac. I think it may be a permissions thing or something. Try adding the things you're trying to do in the htaccess in the httpd/vhost config file
Even when I do that, I'll just miss things. Like a wrong function call or arguments in the wrong order.
I worry whenever this happens.
&gt;arguments in the wrong order Fuck you php needle-haystack functions
PHP is an easy language. It is not very structured. There are a lot of ways to do it wrong. Learn MVC other design patterns and keep it object oriented. 
That and the retarded naming conventions for all their functions. Is it str_replace or strreplace, strstr or str_str, uc_words or ucwords... Why can't they just be consistent! And nl2br, really 2...
Is it under a virtyalhost? or do you need to set BaseUrl?
One day you'll learn not to feel accomplishment when this happens, but rather fear.
Get an IDE or editor with code completion and stop worrying about stupid shit like this. I seriously haven't had a problem with this for years due to just having the proper tools.
thanks for all your input, everyone! i figured it out :)
ya r/php blows haha
What in the world are you using? Notepad?
&gt; 3 ajax calls would come in and the session would refresh on the first ajax call and the other 2 would subsequently fail - not good. hopefully they've fixed that. As mentioned elsewhere CI sessions are cookie-based. If one ajax call is handled before the previous one is finished, then the session variables between the two requests will be inconsistent. 
Does this apply to PHP? As far as I know a script executes one thing at a time.
don't spam me bro!
You make a valid point, but this is just hiding from flaws in the language. Unfortunately, truly fixing them by rearranging the standard library would break way too much code. An autoconverter between versions like Python's 2to3 might make it reasonable.
I don't think you get it. Were you skimming? When someone makes a chrome app, they can either work locally, work remotely, or a hybrid of the two. Working remotely, they can hit a remote PHP site. Working locally, they can hit a local nginx web server and use PHP code. The hybrid would be a local nginx web server with PHP code, and occasionally using Curl or Javascript to connect out to a remote site (whatever that remote site is running is no matter). Just where did I mention node.js? Where did I even mention xamp or mvc? You've confused the heck out of me.
On my team, we estimate each task in advance, at a fairly granular level, such that all tasks are less than eight hours. We're expected to get six hours of estimated tasks done a day. Of course, people can intentionally overestimate things, but over-reliance on any "objective" measure of programmer productivity is going to lead to people cheating the system. There's no magic bullet.
If you're working on a project with a timeline, you should have a good idea of what features will need to be developed and in what order they need to be done. So if you can plan your week out and state what you'll be doing each day, you have something quantifiable to measure. That's how I measure my days. I never care about lines of code, because that's never a true indicator - I could write 10 lines of code that solves a difficult bug. The fact maybe that a better programmer could do it in fewer and quicker, or a less experienced one could do it in more and take way longer. it's not a fair, consistent metric. Problems fixed in a day, again, not a real measure - what are your metrics on what a problem actually is? Does a certain amount of time need to have passed in order it to be considered an achievement? I might solve 20 minor bugs in a day, but not actually progressed in the site at all. I'm certainly not going to consider that a fun day if that's how I measure things - the client wants progress and if you've spent your time resolving inane things (CSS tweaks, text amends etc) it's not a satisfying experience.
It's not that easy, I work in a few roles, Developer / Designer / Manger (of sorts), and have about 20 staff that work with me asking me for their own things to be added to the online store (different departments / system features). I measure stuff different every day, but monthly revenue growth is the only solid way to measure my progress. And I also find days when I make other people more efficient very rewarding.
Write a library that makes replacements for the ones that trip you up that simply call the correct version.
Nope, you should be using `htmlspecialchars()`. But that's all it requires.
One time, I wrote a small PHP web app, and it worked on the first try, with no bugs, completely validated XHTML Strict and here's the amazing part... it worked in IE6. Unfortunately it was only a small app that didn't matter and I've never been able to do that since, but that was a good day.
feels good man
Lines of code removed, usually.
Has this reddit so completely run out of things to post about that we're reduced to stuff like this?
For me the hardest part about programming, especially as a contractor, is estimating how long things will take. I've been doing it for over 10 years now, and I'm still shithouse at it. If it takes less time that I estimated, then that's a success. It rarely happens. Also, as everyone else will say, lines of code is pretty much the worst metric. I once worked with a guy that didn't like defining functions, because it wasn't "his way of doing things". He preferred to copy and paste the same code everywhere. This was indeed not a success. 
It's even more important to step out of your comfort zone - learning Haskell, for example, which at the time was completely outside my idea of a programming language, made me a much better PHP developer
That's a side-effect of the low-barrier-to-entry quality of PHP, the more popular related communities are always swarmed with these sort of questions. The stackoverflow.com PHP chat room, for example, is usually very interesting.
There's a metric called "function points." It's very, very effective in my opinion, and it's what I use personally. Consider looking into it.
Actions completed (tasks, etc.) and a point system have worked well for me. Any completed action (from sending an email, to meetings, etc.) is a completed action. This can easily skew your productivity if you're focusing on completions of shorter tasks and ignore larger ones, so adding a point system (email=1, big task=5) will offset that. 
Would you mind posting how you fixed it?
cakephp and doctrine2 have nice drivers (ie activerecord+ORM+some more) for sql server. yii with about 5 patches will give you activerecord with relations - very nice using pdo with microsoft sqlserver driver. do not use any older drivers. the 2.0 microsoft drivers are stable - the 3.0CTP (on work on vista/7) are nicer but kill my 2003/xp wood. You will find that sql server is not a priority with php - nor is oracle. mysql world. anyways varchar(max) replaces text since 2005 and varbinary(max) replaces the blob. in 2008/R2 i believe they moved to filestream - which essentially stores your images in a directory of GUID BUT UNLIKE MOST OTHER DATABASE Engines it bypasses the buffers to serve them up through a select without SLOWING EVERYONE ELSE DOWN. so you select image from filestreamtable where imagenumber=1 ; it goes to ntfs and finds the file, and bypassing the buffers will pipe the image out. Can you imagine your 4gb of ram eating up by 500 images? Well using filestream you get the advantage of the traditional select without the penalty of have your database buffers destroyed with useless image data (i'll assume you are dealing with a ton of images/documents/etc). buffers are also compressible along with the actual disk table data in 2008/R2 so you'd probably pay a double performance hit for trying to pump images through sql server buffers. i'd like to meet more sql server php folks - i've been using 2000 since i got my job (inherited) thank the lord some nice folks at ADODB PHP made a crappy odbc driver many moons ago or i'd have moved to mysql :) back then mysql was a big POS with an unstable future. I now recognize mysql is a great big sql server now (with an unstable future ahem oracle ahem java ahem opensolaris). but damn the UI 7 years ago was light years ahead of any other database (has today). If you ever need help with sql server and php PM me - i've gotten it to work mostly with every framework (and every one except doctrine2 needed patching to the drivers in current today form). I've had to port countless apps from mysql to sql server. It's not much different from the days of 14 linux diskettes where you had to port BSD sunos apps - not always easy. I'd like to have IM with other SQL lovers (php) - i sometimes feel like i'm the minority and just laugh when folks tell me SQL server is not real because it doesn't have limit and offset -&gt; lol. (Yes an ORM developer told me this). Not like it's that hard to look at doctrine/yii/cakephp to copy their improvements over php-activerecord lol. Anyways - if you can't get something to work because its sql server - pm me and i'll give you my AIM 
modules working and if the initial deadline was met.
I remember you from [your last post](http://www.reddit.com/r/PHP/comments/lljg7/seeking_feedback_on_my_cms/) . I glanced at the code.. I stopped reading after I saw your db class ('Model') output html. I don't want to discourage you from programming, so keep at it. Some day you'll post some code that gets good review. I would start with using a framework, and follow the pattern that is layed out for you. I rarely write code without a framework anymore, and I think most of the more serious developers would say the same.
Have edited to include that. Thanks :)
At work, I usually measure time. For myself, I try to set goals or create tasks. Did I achieve me goals? Did I get bunch of to do items done? Progress!
Look at it this way, billable vs non-billable hours. How much money did I help the company earn today? If your on budget and on track, the client doesn't need to know how long that function or problem took. It takes as long as it takes. Just don't be grossly negligent towards their lack of technical knowledge.
It is the user experience not the machinery that is important. If you can suggest a specific modification to the code that would improve performance I would be most appreciative. "I didn't even look at it, use a framework." is perhaps the least helpful thing you could say.
syntax error T_PAAMAYIM_NEKUDOTAYIM!
This, for sure. Me and my team start each day with a defined list of completable tasks. We measure our progress by how effective we are at getting them all done each day.
At the wrong position. You must escape the unwanted HTML *beforehand*. Don't forget ENT_QUOTES and specifying the charset.
&gt; Lines of code *removed* If you spent all day to reduce LOC then by that metric you would be successful. That said, I don't think LOC (up or down) is a good measure of anything.
I think I know what you mean. You start out with x LOC code base, and try to make it as efficient as possible while still adding features that you require?
I measure my progress by bugfixes, optimizations, and how sick I am at looking at code at the end of my session.
Argh. Sorry, need to stop coding when tired.
I've been programming professionally for about 18 years. IMO: Lines of code is meaningless. An arbitrary TODO list can be detached from the right goals. Cashflow is a worthwhile goal, but long-term investments may require short-term losses. Time spent is elastic (see: Parkinson's law). My primary metric is a confident feeling that the future will be better as a consequence of the work I did today. That way it includes the challenging things that make my work fun and rewarding, as well as tedious (but necessary) things like documentation and support.
Ah a fellow cynic.
i was saying if you are going to do all the work in the browser then what is the point of using such a heavy payload of a webserver (apache) + mod+php+php+mvc. it seems like ALOT of overhead if the application is all in the browser when you are using the remote site as storage stub? I agree with your points - you can make a php app that talks to the windows UI or maybe you should just code it all in JS on the browser side and use something very lightweight to handle remote storage? Is there such a thing as a php-webserver in one that is like node.js so you can simply catch the requests for i/o and (auth) for the chrome application and reduce the footprint of a stateless LAMP setup? I'll have to lookup nginx i keep hearing about it lately - does it give you the ability to run php without all the overhead of traditional lamp? My node.js thought was just that. if you are doing all this work in javascript for the chrome browser app - it almost makes sense to do the rest of the work in javascript and node.js is a very lightweight linux/windows server to handle the requests (in javascript). Maybe what i'm asking is there a node.php - where a light footprint php webserver that can execute php? Does that exist? Sadly my javascript skills are the suck - but i do recognize the fact that there is not much to run php in the browser like javascript - so i have to make a choice to stick with the tried and true lamp stack - learn javascript and php - or move completely to javascript. Do you agree that if you are writing your app in chrome (javascript) that it only makes sense to then carry the rest of the job in javascript server side (hence node.js)? 
You're so argumentative.. lol . Here are some suggestions: * don't output anything from an object until the developer explicitly decides to. implement a `__toString()` into your objects so they return a string instead * move the form creation out of your db class, and into it's own object. use the toString method I just mentioned, so that the developer can do something like: ` $form = new Form(); $form-&gt;setVar1('bla'); ... echo $form; ` * not sure if you're trying to be MVC, but if you are, you should not be handling html in your model because you're putting the View in the Model
sad but true.
Was he seriously trolling himself? We have a shit in-house written app with coding like that. Fix a big in one of the parts? Good luck finding the code block anywhere else it has been copied and fixing it. 
Well, often I'm doing maintenance work on legacy codebases, so really I mean 'still accomplishes the needed tasks but with less code'.
Right, the actual metrics I use are codepoints or cyclomatic complexity, but effectively LOC is a decent proxy for those.
It's still not foolproof, you should avoid using such a generic selector like `.*` (it kinda defeats the purpose of using a regular expression, TBH). You could still put in any CSS styles at all.
I guess. I've edited it as far as I'm really going to, like I said, I never really made it available for normal users, just website staff. It serves as a good base to be built upon, however.
There has to be a joke here about reading comprehension and writing lines of responses that equates to crap in this context. 
I have been working on creating tutorials... Not sure how great they are but my target audience is essentially you; a novice looking to understand the basics so they they can create their own systems. Take a look: http://www.evanpetersen.com
This is nice sanity check, thanks. Our e-commerce is definitely tagged onto the main business, and would only generate a miniscule percentage of overall income...
Thanks. Your edit is one of the main reasons we're considering doing it in-house: avoiding the need to monitor the status of the main codebase, applying patches which might screw up something else you've done, etc, is an onoing nightmare that an in-house solution would avoid.
It depends on the stage of the project. Early on, if the project is big enough to need serious design, I'm probably looking at progress as "how many tasks did I unblock?" In other words, if 40 tasks rely on this piece being done, it's more valuable, than me changing the hue of a button. Later, it shifts to how many user-visible things did I make work? Still later it's the number of bugs fixed. The only time it's LOC based is when I've come to a decision that the code is too complicated and it's worth spending the time to simplify it, and then it's LOC removed and the much more subjective improved readability.
Tasks. IMO if there is no deliverable task, no progress has been made.
" is an onoing nightmare that an in-house solution would avoid" nope.. it would be worse actually
Yeah sounds fun heh. I really try to avoid any jobs these days that involve working on other peoples code, even if they do know what they're doing. Much prefer to do things from scratch, and this seems to be a pretty common opinion. This guy was a bit of a n00b and this is going back about 7 years. So quite a lot of the contract PHP programmers around actually knew fuck all about proper programming practices, and OO PHP code was only just really getting going in a lot of places. We were actually going to get rid of him, and he got a bit upset. But he had a good attitude and was up for being shown how to do things, so we kept him on. Poor project management probably didn't help, because nobody had noticed his function free coding style for about a month. Also they gave him his own whole project rather that putting him on as a junior in a team project. That was pretty dumb.
Why was he downvoted?
What is the benefit of the "Class member access on instantiation"? I cannot seem to find any description on it's function?
In an agile shop, we usually do it by number of storycards completed. In the absence of any formal projects to work on, I go by problems solved. 
I don't get that. In-house code is 100% (or so ;) "known". We'll know that if we need to do something what to consider, where, etc. But with someone else's code, if i update, patch, add-on a plugin or whatever, i have to rely on other's code, which while in all liklehood far superior to mine, still leaves me potentially vulnerable. Not saying your wrong, but that's the way i see it, atm!
Yeah, the taxes issue. I never worked with Magento but we did create a store with it at the previous place I worked and heard all the complaints involved with this. From what they explained to me, the taxes issue was just ridiculous. And some templating was such a pain that they had to adapt the design to Magento, much to the ire of the designers. Interesting that so many people seem to think highly of Opencart, I'll have to check it out.
Seen this: https://github.com/alecgorge/PHP-String-Class/blob/master/examples.php
https://github.com/alecgorge/PHP-String-Class/blob/master/examples.php
Have you tried out Propel ORM?
I like that feeling, but after a couple of minutes I manage to find out that some logical part of it isn't quite ... logical
articles on reddit turned purple
saying that you participate on stackoverflow and follow select people on git is always a good thing to drop in an interview edit: oh and it's better if you actually do it :D
well a measurement for progress in a day, at least for me, is if i can solve at least 60% of the things i need to fix/make that day. Imo for short periods like a day that's the best measurement. Of course for longer periods this does not work and requires alot of attention and taking into consideration [sometimes] bugfixes which can eat alot of time, development, etc. Usually for long periods i get on the drawing board, i try to make modules, see what each module requires, evaluate just how much i have or is provided by a framework or other solution, evaluate how much would it take for me to write the missing parts, how much to glue the modules together. I take the obtained value and multiply it with 2. Should get me close enough to the deadline. For clients, usually i do 3 estimations. 1 after first few discussions, when the project is still not clear, 1 after 2 weeks once the information has settled, and 1 after i have a very clear ideea of what the application will look like, what resources i would need and so on. And this is not the last deadline. I usually rediscuss the deadlines during the product development and update them based on the unexpected requirements, unseen bugs and so on.
i usually look for something wrong if my code works from the first time. ofc a echo "x" would work. but, when you're playing with payment gateways and generally with people's money, you will need to keep a dose of "there might be a hidden bug that does not manifest yet". We had a specific case few weeks ago when one of the clients could not order a product, and we didn't knew why. we discovered that the bank does not accept 3 decimals in the price, thing that is not documented in the api doc provided. So yes, usually if code works from the start, i still keep a close eye on it for some time. 
Well, there are things bot for and against getting a developed solution. I'll start with pros: 1: If the project is open sourced, alot of people work on the project, that means alot more response for fixing bugs before they really affect you. 2: You have alot of features, plugins, others develop alot of modules for their specific needs Thos are the only pros that come into mind [and they are not very small, they are actually pretty important] Cons: 1: Alot of people use the same platform. That means if anyone finds a bug and is ill-intentioned, it will [maybe] hurt your business 2: Softwares like Magento for example, take a quite unnatural way for development: they incorporate alot of things in the original product, and if you need anything specific, you add a layer of specific stuff over the already resource expensive initial layer. A generic OS Software will try to cover as much of the market as it can. What that will mean for you? Well, resources invested. Features that you have and you don't need, but are active nonetheless. Now, every aproach has it's pluses or minuses, but what mantters for a company is always the money. Developing a solution in house that suits your needs requires programers which need money to live [i assume they aren't exactly cheap]. Also, once your business grows, you will need custom things, and guess what: most of the time the only ones that know the app are the original developers. Sure, you can hire new people, but it will take time and money for them to read the code and see what it does. On the other hand, in a public open source commerce suite, you get the app already running and most of the times 99.99% secure. You have implemented alot of features that you use or don't use. Some of them you will use as you grow, some you won't. But keep in mind that you might need some of the aparently useless stuff later. Beside that, once you need something, if not provided by the core, you will have most of the time additional packages made by others with the same problem. A really slow app based on a known software suite can be sped up. Use caching, if possible multi tier caching. Use for example varnish. Use memcache for example when you can. Look at the database and tweak it so you can speed it up. Look at indexes. Serve all static resources from a cdn or a separate server. Basicly, get a very good sys-admin and 1-2 very good programmers at start [well, it works with average programmers]. Make sure they know the platfor they will work on. After all, put these on a spreadsheet, and see on the long term which solution is best for you. Money talks everytime.
Yeah, the bugs that aren't visible will bite you the hardest.
i really have no idea...the tutorials are actually great...
Yep. Did the same - got the job (or at least it wasn't counted against me)
or "Probably has several computer viruses"
Nope. But you can do something REALLY dirty and do this: empty(${"_".!$_=trim($name)}); Please don't do that in real code, but thanks to variable variables, you can do things like that...
Without caching and on weaker machines yes. Also, have had very slow results with Apache as well. On nginx, with APC, and caching turned on, it works very fast and with the heavy duty customization\overwriting of the core it's definitely worth it. Having said that though, for small shopping carts I wouldn't suggest it. On shared hosting it's not even an option. **EDIT:** Also, documentation is scarce and often times outdated. Which can be very frustrating...
I think there's a Bill Gates quote that's something like: "Measuring the success of a program in lines of code is like measuring the success of an airplane by weight."
there is no facebook RSS feed.... like I said in my post, you have to use their tools (&lt;object&gt; &lt;iframe&gt; etc)
no i will go check it out! thanks for the suggestion!
TAXES!! YOU FORGOT TAXES!!! Just the reporting is a nightmare! And keeping up with regional taxes is tough! And figuring out what states you owe taxes is tough! And Canadian taxes?! OMG!
What percentage of code would your unit and integrative tests you create cover? 0%? Don't know what unit tests are? Boy, you're **wayyyyyyy** out of your league and better leave stuff like e-commerce systems to the big boys (like me ;-). A full e-commerce system, minimally, costs $70,000 and would take about 6 months. If you know someone who can do it faster for less, and not be a walking compliance/tax/fraud/reporting nightmare, I'd **love** to see the end URL!! Case in point: if you do not make $70,000 in 6 months yourself, you have *no* business being the lead of such a project, even for yourself. You lack depth. Come back, maybe, in a few years after you've passed your ZCE with flying colors, know what unit and integrative tests are and how to write them, and know about PCI, tax compliance, and other stuff.
Then you quit your job and , oops! No unit tests, no integrative tests, *zero* documentation, and *very* sparse code comments later... and BOOM! Every future employee will have to start from SCRATCH! With **no** community support! No bug fixes. No Patches. No one to call for support. They will curse your name; your negative karma *will* escalate, and in the *best* case, you will look back after years of growth, hold your head in your hands and moan, "*what the hell was I thinking?!*" [from personal experience]. No. Custom ecommerce is never in the best intersts of a corporation **unless their business model is custom ecommerce!!** Even then, the employer needs to favor unit tests, integrative tests, extensibility, maintainability, and **documentation** over features, time to market, and short-term profitability, or the Total Cost of Ownership will be **monstrously** huge within a few years. Case in point: Ask ticketstogo.com how they make it with their custom cart? Or blinds.com... or speedfc.com. All have custom carts and have to spend hundreds of thousands of dollars on senior coders *just* to tread water. And when the money runs out, the sites stagnant at best, usually for years.
HA HAAHAHAHAHAHA! 6-8 months if you're all top-notch, know what you're doing, have each done it before, and there's 3 of you that are highly competent. You can't possibly think it will take less than a year otherwise. It's just ludicrous!
If you built it in 2 months, this shows you should sell it for $80,000 a pop. If it's that good, and art is a sellable product, companies would pay for instant-on, **can be deducted from taxes as business expense**, and 30 day refund! No threat of coders slacking off or being unable to deliver: Priceless.
I'd love to do that! Also, the store isn't centered around art. The codebase is store-type agnostic. I built so that it could run as a one-seller or multi-seller storefront. I'm quite proud of it. :) 
Amount of features completed and the level of difficulty/time assigned to those features + number of known bugs fixed + number of bugs found (by you the developer) + amount of known poor code to refactored + amount of known unoptimized code that has been optimized. 
Actually, I just got this email from HE about [this new interactive PHP (other languages too) tutorial](http://code.he.net/) they created. Cool stuff.
What exactly is this supposed to be? Visiting the home page tells me nothing about the project.
Huzzah! [Phpfarm](http://sourceforge.net/p/phpfarm/wiki/Home/) is a wonderful project.
It looks at a PHP project as a 'PHP application' rather than a 'collection of PHP pages.' It tests the functionality of an application in multiple environments -- PHP 5.3, PHP 5.4 -- and using multiple databases (mysql, postgresql, sqlite), as well as performing unit-tests (phpunit) and browser simulation (selenium). It is for automated testing. Someone correct me if I'm wrong.
i bet the majority of php programmers don't know what ci means (even the concept of source control or testing is alien to them ffs...)
I don't know about that. Where I work we are php/python guys and this stuff is standard. I have a hard time believing we do things much differently than the average dev team using php.
"guy using php for school project" probably doesn't, but it's nothing new for the majority of serious/professional developers.
That happened to me today, it was glorious. I even passed all my unit tests before I realized I hadn't written any yet. 
Thanks. Why can't they chuck this sort of information in a handy [expandable] box somewhere? &gt;_&lt;
There's a saying going "Those who cannot do, teach". But in the case of programming, that is completely false. If you cannot write properly secure code, please stop writing tutorials for other people to follow. You're hurting the web.
Your loops' contents are only executed if the statement pans out. If `!$b`, `!$c`, or `!$d`, then none of those files will be included. Also, the files will be included as soon as the script gets to that spot - so you can't call a method from an included file before including it.
They are added based on the conditions. But don't believe me, try running this: if(false) { include 'nonexistantfile.php'; } You won't get any error.
Control flows won't be entered upon parsing but obviously parse errors will still be detected and stop execution. So if you did: if (false) include 'test.php"; You would see an error.
This is correct.
1880 just said the opposite thing. http://codepad.org/mSKrycvV Not seeing any errors.
&gt;Control flows won't be entered upon parsing but obviously **parse errors will still be detected and stop execution.** And his example contains an include starting with an apostrophe and ending with a double-quote. Of course, it is completely irrelevant to the question posed by OP. 
That's sweet, any idea on how stable it is? It seem like there haven't been any updates since it initial upload which means it was either perfect the first time or bugs haven't been addressed. 
include's are included during execution flow, whereas require's are generated and always executed. [include vs require](http://www.fayazmiraz.com/php-include-vs-require/)
No. The behaviour of the example in the OP would not change between include/require - the only difference is that require would halt execution (as a fatal error) if PHP was unable to read contents from the path provided. You can see this by doing a conditional require on a file that does not exist.
Ahh.. I thought the ' was a typo, corrected it before I even ran it in codepad.
To add to what has already been said. Don't worry too much about the performance of include, your file system will cache the files in memory so including them will be very fast. Your opcode cache can do it as well. There are much better reasons to avoid lots of included files than performance issues.
All fair points, but i think you miss the point of my post. I don't need an all singing all dancing e-commerce solution; i just want to re-use the payment system that we currently employ for selling memberships/tickets, for selling products. I don't want to be better than the guys that currently produce e-commerce products; i want to remove the complexities of learning curves and code maintenance and i want to speed up and simplify the process for the customer.
check his posting history, the guy is an exemplary troll.
got it!
Asshole. You have to know that people googling this will make you burn in web developer hell when you dont post the answer :P (Semi serious tone. Post the answer dude.)
 ini_set('display_errors', true); ini_set('html_errors', true); $twitterRSS = file_get_contents("http://api.twitter.com/1/statuses/user_timeline.rss?screen_name=discland"); echo &lt;&lt;&lt;_END $twitterRSS _END; The interesting thing about this problem is that it does not happen every time. I've been sure to allow_url_fopen in my php.ini file. I'm stuck. I think it's a timeout issue but I am not sure where to go from here. Any help would be greatly appreciated.
thanks!
I never link to other discussions that you are involved in. Has nothing to do with me. Paranoia, not accuracy, is one of your enduring qualities.
Just out of curiosity, why I would to avoid lots of included files? Is it just a matter of the code becoming to difficult to maintain, or are there other reasons where well a documented/written php script should not have too many included files? And forgive my ignorance, but is where the separation of logic and views that's provided by MVC (I've been playing with codeigniter) comes into play? EDIT: there becomes where
Hmmm, maybe one of these three? 1) Quotes not needed on a linux box and breaking in Plesk 2) $HOME is not set, and the command should have been var/www/vhosts/&lt;directory&gt;/httpdocs/clock/clock.php 3) file was actually at ~/clock/clock.php (home/&lt;username&gt;/clock/clock.php
Even if it works, using file methods for remote content is just a Bad Idea&amp;trade;. Just use cURL, or another library.
To expand on this, using cURL or an SDK for working with a service usually gives you much better error handling and checking. For example, are you getting a 420 response from Twitter (indicating you are hitting the API limit) or a 500 (indicating a problem on their end)? It is also not portable, as most hosts have external streams disabled when using the file handling commands.
Haha it was definitely #2! All the advice godaddy gives doesn't apply to the plesk on a vps. 
In your app.php, add the following code. if (isset($_GET['session_id'])) { $_COOKIE[ini_get('session.name')] = filter_input(INPUT_GET, 'session_id', FILTER_SANITIZE_STRING); } Also, make sure you pass the "session_id" in your GET request.
[See my comment to your post in r/PHPhelp](http://www.reddit.com/r/PHPhelp/comments/mdhp4/problem_with_file_get_contents/c301wiw) **TL;DR** use curl instead
The manual explains it better than I can. http://php.net/manual/en/mysqli.overview.php The `MySQL` extension is old, `MySQLi` is better in every way and `PDO` is also a good choice. While I have no statistics to back this up, I'd say that `PDO` is used more than `MySQLi`, mostly due to its (debatable) better API and it supports a number of different database drivers, not just MySQL.
I see. I read the manual right before I posted the question, but I didn't understand much of it. The manual basically says what it is, but not much about why it's better and so forth!
Thanks for the help.
Thanks for extrapolating.
Mostly complexity yeah. The including of many files is more of a symptom than a cause. Have a look at some of the include graphs generated with [inclued](http://pecl.php.net/package/inclued). For instance the [Zend framework](http://i.imgur.com/1Buxf.jpg) or [Magento](http://i.imgur.com/OJezB.jpg) MVC neither tries to solve nor cause this problem. It merely tries to organize code. Over organizing code **can** lead to something like this, though.
It allows more MySQL related goodness, in particular Prepared Statements and Transactions. Prepared Statements are probably easier to work with in PDO though. Also, it's an object (still has procedural) that's easy to work with.
There are a few things mentioned in the manual why MySQLi is better than the old MySQL extension. Most of those apply to PDO as well. &gt; • Object-oriented interface MySQLi and PDO both have a native, built-in class. MySQLi also provides procedural functions which are very similar to the MySQL extension's functions. For example: $some_pdo_instance-&gt;query("..."); $some_mysqli_instance-&gt;query("..."); mysqli_query($database_connection, "..."); &gt; • Support for Prepared Statements These allow you to write your query first, 'send it' to the database, and *then* send your values. It means that no matter what values you'll insert, you can never break the query (SQL injection). For example, this is very insecure: mysql_query(" SELECT * FROM `users` WHERE username = '{$_POST['username"]}' AND password = '{$_POST['password']}' "); But this is secure (PDO example, MySQLi's will be similar): $prepared_statement = $a_pdo_instance-&gt;prepare(" SELECT * FROM `users` WHERE username = ? AND password = ? "); $prepared_statement-&gt;bindValue(1, $_POST["username"]); $prepared_statement-&gt;bindValue(2, $_POST["password"]); $prepared_statement-&gt;execute(); This is the same, only shorter (only PDO has this shortcut, I believe): $prepared_statement = $a_pdo_instance-&gt;prepare(" SELECT * FROM `users` WHERE username = ? AND password = ? "); $prepared_statement-&gt;execute(array( $_POST["username"], $_POST["password"] )); Or you can use named placeholders, in stead of question marks (you can also use the `-&gt;execute($data)`-shortcut mentioned above if you pass it an associative array): $prepared_statement = $a_pdo_instance-&gt;prepare(" SELECT * FROM `users` WHERE username = :username_goes_here AND password = :password_goes_here "); $prepared_statement-&gt;bindValue(":username_goes_here", $_POST["username"]); $prepared_statement-&gt;bindValue(":password_goes_here", $_POST["password"]); $prepared_statement-&gt;execute(); &gt; • Support for Multiple Statements Allows you to execute multiple queries in a single call. $a_mysqli_instance-&gt;multi_query("SELECT 1; SELECT 2;"); &gt; • Support for Transactions This allows you to execute a query, do some other things and then, if you notice that something in your script went wrong, you can issue a rollback - the query you executed is 'cancelled' as if it was never executed. Also mentioned on that page is that the old MySQL extension is no longer updated, only maintained. There's simply no reason to use the old extension in new projects.
Here is how I got it working. It runs clock.php once an hour on the hour. [working cronjob](http://i.imgur.com/K36Ed.jpg)
awesome thankyou, I suppose I would have to stick my upload script behind a separate firewall which allows anonymous users to upload? I could always do a check in the controller though to see if they've provided a valid session ID though... =)
Simple and easy, but does the job I guess. Thanks.
You know you love exec(file_get_contents($_GET['url']));
Iterators are one of the most useful features that nobody uses. I think their names scare people off. Tree iterator is a pretty cool one too if only for the novelty (I've never found an actual use for it), and Recursive Directory Iterator is insanely useful. In terms of how they work this varies depending on on the flags you pass into the recursiveiteratoriterator: &gt; The mode. Options are LEAVES_ONLY (default), SELF_FIRST and CHILD_FIRST. 
Last place I was working actually had lots of code like: mysql_query("DELETE FROM $_GET['table'] WHERE $_GET['var'] = $_GET['value']"); But they said it was ok because they only serve the elderly community and "there are no elderly hackers" wtfs all around
That happens when twitter.com returns a http 500 error. File get contents will just trigger a warning and return false. tl:dr; use curl for more fine control over error handling. 
Makes perfect sense to me ;)
[PHP Object Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117)
Saw similar images on a Lerdorf presentation. I was wondering what tool was used to generate them. Thanks for the link.
That sounds AWESOME!
I usually bill a set amount, that way clients tend to be more likely to be able to happily pay you if they see results. As for pricing structure that can be solely up to you. I do a lot of basic CMS development and authentication where I usually start at about $700aud and if they want more features and more complex work I add between $100 to $400 accordingly
Similar to this, I look at the work and figure out how many hours I think it'll take, then figure out a set amount from that. I develop most code as reusable modules and track how many hours went into each. Then, when I give a quote for a job, I will include the hours already invested in each module that I plan to reuse. If I really want or need a job and I look for ways to cut the quote to woo the customer, the first thing I do is cut what I am charging them for code I've already written. If it's a mom and pop shop or non-profit, I'll usually leave off the hours for the code that's already written right off the bat and have, on occasion, done work for almost no money if it made me feel better. 
Upvote for being a nice guy. In an off topic, I'm in a heated debate with a clients ex developer because he is trying to keep charging her $35 upkeep a month plus the original $500 even though she disagreed with his contract yet he is saying a verbal agreement was made etc. If he keeps going, I will get my solicitors involved...
or the stream wrappers contexts
Legit... Sad to say I've seen worse in a code-base used by thousands of clients.
One of the reasons I don't look for work over the internet is I like to have everything in writing. Most of my jobs start with a customer faxing a signed agreement back to me or with me picking up paperwork at their office. It sounds so outdated to say it, but it's worth it to avoid the headaches.
Check out [this question](http://stackoverflow.com/questions/90924/what-is-the-best-php-programming-book) on StackOverflow. I could also vouch for [PHP Objects, Patterns, and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X). When I was learning OOP, I found the book straightforward and quite easy to understand.
Quite right, I feel bad for the client too. It was her mothers business and her mother recently passed away and she has to learn everything by her self. There are some scumbags around
Heh, we try to do $30 a month for Drupal as a service basically. We host, backup, maintain, and update the website with that. We also count on a few odd questions a month. Depending on what he is charging for, $35 a month seems like it might be near robbery lol.
It was $35 a month for a static website that will probably change the content probably maximum 4 times a year...
That is telling it to run every minute of every hour. You said once per hour, correct? :)
Depends on the work, if it is maintenance/upkeep do hourly. If its a new project your doing from scratch, plan it out and charge according to the hours you estimate (with a buffer of course). Anything above and beyond should be charged by the hour.
Excellent book. Easily digestible with very good examples. After you're finished with it, read the "PHP Objects, Patterns, and Practice" book jailbird suggested.
Because this solves some sort of remote content exploit? file_get_contents() does not execute code, so it doesn't matter. Echoing curl content would be the same as what he's doing. If you're going to parrot, at least parrot with some understanding of what you're talking about. Further, it is entirely possible to trap and error handle these sorts of problems. For example, one could in fact turn display_errors off (it shouldn't even be on for a production environment anyway) and then check [$http_response_header](http://php.net/$http_response_header) for the result of the call to properly error handle. Logging errors in a case like this is probably a good idea so you can see that the service was unavailable, and when.
Wow. Way to be an ass. He's debugging code - there's no issue with outputting content. What he's having trouble with is timeouts and error conditions, which file_get_contents() simply doesn't handle in any sort of graceful manner. Get over yourself and actually add something to the conversation instead of doing nothing but trying to act like you're better than anyone else.
Ugh, you're one of those guys that doesn't put braces around a double nested block? \*Groan\* Why? Just...... why?
Thanks for pointing this out, I totally forgot about it. Knowing my luck, I'll forget about it again when I really need it. Isn't that always the way? 
It is entirely possible to handle file_get_contents errors. Read what I said.
What he's doing already uses the stream wrappers.
Interesting, I didn't even know Godaddy would let you do that. Hell, I didn't know Godaddy ran Plesk, I thought they had their own flavor of control panel.
That is what i thought at first too, but apparantly the * means every. So it runs at the 0 minute of every hour, of every day, of every month!
What you edited after I responded. No, I'm quite through with you already. Have fun being better than everyone else.
Oof, I'm sorry - I thought you had * in every field there. Apparently I was looking at the minute field of your old screenshot. I hate plesk. Use plain crontab and dump that crap :)
I corrected a spelling error. Quit trying to backpeddle.
Usually depends on what you're billing. If it's a long term contract job, you might would bill hourly as they would need you. If it's billing for a contract, then it would generally be a price quote. If you're looking for how to come up with a price quote, check out online and book resources on Function Point Analysis. It's not perfect and you kind of have to devise your own scheme of what to calculate but it's a good start of figuring out how much you should charge for projects as well as how long projects could take.
Thanks for making the internet an even bigger cesspool than it already was!
Ouch. Yeah highway robbery.
write for the language not theory
If it's a VPS, you use what you like.
You're asking for help in solving what we like to call an Engineering problem. See, building software is quite a bit different than any other job out there. Like most if not all other engineering jobs, it requires you to **wear out your thinking cap**. Thankfully, like a lot of other engineering jobs, you are **rewarded** well for the ability to do so. Now, I know that you know how to solve this problem yourself. Think about it, you have all the resources you need right in front of yourself. Google is a great one, for instance :) http://en.wikipedia.org/wiki/Access_control_list is one example of something you could use. There are other auth frameworks as well. http://framework.zend.com/manual/en/zend.auth.html However, I think this instance is **simple** enough for you to **roll your own** as the hassle of learning one of those libraries outweighs the task at hand. The fact that you posted this seems to indicate that you have limited knowledge of SQL. It's okay, I did too at one time. I thought "SELECT", "INSERT", "DELETE", and "UPDATE", along with "CREATE TABLE" was all I needed. **Study up on database design.** It only takes a couple days to really grasp most of the concepts, and **it will help you immensely**. You'll realize you just mentioned 4 "subjects" which correspond to tables: Employee, Company, Result, and Test. Now obviously, an employee is going to have a company_id FK pointing to where they are employed. A result is going to have a test_id FK corresponding to which Test the Result is for, and the employee_id FK of which Employee took the test. Now, when you say "companies that will sign up," I assume that you mean one single individual will be allowed to create a Company account and login with one single password to review test data. If not, then you should probably consider everyone an Employee and add an additional table, say "Reviewers." The reviewers table would, of course, be a relation consisting of the company_id, and an employee_id, along with perhaps even an access_level (a 1-low...3-high whether the reviewer can create new tests, just modify existing tests, or only download the aggregated results) Good luck! :-)
Oh my, thank you very much!
haha :) but at what point in his example were you confused? Would { } really add anything to it?
Read the source, it just wraps the built in functions. Most of the methods are only a line or two long. Not many bugs could hide in there ;)
You forgot bold words in your last two paragraphs
It doesn't confuse me, it just annoys me to no end, since I see this happen in code that I have to work with, and it always means I have to add the braces. I've even seen people stack the entire loop and contents onto one line without braces... Just put the braces... you shouldn't need to add them when you want to add a second statement to the block...
I used [this](http://www.amazon.com/Object-Oriented-PHP-Concepts-Techniques-Code/dp/1593270771/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1321450035&amp;sr=1-2) book. I don't know why it's so expensive now.
Part of the issue is using the correct tool for the job. While file_get_contents() can be used on external streams, it's not the best tool. cURL or raw sockets would be the best tool. Just because you can do it doesn't mean you should.
tl;dr - don't ask where to start; go become an expert then come back and *tell us*.
META: Yet another { } placement discussion/noise that /r/python doesn't have ;) There are parts of PHP that I really dislike
You can use those things, sure. However, curl isn't any more right than the other method, and it certainly doesn't give you any more control for something so basic. Sockets, while doable, is more work than it's worth. My issue here is that none of you could show him how to deal with what he was using, so you all took the easiest route out. If any of you had said "here's how you deal with file_get_contents (code here), but I prefer using curl (code here)" my sentiments would have been different. It's fucking amateur hour in here.
8 spaces, 4 spaces, or tabs? 
Well... I expect I'd be in charge, so just whatever I demand. And because I'm awkward I'd ask you what you prefer, then choose the other style. Got to keep the worker bees busy.
Sorry I meant stream wrapper **contexts** to be specific: http://php.net/manual/en/stream.contexts.php
You bet. This allows a lot of extra control to be exerted over the file_get_contents() call the OP is using.
&gt;My issue here is that none of you could show him how to deal with what he was using, so you all took the easiest route out. Uhm, no. If someone asks me to look at a chunk of code, I'm not going to spend time showing how to do it how I feel is incorrect. AP has two problems here. One is that his code is working inconsistently. The other is that he isn't sure why he isn't getting a response. Since he's using an external web service, cURL is a better option. file_get_contents won't easily tell you *why* something failed, even with error handling set up (if it does, I'd love to be proven wrong. I don't mean that sarcastically either. As far as I know you have to parse the error string or loop through the context, parsing everything to detect headers and get the correct header and deal with it from there). Why write an error handler when cURL has done all the work for you? According to the [Twitter API docs](https://dev.twitter.com/docs/error-codes-responses), there are 11 different HTTP codes that can be returned. Some are successes, and some are failures. Your app should behave appropriately instead of just saying 'Oops, something broke' because file_get_contents() returned false. It's not taking the easy route out, it's showing a better way. Programmers don't get better if people feed them bad information. 
&gt;Your app should behave appropriately instead of just saying 'Oops, something broke' because file_get_contents() returned false. And herein lies the issue with your response. Just because file_get_contents() returns false doesn't mean you can't [check the HTTP response codes](http://php.net/$http_response_header). What pisses me off here is not that you guys want to use cURL, it's that you simply don't know what you're talking about when it comes to the other methods.
I ran into one of these so I replaced all of the $_GETs with filter_vars and then a week later the site blew up when the host (for a reason known only to themselves) reverted their version of PHP from 5.x to 4.3 and filter_var was no longer available.
Read the rest of my comment. I did say you can parse the error string or the error context (which is the same as $http_response_header like you suggested) with a registered error handler. I don't see the point in doing string comparisons or regex to find the error when a call to curl_getinfo() will return the response code without any parsing. These two snippets of code were as short as I could get them (I didn't check them for correctness though). $data = file_get_contents('http://domain.com/api/resource'); if(!$data) { $error_no = explode(' ', $http_response_header[0], 3); switch((int) $error_no[1]) { // handle errors } } else { // everything was good } or $ch = curl_init('http://domain.com/api/resource'); curl_setopt($ch, CURLOPT_RETURN_TRANSFER, true); $data = curl_exec($ch); curl_close($ch); if(!$data) { switch(curl_getinfo($ch, CURLINFO_HTTP_CODE)) { // handle errors } } else { // everything was good } file_get_contents() is shorter, but since he's using an API I feel cURL is the better tool. I'd rather use the tool that's built for the job than one that just happens to also do the job.
I'm with you bro. I can't believe how many bugs I have to fix of my coworkers code because of shit like this.
Reformatting large sections of code because you don't like the brace style is being an asshole. If there's a consistent code style in place, just go with it unless it's truly unmanageable.
how are you posting to the separate domain?? just sanitize the post data before sending it off!
Yes, with CURL. But if the data isn't oh-so-important you might try validating it with JS?
You'll need to use CURL or something similar. Sanitize on your system then send the data over to the CRM using CURL. Check this out: http://www.paulwest.co.uk/article.php/salesforce-form-integration-with-php 
Yes, but given that the spammer knows the CRM system submission URL, they will still send (automated) spam to it. It's the equivalent of saying "they're spamming my beavis@yahoo.com domain, can I make a separate address, beavis2@yahoo.com and forward all *spam-filtered* mail to beavis@yahoo.com? That's great, but they're still going to spam the original destination.
Well fuck it then, might as well just leave it the way it is.
If I used CURL they wouldn't know the CRM URL though? Since that all happens server side. 
It's not that important but my guess is spammers already know to disable javascript. 
Once the CRM server has been publicized, the process of spamming it is entirely automated. You could even take away the form completely right now. And you'd still have spam bots POSTing data to http://your/crm/site for the next 5 years. Lovely eh? (in other words, spam bots use CURL too. and they never forget the places they spam to :) (EDIT: I'm not making this stuff up. I took down an HTML contact form once and was still getting emails for like 5 years because the PHP processing script was still up and getting POSTed data, thus mailing me crap.)
I'm going to guess they won't bother though. Some fairly effective measures seem to stop most garden variety drive by spam. Unless this is someone that is pissed, then all bets are off.
Ah good point that shouldn't be an issue though. The forms can be changed on the CRM. So they can disable the old script and start a new with a new CURL solution. But if they can still get the url from CURL then it'd be an issue. 
The form action is the other domain. The form isn't processed at all on the clients site. Just the form resides there. 
Add a Captcha to your form to get rid of the bots
I used two functions for output escaping, due to a desire to mirror the Django functionality. See https://docs.djangoproject.com/en/dev/topics/templates/#for-template-blocks. I think it gives it a DSL'y feel, but just a single autoescape is also nice for other reasons. Bikeshedding though :) Your group function is nice, although I have never needed that feature. &gt; wanted the controller to pass one Litter instance containing an array with all data the view might need. I wanted Chano to be a drop-in replacement for regular PHP templates, so changes outside of the template itself was not acceptable. &gt; I am considering the equivalent of your ::with($val) for that, since PHP's new sucks balls. Hmm actually I _am_ using "with::" as a kind of factory/get_instance kind of thing. Maybe I should consider using it for iterators too, and having the type decide what to do, kind of like you are doing in Litter. 