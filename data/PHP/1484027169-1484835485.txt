Any idea how to setup the 3rd option for the Office 365 connectors? I tried following the instructions, but I just flat out don't see the options for "Admin -&gt; Exchange -&gt; Mail Flow" like the instructions said. Also a part of the problem is Godaddy and Office365 is insanely obtuse with their admin interface. Just trying to change the password for the Office 365 email account is like poking around trying open the door to Moria from LotR: You have to find the exact sequence of page clicks and make sure you're on exactly the right browser, and enable the right settings. 
NoInjections for NoSQL, the new trend for NoScale.
I've recently gotten a fresh air of PHP after...Shit, 8 years of programming in it. Essentially, I've branched out to use different tools and functions that my "get off my lawn" attitude was preventing. It's an exciting world out there. But anything programming you do for too long will feel exhausting after some time. It's not necessarily the language; it's just the way this life works. Keep at it, change it up with some new libraries, build yourself some new classes and functions. Even if your newly built classes are a reinvent of existing stuff, it may give you a little boost of confidence.
Apples and oranges, Symfony does not advertise itself as a unicorn which can do everything out of the box. Instead it tries to keep the framework itself lean and let's you choose your own.
&gt; We make one call to Symfony routing to compile the route regular expressions. We do not use the rest of their code. That what I tell everyone, as well. I don't use PHP for anything meaningful, because in the end I just issue one call to the PHP binary to run my code.
If they're not meaningful why are they still listed as a required dependency?
Haters gonna hate!
... until next week where a cooler and newer kid appears on the block.
Take a look at what frameworks like Symfony (and others) have to offer. Symfony comes with a CLI generator where you specify model properties (think of if it as database fields) and it will generate the model (and database), forms and a controller for you. Building CRUD apps is really easy to automate
You do realise there is an entire world outside of github? A lot of the largest open source code bases are not based on github
The article don't want to use getter or setter but gives this example of acceptable code: &gt; Dog dog = new Dog("23kg"); &gt; int weight = dog.weight(); Isn't it a getter!? Anyway, the content of the article is very interesting but out of the scope of this thread : the author is really anti setter but my trait is mostly aimed to read-only properties anyway.
It was Pi-Hole. Apparently it has the entire domain blacklisted as default.
&gt; Further, I wanted to dispel any narrative that Laravel is a hack or poorly written. You know very well people are complaining about Laravel's architecture (which it imposes on its applications), which is *everything outside the method implementations* and not about the quality of the code *in the methods*. So you should measure very different things, like public interface complexity, presence of God classes, separation of responsibilities, modularity, leaky abstractions and so on. Not how many lines or nesting levels are there in a method.
It depends on what you are trying to build. Unless I'm building a basic Wordpress site (or similar) I will make a front end and an API. The front end is needed to give people a way to easily access the data within the API and provide a nice experience. To make it accessible via a Mobile App severely raises the barriers to entry: need correct phone make, need app installed, need good mobile connection, need decent enough understanding of how mobile phones, app stores and apps work. It also means I am beholden to the App store key holders to when and if I can release updates and to my app's user interface. Also there are big user interface issues associated with touch screens and mobile devices, accessibility for the differently abled is the most obvious. Also, consider mobile app adoption is decreasing and the average person is only actively using around 5-7 apps now. Plus the number of app variations you need to handle is way greater than maintaining a single front-end. Proper front-end and API design should mean you aren't always updating both your front end and API, if you are something isn't quite right.
I am going to assume that because you are setting the remote debugging port that this also works with CLI scripts executed via docker exec. If so it may be worth mentioning that, otherwise why not just use remote_connect_back which is significantly easier to setup. These videos illustrate one of the key shortcomings of Docker in my eyes, no easy way to get the host IP address without resorting to hacky workarounds. The solution you provide does not work as "$(ipconfig getifaddr en1)" does not always work, users may not be using the en1 interface (I'm currently using en0) or may not be using OSX at all. You can alternatively add the setting to the '~/.bashrc' and instruct every user to do the same for their environment in the readme, but this is still a workaround in my eyes. It feels like we are so close yet so far from a system where you can just distribute a docker-compose file and have it just work when someone types 'docker-compose up'. The videos themselves are pretty good, they could probably do with more explanation of what the problem you are trying to solve is before jumping into the solution. The Rundown section for each video is really nice, allowing me to review specifics of what you cover without having to click through random timestamps in the video to find the bit I want.
In a properly arranged framework it shouldn't be much a question. Your controller and model act as an API already. And it's only the result format that matters. In case you are using rich frontend, your code returns the data as JSON. in case it's a regular HTML, it renders exactly the same data into a template and then returns HTML. 
The future, let me look at my crystal ball real quick... It's the right tool for most websites beong created and there is a big market for it through frameworks like laravel and CMS like WordPress. Learn it and see if you like it
I, on the other hand, worked on many projects where a single action serves as an API endpoint and as a webpage (HTML response). The ADR pattern helps in this matter. I haven't used the adr pattern itself (don't like splitting actions in separate classes), but it's quite easy to compile an array/object response and choose if you will send it to a templating engine (to print HTML) or to a serializer (to write a json/xml/whatever) response.
No, If you are willing to put in the tiniest amount of effort to learn stuff. No. Php is the worst language there is for beginners. It will mess up your head for a good long time. Learn something else instead. Try Go. or Python if you want to work in a Dynamic language. But I would strongly suggest Go. I think there are a lot of job opportunities at good companies if you choose Go.
Yes, its a good practice but often more difficult to implement because of the Javascript bridging. Of course you could just interface your own HTTP API with PHP and then do templating in a classic way. I too think these days it makes more sense to just develop an API instead of a classic PHP website because the workload is the same. You can craft templates in PHP or you could do so in Javascript. Same if/else and loops.. But if you have to write in both, replicating the Javascript dynamics in PHP can be a annoying and slow you down. Imho, all one need is a good ORM and basic session management to craft virtually any application you want, while supporting any type of HTTP client in the future. I write most UI stuff in Javascript these days and only use PHP to read or write to the database and do authorization. So yeah.. i ask this myself each time. Why have all these over-the-top frameworks when you can achieve so much with just basic database I/O and modern Javascript? You just have to be consistent when developing your API. It should be as simple as possible so you can extent it without major refactoring. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Nothing specific to Laravel. Shared hosting can be awesome when you have ssh access, cron, PHP7+ and node.
Right. Thanks!
Thanks for the suggestions.
Hi there, is a shared need and I've been working on api-first approach all my professional career (4y now) I would recommend you lumen (https://lumen.laravel.com) a light version of laravel. We use it on production at work, and perform very well, cutting away all the templating helpers and useless stuff (if you just need api). Plus I am working myself on another approach to the same problem, for small projects, is sort of a Lumen built on top of Slim, but I would not recommend it for big projects https://github.com/vikkio88/slime
Thanks
This pretty much. While I'm personally in favor of smaller methods, there's some critical processes in libraries that literally get called 1000s of times, ever micro optimization here is welcome.
Laravel doesn't impose any architecture. If you believe it does, prove it.
Complexity is still higher in both cases and absolutely apples and oranges comparison because that is just one small part of Symfony compared against the entirety of Laravel.
Compare the two on code climate. Laravel still scores better. I'm sorry this is so troubling to you :)
So does Laravel.
One core member and you can find the contributors on GitHub.
I didn't include Symfony's dependencies. If you are having this much trouble understanding I can't help you. I compared Symfony's components to Laravel's components. (Illuminate organization on GitHub)
Still you have no idea what are you talking about. It is not the number of languages, but programming as a technology that makes you a professional. For you, programming is knowing a few commands and ability to put them in order to achieve a goal. So you're not a programmer at all. 
The difference is that Laravel ships all these features while Symfony does not. Laravel is heavily opionated on basically everything. I'm not saying it's bad, I'm just not a fan of it.
If you ask this question here everybody will say to use it, if you ask this question in /r/lolphp everybody will laugh and advice against php... What's your career? What do you want to be? A PHP developer or a programmer. I would say to use the tool for the job, but that's too generic nowadays. Programming principles are the same across multiple programming languages. PHP is a very easy language to learn, but that will produce shitty code if you don't have a basic programming foundation.
That's what I find interesting. **Laravel**: Core members: 1, Contributors: 377 **Symfony**: Core members: 15, Contributors: 1398 There's multiple conclusions you can draw from here, but what I really wonder: * Is it easier to maintain rules in a code base with 1 core member compared to 15? * Are there certain design decisions in Symfony that have contributed to the longer/more complex code because there was more expertise and thus decided that it was better to do it the way it was? I think that some frameworks (such as Symfony) benefit a lot from expertise. They have multiple core developers discussing solutions and giving feedback on pull requests. It's kind of like working on a project by yourself, never getting some real feedback or having reviews done. I can imagine that in Laravel, a lot of decisions did not have counter arguments, or PRs that get merged because there's nobody of a core team saying, "I think this is a bad idea because XYZ". I'm not saying this has a negative influence on Laravel, but I have the feeling that with 1 core contributor, there's nobody saying: "stop, this is a bad idea!" or "But what about this?".
I don't know why you're going around this thread and telling people they are "troubled" or what did you say in that other comment... "distressed"... over your marketing shenanigans. I mean when someone is reading their favorite subreddit for news and occasionally stumble onto your naive arrogance, it may provoke some of us to call you out on it. You're the Donald Trump of PHP framework makers. The fact you get feedback doesn't mean any one of us is shitting their pants and crying on their keyboards. It simply means we're not buying your B.S.
It comes with a lot of out of the box features people might not even want to use and there's boilerplate code even for a javascript framework present (Vue).
Laravel does not ship with a SINGLE template that contains Vue code. Not one. Laravel Elixir is simply configured to correctly compile vue components. Again, you don't know at all what you're talking about in regards to Laravel.
With the right architecture, you can have your cake and eat it too. Here's what I do: - I write my API as a set of objects I call "endpoints". They're normal objects, but they only take DTO ("data transfer object") for input or output. Or when I don't care for types in a given call, I may take arrays as input or output. - DTO implement an interface with two methods. Static method DTO::fromValue(array) produces an instance of the object from an array, or throws an exception. Instance method DTO-&gt;toValue() converts any DTO instance back to an array. - Using only arrays and value objects that can be converted to/from arrays, means I can seamlessly produce objects from $_GET/$_POST input, and convert results to arrays for JSON output. - Once you have your APIs as PHP objects, you can call them natively from your PHP controllers like any other object. They're just PHP objects after all. - With some reflection you can also expose those endpoint objects as JSON APIs over HTTP. No writing routes or dedicated code. Just a one-time dispatcher which you can reuse across your projects! This means you can call the *exact same APIs* both from your PHP controllers and your browser JavaScript. And when you update your API in any way, the update automatically is available to both. It makes everything very clear and you can mix and match JavaScript with server-side HTML depending on your needs, without having to wonder if you have exposed that API over HTTP or not. Of course, the only thing you need to be careful about is to not put anything in your endpoint objects that could cause security problems if a "malicious party" uses it. This is not hard, and is in fact a sign of good encapsulation of your service, but it may be unexpected for those used to writing PHP-only service objects for their controllers.
That's why I asked :)
From the documentation: &gt; While Laravel does not dictate which JavaScript or CSS pre-processors you use, it does provide a basic starting point using Bootstrap and Vue that will be helpful for many applications. By default, Laravel uses NPM to install both of these frontend packages. the "by default" implies that bootstrap and vue are some how going to be installed. For the fun of it I just ran &gt; composer create-project --prefer-dist laravel/laravel blog and guess what? I have a folder "resources/assets" where I can find references to requirejs, jquery and vue and even a file called "Example.vue".
Yes, those are setup to give you a head start if you want. Guess what? If you don't want them, you just delete that folder. No "out of the box" Laravel features require any of those dependencies.
I know I can just delete it, I just want to say that &gt; Laravel does not ship with a SINGLE template that contains Vue code. wasn't true. I rather not install something where I then have to manually delete all kinds of things. Once again, it's your framework and you can make all these choices the way you like but don't assume everyone agrees with it. You promoted an article here you wrote yourself which should show everyone how awesome Laravel and it's creator is. It doesn't make much sense for a lot of readers and you get mocked for it now. Short functions are usually good so that's great but there is more to frameworks than a few numbers which don't say anything on real life usage.
Sorry, I won't bother sharing any pesky real-life stats anymore.
So PHP is finally going to commit to true overloading?. The decision on this syntax is questionable though.. - The amount of annotation libraries that needs fixing - The amount of junior devs that ctrl-d that line thinking: lets clean this shit up. Or better yet, let me fix this for you in a prettier way: /** +overloaded */
Good catch. Though I don't think method overloading is the best design practice, sometimes it really is needed, in which case I think something like this could be okay (logical 'or' or '||'): function setValue(A $x or B $x, C $y, D $z or E $z) { //code... } function setValue(A $x || B $x, C $y, D $z || E $z) { //code... }
https://www.reddit.com/r/PHP/comments/5n51ip/new_method_overloading_capabilities_in_upcoming/dc8ocye/ The OP used a different character in one of the function names.
Laravel is fine (even if I'm avoiding it in my projects), but Taylor is quite something...
Micro-optimizations sounds as if it's irrelevant to performance, but it's how [SQLite sped itself up by 50%](https://web.archive.org/web/20160305085922/http://permalink.gmane.org/gmane.comp.db.sqlite.general/90549). So, it depends. PHP doesn't offer method inlining, which would would help a whole lot so we'd be able to keep our code readable *and* fast. 
A professional programmer should be able to learn any language and start solving problems with it. PHP is a fine choice to get started with, but I wouldn't say you should *focus* on it. You can use it to learn basic programming principles, if you like it you can stick with it, but there are dozens of other perfectly viable languages that will help you in a career of programming.
I'm a sucker for numeric comparisons. Which Laravel repo did you run `phploc` against? 
More: https://softwarepublico.gov.br/social/e-cidade
Same, I'm sceptical this is genuine. It seems odd that the PHP core devs would use a comment to denote an overloaded function. Edit: Didn't read far enough ahead to realise this is fake and the function names have characters that look the same but are technically different. Ignore me.
I can't test it right now, but try mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
Oh, yeah, I'm absolutely looking forward to an endless debate, where most of my arguments are answered like "you don't have to do what the Laravel documentation does", and "you don't have to use the components that Laravel comes with", because of course that's why we read docs and download frameworks. So we don't use them afterwards. Or if that fails "no, this is obviously good architecture, because I have a few big sites written in it and it works fine". Another evergreen response. Honestly, I would bother if I knew I'm somehow breaking the news to you where Laravel has issues, but I'm not. You know the large issues very well from thousands other conversations you've had here and and elsewhere online. You're just doing this to "win", and frankly I don't know why you're wasting your time, when you neither care to act on feedback, or learn from it. 
https://github.com/laravel/framework/tree/5.4/src/Illuminate
Nice. Do you recall which of the other FW repos you compared to?
Nobody in their right mind is going to download that. Put it on Github or something.
E-Cidade is the main project at my current work. The codebase has 13+ years, 30k+ files, 6k+ db tables, currently using CVS as VCS, running on PHP 5.3.* and 200 contributors went through this project. You can see a copy of the project here: http://gitlab.dbseller.com.br:8081/TimeNiteroi/ecidade_niteroi/ 
Not strictly in his question but the client side and server side are likely not able to share templates so you still need to update two things.
[alwaysdata](https://www.alwaysdata.com/en/features/) for one.
Sorry. http://gitlab.dbseller.com.br:8081/TimeNiteroi/ecidade_niteroi/
That's irrelevant. The idea is that your code is mostly an API already. The difference is really insignificant. You can easily switch between approaches. 
&gt;it is easier to get a website out than any other language. False. Python is even easier. Look up intergration with uwsgi and nginx...
I think it depends to what extent you wish to support clients with no js e.g. some crawlers and people with no script. Maybe accessibility will take a hit too (e.g. screen readers). Otherwise I'd say go for it. 
&gt; Or the fact that Laravel uses Traits in a preposterously incorrect way as an attempt at getting around single inheritance, and that because Laravel does it every single person making extensions/add-ons for Laravel thinks it's the right way to do it as well. I'm curious to hear more about this; I haven't heard this criticism before.
I'd say it's unfair to compare Symfony's bundles to anything in another framework, library, or application. The Symfony components are a closer representation of the actual framework elements, the bundles are an implementation specific to Symfony's application structure. If Taylor ran the comparison on the entire Symfony repo (Bundles, Bridges, and Components), it would definitely make an overall difference and would skew the numbers. Stick with the Components for this comparison.
/me nods Yes, you would need to `--exclude-names="*Test.php"` or some such -- and I only know that because I'm trying it for Radar now (and later for Aura v2 ;-). **UPDATE** For future reference, according to the intent "measure only the author's stats". [Aura web project v2](https://github.com/auraphp/Aura.Web_Project): $ composer create-project aura/web-project $ cd web-project $ rm -rf vendor/composer/ vendor/monolog/ vendor/psr/ $ phploc --names-exclude="*Test.php" . - Lines of code: 5507 - Longest method: 19 lines of code - Average method complexity: 1.68 - Maximum method complexity: 9.00 - Percentage of methods that are non-static: 99.78% (Full results at &lt;https://gist.github.com/pmjones/12c6e54d9941c162bedfe57d346ef43e&gt;.) The core [Radar ADR](https://github.com/radarphp/Radar.Adr) libraries: $ composer require radar/adr 1.x $ rm -rf vendor/composer/ vendor/container-interop/ vendor/psr/ $ phploc --names-exclude="*Test.php" . - Lines of code: 4241 - Longest method: 12 lines of code - Average method complexity: 1.64 - Maximum method complexity: 10.00 - Percentage of methods that are non-static: 97.22% (Full results at &lt;https://gist.github.com/pmjones/8df962c285a127fd26dc7a3aa88082a6&gt;.)
They are not based on cpanel. You have to install node yourself (or with this [script](https://github.com/antistatique/alwaysdata-utils) ). 
What do you do if you are working with a project like that?
Again, I'm sorry you find these stats unacceptable. Others (many others, in fact - see Twitter) find them interesting. Secondly, I very rarely post my own content here. I mainly comment. I think my comment to post ratio is pretty satisfactory.
&gt; Maybe the mods will have to be involved at some point, if this keeps going Do you have like a bat signal you use? Or maybe you text "release the hounds" to a special phone number?
Taylor, who cares? You don't have anything to prove to anybody. Don't keep this going, you're starting to sound like Trump. 
&gt; Again, I'm sorry you find these stats unacceptable. A single number is not "stats" as anyone with basic layman knowledge in statistics would tell you. Say like me in that parent comment. Additionally you're comparing apples and oranges. If these would have to be "stats", then you'd have to remove from Zend and Symfony, any kind of code that you have not yourself implemented, but outsourced to Symfony. Especially anything resembling a parser, validator or code generator, which would unfairly bump up the complexity of those frameworks, as those are components of high complexity. You'd have to also provide more comprehensive data, the way I already explained. Then we'd have "stats". 
Relevant quote from [Goodhart's Law](https://en.wikipedia.org/wiki/Goodhart's_law): &gt; When a measure becomes a target, it ceases to be a good measure.
Look for another job? Pray? Just having to guess what the project contains cause the gitlab repo page isn't loading completely so I assume there's a ton of files at the project root. That would be mission 1, move some of those files . All of those *00#.php files need to be removed assuming they are backup files. Implement some type of Page Controller because that many files in root is just plain ridiculousness. If there isn't documentation for the entire project, run phpDoc over it. Probably print out the database schema (and cry). After that it's pick a specific sub-system to work on. After I determine how I want templating/routing etc. Course that's just crazy talk because you should probably start over with clearly defined requirements. **edit** http://gitlab.dbseller.com.br:8081/TimeNiteroi/ecidade_niteroi/blob/master/agu1_aguacontrato.RPC.php if all the files are like this ... docs won't help anything.
Extending that class won't get you [much](https://laravel.com/api/5.3/Illuminate/Foundation/Application.html). If you have a quick read through it, you'll see that you get some basic bootstrapping. Path registrations, container resolutions, etc. &gt;you outsource many of the complex parts of your framework to Symfony components Could you also provide some links to these complex parts that are outsourced? I would be interested in reading them.
Does the run for Symfony include code that compiles the routes? 
&gt; Extending that class won't get you much. Woosh... &gt; Could you also provide some links to these complex parts that are outsourced? If only there existed some file, say like JSON or something, where dependencies are listed.
Symfony consists of many components which are totally optional for the framework and thus not loaded by default. If you are comparing Symfony code base to Laravel code base you need to compare them including their dependencies otherwise it does not make sense at all... (assuming these numbers are useful to compare anyway).
Like the other benchmarks, I've run this for Opulence, and got the following: &amp;nbsp; Average class length: 12 &amp;nbsp; Average class complexity: 3.96 &amp;nbsp; For reference, [here is a snapshot](http://imgur.com/a/WeBvW) of all the metrics.
&gt; Responding with random numbers which are entirely unrelated to the critique isn't helping. I think that is helping. The criticism often sounds like mysticism and /u/utotwel took a set of code quality tools he didn't write himself and provided numbers. I haven't read a formal criticism of modern laravel by it's detractors. I have read a lot of vague criticism though like "bad practices". &gt; The critique is around architecture, performance, poor abstractions and the poor design of specific core classes with 100+ methods, which are visible with the naked eye in the source, no stats required. Do you know of any good formal descriptions of these criticisms in detail? I'm only asking because I haven't seen them and would like to learn more.
But there are huge classes, e.g this one has +3000 lines https://github.com/laravel/framework/blob/5.3/src/Illuminate/Validation/Validator.php those +1000 https://github.com/laravel/framework/blob/5.3/src/Illuminate/Database/Connection.php https://github.com/laravel/framework/blob/5.3/src/Illuminate/Container/Container.php https://github.com/laravel/framework/blob/5.3/src/Illuminate/Http/Request.php https://github.com/laravel/framework/blob/5.3/src/Illuminate/Routing/Router.php https://github.com/laravel/framework/blob/5.3/src/Illuminate/Routing/Route.php https://github.com/laravel/framework/blob/5.3/src/Illuminate/Auth/SessionGuard.php etc Don't trust just in the mean, use box plot instead, the mean means nothing. You university statistic profesor will make you take again the course if he see this. Also the maintainer of phploc. Edit: big file added. 
&gt; If only there existed some file, say like JSON or something, where dependencies are listed. Now now; compose yourself. ;-)
I see none of these criticisms .... Not saying they don't exist just that I don't see them. I think he is a bit biased towards his own framework as most would be if they wrote their own framework. I see the question still not answered: Whats he trying to prove?
You don't seem to understand, *there is no such thing as bad publicity*. Otwell has milked social media from the beginning, that's how his substandard framework rose to popularity in the first place, and he's obviously under the impression it needs a reboot.
&gt; Now... I'm of the opinion that considering the PHP landscape, Laravel is... OK. It's not great, but I can't call it bad, because that's where WordPress is. Apples and oranges man. Wordpress is a CMS, a tool. A platform. Laravel is a framework.... Frameworks compared to CMS ... Apples compared to oranges. &gt; The WordPress maintainers may be unable to code themselves out of a paper bag, but they keep their mouth shut Wordpress is actually pretty secure for a "badly" written peace of software. The code might be horrid, but the security and constant release of fixes give it an inkling of credit in my eyes. &gt; Aside from Taylor coming off immature in these interactions, he comes off as ungrateful, as he's always indirectly attacking Symfony in those comparisons, which is the hand that feeds Laravel with essential components supporting its operation. I have never seen him do this. I mean, again, just because I don't see him do this doesn't mean it doesn't happen, how ever - A lot of framework developers would be biased towards their own software, so how does that make him immature? &gt; but then he keeps posting information where he casts Symfony in poor light Such as .... ???
Benchmark statistics have shown that Laravel is outclassed in performance time and time again. The numbers he posted are only half the story. If I have 10000 one method classes and one 10000 method class the average shows that I keep my classes small. He's not wrong, but he's not providing anything useful. It's the equivalent of saying that Joe is a better software developer than Jane because joe produces twice the SLOC. Too bad joes code is shit.
&gt; Apples and oranges man. Wordpress is a CMS, a tool. A platform. Laravel is a framework.... Frameworks compared to CMS ... Apples compared to oranges. I'm comparing the overall quality of two popular products, not comparing their *features*. Although if you start digging in you'll see WordPress has become a framework. People are using it for *everything*. If you tell me a submarine's navigation is written on top of WordPress, I wouldn't even blink. &gt; I have never seen him do this. You never see him do what? Literally every time he runs a benchmark, or runs stats like this or something, Symfony is *always there* as a product he tests against. And sure, there's a reason for this: Symfony is one of Laravel's competitors. But at the same time, the Laravel framework is almost a Symfony application itself (I mean, not literally, but it uses many key Symfony components). Say if I write some PHP extension in C, and I start comparing the quality of PHP core with my extension, how would that look? Kind of ridiculous, no?
&gt; I'm pretty sure Eloquent uses QueryBuilder under the hood. I'd complain more about `-&gt;union()` not even being usable, or how `-&gt;count()` silently removes `-&gt;distinct()` in `-&gt;distinct()-&gt;count()`. I'm sure it does, but this more became something I was aware of when I had to start typehinting builders that different repository methods were returning. 
I asked for links **specifically** to the parts of the code that are outsourced. Not the list of dependencies. Pulling in a dependency for a few methods in a few classes isn't the same as "complex parts outsourced".
Well accusations can be specific, like "Encouraging static access and senseless use of magic methods through Facades", "ActiveRecord", "God Application class" and so on. Laravel is also consistently *the slowest framework in every independent benchmark I've seen*. It's just that at some point it becomes tiring to repeat the same things over and over. Taylor knows what people complain about, but he doesn't care. It would indeed be better if he wouldn't try to come here and piss against the wind, but it's what he prefers.
Should I also cook dinner, open a nice bottle of wine and give you a blowjob?
This looks great! However, I still have to pass the DIC to my Kernel. The Kernel has the Controller as Dependency, but the Controller can only be created after the Kernel retrieves all the routes from all the plugins with the PluginManager (this happens in the bootstrap function). So I can't resolve the Container before creating the Kernel, so I can't inject it. I can only do this If I move most of my bootstrap function from the Kernel outside the Kernel, but then I have all this logic outside my Kernel..
When something is repetitive, you need to extract the repeating parts in a configurable library and reuse it. This is not specific to PHP, it's a skill you will acquire over time as a programmer. So take a step back, and think how you can eliminate repetition in your code. For example, what I do is I just write APIs that accept and return PHP arrays (or as JSON from browser JavaScript). The APIs have reflection capabilities where you can ask "what is the input this method accepts" or "what is the output this method returns". And I use this meta information to build forms automatically. For public page forms, this is not suitable, as you want to touch up the forms a bit, so while I use the same APIs, I build the forms by hand, which is fine, because they're used sparingly there. But for admin panels, intranet interfaces and so on, automatically built forms based on metadata is an excellent solution to the tediousness of form handling. Likewise on the database side. I'll skip how I do it, but I'll just mention a similar approach: ORMs, like Doctrine. 
No problem. Unlike many commenters, I am not trying to force everyone to totally agree with me, I just know what I think and why, and I'm fairly certain that the logic to my opinions is consistent, so I feel comfortable expressing it. I'd be interested in hear your opinions on the topic as well, if you'd care to share them?
What I mean is that these metrics measure specific things about the quality of the written code, and I don't ever recall anyone throwing shade at Laravel for those specific things. I have heard the stuff you mention above. And Laravel's performance + Eloquent driving me bonkers + the migraine-inducing docs is the whole reason why I don't use it. This post isn't going to make me use it, and it's not going to change the mind of anyone who thinks it's not that great as a framework, and it's not going to stop anyone who really likes it from using it. So... I dunno. Waste of all our time really.
I think this is the way to go. Design a clear API then you can build clients in JS for the web, Mobile, etc. Of course this works not for every case if your website is i.e. an resume or promotion page I would probably not build an API. You could checkout PSX (http://phpsx.org/) which is an API only framework. 
The future of PHP or your career future?
I think there is/was an RFC for multi types. It would follow the same syntax as multiple exceptions: function setValue(A|B|C|D $x) { }
Looks pretty cool! Is radarphp made by the same author (pmjones) as Aura.DI?
That looks pretty readable as well. I mean, really the only real thing that matters in an RFC like that is how readable the end result will be, because overloading in and of itself is not straight-forward in a casual code review. Perhaps it will make its way into core one day!
I guess i'm thinking in terms of practical use cases for Traits rather than their intended or 'proper' use. In Laravel it seems like Traits are used wherever the framework offers a piece of functionality that A) can be used in more than one context, and B) is mostly "behind the scenes" - doesn't require a lot of configuration. The `Queueable` trait is a great example - in most cases it just *works* without me having to inject a $queue object and interact with it. I don't really mind a certain amount of "magic", and in this case I think it's very useful.
Yet again, thanks for all the replies. I'll look into some frameworks and maybe even different languages altogether. Also, I think many are right -- I might just be getting burnt out on simple CRUD apps. I'd like to look more into Angular and/or React to try and create some Single-page apps. Thanks again, all. 
Multi type parameters is slightly different functionally from true overloading. For example something like this: function setValue(A $var) {} function setValue(B $var, string $other) {} Cannot be represented exactly, without some boilerplate to check you don't pass an A object with a string. Not that it really matters, most likely it would be better to use different function names anyway. 
I created a module [gfork](https://github.com/laggingreflex/gfork) to make exactly all of this a bit easier. It's for NodeJS/npm environment but it can easily work in PHP. Taking some commands from the article to show how it makes those tasks easier: Instead of git clone git@github.com:mattstauffer/general-congress-hotline.git you could just do gfork mattstauffer/general-congress-hotline The the article mentions: git remote add upstream https://github.com/StayWokeOrg/general-congress-hotline.git `gfork` automatically does this! It uses `src` name instead of `upstream` by default but you can change it as well. A few additional things that gfork does which I think are really useful, although probably more in NodeJS than PHP: * Manage a forks dir. By default gfork (or git clone) clones the repo in current directory. If you would rather keep all your forks in a separate directory, like `~/forks` then you can specify that as an option. `gfork -F ~/forks` And then use `--command` switch to "link" the fork in current repo. Again, I'm not really sure if PHP would benefit from this but in Node there's a command `npm link` which does exactly this, and it's super useful if you're working on a module that you wish to use in multiple projects - you can `npm link` the same module dir in all other projects. It also has lots of other little features that I think are useful too, like * Fetch a PR from upstream. Suppose you want to pull and checkout a PR someone has made on the upstream repo, github provides a way to do this: git fetch src pull/42/head:#42 with gfork it's `gfork . -H 42` Anyways I hope someone finds it useful. I did mainly create it for NodeJS because that's my stack but you'll find that it's more handy and useful with git and github overall. Improvements/suggestions always welcome.
If using a DOM parser, XPath is also very useful for locating elements.
Ye-Of-Many-Names, your comments about the way you architect always intrigue me but how this would come together in practice is a bit beyond my understanding. Reading up on DTO and the use cases is really interesting. Now you just need your own "framework" and catchy name for this new "pattern" haha.
How so? I only played with scrapy for a few days so I never got that far into it. 
I actually did a small contribution to its codebase since I used it quite a lot. And frankly it can really do 99% of what you can think of in the field of scraping web data. 
That looks pretty slick!
This is 99% what I've been researching for ages to do on a very large existing project. We have an existing REST api done with Tonic. The problem is (a) the code for it is crap and was written before I joined the project. The original dev is long gone. (b) Because of this, we constantly just call our own API with curl. It's almost cool, but then it's not when you're creating dozens of outbound HTTP requests for every page view. It's a performance nightmare. I'd sincerely like to flip the script and write a OO API that closely resembles the existing REST api and then re-write the REST api using this new library. Now while I don't think I would go as far as to use reflection to completely dynamically manage the REST API, -- an extremely thin layer would be excellent. I'd really love to see some of your code, or an example, or anything of exactly how you're implementing this alongside DBAL/ORM's (if you're using them) and your domain models. Because that's precisely where I get lost.
If you need a quick dice in I would suggest just trying out a bunch of framework tutorials. 
I only use APIs. In some rare cases, a set of the API returns views or fragments as needed. Most frameworks allow you to construct endpoints that take inputs and format outputs, which is all you need to be a traditional web API.
This package is pretty sweet: https://github.com/FriendsOfPHP/Goutte
https://www.amazon.com/PHP-Programming-Cookbook-Doug-Bierer-ebook/dp/B01BU1B7CC https://www.amazon.com/Modular-Programming-PHP-Branko-Ajzele/dp/1786462958/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1484089887&amp;sr=1-1&amp;keywords=modular+programming+with+php+7 Both of them are quite in-depth,well written.Second one is about design patterns AND the second half has a Symfony shop with detailed explanations.Not the usual lukewarm,boring, yet another PHP book.
If you need to appear like a real browser, look at webdriver. Or a standalone selenium server. Fairly easy to do via composer. If you just want fast scraping just use multi curl. 
Hey bud! I was wondering if you ever decided on anything. I'm currently going through this myself. Like you ... I've been looking around for a rock solid solution for a VERY long time. I do not trust docker containers in production. It just doesn't feel right at all. I actually started working on this once, and just kept getting this really weird feeling down in my gut, and lots of gas. Maybe I just had a bad burrito, maybe it was the universe telling me that docker wasn't for production. You decide. A while back we started separating out server persistence towards "immutable" servers. This website has a lot of info on the mantra: https://www.thoughtworks.com/insights/blog/rethinking-building-cloud-part-4-immutable-servers Of course, everything is a balancing act, and we do not take it to such extremes as they lay out: our servers definitely do share infrastructure (db servers, and EFS network shares), and we do not deploy a new set of servers every time we deploy a new version of our app. However, so far I really don't have any answers. I actually considered writing our own system using the EFS mount that all servers share -- just basically using plain text files for signaling and running that sh*t on a cron job. At my previous job, we used Ansible. But the system was a lot simpler there. Frankly, I just never really loved it, and still don't like it. It can be quite awkward, difficult to organize, and worst of all the way it is meant to be used (basically -- manually running the recipes when you need them) isn't really compatible with AUTOMATED deployments. Not to mention, yml sucks. Up until last week or so, I have honestly just been using clones of existing servers. I know, it's terrible. But it is what it is. Over the weekend, I finally sat down and wrote full configs for our server classes (web, db, etc) using CloudInit yml and a bunch of meticulously labeled bash scripts (think cfg/db/10_setup_some_software.sh). I then wrote a 1-liner to sync them to a S3 bucket and use: #include http://...mys3bucket/server/webserver.yml In AWS user data, which will kick off the CloudInit system to use those configs. Then, CloudInit does a bunch of basic stuff that it can handle on it's own (installing the most basic apt/yum pkgs, setting up initial users, their ssh keys, mount configs, etc). Then, CloudInit kicks off the chain of bash scripts that handle the rest. Of course .. this still has huge problems and downsides. We have no way to easily change the configurations after deployment. We have no easy way to push our software to production servers on updates. Right now, we are small enough that most of it is done via manually triggered pre-written rsync scripts. But I desperately want to change those out for a real system. Consul, as someone suggested below, looks pretty neat, but also looks like an overkill. I'm definitely going to dig deep into it though. In any event -- CloudInit is definitely going to stick around -- it DOES work nicely as a bootstrap mechanism and is supported by a large range of server providers (AWS, Vultr, just to name the two I use it with).
As soon as my front-end skills catch up (AngularJS namely), I'm definitely building my own app as a clear API-only backend. I've done some Symfony API dev and if you do it properly, Symfony API can be very easily configured and maintained...I love what I've seen so far. Unfortunately I seem to have more trouble learning Angular than any other language I've ever learned in the past.
Thats crazy expensive! :o
&gt; but that will produce shitty code if you don't have a basic programming foundation. You have no idea how many a week I look at shitty PHP code from other people.
Why not just log on to php.net? Just read the documentation. It goes from start to finish on what you need to do. A little known fact, if you type php.net/{insert function name} you can quickly land on the page about that particular function. Ex php.net/trim
This is why I hate applications with default passwords. You have to hunt down accounts and passwords they have default for. In many cases they're not well documented that a very important account, with admin level privilege, needs to be changed. They should make it a standard that every application, or device with a internet connection has to be shipped with all accounts completely locked and requiring password changes. It might make the product less user friendly, but it'll save a lot of embarrassment, trust, and dollar value. 
Download the EAP (Early Access Program) version in that case. https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program
Although you've pointed out some exceptions, the phrase "shared hosting" tends to lead people to Hostgator type arrangements where they have a cPanel server offering PHP5 and nothing else.
Beta version looks promising. 5am here so I'll give it a try tomorrow. Thanks yaazz.
If you have an open source project, you can apply for an [open source license](https://www.jetbrains.com/buy/opensource/)
It's like a built in pomodoro timer.
That would be an option but the project I work on doesn't meet all the requirements. It's a JS library which is pretty stable and doesn't get updated on regular basis. &gt; Your OS project has a website including either a regularly updated News section or links to social network account(s) where project updates are posted. So repo and a demo page is not enough :)
I'm pretty sure just a github page is enough (it is considered a social network of sorts). You should give it a shot anyway- worst-case scenario is they decline your application.
verbNoun or nounVerb? To CRUD or not to CRUD? Can REST be over RPC? Is MVC enough?
I see where you're coming from. My objection to this kind of usage of Traits isn't so much that it's "magic", moreso that it's not really the way it ends up working in practice. I mean, maybe for people who do agency work and mostly build websites for contract work it does, but I haven't done work like that in years. Basically the only kind of work I do now is for large companies or startups, and in both cases I'm working more on application design and development. In those scenarios, the ideal way you laid out works... for a while. But once it doesn't work *none* of it works. You need to undo it everywhere. Something like a `Queueable` trait is exactly what Traits are for, so I don't think the concept itself is bad, but the Trait needs to be completely stand-alone, and feature complete with no configuration per class to be "done right". Otherwise, in large apps, I always find it falling apart eventually.
After looking at most common implementations of dependency injection containers, they just seem like more fancy version of using globals. You take a container and you inject all the dependencies into that, then all your classes pull out what they need from that container. Isn't that basically the same thing as globals?
What country are you in? I'm in Australia and it's $20 USD a month per user and it goes down to $16 USD after a year. There is about 0 chance I will use it simply for the fact that it costs &gt; $300 a year. EDIT: Looks like it defaults to "for business". $9 per month is correct for individual.
Yes.
Nothing to do with the topic, but Facebooks iOS app has 18,000 classes. Anytime someone talks about classes and stats, that alarming figure comes to mind. As for the 'stats' in the post, I feel dumber after reading it. Averages? Really? Is there any actual meaning you can draw from that? The fact he thought it does, scares me. 
I write all my PHP in Sublime freehand. What benefits would I gain by using something like PHPStorm?
Is it even a new pattern? Feels so common sense, it's odd people don't do it already.
Phpstorm (and by extension, JetBrains) changed my life. I happily subscribed to it once I got tired of the evaluation song and dance. A useful Swiss Army knife of useful tools and plugins. What's that, a markdown editor? Cool. Oh look a Visual database interface? Check that. Hey look when I write SQL in my code it looks to that database connection to provide autocomplete and suggestions! That's kick ass. Hey look a plugin for interfacing with graph databases? Wicked! The diff engine and the scm integration is badass too. Hey look Jira interfacing! That's cool! Hey look a debugging interface, for PHP?! Sign me up! Oh my gawd look at that I can have like a hundred command prompts open when on windows without using command prompt?! WHERE HAVE YOU BEEN ALL MY LIFE. Deep code project analysis hooked up to the latest understanding and language references of PHP? Yes PLEASE help me get better at those php7 features! Take me with you! Seriously, $9/mo, It's practically stealing from JetBrains. It's too useful. 
Just don't write broken HTML, easy. Otherwise you can also use htmlpurifier to fix the html.
Even you weren't wrong about the price, refusing to spend $300/year on the IDE you're working on is a matter of misplaced priorities. How much unnecessary crap to you spend more &gt;300$ a year on?
Alright, don't laugh. I'm stealing my less than technical brother's 'parked' domain that he has had 0% interest in using. https://github.com/bradchesney79/2017-Debian-Jessie-Secure-WebApp-Server My main domain is still serving requests to nobody and all his friends. /sarcasm But, that is what I'm trying to do here. Some for teaching and some for easy spin up of proof of concept projects. Pull requests welcome, I might add.
How long does it take you to save $9 USD?
Have you tried [this](https://www.jetbrains.com/help/idea/2016.3/increasing-memory-heap.html)? Obviously this is for IntelliJ but they work in the same way
Shit, I'm down one feature then. 
Yeah its easy to throw the "just leave!" line in. In reality life is not that simple sadly.
So I'm ahead of the game already! I generally stayed away from things like PHPStorm because I was new and wanted to learn the fundamentals, but now I'm at the point where I'd like to start working on bigger projects. I suspect this would help with that. 
Yeah you're not the first to be confused about that. It's not very obvious. 
http://i.imgur.com/CReyprY.jpg
&gt; Any system admin (or hell, even developer) Wouldn't be using MongoDB at all, I have yet to come across a case in my career where there is a valid reason to use it over any of the well tried and tested databases 
&gt; This is why I hate applications with default passwords They didn't have one, by default MongoDB devs decided it was better to just leave it open and accessible by anyone
I love symfony but I hate it too. It's too big, they change many things, they add other ways (so franck do this way, Bill this way, etc.), sometimes this way is deprecated. And I feel... the time I won to code with SF, I lost it because I've to update my project every 3 months. So I want to find a light FW to create an API easely.
What do you use for your api?
You don't feel like SF is too big for juste an API? 
There are use cases when scraping your own data is the best method to achieve something.
I've used PhpStorm for 2 years and it's great. However I switched to Netbeans for PHP which might not be as polished but has all the features you wrote above and is free.
Password_hash/password_verify with a salt http://php.net/manual/en/function.password-verify.php
[removed]
Convert Twitter API Tweet entities, such as URLs, Hashtags and User Mentions, into their respective HTML entities: https://github.com/jedkirby/tweet-entity-linker This is my first leap into open source so every bit of feedback is appreciated and welcomed!
Those functions generate one-way hashes, so not applicable here, since they need to decrypt the password to plain text, no!?
PHP offers a complete interface / set of functions for using OpenSSL: http://php.net/manual/en/book.openssl.php Depending on how deep you are willing to dive into cryptography you can do a full fledged RSA/AES implementation with this to secure your data.
Why not use javascript to encrypt them on the front-end for better security?
Very true. I see encrypt and password in the same post and jumped to what I posted. My mistake!
https://openpgpjs.org/
Encrypting on the frontend with the public key, no problem. How about decrypting – if I don't store the private key in the frontend the decrypted password is sent across the web likewise, no?
Imagine that!
/r/vim
Thank you so much colshrapnel
Select the best tool to solve your specific problem, OP.
US$300/year = R$1000/year, which is well over a month's worth of minimum wage here in Brazil. Assuming some beginners work for minimum wage here, to work for over a month just to pay for your work tools would be insane.
What vulnerabilities are you thinking about? It has been in the news a few times the last years, but those were issues that don't affect you when using it from PHP. OpenSSL is basically a kind of library and your implementations vulnerability depends on how you actually code it.
Your best route here is some sort of key based store. Store the user's primary password hashed using password_hash/password_verify. Once they add a password, have them enter their password again (or store it locally using some local storage stuff, be careful with this). Encrypt their new password they're saving using their account password for your service as a key. and store the encrypted version within your database. Ideally you want to do what Kim Dot Com did an have no knowledge of any raw data, your service only handles encrypted data on the back end. The client does all the decrypting/encrypting on their own, you just verify their login.
&gt; for career development he has to be focused We strongly avoid hiring language-focused developers here where I work. Being a good programmer, understanding important architectural concepts, data structures and others are WAY more important than hiring someone who is a syntax expert and knows everything there is to know about PHP's idiosyncrasies. I don't care if you know that using function X is better than using function Y because at a very low level, they work differently and it saves me fractions of milliseconds at each call. I care about you being able to create an organized, well architectured and actually maintainable project. We do most of our work with PHP here. Yet, we strongly avoid PHP-only programmers. Specially, the "traditional" PHP programmers.
That's why I didn't downvote. While those functions are wrong for this post, they are (at least from the projects I know of) not used enough and should be advocated wherever possible! I still see too many MD5- and SHA1-based password storage solutions in the wild.
Hello I recommande PHP 7 for web Website. Several new feature for PHP 7. I propose some new feature in this link http://exam-lib.com/en/php-7-tutorial/
We have a fully separated frontend + backend team so if most content is described scattered around multiple json files with translations etc it's way easier to scrape the site and generate a full site search with it without having to combine data from various places.
`Form Tag starts with &lt;from&gt;` Silly, no they don't. Still, I agree. This was a surprisingly good read, especially for the fact that this is for beginners.
Maybe store using local-storage? And when the session is deleted you ask for the private-key and store it again? Nothing going to the server? It's dangerous because with XSS you can steal the private key, or other vulnerabilities. I'm working on a system like that, but I'm creating an extension to handle the client-side encryption to protect against that.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thanks maiorano84 I will definitely update it :-) 
Ah nice one, thanks for the link! Looks good!
&gt; If you see base64, or rot13, avoid those resources as you would do with your girlfriend's parents. Altho do keep in mind that the PEM format (used by private / public keys in lots of places, X.509 certs, etc) /are/ base64 encoded. I can't think of a legit reason to use rot13 but there are legit reasons to use base64 encoding.
For the curious, a link: https://github.com/j84/99ko/blob/master/index.php You can tell the author is not quite up to date with modern practices and conventions. Maybe not a PHP coder by nature?
That sounds terrible.
Well yeah the base64 encoded keys :) What I was trying to say is to avoid all Q&amp;A crypto sites. I have seen people using base64 encoding because the encoded text looks encrypted. 
I'd say just pick up a PHP7 compatible framework, and get to work with a random project if you are planning on learning. Google stuff as you go. Symfony 3 is PHP 7 compatible. What is your goal? If you can develop already, and have done PHP before (or any other similar language... or even ones that aren't all that similar) then you should be able to get up to speed very quickly.
This might be a noob/dumb question, but what is PhpStorm?
I make my own APIs via whatever framework is in use, then have a javascript-heavy frontend that calls services. For example, Symphony, Laravel, Kohana / CodeIgniter, Opulence, etc or even a custom PHP framework can expose an API. You can do it in Java or C# or Erlweb or whatever. I'm not sure you understand what "API" means. These are API documentation: * https://client.cdn77.com/support/api * https://stripe.com/docs/api What language (or framework) was used, is a project detail, not a design choice.
https://paragonie.com/blog/2016/12/everything-you-know-about-public-key-encryption-in-php-is-wrong When used properly it can be safe.
Please... http://pypl.github.io/PYPL.html http://spectrum.ieee.org/computing/software/the-2016-top-programming-languages
lxml is really nice too, it support xpath.
Yes, XPath is very useful indeed!
Try following the SOLID principle. If your code follows those rules, you have a good start.
The whole article and likely platform is a scam. please
As one of the resident encryption nerds, my immediate reflex is "this is a bad idea". But since you said it's [a university project](http://www.cryptofails.com/post/75204435608/write-crypto-code-dont-publish-it)... Look at how [defuse/php-encryption](https://github.com/defuse/php-encryption) implements its encryption. Also look at how [Zend\Crypt does its hybrid encryption](https://github.com/zendframework/zend-crypt/blob/master/doc/book/hybrid.md). This article on [cryptographic best practices](http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html) will come in handy (**for academic reasons only**; anyone looking to do serious cryptography is better served [by this version](https://gist.github.com/atoponce/07d8d4c833873be2f68c34f9afc5a78a)). Now decide: 1. Do you want to use symmetric encryption? 2. How are keys managed?
It is becoming more common to built APIs even for web only projects. In bigger projects it can be helpful to logically split data and also to make specific services available to other consumers with an clean interface. I wouldn't touch a framework like apigility. There are much more important challenges buried with api building and those frameworks won't help with that.
Follow-up: we decided to ditch the whole office365 service and just migrate emails to our own servers at liquidweb.
Hi gaurav_ch, can you update the status of this project? Did you used PHP?
That's strange, I have bad performances only when node_modules is parsed while editing JS, so I just ignore this folder for intellisense. Otherwise, on an OK machine with big symfony projects I had no issue.
Could someone with a good working experience with the Zend framework send me a PM? I've got a new project coming up that uses the framework and I could use some help. Thx.
An IDE for Php. It has very good autocompletion. Try it.
Since you're a Netbeans user, any chance you know the answer to my question [here](https://www.reddit.com/r/learnprogramming/comments/5mbgyb/netbeans_installed_the_darcula_theme_using_a_php/)? No one ended up responding and it's really irking me. 
I hear ya, I was trying to allude to the fact I didn't need to run yet another program for that type of functionality. Like I don't need to run phpstorm and conemu to do that which is why it's awesome haha I use something different though but can't remember the name right now, I think it's called "Commander" and it was excellent too (for Windows, I simply use Terminator when on Linux desktop) 
Are you the maintainer for the Regression library? I'm almost finished with the initial version of a math library of my own ([Fermat](https://github.com/JordanRL/Fermat)) although mine is a more general purpose math library. It does have a stats component though. Perhaps I should add this as a dependency.
I've definitely heard that Netbeans has evolved over the years since I've last used it. Netbeans was my first php ide I used many years ago. One of the biggest issues I had with it was its constant memory sucking tendencies and though the deep analysis was there it could often be extremely slow. Two features that turned me into phpstorm in the first place because I was getting tired of Netbeans slowness was the speed of the deep analysis suggestions (also the only ide I used at the time that could be taught how to use specific frameworks like Symfony) and I could run like 15 instances of it and not feel a hitch to my computers performance, which is handy in a web dev shoppe that manhandled 750+ sites on the regular 
Sure I'll take a look in a few minutes.
It's not a huge leap from 5.6 to 7 so you could go through a 5.6 book, then just read the release notes for 7 to catch up?
Start learning and using a framework.
I am. I'd caution you to keep your library tightly focused, since "Math" and "Statistics" are giant subjects with a lot of work to each step. It'd be nice to have a loose coalition of libraries that each focus on different aspects of the subjects instead of a handful of competing monoliths. It also makes it easier for us to set up dependencies on each other. For instance, I'd like to be able to depend on a package that provides the calculations for various probability distributions without having to pull in another regression package. If you want to expand your scope, it's easy to just draft another library. Getting the "complete" package would then be as easy as someone putting together a virtual package to depend on the best that the community has to offer. Since we're on the subject of math packages for PHP, there's one outstanding issue that I've been unable to solve. A package that properly addresses the various probability distributions would have to depend on a bunch of special math functions that cannot be implemented analytically. Things like the error function, gamma function, beta function, incomplete beta function, their inverses, and a few other things. Because these need numeric approximations, they're difficult to get right. I'd kill for PHP to support them natively, but a (polyfill) library would be the next best thing. Then we could really take off.
If you have an open source project that has recent updates, then you can apply for a Free Opensource license. https://www.jetbrains.com/buy/opensource/
I'm from Romania where the minimum wage is ~270 Euro, so you're right. The PhpStorm licence for individual customers(89 euro) will cost 1/3 from a salary that small.
It would break compatibility and be adopted much slower for no good reason. 
I would love it if you helped contributing to what I'm doing so far. I wrote something I called a [SeriesProvider](https://github.com/JordanRL/Fermat/blob/dev/src/Samsara/Fermat/Provider/SeriesProvider.php) that implements a generalized series evaluation engine. The main thrust of Fermat is that is provides a way to work with arbitrary precision math in PHP without worrying about things getting accidentally cast to native int or float types. Because of this, I had to have fall-back methods for sin, cos, tan, log, etc. It uses built-in functions wherever possible (where it shouldn't affect precision) but it has Maclaurin Series implementations for everything else. PHP does have a stats extension you can install through PECL, but it's entirely undocumented. I've had to read the C code for the extension to learn how to use it in my library. You can see my implementation of stats functions in the Providers/Stats namespace. Any feedback would be highly appreciated.
Run print_r on $contents before and after the utf8_encode() call.
file_get_contents doesn't seem to me like it's the right way to send an HTTP request to an API and this is probably why it's set to bool false. It means the file_get_contents failed. Look into [guzzle](http://docs.guzzlephp.org/en/latest/), this library will help you build requests from your application. Then use a Guzzle get or post depending on which API route you are using. This will give you proper access to the response and headers and will give meaningful errors instead of returning false. 
Not at all. I mean the app configurations, routing configurations, endpoint configurations, and doctrine make it all very maintainable (I always lean towards yaml). Obviously there are other options for API only backends, but I do enjoy the flexibility of symfony's business layer.
You should ask to Brazilian people or Portuguese speakers. Next time, use english in code. It will be more easy for everyone but the code looks like legacy php port it to a framework like symfony or laravel :P
It's a major version so it does not have to be compatible anyway. I'm also curious on why they didn't decide to use namespaces. Explanation can be found here: https://github.com/twigphp/Twig/issues/2108
No result on either. I also took a look at using cURL to make the request, setting up the following (most of this was copied from [here](http://codular.com/curl-with-php)): // Get cURL resource $curl = curl_init(); // Set some options - we are passing in a useragent too here curl_setopt_array($curl, array( CURLOPT_RETURNTRANSFER =&gt; 1, CURLOPT_URL =&gt; $tokenURL, CURLOPT_USERAGENT =&gt; 'Codular Sample cURL Request' )); // Send the request &amp; save response to $resp $resp = curl_exec($curl); // Close request to clear up some resources curl_close($curl); print_r($resp); var_dump($resp); I tried both print_r and var_dump so that I could see whatever came back, in whatever form. print_r came back with nothing and var_dump came back with: bool(false) It looks like cURL might be the easiest way to do this, but it does appear to be giving me the same or similar error to what I was getting before.
Really, thank you for sharing this, it's been a long time I was looking how to do parametric testing with phpunit, seems that, thanks to you, I found a way. Still not was I really do need, but this will greatly help me.
My first post was a joke. Here's the real answer: Echo takes as many arguments as you want. Echo also returns no value. Print accepts only one and returns a value of 1.
&gt; Echo also returns a value of 1. Print accepts only one and returns nothing. Actually echo returns nothing, print return 1.
Just like Silex and Symfony Framework which weren't tested/published :-)
It's too bad he doesn't see the utility in namespaces. I certainly find it a huge pain that Twig and PHPUnit throw everything in a global namespace. It makes IDE class autocompletion useless.
PHPUnit has both namespace support and non-namespace support. Perfect example of why Twig could have just gone with namespaces without breaking backwards compatability
Hey Scott, you mentioned this in the article: &gt;There is no way to reliably zero out memory buffers in PHP. Could you elaborate more on that?
I love that they do this. Otherwise I would still be using Notepad++
Why would it result in slower adoption? It's a change in the class names, not the Twig syntax itself. Most people probably only call the functions in a few places, and those that don't can surely switch _ for \ in the classes pretty quickly. 
The more in-depth answer is [here](http://stackoverflow.com/a/29331937/2224584). If the PHP interpreter makes a copy of a string, you can't do anything about it. And you can't force it to overwrite a string in-place (rather than a copy of the string). You can with libsodium. Just not with PHP itself.
&gt; Hypothetical newbie PHP developers in Brazil justify being frugal about buying an IDE. Programmers don't work for minimum wage. I'm in Romania where minimum wage is smaller than that. An entry level developer makes about 700-1000 euros. I'm also talking to some Australian guy bitching about $20 a month for a PHP IDE in a country where [PHP developers average $91.000 a year](https://www.adzuna.com.au/php-developer) and a Starbucks coffee is 5$. Nothing disappoints me more than programmers incapable of critical thinking.
It's just harder to set it up properly ( with public as the web root ). In general, things like git deployments and that sort of stuff are harder to set up. Also the support - which is one of the advantages of a shared host - usually won't help you much with custom applications. I have a couple laravel apps running on a siteground shared server and they straight up told me it wasn't going to be possible to run it ( it was ). But I did have ssh and I had to get in there and make all kind of bash aliases since the cli php version was to old by default. I also had to manually install composer via ftp. I do all my deployments with rocketeer on those sites. 
Nothing is deprecated 2.0 to 3.0 (yet). [The deprecations from 1.0 to 2.0 are here.](http://twig.sensiolabs.org/doc/1.x/deprecated.html)
You will have this with any framework basically. In fact you should not have experienced any issue going from 2.6 to 2.8 with it since it doesn't (shouldn't) have BC breaks. A guide is available on how to update from 2.8 to 3.0 and from there on to 3.1 and 3.2 everything is backwards compatible again. Just so you know, upgrading isn't required by anyone other than yourself.
Looks like certificate issues. I'm getting back the following: int(77) string(125) "error setting certificate verify locations: CAfile: /ECOM/usr/local/php/5.6.13/share/curl/curl-ca-bundle.crt CApath: none" And after some looking around for that error, it looks like the location of the certificates is inaccessible to the files that are looking it up. I'll have to talk to one of our server guys about how to fix that then. Thanks for the help.
I'd love to see libsodium make it into the PHP core. I truly hope that it does. I'm using defuse/php-encryption in a couple of projects at the moment. Will Sodium_Compat ever replace the defuse project at all? I know they're different projects, but since you're associated with both, I'm just curious if you'll decide one is more important than the other and focus on that (likely Sodium_Compat).
I'm running symfony 2.8 ltr release, and doing composer update yesterday it automatically upgraded to twig 2.0. My website broke, I searched the error and came upon a pull request. Applied it manually , and got another error. Seems like my code that worked fine in twig 1 breaks in 2. I'm pretty sure I found that code / pattern on the symfony website or on a blog on how to do form collections with js prototype thing. So if you're running symfony 2, watch out. 
Thank you for all the recommendations and the advice about the new interface. I'll let you know if I stumble upon something I cannot solve myself but with what you wrote it should be smooth sailing. :) And yes, the biggest purpose of the library is to provide a very simple interface for a singular purpose. Experienced statisticians will use your library directly, those who use just the TrendCalculator can still dip their toes into it by accessing the underlying data and poking around. Enjoy your weekend whatever you're going to be doing.
&gt; Benchmark statistics have shown that Laravel is outclassed in performance time and time again. &gt; Proof?
Thankyou for this thought out answer
This looks like a terrible idea
http://blog.a-way-out.net/blog/2015/03/27/php-framework-benchmark/ https://medium.com/@asked_io/php-mvc-framework-showdown-7-0-performance-ba0ed09c1f54#.u38tgnbeu Here's my first two google results. These seem to be the most recent but are getting dated, as they're still on the LTS. If they're not satisfactory I'm sure he'd welcome a pull request. If you can find something that proves otherwise, and is more recent, go ahead.
I meant to reply to you, not myself. I'm on mobile and it's a PTA.
Yeah, you just need a bunch of `class_alias` calls. PHP-Parser does (or at least did) the same thing, I believe.
I mean if it requires PHP 7, it's already breaking compatibility.
There is also GRASP patterns, Law of Demeter and so on. &gt; If your code follows those rules One note is SOLID is mostly an idea, not some kind of rules. You can't just follow them, you must think and understand this ideas. For example SRP is not so obvious in real life and it's really hard to follow this rule without understanding of simple things like "what is responsibility", "why something changes" and so on.
&gt; Any tutorials on this or the best practices in using PHP in a good programming structure with OOP. There is no good books for PHP, but you can try to read something like this: - https://www.amazon.com/dp/0672330164/?tag=stackoverfl08-20 - https://www.amazon.com/dp/0136300707/?tag=stackoverfl08-20 &gt; to be changeable in the future and so I can use the same code for other projects. Why can't we just change code? Because we can break it. Why we break code? Because of high coupling. How can we reduce it? We can think more on how to split code over independent units. How can we achieve that? Write more unit tests which will line boundaries of your units. TDD for example may help you alot. This also allow you to experiment with code much more often. 
Bingo
I would be willing to bet $200 laravel is not configured correctly. Serious. Secondly, why are you using PHP 5.6?
I don't see anywhere what it actually does or why I should be interested. 
That's all fine and great, I'm just (or was attempting to) responding to the question I was asked. Secondly, I'm not using anything. Those were the first results that came up. If you have a problem with the results you could submit a pull request. They've sat there uncontested for a while and if you're so sure then it should be simple to dispel the notion that laravel performs poorly. 
As a TPM/Dev, I'm horrendously disgusted by this...
It's a fair point, but I don't think it's a big issue. This is one change, your 100 dependencies aren't all making big changes. And given it's a major update, it already has *some* breaking changes, which are gonna take you a few minutes to check anyway. 
I was in your shoes some years back. It seemed like everything was CRUD. The applications, languages, and companies changed over time, but it was still somehow CRUD and it was getting _boring_. Most application development work is in building CRUD apps. There's a tremendous amount of value to be had for businesses by just organizing the data. Imagine trying to run the purchasing for a distribution center by passing around versioned copies of some spreadsheet. Businesses really do things like that, so just having some system to centralize it is huge. The digitization of data that you get that way is also a prerequisite for doing more interesting things in development. Most interesting problems are driven by data of some sort; it's hard for them to exist in a vacuum. If you stay with Web development, CRUD will be your faithful companion. Sorry. There is also more to learn in a programming career than I think could be learned in a lifetime. Start by studying some basic computer science. I recommend getting [Introduction to Algorithms](https://en.wikipedia.org/wiki/Introduction_to_Algorithms). It's a fantastic book that I keep reopening. After that, pick a direction that sounds interesting and start learning about it. You could learn about how physics engines are implemented, how 2D or 3D graphics are handled, dip your toes into Machine Learning or Natural Language processing, or perhaps learn how parsers work for formal languages. Dive deep into how effective ORMs work. There's enough stuff here to keep you busy for decades. The best part of this is that the concepts are not bound to language. Learn them in whatever language you're most comfortable with. The ideas will carry with you. As for the monotony of your daily grind, make use of libraries and a framework. For banal stuff like what you've described, chances are very good that someone out there has found ways to lessen the pain. You don't have to write your own reusable code to solve many of these problems. Other people have done the work for you and will do the work of maintaining that code for you into the future.
Op your problem is you're marketing your product to the wrong crowd. Do what WIX is doing, cater to people that don't know anything
[removed]
Most of your pros and cons are just incomparable in importance and simply ridiculous. - Dude, it is not underscores that make your code messy. It is the code *structure and architecture* that makes, or makes not your code messy. With a good IDE you don't care for the function names at all - you just start typing and get the hints. - If you think that modular system for PHP that allows to add only modules that you need (bcmath) simply by uncommenting it in php.ini is a "contra" - well, if you want an example of a heavy bias and prejudice - you have it. - Dunno what you think of mysqli, but neither Symfony or Laravel are using it, and when using a framework, you never write a single raw database api call anyway, so the underlying database driver shouldn't be your concern at all. - Do you *really* think that Trello is hosted via cpanel/plesk? Means your "pros and cons" are ultimately irrelevant.
Windows 7 somehow cannot recognize PHP 7 commands like type hinting (I hope I got that right, still learning). It works fine on my home laptop (runnung Ubuntu 16.10) though. Any insight on what I have missed? Thank you.
No it's not. It will still run fine if you use PHP 7. If you don't use PHP 7, composer won't let you install a version that's not compatible, hence dependencies are not breaking. Backwards Incompatible means that after an upgrade your code might break.
What's Your favorite image manipulation library for php? I am thinking about using Imagine but it looks like not actively developed anymore 
&gt; Pros of Python: I would say that with PHP 7, the syntax advantage of Python isn't huge. And composer is honestly great; I don't think pip has any advantages whatsoever. And PHP has a pretty deep ecosystem too. If you *need* something like numpy, then you should probably be using Python (or Julia, R, etc.), not PHP. But you almost certainly don't, and otherwise, none of those advantages seem compelling to me. Conversely: &gt; Cons of Python: Both languages have good support for talking to SQL databases. But `mysqli` is old an little used; there's much better choices. :) And if you're looking at a "Trello sized app", I'm not sure it matters much how easy it is to host it with cpanel! So I don't really see either drawback as being meaningful. &gt; Pros of PHP: Both languages are old but under active development. Saying PHP is more "time tested and robust" is nonsense; Python is older than a lot of the developers using it. I mean, you mention Laravel as an example, but Django is over twice as old as Laravel; how does this make PHP the mature option? (Also, CodeIgniter isn't a great example of a reason to *pick* PHP...) And again, I don't think PHP is any easier than Python to host in a *production* capacity. Neither argument is compelling to me. &gt; Cons of PHP Again, modern PHP syntax is pretty solid, and I have no idea what the comment about underscores is meant to mean; if this is your way of suggesting the PHP standard lib is confusing then sure, but have you seen Pythons? And while PHP namespaces aren't *amazing*, they're easy to use; you shouldn't have any problems figuring out the proper folder structure. Yes, you'll need the right extensions (for opcache, bcmath, whatever), but they're trivial to get. Debugging is as easy with PHP as Python; maybe better. And Python is terrible at multitasking. &gt; Overall, I think python has more pros, whereas php has more cons, so my majority vote goes to the python side of my mind. However, I'd still like to know what most devs think here. I don't think you've identified any particular pros or cons, in large part because you don't seem to be very familiar with either language, and haven't really identified what your needs are. They're both very mature languages with large, very well regarded frameworks, a deep ecosystem of libraries, moderately acceptable syntax, and a few quirks. Both language are totally suitable for writing a generic web app. Pick the one you want. If you like significant white space, or if you love Flask, or you love SQLAlchemy, or if you're more familiar with Python (or want to become more familiar), or if you love languages with strong but dynamic typing, then go with Python. If you dislike significant white space, or if you love Laravel, or you love Doctrine, or if you're more familiar with PHP (or want to become more familiar), or if you love languages with optional static typing, then go with PHP. If neither one really describes you, flip a coin. But picking one because you heard pip is better than composer is...not a good plan. Because 1) it isn't and 2) it wouldn't matter if it was; it's a complete irrelevancy. Focus on stuff that matters.
https://www.copypastamakeyoufasta.com/
I guess that make good sense. Any good book you can recommend?
PHP, for this simple reason: if you're looking for people to maintain the code, you'll have more luck finding those proficient in PHP than in Python.
https://hub.github.com/ - hub is a command-line wrapper for git
&gt;Oh /r/php trolls, never change. Crying "troll" does not hold as much weight as it did here any more. Try some other tactics... &gt;you could at least spell my name correctly... Dude. You are not that important. And you are irritating. Take a hint and get over it..
Most frameworks' idea of "good structured code" is having like a dozen folders where you categorize your classes horizontally (i.e. by class type) instead of vertically (by component/module), and then you copy paste snippets from the manual to get things going. It's... a way, but it won't teach you anything. In fact maybe it teaches you some very wrong lessons.
[removed]
Damn! Enviroment::getCacheFilename() was removed I missed that one. Arg! Whats the best way for clearing the cache on a template by template basis now. I was using the following that worked just fine: public function clearCacheFiles($path, $clearAll = false) { $cacheFileName = $this-&gt;environment-&gt;getCacheFilename($path); $cacheDirectory = $this-&gt;cacheEnabled(); if ($cacheDirectory !== false) { if ($clearAll === true) { array_map('unlink', glob($cacheDirectory."/*/*")); } if (\file_exists($cacheFileName)) { unlink($cacheFileName); } } } 
But just out of curiosity, did you have any depreciation notices before upgrading? It is strange that Symfony updates you to 2.0 with this kind of bc break regardless of any depreciation notices. Might want to file a bug report on the Symfony site.
The main difference is that GET is supposed to be &lt;em&gt;idempotent&lt;/em&gt;. If someone requests a method with a query string, it shouldn't change any data server side or have other side effects. See &lt;http://restcookbook.com/HTTP%20Methods/idempotency/&gt; Plus, anyone can inspect the contents of your HTTP Request in their browser's dev tools so neither GET or POST are really "secure". HTTPS to keep 3rd parties from snooping but other than that you can't make your app secure just by picking POST over GET
I appreciate critics; they keep society honest and give worthwhile feedback. But criticism isn't what they're offering. /u/jvc_coder transitioned from [struggling-with-PHP to PHP-hater](https://www.reddit.com/r/PHP/comments/4jlbtc/when_you_feel_like_you_are_the_only_developer_who/d38mn88/) over the years. They're not here to contribute constructively, but to bring others down. And they're not alone in that. I don't believe it's inherently unprofessional to stand up to would-be bullies (in fact, I believe it's a moral imperative to do so). If we disagree here, there isn't much of a conversation to have about it, but if you have any specific suggestions for how to conduct oneself when doing so, I'm all ears.
&gt; It has very good autocompletion. Understatement of the year &gt; Try it. Yep.
Fixed. Thanks for your feedback.
Is it just for PHP?
There are no such things as "PHP 7 commands". PHP is a program that executes your scripts. You can install that program on Windows or Ubuntu. You can install PHP 5.6, or PHP 7.0 or other versions. You can write a script that uses things that only work in PHP 7. If you then install PHP 5.* in Windows and try to run it, it won't work. If you mean that in your editor things get confusing, it might have to do with your editor. If you mean you type in some terminal (Command Line Interface) and you somehow (php -a for example) type your things in there, that could also have to do with how the terminal in Windows sometimes sucks.
Glide is built upon Intervention: http://image.intervention.io/ Does that suit your needs?
This is why gay is not OK.
Basically don't call him a dick (even if he was) or less intelligent (even if he is). You can take the high road and still stand up to trolls. Besides, he got downvoted into oblivion anyways so ignoring also works. For a normal anonymous redditors I'd say call a dick a dick, but you are attached to a brand which is why I felt it was different. Anywho, thanks for the article!
I agree. Yes he posts links to his blog, which is honestly fine by me, but he also posts elsewhere often enough: http://www.redective.com/?r=e&amp;a=search&amp;s=user&amp;t=redective&amp;q=sarciszewski Check out the list of subreddits once it's done pulling information. (Redective was made by me in case anyone was wondering)
&gt; I hesitated to even write this post because I think PHP’s unique obsession with benchmarking on this level is really, really silly. He's perpetuating this by continually posting bench-marking stats. If he thinks they really do not matter, then refrain from posting them. &gt; Never miss a story from Taylor Otwell, when you sign up for Medium. Don't worry, they all make their way here eventually.
Old news: https://www.techempower.com/benchmarks/ Older news: http://paul-m-jones.com/archives/category/programming/benchmarks **UPDATE:** Relevant quote from &lt;http://paul-m-jones.com/archives/5863&gt; -- &gt; There’s a lot of emotion and drama associated with benchmarking. The subjects that come in “first place” too often point to it as SCIENCE PROVES WE ARE BEST and the subjects that come in “last place” respond with variations of THIS IS STUPID AND PROVES NOTHING. That is, until the last-placers run their own benchmarks where they come in first, and suddenly it’s a great marketing point. 
Great, Laravel bootstrap is faster than other frameworks. Now how about an actual real world example? These kind of benchmarks are entirely useless when you're not actually using anything from the framework. Why not do something like fetching and displaying 20 comments (from a database of 1000) via Eloquent?
Cheers!
I am a bully and a troll? By the way, I am not the one who started calling names...Everyone can see who is bullying..
looks interesting. thanks!
The code for the Laravel test is using an old file structure blade syntax (from 4.x maybe?)
Laravel doesn't use PHP's native sessions because they are annoying for unit testing and includes drivers for cookie based, memcached, redis, database, etc. So, no, it doesn't serialize page execution.
PHP doesn't serialize session access because they're "annoying", but because not doing so would lead to race conditions. Of course you can use sessions in a limited way where race conditions don't matter. I.e. throw in user id and auth level and avoid pretty much anything else. But that should be something you opt into with your full knowledge. I don't understand your logic with these defaults. Why not start the session when it's actually used for something? 
I'm talking about serializing sessions being annoying. I'm talking about emitting headers out to the browser, which is annoying in an environment where I'm trying to test the request / response cycle.
&gt; Why does he start a session if it's not used for something? Because 95% of applications use sessions in some way so it makes sense to start them to remove that hurdle. You can disable them easily as he showed in the article if you know you don't need them.
&gt; Because 95% of applications use sessions in some way so it makes sense to start them to remove that hurdle. You can start a session on first use, so what exactly is the "hurdle" in not starting it until it's needed?
Should note the session middleware is only enabled by default in the web middleware group. If you're building a stateless Laravel application you will typically use the api.php route file which does not have anything related to sessions enabled. 
I don't see any other lead developers of other frameworks getting involved and communicating with the community as much as /u/utotwel does. I don't see your point?
It doe's seem like they spam a lot of posts because I'm on multiple subreddits I seem to get the same post everywhere, that being said every now and again they post something interesting but a lot of it is basic obvious security stuff that any seasoned developer would know anyway. I just wish they would update their design its awful, looks like they went back to the 1990's on the way back machine and copied someone else's design.
What you are describing is a business model. The only question you need to ask is, is it worth it? Fortunes are built on being able to answer that correctly.
&gt; it has just 4 percent market share worldwide Erm yeah okay? 4% where? on smart TV's? running computer kernels? &gt; The CodeFights reports CodeFights.... sounds a legitimate source..... sounds really cool if you're 14 years old
Laravel is considered slow because the percentage of junior and less skilled developers using it is lot more higher than with Symfony or Zend and the apps they create are just plain slow because of bad code..a Junior dev can hardly start with Zend or Symfony..experienced devs avoid slowness issues just by having clean code and applying some best practices..so the framework speed does not really matter
Performance matters. PHP 7's perf boost meant you could serve more users with the same hardware, or serve the same number with less hardware.
You can filter it through http://php.net/manual/en/function.filter-input.php
&gt; Why not do something like fetching and displaying 20 comments (from a database of 1000) via Eloquent? I always think of Eloquent as re-usable library that ships with Laravel. You can use whatever orm/dbal you want. The last http service I built doesn't actually have persistent storage, so this metric would be entirely useless for it. However the bootstrap speed of your framework is something that is comparable between frameworks and between all applications.
&gt; http://php.net/manual/en/function.filter-input.php So, I believe what you're saying is that this would be an acceptable version of the above script? &lt;?php $to = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL); $subject = 'Subject'; $message = filter_var($_POST['message'], FILTER_SANITIZE_STRING); $headers = 'From: noreply@example.com' . "\r\n" . 'Reply-To: webmaster@example.com'; mail($to, $subject, $message, $headers); Edit: You can downvote my attempt to apply the help/response I received to my original script, but unfortunately that does not help me implement safe code or understand what I'm doing wrong. 
Right, but 2.0 seems to offer nothing at all in terms of features. Just a bunch of stuff breaks and presumably support for 1.x ends.
&gt; your 100 dependencies aren't all making big changes No, they just break in random minor versions for no apparent reason sending me on a wild goose chase. Much better.
"I think PHP’s unique obsession with benchmarking on this level is really, really silly." But I'm Taylor Otwell, so I'm going to subject myself to (entirely worthy) butt-hurt anyway.
If you are used to using apache mods like pagespeed, rewrite etc you'll miss those options in nginx
Sorry, my intention was not to bash him or his posts, it was just a tongue-in-cheek reference to all of the shit-storm-producing Laravel benchmark posts as of late. He has one-up on me, he has a framework, it's widely adopted, and it seems to meet people's needs. I just don't understand his masochist nature.
hence why "he has a framework, it's widely adopted, and it seems to meet people's needs" and you do not
Blind use of “sanitisation” is misguided and merely mangles user input. What do you need to “protect”, and why?
It isn't really that simple. One common abuse of using a script like this is when spammers post to your form to send spam. Just validating the email address and message fields wont prevent that. So in addition to sanitizing the fields themselves you need to verify that this bit of code was requested legitimately. 
Sorry, I don't read books, because they always ruin the movie. :P I haven't read any PHP books, I do most of my learning through Google, documentation, reddit, tutorials, hands-on etc. Just make sure when you're searching google, to filter results within the last year or so, lots of outdated stuff on the net. Amazon should be able to help you find a worthwhile book. 
Framework benchmarks are definitely the biggest pissing contests in this industry. It doesn't matter. Know what does matter? How easy it is to use a framework, and how productive you are with one. I can just throw another server at a slow framework, and that's cheaper than spending longer writing the same features in a framework that's fast but poorly designed.
Hum honesty, either you were doing it wrong from the start or you're talking out of your arse. Symfony is the best of the bigger frameworks when it comes to backwards compatibility.
You can't, really. Having an openly-available form that lets you send anonymous email to arbitrary addresses is inevitably going to be abused.
The way that you mail the messages isn't an issue, so `mail` is no less appropriate to your purposes now than it is elsewhere. The fact is, you have a form that sends email exposed to arbitrary users. It'll get spammed, no matter how senseless the submissions are. You want to put a captcha on that or find some other way to make sure a human is on the other end of the connection. Captchas have the best detection rate, but are a pain for users. If you're OK with maybe letting some things slip through, one trick is to include a field on the form that you hide on page load with JS or declare as a hidden field, so real users never see it. If it comes back with a value, you've got a bot.
Maybe run the message body through `htmlentities`? Depending on your mail-reading app, you could get sent some malicious code embedded in the message body.
Came to the same conclusion, and googled this: https://www.reddit.com/r/reddit.com/comments/6ewgt/reddit_markdown_primer_or_how_do_you_do_all_that/c03nik6 Already edited with four spaces instead of ``` codeblocks.
Well, you would want to validate on the front end with JS to make sure all fields are filled out. However, I would probably check to see that all $_POST variables are set before beginning the mail script.
The thing is he correct. PHP's gradual learning curve invites a lot of shit developers. Do you think reddit renders an entire new page using Python or whatever language they use every time a user visits a page? Of course not it is rendered with entry points for partials for your username etc in the heading.
This is a major version release. 
There are plenty of PHP jobs out there. PHP is a good language, it is easy to learn, there are a lot of bad PHP developers out there which gives it a bad name. Personally, if I were a new programmer would learn JavaScript because the NPM ecosystem is really good and it runs on the front and backend. Out-of-the-box Google's V8 JavaScript engine is more performant than PHP for almost every task out there. I spend most of my time developing and using PHP but I find myself more and more using JavaScript and Node.JS especially for building high-performance, high-traffic APIs. I actually use the two together often, Node.JS to build an API and PHP with Laravel as for the presentation layer.
Ehm.... NO. Front-end validation is for user experience. Not for real validation. Anyone can post whatever they want without being held back by JS. Curl, disabling JS, etc, etc... Never, ever trust user-input. Even when you've validated everything client-side in JS. 
So turn them off if you don't need them. It's literally 1 line to comment out in config/app.php But the majority of people do need them so its a smart default to have enabled.
Thanks for putting so much effort into making PHP secure :)
I think you're confusing communicating with marketing
I use Phalcon for APIs due to being 10 times faster if not more than Laravel, Slim, or Symfony Hello Worlds. I am glad Laravel is making progress towards benchmark speeds. Always been something that needed addressing. 
Completely irrelevant comment. The same slowness due to experience could be applied to any framework. Zend has always been a beast, no matter who was on it. Magento using that framework is a real world example of a beast from day one. 
I understand and agree but making something even faster than it comes out of the box is part of the fun I'm having :)
Well as long as you are having fun! Which everyone should be doing! Rock on 
That's literally what i said: date($format, strtotime($dateTimeString)) would do the job. RTFM: http://php.net/manual/en/function.date.php That's the same as your date('YmdHis')
haha, nice
Some things can't be cached, like Facebook, it has billions of users, each one has it's own timeline, friends and stuff. You can't cache the whole page, you can only cache parts of it.
Apparently the 3rd edition of Smashing Wordpress is riddled with errors so I might not get it.
Is there going to be a new "Laravel vs Symphony benchmark" post every day, gee?
From yours and mine previous comments about laravel performance, I was remembering wondering if it had to do with `__call`'s and `method_exists`. Those two are specially true with Eloquent. 
I think a better benchmark is to see how fast you can actually setup and make something useful with a framework, rather than speed of the underlying parts. I say that because its usually a bad practice to optimize too early, when you have not really even figured out what your app needs yet. Its nice to be able to get a good app going and then analyze what resources it really needs, and then abstract out those parts to make it run as fast as it needs to. None of the major frameworks are _that_slow_ for at least 80% of what most people are using them for. So don't worry about it, go make some cool stuff then come back and the community can help you make it faster.
Advantages over guzzle? Not that I like guzzle, or any http abstraction, just use curl. Curl is as simple, as straight forward as it gets, abstracting it, is making it more complicated, for reasons you might or might not need. You get async with multi curl and callback functions. It's like someone making a wget framework. But your framework looks cool, I've been playing with webdriver with chrome/Firefox which is also pretty nice. Sorta expensive for scraping but the full emulation is cool. You can use a digitalocean droplet to mess around with stand alone headless selenium setups. 
Start a php project. When you don't know how to do something, google it. More fun and you'll learn faster. 
so its only 70% slower than 90%? 
&gt; Advantages over guzzle No advantages. The library is more clean, more low level, ready for being a core of any rest api clients and other types of clients. It's not a "yet another http client". It's a clean and flexible psr-7 client.
Bitcoin arbitrage prototype. C++ would be ideal. +17% annualized return over the market edit: wording
You can use a nonce to eliminate the low hanging fruit but generally I set a token in a session variable on the calling form, then verify the token in the mailing script. Most of my routines that send mail either require the user to be logged in or send mail to a fixed address or have a body that is not supplied by the form (edit: so I generally never put myself in the situation the OP is describing but If I was in that situation I would have my pages that are allowed to request this type of mailing set an auth token and store that in session, somoene could pick that apart using curl but it would require them to study my site and tailor a solution specifically for it).
&gt; Yes, I don't want to blindly use sanitation and mangle my code. I have been told that simply posting from a form to my PHP script is incorrect and unsafe, and that I should protect the endpoint PHP script This is generally correct, but it's also context-sensitive. In your case, email largely doesn't have the same potential security issues as e.g. HTML (at least if you send as `text/plain`), but the script as you have it is just an open spam relay. That's a design issue though: you can't accept a wildcard destination and message and *not* create that. You need to strongly consider the goals of your task so that you can determine the right restrictions to apply. Once you know those, swing by again if you're having trouble with implementation.
It is okay to use all kinds of stuff if you know WTF you are doing. If you are clueless almost anything can get you into trouble.
A common approach is to stick the verifier token into a cookie (no need for sessions).
Yes, but making breaking changes just because you can is still usually a bad idea. It's the time to do so if you *must*, but it's still advisable to keep them to a minimum. See also: Python 3.
The issue becomes, how does one go from clueless to knowing WTF they're doing, while retaining good habits by not reading outdated materials?
Thank you for this, I'll play around with it to understand it further.
Yep, that's why I made this post. To figure out how to protect the PHP endpoint.
A small script that would connect to the local newspaper's website at night (login and all), to download the morning paper (PDF file). That way, I wouldn't have to manually log into the website and wait for the download to complete (slow internet) each morning.
[The docs](https://secure.php.net/manual/en/function.mail.php) say that `$to` must conform with RFC 2822 and $subject must conform with RFC 2047. So... read the specs and either fix up those fields to comply, or reject/throw an exception if they don't. You haven't used any variables in the $header, so you're good there. `$message` is supposed to have lines not longer than 70 chars apparently, you can probably use [wordwrap](https://secure.php.net/manual/en/function.wordwrap.php)($message, 70, "\r\n"). Also, you should set the Content-Type to text/plain or "text/html; charset=utf8" depending on what type of message you're sending.
Used to have a job which required me check an email from some plans, do some maths with the measurements, collate it all into a job etc. Basically a 20 minute process many times a day. Just coded a PHP script that I could forward the email, do the measurements and then run API calls to our software. Then it dawned on me I could just get the original email sender to CC in my script's address. It took me about 4 hours to make my position virtually redundant.
So realistically, there's no good, safe, satisfactory way to validate/sanitize/filter and otherwise protect and conform to proper email standards outside of using a library. Okay, I can accept that if it's true. I'm trying to increase my understanding, but I've gotten a large variety of answers and honestly I'm more confused now than when I started, so I'll just look into those libraries.
I have an entire system that does my billing for hosting for my clients. It pulls in a list of clients from Harvest, domains owned from Namecheap and email addresses per domain from Rackspace. I manually assign the domain to a client project (associated with a client) once. Clients get billed yearly based on how many domains they have and how many emails they use. The emails are calculated on a monthly basis, so it tracks that each month. When it checks a domain from Namecheap, it looks at the expiration date and sends me an easy report on what's expiring soon. And it checks the expiration date on SSL certificates for me, too. Finally, it gives me a report on what nameservers the domain uses and which one of my servers the site is on (by checking the A/AAAA records). Overall it took me about 10 hours to build, including a Bootstrap frontend.
So... we're benchmarking the performance of each framework serving static pages, basically? No dynamic pages, no database access, complex routes, or anything else? Seems like the "better" way to do this is actually write a moderately complex app in each framework, and benchmark requests per second against that. Do it open source, so that people who specialize in each framework can provide suitable code, so there can't be an arguments that the benchmark was flawed due to the skillset of the developer....
Idk, a lot of these previously posted mean very little to me. Like who cares if your lingest method is 13 or 26 or 50 li es if code? As long as most of them are not hundred line monstrosities. Comparing longest methods seems a bit weird. Techempower has settled the benchmark scores for everyone. Idk why would anyone feel the need to benchmark laravel vs symphony to decide which one of them is slowest. We know they are both slow already, none of them seem too concerned about it.Comparing their slowness makes little sense. 
I don't believe there are any risks if the mail client correctly respects a text/plain header (assuming you aren't then dumping it somewhere that later gets rendered as HTML; although if you are, escaping should happen in that system). Email isn't exactly my specialty though, so a second opinion wouldn't hurt.
PHP books are deprecated nearly as quickly as they are printed.
This was in response to your comment. &gt; When I asked on this sub earlier if it was okay to use mail() in a simple contact form script, and they said yes, were they incorrect? The answer is almost always going to be they were correct if you use it correctly. There isn't some magic word that will grant you understanding of all the current best practices when writing php code, you just need to study up for a year or two and that means reading the good and the bad. It sounds like you should buy a modern php development book and work your way through php the right way.
Dynamic pair programming Minecraft/Code school server and client. One person tries to survive while the other attempts to solve code problems. Web sockets, MC server interaction, async HTTP. Also, visual notifier (with proximity/visual dismissal of alerts) for Twitter and Email alerts. Arduino, IR sensor, RGB LED, Twitter API, IMAP extension.
If you could put this on a platform you could probably sell it. 
&gt; but a lot of it is basic obvious security stuff that any seasoned developer would know anyway. And yet everything that shows up in every one of these blogs is a mistake thousands of PHP developers regularly make. 
picking up the local showtimes from the cinema website and put it on my personal blog.
Surely it's no longer 10x faster after PHP 7, right?
I've thought about it. The 10 hours includes a bunch of hard-coded stuff like my hosting rate, cost per email, # of "free" emails included. And I'd have to include different hosting providers and work with their APIs. Then what if someone needs a different rate for a different client, etc? I might one day, but it's probably a pipe dream.
&gt; the most amazing thing you automated ~70% of my daily tasks. Turned 3-4 hours (daily) of information gathering and collation into a single cron task which runs over 2 minutes. Took several months to develop because of the sheer number of processes involved--but very worth it.
Why doesn't it use a standard middleware signature?
If what you said was true, he would have just sent pull requests to techempower with new code. Instead he is just trying to write benchmark articles with frequently googlef titles, so nezt time somebody looks up a syphony vs laravel benchmark they see his post.
Sure, you could. But why not use a library that has already looked at all the relevant RFCs and is real world tested?
Check to see how the big frameworks do it. Google clean validate sanitize email php and set it to within 1 year. I think you need a few checks. I know phpmailer added a cleaning line, then checks to see if it's still the same as the original, then validate it. Like if it strips a space, then it's no longer a match and fails. I feel like this is one of the things you should just roll your own super paranoid clean/strip/sanitize overkill code then do the built in validation. The speed is still instant, it's not many lines of code, and doesn't blindly trust the built in validation. 
Include a config file
Well, as much as dev hate it, marketing is one of he most important part of the job, if not the most important... But still, updating techempower benchmark wouldn't be the end of it. By the way, having a only a single source of truth allowed to rule them all is a bit of an issue in my mind. What if PHPixie was misconfigured in their benchmark ? Unfair for you. Did you update their implementation after each of your releases ? Worse if they fuck up, as no one else will double check (who know how to set up and configure every one of those framewoks, and takes the time to check ?), and (tinfoil hat on :p) easier to skew on purpose... (not saying they did, but the possibility is always here). If you are attacked on hearsay, outdated infos or anything like that, the only way to correct it is to be very active on relevant medias. But hatters gonna hate you even more when you do it. The real ones (not the one who don't like you because of misinformation or valid concern) will be furious. And valid concern will be vocalised. Another good point. The only thing I really don't want to see on this subreddit is India spam to REAL BAD (like more than really bad) php articles. Even when you spammed your content (free light teasing here) a few months ago, I either ignored it or read it based on my mood, but I never ever got angry about it. (Side note about me, I don't know why, but I like reading docs, even when I don't intend to use the thing, and I LOVE reading internet drama. That PHPFIG thing was priceless ^^)
&gt; Want to catch my interest? Give me benchmarks from real world applications or individual components. Show me how Doctrine versus Eloquent compare, or how symfony/cache compares to doctrine/cache, or Laravel's routing versus Zend's. * Probably easier said than done, as you need to be as experienced in both things to compare said 2 things (not feeling as experienced, beeing), not biased, and * You loose track of the trade offs by comparing perf only. Benchmark is only one of the tools to choose, and unless you need that speed, usually irrelevant compared to other concerns.
I run a web site for a few movie theatres. The script I built to import an XML file of the showtimes which is exported from the POS system has saved me a considerable amount of time and virtually eliminated errors. 
Just stuff in the past couple of years: - automated invoicing and billing panel for hosting business (interacts with ResellerClub for domains, cPanel hosting accounts, etc), generates PDF invoices using wkhtmltopdf, charges clients via Stripe.com payment gateway, also manages support tickets, dns management, etc. etc. Plan to release it open source one day. - fraud prevention (started as an extension to the billing panel). Interacts with fraudrecord.com, and verifies telephone number ownership by sending unique code via text message, or calls and speaks the code in multiple languages (through the Twilio API) where the user must receive and enter code on the web page. - collector car auction syndication across a bunch of platforms (Hemmings, ProxiBid, etc) - currently working on a new third party WHOIS protection service that only masks the email address (staying within ICANN rules regarding the new domain contact policies). - a media center system for my personal media collection. It automates organizing my media, downloading media information (dvd covers, tv show episode guides, etc). Runs in fullscreen on my TV, also integrates youtube, netflix, etc. Runs on Linux. Plan to release open source in future. - various scripts and tools like automating backups/snapshots ... and the list goes on.
hahaha
I'm assuming you didn't make this clear to your superiors and put yourself out of a job?...
It was definitely an algorithm. Most finance professors will teach you what arbitrage is, but after they will explain markets are too efficient. There are now non-traditional markets such as crypto-currency exhanges that are not at the same level of efficiency. Exchange A: bid $95, ask $100 Exchange B: bid $85, ask $90 Buy from Exchange B at $90/BTC, then sell on Exchange A for $95/BTC. Profit = $5 Simple algorithm that you can start to put a creative twist on with a dash of machine learning (single to multi-level artificial neural networks). Machines can learn from mistakes too ; )
A library to convert between american odds to decimal odds in sports betting. https://github.com/yadakhov/sportsodd
Boss was really impressed and I basically moved into a much better role for my situation, and ended up developing a lightweight production system :D
but RequestInterface don't have an attributes. How to be? I need to pass a request config.
There was a good discussion on httplug / guzzle / PSR's on the php roundtable podcast among authors / contributers of the packages. The episode description: Guzzle has become the de-facto HTTP-client library for PHP. But recently a number of open source projects have been switching to HTTPlug which boasts itself as an HTTP-client abstraction. We chat about the problems HTTPlug aims to solve, the plans for its future and the reasons behind why some library maintainers have chosen to adopt it or not. * Duration: 54:19 * Published: 05-01-17 5:00:00 p.m. * Episode Download Link (25 MB): https://php-roundtable.s3.amazonaws.com/episodes/058-httplug-guzzle-and-apis.m4a * Show Notes: http://feedproxy.google.com/~r/PhpRoundtable/~3/a-3qW-Sj5q8/httplug-guzzle-and-apis * Episode Feed: The PHP Roundtable - http://feeds.feedburner.com/PhpRoundtable
You should add tests _before_ promoting your package
you're right. thanks.
There's literally a ton of things you could learn, lean HTML, scss, AngularJS, Bootstrap, Foundation, JQuery, XML/Ajax, in some cases API development.
Yeah, it just happens to be easier to find shitty PHP because it's really easy to get into
TIL America has a really silly odds system :/
you'll probably break a lot of things, might want to hold your horses until you understand the product well. Look for other places where you can speed things up, db indexes is the first thing that comes to my mind.
PDO prepared statements.
Those are fair comments. 
PHP the right way and Laracasts. I wouldn't put my trust in a random instructor who's background you don't really know. Jeffrey Way's well known for producing excellent classes on Laracasts. Also, skip the Wordpress stuff you mentioned in your comments if you want to be a php developer. You'll understand why as you get going.
Password compat package for the hashing problem. 
Does the project have unit-tests or other type of tests? I would say add another pipeline into your CI server that runs PHP-7.0 (and while you're at it, make another one for PHP-7.1) and run that side by side for a while (and this will give you time to get more insight into the project).
So how are you with him then? He is the one doing all the benchmarking to prove some kind of point.
&gt; Please direct all web design remarks to http://www.motherfuckingwebsite.com/ Very professional advice for a valid critic. Some of your posts are amazing on here (always on the attack and even insulting people at times) and it being a public forum is even more amazing you would represent your company in such a manner. &gt; That accurately reflects the real problem though Yes I agree, people keep making basic mistakes but the (majority) of the content you put out is the same stuff that gets posted here over and over and over so yes I do see that as spamming obvious content. On balance (as mention in my above post) every now and again you post some high quality content that is useful and covers things that other people don't.
&gt; would be So this is something you only dreamed of?
They both fall in the category of tools that look great when you're prototyping something, and in any bigger application that you have to maintain, they turn into something that repeatedly insists of standing in the way. Bootstrap changes defaults (like the box model) for your entire DOM, it takes over common CSS names that tend to collide with various other components you may want to use, and encourages "presentational HTML" where you encode layout via HTML elements and attributes. It's also fairly restrictive, you better love the 12 col grid, because that's all you're gonna get. Extending and customizing Bootstrap means effectively forking it and/or fighting specificity wars with it, which is the worst way of using a third party library. Angular has a similar philosophy. It doesn't just want to be a UI framework, it wants to be your entire application, including configuration, dependencies, architecture. I don't want to get into a big argument about its architecture, but bi-directional binding will always be a toy approach to UI writing. You hit obstacles fairly quickly as you try to build something more complex. Both in terms of performance and mere capabilities. It's also quite apparent to me, from the very start, that the Angular creators are inexperienced, and they are very keen on building up the "lore" of Angular with proprietary terminology and concepts, which are full of accidental complexity (i.e. service vs. provider vs. factory, controller vs. directive vs. link vs. service etc.) and insist you "weave" your application into Angular, rather than Angular helping you code your application according to your domain, and taking care of the boring/tedious parts, which is what a good library does IMO. I mentioned React earlier because it has the right attitude. I don't create "React applications", I create applications, where *some components* happen to use React, and I can change that at any moment, if I wish, without breaking my entire app. That's the kind of flexibility and humility a library should be designed with, so it's useful to a professional. There are scenarios where such projects are suitable. Say if I wanted to code up a very basic admin really quickly, I might insert Bootstrap, browse some themes and copy paste some code. I've done this. But if the project lasts and evolves at all, I always have to take out Bootstrap eventually, because to implement feature requests correctly, you need control that it takes away from you, and that's a painful process.
A CSS sprite generator. The image manipulation is done with imagemagick since it's simpler but the mapping of file names to CSS classes and all the offset calculations are done with PHP. 
sorry /u/pmjones I know you're always on here (and other channels) giving answers and are (was?) part of PHP-fig? I should have worded my reply *many* rather than *any*. It was referencing leads from the most used frameworks like Parry, Potencier and O'Phinney. I know no one needs to get involved in the community and they can do as they please I just don't understand this bashing of people who are releasing open source projects for the better good of the community. The bashing seems to be coming mainly form people who don't contribute anything back
Agree with this, although the current project I'm working on is in a load balanced environment 99% of the projects I do are only every deployed to single server and I would imagine the vast majority of projects created will only ever need a single server
PHP 7 isn't a silver bullet, it's not going to solve all your performance problems. PHP 5.6 includes some perf increases, so upgrade to that at the very least. Then do some profiling with Xdebug to find where the bottlenecks are. It may surprise you and you'll find some low-hanging fruit that makes a big difference. 
Inject one model object into another or initialize a model from a different model method.
I wanted a framework that I could use specifically for my own backend projects. I don't have any more plans for it, other than minor improvements here and there. Best way to contribute would be to give me some improvements you find.
Implementing relations via *php cli generate* will be good feature. Column types only int, varchar and text? And what about date(time)?
Ok so let's go over them one by one. Not trying to sound like a dbag, but these are some features most people will look at when they're considering your package/framework &gt; you can require PHPunit yourself if you want Of course I can, but that's not the point. There are no _actual_ tests to run. So how can I be sure that your code works as expected? What if I want to change something? How can I see if that breaks your framework or not? &gt; it gets auto-generated when you run composer create-project kjdion84/php-backend-framework Yes `composer.lock` will be generated, but it will be vastly different if I do it _now_ versus when I do it in a year. The point of a `.lock` file is that regardless _when_ I install your framework, I always get exactly the same version. &gt; this is taken care of via packagist/github releases That's not how constraints work. If you have ever used `Guzzle` you will know how important it is to specify _which exact version_ of the library you want &gt; correct, I prefer not to use them Why? You are now polluting the Global namespace which might have collissions with other packages I want to use. That's not very developer friendly. &gt; correct, I prefer not to use PSR Fair, but that just means it will be much harder for your framework to play nice with all the zillions of packages on packagist that _do_ use PSR. That can be a valid choice obviously, it's just again, very limiting to whoever wants to use your framework. All in all, I feel it's a good attempt at a framework, but these criteria highly influences your adoption rate. If you don't care about that, feel free to ignore my feedback. 
Well, it looks like very simple scaffolding. May be useful but many famous MVC frameworks have same generators with better functionality. Phalcon Developer Tools for example. Anyway, good work. But I would have paid attention to n0xie recommendations.
IMO you should have way more followers with that. It's a great idea! How is it sourcing images through? 
&gt; I can definitly get behind the fighting bootstrap as soon as it doesn't do exactly what you want out of the box. &gt; What are your alternatives ? bulma/foundation/material/??? My alternative is CSS. It's not hard to get your layout right with it these days. Say, the grid is constantly cited when we talk about a framework. But today we have CSS flexbox, so the grid comes built in, no framework. And it's a much better grid, too. I use specific components sometimes, I mix and match depending on needs. Color pickers, calendars, sliders... As long as they're well isolated and don't take over your entire app, and can be customized so they fit in seamlessly. &gt; Do you have to opt out often? Out of frameworks, I just don't opt in. As for libraries, each has its strengths and weaknesses, so depends. Say, React. It's not great with animation, and with some very complicated components (say text editors) it doesn't work right, so then I don't use React. But again, if the library is done right, you can make that choice on a component by component basis, not all-or-nothing for the entire project. So if I decide to do something in jQuery and then I decide I don't need it, it's not like Angular or Bootstrap, where moving away from them (or to them) becomes a Big Project on its own. All-or-nothing frameworks are a trap.
We have stats that prove two popular apps (which use the database a lot, BTW) were sped up twice by PHP7, without touching any of the SQL queries they run... but ok, let's keep talking how it's some kind of exception. Of course you can have a slow query. Of course you can optimize it. But this is /r/php and not /r/sql and I'm responding to someone who is saying "nah PHP is fast enough, it's the database". And that's simply wrong for any modern application. Especially those driven by frameworks.
me
Which tool are you talking about?
Be aware, you're still doing them wrong: https://github.com/kjdion84/php-backend-framework/blob/90b177e38c2424a29f75330147d1edc89bd31d99/helpers/Datatable.php#L76-L78 ORDER BY and LIMITs can't be protected by PDO's prepared statements, so you MUST whitelist ORDER columns and directions (the latter being ASC and DESC only!) and intval the parameters to LIMITs. Since $this-&gt;request in this context is the values in $_POST, this makes any code relying on that function immediately vulnerable to SQL injection.
It tried to pull the source down for download. If it failed my validation it noted it as "playback_error" then ran the scraping process (on all source site via the priority list) and finally a cron would check all playback errors after they where 12 hours old and delete any that still persisted. 
Thank you so much, hopefully the new website coming soon will bring some new players. All the images come actually from my other project, which I'm part of the team as a Developper, called whatthemovie.com. It's a quiz website running since 2008 where users upload snapshots of movies (from the movie) and other players have to guess the movie. In 8 years, 65 000 users uploaded more than 400 000 images from 27 000 movies! I just decided when I joined the team in 2010 to export the concept of the game to Twitter for the hardcore gamers that wanted to play from everywhere. Therefore, I apply the same copyright/terms of service as whatthemovie for the snapshots, we do not claim ownership of the depicted movies. The copyright of the movies as well as all snapshots lies with their respective film studios. We also only accept snapshots from official DVD/BD sources, not even legal streaming, and I added some little tools to verify the source of the snapshot. Users that keep uploading shots from downloaded Blu-ray Rips can't upload anymore. Since 2008, we didn't get any notification about copyright. 
ok, maybe I wasn't clear. Yes people can only inspect *their own* requests to find the POST parameters. If your form is submitting over HTTP, anyone on the same network or another person between the client and your server could intercept the request with the right tools. HTTPS at least ensures no one can snoop on your data in transit. You seem to miss the point that GET/POST have much different intended uses beyond "don't expose data in URLs". GET is meant to query for a result. POST is meant to change something on the server. Typically its been used to create, update, or delete something, although one could also use PUT &amp; DELETE to cover updates and deletes. 
Pass it in the constructor? Also note that `__invoke($req, $res, $next)` will be superseded by PSR-15 which uses `process($req, $next)`.
Perhaps do a jail or docker container for php7, tell the web server to use the container for rendering php instead of localhost, and if everything breaks, just set it back to localhost. You could even clone zend and tell the clone to use php7 and work on anything that breaks, then apply it to the current setup when migrating. Food for thought, I'm not a pro sysadmin but that's what I'd try doing.
&gt; Containerizing a static website https://i.imgur.com/Br00TCn.gifv 
It is a simple framework that addresses a very specific problem. I mean sure, you could go ahead and use a general purpose framework that has a whole bunch of requires that you'll never use.
Yes, I saw this project. Thanks.
The way you're using .htaccess and the public folder is really odd. Ideally your public/ folder should be set as your DocumentRoot and the .htacess file should be in there to rewrite non-static (js, css, images) requests to index.php. Thus keeping all your app code, vendor folder outside of what will be served by apache without the need for your final rewrite rule. This keeps everything more performant too.
echo ${$initials.'_2p'}; but as mentioned previously it's not used at all. 
Thanks. I knew it was something simple. I even stumbled across variable variables but couldn't wrap my head around it. You say it's not used very much and code should be refactored.. would you mind giving me the short description of the right way? Thanks again.
Dont do that please. Its horrible to debug code with variable variables. Use arrays. Everything is possible without using hacky variable variables.
Arrays.
They don't. They don't commit any code to the PHP core to improve it and plug holes or insecure functions it has
Yeah, after I posted I realized it would more than likely contain too much personal or specific info for it to be worth it to convert as a side thing. Fingers crossed you get involved in a huge acquisition and can afford to work on it full time ;) 
This seems like what's going on with this company as well. It's big data and they need it to index faster. 
Not without knowing more about what you're doing.
It's 2.3.0 ZF
&gt; I use specific components sometimes, I mix and match depending on needs. Color pickers, calendars, sliders... I build a calendar from scratch once. I never tried it again, and never used it in prod. Some components are just complete projects on their own if you want them configurable, extensible and complete. --- From what I guess, we don't have the same needs/projects, which make us have different answers on the same questions. Big thanks for the answers anyway, always interesting
I might open source a version of it with some basic functionality to customize it and open it up to enable plugins for domain and hosting APIs so someone could write one for GoDaddy or Hover, for example. Going to put this on my 2017 list and hope I can make it happen!
The quality of your tools has a direct affect on your productivity. Lots of tiny slowdowns, stuttering, waiting for apps or other quirks quickly add up to serious frustration over time. The amount of money a business is prepared to spend on your tools is a direct representation of how important they consider the development team to be. I am currently working on a 2yr old high spec Macbook Pro, it has given me no issues over those two years and I am perfectly content to keep using it for the indefinite future. The company also works on a 3yr upgrade cycle, so I should get a new high spec machine around this time next year.
It isn't going to be spidered by search engines. It is a backend framework. Also, the user shouldnt even know pages they do not have permission to view exist.
I believe in you! 
So there isn't yet-another-syntactical-sugar? Uniform interfaces are preferable to syntax by context (there always has to be some). Having PHP read like Perl (with syntax dependent on external conditions, ordering, etc) is a step backward.
When I was a broke student and then self employed I enjoyed developing with i3wm, VIM and running apache, php &amp; mysql locally on a 10 year old used bargain bin computer with 256mb of ram. Could probably get work done with just a raspberry pi these days if I had too. Do you really need the virtual machines and PHPStorm? If you could cut out one or the other or both it might help. Standard requirements really depends on your workflow and if you need to be doing dev-ops with a mirror of production configuration. That being said, good developer time is far more expensive than hardware and it makes no financial sense to not provide the most robust and powerful tools available.
YAGNI
It wasn't in PHP, but in 2001, I had to work a minimum of 15 hours at a job for a class (DCE) in high school. I only had two classes as a senior (this class and CAD) so I ended up working there full time as the IT Director. Had my own office, did basic tech support shit like fixing printers, building PCs, wiring CAT-5 cables, etc. Anyways, they had three locations: the main office was in Phoenix, and the other ones were in Ontario, CA, and Salt Lake City, UT. I had setup their entire network and employees could dial in to the VPN in Phoenix to check-in their hours. So I setup my home computer to login remotely and clock me in about 30 minutes after my last class and clock me out about 10 minutes after 5 PM. I was being paid hourly so I racked up 35-45 hours a week (I made it random so it wasn't obvious). Was a pretty sweet gig being only in HS and making $20/hour. 
They do... As you can read in the post they tried. Besides, even as a plugin which can easily be installed it is great.
&gt;It isn't going to be spidered by search engines. It is a backend framework. Sure it will. I have a domain I never link to or otherwise indicate would have anything of interest to Google, but through one source or another it became aware I have an active HTTP server and it checks it often for updates. (Even though they don't occur.) And of course what I'm saying applies to more than spiders, it can make it harder to programmatically interface with your site in general if something like finding a now-dead link now soft-404s and therefore appears to still be an active link, or if accessing a protected soft-403s by redirecting you elsewhere using a status code that implies the resource exists and is elsewhere, not that the resource is privileged. &gt;Also, the user shouldnt even know pages they do not have permission to view exist. What if the user does have permission to view a resource, but their session times out and they need to re-login? Just getting redirected to /sign_in without comment about why they need to sign in again is a UX issue. What if someone tries to link something they don't believe to be privileged to someone else, and that someone else keeps getting mysteriously redirected elsewhere? UX issue. And as said above: the UX issues can confuse software meant to interact with HTTP systems that expect the service to only give the defafult 200 OK status when the request is serviced as expected.
&gt; My reasoning is simple. If I can code my site to be extremely fast on a machine like that, it'll be amazing on a server. That's not necessarily true. I recently [wrote code that has to support 32-bit hardware](https://github.com/paragonie/sodium_compat/blob/master/src/Core/SipHash.php) (which was common circa 2008), but if I had opted instead to only support 64-bit hardware (which is pretty much what every server runs now), I could've made it at least twice as fast. If your hardware limitations force you to write suboptimal code just to get it to work, it won't perform as well as it could have.
Don't run VMs on machines with this specs. If you need VMs to do your job they should be provided to you on something else. Overall these specs are fine for general PHP development. Nothing seems to be out-of-line assuming the external monitor has decent resolution. For *particular* things it may be insufficient, such as running VMs.
They always come out with new, better ways to hash or encrypt information, and methods for querying a database. Other than that, whenever you see someone use a function in a tutorial, I suggest looking at the PHP documentation to see if you should be using something else instead (most tutorials dealing with PHP are ancient).
Syntax highlighting is a crutch and kills productivity. /S
I have an external file: includes/rates.php with data like: $AA_2p = "250"; $AA_3p = "200"; $AA_4p = "175"; $DTB_2p = "250"; $DTB_3p = "200"; $DTB_4p = "175"; $HJB_2p = "250"; $HJB_3p = "200"; $HJB_4p = "175"; $GB_2p = "300"; $GB_3p = "230"; $GB_4p = "200"; etc ---- Each person (AA, DTB, HJB, GB, etc) has a page. Each page has a) some variables declared on it, one being **$initials**. Example: $initials = "GB"; ---- and b) a table with 3 rows. Example: &lt;tr&gt;&lt;td&gt; rate2p= $AA_2p &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt; rate2p= $AA_2p &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt; rate2p= $AA_2p &lt;/td&gt;&lt;/tr&gt; ---- Ideally my goal is to use the **$initials** variable plus "_2p", "_3p", etc to pull the data from includes/rates.php 
Suggesting to blindly change things trying to optimize is never a smart move, and your team won't appreciate it. Profiling the codebase with Xdebug on your own time (your team may have other priorities for you at work), finding the bottlenecks, and suggesting optimizations should be appreciated by your team. Maybe the speed of PHP 5.X versus 7 is the bottleneck (doubtful), but you won't know unless you profile the codebase in both versions.
It's very low grade. Macbook airs are not developer machines. They're ultrabooks for people who mostly use a web browser.
using a proper data structure instead of hacking in a variable variable is the proper way to do lookups
I think this is a great starting point. The feedback I have seen are really good and believe it will help you get to where you want this to be. Good job :+)
I used to run a Macbook Air, it was fine but not ideal. Just got a 16GB of RAM and it is sooooo much nicer. Keeping a few things open 24/7 now which I would normally close when under a heavy load. 
Windows desktop, i5, 16gb RAM, 200gb SSD. Still not powerful enough for online radio running in chrome to not interrupt whenever Phpstorm is scanning the project.
Has to have an SSD. The rest is not as important. PHPStorm is a Java app and will be slow no matter what, it seems.
I think we might be the same person (except for the windows part).
Maybe do a mathematical approach. Lets say you work 262 days a year and a better machine would cost $2k and it would last 2 years. Lets also assume you make 100k a year. A second of your work time is worth $0.013. If you save more than 5 minutes a day with the new machine your company makes a profit by getting you a new machine. Also, having your devs work on shitty hardware will lead to frustration and your devs leaving for greener pastures. Training a new dev is way more expensive than the price of decent machine. Haswell i7 2.1 GHz, 12G RAM, 1TB SSD.
I'm on a chromebook right now, the old acer from about 5 yrs ago. 16gb flash drive, 8gb ram. ;-) it's my personal laptop device and dev machine when I'm on the road.
You have one wrong concept..you can't compare a script doing nothing to a framework..if you compare a complete application with and without a framework..there is almost no difference..because you will need a router an orm and some services..and when you pull them in you will not have 100MPH..the framework has them ready so you start slower but you don't finish slower
I never include the lock file with any of my stuff, unless Im working on a team and we want to quickly get going. Is this common practice? I am looking at the [laravel](https://github.com/laravel/framework) framework and they do not include the lock file either ... 
I use two external monitors. The MB screen will just have gulp watch on it or music services, the primary will be whatever im doing, left will be whatever i need (jenkins, tests, pages im working on). I try to keep my primary the important stuff. I use an amazon MDP*-&gt;HDMI and the HDMI port on the right. I also keep it on a small dock (mstand360). [Pic](http://imgur.com/EkmGzoH)
Everyone here is working on laptops. What the heck am I missing. Do you folks have to work outside in the cold, or do they keep moving your office every few days? Anyway... My work machine is a 2.4 GHz Core i3, 6GB RAM. 500GB hard drive. Two 1080p displays. At home, 3.6 GHz Core i7, 16GB RAM, 500GB SSD + 2TB HDD. Two 1600p displays.
Your equation assumes hourly pay and working the additional amount of time that your workstation slows you down. The key part is making sure the work environment is nice (including workstation), or they'll be looking for greener pastures.
&gt; equation assumes hourly pay and working the additional amount of time that your workstation slows you down. Not really, as long as he can save 5 mins a day with his new machine this makes sense from an employers perspective. 
I'm mostly working on 7 years old thinkpad and I love it. With good ssd and debian linux, it's very fast, at least much faster than 4 years newer macbook pro. https://i.imgur.com/ZtVnKPO.png
But, if he's salaried the 5 minutes doesn't count. The employer doesn't pay an extra 5 minutes to the employee. The only time 5 minutes would be an issue is if it's a chunk of 5 minutes where the employee has to pause what they're doing while waiting. Then they wander off, or lose their train of thought and take more time to get back into production mode. 10 seconds here, 5 seconds there throughout the day wouldn't be a loss in productivity if the salaried employee stays until their tasks are completed.
My old and current company gave our project and product managers Macbook Airs. A dev should use one in my opinion. 
The rest of the code looks pretty much like that. I'm talking more about approaching html output completely different than a thousand echo lines 
I do not have wrong concept. Phalcon will degrade your speed 10-20%. Laravel, Zend, and Symfony will do 70% or more. The statement I made "so depending on what you are trying to actually achieve this could be detrimental" ... would translate into, If I need to show 10 entries from a blog table in a database, I may not need the full stack provided by a framework if I want them to show up in ms. 
My job gives us a Commodore 64 with a 512 kB RAM expansion, EPROM burner, 1541 floppy drive, and a 1702 monitor. Should we ask for an upgrade? I've heard good things about the Commodore 128? How much more productive would I be on the 128?
Okay. I think I have a rough idea. The following is not the best way or a good way or the only way. But it will hopefully reframe the problem for you and get you thinking. Change your big list into a multidimensional array like this: $rates = [ 'AA' =&gt; [ '2p' =&gt; 250, '3p' =&gt; 200, '4p' =&gt; 175 ], 'GB' =&gt; [ '2p' =&gt; 300, '3p' =&gt; 230, '4p' =&gt; 200 ] ]; See what we're doing there? Each person's initials will be the key of the array and the value will be another array. Then, when you want to output on the page you use a loop. foreach ($rates[$initials] as $index =&gt; $value) { echo "&lt;tr&gt;&lt;td&gt;" . $index . ' = ' . $value . "&lt;/td&gt;&lt;/tr&gt;"; } That will output `2p = 250`. Now, we can go further, but it will depend on what you need. I'm guessing these values aren't secrets. That it's okay if AA happens to see GB's page. If so, you can reduce all your individual pages to one dynamic page. Pass the initials in the URL. http://whatersite.com/rates.php?initials=AA Grab the value. $initials = $_GET['initials']; Then carry on with the previous loop. See the difference? What you have right now doesn't even need PHP. You're essentially just hardcoding everything. An HTML include would work just as well. If every piece of data has its own variable then you're not really using the language. To put another way if you have `$one = 1; $two = 2;` etc you're not really using variables. With what I just did you now have a one page that works for everybody and it was done in three lines of code (the loop). However, what I've put is is not good practice. There are so many other ways this could be done and done better. So please don't use this as an example of good programming. I get the impression that you're still very much learning. What I want you take away is a different way of looking at the problem and actually using the language as a tool. Bonus Round: I don't know what this is for but if you can output this all one page you could use something like [Datatables](https://datatables.net/). Now you have a super slick table that people can sort, search, and filter. All you have to do is output all data in one big table, include the javascript, and add the right class. 
Also PHP + Mysql connection can be achieved without a "full framework" and return results quickly. So adding bloat to software and only using a subset of "all the bells and whistles it gives you" could be detrimental to what you are trying to achieve. 
This looks interesting. I'm a bit weary of running *anything* PHP related with sudo. Seems like you're introducing a bad practice/habit. You're based off Laravel Homestead but you're not requiring it in Composer? We do a lot of heavy lifting in Homestead and it could cut down on a lot of the code you have to maintain. If you could make the changes you need into a shell script it would be trivial to install Homestead via the per project method and then put your customizations in `after.sh`. Good luck with the project.
You guys are really odd to me as techies. I need my SSD drive fast, my ram fast, my new video card fast, my cpu fast, my car fast, my internet connection fast..... oh but when I use a framework it is ok if it has a little bloat... blows my mind at times, but to each their own. 
What do you use the virtual machines for? I do all my dev on my local machine AMP stack then push to staging on AWS.
That's what heredoc is for.
Work on multiple apps that have different setups.
Yeah I saw it, and honestly I don't agree with Guzzle being the de-facto HTTP client. They are the biggest for sure, but they monumentally fucked up a few major versions which brings a lot of conflicts for... no reason, because most of the time I don't even use the client heavily enough to benefit anything from Guzzle over a simple Curl. Httplug gives me the choice, and for something like an HTTP client, I just want things to work.
I think some of it has to do with environment and job role as to which is preferable. In companies with larger dev teams (say 10+) laptops are usually a big advantage for things like code review and architecture / design meetings, where everyone can show up to the meeting with their own machine setup as they prefer for running / showing code or whatever (organizing one machine or environment with everything on it for every meeting is really tiresome). Also, fully remote teams tend to prefer laptops because they're much easier to ship as people join and leave the company. Personally I prefer using laptops (MBPs) for all of my dev work as well. Professionally I work remote but do a bunch of on-site client meetings, so it's convenient for that to have a work laptop. When I'm working on personal projects I like to get away from the desk, so usually use my personal laptop while sitting on the couch or something.
The beauty of open sourcing it is that other people could add the features and functionality that they want. You wouldnt be obligated to do anything. 
but if i do that the composer events such as `post-create-project-cmd` won't run properly.
at least you now recognise this :) That's still a lot more than many...
Did Authorize.net send out or post any kind of proactive notification for this?
 $html = &lt;&lt;&lt;EOD &lt;tr&gt; &lt;td&gt;My name is $name&lt;/td&gt; &lt;/tr&gt; EOD; $html .= '&lt;input ' . $lockSheet ? 'disabled' : '' . '&gt;'; echo $html; HEREDOC (EOD blocks) can make your code easier to read and write since most IDEs and editors will have color coding and autocomplete for the html. You can only use PHP variables inside the HEREDOC block. Any method calls or logic will need to be done outside of it just like in the example above. 
I just added namespaces, switched to psr-4, and secured datatable `$request` SQL. More to come soon.
[http://php.net/manual/en/function.parse-url.php](http://php.net/manual/en/function.parse-url.php)
&gt; On Linux, though - all bets are off, there are a million different combinations of dev tools out there, so who knows? At least PHPStorm runs like a charm on my Fedora 25 laptop (a recent i5-based Asus machine with 8GB of RAM and a 260GB SSD). I started out with Win10 on it, but Windows annoys me too much. Haven't run into performance issues that aren't caused by network shares and such. Of course, if you want / need to eek more performance out of your machine, you could trade Gnome for something lighter. I don't run any VMs though, develpment server is a different machine, and Docker runs natively on Linux, obviously.
Minimum specs: * 2core + ht, or 4 core * 16 gb of ram, preferably 32 * SSD for work (not just OS drive) * at least 2 full hd monitors, if not a 32" ultra-wide The rest are negotiable, and I bring my own mouse and keyboard
Generally speaking, I never develop on the local system. Virtual or remote every time. It's so easy to do now there really isn't a reason not to. 
&gt; i was just capable of googling and understanding what I read What do you think the rest of us are doing? :) The difference between a beginner and someone who looks like an expert is the ability and courage to look for solutions.
I spent my college years using a 2009 unibody Macbook for my dev. It was college so I guess you can't say it was at all heavy, the odd VM but we did learn various platforms. Android ADT + Eclipse nearly killed the machine back then. When I started my internship I moved to vagrant as part of the internship and within a day I was looking for a new machine. At this point the old macbook was 4 years going and never was high end. Moved on to a late 2013 macbook pro 13nch (2.4 ghz dual core i5, 8GB of RAM, and 256GB SSD) and it got me to today, through an entire 2 years at another job and freelancing. Today, my current employment means I have my own work machine, a late 2015 27inch 5k iMac. Base i5 quad core, 16GB, 1TB HDD (not a huge slow down since I leave it in sleep). The iMac is a treat in every area bar app load times. But I mostly write PHP, javascript in PHPStorm so I don't notice slow downs unless PHPStorm likes to crash out every now and again. Soon I'll be moving to a 15inch Macbook Pro for my travels and pet projects. The 13inch is fairly worn out.
PHP 5.4 and PHP 7.0 had a ton of memory management optimization (7.0 rewrote the whole internals of memory management and data structures). This is hitting data intensive applications waay more than simple small once. So the bigger you are, the more effect it has.
I've been doing PHP for around 7 to 8 years now. I didn't know squat about frameworks. I googled my way in, using GoDaddy hosting. I did things very wrong at first. Connecting to the DB inside of loops, multiple times in the same script, using mysql_* because I thought pdo looked foreign. I had no actual education on the language. Things have changed for me, obviously and thankfully. But I never jumped on the latest flavor of a framework. I've always been a solo dev and have never collaborated in a team. My jobs have always just been me. I've built a couple of apps that are the lifeblood of the companies that use them. But if I got an interview today, I'd fail within the first 2 minutes because I know nothing about working with a team nor some basic things like unit testing. I feel like I'm a capable programmer. I follow all the latest security trends and keep all my servers and languages up to date. All that is to say that i, too, often feel like a phony when I read some posts here. My web apps are definitely no joke. But how I program feels very different than what I see here. 
I typed up a pretty long response then went, "nah", too much info. If what you're saying about yourself is true then just keep going with it. You're fine. The fact you're paying attention to what others are doing makes you extra fine. Learn, understand new tricks, and then maybe one day your name will be on an awesome library hosted on github with a gazillion stars. I primarily work in closed source so I don't really have anything fun I can share. And to answer your last question... my opinion is regardless if you end up in high or low level development I don't believe there is any difference in the amount of work it takes to actual become really good at it. I wouldn't expect anyone to be able to go from university to web dev immediately or kernel dev immediately. Shit is complicated out here.
Yes, you should read about differences in servers and such. I mean... it depends on how serious you take your career. I mean that. Yes, you can get by being a plumber. Being a PHP plumber sucks after a while. Programming is a wide and interesting field. You should strive to learn everything you can about the machine you are using right now.
solved it using 2 events on the composer.json "pre-install-cmd": [ "console\\ComposerListener::init" ], "pre-update-cmd": [ "console\\ComposerListener::init" ], then on console/ComposerListener.php namespace console; use Composer\Script\Event; class ComposerListener { public static function init(Event $event) { $composer = $event-&gt;getComposer(); if (version_compare($composer::VERSION, '1.3.0', 'le')) { $event-&gt;stopPropagation(); echo "Please update your composer version to 1.3 or higher.\n"; die(); } } } 
This is awesome. I'm definitely going to use this to validate the type consistency of my projects in Travis CI.
Thank you, truly. You just made my day. And I feel a little vindicated. I don't have any programming circles or friends. Just a random community in Reddit I check out. It's just a piece of Reddit tin, but here you go, and thanks.
curl ?
I work on multiple projects for multiple companies, either freelance or contract. I mostly work from home which means I'm in my office doing the actual programming (with multiple external monitors), or on my balcony/sofa doing the more administrative work. I also visit clients s few times per week so I have a new MacBook Pro because that's what I need.
Or this ... http://digitalformula.net/articles/packagist-github-guide/
One favor don't laugh to much at the domain I'm using to refine my ideas of how to put an app server together. I have kingchesney.com just sitting idle-- it was a gift for my much more confident little brother. A gift he never did anything with. So, I'm using his gift domain... because I'm a jerk and what he doesn't know about his domain I have DNS record control over won't hurt me.
The thing is that if you've been programming for a while, you'll be reusing a lot of the same components over and over again. You will also wire them together in a similar way over and over again. Why not take the next step and go with a tried and true framework or set of components? After a couple weeks of learning these tools, you will save many hours of work every day.
Are you me? I have about 12 years of experience and feel the same way. I have contributed non-OOP code to a Big Pharma comp. app it uses internally about 6 years ago. I was surprised that they still use the same code I am neither proud nor ashamed of and asked me to add more features last year.. After long thoughts, I am writing my own "framework" now and I avoid most of the dependecies that gets you in update hell all the time... I think that for most cases, PHP is your framework.. libraries and paradigmas come and go or get embraced like PDO..
The command bus pattern is useful at times, but I wouldn't say for the reasons the author is listing, except decoration. I'd say there are four main reasons to go "command bus": 1. You'd be serializing the commands at some point and queuing them, persisting them and/or sending them over the wire (say as JSON to a remote service). Think message queues, CQRS, etc. 2. The commands you support are defined dynamically, so you can't have a static interface with a method for each command. The use cases here aren't that many TBH. 3. The decoration (for adding aspects: caching, logging, security), which the author mentioned. Although in the basic case you can do that by extending a class and overriding a method. 4. You'd like to offer dedicated builders for the input DTO for commands, as the input is complex, i.e. implement Command Object. Although you can implement Command Object without the entire "bus" part. So all in all, I think the most useful part is number 1. The author mentions these as well, my critique: - "Keeps Application logic separated from Domain logic": you can do that with a single simple object. - "Commands enforce discoverability": a set of disparate command objects is far less discoverable, than typing "-&gt;" and getting a list of methods, a.k.a. commands. - "Command Handlers enforce Single Responsibility Principle": SRP is about what commands do, not how you call them, so command bus or not, SRP is irrelevant to your choice here. 
I agree. I think I have a barebones framework for myself, too. I just didn't know that's what it was until I started understanding what other frameworks were. I also limit my dependencies. I once blindly updated a component that was supposed to be a minor version update. It broke something crucial. I think it was some dropdown library. I can't imagine running a composer update and having some random dependency break. Yea, that's what testing is for. But as a one man team, it takes a long time to vet updates. Especially when it's something like the phpmailer bug that was announced in December. Granted, the use case didn't affect me, but I was able to update it without a hitch. One of the most recent things I started using was namespaces and proper class inclusions using composer. I had avoided Composer for so long because I didn't have time to understand it. I'm happy with it now. But I only use it for internal libraries and for two outside libraries (AWS and Google Apps SDK).
Why use this over psy shell?
A $2000 MacBook Pro /s
Maybe echoing out some JS and HTML?
After all our arguing the past few days, I have to say all of this is spot on :)
My 775 motherboard with a Q6600 CPU died a week ago and now I use an Intel Pentium G620 (2.6GHz dual-core with 3MB cache) and 4GB DDR3 which is more than enough for firefox dev edition with 20 tabs opened, PhpStorm, Thunderbird, MySQL workbench, steam, music.... Linux(any distro) on a SSD and a dedicated dev environment saved me a lot of time and money. For me, more than 2 cores with 2 or 4 threads and 4GB memory would be a waste of energy and resources.
Hm okay then, thought someone would have come up with something better by now haha 
You have to examine your box to learn how to think outside it.
I'm still on a mid-2009 MBP w/ 8GB RAM. Only thing that sucks is when I rebuild Vim with brew upgrade. PhpStorm indexing is more than tolerable still.
You should add ".idea" to your .gitignore
... it can be with a pinch of bravery, time researching compatibility, and complete disregard for voiding warranties.
I'm on a 32 bit pentium e5400 with 2 gigs of ram :D *Cries*. Seriously though, even with two VM's, Firefox + 6 tabs, LAMP on host machine, etc.... It isn't all that demanding. The only annoying thing is screen real estate. 
&gt; nor some basic things like unit testing. This is easily changeable, though. If you don't know these things, this is **all** on you.
I think there are situations where frameworks are great, but it depends on each project, they are not a silver bullet. I hate the attitude that everything that's not framework-based and psr-compatible is just wrong and "reinventing the wheel" and every 3 page site needs a full blown framework, unit tests, docker container and 100 megabytes of dependencies. For some unknown reason it sometimes seems like web developers are afraid or ashamed to create anything by themselves, I haven't seen this attitude so much in other fields of programming. For example, we have multiple websites at work with a lot of simple CRUD actions, user logins, forms etc. There are multiple developers, and framework really helps to structure all the projects in the same way, and everyone can pick up any project and just start working with it, you don't need much time to get familiar with it. And we use a lot of frameworks built in functionality, like form handling, validation, orm, string formatting, security features etc. It helps to speed up development and make the code consistent and reusable. I think common framework helps a lot in this case. Then there is my most popular personal project. There is no framework and I don't see a need for one. I work alone, keep it simple and know every line in there, there is only one 3rd party library which I'm familiar with for a long time. It's built to be fast an efficient, and it is, serving many request every second with no significant load on servers from the php app itself. Most frameworks take twice as much memory and time to display hello world, as this site to load the whole page. I don't even consider using framework for this site, I don't think I would gain anything, there aren't much use for frameworks built in functionality and it would only add bloat, pretty much everything would be custom code anyway.
Tbh I use a framework for everything. There's just too much convenience not too. Symfony is a fantastic choice for almost everything, and if that's too much for what you need Silex, (Symfony micro-framework, basically provides routing and extensibility for any other needs you might have) should fill the hole. Other frameworks like Cake, Code igniter, or even Laravel feel kind of moot when you can cover almost every PHP use case with Symfony or Silex. Edit: Silex, not Sylius
Good to hear. If you have some experiences to share, I'd love to read them (e.g. on the discussion group), because it helps me to see what's important for others, and what needs improvement.
Yeah I dont use those. I dont like the UI and stuff. I NEED a tiling window manager to be productive
2 things: you're feeling the sweet caress of imposter syndrome. And yes, please do take the time to learn "vanilla" PHP. Reinvent the wheel to learn new things. Learn &amp; apply best practices. Sounds like you're fine at this stage in your career, though. But also take time to learn a framework or two (applied knowledge - actually use them even if for something throwaway), and learn another language or two. If you really want to begin to understand how Apache works, you may want to learn enough C &amp; Linux to be dangerous. Fiddle around with sockets &amp; streams in C, read &amp; write files, deal with input. 
I've been using Sonata for over a year and it's really useful. It can do a lot more than you think while this is often not documented so it will take some time to figure this stuff out. Of course my own fault is that I haven't contributed to the documentation myself, I really should start doing that :) EasyAdmin also seems interesting but I'm not sure if it's that full of features as Sonata.
Maybe https://github.com/jarves/jarves is worth a try.
&gt; The LESS you do in PHP the faster your code will be. Isn't that true for any language?
I'm building a system that reminds teachers via sms about their class' upcoming visit to my teaching facility (we do crazy experiments), checks and validates that we have all the information we need (special needs kids, number of students, mobile number, food restrictions, etc), books the bus, orders the food and updates the calendar for my 6 colleagues (ical). Also, a reminder to our slack-channel is sent daily. It also has a password protected user area where teachers and school administrators alike can get personalized information about their visits and schedule and can change data regarding their students. I get a daily summary about the system status via mail. I am a teacher and am self-taught, but I hate repetitive tasks. And I love programming.
&gt; creative twist on with a dash of machine learning (single to multi-level artificial neural networks) Can you expand a bit on this? 
Can this generate per file output in a standard-ish compiler output format that editors like Emacs or Vim can use to display syntax error decoration as shown in the illustration on that page? Similar to what PHP Code Sniffer or PHP Mess Detector output? 
&gt; Other frameworks like Cake, Code igniter, or even Laravel feel kind of moot when you can cover almost every PHP use case with Symfony or Silius. Do you mean Silex? Also I kinda disagree with your statement, I use both Symfony and Laravel and I'd say they both have a place. It's just a different mindset and they probably cater to different kinds of people but they both are equally great.
People that run their machines for hours at a time at 90% CPU usage aren't the folks that buy laptops. A) battery, B) if you're doing stuff like that, rendering video etc, most will opt for a workstation with higher performance/multiple CPU's. 
great explanation. thank u
&gt; Oh god, I could never survive with your work PC. Frankly, I thought the same as well, and I was initially preparing how to ask for a better one. But then I installed my software, and turns out it runs just fine. I only asked or a second display. I run on Windows 10 (as I also use Photoshop, Illustrator, Office, etc.), and I have an Ubuntu VM to host server apps for development. Both at work and at home. The only time I felt my work PC is insufficient was when parsing malformed Excel files where PHPExcel would start taking enormous amounts of RAM. Which I fixed by changing the library.
I didn't know about it, thanks!
Well, I have hard proof that I couldn't. My desktop starts locking up if I run out of swap space. I should probably figure out how to increase my swap properly... I'm running Linux because of the need for Docker. I was getting pretty tired too of the bullshit from Windows 10 with updates, but generally I like Windows more for window management and such. If docker ran natively in windows (with linux kernels and alongside Virtualbox, because right now it only works well in Hyper-V which means I can't use it alongside Virtualbox) then I'd still be using Windows, which definitely has better memory management in general compared to Linux in many cases.
great then!
EasyAdmin is actually preferred..at least Fabien said so at SymfonyCon
It can generate per-file output (e.g. vendor/bin/psalm path/to/file.php). Not for specifically for emacs/vim yet, but hope to have that by EOD.
Yup, you're rightmost I meant Silex. Sylius is an e-commerce platform id been messing with based on Symfony. 
Eh, that happens to me all the time. How did you like Sylius? It looked really promising when it came out but I didn't have the time to check it out.
The first thing you should learn from Apache is that you should be using nginx!
i did learn the basics in first and second year of undergraduate, but I never had to use them in real life situations or had the chance to dive deeper because everything now is ready made, my job doesn't require any low level programming they want (rightfully so) to stick to what's already been done and tested and focus on the business needs. It's been around 5 years since my first years of university so I've completely forgotten about them.
One does not exclude the other. Apache still has many advantages over nginx when it comes to setup configuration rules, the first being the possibility to change those rules in a .htaccess file without reloading the server, and in some situations it can make sense to have nginx reverse-proxying apache.
MySQL definitely. You can produce some very powerful database queries if you take the time to learn all the various functions available to you.
The thing to remember when comparing Apache and PHP is that Apache is a static part of the stack in most applications; more often than not it is installed, configured and forgetten about. If you can get LAMP server up and running securely, with a few vhosts then you probably know all you need to about Apache configs from a web development point of view. There is much more to Apache but it depends how "deep" you want to go and how relevant that knowledge will actually be. Mariadb/SQL skills come with prolonged use - develop some small personal projects with different purposes and see how you could best tune a database for your requirements, try and utilise lesser known features etc to broaden your knowledge. Lots of cool ideas come when trying to shave ms off transaction times etc. Linux skills again come with practice, maybe switch your home environment to a given distro and mess around. You'll soon find yourself picking up general knowledge and tricks while also becoming more comfortable performing basic and more advanced tasks. Maybe make a note of things you'd like to be able to do easily and work through them until they become a we confirm nature. 
What makes EasyAdmin better than Sonata? Wouldn't mind to switch :)
Looks nice! I do prefer Doctrine over Propel myself though so that is kind of a bummer.
Seems obvious to me, but you should know bash and how to execute common Linux commands. I'd even recommend this before digging into Apache or nginx, because knowing this makes Apache/nginx a lot easier to handle. Learn the location of the usual log files for Apache/PHP/etc. Learn tail, grep, locate, cat, top; how to search for running processes, how to kill misbehaving processes, how to restart processes, how to pipe output to a file. Learn how to set file permissions and user ownership. Learn how to manage the crontab. Learn how to write basic bash scripts. Then you'll realize all the stuff you can now do, and you'll probably have a 'mad scientist evil laughter' moment.
Obligatory shout-out to phpstan/phpstan and etsy/phan as tools in the same space. This does seem to be a lot faster and finds a few different problems though, which is awesome. Noticed a couple of issues - it seems not to have a full understanding of the built in classes' inheritance hierarchy (specifically, doesn't seem to know that RuntimeException is a subclass of Exception), and it doesn't appear to understand the ArrayAccess interface so complains about array access on non-arrays. Will have a more thorough play with it and create some properly detailed issues (or maybe even PRs...). Thanks for posting!
Thanks for the response. To answer your question, we do have alot of customers, but only one subscription plan where we charge them 10% of however much we've made for them that month (we help out clients make more money with insurance companies ). Could this be set up, via that dashboard on their site? Also, we will need to provide monthly invoices 
If somebody developed for 7 years without having to program with others then they're going to be stuck doing solo work or take a pay cut if they join a team because the people who have that experience will run circles around them in productivity. No matter what the vocation or industry, having experience in working on tasks with others is vital because when heads come together the impact is enormous. This shouldn't be confused with management antipatterns such as design by committee and warm bodies. Check out the [antipatterns](https://sourcemaking.com/antipatterns/software-architecture-antipatterns) section of sourcemaking for more info.
You should be coding not reading up on stuff you might or might not need. In the process of working on your project you'll learn what is needed. Code code code. Create, start a business, create a tool, don't waste time working on your resume so you can get a job making someone else rich. 
It isn't done yet, but I'm working on a few things you may find helpful and give you a fast forward on understanding some stuff... https://github.com/bradchesney79/2017-Debian-Jessie-Secure-WebApp-Server (nginx) in-progress/closer-to-finished-than-any-attempt-previous https://github.com/bradchesney79/2015DebianJessieWebserverProject (apache httpd) unfinished/abandoned 
Jarves abstracted the ORM away but doesn't have a doctrine adapter yet. When Propel3 is beta (which will be supported ASAP) it's a very simple task to support doctrine as well, as both are data-mappers and work with a UoW abstraction, so the actual models are ORM agnostic.
i7-6700k, 32 GB DDR4, 512 GB SSD + 3TBx2 SATA RAID1, GeForce 980 Ti, and 2 Curved 27 inch LEDs.
The new MBP is pretty great as far as look and feel. It is lighter too, so there potential there. I went with the 2015 model though just out of concern for bugs and the untested longevity of the new design. Things can get a little ruff in my panniers for my bicycle or on my back and I don't want to have something break a hundred miles out from town on my bicycle.
You have an error in the wiki: https://github.com/vimeo/psalm/wiki/Dealing-with-code-issues `&lt;errorLevel="suppress"&gt;` is not valid XML. What is the correct syntax for excluding files? Can I exclude checking a folder for ALL issues? I don't want to have to put the same folder over and over for every issue handler.
I was there and it wasn't in my understanding that this was preferred. It was just an example admin bundle which could be installed by Flex when it is ready.
Except everybody I know uses Nginx now. I was never a fan of those directives. 
I just have the reload command whitelisted for the right user so they don't need sudo. That said outside of that case I don't ever have the need to reload on a prod server.
We are doing the exact same at my company right now. The top commenter claim this will break your code, which I found completely false. We upgraded three large websites from 5.3 to 7.0. No code changes were necessary, and we got a 2-3 performance increase. It's easy to do and gives a big win for performance, security and features. I recommend that you test and profile everything just in case your upgrade requires some code changes. Otherwise good luck. 
Haven't taken an in depth look but two obvious things I saw in the first minute. * Defaulting to `uniqid()` for identifiers isn't a good idea at all. Edit: see https://www.reddit.com/r/PHP/comments/5nylqk/database_abstraction_library_for_mysql/dcfgxuy/ as to why. * Asking users to edit files in vendor to configure your package is definitely something you shouldn't do.
Or *maybe* they just don't use Linux/bash. No need to be so hostile. /r/gatekeeping
Or MariaDB Jussayin'
stripe is probably the easiest of the whole bunch. Just set up a payment subscription on their backend, then have people on your end buy that. [Example Here!](https://stripe.com/docs/subscriptions/quickstart)
Something I have been attempting to do is separate the GUI stack from the BACKEND stack, Everything I create now I try to make controllers/views on one side and Curl/JSON interaction to controllers/models on another install. This allows for an easy Web and Phone app for the data. I am no longer excited about the "full stack"
This might be an unpopular opinion but.. I wouldn't. Not knowing any frameworks suggests unwillingness to learn, and that he/she is slow to adopt new technologies, procedures etc. It also shows that he/she has relatively little experience reading/working with other people's code.
* uniqid(): any reason why autogenerating a unique id is a bad idea? * config file location: what would be a more elegant solution to this? Thanks for taking the time to look and give feedback, much appreciated!
I was there as well..he said that the benefits of Flex are that it will ship with the preferred bundles for certain functionalities..and as for Admin the preferred was considered Easy Admin..
Ah, thanks for finding - will fix momentarily. You can exclude checking a given folder by using &lt;ignoreFiles&gt;&lt;directory name="path/to/dir" /&gt;&lt;/ignoreFiles&gt; inside the &lt;projectFiles&gt; tag.
Why do you use the $client-&gt;setup() method? Why not move everything to contsructor?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The `setup()` method pretty much drops/creates tables, which you won't necessarily want to do every time you create a `Client` object.
Thanks - etsy/phan and Hack definitely inspired some aspects of the codebase, and I use phan's function signature map when reflecting return types of builtin methods and functions (as it's far more accurate than anything that ReflectionMethod/ReflectionFunction offers). I've ticketed the issue you mentioned here: https://github.com/vimeo/psalm/issues/53 - should have a fix momentarily. Side note: when troubleshooting issues, I find the code editor at https://getpsalm.org very useful in identifying failing testcases (as it runs the latest dev-master). I was able to reproduce and ticket the above issue on my phone while waiting for a train.
Totally wrong section, but yes look into jquery and ajax. No simple answer for your question.
 The vendor directory should never be modified and your app should never write changes to the vendor directory. A better option would be to load the configuration in your constructor or other class method 
Clearly you're incompetent. You probably go around telling everyone they can't use spaces in filenames.
My assumption of Flex is that there is a certain amount of choice involved so that if you want an admin that you can choose between either Easy or Sonata but maybe I'm mistaken and you have the correct understanding of what he ment.
In fact its perfectly fine to commit this directory to thare project settings with your team. Maybe less useful for libraries and end users
Yeah most everyone else either uses their own computer or uses a Dell laptop and runs Linux. I was given the choice of Dell laptop or MacBook air. Same specs on both. Hopefully soon I'll just be running docker. Those were the good 'ol days.
So I googled this because I didn't know what word splitting is either. Turns out that I know exactly what it is, just didn't know it had a name... It's how positional arguments are handled (quoted v unquoted).
Relevant question about apt packages (not specific to PHP)... Let's say you've made some changes to a package's config file, php.ini is a good example. Is there a way to view the default config file from the current package without overwriting it? For years, any time I've made changes to a default config file, I usually first (when I remember)... cp config.ini config.ini.orig ...just for this purpose. Makes it easy to do a diff and see what I've changed. But maybe that's not really needed? It also doesn't account for upgraded packages, as my .orig file could be from an older version. Obviously there's better ways to do things generally re config management etc. But just curious about this specifically for minor/quick stuff. **Edit:** [Just came across this...](https://www.debian.org/doc/manuals/debian-faq/ch-pkgtools.en.html) &gt; Extract the files contained in a named Debian archive into a user specified directory: dpkg-deb --extract foo_VVV-RRR.deb tmp extracts each of the files in foo_VVV-RRR.deb into the directory tmp/. This is convenient for examining the contents of a package in a localized directory, without installing the package into the root file system. 
I think he means more learning SQL as it's essentially the same thing from MySQL to Maria to MSSQL to Oracle SQL. Knowing high level SQL is well worth the time investment even with utilities like Doctrine and Eloquent doing most of the DB work these days. 
You sound exactly like all those "OO" developers who have never heard of design patterns but then find out they've been using some unwittingly and consequently think they now know design patterns.
What's "knowing" bash in your standard?
And some horribly unnecessarily slow ones if you don't. I'd say SQL should be a requirement for anyone using PHP and building websites professionally.
I would recommend using the [official Stripe PHP client](https://github.com/stripe/stripe-php).
glad you love it. i am planning to add few tools and libraries to it and will definitely look into adding it to packagist. 
&gt; Hi nice tool, I like it. We are developing a CLI tool for Laradock (https://github.com/LaraDock/laradock) which is pretty similar to your project. Would you have any interest in joining us?!
Makes sense. Thanks for suggestion.
Thanks! I've just fixed that bug you mentioned above.
Your configuration array suggestion appears to be the approach adopted by 'Eloquent' ORM so i'll use that. Thanks for the feeback.
Laravel is not going to prevent you from learning the nuts and bolts of PHP - what it *will* do is help you create projects without having to reinvent the wheel. Laravel is not overly complex or large - so to me, using it is a no-brainer. 
Awesome. From a first play this seems like a great tool! Works instantly out of the box unlike phan/phpstan.
I am not. How do I become a part of it? :-)
PHP + SQL + HTML + Javascript are the most critical parts. After that I would say web server config, php.ini and file permissions. Then knowing how to create CLI php scripts and set up cron jobs to run them. Final piece is to know all that plus enough Linux to be comfortable deploying the entire stack in production.
One of the best learning experiences for me was the job of building a company intranet sever from scratch. I had to install Linux, install Apache, MySQL and PHP my hand rather than a pre-built thing. It required me to learn all sorts of Terminal commands and how Linux works. I'd recommend it.
&gt; I copy/paste a lot from php.net and still googling a lot and not 100% confident with my PHP knowledge. I still feel that I'm at beginnings... I have been working with php for 13 years and you'll never shake that feeling totally. We all still google, and doubt that everyone else is better than we are. Just get shit done and don't worry about what you think you know/don't. IMO, jump into laravel now. Also get yourself a Laracasts subscription. Not only will that teach you about the framework but Jeffrey dives into basic PHP topics often too which will strengthen your general knowledge. Once you are comfortable with Laravel, dive into the source and figure out how it all works. There is some seriously awesome stuff in there. 
I wouldn't. It's way over complicated, and includes way more features/functionality than /u/Mrboutte will need.
&gt; the framework will just help you structure it a bit better as you go. That's kind of relative to how good you are at structuring your apps without a framework. I'm willing to believe it may be an improvement for most (because people keep saying what you're saying), but in my eyes, I prefer to lay out applications as sets of components and modules, and a framework typically encourages I create a horizontally categorized collection of classes in a big flat monolith. I use frameworks, but I have to suppress every thing the manual and API suggests I do, in order to maintain good project organization.
JavaScript. Also I have some doubts that your visitors really care that much to see the counter go 1 up, because they clicked the download button.
&gt; right now it doesn't allow multiple connections to MYSQL or PGSQL, and you as the developer are responsible for closing all or any open connections that you create. Well that's worse than vanilla PDO :P So... thanks? In as more serious note, you say you did this to learn, and that's commendable. But your project is less of a PDO wrapper, and more of a PDO factory, which creates an extended PDO instance, which... I'm not sure why you extend it. All you do is defer initialization (the connect()) method, which seems dangerous, because until then you have access to all of PDO's public methods, without its constructor having run. I wouldn't be surprised if this might even crash PHP in some cases. 
You use what you need and ignore the rest.
If you PM me an email address, I'll get the admin to send an invite to the channel :) 
i never used Sonata before, but seems like Sonata has more features than EasyAdmin. On the other hand EasyAdmin is really easy to configure # app/config/routing.yml easy_admin_bundle: resource: "@EasyAdminBundle/Controller/" type: annotation prefix: /admin # app/config/config.yml easy_admin: entities: - AppBundle\Entity\Product - AppBundle\Entity\Category - AppBundle\Entity\User with that configuration you have ready to use Admin Panel on */admin*. i recommend you to see this https://github.com/javiereguiluz/EasyAdminBundle#your-first-backend
Why would you call it "vanilla"? Laravel is built on top PHP, not by using extensions or something.
As I commented to OP, it's not even non-"vanilla", Laravel is built on top of PHP without any modification/addition to PHP itself 
https://knpuniversity.com/tracks/php
I second the AJAX approach. Makes it very easy to update the page without refreshing. Udemy has got a free course on AJAX available right now.
I know how to properly configure Sonata so that's not really an issue. Sonata is quite heavy though so that's the biggest downside for me. Will check Easy out as it seems much lighter, thanks :)
Just update your counter with javascript when someone clicks the button, no ajax or query is needed. The user sees a +1 when they click the button so it's all fine. After a refresh the number would be the same (or higher if more people downloaded the same file).
A few months ago I switched from a standard 1920x1080 monitor to a 2560x1080 ultrawide and I have to say there is no way I'm going back. All this extra space is extremely valuable while coding, now I can have my web browser window side by side with my IDE and code without having to scroll horizontally all the time.
and any other kind of logic, but it does teach you facades. :3
Says the arrogant programmer nerd who still hasn't learned the basics in the span of 15 years. You have literally pissed the best years of your life away.
I think when people say "vanilla" these days they mean start with a plain .php file and start writing *everything* themselves. It is really more framework vs. no framework
Now as far as I understood..there was an issue Fabien was describing..that there are many bundles for the same functionality and it is hard to decide which one to choose, so you will be able to choose of course which one you would like to use..but if you just run install Admin than it will select the one they marked as the default..so in this case you get an added value because someone made the effort to check and decide which one is the one Symfony would recommend..but I am going to watch(if it is already available) his talk because I can't really remember properly :)
**B L O G S P A M**
&gt; a framework typically encourages I create a horizontally categorized collection of classes in a big flat monolith. Which framework encourages that? I don't think a Framework will encourage or discourage anything about your architecture, just as using no framework wouldn't. Symfony, for instance, has Bundles which you can create to split your code into in order to separate concerns, but they're completely optional to use, because the framework shouldn't and can't know anything about your business logic.
Well, professionally, it matters a lot, because thats the key to fast things - using low level languages where it matters and using pure programming languages instead of frameworks where it matters. Not even intel core i999 99 thz 512 core cpu will help if you will start writing all the stuff on the most high level stuff available, and will be basing other work on that too. Lets say, you rewrite linux kernel in php, and use it on your webserver, where all the sites are running on java. sounds nice, huh ?
The .lock file is highly controversial. We don't commit it, but instead force specific package versions in the composer.json. Less pain overall for everyone involved.
@Khronicka You can not say it as blog spam, it is the content which I have written after thinking. 
Build the WHERE clause dynamically. I've heard people say "never build SQL queries by string concatenation, always use parameterized queries." but this is a common case where you need both. Make sure you still use parameters. There are lots of ways of doing it but here's a rough untested example. $sql = 'SELECT id, name, city, etc FROM People'; $where = []; if ($nameFilter !== null) { $where[] = 'name = :name'; } if ($cityFilter !== null) { $where[] = 'city = :city'; } if (!empty($where)) { $sql .= ' WHERE ' . implode(' AND ', $where); } $pdoStmt = $pdoConnection-&gt;prepare($sql); if ($nameFilter !== null) { $pdoStmt-&gt;bindValue(':name', $nameFilter); } if ($cityFilter !== null) { $pdoStmt-&gt;bindValue(':city', $cityFilter); } $pdoStmt-&gt;execute(); That looks a bit messy or awkward in that I'm testing the filters twice. There are other ways to structure it. Query builders like in Doctrine DBAL can be a nice choice too. A bit off topic but I used to do the same sort of thing with MSSQL. I think it's much better than trying to do something like this (from years ago, hoping I recall the syntax): WHERE (@nameFilter IS NULL OR name = @nameFilter) AND (@cityFilter IS NULL OR city = @cityFilter) I think that achieves the logic but query analyzers / optimizers don't handle it well and indexes are often not used resulting in full table scans. Maybe it's better now but that's how it used to be.
How does it do that?
it's a marker interface pattern, dude :)
- intro too long - music should stop at end of intro - you're targeting absolute beginners, but then throw in technical jargon that they will not understand; "string", "concatenate", "scope" etc. - likewise, you start throwing in constructs like loops etc. to demonstrate how strings work, but this will just confuse the issue. - don't ever teach people about the global keyword. It will set them down a bad path. Furthermore, this has all been done (to death) before. The internet does not need another basic PHP tutorial. What it does need are tutorials about more specific aspects of the language and its use. I would recommend finding some niche areas that you understand well and putting those into videos to help intermediate coders. ps. Your accent is fine and easy to understand, although English is my mother tongue; it may be more difficult for people with English as a second language to understand, but I am not qualified to comment.
Check out paragonie/easydb. The 1.x releases are 5.x compatible.
English isn't my mother tongue, and your accent is fine. But I do agree with each and every points of /u/ifpingram. I would also quote /u/CitrusMurder on another post about a [PHP tutorials for beginers](https://www.reddit.com/r/PHP/comments/5o3bur/php_conditional_statementsifelseelseif_and_switch/dcgb740/) : &gt; While this subreddit is visited by beginners, they're beginners in terms of more advanced topics like architecture, OOP design, use of complex PHP extensions and libraries. I.e. things which the PHP manual doesn't cover. &gt; I seriously doubt anyone ever would come here not knowing what if/else is. So my feedback is that any articles/tutorials should assume people reading them know how to write basic code. &gt; As a general rule, if the manual explains it, there's no point in writing a tutorial about it. Don't think about posting absolute beginners content here, you'll just piss off people (which will see it as self promotion), and not find your real viewers. Find a badly documented or really intricate/powerfull library you use (and in interesting one / still alive), make a tutorial about it, post it here and propose it as an introduction on the library's github page. That will create real value. Not another programming 101.
This is good advice and I'm not sure why I wasn't in the correct mindset from the get go. But hey your advice is really helpful Thanks.
I'm a sucker for good content about technologies I don't even use. Just like to see what others do and how. If you do one good article, we will be even \^\^.
dude there is no contract because it's a marker interface, that's how it works
Yup, I agree
Yeah you're right it was a bit vague. What you've said here is precisely the point I was getting at regarding potential for collisions.
Every single class „implements” this interface, since it has no methods. What guarantee does it give you? What difference does it make?
Would $where be injectable here?
&gt; That looks a bit messy or awkward in that I'm testing the filters twice. That's easy to fix: $sql = 'SELECT id, name, city, etc FROM People'; $params = []; $where = []; if ($nameFilter !== null) { $where[] = 'name = :name'; $params[':name'] = $nameFilter; } if ($cityFilter !== null) { $where[] = 'city = :city'; $params[':city'] = $cityFilter; } if (!empty($where)) { $sql .= ' WHERE ' . implode(' AND ', $where); } $pdoStmt = $pdoConnection-&gt;prepare($sql); $pdoStmt-&gt;execute($params);
You really are an idiot.
This is a great idea, made rven better by the fact you develop it in the open. The name is terrible, though.
Symfony Flex will be properly introduced to the community in the coming weeks, but the product is not necessarily focused on newcomers. It's a tool to "compose" Symfony projects by adding/removing features easily. The idea is to have a minimal core and add/remove features as needed (mailers, backend generators, serializers, forms, etc.) For some features there will be just one alternative available (for example, only the current SwiftMailer for the mailer) but for others there will be several and you choose the one to install (e.g. Sonata and EasyAdmin for the backend).
&gt; All you do is defer initialization (the connect()) method, which seems dangerous, because until then you have access to all of PDO's public methods, without its constructor having run. I wouldn't be surprised if this might even crash PHP in some cases. It would be interesting to see some examples or solutions you have to this issue. I would use straight PDO, but all implementations I have seen use this concept of a class that extends PDO.
&gt; It would be interesting to see some examples or solutions you have to this issue. You should first define what is the issue you're trying to solve by extending the class, because PDO works fine as it is. &gt; I would use straight PDO, but all implementations I have seen use this concept of a class that extends PDO. Seeing something happen is not enough to start imitating it. You need to know *why* they are extending PDO. Sometimes the reasons will be smart, sometimes they won't be. But the chances you'll accidentally solve a problem that those you follow did, without knowing what it is, are basically none.
Clearly https://laracasts.com is far and away the correct answer. :)
What does it offer to solve this particular problem?
could you suggest some solutions to the issue you see?
No.
~~Yes, just call the PDO constructor in your Connection constructor, or directly produce PDO instances and remove Connection.~~ ~~What you may have seen others do is lazy open connections, but this requires a lot more work that you did. I.e. wrapping all methods with checks, and opening the connection on demand and so on.~~ ~~Or ideally don't extend PDO at all, compose it (have it as a protected property), and expose a simplified interface.~~ EDIT: Wait I thought this is about my other comment. The solution to the "closeAllConnections" issue is to remove the method, because you can't make it work like this. If you wrap PDO and unset it internally, yes, but that's not what you're doing. You're extending it.
Your method promises to do something it can't: $foo = $connectionManager-&gt;getConnection('foo'); $connectionManager-&gt;closeAllConnections(); // Won't close all connections. Foo is still around. Either you should rename it something like "closeUnusedConnections", or wrap PDO so it can be closed while someone still has a reference to the wrapper, or remove that method entirely.
It offers a statement builder that keys you craft conditional queries.
One thing that really annoyed me about adding this framework, were the errors were not as concise as Vanilla PHP. So you end up not knowing if you are just doing bad PHP or bad Framework functionality at times. Pretty soon after seeing the framework screen of death super dump you want to smash your monitor.. you have been warned. 
Do you mean repcached? How do you mirror the service? 
Abstraction isn't modification... I consider non-vanilla as extended and modified
[removed]
More terrible, SQL injection vulnerable code that thankfully won't run on PHP 7.
STAHP! Not 1. Not 2. Not 3. But at least 4 videos of code that won't work in PHP 7. You should really just post 1 link to your channel to reddit, then you'll only get a fraction of the downvotes.
Used to happen to me all the time. Now it doesn't. Not sure what changed - maybe an upgrade. 
I'm on the latest version. I want to say that I've seen it since version eight
Yeah, it happens a lot in symfony projects. It always makes me double and triple check my code
Yup, my hack is to clear the line above or after and it resolves itself (but you've demonstrated that in the gif).
I think this is for people who know nothing about programming or logic in general. However, those diagrams are nice for that case
As much as I agree with you, it's just your personal preference. It's like saying “just write a book” to someone who’s making a movie. Or “write a cookbook” instead of making a cooking show. The point is OP chose a format so you should comment on the content, not tell him to change the format.
&gt; Having said that, in the last four years a professional PHP dev I've only done unit tests a couple times. Companies refuse to pay for the time. Which is too bad. &gt; https://lostechies.com/derickbailey/2013/01/21/you-are-not-paid-to-write-software/
I disagree, maybe not something for this category, but it's certainly not one of those bs posts.
&gt; The .lock file is highly controversial. Is it though? :) https://philsturgeon.uk/php/2014/11/04/composer-its-almost-always-about-the-lock-file/
I'm still not clear what point you're trying to make. Can you explain a bit more?
He must have a lot of bad days, check his comment history. Probably needs to get laid.
If you want to be as close as possible to a production environment, just use a second production environment just for yourself. This is possible with docker on cloud servers in a easy and automated way. To create the cloud server, you use a single docker-machine command, and after you're done, you just delete it. This doesn't cost a lot and is literally the same as your production environment. Unless your ops team consists of lizards that installs everything manually. 
Interesting. Thanks. You've given me something to look into.
I actually quiet liked it..but more because of what it can bring to the project..as Symfony will be lot more decoupled and more like a library..and you just can bring in what you really need..and of course everything is about your needs but if you just need an admin and you don't really care..that it is great that you don't need to go and look around all the options out there..now the admin is not a great example but there are really cases where you need a functionality and there are plenty of bundles out there and instead of having a look at them you rather make your own :) ..actually I see Flex as a way for Symfony to not be a robust full stack framework anymore
There's a lengthy [stackoverflow thread](http://stackoverflow.com/questions/12896780/should-composer-lock-be-committed-to-version-control) on that matter. Personally, after doing it both ways for years on different teams, I'm strongly in favor of commiting just the .json and leaving the .lock file out of VCS, just like any other build artifact. In practice, we have to pin down composer's package versions down to the patch version, because let's say there's a major YAML parser break between Symfony 2.7.8 and 2.7.9 rendering our app unusable, even if SemVer says it shouldn't have, in theory. Now, since you absolutely made sure that everyone uses the same version of your dependencies, committing the lock file will give you no benefit - in fact, it will make your day worse, because now you have to deal with noisy merge conflicts just because some hashes in the lock file differ. We got rid of the lock file. There's no added benefit.
Yes... I didnt know you could fix it by inserting a line break, thanks.
Isn't this in the sidebar? (Genuine question, can't see on mobile.)
Much Indian, much wow.
Interesting, I hadn't thought of it reading part of the word and hen erroring. 
I've been using cmd-a/cmd-x/cmd-z to fix it D:
same, works every time :D
I would recommend using Symfony with the Payum bundle. Allows you to build a solid maintainable solution with unit tests everywhere. But I guess you already have another authentication solution. You will have to integrate with it. Payum is framework agnostic. If you don't care about maintenance, cron and a few scripts will do the job of course. Learning Stripe API will be required anyway even with this architecture and it would take minimum 2 to 3 months for a junior to understand everything. There many surprising stuff like for instance the price sent to the API has to be multiplied by 100 to represent cents. It took me 1 month and a half to build a working website for payment with commission using Stripe. I have 8 years experience on Symfony fyi. Good luck and have fun ^^ it's a good experience ! 
Arbitrage sounds interesting to me. It seems both simple and complex at the same time. 
Exactly. These are my thoughts, as well. And: I taught JavaScript to non-IT folks, and variables are one of the most difficult topics. They have no idea **why** we need variables in the first place. They don't even know that a computer is the simplest thing ever. The idea that the programmer has to literally tell it every little thing to do is beyond most civilian's scope. They **see** the computer doing all sorts of "simple" things (like fetching webpages), with no idea about the millions of levers that are being pulled to make that happen. Consider taking a step back: What **is** programming, and more specifically web development? What's actually happening behind the scenes when a webpage is gotten? Not the gory details, of course; rather a basic overview of what's going on. If they're still with you, then you can begin to drop core programming concepts like variables on them. Good luck!
Just tried this now and the ignoreFiles doesn't work. Here's what I used: &lt;projectFiles&gt; &lt;ignoreFiles&gt; &lt;directory name="app/third-party" /&gt; &lt;/ignoreFiles&gt; &lt;/projectFiles&gt; Where `app/third-party` is relative to the directory I ran psalm from (my project root). I think I'm having the same problem with using `&lt;directory/&gt;` directly in `&lt;projectFiles&gt;`. According to the wiki psalm should check the files in that directory, but that doesn't appear to be happening. For example if I run `psalm app/*.php` I get results, but when the XML has `&lt;directory name="app" /&gt;` there is no output. Maybe I'm misunderstanding what that is supposed to do?
You need to specify at least one directory to scan though – it won't add the current directory by default. This example config for Symfony omits a single directory: &lt;projectFiles&gt; &lt;directory name="src" /&gt; &lt;ignoreFiles&gt; &lt;directory name="src/Symfony/Bridge" /&gt; &lt;/ignoreFiles&gt; &lt;/projectFiles&gt; 
Thanks for the advice. I think I might just end up doing both. 
While we're on the topic of PHPStorm bugs. Does anyone else have issues with PHPStorm CLI tool? `pstorm my-project` works. But if PHPStorm is already running and I try to open a new project, it just focuses on the PHPStorm window. It doesn't open a new project.
I gave the most simple example of arbitrage too! One step above that is triangle arbitrage. It involves 3 exchanges. Even with that simple example, there are a lot of unknowns in the beginning. What if you execute one trade on the first exchange, but then the second trade on the second exchange fails because the API times out? What if you execute the first trade, but by the time you execute the second the orderbook for that price point is dried up? Fun project though! : )
I didn't hear about composer until I was using one of the final versions of kohana. By the time the last version of Kohana was released, composer was popular enough that it had become a defacto need-to-have dependency (which kohana didn't use by default). That was what I remember, vaguely.
First time I heard about composer was back in 2012. When Laravel 4 was released.
I'd say it really started gaining popularity around the time Symfony 2 came out, so around 2011-2012.
Why did kohana die?
When did Laravel get really popular?
I first wanted to try it in 2015. That is as far back as my personal knowledge goes.
[Here's Google Trend](https://www.google.com/trends/explore?date=all&amp;q=php%20composer).
It was v4. So 2012-2013
[removed]
Ah. Another article with no substance written specifically for seo purposes. 
https://www.google.com/trends/explore?date=all&amp;q=php%20composer,packagist,symfony%202,CodeIgniter,Laravel to give some perspective...
If you have still have a prepared statement hanging around it won't close either.. it's a (very) long standing issue in PHP. I had trouble adding the close method in the core doing this, (though i am not a c coder perhaps it's easy) adding the close method in the core was pretty easy.
Not necessarily, hands in India are cheap. There must be a checklist circulating amongst these calamity agencies listing /r/php and they do without thinking it twice, as pretty much all of what they "code". 
i'm just having a hard time grasping how it would work, when using post forms and the like, with all the filenames and engine handlers just mvc in general just seems really unnecessary, i don't see the point
Oh, good tip!
For me personally when I look at a project I assess two things: (1) how many steps does it take to install (or any other prior requirements) and (2) how can I use it? So a small example of how one could use your library would be really useful. It doesn't have to be extensive, just a few rules to get started! I just saw that you've updated the getting started page, nice! Maybe you could copy one of the examples to the Readme? In other words, no critique on the library, just some suggestions to 'sell' it a bit better :) 
I never do pstorm my-project, I always do 'pstorm .' which opens the current directory in a new phpstorm window. I had the problem you describe when after I updated my phpstorm and just needed to re-create the launcher tool. Go to Tools -&gt; Create Command-line launcher to make sure the launcher script is up to date.
I guess because the link says : &gt; But parse_url contains many bugs and shortcomings like: &gt; &gt; not being able to correctly parse an URL according to RFC3986 &gt; mangling URL components &gt; having even more bugs and quircks &gt; 
"without the need to use the command line" ... Byebye Cake.
We techies know the tradeoffs we have to make during development: You have to know when to sacrifice speed in order to have a maintainable, good quality, software. When to give up quality to have that super fast background task. Or when to just spend money and add more nodes to your platform. Fast, good, cheap. Pick any two.
How would test a database connector API using Travis ? Context is: * I have three drivers; * 2 are PostgreSQL, 1 MySQL; * 2 are using PDO, one is using an extension. I'm already using PHPUnit with a single test suite, which runs all of them, using environments variables to retrieve database DSN, usernames and passwords for each Driver. I'd like to have this a bit more parametric because the real need is: * testing both PostgreSQL drivers with 3 or more different PostgreSQL versions; * testing the MySQL driver with 3 or more different MySQL versions. I am considering the following: * using docker to mount one machine per database to test; * mount those using a custom sh file that will map host ips on something known/hardcoded I can reuse; * defining one test suite per database (version, connector) to test in my phpunit.xml file; * running or not those suites depending on environment variables that were created by the sh script above. My problem is mostly phpunit: I'm not sure I can force it run the same TestSuite/TestCase(s) more than once, it seems to skip some when the same class is used twice. I'm opened to any suggestions, even completly change the methodology above, thanks in advance. 
Sweet! 
You know you can still use the command line right?
As a fellow tech YouTuber (shameless plug: https://www.youtube.com/c/theskaterdev) I like this. I'm all for more video content and explanations but do generally agree with people here that say you need to dumb it down for beginners which is something I also find really hard to remain mindful of. I think for people learning programming, the hardest thing to get to "click" is the abstract things we take for granted. Overall I think it's great you're starting a YouTube channel. Just keep it up and keep pushing videos out. There are people that really dislike video as a content medium and prefer articles. There are also people who hate articles and reading blog posts (me included) and I love consuming video so don't be put off by people saying it's the wrong medium, this is purely personal preference. If video wasn't succesful then Laracasts wouldn't be as succesful as it is. Good luck, any questions do PM me! :)
Yeah, the devil's in the details for sure. I'm going to see what I can build to take all that into consideration. Thanks for the idea.
Fairly accurate.
Here is better: https://www.google.com/trends/explore?date=all&amp;q=php%20composer,packagist,symfony,CodeIgniter,Laravel
You can pause videos; so you can go at your pace :P I myself am a visual learner, so seeing it in a video is nice. That being said, your point is valid about skimming being easier in an article.
Bit of a nitpick but Laravel 4 was released in May 2013.
Well the code is not a complete bloody mess, so it's definitely not idiomatic PHP! :D
'bout time 
Nice work. Update the reference to config.py as it should be config.php. Looks solid otherwise 
Laravel Capsule is just a global database object ?. Why you don't use php-di and php definitions?
Just so it's clear: This account is 25 days old, it's safe to assume it's a troll account.
Is that preferrable to running: &gt; sudo nginx -s reload This just tells the master process to verify and reload the configuration files and instruct older processes to shutdown. I think this is more in-line with what /u/tobozo says here: &gt; the first being the possibility to change those rules in a .htaccess file without reloading the server
Ah ok sorry, ticketed that issue here: https://github.com/vimeo/psalm/issues/62 Will have a fix momentarily.
PHP is a poor choice for building an API when you have things such as GO and Node.JS
Can you please share your thoughts on why PHP is inferior compared to those languages? 
Software developers have been implementing key signing since the 80's (that I'm aware of, so maybe even earlier) so maybe welcome to the 1980's would have been a more factually correct. The reason I mentioned 2008 was the first time I had an issue with key signing and really understood and read into what was going on when using Windows Server 2008 It's amazing Wordpress (being the size it is) has only just decided that its a good idea, regardless of what language its written in.
&gt;The main reason why this will not be implemented is performance. Where did you saw that? I always thought this was because it was unneeded in a dynamic language like PHP: class Foo { public function polymorphicFunction($x) { // Do something } } class Bar { public function polymorphicFunction($x) { if (is_string($x)) { return $this-&gt;polymorphicFunctionWithStringArg($x); } return parent::polymorphicFunction($x); } public function polymorphicFunctionWithStringArg(string $x) { // Do something else } }
I would say [this](https://www.opulencephp.com/) is the modern remake. Kohana just made some necessary CI improvements (configurable regex-like routes and an orm etc) and an effective module system allowing you to extend all the important bits of a framework under the weight of a massive amount of inefficient code (not django massive, but still a lot).
Ok then you should add also nbproject, *.DS_Store, .project, ...
I've been cloning the private repo (had to set up 'the system' as a user with it's own authentication key pair...) caveman style with the files just in the filesystem at that point and loading it with composer via: "autoload": { "psr-4": { "$PROJECTNAME\\Src": "app/src/", }, "classmap": ["$PROJECTROOT/dal/generated-classes/"] }, "autoload-dev": { "psr-4": { "$PROJECTNAME\\Test": "app/Test/" } }
If you want to be a competent developer, you absolutely must know about your technology stack. From the language itself to ancillary technology to service configuration to operating system, tooling, networking. Frameworks are one of many tools on this stack. This is what separates senior from junior, not the amount of years you've been working. 
How about adding an index or something browsable, just to encourage initial exploration of the app? The placeholder hints were useful, but an index would fill out the initial empty areas of the page and provide a starting point to poke around.
Slim seems like a nice framework to get you started! I've written a plain API in PHP 5.4 (a long time ago, apparently) and it wasn't too pretty. I'm not a fan of huge things like Laravel so thankfully things like Slim exist!
Shhh, now everyone on this sub knows that I write Python too! ;)
You should learn to use classes. It's truly not that complicated. Push yourself.
That's a really good question. A cleaner solution would probably be to use the Pimple container that the Slim app runs within, and add the database to that. I mean, we've already got access to the container too. I wasn't really thinking about that at the time as I was debugging and dealing with the weird ExceptionHandler issue that I mentioned in the post and I guess once I got around to wrapping things up, I had forgotten about moving the Capsule into the DI container.
I've just never seen the use case for them, I can't really learn stuff unless I need it in a project, and this is just insane. I don't see the functioning logic behind it at all
PSR4 / Composer: https://www.youtube.com/watch?v=VGSerlMoIrY
&gt;[**PHP PSR-4 Autoloading Made Easy [17:16]**](http://youtu.be/VGSerlMoIrY) &gt; [*^Codecourse*](https://www.youtube.com/channel/UCpOIUW62tnJTtpWFABxWZ8g) ^in ^Education &gt;*^27,668 ^views ^since ^Oct ^2014* [^bot ^info](/r/youtubefactsbot/wiki/index)
Anyway good luck with the tool. If Nything it looks really really well, way cooler than other autoinstallers I saw.
* Use the PSR-16 CacheInterface instead of your own definition * file_get_contents($url) -- use context with a reasonable timeout (like you did for your SoapClient). Better yet, switch to curl, url fopen may be disabled for security reasons. * ip() makes no use of cache, calling an external service every time * it's better to store country data in an external config (json?) simplifying updates and caching * many methods can be simplified, e.g. europe() might call array_map() once, then store data in a static field
[removed]
To my knowledge that's the same command, one is just run through service. I could be wrong though. Just like on arch you might run: sudo systemctl reload nginx
This is a very specific use-case where you need extreme performance. **A far majority of sites do not need this.** Additionally, it's possible to scale huge php sites - example [youporn](http://highscalability.com/blog/2012/4/2/youporn-targeting-200-million-views-a-day-and-beyond.html). Before you start worrying about performance, figure out what you're most comfortable with and can build it fastest in. If you start running into performance problems, then you're probably at the point of making enough money to deal with it. 
You can always just redirect the old domain name to a better one. 
Sadly, jsonvat.com (the webservice used by this library) is not really up to date. Romania for example changed the vat rate from 20% to 19% this year. There has been an open pull request for almost two weeks: https://github.com/adamcooke/vat-rates/pull/30
You should ask this on the Windows PHP users [mailing list](http://php.net/mailing-lists.php).
This is going to be using Ed25519, which is an elliptic curve digital signature algorithm based on Twisted Edwards curves (which are easy to implement in constant time) and uses SHA-512-256 (SHA-512 truncated to 256 bits) for deterministic nonces (so no PS3-style ECDSA meltdowns). Yes, GPG signatures would be a good fit, but Ed25519 is well studied and, if sodium_compat passes its third party audit, this use of `crypto_sign_detached()` and `crypto_sign_verify_detached()` will be in line with what e.g. GPGv2 offers (sans the PEM formatting dance).
MongoDB does that because they don't want to synchronize a counter between database hosts. If you have access to a synchronized counter, such as an auto_increment column, use that. Instead of falling back to uniqid, fall back to the id. No harm in having doc_id=id per default.
A recent internals thread on this topic: https://externals.io/thread/476
As others have said, it's not really possible nor necessary to have method overloading in a dynamically typed language, but... one feature that could be added (not saying it should be though) are _guards_. So you would could write methods like this: function foo($bar) when ($bar &gt;= 100) { } function foo($bar) when ($bar &lt; 100) { } function foo($bar) when (is_object($bar)) { } I doubt we would ever see anything like that, and PHP's function signatures are already getting a bit convoluted, but I thought I would leave this comment as a nod to guards.
&gt; The method that's being proposed here, in contrast, is a lightweight compared to PGP / CMS. The algorithms are fixed. What happens if, five years from now, a weakness is found in the Ed25519 curve? The most likely outcome is a surge in demand for post-quantum cryptography. When this becomes likely, I'll update the code to use both Ed25519 and SPHINCS (separate headers). &gt; What happens if a newer / better curve is identified and becomes all hip and trendy? Unlikely. See RFC 7748. &gt; Is WordPress 4.7.x to 5.0.x signed with Ed25519 and Wordpress 5.0.x+ signed with BrandNewCurve? No, what would happen is that 4.7.x and 5.0.x would start receiving headers with both signatures and the code would either verify one or both, with the later version ignoring the less-secure curve. &gt; Are version ranges for the various algorithms going to have to be hard-coded in the code? Seems like a better approach would be... get the signature, look at the OID of the algorithm used to make the signature and then use that algorithm on the signature. That'd eliminate the need to hard-code the version ranges. The header proposed specified Ed25519. There's no reason we can't send multiple headers.
Ahh, yea this [ServerFault](http://serverfault.com/questions/378581/nginx-config-reload-without-downtime/378585#378585) answer says the same. Looks like the NGINX service considers the two to be the same(or similar).
Commerce Guys also have a project that deals with this kind of problem: https://github.com/commerceguys/tax
- Other compiled languages have optional and default parameters too, but still have overloading. - How it's covering use case when you want have two methods with different argument types with one argument without some dirty hacks? - In other languages this is not a problem - As i told - both are dirty and bad way imho About backward-compability - that's why im talking about JIT, and probably something like PHP 8. We already have type-hint in method arguments, so why not introduce same methods but with other arguments type? This could be mostly great for some frameworks/libraries etc, that you could add new method with same method but with changed attributes and everything would just work without breaking any BC.
Other languages have default/optinal parameters too and have method overloading. Default values is not workaround for method overloading. Method overloading is mostly about have same method two times with diffrent argument types etc
true, but my point was that I consider them are a means to the same goal. Have you found a use-case where you really required method overloading and could not solve it otherwise? Don't get me wrong, having them would be nice. But I much more prefer other additions/changes above having method overloading (Generics would be one of them).
You could have written the VAT import part as a [Porter](https://github.com/ScriptFUSION/Porter) [provider](https://github.com/provider), if you had liked. That might have saved you some trouble, given you durability benefits and provided a reusable VAT import component for use in other projects.
&gt; Other compiled languages have optional and default parameters too, but still have overloading. Sure. The point is that when you have these, there is less need for overloading. &gt; How it's covering use case when you want have two methods with different argument types with one argument without some dirty hacks? Make two methods. There's nothing dirty about it. &gt; In other languages this is not a problem No, it is a problem in other languages too. Perhaps they think it an acceptable price to pay, but there's still a price. &gt; About backward-compability - that's why im talking about JIT JIT has no impact on backwards compatibility. It is neither here nor there. &gt; probably something like PHP 8 The ability to break backwards-compatibility does not solve the problem that overloading does not fit neatly into the existing language. You could change the rest of the language so overloading fits better, but now it's quite a different language and a great hassle to upgrade. So, unlikely to happen. &gt; This could be mostly great for some frameworks/libraries etc, that you could add new method with same method but with changed attributes and everything would just work without breaking any BC. You can already do this. By adding a method with a different name.
Value added tax. Basically it's the European version of sales tax
Not bad. Now do this: http://ec.europa.eu/taxation_customs/business/vat/eu-vat-rules-topic/where-tax_en :)
Sounds to me like an architectural problem. What is so special about that single post that would warrant completely separate permissions? Even further, why would you want separate permissions for different field inputs?
It's required in every EU country if you are selling digital goods (and some other things). The MOSS (mini one stop shop) part is the UK's system to try and make handling paying the VAT easier on businesses, as the EU rules require the VAT to be paid directly to the country of the purchaser, rather than the seller. VAT MOSS lets you just pay it all to HMRC, and they then distribute it to the correct countries based on your records, so you don't have to register to pay tax in every EU country yousell to. 
I don't think JIT will make any difference: it's not a performance issue AFAIK. And honestly, unless your method is called 100K times it doesn't matter, we are talking of nanoseconds of diff. If you app is that performance critical, PHP is likely to be unfit in the first place, as any scripting language.
Don't hear much people talk about cake php here.. I wonder why that is.. 
Thanks David, BTW your videos are awesome.
So first, this library actually uses the BCMath library internally for performance reasons. Second, this library provides an OOP wrapper that makes working with the library fluid, easy, and semantic. Third, this library provides trigonometry functions, like sin, cos, tan, cot, sec, csc, arcsin, arccos, etc., which are simply unavailable in the BCMath library. Fourth, this library provides log functions (both base10 and baseE), which are unavailable in the BCMath library. Fifth, this library allows you to do math in any base you want, not just base10. Sixth, this library allows you to do decimal exponents on powers (like 5^1.24 and so on). Seventh, this library allows you to work with fractions instead of decimals, including things like simplifying fractions. Eighth, this library provides statistics distributions (things like bell curves for instance) that you can use to do complex math, or even generate random numbers. For instance, suppose you have a distribution of test scores, and you know what the mean (average) test score is, and you also know what the standard deviation is, and you want to make a random number with this distribution where the chance of any number is weighted according to the distribution. This library makes that very simple. Ninth, this library allows you do sums of Taylor Series, Maclauren Series, and other kinds of series to arbitrary precision, something there's just not even a framework for in other libraries. This is just off the top of my head. There are many small quality of life improvements in this library over the base BCMath library, and the documentation for Fermat is actually pretty comprehensive now, so you could read about it if you want to know more.
Wow that's a lot! Nice one 
Be careful with indexing, as every index slows down inserts and updates. So it is a balancing act between Read and Write performance. 
Don't know if you're being facetious or genuinely curious, but I'm actually kind of curious myself. It's been around forever, and it seems to have kept up with modern development trends well. A glance at its documentation and I'm actually seeing a lot of material that resembles examples that other popular frameworks use. I haven't found a reason to use it myself, but it seems like it's running pretty strong.
It's name dropped on here rarely, and most of those times it's referred to dismissively or even negatively. The general take-away is that most people on here think Laravel has overshadowed it in every way.
Careful with them cash or cash equivent transactions - in many european countries you have to handle them in a non-trivial special way. Definition of cash equivalent: debit or credit card, or giftcard/voucher. Depending on the place where the sale takes place this is not only true for normal tills, but also webshops (eg. Czech Republic, see cz treasury website http://www.etrzby.cz/) Currently only CZ insists on that for webshops though, but most EU countries have just published or are working on new fiscalization rules (eg. France: just published; Germany currently working on it), which carry hefty fines in case of non-compliance. So contact a qualified tax accountant. Source: Product manager of fiscal middleware
Laravel is the one true god here thats why. Jokes aside, prolly because the demographic here are mostly laravel and symfony devs? I've seen a lot of cakephp (and yii) job postings so its pretty much alive. 
Yes, by using `PASSWORD_DEFAULT` as argument, it would try to use the latest secure algorithm.
Either Laravel, or CodeIgniter, there should be no other framewerk for PHP :D
That I understand, but that is business logic. This library provides infrastructure for dealing with VAT. If it were me I would decouple the IP lookup from this VAT library and make a new one. There are already two third party dependencies (jsonvat api and the vies validation api) present and having an IP lookup only makes it more complicated. If you ever wanted to switch implementations for the IP lookup you need to refactor this library.
Hey, good points, thank you! You're right, the IP look-up is mostly in there for convenience but I'd highly suggest using a more sophisticated look-up service. However I still wanted to provide a quick &amp; easy way for people to perform a look-up because of VATMOSS compliance. Maybe a better description for the library would be "helps you deal with VATMOSS".
Again? I saw the one submitting the Romania PR for last year, have just pinged Adam to see if he can take a look at the PR. I'm sure he'll get to it quickly. Edit: Scratch that, looks like he merged it 10 minutes ago. Yay!
The method can easily be called 100k times. https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php#L880 &gt; If you app is that performance critical It's not about being performance critical. It's about having the possibility to trade development time for runtime performance, once you reach a certain scale. Not everyone thinks of PHP as a toy language. Some of us want to go in a direction where you can start with dynamic features for rapid prototyping and optimize for runtime performance when servers cost more than developer time. Hence JIT. 
[removed]
Did not hear of of Porter before and was skeptical upon reading your comment about "durability benefits" thinking it was yet another dependency, but woah, Porter looks awesome. Thanks for pointing me to it, I'll have to dive in soon!
Live was 5.6 but of course we tested on 7.0 at the time. I can't remember the exact figure but it was around a 35% increase in request per second but the biggest gain came in average response time, it pretty much halved from 5.6 to 7, obviously the opcache playing a big role here. This did how ever come with a negative affect, after reaching over 80rps the response time started to rise significantly. GO on the other hand went over 300rps without any significant drop in response time on the same hardware and its also worth nothing the number of CPU cycles where over 40% lower with GO. It's not a fair compression comparing GO to PHP its apple and oranges, GO will obviously out perform PHP in (almost?) all situations but the real take way here is using the correct tool for the job. In my opinion and from mine and many other peoples experiences PHP is not the correct choice here.
Been forced to use it a few times (for some reason the motor industry seem to love it) and it's not too horrid 3 made big leaps forward and feels a bit more Laravel like. 2 feels a lot more old Codeigniter stuff. 
If you want the fastest PropertyAccess, roll your our own instead of using the generic one :) I'm not taking PHP as a toy language, but I think the nano sec you'll lose by calling a method will make a diff. There is cases like Doctrine UoW where it matters, but it otherwise it just sounds as micro-optimization. As I and the other said (also what is given from the internal threads that have been linked somewhere), the main argument against is not performance, but that people (as I do) think there is not much value in having method overloading a la Java/C++ in a dynamic language like PHP.
But the whole point i want the same name, which obviously you don't understand.
Because namespaces or classes are too mainstream, huh?
This is what I usually do. I wouldn't argue that we absolutely need overloading just that if it's available it could lead to improvement in some cases. Now the developer using the Car API needs to know that there are multiple ways to create a new instance of car. And he might never notice that copyFrom method is available which could lead to more refactor work when the Car API is updated. Again it's not a super big deal, overloading is just the better option in this case.
True, the tradeoff should be the easy of use for the client. And it depends on the context. 
LE REDDIT ARMY XDDDDDDDDDDDDDD
WOAH, bitch. You need to take a step back and chill the fuck out, because I wasn't even coming close to trying to insult you. I was asking some questions, because I was genuinely curious about your approach, not because I was calling you a shitty developer. But if that's how you're going to respond to any line of questioning, then maybe you're beyond help. If you're unwilling to answer any kind of questions about why you architected something a certain way, then the problem isn't with your code, the problem is the fact that you're the one developing it.
For more suggestions, see [semantic method naming](http://codelegance.com/semantic-method-naming/).
I rather have the doctrine annotations
Me too, also I'm quite curious about caching in this lib.
 function x(): void {} I know, it doesn't make sense at all, but this is what we got instead of null (nothing aka void), only difference is that you may not return "null", instead a simple "return;". For types; function x(): ?int {}
Because a function that returns only `null` is pretty useless, and functions that do not return anything will automatically return `null` anyway.
`void` does make sense though. Having no return *is* different from explicitly returning a `null` value (even if the function still ends up returning `null` in both cases).
My main issue with this is that we should be able to return null instead of an object. I did not realise nullable types was merged in the same version, so we can just specify `?object`. This seems satisfactory.
There was never a construct for "void" in PHP until return types, it made no sense to use a new construct for no-value instead of null (except for maybe implementation reasons, which i know very little about, but I'm having a hard time seeing how void would be any different from null given the context). You might see "void" as a sensible construct, and I do too for other languages, but in PHP's case I do not. Null would have worked just fine, if not better since (as you already figured out) "nothing" ultimately means "null". The logical solution would have been that `return null;` and `return;` evaluated to the same thing, making `function x(): void {}` not care if "null" is returned. But that is not the case.
The problem is that PHP is a dynamic language - whether the value returned matches the return type can only be determined at runtime, with the exception of `void`. This means that for functions that *should not* return a value, `void` is better than `null` because the programmer can be notified immediately (read: at compile time) of their mistake ([example](https://3v4l.org/P2Z0m)). That's why if a function is not suppose to return anything, then it should not return anything, not even `null` (despite this being its actual return value). Otherwise, if `null` could be explicitly returned (via `return null;`), then it would not be possible to determine this mistake until runtime, since the returned value might be the result of a function call that either returns a class or `null`.
i would do that too , lumen is the best choice and you can migrate easily to laravel at any time 
&gt; I can't imagine that the VAT rates update very often. While they don't update that often in a single country, there are 27 countries, and so the actual VAT rules (especially when it comes to exceptions and certain reduced rates) need to be updated fairly regularly. As a quick example, Romania has just cut it's rate down for 2017 after doing the same last year, and Croatia has announced at the end of last month that will be lowering the rate to 24% in 2018 - there have been lots of other changes to product classifications as well, but they mostly wouldn't affect this library. You really need to be updating these rules weekly at least, and shops with a lot of traffic would probably be wise to do it daily. I think perhaps /u/dvk0 could cache the rules in some form of local config, but have an Artisan command to update them that can be scheduled, or a similar mechanism to update them regularly without requiring a `composer update`. You wouldn't want to find that you've been charging the wrong VAT rates for several weeks or even days (depending on your traffic), simply because you haven't updated your libraries.
The article is wrong on multiple points, assigning metadata information to objects does not inherently break single responsibility principle, liskov substitution, encapsulation or any other stuff. As with any other technology ever it can be used for the good or for the bad depending on the man using it. Biggest problem is we had to devise the way to assign this metadata to the class methods ourselves. Give me way to assign that metadata in any coherent way and I swear I will never taint doc blocks with my filthy annotations ever again.
Technically, maybe nothing. But the disconnect between expectations and reality indicates that *something* is wrong, even if that's merely naming conventions. It could also be more sinister. There's no one answer; you need to look at actual code to say what the issue would be if one exists at all. But it's not a mistake that the inverse (ignoring a return value) is flagged as a warning if not a compile-time error in some languages. 
So language native annotations? I rather not wait for that :)
You nailed it. Either it is void (meaning there is nothing to check for, as it cannot return anything by definition) or something and nullable (null is a sub part of the possible return types).
It seems to me, that you probably want different objects for your roles, that way you have some control over how data is managed directly in the model. Maybe extend `Team` and change and write simple functions to alter the data, and instead of procedurally checking permissions, you can just load the appropriate object instance.
PDO is flawed in many ways, but I don't think patching them piece-meal into the existing PDO is bringing a lot of value. I'd rather see a new interface for DB interaction, but we won't. So it's back to wrappers, where we can already implement our own disconnect() method. It becomes an implementation detail that's hidden into the wrapper. Of course, if it's implemented... then so be it.
Discovering hot water again, are we? The `withAttribute()` is perfect for passing on routing stuff, such as, for example, "current page entity". Can most probably be clarified on the interface itself.
I never understood why Immutability should be part of the spec. In my POI it can be up to the implementation with some of them being immutable on some others not.
Immutability in PSR-7: a solution in search of a problem.
I actually have a problem with sodium_compat being pushed like this right now, especially to something as widespread as WordPress * The library is in its infancy, it's immature. * It is based on an uncertain API; the RFC to bring libsodium into PHP core is still under discussion and I am fairly certain the API will change. * It contains a lot of functionality irrelevant to the task being performed. * It is maintained by one guy (yes, bus-factor is an issue) * It is a cryptographic library written in userland PHP. There are enough existing crypto primitives to build the proposed system without it. These primitives may not be state of the art, but they are still valid and have had far more vetting and scrutiny than the implementations provided by sodium_compat. I have to call the code here a new implementation even if it is based on prior work. It is a unique, distinct interpretation of that work and does not hold the same security guarantees. I know that a full audit is on the wish list but I honestly believe it cannot pass inspection. It runs inside the PHP VM, an ever-changing soup of code, full of (version-dependant) extensions, hooks, optimisations, quirks, bugs and so forth. To genuinely certify this library as secure would require an audit on every version of PHP capable of executing it. I cannot recommend an alternative userland library, they all fail to the same above set of criteria. I am aware that not all PHP installations are created equal, and the lack of some compiled extensions means this feature cannot be implemented universally without userland code. I still recommend against it. Sorry Scott, I know you're putting a lot of work into it, but I really feel that it is far, far too soon. 
Unless I'm missing something the spec says attributes (i.e. values the dev sets) are mutable and the message (i.e the user request) isn't.
Man, I'm having a very hard time understanding this description. &gt; My Android app makes an http request to, for example, ~url~/category/1. It returns a json encoded response (from php) of basically, "SELECT * FROM subcategories WHERE cat_id = 1 ". On my php-based website, I need the same data if you click on an a category, it will also go to a link of ~url~/category/1. Clearly I will need two different router files. Correct. The idea is that you would treat each controller as an adapter between your HTTP Requests and an internal API. The controller's responsibilities are in turn often handled through delegation. ie: Validation of the HTTP request and returning either a JSON/XML/HTML response. &gt; I guess (I'm new to MVC), and it will return a View of all of the subcategories. I guess what I am getting at -- and as I am typing this, realizing -- there doesn't seem to be an efficient way to get the same json_encoded response the app backend uses for the website. Consider moving your CRUD operations into a separate internal API service (see: Repository Pattern) ie: Repositories\MySQL\Categories:getById($categoryId); This should allow to to reduce the amount of code duplication. BTW - you there's no rule which states that you "need" a controller. Laravel for example allows you to pass a simple closure into your routes. Use whatever architecture makes the most sense given the complexity of your App.
Personally, for things like this, i have an api.domain.com and all the apps(web/mobile) will connect to it and CRUD the data as needed. I have never had any issues with the setup and with proper caching it works a treat.
&gt; It is based on an uncertain API; the RFC to bring libsodium into PHP core is still under discussion and I am fairly certain the API will change. The only change that might happen is `s/\\Sodium\\/sodium_/g`, if that's what is decided by the second vote. Point of order: This isn't PHP 7.2-compat, this is PECL-compat. &gt; There are enough existing crypto primitives to build the proposed system without it. These primitives may not be state of the art, but they are still valid and have had far more vetting and scrutiny than the implementations provided by sodium_compat. That will soon change. One of the main draws of NaCl/libsodium is its misuse-resistant API. With the same crypto in the hands everyone, gone will be the days of chosen-ciphertext attacks against RSA-PKCS1v1.5 or unauthenticated AES-CBC. &gt; I know that a full audit is on the wish list but I honestly believe it **cannot** pass inspection. (Emphasis mine.) That remains to be seen. You could be right, but we won't know until the audit is complete. &gt; It runs inside the PHP VM, an ever-changing soup of code, full of (version-dependent) extensions, hooks, optimizations, quirks, bugs and so forth. To genuinely certify this library as secure would require an audit on every version of PHP capable of executing it. That's a great point to mention [here](https://github.com/paragonie/sodium_compat/issues/8), if you believe that the companies I've been speaking with (to estimate costs) hadn't already considered that. &gt; Sorry Scott, I know you're putting a lot of work into it, but I really feel that it is far, far too soon. No one is going to be implementing sodium_compat until v1.0.0 is tagged, and v1.0.0 will not be tagged until it has passed an audit by cryptography experts. If it's deemed insecure and no path towards security is possible, v1.0.0 will never be tagged or released. However, if you're aware of any exploitable vulnerabilities that could compromise the security of this project (despite its consistency with libsodium), please do post them. Also, [this thread](https://news.ycombinator.com/item?id=13416913) might be of interest to anyone reading this.
 /* * @it should be backwards compatible otherwise it would break * @the space-continuum and help Skynet instead of helping us * @from being kicked out of our comments */ 
&gt; No one is going to be implementing sodium_compat until v1.0.0 is tagged, and v1.0.0 will not be tagged until it has passed an audit by cryptography experts. That's great to hear. The article included links to patches, hence my knee-jerk of "too soon". 
Right, that I get, that you don't need a controller and I could do it in the Closure. Do you see any benefit to using an ORM like Eloquent to handle the CRUD stuff? I can move the app api under the Laravel folders and use Eloquent to handle both sides. In the meantime, I can research Repository Patterns.
You can't mutate arrays with a PSR7 message, unless they contain values by reference, no? The only problem are objects.
&gt; The withAttribute() is perfect for passing on routing stuff, such as, for example, "current page entity". It's useful, but it's the kind of compromise which leaks the true intent of PSR-7: not to be an HTTP message standard, but to be middleware IO standard, which happens to be mostly (but not only) an HTTP message. If middleware wanted to have additional inputs and outputs, they could send them separately, instead of polluting the message. I.e. the proper factoring would be: $middlewareInput-&gt;getHttpMessage() $middlewareInput-&gt;getRouterAttributes() And now the HTTP message doesn't have to be responsible for middleware concerns.
I do something similar, except the site has access to the native API which backs the web API (which is identical in interface, but not over HTTP). There's no reason to make the server go through HTTP to access server-side resources... Eventually if everything grows to the point the API is on another server, then sure, but until then, you don't have to.
Domain parked, very risky indeed. 💀
If your UI/Website is PHP then you connect it to the API via cURL. If your UI/app is javascript then you do a cross domain XHR request to the api with proper headers and CORS policy. If your UI/app is native then both ios/android allows you, via swift/java to make requests to your API domain.
C has a weird implementation of this, like most stuff in C. I think true immutability (in its original sense) is mostly found in functional programming languages like Haskell or even Rust.
Well, unfortunately PHP doesn't provide a handy way of checking an array for references (I've implemented this, but it's very slow, and I use it as a DEBUG mode assertion that's off in production). As others noted, an immutable object may contain references to mutable objects, as it merely contains that reference, not the objects themselves. It's possible to encapsulate this, but not when said objects/mutable data is passed from outside. This is not as important for attribute objects, as it is for the mutable stream body, but this is a fact of life. If I have to come up with a better way to do this, I'd still arrive at a read-only server request with a mutable stream.
I did something similar, but it's nowhere near finished. What's really cool is being able to click on all types. What I would like to do is having even types of dependencies linked, if they're hosted, too. But you have to be careful with licenses when doing such hosting.
This isn't really a C quirks, it's a pretty common interpretation. `final` in Java works the same way. `const` in JS also works the same way.
Hi do you mind explaining why it's awkward for an active record orm? ... Apart from it being an "anti-pattern". I used it on an app and thought it was overkill or verbose,then I dropped it.. I'd like more insight as to why other people don't. 
I don't understand, who is this for? It downloads its own local copy of composer, so it's intended for people who have the ability to run scripts on their server, no? It doesn't let you define the installation location, nor does it make it easy to fix permissions if something isn't right. How is this better than a straightforward `create-project` command, and how is it not considered a security risk by default, given that most people who use it will be rather ignorant of best practices and probably leave this `oven.php` endpoint available on the server? Everything about this screams "no" to me - if I'm wrong please do explain the use case.
This RFC sounds like a good idea to me. If I ever saw something along the lines of the Area 51 example in the wild I would be cursing the original developer's name all day long under my breath. 
Me too. Or I'll write my own implementation if there's no need in doctrine power, e.g. just check for existence of an annotation.
That is actually very true, yes. struct Bar { x: u32 } struct Foo&lt;'a&gt; { bar: &amp;'a Bar } fn main() { let bar1 = &amp;Bar{ x: 0 }; let bar2 = &amp;Bar{ x: 0 }; let foo = Foo { bar: bar1 }; foo.bar.x = 42; } Does not compile in the first place, that’s what I meant. $ cargo run --release Compiling scratchpad v0.1.0 (file:///rust) error: cannot assign to immutable field `foo.bar.x` --&gt; src/main.rs:13:5 | 13 | foo.bar.x = 42; | ^^^^^^^^^^^^^^ error: aborting due to previous error error: Could not compile `scratchpad`. To learn more, run the command again with --verbose.
Wait, people do this? I'll make sure Psalm complains: https://github.com/vimeo/psalm/issues/68
[removed]
This has given me a great idea: PSR-s should be accompanied by official tests akin to these, which impementations could use instead of writing their own.
&gt; trust their intuition about how things work instead of reading the documentation lol what
TBF, things should work how you expect them to work whether or not the documentation says otherwise.
Oh, really? I've reopened the "support windows" ticket in the meantime, and will get to debugging tonight.
It is for developers who are not comfortable using the command line yet. Some windows users have difficulty getting command line to work. There are many use cases. We like to make it easy for people to try CakePHP and comfortable working with the code itself. This is only version 1 and the community is already actively asking for enhancements, you can see that by looking at the repo for the script. So I think it is being found useful by at least a few. One of those few could be the next big contributor the CakePHP too, you can never tell. As for it being a security risk, the README is clear it is not a deployment script. If a user does leave it on the sever the only thing that can happen is a page will be displayed the CakePHP is already installed. Click here to go to your app. This is no different than any other app installer, Wordpress comes up most in discussions. I suggest try it and look at it from a new developers point of view. The ease of install may change your mind too.
&gt; developer can immediately gain insight into what the application does. Currently my projects contains directory called `Handler` which contains all use-case handlers of the application. Something like application-level services. For example: - src/ - Handlers - User - RegisterUserHandler - RestorePasswordHandler - ActivateAccountHandler - Catalog - AddProductHandler - UpdateProductHandler - ... So basically by looking at this directory developer may found all uses-cases which application does. All this services has some limitations like: - It shouldn't contain any logic (if/for/while statements, any conditions), only sequence of actions and calls to different services/entity methods. This allows to skip unit tests for this classes (since unit tests which only tests sequence are just reimplement code under testing and doesn't verify anything useful) and write single integration test for each of them (which will just call it with some positive precondition). One note is that in order to do so all dependencies of this services should be covered by tests. - In case if you have things like mappings of requests on some kind of DTO, you may even omit controllers (by using things like ActionBundle for Symfony). This is something like ADR but... more stricter thing (actions should not know anything about responders). Currently I have also some kind of Responder services, which are binded to handlers in configs. And even if it looks like more code to write, on mid-scale+ projects this approach gives far more flexibility and discoverability (from my experience).
Definitely. I would load the object, and then use the permissions to see if the user can perform the operations. Is it wrong..?
The biggest one is probably having to support fucking PHP 5.2.
I am not sure what you are defining as bad practice. If it is making it easier for a new developer to get introduced to a framework then we will have to agree to disagree. You and I see different and I think we, as the framework development team, know how to introduce our users into development practices. It is all about tradeoffs. If we can educate new developers and get them comfortable with CakePHP, then we can start mentoring them to a point where they are comfortable doing more advanced work. Everyone has to get there somehow, you don’t just wake up and instantly know your way around a CLI, or how to resolve various installation issues. Did you ever use a web interface to setup a server? They are still in use today. I used them years ago and know many others that have. Do we still use them, no, but I will not say they are useless and promote bad practices. They made me comfortable enough to eventually take the jump into CLI only server setup. Both CakePHP versions 2.8+ and 3.x+ are compatible and tested against PHP 7. Nothing in the framework is holding a developer back from upgrading to a higher version. I will talk to others on the core team about a notice like you suggested, this could be a good idea during install or once the initial app page is displayed. Releases tagged 2.8 and above have supported PHP 7 since Early 2016 https://bakery.cakephp.org/2016/02/06/cakephp_280_released.html Releases 3.0 and above since May 2015 https://github.com/cakephp/cakephp/blob/09eb23891dc8134830f4e39e01a3a39f82935e41/.travis.yml Good tools push the envelope forward, great tools provide greater accessibility to their users.
Jeeeeeezus. I've done some pretty janky stuff before, but that sounds like a next-level bad idea.
Yes on both. Thanks! 
I'm not particularly sure why `app` vs `src` really matters, but it's trivially easy to change the folder name in Laravel, so presumably the author does that when implementing this structure in Laravel. The way they worded that paragraph I think they mean you shouldn't need both `src/` and `app/` directories, as that adds unnecessary complexity. You only need to update the PSR-4 App namespace in `composer.json` and rename the directory, as they show after they mention it. 
Congratulations! You have discovered references (and reference-like behavior). Is the wording in the PSR-7 spec too vague about immutability? Perhaps, but nobody who's used PHP well enough to have actually bothered reading PSR specs will be fooled by the fact that PHP lacks the concept of final/const. Nor will they be surprised (particularly in the resource case) that the implementation fails to pad the sharp corners of references, objects, and resources.
What? Why would anybody do that? That just looks like a bad idea...
Doh. Title should be "Has anyone used **the** vips extension?" 
This really doesn't concern routes, those can be managed at the server layer. This is a strategy for having better maintainable and scalable web apps. In projects not in this style I still maintain I would say model class code generally is about 1/4 common code, 1/4 api, 1/4 frontend, 1/4 admin. When that is a 1200+ line file that is constantly getting merged into by other employees and code gen it can be a headache. I rather add a level inheritance to reduce biz logic per class by 1/4th. This can also help in scaling when you need many variable amount of api, frontend, backend, and job servers running. When I hear a client has to redeploy to all servers to update something localized to the admin/backend or the console jobs I cry a little. 
That's a good question too! I wasn't aware of Lumen at the time of writing and my friend was using Slim. I think he settled on Slim originally and decided to leverage eloquent too, so it's the stack I was introduced to. We ran into some weird issues so I figured it would make sense to write about! Lumen looks great! I'll probably write a post that rewrites this one using Lumen as that looks to be more helpful!
Thanks, I had a misunderstanding what `-p` did in this context, but you convinced me to read the man page for it. Thank you for letting me know that there's a better way to do this.
Yes, this part needs expansion, however, it will also depends on the actual implementation. Currently I'm inclined to simply use `Error` since this is most likely nothing one ever would require control over.
How or at what point in time you call `parent::__construct()` does not matter, the point is that you call it only **once**. Hence, any if/else construct is possible and unaffected by this RFC.
The essence of this sentence goes further. The documentation of how constructors work is not even part of the php manual, one would need to go to the language specification plus – and this is more important – no normal person would ever go and read up on this particular behavior. Even Sebastian Bergmann (the guy behind PHPUnit) was surprised about this even being possible and he is probably programming php longer than most subscribers of this subreddit.
Well, in extension space developers don't _have_ to. Though many still do because marketing and because of inertia of it. But as you step away from mass market solutions there are plenty of WP code happening that is closer to modern PHP than its WP core roots.
I've found that it's significantly easier to lock down an admin panel when it lives on a separate domain and has a separate set of routes.
5.3 reached it's EOL on August 14, 2014. It is officially unsupported and should not be used anywhere. http://php.net/eol.php http://php.net/supported-versions.php
This will be the case for PSR-17 https://github.com/http-interop/http-factory-tests
Well, 98% of those high end machines with multiple monitors are overkill and a good example of inefficient work and lack of organisation and concentration/documentation. Having a simple, not overkill pc is always a good idea, because it teaches you to be efficient and to think what you are doing. You should make a solid project, write a documentation, then write the code, then compile if needed, thats it. Yes, there is always some bugs and other stuff, but that doesnt mean you need super computer to recompile your code every second. There should be a proper setup of multiple pcs for development/testing/compiling/servers. I have yet to see an efficient usage of multimonitor/overkill pc.
There is actually a difference..usually the app is used for some common functionality where else in src you have your modules e.g. blog, admin, front whatever..so if you have a modular application, than where will you put your shared code? Obviously it is not a module..so it is fine to have an app folder :)
Meh, it's not wrong but it's also not something to waste oodles of time over. Also arguing over how to build the perfect monolith seems... less than desirable.
Thanks. I really appreciate it. My problem however is just checking if the user can edit a specific group pf posts, not all posts.
Useless post.
Paul has put together a good guide on structuring. There's also this PHP League guide, which can be referenced too: https://github.com/thephpleague/skeleton
We're talking about Cake3 exclusively here. Upgrading any Cake 3 app from 5.5.9 to 7.1 is trivial, and if you give me a Cake 3 app I will prove it to you.
The repository doesn't exist :/
&gt; In relation to the introduced directory structure, you might be wondering: "What about the app/ directory?", and my answer to that is: there is no app/ directory, and there shouldn't be. And where do we put this "directory structure" in? The app directory :P. So basically there is an app directory, whatever it may be called. I also find it a bit odd there's no "vendor" directory in this layout. OP seems to use Composer, but where are the packages?
I re-read your comments and you made it very clear you were talking about PHP being easy and upgrading a framework being hard. Now are you are switching it around? I already said both versions 2 and 3 of CakePHP work on PHP 7 so users who use the framework properly can run their apps on PHP 7 with little to no changes. 
Again I will disagree with you here. I work for a company that has built many applications in the medical field and other mission critical situations it is not easy to discard these type of users. Upgrading for them is not a simple task either, I am talking about PHP versions here not CakePHP. As another commenter pointed out there are numerous reasons why it can be difficult for a company to upgrade PHP, this can take months in some cases. Anyway, our roadmap is here, the RC2 release for 3.4 is out now (PHP 5.6) https://github.com/cakephp/cakephp/wiki 
Replying to myself to keep this in thread. How many other frameworks actively support multiple versions like you can see in our roadmap? I haven't bothered to look and being lazy here, but I see this as a big plus to the team and the community. Sure this takes extra work on our side, but the community and other users know we are not going to discard them because something new comes along, we will give them upgrade paths.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
*for mac
&gt; don't know nothing I expect better from you, and this double-negative, in particular, does not cut it.
Again, it cannot take months because they had years to prepare. There is no excuse. The users should have been kept up to date all along. As a new php version came around and the old one entered maintenance mode, all users should have been told they have 2 years to update their PHP version. 2 years is enough to upgrade any app's environment, regardless of scale, and you cannot tell me that's not true. But I suppose we'll have to agree to disagree :)
Correct. SourceTree is only available on macOS and Windows, so Linux is not possible anyway. I'm pretty sure you can set it up the same way on Windows, but you'd need a .bat file instead of a shell script. Or just use the PhpStorm command-line launcher directly in the custom action in SourceTree. But I don't use Windows myself so it's hard for me to test and take into account in the post.
Symfony requires you to have a deeper understanding of the framework, which can be somewhat daunting. The upside, though, is that a good understanding of the framework and it's underlying architecture will enable you to write better code and have more control over what's happening and why.
Why do you put leading underscores for properties?
No it won't. Provide one actual reason why Symfony will let you write better code.
1) I'd disagree with this one since most of the framework teach you utterly different thereof I'm most used to that, as in it should be `resource` since it's a part of the project that is a source of supply for view-interaction operation. 2) Thats partly my dose of usage, but I'd extend those to appropriate model or architecture depending which design pattern I use. 3) Thats cool! I might start with this one.
Why would you give `bootstrap`, `vendor` and `public` FULL permission? Aside from that, anywhere you will be storing user files, like images, do NOT give that directory executable permissions. (And sublime text isn't an IDE. It's a text editor)
I follow the name space for all other folder names I don't see why the root word be any different.
My general business perspective and personal perspective are the same thing, but I'm arguing from a security perspective.
How many of you are using [Plates](http://platesphp.com/) template engine?
But what advantage is that giving me? I'm just going src/Foo/Bar rather than MyApp/Foo/Bar? lets say I have a domain specific implementation, with mine I'm just going MyApp/Foo MyDomain/Foo how do you do that with src/Foo src2/Foo ? so what’s the point? 
hi, does this package work on php version less than 7 ? 
There was a typo in the url, sorry about that. It's fixed now.
Glad people are starting to talk about this stuff. Seems like one of the more important things being disregarded as everything else gets talked about. Now I know there's a lot of people out there that don't agree or just dislike these types of threads which try to create a general "standard" for our language. That's fine, but when it comes to open source or just stumbling into some of the more modern code bases, just like a framework it makes it easy to know exactly where things are so you can just go in and code. That's why I personally have been following PSR-2 &amp; 4, getting behind TDD and just trying to overall improve as a developer not for myself but for the clients I work with and the future developers who will probably be working on code I wrote in the future from today.
speed benchmark , besides it is built for this kind of task , to solve the problem of having to use a full framework to just build a simple API ,not saying that slim is a full framework , but using lumen with eloquent is a perfect combination 
It's a personal preference and the people who shout the loudest try to 'force' their personal preferences onto others and anyone who doesn't follow their personal preferences is an idiot and doing it wrong. For me its completely over the top to obsess over a folder name in such a way.
&gt; doesn't provide a handy way of checking an array for references Yeah, it's just not there. You're right, the hacks around it are intensive. &gt; an immutable object may contain references to mutable objects (/me nods) Under some definitions, apparently. However: PSR-7 refers to its StreamInterface as "mutable", because the resource it contains is mutable. (This has been commented on rather widely; one example [here](https://andrewcarteruk.github.io/programming/2016/05/22/psr-7-is-not-immutable.html)). The spec notes an exception to message immutability for it; that is, the message is supposed to be immutable except for the stream, which is mutable. So the internal-to-PSR-7 working assumption appears to be that "if an object contains something that is mutable, the containing object is considered mutable too." 
Is there a way to guarantee unique-ness of a Voucher code?
i had a case of someone who didnt understand immutability, so he used the constructor to change shit
&gt; you're technically correct, the best kind of correct. I appreciate that; thanks. :-) As for the rest, I'm willing to leave it for another day. 
Exactly! More specifically, quoting the Docblock from "getAttributes" in PSR-7 (http://www.php-fig.org/psr/psr-7/#psrhttpmessageserverrequestinterface): &gt; Attributes will be application and request specific, and CAN be mutable. So really, Paul, are you sure you did not overlook this docblock? It seems this use case was discussed and allowed.
I'll just say, check out Guzzle, kinda easier to use and interface with REST APIs than curl directly (not that there's anything wrong with curl if you're comfortable with it).
Not sure which one muglug used but Phan is likely the most famous. https://github.com/etsy/phan
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'd like to know which tool you used. just curious
For windows: launch-phpstorm.bat example: start "" "C:\Program Files (x86)\JetBrains\PhpStorm 2016.1\bin\PhpStorm.exe" %1 But in SourceTree for Windows I see there is no feature to set a shortcut for custom actions, so it works only from Actions -&gt; Custom Actions -&gt; Open in Phpstorm.
&gt; If you’re anything like me, you have a ton of bookmarked repositories in SourceTree that you often switch between during the course of a day. We have a monorepo with a dozen projects in it... :'(
I have used it. 1. optimisation, scaling 2. yep, but you have to remoember to disable vips cache when file is changed without changing filename ( by default lib assumes that files are immutable ). 3. we were not using imagic - fresh project 4. used library, it's fine I have not used it for complex operations etc, but it is much faster than other libs like imagic or GD. 
&gt; But in SourceTree I see there is no feature to set a shortcut for custom actions In the Windows port you mean?
Sadly, some of us don't have a choice but to develop on Windows. Whats worse is deploying on Windows / IIS. :(
Just to comment on this, I will typically have a leading underscore for private properties in most other languages. However, I avoid this in PHP as [it's discouraged in PSR-2](http://www.php-fig.org/psr/psr-2/) (not prohibited).
Didn't want to promote it, but https://github.com/vimeo/psalm is the tool I built
You did a good job at not promoting it. Just show the tool in action and wait for all of us to ask what it was :)
&gt; ✗ Spaces instead of tabs http://i.imgur.com/ZDwWZr7.gifv
Thank you for that... /u/muglug posted a link to his/her (i need to stop assuming these things on here) tool, and it honestly looks easier to set up and use. But downloading and bookmarking both of these tool, thank you!
Not really designed to be used for everyone one. If you've got a way that works then cool. I just liked the idea of an extendable library. I'm using it because our vouchers are stored behind an API request but I want to work with vouchers and their validation outside of that API code, so here I can call all the vouchers make a bag and then do my work in a very standard dry way. :) 
We use CakePHP at work. Needless to say we are trying to phase out anything Cake. Arrays... arrays everywhere 
Simple rule of thumb: any time you feel like using `echo`, `var_dump` or `print_r` ~~while developing in order to check your work~~ to check the output of a method you just wrote, write a test instead. _Edit for clarity_
What's the benefit to using this over a simpler smaller generic function? https://3v4l.org/CHH7H for example is a single function that uses `random_int` to generate the randomness for selecting an entry from the list of acceptable tokens. Slap together the number of pieces you want and their length and it is very simple and easy to use any way you want. You can even toss this under a single class in your system to isolate it. Then just use the DB to do unique constraints upon saving to make certain the same thing isn't accidentally generated twice for use.
I love PHPStorm and use it every chance I can. It works well between platforms too. On some occasions I'll use VS code, especially if I just need to take a quick look at a file or make a minor change. Anything more than that and I quickly begin to miss the intellisense that I get with PHPStorm
Yea, I just am finding it difficult to see why this is so useful. Like, the validator for the pattern is one thing. However, if the coupon codes structure changes over time you're then modifying validation to handle multiple cases. It seems so easy to just generate a token, store it in the DB, then just see if the coupon exists and hasn't been used (or whatever state it is needed) in the future. Let vouchers be literally anything, since you may want to manually make human-legible codes that have multiple uses as well. Not meaning to like, put the package down. If people find it useful then hey, that's fine. I just don't see the logistics in integrating it myself since there isn't enough benefit in it from my perspective.
I'm not sure I understand what to do with `{{ source('my-svg.svg') }}` like you suggest &gt; This will copy the text present in the SVG file and put it in your generated HTML, thus make it a proper recursive and editable DOM element. But where are we supposed to output it?
Always. Ideally every single line of your code should be covered, but finding good edge test cases and writing testable code is far more important. If you find it impossible to cover any line of code in your program, refactor so that you can. Write test as you're coding to validate each set of logic. Testable code is a huge indication of a well written code.
Please explain how tests are unable to perform both? if your tests are not preventing bugs then you are not testing the right things.
I'd love more context. Currently the API my team is building is in PHP and we aren't switching as it's almost done. I'm more curious than anything.
Thanks, I'll think about it. I dont have any source code, yet 
http://www.phptherightway.com/#testing
Agreed, use whatever language you are comfortable with until performance becomes an issue. At that point, you can start trying out different frameworks/patterns and/or languages. 
Tests should not be used as a debugging tool because you will tightly couple execution verification and correctness with its implementation. A test should only verify what is being done is correct, not how it's being done. Unit testing pushes for breaking up large portions of code into smaller pieces that perform as simple a function as possible and verifies the input/output is what's expected. When you are debugging, you are going step by step through the execution of the program and if you write a test to assert at every step, then you are testing too much. It is entirely possible to have too many tests. If you have a custom sorting function that implements a bubble sort algorithm, then I should be able to literally strip out the algorithm and replace it with something else that may be better suited for that specific task like a shell or heap sort. If I am unable to do such a replacement and have the tests pass without modification because you're asserting the algorithm in use and not just the input/output, then you are testing incorrectly. Debugging is where the programmer is looking at the implementation for understanding which is different than verifying correctness. With a proper setup, you can see the system state and set break points for closer examination wherever you like. With php, break points are often replaced with echo/var_dump/print_r/sprintf/etc unless you configure something like xdebug for your IDE to use. If you write a test to assert at each of these points, then you are testing implementation instead of correctness and therefore too much.
Without more information it is difficult to say why they would think PHP is bad for writing APIs but that Node would be better. Having used JavaScript and PHP both I can't really say why anyone would think one language would really be better suited for it than the other unless you are able to re-use the JavaScript models in the browser or something.
Please don't say that because that tests for the wrong stuff. Instead, talk about atomic units that do a single action. Say something more akin to "every time you have something do x, write a test to verify it's doing x" then expand it to "every time you explain something doing x AND y, then split that into separate pieces where one does only x and the other does only y, and write tests to verify each does x and y correctly respectively". The debugging aspects you mention are just to understand the inner workings and should not be tested/asserted and is the same as saying "every time you set a break point to step through the execution of a program write a test".
That's exactly what I meant. I'll reword.
Since you're doing quick turn-overs with a client, look into behavior driven development where you write out the business specifications with something like behat or phpspec. That will provide you with something similar to tests to verify what is going on is desired. When you discover bugs, then you can write tests to check for those or have unit tests verify the input/output of code blocks is as desired. You can tie all of these together into a single suite under phpunit if you'd like, but you don't have to and can run them separately. Don't focus on code coverage percentages from tests because they give a false sense of security. Instead, consider the core components of what's going on the points to focus on and be sure to check execution branches (eg. got an if(), then two tests are required to make sure the execution paths of both true/false are examined). If you keep your parts as small as possible, they're pretty easy to test/assert/confirm for correctness and maintain; if you go overboard or have extremely large parts of code, then you'll have problems down the road.
Many large companies, mine included, have built fully-fledged APIs in PHP. How you architect your code will have a much greater bearing on the project’s success than the language it’s written in.
Will you be writing multiple code segments separated across different methods/classes? Will you be eventually bringing those things close together? Use testing. I mean... use testing whenever you can, but if your codebase is growing even a bit larger, use unit testing. If possible, try TDD. Write a test first, then the code. Or var_dump with different hardcoded values for hours... whatever works for you.
Nodejs and its whole ecosystem is far from being stable and mature. Some people like the innovations and diversity JS brings, some prefer more stable and mature environments. Unless you are doing something overly specific, your back-end language choice is very likely to matter little, what you and your team are the most confortable with.
If you're a junior dev.. I'd say its probably provides a lot more value to have unit tests in anything you create vs a very experienced senior dev. Not saying a senior dev needs to skip on testing.. as not all developers are equal, but the time to start TDD is as a junior dev. It will pretty much become ingrained in how you develop as you progress into a senior which will definitely help you in the long run. 
I'll add writing that article to my long list of blog posts I need to make whenever I get time to start a blog :)
I hear you, I still have yet to do a tutorial on Service Objects for my team. :) Ill read it when you finish it! 
test business logic. try to cover all your conditional branches with test scenarios. the value in testing is not just that you can catch some bugs in the short term. it's that the tests assert correct behavior of the application so that when you go to make changes in the future you know you aren't breaking existing functionality. 
I recently became a maintainer for [Peridot](https://github.com/peridot-php/peridot), and we've been working hard to bring some awesome new features to life, as well as addressing some long-standing feature requests and bugs. The most exciting new feature is support for [Focused Specs](http://peridot-php.github.io/syntax.html#focused-specs), which are a fantastic way to temporarily isolate the tests you're currently working on, and were heavily inspired by [Ginkgo's Focused Specs](https://onsi.github.io/ginkgo/#focused-specs) feature. For example, if you want to focus on a single test or suite for a while, you can simply prefix them with an `f`: describe('A suite', function () { it('A spec', function () { // ... }); fit('A focused spec', function () { // ... }); }); A full [changelog](https://github.com/peridot-php/peridot/blob/master/CHANGELOG.md) is also available, if you'd like to see what else we've been up to.
A mobile app development company in NYC. We hired then to build an app to interface with our system. We built an API for the app to use. Since we are a PHP shop we built it on PHP.
It is very important to note that both frameworks are composed from decoupled modules which you can interchange and use with any or no framework. Laravel is mentioned in other answers. It's a really nice framework with an impressively ease learning curve. I would surely use it when building a website or a small app/service. It's neither good nor meant to be good for large scale, complex or enterprise apps, so it really depends on the project. While trying out ZF2, the learning curve was hard. Configuration over convention seemed to make everything an order of magnitude harder than I think it should ever be. Also, it's components felt much less cohesive than any other framework I worked with. I have to say that I probably haven't given ZF2 enough hours to possibly get to love it, but somehow everything I did with it felt as a suboptimal design and edgy architectural decision. Although, it is a great framework with a great company behind it. Symfony wouldn't spare you any time with it's learning curve either. However, after understanding how it's components work in depth, I keep getting impressed day after day. Nowdays, if you use Composer for dependency manager, there is a great chance that you are already using some of Symfony's components, directly or through another library. I'm impressed with: Great dependency-injection container. Configuration through annotations, php, or xml, or any combination. Asset management through Assetic. Incredibly powerful Form component. Easy to use and powerful Event system. Security features and and implementation of the voter design pattern. Native integration with Doctrine 2. Another thing that I want to point out is that the Symfony is the only framework that got a 5 milllion dollar investment (SensioLabs raises 5 million euros to boost the Symfony ecosystem) so you can be sure it will be kept rock solid and continually improved. Also, the community is friendly. Even core developers seem to be very accessible, and are very active in the open source community, which is a pretty valuable thing. Starting with Symfony was as tough as starting with Zend, and they are both great, you can't make a wrong or bad choice with either. However, the first one left an impression of being one of the best things that happened to PHP, the latter didn't. Source: Quora. I would solely depend on your needs the choice of frame work
Thanks for the info! 
&gt; A mobile app development company with Node developers Fixed that for you. 
SPAM
[removed]
I read the blog, it did sound pretty convincing to me. Though, I would have loved to see Selenium there. Anyways, I don't think it was meant for spamming, the author just made an attempt to share knowledge that might sound spammy to some people with extra knowledge.
Perhaps you're right. But these compiled lists of tools rarely are worth the time. It seems to be just a list of tools and a brief description. As for extra knowledge, I'm no one to judge others by what they know. I welcome everyone :)
Thanks for the answer, but when you dump it into HTML in what HTML tag do you dump it? E.g. `&lt;img src="data:{{ source('my-svg.svg') }}"&gt;`? I'm not sure it works like that, so my question is what do you do with the dumped SVG data? Where do you put it? And keep the articles coming :)
[removed]
Thanks, and yep indeed I didn't understand, but I'd rather ask than stay ignorant ;) So it turns out I didn't know at all about [the `&lt;svg&gt;` tag](http://www.w3schools.com/html/html5_svg.asp) and the fact that you can put a SVG straight into an HTML document (hopefully that link will be useful to others that didn't know about it too). I thought you always had to go through an `&lt;img&gt;` tag or `background-image:` in CSS.
Are those only CSS changes? It looks readable, which is the most important part, but the pale colors on the search result tend to make the text look blury to me, I think it would be best to have the text being darker (especially links).
&gt; Are those only CSS changes? No, there is a bunch of markup adjustments as well. Thanks for your input, I'll work on that! /edit: fix quoting
- If it's supposed to move, test that it moves. - If it's not supposed to move, test that it doesn't.
I feel an image of the test pyramid would be more useful than the image of a sinking ship.
Hi! I have question about testing. How should i write tests for remote things ? For example, FTP. I have class for work with FTP. Get, upload, delete files. Can i test that ? Thx for any answers. 
Thanks for sharing such an informative blog
&gt; on every page load Actually only the first, or when my browser, for an unknown reason, decides to reload the fonts.
On the bug report page, I think that the warning about PEAR being handled separatly takes too much space: https://pageshot.net/hoW6kkRhfrSR14km/sobak.pl But maybe this is wanted because a lot of people do wrongly report PEAR bugs in the PHP tracker ?
Same screenshot, there is not enough constrat between the white text and its green bar container, but it might be because my screen is not correctly configured, can someone test it using correctly calibrated tools?
I have tried to use Phinx at my current job but I found it quite difficult to work with. The main problem I was having was when trying to run seeds from outside of phinx's command. For instance I wanted to run seeds before my phpunit tests. I couldn't find a way of injecting classes into a Seeder that extended Phinx\Seed\AbstractSeed. On hindsight I should have created my own Seeder that implemented SeedInterface, which meant I could have done some constructor injection. If you would like to see code samples of what I was trying to do give me a pm. 
This is what an API in php can do http://symfony.com/blog/push-it-to-the-limits-symfony2-for-high-performance-needs Node is mainly recommended because of web sockets and it is able to handle lot more requests by default..but PHP when properly set up will perform just great..
You have a lot to learn and I assume you're not interested in paying for lessons, so no.
"Package affected" would benefit from search / autocomplete. It's very hard to find the right entry in that list.
Haha. I've been a professional PHP developer for 15 years and have worked for some of the biggest clients in the world. Of course I do have a lot to learn we all do but in reality here I just think you're being a toss pot because it amuses you. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*